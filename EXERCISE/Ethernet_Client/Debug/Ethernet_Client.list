
Ethernet_Client.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001163c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002fe4  080117ec  080117ec  000217ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080147d0  080147d0  00030094  2**0
                  CONTENTS
  4 .ARM          00000008  080147d0  080147d0  000247d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080147d8  080147d8  00030094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080147d8  080147d8  000247d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080147dc  080147dc  000247dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  080147e0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030094  2**0
                  CONTENTS
 10 .bss          00007d60  20000094  20000094  00030094  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20007df4  20007df4  00030094  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030094  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001fb25  00000000  00000000  000300c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000057a7  00000000  00000000  0004fbe9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001640  00000000  00000000  00055390  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001570  00000000  00000000  000569d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003052d  00000000  00000000  00057f40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00026b26  00000000  00000000  0008846d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ec867  00000000  00000000  000aef93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0019b7fa  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006214  00000000  00000000  0019b84c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000094 	.word	0x20000094
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080117d4 	.word	0x080117d4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000098 	.word	0x20000098
 80001ec:	080117d4 	.word	0x080117d4

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <MX_GPIO_Init>:
     PA10   ------> USB_OTG_FS_ID
     PA11   ------> USB_OTG_FS_DM
     PA12   ------> USB_OTG_FS_DP
*/
void MX_GPIO_Init(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b08c      	sub	sp, #48	; 0x30
 8000598:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800059a:	f107 031c 	add.w	r3, r7, #28
 800059e:	2200      	movs	r2, #0
 80005a0:	601a      	str	r2, [r3, #0]
 80005a2:	605a      	str	r2, [r3, #4]
 80005a4:	609a      	str	r2, [r3, #8]
 80005a6:	60da      	str	r2, [r3, #12]
 80005a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005aa:	2300      	movs	r3, #0
 80005ac:	61bb      	str	r3, [r7, #24]
 80005ae:	4b5b      	ldr	r3, [pc, #364]	; (800071c <MX_GPIO_Init+0x188>)
 80005b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b2:	4a5a      	ldr	r2, [pc, #360]	; (800071c <MX_GPIO_Init+0x188>)
 80005b4:	f043 0304 	orr.w	r3, r3, #4
 80005b8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ba:	4b58      	ldr	r3, [pc, #352]	; (800071c <MX_GPIO_Init+0x188>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005be:	f003 0304 	and.w	r3, r3, #4
 80005c2:	61bb      	str	r3, [r7, #24]
 80005c4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005c6:	2300      	movs	r3, #0
 80005c8:	617b      	str	r3, [r7, #20]
 80005ca:	4b54      	ldr	r3, [pc, #336]	; (800071c <MX_GPIO_Init+0x188>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ce:	4a53      	ldr	r2, [pc, #332]	; (800071c <MX_GPIO_Init+0x188>)
 80005d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005d4:	6313      	str	r3, [r2, #48]	; 0x30
 80005d6:	4b51      	ldr	r3, [pc, #324]	; (800071c <MX_GPIO_Init+0x188>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005de:	617b      	str	r3, [r7, #20]
 80005e0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e2:	2300      	movs	r3, #0
 80005e4:	613b      	str	r3, [r7, #16]
 80005e6:	4b4d      	ldr	r3, [pc, #308]	; (800071c <MX_GPIO_Init+0x188>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ea:	4a4c      	ldr	r2, [pc, #304]	; (800071c <MX_GPIO_Init+0x188>)
 80005ec:	f043 0301 	orr.w	r3, r3, #1
 80005f0:	6313      	str	r3, [r2, #48]	; 0x30
 80005f2:	4b4a      	ldr	r3, [pc, #296]	; (800071c <MX_GPIO_Init+0x188>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f6:	f003 0301 	and.w	r3, r3, #1
 80005fa:	613b      	str	r3, [r7, #16]
 80005fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005fe:	2300      	movs	r3, #0
 8000600:	60fb      	str	r3, [r7, #12]
 8000602:	4b46      	ldr	r3, [pc, #280]	; (800071c <MX_GPIO_Init+0x188>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000606:	4a45      	ldr	r2, [pc, #276]	; (800071c <MX_GPIO_Init+0x188>)
 8000608:	f043 0302 	orr.w	r3, r3, #2
 800060c:	6313      	str	r3, [r2, #48]	; 0x30
 800060e:	4b43      	ldr	r3, [pc, #268]	; (800071c <MX_GPIO_Init+0x188>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000612:	f003 0302 	and.w	r3, r3, #2
 8000616:	60fb      	str	r3, [r7, #12]
 8000618:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800061a:	2300      	movs	r3, #0
 800061c:	60bb      	str	r3, [r7, #8]
 800061e:	4b3f      	ldr	r3, [pc, #252]	; (800071c <MX_GPIO_Init+0x188>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000622:	4a3e      	ldr	r2, [pc, #248]	; (800071c <MX_GPIO_Init+0x188>)
 8000624:	f043 0308 	orr.w	r3, r3, #8
 8000628:	6313      	str	r3, [r2, #48]	; 0x30
 800062a:	4b3c      	ldr	r3, [pc, #240]	; (800071c <MX_GPIO_Init+0x188>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062e:	f003 0308 	and.w	r3, r3, #8
 8000632:	60bb      	str	r3, [r7, #8]
 8000634:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000636:	2300      	movs	r3, #0
 8000638:	607b      	str	r3, [r7, #4]
 800063a:	4b38      	ldr	r3, [pc, #224]	; (800071c <MX_GPIO_Init+0x188>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063e:	4a37      	ldr	r2, [pc, #220]	; (800071c <MX_GPIO_Init+0x188>)
 8000640:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000644:	6313      	str	r3, [r2, #48]	; 0x30
 8000646:	4b35      	ldr	r3, [pc, #212]	; (800071c <MX_GPIO_Init+0x188>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800064e:	607b      	str	r3, [r7, #4]
 8000650:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000652:	2200      	movs	r2, #0
 8000654:	f244 0181 	movw	r1, #16513	; 0x4081
 8000658:	4831      	ldr	r0, [pc, #196]	; (8000720 <MX_GPIO_Init+0x18c>)
 800065a:	f002 f819 	bl	8002690 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800065e:	2200      	movs	r2, #0
 8000660:	2140      	movs	r1, #64	; 0x40
 8000662:	4830      	ldr	r0, [pc, #192]	; (8000724 <MX_GPIO_Init+0x190>)
 8000664:	f002 f814 	bl	8002690 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000668:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800066c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800066e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000672:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000674:	2300      	movs	r3, #0
 8000676:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000678:	f107 031c 	add.w	r3, r7, #28
 800067c:	4619      	mov	r1, r3
 800067e:	482a      	ldr	r0, [pc, #168]	; (8000728 <MX_GPIO_Init+0x194>)
 8000680:	f001 fe5a 	bl	8002338 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000684:	f244 0381 	movw	r3, #16513	; 0x4081
 8000688:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800068a:	2301      	movs	r3, #1
 800068c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068e:	2300      	movs	r3, #0
 8000690:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000692:	2300      	movs	r3, #0
 8000694:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000696:	f107 031c 	add.w	r3, r7, #28
 800069a:	4619      	mov	r1, r3
 800069c:	4820      	ldr	r0, [pc, #128]	; (8000720 <MX_GPIO_Init+0x18c>)
 800069e:	f001 fe4b 	bl	8002338 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80006a2:	2340      	movs	r3, #64	; 0x40
 80006a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006a6:	2301      	movs	r3, #1
 80006a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006aa:	2300      	movs	r3, #0
 80006ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ae:	2300      	movs	r3, #0
 80006b0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80006b2:	f107 031c 	add.w	r3, r7, #28
 80006b6:	4619      	mov	r1, r3
 80006b8:	481a      	ldr	r0, [pc, #104]	; (8000724 <MX_GPIO_Init+0x190>)
 80006ba:	f001 fe3d 	bl	8002338 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80006be:	2380      	movs	r3, #128	; 0x80
 80006c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006c2:	2300      	movs	r3, #0
 80006c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c6:	2300      	movs	r3, #0
 80006c8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80006ca:	f107 031c 	add.w	r3, r7, #28
 80006ce:	4619      	mov	r1, r3
 80006d0:	4814      	ldr	r0, [pc, #80]	; (8000724 <MX_GPIO_Init+0x190>)
 80006d2:	f001 fe31 	bl	8002338 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80006d6:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80006da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006dc:	2302      	movs	r3, #2
 80006de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e0:	2300      	movs	r3, #0
 80006e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006e4:	2303      	movs	r3, #3
 80006e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80006e8:	230a      	movs	r3, #10
 80006ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ec:	f107 031c 	add.w	r3, r7, #28
 80006f0:	4619      	mov	r1, r3
 80006f2:	480e      	ldr	r0, [pc, #56]	; (800072c <MX_GPIO_Init+0x198>)
 80006f4:	f001 fe20 	bl	8002338 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80006f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80006fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006fe:	2300      	movs	r3, #0
 8000700:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000702:	2300      	movs	r3, #0
 8000704:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000706:	f107 031c 	add.w	r3, r7, #28
 800070a:	4619      	mov	r1, r3
 800070c:	4807      	ldr	r0, [pc, #28]	; (800072c <MX_GPIO_Init+0x198>)
 800070e:	f001 fe13 	bl	8002338 <HAL_GPIO_Init>

}
 8000712:	bf00      	nop
 8000714:	3730      	adds	r7, #48	; 0x30
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	40023800 	.word	0x40023800
 8000720:	40020400 	.word	0x40020400
 8000724:	40021800 	.word	0x40021800
 8000728:	40020800 	.word	0x40020800
 800072c:	40020000 	.word	0x40020000

08000730 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000734:	f000 fbe0 	bl	8000ef8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000738:	f000 f82e 	bl	8000798 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800073c:	f7ff ff2a 	bl	8000594 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000740:	f000 f9d6 	bl	8000af0 <MX_USART3_UART_Init>
  MX_LWIP_Init();
 8000744:	f003 fcba 	bl	80040bc <MX_LWIP_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		if(netif_is_link_up(&gnetif))
 8000748:	4b11      	ldr	r3, [pc, #68]	; (8000790 <main+0x60>)
 800074a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800074e:	089b      	lsrs	r3, r3, #2
 8000750:	f003 0301 	and.w	r3, r3, #1
 8000754:	b2db      	uxtb	r3, r3
 8000756:	2b00      	cmp	r3, #0
 8000758:	d00c      	beq.n	8000774 <main+0x44>
		{
			GPIOB->ODR |=  (1 << 0);
 800075a:	4b0e      	ldr	r3, [pc, #56]	; (8000794 <main+0x64>)
 800075c:	695b      	ldr	r3, [r3, #20]
 800075e:	4a0d      	ldr	r2, [pc, #52]	; (8000794 <main+0x64>)
 8000760:	f043 0301 	orr.w	r3, r3, #1
 8000764:	6153      	str	r3, [r2, #20]
			GPIOB->ODR &= ~(1 << 14);
 8000766:	4b0b      	ldr	r3, [pc, #44]	; (8000794 <main+0x64>)
 8000768:	695b      	ldr	r3, [r3, #20]
 800076a:	4a0a      	ldr	r2, [pc, #40]	; (8000794 <main+0x64>)
 800076c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000770:	6153      	str	r3, [r2, #20]
 8000772:	e7e9      	b.n	8000748 <main+0x18>
		}
		else
		{
			GPIOB->ODR &= ~(1 << 0);
 8000774:	4b07      	ldr	r3, [pc, #28]	; (8000794 <main+0x64>)
 8000776:	695b      	ldr	r3, [r3, #20]
 8000778:	4a06      	ldr	r2, [pc, #24]	; (8000794 <main+0x64>)
 800077a:	f023 0301 	bic.w	r3, r3, #1
 800077e:	6153      	str	r3, [r2, #20]
			GPIOB->ODR |=  (1 << 14);
 8000780:	4b04      	ldr	r3, [pc, #16]	; (8000794 <main+0x64>)
 8000782:	695b      	ldr	r3, [r3, #20]
 8000784:	4a03      	ldr	r2, [pc, #12]	; (8000794 <main+0x64>)
 8000786:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800078a:	6153      	str	r3, [r2, #20]
		if(netif_is_link_up(&gnetif))
 800078c:	e7dc      	b.n	8000748 <main+0x18>
 800078e:	bf00      	nop
 8000790:	200000fc 	.word	0x200000fc
 8000794:	40020400 	.word	0x40020400

08000798 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b094      	sub	sp, #80	; 0x50
 800079c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800079e:	f107 0320 	add.w	r3, r7, #32
 80007a2:	2230      	movs	r2, #48	; 0x30
 80007a4:	2100      	movs	r1, #0
 80007a6:	4618      	mov	r0, r3
 80007a8:	f00f ffbc 	bl	8010724 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007ac:	f107 030c 	add.w	r3, r7, #12
 80007b0:	2200      	movs	r2, #0
 80007b2:	601a      	str	r2, [r3, #0]
 80007b4:	605a      	str	r2, [r3, #4]
 80007b6:	609a      	str	r2, [r3, #8]
 80007b8:	60da      	str	r2, [r3, #12]
 80007ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007bc:	2300      	movs	r3, #0
 80007be:	60bb      	str	r3, [r7, #8]
 80007c0:	4b2b      	ldr	r3, [pc, #172]	; (8000870 <SystemClock_Config+0xd8>)
 80007c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c4:	4a2a      	ldr	r2, [pc, #168]	; (8000870 <SystemClock_Config+0xd8>)
 80007c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007ca:	6413      	str	r3, [r2, #64]	; 0x40
 80007cc:	4b28      	ldr	r3, [pc, #160]	; (8000870 <SystemClock_Config+0xd8>)
 80007ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007d4:	60bb      	str	r3, [r7, #8]
 80007d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007d8:	2300      	movs	r3, #0
 80007da:	607b      	str	r3, [r7, #4]
 80007dc:	4b25      	ldr	r3, [pc, #148]	; (8000874 <SystemClock_Config+0xdc>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	4a24      	ldr	r2, [pc, #144]	; (8000874 <SystemClock_Config+0xdc>)
 80007e2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007e6:	6013      	str	r3, [r2, #0]
 80007e8:	4b22      	ldr	r3, [pc, #136]	; (8000874 <SystemClock_Config+0xdc>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007f0:	607b      	str	r3, [r7, #4]
 80007f2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007f4:	2301      	movs	r3, #1
 80007f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80007f8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80007fc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007fe:	2302      	movs	r3, #2
 8000800:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000802:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000806:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000808:	2304      	movs	r3, #4
 800080a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 800080c:	23b4      	movs	r3, #180	; 0xb4
 800080e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000810:	2302      	movs	r3, #2
 8000812:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000814:	2304      	movs	r3, #4
 8000816:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000818:	f107 0320 	add.w	r3, r7, #32
 800081c:	4618      	mov	r0, r3
 800081e:	f001 ffa1 	bl	8002764 <HAL_RCC_OscConfig>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000828:	f000 f840 	bl	80008ac <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800082c:	f001 ff4a 	bl	80026c4 <HAL_PWREx_EnableOverDrive>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000836:	f000 f839 	bl	80008ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800083a:	230f      	movs	r3, #15
 800083c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800083e:	2302      	movs	r3, #2
 8000840:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000842:	2300      	movs	r3, #0
 8000844:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000846:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800084a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800084c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000850:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000852:	f107 030c 	add.w	r3, r7, #12
 8000856:	2105      	movs	r1, #5
 8000858:	4618      	mov	r0, r3
 800085a:	f002 f9fb 	bl	8002c54 <HAL_RCC_ClockConfig>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000864:	f000 f822 	bl	80008ac <Error_Handler>
  }
}
 8000868:	bf00      	nop
 800086a:	3750      	adds	r7, #80	; 0x50
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	40023800 	.word	0x40023800
 8000874:	40007000 	.word	0x40007000

08000878 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char* p, int len)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b084      	sub	sp, #16
 800087c:	af00      	add	r7, sp, #0
 800087e:	60f8      	str	r0, [r7, #12]
 8000880:	60b9      	str	r1, [r7, #8]
 8000882:	607a      	str	r2, [r7, #4]
	if(HAL_UART_Transmit(&huart3, (uint8_t*)p, len, 10)== HAL_OK) return len;
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	b29a      	uxth	r2, r3
 8000888:	230a      	movs	r3, #10
 800088a:	68b9      	ldr	r1, [r7, #8]
 800088c:	4806      	ldr	r0, [pc, #24]	; (80008a8 <_write+0x30>)
 800088e:	f002 fc4e 	bl	800312e <HAL_UART_Transmit>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d101      	bne.n	800089c <_write+0x24>
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	e000      	b.n	800089e <_write+0x26>
	else return 0;
 800089c:	2300      	movs	r3, #0
}
 800089e:	4618      	mov	r0, r3
 80008a0:	3710      	adds	r7, #16
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	200000b4 	.word	0x200000b4

080008ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008b0:	b672      	cpsid	i
}
 80008b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008b4:	e7fe      	b.n	80008b4 <Error_Handler+0x8>
	...

080008b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b083      	sub	sp, #12
 80008bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008be:	2300      	movs	r3, #0
 80008c0:	607b      	str	r3, [r7, #4]
 80008c2:	4b10      	ldr	r3, [pc, #64]	; (8000904 <HAL_MspInit+0x4c>)
 80008c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008c6:	4a0f      	ldr	r2, [pc, #60]	; (8000904 <HAL_MspInit+0x4c>)
 80008c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008cc:	6453      	str	r3, [r2, #68]	; 0x44
 80008ce:	4b0d      	ldr	r3, [pc, #52]	; (8000904 <HAL_MspInit+0x4c>)
 80008d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008d6:	607b      	str	r3, [r7, #4]
 80008d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	603b      	str	r3, [r7, #0]
 80008de:	4b09      	ldr	r3, [pc, #36]	; (8000904 <HAL_MspInit+0x4c>)
 80008e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e2:	4a08      	ldr	r2, [pc, #32]	; (8000904 <HAL_MspInit+0x4c>)
 80008e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008e8:	6413      	str	r3, [r2, #64]	; 0x40
 80008ea:	4b06      	ldr	r3, [pc, #24]	; (8000904 <HAL_MspInit+0x4c>)
 80008ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008f2:	603b      	str	r3, [r7, #0]
 80008f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008f6:	bf00      	nop
 80008f8:	370c      	adds	r7, #12
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr
 8000902:	bf00      	nop
 8000904:	40023800 	.word	0x40023800

08000908 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800090c:	e7fe      	b.n	800090c <NMI_Handler+0x4>

0800090e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800090e:	b480      	push	{r7}
 8000910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000912:	e7fe      	b.n	8000912 <HardFault_Handler+0x4>

08000914 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000918:	e7fe      	b.n	8000918 <MemManage_Handler+0x4>

0800091a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800091a:	b480      	push	{r7}
 800091c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800091e:	e7fe      	b.n	800091e <BusFault_Handler+0x4>

08000920 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000924:	e7fe      	b.n	8000924 <UsageFault_Handler+0x4>

08000926 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000926:	b480      	push	{r7}
 8000928:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800092a:	bf00      	nop
 800092c:	46bd      	mov	sp, r7
 800092e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000932:	4770      	bx	lr

08000934 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000938:	bf00      	nop
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr

08000942 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000942:	b480      	push	{r7}
 8000944:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000946:	bf00      	nop
 8000948:	46bd      	mov	sp, r7
 800094a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094e:	4770      	bx	lr

08000950 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000954:	f000 fb22 	bl	8000f9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000958:	bf00      	nop
 800095a:	bd80      	pop	{r7, pc}

0800095c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000960:	4802      	ldr	r0, [pc, #8]	; (800096c <USART3_IRQHandler+0x10>)
 8000962:	f002 fc77 	bl	8003254 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000966:	bf00      	nop
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	200000b4 	.word	0x200000b4

08000970 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
	return 1;
 8000974:	2301      	movs	r3, #1
}
 8000976:	4618      	mov	r0, r3
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr

08000980 <_kill>:

int _kill(int pid, int sig)
{
 8000980:	b480      	push	{r7}
 8000982:	b083      	sub	sp, #12
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
 8000988:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800098a:	4b05      	ldr	r3, [pc, #20]	; (80009a0 <_kill+0x20>)
 800098c:	2216      	movs	r2, #22
 800098e:	601a      	str	r2, [r3, #0]
	return -1;
 8000990:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000994:	4618      	mov	r0, r3
 8000996:	370c      	adds	r7, #12
 8000998:	46bd      	mov	sp, r7
 800099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099e:	4770      	bx	lr
 80009a0:	20007de4 	.word	0x20007de4

080009a4 <_exit>:

void _exit (int status)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80009ac:	f04f 31ff 	mov.w	r1, #4294967295
 80009b0:	6878      	ldr	r0, [r7, #4]
 80009b2:	f7ff ffe5 	bl	8000980 <_kill>
	while (1) {}		/* Make sure we hang here */
 80009b6:	e7fe      	b.n	80009b6 <_exit+0x12>

080009b8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b086      	sub	sp, #24
 80009bc:	af00      	add	r7, sp, #0
 80009be:	60f8      	str	r0, [r7, #12]
 80009c0:	60b9      	str	r1, [r7, #8]
 80009c2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009c4:	2300      	movs	r3, #0
 80009c6:	617b      	str	r3, [r7, #20]
 80009c8:	e00a      	b.n	80009e0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80009ca:	f3af 8000 	nop.w
 80009ce:	4601      	mov	r1, r0
 80009d0:	68bb      	ldr	r3, [r7, #8]
 80009d2:	1c5a      	adds	r2, r3, #1
 80009d4:	60ba      	str	r2, [r7, #8]
 80009d6:	b2ca      	uxtb	r2, r1
 80009d8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009da:	697b      	ldr	r3, [r7, #20]
 80009dc:	3301      	adds	r3, #1
 80009de:	617b      	str	r3, [r7, #20]
 80009e0:	697a      	ldr	r2, [r7, #20]
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	429a      	cmp	r2, r3
 80009e6:	dbf0      	blt.n	80009ca <_read+0x12>
	}

return len;
 80009e8:	687b      	ldr	r3, [r7, #4]
}
 80009ea:	4618      	mov	r0, r3
 80009ec:	3718      	adds	r7, #24
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}

080009f2 <_close>:
	}
	return len;
}

int _close(int file)
{
 80009f2:	b480      	push	{r7}
 80009f4:	b083      	sub	sp, #12
 80009f6:	af00      	add	r7, sp, #0
 80009f8:	6078      	str	r0, [r7, #4]
	return -1;
 80009fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009fe:	4618      	mov	r0, r3
 8000a00:	370c      	adds	r7, #12
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr

08000a0a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a0a:	b480      	push	{r7}
 8000a0c:	b083      	sub	sp, #12
 8000a0e:	af00      	add	r7, sp, #0
 8000a10:	6078      	str	r0, [r7, #4]
 8000a12:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000a14:	683b      	ldr	r3, [r7, #0]
 8000a16:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a1a:	605a      	str	r2, [r3, #4]
	return 0;
 8000a1c:	2300      	movs	r3, #0
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	370c      	adds	r7, #12
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr

08000a2a <_isatty>:

int _isatty(int file)
{
 8000a2a:	b480      	push	{r7}
 8000a2c:	b083      	sub	sp, #12
 8000a2e:	af00      	add	r7, sp, #0
 8000a30:	6078      	str	r0, [r7, #4]
	return 1;
 8000a32:	2301      	movs	r3, #1
}
 8000a34:	4618      	mov	r0, r3
 8000a36:	370c      	adds	r7, #12
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3e:	4770      	bx	lr

08000a40 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b085      	sub	sp, #20
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	60f8      	str	r0, [r7, #12]
 8000a48:	60b9      	str	r1, [r7, #8]
 8000a4a:	607a      	str	r2, [r7, #4]
	return 0;
 8000a4c:	2300      	movs	r3, #0
}
 8000a4e:	4618      	mov	r0, r3
 8000a50:	3714      	adds	r7, #20
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr
	...

08000a5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b087      	sub	sp, #28
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a64:	4a14      	ldr	r2, [pc, #80]	; (8000ab8 <_sbrk+0x5c>)
 8000a66:	4b15      	ldr	r3, [pc, #84]	; (8000abc <_sbrk+0x60>)
 8000a68:	1ad3      	subs	r3, r2, r3
 8000a6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a6c:	697b      	ldr	r3, [r7, #20]
 8000a6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a70:	4b13      	ldr	r3, [pc, #76]	; (8000ac0 <_sbrk+0x64>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d102      	bne.n	8000a7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a78:	4b11      	ldr	r3, [pc, #68]	; (8000ac0 <_sbrk+0x64>)
 8000a7a:	4a12      	ldr	r2, [pc, #72]	; (8000ac4 <_sbrk+0x68>)
 8000a7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a7e:	4b10      	ldr	r3, [pc, #64]	; (8000ac0 <_sbrk+0x64>)
 8000a80:	681a      	ldr	r2, [r3, #0]
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	4413      	add	r3, r2
 8000a86:	693a      	ldr	r2, [r7, #16]
 8000a88:	429a      	cmp	r2, r3
 8000a8a:	d205      	bcs.n	8000a98 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000a8c:	4b0e      	ldr	r3, [pc, #56]	; (8000ac8 <_sbrk+0x6c>)
 8000a8e:	220c      	movs	r2, #12
 8000a90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a92:	f04f 33ff 	mov.w	r3, #4294967295
 8000a96:	e009      	b.n	8000aac <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a98:	4b09      	ldr	r3, [pc, #36]	; (8000ac0 <_sbrk+0x64>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a9e:	4b08      	ldr	r3, [pc, #32]	; (8000ac0 <_sbrk+0x64>)
 8000aa0:	681a      	ldr	r2, [r3, #0]
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	4413      	add	r3, r2
 8000aa6:	4a06      	ldr	r2, [pc, #24]	; (8000ac0 <_sbrk+0x64>)
 8000aa8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000aaa:	68fb      	ldr	r3, [r7, #12]
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	371c      	adds	r7, #28
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr
 8000ab8:	20030000 	.word	0x20030000
 8000abc:	00000400 	.word	0x00000400
 8000ac0:	200000b0 	.word	0x200000b0
 8000ac4:	20007df8 	.word	0x20007df8
 8000ac8:	20007de4 	.word	0x20007de4

08000acc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ad0:	4b06      	ldr	r3, [pc, #24]	; (8000aec <SystemInit+0x20>)
 8000ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ad6:	4a05      	ldr	r2, [pc, #20]	; (8000aec <SystemInit+0x20>)
 8000ad8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000adc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ae0:	bf00      	nop
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop
 8000aec:	e000ed00 	.word	0xe000ed00

08000af0 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000af4:	4b11      	ldr	r3, [pc, #68]	; (8000b3c <MX_USART3_UART_Init+0x4c>)
 8000af6:	4a12      	ldr	r2, [pc, #72]	; (8000b40 <MX_USART3_UART_Init+0x50>)
 8000af8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000afa:	4b10      	ldr	r3, [pc, #64]	; (8000b3c <MX_USART3_UART_Init+0x4c>)
 8000afc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b00:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b02:	4b0e      	ldr	r3, [pc, #56]	; (8000b3c <MX_USART3_UART_Init+0x4c>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b08:	4b0c      	ldr	r3, [pc, #48]	; (8000b3c <MX_USART3_UART_Init+0x4c>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b0e:	4b0b      	ldr	r3, [pc, #44]	; (8000b3c <MX_USART3_UART_Init+0x4c>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b14:	4b09      	ldr	r3, [pc, #36]	; (8000b3c <MX_USART3_UART_Init+0x4c>)
 8000b16:	220c      	movs	r2, #12
 8000b18:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b1a:	4b08      	ldr	r3, [pc, #32]	; (8000b3c <MX_USART3_UART_Init+0x4c>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b20:	4b06      	ldr	r3, [pc, #24]	; (8000b3c <MX_USART3_UART_Init+0x4c>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b26:	4805      	ldr	r0, [pc, #20]	; (8000b3c <MX_USART3_UART_Init+0x4c>)
 8000b28:	f002 fab4 	bl	8003094 <HAL_UART_Init>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000b32:	f7ff febb 	bl	80008ac <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b36:	bf00      	nop
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	200000b4 	.word	0x200000b4
 8000b40:	40004800 	.word	0x40004800

08000b44 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b08a      	sub	sp, #40	; 0x28
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b4c:	f107 0314 	add.w	r3, r7, #20
 8000b50:	2200      	movs	r2, #0
 8000b52:	601a      	str	r2, [r3, #0]
 8000b54:	605a      	str	r2, [r3, #4]
 8000b56:	609a      	str	r2, [r3, #8]
 8000b58:	60da      	str	r2, [r3, #12]
 8000b5a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a1d      	ldr	r2, [pc, #116]	; (8000bd8 <HAL_UART_MspInit+0x94>)
 8000b62:	4293      	cmp	r3, r2
 8000b64:	d134      	bne.n	8000bd0 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b66:	2300      	movs	r3, #0
 8000b68:	613b      	str	r3, [r7, #16]
 8000b6a:	4b1c      	ldr	r3, [pc, #112]	; (8000bdc <HAL_UART_MspInit+0x98>)
 8000b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6e:	4a1b      	ldr	r2, [pc, #108]	; (8000bdc <HAL_UART_MspInit+0x98>)
 8000b70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b74:	6413      	str	r3, [r2, #64]	; 0x40
 8000b76:	4b19      	ldr	r3, [pc, #100]	; (8000bdc <HAL_UART_MspInit+0x98>)
 8000b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b7e:	613b      	str	r3, [r7, #16]
 8000b80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b82:	2300      	movs	r3, #0
 8000b84:	60fb      	str	r3, [r7, #12]
 8000b86:	4b15      	ldr	r3, [pc, #84]	; (8000bdc <HAL_UART_MspInit+0x98>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	4a14      	ldr	r2, [pc, #80]	; (8000bdc <HAL_UART_MspInit+0x98>)
 8000b8c:	f043 0308 	orr.w	r3, r3, #8
 8000b90:	6313      	str	r3, [r2, #48]	; 0x30
 8000b92:	4b12      	ldr	r3, [pc, #72]	; (8000bdc <HAL_UART_MspInit+0x98>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b96:	f003 0308 	and.w	r3, r3, #8
 8000b9a:	60fb      	str	r3, [r7, #12]
 8000b9c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000b9e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ba2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba4:	2302      	movs	r3, #2
 8000ba6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bac:	2303      	movs	r3, #3
 8000bae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000bb0:	2307      	movs	r3, #7
 8000bb2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bb4:	f107 0314 	add.w	r3, r7, #20
 8000bb8:	4619      	mov	r1, r3
 8000bba:	4809      	ldr	r0, [pc, #36]	; (8000be0 <HAL_UART_MspInit+0x9c>)
 8000bbc:	f001 fbbc 	bl	8002338 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	2027      	movs	r0, #39	; 0x27
 8000bc6:	f000 fb08 	bl	80011da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000bca:	2027      	movs	r0, #39	; 0x27
 8000bcc:	f000 fb21 	bl	8001212 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000bd0:	bf00      	nop
 8000bd2:	3728      	adds	r7, #40	; 0x28
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	40004800 	.word	0x40004800
 8000bdc:	40023800 	.word	0x40023800
 8000be0:	40020c00 	.word	0x40020c00

08000be4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000be4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c1c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000be8:	480d      	ldr	r0, [pc, #52]	; (8000c20 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000bea:	490e      	ldr	r1, [pc, #56]	; (8000c24 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000bec:	4a0e      	ldr	r2, [pc, #56]	; (8000c28 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bf0:	e002      	b.n	8000bf8 <LoopCopyDataInit>

08000bf2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bf2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bf4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bf6:	3304      	adds	r3, #4

08000bf8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bf8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bfa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bfc:	d3f9      	bcc.n	8000bf2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bfe:	4a0b      	ldr	r2, [pc, #44]	; (8000c2c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c00:	4c0b      	ldr	r4, [pc, #44]	; (8000c30 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c04:	e001      	b.n	8000c0a <LoopFillZerobss>

08000c06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c08:	3204      	adds	r2, #4

08000c0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c0c:	d3fb      	bcc.n	8000c06 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c0e:	f7ff ff5d 	bl	8000acc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c12:	f00f fd45 	bl	80106a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c16:	f7ff fd8b 	bl	8000730 <main>
  bx  lr    
 8000c1a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000c1c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000c20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c24:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8000c28:	080147e0 	.word	0x080147e0
  ldr r2, =_sbss
 8000c2c:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 8000c30:	20007df4 	.word	0x20007df4

08000c34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c34:	e7fe      	b.n	8000c34 <ADC_IRQHandler>

08000c36 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8000c36:	b480      	push	{r7}
 8000c38:	b083      	sub	sp, #12
 8000c3a:	af00      	add	r7, sp, #0
 8000c3c:	6078      	str	r0, [r7, #4]
 8000c3e:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d00b      	beq.n	8000c5e <LAN8742_RegisterBusIO+0x28>
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	68db      	ldr	r3, [r3, #12]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d007      	beq.n	8000c5e <LAN8742_RegisterBusIO+0x28>
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	689b      	ldr	r3, [r3, #8]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d003      	beq.n	8000c5e <LAN8742_RegisterBusIO+0x28>
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	691b      	ldr	r3, [r3, #16]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d102      	bne.n	8000c64 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8000c5e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c62:	e014      	b.n	8000c8e <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	681a      	ldr	r2, [r3, #0]
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	685a      	ldr	r2, [r3, #4]
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	68da      	ldr	r2, [r3, #12]
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	689a      	ldr	r2, [r3, #8]
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	691a      	ldr	r2, [r3, #16]
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8000c8c:	2300      	movs	r3, #0
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	370c      	adds	r7, #12
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr

08000c9a <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8000c9a:	b580      	push	{r7, lr}
 8000c9c:	b086      	sub	sp, #24
 8000c9e:	af00      	add	r7, sp, #0
 8000ca0:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	60fb      	str	r3, [r7, #12]
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	60bb      	str	r3, [r7, #8]
 8000caa:	2300      	movs	r3, #0
 8000cac:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	685b      	ldr	r3, [r3, #4]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d17c      	bne.n	8000db4 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	689b      	ldr	r3, [r3, #8]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d002      	beq.n	8000cc8 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	689b      	ldr	r3, [r3, #8]
 8000cc6:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	2220      	movs	r2, #32
 8000ccc:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000cce:	2300      	movs	r3, #0
 8000cd0:	617b      	str	r3, [r7, #20]
 8000cd2:	e01c      	b.n	8000d0e <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	695b      	ldr	r3, [r3, #20]
 8000cd8:	f107 0208 	add.w	r2, r7, #8
 8000cdc:	2112      	movs	r1, #18
 8000cde:	6978      	ldr	r0, [r7, #20]
 8000ce0:	4798      	blx	r3
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	da03      	bge.n	8000cf0 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8000ce8:	f06f 0304 	mvn.w	r3, #4
 8000cec:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8000cee:	e00b      	b.n	8000d08 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8000cf0:	68bb      	ldr	r3, [r7, #8]
 8000cf2:	f003 031f 	and.w	r3, r3, #31
 8000cf6:	697a      	ldr	r2, [r7, #20]
 8000cf8:	429a      	cmp	r2, r3
 8000cfa:	d105      	bne.n	8000d08 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	697a      	ldr	r2, [r7, #20]
 8000d00:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8000d02:	2300      	movs	r3, #0
 8000d04:	613b      	str	r3, [r7, #16]
         break;
 8000d06:	e005      	b.n	8000d14 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	3301      	adds	r3, #1
 8000d0c:	617b      	str	r3, [r7, #20]
 8000d0e:	697b      	ldr	r3, [r7, #20]
 8000d10:	2b1f      	cmp	r3, #31
 8000d12:	d9df      	bls.n	8000cd4 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	2b1f      	cmp	r3, #31
 8000d1a:	d902      	bls.n	8000d22 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8000d1c:	f06f 0302 	mvn.w	r3, #2
 8000d20:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8000d22:	693b      	ldr	r3, [r7, #16]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d145      	bne.n	8000db4 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	691b      	ldr	r3, [r3, #16]
 8000d2c:	687a      	ldr	r2, [r7, #4]
 8000d2e:	6810      	ldr	r0, [r2, #0]
 8000d30:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000d34:	2100      	movs	r1, #0
 8000d36:	4798      	blx	r3
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	db37      	blt.n	8000dae <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	695b      	ldr	r3, [r3, #20]
 8000d42:	687a      	ldr	r2, [r7, #4]
 8000d44:	6810      	ldr	r0, [r2, #0]
 8000d46:	f107 0208 	add.w	r2, r7, #8
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	4798      	blx	r3
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	db28      	blt.n	8000da6 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	699b      	ldr	r3, [r3, #24]
 8000d58:	4798      	blx	r3
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8000d5e:	e01c      	b.n	8000d9a <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	699b      	ldr	r3, [r3, #24]
 8000d64:	4798      	blx	r3
 8000d66:	4603      	mov	r3, r0
 8000d68:	461a      	mov	r2, r3
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	1ad3      	subs	r3, r2, r3
 8000d6e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000d72:	d80e      	bhi.n	8000d92 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	695b      	ldr	r3, [r3, #20]
 8000d78:	687a      	ldr	r2, [r7, #4]
 8000d7a:	6810      	ldr	r0, [r2, #0]
 8000d7c:	f107 0208 	add.w	r2, r7, #8
 8000d80:	2100      	movs	r1, #0
 8000d82:	4798      	blx	r3
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	da07      	bge.n	8000d9a <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8000d8a:	f06f 0304 	mvn.w	r3, #4
 8000d8e:	613b      	str	r3, [r7, #16]
                 break;
 8000d90:	e010      	b.n	8000db4 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8000d92:	f06f 0301 	mvn.w	r3, #1
 8000d96:	613b      	str	r3, [r7, #16]
               break;
 8000d98:	e00c      	b.n	8000db4 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8000d9a:	68bb      	ldr	r3, [r7, #8]
 8000d9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d1dd      	bne.n	8000d60 <LAN8742_Init+0xc6>
 8000da4:	e006      	b.n	8000db4 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8000da6:	f06f 0304 	mvn.w	r3, #4
 8000daa:	613b      	str	r3, [r7, #16]
 8000dac:	e002      	b.n	8000db4 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8000dae:	f06f 0303 	mvn.w	r3, #3
 8000db2:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8000db4:	693b      	ldr	r3, [r7, #16]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d112      	bne.n	8000de0 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	699b      	ldr	r3, [r3, #24]
 8000dbe:	4798      	blx	r3
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8000dc4:	bf00      	nop
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	699b      	ldr	r3, [r3, #24]
 8000dca:	4798      	blx	r3
 8000dcc:	4603      	mov	r3, r0
 8000dce:	461a      	mov	r2, r3
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	1ad3      	subs	r3, r2, r3
 8000dd4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000dd8:	d9f5      	bls.n	8000dc6 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	2201      	movs	r2, #1
 8000dde:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8000de0:	693b      	ldr	r3, [r7, #16]
 }
 8000de2:	4618      	mov	r0, r3
 8000de4:	3718      	adds	r7, #24
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}

08000dea <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8000dea:	b580      	push	{r7, lr}
 8000dec:	b084      	sub	sp, #16
 8000dee:	af00      	add	r7, sp, #0
 8000df0:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8000df2:	2300      	movs	r3, #0
 8000df4:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	695b      	ldr	r3, [r3, #20]
 8000dfa:	687a      	ldr	r2, [r7, #4]
 8000dfc:	6810      	ldr	r0, [r2, #0]
 8000dfe:	f107 020c 	add.w	r2, r7, #12
 8000e02:	2101      	movs	r1, #1
 8000e04:	4798      	blx	r3
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	da02      	bge.n	8000e12 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000e0c:	f06f 0304 	mvn.w	r3, #4
 8000e10:	e06e      	b.n	8000ef0 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	695b      	ldr	r3, [r3, #20]
 8000e16:	687a      	ldr	r2, [r7, #4]
 8000e18:	6810      	ldr	r0, [r2, #0]
 8000e1a:	f107 020c 	add.w	r2, r7, #12
 8000e1e:	2101      	movs	r1, #1
 8000e20:	4798      	blx	r3
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	da02      	bge.n	8000e2e <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000e28:	f06f 0304 	mvn.w	r3, #4
 8000e2c:	e060      	b.n	8000ef0 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	f003 0304 	and.w	r3, r3, #4
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d101      	bne.n	8000e3c <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8000e38:	2301      	movs	r3, #1
 8000e3a:	e059      	b.n	8000ef0 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	695b      	ldr	r3, [r3, #20]
 8000e40:	687a      	ldr	r2, [r7, #4]
 8000e42:	6810      	ldr	r0, [r2, #0]
 8000e44:	f107 020c 	add.w	r2, r7, #12
 8000e48:	2100      	movs	r1, #0
 8000e4a:	4798      	blx	r3
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	da02      	bge.n	8000e58 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000e52:	f06f 0304 	mvn.w	r3, #4
 8000e56:	e04b      	b.n	8000ef0 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d11b      	bne.n	8000e9a <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d006      	beq.n	8000e7a <LAN8742_GetLinkState+0x90>
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000e76:	2302      	movs	r3, #2
 8000e78:	e03a      	b.n	8000ef0 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000e84:	2303      	movs	r3, #3
 8000e86:	e033      	b.n	8000ef0 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000e92:	2304      	movs	r3, #4
 8000e94:	e02c      	b.n	8000ef0 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000e96:	2305      	movs	r3, #5
 8000e98:	e02a      	b.n	8000ef0 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	695b      	ldr	r3, [r3, #20]
 8000e9e:	687a      	ldr	r2, [r7, #4]
 8000ea0:	6810      	ldr	r0, [r2, #0]
 8000ea2:	f107 020c 	add.w	r2, r7, #12
 8000ea6:	211f      	movs	r1, #31
 8000ea8:	4798      	blx	r3
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	da02      	bge.n	8000eb6 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8000eb0:	f06f 0304 	mvn.w	r3, #4
 8000eb4:	e01c      	b.n	8000ef0 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d101      	bne.n	8000ec4 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8000ec0:	2306      	movs	r3, #6
 8000ec2:	e015      	b.n	8000ef0 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	f003 031c 	and.w	r3, r3, #28
 8000eca:	2b18      	cmp	r3, #24
 8000ecc:	d101      	bne.n	8000ed2 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000ece:	2302      	movs	r3, #2
 8000ed0:	e00e      	b.n	8000ef0 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	f003 031c 	and.w	r3, r3, #28
 8000ed8:	2b08      	cmp	r3, #8
 8000eda:	d101      	bne.n	8000ee0 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000edc:	2303      	movs	r3, #3
 8000ede:	e007      	b.n	8000ef0 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	f003 031c 	and.w	r3, r3, #28
 8000ee6:	2b14      	cmp	r3, #20
 8000ee8:	d101      	bne.n	8000eee <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000eea:	2304      	movs	r3, #4
 8000eec:	e000      	b.n	8000ef0 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000eee:	2305      	movs	r3, #5
    }				
  }
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	3710      	adds	r7, #16
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}

08000ef8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000efc:	4b0e      	ldr	r3, [pc, #56]	; (8000f38 <HAL_Init+0x40>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a0d      	ldr	r2, [pc, #52]	; (8000f38 <HAL_Init+0x40>)
 8000f02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f06:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f08:	4b0b      	ldr	r3, [pc, #44]	; (8000f38 <HAL_Init+0x40>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a0a      	ldr	r2, [pc, #40]	; (8000f38 <HAL_Init+0x40>)
 8000f0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f12:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f14:	4b08      	ldr	r3, [pc, #32]	; (8000f38 <HAL_Init+0x40>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a07      	ldr	r2, [pc, #28]	; (8000f38 <HAL_Init+0x40>)
 8000f1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f20:	2003      	movs	r0, #3
 8000f22:	f000 f94f 	bl	80011c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f26:	2000      	movs	r0, #0
 8000f28:	f000 f808 	bl	8000f3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f2c:	f7ff fcc4 	bl	80008b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f30:	2300      	movs	r3, #0
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	40023c00 	.word	0x40023c00

08000f3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f44:	4b12      	ldr	r3, [pc, #72]	; (8000f90 <HAL_InitTick+0x54>)
 8000f46:	681a      	ldr	r2, [r3, #0]
 8000f48:	4b12      	ldr	r3, [pc, #72]	; (8000f94 <HAL_InitTick+0x58>)
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f52:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f56:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f000 f967 	bl	800122e <HAL_SYSTICK_Config>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f66:	2301      	movs	r3, #1
 8000f68:	e00e      	b.n	8000f88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2b0f      	cmp	r3, #15
 8000f6e:	d80a      	bhi.n	8000f86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f70:	2200      	movs	r2, #0
 8000f72:	6879      	ldr	r1, [r7, #4]
 8000f74:	f04f 30ff 	mov.w	r0, #4294967295
 8000f78:	f000 f92f 	bl	80011da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f7c:	4a06      	ldr	r2, [pc, #24]	; (8000f98 <HAL_InitTick+0x5c>)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f82:	2300      	movs	r3, #0
 8000f84:	e000      	b.n	8000f88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f86:	2301      	movs	r3, #1
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	3708      	adds	r7, #8
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	20000000 	.word	0x20000000
 8000f94:	20000008 	.word	0x20000008
 8000f98:	20000004 	.word	0x20000004

08000f9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fa0:	4b06      	ldr	r3, [pc, #24]	; (8000fbc <HAL_IncTick+0x20>)
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	461a      	mov	r2, r3
 8000fa6:	4b06      	ldr	r3, [pc, #24]	; (8000fc0 <HAL_IncTick+0x24>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4413      	add	r3, r2
 8000fac:	4a04      	ldr	r2, [pc, #16]	; (8000fc0 <HAL_IncTick+0x24>)
 8000fae:	6013      	str	r3, [r2, #0]
}
 8000fb0:	bf00      	nop
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	20000008 	.word	0x20000008
 8000fc0:	200000f8 	.word	0x200000f8

08000fc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  return uwTick;
 8000fc8:	4b03      	ldr	r3, [pc, #12]	; (8000fd8 <HAL_GetTick+0x14>)
 8000fca:	681b      	ldr	r3, [r3, #0]
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	200000f8 	.word	0x200000f8

08000fdc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b084      	sub	sp, #16
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fe4:	f7ff ffee 	bl	8000fc4 <HAL_GetTick>
 8000fe8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ff4:	d005      	beq.n	8001002 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ff6:	4b0a      	ldr	r3, [pc, #40]	; (8001020 <HAL_Delay+0x44>)
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	461a      	mov	r2, r3
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	4413      	add	r3, r2
 8001000:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001002:	bf00      	nop
 8001004:	f7ff ffde 	bl	8000fc4 <HAL_GetTick>
 8001008:	4602      	mov	r2, r0
 800100a:	68bb      	ldr	r3, [r7, #8]
 800100c:	1ad3      	subs	r3, r2, r3
 800100e:	68fa      	ldr	r2, [r7, #12]
 8001010:	429a      	cmp	r2, r3
 8001012:	d8f7      	bhi.n	8001004 <HAL_Delay+0x28>
  {
  }
}
 8001014:	bf00      	nop
 8001016:	bf00      	nop
 8001018:	3710      	adds	r7, #16
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	20000008 	.word	0x20000008

08001024 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001024:	b480      	push	{r7}
 8001026:	b085      	sub	sp, #20
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	f003 0307 	and.w	r3, r3, #7
 8001032:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001034:	4b0c      	ldr	r3, [pc, #48]	; (8001068 <__NVIC_SetPriorityGrouping+0x44>)
 8001036:	68db      	ldr	r3, [r3, #12]
 8001038:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800103a:	68ba      	ldr	r2, [r7, #8]
 800103c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001040:	4013      	ands	r3, r2
 8001042:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001048:	68bb      	ldr	r3, [r7, #8]
 800104a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800104c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001050:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001054:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001056:	4a04      	ldr	r2, [pc, #16]	; (8001068 <__NVIC_SetPriorityGrouping+0x44>)
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	60d3      	str	r3, [r2, #12]
}
 800105c:	bf00      	nop
 800105e:	3714      	adds	r7, #20
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr
 8001068:	e000ed00 	.word	0xe000ed00

0800106c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001070:	4b04      	ldr	r3, [pc, #16]	; (8001084 <__NVIC_GetPriorityGrouping+0x18>)
 8001072:	68db      	ldr	r3, [r3, #12]
 8001074:	0a1b      	lsrs	r3, r3, #8
 8001076:	f003 0307 	and.w	r3, r3, #7
}
 800107a:	4618      	mov	r0, r3
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr
 8001084:	e000ed00 	.word	0xe000ed00

08001088 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
 800108e:	4603      	mov	r3, r0
 8001090:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001096:	2b00      	cmp	r3, #0
 8001098:	db0b      	blt.n	80010b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800109a:	79fb      	ldrb	r3, [r7, #7]
 800109c:	f003 021f 	and.w	r2, r3, #31
 80010a0:	4907      	ldr	r1, [pc, #28]	; (80010c0 <__NVIC_EnableIRQ+0x38>)
 80010a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a6:	095b      	lsrs	r3, r3, #5
 80010a8:	2001      	movs	r0, #1
 80010aa:	fa00 f202 	lsl.w	r2, r0, r2
 80010ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010b2:	bf00      	nop
 80010b4:	370c      	adds	r7, #12
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	e000e100 	.word	0xe000e100

080010c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	4603      	mov	r3, r0
 80010cc:	6039      	str	r1, [r7, #0]
 80010ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	db0a      	blt.n	80010ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	b2da      	uxtb	r2, r3
 80010dc:	490c      	ldr	r1, [pc, #48]	; (8001110 <__NVIC_SetPriority+0x4c>)
 80010de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e2:	0112      	lsls	r2, r2, #4
 80010e4:	b2d2      	uxtb	r2, r2
 80010e6:	440b      	add	r3, r1
 80010e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010ec:	e00a      	b.n	8001104 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	b2da      	uxtb	r2, r3
 80010f2:	4908      	ldr	r1, [pc, #32]	; (8001114 <__NVIC_SetPriority+0x50>)
 80010f4:	79fb      	ldrb	r3, [r7, #7]
 80010f6:	f003 030f 	and.w	r3, r3, #15
 80010fa:	3b04      	subs	r3, #4
 80010fc:	0112      	lsls	r2, r2, #4
 80010fe:	b2d2      	uxtb	r2, r2
 8001100:	440b      	add	r3, r1
 8001102:	761a      	strb	r2, [r3, #24]
}
 8001104:	bf00      	nop
 8001106:	370c      	adds	r7, #12
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr
 8001110:	e000e100 	.word	0xe000e100
 8001114:	e000ed00 	.word	0xe000ed00

08001118 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001118:	b480      	push	{r7}
 800111a:	b089      	sub	sp, #36	; 0x24
 800111c:	af00      	add	r7, sp, #0
 800111e:	60f8      	str	r0, [r7, #12]
 8001120:	60b9      	str	r1, [r7, #8]
 8001122:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	f003 0307 	and.w	r3, r3, #7
 800112a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800112c:	69fb      	ldr	r3, [r7, #28]
 800112e:	f1c3 0307 	rsb	r3, r3, #7
 8001132:	2b04      	cmp	r3, #4
 8001134:	bf28      	it	cs
 8001136:	2304      	movcs	r3, #4
 8001138:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	3304      	adds	r3, #4
 800113e:	2b06      	cmp	r3, #6
 8001140:	d902      	bls.n	8001148 <NVIC_EncodePriority+0x30>
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	3b03      	subs	r3, #3
 8001146:	e000      	b.n	800114a <NVIC_EncodePriority+0x32>
 8001148:	2300      	movs	r3, #0
 800114a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800114c:	f04f 32ff 	mov.w	r2, #4294967295
 8001150:	69bb      	ldr	r3, [r7, #24]
 8001152:	fa02 f303 	lsl.w	r3, r2, r3
 8001156:	43da      	mvns	r2, r3
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	401a      	ands	r2, r3
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001160:	f04f 31ff 	mov.w	r1, #4294967295
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	fa01 f303 	lsl.w	r3, r1, r3
 800116a:	43d9      	mvns	r1, r3
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001170:	4313      	orrs	r3, r2
         );
}
 8001172:	4618      	mov	r0, r3
 8001174:	3724      	adds	r7, #36	; 0x24
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
	...

08001180 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	3b01      	subs	r3, #1
 800118c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001190:	d301      	bcc.n	8001196 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001192:	2301      	movs	r3, #1
 8001194:	e00f      	b.n	80011b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001196:	4a0a      	ldr	r2, [pc, #40]	; (80011c0 <SysTick_Config+0x40>)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	3b01      	subs	r3, #1
 800119c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800119e:	210f      	movs	r1, #15
 80011a0:	f04f 30ff 	mov.w	r0, #4294967295
 80011a4:	f7ff ff8e 	bl	80010c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011a8:	4b05      	ldr	r3, [pc, #20]	; (80011c0 <SysTick_Config+0x40>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011ae:	4b04      	ldr	r3, [pc, #16]	; (80011c0 <SysTick_Config+0x40>)
 80011b0:	2207      	movs	r2, #7
 80011b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011b4:	2300      	movs	r3, #0
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	e000e010 	.word	0xe000e010

080011c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011cc:	6878      	ldr	r0, [r7, #4]
 80011ce:	f7ff ff29 	bl	8001024 <__NVIC_SetPriorityGrouping>
}
 80011d2:	bf00      	nop
 80011d4:	3708      	adds	r7, #8
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}

080011da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011da:	b580      	push	{r7, lr}
 80011dc:	b086      	sub	sp, #24
 80011de:	af00      	add	r7, sp, #0
 80011e0:	4603      	mov	r3, r0
 80011e2:	60b9      	str	r1, [r7, #8]
 80011e4:	607a      	str	r2, [r7, #4]
 80011e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011e8:	2300      	movs	r3, #0
 80011ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011ec:	f7ff ff3e 	bl	800106c <__NVIC_GetPriorityGrouping>
 80011f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011f2:	687a      	ldr	r2, [r7, #4]
 80011f4:	68b9      	ldr	r1, [r7, #8]
 80011f6:	6978      	ldr	r0, [r7, #20]
 80011f8:	f7ff ff8e 	bl	8001118 <NVIC_EncodePriority>
 80011fc:	4602      	mov	r2, r0
 80011fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001202:	4611      	mov	r1, r2
 8001204:	4618      	mov	r0, r3
 8001206:	f7ff ff5d 	bl	80010c4 <__NVIC_SetPriority>
}
 800120a:	bf00      	nop
 800120c:	3718      	adds	r7, #24
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}

08001212 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001212:	b580      	push	{r7, lr}
 8001214:	b082      	sub	sp, #8
 8001216:	af00      	add	r7, sp, #0
 8001218:	4603      	mov	r3, r0
 800121a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800121c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001220:	4618      	mov	r0, r3
 8001222:	f7ff ff31 	bl	8001088 <__NVIC_EnableIRQ>
}
 8001226:	bf00      	nop
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}

0800122e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800122e:	b580      	push	{r7, lr}
 8001230:	b082      	sub	sp, #8
 8001232:	af00      	add	r7, sp, #0
 8001234:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001236:	6878      	ldr	r0, [r7, #4]
 8001238:	f7ff ffa2 	bl	8001180 <SysTick_Config>
 800123c:	4603      	mov	r3, r0
}
 800123e:	4618      	mov	r0, r3
 8001240:	3708      	adds	r7, #8
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}

08001246 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001246:	b580      	push	{r7, lr}
 8001248:	b084      	sub	sp, #16
 800124a:	af00      	add	r7, sp, #0
 800124c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001252:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001254:	f7ff feb6 	bl	8000fc4 <HAL_GetTick>
 8001258:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001260:	b2db      	uxtb	r3, r3
 8001262:	2b02      	cmp	r3, #2
 8001264:	d008      	beq.n	8001278 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2280      	movs	r2, #128	; 0x80
 800126a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2200      	movs	r2, #0
 8001270:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001274:	2301      	movs	r3, #1
 8001276:	e052      	b.n	800131e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	681a      	ldr	r2, [r3, #0]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f022 0216 	bic.w	r2, r2, #22
 8001286:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	695a      	ldr	r2, [r3, #20]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001296:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129c:	2b00      	cmp	r3, #0
 800129e:	d103      	bne.n	80012a8 <HAL_DMA_Abort+0x62>
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d007      	beq.n	80012b8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f022 0208 	bic.w	r2, r2, #8
 80012b6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f022 0201 	bic.w	r2, r2, #1
 80012c6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012c8:	e013      	b.n	80012f2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80012ca:	f7ff fe7b 	bl	8000fc4 <HAL_GetTick>
 80012ce:	4602      	mov	r2, r0
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	1ad3      	subs	r3, r2, r3
 80012d4:	2b05      	cmp	r3, #5
 80012d6:	d90c      	bls.n	80012f2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2220      	movs	r2, #32
 80012dc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2203      	movs	r2, #3
 80012e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2200      	movs	r2, #0
 80012ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80012ee:	2303      	movs	r3, #3
 80012f0:	e015      	b.n	800131e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f003 0301 	and.w	r3, r3, #1
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d1e4      	bne.n	80012ca <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001304:	223f      	movs	r2, #63	; 0x3f
 8001306:	409a      	lsls	r2, r3
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2201      	movs	r2, #1
 8001310:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2200      	movs	r2, #0
 8001318:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800131c:	2300      	movs	r3, #0
}
 800131e:	4618      	mov	r0, r3
 8001320:	3710      	adds	r7, #16
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}

08001326 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001326:	b480      	push	{r7}
 8001328:	b083      	sub	sp, #12
 800132a:	af00      	add	r7, sp, #0
 800132c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001334:	b2db      	uxtb	r3, r3
 8001336:	2b02      	cmp	r3, #2
 8001338:	d004      	beq.n	8001344 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2280      	movs	r2, #128	; 0x80
 800133e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001340:	2301      	movs	r3, #1
 8001342:	e00c      	b.n	800135e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2205      	movs	r2, #5
 8001348:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f022 0201 	bic.w	r2, r2, #1
 800135a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800135c:	2300      	movs	r3, #0
}
 800135e:	4618      	mov	r0, r3
 8001360:	370c      	adds	r7, #12
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
	...

0800136c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b084      	sub	sp, #16
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d101      	bne.n	800137e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800137a:	2301      	movs	r3, #1
 800137c:	e06c      	b.n	8001458 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001384:	2b00      	cmp	r3, #0
 8001386:	d106      	bne.n	8001396 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2223      	movs	r2, #35	; 0x23
 800138c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001390:	6878      	ldr	r0, [r7, #4]
 8001392:	f003 f855 	bl	8004440 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001396:	2300      	movs	r3, #0
 8001398:	60bb      	str	r3, [r7, #8]
 800139a:	4b31      	ldr	r3, [pc, #196]	; (8001460 <HAL_ETH_Init+0xf4>)
 800139c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800139e:	4a30      	ldr	r2, [pc, #192]	; (8001460 <HAL_ETH_Init+0xf4>)
 80013a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013a4:	6453      	str	r3, [r2, #68]	; 0x44
 80013a6:	4b2e      	ldr	r3, [pc, #184]	; (8001460 <HAL_ETH_Init+0xf4>)
 80013a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013ae:	60bb      	str	r3, [r7, #8]
 80013b0:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80013b2:	4b2c      	ldr	r3, [pc, #176]	; (8001464 <HAL_ETH_Init+0xf8>)
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	4a2b      	ldr	r2, [pc, #172]	; (8001464 <HAL_ETH_Init+0xf8>)
 80013b8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80013bc:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80013be:	4b29      	ldr	r3, [pc, #164]	; (8001464 <HAL_ETH_Init+0xf8>)
 80013c0:	685a      	ldr	r2, [r3, #4]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	689b      	ldr	r3, [r3, #8]
 80013c6:	4927      	ldr	r1, [pc, #156]	; (8001464 <HAL_ETH_Init+0xf8>)
 80013c8:	4313      	orrs	r3, r2
 80013ca:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80013cc:	4b25      	ldr	r3, [pc, #148]	; (8001464 <HAL_ETH_Init+0xf8>)
 80013ce:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	687a      	ldr	r2, [r7, #4]
 80013dc:	6812      	ldr	r2, [r2, #0]
 80013de:	f043 0301 	orr.w	r3, r3, #1
 80013e2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80013e6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80013e8:	f7ff fdec 	bl	8000fc4 <HAL_GetTick>
 80013ec:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80013ee:	e011      	b.n	8001414 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80013f0:	f7ff fde8 	bl	8000fc4 <HAL_GetTick>
 80013f4:	4602      	mov	r2, r0
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	1ad3      	subs	r3, r2, r3
 80013fa:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80013fe:	d909      	bls.n	8001414 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2204      	movs	r2, #4
 8001404:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	22e0      	movs	r2, #224	; 0xe0
 800140c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001410:	2301      	movs	r3, #1
 8001412:	e021      	b.n	8001458 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f003 0301 	and.w	r3, r3, #1
 8001422:	2b00      	cmp	r3, #0
 8001424:	d1e4      	bne.n	80013f0 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001426:	6878      	ldr	r0, [r7, #4]
 8001428:	f000 fce0 	bl	8001dec <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800142c:	6878      	ldr	r0, [r7, #4]
 800142e:	f000 fd87 	bl	8001f40 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001432:	6878      	ldr	r0, [r7, #4]
 8001434:	f000 fddd 	bl	8001ff2 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	461a      	mov	r2, r3
 800143e:	2100      	movs	r1, #0
 8001440:	6878      	ldr	r0, [r7, #4]
 8001442:	f000 fd45 	bl	8001ed0 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2200      	movs	r2, #0
 800144a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2210      	movs	r2, #16
 8001452:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001456:	2300      	movs	r3, #0
}
 8001458:	4618      	mov	r0, r3
 800145a:	3710      	adds	r7, #16
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	40023800 	.word	0x40023800
 8001464:	40013800 	.word	0x40013800

08001468 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001476:	2b10      	cmp	r3, #16
 8001478:	d13a      	bne.n	80014f0 <HAL_ETH_Start+0x88>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2223      	movs	r2, #35	; 0x23
 800147e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2204      	movs	r2, #4
 8001486:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8001488:	6878      	ldr	r0, [r7, #4]
 800148a:	f000 f909 	bl	80016a0 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f042 0208 	orr.w	r2, r2, #8
 800149c:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f042 0204 	orr.w	r2, r2, #4
 80014ac:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80014ae:	6878      	ldr	r0, [r7, #4]
 80014b0:	f000 fb50 	bl	8001b54 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014bc:	699b      	ldr	r3, [r3, #24]
 80014be:	687a      	ldr	r2, [r7, #4]
 80014c0:	6812      	ldr	r2, [r2, #0]
 80014c2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80014c6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80014ca:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014d4:	699b      	ldr	r3, [r3, #24]
 80014d6:	687a      	ldr	r2, [r7, #4]
 80014d8:	6812      	ldr	r2, [r2, #0]
 80014da:	f043 0302 	orr.w	r3, r3, #2
 80014de:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80014e2:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2223      	movs	r2, #35	; 0x23
 80014e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80014ec:	2300      	movs	r3, #0
 80014ee:	e000      	b.n	80014f2 <HAL_ETH_Start+0x8a>
  }
  else
  {
    return HAL_ERROR;
 80014f0:	2301      	movs	r3, #1
  }
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3708      	adds	r7, #8
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}

080014fa <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 80014fa:	b580      	push	{r7, lr}
 80014fc:	b082      	sub	sp, #8
 80014fe:	af00      	add	r7, sp, #0
 8001500:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001508:	2b23      	cmp	r3, #35	; 0x23
 800150a:	d130      	bne.n	800156e <HAL_ETH_Stop+0x74>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2223      	movs	r2, #35	; 0x23
 8001510:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f022 0208 	bic.w	r2, r2, #8
 8001522:	601a      	str	r2, [r3, #0]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800152c:	699b      	ldr	r3, [r3, #24]
 800152e:	687a      	ldr	r2, [r7, #4]
 8001530:	6812      	ldr	r2, [r2, #0]
 8001532:	f023 0302 	bic.w	r3, r3, #2
 8001536:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800153a:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f022 0204 	bic.w	r2, r2, #4
 800154a:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 800154c:	6878      	ldr	r0, [r7, #4]
 800154e:	f000 fb01 	bl	8001b54 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f022 0208 	bic.w	r2, r2, #8
 8001560:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2210      	movs	r2, #16
 8001566:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 800156a:	2300      	movs	r3, #0
 800156c:	e000      	b.n	8001570 <HAL_ETH_Stop+0x76>
  }
  else
  {
    return HAL_ERROR;
 800156e:	2301      	movs	r3, #1
  }
}
 8001570:	4618      	mov	r0, r3
 8001572:	3708      	adds	r7, #8
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}

08001578 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b086      	sub	sp, #24
 800157c:	af00      	add	r7, sp, #0
 800157e:	60f8      	str	r0, [r7, #12]
 8001580:	60b9      	str	r1, [r7, #8]
 8001582:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d109      	bne.n	800159e <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001590:	f043 0201 	orr.w	r2, r3, #1
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 800159a:	2301      	movs	r3, #1
 800159c:	e07c      	b.n	8001698 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80015a4:	2b23      	cmp	r3, #35	; 0x23
 80015a6:	d176      	bne.n	8001696 <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 80015a8:	2200      	movs	r2, #0
 80015aa:	68b9      	ldr	r1, [r7, #8]
 80015ac:	68f8      	ldr	r0, [r7, #12]
 80015ae:	f000 fd8d 	bl	80020cc <ETH_Prepare_Tx_Descriptors>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d009      	beq.n	80015cc <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015be:	f043 0202 	orr.w	r2, r3, #2
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 80015c8:	2301      	movs	r3, #1
 80015ca:	e065      	b.n	8001698 <HAL_ETH_Transmit+0x120>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80015cc:	f3bf 8f4f 	dsb	sy
}
 80015d0:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	3206      	adds	r2, #6
 80015da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015de:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015e4:	1c5a      	adds	r2, r3, #1
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	629a      	str	r2, [r3, #40]	; 0x28
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ee:	2b03      	cmp	r3, #3
 80015f0:	d904      	bls.n	80015fc <HAL_ETH_Transmit+0x84>
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015f6:	1f1a      	subs	r2, r3, #4
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	3106      	adds	r1, #6
 8001608:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800160c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001610:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 8001612:	f7ff fcd7 	bl	8000fc4 <HAL_GetTick>
 8001616:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001618:	e037      	b.n	800168a <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001622:	695b      	ldr	r3, [r3, #20]
 8001624:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001628:	2b00      	cmp	r3, #0
 800162a:	d011      	beq.n	8001650 <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001632:	f043 0208 	orr.w	r2, r3, #8
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001644:	695a      	ldr	r2, [r3, #20]
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 800164c:	2301      	movs	r3, #1
 800164e:	e023      	b.n	8001698 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001656:	d018      	beq.n	800168a <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001658:	f7ff fcb4 	bl	8000fc4 <HAL_GetTick>
 800165c:	4602      	mov	r2, r0
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	687a      	ldr	r2, [r7, #4]
 8001664:	429a      	cmp	r2, r3
 8001666:	d302      	bcc.n	800166e <HAL_ETH_Transmit+0xf6>
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d10d      	bne.n	800168a <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001674:	f043 0204 	orr.w	r2, r3, #4
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8001684:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e006      	b.n	8001698 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	2b00      	cmp	r3, #0
 8001690:	dbc3      	blt.n	800161a <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8001692:	2300      	movs	r3, #0
 8001694:	e000      	b.n	8001698 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 8001696:	2301      	movs	r3, #1
  }
}
 8001698:	4618      	mov	r0, r3
 800169a:	3718      	adds	r7, #24
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}

080016a0 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b088      	sub	sp, #32
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 80016a8:	2300      	movs	r3, #0
 80016aa:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 80016ac:	2301      	movs	r3, #1
 80016ae:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80016b4:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	69fa      	ldr	r2, [r7, #28]
 80016ba:	3212      	adds	r2, #18
 80016bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016c0:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80016c6:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 80016c8:	e03e      	b.n	8001748 <ETH_UpdateDescriptor+0xa8>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	6a1b      	ldr	r3, [r3, #32]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d112      	bne.n	80016f8 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 80016d2:	f107 030c 	add.w	r3, r7, #12
 80016d6:	4618      	mov	r0, r3
 80016d8:	f003 f852 	bl	8004780 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d102      	bne.n	80016e8 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 80016e2:	2300      	movs	r3, #0
 80016e4:	74fb      	strb	r3, [r7, #19]
 80016e6:	e007      	b.n	80016f8 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	461a      	mov	r2, r3
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	461a      	mov	r2, r3
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 80016f8:	7cfb      	ldrb	r3, [r7, #19]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d024      	beq.n	8001748 <ETH_UpdateDescriptor+0xa8>
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80016fe:	f3bf 8f5f 	dmb	sy
}
 8001702:	bf00      	nop
    {
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();

      WRITE_REG(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800170a:	601a      	str	r2, [r3, #0]

      if (heth->RxDescList.ItMode == 0U)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001710:	2b00      	cmp	r3, #0
 8001712:	d103      	bne.n	800171c <ETH_UpdateDescriptor+0x7c>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | 1000U | ETH_DMARXDESC_RCH);
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	4a1a      	ldr	r2, [pc, #104]	; (8001780 <ETH_UpdateDescriptor+0xe0>)
 8001718:	605a      	str	r2, [r3, #4]
 800171a:	e003      	b.n	8001724 <ETH_UpdateDescriptor+0x84>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, 1000U | ETH_DMARXDESC_RCH);
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	f244 32e8 	movw	r2, #17384	; 0x43e8
 8001722:	605a      	str	r2, [r3, #4]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	3301      	adds	r3, #1
 8001728:	61fb      	str	r3, [r7, #28]
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	2b03      	cmp	r3, #3
 800172e:	d902      	bls.n	8001736 <ETH_UpdateDescriptor+0x96>
 8001730:	69fb      	ldr	r3, [r7, #28]
 8001732:	3b04      	subs	r3, #4
 8001734:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	69fa      	ldr	r2, [r7, #28]
 800173a:	3212      	adds	r2, #18
 800173c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001740:	617b      	str	r3, [r7, #20]
      desccount--;
 8001742:	69bb      	ldr	r3, [r7, #24]
 8001744:	3b01      	subs	r3, #1
 8001746:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001748:	69bb      	ldr	r3, [r7, #24]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d002      	beq.n	8001754 <ETH_UpdateDescriptor+0xb4>
 800174e:	7cfb      	ldrb	r3, [r7, #19]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d1ba      	bne.n	80016ca <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001758:	69ba      	ldr	r2, [r7, #24]
 800175a:	429a      	cmp	r2, r3
 800175c:	d00c      	beq.n	8001778 <ETH_UpdateDescriptor+0xd8>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001766:	461a      	mov	r2, r3
 8001768:	2300      	movs	r3, #0
 800176a:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	69fa      	ldr	r2, [r7, #28]
 8001770:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	69ba      	ldr	r2, [r7, #24]
 8001776:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8001778:	bf00      	nop
 800177a:	3720      	adds	r7, #32
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	800043e8 	.word	0x800043e8

08001784 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b086      	sub	sp, #24
 8001788:	af00      	add	r7, sp, #0
 800178a:	60f8      	str	r0, [r7, #12]
 800178c:	60b9      	str	r1, [r7, #8]
 800178e:	607a      	str	r2, [r7, #4]
 8001790:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	691b      	ldr	r3, [r3, #16]
 8001798:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	f003 031c 	and.w	r3, r3, #28
 80017a0:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	02db      	lsls	r3, r3, #11
 80017a6:	b29b      	uxth	r3, r3
 80017a8:	697a      	ldr	r2, [r7, #20]
 80017aa:	4313      	orrs	r3, r2
 80017ac:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	019b      	lsls	r3, r3, #6
 80017b2:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80017b6:	697a      	ldr	r2, [r7, #20]
 80017b8:	4313      	orrs	r3, r2
 80017ba:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	f023 0302 	bic.w	r3, r3, #2
 80017c2:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	f043 0301 	orr.w	r3, r3, #1
 80017ca:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	697a      	ldr	r2, [r7, #20]
 80017d2:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 80017d4:	f7ff fbf6 	bl	8000fc4 <HAL_GetTick>
 80017d8:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80017da:	e00d      	b.n	80017f8 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 80017dc:	f7ff fbf2 	bl	8000fc4 <HAL_GetTick>
 80017e0:	4602      	mov	r2, r0
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017ea:	d301      	bcc.n	80017f0 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 80017ec:	2301      	movs	r3, #1
 80017ee:	e010      	b.n	8001812 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	691b      	ldr	r3, [r3, #16]
 80017f6:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	f003 0301 	and.w	r3, r3, #1
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d1ec      	bne.n	80017dc <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	695b      	ldr	r3, [r3, #20]
 8001808:	b29b      	uxth	r3, r3
 800180a:	461a      	mov	r2, r3
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001810:	2300      	movs	r3, #0
}
 8001812:	4618      	mov	r0, r3
 8001814:	3718      	adds	r7, #24
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}

0800181a <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 800181a:	b580      	push	{r7, lr}
 800181c:	b086      	sub	sp, #24
 800181e:	af00      	add	r7, sp, #0
 8001820:	60f8      	str	r0, [r7, #12]
 8001822:	60b9      	str	r1, [r7, #8]
 8001824:	607a      	str	r2, [r7, #4]
 8001826:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	691b      	ldr	r3, [r3, #16]
 800182e:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	f003 031c 	and.w	r3, r3, #28
 8001836:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	02db      	lsls	r3, r3, #11
 800183c:	b29b      	uxth	r3, r3
 800183e:	697a      	ldr	r2, [r7, #20]
 8001840:	4313      	orrs	r3, r2
 8001842:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	019b      	lsls	r3, r3, #6
 8001848:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800184c:	697a      	ldr	r2, [r7, #20]
 800184e:	4313      	orrs	r3, r2
 8001850:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	f043 0302 	orr.w	r3, r3, #2
 8001858:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	f043 0301 	orr.w	r3, r3, #1
 8001860:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	b29a      	uxth	r2, r3
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	697a      	ldr	r2, [r7, #20]
 8001872:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001874:	f7ff fba6 	bl	8000fc4 <HAL_GetTick>
 8001878:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800187a:	e00d      	b.n	8001898 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 800187c:	f7ff fba2 	bl	8000fc4 <HAL_GetTick>
 8001880:	4602      	mov	r2, r0
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800188a:	d301      	bcc.n	8001890 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 800188c:	2301      	movs	r3, #1
 800188e:	e009      	b.n	80018a4 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	691b      	ldr	r3, [r3, #16]
 8001896:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	f003 0301 	and.w	r3, r3, #1
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d1ec      	bne.n	800187c <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 80018a2:	2300      	movs	r3, #0
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3718      	adds	r7, #24
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}

080018ac <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
 80018b4:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d101      	bne.n	80018c0 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 80018bc:	2301      	movs	r3, #1
 80018be:	e0d2      	b.n	8001a66 <HAL_ETH_GetMACConfig+0x1ba>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 0310 	and.w	r3, r3, #16
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	bf14      	ite	ne
 80018ce:	2301      	movne	r3, #1
 80018d0:	2300      	moveq	r3, #0
 80018d2:	b2db      	uxtb	r3, r3
 80018d4:	461a      	mov	r2, r3
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	bf0c      	ite	eq
 80018f8:	2301      	moveq	r3, #1
 80018fa:	2300      	movne	r3, #0
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	461a      	mov	r2, r3
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8001910:	2b00      	cmp	r3, #0
 8001912:	bf14      	ite	ne
 8001914:	2301      	movne	r3, #1
 8001916:	2300      	moveq	r3, #0
 8001918:	b2db      	uxtb	r3, r3
 800191a:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800192a:	2b00      	cmp	r3, #0
 800192c:	bf0c      	ite	eq
 800192e:	2301      	moveq	r3, #1
 8001930:	2300      	movne	r3, #0
 8001932:	b2db      	uxtb	r3, r3
 8001934:	461a      	mov	r2, r3
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001944:	2b00      	cmp	r3, #0
 8001946:	bf14      	ite	ne
 8001948:	2301      	movne	r3, #1
 800194a:	2300      	moveq	r3, #0
 800194c:	b2db      	uxtb	r3, r3
 800194e:	461a      	mov	r2, r3
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800197a:	2b00      	cmp	r3, #0
 800197c:	bf0c      	ite	eq
 800197e:	2301      	moveq	r3, #1
 8001980:	2300      	movne	r3, #0
 8001982:	b2db      	uxtb	r3, r3
 8001984:	461a      	mov	r2, r3
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001994:	2b00      	cmp	r3, #0
 8001996:	bf0c      	ite	eq
 8001998:	2301      	moveq	r3, #1
 800199a:	2300      	movne	r3, #0
 800199c:	b2db      	uxtb	r3, r3
 800199e:	461a      	mov	r2, r3
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	bf14      	ite	ne
 80019b2:	2301      	movne	r3, #1
 80019b4:	2300      	moveq	r3, #0
 80019b6:	b2db      	uxtb	r3, r3
 80019b8:	461a      	mov	r2, r3
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 27) > 0U) ? ENABLE : DISABLE;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	2200      	movs	r2, #0
 80019d6:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	699b      	ldr	r3, [r3, #24]
 80019de:	f003 0302 	and.w	r3, r3, #2
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	bf14      	ite	ne
 80019e6:	2301      	movne	r3, #1
 80019e8:	2300      	moveq	r3, #0
 80019ea:	b2db      	uxtb	r3, r3
 80019ec:	461a      	mov	r2, r3
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	699b      	ldr	r3, [r3, #24]
 80019fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	bf0c      	ite	eq
 8001a02:	2301      	moveq	r3, #1
 8001a04:	2300      	movne	r3, #0
 8001a06:	b2db      	uxtb	r3, r3
 8001a08:	461a      	mov	r2, r3
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	699b      	ldr	r3, [r3, #24]
 8001a16:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	699b      	ldr	r3, [r3, #24]
 8001a24:	0c1b      	lsrs	r3, r3, #16
 8001a26:	b29a      	uxth	r2, r3
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) > 0U) ? ENABLE : DISABLE;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	699b      	ldr	r3, [r3, #24]
 8001a32:	f003 0304 	and.w	r3, r3, #4
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	bf14      	ite	ne
 8001a3a:	2301      	movne	r3, #1
 8001a3c:	2300      	moveq	r3, #0
 8001a3e:	b2db      	uxtb	r3, r3
 8001a40:	461a      	mov	r2, r3
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 1) > 0U)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	699b      	ldr	r3, [r3, #24]
 8001a4e:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	bf14      	ite	ne
 8001a56:	2301      	movne	r3, #1
 8001a58:	2300      	moveq	r3, #0
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 1) > 0U)
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 8001a64:	2300      	movs	r3, #0
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	370c      	adds	r7, #12
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr

08001a72 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001a72:	b580      	push	{r7, lr}
 8001a74:	b082      	sub	sp, #8
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	6078      	str	r0, [r7, #4]
 8001a7a:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d101      	bne.n	8001a86 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e00b      	b.n	8001a9e <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001a8c:	2b10      	cmp	r3, #16
 8001a8e:	d105      	bne.n	8001a9c <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8001a90:	6839      	ldr	r1, [r7, #0]
 8001a92:	6878      	ldr	r0, [r7, #4]
 8001a94:	f000 f884 	bl	8001ba0 <ETH_SetMACConfig>

    return HAL_OK;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	e000      	b.n	8001a9e <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
  }
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3708      	adds	r7, #8
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
	...

08001aa8 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b084      	sub	sp, #16
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	691b      	ldr	r3, [r3, #16]
 8001ab6:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	f023 031c 	bic.w	r3, r3, #28
 8001abe:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001ac0:	f001 fab4 	bl	800302c <HAL_RCC_GetHCLKFreq>
 8001ac4:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	4a1d      	ldr	r2, [pc, #116]	; (8001b40 <HAL_ETH_SetMDIOClockRange+0x98>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d908      	bls.n	8001ae0 <HAL_ETH_SetMDIOClockRange+0x38>
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	4a1c      	ldr	r2, [pc, #112]	; (8001b44 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d804      	bhi.n	8001ae0 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	f043 0308 	orr.w	r3, r3, #8
 8001adc:	60fb      	str	r3, [r7, #12]
 8001ade:	e027      	b.n	8001b30 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	4a18      	ldr	r2, [pc, #96]	; (8001b44 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d908      	bls.n	8001afa <HAL_ETH_SetMDIOClockRange+0x52>
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	4a17      	ldr	r2, [pc, #92]	; (8001b48 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d204      	bcs.n	8001afa <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	f043 030c 	orr.w	r3, r3, #12
 8001af6:	60fb      	str	r3, [r7, #12]
 8001af8:	e01a      	b.n	8001b30 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8001afa:	68bb      	ldr	r3, [r7, #8]
 8001afc:	4a12      	ldr	r2, [pc, #72]	; (8001b48 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d303      	bcc.n	8001b0a <HAL_ETH_SetMDIOClockRange+0x62>
 8001b02:	68bb      	ldr	r3, [r7, #8]
 8001b04:	4a11      	ldr	r2, [pc, #68]	; (8001b4c <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d911      	bls.n	8001b2e <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	4a0f      	ldr	r2, [pc, #60]	; (8001b4c <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d908      	bls.n	8001b24 <HAL_ETH_SetMDIOClockRange+0x7c>
 8001b12:	68bb      	ldr	r3, [r7, #8]
 8001b14:	4a0e      	ldr	r2, [pc, #56]	; (8001b50 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d804      	bhi.n	8001b24 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	f043 0304 	orr.w	r3, r3, #4
 8001b20:	60fb      	str	r3, [r7, #12]
 8001b22:	e005      	b.n	8001b30 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	f043 0310 	orr.w	r3, r3, #16
 8001b2a:	60fb      	str	r3, [r7, #12]
 8001b2c:	e000      	b.n	8001b30 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001b2e:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	68fa      	ldr	r2, [r7, #12]
 8001b36:	611a      	str	r2, [r3, #16]
}
 8001b38:	bf00      	nop
 8001b3a:	3710      	adds	r7, #16
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	01312cff 	.word	0x01312cff
 8001b44:	02160ebf 	.word	0x02160ebf
 8001b48:	03938700 	.word	0x03938700
 8001b4c:	05f5e0ff 	.word	0x05f5e0ff
 8001b50:	08f0d17f 	.word	0x08f0d17f

08001b54 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b084      	sub	sp, #16
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b68:	699b      	ldr	r3, [r3, #24]
 8001b6a:	687a      	ldr	r2, [r7, #4]
 8001b6c:	6812      	ldr	r2, [r2, #0]
 8001b6e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001b72:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001b76:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b80:	699b      	ldr	r3, [r3, #24]
 8001b82:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b84:	2001      	movs	r0, #1
 8001b86:	f7ff fa29 	bl	8000fdc <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001b94:	6193      	str	r3, [r2, #24]
}
 8001b96:	bf00      	nop
 8001b98:	3710      	adds	r7, #16
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
	...

08001ba0 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b084      	sub	sp, #16
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001bb2:	68fa      	ldr	r2, [r7, #12]
 8001bb4:	4b47      	ldr	r3, [pc, #284]	; (8001cd4 <ETH_SetMACConfig+0x134>)
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	7c1b      	ldrb	r3, [r3, #16]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d102      	bne.n	8001bc8 <ETH_SetMACConfig+0x28>
 8001bc2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001bc6:	e000      	b.n	8001bca <ETH_SetMACConfig+0x2a>
 8001bc8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	7c5b      	ldrb	r3, [r3, #17]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d102      	bne.n	8001bd8 <ETH_SetMACConfig+0x38>
 8001bd2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001bd6:	e000      	b.n	8001bda <ETH_SetMACConfig+0x3a>
 8001bd8:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001bda:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001be0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	7fdb      	ldrb	r3, [r3, #31]
 8001be6:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001be8:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001bee:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001bf0:	683a      	ldr	r2, [r7, #0]
 8001bf2:	7f92      	ldrb	r2, [r2, #30]
 8001bf4:	2a00      	cmp	r2, #0
 8001bf6:	d102      	bne.n	8001bfe <ETH_SetMACConfig+0x5e>
 8001bf8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001bfc:	e000      	b.n	8001c00 <ETH_SetMACConfig+0x60>
 8001bfe:	2200      	movs	r2, #0
                        macconf->Speed |
 8001c00:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	7f1b      	ldrb	r3, [r3, #28]
 8001c06:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001c08:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001c0e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	791b      	ldrb	r3, [r3, #4]
 8001c14:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001c16:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001c18:	683a      	ldr	r2, [r7, #0]
 8001c1a:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001c1e:	2a00      	cmp	r2, #0
 8001c20:	d102      	bne.n	8001c28 <ETH_SetMACConfig+0x88>
 8001c22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c26:	e000      	b.n	8001c2a <ETH_SetMACConfig+0x8a>
 8001c28:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001c2a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	7bdb      	ldrb	r3, [r3, #15]
 8001c30:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001c32:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001c38:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001c40:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001c42:	4313      	orrs	r3, r2
 8001c44:	68fa      	ldr	r2, [r7, #12]
 8001c46:	4313      	orrs	r3, r2
 8001c48:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	68fa      	ldr	r2, [r7, #12]
 8001c50:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c5a:	2001      	movs	r0, #1
 8001c5c:	f7ff f9be 	bl	8000fdc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	68fa      	ldr	r2, [r7, #12]
 8001c66:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	699b      	ldr	r3, [r3, #24]
 8001c6e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001c70:	68fa      	ldr	r2, [r7, #12]
 8001c72:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001c76:	4013      	ands	r3, r2
 8001c78:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c7e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->ZeroQuantaPause |
 8001c80:	683a      	ldr	r2, [r7, #0]
 8001c82:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001c86:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        (uint32_t)macconf->ZeroQuantaPause |
 8001c8c:	4313      	orrs	r3, r2
                        (uint32_t)macconf->UnicastSlowProtocolPacketDetect |
 8001c8e:	683a      	ldr	r2, [r7, #0]
 8001c90:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
                        macconf->PauseLowThreshold |
 8001c94:	4313      	orrs	r3, r2
                        (uint32_t)macconf->ReceiveFlowControl |
 8001c96:	683a      	ldr	r2, [r7, #0]
 8001c98:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
                        (uint32_t)macconf->UnicastSlowProtocolPacketDetect |
 8001c9c:	4313      	orrs	r3, r2
                        (uint32_t)macconf->TransmitFlowControl);
 8001c9e:	683a      	ldr	r2, [r7, #0]
 8001ca0:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	68fa      	ldr	r2, [r7, #12]
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	68fa      	ldr	r2, [r7, #12]
 8001cb2:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	699b      	ldr	r3, [r3, #24]
 8001cba:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001cbc:	2001      	movs	r0, #1
 8001cbe:	f7ff f98d 	bl	8000fdc <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	68fa      	ldr	r2, [r7, #12]
 8001cc8:	619a      	str	r2, [r3, #24]
}
 8001cca:	bf00      	nop
 8001ccc:	3710      	adds	r7, #16
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	ff20810f 	.word	0xff20810f

08001cd8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b084      	sub	sp, #16
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cea:	699b      	ldr	r3, [r3, #24]
 8001cec:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001cee:	68fa      	ldr	r2, [r7, #12]
 8001cf0:	4b3d      	ldr	r3, [pc, #244]	; (8001de8 <ETH_SetDMAConfig+0x110>)
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	7b1b      	ldrb	r3, [r3, #12]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d102      	bne.n	8001d04 <ETH_SetDMAConfig+0x2c>
 8001cfe:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001d02:	e000      	b.n	8001d06 <ETH_SetDMAConfig+0x2e>
 8001d04:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	7b5b      	ldrb	r3, [r3, #13]
 8001d0a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001d0c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001d0e:	683a      	ldr	r2, [r7, #0]
 8001d10:	7f52      	ldrb	r2, [r2, #29]
 8001d12:	2a00      	cmp	r2, #0
 8001d14:	d102      	bne.n	8001d1c <ETH_SetDMAConfig+0x44>
 8001d16:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001d1a:	e000      	b.n	8001d1e <ETH_SetDMAConfig+0x46>
 8001d1c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001d1e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	7b9b      	ldrb	r3, [r3, #14]
 8001d24:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001d26:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001d2c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	7f1b      	ldrb	r3, [r3, #28]
 8001d32:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001d34:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	7f9b      	ldrb	r3, [r3, #30]
 8001d3a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001d3c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001d42:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d4a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	68fa      	ldr	r2, [r7, #12]
 8001d50:	4313      	orrs	r3, r2
 8001d52:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d6a:	699b      	ldr	r3, [r3, #24]
 8001d6c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d6e:	2001      	movs	r0, #1
 8001d70:	f7ff f934 	bl	8000fdc <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d7c:	461a      	mov	r2, r3
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	791b      	ldrb	r3, [r3, #4]
 8001d86:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001d8c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001d92:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001d98:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001da0:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001da2:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001da8:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001daa:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001db0:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001db2:	687a      	ldr	r2, [r7, #4]
 8001db4:	6812      	ldr	r2, [r2, #0]
 8001db6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001dba:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001dbe:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001dcc:	2001      	movs	r0, #1
 8001dce:	f7ff f905 	bl	8000fdc <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dda:	461a      	mov	r2, r3
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	6013      	str	r3, [r2, #0]
}
 8001de0:	bf00      	nop
 8001de2:	3710      	adds	r7, #16
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	f8de3f23 	.word	0xf8de3f23

08001dec <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b0a6      	sub	sp, #152	; 0x98
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001df4:	2301      	movs	r3, #1
 8001df6:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001e00:	2300      	movs	r3, #0
 8001e02:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001e04:	2300      	movs	r3, #0
 8001e06:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001e10:	2300      	movs	r3, #0
 8001e12:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8001e16:	2301      	movs	r3, #1
 8001e18:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001e22:	2300      	movs	r3, #0
 8001e24:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001e32:	2300      	movs	r3, #0
 8001e34:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001e36:	2300      	movs	r3, #0
 8001e38:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001e42:	2300      	movs	r3, #0
 8001e44:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001e4e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001e52:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001e54:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001e58:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001e60:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001e64:	4619      	mov	r1, r3
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f7ff fe9a 	bl	8001ba0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001e70:	2301      	movs	r3, #1
 8001e72:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001e74:	2301      	movs	r3, #1
 8001e76:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001e82:	2300      	movs	r3, #0
 8001e84:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001e92:	2301      	movs	r3, #1
 8001e94:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001e9c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ea0:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001ea2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001ea6:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001ea8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001eac:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001ebc:	f107 0308 	add.w	r3, r7, #8
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f7ff ff08 	bl	8001cd8 <ETH_SetDMAConfig>
}
 8001ec8:	bf00      	nop
 8001eca:	3798      	adds	r7, #152	; 0x98
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}

08001ed0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b087      	sub	sp, #28
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	60f8      	str	r0, [r7, #12]
 8001ed8:	60b9      	str	r1, [r7, #8]
 8001eda:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	3305      	adds	r3, #5
 8001ee0:	781b      	ldrb	r3, [r3, #0]
 8001ee2:	021b      	lsls	r3, r3, #8
 8001ee4:	687a      	ldr	r2, [r7, #4]
 8001ee6:	3204      	adds	r2, #4
 8001ee8:	7812      	ldrb	r2, [r2, #0]
 8001eea:	4313      	orrs	r3, r2
 8001eec:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001eee:	68ba      	ldr	r2, [r7, #8]
 8001ef0:	4b11      	ldr	r3, [pc, #68]	; (8001f38 <ETH_MACAddressConfig+0x68>)
 8001ef2:	4413      	add	r3, r2
 8001ef4:	461a      	mov	r2, r3
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	3303      	adds	r3, #3
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	061a      	lsls	r2, r3, #24
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	3302      	adds	r3, #2
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	041b      	lsls	r3, r3, #16
 8001f0a:	431a      	orrs	r2, r3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	3301      	adds	r3, #1
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	021b      	lsls	r3, r3, #8
 8001f14:	4313      	orrs	r3, r2
 8001f16:	687a      	ldr	r2, [r7, #4]
 8001f18:	7812      	ldrb	r2, [r2, #0]
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001f1e:	68ba      	ldr	r2, [r7, #8]
 8001f20:	4b06      	ldr	r3, [pc, #24]	; (8001f3c <ETH_MACAddressConfig+0x6c>)
 8001f22:	4413      	add	r3, r2
 8001f24:	461a      	mov	r2, r3
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	6013      	str	r3, [r2, #0]
}
 8001f2a:	bf00      	nop
 8001f2c:	371c      	adds	r7, #28
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop
 8001f38:	40028040 	.word	0x40028040
 8001f3c:	40028044 	.word	0x40028044

08001f40 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b085      	sub	sp, #20
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001f48:	2300      	movs	r3, #0
 8001f4a:	60fb      	str	r3, [r7, #12]
 8001f4c:	e03e      	b.n	8001fcc <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	68d9      	ldr	r1, [r3, #12]
 8001f52:	68fa      	ldr	r2, [r7, #12]
 8001f54:	4613      	mov	r3, r2
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	4413      	add	r3, r2
 8001f5a:	00db      	lsls	r3, r3, #3
 8001f5c:	440b      	add	r3, r1
 8001f5e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	2200      	movs	r2, #0
 8001f64:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	2200      	movs	r2, #0
 8001f76:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001f78:	68b9      	ldr	r1, [r7, #8]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	68fa      	ldr	r2, [r7, #12]
 8001f7e:	3206      	adds	r2, #6
 8001f80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	2b02      	cmp	r3, #2
 8001f94:	d80c      	bhi.n	8001fb0 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	68d9      	ldr	r1, [r3, #12]
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	1c5a      	adds	r2, r3, #1
 8001f9e:	4613      	mov	r3, r2
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	4413      	add	r3, r2
 8001fa4:	00db      	lsls	r3, r3, #3
 8001fa6:	440b      	add	r3, r1
 8001fa8:	461a      	mov	r2, r3
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	60da      	str	r2, [r3, #12]
 8001fae:	e004      	b.n	8001fba <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001fba:	68bb      	ldr	r3, [r7, #8]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	3301      	adds	r3, #1
 8001fca:	60fb      	str	r3, [r7, #12]
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	2b03      	cmp	r3, #3
 8001fd0:	d9bd      	bls.n	8001f4e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	68da      	ldr	r2, [r3, #12]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fe4:	611a      	str	r2, [r3, #16]
}
 8001fe6:	bf00      	nop
 8001fe8:	3714      	adds	r7, #20
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr

08001ff2 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001ff2:	b480      	push	{r7}
 8001ff4:	b085      	sub	sp, #20
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	60fb      	str	r3, [r7, #12]
 8001ffe:	e046      	b.n	800208e <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6919      	ldr	r1, [r3, #16]
 8002004:	68fa      	ldr	r2, [r7, #12]
 8002006:	4613      	mov	r3, r2
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	4413      	add	r3, r2
 800200c:	00db      	lsls	r3, r3, #3
 800200e:	440b      	add	r3, r1
 8002010:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	2200      	movs	r2, #0
 8002016:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	2200      	movs	r2, #0
 800201c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	2200      	movs	r2, #0
 8002022:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	2200      	movs	r2, #0
 8002028:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	2200      	movs	r2, #0
 800202e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	2200      	movs	r2, #0
 8002034:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800203c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8002044:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002052:	68b9      	ldr	r1, [r7, #8]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	68fa      	ldr	r2, [r7, #12]
 8002058:	3212      	adds	r2, #18
 800205a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	2b02      	cmp	r3, #2
 8002062:	d80c      	bhi.n	800207e <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6919      	ldr	r1, [r3, #16]
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	1c5a      	adds	r2, r3, #1
 800206c:	4613      	mov	r3, r2
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	4413      	add	r3, r2
 8002072:	00db      	lsls	r3, r3, #3
 8002074:	440b      	add	r3, r1
 8002076:	461a      	mov	r2, r3
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	60da      	str	r2, [r3, #12]
 800207c:	e004      	b.n	8002088 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	691b      	ldr	r3, [r3, #16]
 8002082:	461a      	mov	r2, r3
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	3301      	adds	r3, #1
 800208c:	60fb      	str	r3, [r7, #12]
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	2b03      	cmp	r3, #3
 8002092:	d9b5      	bls.n	8002000 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2200      	movs	r2, #0
 8002098:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2200      	movs	r2, #0
 800209e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2200      	movs	r2, #0
 80020a4:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2200      	movs	r2, #0
 80020aa:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2200      	movs	r2, #0
 80020b0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	691a      	ldr	r2, [r3, #16]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020be:	60da      	str	r2, [r3, #12]
}
 80020c0:	bf00      	nop
 80020c2:	3714      	adds	r7, #20
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr

080020cc <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b08d      	sub	sp, #52	; 0x34
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	60f8      	str	r0, [r7, #12]
 80020d4:	60b9      	str	r1, [r7, #8]
 80020d6:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	3318      	adds	r3, #24
 80020dc:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	691b      	ldr	r3, [r3, #16]
 80020e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	691b      	ldr	r3, [r3, #16]
 80020e8:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 80020ea:	2300      	movs	r3, #0
 80020ec:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020f6:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 80020fe:	2300      	movs	r3, #0
 8002100:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002102:	6a3b      	ldr	r3, [r7, #32]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800210a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800210e:	d007      	beq.n	8002120 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002110:	697a      	ldr	r2, [r7, #20]
 8002112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002114:	3304      	adds	r3, #4
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	4413      	add	r3, r2
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d001      	beq.n	8002124 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8002120:	2302      	movs	r3, #2
 8002122:	e103      	b.n	800232c <ETH_Prepare_Tx_Descriptors+0x260>
  }


  descnbr += 1U;
 8002124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002126:	3301      	adds	r3, #1
 8002128:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	461a      	mov	r2, r3
 8002130:	6a3b      	ldr	r3, [r7, #32]
 8002132:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002134:	6a3b      	ldr	r3, [r7, #32]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 800213c:	f023 031f 	bic.w	r3, r3, #31
 8002140:	69fa      	ldr	r2, [r7, #28]
 8002142:	6852      	ldr	r2, [r2, #4]
 8002144:	431a      	orrs	r2, r3
 8002146:	6a3b      	ldr	r3, [r7, #32]
 8002148:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 0301 	and.w	r3, r3, #1
 8002152:	2b00      	cmp	r3, #0
 8002154:	d008      	beq.n	8002168 <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8002156:	6a3b      	ldr	r3, [r7, #32]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	695b      	ldr	r3, [r3, #20]
 8002162:	431a      	orrs	r2, r3
 8002164:	6a3b      	ldr	r3, [r7, #32]
 8002166:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 0320 	and.w	r3, r3, #32
 8002170:	2b00      	cmp	r3, #0
 8002172:	d008      	beq.n	8002186 <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8002174:	6a3b      	ldr	r3, [r7, #32]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	691b      	ldr	r3, [r3, #16]
 8002180:	431a      	orrs	r2, r3
 8002182:	6a3b      	ldr	r3, [r7, #32]
 8002184:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0304 	and.w	r3, r3, #4
 800218e:	2b00      	cmp	r3, #0
 8002190:	d005      	beq.n	800219e <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8002192:	6a3b      	ldr	r3, [r7, #32]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800219a:	6a3b      	ldr	r3, [r7, #32]
 800219c:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800219e:	6a3b      	ldr	r3, [r7, #32]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80021a6:	6a3b      	ldr	r3, [r7, #32]
 80021a8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 80021aa:	f3bf 8f5f 	dmb	sy
}
 80021ae:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80021b0:	6a3b      	ldr	r3, [r7, #32]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80021b8:	6a3b      	ldr	r3, [r7, #32]
 80021ba:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80021bc:	e084      	b.n	80022c8 <ETH_Prepare_Tx_Descriptors+0x1fc>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80021be:	6a3b      	ldr	r3, [r7, #32]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80021c6:	6a3b      	ldr	r3, [r7, #32]
 80021c8:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d006      	beq.n	80021de <ETH_Prepare_Tx_Descriptors+0x112>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80021d0:	6a3b      	ldr	r3, [r7, #32]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80021d8:	6a3b      	ldr	r3, [r7, #32]
 80021da:	601a      	str	r2, [r3, #0]
 80021dc:	e005      	b.n	80021ea <ETH_Prepare_Tx_Descriptors+0x11e>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80021de:	6a3b      	ldr	r3, [r7, #32]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80021e6:	6a3b      	ldr	r3, [r7, #32]
 80021e8:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80021ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021ec:	3301      	adds	r3, #1
 80021ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021f2:	2b03      	cmp	r3, #3
 80021f4:	d902      	bls.n	80021fc <ETH_Prepare_Tx_Descriptors+0x130>
 80021f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021f8:	3b04      	subs	r3, #4
 80021fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002200:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002204:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002206:	6a3b      	ldr	r3, [r7, #32]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800220e:	6a3b      	ldr	r3, [r7, #32]
 8002210:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002212:	6a3b      	ldr	r3, [r7, #32]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800221a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800221e:	d007      	beq.n	8002230 <ETH_Prepare_Tx_Descriptors+0x164>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002220:	697a      	ldr	r2, [r7, #20]
 8002222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002224:	3304      	adds	r3, #4
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	4413      	add	r3, r2
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d029      	beq.n	8002284 <ETH_Prepare_Tx_Descriptors+0x1b8>
    {
      descidx = firstdescidx;
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002238:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800223c:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 800223e:	2300      	movs	r3, #0
 8002240:	62bb      	str	r3, [r7, #40]	; 0x28
 8002242:	e019      	b.n	8002278 <ETH_Prepare_Tx_Descriptors+0x1ac>
  __ASM volatile ("dmb 0xF":::"memory");
 8002244:	f3bf 8f5f 	dmb	sy
}
 8002248:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800224a:	6a3b      	ldr	r3, [r7, #32]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002252:	6a3b      	ldr	r3, [r7, #32]
 8002254:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002258:	3301      	adds	r3, #1
 800225a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800225c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800225e:	2b03      	cmp	r3, #3
 8002260:	d902      	bls.n	8002268 <ETH_Prepare_Tx_Descriptors+0x19c>
 8002262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002264:	3b04      	subs	r3, #4
 8002266:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800226c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002270:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8002272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002274:	3301      	adds	r3, #1
 8002276:	62bb      	str	r3, [r7, #40]	; 0x28
 8002278:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800227a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800227c:	429a      	cmp	r2, r3
 800227e:	d3e1      	bcc.n	8002244 <ETH_Prepare_Tx_Descriptors+0x178>
      }

      return HAL_ETH_ERROR_BUSY;
 8002280:	2302      	movs	r3, #2
 8002282:	e053      	b.n	800232c <ETH_Prepare_Tx_Descriptors+0x260>
    }

    descnbr += 1U;
 8002284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002286:	3301      	adds	r3, #1
 8002288:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 800228a:	69fb      	ldr	r3, [r7, #28]
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	461a      	mov	r2, r3
 8002296:	6a3b      	ldr	r3, [r7, #32]
 8002298:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 800229a:	6a3b      	ldr	r3, [r7, #32]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 80022a2:	f023 031f 	bic.w	r3, r3, #31
 80022a6:	69fa      	ldr	r2, [r7, #28]
 80022a8:	6852      	ldr	r2, [r2, #4]
 80022aa:	431a      	orrs	r2, r3
 80022ac:	6a3b      	ldr	r3, [r7, #32]
 80022ae:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 80022b0:	69bb      	ldr	r3, [r7, #24]
 80022b2:	3301      	adds	r3, #1
 80022b4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 80022b6:	f3bf 8f5f 	dmb	sy
}
 80022ba:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80022bc:	6a3b      	ldr	r3, [r7, #32]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80022c4:	6a3b      	ldr	r3, [r7, #32]
 80022c6:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 80022c8:	69fb      	ldr	r3, [r7, #28]
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	f47f af76 	bne.w	80021be <ETH_Prepare_Tx_Descriptors+0xf2>
  }

  if (ItMode != ((uint32_t)RESET))
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d006      	beq.n	80022e6 <ETH_Prepare_Tx_Descriptors+0x21a>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80022d8:	6a3b      	ldr	r3, [r7, #32]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80022e0:	6a3b      	ldr	r3, [r7, #32]
 80022e2:	601a      	str	r2, [r3, #0]
 80022e4:	e005      	b.n	80022f2 <ETH_Prepare_Tx_Descriptors+0x226>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80022e6:	6a3b      	ldr	r3, [r7, #32]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80022ee:	6a3b      	ldr	r3, [r7, #32]
 80022f0:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80022f2:	6a3b      	ldr	r3, [r7, #32]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80022fa:	6a3b      	ldr	r3, [r7, #32]
 80022fc:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002302:	6979      	ldr	r1, [r7, #20]
 8002304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002306:	3304      	adds	r3, #4
 8002308:	009b      	lsls	r3, r3, #2
 800230a:	440b      	add	r3, r1
 800230c:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002312:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8002314:	b672      	cpsid	i
}
 8002316:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800231c:	69bb      	ldr	r3, [r7, #24]
 800231e:	4413      	add	r3, r2
 8002320:	1c5a      	adds	r2, r3, #1
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8002326:	b662      	cpsie	i
}
 8002328:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 800232a:	2300      	movs	r3, #0
}
 800232c:	4618      	mov	r0, r3
 800232e:	3734      	adds	r7, #52	; 0x34
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr

08002338 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002338:	b480      	push	{r7}
 800233a:	b089      	sub	sp, #36	; 0x24
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
 8002340:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002342:	2300      	movs	r3, #0
 8002344:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002346:	2300      	movs	r3, #0
 8002348:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800234a:	2300      	movs	r3, #0
 800234c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800234e:	2300      	movs	r3, #0
 8002350:	61fb      	str	r3, [r7, #28]
 8002352:	e177      	b.n	8002644 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002354:	2201      	movs	r2, #1
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	fa02 f303 	lsl.w	r3, r2, r3
 800235c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	697a      	ldr	r2, [r7, #20]
 8002364:	4013      	ands	r3, r2
 8002366:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002368:	693a      	ldr	r2, [r7, #16]
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	429a      	cmp	r2, r3
 800236e:	f040 8166 	bne.w	800263e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	f003 0303 	and.w	r3, r3, #3
 800237a:	2b01      	cmp	r3, #1
 800237c:	d005      	beq.n	800238a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002386:	2b02      	cmp	r3, #2
 8002388:	d130      	bne.n	80023ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	005b      	lsls	r3, r3, #1
 8002394:	2203      	movs	r2, #3
 8002396:	fa02 f303 	lsl.w	r3, r2, r3
 800239a:	43db      	mvns	r3, r3
 800239c:	69ba      	ldr	r2, [r7, #24]
 800239e:	4013      	ands	r3, r2
 80023a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	68da      	ldr	r2, [r3, #12]
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	005b      	lsls	r3, r3, #1
 80023aa:	fa02 f303 	lsl.w	r3, r2, r3
 80023ae:	69ba      	ldr	r2, [r7, #24]
 80023b0:	4313      	orrs	r3, r2
 80023b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	69ba      	ldr	r2, [r7, #24]
 80023b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023c0:	2201      	movs	r2, #1
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	fa02 f303 	lsl.w	r3, r2, r3
 80023c8:	43db      	mvns	r3, r3
 80023ca:	69ba      	ldr	r2, [r7, #24]
 80023cc:	4013      	ands	r3, r2
 80023ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	091b      	lsrs	r3, r3, #4
 80023d6:	f003 0201 	and.w	r2, r3, #1
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	fa02 f303 	lsl.w	r3, r2, r3
 80023e0:	69ba      	ldr	r2, [r7, #24]
 80023e2:	4313      	orrs	r3, r2
 80023e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	69ba      	ldr	r2, [r7, #24]
 80023ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f003 0303 	and.w	r3, r3, #3
 80023f4:	2b03      	cmp	r3, #3
 80023f6:	d017      	beq.n	8002428 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	005b      	lsls	r3, r3, #1
 8002402:	2203      	movs	r2, #3
 8002404:	fa02 f303 	lsl.w	r3, r2, r3
 8002408:	43db      	mvns	r3, r3
 800240a:	69ba      	ldr	r2, [r7, #24]
 800240c:	4013      	ands	r3, r2
 800240e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	689a      	ldr	r2, [r3, #8]
 8002414:	69fb      	ldr	r3, [r7, #28]
 8002416:	005b      	lsls	r3, r3, #1
 8002418:	fa02 f303 	lsl.w	r3, r2, r3
 800241c:	69ba      	ldr	r2, [r7, #24]
 800241e:	4313      	orrs	r3, r2
 8002420:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	69ba      	ldr	r2, [r7, #24]
 8002426:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	f003 0303 	and.w	r3, r3, #3
 8002430:	2b02      	cmp	r3, #2
 8002432:	d123      	bne.n	800247c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002434:	69fb      	ldr	r3, [r7, #28]
 8002436:	08da      	lsrs	r2, r3, #3
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	3208      	adds	r2, #8
 800243c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002440:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	f003 0307 	and.w	r3, r3, #7
 8002448:	009b      	lsls	r3, r3, #2
 800244a:	220f      	movs	r2, #15
 800244c:	fa02 f303 	lsl.w	r3, r2, r3
 8002450:	43db      	mvns	r3, r3
 8002452:	69ba      	ldr	r2, [r7, #24]
 8002454:	4013      	ands	r3, r2
 8002456:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	691a      	ldr	r2, [r3, #16]
 800245c:	69fb      	ldr	r3, [r7, #28]
 800245e:	f003 0307 	and.w	r3, r3, #7
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	fa02 f303 	lsl.w	r3, r2, r3
 8002468:	69ba      	ldr	r2, [r7, #24]
 800246a:	4313      	orrs	r3, r2
 800246c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	08da      	lsrs	r2, r3, #3
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	3208      	adds	r2, #8
 8002476:	69b9      	ldr	r1, [r7, #24]
 8002478:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	005b      	lsls	r3, r3, #1
 8002486:	2203      	movs	r2, #3
 8002488:	fa02 f303 	lsl.w	r3, r2, r3
 800248c:	43db      	mvns	r3, r3
 800248e:	69ba      	ldr	r2, [r7, #24]
 8002490:	4013      	ands	r3, r2
 8002492:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f003 0203 	and.w	r2, r3, #3
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	005b      	lsls	r3, r3, #1
 80024a0:	fa02 f303 	lsl.w	r3, r2, r3
 80024a4:	69ba      	ldr	r2, [r7, #24]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	69ba      	ldr	r2, [r7, #24]
 80024ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	f000 80c0 	beq.w	800263e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024be:	2300      	movs	r3, #0
 80024c0:	60fb      	str	r3, [r7, #12]
 80024c2:	4b66      	ldr	r3, [pc, #408]	; (800265c <HAL_GPIO_Init+0x324>)
 80024c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024c6:	4a65      	ldr	r2, [pc, #404]	; (800265c <HAL_GPIO_Init+0x324>)
 80024c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024cc:	6453      	str	r3, [r2, #68]	; 0x44
 80024ce:	4b63      	ldr	r3, [pc, #396]	; (800265c <HAL_GPIO_Init+0x324>)
 80024d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024d6:	60fb      	str	r3, [r7, #12]
 80024d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80024da:	4a61      	ldr	r2, [pc, #388]	; (8002660 <HAL_GPIO_Init+0x328>)
 80024dc:	69fb      	ldr	r3, [r7, #28]
 80024de:	089b      	lsrs	r3, r3, #2
 80024e0:	3302      	adds	r3, #2
 80024e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80024e8:	69fb      	ldr	r3, [r7, #28]
 80024ea:	f003 0303 	and.w	r3, r3, #3
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	220f      	movs	r2, #15
 80024f2:	fa02 f303 	lsl.w	r3, r2, r3
 80024f6:	43db      	mvns	r3, r3
 80024f8:	69ba      	ldr	r2, [r7, #24]
 80024fa:	4013      	ands	r3, r2
 80024fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	4a58      	ldr	r2, [pc, #352]	; (8002664 <HAL_GPIO_Init+0x32c>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d037      	beq.n	8002576 <HAL_GPIO_Init+0x23e>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	4a57      	ldr	r2, [pc, #348]	; (8002668 <HAL_GPIO_Init+0x330>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d031      	beq.n	8002572 <HAL_GPIO_Init+0x23a>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	4a56      	ldr	r2, [pc, #344]	; (800266c <HAL_GPIO_Init+0x334>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d02b      	beq.n	800256e <HAL_GPIO_Init+0x236>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	4a55      	ldr	r2, [pc, #340]	; (8002670 <HAL_GPIO_Init+0x338>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d025      	beq.n	800256a <HAL_GPIO_Init+0x232>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	4a54      	ldr	r2, [pc, #336]	; (8002674 <HAL_GPIO_Init+0x33c>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d01f      	beq.n	8002566 <HAL_GPIO_Init+0x22e>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	4a53      	ldr	r2, [pc, #332]	; (8002678 <HAL_GPIO_Init+0x340>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d019      	beq.n	8002562 <HAL_GPIO_Init+0x22a>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	4a52      	ldr	r2, [pc, #328]	; (800267c <HAL_GPIO_Init+0x344>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d013      	beq.n	800255e <HAL_GPIO_Init+0x226>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	4a51      	ldr	r2, [pc, #324]	; (8002680 <HAL_GPIO_Init+0x348>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d00d      	beq.n	800255a <HAL_GPIO_Init+0x222>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4a50      	ldr	r2, [pc, #320]	; (8002684 <HAL_GPIO_Init+0x34c>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d007      	beq.n	8002556 <HAL_GPIO_Init+0x21e>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4a4f      	ldr	r2, [pc, #316]	; (8002688 <HAL_GPIO_Init+0x350>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d101      	bne.n	8002552 <HAL_GPIO_Init+0x21a>
 800254e:	2309      	movs	r3, #9
 8002550:	e012      	b.n	8002578 <HAL_GPIO_Init+0x240>
 8002552:	230a      	movs	r3, #10
 8002554:	e010      	b.n	8002578 <HAL_GPIO_Init+0x240>
 8002556:	2308      	movs	r3, #8
 8002558:	e00e      	b.n	8002578 <HAL_GPIO_Init+0x240>
 800255a:	2307      	movs	r3, #7
 800255c:	e00c      	b.n	8002578 <HAL_GPIO_Init+0x240>
 800255e:	2306      	movs	r3, #6
 8002560:	e00a      	b.n	8002578 <HAL_GPIO_Init+0x240>
 8002562:	2305      	movs	r3, #5
 8002564:	e008      	b.n	8002578 <HAL_GPIO_Init+0x240>
 8002566:	2304      	movs	r3, #4
 8002568:	e006      	b.n	8002578 <HAL_GPIO_Init+0x240>
 800256a:	2303      	movs	r3, #3
 800256c:	e004      	b.n	8002578 <HAL_GPIO_Init+0x240>
 800256e:	2302      	movs	r3, #2
 8002570:	e002      	b.n	8002578 <HAL_GPIO_Init+0x240>
 8002572:	2301      	movs	r3, #1
 8002574:	e000      	b.n	8002578 <HAL_GPIO_Init+0x240>
 8002576:	2300      	movs	r3, #0
 8002578:	69fa      	ldr	r2, [r7, #28]
 800257a:	f002 0203 	and.w	r2, r2, #3
 800257e:	0092      	lsls	r2, r2, #2
 8002580:	4093      	lsls	r3, r2
 8002582:	69ba      	ldr	r2, [r7, #24]
 8002584:	4313      	orrs	r3, r2
 8002586:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002588:	4935      	ldr	r1, [pc, #212]	; (8002660 <HAL_GPIO_Init+0x328>)
 800258a:	69fb      	ldr	r3, [r7, #28]
 800258c:	089b      	lsrs	r3, r3, #2
 800258e:	3302      	adds	r3, #2
 8002590:	69ba      	ldr	r2, [r7, #24]
 8002592:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002596:	4b3d      	ldr	r3, [pc, #244]	; (800268c <HAL_GPIO_Init+0x354>)
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	43db      	mvns	r3, r3
 80025a0:	69ba      	ldr	r2, [r7, #24]
 80025a2:	4013      	ands	r3, r2
 80025a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d003      	beq.n	80025ba <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80025b2:	69ba      	ldr	r2, [r7, #24]
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	4313      	orrs	r3, r2
 80025b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80025ba:	4a34      	ldr	r2, [pc, #208]	; (800268c <HAL_GPIO_Init+0x354>)
 80025bc:	69bb      	ldr	r3, [r7, #24]
 80025be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025c0:	4b32      	ldr	r3, [pc, #200]	; (800268c <HAL_GPIO_Init+0x354>)
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	43db      	mvns	r3, r3
 80025ca:	69ba      	ldr	r2, [r7, #24]
 80025cc:	4013      	ands	r3, r2
 80025ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d003      	beq.n	80025e4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80025dc:	69ba      	ldr	r2, [r7, #24]
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	4313      	orrs	r3, r2
 80025e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80025e4:	4a29      	ldr	r2, [pc, #164]	; (800268c <HAL_GPIO_Init+0x354>)
 80025e6:	69bb      	ldr	r3, [r7, #24]
 80025e8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80025ea:	4b28      	ldr	r3, [pc, #160]	; (800268c <HAL_GPIO_Init+0x354>)
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	43db      	mvns	r3, r3
 80025f4:	69ba      	ldr	r2, [r7, #24]
 80025f6:	4013      	ands	r3, r2
 80025f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d003      	beq.n	800260e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002606:	69ba      	ldr	r2, [r7, #24]
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	4313      	orrs	r3, r2
 800260c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800260e:	4a1f      	ldr	r2, [pc, #124]	; (800268c <HAL_GPIO_Init+0x354>)
 8002610:	69bb      	ldr	r3, [r7, #24]
 8002612:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002614:	4b1d      	ldr	r3, [pc, #116]	; (800268c <HAL_GPIO_Init+0x354>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	43db      	mvns	r3, r3
 800261e:	69ba      	ldr	r2, [r7, #24]
 8002620:	4013      	ands	r3, r2
 8002622:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800262c:	2b00      	cmp	r3, #0
 800262e:	d003      	beq.n	8002638 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002630:	69ba      	ldr	r2, [r7, #24]
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	4313      	orrs	r3, r2
 8002636:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002638:	4a14      	ldr	r2, [pc, #80]	; (800268c <HAL_GPIO_Init+0x354>)
 800263a:	69bb      	ldr	r3, [r7, #24]
 800263c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	3301      	adds	r3, #1
 8002642:	61fb      	str	r3, [r7, #28]
 8002644:	69fb      	ldr	r3, [r7, #28]
 8002646:	2b0f      	cmp	r3, #15
 8002648:	f67f ae84 	bls.w	8002354 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800264c:	bf00      	nop
 800264e:	bf00      	nop
 8002650:	3724      	adds	r7, #36	; 0x24
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr
 800265a:	bf00      	nop
 800265c:	40023800 	.word	0x40023800
 8002660:	40013800 	.word	0x40013800
 8002664:	40020000 	.word	0x40020000
 8002668:	40020400 	.word	0x40020400
 800266c:	40020800 	.word	0x40020800
 8002670:	40020c00 	.word	0x40020c00
 8002674:	40021000 	.word	0x40021000
 8002678:	40021400 	.word	0x40021400
 800267c:	40021800 	.word	0x40021800
 8002680:	40021c00 	.word	0x40021c00
 8002684:	40022000 	.word	0x40022000
 8002688:	40022400 	.word	0x40022400
 800268c:	40013c00 	.word	0x40013c00

08002690 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002690:	b480      	push	{r7}
 8002692:	b083      	sub	sp, #12
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	460b      	mov	r3, r1
 800269a:	807b      	strh	r3, [r7, #2]
 800269c:	4613      	mov	r3, r2
 800269e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026a0:	787b      	ldrb	r3, [r7, #1]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d003      	beq.n	80026ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026a6:	887a      	ldrh	r2, [r7, #2]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80026ac:	e003      	b.n	80026b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80026ae:	887b      	ldrh	r3, [r7, #2]
 80026b0:	041a      	lsls	r2, r3, #16
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	619a      	str	r2, [r3, #24]
}
 80026b6:	bf00      	nop
 80026b8:	370c      	adds	r7, #12
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr
	...

080026c4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b082      	sub	sp, #8
 80026c8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80026ca:	2300      	movs	r3, #0
 80026cc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80026ce:	2300      	movs	r3, #0
 80026d0:	603b      	str	r3, [r7, #0]
 80026d2:	4b20      	ldr	r3, [pc, #128]	; (8002754 <HAL_PWREx_EnableOverDrive+0x90>)
 80026d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d6:	4a1f      	ldr	r2, [pc, #124]	; (8002754 <HAL_PWREx_EnableOverDrive+0x90>)
 80026d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026dc:	6413      	str	r3, [r2, #64]	; 0x40
 80026de:	4b1d      	ldr	r3, [pc, #116]	; (8002754 <HAL_PWREx_EnableOverDrive+0x90>)
 80026e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026e6:	603b      	str	r3, [r7, #0]
 80026e8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80026ea:	4b1b      	ldr	r3, [pc, #108]	; (8002758 <HAL_PWREx_EnableOverDrive+0x94>)
 80026ec:	2201      	movs	r2, #1
 80026ee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80026f0:	f7fe fc68 	bl	8000fc4 <HAL_GetTick>
 80026f4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80026f6:	e009      	b.n	800270c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80026f8:	f7fe fc64 	bl	8000fc4 <HAL_GetTick>
 80026fc:	4602      	mov	r2, r0
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002706:	d901      	bls.n	800270c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002708:	2303      	movs	r3, #3
 800270a:	e01f      	b.n	800274c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800270c:	4b13      	ldr	r3, [pc, #76]	; (800275c <HAL_PWREx_EnableOverDrive+0x98>)
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002714:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002718:	d1ee      	bne.n	80026f8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800271a:	4b11      	ldr	r3, [pc, #68]	; (8002760 <HAL_PWREx_EnableOverDrive+0x9c>)
 800271c:	2201      	movs	r2, #1
 800271e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002720:	f7fe fc50 	bl	8000fc4 <HAL_GetTick>
 8002724:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002726:	e009      	b.n	800273c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002728:	f7fe fc4c 	bl	8000fc4 <HAL_GetTick>
 800272c:	4602      	mov	r2, r0
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002736:	d901      	bls.n	800273c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002738:	2303      	movs	r3, #3
 800273a:	e007      	b.n	800274c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800273c:	4b07      	ldr	r3, [pc, #28]	; (800275c <HAL_PWREx_EnableOverDrive+0x98>)
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002744:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002748:	d1ee      	bne.n	8002728 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800274a:	2300      	movs	r3, #0
}
 800274c:	4618      	mov	r0, r3
 800274e:	3708      	adds	r7, #8
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}
 8002754:	40023800 	.word	0x40023800
 8002758:	420e0040 	.word	0x420e0040
 800275c:	40007000 	.word	0x40007000
 8002760:	420e0044 	.word	0x420e0044

08002764 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b086      	sub	sp, #24
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d101      	bne.n	8002776 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e267      	b.n	8002c46 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0301 	and.w	r3, r3, #1
 800277e:	2b00      	cmp	r3, #0
 8002780:	d075      	beq.n	800286e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002782:	4b88      	ldr	r3, [pc, #544]	; (80029a4 <HAL_RCC_OscConfig+0x240>)
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	f003 030c 	and.w	r3, r3, #12
 800278a:	2b04      	cmp	r3, #4
 800278c:	d00c      	beq.n	80027a8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800278e:	4b85      	ldr	r3, [pc, #532]	; (80029a4 <HAL_RCC_OscConfig+0x240>)
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002796:	2b08      	cmp	r3, #8
 8002798:	d112      	bne.n	80027c0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800279a:	4b82      	ldr	r3, [pc, #520]	; (80029a4 <HAL_RCC_OscConfig+0x240>)
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027a6:	d10b      	bne.n	80027c0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027a8:	4b7e      	ldr	r3, [pc, #504]	; (80029a4 <HAL_RCC_OscConfig+0x240>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d05b      	beq.n	800286c <HAL_RCC_OscConfig+0x108>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d157      	bne.n	800286c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	e242      	b.n	8002c46 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027c8:	d106      	bne.n	80027d8 <HAL_RCC_OscConfig+0x74>
 80027ca:	4b76      	ldr	r3, [pc, #472]	; (80029a4 <HAL_RCC_OscConfig+0x240>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a75      	ldr	r2, [pc, #468]	; (80029a4 <HAL_RCC_OscConfig+0x240>)
 80027d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027d4:	6013      	str	r3, [r2, #0]
 80027d6:	e01d      	b.n	8002814 <HAL_RCC_OscConfig+0xb0>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027e0:	d10c      	bne.n	80027fc <HAL_RCC_OscConfig+0x98>
 80027e2:	4b70      	ldr	r3, [pc, #448]	; (80029a4 <HAL_RCC_OscConfig+0x240>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a6f      	ldr	r2, [pc, #444]	; (80029a4 <HAL_RCC_OscConfig+0x240>)
 80027e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027ec:	6013      	str	r3, [r2, #0]
 80027ee:	4b6d      	ldr	r3, [pc, #436]	; (80029a4 <HAL_RCC_OscConfig+0x240>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a6c      	ldr	r2, [pc, #432]	; (80029a4 <HAL_RCC_OscConfig+0x240>)
 80027f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027f8:	6013      	str	r3, [r2, #0]
 80027fa:	e00b      	b.n	8002814 <HAL_RCC_OscConfig+0xb0>
 80027fc:	4b69      	ldr	r3, [pc, #420]	; (80029a4 <HAL_RCC_OscConfig+0x240>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a68      	ldr	r2, [pc, #416]	; (80029a4 <HAL_RCC_OscConfig+0x240>)
 8002802:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002806:	6013      	str	r3, [r2, #0]
 8002808:	4b66      	ldr	r3, [pc, #408]	; (80029a4 <HAL_RCC_OscConfig+0x240>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a65      	ldr	r2, [pc, #404]	; (80029a4 <HAL_RCC_OscConfig+0x240>)
 800280e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002812:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d013      	beq.n	8002844 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800281c:	f7fe fbd2 	bl	8000fc4 <HAL_GetTick>
 8002820:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002822:	e008      	b.n	8002836 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002824:	f7fe fbce 	bl	8000fc4 <HAL_GetTick>
 8002828:	4602      	mov	r2, r0
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	2b64      	cmp	r3, #100	; 0x64
 8002830:	d901      	bls.n	8002836 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002832:	2303      	movs	r3, #3
 8002834:	e207      	b.n	8002c46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002836:	4b5b      	ldr	r3, [pc, #364]	; (80029a4 <HAL_RCC_OscConfig+0x240>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d0f0      	beq.n	8002824 <HAL_RCC_OscConfig+0xc0>
 8002842:	e014      	b.n	800286e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002844:	f7fe fbbe 	bl	8000fc4 <HAL_GetTick>
 8002848:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800284a:	e008      	b.n	800285e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800284c:	f7fe fbba 	bl	8000fc4 <HAL_GetTick>
 8002850:	4602      	mov	r2, r0
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	2b64      	cmp	r3, #100	; 0x64
 8002858:	d901      	bls.n	800285e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800285a:	2303      	movs	r3, #3
 800285c:	e1f3      	b.n	8002c46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800285e:	4b51      	ldr	r3, [pc, #324]	; (80029a4 <HAL_RCC_OscConfig+0x240>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002866:	2b00      	cmp	r3, #0
 8002868:	d1f0      	bne.n	800284c <HAL_RCC_OscConfig+0xe8>
 800286a:	e000      	b.n	800286e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800286c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0302 	and.w	r3, r3, #2
 8002876:	2b00      	cmp	r3, #0
 8002878:	d063      	beq.n	8002942 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800287a:	4b4a      	ldr	r3, [pc, #296]	; (80029a4 <HAL_RCC_OscConfig+0x240>)
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	f003 030c 	and.w	r3, r3, #12
 8002882:	2b00      	cmp	r3, #0
 8002884:	d00b      	beq.n	800289e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002886:	4b47      	ldr	r3, [pc, #284]	; (80029a4 <HAL_RCC_OscConfig+0x240>)
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800288e:	2b08      	cmp	r3, #8
 8002890:	d11c      	bne.n	80028cc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002892:	4b44      	ldr	r3, [pc, #272]	; (80029a4 <HAL_RCC_OscConfig+0x240>)
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800289a:	2b00      	cmp	r3, #0
 800289c:	d116      	bne.n	80028cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800289e:	4b41      	ldr	r3, [pc, #260]	; (80029a4 <HAL_RCC_OscConfig+0x240>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 0302 	and.w	r3, r3, #2
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d005      	beq.n	80028b6 <HAL_RCC_OscConfig+0x152>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	68db      	ldr	r3, [r3, #12]
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d001      	beq.n	80028b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e1c7      	b.n	8002c46 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028b6:	4b3b      	ldr	r3, [pc, #236]	; (80029a4 <HAL_RCC_OscConfig+0x240>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	691b      	ldr	r3, [r3, #16]
 80028c2:	00db      	lsls	r3, r3, #3
 80028c4:	4937      	ldr	r1, [pc, #220]	; (80029a4 <HAL_RCC_OscConfig+0x240>)
 80028c6:	4313      	orrs	r3, r2
 80028c8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028ca:	e03a      	b.n	8002942 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d020      	beq.n	8002916 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028d4:	4b34      	ldr	r3, [pc, #208]	; (80029a8 <HAL_RCC_OscConfig+0x244>)
 80028d6:	2201      	movs	r2, #1
 80028d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028da:	f7fe fb73 	bl	8000fc4 <HAL_GetTick>
 80028de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028e0:	e008      	b.n	80028f4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028e2:	f7fe fb6f 	bl	8000fc4 <HAL_GetTick>
 80028e6:	4602      	mov	r2, r0
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	1ad3      	subs	r3, r2, r3
 80028ec:	2b02      	cmp	r3, #2
 80028ee:	d901      	bls.n	80028f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80028f0:	2303      	movs	r3, #3
 80028f2:	e1a8      	b.n	8002c46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028f4:	4b2b      	ldr	r3, [pc, #172]	; (80029a4 <HAL_RCC_OscConfig+0x240>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 0302 	and.w	r3, r3, #2
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d0f0      	beq.n	80028e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002900:	4b28      	ldr	r3, [pc, #160]	; (80029a4 <HAL_RCC_OscConfig+0x240>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	691b      	ldr	r3, [r3, #16]
 800290c:	00db      	lsls	r3, r3, #3
 800290e:	4925      	ldr	r1, [pc, #148]	; (80029a4 <HAL_RCC_OscConfig+0x240>)
 8002910:	4313      	orrs	r3, r2
 8002912:	600b      	str	r3, [r1, #0]
 8002914:	e015      	b.n	8002942 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002916:	4b24      	ldr	r3, [pc, #144]	; (80029a8 <HAL_RCC_OscConfig+0x244>)
 8002918:	2200      	movs	r2, #0
 800291a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800291c:	f7fe fb52 	bl	8000fc4 <HAL_GetTick>
 8002920:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002922:	e008      	b.n	8002936 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002924:	f7fe fb4e 	bl	8000fc4 <HAL_GetTick>
 8002928:	4602      	mov	r2, r0
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	2b02      	cmp	r3, #2
 8002930:	d901      	bls.n	8002936 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002932:	2303      	movs	r3, #3
 8002934:	e187      	b.n	8002c46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002936:	4b1b      	ldr	r3, [pc, #108]	; (80029a4 <HAL_RCC_OscConfig+0x240>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 0302 	and.w	r3, r3, #2
 800293e:	2b00      	cmp	r3, #0
 8002940:	d1f0      	bne.n	8002924 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 0308 	and.w	r3, r3, #8
 800294a:	2b00      	cmp	r3, #0
 800294c:	d036      	beq.n	80029bc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	695b      	ldr	r3, [r3, #20]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d016      	beq.n	8002984 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002956:	4b15      	ldr	r3, [pc, #84]	; (80029ac <HAL_RCC_OscConfig+0x248>)
 8002958:	2201      	movs	r2, #1
 800295a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800295c:	f7fe fb32 	bl	8000fc4 <HAL_GetTick>
 8002960:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002962:	e008      	b.n	8002976 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002964:	f7fe fb2e 	bl	8000fc4 <HAL_GetTick>
 8002968:	4602      	mov	r2, r0
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	2b02      	cmp	r3, #2
 8002970:	d901      	bls.n	8002976 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002972:	2303      	movs	r3, #3
 8002974:	e167      	b.n	8002c46 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002976:	4b0b      	ldr	r3, [pc, #44]	; (80029a4 <HAL_RCC_OscConfig+0x240>)
 8002978:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800297a:	f003 0302 	and.w	r3, r3, #2
 800297e:	2b00      	cmp	r3, #0
 8002980:	d0f0      	beq.n	8002964 <HAL_RCC_OscConfig+0x200>
 8002982:	e01b      	b.n	80029bc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002984:	4b09      	ldr	r3, [pc, #36]	; (80029ac <HAL_RCC_OscConfig+0x248>)
 8002986:	2200      	movs	r2, #0
 8002988:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800298a:	f7fe fb1b 	bl	8000fc4 <HAL_GetTick>
 800298e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002990:	e00e      	b.n	80029b0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002992:	f7fe fb17 	bl	8000fc4 <HAL_GetTick>
 8002996:	4602      	mov	r2, r0
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	1ad3      	subs	r3, r2, r3
 800299c:	2b02      	cmp	r3, #2
 800299e:	d907      	bls.n	80029b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80029a0:	2303      	movs	r3, #3
 80029a2:	e150      	b.n	8002c46 <HAL_RCC_OscConfig+0x4e2>
 80029a4:	40023800 	.word	0x40023800
 80029a8:	42470000 	.word	0x42470000
 80029ac:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029b0:	4b88      	ldr	r3, [pc, #544]	; (8002bd4 <HAL_RCC_OscConfig+0x470>)
 80029b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029b4:	f003 0302 	and.w	r3, r3, #2
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d1ea      	bne.n	8002992 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 0304 	and.w	r3, r3, #4
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	f000 8097 	beq.w	8002af8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029ca:	2300      	movs	r3, #0
 80029cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029ce:	4b81      	ldr	r3, [pc, #516]	; (8002bd4 <HAL_RCC_OscConfig+0x470>)
 80029d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d10f      	bne.n	80029fa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029da:	2300      	movs	r3, #0
 80029dc:	60bb      	str	r3, [r7, #8]
 80029de:	4b7d      	ldr	r3, [pc, #500]	; (8002bd4 <HAL_RCC_OscConfig+0x470>)
 80029e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e2:	4a7c      	ldr	r2, [pc, #496]	; (8002bd4 <HAL_RCC_OscConfig+0x470>)
 80029e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029e8:	6413      	str	r3, [r2, #64]	; 0x40
 80029ea:	4b7a      	ldr	r3, [pc, #488]	; (8002bd4 <HAL_RCC_OscConfig+0x470>)
 80029ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029f2:	60bb      	str	r3, [r7, #8]
 80029f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029f6:	2301      	movs	r3, #1
 80029f8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029fa:	4b77      	ldr	r3, [pc, #476]	; (8002bd8 <HAL_RCC_OscConfig+0x474>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d118      	bne.n	8002a38 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a06:	4b74      	ldr	r3, [pc, #464]	; (8002bd8 <HAL_RCC_OscConfig+0x474>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a73      	ldr	r2, [pc, #460]	; (8002bd8 <HAL_RCC_OscConfig+0x474>)
 8002a0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a12:	f7fe fad7 	bl	8000fc4 <HAL_GetTick>
 8002a16:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a18:	e008      	b.n	8002a2c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a1a:	f7fe fad3 	bl	8000fc4 <HAL_GetTick>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	1ad3      	subs	r3, r2, r3
 8002a24:	2b02      	cmp	r3, #2
 8002a26:	d901      	bls.n	8002a2c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002a28:	2303      	movs	r3, #3
 8002a2a:	e10c      	b.n	8002c46 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a2c:	4b6a      	ldr	r3, [pc, #424]	; (8002bd8 <HAL_RCC_OscConfig+0x474>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d0f0      	beq.n	8002a1a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d106      	bne.n	8002a4e <HAL_RCC_OscConfig+0x2ea>
 8002a40:	4b64      	ldr	r3, [pc, #400]	; (8002bd4 <HAL_RCC_OscConfig+0x470>)
 8002a42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a44:	4a63      	ldr	r2, [pc, #396]	; (8002bd4 <HAL_RCC_OscConfig+0x470>)
 8002a46:	f043 0301 	orr.w	r3, r3, #1
 8002a4a:	6713      	str	r3, [r2, #112]	; 0x70
 8002a4c:	e01c      	b.n	8002a88 <HAL_RCC_OscConfig+0x324>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	2b05      	cmp	r3, #5
 8002a54:	d10c      	bne.n	8002a70 <HAL_RCC_OscConfig+0x30c>
 8002a56:	4b5f      	ldr	r3, [pc, #380]	; (8002bd4 <HAL_RCC_OscConfig+0x470>)
 8002a58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a5a:	4a5e      	ldr	r2, [pc, #376]	; (8002bd4 <HAL_RCC_OscConfig+0x470>)
 8002a5c:	f043 0304 	orr.w	r3, r3, #4
 8002a60:	6713      	str	r3, [r2, #112]	; 0x70
 8002a62:	4b5c      	ldr	r3, [pc, #368]	; (8002bd4 <HAL_RCC_OscConfig+0x470>)
 8002a64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a66:	4a5b      	ldr	r2, [pc, #364]	; (8002bd4 <HAL_RCC_OscConfig+0x470>)
 8002a68:	f043 0301 	orr.w	r3, r3, #1
 8002a6c:	6713      	str	r3, [r2, #112]	; 0x70
 8002a6e:	e00b      	b.n	8002a88 <HAL_RCC_OscConfig+0x324>
 8002a70:	4b58      	ldr	r3, [pc, #352]	; (8002bd4 <HAL_RCC_OscConfig+0x470>)
 8002a72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a74:	4a57      	ldr	r2, [pc, #348]	; (8002bd4 <HAL_RCC_OscConfig+0x470>)
 8002a76:	f023 0301 	bic.w	r3, r3, #1
 8002a7a:	6713      	str	r3, [r2, #112]	; 0x70
 8002a7c:	4b55      	ldr	r3, [pc, #340]	; (8002bd4 <HAL_RCC_OscConfig+0x470>)
 8002a7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a80:	4a54      	ldr	r2, [pc, #336]	; (8002bd4 <HAL_RCC_OscConfig+0x470>)
 8002a82:	f023 0304 	bic.w	r3, r3, #4
 8002a86:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d015      	beq.n	8002abc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a90:	f7fe fa98 	bl	8000fc4 <HAL_GetTick>
 8002a94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a96:	e00a      	b.n	8002aae <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a98:	f7fe fa94 	bl	8000fc4 <HAL_GetTick>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	1ad3      	subs	r3, r2, r3
 8002aa2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d901      	bls.n	8002aae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002aaa:	2303      	movs	r3, #3
 8002aac:	e0cb      	b.n	8002c46 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aae:	4b49      	ldr	r3, [pc, #292]	; (8002bd4 <HAL_RCC_OscConfig+0x470>)
 8002ab0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ab2:	f003 0302 	and.w	r3, r3, #2
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d0ee      	beq.n	8002a98 <HAL_RCC_OscConfig+0x334>
 8002aba:	e014      	b.n	8002ae6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002abc:	f7fe fa82 	bl	8000fc4 <HAL_GetTick>
 8002ac0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ac2:	e00a      	b.n	8002ada <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ac4:	f7fe fa7e 	bl	8000fc4 <HAL_GetTick>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d901      	bls.n	8002ada <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002ad6:	2303      	movs	r3, #3
 8002ad8:	e0b5      	b.n	8002c46 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ada:	4b3e      	ldr	r3, [pc, #248]	; (8002bd4 <HAL_RCC_OscConfig+0x470>)
 8002adc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ade:	f003 0302 	and.w	r3, r3, #2
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d1ee      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ae6:	7dfb      	ldrb	r3, [r7, #23]
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	d105      	bne.n	8002af8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002aec:	4b39      	ldr	r3, [pc, #228]	; (8002bd4 <HAL_RCC_OscConfig+0x470>)
 8002aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af0:	4a38      	ldr	r2, [pc, #224]	; (8002bd4 <HAL_RCC_OscConfig+0x470>)
 8002af2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002af6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	699b      	ldr	r3, [r3, #24]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	f000 80a1 	beq.w	8002c44 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b02:	4b34      	ldr	r3, [pc, #208]	; (8002bd4 <HAL_RCC_OscConfig+0x470>)
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	f003 030c 	and.w	r3, r3, #12
 8002b0a:	2b08      	cmp	r3, #8
 8002b0c:	d05c      	beq.n	8002bc8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	699b      	ldr	r3, [r3, #24]
 8002b12:	2b02      	cmp	r3, #2
 8002b14:	d141      	bne.n	8002b9a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b16:	4b31      	ldr	r3, [pc, #196]	; (8002bdc <HAL_RCC_OscConfig+0x478>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b1c:	f7fe fa52 	bl	8000fc4 <HAL_GetTick>
 8002b20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b22:	e008      	b.n	8002b36 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b24:	f7fe fa4e 	bl	8000fc4 <HAL_GetTick>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	2b02      	cmp	r3, #2
 8002b30:	d901      	bls.n	8002b36 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002b32:	2303      	movs	r3, #3
 8002b34:	e087      	b.n	8002c46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b36:	4b27      	ldr	r3, [pc, #156]	; (8002bd4 <HAL_RCC_OscConfig+0x470>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d1f0      	bne.n	8002b24 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	69da      	ldr	r2, [r3, #28]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6a1b      	ldr	r3, [r3, #32]
 8002b4a:	431a      	orrs	r2, r3
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b50:	019b      	lsls	r3, r3, #6
 8002b52:	431a      	orrs	r2, r3
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b58:	085b      	lsrs	r3, r3, #1
 8002b5a:	3b01      	subs	r3, #1
 8002b5c:	041b      	lsls	r3, r3, #16
 8002b5e:	431a      	orrs	r2, r3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b64:	061b      	lsls	r3, r3, #24
 8002b66:	491b      	ldr	r1, [pc, #108]	; (8002bd4 <HAL_RCC_OscConfig+0x470>)
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b6c:	4b1b      	ldr	r3, [pc, #108]	; (8002bdc <HAL_RCC_OscConfig+0x478>)
 8002b6e:	2201      	movs	r2, #1
 8002b70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b72:	f7fe fa27 	bl	8000fc4 <HAL_GetTick>
 8002b76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b78:	e008      	b.n	8002b8c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b7a:	f7fe fa23 	bl	8000fc4 <HAL_GetTick>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	1ad3      	subs	r3, r2, r3
 8002b84:	2b02      	cmp	r3, #2
 8002b86:	d901      	bls.n	8002b8c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002b88:	2303      	movs	r3, #3
 8002b8a:	e05c      	b.n	8002c46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b8c:	4b11      	ldr	r3, [pc, #68]	; (8002bd4 <HAL_RCC_OscConfig+0x470>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d0f0      	beq.n	8002b7a <HAL_RCC_OscConfig+0x416>
 8002b98:	e054      	b.n	8002c44 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b9a:	4b10      	ldr	r3, [pc, #64]	; (8002bdc <HAL_RCC_OscConfig+0x478>)
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ba0:	f7fe fa10 	bl	8000fc4 <HAL_GetTick>
 8002ba4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ba6:	e008      	b.n	8002bba <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ba8:	f7fe fa0c 	bl	8000fc4 <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d901      	bls.n	8002bba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e045      	b.n	8002c46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bba:	4b06      	ldr	r3, [pc, #24]	; (8002bd4 <HAL_RCC_OscConfig+0x470>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d1f0      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x444>
 8002bc6:	e03d      	b.n	8002c44 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	699b      	ldr	r3, [r3, #24]
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d107      	bne.n	8002be0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e038      	b.n	8002c46 <HAL_RCC_OscConfig+0x4e2>
 8002bd4:	40023800 	.word	0x40023800
 8002bd8:	40007000 	.word	0x40007000
 8002bdc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002be0:	4b1b      	ldr	r3, [pc, #108]	; (8002c50 <HAL_RCC_OscConfig+0x4ec>)
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	699b      	ldr	r3, [r3, #24]
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d028      	beq.n	8002c40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d121      	bne.n	8002c40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c06:	429a      	cmp	r2, r3
 8002c08:	d11a      	bne.n	8002c40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c0a:	68fa      	ldr	r2, [r7, #12]
 8002c0c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002c10:	4013      	ands	r3, r2
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002c16:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d111      	bne.n	8002c40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c26:	085b      	lsrs	r3, r3, #1
 8002c28:	3b01      	subs	r3, #1
 8002c2a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d107      	bne.n	8002c40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c3a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d001      	beq.n	8002c44 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	e000      	b.n	8002c46 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002c44:	2300      	movs	r3, #0
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3718      	adds	r7, #24
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	40023800 	.word	0x40023800

08002c54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b084      	sub	sp, #16
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
 8002c5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d101      	bne.n	8002c68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	e0cc      	b.n	8002e02 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c68:	4b68      	ldr	r3, [pc, #416]	; (8002e0c <HAL_RCC_ClockConfig+0x1b8>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 030f 	and.w	r3, r3, #15
 8002c70:	683a      	ldr	r2, [r7, #0]
 8002c72:	429a      	cmp	r2, r3
 8002c74:	d90c      	bls.n	8002c90 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c76:	4b65      	ldr	r3, [pc, #404]	; (8002e0c <HAL_RCC_ClockConfig+0x1b8>)
 8002c78:	683a      	ldr	r2, [r7, #0]
 8002c7a:	b2d2      	uxtb	r2, r2
 8002c7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c7e:	4b63      	ldr	r3, [pc, #396]	; (8002e0c <HAL_RCC_ClockConfig+0x1b8>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 030f 	and.w	r3, r3, #15
 8002c86:	683a      	ldr	r2, [r7, #0]
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d001      	beq.n	8002c90 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e0b8      	b.n	8002e02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 0302 	and.w	r3, r3, #2
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d020      	beq.n	8002cde <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 0304 	and.w	r3, r3, #4
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d005      	beq.n	8002cb4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ca8:	4b59      	ldr	r3, [pc, #356]	; (8002e10 <HAL_RCC_ClockConfig+0x1bc>)
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	4a58      	ldr	r2, [pc, #352]	; (8002e10 <HAL_RCC_ClockConfig+0x1bc>)
 8002cae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002cb2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 0308 	and.w	r3, r3, #8
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d005      	beq.n	8002ccc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002cc0:	4b53      	ldr	r3, [pc, #332]	; (8002e10 <HAL_RCC_ClockConfig+0x1bc>)
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	4a52      	ldr	r2, [pc, #328]	; (8002e10 <HAL_RCC_ClockConfig+0x1bc>)
 8002cc6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002cca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ccc:	4b50      	ldr	r3, [pc, #320]	; (8002e10 <HAL_RCC_ClockConfig+0x1bc>)
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	494d      	ldr	r1, [pc, #308]	; (8002e10 <HAL_RCC_ClockConfig+0x1bc>)
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 0301 	and.w	r3, r3, #1
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d044      	beq.n	8002d74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d107      	bne.n	8002d02 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cf2:	4b47      	ldr	r3, [pc, #284]	; (8002e10 <HAL_RCC_ClockConfig+0x1bc>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d119      	bne.n	8002d32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e07f      	b.n	8002e02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	2b02      	cmp	r3, #2
 8002d08:	d003      	beq.n	8002d12 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d0e:	2b03      	cmp	r3, #3
 8002d10:	d107      	bne.n	8002d22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d12:	4b3f      	ldr	r3, [pc, #252]	; (8002e10 <HAL_RCC_ClockConfig+0x1bc>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d109      	bne.n	8002d32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e06f      	b.n	8002e02 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d22:	4b3b      	ldr	r3, [pc, #236]	; (8002e10 <HAL_RCC_ClockConfig+0x1bc>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 0302 	and.w	r3, r3, #2
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d101      	bne.n	8002d32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e067      	b.n	8002e02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d32:	4b37      	ldr	r3, [pc, #220]	; (8002e10 <HAL_RCC_ClockConfig+0x1bc>)
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	f023 0203 	bic.w	r2, r3, #3
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	4934      	ldr	r1, [pc, #208]	; (8002e10 <HAL_RCC_ClockConfig+0x1bc>)
 8002d40:	4313      	orrs	r3, r2
 8002d42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d44:	f7fe f93e 	bl	8000fc4 <HAL_GetTick>
 8002d48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d4a:	e00a      	b.n	8002d62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d4c:	f7fe f93a 	bl	8000fc4 <HAL_GetTick>
 8002d50:	4602      	mov	r2, r0
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	1ad3      	subs	r3, r2, r3
 8002d56:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d901      	bls.n	8002d62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d5e:	2303      	movs	r3, #3
 8002d60:	e04f      	b.n	8002e02 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d62:	4b2b      	ldr	r3, [pc, #172]	; (8002e10 <HAL_RCC_ClockConfig+0x1bc>)
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	f003 020c 	and.w	r2, r3, #12
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d1eb      	bne.n	8002d4c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d74:	4b25      	ldr	r3, [pc, #148]	; (8002e0c <HAL_RCC_ClockConfig+0x1b8>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 030f 	and.w	r3, r3, #15
 8002d7c:	683a      	ldr	r2, [r7, #0]
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	d20c      	bcs.n	8002d9c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d82:	4b22      	ldr	r3, [pc, #136]	; (8002e0c <HAL_RCC_ClockConfig+0x1b8>)
 8002d84:	683a      	ldr	r2, [r7, #0]
 8002d86:	b2d2      	uxtb	r2, r2
 8002d88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d8a:	4b20      	ldr	r3, [pc, #128]	; (8002e0c <HAL_RCC_ClockConfig+0x1b8>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 030f 	and.w	r3, r3, #15
 8002d92:	683a      	ldr	r2, [r7, #0]
 8002d94:	429a      	cmp	r2, r3
 8002d96:	d001      	beq.n	8002d9c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e032      	b.n	8002e02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 0304 	and.w	r3, r3, #4
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d008      	beq.n	8002dba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002da8:	4b19      	ldr	r3, [pc, #100]	; (8002e10 <HAL_RCC_ClockConfig+0x1bc>)
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	4916      	ldr	r1, [pc, #88]	; (8002e10 <HAL_RCC_ClockConfig+0x1bc>)
 8002db6:	4313      	orrs	r3, r2
 8002db8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 0308 	and.w	r3, r3, #8
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d009      	beq.n	8002dda <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002dc6:	4b12      	ldr	r3, [pc, #72]	; (8002e10 <HAL_RCC_ClockConfig+0x1bc>)
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	691b      	ldr	r3, [r3, #16]
 8002dd2:	00db      	lsls	r3, r3, #3
 8002dd4:	490e      	ldr	r1, [pc, #56]	; (8002e10 <HAL_RCC_ClockConfig+0x1bc>)
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002dda:	f000 f821 	bl	8002e20 <HAL_RCC_GetSysClockFreq>
 8002dde:	4602      	mov	r2, r0
 8002de0:	4b0b      	ldr	r3, [pc, #44]	; (8002e10 <HAL_RCC_ClockConfig+0x1bc>)
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	091b      	lsrs	r3, r3, #4
 8002de6:	f003 030f 	and.w	r3, r3, #15
 8002dea:	490a      	ldr	r1, [pc, #40]	; (8002e14 <HAL_RCC_ClockConfig+0x1c0>)
 8002dec:	5ccb      	ldrb	r3, [r1, r3]
 8002dee:	fa22 f303 	lsr.w	r3, r2, r3
 8002df2:	4a09      	ldr	r2, [pc, #36]	; (8002e18 <HAL_RCC_ClockConfig+0x1c4>)
 8002df4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002df6:	4b09      	ldr	r3, [pc, #36]	; (8002e1c <HAL_RCC_ClockConfig+0x1c8>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f7fe f89e 	bl	8000f3c <HAL_InitTick>

  return HAL_OK;
 8002e00:	2300      	movs	r3, #0
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	3710      	adds	r7, #16
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}
 8002e0a:	bf00      	nop
 8002e0c:	40023c00 	.word	0x40023c00
 8002e10:	40023800 	.word	0x40023800
 8002e14:	0801456c 	.word	0x0801456c
 8002e18:	20000000 	.word	0x20000000
 8002e1c:	20000004 	.word	0x20000004

08002e20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e24:	b094      	sub	sp, #80	; 0x50
 8002e26:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	647b      	str	r3, [r7, #68]	; 0x44
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e30:	2300      	movs	r3, #0
 8002e32:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002e34:	2300      	movs	r3, #0
 8002e36:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e38:	4b79      	ldr	r3, [pc, #484]	; (8003020 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	f003 030c 	and.w	r3, r3, #12
 8002e40:	2b08      	cmp	r3, #8
 8002e42:	d00d      	beq.n	8002e60 <HAL_RCC_GetSysClockFreq+0x40>
 8002e44:	2b08      	cmp	r3, #8
 8002e46:	f200 80e1 	bhi.w	800300c <HAL_RCC_GetSysClockFreq+0x1ec>
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d002      	beq.n	8002e54 <HAL_RCC_GetSysClockFreq+0x34>
 8002e4e:	2b04      	cmp	r3, #4
 8002e50:	d003      	beq.n	8002e5a <HAL_RCC_GetSysClockFreq+0x3a>
 8002e52:	e0db      	b.n	800300c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e54:	4b73      	ldr	r3, [pc, #460]	; (8003024 <HAL_RCC_GetSysClockFreq+0x204>)
 8002e56:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002e58:	e0db      	b.n	8003012 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e5a:	4b73      	ldr	r3, [pc, #460]	; (8003028 <HAL_RCC_GetSysClockFreq+0x208>)
 8002e5c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002e5e:	e0d8      	b.n	8003012 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e60:	4b6f      	ldr	r3, [pc, #444]	; (8003020 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e68:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e6a:	4b6d      	ldr	r3, [pc, #436]	; (8003020 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d063      	beq.n	8002f3e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e76:	4b6a      	ldr	r3, [pc, #424]	; (8003020 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	099b      	lsrs	r3, r3, #6
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e80:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002e82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e88:	633b      	str	r3, [r7, #48]	; 0x30
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	637b      	str	r3, [r7, #52]	; 0x34
 8002e8e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002e92:	4622      	mov	r2, r4
 8002e94:	462b      	mov	r3, r5
 8002e96:	f04f 0000 	mov.w	r0, #0
 8002e9a:	f04f 0100 	mov.w	r1, #0
 8002e9e:	0159      	lsls	r1, r3, #5
 8002ea0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ea4:	0150      	lsls	r0, r2, #5
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	460b      	mov	r3, r1
 8002eaa:	4621      	mov	r1, r4
 8002eac:	1a51      	subs	r1, r2, r1
 8002eae:	6139      	str	r1, [r7, #16]
 8002eb0:	4629      	mov	r1, r5
 8002eb2:	eb63 0301 	sbc.w	r3, r3, r1
 8002eb6:	617b      	str	r3, [r7, #20]
 8002eb8:	f04f 0200 	mov.w	r2, #0
 8002ebc:	f04f 0300 	mov.w	r3, #0
 8002ec0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ec4:	4659      	mov	r1, fp
 8002ec6:	018b      	lsls	r3, r1, #6
 8002ec8:	4651      	mov	r1, sl
 8002eca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ece:	4651      	mov	r1, sl
 8002ed0:	018a      	lsls	r2, r1, #6
 8002ed2:	4651      	mov	r1, sl
 8002ed4:	ebb2 0801 	subs.w	r8, r2, r1
 8002ed8:	4659      	mov	r1, fp
 8002eda:	eb63 0901 	sbc.w	r9, r3, r1
 8002ede:	f04f 0200 	mov.w	r2, #0
 8002ee2:	f04f 0300 	mov.w	r3, #0
 8002ee6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002eea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002eee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002ef2:	4690      	mov	r8, r2
 8002ef4:	4699      	mov	r9, r3
 8002ef6:	4623      	mov	r3, r4
 8002ef8:	eb18 0303 	adds.w	r3, r8, r3
 8002efc:	60bb      	str	r3, [r7, #8]
 8002efe:	462b      	mov	r3, r5
 8002f00:	eb49 0303 	adc.w	r3, r9, r3
 8002f04:	60fb      	str	r3, [r7, #12]
 8002f06:	f04f 0200 	mov.w	r2, #0
 8002f0a:	f04f 0300 	mov.w	r3, #0
 8002f0e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002f12:	4629      	mov	r1, r5
 8002f14:	024b      	lsls	r3, r1, #9
 8002f16:	4621      	mov	r1, r4
 8002f18:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002f1c:	4621      	mov	r1, r4
 8002f1e:	024a      	lsls	r2, r1, #9
 8002f20:	4610      	mov	r0, r2
 8002f22:	4619      	mov	r1, r3
 8002f24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f26:	2200      	movs	r2, #0
 8002f28:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f2a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002f2c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002f30:	f7fd f9ae 	bl	8000290 <__aeabi_uldivmod>
 8002f34:	4602      	mov	r2, r0
 8002f36:	460b      	mov	r3, r1
 8002f38:	4613      	mov	r3, r2
 8002f3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f3c:	e058      	b.n	8002ff0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f3e:	4b38      	ldr	r3, [pc, #224]	; (8003020 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	099b      	lsrs	r3, r3, #6
 8002f44:	2200      	movs	r2, #0
 8002f46:	4618      	mov	r0, r3
 8002f48:	4611      	mov	r1, r2
 8002f4a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002f4e:	623b      	str	r3, [r7, #32]
 8002f50:	2300      	movs	r3, #0
 8002f52:	627b      	str	r3, [r7, #36]	; 0x24
 8002f54:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002f58:	4642      	mov	r2, r8
 8002f5a:	464b      	mov	r3, r9
 8002f5c:	f04f 0000 	mov.w	r0, #0
 8002f60:	f04f 0100 	mov.w	r1, #0
 8002f64:	0159      	lsls	r1, r3, #5
 8002f66:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f6a:	0150      	lsls	r0, r2, #5
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	460b      	mov	r3, r1
 8002f70:	4641      	mov	r1, r8
 8002f72:	ebb2 0a01 	subs.w	sl, r2, r1
 8002f76:	4649      	mov	r1, r9
 8002f78:	eb63 0b01 	sbc.w	fp, r3, r1
 8002f7c:	f04f 0200 	mov.w	r2, #0
 8002f80:	f04f 0300 	mov.w	r3, #0
 8002f84:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002f88:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002f8c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002f90:	ebb2 040a 	subs.w	r4, r2, sl
 8002f94:	eb63 050b 	sbc.w	r5, r3, fp
 8002f98:	f04f 0200 	mov.w	r2, #0
 8002f9c:	f04f 0300 	mov.w	r3, #0
 8002fa0:	00eb      	lsls	r3, r5, #3
 8002fa2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002fa6:	00e2      	lsls	r2, r4, #3
 8002fa8:	4614      	mov	r4, r2
 8002faa:	461d      	mov	r5, r3
 8002fac:	4643      	mov	r3, r8
 8002fae:	18e3      	adds	r3, r4, r3
 8002fb0:	603b      	str	r3, [r7, #0]
 8002fb2:	464b      	mov	r3, r9
 8002fb4:	eb45 0303 	adc.w	r3, r5, r3
 8002fb8:	607b      	str	r3, [r7, #4]
 8002fba:	f04f 0200 	mov.w	r2, #0
 8002fbe:	f04f 0300 	mov.w	r3, #0
 8002fc2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002fc6:	4629      	mov	r1, r5
 8002fc8:	028b      	lsls	r3, r1, #10
 8002fca:	4621      	mov	r1, r4
 8002fcc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002fd0:	4621      	mov	r1, r4
 8002fd2:	028a      	lsls	r2, r1, #10
 8002fd4:	4610      	mov	r0, r2
 8002fd6:	4619      	mov	r1, r3
 8002fd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fda:	2200      	movs	r2, #0
 8002fdc:	61bb      	str	r3, [r7, #24]
 8002fde:	61fa      	str	r2, [r7, #28]
 8002fe0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002fe4:	f7fd f954 	bl	8000290 <__aeabi_uldivmod>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	460b      	mov	r3, r1
 8002fec:	4613      	mov	r3, r2
 8002fee:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ff0:	4b0b      	ldr	r3, [pc, #44]	; (8003020 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	0c1b      	lsrs	r3, r3, #16
 8002ff6:	f003 0303 	and.w	r3, r3, #3
 8002ffa:	3301      	adds	r3, #1
 8002ffc:	005b      	lsls	r3, r3, #1
 8002ffe:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003000:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003002:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003004:	fbb2 f3f3 	udiv	r3, r2, r3
 8003008:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800300a:	e002      	b.n	8003012 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800300c:	4b05      	ldr	r3, [pc, #20]	; (8003024 <HAL_RCC_GetSysClockFreq+0x204>)
 800300e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003010:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003012:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003014:	4618      	mov	r0, r3
 8003016:	3750      	adds	r7, #80	; 0x50
 8003018:	46bd      	mov	sp, r7
 800301a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800301e:	bf00      	nop
 8003020:	40023800 	.word	0x40023800
 8003024:	00f42400 	.word	0x00f42400
 8003028:	007a1200 	.word	0x007a1200

0800302c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800302c:	b480      	push	{r7}
 800302e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003030:	4b03      	ldr	r3, [pc, #12]	; (8003040 <HAL_RCC_GetHCLKFreq+0x14>)
 8003032:	681b      	ldr	r3, [r3, #0]
}
 8003034:	4618      	mov	r0, r3
 8003036:	46bd      	mov	sp, r7
 8003038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303c:	4770      	bx	lr
 800303e:	bf00      	nop
 8003040:	20000000 	.word	0x20000000

08003044 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003048:	f7ff fff0 	bl	800302c <HAL_RCC_GetHCLKFreq>
 800304c:	4602      	mov	r2, r0
 800304e:	4b05      	ldr	r3, [pc, #20]	; (8003064 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	0a9b      	lsrs	r3, r3, #10
 8003054:	f003 0307 	and.w	r3, r3, #7
 8003058:	4903      	ldr	r1, [pc, #12]	; (8003068 <HAL_RCC_GetPCLK1Freq+0x24>)
 800305a:	5ccb      	ldrb	r3, [r1, r3]
 800305c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003060:	4618      	mov	r0, r3
 8003062:	bd80      	pop	{r7, pc}
 8003064:	40023800 	.word	0x40023800
 8003068:	0801457c 	.word	0x0801457c

0800306c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003070:	f7ff ffdc 	bl	800302c <HAL_RCC_GetHCLKFreq>
 8003074:	4602      	mov	r2, r0
 8003076:	4b05      	ldr	r3, [pc, #20]	; (800308c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	0b5b      	lsrs	r3, r3, #13
 800307c:	f003 0307 	and.w	r3, r3, #7
 8003080:	4903      	ldr	r1, [pc, #12]	; (8003090 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003082:	5ccb      	ldrb	r3, [r1, r3]
 8003084:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003088:	4618      	mov	r0, r3
 800308a:	bd80      	pop	{r7, pc}
 800308c:	40023800 	.word	0x40023800
 8003090:	0801457c 	.word	0x0801457c

08003094 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b082      	sub	sp, #8
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d101      	bne.n	80030a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e03f      	b.n	8003126 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d106      	bne.n	80030c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2200      	movs	r2, #0
 80030b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f7fd fd42 	bl	8000b44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2224      	movs	r2, #36	; 0x24
 80030c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	68da      	ldr	r2, [r3, #12]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80030d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	f000 fd7b 	bl	8003bd4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	691a      	ldr	r2, [r3, #16]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80030ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	695a      	ldr	r2, [r3, #20]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80030fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	68da      	ldr	r2, [r3, #12]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800310c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2200      	movs	r2, #0
 8003112:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2220      	movs	r2, #32
 8003118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2220      	movs	r2, #32
 8003120:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003124:	2300      	movs	r3, #0
}
 8003126:	4618      	mov	r0, r3
 8003128:	3708      	adds	r7, #8
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}

0800312e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800312e:	b580      	push	{r7, lr}
 8003130:	b08a      	sub	sp, #40	; 0x28
 8003132:	af02      	add	r7, sp, #8
 8003134:	60f8      	str	r0, [r7, #12]
 8003136:	60b9      	str	r1, [r7, #8]
 8003138:	603b      	str	r3, [r7, #0]
 800313a:	4613      	mov	r3, r2
 800313c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800313e:	2300      	movs	r3, #0
 8003140:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003148:	b2db      	uxtb	r3, r3
 800314a:	2b20      	cmp	r3, #32
 800314c:	d17c      	bne.n	8003248 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d002      	beq.n	800315a <HAL_UART_Transmit+0x2c>
 8003154:	88fb      	ldrh	r3, [r7, #6]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d101      	bne.n	800315e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e075      	b.n	800324a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003164:	2b01      	cmp	r3, #1
 8003166:	d101      	bne.n	800316c <HAL_UART_Transmit+0x3e>
 8003168:	2302      	movs	r3, #2
 800316a:	e06e      	b.n	800324a <HAL_UART_Transmit+0x11c>
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2201      	movs	r2, #1
 8003170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2200      	movs	r2, #0
 8003178:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2221      	movs	r2, #33	; 0x21
 800317e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003182:	f7fd ff1f 	bl	8000fc4 <HAL_GetTick>
 8003186:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	88fa      	ldrh	r2, [r7, #6]
 800318c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	88fa      	ldrh	r2, [r7, #6]
 8003192:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800319c:	d108      	bne.n	80031b0 <HAL_UART_Transmit+0x82>
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	691b      	ldr	r3, [r3, #16]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d104      	bne.n	80031b0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80031a6:	2300      	movs	r3, #0
 80031a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	61bb      	str	r3, [r7, #24]
 80031ae:	e003      	b.n	80031b8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80031b4:	2300      	movs	r3, #0
 80031b6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2200      	movs	r2, #0
 80031bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80031c0:	e02a      	b.n	8003218 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	9300      	str	r3, [sp, #0]
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	2200      	movs	r2, #0
 80031ca:	2180      	movs	r1, #128	; 0x80
 80031cc:	68f8      	ldr	r0, [r7, #12]
 80031ce:	f000 faf9 	bl	80037c4 <UART_WaitOnFlagUntilTimeout>
 80031d2:	4603      	mov	r3, r0
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d001      	beq.n	80031dc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80031d8:	2303      	movs	r3, #3
 80031da:	e036      	b.n	800324a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80031dc:	69fb      	ldr	r3, [r7, #28]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d10b      	bne.n	80031fa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80031e2:	69bb      	ldr	r3, [r7, #24]
 80031e4:	881b      	ldrh	r3, [r3, #0]
 80031e6:	461a      	mov	r2, r3
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80031f0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80031f2:	69bb      	ldr	r3, [r7, #24]
 80031f4:	3302      	adds	r3, #2
 80031f6:	61bb      	str	r3, [r7, #24]
 80031f8:	e007      	b.n	800320a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80031fa:	69fb      	ldr	r3, [r7, #28]
 80031fc:	781a      	ldrb	r2, [r3, #0]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003204:	69fb      	ldr	r3, [r7, #28]
 8003206:	3301      	adds	r3, #1
 8003208:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800320e:	b29b      	uxth	r3, r3
 8003210:	3b01      	subs	r3, #1
 8003212:	b29a      	uxth	r2, r3
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800321c:	b29b      	uxth	r3, r3
 800321e:	2b00      	cmp	r3, #0
 8003220:	d1cf      	bne.n	80031c2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	9300      	str	r3, [sp, #0]
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	2200      	movs	r2, #0
 800322a:	2140      	movs	r1, #64	; 0x40
 800322c:	68f8      	ldr	r0, [r7, #12]
 800322e:	f000 fac9 	bl	80037c4 <UART_WaitOnFlagUntilTimeout>
 8003232:	4603      	mov	r3, r0
 8003234:	2b00      	cmp	r3, #0
 8003236:	d001      	beq.n	800323c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003238:	2303      	movs	r3, #3
 800323a:	e006      	b.n	800324a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2220      	movs	r2, #32
 8003240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003244:	2300      	movs	r3, #0
 8003246:	e000      	b.n	800324a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003248:	2302      	movs	r3, #2
  }
}
 800324a:	4618      	mov	r0, r3
 800324c:	3720      	adds	r7, #32
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}
	...

08003254 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b0ba      	sub	sp, #232	; 0xe8
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	695b      	ldr	r3, [r3, #20]
 8003276:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800327a:	2300      	movs	r3, #0
 800327c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003280:	2300      	movs	r3, #0
 8003282:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003286:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800328a:	f003 030f 	and.w	r3, r3, #15
 800328e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003292:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003296:	2b00      	cmp	r3, #0
 8003298:	d10f      	bne.n	80032ba <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800329a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800329e:	f003 0320 	and.w	r3, r3, #32
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d009      	beq.n	80032ba <HAL_UART_IRQHandler+0x66>
 80032a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032aa:	f003 0320 	and.w	r3, r3, #32
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d003      	beq.n	80032ba <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f000 fbd3 	bl	8003a5e <UART_Receive_IT>
      return;
 80032b8:	e256      	b.n	8003768 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80032ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80032be:	2b00      	cmp	r3, #0
 80032c0:	f000 80de 	beq.w	8003480 <HAL_UART_IRQHandler+0x22c>
 80032c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80032c8:	f003 0301 	and.w	r3, r3, #1
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d106      	bne.n	80032de <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80032d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032d4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80032d8:	2b00      	cmp	r3, #0
 80032da:	f000 80d1 	beq.w	8003480 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80032de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032e2:	f003 0301 	and.w	r3, r3, #1
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d00b      	beq.n	8003302 <HAL_UART_IRQHandler+0xae>
 80032ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d005      	beq.n	8003302 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fa:	f043 0201 	orr.w	r2, r3, #1
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003302:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003306:	f003 0304 	and.w	r3, r3, #4
 800330a:	2b00      	cmp	r3, #0
 800330c:	d00b      	beq.n	8003326 <HAL_UART_IRQHandler+0xd2>
 800330e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003312:	f003 0301 	and.w	r3, r3, #1
 8003316:	2b00      	cmp	r3, #0
 8003318:	d005      	beq.n	8003326 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331e:	f043 0202 	orr.w	r2, r3, #2
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003326:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800332a:	f003 0302 	and.w	r3, r3, #2
 800332e:	2b00      	cmp	r3, #0
 8003330:	d00b      	beq.n	800334a <HAL_UART_IRQHandler+0xf6>
 8003332:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003336:	f003 0301 	and.w	r3, r3, #1
 800333a:	2b00      	cmp	r3, #0
 800333c:	d005      	beq.n	800334a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003342:	f043 0204 	orr.w	r2, r3, #4
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800334a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800334e:	f003 0308 	and.w	r3, r3, #8
 8003352:	2b00      	cmp	r3, #0
 8003354:	d011      	beq.n	800337a <HAL_UART_IRQHandler+0x126>
 8003356:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800335a:	f003 0320 	and.w	r3, r3, #32
 800335e:	2b00      	cmp	r3, #0
 8003360:	d105      	bne.n	800336e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003362:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003366:	f003 0301 	and.w	r3, r3, #1
 800336a:	2b00      	cmp	r3, #0
 800336c:	d005      	beq.n	800337a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003372:	f043 0208 	orr.w	r2, r3, #8
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800337e:	2b00      	cmp	r3, #0
 8003380:	f000 81ed 	beq.w	800375e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003384:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003388:	f003 0320 	and.w	r3, r3, #32
 800338c:	2b00      	cmp	r3, #0
 800338e:	d008      	beq.n	80033a2 <HAL_UART_IRQHandler+0x14e>
 8003390:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003394:	f003 0320 	and.w	r3, r3, #32
 8003398:	2b00      	cmp	r3, #0
 800339a:	d002      	beq.n	80033a2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800339c:	6878      	ldr	r0, [r7, #4]
 800339e:	f000 fb5e 	bl	8003a5e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	695b      	ldr	r3, [r3, #20]
 80033a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033ac:	2b40      	cmp	r3, #64	; 0x40
 80033ae:	bf0c      	ite	eq
 80033b0:	2301      	moveq	r3, #1
 80033b2:	2300      	movne	r3, #0
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033be:	f003 0308 	and.w	r3, r3, #8
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d103      	bne.n	80033ce <HAL_UART_IRQHandler+0x17a>
 80033c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d04f      	beq.n	800346e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f000 fa66 	bl	80038a0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	695b      	ldr	r3, [r3, #20]
 80033da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033de:	2b40      	cmp	r3, #64	; 0x40
 80033e0:	d141      	bne.n	8003466 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	3314      	adds	r3, #20
 80033e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80033f0:	e853 3f00 	ldrex	r3, [r3]
 80033f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80033f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80033fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003400:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	3314      	adds	r3, #20
 800340a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800340e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003412:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003416:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800341a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800341e:	e841 2300 	strex	r3, r2, [r1]
 8003422:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003426:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800342a:	2b00      	cmp	r3, #0
 800342c:	d1d9      	bne.n	80033e2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003432:	2b00      	cmp	r3, #0
 8003434:	d013      	beq.n	800345e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800343a:	4a7d      	ldr	r2, [pc, #500]	; (8003630 <HAL_UART_IRQHandler+0x3dc>)
 800343c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003442:	4618      	mov	r0, r3
 8003444:	f7fd ff6f 	bl	8001326 <HAL_DMA_Abort_IT>
 8003448:	4603      	mov	r3, r0
 800344a:	2b00      	cmp	r3, #0
 800344c:	d016      	beq.n	800347c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003452:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003454:	687a      	ldr	r2, [r7, #4]
 8003456:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003458:	4610      	mov	r0, r2
 800345a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800345c:	e00e      	b.n	800347c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f000 f99a 	bl	8003798 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003464:	e00a      	b.n	800347c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f000 f996 	bl	8003798 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800346c:	e006      	b.n	800347c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f000 f992 	bl	8003798 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800347a:	e170      	b.n	800375e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800347c:	bf00      	nop
    return;
 800347e:	e16e      	b.n	800375e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003484:	2b01      	cmp	r3, #1
 8003486:	f040 814a 	bne.w	800371e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800348a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800348e:	f003 0310 	and.w	r3, r3, #16
 8003492:	2b00      	cmp	r3, #0
 8003494:	f000 8143 	beq.w	800371e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003498:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800349c:	f003 0310 	and.w	r3, r3, #16
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	f000 813c 	beq.w	800371e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80034a6:	2300      	movs	r3, #0
 80034a8:	60bb      	str	r3, [r7, #8]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	60bb      	str	r3, [r7, #8]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	60bb      	str	r3, [r7, #8]
 80034ba:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	695b      	ldr	r3, [r3, #20]
 80034c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034c6:	2b40      	cmp	r3, #64	; 0x40
 80034c8:	f040 80b4 	bne.w	8003634 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80034d8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80034dc:	2b00      	cmp	r3, #0
 80034de:	f000 8140 	beq.w	8003762 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80034e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80034ea:	429a      	cmp	r2, r3
 80034ec:	f080 8139 	bcs.w	8003762 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80034f6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034fc:	69db      	ldr	r3, [r3, #28]
 80034fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003502:	f000 8088 	beq.w	8003616 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	330c      	adds	r3, #12
 800350c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003510:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003514:	e853 3f00 	ldrex	r3, [r3]
 8003518:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800351c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003520:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003524:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	330c      	adds	r3, #12
 800352e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003532:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003536:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800353a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800353e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003542:	e841 2300 	strex	r3, r2, [r1]
 8003546:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800354a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800354e:	2b00      	cmp	r3, #0
 8003550:	d1d9      	bne.n	8003506 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	3314      	adds	r3, #20
 8003558:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800355a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800355c:	e853 3f00 	ldrex	r3, [r3]
 8003560:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003562:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003564:	f023 0301 	bic.w	r3, r3, #1
 8003568:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	3314      	adds	r3, #20
 8003572:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003576:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800357a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800357c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800357e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003582:	e841 2300 	strex	r3, r2, [r1]
 8003586:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003588:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800358a:	2b00      	cmp	r3, #0
 800358c:	d1e1      	bne.n	8003552 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	3314      	adds	r3, #20
 8003594:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003596:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003598:	e853 3f00 	ldrex	r3, [r3]
 800359c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800359e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80035a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	3314      	adds	r3, #20
 80035ae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80035b2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80035b4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035b6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80035b8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80035ba:	e841 2300 	strex	r3, r2, [r1]
 80035be:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80035c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d1e3      	bne.n	800358e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2220      	movs	r2, #32
 80035ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2200      	movs	r2, #0
 80035d2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	330c      	adds	r3, #12
 80035da:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035de:	e853 3f00 	ldrex	r3, [r3]
 80035e2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80035e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035e6:	f023 0310 	bic.w	r3, r3, #16
 80035ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	330c      	adds	r3, #12
 80035f4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80035f8:	65ba      	str	r2, [r7, #88]	; 0x58
 80035fa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035fc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80035fe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003600:	e841 2300 	strex	r3, r2, [r1]
 8003604:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003606:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003608:	2b00      	cmp	r3, #0
 800360a:	d1e3      	bne.n	80035d4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003610:	4618      	mov	r0, r3
 8003612:	f7fd fe18 	bl	8001246 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800361e:	b29b      	uxth	r3, r3
 8003620:	1ad3      	subs	r3, r2, r3
 8003622:	b29b      	uxth	r3, r3
 8003624:	4619      	mov	r1, r3
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f000 f8c0 	bl	80037ac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800362c:	e099      	b.n	8003762 <HAL_UART_IRQHandler+0x50e>
 800362e:	bf00      	nop
 8003630:	08003967 	.word	0x08003967
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800363c:	b29b      	uxth	r3, r3
 800363e:	1ad3      	subs	r3, r2, r3
 8003640:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003648:	b29b      	uxth	r3, r3
 800364a:	2b00      	cmp	r3, #0
 800364c:	f000 808b 	beq.w	8003766 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003650:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003654:	2b00      	cmp	r3, #0
 8003656:	f000 8086 	beq.w	8003766 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	330c      	adds	r3, #12
 8003660:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003664:	e853 3f00 	ldrex	r3, [r3]
 8003668:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800366a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800366c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003670:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	330c      	adds	r3, #12
 800367a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800367e:	647a      	str	r2, [r7, #68]	; 0x44
 8003680:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003682:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003684:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003686:	e841 2300 	strex	r3, r2, [r1]
 800368a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800368c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800368e:	2b00      	cmp	r3, #0
 8003690:	d1e3      	bne.n	800365a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	3314      	adds	r3, #20
 8003698:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800369a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369c:	e853 3f00 	ldrex	r3, [r3]
 80036a0:	623b      	str	r3, [r7, #32]
   return(result);
 80036a2:	6a3b      	ldr	r3, [r7, #32]
 80036a4:	f023 0301 	bic.w	r3, r3, #1
 80036a8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	3314      	adds	r3, #20
 80036b2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80036b6:	633a      	str	r2, [r7, #48]	; 0x30
 80036b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80036bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036be:	e841 2300 	strex	r3, r2, [r1]
 80036c2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80036c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d1e3      	bne.n	8003692 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2220      	movs	r2, #32
 80036ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2200      	movs	r2, #0
 80036d6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	330c      	adds	r3, #12
 80036de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	e853 3f00 	ldrex	r3, [r3]
 80036e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	f023 0310 	bic.w	r3, r3, #16
 80036ee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	330c      	adds	r3, #12
 80036f8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80036fc:	61fa      	str	r2, [r7, #28]
 80036fe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003700:	69b9      	ldr	r1, [r7, #24]
 8003702:	69fa      	ldr	r2, [r7, #28]
 8003704:	e841 2300 	strex	r3, r2, [r1]
 8003708:	617b      	str	r3, [r7, #20]
   return(result);
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d1e3      	bne.n	80036d8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003710:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003714:	4619      	mov	r1, r3
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f000 f848 	bl	80037ac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800371c:	e023      	b.n	8003766 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800371e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003722:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003726:	2b00      	cmp	r3, #0
 8003728:	d009      	beq.n	800373e <HAL_UART_IRQHandler+0x4ea>
 800372a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800372e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003732:	2b00      	cmp	r3, #0
 8003734:	d003      	beq.n	800373e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f000 f929 	bl	800398e <UART_Transmit_IT>
    return;
 800373c:	e014      	b.n	8003768 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800373e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003742:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003746:	2b00      	cmp	r3, #0
 8003748:	d00e      	beq.n	8003768 <HAL_UART_IRQHandler+0x514>
 800374a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800374e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003752:	2b00      	cmp	r3, #0
 8003754:	d008      	beq.n	8003768 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f000 f969 	bl	8003a2e <UART_EndTransmit_IT>
    return;
 800375c:	e004      	b.n	8003768 <HAL_UART_IRQHandler+0x514>
    return;
 800375e:	bf00      	nop
 8003760:	e002      	b.n	8003768 <HAL_UART_IRQHandler+0x514>
      return;
 8003762:	bf00      	nop
 8003764:	e000      	b.n	8003768 <HAL_UART_IRQHandler+0x514>
      return;
 8003766:	bf00      	nop
  }
}
 8003768:	37e8      	adds	r7, #232	; 0xe8
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
 800376e:	bf00      	nop

08003770 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003770:	b480      	push	{r7}
 8003772:	b083      	sub	sp, #12
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003778:	bf00      	nop
 800377a:	370c      	adds	r7, #12
 800377c:	46bd      	mov	sp, r7
 800377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003782:	4770      	bx	lr

08003784 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003784:	b480      	push	{r7}
 8003786:	b083      	sub	sp, #12
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800378c:	bf00      	nop
 800378e:	370c      	adds	r7, #12
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr

08003798 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003798:	b480      	push	{r7}
 800379a:	b083      	sub	sp, #12
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80037a0:	bf00      	nop
 80037a2:	370c      	adds	r7, #12
 80037a4:	46bd      	mov	sp, r7
 80037a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037aa:	4770      	bx	lr

080037ac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b083      	sub	sp, #12
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
 80037b4:	460b      	mov	r3, r1
 80037b6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80037b8:	bf00      	nop
 80037ba:	370c      	adds	r7, #12
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr

080037c4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b090      	sub	sp, #64	; 0x40
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	60f8      	str	r0, [r7, #12]
 80037cc:	60b9      	str	r1, [r7, #8]
 80037ce:	603b      	str	r3, [r7, #0]
 80037d0:	4613      	mov	r3, r2
 80037d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037d4:	e050      	b.n	8003878 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037dc:	d04c      	beq.n	8003878 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80037de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d007      	beq.n	80037f4 <UART_WaitOnFlagUntilTimeout+0x30>
 80037e4:	f7fd fbee 	bl	8000fc4 <HAL_GetTick>
 80037e8:	4602      	mov	r2, r0
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	1ad3      	subs	r3, r2, r3
 80037ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80037f0:	429a      	cmp	r2, r3
 80037f2:	d241      	bcs.n	8003878 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	330c      	adds	r3, #12
 80037fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037fe:	e853 3f00 	ldrex	r3, [r3]
 8003802:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003806:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800380a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	330c      	adds	r3, #12
 8003812:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003814:	637a      	str	r2, [r7, #52]	; 0x34
 8003816:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003818:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800381a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800381c:	e841 2300 	strex	r3, r2, [r1]
 8003820:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003824:	2b00      	cmp	r3, #0
 8003826:	d1e5      	bne.n	80037f4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	3314      	adds	r3, #20
 800382e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	e853 3f00 	ldrex	r3, [r3]
 8003836:	613b      	str	r3, [r7, #16]
   return(result);
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	f023 0301 	bic.w	r3, r3, #1
 800383e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	3314      	adds	r3, #20
 8003846:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003848:	623a      	str	r2, [r7, #32]
 800384a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800384c:	69f9      	ldr	r1, [r7, #28]
 800384e:	6a3a      	ldr	r2, [r7, #32]
 8003850:	e841 2300 	strex	r3, r2, [r1]
 8003854:	61bb      	str	r3, [r7, #24]
   return(result);
 8003856:	69bb      	ldr	r3, [r7, #24]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d1e5      	bne.n	8003828 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2220      	movs	r2, #32
 8003860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2220      	movs	r2, #32
 8003868:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2200      	movs	r2, #0
 8003870:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003874:	2303      	movs	r3, #3
 8003876:	e00f      	b.n	8003898 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	4013      	ands	r3, r2
 8003882:	68ba      	ldr	r2, [r7, #8]
 8003884:	429a      	cmp	r2, r3
 8003886:	bf0c      	ite	eq
 8003888:	2301      	moveq	r3, #1
 800388a:	2300      	movne	r3, #0
 800388c:	b2db      	uxtb	r3, r3
 800388e:	461a      	mov	r2, r3
 8003890:	79fb      	ldrb	r3, [r7, #7]
 8003892:	429a      	cmp	r2, r3
 8003894:	d09f      	beq.n	80037d6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003896:	2300      	movs	r3, #0
}
 8003898:	4618      	mov	r0, r3
 800389a:	3740      	adds	r7, #64	; 0x40
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}

080038a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b095      	sub	sp, #84	; 0x54
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	330c      	adds	r3, #12
 80038ae:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038b2:	e853 3f00 	ldrex	r3, [r3]
 80038b6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80038b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80038be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	330c      	adds	r3, #12
 80038c6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80038c8:	643a      	str	r2, [r7, #64]	; 0x40
 80038ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038cc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80038ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80038d0:	e841 2300 	strex	r3, r2, [r1]
 80038d4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80038d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d1e5      	bne.n	80038a8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	3314      	adds	r3, #20
 80038e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038e4:	6a3b      	ldr	r3, [r7, #32]
 80038e6:	e853 3f00 	ldrex	r3, [r3]
 80038ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80038ec:	69fb      	ldr	r3, [r7, #28]
 80038ee:	f023 0301 	bic.w	r3, r3, #1
 80038f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	3314      	adds	r3, #20
 80038fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80038fc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80038fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003900:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003902:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003904:	e841 2300 	strex	r3, r2, [r1]
 8003908:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800390a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800390c:	2b00      	cmp	r3, #0
 800390e:	d1e5      	bne.n	80038dc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003914:	2b01      	cmp	r3, #1
 8003916:	d119      	bne.n	800394c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	330c      	adds	r3, #12
 800391e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	e853 3f00 	ldrex	r3, [r3]
 8003926:	60bb      	str	r3, [r7, #8]
   return(result);
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	f023 0310 	bic.w	r3, r3, #16
 800392e:	647b      	str	r3, [r7, #68]	; 0x44
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	330c      	adds	r3, #12
 8003936:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003938:	61ba      	str	r2, [r7, #24]
 800393a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800393c:	6979      	ldr	r1, [r7, #20]
 800393e:	69ba      	ldr	r2, [r7, #24]
 8003940:	e841 2300 	strex	r3, r2, [r1]
 8003944:	613b      	str	r3, [r7, #16]
   return(result);
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d1e5      	bne.n	8003918 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2220      	movs	r2, #32
 8003950:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2200      	movs	r2, #0
 8003958:	631a      	str	r2, [r3, #48]	; 0x30
}
 800395a:	bf00      	nop
 800395c:	3754      	adds	r7, #84	; 0x54
 800395e:	46bd      	mov	sp, r7
 8003960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003964:	4770      	bx	lr

08003966 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003966:	b580      	push	{r7, lr}
 8003968:	b084      	sub	sp, #16
 800396a:	af00      	add	r7, sp, #0
 800396c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003972:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2200      	movs	r2, #0
 8003978:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2200      	movs	r2, #0
 800397e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003980:	68f8      	ldr	r0, [r7, #12]
 8003982:	f7ff ff09 	bl	8003798 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003986:	bf00      	nop
 8003988:	3710      	adds	r7, #16
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}

0800398e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800398e:	b480      	push	{r7}
 8003990:	b085      	sub	sp, #20
 8003992:	af00      	add	r7, sp, #0
 8003994:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800399c:	b2db      	uxtb	r3, r3
 800399e:	2b21      	cmp	r3, #33	; 0x21
 80039a0:	d13e      	bne.n	8003a20 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039aa:	d114      	bne.n	80039d6 <UART_Transmit_IT+0x48>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	691b      	ldr	r3, [r3, #16]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d110      	bne.n	80039d6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6a1b      	ldr	r3, [r3, #32]
 80039b8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	881b      	ldrh	r3, [r3, #0]
 80039be:	461a      	mov	r2, r3
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039c8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6a1b      	ldr	r3, [r3, #32]
 80039ce:	1c9a      	adds	r2, r3, #2
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	621a      	str	r2, [r3, #32]
 80039d4:	e008      	b.n	80039e8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6a1b      	ldr	r3, [r3, #32]
 80039da:	1c59      	adds	r1, r3, #1
 80039dc:	687a      	ldr	r2, [r7, #4]
 80039de:	6211      	str	r1, [r2, #32]
 80039e0:	781a      	ldrb	r2, [r3, #0]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80039ec:	b29b      	uxth	r3, r3
 80039ee:	3b01      	subs	r3, #1
 80039f0:	b29b      	uxth	r3, r3
 80039f2:	687a      	ldr	r2, [r7, #4]
 80039f4:	4619      	mov	r1, r3
 80039f6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d10f      	bne.n	8003a1c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	68da      	ldr	r2, [r3, #12]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a0a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	68da      	ldr	r2, [r3, #12]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a1a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	e000      	b.n	8003a22 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003a20:	2302      	movs	r3, #2
  }
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3714      	adds	r7, #20
 8003a26:	46bd      	mov	sp, r7
 8003a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2c:	4770      	bx	lr

08003a2e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003a2e:	b580      	push	{r7, lr}
 8003a30:	b082      	sub	sp, #8
 8003a32:	af00      	add	r7, sp, #0
 8003a34:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	68da      	ldr	r2, [r3, #12]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a44:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2220      	movs	r2, #32
 8003a4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	f7ff fe8e 	bl	8003770 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003a54:	2300      	movs	r3, #0
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	3708      	adds	r7, #8
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}

08003a5e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003a5e:	b580      	push	{r7, lr}
 8003a60:	b08c      	sub	sp, #48	; 0x30
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	2b22      	cmp	r3, #34	; 0x22
 8003a70:	f040 80ab 	bne.w	8003bca <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a7c:	d117      	bne.n	8003aae <UART_Receive_IT+0x50>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	691b      	ldr	r3, [r3, #16]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d113      	bne.n	8003aae <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003a86:	2300      	movs	r3, #0
 8003a88:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a8e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	b29b      	uxth	r3, r3
 8003a98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a9c:	b29a      	uxth	r2, r3
 8003a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aa0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aa6:	1c9a      	adds	r2, r3, #2
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	629a      	str	r2, [r3, #40]	; 0x28
 8003aac:	e026      	b.n	8003afc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ac0:	d007      	beq.n	8003ad2 <UART_Receive_IT+0x74>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d10a      	bne.n	8003ae0 <UART_Receive_IT+0x82>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	691b      	ldr	r3, [r3, #16]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d106      	bne.n	8003ae0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	b2da      	uxtb	r2, r3
 8003ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003adc:	701a      	strb	r2, [r3, #0]
 8003ade:	e008      	b.n	8003af2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	b2db      	uxtb	r3, r3
 8003ae8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003aec:	b2da      	uxtb	r2, r3
 8003aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003af0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003af6:	1c5a      	adds	r2, r3, #1
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b00:	b29b      	uxth	r3, r3
 8003b02:	3b01      	subs	r3, #1
 8003b04:	b29b      	uxth	r3, r3
 8003b06:	687a      	ldr	r2, [r7, #4]
 8003b08:	4619      	mov	r1, r3
 8003b0a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d15a      	bne.n	8003bc6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	68da      	ldr	r2, [r3, #12]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f022 0220 	bic.w	r2, r2, #32
 8003b1e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	68da      	ldr	r2, [r3, #12]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b2e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	695a      	ldr	r2, [r3, #20]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f022 0201 	bic.w	r2, r2, #1
 8003b3e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2220      	movs	r2, #32
 8003b44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d135      	bne.n	8003bbc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2200      	movs	r2, #0
 8003b54:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	330c      	adds	r3, #12
 8003b5c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	e853 3f00 	ldrex	r3, [r3]
 8003b64:	613b      	str	r3, [r7, #16]
   return(result);
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	f023 0310 	bic.w	r3, r3, #16
 8003b6c:	627b      	str	r3, [r7, #36]	; 0x24
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	330c      	adds	r3, #12
 8003b74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b76:	623a      	str	r2, [r7, #32]
 8003b78:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b7a:	69f9      	ldr	r1, [r7, #28]
 8003b7c:	6a3a      	ldr	r2, [r7, #32]
 8003b7e:	e841 2300 	strex	r3, r2, [r1]
 8003b82:	61bb      	str	r3, [r7, #24]
   return(result);
 8003b84:	69bb      	ldr	r3, [r7, #24]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d1e5      	bne.n	8003b56 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f003 0310 	and.w	r3, r3, #16
 8003b94:	2b10      	cmp	r3, #16
 8003b96:	d10a      	bne.n	8003bae <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003b98:	2300      	movs	r3, #0
 8003b9a:	60fb      	str	r3, [r7, #12]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	60fb      	str	r3, [r7, #12]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	60fb      	str	r3, [r7, #12]
 8003bac:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003bb2:	4619      	mov	r1, r3
 8003bb4:	6878      	ldr	r0, [r7, #4]
 8003bb6:	f7ff fdf9 	bl	80037ac <HAL_UARTEx_RxEventCallback>
 8003bba:	e002      	b.n	8003bc2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	f7ff fde1 	bl	8003784 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	e002      	b.n	8003bcc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	e000      	b.n	8003bcc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003bca:	2302      	movs	r3, #2
  }
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	3730      	adds	r7, #48	; 0x30
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}

08003bd4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003bd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bd8:	b0c0      	sub	sp, #256	; 0x100
 8003bda:	af00      	add	r7, sp, #0
 8003bdc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003be0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	691b      	ldr	r3, [r3, #16]
 8003be8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003bec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bf0:	68d9      	ldr	r1, [r3, #12]
 8003bf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	ea40 0301 	orr.w	r3, r0, r1
 8003bfc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003bfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c02:	689a      	ldr	r2, [r3, #8]
 8003c04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c08:	691b      	ldr	r3, [r3, #16]
 8003c0a:	431a      	orrs	r2, r3
 8003c0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c10:	695b      	ldr	r3, [r3, #20]
 8003c12:	431a      	orrs	r2, r3
 8003c14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c18:	69db      	ldr	r3, [r3, #28]
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003c20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	68db      	ldr	r3, [r3, #12]
 8003c28:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003c2c:	f021 010c 	bic.w	r1, r1, #12
 8003c30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003c3a:	430b      	orrs	r3, r1
 8003c3c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003c3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	695b      	ldr	r3, [r3, #20]
 8003c46:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003c4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c4e:	6999      	ldr	r1, [r3, #24]
 8003c50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	ea40 0301 	orr.w	r3, r0, r1
 8003c5a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003c5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	4b8f      	ldr	r3, [pc, #572]	; (8003ea0 <UART_SetConfig+0x2cc>)
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d005      	beq.n	8003c74 <UART_SetConfig+0xa0>
 8003c68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	4b8d      	ldr	r3, [pc, #564]	; (8003ea4 <UART_SetConfig+0x2d0>)
 8003c70:	429a      	cmp	r2, r3
 8003c72:	d104      	bne.n	8003c7e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003c74:	f7ff f9fa 	bl	800306c <HAL_RCC_GetPCLK2Freq>
 8003c78:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003c7c:	e003      	b.n	8003c86 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003c7e:	f7ff f9e1 	bl	8003044 <HAL_RCC_GetPCLK1Freq>
 8003c82:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c8a:	69db      	ldr	r3, [r3, #28]
 8003c8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c90:	f040 810c 	bne.w	8003eac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003c94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c98:	2200      	movs	r2, #0
 8003c9a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003c9e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003ca2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003ca6:	4622      	mov	r2, r4
 8003ca8:	462b      	mov	r3, r5
 8003caa:	1891      	adds	r1, r2, r2
 8003cac:	65b9      	str	r1, [r7, #88]	; 0x58
 8003cae:	415b      	adcs	r3, r3
 8003cb0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003cb2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003cb6:	4621      	mov	r1, r4
 8003cb8:	eb12 0801 	adds.w	r8, r2, r1
 8003cbc:	4629      	mov	r1, r5
 8003cbe:	eb43 0901 	adc.w	r9, r3, r1
 8003cc2:	f04f 0200 	mov.w	r2, #0
 8003cc6:	f04f 0300 	mov.w	r3, #0
 8003cca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003cce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003cd2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003cd6:	4690      	mov	r8, r2
 8003cd8:	4699      	mov	r9, r3
 8003cda:	4623      	mov	r3, r4
 8003cdc:	eb18 0303 	adds.w	r3, r8, r3
 8003ce0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003ce4:	462b      	mov	r3, r5
 8003ce6:	eb49 0303 	adc.w	r3, r9, r3
 8003cea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003cee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003cfa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003cfe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003d02:	460b      	mov	r3, r1
 8003d04:	18db      	adds	r3, r3, r3
 8003d06:	653b      	str	r3, [r7, #80]	; 0x50
 8003d08:	4613      	mov	r3, r2
 8003d0a:	eb42 0303 	adc.w	r3, r2, r3
 8003d0e:	657b      	str	r3, [r7, #84]	; 0x54
 8003d10:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003d14:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003d18:	f7fc faba 	bl	8000290 <__aeabi_uldivmod>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	460b      	mov	r3, r1
 8003d20:	4b61      	ldr	r3, [pc, #388]	; (8003ea8 <UART_SetConfig+0x2d4>)
 8003d22:	fba3 2302 	umull	r2, r3, r3, r2
 8003d26:	095b      	lsrs	r3, r3, #5
 8003d28:	011c      	lsls	r4, r3, #4
 8003d2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d2e:	2200      	movs	r2, #0
 8003d30:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003d34:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003d38:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003d3c:	4642      	mov	r2, r8
 8003d3e:	464b      	mov	r3, r9
 8003d40:	1891      	adds	r1, r2, r2
 8003d42:	64b9      	str	r1, [r7, #72]	; 0x48
 8003d44:	415b      	adcs	r3, r3
 8003d46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d48:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003d4c:	4641      	mov	r1, r8
 8003d4e:	eb12 0a01 	adds.w	sl, r2, r1
 8003d52:	4649      	mov	r1, r9
 8003d54:	eb43 0b01 	adc.w	fp, r3, r1
 8003d58:	f04f 0200 	mov.w	r2, #0
 8003d5c:	f04f 0300 	mov.w	r3, #0
 8003d60:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003d64:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003d68:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d6c:	4692      	mov	sl, r2
 8003d6e:	469b      	mov	fp, r3
 8003d70:	4643      	mov	r3, r8
 8003d72:	eb1a 0303 	adds.w	r3, sl, r3
 8003d76:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003d7a:	464b      	mov	r3, r9
 8003d7c:	eb4b 0303 	adc.w	r3, fp, r3
 8003d80:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003d84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003d90:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003d94:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003d98:	460b      	mov	r3, r1
 8003d9a:	18db      	adds	r3, r3, r3
 8003d9c:	643b      	str	r3, [r7, #64]	; 0x40
 8003d9e:	4613      	mov	r3, r2
 8003da0:	eb42 0303 	adc.w	r3, r2, r3
 8003da4:	647b      	str	r3, [r7, #68]	; 0x44
 8003da6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003daa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003dae:	f7fc fa6f 	bl	8000290 <__aeabi_uldivmod>
 8003db2:	4602      	mov	r2, r0
 8003db4:	460b      	mov	r3, r1
 8003db6:	4611      	mov	r1, r2
 8003db8:	4b3b      	ldr	r3, [pc, #236]	; (8003ea8 <UART_SetConfig+0x2d4>)
 8003dba:	fba3 2301 	umull	r2, r3, r3, r1
 8003dbe:	095b      	lsrs	r3, r3, #5
 8003dc0:	2264      	movs	r2, #100	; 0x64
 8003dc2:	fb02 f303 	mul.w	r3, r2, r3
 8003dc6:	1acb      	subs	r3, r1, r3
 8003dc8:	00db      	lsls	r3, r3, #3
 8003dca:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003dce:	4b36      	ldr	r3, [pc, #216]	; (8003ea8 <UART_SetConfig+0x2d4>)
 8003dd0:	fba3 2302 	umull	r2, r3, r3, r2
 8003dd4:	095b      	lsrs	r3, r3, #5
 8003dd6:	005b      	lsls	r3, r3, #1
 8003dd8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003ddc:	441c      	add	r4, r3
 8003dde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003de2:	2200      	movs	r2, #0
 8003de4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003de8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003dec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003df0:	4642      	mov	r2, r8
 8003df2:	464b      	mov	r3, r9
 8003df4:	1891      	adds	r1, r2, r2
 8003df6:	63b9      	str	r1, [r7, #56]	; 0x38
 8003df8:	415b      	adcs	r3, r3
 8003dfa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003dfc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003e00:	4641      	mov	r1, r8
 8003e02:	1851      	adds	r1, r2, r1
 8003e04:	6339      	str	r1, [r7, #48]	; 0x30
 8003e06:	4649      	mov	r1, r9
 8003e08:	414b      	adcs	r3, r1
 8003e0a:	637b      	str	r3, [r7, #52]	; 0x34
 8003e0c:	f04f 0200 	mov.w	r2, #0
 8003e10:	f04f 0300 	mov.w	r3, #0
 8003e14:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003e18:	4659      	mov	r1, fp
 8003e1a:	00cb      	lsls	r3, r1, #3
 8003e1c:	4651      	mov	r1, sl
 8003e1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e22:	4651      	mov	r1, sl
 8003e24:	00ca      	lsls	r2, r1, #3
 8003e26:	4610      	mov	r0, r2
 8003e28:	4619      	mov	r1, r3
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	4642      	mov	r2, r8
 8003e2e:	189b      	adds	r3, r3, r2
 8003e30:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003e34:	464b      	mov	r3, r9
 8003e36:	460a      	mov	r2, r1
 8003e38:	eb42 0303 	adc.w	r3, r2, r3
 8003e3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003e40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	2200      	movs	r2, #0
 8003e48:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003e4c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003e50:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003e54:	460b      	mov	r3, r1
 8003e56:	18db      	adds	r3, r3, r3
 8003e58:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e5a:	4613      	mov	r3, r2
 8003e5c:	eb42 0303 	adc.w	r3, r2, r3
 8003e60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e62:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003e66:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003e6a:	f7fc fa11 	bl	8000290 <__aeabi_uldivmod>
 8003e6e:	4602      	mov	r2, r0
 8003e70:	460b      	mov	r3, r1
 8003e72:	4b0d      	ldr	r3, [pc, #52]	; (8003ea8 <UART_SetConfig+0x2d4>)
 8003e74:	fba3 1302 	umull	r1, r3, r3, r2
 8003e78:	095b      	lsrs	r3, r3, #5
 8003e7a:	2164      	movs	r1, #100	; 0x64
 8003e7c:	fb01 f303 	mul.w	r3, r1, r3
 8003e80:	1ad3      	subs	r3, r2, r3
 8003e82:	00db      	lsls	r3, r3, #3
 8003e84:	3332      	adds	r3, #50	; 0x32
 8003e86:	4a08      	ldr	r2, [pc, #32]	; (8003ea8 <UART_SetConfig+0x2d4>)
 8003e88:	fba2 2303 	umull	r2, r3, r2, r3
 8003e8c:	095b      	lsrs	r3, r3, #5
 8003e8e:	f003 0207 	and.w	r2, r3, #7
 8003e92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4422      	add	r2, r4
 8003e9a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003e9c:	e105      	b.n	80040aa <UART_SetConfig+0x4d6>
 8003e9e:	bf00      	nop
 8003ea0:	40011000 	.word	0x40011000
 8003ea4:	40011400 	.word	0x40011400
 8003ea8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003eac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003eb6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003eba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003ebe:	4642      	mov	r2, r8
 8003ec0:	464b      	mov	r3, r9
 8003ec2:	1891      	adds	r1, r2, r2
 8003ec4:	6239      	str	r1, [r7, #32]
 8003ec6:	415b      	adcs	r3, r3
 8003ec8:	627b      	str	r3, [r7, #36]	; 0x24
 8003eca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003ece:	4641      	mov	r1, r8
 8003ed0:	1854      	adds	r4, r2, r1
 8003ed2:	4649      	mov	r1, r9
 8003ed4:	eb43 0501 	adc.w	r5, r3, r1
 8003ed8:	f04f 0200 	mov.w	r2, #0
 8003edc:	f04f 0300 	mov.w	r3, #0
 8003ee0:	00eb      	lsls	r3, r5, #3
 8003ee2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ee6:	00e2      	lsls	r2, r4, #3
 8003ee8:	4614      	mov	r4, r2
 8003eea:	461d      	mov	r5, r3
 8003eec:	4643      	mov	r3, r8
 8003eee:	18e3      	adds	r3, r4, r3
 8003ef0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003ef4:	464b      	mov	r3, r9
 8003ef6:	eb45 0303 	adc.w	r3, r5, r3
 8003efa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003efe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	2200      	movs	r2, #0
 8003f06:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003f0a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003f0e:	f04f 0200 	mov.w	r2, #0
 8003f12:	f04f 0300 	mov.w	r3, #0
 8003f16:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003f1a:	4629      	mov	r1, r5
 8003f1c:	008b      	lsls	r3, r1, #2
 8003f1e:	4621      	mov	r1, r4
 8003f20:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f24:	4621      	mov	r1, r4
 8003f26:	008a      	lsls	r2, r1, #2
 8003f28:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003f2c:	f7fc f9b0 	bl	8000290 <__aeabi_uldivmod>
 8003f30:	4602      	mov	r2, r0
 8003f32:	460b      	mov	r3, r1
 8003f34:	4b60      	ldr	r3, [pc, #384]	; (80040b8 <UART_SetConfig+0x4e4>)
 8003f36:	fba3 2302 	umull	r2, r3, r3, r2
 8003f3a:	095b      	lsrs	r3, r3, #5
 8003f3c:	011c      	lsls	r4, r3, #4
 8003f3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f42:	2200      	movs	r2, #0
 8003f44:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003f48:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003f4c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003f50:	4642      	mov	r2, r8
 8003f52:	464b      	mov	r3, r9
 8003f54:	1891      	adds	r1, r2, r2
 8003f56:	61b9      	str	r1, [r7, #24]
 8003f58:	415b      	adcs	r3, r3
 8003f5a:	61fb      	str	r3, [r7, #28]
 8003f5c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f60:	4641      	mov	r1, r8
 8003f62:	1851      	adds	r1, r2, r1
 8003f64:	6139      	str	r1, [r7, #16]
 8003f66:	4649      	mov	r1, r9
 8003f68:	414b      	adcs	r3, r1
 8003f6a:	617b      	str	r3, [r7, #20]
 8003f6c:	f04f 0200 	mov.w	r2, #0
 8003f70:	f04f 0300 	mov.w	r3, #0
 8003f74:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003f78:	4659      	mov	r1, fp
 8003f7a:	00cb      	lsls	r3, r1, #3
 8003f7c:	4651      	mov	r1, sl
 8003f7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f82:	4651      	mov	r1, sl
 8003f84:	00ca      	lsls	r2, r1, #3
 8003f86:	4610      	mov	r0, r2
 8003f88:	4619      	mov	r1, r3
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	4642      	mov	r2, r8
 8003f8e:	189b      	adds	r3, r3, r2
 8003f90:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003f94:	464b      	mov	r3, r9
 8003f96:	460a      	mov	r2, r1
 8003f98:	eb42 0303 	adc.w	r3, r2, r3
 8003f9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003fa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	67bb      	str	r3, [r7, #120]	; 0x78
 8003faa:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003fac:	f04f 0200 	mov.w	r2, #0
 8003fb0:	f04f 0300 	mov.w	r3, #0
 8003fb4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003fb8:	4649      	mov	r1, r9
 8003fba:	008b      	lsls	r3, r1, #2
 8003fbc:	4641      	mov	r1, r8
 8003fbe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003fc2:	4641      	mov	r1, r8
 8003fc4:	008a      	lsls	r2, r1, #2
 8003fc6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003fca:	f7fc f961 	bl	8000290 <__aeabi_uldivmod>
 8003fce:	4602      	mov	r2, r0
 8003fd0:	460b      	mov	r3, r1
 8003fd2:	4b39      	ldr	r3, [pc, #228]	; (80040b8 <UART_SetConfig+0x4e4>)
 8003fd4:	fba3 1302 	umull	r1, r3, r3, r2
 8003fd8:	095b      	lsrs	r3, r3, #5
 8003fda:	2164      	movs	r1, #100	; 0x64
 8003fdc:	fb01 f303 	mul.w	r3, r1, r3
 8003fe0:	1ad3      	subs	r3, r2, r3
 8003fe2:	011b      	lsls	r3, r3, #4
 8003fe4:	3332      	adds	r3, #50	; 0x32
 8003fe6:	4a34      	ldr	r2, [pc, #208]	; (80040b8 <UART_SetConfig+0x4e4>)
 8003fe8:	fba2 2303 	umull	r2, r3, r2, r3
 8003fec:	095b      	lsrs	r3, r3, #5
 8003fee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ff2:	441c      	add	r4, r3
 8003ff4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	673b      	str	r3, [r7, #112]	; 0x70
 8003ffc:	677a      	str	r2, [r7, #116]	; 0x74
 8003ffe:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004002:	4642      	mov	r2, r8
 8004004:	464b      	mov	r3, r9
 8004006:	1891      	adds	r1, r2, r2
 8004008:	60b9      	str	r1, [r7, #8]
 800400a:	415b      	adcs	r3, r3
 800400c:	60fb      	str	r3, [r7, #12]
 800400e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004012:	4641      	mov	r1, r8
 8004014:	1851      	adds	r1, r2, r1
 8004016:	6039      	str	r1, [r7, #0]
 8004018:	4649      	mov	r1, r9
 800401a:	414b      	adcs	r3, r1
 800401c:	607b      	str	r3, [r7, #4]
 800401e:	f04f 0200 	mov.w	r2, #0
 8004022:	f04f 0300 	mov.w	r3, #0
 8004026:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800402a:	4659      	mov	r1, fp
 800402c:	00cb      	lsls	r3, r1, #3
 800402e:	4651      	mov	r1, sl
 8004030:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004034:	4651      	mov	r1, sl
 8004036:	00ca      	lsls	r2, r1, #3
 8004038:	4610      	mov	r0, r2
 800403a:	4619      	mov	r1, r3
 800403c:	4603      	mov	r3, r0
 800403e:	4642      	mov	r2, r8
 8004040:	189b      	adds	r3, r3, r2
 8004042:	66bb      	str	r3, [r7, #104]	; 0x68
 8004044:	464b      	mov	r3, r9
 8004046:	460a      	mov	r2, r1
 8004048:	eb42 0303 	adc.w	r3, r2, r3
 800404c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800404e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	2200      	movs	r2, #0
 8004056:	663b      	str	r3, [r7, #96]	; 0x60
 8004058:	667a      	str	r2, [r7, #100]	; 0x64
 800405a:	f04f 0200 	mov.w	r2, #0
 800405e:	f04f 0300 	mov.w	r3, #0
 8004062:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004066:	4649      	mov	r1, r9
 8004068:	008b      	lsls	r3, r1, #2
 800406a:	4641      	mov	r1, r8
 800406c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004070:	4641      	mov	r1, r8
 8004072:	008a      	lsls	r2, r1, #2
 8004074:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004078:	f7fc f90a 	bl	8000290 <__aeabi_uldivmod>
 800407c:	4602      	mov	r2, r0
 800407e:	460b      	mov	r3, r1
 8004080:	4b0d      	ldr	r3, [pc, #52]	; (80040b8 <UART_SetConfig+0x4e4>)
 8004082:	fba3 1302 	umull	r1, r3, r3, r2
 8004086:	095b      	lsrs	r3, r3, #5
 8004088:	2164      	movs	r1, #100	; 0x64
 800408a:	fb01 f303 	mul.w	r3, r1, r3
 800408e:	1ad3      	subs	r3, r2, r3
 8004090:	011b      	lsls	r3, r3, #4
 8004092:	3332      	adds	r3, #50	; 0x32
 8004094:	4a08      	ldr	r2, [pc, #32]	; (80040b8 <UART_SetConfig+0x4e4>)
 8004096:	fba2 2303 	umull	r2, r3, r2, r3
 800409a:	095b      	lsrs	r3, r3, #5
 800409c:	f003 020f 	and.w	r2, r3, #15
 80040a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4422      	add	r2, r4
 80040a8:	609a      	str	r2, [r3, #8]
}
 80040aa:	bf00      	nop
 80040ac:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80040b0:	46bd      	mov	sp, r7
 80040b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040b6:	bf00      	nop
 80040b8:	51eb851f 	.word	0x51eb851f

080040bc <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b084      	sub	sp, #16
 80040c0:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 80040c2:	f000 fc77 	bl	80049b4 <lwip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 80040c6:	4b19      	ldr	r3, [pc, #100]	; (800412c <MX_LWIP_Init+0x70>)
 80040c8:	2200      	movs	r2, #0
 80040ca:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 80040cc:	4b18      	ldr	r3, [pc, #96]	; (8004130 <MX_LWIP_Init+0x74>)
 80040ce:	2200      	movs	r2, #0
 80040d0:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 80040d2:	4b18      	ldr	r3, [pc, #96]	; (8004134 <MX_LWIP_Init+0x78>)
 80040d4:	2200      	movs	r2, #0
 80040d6:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 80040d8:	4b17      	ldr	r3, [pc, #92]	; (8004138 <MX_LWIP_Init+0x7c>)
 80040da:	9302      	str	r3, [sp, #8]
 80040dc:	4b17      	ldr	r3, [pc, #92]	; (800413c <MX_LWIP_Init+0x80>)
 80040de:	9301      	str	r3, [sp, #4]
 80040e0:	2300      	movs	r3, #0
 80040e2:	9300      	str	r3, [sp, #0]
 80040e4:	4b13      	ldr	r3, [pc, #76]	; (8004134 <MX_LWIP_Init+0x78>)
 80040e6:	4a12      	ldr	r2, [pc, #72]	; (8004130 <MX_LWIP_Init+0x74>)
 80040e8:	4910      	ldr	r1, [pc, #64]	; (800412c <MX_LWIP_Init+0x70>)
 80040ea:	4815      	ldr	r0, [pc, #84]	; (8004140 <MX_LWIP_Init+0x84>)
 80040ec:	f001 f94a 	bl	8005384 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80040f0:	4813      	ldr	r0, [pc, #76]	; (8004140 <MX_LWIP_Init+0x84>)
 80040f2:	f001 fb01 	bl	80056f8 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80040f6:	4b12      	ldr	r3, [pc, #72]	; (8004140 <MX_LWIP_Init+0x84>)
 80040f8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80040fc:	089b      	lsrs	r3, r3, #2
 80040fe:	f003 0301 	and.w	r3, r3, #1
 8004102:	b2db      	uxtb	r3, r3
 8004104:	2b00      	cmp	r3, #0
 8004106:	d003      	beq.n	8004110 <MX_LWIP_Init+0x54>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8004108:	480d      	ldr	r0, [pc, #52]	; (8004140 <MX_LWIP_Init+0x84>)
 800410a:	f001 fb05 	bl	8005718 <netif_set_up>
 800410e:	e002      	b.n	8004116 <MX_LWIP_Init+0x5a>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8004110:	480b      	ldr	r0, [pc, #44]	; (8004140 <MX_LWIP_Init+0x84>)
 8004112:	f001 fb6d 	bl	80057f0 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8004116:	490b      	ldr	r1, [pc, #44]	; (8004144 <MX_LWIP_Init+0x88>)
 8004118:	4809      	ldr	r0, [pc, #36]	; (8004140 <MX_LWIP_Init+0x84>)
 800411a:	f001 fc03 	bl	8005924 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 800411e:	4808      	ldr	r0, [pc, #32]	; (8004140 <MX_LWIP_Init+0x84>)
 8004120:	f008 fc9a 	bl	800ca58 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8004124:	bf00      	nop
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}
 800412a:	bf00      	nop
 800412c:	20000134 	.word	0x20000134
 8004130:	20000138 	.word	0x20000138
 8004134:	2000013c 	.word	0x2000013c
 8004138:	080104f5 	.word	0x080104f5
 800413c:	08004399 	.word	0x08004399
 8004140:	200000fc 	.word	0x200000fc
 8004144:	08004149 	.word	0x08004149

08004148 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b082      	sub	sp, #8
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  if (netif_is_up(netif))
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004156:	f003 0301 	and.w	r3, r3, #1
 800415a:	b2db      	uxtb	r3, r3
 800415c:	2b00      	cmp	r3, #0
 800415e:	d002      	beq.n	8004166 <ethernet_link_status_updated+0x1e>
  {
/* USER CODE BEGIN 5 */
	  netif_set_up(&gnetif);
 8004160:	4803      	ldr	r0, [pc, #12]	; (8004170 <ethernet_link_status_updated+0x28>)
 8004162:	f001 fad9 	bl	8005718 <netif_set_up>
  {
/* USER CODE BEGIN 6 */

/* USER CODE END 6 */
  }
}
 8004166:	bf00      	nop
 8004168:	3708      	adds	r7, #8
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}
 800416e:	bf00      	nop
 8004170:	200000fc 	.word	0x200000fc

08004174 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b084      	sub	sp, #16
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800417c:	2300      	movs	r3, #0
 800417e:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8004180:	4b40      	ldr	r3, [pc, #256]	; (8004284 <low_level_init+0x110>)
 8004182:	4a41      	ldr	r2, [pc, #260]	; (8004288 <low_level_init+0x114>)
 8004184:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8004186:	2300      	movs	r3, #0
 8004188:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800418a:	2380      	movs	r3, #128	; 0x80
 800418c:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800418e:	23e1      	movs	r3, #225	; 0xe1
 8004190:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8004192:	2300      	movs	r3, #0
 8004194:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8004196:	2300      	movs	r3, #0
 8004198:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800419a:	2300      	movs	r3, #0
 800419c:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800419e:	4a39      	ldr	r2, [pc, #228]	; (8004284 <low_level_init+0x110>)
 80041a0:	f107 0308 	add.w	r3, r7, #8
 80041a4:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80041a6:	4b37      	ldr	r3, [pc, #220]	; (8004284 <low_level_init+0x110>)
 80041a8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80041ac:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80041ae:	4b35      	ldr	r3, [pc, #212]	; (8004284 <low_level_init+0x110>)
 80041b0:	4a36      	ldr	r2, [pc, #216]	; (800428c <low_level_init+0x118>)
 80041b2:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80041b4:	4b33      	ldr	r3, [pc, #204]	; (8004284 <low_level_init+0x110>)
 80041b6:	4a36      	ldr	r2, [pc, #216]	; (8004290 <low_level_init+0x11c>)
 80041b8:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 80041ba:	4b32      	ldr	r3, [pc, #200]	; (8004284 <low_level_init+0x110>)
 80041bc:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80041c0:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80041c2:	4830      	ldr	r0, [pc, #192]	; (8004284 <low_level_init+0x110>)
 80041c4:	f7fd f8d2 	bl	800136c <HAL_ETH_Init>
 80041c8:	4603      	mov	r3, r0
 80041ca:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80041cc:	2238      	movs	r2, #56	; 0x38
 80041ce:	2100      	movs	r1, #0
 80041d0:	4830      	ldr	r0, [pc, #192]	; (8004294 <low_level_init+0x120>)
 80041d2:	f00c faa7 	bl	8010724 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80041d6:	4b2f      	ldr	r3, [pc, #188]	; (8004294 <low_level_init+0x120>)
 80041d8:	2221      	movs	r2, #33	; 0x21
 80041da:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80041dc:	4b2d      	ldr	r3, [pc, #180]	; (8004294 <low_level_init+0x120>)
 80041de:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80041e2:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80041e4:	4b2b      	ldr	r3, [pc, #172]	; (8004294 <low_level_init+0x120>)
 80041e6:	2200      	movs	r2, #0
 80041e8:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 80041ea:	482b      	ldr	r0, [pc, #172]	; (8004298 <low_level_init+0x124>)
 80041ec:	f000 ff92 	bl	8005114 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2206      	movs	r2, #6
 80041f4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80041f8:	4b22      	ldr	r3, [pc, #136]	; (8004284 <low_level_init+0x110>)
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	781a      	ldrb	r2, [r3, #0]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8004204:	4b1f      	ldr	r3, [pc, #124]	; (8004284 <low_level_init+0x110>)
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	785a      	ldrb	r2, [r3, #1]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8004210:	4b1c      	ldr	r3, [pc, #112]	; (8004284 <low_level_init+0x110>)
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	789a      	ldrb	r2, [r3, #2]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800421c:	4b19      	ldr	r3, [pc, #100]	; (8004284 <low_level_init+0x110>)
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	78da      	ldrb	r2, [r3, #3]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8004228:	4b16      	ldr	r3, [pc, #88]	; (8004284 <low_level_init+0x110>)
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	791a      	ldrb	r2, [r3, #4]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8004234:	4b13      	ldr	r3, [pc, #76]	; (8004284 <low_level_init+0x110>)
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	795a      	ldrb	r2, [r3, #5]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004246:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800424e:	f043 030a 	orr.w	r3, r3, #10
 8004252:	b2da      	uxtb	r2, r3
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800425a:	4910      	ldr	r1, [pc, #64]	; (800429c <low_level_init+0x128>)
 800425c:	4810      	ldr	r0, [pc, #64]	; (80042a0 <low_level_init+0x12c>)
 800425e:	f7fc fcea 	bl	8000c36 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8004262:	480f      	ldr	r0, [pc, #60]	; (80042a0 <low_level_init+0x12c>)
 8004264:	f7fc fd19 	bl	8000c9a <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8004268:	7bfb      	ldrb	r3, [r7, #15]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d103      	bne.n	8004276 <low_level_init+0x102>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f000 f9fa 	bl	8004668 <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8004274:	e001      	b.n	800427a <low_level_init+0x106>
    Error_Handler();
 8004276:	f7fc fb19 	bl	80008ac <Error_Handler>
}
 800427a:	bf00      	nop
 800427c:	3710      	adds	r7, #16
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}
 8004282:	bf00      	nop
 8004284:	20004c10 	.word	0x20004c10
 8004288:	40028000 	.word	0x40028000
 800428c:	20004b70 	.word	0x20004b70
 8004290:	20004ad0 	.word	0x20004ad0
 8004294:	20004cc0 	.word	0x20004cc0
 8004298:	08014584 	.word	0x08014584
 800429c:	2000000c 	.word	0x2000000c
 80042a0:	20004cf8 	.word	0x20004cf8

080042a4 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b092      	sub	sp, #72	; 0x48
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
 80042ac:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 80042ae:	2300      	movs	r3, #0
 80042b0:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 80042b2:	2300      	movs	r3, #0
 80042b4:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 80042b6:	2300      	movs	r3, #0
 80042b8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT];

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 80042bc:	f107 030c 	add.w	r3, r7, #12
 80042c0:	2230      	movs	r2, #48	; 0x30
 80042c2:	2100      	movs	r1, #0
 80042c4:	4618      	mov	r0, r3
 80042c6:	f00c fa2d 	bl	8010724 <memset>

  for(q = p; q != NULL; q = q->next)
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	643b      	str	r3, [r7, #64]	; 0x40
 80042ce:	e045      	b.n	800435c <low_level_output+0xb8>
  {
    if(i >= ETH_TX_DESC_CNT)
 80042d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042d2:	2b03      	cmp	r3, #3
 80042d4:	d902      	bls.n	80042dc <low_level_output+0x38>
      return ERR_IF;
 80042d6:	f06f 030b 	mvn.w	r3, #11
 80042da:	e055      	b.n	8004388 <low_level_output+0xe4>

    Txbuffer[i].buffer = q->payload;
 80042dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042de:	6859      	ldr	r1, [r3, #4]
 80042e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80042e2:	4613      	mov	r3, r2
 80042e4:	005b      	lsls	r3, r3, #1
 80042e6:	4413      	add	r3, r2
 80042e8:	009b      	lsls	r3, r3, #2
 80042ea:	3348      	adds	r3, #72	; 0x48
 80042ec:	443b      	add	r3, r7
 80042ee:	3b3c      	subs	r3, #60	; 0x3c
 80042f0:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 80042f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042f4:	895b      	ldrh	r3, [r3, #10]
 80042f6:	4619      	mov	r1, r3
 80042f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80042fa:	4613      	mov	r3, r2
 80042fc:	005b      	lsls	r3, r3, #1
 80042fe:	4413      	add	r3, r2
 8004300:	009b      	lsls	r3, r3, #2
 8004302:	3348      	adds	r3, #72	; 0x48
 8004304:	443b      	add	r3, r7
 8004306:	3b38      	subs	r3, #56	; 0x38
 8004308:	6019      	str	r1, [r3, #0]

    if(i>0)
 800430a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800430c:	2b00      	cmp	r3, #0
 800430e:	d011      	beq.n	8004334 <low_level_output+0x90>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8004310:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004312:	1e5a      	subs	r2, r3, #1
 8004314:	f107 000c 	add.w	r0, r7, #12
 8004318:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800431a:	460b      	mov	r3, r1
 800431c:	005b      	lsls	r3, r3, #1
 800431e:	440b      	add	r3, r1
 8004320:	009b      	lsls	r3, r3, #2
 8004322:	18c1      	adds	r1, r0, r3
 8004324:	4613      	mov	r3, r2
 8004326:	005b      	lsls	r3, r3, #1
 8004328:	4413      	add	r3, r2
 800432a:	009b      	lsls	r3, r3, #2
 800432c:	3348      	adds	r3, #72	; 0x48
 800432e:	443b      	add	r3, r7
 8004330:	3b34      	subs	r3, #52	; 0x34
 8004332:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8004334:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d109      	bne.n	8004350 <low_level_output+0xac>
    {
      Txbuffer[i].next = NULL;
 800433c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800433e:	4613      	mov	r3, r2
 8004340:	005b      	lsls	r3, r3, #1
 8004342:	4413      	add	r3, r2
 8004344:	009b      	lsls	r3, r3, #2
 8004346:	3348      	adds	r3, #72	; 0x48
 8004348:	443b      	add	r3, r7
 800434a:	3b34      	subs	r3, #52	; 0x34
 800434c:	2200      	movs	r2, #0
 800434e:	601a      	str	r2, [r3, #0]
    }

    i++;
 8004350:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004352:	3301      	adds	r3, #1
 8004354:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8004356:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	643b      	str	r3, [r7, #64]	; 0x40
 800435c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800435e:	2b00      	cmp	r3, #0
 8004360:	d1b6      	bne.n	80042d0 <low_level_output+0x2c>
  }

  TxConfig.Length = p->tot_len;
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	891b      	ldrh	r3, [r3, #8]
 8004366:	461a      	mov	r2, r3
 8004368:	4b09      	ldr	r3, [pc, #36]	; (8004390 <low_level_output+0xec>)
 800436a:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800436c:	4a08      	ldr	r2, [pc, #32]	; (8004390 <low_level_output+0xec>)
 800436e:	f107 030c 	add.w	r3, r7, #12
 8004372:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8004374:	4a06      	ldr	r2, [pc, #24]	; (8004390 <low_level_output+0xec>)
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 800437a:	2214      	movs	r2, #20
 800437c:	4904      	ldr	r1, [pc, #16]	; (8004390 <low_level_output+0xec>)
 800437e:	4805      	ldr	r0, [pc, #20]	; (8004394 <low_level_output+0xf0>)
 8004380:	f7fd f8fa 	bl	8001578 <HAL_ETH_Transmit>

  return errval;
 8004384:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8004388:	4618      	mov	r0, r3
 800438a:	3748      	adds	r7, #72	; 0x48
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}
 8004390:	20004cc0 	.word	0x20004cc0
 8004394:	20004c10 	.word	0x20004c10

08004398 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b082      	sub	sp, #8
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d106      	bne.n	80043b4 <ethernetif_init+0x1c>
 80043a6:	4b0e      	ldr	r3, [pc, #56]	; (80043e0 <ethernetif_init+0x48>)
 80043a8:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 80043ac:	490d      	ldr	r1, [pc, #52]	; (80043e4 <ethernetif_init+0x4c>)
 80043ae:	480e      	ldr	r0, [pc, #56]	; (80043e8 <ethernetif_init+0x50>)
 80043b0:	f00c f9c0 	bl	8010734 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2273      	movs	r2, #115	; 0x73
 80043b8:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2274      	movs	r2, #116	; 0x74
 80043c0:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	4a09      	ldr	r2, [pc, #36]	; (80043ec <ethernetif_init+0x54>)
 80043c8:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	4a08      	ldr	r2, [pc, #32]	; (80043f0 <ethernetif_init+0x58>)
 80043ce:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	f7ff fecf 	bl	8004174 <low_level_init>

  return ERR_OK;
 80043d6:	2300      	movs	r3, #0
}
 80043d8:	4618      	mov	r0, r3
 80043da:	3708      	adds	r7, #8
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}
 80043e0:	080117ec 	.word	0x080117ec
 80043e4:	08011808 	.word	0x08011808
 80043e8:	08011818 	.word	0x08011818
 80043ec:	0800e925 	.word	0x0800e925
 80043f0:	080042a5 	.word	0x080042a5

080043f4 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b084      	sub	sp, #16
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8004400:	68f9      	ldr	r1, [r7, #12]
 8004402:	4808      	ldr	r0, [pc, #32]	; (8004424 <pbuf_free_custom+0x30>)
 8004404:	f000 ff68 	bl	80052d8 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8004408:	4b07      	ldr	r3, [pc, #28]	; (8004428 <pbuf_free_custom+0x34>)
 800440a:	781b      	ldrb	r3, [r3, #0]
 800440c:	2b01      	cmp	r3, #1
 800440e:	d105      	bne.n	800441c <pbuf_free_custom+0x28>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8004410:	4b05      	ldr	r3, [pc, #20]	; (8004428 <pbuf_free_custom+0x34>)
 8004412:	2200      	movs	r2, #0
 8004414:	701a      	strb	r2, [r3, #0]
    RxPkt = 1 ;
 8004416:	4b05      	ldr	r3, [pc, #20]	; (800442c <pbuf_free_custom+0x38>)
 8004418:	2201      	movs	r2, #1
 800441a:	601a      	str	r2, [r3, #0]
  }
}
 800441c:	bf00      	nop
 800441e:	3710      	adds	r7, #16
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}
 8004424:	08014584 	.word	0x08014584
 8004428:	20004ac8 	.word	0x20004ac8
 800442c:	20004acc 	.word	0x20004acc

08004430 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004434:	f7fc fdc6 	bl	8000fc4 <HAL_GetTick>
 8004438:	4603      	mov	r3, r0
}
 800443a:	4618      	mov	r0, r3
 800443c:	bd80      	pop	{r7, pc}
	...

08004440 <HAL_ETH_MspInit>:

/* USER CODE END 6 */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b08e      	sub	sp, #56	; 0x38
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004448:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800444c:	2200      	movs	r2, #0
 800444e:	601a      	str	r2, [r3, #0]
 8004450:	605a      	str	r2, [r3, #4]
 8004452:	609a      	str	r2, [r3, #8]
 8004454:	60da      	str	r2, [r3, #12]
 8004456:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a55      	ldr	r2, [pc, #340]	; (80045b4 <HAL_ETH_MspInit+0x174>)
 800445e:	4293      	cmp	r3, r2
 8004460:	f040 80a4 	bne.w	80045ac <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8004464:	2300      	movs	r3, #0
 8004466:	623b      	str	r3, [r7, #32]
 8004468:	4b53      	ldr	r3, [pc, #332]	; (80045b8 <HAL_ETH_MspInit+0x178>)
 800446a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800446c:	4a52      	ldr	r2, [pc, #328]	; (80045b8 <HAL_ETH_MspInit+0x178>)
 800446e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004472:	6313      	str	r3, [r2, #48]	; 0x30
 8004474:	4b50      	ldr	r3, [pc, #320]	; (80045b8 <HAL_ETH_MspInit+0x178>)
 8004476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004478:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800447c:	623b      	str	r3, [r7, #32]
 800447e:	6a3b      	ldr	r3, [r7, #32]
 8004480:	2300      	movs	r3, #0
 8004482:	61fb      	str	r3, [r7, #28]
 8004484:	4b4c      	ldr	r3, [pc, #304]	; (80045b8 <HAL_ETH_MspInit+0x178>)
 8004486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004488:	4a4b      	ldr	r2, [pc, #300]	; (80045b8 <HAL_ETH_MspInit+0x178>)
 800448a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800448e:	6313      	str	r3, [r2, #48]	; 0x30
 8004490:	4b49      	ldr	r3, [pc, #292]	; (80045b8 <HAL_ETH_MspInit+0x178>)
 8004492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004494:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004498:	61fb      	str	r3, [r7, #28]
 800449a:	69fb      	ldr	r3, [r7, #28]
 800449c:	2300      	movs	r3, #0
 800449e:	61bb      	str	r3, [r7, #24]
 80044a0:	4b45      	ldr	r3, [pc, #276]	; (80045b8 <HAL_ETH_MspInit+0x178>)
 80044a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044a4:	4a44      	ldr	r2, [pc, #272]	; (80045b8 <HAL_ETH_MspInit+0x178>)
 80044a6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80044aa:	6313      	str	r3, [r2, #48]	; 0x30
 80044ac:	4b42      	ldr	r3, [pc, #264]	; (80045b8 <HAL_ETH_MspInit+0x178>)
 80044ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044b4:	61bb      	str	r3, [r7, #24]
 80044b6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80044b8:	2300      	movs	r3, #0
 80044ba:	617b      	str	r3, [r7, #20]
 80044bc:	4b3e      	ldr	r3, [pc, #248]	; (80045b8 <HAL_ETH_MspInit+0x178>)
 80044be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044c0:	4a3d      	ldr	r2, [pc, #244]	; (80045b8 <HAL_ETH_MspInit+0x178>)
 80044c2:	f043 0304 	orr.w	r3, r3, #4
 80044c6:	6313      	str	r3, [r2, #48]	; 0x30
 80044c8:	4b3b      	ldr	r3, [pc, #236]	; (80045b8 <HAL_ETH_MspInit+0x178>)
 80044ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044cc:	f003 0304 	and.w	r3, r3, #4
 80044d0:	617b      	str	r3, [r7, #20]
 80044d2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80044d4:	2300      	movs	r3, #0
 80044d6:	613b      	str	r3, [r7, #16]
 80044d8:	4b37      	ldr	r3, [pc, #220]	; (80045b8 <HAL_ETH_MspInit+0x178>)
 80044da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044dc:	4a36      	ldr	r2, [pc, #216]	; (80045b8 <HAL_ETH_MspInit+0x178>)
 80044de:	f043 0301 	orr.w	r3, r3, #1
 80044e2:	6313      	str	r3, [r2, #48]	; 0x30
 80044e4:	4b34      	ldr	r3, [pc, #208]	; (80045b8 <HAL_ETH_MspInit+0x178>)
 80044e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044e8:	f003 0301 	and.w	r3, r3, #1
 80044ec:	613b      	str	r3, [r7, #16]
 80044ee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80044f0:	2300      	movs	r3, #0
 80044f2:	60fb      	str	r3, [r7, #12]
 80044f4:	4b30      	ldr	r3, [pc, #192]	; (80045b8 <HAL_ETH_MspInit+0x178>)
 80044f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f8:	4a2f      	ldr	r2, [pc, #188]	; (80045b8 <HAL_ETH_MspInit+0x178>)
 80044fa:	f043 0302 	orr.w	r3, r3, #2
 80044fe:	6313      	str	r3, [r2, #48]	; 0x30
 8004500:	4b2d      	ldr	r3, [pc, #180]	; (80045b8 <HAL_ETH_MspInit+0x178>)
 8004502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004504:	f003 0302 	and.w	r3, r3, #2
 8004508:	60fb      	str	r3, [r7, #12]
 800450a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800450c:	2300      	movs	r3, #0
 800450e:	60bb      	str	r3, [r7, #8]
 8004510:	4b29      	ldr	r3, [pc, #164]	; (80045b8 <HAL_ETH_MspInit+0x178>)
 8004512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004514:	4a28      	ldr	r2, [pc, #160]	; (80045b8 <HAL_ETH_MspInit+0x178>)
 8004516:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800451a:	6313      	str	r3, [r2, #48]	; 0x30
 800451c:	4b26      	ldr	r3, [pc, #152]	; (80045b8 <HAL_ETH_MspInit+0x178>)
 800451e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004520:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004524:	60bb      	str	r3, [r7, #8]
 8004526:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8004528:	2332      	movs	r3, #50	; 0x32
 800452a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800452c:	2302      	movs	r3, #2
 800452e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004530:	2300      	movs	r3, #0
 8004532:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004534:	2303      	movs	r3, #3
 8004536:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004538:	230b      	movs	r3, #11
 800453a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800453c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004540:	4619      	mov	r1, r3
 8004542:	481e      	ldr	r0, [pc, #120]	; (80045bc <HAL_ETH_MspInit+0x17c>)
 8004544:	f7fd fef8 	bl	8002338 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8004548:	2386      	movs	r3, #134	; 0x86
 800454a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800454c:	2302      	movs	r3, #2
 800454e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004550:	2300      	movs	r3, #0
 8004552:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004554:	2303      	movs	r3, #3
 8004556:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004558:	230b      	movs	r3, #11
 800455a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800455c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004560:	4619      	mov	r1, r3
 8004562:	4817      	ldr	r0, [pc, #92]	; (80045c0 <HAL_ETH_MspInit+0x180>)
 8004564:	f7fd fee8 	bl	8002338 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8004568:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800456c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800456e:	2302      	movs	r3, #2
 8004570:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004572:	2300      	movs	r3, #0
 8004574:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004576:	2303      	movs	r3, #3
 8004578:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800457a:	230b      	movs	r3, #11
 800457c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800457e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004582:	4619      	mov	r1, r3
 8004584:	480f      	ldr	r0, [pc, #60]	; (80045c4 <HAL_ETH_MspInit+0x184>)
 8004586:	f7fd fed7 	bl	8002338 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800458a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800458e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004590:	2302      	movs	r3, #2
 8004592:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004594:	2300      	movs	r3, #0
 8004596:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004598:	2303      	movs	r3, #3
 800459a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800459c:	230b      	movs	r3, #11
 800459e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80045a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80045a4:	4619      	mov	r1, r3
 80045a6:	4808      	ldr	r0, [pc, #32]	; (80045c8 <HAL_ETH_MspInit+0x188>)
 80045a8:	f7fd fec6 	bl	8002338 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80045ac:	bf00      	nop
 80045ae:	3738      	adds	r7, #56	; 0x38
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}
 80045b4:	40028000 	.word	0x40028000
 80045b8:	40023800 	.word	0x40023800
 80045bc:	40020800 	.word	0x40020800
 80045c0:	40020000 	.word	0x40020000
 80045c4:	40020400 	.word	0x40020400
 80045c8:	40021800 	.word	0x40021800

080045cc <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 80045d0:	4802      	ldr	r0, [pc, #8]	; (80045dc <ETH_PHY_IO_Init+0x10>)
 80045d2:	f7fd fa69 	bl	8001aa8 <HAL_ETH_SetMDIOClockRange>

  return 0;
 80045d6:	2300      	movs	r3, #0
}
 80045d8:	4618      	mov	r0, r3
 80045da:	bd80      	pop	{r7, pc}
 80045dc:	20004c10 	.word	0x20004c10

080045e0 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 80045e0:	b480      	push	{r7}
 80045e2:	af00      	add	r7, sp, #0
  return 0;
 80045e4:	2300      	movs	r3, #0
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr

080045f0 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b084      	sub	sp, #16
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	60f8      	str	r0, [r7, #12]
 80045f8:	60b9      	str	r1, [r7, #8]
 80045fa:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	68ba      	ldr	r2, [r7, #8]
 8004600:	68f9      	ldr	r1, [r7, #12]
 8004602:	4807      	ldr	r0, [pc, #28]	; (8004620 <ETH_PHY_IO_ReadReg+0x30>)
 8004604:	f7fd f8be 	bl	8001784 <HAL_ETH_ReadPHYRegister>
 8004608:	4603      	mov	r3, r0
 800460a:	2b00      	cmp	r3, #0
 800460c:	d002      	beq.n	8004614 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800460e:	f04f 33ff 	mov.w	r3, #4294967295
 8004612:	e000      	b.n	8004616 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8004614:	2300      	movs	r3, #0
}
 8004616:	4618      	mov	r0, r3
 8004618:	3710      	adds	r7, #16
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}
 800461e:	bf00      	nop
 8004620:	20004c10 	.word	0x20004c10

08004624 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b084      	sub	sp, #16
 8004628:	af00      	add	r7, sp, #0
 800462a:	60f8      	str	r0, [r7, #12]
 800462c:	60b9      	str	r1, [r7, #8]
 800462e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	68ba      	ldr	r2, [r7, #8]
 8004634:	68f9      	ldr	r1, [r7, #12]
 8004636:	4807      	ldr	r0, [pc, #28]	; (8004654 <ETH_PHY_IO_WriteReg+0x30>)
 8004638:	f7fd f8ef 	bl	800181a <HAL_ETH_WritePHYRegister>
 800463c:	4603      	mov	r3, r0
 800463e:	2b00      	cmp	r3, #0
 8004640:	d002      	beq.n	8004648 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8004642:	f04f 33ff 	mov.w	r3, #4294967295
 8004646:	e000      	b.n	800464a <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8004648:	2300      	movs	r3, #0
}
 800464a:	4618      	mov	r0, r3
 800464c:	3710      	adds	r7, #16
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}
 8004652:	bf00      	nop
 8004654:	20004c10 	.word	0x20004c10

08004658 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800465c:	f7fc fcb2 	bl	8000fc4 <HAL_GetTick>
 8004660:	4603      	mov	r3, r0
}
 8004662:	4618      	mov	r0, r3
 8004664:	bd80      	pop	{r7, pc}
	...

08004668 <ethernet_link_check_state>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @param  argument: netif
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b0a0      	sub	sp, #128	; 0x80
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8004670:	f107 030c 	add.w	r3, r7, #12
 8004674:	2264      	movs	r2, #100	; 0x64
 8004676:	2100      	movs	r1, #0
 8004678:	4618      	mov	r0, r3
 800467a:	f00c f853 	bl	8010724 <memset>
  int32_t PHYLinkState = 0;
 800467e:	2300      	movs	r3, #0
 8004680:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8004682:	2300      	movs	r3, #0
 8004684:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004686:	2300      	movs	r3, #0
 8004688:	67bb      	str	r3, [r7, #120]	; 0x78
 800468a:	2300      	movs	r3, #0
 800468c:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800468e:	483a      	ldr	r0, [pc, #232]	; (8004778 <ethernet_link_check_state+0x110>)
 8004690:	f7fc fbab 	bl	8000dea <LAN8742_GetLinkState>
 8004694:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800469c:	089b      	lsrs	r3, r3, #2
 800469e:	f003 0301 	and.w	r3, r3, #1
 80046a2:	b2db      	uxtb	r3, r3
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d00c      	beq.n	80046c2 <ethernet_link_check_state+0x5a>
 80046a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80046aa:	2b01      	cmp	r3, #1
 80046ac:	dc09      	bgt.n	80046c2 <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 80046ae:	4833      	ldr	r0, [pc, #204]	; (800477c <ethernet_link_check_state+0x114>)
 80046b0:	f7fc ff23 	bl	80014fa <HAL_ETH_Stop>
    netif_set_down(netif);
 80046b4:	6878      	ldr	r0, [r7, #4]
 80046b6:	f001 f89b 	bl	80057f0 <netif_set_down>
    netif_set_link_down(netif);
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f001 f902 	bl	80058c4 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 80046c0:	e055      	b.n	800476e <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80046c8:	f003 0304 	and.w	r3, r3, #4
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d14e      	bne.n	800476e <ethernet_link_check_state+0x106>
 80046d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80046d2:	2b01      	cmp	r3, #1
 80046d4:	dd4b      	ble.n	800476e <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 80046d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80046d8:	3b02      	subs	r3, #2
 80046da:	2b03      	cmp	r3, #3
 80046dc:	d82a      	bhi.n	8004734 <ethernet_link_check_state+0xcc>
 80046de:	a201      	add	r2, pc, #4	; (adr r2, 80046e4 <ethernet_link_check_state+0x7c>)
 80046e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046e4:	080046f5 	.word	0x080046f5
 80046e8:	08004707 	.word	0x08004707
 80046ec:	08004717 	.word	0x08004717
 80046f0:	08004727 	.word	0x08004727
      duplex = ETH_FULLDUPLEX_MODE;
 80046f4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80046f8:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 80046fa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80046fe:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8004700:	2301      	movs	r3, #1
 8004702:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8004704:	e017      	b.n	8004736 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8004706:	2300      	movs	r3, #0
 8004708:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800470a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800470e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8004710:	2301      	movs	r3, #1
 8004712:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8004714:	e00f      	b.n	8004736 <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 8004716:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800471a:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800471c:	2300      	movs	r3, #0
 800471e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8004720:	2301      	movs	r3, #1
 8004722:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8004724:	e007      	b.n	8004736 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8004726:	2300      	movs	r3, #0
 8004728:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800472a:	2300      	movs	r3, #0
 800472c:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800472e:	2301      	movs	r3, #1
 8004730:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8004732:	e000      	b.n	8004736 <ethernet_link_check_state+0xce>
      break;
 8004734:	bf00      	nop
    if(linkchanged)
 8004736:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004738:	2b00      	cmp	r3, #0
 800473a:	d018      	beq.n	800476e <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800473c:	f107 030c 	add.w	r3, r7, #12
 8004740:	4619      	mov	r1, r3
 8004742:	480e      	ldr	r0, [pc, #56]	; (800477c <ethernet_link_check_state+0x114>)
 8004744:	f7fd f8b2 	bl	80018ac <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8004748:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800474a:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 800474c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800474e:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8004750:	f107 030c 	add.w	r3, r7, #12
 8004754:	4619      	mov	r1, r3
 8004756:	4809      	ldr	r0, [pc, #36]	; (800477c <ethernet_link_check_state+0x114>)
 8004758:	f7fd f98b 	bl	8001a72 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 800475c:	4807      	ldr	r0, [pc, #28]	; (800477c <ethernet_link_check_state+0x114>)
 800475e:	f7fc fe83 	bl	8001468 <HAL_ETH_Start>
      netif_set_up(netif);
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	f000 ffd8 	bl	8005718 <netif_set_up>
      netif_set_link_up(netif);
 8004768:	6878      	ldr	r0, [r7, #4]
 800476a:	f001 f873 	bl	8005854 <netif_set_link_up>
}
 800476e:	bf00      	nop
 8004770:	3780      	adds	r7, #128	; 0x80
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}
 8004776:	bf00      	nop
 8004778:	20004cf8 	.word	0x20004cf8
 800477c:	20004c10 	.word	0x20004c10

08004780 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b086      	sub	sp, #24
 8004784:	af02      	add	r7, sp, #8
 8004786:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */

  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8004788:	4812      	ldr	r0, [pc, #72]	; (80047d4 <HAL_ETH_RxAllocateCallback+0x54>)
 800478a:	f000 fd37 	bl	80051fc <memp_malloc_pool>
 800478e:	60f8      	str	r0, [r7, #12]
  if (p)
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d014      	beq.n	80047c0 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	f103 0220 	add.w	r2, r3, #32
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	4a0d      	ldr	r2, [pc, #52]	; (80047d8 <HAL_ETH_RxAllocateCallback+0x58>)
 80047a4:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80047ae:	9201      	str	r2, [sp, #4]
 80047b0:	9300      	str	r3, [sp, #0]
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	2241      	movs	r2, #65	; 0x41
 80047b6:	2100      	movs	r1, #0
 80047b8:	2000      	movs	r0, #0
 80047ba:	f001 fa59 	bl	8005c70 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 80047be:	e005      	b.n	80047cc <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 80047c0:	4b06      	ldr	r3, [pc, #24]	; (80047dc <HAL_ETH_RxAllocateCallback+0x5c>)
 80047c2:	2201      	movs	r2, #1
 80047c4:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2200      	movs	r2, #0
 80047ca:	601a      	str	r2, [r3, #0]
}
 80047cc:	bf00      	nop
 80047ce:	3710      	adds	r7, #16
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}
 80047d4:	08014584 	.word	0x08014584
 80047d8:	080043f5 	.word	0x080043f5
 80047dc:	20004ac8 	.word	0x20004ac8

080047e0 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b083      	sub	sp, #12
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	4603      	mov	r3, r0
 80047e8:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 80047ea:	88fb      	ldrh	r3, [r7, #6]
 80047ec:	021b      	lsls	r3, r3, #8
 80047ee:	b21a      	sxth	r2, r3
 80047f0:	88fb      	ldrh	r3, [r7, #6]
 80047f2:	0a1b      	lsrs	r3, r3, #8
 80047f4:	b29b      	uxth	r3, r3
 80047f6:	b21b      	sxth	r3, r3
 80047f8:	4313      	orrs	r3, r2
 80047fa:	b21b      	sxth	r3, r3
 80047fc:	b29b      	uxth	r3, r3
}
 80047fe:	4618      	mov	r0, r3
 8004800:	370c      	adds	r7, #12
 8004802:	46bd      	mov	sp, r7
 8004804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004808:	4770      	bx	lr

0800480a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800480a:	b480      	push	{r7}
 800480c:	b083      	sub	sp, #12
 800480e:	af00      	add	r7, sp, #0
 8004810:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	061a      	lsls	r2, r3, #24
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	021b      	lsls	r3, r3, #8
 800481a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800481e:	431a      	orrs	r2, r3
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	0a1b      	lsrs	r3, r3, #8
 8004824:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004828:	431a      	orrs	r2, r3
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	0e1b      	lsrs	r3, r3, #24
 800482e:	4313      	orrs	r3, r2
}
 8004830:	4618      	mov	r0, r3
 8004832:	370c      	adds	r7, #12
 8004834:	46bd      	mov	sp, r7
 8004836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483a:	4770      	bx	lr

0800483c <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 800483c:	b480      	push	{r7}
 800483e:	b089      	sub	sp, #36	; 0x24
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
 8004844:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 800484a:	2300      	movs	r3, #0
 800484c:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 800484e:	2300      	movs	r3, #0
 8004850:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 8004852:	69fb      	ldr	r3, [r7, #28]
 8004854:	f003 0301 	and.w	r3, r3, #1
 8004858:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d00d      	beq.n	800487c <lwip_standard_chksum+0x40>
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	2b00      	cmp	r3, #0
 8004864:	dd0a      	ble.n	800487c <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 8004866:	69fa      	ldr	r2, [r7, #28]
 8004868:	1c53      	adds	r3, r2, #1
 800486a:	61fb      	str	r3, [r7, #28]
 800486c:	f107 030e 	add.w	r3, r7, #14
 8004870:	3301      	adds	r3, #1
 8004872:	7812      	ldrb	r2, [r2, #0]
 8004874:	701a      	strb	r2, [r3, #0]
    len--;
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	3b01      	subs	r3, #1
 800487a:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 800487c:	69fb      	ldr	r3, [r7, #28]
 800487e:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 8004880:	e00a      	b.n	8004898 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 8004882:	69bb      	ldr	r3, [r7, #24]
 8004884:	1c9a      	adds	r2, r3, #2
 8004886:	61ba      	str	r2, [r7, #24]
 8004888:	881b      	ldrh	r3, [r3, #0]
 800488a:	461a      	mov	r2, r3
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	4413      	add	r3, r2
 8004890:	617b      	str	r3, [r7, #20]
    len -= 2;
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	3b02      	subs	r3, #2
 8004896:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	2b01      	cmp	r3, #1
 800489c:	dcf1      	bgt.n	8004882 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	dd04      	ble.n	80048ae <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 80048a4:	f107 030e 	add.w	r3, r7, #14
 80048a8:	69ba      	ldr	r2, [r7, #24]
 80048aa:	7812      	ldrb	r2, [r2, #0]
 80048ac:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 80048ae:	89fb      	ldrh	r3, [r7, #14]
 80048b0:	461a      	mov	r2, r3
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	4413      	add	r3, r2
 80048b6:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	0c1a      	lsrs	r2, r3, #16
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	b29b      	uxth	r3, r3
 80048c0:	4413      	add	r3, r2
 80048c2:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	0c1a      	lsrs	r2, r3, #16
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	b29b      	uxth	r3, r3
 80048cc:	4413      	add	r3, r2
 80048ce:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d007      	beq.n	80048e6 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	021b      	lsls	r3, r3, #8
 80048da:	b29a      	uxth	r2, r3
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	0a1b      	lsrs	r3, r3, #8
 80048e0:	b2db      	uxtb	r3, r3
 80048e2:	4313      	orrs	r3, r2
 80048e4:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	b29b      	uxth	r3, r3
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	3724      	adds	r7, #36	; 0x24
 80048ee:	46bd      	mov	sp, r7
 80048f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f4:	4770      	bx	lr

080048f6 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 80048f6:	b580      	push	{r7, lr}
 80048f8:	b082      	sub	sp, #8
 80048fa:	af00      	add	r7, sp, #0
 80048fc:	6078      	str	r0, [r7, #4]
 80048fe:	460b      	mov	r3, r1
 8004900:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 8004902:	887b      	ldrh	r3, [r7, #2]
 8004904:	4619      	mov	r1, r3
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	f7ff ff98 	bl	800483c <lwip_standard_chksum>
 800490c:	4603      	mov	r3, r0
 800490e:	43db      	mvns	r3, r3
 8004910:	b29b      	uxth	r3, r3
}
 8004912:	4618      	mov	r0, r3
 8004914:	3708      	adds	r7, #8
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}

0800491a <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 800491a:	b580      	push	{r7, lr}
 800491c:	b086      	sub	sp, #24
 800491e:	af00      	add	r7, sp, #0
 8004920:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 8004922:	2300      	movs	r3, #0
 8004924:	60fb      	str	r3, [r7, #12]

  acc = 0;
 8004926:	2300      	movs	r3, #0
 8004928:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	613b      	str	r3, [r7, #16]
 800492e:	e02b      	b.n	8004988 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	685a      	ldr	r2, [r3, #4]
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	895b      	ldrh	r3, [r3, #10]
 8004938:	4619      	mov	r1, r3
 800493a:	4610      	mov	r0, r2
 800493c:	f7ff ff7e 	bl	800483c <lwip_standard_chksum>
 8004940:	4603      	mov	r3, r0
 8004942:	461a      	mov	r2, r3
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	4413      	add	r3, r2
 8004948:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	0c1a      	lsrs	r2, r3, #16
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	b29b      	uxth	r3, r3
 8004952:	4413      	add	r3, r2
 8004954:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	895b      	ldrh	r3, [r3, #10]
 800495a:	f003 0301 	and.w	r3, r3, #1
 800495e:	b29b      	uxth	r3, r3
 8004960:	2b00      	cmp	r3, #0
 8004962:	d00e      	beq.n	8004982 <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2b00      	cmp	r3, #0
 8004968:	bf0c      	ite	eq
 800496a:	2301      	moveq	r3, #1
 800496c:	2300      	movne	r3, #0
 800496e:	b2db      	uxtb	r3, r3
 8004970:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	021b      	lsls	r3, r3, #8
 8004976:	b29a      	uxth	r2, r3
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	0a1b      	lsrs	r3, r3, #8
 800497c:	b2db      	uxtb	r3, r3
 800497e:	4313      	orrs	r3, r2
 8004980:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	613b      	str	r3, [r7, #16]
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d1d0      	bne.n	8004930 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d007      	beq.n	80049a4 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	021b      	lsls	r3, r3, #8
 8004998:	b29a      	uxth	r2, r3
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	0a1b      	lsrs	r3, r3, #8
 800499e:	b2db      	uxtb	r3, r3
 80049a0:	4313      	orrs	r3, r2
 80049a2:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	b29b      	uxth	r3, r3
 80049a8:	43db      	mvns	r3, r3
 80049aa:	b29b      	uxth	r3, r3
}
 80049ac:	4618      	mov	r0, r3
 80049ae:	3718      	adds	r7, #24
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bd80      	pop	{r7, pc}

080049b4 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b082      	sub	sp, #8
 80049b8:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 80049ba:	2300      	movs	r3, #0
 80049bc:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 80049be:	f000 f8d5 	bl	8004b6c <mem_init>
  memp_init();
 80049c2:	f000 fbd7 	bl	8005174 <memp_init>
  pbuf_init();
  netif_init();
 80049c6:	f000 fcd5 	bl	8005374 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80049ca:	f007 f80d 	bl	800b9e8 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80049ce:	f001 fda7 	bl	8006520 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 80049d2:	f006 ffc1 	bl	800b958 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 80049d6:	bf00      	nop
 80049d8:	3708      	adds	r7, #8
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}
	...

080049e0 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b083      	sub	sp, #12
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	4603      	mov	r3, r0
 80049e8:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 80049ea:	4b05      	ldr	r3, [pc, #20]	; (8004a00 <ptr_to_mem+0x20>)
 80049ec:	681a      	ldr	r2, [r3, #0]
 80049ee:	88fb      	ldrh	r3, [r7, #6]
 80049f0:	4413      	add	r3, r2
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	370c      	adds	r7, #12
 80049f6:	46bd      	mov	sp, r7
 80049f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fc:	4770      	bx	lr
 80049fe:	bf00      	nop
 8004a00:	20004d30 	.word	0x20004d30

08004a04 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b083      	sub	sp, #12
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8004a0c:	4b05      	ldr	r3, [pc, #20]	; (8004a24 <mem_to_ptr+0x20>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	687a      	ldr	r2, [r7, #4]
 8004a12:	1ad3      	subs	r3, r2, r3
 8004a14:	b29b      	uxth	r3, r3
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	370c      	adds	r7, #12
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a20:	4770      	bx	lr
 8004a22:	bf00      	nop
 8004a24:	20004d30 	.word	0x20004d30

08004a28 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8004a28:	b590      	push	{r4, r7, lr}
 8004a2a:	b085      	sub	sp, #20
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8004a30:	4b45      	ldr	r3, [pc, #276]	; (8004b48 <plug_holes+0x120>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	687a      	ldr	r2, [r7, #4]
 8004a36:	429a      	cmp	r2, r3
 8004a38:	d206      	bcs.n	8004a48 <plug_holes+0x20>
 8004a3a:	4b44      	ldr	r3, [pc, #272]	; (8004b4c <plug_holes+0x124>)
 8004a3c:	f240 12df 	movw	r2, #479	; 0x1df
 8004a40:	4943      	ldr	r1, [pc, #268]	; (8004b50 <plug_holes+0x128>)
 8004a42:	4844      	ldr	r0, [pc, #272]	; (8004b54 <plug_holes+0x12c>)
 8004a44:	f00b fe76 	bl	8010734 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8004a48:	4b43      	ldr	r3, [pc, #268]	; (8004b58 <plug_holes+0x130>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	687a      	ldr	r2, [r7, #4]
 8004a4e:	429a      	cmp	r2, r3
 8004a50:	d306      	bcc.n	8004a60 <plug_holes+0x38>
 8004a52:	4b3e      	ldr	r3, [pc, #248]	; (8004b4c <plug_holes+0x124>)
 8004a54:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8004a58:	4940      	ldr	r1, [pc, #256]	; (8004b5c <plug_holes+0x134>)
 8004a5a:	483e      	ldr	r0, [pc, #248]	; (8004b54 <plug_holes+0x12c>)
 8004a5c:	f00b fe6a 	bl	8010734 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	791b      	ldrb	r3, [r3, #4]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d006      	beq.n	8004a76 <plug_holes+0x4e>
 8004a68:	4b38      	ldr	r3, [pc, #224]	; (8004b4c <plug_holes+0x124>)
 8004a6a:	f240 12e1 	movw	r2, #481	; 0x1e1
 8004a6e:	493c      	ldr	r1, [pc, #240]	; (8004b60 <plug_holes+0x138>)
 8004a70:	4838      	ldr	r0, [pc, #224]	; (8004b54 <plug_holes+0x12c>)
 8004a72:	f00b fe5f 	bl	8010734 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	881b      	ldrh	r3, [r3, #0]
 8004a7a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004a7e:	d906      	bls.n	8004a8e <plug_holes+0x66>
 8004a80:	4b32      	ldr	r3, [pc, #200]	; (8004b4c <plug_holes+0x124>)
 8004a82:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8004a86:	4937      	ldr	r1, [pc, #220]	; (8004b64 <plug_holes+0x13c>)
 8004a88:	4832      	ldr	r0, [pc, #200]	; (8004b54 <plug_holes+0x12c>)
 8004a8a:	f00b fe53 	bl	8010734 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	881b      	ldrh	r3, [r3, #0]
 8004a92:	4618      	mov	r0, r3
 8004a94:	f7ff ffa4 	bl	80049e0 <ptr_to_mem>
 8004a98:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8004a9a:	687a      	ldr	r2, [r7, #4]
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	429a      	cmp	r2, r3
 8004aa0:	d024      	beq.n	8004aec <plug_holes+0xc4>
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	791b      	ldrb	r3, [r3, #4]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d120      	bne.n	8004aec <plug_holes+0xc4>
 8004aaa:	4b2b      	ldr	r3, [pc, #172]	; (8004b58 <plug_holes+0x130>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	68fa      	ldr	r2, [r7, #12]
 8004ab0:	429a      	cmp	r2, r3
 8004ab2:	d01b      	beq.n	8004aec <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8004ab4:	4b2c      	ldr	r3, [pc, #176]	; (8004b68 <plug_holes+0x140>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	68fa      	ldr	r2, [r7, #12]
 8004aba:	429a      	cmp	r2, r3
 8004abc:	d102      	bne.n	8004ac4 <plug_holes+0x9c>
      lfree = mem;
 8004abe:	4a2a      	ldr	r2, [pc, #168]	; (8004b68 <plug_holes+0x140>)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	881a      	ldrh	r2, [r3, #0]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	881b      	ldrh	r3, [r3, #0]
 8004ad0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004ad4:	d00a      	beq.n	8004aec <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	881b      	ldrh	r3, [r3, #0]
 8004ada:	4618      	mov	r0, r3
 8004adc:	f7ff ff80 	bl	80049e0 <ptr_to_mem>
 8004ae0:	4604      	mov	r4, r0
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f7ff ff8e 	bl	8004a04 <mem_to_ptr>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	885b      	ldrh	r3, [r3, #2]
 8004af0:	4618      	mov	r0, r3
 8004af2:	f7ff ff75 	bl	80049e0 <ptr_to_mem>
 8004af6:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8004af8:	68ba      	ldr	r2, [r7, #8]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	429a      	cmp	r2, r3
 8004afe:	d01f      	beq.n	8004b40 <plug_holes+0x118>
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	791b      	ldrb	r3, [r3, #4]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d11b      	bne.n	8004b40 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8004b08:	4b17      	ldr	r3, [pc, #92]	; (8004b68 <plug_holes+0x140>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	687a      	ldr	r2, [r7, #4]
 8004b0e:	429a      	cmp	r2, r3
 8004b10:	d102      	bne.n	8004b18 <plug_holes+0xf0>
      lfree = pmem;
 8004b12:	4a15      	ldr	r2, [pc, #84]	; (8004b68 <plug_holes+0x140>)
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	881a      	ldrh	r2, [r3, #0]
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	881b      	ldrh	r3, [r3, #0]
 8004b24:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004b28:	d00a      	beq.n	8004b40 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	881b      	ldrh	r3, [r3, #0]
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f7ff ff56 	bl	80049e0 <ptr_to_mem>
 8004b34:	4604      	mov	r4, r0
 8004b36:	68b8      	ldr	r0, [r7, #8]
 8004b38:	f7ff ff64 	bl	8004a04 <mem_to_ptr>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8004b40:	bf00      	nop
 8004b42:	3714      	adds	r7, #20
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd90      	pop	{r4, r7, pc}
 8004b48:	20004d30 	.word	0x20004d30
 8004b4c:	08011840 	.word	0x08011840
 8004b50:	08011870 	.word	0x08011870
 8004b54:	08011888 	.word	0x08011888
 8004b58:	20004d34 	.word	0x20004d34
 8004b5c:	080118b0 	.word	0x080118b0
 8004b60:	080118cc 	.word	0x080118cc
 8004b64:	080118e8 	.word	0x080118e8
 8004b68:	20004d38 	.word	0x20004d38

08004b6c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b082      	sub	sp, #8
 8004b70:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8004b72:	4b16      	ldr	r3, [pc, #88]	; (8004bcc <mem_init+0x60>)
 8004b74:	4a16      	ldr	r2, [pc, #88]	; (8004bd0 <mem_init+0x64>)
 8004b76:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8004b78:	4b14      	ldr	r3, [pc, #80]	; (8004bcc <mem_init+0x60>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8004b84:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8004b92:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8004b96:	f7ff ff23 	bl	80049e0 <ptr_to_mem>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	4a0d      	ldr	r2, [pc, #52]	; (8004bd4 <mem_init+0x68>)
 8004b9e:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8004ba0:	4b0c      	ldr	r3, [pc, #48]	; (8004bd4 <mem_init+0x68>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	2201      	movs	r2, #1
 8004ba6:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8004ba8:	4b0a      	ldr	r3, [pc, #40]	; (8004bd4 <mem_init+0x68>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8004bb0:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8004bb2:	4b08      	ldr	r3, [pc, #32]	; (8004bd4 <mem_init+0x68>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8004bba:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8004bbc:	4b03      	ldr	r3, [pc, #12]	; (8004bcc <mem_init+0x60>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a05      	ldr	r2, [pc, #20]	; (8004bd8 <mem_init+0x6c>)
 8004bc2:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8004bc4:	bf00      	nop
 8004bc6:	3708      	adds	r7, #8
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}
 8004bcc:	20004d30 	.word	0x20004d30
 8004bd0:	30044000 	.word	0x30044000
 8004bd4:	20004d34 	.word	0x20004d34
 8004bd8:	20004d38 	.word	0x20004d38

08004bdc <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b086      	sub	sp, #24
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8004be4:	6878      	ldr	r0, [r7, #4]
 8004be6:	f7ff ff0d 	bl	8004a04 <mem_to_ptr>
 8004bea:	4603      	mov	r3, r0
 8004bec:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	881b      	ldrh	r3, [r3, #0]
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f7ff fef4 	bl	80049e0 <ptr_to_mem>
 8004bf8:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	885b      	ldrh	r3, [r3, #2]
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f7ff feee 	bl	80049e0 <ptr_to_mem>
 8004c04:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	881b      	ldrh	r3, [r3, #0]
 8004c0a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004c0e:	d818      	bhi.n	8004c42 <mem_link_valid+0x66>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	885b      	ldrh	r3, [r3, #2]
 8004c14:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004c18:	d813      	bhi.n	8004c42 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8004c1e:	8afa      	ldrh	r2, [r7, #22]
 8004c20:	429a      	cmp	r2, r3
 8004c22:	d004      	beq.n	8004c2e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	881b      	ldrh	r3, [r3, #0]
 8004c28:	8afa      	ldrh	r2, [r7, #22]
 8004c2a:	429a      	cmp	r2, r3
 8004c2c:	d109      	bne.n	8004c42 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8004c2e:	4b08      	ldr	r3, [pc, #32]	; (8004c50 <mem_link_valid+0x74>)
 8004c30:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8004c32:	693a      	ldr	r2, [r7, #16]
 8004c34:	429a      	cmp	r2, r3
 8004c36:	d006      	beq.n	8004c46 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	885b      	ldrh	r3, [r3, #2]
 8004c3c:	8afa      	ldrh	r2, [r7, #22]
 8004c3e:	429a      	cmp	r2, r3
 8004c40:	d001      	beq.n	8004c46 <mem_link_valid+0x6a>
    return 0;
 8004c42:	2300      	movs	r3, #0
 8004c44:	e000      	b.n	8004c48 <mem_link_valid+0x6c>
  }
  return 1;
 8004c46:	2301      	movs	r3, #1
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	3718      	adds	r7, #24
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}
 8004c50:	20004d34 	.word	0x20004d34

08004c54 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b084      	sub	sp, #16
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d04c      	beq.n	8004cfc <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	f003 0303 	and.w	r3, r3, #3
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d007      	beq.n	8004c7c <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8004c6c:	4b25      	ldr	r3, [pc, #148]	; (8004d04 <mem_free+0xb0>)
 8004c6e:	f240 2273 	movw	r2, #627	; 0x273
 8004c72:	4925      	ldr	r1, [pc, #148]	; (8004d08 <mem_free+0xb4>)
 8004c74:	4825      	ldr	r0, [pc, #148]	; (8004d0c <mem_free+0xb8>)
 8004c76:	f00b fd5d 	bl	8010734 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004c7a:	e040      	b.n	8004cfe <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	3b08      	subs	r3, #8
 8004c80:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8004c82:	4b23      	ldr	r3, [pc, #140]	; (8004d10 <mem_free+0xbc>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	68fa      	ldr	r2, [r7, #12]
 8004c88:	429a      	cmp	r2, r3
 8004c8a:	d306      	bcc.n	8004c9a <mem_free+0x46>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	f103 020c 	add.w	r2, r3, #12
 8004c92:	4b20      	ldr	r3, [pc, #128]	; (8004d14 <mem_free+0xc0>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	429a      	cmp	r2, r3
 8004c98:	d907      	bls.n	8004caa <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8004c9a:	4b1a      	ldr	r3, [pc, #104]	; (8004d04 <mem_free+0xb0>)
 8004c9c:	f240 227f 	movw	r2, #639	; 0x27f
 8004ca0:	491d      	ldr	r1, [pc, #116]	; (8004d18 <mem_free+0xc4>)
 8004ca2:	481a      	ldr	r0, [pc, #104]	; (8004d0c <mem_free+0xb8>)
 8004ca4:	f00b fd46 	bl	8010734 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004ca8:	e029      	b.n	8004cfe <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	791b      	ldrb	r3, [r3, #4]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d107      	bne.n	8004cc2 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8004cb2:	4b14      	ldr	r3, [pc, #80]	; (8004d04 <mem_free+0xb0>)
 8004cb4:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8004cb8:	4918      	ldr	r1, [pc, #96]	; (8004d1c <mem_free+0xc8>)
 8004cba:	4814      	ldr	r0, [pc, #80]	; (8004d0c <mem_free+0xb8>)
 8004cbc:	f00b fd3a 	bl	8010734 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004cc0:	e01d      	b.n	8004cfe <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8004cc2:	68f8      	ldr	r0, [r7, #12]
 8004cc4:	f7ff ff8a 	bl	8004bdc <mem_link_valid>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d107      	bne.n	8004cde <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8004cce:	4b0d      	ldr	r3, [pc, #52]	; (8004d04 <mem_free+0xb0>)
 8004cd0:	f240 2295 	movw	r2, #661	; 0x295
 8004cd4:	4912      	ldr	r1, [pc, #72]	; (8004d20 <mem_free+0xcc>)
 8004cd6:	480d      	ldr	r0, [pc, #52]	; (8004d0c <mem_free+0xb8>)
 8004cd8:	f00b fd2c 	bl	8010734 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004cdc:	e00f      	b.n	8004cfe <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8004ce4:	4b0f      	ldr	r3, [pc, #60]	; (8004d24 <mem_free+0xd0>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	68fa      	ldr	r2, [r7, #12]
 8004cea:	429a      	cmp	r2, r3
 8004cec:	d202      	bcs.n	8004cf4 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8004cee:	4a0d      	ldr	r2, [pc, #52]	; (8004d24 <mem_free+0xd0>)
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8004cf4:	68f8      	ldr	r0, [r7, #12]
 8004cf6:	f7ff fe97 	bl	8004a28 <plug_holes>
 8004cfa:	e000      	b.n	8004cfe <mem_free+0xaa>
    return;
 8004cfc:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8004cfe:	3710      	adds	r7, #16
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}
 8004d04:	08011840 	.word	0x08011840
 8004d08:	08011914 	.word	0x08011914
 8004d0c:	08011888 	.word	0x08011888
 8004d10:	20004d30 	.word	0x20004d30
 8004d14:	20004d34 	.word	0x20004d34
 8004d18:	08011938 	.word	0x08011938
 8004d1c:	08011954 	.word	0x08011954
 8004d20:	0801197c 	.word	0x0801197c
 8004d24:	20004d38 	.word	0x20004d38

08004d28 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b088      	sub	sp, #32
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
 8004d30:	460b      	mov	r3, r1
 8004d32:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8004d34:	887b      	ldrh	r3, [r7, #2]
 8004d36:	3303      	adds	r3, #3
 8004d38:	b29b      	uxth	r3, r3
 8004d3a:	f023 0303 	bic.w	r3, r3, #3
 8004d3e:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8004d40:	8bfb      	ldrh	r3, [r7, #30]
 8004d42:	2b0b      	cmp	r3, #11
 8004d44:	d801      	bhi.n	8004d4a <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8004d46:	230c      	movs	r3, #12
 8004d48:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8004d4a:	8bfb      	ldrh	r3, [r7, #30]
 8004d4c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004d50:	d803      	bhi.n	8004d5a <mem_trim+0x32>
 8004d52:	8bfa      	ldrh	r2, [r7, #30]
 8004d54:	887b      	ldrh	r3, [r7, #2]
 8004d56:	429a      	cmp	r2, r3
 8004d58:	d201      	bcs.n	8004d5e <mem_trim+0x36>
    return NULL;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	e0cc      	b.n	8004ef8 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8004d5e:	4b68      	ldr	r3, [pc, #416]	; (8004f00 <mem_trim+0x1d8>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	687a      	ldr	r2, [r7, #4]
 8004d64:	429a      	cmp	r2, r3
 8004d66:	d304      	bcc.n	8004d72 <mem_trim+0x4a>
 8004d68:	4b66      	ldr	r3, [pc, #408]	; (8004f04 <mem_trim+0x1dc>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	687a      	ldr	r2, [r7, #4]
 8004d6e:	429a      	cmp	r2, r3
 8004d70:	d306      	bcc.n	8004d80 <mem_trim+0x58>
 8004d72:	4b65      	ldr	r3, [pc, #404]	; (8004f08 <mem_trim+0x1e0>)
 8004d74:	f240 22d1 	movw	r2, #721	; 0x2d1
 8004d78:	4964      	ldr	r1, [pc, #400]	; (8004f0c <mem_trim+0x1e4>)
 8004d7a:	4865      	ldr	r0, [pc, #404]	; (8004f10 <mem_trim+0x1e8>)
 8004d7c:	f00b fcda 	bl	8010734 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8004d80:	4b5f      	ldr	r3, [pc, #380]	; (8004f00 <mem_trim+0x1d8>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	687a      	ldr	r2, [r7, #4]
 8004d86:	429a      	cmp	r2, r3
 8004d88:	d304      	bcc.n	8004d94 <mem_trim+0x6c>
 8004d8a:	4b5e      	ldr	r3, [pc, #376]	; (8004f04 <mem_trim+0x1dc>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	687a      	ldr	r2, [r7, #4]
 8004d90:	429a      	cmp	r2, r3
 8004d92:	d301      	bcc.n	8004d98 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	e0af      	b.n	8004ef8 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	3b08      	subs	r3, #8
 8004d9c:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8004d9e:	69b8      	ldr	r0, [r7, #24]
 8004da0:	f7ff fe30 	bl	8004a04 <mem_to_ptr>
 8004da4:	4603      	mov	r3, r0
 8004da6:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8004da8:	69bb      	ldr	r3, [r7, #24]
 8004daa:	881a      	ldrh	r2, [r3, #0]
 8004dac:	8afb      	ldrh	r3, [r7, #22]
 8004dae:	1ad3      	subs	r3, r2, r3
 8004db0:	b29b      	uxth	r3, r3
 8004db2:	3b08      	subs	r3, #8
 8004db4:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8004db6:	8bfa      	ldrh	r2, [r7, #30]
 8004db8:	8abb      	ldrh	r3, [r7, #20]
 8004dba:	429a      	cmp	r2, r3
 8004dbc:	d906      	bls.n	8004dcc <mem_trim+0xa4>
 8004dbe:	4b52      	ldr	r3, [pc, #328]	; (8004f08 <mem_trim+0x1e0>)
 8004dc0:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8004dc4:	4953      	ldr	r1, [pc, #332]	; (8004f14 <mem_trim+0x1ec>)
 8004dc6:	4852      	ldr	r0, [pc, #328]	; (8004f10 <mem_trim+0x1e8>)
 8004dc8:	f00b fcb4 	bl	8010734 <iprintf>
  if (newsize > size) {
 8004dcc:	8bfa      	ldrh	r2, [r7, #30]
 8004dce:	8abb      	ldrh	r3, [r7, #20]
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	d901      	bls.n	8004dd8 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	e08f      	b.n	8004ef8 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8004dd8:	8bfa      	ldrh	r2, [r7, #30]
 8004dda:	8abb      	ldrh	r3, [r7, #20]
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	d101      	bne.n	8004de4 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	e089      	b.n	8004ef8 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8004de4:	69bb      	ldr	r3, [r7, #24]
 8004de6:	881b      	ldrh	r3, [r3, #0]
 8004de8:	4618      	mov	r0, r3
 8004dea:	f7ff fdf9 	bl	80049e0 <ptr_to_mem>
 8004dee:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	791b      	ldrb	r3, [r3, #4]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d13f      	bne.n	8004e78 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8004df8:	69bb      	ldr	r3, [r7, #24]
 8004dfa:	881b      	ldrh	r3, [r3, #0]
 8004dfc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004e00:	d106      	bne.n	8004e10 <mem_trim+0xe8>
 8004e02:	4b41      	ldr	r3, [pc, #260]	; (8004f08 <mem_trim+0x1e0>)
 8004e04:	f240 22f5 	movw	r2, #757	; 0x2f5
 8004e08:	4943      	ldr	r1, [pc, #268]	; (8004f18 <mem_trim+0x1f0>)
 8004e0a:	4841      	ldr	r0, [pc, #260]	; (8004f10 <mem_trim+0x1e8>)
 8004e0c:	f00b fc92 	bl	8010734 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	881b      	ldrh	r3, [r3, #0]
 8004e14:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8004e16:	8afa      	ldrh	r2, [r7, #22]
 8004e18:	8bfb      	ldrh	r3, [r7, #30]
 8004e1a:	4413      	add	r3, r2
 8004e1c:	b29b      	uxth	r3, r3
 8004e1e:	3308      	adds	r3, #8
 8004e20:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8004e22:	4b3e      	ldr	r3, [pc, #248]	; (8004f1c <mem_trim+0x1f4>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	693a      	ldr	r2, [r7, #16]
 8004e28:	429a      	cmp	r2, r3
 8004e2a:	d106      	bne.n	8004e3a <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8004e2c:	89fb      	ldrh	r3, [r7, #14]
 8004e2e:	4618      	mov	r0, r3
 8004e30:	f7ff fdd6 	bl	80049e0 <ptr_to_mem>
 8004e34:	4603      	mov	r3, r0
 8004e36:	4a39      	ldr	r2, [pc, #228]	; (8004f1c <mem_trim+0x1f4>)
 8004e38:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8004e3a:	89fb      	ldrh	r3, [r7, #14]
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	f7ff fdcf 	bl	80049e0 <ptr_to_mem>
 8004e42:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	2200      	movs	r2, #0
 8004e48:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	89ba      	ldrh	r2, [r7, #12]
 8004e4e:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	8afa      	ldrh	r2, [r7, #22]
 8004e54:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8004e56:	69bb      	ldr	r3, [r7, #24]
 8004e58:	89fa      	ldrh	r2, [r7, #14]
 8004e5a:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8004e5c:	693b      	ldr	r3, [r7, #16]
 8004e5e:	881b      	ldrh	r3, [r3, #0]
 8004e60:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004e64:	d047      	beq.n	8004ef6 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	881b      	ldrh	r3, [r3, #0]
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f7ff fdb8 	bl	80049e0 <ptr_to_mem>
 8004e70:	4602      	mov	r2, r0
 8004e72:	89fb      	ldrh	r3, [r7, #14]
 8004e74:	8053      	strh	r3, [r2, #2]
 8004e76:	e03e      	b.n	8004ef6 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8004e78:	8bfb      	ldrh	r3, [r7, #30]
 8004e7a:	f103 0214 	add.w	r2, r3, #20
 8004e7e:	8abb      	ldrh	r3, [r7, #20]
 8004e80:	429a      	cmp	r2, r3
 8004e82:	d838      	bhi.n	8004ef6 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8004e84:	8afa      	ldrh	r2, [r7, #22]
 8004e86:	8bfb      	ldrh	r3, [r7, #30]
 8004e88:	4413      	add	r3, r2
 8004e8a:	b29b      	uxth	r3, r3
 8004e8c:	3308      	adds	r3, #8
 8004e8e:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8004e90:	69bb      	ldr	r3, [r7, #24]
 8004e92:	881b      	ldrh	r3, [r3, #0]
 8004e94:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004e98:	d106      	bne.n	8004ea8 <mem_trim+0x180>
 8004e9a:	4b1b      	ldr	r3, [pc, #108]	; (8004f08 <mem_trim+0x1e0>)
 8004e9c:	f240 3216 	movw	r2, #790	; 0x316
 8004ea0:	491d      	ldr	r1, [pc, #116]	; (8004f18 <mem_trim+0x1f0>)
 8004ea2:	481b      	ldr	r0, [pc, #108]	; (8004f10 <mem_trim+0x1e8>)
 8004ea4:	f00b fc46 	bl	8010734 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8004ea8:	89fb      	ldrh	r3, [r7, #14]
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f7ff fd98 	bl	80049e0 <ptr_to_mem>
 8004eb0:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8004eb2:	4b1a      	ldr	r3, [pc, #104]	; (8004f1c <mem_trim+0x1f4>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	693a      	ldr	r2, [r7, #16]
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d202      	bcs.n	8004ec2 <mem_trim+0x19a>
      lfree = mem2;
 8004ebc:	4a17      	ldr	r2, [pc, #92]	; (8004f1c <mem_trim+0x1f4>)
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8004ec8:	69bb      	ldr	r3, [r7, #24]
 8004eca:	881a      	ldrh	r2, [r3, #0]
 8004ecc:	693b      	ldr	r3, [r7, #16]
 8004ece:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	8afa      	ldrh	r2, [r7, #22]
 8004ed4:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8004ed6:	69bb      	ldr	r3, [r7, #24]
 8004ed8:	89fa      	ldrh	r2, [r7, #14]
 8004eda:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	881b      	ldrh	r3, [r3, #0]
 8004ee0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004ee4:	d007      	beq.n	8004ef6 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	881b      	ldrh	r3, [r3, #0]
 8004eea:	4618      	mov	r0, r3
 8004eec:	f7ff fd78 	bl	80049e0 <ptr_to_mem>
 8004ef0:	4602      	mov	r2, r0
 8004ef2:	89fb      	ldrh	r3, [r7, #14]
 8004ef4:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8004ef6:	687b      	ldr	r3, [r7, #4]
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	3720      	adds	r7, #32
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}
 8004f00:	20004d30 	.word	0x20004d30
 8004f04:	20004d34 	.word	0x20004d34
 8004f08:	08011840 	.word	0x08011840
 8004f0c:	080119b0 	.word	0x080119b0
 8004f10:	08011888 	.word	0x08011888
 8004f14:	080119c8 	.word	0x080119c8
 8004f18:	080119e8 	.word	0x080119e8
 8004f1c:	20004d38 	.word	0x20004d38

08004f20 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b088      	sub	sp, #32
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	4603      	mov	r3, r0
 8004f28:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8004f2a:	88fb      	ldrh	r3, [r7, #6]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d101      	bne.n	8004f34 <mem_malloc+0x14>
    return NULL;
 8004f30:	2300      	movs	r3, #0
 8004f32:	e0d9      	b.n	80050e8 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8004f34:	88fb      	ldrh	r3, [r7, #6]
 8004f36:	3303      	adds	r3, #3
 8004f38:	b29b      	uxth	r3, r3
 8004f3a:	f023 0303 	bic.w	r3, r3, #3
 8004f3e:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8004f40:	8bbb      	ldrh	r3, [r7, #28]
 8004f42:	2b0b      	cmp	r3, #11
 8004f44:	d801      	bhi.n	8004f4a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8004f46:	230c      	movs	r3, #12
 8004f48:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8004f4a:	8bbb      	ldrh	r3, [r7, #28]
 8004f4c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004f50:	d803      	bhi.n	8004f5a <mem_malloc+0x3a>
 8004f52:	8bba      	ldrh	r2, [r7, #28]
 8004f54:	88fb      	ldrh	r3, [r7, #6]
 8004f56:	429a      	cmp	r2, r3
 8004f58:	d201      	bcs.n	8004f5e <mem_malloc+0x3e>
    return NULL;
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	e0c4      	b.n	80050e8 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8004f5e:	4b64      	ldr	r3, [pc, #400]	; (80050f0 <mem_malloc+0x1d0>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4618      	mov	r0, r3
 8004f64:	f7ff fd4e 	bl	8004a04 <mem_to_ptr>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	83fb      	strh	r3, [r7, #30]
 8004f6c:	e0b4      	b.n	80050d8 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8004f6e:	8bfb      	ldrh	r3, [r7, #30]
 8004f70:	4618      	mov	r0, r3
 8004f72:	f7ff fd35 	bl	80049e0 <ptr_to_mem>
 8004f76:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	791b      	ldrb	r3, [r3, #4]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	f040 80a4 	bne.w	80050ca <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	881b      	ldrh	r3, [r3, #0]
 8004f86:	461a      	mov	r2, r3
 8004f88:	8bfb      	ldrh	r3, [r7, #30]
 8004f8a:	1ad3      	subs	r3, r2, r3
 8004f8c:	f1a3 0208 	sub.w	r2, r3, #8
 8004f90:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8004f92:	429a      	cmp	r2, r3
 8004f94:	f0c0 8099 	bcc.w	80050ca <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	881b      	ldrh	r3, [r3, #0]
 8004f9c:	461a      	mov	r2, r3
 8004f9e:	8bfb      	ldrh	r3, [r7, #30]
 8004fa0:	1ad3      	subs	r3, r2, r3
 8004fa2:	f1a3 0208 	sub.w	r2, r3, #8
 8004fa6:	8bbb      	ldrh	r3, [r7, #28]
 8004fa8:	3314      	adds	r3, #20
 8004faa:	429a      	cmp	r2, r3
 8004fac:	d333      	bcc.n	8005016 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8004fae:	8bfa      	ldrh	r2, [r7, #30]
 8004fb0:	8bbb      	ldrh	r3, [r7, #28]
 8004fb2:	4413      	add	r3, r2
 8004fb4:	b29b      	uxth	r3, r3
 8004fb6:	3308      	adds	r3, #8
 8004fb8:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8004fba:	8a7b      	ldrh	r3, [r7, #18]
 8004fbc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004fc0:	d106      	bne.n	8004fd0 <mem_malloc+0xb0>
 8004fc2:	4b4c      	ldr	r3, [pc, #304]	; (80050f4 <mem_malloc+0x1d4>)
 8004fc4:	f240 3287 	movw	r2, #903	; 0x387
 8004fc8:	494b      	ldr	r1, [pc, #300]	; (80050f8 <mem_malloc+0x1d8>)
 8004fca:	484c      	ldr	r0, [pc, #304]	; (80050fc <mem_malloc+0x1dc>)
 8004fcc:	f00b fbb2 	bl	8010734 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8004fd0:	8a7b      	ldrh	r3, [r7, #18]
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	f7ff fd04 	bl	80049e0 <ptr_to_mem>
 8004fd8:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	881a      	ldrh	r2, [r3, #0]
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	8bfa      	ldrh	r2, [r7, #30]
 8004fec:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	8a7a      	ldrh	r2, [r7, #18]
 8004ff2:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	881b      	ldrh	r3, [r3, #0]
 8004ffe:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005002:	d00b      	beq.n	800501c <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	881b      	ldrh	r3, [r3, #0]
 8005008:	4618      	mov	r0, r3
 800500a:	f7ff fce9 	bl	80049e0 <ptr_to_mem>
 800500e:	4602      	mov	r2, r0
 8005010:	8a7b      	ldrh	r3, [r7, #18]
 8005012:	8053      	strh	r3, [r2, #2]
 8005014:	e002      	b.n	800501c <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	2201      	movs	r2, #1
 800501a:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800501c:	4b34      	ldr	r3, [pc, #208]	; (80050f0 <mem_malloc+0x1d0>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	697a      	ldr	r2, [r7, #20]
 8005022:	429a      	cmp	r2, r3
 8005024:	d127      	bne.n	8005076 <mem_malloc+0x156>
          struct mem *cur = lfree;
 8005026:	4b32      	ldr	r3, [pc, #200]	; (80050f0 <mem_malloc+0x1d0>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800502c:	e005      	b.n	800503a <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800502e:	69bb      	ldr	r3, [r7, #24]
 8005030:	881b      	ldrh	r3, [r3, #0]
 8005032:	4618      	mov	r0, r3
 8005034:	f7ff fcd4 	bl	80049e0 <ptr_to_mem>
 8005038:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800503a:	69bb      	ldr	r3, [r7, #24]
 800503c:	791b      	ldrb	r3, [r3, #4]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d004      	beq.n	800504c <mem_malloc+0x12c>
 8005042:	4b2f      	ldr	r3, [pc, #188]	; (8005100 <mem_malloc+0x1e0>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	69ba      	ldr	r2, [r7, #24]
 8005048:	429a      	cmp	r2, r3
 800504a:	d1f0      	bne.n	800502e <mem_malloc+0x10e>
          }
          lfree = cur;
 800504c:	4a28      	ldr	r2, [pc, #160]	; (80050f0 <mem_malloc+0x1d0>)
 800504e:	69bb      	ldr	r3, [r7, #24]
 8005050:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8005052:	4b27      	ldr	r3, [pc, #156]	; (80050f0 <mem_malloc+0x1d0>)
 8005054:	681a      	ldr	r2, [r3, #0]
 8005056:	4b2a      	ldr	r3, [pc, #168]	; (8005100 <mem_malloc+0x1e0>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	429a      	cmp	r2, r3
 800505c:	d00b      	beq.n	8005076 <mem_malloc+0x156>
 800505e:	4b24      	ldr	r3, [pc, #144]	; (80050f0 <mem_malloc+0x1d0>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	791b      	ldrb	r3, [r3, #4]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d006      	beq.n	8005076 <mem_malloc+0x156>
 8005068:	4b22      	ldr	r3, [pc, #136]	; (80050f4 <mem_malloc+0x1d4>)
 800506a:	f240 32b5 	movw	r2, #949	; 0x3b5
 800506e:	4925      	ldr	r1, [pc, #148]	; (8005104 <mem_malloc+0x1e4>)
 8005070:	4822      	ldr	r0, [pc, #136]	; (80050fc <mem_malloc+0x1dc>)
 8005072:	f00b fb5f 	bl	8010734 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8005076:	8bba      	ldrh	r2, [r7, #28]
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	4413      	add	r3, r2
 800507c:	3308      	adds	r3, #8
 800507e:	4a20      	ldr	r2, [pc, #128]	; (8005100 <mem_malloc+0x1e0>)
 8005080:	6812      	ldr	r2, [r2, #0]
 8005082:	4293      	cmp	r3, r2
 8005084:	d906      	bls.n	8005094 <mem_malloc+0x174>
 8005086:	4b1b      	ldr	r3, [pc, #108]	; (80050f4 <mem_malloc+0x1d4>)
 8005088:	f240 32b9 	movw	r2, #953	; 0x3b9
 800508c:	491e      	ldr	r1, [pc, #120]	; (8005108 <mem_malloc+0x1e8>)
 800508e:	481b      	ldr	r0, [pc, #108]	; (80050fc <mem_malloc+0x1dc>)
 8005090:	f00b fb50 	bl	8010734 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	f003 0303 	and.w	r3, r3, #3
 800509a:	2b00      	cmp	r3, #0
 800509c:	d006      	beq.n	80050ac <mem_malloc+0x18c>
 800509e:	4b15      	ldr	r3, [pc, #84]	; (80050f4 <mem_malloc+0x1d4>)
 80050a0:	f240 32bb 	movw	r2, #955	; 0x3bb
 80050a4:	4919      	ldr	r1, [pc, #100]	; (800510c <mem_malloc+0x1ec>)
 80050a6:	4815      	ldr	r0, [pc, #84]	; (80050fc <mem_malloc+0x1dc>)
 80050a8:	f00b fb44 	bl	8010734 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	f003 0303 	and.w	r3, r3, #3
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d006      	beq.n	80050c4 <mem_malloc+0x1a4>
 80050b6:	4b0f      	ldr	r3, [pc, #60]	; (80050f4 <mem_malloc+0x1d4>)
 80050b8:	f240 32bd 	movw	r2, #957	; 0x3bd
 80050bc:	4914      	ldr	r1, [pc, #80]	; (8005110 <mem_malloc+0x1f0>)
 80050be:	480f      	ldr	r0, [pc, #60]	; (80050fc <mem_malloc+0x1dc>)
 80050c0:	f00b fb38 	bl	8010734 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	3308      	adds	r3, #8
 80050c8:	e00e      	b.n	80050e8 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 80050ca:	8bfb      	ldrh	r3, [r7, #30]
 80050cc:	4618      	mov	r0, r3
 80050ce:	f7ff fc87 	bl	80049e0 <ptr_to_mem>
 80050d2:	4603      	mov	r3, r0
 80050d4:	881b      	ldrh	r3, [r3, #0]
 80050d6:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80050d8:	8bfa      	ldrh	r2, [r7, #30]
 80050da:	8bbb      	ldrh	r3, [r7, #28]
 80050dc:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 80050e0:	429a      	cmp	r2, r3
 80050e2:	f4ff af44 	bcc.w	8004f6e <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 80050e6:	2300      	movs	r3, #0
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	3720      	adds	r7, #32
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bd80      	pop	{r7, pc}
 80050f0:	20004d38 	.word	0x20004d38
 80050f4:	08011840 	.word	0x08011840
 80050f8:	080119e8 	.word	0x080119e8
 80050fc:	08011888 	.word	0x08011888
 8005100:	20004d34 	.word	0x20004d34
 8005104:	080119fc 	.word	0x080119fc
 8005108:	08011a18 	.word	0x08011a18
 800510c:	08011a48 	.word	0x08011a48
 8005110:	08011a78 	.word	0x08011a78

08005114 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8005114:	b480      	push	{r7}
 8005116:	b085      	sub	sp, #20
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	2200      	movs	r2, #0
 8005122:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	3303      	adds	r3, #3
 800512a:	f023 0303 	bic.w	r3, r3, #3
 800512e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8005130:	2300      	movs	r3, #0
 8005132:	60fb      	str	r3, [r7, #12]
 8005134:	e011      	b.n	800515a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	689b      	ldr	r3, [r3, #8]
 800513a:	681a      	ldr	r2, [r3, #0]
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	689b      	ldr	r3, [r3, #8]
 8005144:	68ba      	ldr	r2, [r7, #8]
 8005146:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	881b      	ldrh	r3, [r3, #0]
 800514c:	461a      	mov	r2, r3
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	4413      	add	r3, r2
 8005152:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	3301      	adds	r3, #1
 8005158:	60fb      	str	r3, [r7, #12]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	885b      	ldrh	r3, [r3, #2]
 800515e:	461a      	mov	r2, r3
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	4293      	cmp	r3, r2
 8005164:	dbe7      	blt.n	8005136 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8005166:	bf00      	nop
 8005168:	bf00      	nop
 800516a:	3714      	adds	r7, #20
 800516c:	46bd      	mov	sp, r7
 800516e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005172:	4770      	bx	lr

08005174 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b082      	sub	sp, #8
 8005178:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800517a:	2300      	movs	r3, #0
 800517c:	80fb      	strh	r3, [r7, #6]
 800517e:	e009      	b.n	8005194 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8005180:	88fb      	ldrh	r3, [r7, #6]
 8005182:	4a08      	ldr	r2, [pc, #32]	; (80051a4 <memp_init+0x30>)
 8005184:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005188:	4618      	mov	r0, r3
 800518a:	f7ff ffc3 	bl	8005114 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800518e:	88fb      	ldrh	r3, [r7, #6]
 8005190:	3301      	adds	r3, #1
 8005192:	80fb      	strh	r3, [r7, #6]
 8005194:	88fb      	ldrh	r3, [r7, #6]
 8005196:	2b08      	cmp	r3, #8
 8005198:	d9f2      	bls.n	8005180 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800519a:	bf00      	nop
 800519c:	bf00      	nop
 800519e:	3708      	adds	r7, #8
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}
 80051a4:	080145fc 	.word	0x080145fc

080051a8 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b084      	sub	sp, #16
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	689b      	ldr	r3, [r3, #8]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d012      	beq.n	80051e4 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	689b      	ldr	r3, [r3, #8]
 80051c2:	68fa      	ldr	r2, [r7, #12]
 80051c4:	6812      	ldr	r2, [r2, #0]
 80051c6:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	f003 0303 	and.w	r3, r3, #3
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d006      	beq.n	80051e0 <do_memp_malloc_pool+0x38>
 80051d2:	4b07      	ldr	r3, [pc, #28]	; (80051f0 <do_memp_malloc_pool+0x48>)
 80051d4:	f44f 728c 	mov.w	r2, #280	; 0x118
 80051d8:	4906      	ldr	r1, [pc, #24]	; (80051f4 <do_memp_malloc_pool+0x4c>)
 80051da:	4807      	ldr	r0, [pc, #28]	; (80051f8 <do_memp_malloc_pool+0x50>)
 80051dc:	f00b faaa 	bl	8010734 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	e000      	b.n	80051e6 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 80051e4:	2300      	movs	r3, #0
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	3710      	adds	r7, #16
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}
 80051ee:	bf00      	nop
 80051f0:	08011a9c 	.word	0x08011a9c
 80051f4:	08011acc 	.word	0x08011acc
 80051f8:	08011af0 	.word	0x08011af0

080051fc <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b082      	sub	sp, #8
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d106      	bne.n	8005218 <memp_malloc_pool+0x1c>
 800520a:	4b0a      	ldr	r3, [pc, #40]	; (8005234 <memp_malloc_pool+0x38>)
 800520c:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8005210:	4909      	ldr	r1, [pc, #36]	; (8005238 <memp_malloc_pool+0x3c>)
 8005212:	480a      	ldr	r0, [pc, #40]	; (800523c <memp_malloc_pool+0x40>)
 8005214:	f00b fa8e 	bl	8010734 <iprintf>
  if (desc == NULL) {
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d101      	bne.n	8005222 <memp_malloc_pool+0x26>
    return NULL;
 800521e:	2300      	movs	r3, #0
 8005220:	e003      	b.n	800522a <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f7ff ffc0 	bl	80051a8 <do_memp_malloc_pool>
 8005228:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800522a:	4618      	mov	r0, r3
 800522c:	3708      	adds	r7, #8
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}
 8005232:	bf00      	nop
 8005234:	08011a9c 	.word	0x08011a9c
 8005238:	08011b18 	.word	0x08011b18
 800523c:	08011af0 	.word	0x08011af0

08005240 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b084      	sub	sp, #16
 8005244:	af00      	add	r7, sp, #0
 8005246:	4603      	mov	r3, r0
 8005248:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800524a:	79fb      	ldrb	r3, [r7, #7]
 800524c:	2b08      	cmp	r3, #8
 800524e:	d908      	bls.n	8005262 <memp_malloc+0x22>
 8005250:	4b0a      	ldr	r3, [pc, #40]	; (800527c <memp_malloc+0x3c>)
 8005252:	f240 1257 	movw	r2, #343	; 0x157
 8005256:	490a      	ldr	r1, [pc, #40]	; (8005280 <memp_malloc+0x40>)
 8005258:	480a      	ldr	r0, [pc, #40]	; (8005284 <memp_malloc+0x44>)
 800525a:	f00b fa6b 	bl	8010734 <iprintf>
 800525e:	2300      	movs	r3, #0
 8005260:	e008      	b.n	8005274 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8005262:	79fb      	ldrb	r3, [r7, #7]
 8005264:	4a08      	ldr	r2, [pc, #32]	; (8005288 <memp_malloc+0x48>)
 8005266:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800526a:	4618      	mov	r0, r3
 800526c:	f7ff ff9c 	bl	80051a8 <do_memp_malloc_pool>
 8005270:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8005272:	68fb      	ldr	r3, [r7, #12]
}
 8005274:	4618      	mov	r0, r3
 8005276:	3710      	adds	r7, #16
 8005278:	46bd      	mov	sp, r7
 800527a:	bd80      	pop	{r7, pc}
 800527c:	08011a9c 	.word	0x08011a9c
 8005280:	08011b2c 	.word	0x08011b2c
 8005284:	08011af0 	.word	0x08011af0
 8005288:	080145fc 	.word	0x080145fc

0800528c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b084      	sub	sp, #16
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
 8005294:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	f003 0303 	and.w	r3, r3, #3
 800529c:	2b00      	cmp	r3, #0
 800529e:	d006      	beq.n	80052ae <do_memp_free_pool+0x22>
 80052a0:	4b0a      	ldr	r3, [pc, #40]	; (80052cc <do_memp_free_pool+0x40>)
 80052a2:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 80052a6:	490a      	ldr	r1, [pc, #40]	; (80052d0 <do_memp_free_pool+0x44>)
 80052a8:	480a      	ldr	r0, [pc, #40]	; (80052d4 <do_memp_free_pool+0x48>)
 80052aa:	f00b fa43 	bl	8010734 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	689b      	ldr	r3, [r3, #8]
 80052b6:	681a      	ldr	r2, [r3, #0]
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	689b      	ldr	r3, [r3, #8]
 80052c0:	68fa      	ldr	r2, [r7, #12]
 80052c2:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 80052c4:	bf00      	nop
 80052c6:	3710      	adds	r7, #16
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bd80      	pop	{r7, pc}
 80052cc:	08011a9c 	.word	0x08011a9c
 80052d0:	08011b4c 	.word	0x08011b4c
 80052d4:	08011af0 	.word	0x08011af0

080052d8 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b082      	sub	sp, #8
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
 80052e0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d106      	bne.n	80052f6 <memp_free_pool+0x1e>
 80052e8:	4b0a      	ldr	r3, [pc, #40]	; (8005314 <memp_free_pool+0x3c>)
 80052ea:	f240 1295 	movw	r2, #405	; 0x195
 80052ee:	490a      	ldr	r1, [pc, #40]	; (8005318 <memp_free_pool+0x40>)
 80052f0:	480a      	ldr	r0, [pc, #40]	; (800531c <memp_free_pool+0x44>)
 80052f2:	f00b fa1f 	bl	8010734 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d007      	beq.n	800530c <memp_free_pool+0x34>
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d004      	beq.n	800530c <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8005302:	6839      	ldr	r1, [r7, #0]
 8005304:	6878      	ldr	r0, [r7, #4]
 8005306:	f7ff ffc1 	bl	800528c <do_memp_free_pool>
 800530a:	e000      	b.n	800530e <memp_free_pool+0x36>
    return;
 800530c:	bf00      	nop
}
 800530e:	3708      	adds	r7, #8
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}
 8005314:	08011a9c 	.word	0x08011a9c
 8005318:	08011b18 	.word	0x08011b18
 800531c:	08011af0 	.word	0x08011af0

08005320 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b082      	sub	sp, #8
 8005324:	af00      	add	r7, sp, #0
 8005326:	4603      	mov	r3, r0
 8005328:	6039      	str	r1, [r7, #0]
 800532a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800532c:	79fb      	ldrb	r3, [r7, #7]
 800532e:	2b08      	cmp	r3, #8
 8005330:	d907      	bls.n	8005342 <memp_free+0x22>
 8005332:	4b0c      	ldr	r3, [pc, #48]	; (8005364 <memp_free+0x44>)
 8005334:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8005338:	490b      	ldr	r1, [pc, #44]	; (8005368 <memp_free+0x48>)
 800533a:	480c      	ldr	r0, [pc, #48]	; (800536c <memp_free+0x4c>)
 800533c:	f00b f9fa 	bl	8010734 <iprintf>
 8005340:	e00c      	b.n	800535c <memp_free+0x3c>

  if (mem == NULL) {
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d008      	beq.n	800535a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8005348:	79fb      	ldrb	r3, [r7, #7]
 800534a:	4a09      	ldr	r2, [pc, #36]	; (8005370 <memp_free+0x50>)
 800534c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005350:	6839      	ldr	r1, [r7, #0]
 8005352:	4618      	mov	r0, r3
 8005354:	f7ff ff9a 	bl	800528c <do_memp_free_pool>
 8005358:	e000      	b.n	800535c <memp_free+0x3c>
    return;
 800535a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800535c:	3708      	adds	r7, #8
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}
 8005362:	bf00      	nop
 8005364:	08011a9c 	.word	0x08011a9c
 8005368:	08011b6c 	.word	0x08011b6c
 800536c:	08011af0 	.word	0x08011af0
 8005370:	080145fc 	.word	0x080145fc

08005374 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8005374:	b480      	push	{r7}
 8005376:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8005378:	bf00      	nop
 800537a:	46bd      	mov	sp, r7
 800537c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005380:	4770      	bx	lr
	...

08005384 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b086      	sub	sp, #24
 8005388:	af00      	add	r7, sp, #0
 800538a:	60f8      	str	r0, [r7, #12]
 800538c:	60b9      	str	r1, [r7, #8]
 800538e:	607a      	str	r2, [r7, #4]
 8005390:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d108      	bne.n	80053aa <netif_add+0x26>
 8005398:	4b5b      	ldr	r3, [pc, #364]	; (8005508 <netif_add+0x184>)
 800539a:	f240 1227 	movw	r2, #295	; 0x127
 800539e:	495b      	ldr	r1, [pc, #364]	; (800550c <netif_add+0x188>)
 80053a0:	485b      	ldr	r0, [pc, #364]	; (8005510 <netif_add+0x18c>)
 80053a2:	f00b f9c7 	bl	8010734 <iprintf>
 80053a6:	2300      	movs	r3, #0
 80053a8:	e0a9      	b.n	80054fe <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80053aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d108      	bne.n	80053c2 <netif_add+0x3e>
 80053b0:	4b55      	ldr	r3, [pc, #340]	; (8005508 <netif_add+0x184>)
 80053b2:	f44f 7294 	mov.w	r2, #296	; 0x128
 80053b6:	4957      	ldr	r1, [pc, #348]	; (8005514 <netif_add+0x190>)
 80053b8:	4855      	ldr	r0, [pc, #340]	; (8005510 <netif_add+0x18c>)
 80053ba:	f00b f9bb 	bl	8010734 <iprintf>
 80053be:	2300      	movs	r3, #0
 80053c0:	e09d      	b.n	80054fe <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d101      	bne.n	80053cc <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80053c8:	4b53      	ldr	r3, [pc, #332]	; (8005518 <netif_add+0x194>)
 80053ca:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d101      	bne.n	80053d6 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 80053d2:	4b51      	ldr	r3, [pc, #324]	; (8005518 <netif_add+0x194>)
 80053d4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d101      	bne.n	80053e0 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 80053dc:	4b4e      	ldr	r3, [pc, #312]	; (8005518 <netif_add+0x194>)
 80053de:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	2200      	movs	r2, #0
 80053e4:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	2200      	movs	r2, #0
 80053ea:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	2200      	movs	r2, #0
 80053f0:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	4a49      	ldr	r2, [pc, #292]	; (800551c <netif_add+0x198>)
 80053f6:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	2200      	movs	r2, #0
 80053fc:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	2200      	movs	r2, #0
 8005402:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	3324      	adds	r3, #36	; 0x24
 800540a:	2204      	movs	r2, #4
 800540c:	2100      	movs	r1, #0
 800540e:	4618      	mov	r0, r3
 8005410:	f00b f988 	bl	8010724 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	2200      	movs	r2, #0
 8005418:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	6a3a      	ldr	r2, [r7, #32]
 800541e:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8005420:	4b3f      	ldr	r3, [pc, #252]	; (8005520 <netif_add+0x19c>)
 8005422:	781a      	ldrb	r2, [r3, #0]
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800542e:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	687a      	ldr	r2, [r7, #4]
 8005434:	68b9      	ldr	r1, [r7, #8]
 8005436:	68f8      	ldr	r0, [r7, #12]
 8005438:	f000 f914 	bl	8005664 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800543c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800543e:	68f8      	ldr	r0, [r7, #12]
 8005440:	4798      	blx	r3
 8005442:	4603      	mov	r3, r0
 8005444:	2b00      	cmp	r3, #0
 8005446:	d001      	beq.n	800544c <netif_add+0xc8>
    return NULL;
 8005448:	2300      	movs	r3, #0
 800544a:	e058      	b.n	80054fe <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005452:	2bff      	cmp	r3, #255	; 0xff
 8005454:	d103      	bne.n	800545e <netif_add+0xda>
        netif->num = 0;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	2200      	movs	r2, #0
 800545a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 800545e:	2300      	movs	r3, #0
 8005460:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8005462:	4b30      	ldr	r3, [pc, #192]	; (8005524 <netif_add+0x1a0>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	617b      	str	r3, [r7, #20]
 8005468:	e02b      	b.n	80054c2 <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800546a:	697a      	ldr	r2, [r7, #20]
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	429a      	cmp	r2, r3
 8005470:	d106      	bne.n	8005480 <netif_add+0xfc>
 8005472:	4b25      	ldr	r3, [pc, #148]	; (8005508 <netif_add+0x184>)
 8005474:	f240 128b 	movw	r2, #395	; 0x18b
 8005478:	492b      	ldr	r1, [pc, #172]	; (8005528 <netif_add+0x1a4>)
 800547a:	4825      	ldr	r0, [pc, #148]	; (8005510 <netif_add+0x18c>)
 800547c:	f00b f95a 	bl	8010734 <iprintf>
        num_netifs++;
 8005480:	693b      	ldr	r3, [r7, #16]
 8005482:	3301      	adds	r3, #1
 8005484:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8005486:	693b      	ldr	r3, [r7, #16]
 8005488:	2bff      	cmp	r3, #255	; 0xff
 800548a:	dd06      	ble.n	800549a <netif_add+0x116>
 800548c:	4b1e      	ldr	r3, [pc, #120]	; (8005508 <netif_add+0x184>)
 800548e:	f240 128d 	movw	r2, #397	; 0x18d
 8005492:	4926      	ldr	r1, [pc, #152]	; (800552c <netif_add+0x1a8>)
 8005494:	481e      	ldr	r0, [pc, #120]	; (8005510 <netif_add+0x18c>)
 8005496:	f00b f94d 	bl	8010734 <iprintf>
        if (netif2->num == netif->num) {
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80054a6:	429a      	cmp	r2, r3
 80054a8:	d108      	bne.n	80054bc <netif_add+0x138>
          netif->num++;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80054b0:	3301      	adds	r3, #1
 80054b2:	b2da      	uxtb	r2, r3
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 80054ba:	e005      	b.n	80054c8 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80054bc:	697b      	ldr	r3, [r7, #20]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	617b      	str	r3, [r7, #20]
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d1d0      	bne.n	800546a <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 80054c8:	697b      	ldr	r3, [r7, #20]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d1be      	bne.n	800544c <netif_add+0xc8>
  }
  if (netif->num == 254) {
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80054d4:	2bfe      	cmp	r3, #254	; 0xfe
 80054d6:	d103      	bne.n	80054e0 <netif_add+0x15c>
    netif_num = 0;
 80054d8:	4b11      	ldr	r3, [pc, #68]	; (8005520 <netif_add+0x19c>)
 80054da:	2200      	movs	r2, #0
 80054dc:	701a      	strb	r2, [r3, #0]
 80054de:	e006      	b.n	80054ee <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80054e6:	3301      	adds	r3, #1
 80054e8:	b2da      	uxtb	r2, r3
 80054ea:	4b0d      	ldr	r3, [pc, #52]	; (8005520 <netif_add+0x19c>)
 80054ec:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 80054ee:	4b0d      	ldr	r3, [pc, #52]	; (8005524 <netif_add+0x1a0>)
 80054f0:	681a      	ldr	r2, [r3, #0]
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 80054f6:	4a0b      	ldr	r2, [pc, #44]	; (8005524 <netif_add+0x1a0>)
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 80054fc:	68fb      	ldr	r3, [r7, #12]
}
 80054fe:	4618      	mov	r0, r3
 8005500:	3718      	adds	r7, #24
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}
 8005506:	bf00      	nop
 8005508:	08011b88 	.word	0x08011b88
 800550c:	08011c1c 	.word	0x08011c1c
 8005510:	08011bd8 	.word	0x08011bd8
 8005514:	08011c38 	.word	0x08011c38
 8005518:	08014670 	.word	0x08014670
 800551c:	08005947 	.word	0x08005947
 8005520:	20007c50 	.word	0x20007c50
 8005524:	20007c48 	.word	0x20007c48
 8005528:	08011c5c 	.word	0x08011c5c
 800552c:	08011c70 	.word	0x08011c70

08005530 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b082      	sub	sp, #8
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
 8005538:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800553a:	6839      	ldr	r1, [r7, #0]
 800553c:	6878      	ldr	r0, [r7, #4]
 800553e:	f002 fb37 	bl	8007bb0 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8005542:	6839      	ldr	r1, [r7, #0]
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	f006 fedb 	bl	800c300 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800554a:	bf00      	nop
 800554c:	3708      	adds	r7, #8
 800554e:	46bd      	mov	sp, r7
 8005550:	bd80      	pop	{r7, pc}
	...

08005554 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b086      	sub	sp, #24
 8005558:	af00      	add	r7, sp, #0
 800555a:	60f8      	str	r0, [r7, #12]
 800555c:	60b9      	str	r1, [r7, #8]
 800555e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d106      	bne.n	8005574 <netif_do_set_ipaddr+0x20>
 8005566:	4b1d      	ldr	r3, [pc, #116]	; (80055dc <netif_do_set_ipaddr+0x88>)
 8005568:	f240 12cb 	movw	r2, #459	; 0x1cb
 800556c:	491c      	ldr	r1, [pc, #112]	; (80055e0 <netif_do_set_ipaddr+0x8c>)
 800556e:	481d      	ldr	r0, [pc, #116]	; (80055e4 <netif_do_set_ipaddr+0x90>)
 8005570:	f00b f8e0 	bl	8010734 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d106      	bne.n	8005588 <netif_do_set_ipaddr+0x34>
 800557a:	4b18      	ldr	r3, [pc, #96]	; (80055dc <netif_do_set_ipaddr+0x88>)
 800557c:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8005580:	4917      	ldr	r1, [pc, #92]	; (80055e0 <netif_do_set_ipaddr+0x8c>)
 8005582:	4818      	ldr	r0, [pc, #96]	; (80055e4 <netif_do_set_ipaddr+0x90>)
 8005584:	f00b f8d6 	bl	8010734 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	681a      	ldr	r2, [r3, #0]
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	3304      	adds	r3, #4
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	429a      	cmp	r2, r3
 8005594:	d01c      	beq.n	80055d0 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	3304      	adds	r3, #4
 80055a0:	681a      	ldr	r2, [r3, #0]
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 80055a6:	f107 0314 	add.w	r3, r7, #20
 80055aa:	4619      	mov	r1, r3
 80055ac:	6878      	ldr	r0, [r7, #4]
 80055ae:	f7ff ffbf 	bl	8005530 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d002      	beq.n	80055be <netif_do_set_ipaddr+0x6a>
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	e000      	b.n	80055c0 <netif_do_set_ipaddr+0x6c>
 80055be:	2300      	movs	r3, #0
 80055c0:	68fa      	ldr	r2, [r7, #12]
 80055c2:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80055c4:	2101      	movs	r1, #1
 80055c6:	68f8      	ldr	r0, [r7, #12]
 80055c8:	f000 f8d2 	bl	8005770 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 80055cc:	2301      	movs	r3, #1
 80055ce:	e000      	b.n	80055d2 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 80055d0:	2300      	movs	r3, #0
}
 80055d2:	4618      	mov	r0, r3
 80055d4:	3718      	adds	r7, #24
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd80      	pop	{r7, pc}
 80055da:	bf00      	nop
 80055dc:	08011b88 	.word	0x08011b88
 80055e0:	08011ca0 	.word	0x08011ca0
 80055e4:	08011bd8 	.word	0x08011bd8

080055e8 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b085      	sub	sp, #20
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	60f8      	str	r0, [r7, #12]
 80055f0:	60b9      	str	r1, [r7, #8]
 80055f2:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	681a      	ldr	r2, [r3, #0]
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	3308      	adds	r3, #8
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	429a      	cmp	r2, r3
 8005600:	d00a      	beq.n	8005618 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d002      	beq.n	800560e <netif_do_set_netmask+0x26>
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	e000      	b.n	8005610 <netif_do_set_netmask+0x28>
 800560e:	2300      	movs	r3, #0
 8005610:	68fa      	ldr	r2, [r7, #12]
 8005612:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8005614:	2301      	movs	r3, #1
 8005616:	e000      	b.n	800561a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8005618:	2300      	movs	r3, #0
}
 800561a:	4618      	mov	r0, r3
 800561c:	3714      	adds	r7, #20
 800561e:	46bd      	mov	sp, r7
 8005620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005624:	4770      	bx	lr

08005626 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8005626:	b480      	push	{r7}
 8005628:	b085      	sub	sp, #20
 800562a:	af00      	add	r7, sp, #0
 800562c:	60f8      	str	r0, [r7, #12]
 800562e:	60b9      	str	r1, [r7, #8]
 8005630:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	681a      	ldr	r2, [r3, #0]
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	330c      	adds	r3, #12
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	429a      	cmp	r2, r3
 800563e:	d00a      	beq.n	8005656 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d002      	beq.n	800564c <netif_do_set_gw+0x26>
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	e000      	b.n	800564e <netif_do_set_gw+0x28>
 800564c:	2300      	movs	r3, #0
 800564e:	68fa      	ldr	r2, [r7, #12]
 8005650:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8005652:	2301      	movs	r3, #1
 8005654:	e000      	b.n	8005658 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8005656:	2300      	movs	r3, #0
}
 8005658:	4618      	mov	r0, r3
 800565a:	3714      	adds	r7, #20
 800565c:	46bd      	mov	sp, r7
 800565e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005662:	4770      	bx	lr

08005664 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b088      	sub	sp, #32
 8005668:	af00      	add	r7, sp, #0
 800566a:	60f8      	str	r0, [r7, #12]
 800566c:	60b9      	str	r1, [r7, #8]
 800566e:	607a      	str	r2, [r7, #4]
 8005670:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8005672:	2300      	movs	r3, #0
 8005674:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8005676:	2300      	movs	r3, #0
 8005678:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d101      	bne.n	8005684 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8005680:	4b1c      	ldr	r3, [pc, #112]	; (80056f4 <netif_set_addr+0x90>)
 8005682:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d101      	bne.n	800568e <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800568a:	4b1a      	ldr	r3, [pc, #104]	; (80056f4 <netif_set_addr+0x90>)
 800568c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d101      	bne.n	8005698 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8005694:	4b17      	ldr	r3, [pc, #92]	; (80056f4 <netif_set_addr+0x90>)
 8005696:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d003      	beq.n	80056a6 <netif_set_addr+0x42>
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d101      	bne.n	80056aa <netif_set_addr+0x46>
 80056a6:	2301      	movs	r3, #1
 80056a8:	e000      	b.n	80056ac <netif_set_addr+0x48>
 80056aa:	2300      	movs	r3, #0
 80056ac:	617b      	str	r3, [r7, #20]
  if (remove) {
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d006      	beq.n	80056c2 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80056b4:	f107 0310 	add.w	r3, r7, #16
 80056b8:	461a      	mov	r2, r3
 80056ba:	68b9      	ldr	r1, [r7, #8]
 80056bc:	68f8      	ldr	r0, [r7, #12]
 80056be:	f7ff ff49 	bl	8005554 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 80056c2:	69fa      	ldr	r2, [r7, #28]
 80056c4:	6879      	ldr	r1, [r7, #4]
 80056c6:	68f8      	ldr	r0, [r7, #12]
 80056c8:	f7ff ff8e 	bl	80055e8 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 80056cc:	69ba      	ldr	r2, [r7, #24]
 80056ce:	6839      	ldr	r1, [r7, #0]
 80056d0:	68f8      	ldr	r0, [r7, #12]
 80056d2:	f7ff ffa8 	bl	8005626 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d106      	bne.n	80056ea <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80056dc:	f107 0310 	add.w	r3, r7, #16
 80056e0:	461a      	mov	r2, r3
 80056e2:	68b9      	ldr	r1, [r7, #8]
 80056e4:	68f8      	ldr	r0, [r7, #12]
 80056e6:	f7ff ff35 	bl	8005554 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 80056ea:	bf00      	nop
 80056ec:	3720      	adds	r7, #32
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}
 80056f2:	bf00      	nop
 80056f4:	08014670 	.word	0x08014670

080056f8 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 80056f8:	b480      	push	{r7}
 80056fa:	b083      	sub	sp, #12
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8005700:	4a04      	ldr	r2, [pc, #16]	; (8005714 <netif_set_default+0x1c>)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8005706:	bf00      	nop
 8005708:	370c      	adds	r7, #12
 800570a:	46bd      	mov	sp, r7
 800570c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005710:	4770      	bx	lr
 8005712:	bf00      	nop
 8005714:	20007c4c 	.word	0x20007c4c

08005718 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b082      	sub	sp, #8
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d107      	bne.n	8005736 <netif_set_up+0x1e>
 8005726:	4b0f      	ldr	r3, [pc, #60]	; (8005764 <netif_set_up+0x4c>)
 8005728:	f44f 7254 	mov.w	r2, #848	; 0x350
 800572c:	490e      	ldr	r1, [pc, #56]	; (8005768 <netif_set_up+0x50>)
 800572e:	480f      	ldr	r0, [pc, #60]	; (800576c <netif_set_up+0x54>)
 8005730:	f00b f800 	bl	8010734 <iprintf>
 8005734:	e013      	b.n	800575e <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800573c:	f003 0301 	and.w	r3, r3, #1
 8005740:	2b00      	cmp	r3, #0
 8005742:	d10c      	bne.n	800575e <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800574a:	f043 0301 	orr.w	r3, r3, #1
 800574e:	b2da      	uxtb	r2, r3
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8005756:	2103      	movs	r1, #3
 8005758:	6878      	ldr	r0, [r7, #4]
 800575a:	f000 f809 	bl	8005770 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800575e:	3708      	adds	r7, #8
 8005760:	46bd      	mov	sp, r7
 8005762:	bd80      	pop	{r7, pc}
 8005764:	08011b88 	.word	0x08011b88
 8005768:	08011d10 	.word	0x08011d10
 800576c:	08011bd8 	.word	0x08011bd8

08005770 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b082      	sub	sp, #8
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
 8005778:	460b      	mov	r3, r1
 800577a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d106      	bne.n	8005790 <netif_issue_reports+0x20>
 8005782:	4b18      	ldr	r3, [pc, #96]	; (80057e4 <netif_issue_reports+0x74>)
 8005784:	f240 326d 	movw	r2, #877	; 0x36d
 8005788:	4917      	ldr	r1, [pc, #92]	; (80057e8 <netif_issue_reports+0x78>)
 800578a:	4818      	ldr	r0, [pc, #96]	; (80057ec <netif_issue_reports+0x7c>)
 800578c:	f00a ffd2 	bl	8010734 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005796:	f003 0304 	and.w	r3, r3, #4
 800579a:	2b00      	cmp	r3, #0
 800579c:	d01e      	beq.n	80057dc <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80057a4:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d017      	beq.n	80057dc <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80057ac:	78fb      	ldrb	r3, [r7, #3]
 80057ae:	f003 0301 	and.w	r3, r3, #1
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d013      	beq.n	80057de <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	3304      	adds	r3, #4
 80057ba:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d00e      	beq.n	80057de <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80057c6:	f003 0308 	and.w	r3, r3, #8
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d007      	beq.n	80057de <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	3304      	adds	r3, #4
 80057d2:	4619      	mov	r1, r3
 80057d4:	6878      	ldr	r0, [r7, #4]
 80057d6:	f009 fb93 	bl	800ef00 <etharp_request>
 80057da:	e000      	b.n	80057de <netif_issue_reports+0x6e>
    return;
 80057dc:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 80057de:	3708      	adds	r7, #8
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bd80      	pop	{r7, pc}
 80057e4:	08011b88 	.word	0x08011b88
 80057e8:	08011d2c 	.word	0x08011d2c
 80057ec:	08011bd8 	.word	0x08011bd8

080057f0 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b082      	sub	sp, #8
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d107      	bne.n	800580e <netif_set_down+0x1e>
 80057fe:	4b12      	ldr	r3, [pc, #72]	; (8005848 <netif_set_down+0x58>)
 8005800:	f240 329b 	movw	r2, #923	; 0x39b
 8005804:	4911      	ldr	r1, [pc, #68]	; (800584c <netif_set_down+0x5c>)
 8005806:	4812      	ldr	r0, [pc, #72]	; (8005850 <netif_set_down+0x60>)
 8005808:	f00a ff94 	bl	8010734 <iprintf>
 800580c:	e019      	b.n	8005842 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005814:	f003 0301 	and.w	r3, r3, #1
 8005818:	2b00      	cmp	r3, #0
 800581a:	d012      	beq.n	8005842 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005822:	f023 0301 	bic.w	r3, r3, #1
 8005826:	b2da      	uxtb	r2, r3
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005834:	f003 0308 	and.w	r3, r3, #8
 8005838:	2b00      	cmp	r3, #0
 800583a:	d002      	beq.n	8005842 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800583c:	6878      	ldr	r0, [r7, #4]
 800583e:	f008 ff19 	bl	800e674 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8005842:	3708      	adds	r7, #8
 8005844:	46bd      	mov	sp, r7
 8005846:	bd80      	pop	{r7, pc}
 8005848:	08011b88 	.word	0x08011b88
 800584c:	08011d50 	.word	0x08011d50
 8005850:	08011bd8 	.word	0x08011bd8

08005854 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b082      	sub	sp, #8
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d107      	bne.n	8005872 <netif_set_link_up+0x1e>
 8005862:	4b15      	ldr	r3, [pc, #84]	; (80058b8 <netif_set_link_up+0x64>)
 8005864:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8005868:	4914      	ldr	r1, [pc, #80]	; (80058bc <netif_set_link_up+0x68>)
 800586a:	4815      	ldr	r0, [pc, #84]	; (80058c0 <netif_set_link_up+0x6c>)
 800586c:	f00a ff62 	bl	8010734 <iprintf>
 8005870:	e01e      	b.n	80058b0 <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005878:	f003 0304 	and.w	r3, r3, #4
 800587c:	2b00      	cmp	r3, #0
 800587e:	d117      	bne.n	80058b0 <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005886:	f043 0304 	orr.w	r3, r3, #4
 800588a:	b2da      	uxtb	r2, r3
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f007 f95e 	bl	800cb54 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8005898:	2103      	movs	r1, #3
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f7ff ff68 	bl	8005770 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	69db      	ldr	r3, [r3, #28]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d003      	beq.n	80058b0 <netif_set_link_up+0x5c>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	69db      	ldr	r3, [r3, #28]
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80058b0:	3708      	adds	r7, #8
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd80      	pop	{r7, pc}
 80058b6:	bf00      	nop
 80058b8:	08011b88 	.word	0x08011b88
 80058bc:	08011d70 	.word	0x08011d70
 80058c0:	08011bd8 	.word	0x08011bd8

080058c4 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b082      	sub	sp, #8
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d107      	bne.n	80058e2 <netif_set_link_down+0x1e>
 80058d2:	4b11      	ldr	r3, [pc, #68]	; (8005918 <netif_set_link_down+0x54>)
 80058d4:	f240 4206 	movw	r2, #1030	; 0x406
 80058d8:	4910      	ldr	r1, [pc, #64]	; (800591c <netif_set_link_down+0x58>)
 80058da:	4811      	ldr	r0, [pc, #68]	; (8005920 <netif_set_link_down+0x5c>)
 80058dc:	f00a ff2a 	bl	8010734 <iprintf>
 80058e0:	e017      	b.n	8005912 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80058e8:	f003 0304 	and.w	r3, r3, #4
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d010      	beq.n	8005912 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80058f6:	f023 0304 	bic.w	r3, r3, #4
 80058fa:	b2da      	uxtb	r2, r3
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	69db      	ldr	r3, [r3, #28]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d003      	beq.n	8005912 <netif_set_link_down+0x4e>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	69db      	ldr	r3, [r3, #28]
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8005912:	3708      	adds	r7, #8
 8005914:	46bd      	mov	sp, r7
 8005916:	bd80      	pop	{r7, pc}
 8005918:	08011b88 	.word	0x08011b88
 800591c:	08011d94 	.word	0x08011d94
 8005920:	08011bd8 	.word	0x08011bd8

08005924 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8005924:	b480      	push	{r7}
 8005926:	b083      	sub	sp, #12
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
 800592c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d002      	beq.n	800593a <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	683a      	ldr	r2, [r7, #0]
 8005938:	61da      	str	r2, [r3, #28]
  }
}
 800593a:	bf00      	nop
 800593c:	370c      	adds	r7, #12
 800593e:	46bd      	mov	sp, r7
 8005940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005944:	4770      	bx	lr

08005946 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8005946:	b480      	push	{r7}
 8005948:	b085      	sub	sp, #20
 800594a:	af00      	add	r7, sp, #0
 800594c:	60f8      	str	r0, [r7, #12]
 800594e:	60b9      	str	r1, [r7, #8]
 8005950:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8005952:	f06f 030b 	mvn.w	r3, #11
}
 8005956:	4618      	mov	r0, r3
 8005958:	3714      	adds	r7, #20
 800595a:	46bd      	mov	sp, r7
 800595c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005960:	4770      	bx	lr
	...

08005964 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8005964:	b480      	push	{r7}
 8005966:	b085      	sub	sp, #20
 8005968:	af00      	add	r7, sp, #0
 800596a:	4603      	mov	r3, r0
 800596c:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800596e:	79fb      	ldrb	r3, [r7, #7]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d013      	beq.n	800599c <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8005974:	4b0d      	ldr	r3, [pc, #52]	; (80059ac <netif_get_by_index+0x48>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	60fb      	str	r3, [r7, #12]
 800597a:	e00c      	b.n	8005996 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005982:	3301      	adds	r3, #1
 8005984:	b2db      	uxtb	r3, r3
 8005986:	79fa      	ldrb	r2, [r7, #7]
 8005988:	429a      	cmp	r2, r3
 800598a:	d101      	bne.n	8005990 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	e006      	b.n	800599e <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	60fb      	str	r3, [r7, #12]
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d1ef      	bne.n	800597c <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800599c:	2300      	movs	r3, #0
}
 800599e:	4618      	mov	r0, r3
 80059a0:	3714      	adds	r7, #20
 80059a2:	46bd      	mov	sp, r7
 80059a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a8:	4770      	bx	lr
 80059aa:	bf00      	nop
 80059ac:	20007c48 	.word	0x20007c48

080059b0 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 80059b0:	b480      	push	{r7}
 80059b2:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 80059b4:	4b03      	ldr	r3, [pc, #12]	; (80059c4 <pbuf_pool_is_empty+0x14>)
 80059b6:	2201      	movs	r2, #1
 80059b8:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 80059ba:	bf00      	nop
 80059bc:	46bd      	mov	sp, r7
 80059be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c2:	4770      	bx	lr
 80059c4:	20007c51 	.word	0x20007c51

080059c8 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b085      	sub	sp, #20
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	60f8      	str	r0, [r7, #12]
 80059d0:	60b9      	str	r1, [r7, #8]
 80059d2:	4611      	mov	r1, r2
 80059d4:	461a      	mov	r2, r3
 80059d6:	460b      	mov	r3, r1
 80059d8:	80fb      	strh	r3, [r7, #6]
 80059da:	4613      	mov	r3, r2
 80059dc:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	2200      	movs	r2, #0
 80059e2:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	68ba      	ldr	r2, [r7, #8]
 80059e8:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	88fa      	ldrh	r2, [r7, #6]
 80059ee:	811a      	strh	r2, [r3, #8]
  p->len = len;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	88ba      	ldrh	r2, [r7, #4]
 80059f4:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 80059f6:	8b3b      	ldrh	r3, [r7, #24]
 80059f8:	b2da      	uxtb	r2, r3
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	7f3a      	ldrb	r2, [r7, #28]
 8005a02:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	2201      	movs	r2, #1
 8005a08:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	73da      	strb	r2, [r3, #15]
}
 8005a10:	bf00      	nop
 8005a12:	3714      	adds	r7, #20
 8005a14:	46bd      	mov	sp, r7
 8005a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1a:	4770      	bx	lr

08005a1c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b08c      	sub	sp, #48	; 0x30
 8005a20:	af02      	add	r7, sp, #8
 8005a22:	4603      	mov	r3, r0
 8005a24:	71fb      	strb	r3, [r7, #7]
 8005a26:	460b      	mov	r3, r1
 8005a28:	80bb      	strh	r3, [r7, #4]
 8005a2a:	4613      	mov	r3, r2
 8005a2c:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8005a2e:	79fb      	ldrb	r3, [r7, #7]
 8005a30:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8005a32:	887b      	ldrh	r3, [r7, #2]
 8005a34:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8005a38:	d07f      	beq.n	8005b3a <pbuf_alloc+0x11e>
 8005a3a:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8005a3e:	f300 80c8 	bgt.w	8005bd2 <pbuf_alloc+0x1b6>
 8005a42:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8005a46:	d010      	beq.n	8005a6a <pbuf_alloc+0x4e>
 8005a48:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8005a4c:	f300 80c1 	bgt.w	8005bd2 <pbuf_alloc+0x1b6>
 8005a50:	2b01      	cmp	r3, #1
 8005a52:	d002      	beq.n	8005a5a <pbuf_alloc+0x3e>
 8005a54:	2b41      	cmp	r3, #65	; 0x41
 8005a56:	f040 80bc 	bne.w	8005bd2 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8005a5a:	887a      	ldrh	r2, [r7, #2]
 8005a5c:	88bb      	ldrh	r3, [r7, #4]
 8005a5e:	4619      	mov	r1, r3
 8005a60:	2000      	movs	r0, #0
 8005a62:	f000 f8d1 	bl	8005c08 <pbuf_alloc_reference>
 8005a66:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8005a68:	e0bd      	b.n	8005be6 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8005a72:	88bb      	ldrh	r3, [r7, #4]
 8005a74:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8005a76:	2008      	movs	r0, #8
 8005a78:	f7ff fbe2 	bl	8005240 <memp_malloc>
 8005a7c:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d109      	bne.n	8005a98 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8005a84:	f7ff ff94 	bl	80059b0 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8005a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d002      	beq.n	8005a94 <pbuf_alloc+0x78>
            pbuf_free(p);
 8005a8e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005a90:	f000 faa8 	bl	8005fe4 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8005a94:	2300      	movs	r3, #0
 8005a96:	e0a7      	b.n	8005be8 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8005a98:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005a9a:	3303      	adds	r3, #3
 8005a9c:	b29b      	uxth	r3, r3
 8005a9e:	f023 0303 	bic.w	r3, r3, #3
 8005aa2:	b29b      	uxth	r3, r3
 8005aa4:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8005aa8:	b29b      	uxth	r3, r3
 8005aaa:	8b7a      	ldrh	r2, [r7, #26]
 8005aac:	4293      	cmp	r3, r2
 8005aae:	bf28      	it	cs
 8005ab0:	4613      	movcs	r3, r2
 8005ab2:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8005ab4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005ab6:	3310      	adds	r3, #16
 8005ab8:	693a      	ldr	r2, [r7, #16]
 8005aba:	4413      	add	r3, r2
 8005abc:	3303      	adds	r3, #3
 8005abe:	f023 0303 	bic.w	r3, r3, #3
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	89f9      	ldrh	r1, [r7, #14]
 8005ac6:	8b7a      	ldrh	r2, [r7, #26]
 8005ac8:	2300      	movs	r3, #0
 8005aca:	9301      	str	r3, [sp, #4]
 8005acc:	887b      	ldrh	r3, [r7, #2]
 8005ace:	9300      	str	r3, [sp, #0]
 8005ad0:	460b      	mov	r3, r1
 8005ad2:	4601      	mov	r1, r0
 8005ad4:	6938      	ldr	r0, [r7, #16]
 8005ad6:	f7ff ff77 	bl	80059c8 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8005ada:	693b      	ldr	r3, [r7, #16]
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	f003 0303 	and.w	r3, r3, #3
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d006      	beq.n	8005af4 <pbuf_alloc+0xd8>
 8005ae6:	4b42      	ldr	r3, [pc, #264]	; (8005bf0 <pbuf_alloc+0x1d4>)
 8005ae8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005aec:	4941      	ldr	r1, [pc, #260]	; (8005bf4 <pbuf_alloc+0x1d8>)
 8005aee:	4842      	ldr	r0, [pc, #264]	; (8005bf8 <pbuf_alloc+0x1dc>)
 8005af0:	f00a fe20 	bl	8010734 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8005af4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005af6:	3303      	adds	r3, #3
 8005af8:	f023 0303 	bic.w	r3, r3, #3
 8005afc:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8005b00:	d106      	bne.n	8005b10 <pbuf_alloc+0xf4>
 8005b02:	4b3b      	ldr	r3, [pc, #236]	; (8005bf0 <pbuf_alloc+0x1d4>)
 8005b04:	f44f 7281 	mov.w	r2, #258	; 0x102
 8005b08:	493c      	ldr	r1, [pc, #240]	; (8005bfc <pbuf_alloc+0x1e0>)
 8005b0a:	483b      	ldr	r0, [pc, #236]	; (8005bf8 <pbuf_alloc+0x1dc>)
 8005b0c:	f00a fe12 	bl	8010734 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8005b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d102      	bne.n	8005b1c <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	627b      	str	r3, [r7, #36]	; 0x24
 8005b1a:	e002      	b.n	8005b22 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8005b1c:	69fb      	ldr	r3, [r7, #28]
 8005b1e:	693a      	ldr	r2, [r7, #16]
 8005b20:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8005b26:	8b7a      	ldrh	r2, [r7, #26]
 8005b28:	89fb      	ldrh	r3, [r7, #14]
 8005b2a:	1ad3      	subs	r3, r2, r3
 8005b2c:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8005b2e:	2300      	movs	r3, #0
 8005b30:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8005b32:	8b7b      	ldrh	r3, [r7, #26]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d19e      	bne.n	8005a76 <pbuf_alloc+0x5a>
      break;
 8005b38:	e055      	b.n	8005be6 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8005b3a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005b3c:	3303      	adds	r3, #3
 8005b3e:	b29b      	uxth	r3, r3
 8005b40:	f023 0303 	bic.w	r3, r3, #3
 8005b44:	b29a      	uxth	r2, r3
 8005b46:	88bb      	ldrh	r3, [r7, #4]
 8005b48:	3303      	adds	r3, #3
 8005b4a:	b29b      	uxth	r3, r3
 8005b4c:	f023 0303 	bic.w	r3, r3, #3
 8005b50:	b29b      	uxth	r3, r3
 8005b52:	4413      	add	r3, r2
 8005b54:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8005b56:	8b3b      	ldrh	r3, [r7, #24]
 8005b58:	3310      	adds	r3, #16
 8005b5a:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8005b5c:	8b3a      	ldrh	r2, [r7, #24]
 8005b5e:	88bb      	ldrh	r3, [r7, #4]
 8005b60:	3303      	adds	r3, #3
 8005b62:	f023 0303 	bic.w	r3, r3, #3
 8005b66:	429a      	cmp	r2, r3
 8005b68:	d306      	bcc.n	8005b78 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8005b6a:	8afa      	ldrh	r2, [r7, #22]
 8005b6c:	88bb      	ldrh	r3, [r7, #4]
 8005b6e:	3303      	adds	r3, #3
 8005b70:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8005b74:	429a      	cmp	r2, r3
 8005b76:	d201      	bcs.n	8005b7c <pbuf_alloc+0x160>
        return NULL;
 8005b78:	2300      	movs	r3, #0
 8005b7a:	e035      	b.n	8005be8 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8005b7c:	8afb      	ldrh	r3, [r7, #22]
 8005b7e:	4618      	mov	r0, r3
 8005b80:	f7ff f9ce 	bl	8004f20 <mem_malloc>
 8005b84:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8005b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d101      	bne.n	8005b90 <pbuf_alloc+0x174>
        return NULL;
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	e02b      	b.n	8005be8 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8005b90:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005b92:	3310      	adds	r3, #16
 8005b94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b96:	4413      	add	r3, r2
 8005b98:	3303      	adds	r3, #3
 8005b9a:	f023 0303 	bic.w	r3, r3, #3
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	88b9      	ldrh	r1, [r7, #4]
 8005ba2:	88ba      	ldrh	r2, [r7, #4]
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	9301      	str	r3, [sp, #4]
 8005ba8:	887b      	ldrh	r3, [r7, #2]
 8005baa:	9300      	str	r3, [sp, #0]
 8005bac:	460b      	mov	r3, r1
 8005bae:	4601      	mov	r1, r0
 8005bb0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005bb2:	f7ff ff09 	bl	80059c8 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8005bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	f003 0303 	and.w	r3, r3, #3
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d010      	beq.n	8005be4 <pbuf_alloc+0x1c8>
 8005bc2:	4b0b      	ldr	r3, [pc, #44]	; (8005bf0 <pbuf_alloc+0x1d4>)
 8005bc4:	f44f 7291 	mov.w	r2, #290	; 0x122
 8005bc8:	490d      	ldr	r1, [pc, #52]	; (8005c00 <pbuf_alloc+0x1e4>)
 8005bca:	480b      	ldr	r0, [pc, #44]	; (8005bf8 <pbuf_alloc+0x1dc>)
 8005bcc:	f00a fdb2 	bl	8010734 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8005bd0:	e008      	b.n	8005be4 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8005bd2:	4b07      	ldr	r3, [pc, #28]	; (8005bf0 <pbuf_alloc+0x1d4>)
 8005bd4:	f240 1227 	movw	r2, #295	; 0x127
 8005bd8:	490a      	ldr	r1, [pc, #40]	; (8005c04 <pbuf_alloc+0x1e8>)
 8005bda:	4807      	ldr	r0, [pc, #28]	; (8005bf8 <pbuf_alloc+0x1dc>)
 8005bdc:	f00a fdaa 	bl	8010734 <iprintf>
      return NULL;
 8005be0:	2300      	movs	r3, #0
 8005be2:	e001      	b.n	8005be8 <pbuf_alloc+0x1cc>
      break;
 8005be4:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8005be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	3728      	adds	r7, #40	; 0x28
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bd80      	pop	{r7, pc}
 8005bf0:	08011db8 	.word	0x08011db8
 8005bf4:	08011de8 	.word	0x08011de8
 8005bf8:	08011e18 	.word	0x08011e18
 8005bfc:	08011e40 	.word	0x08011e40
 8005c00:	08011e74 	.word	0x08011e74
 8005c04:	08011ea0 	.word	0x08011ea0

08005c08 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b086      	sub	sp, #24
 8005c0c:	af02      	add	r7, sp, #8
 8005c0e:	6078      	str	r0, [r7, #4]
 8005c10:	460b      	mov	r3, r1
 8005c12:	807b      	strh	r3, [r7, #2]
 8005c14:	4613      	mov	r3, r2
 8005c16:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8005c18:	883b      	ldrh	r3, [r7, #0]
 8005c1a:	2b41      	cmp	r3, #65	; 0x41
 8005c1c:	d009      	beq.n	8005c32 <pbuf_alloc_reference+0x2a>
 8005c1e:	883b      	ldrh	r3, [r7, #0]
 8005c20:	2b01      	cmp	r3, #1
 8005c22:	d006      	beq.n	8005c32 <pbuf_alloc_reference+0x2a>
 8005c24:	4b0f      	ldr	r3, [pc, #60]	; (8005c64 <pbuf_alloc_reference+0x5c>)
 8005c26:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8005c2a:	490f      	ldr	r1, [pc, #60]	; (8005c68 <pbuf_alloc_reference+0x60>)
 8005c2c:	480f      	ldr	r0, [pc, #60]	; (8005c6c <pbuf_alloc_reference+0x64>)
 8005c2e:	f00a fd81 	bl	8010734 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8005c32:	2007      	movs	r0, #7
 8005c34:	f7ff fb04 	bl	8005240 <memp_malloc>
 8005c38:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d101      	bne.n	8005c44 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8005c40:	2300      	movs	r3, #0
 8005c42:	e00b      	b.n	8005c5c <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8005c44:	8879      	ldrh	r1, [r7, #2]
 8005c46:	887a      	ldrh	r2, [r7, #2]
 8005c48:	2300      	movs	r3, #0
 8005c4a:	9301      	str	r3, [sp, #4]
 8005c4c:	883b      	ldrh	r3, [r7, #0]
 8005c4e:	9300      	str	r3, [sp, #0]
 8005c50:	460b      	mov	r3, r1
 8005c52:	6879      	ldr	r1, [r7, #4]
 8005c54:	68f8      	ldr	r0, [r7, #12]
 8005c56:	f7ff feb7 	bl	80059c8 <pbuf_init_alloced_pbuf>
  return p;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
}
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	3710      	adds	r7, #16
 8005c60:	46bd      	mov	sp, r7
 8005c62:	bd80      	pop	{r7, pc}
 8005c64:	08011db8 	.word	0x08011db8
 8005c68:	08011ebc 	.word	0x08011ebc
 8005c6c:	08011e18 	.word	0x08011e18

08005c70 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b088      	sub	sp, #32
 8005c74:	af02      	add	r7, sp, #8
 8005c76:	607b      	str	r3, [r7, #4]
 8005c78:	4603      	mov	r3, r0
 8005c7a:	73fb      	strb	r3, [r7, #15]
 8005c7c:	460b      	mov	r3, r1
 8005c7e:	81bb      	strh	r3, [r7, #12]
 8005c80:	4613      	mov	r3, r2
 8005c82:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8005c84:	7bfb      	ldrb	r3, [r7, #15]
 8005c86:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8005c88:	8a7b      	ldrh	r3, [r7, #18]
 8005c8a:	3303      	adds	r3, #3
 8005c8c:	f023 0203 	bic.w	r2, r3, #3
 8005c90:	89bb      	ldrh	r3, [r7, #12]
 8005c92:	441a      	add	r2, r3
 8005c94:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005c96:	429a      	cmp	r2, r3
 8005c98:	d901      	bls.n	8005c9e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	e018      	b.n	8005cd0 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8005c9e:	6a3b      	ldr	r3, [r7, #32]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d007      	beq.n	8005cb4 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8005ca4:	8a7b      	ldrh	r3, [r7, #18]
 8005ca6:	3303      	adds	r3, #3
 8005ca8:	f023 0303 	bic.w	r3, r3, #3
 8005cac:	6a3a      	ldr	r2, [r7, #32]
 8005cae:	4413      	add	r3, r2
 8005cb0:	617b      	str	r3, [r7, #20]
 8005cb2:	e001      	b.n	8005cb8 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	89b9      	ldrh	r1, [r7, #12]
 8005cbc:	89ba      	ldrh	r2, [r7, #12]
 8005cbe:	2302      	movs	r3, #2
 8005cc0:	9301      	str	r3, [sp, #4]
 8005cc2:	897b      	ldrh	r3, [r7, #10]
 8005cc4:	9300      	str	r3, [sp, #0]
 8005cc6:	460b      	mov	r3, r1
 8005cc8:	6979      	ldr	r1, [r7, #20]
 8005cca:	f7ff fe7d 	bl	80059c8 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8005cce:	687b      	ldr	r3, [r7, #4]
}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	3718      	adds	r7, #24
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	bd80      	pop	{r7, pc}

08005cd8 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b084      	sub	sp, #16
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
 8005ce0:	460b      	mov	r3, r1
 8005ce2:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d106      	bne.n	8005cf8 <pbuf_realloc+0x20>
 8005cea:	4b3a      	ldr	r3, [pc, #232]	; (8005dd4 <pbuf_realloc+0xfc>)
 8005cec:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8005cf0:	4939      	ldr	r1, [pc, #228]	; (8005dd8 <pbuf_realloc+0x100>)
 8005cf2:	483a      	ldr	r0, [pc, #232]	; (8005ddc <pbuf_realloc+0x104>)
 8005cf4:	f00a fd1e 	bl	8010734 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	891b      	ldrh	r3, [r3, #8]
 8005cfc:	887a      	ldrh	r2, [r7, #2]
 8005cfe:	429a      	cmp	r2, r3
 8005d00:	d263      	bcs.n	8005dca <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	891a      	ldrh	r2, [r3, #8]
 8005d06:	887b      	ldrh	r3, [r7, #2]
 8005d08:	1ad3      	subs	r3, r2, r3
 8005d0a:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8005d0c:	887b      	ldrh	r3, [r7, #2]
 8005d0e:	817b      	strh	r3, [r7, #10]
  q = p;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8005d14:	e018      	b.n	8005d48 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	895b      	ldrh	r3, [r3, #10]
 8005d1a:	897a      	ldrh	r2, [r7, #10]
 8005d1c:	1ad3      	subs	r3, r2, r3
 8005d1e:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	891a      	ldrh	r2, [r3, #8]
 8005d24:	893b      	ldrh	r3, [r7, #8]
 8005d26:	1ad3      	subs	r3, r2, r3
 8005d28:	b29a      	uxth	r2, r3
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d106      	bne.n	8005d48 <pbuf_realloc+0x70>
 8005d3a:	4b26      	ldr	r3, [pc, #152]	; (8005dd4 <pbuf_realloc+0xfc>)
 8005d3c:	f240 12af 	movw	r2, #431	; 0x1af
 8005d40:	4927      	ldr	r1, [pc, #156]	; (8005de0 <pbuf_realloc+0x108>)
 8005d42:	4826      	ldr	r0, [pc, #152]	; (8005ddc <pbuf_realloc+0x104>)
 8005d44:	f00a fcf6 	bl	8010734 <iprintf>
  while (rem_len > q->len) {
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	895b      	ldrh	r3, [r3, #10]
 8005d4c:	897a      	ldrh	r2, [r7, #10]
 8005d4e:	429a      	cmp	r2, r3
 8005d50:	d8e1      	bhi.n	8005d16 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	7b1b      	ldrb	r3, [r3, #12]
 8005d56:	f003 030f 	and.w	r3, r3, #15
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d121      	bne.n	8005da2 <pbuf_realloc+0xca>
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	895b      	ldrh	r3, [r3, #10]
 8005d62:	897a      	ldrh	r2, [r7, #10]
 8005d64:	429a      	cmp	r2, r3
 8005d66:	d01c      	beq.n	8005da2 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	7b5b      	ldrb	r3, [r3, #13]
 8005d6c:	f003 0302 	and.w	r3, r3, #2
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d116      	bne.n	8005da2 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	685a      	ldr	r2, [r3, #4]
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	1ad3      	subs	r3, r2, r3
 8005d7c:	b29a      	uxth	r2, r3
 8005d7e:	897b      	ldrh	r3, [r7, #10]
 8005d80:	4413      	add	r3, r2
 8005d82:	b29b      	uxth	r3, r3
 8005d84:	4619      	mov	r1, r3
 8005d86:	68f8      	ldr	r0, [r7, #12]
 8005d88:	f7fe ffce 	bl	8004d28 <mem_trim>
 8005d8c:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d106      	bne.n	8005da2 <pbuf_realloc+0xca>
 8005d94:	4b0f      	ldr	r3, [pc, #60]	; (8005dd4 <pbuf_realloc+0xfc>)
 8005d96:	f240 12bd 	movw	r2, #445	; 0x1bd
 8005d9a:	4912      	ldr	r1, [pc, #72]	; (8005de4 <pbuf_realloc+0x10c>)
 8005d9c:	480f      	ldr	r0, [pc, #60]	; (8005ddc <pbuf_realloc+0x104>)
 8005d9e:	f00a fcc9 	bl	8010734 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	897a      	ldrh	r2, [r7, #10]
 8005da6:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	895a      	ldrh	r2, [r3, #10]
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d004      	beq.n	8005dc2 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	f000 f911 	bl	8005fe4 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	601a      	str	r2, [r3, #0]
 8005dc8:	e000      	b.n	8005dcc <pbuf_realloc+0xf4>
    return;
 8005dca:	bf00      	nop

}
 8005dcc:	3710      	adds	r7, #16
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd80      	pop	{r7, pc}
 8005dd2:	bf00      	nop
 8005dd4:	08011db8 	.word	0x08011db8
 8005dd8:	08011ed0 	.word	0x08011ed0
 8005ddc:	08011e18 	.word	0x08011e18
 8005de0:	08011ee8 	.word	0x08011ee8
 8005de4:	08011f00 	.word	0x08011f00

08005de8 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b086      	sub	sp, #24
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	60f8      	str	r0, [r7, #12]
 8005df0:	60b9      	str	r1, [r7, #8]
 8005df2:	4613      	mov	r3, r2
 8005df4:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d106      	bne.n	8005e0a <pbuf_add_header_impl+0x22>
 8005dfc:	4b2b      	ldr	r3, [pc, #172]	; (8005eac <pbuf_add_header_impl+0xc4>)
 8005dfe:	f240 12df 	movw	r2, #479	; 0x1df
 8005e02:	492b      	ldr	r1, [pc, #172]	; (8005eb0 <pbuf_add_header_impl+0xc8>)
 8005e04:	482b      	ldr	r0, [pc, #172]	; (8005eb4 <pbuf_add_header_impl+0xcc>)
 8005e06:	f00a fc95 	bl	8010734 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d003      	beq.n	8005e18 <pbuf_add_header_impl+0x30>
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e16:	d301      	bcc.n	8005e1c <pbuf_add_header_impl+0x34>
    return 1;
 8005e18:	2301      	movs	r3, #1
 8005e1a:	e043      	b.n	8005ea4 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d101      	bne.n	8005e26 <pbuf_add_header_impl+0x3e>
    return 0;
 8005e22:	2300      	movs	r3, #0
 8005e24:	e03e      	b.n	8005ea4 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	891a      	ldrh	r2, [r3, #8]
 8005e2e:	8a7b      	ldrh	r3, [r7, #18]
 8005e30:	4413      	add	r3, r2
 8005e32:	b29b      	uxth	r3, r3
 8005e34:	8a7a      	ldrh	r2, [r7, #18]
 8005e36:	429a      	cmp	r2, r3
 8005e38:	d901      	bls.n	8005e3e <pbuf_add_header_impl+0x56>
    return 1;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	e032      	b.n	8005ea4 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	7b1b      	ldrb	r3, [r3, #12]
 8005e42:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8005e44:	8a3b      	ldrh	r3, [r7, #16]
 8005e46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d00c      	beq.n	8005e68 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	685a      	ldr	r2, [r3, #4]
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	425b      	negs	r3, r3
 8005e56:	4413      	add	r3, r2
 8005e58:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	3310      	adds	r3, #16
 8005e5e:	697a      	ldr	r2, [r7, #20]
 8005e60:	429a      	cmp	r2, r3
 8005e62:	d20d      	bcs.n	8005e80 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8005e64:	2301      	movs	r3, #1
 8005e66:	e01d      	b.n	8005ea4 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8005e68:	79fb      	ldrb	r3, [r7, #7]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d006      	beq.n	8005e7c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	685a      	ldr	r2, [r3, #4]
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	425b      	negs	r3, r3
 8005e76:	4413      	add	r3, r2
 8005e78:	617b      	str	r3, [r7, #20]
 8005e7a:	e001      	b.n	8005e80 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	e011      	b.n	8005ea4 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	697a      	ldr	r2, [r7, #20]
 8005e84:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	895a      	ldrh	r2, [r3, #10]
 8005e8a:	8a7b      	ldrh	r3, [r7, #18]
 8005e8c:	4413      	add	r3, r2
 8005e8e:	b29a      	uxth	r2, r3
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	891a      	ldrh	r2, [r3, #8]
 8005e98:	8a7b      	ldrh	r3, [r7, #18]
 8005e9a:	4413      	add	r3, r2
 8005e9c:	b29a      	uxth	r2, r3
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	811a      	strh	r2, [r3, #8]


  return 0;
 8005ea2:	2300      	movs	r3, #0
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	3718      	adds	r7, #24
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bd80      	pop	{r7, pc}
 8005eac:	08011db8 	.word	0x08011db8
 8005eb0:	08011f1c 	.word	0x08011f1c
 8005eb4:	08011e18 	.word	0x08011e18

08005eb8 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b082      	sub	sp, #8
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
 8005ec0:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	6839      	ldr	r1, [r7, #0]
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	f7ff ff8e 	bl	8005de8 <pbuf_add_header_impl>
 8005ecc:	4603      	mov	r3, r0
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	3708      	adds	r7, #8
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}
	...

08005ed8 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b084      	sub	sp, #16
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
 8005ee0:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d106      	bne.n	8005ef6 <pbuf_remove_header+0x1e>
 8005ee8:	4b20      	ldr	r3, [pc, #128]	; (8005f6c <pbuf_remove_header+0x94>)
 8005eea:	f240 224b 	movw	r2, #587	; 0x24b
 8005eee:	4920      	ldr	r1, [pc, #128]	; (8005f70 <pbuf_remove_header+0x98>)
 8005ef0:	4820      	ldr	r0, [pc, #128]	; (8005f74 <pbuf_remove_header+0x9c>)
 8005ef2:	f00a fc1f 	bl	8010734 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d003      	beq.n	8005f04 <pbuf_remove_header+0x2c>
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f02:	d301      	bcc.n	8005f08 <pbuf_remove_header+0x30>
    return 1;
 8005f04:	2301      	movs	r3, #1
 8005f06:	e02c      	b.n	8005f62 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d101      	bne.n	8005f12 <pbuf_remove_header+0x3a>
    return 0;
 8005f0e:	2300      	movs	r3, #0
 8005f10:	e027      	b.n	8005f62 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	895b      	ldrh	r3, [r3, #10]
 8005f1a:	89fa      	ldrh	r2, [r7, #14]
 8005f1c:	429a      	cmp	r2, r3
 8005f1e:	d908      	bls.n	8005f32 <pbuf_remove_header+0x5a>
 8005f20:	4b12      	ldr	r3, [pc, #72]	; (8005f6c <pbuf_remove_header+0x94>)
 8005f22:	f240 2255 	movw	r2, #597	; 0x255
 8005f26:	4914      	ldr	r1, [pc, #80]	; (8005f78 <pbuf_remove_header+0xa0>)
 8005f28:	4812      	ldr	r0, [pc, #72]	; (8005f74 <pbuf_remove_header+0x9c>)
 8005f2a:	f00a fc03 	bl	8010734 <iprintf>
 8005f2e:	2301      	movs	r3, #1
 8005f30:	e017      	b.n	8005f62 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	685b      	ldr	r3, [r3, #4]
 8005f36:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	685a      	ldr	r2, [r3, #4]
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	441a      	add	r2, r3
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	895a      	ldrh	r2, [r3, #10]
 8005f48:	89fb      	ldrh	r3, [r7, #14]
 8005f4a:	1ad3      	subs	r3, r2, r3
 8005f4c:	b29a      	uxth	r2, r3
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	891a      	ldrh	r2, [r3, #8]
 8005f56:	89fb      	ldrh	r3, [r7, #14]
 8005f58:	1ad3      	subs	r3, r2, r3
 8005f5a:	b29a      	uxth	r2, r3
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8005f60:	2300      	movs	r3, #0
}
 8005f62:	4618      	mov	r0, r3
 8005f64:	3710      	adds	r7, #16
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bd80      	pop	{r7, pc}
 8005f6a:	bf00      	nop
 8005f6c:	08011db8 	.word	0x08011db8
 8005f70:	08011f1c 	.word	0x08011f1c
 8005f74:	08011e18 	.word	0x08011e18
 8005f78:	08011f28 	.word	0x08011f28

08005f7c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b082      	sub	sp, #8
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
 8005f84:	460b      	mov	r3, r1
 8005f86:	807b      	strh	r3, [r7, #2]
 8005f88:	4613      	mov	r3, r2
 8005f8a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8005f8c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	da08      	bge.n	8005fa6 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8005f94:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005f98:	425b      	negs	r3, r3
 8005f9a:	4619      	mov	r1, r3
 8005f9c:	6878      	ldr	r0, [r7, #4]
 8005f9e:	f7ff ff9b 	bl	8005ed8 <pbuf_remove_header>
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	e007      	b.n	8005fb6 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8005fa6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005faa:	787a      	ldrb	r2, [r7, #1]
 8005fac:	4619      	mov	r1, r3
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f7ff ff1a 	bl	8005de8 <pbuf_add_header_impl>
 8005fb4:	4603      	mov	r3, r0
  }
}
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	3708      	adds	r7, #8
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	bd80      	pop	{r7, pc}

08005fbe <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8005fbe:	b580      	push	{r7, lr}
 8005fc0:	b082      	sub	sp, #8
 8005fc2:	af00      	add	r7, sp, #0
 8005fc4:	6078      	str	r0, [r7, #4]
 8005fc6:	460b      	mov	r3, r1
 8005fc8:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8005fca:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005fce:	2201      	movs	r2, #1
 8005fd0:	4619      	mov	r1, r3
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f7ff ffd2 	bl	8005f7c <pbuf_header_impl>
 8005fd8:	4603      	mov	r3, r0
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	3708      	adds	r7, #8
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}
	...

08005fe4 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b086      	sub	sp, #24
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d10b      	bne.n	800600a <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d106      	bne.n	8006006 <pbuf_free+0x22>
 8005ff8:	4b38      	ldr	r3, [pc, #224]	; (80060dc <pbuf_free+0xf8>)
 8005ffa:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8005ffe:	4938      	ldr	r1, [pc, #224]	; (80060e0 <pbuf_free+0xfc>)
 8006000:	4838      	ldr	r0, [pc, #224]	; (80060e4 <pbuf_free+0x100>)
 8006002:	f00a fb97 	bl	8010734 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8006006:	2300      	movs	r3, #0
 8006008:	e063      	b.n	80060d2 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800600a:	2300      	movs	r3, #0
 800600c:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800600e:	e05c      	b.n	80060ca <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	7b9b      	ldrb	r3, [r3, #14]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d106      	bne.n	8006026 <pbuf_free+0x42>
 8006018:	4b30      	ldr	r3, [pc, #192]	; (80060dc <pbuf_free+0xf8>)
 800601a:	f240 22f1 	movw	r2, #753	; 0x2f1
 800601e:	4932      	ldr	r1, [pc, #200]	; (80060e8 <pbuf_free+0x104>)
 8006020:	4830      	ldr	r0, [pc, #192]	; (80060e4 <pbuf_free+0x100>)
 8006022:	f00a fb87 	bl	8010734 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	7b9b      	ldrb	r3, [r3, #14]
 800602a:	3b01      	subs	r3, #1
 800602c:	b2da      	uxtb	r2, r3
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	739a      	strb	r2, [r3, #14]
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	7b9b      	ldrb	r3, [r3, #14]
 8006036:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8006038:	7dbb      	ldrb	r3, [r7, #22]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d143      	bne.n	80060c6 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	7b1b      	ldrb	r3, [r3, #12]
 8006048:	f003 030f 	and.w	r3, r3, #15
 800604c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	7b5b      	ldrb	r3, [r3, #13]
 8006052:	f003 0302 	and.w	r3, r3, #2
 8006056:	2b00      	cmp	r3, #0
 8006058:	d011      	beq.n	800607e <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	691b      	ldr	r3, [r3, #16]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d106      	bne.n	8006074 <pbuf_free+0x90>
 8006066:	4b1d      	ldr	r3, [pc, #116]	; (80060dc <pbuf_free+0xf8>)
 8006068:	f240 22ff 	movw	r2, #767	; 0x2ff
 800606c:	491f      	ldr	r1, [pc, #124]	; (80060ec <pbuf_free+0x108>)
 800606e:	481d      	ldr	r0, [pc, #116]	; (80060e4 <pbuf_free+0x100>)
 8006070:	f00a fb60 	bl	8010734 <iprintf>
        pc->custom_free_function(p);
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	691b      	ldr	r3, [r3, #16]
 8006078:	6878      	ldr	r0, [r7, #4]
 800607a:	4798      	blx	r3
 800607c:	e01d      	b.n	80060ba <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800607e:	7bfb      	ldrb	r3, [r7, #15]
 8006080:	2b02      	cmp	r3, #2
 8006082:	d104      	bne.n	800608e <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8006084:	6879      	ldr	r1, [r7, #4]
 8006086:	2008      	movs	r0, #8
 8006088:	f7ff f94a 	bl	8005320 <memp_free>
 800608c:	e015      	b.n	80060ba <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800608e:	7bfb      	ldrb	r3, [r7, #15]
 8006090:	2b01      	cmp	r3, #1
 8006092:	d104      	bne.n	800609e <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8006094:	6879      	ldr	r1, [r7, #4]
 8006096:	2007      	movs	r0, #7
 8006098:	f7ff f942 	bl	8005320 <memp_free>
 800609c:	e00d      	b.n	80060ba <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800609e:	7bfb      	ldrb	r3, [r7, #15]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d103      	bne.n	80060ac <pbuf_free+0xc8>
          mem_free(p);
 80060a4:	6878      	ldr	r0, [r7, #4]
 80060a6:	f7fe fdd5 	bl	8004c54 <mem_free>
 80060aa:	e006      	b.n	80060ba <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 80060ac:	4b0b      	ldr	r3, [pc, #44]	; (80060dc <pbuf_free+0xf8>)
 80060ae:	f240 320f 	movw	r2, #783	; 0x30f
 80060b2:	490f      	ldr	r1, [pc, #60]	; (80060f0 <pbuf_free+0x10c>)
 80060b4:	480b      	ldr	r0, [pc, #44]	; (80060e4 <pbuf_free+0x100>)
 80060b6:	f00a fb3d 	bl	8010734 <iprintf>
        }
      }
      count++;
 80060ba:	7dfb      	ldrb	r3, [r7, #23]
 80060bc:	3301      	adds	r3, #1
 80060be:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 80060c0:	693b      	ldr	r3, [r7, #16]
 80060c2:	607b      	str	r3, [r7, #4]
 80060c4:	e001      	b.n	80060ca <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 80060c6:	2300      	movs	r3, #0
 80060c8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d19f      	bne.n	8006010 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 80060d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80060d2:	4618      	mov	r0, r3
 80060d4:	3718      	adds	r7, #24
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd80      	pop	{r7, pc}
 80060da:	bf00      	nop
 80060dc:	08011db8 	.word	0x08011db8
 80060e0:	08011f1c 	.word	0x08011f1c
 80060e4:	08011e18 	.word	0x08011e18
 80060e8:	08011f48 	.word	0x08011f48
 80060ec:	08011f60 	.word	0x08011f60
 80060f0:	08011f84 	.word	0x08011f84

080060f4 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80060f4:	b480      	push	{r7}
 80060f6:	b085      	sub	sp, #20
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 80060fc:	2300      	movs	r3, #0
 80060fe:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8006100:	e005      	b.n	800610e <pbuf_clen+0x1a>
    ++len;
 8006102:	89fb      	ldrh	r3, [r7, #14]
 8006104:	3301      	adds	r3, #1
 8006106:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d1f6      	bne.n	8006102 <pbuf_clen+0xe>
  }
  return len;
 8006114:	89fb      	ldrh	r3, [r7, #14]
}
 8006116:	4618      	mov	r0, r3
 8006118:	3714      	adds	r7, #20
 800611a:	46bd      	mov	sp, r7
 800611c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006120:	4770      	bx	lr
	...

08006124 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b082      	sub	sp, #8
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d010      	beq.n	8006154 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	7b9b      	ldrb	r3, [r3, #14]
 8006136:	3301      	adds	r3, #1
 8006138:	b2da      	uxtb	r2, r3
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	7b9b      	ldrb	r3, [r3, #14]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d106      	bne.n	8006154 <pbuf_ref+0x30>
 8006146:	4b05      	ldr	r3, [pc, #20]	; (800615c <pbuf_ref+0x38>)
 8006148:	f240 3242 	movw	r2, #834	; 0x342
 800614c:	4904      	ldr	r1, [pc, #16]	; (8006160 <pbuf_ref+0x3c>)
 800614e:	4805      	ldr	r0, [pc, #20]	; (8006164 <pbuf_ref+0x40>)
 8006150:	f00a faf0 	bl	8010734 <iprintf>
  }
}
 8006154:	bf00      	nop
 8006156:	3708      	adds	r7, #8
 8006158:	46bd      	mov	sp, r7
 800615a:	bd80      	pop	{r7, pc}
 800615c:	08011db8 	.word	0x08011db8
 8006160:	08011f98 	.word	0x08011f98
 8006164:	08011e18 	.word	0x08011e18

08006168 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b084      	sub	sp, #16
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
 8006170:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d002      	beq.n	800617e <pbuf_cat+0x16>
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d107      	bne.n	800618e <pbuf_cat+0x26>
 800617e:	4b20      	ldr	r3, [pc, #128]	; (8006200 <pbuf_cat+0x98>)
 8006180:	f240 3259 	movw	r2, #857	; 0x359
 8006184:	491f      	ldr	r1, [pc, #124]	; (8006204 <pbuf_cat+0x9c>)
 8006186:	4820      	ldr	r0, [pc, #128]	; (8006208 <pbuf_cat+0xa0>)
 8006188:	f00a fad4 	bl	8010734 <iprintf>
 800618c:	e034      	b.n	80061f8 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	60fb      	str	r3, [r7, #12]
 8006192:	e00a      	b.n	80061aa <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	891a      	ldrh	r2, [r3, #8]
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	891b      	ldrh	r3, [r3, #8]
 800619c:	4413      	add	r3, r2
 800619e:	b29a      	uxth	r2, r3
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	60fb      	str	r3, [r7, #12]
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d1f0      	bne.n	8006194 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	891a      	ldrh	r2, [r3, #8]
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	895b      	ldrh	r3, [r3, #10]
 80061ba:	429a      	cmp	r2, r3
 80061bc:	d006      	beq.n	80061cc <pbuf_cat+0x64>
 80061be:	4b10      	ldr	r3, [pc, #64]	; (8006200 <pbuf_cat+0x98>)
 80061c0:	f240 3262 	movw	r2, #866	; 0x362
 80061c4:	4911      	ldr	r1, [pc, #68]	; (800620c <pbuf_cat+0xa4>)
 80061c6:	4810      	ldr	r0, [pc, #64]	; (8006208 <pbuf_cat+0xa0>)
 80061c8:	f00a fab4 	bl	8010734 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d006      	beq.n	80061e2 <pbuf_cat+0x7a>
 80061d4:	4b0a      	ldr	r3, [pc, #40]	; (8006200 <pbuf_cat+0x98>)
 80061d6:	f240 3263 	movw	r2, #867	; 0x363
 80061da:	490d      	ldr	r1, [pc, #52]	; (8006210 <pbuf_cat+0xa8>)
 80061dc:	480a      	ldr	r0, [pc, #40]	; (8006208 <pbuf_cat+0xa0>)
 80061de:	f00a faa9 	bl	8010734 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	891a      	ldrh	r2, [r3, #8]
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	891b      	ldrh	r3, [r3, #8]
 80061ea:	4413      	add	r3, r2
 80061ec:	b29a      	uxth	r2, r3
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	683a      	ldr	r2, [r7, #0]
 80061f6:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80061f8:	3710      	adds	r7, #16
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}
 80061fe:	bf00      	nop
 8006200:	08011db8 	.word	0x08011db8
 8006204:	08011fac 	.word	0x08011fac
 8006208:	08011e18 	.word	0x08011e18
 800620c:	08011fe4 	.word	0x08011fe4
 8006210:	08012014 	.word	0x08012014

08006214 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b082      	sub	sp, #8
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
 800621c:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800621e:	6839      	ldr	r1, [r7, #0]
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	f7ff ffa1 	bl	8006168 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8006226:	6838      	ldr	r0, [r7, #0]
 8006228:	f7ff ff7c 	bl	8006124 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800622c:	bf00      	nop
 800622e:	3708      	adds	r7, #8
 8006230:	46bd      	mov	sp, r7
 8006232:	bd80      	pop	{r7, pc}

08006234 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b086      	sub	sp, #24
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
 800623c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800623e:	2300      	movs	r3, #0
 8006240:	617b      	str	r3, [r7, #20]
 8006242:	2300      	movs	r3, #0
 8006244:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d008      	beq.n	800625e <pbuf_copy+0x2a>
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d005      	beq.n	800625e <pbuf_copy+0x2a>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	891a      	ldrh	r2, [r3, #8]
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	891b      	ldrh	r3, [r3, #8]
 800625a:	429a      	cmp	r2, r3
 800625c:	d209      	bcs.n	8006272 <pbuf_copy+0x3e>
 800625e:	4b57      	ldr	r3, [pc, #348]	; (80063bc <pbuf_copy+0x188>)
 8006260:	f240 32c9 	movw	r2, #969	; 0x3c9
 8006264:	4956      	ldr	r1, [pc, #344]	; (80063c0 <pbuf_copy+0x18c>)
 8006266:	4857      	ldr	r0, [pc, #348]	; (80063c4 <pbuf_copy+0x190>)
 8006268:	f00a fa64 	bl	8010734 <iprintf>
 800626c:	f06f 030f 	mvn.w	r3, #15
 8006270:	e09f      	b.n	80063b2 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	895b      	ldrh	r3, [r3, #10]
 8006276:	461a      	mov	r2, r3
 8006278:	697b      	ldr	r3, [r7, #20]
 800627a:	1ad2      	subs	r2, r2, r3
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	895b      	ldrh	r3, [r3, #10]
 8006280:	4619      	mov	r1, r3
 8006282:	693b      	ldr	r3, [r7, #16]
 8006284:	1acb      	subs	r3, r1, r3
 8006286:	429a      	cmp	r2, r3
 8006288:	d306      	bcc.n	8006298 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	895b      	ldrh	r3, [r3, #10]
 800628e:	461a      	mov	r2, r3
 8006290:	693b      	ldr	r3, [r7, #16]
 8006292:	1ad3      	subs	r3, r2, r3
 8006294:	60fb      	str	r3, [r7, #12]
 8006296:	e005      	b.n	80062a4 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	895b      	ldrh	r3, [r3, #10]
 800629c:	461a      	mov	r2, r3
 800629e:	697b      	ldr	r3, [r7, #20]
 80062a0:	1ad3      	subs	r3, r2, r3
 80062a2:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	685a      	ldr	r2, [r3, #4]
 80062a8:	697b      	ldr	r3, [r7, #20]
 80062aa:	18d0      	adds	r0, r2, r3
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	685a      	ldr	r2, [r3, #4]
 80062b0:	693b      	ldr	r3, [r7, #16]
 80062b2:	4413      	add	r3, r2
 80062b4:	68fa      	ldr	r2, [r7, #12]
 80062b6:	4619      	mov	r1, r3
 80062b8:	f00a fa26 	bl	8010708 <memcpy>
    offset_to += len;
 80062bc:	697a      	ldr	r2, [r7, #20]
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	4413      	add	r3, r2
 80062c2:	617b      	str	r3, [r7, #20]
    offset_from += len;
 80062c4:	693a      	ldr	r2, [r7, #16]
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	4413      	add	r3, r2
 80062ca:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	895b      	ldrh	r3, [r3, #10]
 80062d0:	461a      	mov	r2, r3
 80062d2:	697b      	ldr	r3, [r7, #20]
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d906      	bls.n	80062e6 <pbuf_copy+0xb2>
 80062d8:	4b38      	ldr	r3, [pc, #224]	; (80063bc <pbuf_copy+0x188>)
 80062da:	f240 32d9 	movw	r2, #985	; 0x3d9
 80062de:	493a      	ldr	r1, [pc, #232]	; (80063c8 <pbuf_copy+0x194>)
 80062e0:	4838      	ldr	r0, [pc, #224]	; (80063c4 <pbuf_copy+0x190>)
 80062e2:	f00a fa27 	bl	8010734 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	895b      	ldrh	r3, [r3, #10]
 80062ea:	461a      	mov	r2, r3
 80062ec:	693b      	ldr	r3, [r7, #16]
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d906      	bls.n	8006300 <pbuf_copy+0xcc>
 80062f2:	4b32      	ldr	r3, [pc, #200]	; (80063bc <pbuf_copy+0x188>)
 80062f4:	f240 32da 	movw	r2, #986	; 0x3da
 80062f8:	4934      	ldr	r1, [pc, #208]	; (80063cc <pbuf_copy+0x198>)
 80062fa:	4832      	ldr	r0, [pc, #200]	; (80063c4 <pbuf_copy+0x190>)
 80062fc:	f00a fa1a 	bl	8010734 <iprintf>
    if (offset_from >= p_from->len) {
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	895b      	ldrh	r3, [r3, #10]
 8006304:	461a      	mov	r2, r3
 8006306:	693b      	ldr	r3, [r7, #16]
 8006308:	4293      	cmp	r3, r2
 800630a:	d304      	bcc.n	8006316 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800630c:	2300      	movs	r3, #0
 800630e:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	895b      	ldrh	r3, [r3, #10]
 800631a:	461a      	mov	r2, r3
 800631c:	697b      	ldr	r3, [r7, #20]
 800631e:	4293      	cmp	r3, r2
 8006320:	d114      	bne.n	800634c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8006322:	2300      	movs	r3, #0
 8006324:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d10c      	bne.n	800634c <pbuf_copy+0x118>
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d009      	beq.n	800634c <pbuf_copy+0x118>
 8006338:	4b20      	ldr	r3, [pc, #128]	; (80063bc <pbuf_copy+0x188>)
 800633a:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800633e:	4924      	ldr	r1, [pc, #144]	; (80063d0 <pbuf_copy+0x19c>)
 8006340:	4820      	ldr	r0, [pc, #128]	; (80063c4 <pbuf_copy+0x190>)
 8006342:	f00a f9f7 	bl	8010734 <iprintf>
 8006346:	f06f 030f 	mvn.w	r3, #15
 800634a:	e032      	b.n	80063b2 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d013      	beq.n	800637a <pbuf_copy+0x146>
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	895a      	ldrh	r2, [r3, #10]
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	891b      	ldrh	r3, [r3, #8]
 800635a:	429a      	cmp	r2, r3
 800635c:	d10d      	bne.n	800637a <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d009      	beq.n	800637a <pbuf_copy+0x146>
 8006366:	4b15      	ldr	r3, [pc, #84]	; (80063bc <pbuf_copy+0x188>)
 8006368:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800636c:	4919      	ldr	r1, [pc, #100]	; (80063d4 <pbuf_copy+0x1a0>)
 800636e:	4815      	ldr	r0, [pc, #84]	; (80063c4 <pbuf_copy+0x190>)
 8006370:	f00a f9e0 	bl	8010734 <iprintf>
 8006374:	f06f 0305 	mvn.w	r3, #5
 8006378:	e01b      	b.n	80063b2 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d013      	beq.n	80063a8 <pbuf_copy+0x174>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	895a      	ldrh	r2, [r3, #10]
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	891b      	ldrh	r3, [r3, #8]
 8006388:	429a      	cmp	r2, r3
 800638a:	d10d      	bne.n	80063a8 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d009      	beq.n	80063a8 <pbuf_copy+0x174>
 8006394:	4b09      	ldr	r3, [pc, #36]	; (80063bc <pbuf_copy+0x188>)
 8006396:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800639a:	490e      	ldr	r1, [pc, #56]	; (80063d4 <pbuf_copy+0x1a0>)
 800639c:	4809      	ldr	r0, [pc, #36]	; (80063c4 <pbuf_copy+0x190>)
 800639e:	f00a f9c9 	bl	8010734 <iprintf>
 80063a2:	f06f 0305 	mvn.w	r3, #5
 80063a6:	e004      	b.n	80063b2 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	f47f af61 	bne.w	8006272 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 80063b0:	2300      	movs	r3, #0
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	3718      	adds	r7, #24
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd80      	pop	{r7, pc}
 80063ba:	bf00      	nop
 80063bc:	08011db8 	.word	0x08011db8
 80063c0:	08012060 	.word	0x08012060
 80063c4:	08011e18 	.word	0x08011e18
 80063c8:	08012090 	.word	0x08012090
 80063cc:	080120a8 	.word	0x080120a8
 80063d0:	080120c4 	.word	0x080120c4
 80063d4:	080120d4 	.word	0x080120d4

080063d8 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b088      	sub	sp, #32
 80063dc:	af00      	add	r7, sp, #0
 80063de:	60f8      	str	r0, [r7, #12]
 80063e0:	60b9      	str	r1, [r7, #8]
 80063e2:	4611      	mov	r1, r2
 80063e4:	461a      	mov	r2, r3
 80063e6:	460b      	mov	r3, r1
 80063e8:	80fb      	strh	r3, [r7, #6]
 80063ea:	4613      	mov	r3, r2
 80063ec:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 80063ee:	2300      	movs	r3, #0
 80063f0:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 80063f2:	2300      	movs	r3, #0
 80063f4:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d108      	bne.n	800640e <pbuf_copy_partial+0x36>
 80063fc:	4b2b      	ldr	r3, [pc, #172]	; (80064ac <pbuf_copy_partial+0xd4>)
 80063fe:	f240 420a 	movw	r2, #1034	; 0x40a
 8006402:	492b      	ldr	r1, [pc, #172]	; (80064b0 <pbuf_copy_partial+0xd8>)
 8006404:	482b      	ldr	r0, [pc, #172]	; (80064b4 <pbuf_copy_partial+0xdc>)
 8006406:	f00a f995 	bl	8010734 <iprintf>
 800640a:	2300      	movs	r3, #0
 800640c:	e04a      	b.n	80064a4 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d108      	bne.n	8006426 <pbuf_copy_partial+0x4e>
 8006414:	4b25      	ldr	r3, [pc, #148]	; (80064ac <pbuf_copy_partial+0xd4>)
 8006416:	f240 420b 	movw	r2, #1035	; 0x40b
 800641a:	4927      	ldr	r1, [pc, #156]	; (80064b8 <pbuf_copy_partial+0xe0>)
 800641c:	4825      	ldr	r0, [pc, #148]	; (80064b4 <pbuf_copy_partial+0xdc>)
 800641e:	f00a f989 	bl	8010734 <iprintf>
 8006422:	2300      	movs	r3, #0
 8006424:	e03e      	b.n	80064a4 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	61fb      	str	r3, [r7, #28]
 800642a:	e034      	b.n	8006496 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800642c:	88bb      	ldrh	r3, [r7, #4]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d00a      	beq.n	8006448 <pbuf_copy_partial+0x70>
 8006432:	69fb      	ldr	r3, [r7, #28]
 8006434:	895b      	ldrh	r3, [r3, #10]
 8006436:	88ba      	ldrh	r2, [r7, #4]
 8006438:	429a      	cmp	r2, r3
 800643a:	d305      	bcc.n	8006448 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800643c:	69fb      	ldr	r3, [r7, #28]
 800643e:	895b      	ldrh	r3, [r3, #10]
 8006440:	88ba      	ldrh	r2, [r7, #4]
 8006442:	1ad3      	subs	r3, r2, r3
 8006444:	80bb      	strh	r3, [r7, #4]
 8006446:	e023      	b.n	8006490 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8006448:	69fb      	ldr	r3, [r7, #28]
 800644a:	895a      	ldrh	r2, [r3, #10]
 800644c:	88bb      	ldrh	r3, [r7, #4]
 800644e:	1ad3      	subs	r3, r2, r3
 8006450:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8006452:	8b3a      	ldrh	r2, [r7, #24]
 8006454:	88fb      	ldrh	r3, [r7, #6]
 8006456:	429a      	cmp	r2, r3
 8006458:	d901      	bls.n	800645e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800645a:	88fb      	ldrh	r3, [r7, #6]
 800645c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800645e:	8b7b      	ldrh	r3, [r7, #26]
 8006460:	68ba      	ldr	r2, [r7, #8]
 8006462:	18d0      	adds	r0, r2, r3
 8006464:	69fb      	ldr	r3, [r7, #28]
 8006466:	685a      	ldr	r2, [r3, #4]
 8006468:	88bb      	ldrh	r3, [r7, #4]
 800646a:	4413      	add	r3, r2
 800646c:	8b3a      	ldrh	r2, [r7, #24]
 800646e:	4619      	mov	r1, r3
 8006470:	f00a f94a 	bl	8010708 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8006474:	8afa      	ldrh	r2, [r7, #22]
 8006476:	8b3b      	ldrh	r3, [r7, #24]
 8006478:	4413      	add	r3, r2
 800647a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800647c:	8b7a      	ldrh	r2, [r7, #26]
 800647e:	8b3b      	ldrh	r3, [r7, #24]
 8006480:	4413      	add	r3, r2
 8006482:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8006484:	88fa      	ldrh	r2, [r7, #6]
 8006486:	8b3b      	ldrh	r3, [r7, #24]
 8006488:	1ad3      	subs	r3, r2, r3
 800648a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800648c:	2300      	movs	r3, #0
 800648e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8006490:	69fb      	ldr	r3, [r7, #28]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	61fb      	str	r3, [r7, #28]
 8006496:	88fb      	ldrh	r3, [r7, #6]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d002      	beq.n	80064a2 <pbuf_copy_partial+0xca>
 800649c:	69fb      	ldr	r3, [r7, #28]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d1c4      	bne.n	800642c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 80064a2:	8afb      	ldrh	r3, [r7, #22]
}
 80064a4:	4618      	mov	r0, r3
 80064a6:	3720      	adds	r7, #32
 80064a8:	46bd      	mov	sp, r7
 80064aa:	bd80      	pop	{r7, pc}
 80064ac:	08011db8 	.word	0x08011db8
 80064b0:	08012100 	.word	0x08012100
 80064b4:	08011e18 	.word	0x08011e18
 80064b8:	08012120 	.word	0x08012120

080064bc <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b084      	sub	sp, #16
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	4603      	mov	r3, r0
 80064c4:	603a      	str	r2, [r7, #0]
 80064c6:	71fb      	strb	r3, [r7, #7]
 80064c8:	460b      	mov	r3, r1
 80064ca:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	8919      	ldrh	r1, [r3, #8]
 80064d0:	88ba      	ldrh	r2, [r7, #4]
 80064d2:	79fb      	ldrb	r3, [r7, #7]
 80064d4:	4618      	mov	r0, r3
 80064d6:	f7ff faa1 	bl	8005a1c <pbuf_alloc>
 80064da:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d101      	bne.n	80064e6 <pbuf_clone+0x2a>
    return NULL;
 80064e2:	2300      	movs	r3, #0
 80064e4:	e011      	b.n	800650a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 80064e6:	6839      	ldr	r1, [r7, #0]
 80064e8:	68f8      	ldr	r0, [r7, #12]
 80064ea:	f7ff fea3 	bl	8006234 <pbuf_copy>
 80064ee:	4603      	mov	r3, r0
 80064f0:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 80064f2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d006      	beq.n	8006508 <pbuf_clone+0x4c>
 80064fa:	4b06      	ldr	r3, [pc, #24]	; (8006514 <pbuf_clone+0x58>)
 80064fc:	f240 5224 	movw	r2, #1316	; 0x524
 8006500:	4905      	ldr	r1, [pc, #20]	; (8006518 <pbuf_clone+0x5c>)
 8006502:	4806      	ldr	r0, [pc, #24]	; (800651c <pbuf_clone+0x60>)
 8006504:	f00a f916 	bl	8010734 <iprintf>
  return q;
 8006508:	68fb      	ldr	r3, [r7, #12]
}
 800650a:	4618      	mov	r0, r3
 800650c:	3710      	adds	r7, #16
 800650e:	46bd      	mov	sp, r7
 8006510:	bd80      	pop	{r7, pc}
 8006512:	bf00      	nop
 8006514:	08011db8 	.word	0x08011db8
 8006518:	0801222c 	.word	0x0801222c
 800651c:	08011e18 	.word	0x08011e18

08006520 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8006524:	f00a f91e 	bl	8010764 <rand>
 8006528:	4603      	mov	r3, r0
 800652a:	b29b      	uxth	r3, r3
 800652c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8006530:	b29b      	uxth	r3, r3
 8006532:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8006536:	b29a      	uxth	r2, r3
 8006538:	4b01      	ldr	r3, [pc, #4]	; (8006540 <tcp_init+0x20>)
 800653a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800653c:	bf00      	nop
 800653e:	bd80      	pop	{r7, pc}
 8006540:	20000020 	.word	0x20000020

08006544 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b082      	sub	sp, #8
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	7d1b      	ldrb	r3, [r3, #20]
 8006550:	2b01      	cmp	r3, #1
 8006552:	d105      	bne.n	8006560 <tcp_free+0x1c>
 8006554:	4b06      	ldr	r3, [pc, #24]	; (8006570 <tcp_free+0x2c>)
 8006556:	22d4      	movs	r2, #212	; 0xd4
 8006558:	4906      	ldr	r1, [pc, #24]	; (8006574 <tcp_free+0x30>)
 800655a:	4807      	ldr	r0, [pc, #28]	; (8006578 <tcp_free+0x34>)
 800655c:	f00a f8ea 	bl	8010734 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8006560:	6879      	ldr	r1, [r7, #4]
 8006562:	2001      	movs	r0, #1
 8006564:	f7fe fedc 	bl	8005320 <memp_free>
}
 8006568:	bf00      	nop
 800656a:	3708      	adds	r7, #8
 800656c:	46bd      	mov	sp, r7
 800656e:	bd80      	pop	{r7, pc}
 8006570:	080122b8 	.word	0x080122b8
 8006574:	080122e8 	.word	0x080122e8
 8006578:	080122fc 	.word	0x080122fc

0800657c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b082      	sub	sp, #8
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	7d1b      	ldrb	r3, [r3, #20]
 8006588:	2b01      	cmp	r3, #1
 800658a:	d105      	bne.n	8006598 <tcp_free_listen+0x1c>
 800658c:	4b06      	ldr	r3, [pc, #24]	; (80065a8 <tcp_free_listen+0x2c>)
 800658e:	22df      	movs	r2, #223	; 0xdf
 8006590:	4906      	ldr	r1, [pc, #24]	; (80065ac <tcp_free_listen+0x30>)
 8006592:	4807      	ldr	r0, [pc, #28]	; (80065b0 <tcp_free_listen+0x34>)
 8006594:	f00a f8ce 	bl	8010734 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8006598:	6879      	ldr	r1, [r7, #4]
 800659a:	2002      	movs	r0, #2
 800659c:	f7fe fec0 	bl	8005320 <memp_free>
}
 80065a0:	bf00      	nop
 80065a2:	3708      	adds	r7, #8
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bd80      	pop	{r7, pc}
 80065a8:	080122b8 	.word	0x080122b8
 80065ac:	08012324 	.word	0x08012324
 80065b0:	080122fc 	.word	0x080122fc

080065b4 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 80065b8:	f000 fea2 	bl	8007300 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 80065bc:	4b07      	ldr	r3, [pc, #28]	; (80065dc <tcp_tmr+0x28>)
 80065be:	781b      	ldrb	r3, [r3, #0]
 80065c0:	3301      	adds	r3, #1
 80065c2:	b2da      	uxtb	r2, r3
 80065c4:	4b05      	ldr	r3, [pc, #20]	; (80065dc <tcp_tmr+0x28>)
 80065c6:	701a      	strb	r2, [r3, #0]
 80065c8:	4b04      	ldr	r3, [pc, #16]	; (80065dc <tcp_tmr+0x28>)
 80065ca:	781b      	ldrb	r3, [r3, #0]
 80065cc:	f003 0301 	and.w	r3, r3, #1
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d001      	beq.n	80065d8 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 80065d4:	f000 fb54 	bl	8006c80 <tcp_slowtmr>
  }
}
 80065d8:	bf00      	nop
 80065da:	bd80      	pop	{r7, pc}
 80065dc:	20007c69 	.word	0x20007c69

080065e0 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b084      	sub	sp, #16
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
 80065e8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d105      	bne.n	80065fc <tcp_remove_listener+0x1c>
 80065f0:	4b0d      	ldr	r3, [pc, #52]	; (8006628 <tcp_remove_listener+0x48>)
 80065f2:	22ff      	movs	r2, #255	; 0xff
 80065f4:	490d      	ldr	r1, [pc, #52]	; (800662c <tcp_remove_listener+0x4c>)
 80065f6:	480e      	ldr	r0, [pc, #56]	; (8006630 <tcp_remove_listener+0x50>)
 80065f8:	f00a f89c 	bl	8010734 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	60fb      	str	r3, [r7, #12]
 8006600:	e00a      	b.n	8006618 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006606:	683a      	ldr	r2, [r7, #0]
 8006608:	429a      	cmp	r2, r3
 800660a:	d102      	bne.n	8006612 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	2200      	movs	r2, #0
 8006610:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	68db      	ldr	r3, [r3, #12]
 8006616:	60fb      	str	r3, [r7, #12]
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d1f1      	bne.n	8006602 <tcp_remove_listener+0x22>
    }
  }
}
 800661e:	bf00      	nop
 8006620:	bf00      	nop
 8006622:	3710      	adds	r7, #16
 8006624:	46bd      	mov	sp, r7
 8006626:	bd80      	pop	{r7, pc}
 8006628:	080122b8 	.word	0x080122b8
 800662c:	08012340 	.word	0x08012340
 8006630:	080122fc 	.word	0x080122fc

08006634 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b084      	sub	sp, #16
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d106      	bne.n	8006650 <tcp_listen_closed+0x1c>
 8006642:	4b14      	ldr	r3, [pc, #80]	; (8006694 <tcp_listen_closed+0x60>)
 8006644:	f240 1211 	movw	r2, #273	; 0x111
 8006648:	4913      	ldr	r1, [pc, #76]	; (8006698 <tcp_listen_closed+0x64>)
 800664a:	4814      	ldr	r0, [pc, #80]	; (800669c <tcp_listen_closed+0x68>)
 800664c:	f00a f872 	bl	8010734 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	7d1b      	ldrb	r3, [r3, #20]
 8006654:	2b01      	cmp	r3, #1
 8006656:	d006      	beq.n	8006666 <tcp_listen_closed+0x32>
 8006658:	4b0e      	ldr	r3, [pc, #56]	; (8006694 <tcp_listen_closed+0x60>)
 800665a:	f44f 7289 	mov.w	r2, #274	; 0x112
 800665e:	4910      	ldr	r1, [pc, #64]	; (80066a0 <tcp_listen_closed+0x6c>)
 8006660:	480e      	ldr	r0, [pc, #56]	; (800669c <tcp_listen_closed+0x68>)
 8006662:	f00a f867 	bl	8010734 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8006666:	2301      	movs	r3, #1
 8006668:	60fb      	str	r3, [r7, #12]
 800666a:	e00b      	b.n	8006684 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800666c:	4a0d      	ldr	r2, [pc, #52]	; (80066a4 <tcp_listen_closed+0x70>)
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	6879      	ldr	r1, [r7, #4]
 8006678:	4618      	mov	r0, r3
 800667a:	f7ff ffb1 	bl	80065e0 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	3301      	adds	r3, #1
 8006682:	60fb      	str	r3, [r7, #12]
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	2b03      	cmp	r3, #3
 8006688:	d9f0      	bls.n	800666c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800668a:	bf00      	nop
 800668c:	bf00      	nop
 800668e:	3710      	adds	r7, #16
 8006690:	46bd      	mov	sp, r7
 8006692:	bd80      	pop	{r7, pc}
 8006694:	080122b8 	.word	0x080122b8
 8006698:	08012368 	.word	0x08012368
 800669c:	080122fc 	.word	0x080122fc
 80066a0:	08012374 	.word	0x08012374
 80066a4:	08014638 	.word	0x08014638

080066a8 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 80066a8:	b5b0      	push	{r4, r5, r7, lr}
 80066aa:	b088      	sub	sp, #32
 80066ac:	af04      	add	r7, sp, #16
 80066ae:	6078      	str	r0, [r7, #4]
 80066b0:	460b      	mov	r3, r1
 80066b2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d106      	bne.n	80066c8 <tcp_close_shutdown+0x20>
 80066ba:	4b63      	ldr	r3, [pc, #396]	; (8006848 <tcp_close_shutdown+0x1a0>)
 80066bc:	f44f 72af 	mov.w	r2, #350	; 0x15e
 80066c0:	4962      	ldr	r1, [pc, #392]	; (800684c <tcp_close_shutdown+0x1a4>)
 80066c2:	4863      	ldr	r0, [pc, #396]	; (8006850 <tcp_close_shutdown+0x1a8>)
 80066c4:	f00a f836 	bl	8010734 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 80066c8:	78fb      	ldrb	r3, [r7, #3]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d066      	beq.n	800679c <tcp_close_shutdown+0xf4>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	7d1b      	ldrb	r3, [r3, #20]
 80066d2:	2b04      	cmp	r3, #4
 80066d4:	d003      	beq.n	80066de <tcp_close_shutdown+0x36>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	7d1b      	ldrb	r3, [r3, #20]
 80066da:	2b07      	cmp	r3, #7
 80066dc:	d15e      	bne.n	800679c <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d104      	bne.n	80066f0 <tcp_close_shutdown+0x48>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066ea:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80066ee:	d055      	beq.n	800679c <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	8b5b      	ldrh	r3, [r3, #26]
 80066f4:	f003 0310 	and.w	r3, r3, #16
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d106      	bne.n	800670a <tcp_close_shutdown+0x62>
 80066fc:	4b52      	ldr	r3, [pc, #328]	; (8006848 <tcp_close_shutdown+0x1a0>)
 80066fe:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8006702:	4954      	ldr	r1, [pc, #336]	; (8006854 <tcp_close_shutdown+0x1ac>)
 8006704:	4852      	ldr	r0, [pc, #328]	; (8006850 <tcp_close_shutdown+0x1a8>)
 8006706:	f00a f815 	bl	8010734 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8006712:	687d      	ldr	r5, [r7, #4]
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	3304      	adds	r3, #4
 8006718:	687a      	ldr	r2, [r7, #4]
 800671a:	8ad2      	ldrh	r2, [r2, #22]
 800671c:	6879      	ldr	r1, [r7, #4]
 800671e:	8b09      	ldrh	r1, [r1, #24]
 8006720:	9102      	str	r1, [sp, #8]
 8006722:	9201      	str	r2, [sp, #4]
 8006724:	9300      	str	r3, [sp, #0]
 8006726:	462b      	mov	r3, r5
 8006728:	4622      	mov	r2, r4
 800672a:	4601      	mov	r1, r0
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	f004 fe91 	bl	800b454 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f001 f8c6 	bl	80078c4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8006738:	4b47      	ldr	r3, [pc, #284]	; (8006858 <tcp_close_shutdown+0x1b0>)
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	687a      	ldr	r2, [r7, #4]
 800673e:	429a      	cmp	r2, r3
 8006740:	d105      	bne.n	800674e <tcp_close_shutdown+0xa6>
 8006742:	4b45      	ldr	r3, [pc, #276]	; (8006858 <tcp_close_shutdown+0x1b0>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	68db      	ldr	r3, [r3, #12]
 8006748:	4a43      	ldr	r2, [pc, #268]	; (8006858 <tcp_close_shutdown+0x1b0>)
 800674a:	6013      	str	r3, [r2, #0]
 800674c:	e013      	b.n	8006776 <tcp_close_shutdown+0xce>
 800674e:	4b42      	ldr	r3, [pc, #264]	; (8006858 <tcp_close_shutdown+0x1b0>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	60fb      	str	r3, [r7, #12]
 8006754:	e00c      	b.n	8006770 <tcp_close_shutdown+0xc8>
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	68db      	ldr	r3, [r3, #12]
 800675a:	687a      	ldr	r2, [r7, #4]
 800675c:	429a      	cmp	r2, r3
 800675e:	d104      	bne.n	800676a <tcp_close_shutdown+0xc2>
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	68da      	ldr	r2, [r3, #12]
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	60da      	str	r2, [r3, #12]
 8006768:	e005      	b.n	8006776 <tcp_close_shutdown+0xce>
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	68db      	ldr	r3, [r3, #12]
 800676e:	60fb      	str	r3, [r7, #12]
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d1ef      	bne.n	8006756 <tcp_close_shutdown+0xae>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2200      	movs	r2, #0
 800677a:	60da      	str	r2, [r3, #12]
 800677c:	4b37      	ldr	r3, [pc, #220]	; (800685c <tcp_close_shutdown+0x1b4>)
 800677e:	2201      	movs	r2, #1
 8006780:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8006782:	4b37      	ldr	r3, [pc, #220]	; (8006860 <tcp_close_shutdown+0x1b8>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	687a      	ldr	r2, [r7, #4]
 8006788:	429a      	cmp	r2, r3
 800678a:	d102      	bne.n	8006792 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800678c:	f003 fd5e 	bl	800a24c <tcp_trigger_input_pcb_close>
 8006790:	e002      	b.n	8006798 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	f7ff fed6 	bl	8006544 <tcp_free>
      }
      return ERR_OK;
 8006798:	2300      	movs	r3, #0
 800679a:	e050      	b.n	800683e <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	7d1b      	ldrb	r3, [r3, #20]
 80067a0:	2b02      	cmp	r3, #2
 80067a2:	d03b      	beq.n	800681c <tcp_close_shutdown+0x174>
 80067a4:	2b02      	cmp	r3, #2
 80067a6:	dc44      	bgt.n	8006832 <tcp_close_shutdown+0x18a>
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d002      	beq.n	80067b2 <tcp_close_shutdown+0x10a>
 80067ac:	2b01      	cmp	r3, #1
 80067ae:	d02a      	beq.n	8006806 <tcp_close_shutdown+0x15e>
 80067b0:	e03f      	b.n	8006832 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	8adb      	ldrh	r3, [r3, #22]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d021      	beq.n	80067fe <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80067ba:	4b2a      	ldr	r3, [pc, #168]	; (8006864 <tcp_close_shutdown+0x1bc>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	687a      	ldr	r2, [r7, #4]
 80067c0:	429a      	cmp	r2, r3
 80067c2:	d105      	bne.n	80067d0 <tcp_close_shutdown+0x128>
 80067c4:	4b27      	ldr	r3, [pc, #156]	; (8006864 <tcp_close_shutdown+0x1bc>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	68db      	ldr	r3, [r3, #12]
 80067ca:	4a26      	ldr	r2, [pc, #152]	; (8006864 <tcp_close_shutdown+0x1bc>)
 80067cc:	6013      	str	r3, [r2, #0]
 80067ce:	e013      	b.n	80067f8 <tcp_close_shutdown+0x150>
 80067d0:	4b24      	ldr	r3, [pc, #144]	; (8006864 <tcp_close_shutdown+0x1bc>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	60bb      	str	r3, [r7, #8]
 80067d6:	e00c      	b.n	80067f2 <tcp_close_shutdown+0x14a>
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	68db      	ldr	r3, [r3, #12]
 80067dc:	687a      	ldr	r2, [r7, #4]
 80067de:	429a      	cmp	r2, r3
 80067e0:	d104      	bne.n	80067ec <tcp_close_shutdown+0x144>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	68da      	ldr	r2, [r3, #12]
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	60da      	str	r2, [r3, #12]
 80067ea:	e005      	b.n	80067f8 <tcp_close_shutdown+0x150>
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	68db      	ldr	r3, [r3, #12]
 80067f0:	60bb      	str	r3, [r7, #8]
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d1ef      	bne.n	80067d8 <tcp_close_shutdown+0x130>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2200      	movs	r2, #0
 80067fc:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	f7ff fea0 	bl	8006544 <tcp_free>
      break;
 8006804:	e01a      	b.n	800683c <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	f7ff ff14 	bl	8006634 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800680c:	6879      	ldr	r1, [r7, #4]
 800680e:	4816      	ldr	r0, [pc, #88]	; (8006868 <tcp_close_shutdown+0x1c0>)
 8006810:	f001 f8a8 	bl	8007964 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8006814:	6878      	ldr	r0, [r7, #4]
 8006816:	f7ff feb1 	bl	800657c <tcp_free_listen>
      break;
 800681a:	e00f      	b.n	800683c <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800681c:	6879      	ldr	r1, [r7, #4]
 800681e:	480e      	ldr	r0, [pc, #56]	; (8006858 <tcp_close_shutdown+0x1b0>)
 8006820:	f001 f8a0 	bl	8007964 <tcp_pcb_remove>
 8006824:	4b0d      	ldr	r3, [pc, #52]	; (800685c <tcp_close_shutdown+0x1b4>)
 8006826:	2201      	movs	r2, #1
 8006828:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f7ff fe8a 	bl	8006544 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8006830:	e004      	b.n	800683c <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f000 f81a 	bl	800686c <tcp_close_shutdown_fin>
 8006838:	4603      	mov	r3, r0
 800683a:	e000      	b.n	800683e <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800683c:	2300      	movs	r3, #0
}
 800683e:	4618      	mov	r0, r3
 8006840:	3710      	adds	r7, #16
 8006842:	46bd      	mov	sp, r7
 8006844:	bdb0      	pop	{r4, r5, r7, pc}
 8006846:	bf00      	nop
 8006848:	080122b8 	.word	0x080122b8
 800684c:	0801238c 	.word	0x0801238c
 8006850:	080122fc 	.word	0x080122fc
 8006854:	080123ac 	.word	0x080123ac
 8006858:	20007c60 	.word	0x20007c60
 800685c:	20007c68 	.word	0x20007c68
 8006860:	20007ca0 	.word	0x20007ca0
 8006864:	20007c58 	.word	0x20007c58
 8006868:	20007c5c 	.word	0x20007c5c

0800686c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b084      	sub	sp, #16
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d106      	bne.n	8006888 <tcp_close_shutdown_fin+0x1c>
 800687a:	4b2e      	ldr	r3, [pc, #184]	; (8006934 <tcp_close_shutdown_fin+0xc8>)
 800687c:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8006880:	492d      	ldr	r1, [pc, #180]	; (8006938 <tcp_close_shutdown_fin+0xcc>)
 8006882:	482e      	ldr	r0, [pc, #184]	; (800693c <tcp_close_shutdown_fin+0xd0>)
 8006884:	f009 ff56 	bl	8010734 <iprintf>

  switch (pcb->state) {
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	7d1b      	ldrb	r3, [r3, #20]
 800688c:	2b07      	cmp	r3, #7
 800688e:	d020      	beq.n	80068d2 <tcp_close_shutdown_fin+0x66>
 8006890:	2b07      	cmp	r3, #7
 8006892:	dc2b      	bgt.n	80068ec <tcp_close_shutdown_fin+0x80>
 8006894:	2b03      	cmp	r3, #3
 8006896:	d002      	beq.n	800689e <tcp_close_shutdown_fin+0x32>
 8006898:	2b04      	cmp	r3, #4
 800689a:	d00d      	beq.n	80068b8 <tcp_close_shutdown_fin+0x4c>
 800689c:	e026      	b.n	80068ec <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800689e:	6878      	ldr	r0, [r7, #4]
 80068a0:	f003 fee6 	bl	800a670 <tcp_send_fin>
 80068a4:	4603      	mov	r3, r0
 80068a6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80068a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d11f      	bne.n	80068f0 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2205      	movs	r2, #5
 80068b4:	751a      	strb	r2, [r3, #20]
      }
      break;
 80068b6:	e01b      	b.n	80068f0 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 80068b8:	6878      	ldr	r0, [r7, #4]
 80068ba:	f003 fed9 	bl	800a670 <tcp_send_fin>
 80068be:	4603      	mov	r3, r0
 80068c0:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80068c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d114      	bne.n	80068f4 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2205      	movs	r2, #5
 80068ce:	751a      	strb	r2, [r3, #20]
      }
      break;
 80068d0:	e010      	b.n	80068f4 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	f003 fecc 	bl	800a670 <tcp_send_fin>
 80068d8:	4603      	mov	r3, r0
 80068da:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80068dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d109      	bne.n	80068f8 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2209      	movs	r2, #9
 80068e8:	751a      	strb	r2, [r3, #20]
      }
      break;
 80068ea:	e005      	b.n	80068f8 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 80068ec:	2300      	movs	r3, #0
 80068ee:	e01c      	b.n	800692a <tcp_close_shutdown_fin+0xbe>
      break;
 80068f0:	bf00      	nop
 80068f2:	e002      	b.n	80068fa <tcp_close_shutdown_fin+0x8e>
      break;
 80068f4:	bf00      	nop
 80068f6:	e000      	b.n	80068fa <tcp_close_shutdown_fin+0x8e>
      break;
 80068f8:	bf00      	nop
  }

  if (err == ERR_OK) {
 80068fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d103      	bne.n	800690a <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	f003 fff2 	bl	800a8ec <tcp_output>
 8006908:	e00d      	b.n	8006926 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800690a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800690e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006912:	d108      	bne.n	8006926 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	8b5b      	ldrh	r3, [r3, #26]
 8006918:	f043 0308 	orr.w	r3, r3, #8
 800691c:	b29a      	uxth	r2, r3
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8006922:	2300      	movs	r3, #0
 8006924:	e001      	b.n	800692a <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8006926:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800692a:	4618      	mov	r0, r3
 800692c:	3710      	adds	r7, #16
 800692e:	46bd      	mov	sp, r7
 8006930:	bd80      	pop	{r7, pc}
 8006932:	bf00      	nop
 8006934:	080122b8 	.word	0x080122b8
 8006938:	08012368 	.word	0x08012368
 800693c:	080122fc 	.word	0x080122fc

08006940 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b082      	sub	sp, #8
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d109      	bne.n	8006962 <tcp_close+0x22>
 800694e:	4b0f      	ldr	r3, [pc, #60]	; (800698c <tcp_close+0x4c>)
 8006950:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8006954:	490e      	ldr	r1, [pc, #56]	; (8006990 <tcp_close+0x50>)
 8006956:	480f      	ldr	r0, [pc, #60]	; (8006994 <tcp_close+0x54>)
 8006958:	f009 feec 	bl	8010734 <iprintf>
 800695c:	f06f 030f 	mvn.w	r3, #15
 8006960:	e00f      	b.n	8006982 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	7d1b      	ldrb	r3, [r3, #20]
 8006966:	2b01      	cmp	r3, #1
 8006968:	d006      	beq.n	8006978 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	8b5b      	ldrh	r3, [r3, #26]
 800696e:	f043 0310 	orr.w	r3, r3, #16
 8006972:	b29a      	uxth	r2, r3
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8006978:	2101      	movs	r1, #1
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	f7ff fe94 	bl	80066a8 <tcp_close_shutdown>
 8006980:	4603      	mov	r3, r0
}
 8006982:	4618      	mov	r0, r3
 8006984:	3708      	adds	r7, #8
 8006986:	46bd      	mov	sp, r7
 8006988:	bd80      	pop	{r7, pc}
 800698a:	bf00      	nop
 800698c:	080122b8 	.word	0x080122b8
 8006990:	080123c8 	.word	0x080123c8
 8006994:	080122fc 	.word	0x080122fc

08006998 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b08e      	sub	sp, #56	; 0x38
 800699c:	af04      	add	r7, sp, #16
 800699e:	6078      	str	r0, [r7, #4]
 80069a0:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d107      	bne.n	80069b8 <tcp_abandon+0x20>
 80069a8:	4b52      	ldr	r3, [pc, #328]	; (8006af4 <tcp_abandon+0x15c>)
 80069aa:	f240 223d 	movw	r2, #573	; 0x23d
 80069ae:	4952      	ldr	r1, [pc, #328]	; (8006af8 <tcp_abandon+0x160>)
 80069b0:	4852      	ldr	r0, [pc, #328]	; (8006afc <tcp_abandon+0x164>)
 80069b2:	f009 febf 	bl	8010734 <iprintf>
 80069b6:	e099      	b.n	8006aec <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	7d1b      	ldrb	r3, [r3, #20]
 80069bc:	2b01      	cmp	r3, #1
 80069be:	d106      	bne.n	80069ce <tcp_abandon+0x36>
 80069c0:	4b4c      	ldr	r3, [pc, #304]	; (8006af4 <tcp_abandon+0x15c>)
 80069c2:	f44f 7210 	mov.w	r2, #576	; 0x240
 80069c6:	494e      	ldr	r1, [pc, #312]	; (8006b00 <tcp_abandon+0x168>)
 80069c8:	484c      	ldr	r0, [pc, #304]	; (8006afc <tcp_abandon+0x164>)
 80069ca:	f009 feb3 	bl	8010734 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	7d1b      	ldrb	r3, [r3, #20]
 80069d2:	2b0a      	cmp	r3, #10
 80069d4:	d107      	bne.n	80069e6 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80069d6:	6879      	ldr	r1, [r7, #4]
 80069d8:	484a      	ldr	r0, [pc, #296]	; (8006b04 <tcp_abandon+0x16c>)
 80069da:	f000 ffc3 	bl	8007964 <tcp_pcb_remove>
    tcp_free(pcb);
 80069de:	6878      	ldr	r0, [r7, #4]
 80069e0:	f7ff fdb0 	bl	8006544 <tcp_free>
 80069e4:	e082      	b.n	8006aec <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 80069e6:	2300      	movs	r3, #0
 80069e8:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 80069ea:	2300      	movs	r3, #0
 80069ec:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069f2:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069f8:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a00:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	691b      	ldr	r3, [r3, #16]
 8006a06:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	7d1b      	ldrb	r3, [r3, #20]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d126      	bne.n	8006a5e <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	8adb      	ldrh	r3, [r3, #22]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d02e      	beq.n	8006a76 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8006a18:	4b3b      	ldr	r3, [pc, #236]	; (8006b08 <tcp_abandon+0x170>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	687a      	ldr	r2, [r7, #4]
 8006a1e:	429a      	cmp	r2, r3
 8006a20:	d105      	bne.n	8006a2e <tcp_abandon+0x96>
 8006a22:	4b39      	ldr	r3, [pc, #228]	; (8006b08 <tcp_abandon+0x170>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	68db      	ldr	r3, [r3, #12]
 8006a28:	4a37      	ldr	r2, [pc, #220]	; (8006b08 <tcp_abandon+0x170>)
 8006a2a:	6013      	str	r3, [r2, #0]
 8006a2c:	e013      	b.n	8006a56 <tcp_abandon+0xbe>
 8006a2e:	4b36      	ldr	r3, [pc, #216]	; (8006b08 <tcp_abandon+0x170>)
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	61fb      	str	r3, [r7, #28]
 8006a34:	e00c      	b.n	8006a50 <tcp_abandon+0xb8>
 8006a36:	69fb      	ldr	r3, [r7, #28]
 8006a38:	68db      	ldr	r3, [r3, #12]
 8006a3a:	687a      	ldr	r2, [r7, #4]
 8006a3c:	429a      	cmp	r2, r3
 8006a3e:	d104      	bne.n	8006a4a <tcp_abandon+0xb2>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	68da      	ldr	r2, [r3, #12]
 8006a44:	69fb      	ldr	r3, [r7, #28]
 8006a46:	60da      	str	r2, [r3, #12]
 8006a48:	e005      	b.n	8006a56 <tcp_abandon+0xbe>
 8006a4a:	69fb      	ldr	r3, [r7, #28]
 8006a4c:	68db      	ldr	r3, [r3, #12]
 8006a4e:	61fb      	str	r3, [r7, #28]
 8006a50:	69fb      	ldr	r3, [r7, #28]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d1ef      	bne.n	8006a36 <tcp_abandon+0x9e>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2200      	movs	r2, #0
 8006a5a:	60da      	str	r2, [r3, #12]
 8006a5c:	e00b      	b.n	8006a76 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	8adb      	ldrh	r3, [r3, #22]
 8006a66:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8006a68:	6879      	ldr	r1, [r7, #4]
 8006a6a:	4828      	ldr	r0, [pc, #160]	; (8006b0c <tcp_abandon+0x174>)
 8006a6c:	f000 ff7a 	bl	8007964 <tcp_pcb_remove>
 8006a70:	4b27      	ldr	r3, [pc, #156]	; (8006b10 <tcp_abandon+0x178>)
 8006a72:	2201      	movs	r2, #1
 8006a74:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d004      	beq.n	8006a88 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a82:	4618      	mov	r0, r3
 8006a84:	f000 fd1c 	bl	80074c0 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d004      	beq.n	8006a9a <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a94:	4618      	mov	r0, r3
 8006a96:	f000 fd13 	bl	80074c0 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d004      	beq.n	8006aac <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	f000 fd0a 	bl	80074c0 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8006aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d00e      	beq.n	8006ad0 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8006ab2:	6879      	ldr	r1, [r7, #4]
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	3304      	adds	r3, #4
 8006ab8:	687a      	ldr	r2, [r7, #4]
 8006aba:	8b12      	ldrh	r2, [r2, #24]
 8006abc:	9202      	str	r2, [sp, #8]
 8006abe:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8006ac0:	9201      	str	r2, [sp, #4]
 8006ac2:	9300      	str	r3, [sp, #0]
 8006ac4:	460b      	mov	r3, r1
 8006ac6:	697a      	ldr	r2, [r7, #20]
 8006ac8:	69b9      	ldr	r1, [r7, #24]
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f004 fcc2 	bl	800b454 <tcp_rst>
    }
    last_state = pcb->state;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	7d1b      	ldrb	r3, [r3, #20]
 8006ad4:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	f7ff fd34 	bl	8006544 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8006adc:	693b      	ldr	r3, [r7, #16]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d004      	beq.n	8006aec <tcp_abandon+0x154>
 8006ae2:	693b      	ldr	r3, [r7, #16]
 8006ae4:	f06f 010c 	mvn.w	r1, #12
 8006ae8:	68f8      	ldr	r0, [r7, #12]
 8006aea:	4798      	blx	r3
  }
}
 8006aec:	3728      	adds	r7, #40	; 0x28
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bd80      	pop	{r7, pc}
 8006af2:	bf00      	nop
 8006af4:	080122b8 	.word	0x080122b8
 8006af8:	080123fc 	.word	0x080123fc
 8006afc:	080122fc 	.word	0x080122fc
 8006b00:	08012418 	.word	0x08012418
 8006b04:	20007c64 	.word	0x20007c64
 8006b08:	20007c58 	.word	0x20007c58
 8006b0c:	20007c60 	.word	0x20007c60
 8006b10:	20007c68 	.word	0x20007c68

08006b14 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b082      	sub	sp, #8
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8006b1c:	2101      	movs	r1, #1
 8006b1e:	6878      	ldr	r0, [r7, #4]
 8006b20:	f7ff ff3a 	bl	8006998 <tcp_abandon>
}
 8006b24:	bf00      	nop
 8006b26:	3708      	adds	r7, #8
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd80      	pop	{r7, pc}

08006b2c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b084      	sub	sp, #16
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d106      	bne.n	8006b48 <tcp_update_rcv_ann_wnd+0x1c>
 8006b3a:	4b25      	ldr	r3, [pc, #148]	; (8006bd0 <tcp_update_rcv_ann_wnd+0xa4>)
 8006b3c:	f240 32a6 	movw	r2, #934	; 0x3a6
 8006b40:	4924      	ldr	r1, [pc, #144]	; (8006bd4 <tcp_update_rcv_ann_wnd+0xa8>)
 8006b42:	4825      	ldr	r0, [pc, #148]	; (8006bd8 <tcp_update_rcv_ann_wnd+0xac>)
 8006b44:	f009 fdf6 	bl	8010734 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b4c:	687a      	ldr	r2, [r7, #4]
 8006b4e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8006b50:	4413      	add	r3, r2
 8006b52:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b58:	687a      	ldr	r2, [r7, #4]
 8006b5a:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8006b5c:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8006b60:	bf28      	it	cs
 8006b62:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8006b66:	b292      	uxth	r2, r2
 8006b68:	4413      	add	r3, r2
 8006b6a:	68fa      	ldr	r2, [r7, #12]
 8006b6c:	1ad3      	subs	r3, r2, r3
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	db08      	blt.n	8006b84 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b7e:	68fa      	ldr	r2, [r7, #12]
 8006b80:	1ad3      	subs	r3, r2, r3
 8006b82:	e020      	b.n	8006bc6 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b8c:	1ad3      	subs	r3, r2, r3
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	dd03      	ble.n	8006b9a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2200      	movs	r2, #0
 8006b96:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006b98:	e014      	b.n	8006bc4 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ba2:	1ad3      	subs	r3, r2, r3
 8006ba4:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bac:	d306      	bcc.n	8006bbc <tcp_update_rcv_ann_wnd+0x90>
 8006bae:	4b08      	ldr	r3, [pc, #32]	; (8006bd0 <tcp_update_rcv_ann_wnd+0xa4>)
 8006bb0:	f240 32b6 	movw	r2, #950	; 0x3b6
 8006bb4:	4909      	ldr	r1, [pc, #36]	; (8006bdc <tcp_update_rcv_ann_wnd+0xb0>)
 8006bb6:	4808      	ldr	r0, [pc, #32]	; (8006bd8 <tcp_update_rcv_ann_wnd+0xac>)
 8006bb8:	f009 fdbc 	bl	8010734 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	b29a      	uxth	r2, r3
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8006bc4:	2300      	movs	r3, #0
  }
}
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	3710      	adds	r7, #16
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bd80      	pop	{r7, pc}
 8006bce:	bf00      	nop
 8006bd0:	080122b8 	.word	0x080122b8
 8006bd4:	08012514 	.word	0x08012514
 8006bd8:	080122fc 	.word	0x080122fc
 8006bdc:	08012538 	.word	0x08012538

08006be0 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b084      	sub	sp, #16
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
 8006be8:	460b      	mov	r3, r1
 8006bea:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d107      	bne.n	8006c02 <tcp_recved+0x22>
 8006bf2:	4b1f      	ldr	r3, [pc, #124]	; (8006c70 <tcp_recved+0x90>)
 8006bf4:	f240 32cf 	movw	r2, #975	; 0x3cf
 8006bf8:	491e      	ldr	r1, [pc, #120]	; (8006c74 <tcp_recved+0x94>)
 8006bfa:	481f      	ldr	r0, [pc, #124]	; (8006c78 <tcp_recved+0x98>)
 8006bfc:	f009 fd9a 	bl	8010734 <iprintf>
 8006c00:	e032      	b.n	8006c68 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	7d1b      	ldrb	r3, [r3, #20]
 8006c06:	2b01      	cmp	r3, #1
 8006c08:	d106      	bne.n	8006c18 <tcp_recved+0x38>
 8006c0a:	4b19      	ldr	r3, [pc, #100]	; (8006c70 <tcp_recved+0x90>)
 8006c0c:	f240 32d2 	movw	r2, #978	; 0x3d2
 8006c10:	491a      	ldr	r1, [pc, #104]	; (8006c7c <tcp_recved+0x9c>)
 8006c12:	4819      	ldr	r0, [pc, #100]	; (8006c78 <tcp_recved+0x98>)
 8006c14:	f009 fd8e 	bl	8010734 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8006c1c:	887b      	ldrh	r3, [r7, #2]
 8006c1e:	4413      	add	r3, r2
 8006c20:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8006c22:	89fb      	ldrh	r3, [r7, #14]
 8006c24:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8006c28:	d804      	bhi.n	8006c34 <tcp_recved+0x54>
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c2e:	89fa      	ldrh	r2, [r7, #14]
 8006c30:	429a      	cmp	r2, r3
 8006c32:	d204      	bcs.n	8006c3e <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8006c3a:	851a      	strh	r2, [r3, #40]	; 0x28
 8006c3c:	e002      	b.n	8006c44 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	89fa      	ldrh	r2, [r7, #14]
 8006c42:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	f7ff ff71 	bl	8006b2c <tcp_update_rcv_ann_wnd>
 8006c4a:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8006c52:	d309      	bcc.n	8006c68 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	8b5b      	ldrh	r3, [r3, #26]
 8006c58:	f043 0302 	orr.w	r3, r3, #2
 8006c5c:	b29a      	uxth	r2, r3
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	f003 fe42 	bl	800a8ec <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8006c68:	3710      	adds	r7, #16
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	bd80      	pop	{r7, pc}
 8006c6e:	bf00      	nop
 8006c70:	080122b8 	.word	0x080122b8
 8006c74:	08012554 	.word	0x08012554
 8006c78:	080122fc 	.word	0x080122fc
 8006c7c:	0801256c 	.word	0x0801256c

08006c80 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8006c80:	b5b0      	push	{r4, r5, r7, lr}
 8006c82:	b090      	sub	sp, #64	; 0x40
 8006c84:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8006c86:	2300      	movs	r3, #0
 8006c88:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8006c8c:	4b94      	ldr	r3, [pc, #592]	; (8006ee0 <tcp_slowtmr+0x260>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	3301      	adds	r3, #1
 8006c92:	4a93      	ldr	r2, [pc, #588]	; (8006ee0 <tcp_slowtmr+0x260>)
 8006c94:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8006c96:	4b93      	ldr	r3, [pc, #588]	; (8006ee4 <tcp_slowtmr+0x264>)
 8006c98:	781b      	ldrb	r3, [r3, #0]
 8006c9a:	3301      	adds	r3, #1
 8006c9c:	b2da      	uxtb	r2, r3
 8006c9e:	4b91      	ldr	r3, [pc, #580]	; (8006ee4 <tcp_slowtmr+0x264>)
 8006ca0:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8006ca6:	4b90      	ldr	r3, [pc, #576]	; (8006ee8 <tcp_slowtmr+0x268>)
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8006cac:	e29f      	b.n	80071ee <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8006cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cb0:	7d1b      	ldrb	r3, [r3, #20]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d106      	bne.n	8006cc4 <tcp_slowtmr+0x44>
 8006cb6:	4b8d      	ldr	r3, [pc, #564]	; (8006eec <tcp_slowtmr+0x26c>)
 8006cb8:	f240 42be 	movw	r2, #1214	; 0x4be
 8006cbc:	498c      	ldr	r1, [pc, #560]	; (8006ef0 <tcp_slowtmr+0x270>)
 8006cbe:	488d      	ldr	r0, [pc, #564]	; (8006ef4 <tcp_slowtmr+0x274>)
 8006cc0:	f009 fd38 	bl	8010734 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8006cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cc6:	7d1b      	ldrb	r3, [r3, #20]
 8006cc8:	2b01      	cmp	r3, #1
 8006cca:	d106      	bne.n	8006cda <tcp_slowtmr+0x5a>
 8006ccc:	4b87      	ldr	r3, [pc, #540]	; (8006eec <tcp_slowtmr+0x26c>)
 8006cce:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8006cd2:	4989      	ldr	r1, [pc, #548]	; (8006ef8 <tcp_slowtmr+0x278>)
 8006cd4:	4887      	ldr	r0, [pc, #540]	; (8006ef4 <tcp_slowtmr+0x274>)
 8006cd6:	f009 fd2d 	bl	8010734 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8006cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cdc:	7d1b      	ldrb	r3, [r3, #20]
 8006cde:	2b0a      	cmp	r3, #10
 8006ce0:	d106      	bne.n	8006cf0 <tcp_slowtmr+0x70>
 8006ce2:	4b82      	ldr	r3, [pc, #520]	; (8006eec <tcp_slowtmr+0x26c>)
 8006ce4:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8006ce8:	4984      	ldr	r1, [pc, #528]	; (8006efc <tcp_slowtmr+0x27c>)
 8006cea:	4882      	ldr	r0, [pc, #520]	; (8006ef4 <tcp_slowtmr+0x274>)
 8006cec:	f009 fd22 	bl	8010734 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8006cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cf2:	7f9a      	ldrb	r2, [r3, #30]
 8006cf4:	4b7b      	ldr	r3, [pc, #492]	; (8006ee4 <tcp_slowtmr+0x264>)
 8006cf6:	781b      	ldrb	r3, [r3, #0]
 8006cf8:	429a      	cmp	r2, r3
 8006cfa:	d105      	bne.n	8006d08 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8006cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cfe:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8006d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d02:	68db      	ldr	r3, [r3, #12]
 8006d04:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8006d06:	e272      	b.n	80071ee <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 8006d08:	4b76      	ldr	r3, [pc, #472]	; (8006ee4 <tcp_slowtmr+0x264>)
 8006d0a:	781a      	ldrb	r2, [r3, #0]
 8006d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d0e:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8006d10:	2300      	movs	r3, #0
 8006d12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8006d16:	2300      	movs	r3, #0
 8006d18:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8006d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d1e:	7d1b      	ldrb	r3, [r3, #20]
 8006d20:	2b02      	cmp	r3, #2
 8006d22:	d10a      	bne.n	8006d3a <tcp_slowtmr+0xba>
 8006d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d26:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006d2a:	2b05      	cmp	r3, #5
 8006d2c:	d905      	bls.n	8006d3a <tcp_slowtmr+0xba>
      ++pcb_remove;
 8006d2e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006d32:	3301      	adds	r3, #1
 8006d34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006d38:	e11e      	b.n	8006f78 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8006d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d3c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006d40:	2b0b      	cmp	r3, #11
 8006d42:	d905      	bls.n	8006d50 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8006d44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006d48:	3301      	adds	r3, #1
 8006d4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006d4e:	e113      	b.n	8006f78 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8006d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d52:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d075      	beq.n	8006e46 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8006d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d006      	beq.n	8006d70 <tcp_slowtmr+0xf0>
 8006d62:	4b62      	ldr	r3, [pc, #392]	; (8006eec <tcp_slowtmr+0x26c>)
 8006d64:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8006d68:	4965      	ldr	r1, [pc, #404]	; (8006f00 <tcp_slowtmr+0x280>)
 8006d6a:	4862      	ldr	r0, [pc, #392]	; (8006ef4 <tcp_slowtmr+0x274>)
 8006d6c:	f009 fce2 	bl	8010734 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8006d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d106      	bne.n	8006d86 <tcp_slowtmr+0x106>
 8006d78:	4b5c      	ldr	r3, [pc, #368]	; (8006eec <tcp_slowtmr+0x26c>)
 8006d7a:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8006d7e:	4961      	ldr	r1, [pc, #388]	; (8006f04 <tcp_slowtmr+0x284>)
 8006d80:	485c      	ldr	r0, [pc, #368]	; (8006ef4 <tcp_slowtmr+0x274>)
 8006d82:	f009 fcd7 	bl	8010734 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8006d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d88:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8006d8c:	2b0b      	cmp	r3, #11
 8006d8e:	d905      	bls.n	8006d9c <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8006d90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006d94:	3301      	adds	r3, #1
 8006d96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006d9a:	e0ed      	b.n	8006f78 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8006d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d9e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8006da2:	3b01      	subs	r3, #1
 8006da4:	4a58      	ldr	r2, [pc, #352]	; (8006f08 <tcp_slowtmr+0x288>)
 8006da6:	5cd3      	ldrb	r3, [r2, r3]
 8006da8:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8006daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dac:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006db0:	7c7a      	ldrb	r2, [r7, #17]
 8006db2:	429a      	cmp	r2, r3
 8006db4:	d907      	bls.n	8006dc6 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8006db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006db8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006dbc:	3301      	adds	r3, #1
 8006dbe:	b2da      	uxtb	r2, r3
 8006dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dc2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8006dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dc8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006dcc:	7c7a      	ldrb	r2, [r7, #17]
 8006dce:	429a      	cmp	r2, r3
 8006dd0:	f200 80d2 	bhi.w	8006f78 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8006dd4:	2301      	movs	r3, #1
 8006dd6:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8006dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dda:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d108      	bne.n	8006df4 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8006de2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006de4:	f004 fc2a 	bl	800b63c <tcp_zero_window_probe>
 8006de8:	4603      	mov	r3, r0
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d014      	beq.n	8006e18 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8006dee:	2300      	movs	r3, #0
 8006df0:	623b      	str	r3, [r7, #32]
 8006df2:	e011      	b.n	8006e18 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8006df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006df6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006dfa:	4619      	mov	r1, r3
 8006dfc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006dfe:	f003 faef 	bl	800a3e0 <tcp_split_unsent_seg>
 8006e02:	4603      	mov	r3, r0
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d107      	bne.n	8006e18 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8006e08:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006e0a:	f003 fd6f 	bl	800a8ec <tcp_output>
 8006e0e:	4603      	mov	r3, r0
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d101      	bne.n	8006e18 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8006e14:	2300      	movs	r3, #0
 8006e16:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8006e18:	6a3b      	ldr	r3, [r7, #32]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	f000 80ac 	beq.w	8006f78 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8006e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e22:	2200      	movs	r2, #0
 8006e24:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8006e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e2a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8006e2e:	2b06      	cmp	r3, #6
 8006e30:	f200 80a2 	bhi.w	8006f78 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8006e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e36:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8006e3a:	3301      	adds	r3, #1
 8006e3c:	b2da      	uxtb	r2, r3
 8006e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e40:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8006e44:	e098      	b.n	8006f78 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8006e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e48:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	db0f      	blt.n	8006e70 <tcp_slowtmr+0x1f0>
 8006e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e52:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8006e56:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d008      	beq.n	8006e70 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8006e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e60:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8006e64:	b29b      	uxth	r3, r3
 8006e66:	3301      	adds	r3, #1
 8006e68:	b29b      	uxth	r3, r3
 8006e6a:	b21a      	sxth	r2, r3
 8006e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e6e:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8006e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e72:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8006e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e78:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8006e7c:	429a      	cmp	r2, r3
 8006e7e:	db7b      	blt.n	8006f78 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8006e80:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006e82:	f004 f825 	bl	800aed0 <tcp_rexmit_rto_prepare>
 8006e86:	4603      	mov	r3, r0
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d007      	beq.n	8006e9c <tcp_slowtmr+0x21c>
 8006e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d171      	bne.n	8006f78 <tcp_slowtmr+0x2f8>
 8006e94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d06d      	beq.n	8006f78 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8006e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e9e:	7d1b      	ldrb	r3, [r3, #20]
 8006ea0:	2b02      	cmp	r3, #2
 8006ea2:	d03a      	beq.n	8006f1a <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8006ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ea6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006eaa:	2b0c      	cmp	r3, #12
 8006eac:	bf28      	it	cs
 8006eae:	230c      	movcs	r3, #12
 8006eb0:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8006eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eb4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8006eb8:	10db      	asrs	r3, r3, #3
 8006eba:	b21b      	sxth	r3, r3
 8006ebc:	461a      	mov	r2, r3
 8006ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ec0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8006ec4:	4413      	add	r3, r2
 8006ec6:	7efa      	ldrb	r2, [r7, #27]
 8006ec8:	4910      	ldr	r1, [pc, #64]	; (8006f0c <tcp_slowtmr+0x28c>)
 8006eca:	5c8a      	ldrb	r2, [r1, r2]
 8006ecc:	4093      	lsls	r3, r2
 8006ece:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8006ed0:	697b      	ldr	r3, [r7, #20]
 8006ed2:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	dc1a      	bgt.n	8006f10 <tcp_slowtmr+0x290>
 8006eda:	697b      	ldr	r3, [r7, #20]
 8006edc:	b21a      	sxth	r2, r3
 8006ede:	e019      	b.n	8006f14 <tcp_slowtmr+0x294>
 8006ee0:	20007c54 	.word	0x20007c54
 8006ee4:	20007c6a 	.word	0x20007c6a
 8006ee8:	20007c60 	.word	0x20007c60
 8006eec:	080122b8 	.word	0x080122b8
 8006ef0:	080125fc 	.word	0x080125fc
 8006ef4:	080122fc 	.word	0x080122fc
 8006ef8:	08012628 	.word	0x08012628
 8006efc:	08012654 	.word	0x08012654
 8006f00:	08012684 	.word	0x08012684
 8006f04:	080126b8 	.word	0x080126b8
 8006f08:	08014630 	.word	0x08014630
 8006f0c:	08014620 	.word	0x08014620
 8006f10:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8006f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f16:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8006f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8006f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f22:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8006f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f28:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	bf28      	it	cs
 8006f30:	4613      	movcs	r3, r2
 8006f32:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8006f34:	8a7b      	ldrh	r3, [r7, #18]
 8006f36:	085b      	lsrs	r3, r3, #1
 8006f38:	b29a      	uxth	r2, r3
 8006f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f3c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8006f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f42:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8006f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f48:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006f4a:	005b      	lsls	r3, r3, #1
 8006f4c:	b29b      	uxth	r3, r3
 8006f4e:	429a      	cmp	r2, r3
 8006f50:	d206      	bcs.n	8006f60 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8006f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f54:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006f56:	005b      	lsls	r3, r3, #1
 8006f58:	b29a      	uxth	r2, r3
 8006f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f5c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8006f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f62:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8006f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f66:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8006f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8006f72:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006f74:	f004 f81c 	bl	800afb0 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8006f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f7a:	7d1b      	ldrb	r3, [r3, #20]
 8006f7c:	2b06      	cmp	r3, #6
 8006f7e:	d111      	bne.n	8006fa4 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8006f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f82:	8b5b      	ldrh	r3, [r3, #26]
 8006f84:	f003 0310 	and.w	r3, r3, #16
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d00b      	beq.n	8006fa4 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006f8c:	4b9d      	ldr	r3, [pc, #628]	; (8007204 <tcp_slowtmr+0x584>)
 8006f8e:	681a      	ldr	r2, [r3, #0]
 8006f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f92:	6a1b      	ldr	r3, [r3, #32]
 8006f94:	1ad3      	subs	r3, r2, r3
 8006f96:	2b28      	cmp	r3, #40	; 0x28
 8006f98:	d904      	bls.n	8006fa4 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8006f9a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006f9e:	3301      	adds	r3, #1
 8006fa0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8006fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fa6:	7a5b      	ldrb	r3, [r3, #9]
 8006fa8:	f003 0308 	and.w	r3, r3, #8
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d04c      	beq.n	800704a <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8006fb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fb2:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8006fb4:	2b04      	cmp	r3, #4
 8006fb6:	d003      	beq.n	8006fc0 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8006fb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fba:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8006fbc:	2b07      	cmp	r3, #7
 8006fbe:	d144      	bne.n	800704a <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006fc0:	4b90      	ldr	r3, [pc, #576]	; (8007204 <tcp_slowtmr+0x584>)
 8006fc2:	681a      	ldr	r2, [r3, #0]
 8006fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fc6:	6a1b      	ldr	r3, [r3, #32]
 8006fc8:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8006fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fcc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006fd0:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 8006fd4:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 8006fd8:	498b      	ldr	r1, [pc, #556]	; (8007208 <tcp_slowtmr+0x588>)
 8006fda:	fba1 1303 	umull	r1, r3, r1, r3
 8006fde:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006fe0:	429a      	cmp	r2, r3
 8006fe2:	d90a      	bls.n	8006ffa <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8006fe4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006fe8:	3301      	adds	r3, #1
 8006fea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8006fee:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006ff2:	3301      	adds	r3, #1
 8006ff4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006ff8:	e027      	b.n	800704a <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006ffa:	4b82      	ldr	r3, [pc, #520]	; (8007204 <tcp_slowtmr+0x584>)
 8006ffc:	681a      	ldr	r2, [r3, #0]
 8006ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007000:	6a1b      	ldr	r3, [r3, #32]
 8007002:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8007004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007006:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800700a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800700c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8007010:	4618      	mov	r0, r3
 8007012:	4b7e      	ldr	r3, [pc, #504]	; (800720c <tcp_slowtmr+0x58c>)
 8007014:	fb00 f303 	mul.w	r3, r0, r3
 8007018:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800701a:	497b      	ldr	r1, [pc, #492]	; (8007208 <tcp_slowtmr+0x588>)
 800701c:	fba1 1303 	umull	r1, r3, r1, r3
 8007020:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007022:	429a      	cmp	r2, r3
 8007024:	d911      	bls.n	800704a <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 8007026:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007028:	f004 fac8 	bl	800b5bc <tcp_keepalive>
 800702c:	4603      	mov	r3, r0
 800702e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8007032:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8007036:	2b00      	cmp	r3, #0
 8007038:	d107      	bne.n	800704a <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800703a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800703c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8007040:	3301      	adds	r3, #1
 8007042:	b2da      	uxtb	r2, r3
 8007044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007046:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800704a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800704c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800704e:	2b00      	cmp	r3, #0
 8007050:	d011      	beq.n	8007076 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8007052:	4b6c      	ldr	r3, [pc, #432]	; (8007204 <tcp_slowtmr+0x584>)
 8007054:	681a      	ldr	r2, [r3, #0]
 8007056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007058:	6a1b      	ldr	r3, [r3, #32]
 800705a:	1ad2      	subs	r2, r2, r3
 800705c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800705e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8007062:	4619      	mov	r1, r3
 8007064:	460b      	mov	r3, r1
 8007066:	005b      	lsls	r3, r3, #1
 8007068:	440b      	add	r3, r1
 800706a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800706c:	429a      	cmp	r2, r3
 800706e:	d302      	bcc.n	8007076 <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8007070:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007072:	f000 fddb 	bl	8007c2c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8007076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007078:	7d1b      	ldrb	r3, [r3, #20]
 800707a:	2b03      	cmp	r3, #3
 800707c:	d10b      	bne.n	8007096 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800707e:	4b61      	ldr	r3, [pc, #388]	; (8007204 <tcp_slowtmr+0x584>)
 8007080:	681a      	ldr	r2, [r3, #0]
 8007082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007084:	6a1b      	ldr	r3, [r3, #32]
 8007086:	1ad3      	subs	r3, r2, r3
 8007088:	2b28      	cmp	r3, #40	; 0x28
 800708a:	d904      	bls.n	8007096 <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800708c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007090:	3301      	adds	r3, #1
 8007092:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8007096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007098:	7d1b      	ldrb	r3, [r3, #20]
 800709a:	2b09      	cmp	r3, #9
 800709c:	d10b      	bne.n	80070b6 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800709e:	4b59      	ldr	r3, [pc, #356]	; (8007204 <tcp_slowtmr+0x584>)
 80070a0:	681a      	ldr	r2, [r3, #0]
 80070a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070a4:	6a1b      	ldr	r3, [r3, #32]
 80070a6:	1ad3      	subs	r3, r2, r3
 80070a8:	2bf0      	cmp	r3, #240	; 0xf0
 80070aa:	d904      	bls.n	80070b6 <tcp_slowtmr+0x436>
        ++pcb_remove;
 80070ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80070b0:	3301      	adds	r3, #1
 80070b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80070b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d060      	beq.n	8007180 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 80070be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070c4:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 80070c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80070c8:	f000 fbfc 	bl	80078c4 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 80070cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d010      	beq.n	80070f4 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80070d2:	4b4f      	ldr	r3, [pc, #316]	; (8007210 <tcp_slowtmr+0x590>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80070d8:	429a      	cmp	r2, r3
 80070da:	d106      	bne.n	80070ea <tcp_slowtmr+0x46a>
 80070dc:	4b4d      	ldr	r3, [pc, #308]	; (8007214 <tcp_slowtmr+0x594>)
 80070de:	f240 526d 	movw	r2, #1389	; 0x56d
 80070e2:	494d      	ldr	r1, [pc, #308]	; (8007218 <tcp_slowtmr+0x598>)
 80070e4:	484d      	ldr	r0, [pc, #308]	; (800721c <tcp_slowtmr+0x59c>)
 80070e6:	f009 fb25 	bl	8010734 <iprintf>
        prev->next = pcb->next;
 80070ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070ec:	68da      	ldr	r2, [r3, #12]
 80070ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070f0:	60da      	str	r2, [r3, #12]
 80070f2:	e00f      	b.n	8007114 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80070f4:	4b46      	ldr	r3, [pc, #280]	; (8007210 <tcp_slowtmr+0x590>)
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80070fa:	429a      	cmp	r2, r3
 80070fc:	d006      	beq.n	800710c <tcp_slowtmr+0x48c>
 80070fe:	4b45      	ldr	r3, [pc, #276]	; (8007214 <tcp_slowtmr+0x594>)
 8007100:	f240 5271 	movw	r2, #1393	; 0x571
 8007104:	4946      	ldr	r1, [pc, #280]	; (8007220 <tcp_slowtmr+0x5a0>)
 8007106:	4845      	ldr	r0, [pc, #276]	; (800721c <tcp_slowtmr+0x59c>)
 8007108:	f009 fb14 	bl	8010734 <iprintf>
        tcp_active_pcbs = pcb->next;
 800710c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800710e:	68db      	ldr	r3, [r3, #12]
 8007110:	4a3f      	ldr	r2, [pc, #252]	; (8007210 <tcp_slowtmr+0x590>)
 8007112:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8007114:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007118:	2b00      	cmp	r3, #0
 800711a:	d013      	beq.n	8007144 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800711c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800711e:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8007120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007122:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8007124:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8007126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007128:	3304      	adds	r3, #4
 800712a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800712c:	8ad2      	ldrh	r2, [r2, #22]
 800712e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007130:	8b09      	ldrh	r1, [r1, #24]
 8007132:	9102      	str	r1, [sp, #8]
 8007134:	9201      	str	r2, [sp, #4]
 8007136:	9300      	str	r3, [sp, #0]
 8007138:	462b      	mov	r3, r5
 800713a:	4622      	mov	r2, r4
 800713c:	4601      	mov	r1, r0
 800713e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007140:	f004 f988 	bl	800b454 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8007144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007146:	691b      	ldr	r3, [r3, #16]
 8007148:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800714a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800714c:	7d1b      	ldrb	r3, [r3, #20]
 800714e:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8007150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007152:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8007154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007156:	68db      	ldr	r3, [r3, #12]
 8007158:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800715a:	6838      	ldr	r0, [r7, #0]
 800715c:	f7ff f9f2 	bl	8006544 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8007160:	4b30      	ldr	r3, [pc, #192]	; (8007224 <tcp_slowtmr+0x5a4>)
 8007162:	2200      	movs	r2, #0
 8007164:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d004      	beq.n	8007176 <tcp_slowtmr+0x4f6>
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	f06f 010c 	mvn.w	r1, #12
 8007172:	68b8      	ldr	r0, [r7, #8]
 8007174:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8007176:	4b2b      	ldr	r3, [pc, #172]	; (8007224 <tcp_slowtmr+0x5a4>)
 8007178:	781b      	ldrb	r3, [r3, #0]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d037      	beq.n	80071ee <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800717e:	e590      	b.n	8006ca2 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8007180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007182:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8007184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007186:	68db      	ldr	r3, [r3, #12]
 8007188:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800718a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800718c:	7f1b      	ldrb	r3, [r3, #28]
 800718e:	3301      	adds	r3, #1
 8007190:	b2da      	uxtb	r2, r3
 8007192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007194:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8007196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007198:	7f1a      	ldrb	r2, [r3, #28]
 800719a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800719c:	7f5b      	ldrb	r3, [r3, #29]
 800719e:	429a      	cmp	r2, r3
 80071a0:	d325      	bcc.n	80071ee <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 80071a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071a4:	2200      	movs	r2, #0
 80071a6:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 80071a8:	4b1e      	ldr	r3, [pc, #120]	; (8007224 <tcp_slowtmr+0x5a4>)
 80071aa:	2200      	movs	r2, #0
 80071ac:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 80071ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d00b      	beq.n	80071d0 <tcp_slowtmr+0x550>
 80071b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80071be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80071c0:	6912      	ldr	r2, [r2, #16]
 80071c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80071c4:	4610      	mov	r0, r2
 80071c6:	4798      	blx	r3
 80071c8:	4603      	mov	r3, r0
 80071ca:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80071ce:	e002      	b.n	80071d6 <tcp_slowtmr+0x556>
 80071d0:	2300      	movs	r3, #0
 80071d2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 80071d6:	4b13      	ldr	r3, [pc, #76]	; (8007224 <tcp_slowtmr+0x5a4>)
 80071d8:	781b      	ldrb	r3, [r3, #0]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d000      	beq.n	80071e0 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 80071de:	e560      	b.n	8006ca2 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 80071e0:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d102      	bne.n	80071ee <tcp_slowtmr+0x56e>
          tcp_output(prev);
 80071e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80071ea:	f003 fb7f 	bl	800a8ec <tcp_output>
  while (pcb != NULL) {
 80071ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	f47f ad5c 	bne.w	8006cae <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 80071f6:	2300      	movs	r3, #0
 80071f8:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 80071fa:	4b0b      	ldr	r3, [pc, #44]	; (8007228 <tcp_slowtmr+0x5a8>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8007200:	e067      	b.n	80072d2 <tcp_slowtmr+0x652>
 8007202:	bf00      	nop
 8007204:	20007c54 	.word	0x20007c54
 8007208:	10624dd3 	.word	0x10624dd3
 800720c:	000124f8 	.word	0x000124f8
 8007210:	20007c60 	.word	0x20007c60
 8007214:	080122b8 	.word	0x080122b8
 8007218:	080126f0 	.word	0x080126f0
 800721c:	080122fc 	.word	0x080122fc
 8007220:	0801271c 	.word	0x0801271c
 8007224:	20007c68 	.word	0x20007c68
 8007228:	20007c64 	.word	0x20007c64
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800722c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800722e:	7d1b      	ldrb	r3, [r3, #20]
 8007230:	2b0a      	cmp	r3, #10
 8007232:	d006      	beq.n	8007242 <tcp_slowtmr+0x5c2>
 8007234:	4b2b      	ldr	r3, [pc, #172]	; (80072e4 <tcp_slowtmr+0x664>)
 8007236:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800723a:	492b      	ldr	r1, [pc, #172]	; (80072e8 <tcp_slowtmr+0x668>)
 800723c:	482b      	ldr	r0, [pc, #172]	; (80072ec <tcp_slowtmr+0x66c>)
 800723e:	f009 fa79 	bl	8010734 <iprintf>
    pcb_remove = 0;
 8007242:	2300      	movs	r3, #0
 8007244:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8007248:	4b29      	ldr	r3, [pc, #164]	; (80072f0 <tcp_slowtmr+0x670>)
 800724a:	681a      	ldr	r2, [r3, #0]
 800724c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800724e:	6a1b      	ldr	r3, [r3, #32]
 8007250:	1ad3      	subs	r3, r2, r3
 8007252:	2bf0      	cmp	r3, #240	; 0xf0
 8007254:	d904      	bls.n	8007260 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8007256:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800725a:	3301      	adds	r3, #1
 800725c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8007260:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007264:	2b00      	cmp	r3, #0
 8007266:	d02f      	beq.n	80072c8 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8007268:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800726a:	f000 fb2b 	bl	80078c4 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800726e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007270:	2b00      	cmp	r3, #0
 8007272:	d010      	beq.n	8007296 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8007274:	4b1f      	ldr	r3, [pc, #124]	; (80072f4 <tcp_slowtmr+0x674>)
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800727a:	429a      	cmp	r2, r3
 800727c:	d106      	bne.n	800728c <tcp_slowtmr+0x60c>
 800727e:	4b19      	ldr	r3, [pc, #100]	; (80072e4 <tcp_slowtmr+0x664>)
 8007280:	f240 52af 	movw	r2, #1455	; 0x5af
 8007284:	491c      	ldr	r1, [pc, #112]	; (80072f8 <tcp_slowtmr+0x678>)
 8007286:	4819      	ldr	r0, [pc, #100]	; (80072ec <tcp_slowtmr+0x66c>)
 8007288:	f009 fa54 	bl	8010734 <iprintf>
        prev->next = pcb->next;
 800728c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800728e:	68da      	ldr	r2, [r3, #12]
 8007290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007292:	60da      	str	r2, [r3, #12]
 8007294:	e00f      	b.n	80072b6 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8007296:	4b17      	ldr	r3, [pc, #92]	; (80072f4 <tcp_slowtmr+0x674>)
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800729c:	429a      	cmp	r2, r3
 800729e:	d006      	beq.n	80072ae <tcp_slowtmr+0x62e>
 80072a0:	4b10      	ldr	r3, [pc, #64]	; (80072e4 <tcp_slowtmr+0x664>)
 80072a2:	f240 52b3 	movw	r2, #1459	; 0x5b3
 80072a6:	4915      	ldr	r1, [pc, #84]	; (80072fc <tcp_slowtmr+0x67c>)
 80072a8:	4810      	ldr	r0, [pc, #64]	; (80072ec <tcp_slowtmr+0x66c>)
 80072aa:	f009 fa43 	bl	8010734 <iprintf>
        tcp_tw_pcbs = pcb->next;
 80072ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072b0:	68db      	ldr	r3, [r3, #12]
 80072b2:	4a10      	ldr	r2, [pc, #64]	; (80072f4 <tcp_slowtmr+0x674>)
 80072b4:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 80072b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072b8:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 80072ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072bc:	68db      	ldr	r3, [r3, #12]
 80072be:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80072c0:	69f8      	ldr	r0, [r7, #28]
 80072c2:	f7ff f93f 	bl	8006544 <tcp_free>
 80072c6:	e004      	b.n	80072d2 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 80072c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072ca:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80072cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072ce:	68db      	ldr	r3, [r3, #12]
 80072d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80072d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d1a9      	bne.n	800722c <tcp_slowtmr+0x5ac>
    }
  }
}
 80072d8:	bf00      	nop
 80072da:	bf00      	nop
 80072dc:	3730      	adds	r7, #48	; 0x30
 80072de:	46bd      	mov	sp, r7
 80072e0:	bdb0      	pop	{r4, r5, r7, pc}
 80072e2:	bf00      	nop
 80072e4:	080122b8 	.word	0x080122b8
 80072e8:	08012748 	.word	0x08012748
 80072ec:	080122fc 	.word	0x080122fc
 80072f0:	20007c54 	.word	0x20007c54
 80072f4:	20007c64 	.word	0x20007c64
 80072f8:	08012778 	.word	0x08012778
 80072fc:	080127a0 	.word	0x080127a0

08007300 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b082      	sub	sp, #8
 8007304:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8007306:	4b2d      	ldr	r3, [pc, #180]	; (80073bc <tcp_fasttmr+0xbc>)
 8007308:	781b      	ldrb	r3, [r3, #0]
 800730a:	3301      	adds	r3, #1
 800730c:	b2da      	uxtb	r2, r3
 800730e:	4b2b      	ldr	r3, [pc, #172]	; (80073bc <tcp_fasttmr+0xbc>)
 8007310:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8007312:	4b2b      	ldr	r3, [pc, #172]	; (80073c0 <tcp_fasttmr+0xc0>)
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8007318:	e048      	b.n	80073ac <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	7f9a      	ldrb	r2, [r3, #30]
 800731e:	4b27      	ldr	r3, [pc, #156]	; (80073bc <tcp_fasttmr+0xbc>)
 8007320:	781b      	ldrb	r3, [r3, #0]
 8007322:	429a      	cmp	r2, r3
 8007324:	d03f      	beq.n	80073a6 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8007326:	4b25      	ldr	r3, [pc, #148]	; (80073bc <tcp_fasttmr+0xbc>)
 8007328:	781a      	ldrb	r2, [r3, #0]
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	8b5b      	ldrh	r3, [r3, #26]
 8007332:	f003 0301 	and.w	r3, r3, #1
 8007336:	2b00      	cmp	r3, #0
 8007338:	d010      	beq.n	800735c <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	8b5b      	ldrh	r3, [r3, #26]
 800733e:	f043 0302 	orr.w	r3, r3, #2
 8007342:	b29a      	uxth	r2, r3
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	f003 facf 	bl	800a8ec <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	8b5b      	ldrh	r3, [r3, #26]
 8007352:	f023 0303 	bic.w	r3, r3, #3
 8007356:	b29a      	uxth	r2, r3
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	8b5b      	ldrh	r3, [r3, #26]
 8007360:	f003 0308 	and.w	r3, r3, #8
 8007364:	2b00      	cmp	r3, #0
 8007366:	d009      	beq.n	800737c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	8b5b      	ldrh	r3, [r3, #26]
 800736c:	f023 0308 	bic.w	r3, r3, #8
 8007370:	b29a      	uxth	r2, r3
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8007376:	6878      	ldr	r0, [r7, #4]
 8007378:	f7ff fa78 	bl	800686c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	68db      	ldr	r3, [r3, #12]
 8007380:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007386:	2b00      	cmp	r3, #0
 8007388:	d00a      	beq.n	80073a0 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800738a:	4b0e      	ldr	r3, [pc, #56]	; (80073c4 <tcp_fasttmr+0xc4>)
 800738c:	2200      	movs	r2, #0
 800738e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	f000 f819 	bl	80073c8 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8007396:	4b0b      	ldr	r3, [pc, #44]	; (80073c4 <tcp_fasttmr+0xc4>)
 8007398:	781b      	ldrb	r3, [r3, #0]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d000      	beq.n	80073a0 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800739e:	e7b8      	b.n	8007312 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	607b      	str	r3, [r7, #4]
 80073a4:	e002      	b.n	80073ac <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	68db      	ldr	r3, [r3, #12]
 80073aa:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d1b3      	bne.n	800731a <tcp_fasttmr+0x1a>
    }
  }
}
 80073b2:	bf00      	nop
 80073b4:	bf00      	nop
 80073b6:	3708      	adds	r7, #8
 80073b8:	46bd      	mov	sp, r7
 80073ba:	bd80      	pop	{r7, pc}
 80073bc:	20007c6a 	.word	0x20007c6a
 80073c0:	20007c60 	.word	0x20007c60
 80073c4:	20007c68 	.word	0x20007c68

080073c8 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 80073c8:	b590      	push	{r4, r7, lr}
 80073ca:	b085      	sub	sp, #20
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d109      	bne.n	80073ea <tcp_process_refused_data+0x22>
 80073d6:	4b37      	ldr	r3, [pc, #220]	; (80074b4 <tcp_process_refused_data+0xec>)
 80073d8:	f240 6209 	movw	r2, #1545	; 0x609
 80073dc:	4936      	ldr	r1, [pc, #216]	; (80074b8 <tcp_process_refused_data+0xf0>)
 80073de:	4837      	ldr	r0, [pc, #220]	; (80074bc <tcp_process_refused_data+0xf4>)
 80073e0:	f009 f9a8 	bl	8010734 <iprintf>
 80073e4:	f06f 030f 	mvn.w	r3, #15
 80073e8:	e060      	b.n	80074ac <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80073ee:	7b5b      	ldrb	r3, [r3, #13]
 80073f0:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80073f6:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2200      	movs	r2, #0
 80073fc:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007404:	2b00      	cmp	r3, #0
 8007406:	d00b      	beq.n	8007420 <tcp_process_refused_data+0x58>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6918      	ldr	r0, [r3, #16]
 8007412:	2300      	movs	r3, #0
 8007414:	68ba      	ldr	r2, [r7, #8]
 8007416:	6879      	ldr	r1, [r7, #4]
 8007418:	47a0      	blx	r4
 800741a:	4603      	mov	r3, r0
 800741c:	73fb      	strb	r3, [r7, #15]
 800741e:	e007      	b.n	8007430 <tcp_process_refused_data+0x68>
 8007420:	2300      	movs	r3, #0
 8007422:	68ba      	ldr	r2, [r7, #8]
 8007424:	6879      	ldr	r1, [r7, #4]
 8007426:	2000      	movs	r0, #0
 8007428:	f000 f8a4 	bl	8007574 <tcp_recv_null>
 800742c:	4603      	mov	r3, r0
 800742e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8007430:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d12a      	bne.n	800748e <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8007438:	7bbb      	ldrb	r3, [r7, #14]
 800743a:	f003 0320 	and.w	r3, r3, #32
 800743e:	2b00      	cmp	r3, #0
 8007440:	d033      	beq.n	80074aa <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007446:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800744a:	d005      	beq.n	8007458 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007450:	3301      	adds	r3, #1
 8007452:	b29a      	uxth	r2, r3
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800745e:	2b00      	cmp	r3, #0
 8007460:	d00b      	beq.n	800747a <tcp_process_refused_data+0xb2>
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	6918      	ldr	r0, [r3, #16]
 800746c:	2300      	movs	r3, #0
 800746e:	2200      	movs	r2, #0
 8007470:	6879      	ldr	r1, [r7, #4]
 8007472:	47a0      	blx	r4
 8007474:	4603      	mov	r3, r0
 8007476:	73fb      	strb	r3, [r7, #15]
 8007478:	e001      	b.n	800747e <tcp_process_refused_data+0xb6>
 800747a:	2300      	movs	r3, #0
 800747c:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800747e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007482:	f113 0f0d 	cmn.w	r3, #13
 8007486:	d110      	bne.n	80074aa <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8007488:	f06f 030c 	mvn.w	r3, #12
 800748c:	e00e      	b.n	80074ac <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800748e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007492:	f113 0f0d 	cmn.w	r3, #13
 8007496:	d102      	bne.n	800749e <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8007498:	f06f 030c 	mvn.w	r3, #12
 800749c:	e006      	b.n	80074ac <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	68ba      	ldr	r2, [r7, #8]
 80074a2:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 80074a4:	f06f 0304 	mvn.w	r3, #4
 80074a8:	e000      	b.n	80074ac <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 80074aa:	2300      	movs	r3, #0
}
 80074ac:	4618      	mov	r0, r3
 80074ae:	3714      	adds	r7, #20
 80074b0:	46bd      	mov	sp, r7
 80074b2:	bd90      	pop	{r4, r7, pc}
 80074b4:	080122b8 	.word	0x080122b8
 80074b8:	080127c8 	.word	0x080127c8
 80074bc:	080122fc 	.word	0x080122fc

080074c0 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b084      	sub	sp, #16
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 80074c8:	e007      	b.n	80074da <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 80074d0:	6878      	ldr	r0, [r7, #4]
 80074d2:	f000 f80a 	bl	80074ea <tcp_seg_free>
    seg = next;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d1f4      	bne.n	80074ca <tcp_segs_free+0xa>
  }
}
 80074e0:	bf00      	nop
 80074e2:	bf00      	nop
 80074e4:	3710      	adds	r7, #16
 80074e6:	46bd      	mov	sp, r7
 80074e8:	bd80      	pop	{r7, pc}

080074ea <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 80074ea:	b580      	push	{r7, lr}
 80074ec:	b082      	sub	sp, #8
 80074ee:	af00      	add	r7, sp, #0
 80074f0:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d00c      	beq.n	8007512 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	685b      	ldr	r3, [r3, #4]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d004      	beq.n	800750a <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	685b      	ldr	r3, [r3, #4]
 8007504:	4618      	mov	r0, r3
 8007506:	f7fe fd6d 	bl	8005fe4 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800750a:	6879      	ldr	r1, [r7, #4]
 800750c:	2003      	movs	r0, #3
 800750e:	f7fd ff07 	bl	8005320 <memp_free>
  }
}
 8007512:	bf00      	nop
 8007514:	3708      	adds	r7, #8
 8007516:	46bd      	mov	sp, r7
 8007518:	bd80      	pop	{r7, pc}
	...

0800751c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b084      	sub	sp, #16
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d106      	bne.n	8007538 <tcp_seg_copy+0x1c>
 800752a:	4b0f      	ldr	r3, [pc, #60]	; (8007568 <tcp_seg_copy+0x4c>)
 800752c:	f240 6282 	movw	r2, #1666	; 0x682
 8007530:	490e      	ldr	r1, [pc, #56]	; (800756c <tcp_seg_copy+0x50>)
 8007532:	480f      	ldr	r0, [pc, #60]	; (8007570 <tcp_seg_copy+0x54>)
 8007534:	f009 f8fe 	bl	8010734 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8007538:	2003      	movs	r0, #3
 800753a:	f7fd fe81 	bl	8005240 <memp_malloc>
 800753e:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d101      	bne.n	800754a <tcp_seg_copy+0x2e>
    return NULL;
 8007546:	2300      	movs	r3, #0
 8007548:	e00a      	b.n	8007560 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800754a:	2210      	movs	r2, #16
 800754c:	6879      	ldr	r1, [r7, #4]
 800754e:	68f8      	ldr	r0, [r7, #12]
 8007550:	f009 f8da 	bl	8010708 <memcpy>
  pbuf_ref(cseg->p);
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	685b      	ldr	r3, [r3, #4]
 8007558:	4618      	mov	r0, r3
 800755a:	f7fe fde3 	bl	8006124 <pbuf_ref>
  return cseg;
 800755e:	68fb      	ldr	r3, [r7, #12]
}
 8007560:	4618      	mov	r0, r3
 8007562:	3710      	adds	r7, #16
 8007564:	46bd      	mov	sp, r7
 8007566:	bd80      	pop	{r7, pc}
 8007568:	080122b8 	.word	0x080122b8
 800756c:	0801280c 	.word	0x0801280c
 8007570:	080122fc 	.word	0x080122fc

08007574 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8007574:	b580      	push	{r7, lr}
 8007576:	b084      	sub	sp, #16
 8007578:	af00      	add	r7, sp, #0
 800757a:	60f8      	str	r0, [r7, #12]
 800757c:	60b9      	str	r1, [r7, #8]
 800757e:	607a      	str	r2, [r7, #4]
 8007580:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8007582:	68bb      	ldr	r3, [r7, #8]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d109      	bne.n	800759c <tcp_recv_null+0x28>
 8007588:	4b12      	ldr	r3, [pc, #72]	; (80075d4 <tcp_recv_null+0x60>)
 800758a:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800758e:	4912      	ldr	r1, [pc, #72]	; (80075d8 <tcp_recv_null+0x64>)
 8007590:	4812      	ldr	r0, [pc, #72]	; (80075dc <tcp_recv_null+0x68>)
 8007592:	f009 f8cf 	bl	8010734 <iprintf>
 8007596:	f06f 030f 	mvn.w	r3, #15
 800759a:	e016      	b.n	80075ca <tcp_recv_null+0x56>

  if (p != NULL) {
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d009      	beq.n	80075b6 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	891b      	ldrh	r3, [r3, #8]
 80075a6:	4619      	mov	r1, r3
 80075a8:	68b8      	ldr	r0, [r7, #8]
 80075aa:	f7ff fb19 	bl	8006be0 <tcp_recved>
    pbuf_free(p);
 80075ae:	6878      	ldr	r0, [r7, #4]
 80075b0:	f7fe fd18 	bl	8005fe4 <pbuf_free>
 80075b4:	e008      	b.n	80075c8 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 80075b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d104      	bne.n	80075c8 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 80075be:	68b8      	ldr	r0, [r7, #8]
 80075c0:	f7ff f9be 	bl	8006940 <tcp_close>
 80075c4:	4603      	mov	r3, r0
 80075c6:	e000      	b.n	80075ca <tcp_recv_null+0x56>
  }
  return ERR_OK;
 80075c8:	2300      	movs	r3, #0
}
 80075ca:	4618      	mov	r0, r3
 80075cc:	3710      	adds	r7, #16
 80075ce:	46bd      	mov	sp, r7
 80075d0:	bd80      	pop	{r7, pc}
 80075d2:	bf00      	nop
 80075d4:	080122b8 	.word	0x080122b8
 80075d8:	08012828 	.word	0x08012828
 80075dc:	080122fc 	.word	0x080122fc

080075e0 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b086      	sub	sp, #24
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	4603      	mov	r3, r0
 80075e8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 80075ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	db01      	blt.n	80075f6 <tcp_kill_prio+0x16>
 80075f2:	79fb      	ldrb	r3, [r7, #7]
 80075f4:	e000      	b.n	80075f8 <tcp_kill_prio+0x18>
 80075f6:	237f      	movs	r3, #127	; 0x7f
 80075f8:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 80075fa:	7afb      	ldrb	r3, [r7, #11]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d034      	beq.n	800766a <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8007600:	7afb      	ldrb	r3, [r7, #11]
 8007602:	3b01      	subs	r3, #1
 8007604:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8007606:	2300      	movs	r3, #0
 8007608:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800760a:	2300      	movs	r3, #0
 800760c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800760e:	4b19      	ldr	r3, [pc, #100]	; (8007674 <tcp_kill_prio+0x94>)
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	617b      	str	r3, [r7, #20]
 8007614:	e01f      	b.n	8007656 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8007616:	697b      	ldr	r3, [r7, #20]
 8007618:	7d5b      	ldrb	r3, [r3, #21]
 800761a:	7afa      	ldrb	r2, [r7, #11]
 800761c:	429a      	cmp	r2, r3
 800761e:	d80c      	bhi.n	800763a <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8007620:	697b      	ldr	r3, [r7, #20]
 8007622:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8007624:	7afa      	ldrb	r2, [r7, #11]
 8007626:	429a      	cmp	r2, r3
 8007628:	d112      	bne.n	8007650 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800762a:	4b13      	ldr	r3, [pc, #76]	; (8007678 <tcp_kill_prio+0x98>)
 800762c:	681a      	ldr	r2, [r3, #0]
 800762e:	697b      	ldr	r3, [r7, #20]
 8007630:	6a1b      	ldr	r3, [r3, #32]
 8007632:	1ad3      	subs	r3, r2, r3
 8007634:	68fa      	ldr	r2, [r7, #12]
 8007636:	429a      	cmp	r2, r3
 8007638:	d80a      	bhi.n	8007650 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800763a:	4b0f      	ldr	r3, [pc, #60]	; (8007678 <tcp_kill_prio+0x98>)
 800763c:	681a      	ldr	r2, [r3, #0]
 800763e:	697b      	ldr	r3, [r7, #20]
 8007640:	6a1b      	ldr	r3, [r3, #32]
 8007642:	1ad3      	subs	r3, r2, r3
 8007644:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8007646:	697b      	ldr	r3, [r7, #20]
 8007648:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800764a:	697b      	ldr	r3, [r7, #20]
 800764c:	7d5b      	ldrb	r3, [r3, #21]
 800764e:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007650:	697b      	ldr	r3, [r7, #20]
 8007652:	68db      	ldr	r3, [r3, #12]
 8007654:	617b      	str	r3, [r7, #20]
 8007656:	697b      	ldr	r3, [r7, #20]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d1dc      	bne.n	8007616 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800765c:	693b      	ldr	r3, [r7, #16]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d004      	beq.n	800766c <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8007662:	6938      	ldr	r0, [r7, #16]
 8007664:	f7ff fa56 	bl	8006b14 <tcp_abort>
 8007668:	e000      	b.n	800766c <tcp_kill_prio+0x8c>
    return;
 800766a:	bf00      	nop
  }
}
 800766c:	3718      	adds	r7, #24
 800766e:	46bd      	mov	sp, r7
 8007670:	bd80      	pop	{r7, pc}
 8007672:	bf00      	nop
 8007674:	20007c60 	.word	0x20007c60
 8007678:	20007c54 	.word	0x20007c54

0800767c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b086      	sub	sp, #24
 8007680:	af00      	add	r7, sp, #0
 8007682:	4603      	mov	r3, r0
 8007684:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8007686:	79fb      	ldrb	r3, [r7, #7]
 8007688:	2b08      	cmp	r3, #8
 800768a:	d009      	beq.n	80076a0 <tcp_kill_state+0x24>
 800768c:	79fb      	ldrb	r3, [r7, #7]
 800768e:	2b09      	cmp	r3, #9
 8007690:	d006      	beq.n	80076a0 <tcp_kill_state+0x24>
 8007692:	4b1a      	ldr	r3, [pc, #104]	; (80076fc <tcp_kill_state+0x80>)
 8007694:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8007698:	4919      	ldr	r1, [pc, #100]	; (8007700 <tcp_kill_state+0x84>)
 800769a:	481a      	ldr	r0, [pc, #104]	; (8007704 <tcp_kill_state+0x88>)
 800769c:	f009 f84a 	bl	8010734 <iprintf>

  inactivity = 0;
 80076a0:	2300      	movs	r3, #0
 80076a2:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80076a4:	2300      	movs	r3, #0
 80076a6:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80076a8:	4b17      	ldr	r3, [pc, #92]	; (8007708 <tcp_kill_state+0x8c>)
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	617b      	str	r3, [r7, #20]
 80076ae:	e017      	b.n	80076e0 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 80076b0:	697b      	ldr	r3, [r7, #20]
 80076b2:	7d1b      	ldrb	r3, [r3, #20]
 80076b4:	79fa      	ldrb	r2, [r7, #7]
 80076b6:	429a      	cmp	r2, r3
 80076b8:	d10f      	bne.n	80076da <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80076ba:	4b14      	ldr	r3, [pc, #80]	; (800770c <tcp_kill_state+0x90>)
 80076bc:	681a      	ldr	r2, [r3, #0]
 80076be:	697b      	ldr	r3, [r7, #20]
 80076c0:	6a1b      	ldr	r3, [r3, #32]
 80076c2:	1ad3      	subs	r3, r2, r3
 80076c4:	68fa      	ldr	r2, [r7, #12]
 80076c6:	429a      	cmp	r2, r3
 80076c8:	d807      	bhi.n	80076da <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 80076ca:	4b10      	ldr	r3, [pc, #64]	; (800770c <tcp_kill_state+0x90>)
 80076cc:	681a      	ldr	r2, [r3, #0]
 80076ce:	697b      	ldr	r3, [r7, #20]
 80076d0:	6a1b      	ldr	r3, [r3, #32]
 80076d2:	1ad3      	subs	r3, r2, r3
 80076d4:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 80076d6:	697b      	ldr	r3, [r7, #20]
 80076d8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80076da:	697b      	ldr	r3, [r7, #20]
 80076dc:	68db      	ldr	r3, [r3, #12]
 80076de:	617b      	str	r3, [r7, #20]
 80076e0:	697b      	ldr	r3, [r7, #20]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d1e4      	bne.n	80076b0 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 80076e6:	693b      	ldr	r3, [r7, #16]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d003      	beq.n	80076f4 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 80076ec:	2100      	movs	r1, #0
 80076ee:	6938      	ldr	r0, [r7, #16]
 80076f0:	f7ff f952 	bl	8006998 <tcp_abandon>
  }
}
 80076f4:	bf00      	nop
 80076f6:	3718      	adds	r7, #24
 80076f8:	46bd      	mov	sp, r7
 80076fa:	bd80      	pop	{r7, pc}
 80076fc:	080122b8 	.word	0x080122b8
 8007700:	08012844 	.word	0x08012844
 8007704:	080122fc 	.word	0x080122fc
 8007708:	20007c60 	.word	0x20007c60
 800770c:	20007c54 	.word	0x20007c54

08007710 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b084      	sub	sp, #16
 8007714:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8007716:	2300      	movs	r3, #0
 8007718:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800771a:	2300      	movs	r3, #0
 800771c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800771e:	4b12      	ldr	r3, [pc, #72]	; (8007768 <tcp_kill_timewait+0x58>)
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	60fb      	str	r3, [r7, #12]
 8007724:	e012      	b.n	800774c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8007726:	4b11      	ldr	r3, [pc, #68]	; (800776c <tcp_kill_timewait+0x5c>)
 8007728:	681a      	ldr	r2, [r3, #0]
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	6a1b      	ldr	r3, [r3, #32]
 800772e:	1ad3      	subs	r3, r2, r3
 8007730:	687a      	ldr	r2, [r7, #4]
 8007732:	429a      	cmp	r2, r3
 8007734:	d807      	bhi.n	8007746 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8007736:	4b0d      	ldr	r3, [pc, #52]	; (800776c <tcp_kill_timewait+0x5c>)
 8007738:	681a      	ldr	r2, [r3, #0]
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	6a1b      	ldr	r3, [r3, #32]
 800773e:	1ad3      	subs	r3, r2, r3
 8007740:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	68db      	ldr	r3, [r3, #12]
 800774a:	60fb      	str	r3, [r7, #12]
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d1e9      	bne.n	8007726 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8007752:	68bb      	ldr	r3, [r7, #8]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d002      	beq.n	800775e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8007758:	68b8      	ldr	r0, [r7, #8]
 800775a:	f7ff f9db 	bl	8006b14 <tcp_abort>
  }
}
 800775e:	bf00      	nop
 8007760:	3710      	adds	r7, #16
 8007762:	46bd      	mov	sp, r7
 8007764:	bd80      	pop	{r7, pc}
 8007766:	bf00      	nop
 8007768:	20007c64 	.word	0x20007c64
 800776c:	20007c54 	.word	0x20007c54

08007770 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b082      	sub	sp, #8
 8007774:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8007776:	4b10      	ldr	r3, [pc, #64]	; (80077b8 <tcp_handle_closepend+0x48>)
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800777c:	e014      	b.n	80077a8 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	68db      	ldr	r3, [r3, #12]
 8007782:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	8b5b      	ldrh	r3, [r3, #26]
 8007788:	f003 0308 	and.w	r3, r3, #8
 800778c:	2b00      	cmp	r3, #0
 800778e:	d009      	beq.n	80077a4 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	8b5b      	ldrh	r3, [r3, #26]
 8007794:	f023 0308 	bic.w	r3, r3, #8
 8007798:	b29a      	uxth	r2, r3
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	f7ff f864 	bl	800686c <tcp_close_shutdown_fin>
    }
    pcb = next;
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d1e7      	bne.n	800777e <tcp_handle_closepend+0xe>
  }
}
 80077ae:	bf00      	nop
 80077b0:	bf00      	nop
 80077b2:	3708      	adds	r7, #8
 80077b4:	46bd      	mov	sp, r7
 80077b6:	bd80      	pop	{r7, pc}
 80077b8:	20007c60 	.word	0x20007c60

080077bc <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b084      	sub	sp, #16
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	4603      	mov	r3, r0
 80077c4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80077c6:	2001      	movs	r0, #1
 80077c8:	f7fd fd3a 	bl	8005240 <memp_malloc>
 80077cc:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d126      	bne.n	8007822 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 80077d4:	f7ff ffcc 	bl	8007770 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 80077d8:	f7ff ff9a 	bl	8007710 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80077dc:	2001      	movs	r0, #1
 80077de:	f7fd fd2f 	bl	8005240 <memp_malloc>
 80077e2:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d11b      	bne.n	8007822 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 80077ea:	2009      	movs	r0, #9
 80077ec:	f7ff ff46 	bl	800767c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80077f0:	2001      	movs	r0, #1
 80077f2:	f7fd fd25 	bl	8005240 <memp_malloc>
 80077f6:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d111      	bne.n	8007822 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 80077fe:	2008      	movs	r0, #8
 8007800:	f7ff ff3c 	bl	800767c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007804:	2001      	movs	r0, #1
 8007806:	f7fd fd1b 	bl	8005240 <memp_malloc>
 800780a:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d107      	bne.n	8007822 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8007812:	79fb      	ldrb	r3, [r7, #7]
 8007814:	4618      	mov	r0, r3
 8007816:	f7ff fee3 	bl	80075e0 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800781a:	2001      	movs	r0, #1
 800781c:	f7fd fd10 	bl	8005240 <memp_malloc>
 8007820:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d03f      	beq.n	80078a8 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8007828:	229c      	movs	r2, #156	; 0x9c
 800782a:	2100      	movs	r1, #0
 800782c:	68f8      	ldr	r0, [r7, #12]
 800782e:	f008 ff79 	bl	8010724 <memset>
    pcb->prio = prio;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	79fa      	ldrb	r2, [r7, #7]
 8007836:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800783e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8007848:	855a      	strh	r2, [r3, #42]	; 0x2a
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	22ff      	movs	r2, #255	; 0xff
 8007856:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	f44f 7206 	mov.w	r2, #536	; 0x218
 800785e:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	2206      	movs	r2, #6
 8007864:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	2206      	movs	r2, #6
 800786c:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007874:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	2201      	movs	r2, #1
 800787a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800787e:	4b0d      	ldr	r3, [pc, #52]	; (80078b4 <tcp_alloc+0xf8>)
 8007880:	681a      	ldr	r2, [r3, #0]
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8007886:	4b0c      	ldr	r3, [pc, #48]	; (80078b8 <tcp_alloc+0xfc>)
 8007888:	781a      	ldrb	r2, [r3, #0]
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8007894:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	4a08      	ldr	r2, [pc, #32]	; (80078bc <tcp_alloc+0x100>)
 800789c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	4a07      	ldr	r2, [pc, #28]	; (80078c0 <tcp_alloc+0x104>)
 80078a4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 80078a8:	68fb      	ldr	r3, [r7, #12]
}
 80078aa:	4618      	mov	r0, r3
 80078ac:	3710      	adds	r7, #16
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bd80      	pop	{r7, pc}
 80078b2:	bf00      	nop
 80078b4:	20007c54 	.word	0x20007c54
 80078b8:	20007c6a 	.word	0x20007c6a
 80078bc:	08007575 	.word	0x08007575
 80078c0:	006ddd00 	.word	0x006ddd00

080078c4 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b082      	sub	sp, #8
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d107      	bne.n	80078e2 <tcp_pcb_purge+0x1e>
 80078d2:	4b21      	ldr	r3, [pc, #132]	; (8007958 <tcp_pcb_purge+0x94>)
 80078d4:	f640 0251 	movw	r2, #2129	; 0x851
 80078d8:	4920      	ldr	r1, [pc, #128]	; (800795c <tcp_pcb_purge+0x98>)
 80078da:	4821      	ldr	r0, [pc, #132]	; (8007960 <tcp_pcb_purge+0x9c>)
 80078dc:	f008 ff2a 	bl	8010734 <iprintf>
 80078e0:	e037      	b.n	8007952 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	7d1b      	ldrb	r3, [r3, #20]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d033      	beq.n	8007952 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 80078ee:	2b0a      	cmp	r3, #10
 80078f0:	d02f      	beq.n	8007952 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 80078f6:	2b01      	cmp	r3, #1
 80078f8:	d02b      	beq.n	8007952 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d007      	beq.n	8007912 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007906:	4618      	mov	r0, r3
 8007908:	f7fe fb6c 	bl	8005fe4 <pbuf_free>
      pcb->refused_data = NULL;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2200      	movs	r2, #0
 8007910:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007916:	2b00      	cmp	r3, #0
 8007918:	d002      	beq.n	8007920 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800791a:	6878      	ldr	r0, [r7, #4]
 800791c:	f000 f986 	bl	8007c2c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007926:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800792c:	4618      	mov	r0, r3
 800792e:	f7ff fdc7 	bl	80074c0 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007936:	4618      	mov	r0, r3
 8007938:	f7ff fdc2 	bl	80074c0 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2200      	movs	r2, #0
 8007940:	66da      	str	r2, [r3, #108]	; 0x6c
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2200      	movs	r2, #0
 800794e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8007952:	3708      	adds	r7, #8
 8007954:	46bd      	mov	sp, r7
 8007956:	bd80      	pop	{r7, pc}
 8007958:	080122b8 	.word	0x080122b8
 800795c:	08012904 	.word	0x08012904
 8007960:	080122fc 	.word	0x080122fc

08007964 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b084      	sub	sp, #16
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
 800796c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d106      	bne.n	8007982 <tcp_pcb_remove+0x1e>
 8007974:	4b3e      	ldr	r3, [pc, #248]	; (8007a70 <tcp_pcb_remove+0x10c>)
 8007976:	f640 0283 	movw	r2, #2179	; 0x883
 800797a:	493e      	ldr	r1, [pc, #248]	; (8007a74 <tcp_pcb_remove+0x110>)
 800797c:	483e      	ldr	r0, [pc, #248]	; (8007a78 <tcp_pcb_remove+0x114>)
 800797e:	f008 fed9 	bl	8010734 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d106      	bne.n	8007996 <tcp_pcb_remove+0x32>
 8007988:	4b39      	ldr	r3, [pc, #228]	; (8007a70 <tcp_pcb_remove+0x10c>)
 800798a:	f640 0284 	movw	r2, #2180	; 0x884
 800798e:	493b      	ldr	r1, [pc, #236]	; (8007a7c <tcp_pcb_remove+0x118>)
 8007990:	4839      	ldr	r0, [pc, #228]	; (8007a78 <tcp_pcb_remove+0x114>)
 8007992:	f008 fecf 	bl	8010734 <iprintf>

  TCP_RMV(pcblist, pcb);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	683a      	ldr	r2, [r7, #0]
 800799c:	429a      	cmp	r2, r3
 800799e:	d105      	bne.n	80079ac <tcp_pcb_remove+0x48>
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	68da      	ldr	r2, [r3, #12]
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	601a      	str	r2, [r3, #0]
 80079aa:	e013      	b.n	80079d4 <tcp_pcb_remove+0x70>
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	60fb      	str	r3, [r7, #12]
 80079b2:	e00c      	b.n	80079ce <tcp_pcb_remove+0x6a>
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	68db      	ldr	r3, [r3, #12]
 80079b8:	683a      	ldr	r2, [r7, #0]
 80079ba:	429a      	cmp	r2, r3
 80079bc:	d104      	bne.n	80079c8 <tcp_pcb_remove+0x64>
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	68da      	ldr	r2, [r3, #12]
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	60da      	str	r2, [r3, #12]
 80079c6:	e005      	b.n	80079d4 <tcp_pcb_remove+0x70>
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	68db      	ldr	r3, [r3, #12]
 80079cc:	60fb      	str	r3, [r7, #12]
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d1ef      	bne.n	80079b4 <tcp_pcb_remove+0x50>
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	2200      	movs	r2, #0
 80079d8:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 80079da:	6838      	ldr	r0, [r7, #0]
 80079dc:	f7ff ff72 	bl	80078c4 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	7d1b      	ldrb	r3, [r3, #20]
 80079e4:	2b0a      	cmp	r3, #10
 80079e6:	d013      	beq.n	8007a10 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 80079ec:	2b01      	cmp	r3, #1
 80079ee:	d00f      	beq.n	8007a10 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	8b5b      	ldrh	r3, [r3, #26]
 80079f4:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d009      	beq.n	8007a10 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	8b5b      	ldrh	r3, [r3, #26]
 8007a00:	f043 0302 	orr.w	r3, r3, #2
 8007a04:	b29a      	uxth	r2, r3
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8007a0a:	6838      	ldr	r0, [r7, #0]
 8007a0c:	f002 ff6e 	bl	800a8ec <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	7d1b      	ldrb	r3, [r3, #20]
 8007a14:	2b01      	cmp	r3, #1
 8007a16:	d020      	beq.n	8007a5a <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d006      	beq.n	8007a2e <tcp_pcb_remove+0xca>
 8007a20:	4b13      	ldr	r3, [pc, #76]	; (8007a70 <tcp_pcb_remove+0x10c>)
 8007a22:	f640 0293 	movw	r2, #2195	; 0x893
 8007a26:	4916      	ldr	r1, [pc, #88]	; (8007a80 <tcp_pcb_remove+0x11c>)
 8007a28:	4813      	ldr	r0, [pc, #76]	; (8007a78 <tcp_pcb_remove+0x114>)
 8007a2a:	f008 fe83 	bl	8010734 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d006      	beq.n	8007a44 <tcp_pcb_remove+0xe0>
 8007a36:	4b0e      	ldr	r3, [pc, #56]	; (8007a70 <tcp_pcb_remove+0x10c>)
 8007a38:	f640 0294 	movw	r2, #2196	; 0x894
 8007a3c:	4911      	ldr	r1, [pc, #68]	; (8007a84 <tcp_pcb_remove+0x120>)
 8007a3e:	480e      	ldr	r0, [pc, #56]	; (8007a78 <tcp_pcb_remove+0x114>)
 8007a40:	f008 fe78 	bl	8010734 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d006      	beq.n	8007a5a <tcp_pcb_remove+0xf6>
 8007a4c:	4b08      	ldr	r3, [pc, #32]	; (8007a70 <tcp_pcb_remove+0x10c>)
 8007a4e:	f640 0296 	movw	r2, #2198	; 0x896
 8007a52:	490d      	ldr	r1, [pc, #52]	; (8007a88 <tcp_pcb_remove+0x124>)
 8007a54:	4808      	ldr	r0, [pc, #32]	; (8007a78 <tcp_pcb_remove+0x114>)
 8007a56:	f008 fe6d 	bl	8010734 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	2200      	movs	r2, #0
 8007a64:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8007a66:	bf00      	nop
 8007a68:	3710      	adds	r7, #16
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	bd80      	pop	{r7, pc}
 8007a6e:	bf00      	nop
 8007a70:	080122b8 	.word	0x080122b8
 8007a74:	08012920 	.word	0x08012920
 8007a78:	080122fc 	.word	0x080122fc
 8007a7c:	0801293c 	.word	0x0801293c
 8007a80:	0801295c 	.word	0x0801295c
 8007a84:	08012974 	.word	0x08012974
 8007a88:	08012990 	.word	0x08012990

08007a8c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b082      	sub	sp, #8
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d106      	bne.n	8007aa8 <tcp_next_iss+0x1c>
 8007a9a:	4b0a      	ldr	r3, [pc, #40]	; (8007ac4 <tcp_next_iss+0x38>)
 8007a9c:	f640 02af 	movw	r2, #2223	; 0x8af
 8007aa0:	4909      	ldr	r1, [pc, #36]	; (8007ac8 <tcp_next_iss+0x3c>)
 8007aa2:	480a      	ldr	r0, [pc, #40]	; (8007acc <tcp_next_iss+0x40>)
 8007aa4:	f008 fe46 	bl	8010734 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8007aa8:	4b09      	ldr	r3, [pc, #36]	; (8007ad0 <tcp_next_iss+0x44>)
 8007aaa:	681a      	ldr	r2, [r3, #0]
 8007aac:	4b09      	ldr	r3, [pc, #36]	; (8007ad4 <tcp_next_iss+0x48>)
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	4413      	add	r3, r2
 8007ab2:	4a07      	ldr	r2, [pc, #28]	; (8007ad0 <tcp_next_iss+0x44>)
 8007ab4:	6013      	str	r3, [r2, #0]
  return iss;
 8007ab6:	4b06      	ldr	r3, [pc, #24]	; (8007ad0 <tcp_next_iss+0x44>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8007aba:	4618      	mov	r0, r3
 8007abc:	3708      	adds	r7, #8
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	bd80      	pop	{r7, pc}
 8007ac2:	bf00      	nop
 8007ac4:	080122b8 	.word	0x080122b8
 8007ac8:	080129a8 	.word	0x080129a8
 8007acc:	080122fc 	.word	0x080122fc
 8007ad0:	20000024 	.word	0x20000024
 8007ad4:	20007c54 	.word	0x20007c54

08007ad8 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b086      	sub	sp, #24
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	4603      	mov	r3, r0
 8007ae0:	60b9      	str	r1, [r7, #8]
 8007ae2:	607a      	str	r2, [r7, #4]
 8007ae4:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d106      	bne.n	8007afa <tcp_eff_send_mss_netif+0x22>
 8007aec:	4b14      	ldr	r3, [pc, #80]	; (8007b40 <tcp_eff_send_mss_netif+0x68>)
 8007aee:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8007af2:	4914      	ldr	r1, [pc, #80]	; (8007b44 <tcp_eff_send_mss_netif+0x6c>)
 8007af4:	4814      	ldr	r0, [pc, #80]	; (8007b48 <tcp_eff_send_mss_netif+0x70>)
 8007af6:	f008 fe1d 	bl	8010734 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8007afa:	68bb      	ldr	r3, [r7, #8]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d101      	bne.n	8007b04 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8007b00:	89fb      	ldrh	r3, [r7, #14]
 8007b02:	e019      	b.n	8007b38 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8007b04:	68bb      	ldr	r3, [r7, #8]
 8007b06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b08:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8007b0a:	8afb      	ldrh	r3, [r7, #22]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d012      	beq.n	8007b36 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8007b10:	2328      	movs	r3, #40	; 0x28
 8007b12:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8007b14:	8afa      	ldrh	r2, [r7, #22]
 8007b16:	8abb      	ldrh	r3, [r7, #20]
 8007b18:	429a      	cmp	r2, r3
 8007b1a:	d904      	bls.n	8007b26 <tcp_eff_send_mss_netif+0x4e>
 8007b1c:	8afa      	ldrh	r2, [r7, #22]
 8007b1e:	8abb      	ldrh	r3, [r7, #20]
 8007b20:	1ad3      	subs	r3, r2, r3
 8007b22:	b29b      	uxth	r3, r3
 8007b24:	e000      	b.n	8007b28 <tcp_eff_send_mss_netif+0x50>
 8007b26:	2300      	movs	r3, #0
 8007b28:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8007b2a:	8a7a      	ldrh	r2, [r7, #18]
 8007b2c:	89fb      	ldrh	r3, [r7, #14]
 8007b2e:	4293      	cmp	r3, r2
 8007b30:	bf28      	it	cs
 8007b32:	4613      	movcs	r3, r2
 8007b34:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8007b36:	89fb      	ldrh	r3, [r7, #14]
}
 8007b38:	4618      	mov	r0, r3
 8007b3a:	3718      	adds	r7, #24
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	bd80      	pop	{r7, pc}
 8007b40:	080122b8 	.word	0x080122b8
 8007b44:	080129c4 	.word	0x080129c4
 8007b48:	080122fc 	.word	0x080122fc

08007b4c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b084      	sub	sp, #16
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
 8007b54:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d119      	bne.n	8007b94 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8007b60:	4b10      	ldr	r3, [pc, #64]	; (8007ba4 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8007b62:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8007b66:	4910      	ldr	r1, [pc, #64]	; (8007ba8 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8007b68:	4810      	ldr	r0, [pc, #64]	; (8007bac <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8007b6a:	f008 fde3 	bl	8010734 <iprintf>

  while (pcb != NULL) {
 8007b6e:	e011      	b.n	8007b94 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	681a      	ldr	r2, [r3, #0]
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	429a      	cmp	r2, r3
 8007b7a:	d108      	bne.n	8007b8e <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	68db      	ldr	r3, [r3, #12]
 8007b80:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8007b82:	68f8      	ldr	r0, [r7, #12]
 8007b84:	f7fe ffc6 	bl	8006b14 <tcp_abort>
      pcb = next;
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	60fb      	str	r3, [r7, #12]
 8007b8c:	e002      	b.n	8007b94 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	68db      	ldr	r3, [r3, #12]
 8007b92:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d1ea      	bne.n	8007b70 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8007b9a:	bf00      	nop
 8007b9c:	bf00      	nop
 8007b9e:	3710      	adds	r7, #16
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	bd80      	pop	{r7, pc}
 8007ba4:	080122b8 	.word	0x080122b8
 8007ba8:	080129ec 	.word	0x080129ec
 8007bac:	080122fc 	.word	0x080122fc

08007bb0 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b084      	sub	sp, #16
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
 8007bb8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d02a      	beq.n	8007c16 <tcp_netif_ip_addr_changed+0x66>
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d026      	beq.n	8007c16 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8007bc8:	4b15      	ldr	r3, [pc, #84]	; (8007c20 <tcp_netif_ip_addr_changed+0x70>)
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	4619      	mov	r1, r3
 8007bce:	6878      	ldr	r0, [r7, #4]
 8007bd0:	f7ff ffbc 	bl	8007b4c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8007bd4:	4b13      	ldr	r3, [pc, #76]	; (8007c24 <tcp_netif_ip_addr_changed+0x74>)
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	4619      	mov	r1, r3
 8007bda:	6878      	ldr	r0, [r7, #4]
 8007bdc:	f7ff ffb6 	bl	8007b4c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d017      	beq.n	8007c16 <tcp_netif_ip_addr_changed+0x66>
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d013      	beq.n	8007c16 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8007bee:	4b0e      	ldr	r3, [pc, #56]	; (8007c28 <tcp_netif_ip_addr_changed+0x78>)
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	60fb      	str	r3, [r7, #12]
 8007bf4:	e00c      	b.n	8007c10 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	681a      	ldr	r2, [r3, #0]
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	429a      	cmp	r2, r3
 8007c00:	d103      	bne.n	8007c0a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	681a      	ldr	r2, [r3, #0]
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	68db      	ldr	r3, [r3, #12]
 8007c0e:	60fb      	str	r3, [r7, #12]
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d1ef      	bne.n	8007bf6 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8007c16:	bf00      	nop
 8007c18:	3710      	adds	r7, #16
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}
 8007c1e:	bf00      	nop
 8007c20:	20007c60 	.word	0x20007c60
 8007c24:	20007c58 	.word	0x20007c58
 8007c28:	20007c5c 	.word	0x20007c5c

08007c2c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b082      	sub	sp, #8
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d007      	beq.n	8007c4c <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c40:	4618      	mov	r0, r3
 8007c42:	f7ff fc3d 	bl	80074c0 <tcp_segs_free>
    pcb->ooseq = NULL;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2200      	movs	r2, #0
 8007c4a:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8007c4c:	bf00      	nop
 8007c4e:	3708      	adds	r7, #8
 8007c50:	46bd      	mov	sp, r7
 8007c52:	bd80      	pop	{r7, pc}

08007c54 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8007c54:	b590      	push	{r4, r7, lr}
 8007c56:	b08d      	sub	sp, #52	; 0x34
 8007c58:	af04      	add	r7, sp, #16
 8007c5a:	6078      	str	r0, [r7, #4]
 8007c5c:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d105      	bne.n	8007c70 <tcp_input+0x1c>
 8007c64:	4b9b      	ldr	r3, [pc, #620]	; (8007ed4 <tcp_input+0x280>)
 8007c66:	2283      	movs	r2, #131	; 0x83
 8007c68:	499b      	ldr	r1, [pc, #620]	; (8007ed8 <tcp_input+0x284>)
 8007c6a:	489c      	ldr	r0, [pc, #624]	; (8007edc <tcp_input+0x288>)
 8007c6c:	f008 fd62 	bl	8010734 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	685b      	ldr	r3, [r3, #4]
 8007c74:	4a9a      	ldr	r2, [pc, #616]	; (8007ee0 <tcp_input+0x28c>)
 8007c76:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	895b      	ldrh	r3, [r3, #10]
 8007c7c:	2b13      	cmp	r3, #19
 8007c7e:	f240 83d1 	bls.w	8008424 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8007c82:	4b98      	ldr	r3, [pc, #608]	; (8007ee4 <tcp_input+0x290>)
 8007c84:	695b      	ldr	r3, [r3, #20]
 8007c86:	4a97      	ldr	r2, [pc, #604]	; (8007ee4 <tcp_input+0x290>)
 8007c88:	6812      	ldr	r2, [r2, #0]
 8007c8a:	4611      	mov	r1, r2
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	f007 fdb1 	bl	800f7f4 <ip4_addr_isbroadcast_u32>
 8007c92:	4603      	mov	r3, r0
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	f040 83c7 	bne.w	8008428 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8007c9a:	4b92      	ldr	r3, [pc, #584]	; (8007ee4 <tcp_input+0x290>)
 8007c9c:	695b      	ldr	r3, [r3, #20]
 8007c9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8007ca2:	2be0      	cmp	r3, #224	; 0xe0
 8007ca4:	f000 83c0 	beq.w	8008428 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8007ca8:	4b8d      	ldr	r3, [pc, #564]	; (8007ee0 <tcp_input+0x28c>)
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	899b      	ldrh	r3, [r3, #12]
 8007cae:	b29b      	uxth	r3, r3
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	f7fc fd95 	bl	80047e0 <lwip_htons>
 8007cb6:	4603      	mov	r3, r0
 8007cb8:	0b1b      	lsrs	r3, r3, #12
 8007cba:	b29b      	uxth	r3, r3
 8007cbc:	b2db      	uxtb	r3, r3
 8007cbe:	009b      	lsls	r3, r3, #2
 8007cc0:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8007cc2:	7cbb      	ldrb	r3, [r7, #18]
 8007cc4:	2b13      	cmp	r3, #19
 8007cc6:	f240 83b1 	bls.w	800842c <tcp_input+0x7d8>
 8007cca:	7cbb      	ldrb	r3, [r7, #18]
 8007ccc:	b29a      	uxth	r2, r3
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	891b      	ldrh	r3, [r3, #8]
 8007cd2:	429a      	cmp	r2, r3
 8007cd4:	f200 83aa 	bhi.w	800842c <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8007cd8:	7cbb      	ldrb	r3, [r7, #18]
 8007cda:	b29b      	uxth	r3, r3
 8007cdc:	3b14      	subs	r3, #20
 8007cde:	b29a      	uxth	r2, r3
 8007ce0:	4b81      	ldr	r3, [pc, #516]	; (8007ee8 <tcp_input+0x294>)
 8007ce2:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8007ce4:	4b81      	ldr	r3, [pc, #516]	; (8007eec <tcp_input+0x298>)
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	895a      	ldrh	r2, [r3, #10]
 8007cee:	7cbb      	ldrb	r3, [r7, #18]
 8007cf0:	b29b      	uxth	r3, r3
 8007cf2:	429a      	cmp	r2, r3
 8007cf4:	d309      	bcc.n	8007d0a <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8007cf6:	4b7c      	ldr	r3, [pc, #496]	; (8007ee8 <tcp_input+0x294>)
 8007cf8:	881a      	ldrh	r2, [r3, #0]
 8007cfa:	4b7d      	ldr	r3, [pc, #500]	; (8007ef0 <tcp_input+0x29c>)
 8007cfc:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8007cfe:	7cbb      	ldrb	r3, [r7, #18]
 8007d00:	4619      	mov	r1, r3
 8007d02:	6878      	ldr	r0, [r7, #4]
 8007d04:	f7fe f8e8 	bl	8005ed8 <pbuf_remove_header>
 8007d08:	e04e      	b.n	8007da8 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d105      	bne.n	8007d1e <tcp_input+0xca>
 8007d12:	4b70      	ldr	r3, [pc, #448]	; (8007ed4 <tcp_input+0x280>)
 8007d14:	22c2      	movs	r2, #194	; 0xc2
 8007d16:	4977      	ldr	r1, [pc, #476]	; (8007ef4 <tcp_input+0x2a0>)
 8007d18:	4870      	ldr	r0, [pc, #448]	; (8007edc <tcp_input+0x288>)
 8007d1a:	f008 fd0b 	bl	8010734 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8007d1e:	2114      	movs	r1, #20
 8007d20:	6878      	ldr	r0, [r7, #4]
 8007d22:	f7fe f8d9 	bl	8005ed8 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	895a      	ldrh	r2, [r3, #10]
 8007d2a:	4b71      	ldr	r3, [pc, #452]	; (8007ef0 <tcp_input+0x29c>)
 8007d2c:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8007d2e:	4b6e      	ldr	r3, [pc, #440]	; (8007ee8 <tcp_input+0x294>)
 8007d30:	881a      	ldrh	r2, [r3, #0]
 8007d32:	4b6f      	ldr	r3, [pc, #444]	; (8007ef0 <tcp_input+0x29c>)
 8007d34:	881b      	ldrh	r3, [r3, #0]
 8007d36:	1ad3      	subs	r3, r2, r3
 8007d38:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8007d3a:	4b6d      	ldr	r3, [pc, #436]	; (8007ef0 <tcp_input+0x29c>)
 8007d3c:	881b      	ldrh	r3, [r3, #0]
 8007d3e:	4619      	mov	r1, r3
 8007d40:	6878      	ldr	r0, [r7, #4]
 8007d42:	f7fe f8c9 	bl	8005ed8 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	895b      	ldrh	r3, [r3, #10]
 8007d4c:	8a3a      	ldrh	r2, [r7, #16]
 8007d4e:	429a      	cmp	r2, r3
 8007d50:	f200 836e 	bhi.w	8008430 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	685b      	ldr	r3, [r3, #4]
 8007d5a:	4a64      	ldr	r2, [pc, #400]	; (8007eec <tcp_input+0x298>)
 8007d5c:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	8a3a      	ldrh	r2, [r7, #16]
 8007d64:	4611      	mov	r1, r2
 8007d66:	4618      	mov	r0, r3
 8007d68:	f7fe f8b6 	bl	8005ed8 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	891a      	ldrh	r2, [r3, #8]
 8007d70:	8a3b      	ldrh	r3, [r7, #16]
 8007d72:	1ad3      	subs	r3, r2, r3
 8007d74:	b29a      	uxth	r2, r3
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	895b      	ldrh	r3, [r3, #10]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d005      	beq.n	8007d8e <tcp_input+0x13a>
 8007d82:	4b54      	ldr	r3, [pc, #336]	; (8007ed4 <tcp_input+0x280>)
 8007d84:	22df      	movs	r2, #223	; 0xdf
 8007d86:	495c      	ldr	r1, [pc, #368]	; (8007ef8 <tcp_input+0x2a4>)
 8007d88:	4854      	ldr	r0, [pc, #336]	; (8007edc <tcp_input+0x288>)
 8007d8a:	f008 fcd3 	bl	8010734 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	891a      	ldrh	r2, [r3, #8]
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	891b      	ldrh	r3, [r3, #8]
 8007d98:	429a      	cmp	r2, r3
 8007d9a:	d005      	beq.n	8007da8 <tcp_input+0x154>
 8007d9c:	4b4d      	ldr	r3, [pc, #308]	; (8007ed4 <tcp_input+0x280>)
 8007d9e:	22e0      	movs	r2, #224	; 0xe0
 8007da0:	4956      	ldr	r1, [pc, #344]	; (8007efc <tcp_input+0x2a8>)
 8007da2:	484e      	ldr	r0, [pc, #312]	; (8007edc <tcp_input+0x288>)
 8007da4:	f008 fcc6 	bl	8010734 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8007da8:	4b4d      	ldr	r3, [pc, #308]	; (8007ee0 <tcp_input+0x28c>)
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	881b      	ldrh	r3, [r3, #0]
 8007dae:	b29b      	uxth	r3, r3
 8007db0:	4a4b      	ldr	r2, [pc, #300]	; (8007ee0 <tcp_input+0x28c>)
 8007db2:	6814      	ldr	r4, [r2, #0]
 8007db4:	4618      	mov	r0, r3
 8007db6:	f7fc fd13 	bl	80047e0 <lwip_htons>
 8007dba:	4603      	mov	r3, r0
 8007dbc:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8007dbe:	4b48      	ldr	r3, [pc, #288]	; (8007ee0 <tcp_input+0x28c>)
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	885b      	ldrh	r3, [r3, #2]
 8007dc4:	b29b      	uxth	r3, r3
 8007dc6:	4a46      	ldr	r2, [pc, #280]	; (8007ee0 <tcp_input+0x28c>)
 8007dc8:	6814      	ldr	r4, [r2, #0]
 8007dca:	4618      	mov	r0, r3
 8007dcc:	f7fc fd08 	bl	80047e0 <lwip_htons>
 8007dd0:	4603      	mov	r3, r0
 8007dd2:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8007dd4:	4b42      	ldr	r3, [pc, #264]	; (8007ee0 <tcp_input+0x28c>)
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	685b      	ldr	r3, [r3, #4]
 8007dda:	4a41      	ldr	r2, [pc, #260]	; (8007ee0 <tcp_input+0x28c>)
 8007ddc:	6814      	ldr	r4, [r2, #0]
 8007dde:	4618      	mov	r0, r3
 8007de0:	f7fc fd13 	bl	800480a <lwip_htonl>
 8007de4:	4603      	mov	r3, r0
 8007de6:	6063      	str	r3, [r4, #4]
 8007de8:	6863      	ldr	r3, [r4, #4]
 8007dea:	4a45      	ldr	r2, [pc, #276]	; (8007f00 <tcp_input+0x2ac>)
 8007dec:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8007dee:	4b3c      	ldr	r3, [pc, #240]	; (8007ee0 <tcp_input+0x28c>)
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	689b      	ldr	r3, [r3, #8]
 8007df4:	4a3a      	ldr	r2, [pc, #232]	; (8007ee0 <tcp_input+0x28c>)
 8007df6:	6814      	ldr	r4, [r2, #0]
 8007df8:	4618      	mov	r0, r3
 8007dfa:	f7fc fd06 	bl	800480a <lwip_htonl>
 8007dfe:	4603      	mov	r3, r0
 8007e00:	60a3      	str	r3, [r4, #8]
 8007e02:	68a3      	ldr	r3, [r4, #8]
 8007e04:	4a3f      	ldr	r2, [pc, #252]	; (8007f04 <tcp_input+0x2b0>)
 8007e06:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8007e08:	4b35      	ldr	r3, [pc, #212]	; (8007ee0 <tcp_input+0x28c>)
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	89db      	ldrh	r3, [r3, #14]
 8007e0e:	b29b      	uxth	r3, r3
 8007e10:	4a33      	ldr	r2, [pc, #204]	; (8007ee0 <tcp_input+0x28c>)
 8007e12:	6814      	ldr	r4, [r2, #0]
 8007e14:	4618      	mov	r0, r3
 8007e16:	f7fc fce3 	bl	80047e0 <lwip_htons>
 8007e1a:	4603      	mov	r3, r0
 8007e1c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8007e1e:	4b30      	ldr	r3, [pc, #192]	; (8007ee0 <tcp_input+0x28c>)
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	899b      	ldrh	r3, [r3, #12]
 8007e24:	b29b      	uxth	r3, r3
 8007e26:	4618      	mov	r0, r3
 8007e28:	f7fc fcda 	bl	80047e0 <lwip_htons>
 8007e2c:	4603      	mov	r3, r0
 8007e2e:	b2db      	uxtb	r3, r3
 8007e30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007e34:	b2da      	uxtb	r2, r3
 8007e36:	4b34      	ldr	r3, [pc, #208]	; (8007f08 <tcp_input+0x2b4>)
 8007e38:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	891a      	ldrh	r2, [r3, #8]
 8007e3e:	4b33      	ldr	r3, [pc, #204]	; (8007f0c <tcp_input+0x2b8>)
 8007e40:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8007e42:	4b31      	ldr	r3, [pc, #196]	; (8007f08 <tcp_input+0x2b4>)
 8007e44:	781b      	ldrb	r3, [r3, #0]
 8007e46:	f003 0303 	and.w	r3, r3, #3
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d00c      	beq.n	8007e68 <tcp_input+0x214>
    tcplen++;
 8007e4e:	4b2f      	ldr	r3, [pc, #188]	; (8007f0c <tcp_input+0x2b8>)
 8007e50:	881b      	ldrh	r3, [r3, #0]
 8007e52:	3301      	adds	r3, #1
 8007e54:	b29a      	uxth	r2, r3
 8007e56:	4b2d      	ldr	r3, [pc, #180]	; (8007f0c <tcp_input+0x2b8>)
 8007e58:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	891a      	ldrh	r2, [r3, #8]
 8007e5e:	4b2b      	ldr	r3, [pc, #172]	; (8007f0c <tcp_input+0x2b8>)
 8007e60:	881b      	ldrh	r3, [r3, #0]
 8007e62:	429a      	cmp	r2, r3
 8007e64:	f200 82e6 	bhi.w	8008434 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8007e68:	2300      	movs	r3, #0
 8007e6a:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007e6c:	4b28      	ldr	r3, [pc, #160]	; (8007f10 <tcp_input+0x2bc>)
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	61fb      	str	r3, [r7, #28]
 8007e72:	e09d      	b.n	8007fb0 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8007e74:	69fb      	ldr	r3, [r7, #28]
 8007e76:	7d1b      	ldrb	r3, [r3, #20]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d105      	bne.n	8007e88 <tcp_input+0x234>
 8007e7c:	4b15      	ldr	r3, [pc, #84]	; (8007ed4 <tcp_input+0x280>)
 8007e7e:	22fb      	movs	r2, #251	; 0xfb
 8007e80:	4924      	ldr	r1, [pc, #144]	; (8007f14 <tcp_input+0x2c0>)
 8007e82:	4816      	ldr	r0, [pc, #88]	; (8007edc <tcp_input+0x288>)
 8007e84:	f008 fc56 	bl	8010734 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8007e88:	69fb      	ldr	r3, [r7, #28]
 8007e8a:	7d1b      	ldrb	r3, [r3, #20]
 8007e8c:	2b0a      	cmp	r3, #10
 8007e8e:	d105      	bne.n	8007e9c <tcp_input+0x248>
 8007e90:	4b10      	ldr	r3, [pc, #64]	; (8007ed4 <tcp_input+0x280>)
 8007e92:	22fc      	movs	r2, #252	; 0xfc
 8007e94:	4920      	ldr	r1, [pc, #128]	; (8007f18 <tcp_input+0x2c4>)
 8007e96:	4811      	ldr	r0, [pc, #68]	; (8007edc <tcp_input+0x288>)
 8007e98:	f008 fc4c 	bl	8010734 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8007e9c:	69fb      	ldr	r3, [r7, #28]
 8007e9e:	7d1b      	ldrb	r3, [r3, #20]
 8007ea0:	2b01      	cmp	r3, #1
 8007ea2:	d105      	bne.n	8007eb0 <tcp_input+0x25c>
 8007ea4:	4b0b      	ldr	r3, [pc, #44]	; (8007ed4 <tcp_input+0x280>)
 8007ea6:	22fd      	movs	r2, #253	; 0xfd
 8007ea8:	491c      	ldr	r1, [pc, #112]	; (8007f1c <tcp_input+0x2c8>)
 8007eaa:	480c      	ldr	r0, [pc, #48]	; (8007edc <tcp_input+0x288>)
 8007eac:	f008 fc42 	bl	8010734 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8007eb0:	69fb      	ldr	r3, [r7, #28]
 8007eb2:	7a1b      	ldrb	r3, [r3, #8]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d033      	beq.n	8007f20 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8007eb8:	69fb      	ldr	r3, [r7, #28]
 8007eba:	7a1a      	ldrb	r2, [r3, #8]
 8007ebc:	4b09      	ldr	r3, [pc, #36]	; (8007ee4 <tcp_input+0x290>)
 8007ebe:	685b      	ldr	r3, [r3, #4]
 8007ec0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007ec4:	3301      	adds	r3, #1
 8007ec6:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8007ec8:	429a      	cmp	r2, r3
 8007eca:	d029      	beq.n	8007f20 <tcp_input+0x2cc>
      prev = pcb;
 8007ecc:	69fb      	ldr	r3, [r7, #28]
 8007ece:	61bb      	str	r3, [r7, #24]
      continue;
 8007ed0:	e06b      	b.n	8007faa <tcp_input+0x356>
 8007ed2:	bf00      	nop
 8007ed4:	08012a20 	.word	0x08012a20
 8007ed8:	08012a54 	.word	0x08012a54
 8007edc:	08012a6c 	.word	0x08012a6c
 8007ee0:	20007c7c 	.word	0x20007c7c
 8007ee4:	20004d18 	.word	0x20004d18
 8007ee8:	20007c80 	.word	0x20007c80
 8007eec:	20007c84 	.word	0x20007c84
 8007ef0:	20007c82 	.word	0x20007c82
 8007ef4:	08012a94 	.word	0x08012a94
 8007ef8:	08012aa4 	.word	0x08012aa4
 8007efc:	08012ab0 	.word	0x08012ab0
 8007f00:	20007c8c 	.word	0x20007c8c
 8007f04:	20007c90 	.word	0x20007c90
 8007f08:	20007c98 	.word	0x20007c98
 8007f0c:	20007c96 	.word	0x20007c96
 8007f10:	20007c60 	.word	0x20007c60
 8007f14:	08012ad0 	.word	0x08012ad0
 8007f18:	08012af8 	.word	0x08012af8
 8007f1c:	08012b24 	.word	0x08012b24
    }

    if (pcb->remote_port == tcphdr->src &&
 8007f20:	69fb      	ldr	r3, [r7, #28]
 8007f22:	8b1a      	ldrh	r2, [r3, #24]
 8007f24:	4b72      	ldr	r3, [pc, #456]	; (80080f0 <tcp_input+0x49c>)
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	881b      	ldrh	r3, [r3, #0]
 8007f2a:	b29b      	uxth	r3, r3
 8007f2c:	429a      	cmp	r2, r3
 8007f2e:	d13a      	bne.n	8007fa6 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8007f30:	69fb      	ldr	r3, [r7, #28]
 8007f32:	8ada      	ldrh	r2, [r3, #22]
 8007f34:	4b6e      	ldr	r3, [pc, #440]	; (80080f0 <tcp_input+0x49c>)
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	885b      	ldrh	r3, [r3, #2]
 8007f3a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8007f3c:	429a      	cmp	r2, r3
 8007f3e:	d132      	bne.n	8007fa6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007f40:	69fb      	ldr	r3, [r7, #28]
 8007f42:	685a      	ldr	r2, [r3, #4]
 8007f44:	4b6b      	ldr	r3, [pc, #428]	; (80080f4 <tcp_input+0x4a0>)
 8007f46:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8007f48:	429a      	cmp	r2, r3
 8007f4a:	d12c      	bne.n	8007fa6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8007f4c:	69fb      	ldr	r3, [r7, #28]
 8007f4e:	681a      	ldr	r2, [r3, #0]
 8007f50:	4b68      	ldr	r3, [pc, #416]	; (80080f4 <tcp_input+0x4a0>)
 8007f52:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007f54:	429a      	cmp	r2, r3
 8007f56:	d126      	bne.n	8007fa6 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8007f58:	69fb      	ldr	r3, [r7, #28]
 8007f5a:	68db      	ldr	r3, [r3, #12]
 8007f5c:	69fa      	ldr	r2, [r7, #28]
 8007f5e:	429a      	cmp	r2, r3
 8007f60:	d106      	bne.n	8007f70 <tcp_input+0x31c>
 8007f62:	4b65      	ldr	r3, [pc, #404]	; (80080f8 <tcp_input+0x4a4>)
 8007f64:	f240 120d 	movw	r2, #269	; 0x10d
 8007f68:	4964      	ldr	r1, [pc, #400]	; (80080fc <tcp_input+0x4a8>)
 8007f6a:	4865      	ldr	r0, [pc, #404]	; (8008100 <tcp_input+0x4ac>)
 8007f6c:	f008 fbe2 	bl	8010734 <iprintf>
      if (prev != NULL) {
 8007f70:	69bb      	ldr	r3, [r7, #24]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d00a      	beq.n	8007f8c <tcp_input+0x338>
        prev->next = pcb->next;
 8007f76:	69fb      	ldr	r3, [r7, #28]
 8007f78:	68da      	ldr	r2, [r3, #12]
 8007f7a:	69bb      	ldr	r3, [r7, #24]
 8007f7c:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8007f7e:	4b61      	ldr	r3, [pc, #388]	; (8008104 <tcp_input+0x4b0>)
 8007f80:	681a      	ldr	r2, [r3, #0]
 8007f82:	69fb      	ldr	r3, [r7, #28]
 8007f84:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8007f86:	4a5f      	ldr	r2, [pc, #380]	; (8008104 <tcp_input+0x4b0>)
 8007f88:	69fb      	ldr	r3, [r7, #28]
 8007f8a:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8007f8c:	69fb      	ldr	r3, [r7, #28]
 8007f8e:	68db      	ldr	r3, [r3, #12]
 8007f90:	69fa      	ldr	r2, [r7, #28]
 8007f92:	429a      	cmp	r2, r3
 8007f94:	d111      	bne.n	8007fba <tcp_input+0x366>
 8007f96:	4b58      	ldr	r3, [pc, #352]	; (80080f8 <tcp_input+0x4a4>)
 8007f98:	f240 1215 	movw	r2, #277	; 0x115
 8007f9c:	495a      	ldr	r1, [pc, #360]	; (8008108 <tcp_input+0x4b4>)
 8007f9e:	4858      	ldr	r0, [pc, #352]	; (8008100 <tcp_input+0x4ac>)
 8007fa0:	f008 fbc8 	bl	8010734 <iprintf>
      break;
 8007fa4:	e009      	b.n	8007fba <tcp_input+0x366>
    }
    prev = pcb;
 8007fa6:	69fb      	ldr	r3, [r7, #28]
 8007fa8:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007faa:	69fb      	ldr	r3, [r7, #28]
 8007fac:	68db      	ldr	r3, [r3, #12]
 8007fae:	61fb      	str	r3, [r7, #28]
 8007fb0:	69fb      	ldr	r3, [r7, #28]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	f47f af5e 	bne.w	8007e74 <tcp_input+0x220>
 8007fb8:	e000      	b.n	8007fbc <tcp_input+0x368>
      break;
 8007fba:	bf00      	nop
  }

  if (pcb == NULL) {
 8007fbc:	69fb      	ldr	r3, [r7, #28]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	f040 80aa 	bne.w	8008118 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007fc4:	4b51      	ldr	r3, [pc, #324]	; (800810c <tcp_input+0x4b8>)
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	61fb      	str	r3, [r7, #28]
 8007fca:	e03f      	b.n	800804c <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8007fcc:	69fb      	ldr	r3, [r7, #28]
 8007fce:	7d1b      	ldrb	r3, [r3, #20]
 8007fd0:	2b0a      	cmp	r3, #10
 8007fd2:	d006      	beq.n	8007fe2 <tcp_input+0x38e>
 8007fd4:	4b48      	ldr	r3, [pc, #288]	; (80080f8 <tcp_input+0x4a4>)
 8007fd6:	f240 121f 	movw	r2, #287	; 0x11f
 8007fda:	494d      	ldr	r1, [pc, #308]	; (8008110 <tcp_input+0x4bc>)
 8007fdc:	4848      	ldr	r0, [pc, #288]	; (8008100 <tcp_input+0x4ac>)
 8007fde:	f008 fba9 	bl	8010734 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8007fe2:	69fb      	ldr	r3, [r7, #28]
 8007fe4:	7a1b      	ldrb	r3, [r3, #8]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d009      	beq.n	8007ffe <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8007fea:	69fb      	ldr	r3, [r7, #28]
 8007fec:	7a1a      	ldrb	r2, [r3, #8]
 8007fee:	4b41      	ldr	r3, [pc, #260]	; (80080f4 <tcp_input+0x4a0>)
 8007ff0:	685b      	ldr	r3, [r3, #4]
 8007ff2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007ff6:	3301      	adds	r3, #1
 8007ff8:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8007ffa:	429a      	cmp	r2, r3
 8007ffc:	d122      	bne.n	8008044 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8007ffe:	69fb      	ldr	r3, [r7, #28]
 8008000:	8b1a      	ldrh	r2, [r3, #24]
 8008002:	4b3b      	ldr	r3, [pc, #236]	; (80080f0 <tcp_input+0x49c>)
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	881b      	ldrh	r3, [r3, #0]
 8008008:	b29b      	uxth	r3, r3
 800800a:	429a      	cmp	r2, r3
 800800c:	d11b      	bne.n	8008046 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800800e:	69fb      	ldr	r3, [r7, #28]
 8008010:	8ada      	ldrh	r2, [r3, #22]
 8008012:	4b37      	ldr	r3, [pc, #220]	; (80080f0 <tcp_input+0x49c>)
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	885b      	ldrh	r3, [r3, #2]
 8008018:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800801a:	429a      	cmp	r2, r3
 800801c:	d113      	bne.n	8008046 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800801e:	69fb      	ldr	r3, [r7, #28]
 8008020:	685a      	ldr	r2, [r3, #4]
 8008022:	4b34      	ldr	r3, [pc, #208]	; (80080f4 <tcp_input+0x4a0>)
 8008024:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8008026:	429a      	cmp	r2, r3
 8008028:	d10d      	bne.n	8008046 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800802a:	69fb      	ldr	r3, [r7, #28]
 800802c:	681a      	ldr	r2, [r3, #0]
 800802e:	4b31      	ldr	r3, [pc, #196]	; (80080f4 <tcp_input+0x4a0>)
 8008030:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008032:	429a      	cmp	r2, r3
 8008034:	d107      	bne.n	8008046 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8008036:	69f8      	ldr	r0, [r7, #28]
 8008038:	f000 fb56 	bl	80086e8 <tcp_timewait_input>
        }
        pbuf_free(p);
 800803c:	6878      	ldr	r0, [r7, #4]
 800803e:	f7fd ffd1 	bl	8005fe4 <pbuf_free>
        return;
 8008042:	e1fd      	b.n	8008440 <tcp_input+0x7ec>
        continue;
 8008044:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008046:	69fb      	ldr	r3, [r7, #28]
 8008048:	68db      	ldr	r3, [r3, #12]
 800804a:	61fb      	str	r3, [r7, #28]
 800804c:	69fb      	ldr	r3, [r7, #28]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d1bc      	bne.n	8007fcc <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8008052:	2300      	movs	r3, #0
 8008054:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008056:	4b2f      	ldr	r3, [pc, #188]	; (8008114 <tcp_input+0x4c0>)
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	617b      	str	r3, [r7, #20]
 800805c:	e02a      	b.n	80080b4 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800805e:	697b      	ldr	r3, [r7, #20]
 8008060:	7a1b      	ldrb	r3, [r3, #8]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d00c      	beq.n	8008080 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8008066:	697b      	ldr	r3, [r7, #20]
 8008068:	7a1a      	ldrb	r2, [r3, #8]
 800806a:	4b22      	ldr	r3, [pc, #136]	; (80080f4 <tcp_input+0x4a0>)
 800806c:	685b      	ldr	r3, [r3, #4]
 800806e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008072:	3301      	adds	r3, #1
 8008074:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8008076:	429a      	cmp	r2, r3
 8008078:	d002      	beq.n	8008080 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800807a:	697b      	ldr	r3, [r7, #20]
 800807c:	61bb      	str	r3, [r7, #24]
        continue;
 800807e:	e016      	b.n	80080ae <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8008080:	697b      	ldr	r3, [r7, #20]
 8008082:	8ada      	ldrh	r2, [r3, #22]
 8008084:	4b1a      	ldr	r3, [pc, #104]	; (80080f0 <tcp_input+0x49c>)
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	885b      	ldrh	r3, [r3, #2]
 800808a:	b29b      	uxth	r3, r3
 800808c:	429a      	cmp	r2, r3
 800808e:	d10c      	bne.n	80080aa <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8008090:	697b      	ldr	r3, [r7, #20]
 8008092:	681a      	ldr	r2, [r3, #0]
 8008094:	4b17      	ldr	r3, [pc, #92]	; (80080f4 <tcp_input+0x4a0>)
 8008096:	695b      	ldr	r3, [r3, #20]
 8008098:	429a      	cmp	r2, r3
 800809a:	d00f      	beq.n	80080bc <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800809c:	697b      	ldr	r3, [r7, #20]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d00d      	beq.n	80080be <tcp_input+0x46a>
 80080a2:	697b      	ldr	r3, [r7, #20]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d009      	beq.n	80080be <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 80080aa:	697b      	ldr	r3, [r7, #20]
 80080ac:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80080ae:	697b      	ldr	r3, [r7, #20]
 80080b0:	68db      	ldr	r3, [r3, #12]
 80080b2:	617b      	str	r3, [r7, #20]
 80080b4:	697b      	ldr	r3, [r7, #20]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d1d1      	bne.n	800805e <tcp_input+0x40a>
 80080ba:	e000      	b.n	80080be <tcp_input+0x46a>
            break;
 80080bc:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 80080be:	697b      	ldr	r3, [r7, #20]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d029      	beq.n	8008118 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 80080c4:	69bb      	ldr	r3, [r7, #24]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d00a      	beq.n	80080e0 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 80080ca:	697b      	ldr	r3, [r7, #20]
 80080cc:	68da      	ldr	r2, [r3, #12]
 80080ce:	69bb      	ldr	r3, [r7, #24]
 80080d0:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 80080d2:	4b10      	ldr	r3, [pc, #64]	; (8008114 <tcp_input+0x4c0>)
 80080d4:	681a      	ldr	r2, [r3, #0]
 80080d6:	697b      	ldr	r3, [r7, #20]
 80080d8:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80080da:	4a0e      	ldr	r2, [pc, #56]	; (8008114 <tcp_input+0x4c0>)
 80080dc:	697b      	ldr	r3, [r7, #20]
 80080de:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 80080e0:	6978      	ldr	r0, [r7, #20]
 80080e2:	f000 fa03 	bl	80084ec <tcp_listen_input>
      }
      pbuf_free(p);
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	f7fd ff7c 	bl	8005fe4 <pbuf_free>
      return;
 80080ec:	e1a8      	b.n	8008440 <tcp_input+0x7ec>
 80080ee:	bf00      	nop
 80080f0:	20007c7c 	.word	0x20007c7c
 80080f4:	20004d18 	.word	0x20004d18
 80080f8:	08012a20 	.word	0x08012a20
 80080fc:	08012b4c 	.word	0x08012b4c
 8008100:	08012a6c 	.word	0x08012a6c
 8008104:	20007c60 	.word	0x20007c60
 8008108:	08012b78 	.word	0x08012b78
 800810c:	20007c64 	.word	0x20007c64
 8008110:	08012ba4 	.word	0x08012ba4
 8008114:	20007c5c 	.word	0x20007c5c
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8008118:	69fb      	ldr	r3, [r7, #28]
 800811a:	2b00      	cmp	r3, #0
 800811c:	f000 8158 	beq.w	80083d0 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8008120:	4b95      	ldr	r3, [pc, #596]	; (8008378 <tcp_input+0x724>)
 8008122:	2200      	movs	r2, #0
 8008124:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	891a      	ldrh	r2, [r3, #8]
 800812a:	4b93      	ldr	r3, [pc, #588]	; (8008378 <tcp_input+0x724>)
 800812c:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800812e:	4a92      	ldr	r2, [pc, #584]	; (8008378 <tcp_input+0x724>)
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8008134:	4b91      	ldr	r3, [pc, #580]	; (800837c <tcp_input+0x728>)
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	4a8f      	ldr	r2, [pc, #572]	; (8008378 <tcp_input+0x724>)
 800813a:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800813c:	4b90      	ldr	r3, [pc, #576]	; (8008380 <tcp_input+0x72c>)
 800813e:	2200      	movs	r2, #0
 8008140:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8008142:	4b90      	ldr	r3, [pc, #576]	; (8008384 <tcp_input+0x730>)
 8008144:	2200      	movs	r2, #0
 8008146:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8008148:	4b8f      	ldr	r3, [pc, #572]	; (8008388 <tcp_input+0x734>)
 800814a:	2200      	movs	r2, #0
 800814c:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800814e:	4b8f      	ldr	r3, [pc, #572]	; (800838c <tcp_input+0x738>)
 8008150:	781b      	ldrb	r3, [r3, #0]
 8008152:	f003 0308 	and.w	r3, r3, #8
 8008156:	2b00      	cmp	r3, #0
 8008158:	d006      	beq.n	8008168 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	7b5b      	ldrb	r3, [r3, #13]
 800815e:	f043 0301 	orr.w	r3, r3, #1
 8008162:	b2da      	uxtb	r2, r3
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8008168:	69fb      	ldr	r3, [r7, #28]
 800816a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800816c:	2b00      	cmp	r3, #0
 800816e:	d017      	beq.n	80081a0 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8008170:	69f8      	ldr	r0, [r7, #28]
 8008172:	f7ff f929 	bl	80073c8 <tcp_process_refused_data>
 8008176:	4603      	mov	r3, r0
 8008178:	f113 0f0d 	cmn.w	r3, #13
 800817c:	d007      	beq.n	800818e <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800817e:	69fb      	ldr	r3, [r7, #28]
 8008180:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8008182:	2b00      	cmp	r3, #0
 8008184:	d00c      	beq.n	80081a0 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8008186:	4b82      	ldr	r3, [pc, #520]	; (8008390 <tcp_input+0x73c>)
 8008188:	881b      	ldrh	r3, [r3, #0]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d008      	beq.n	80081a0 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800818e:	69fb      	ldr	r3, [r7, #28]
 8008190:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008192:	2b00      	cmp	r3, #0
 8008194:	f040 80e3 	bne.w	800835e <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8008198:	69f8      	ldr	r0, [r7, #28]
 800819a:	f003 f9ad 	bl	800b4f8 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800819e:	e0de      	b.n	800835e <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 80081a0:	4a7c      	ldr	r2, [pc, #496]	; (8008394 <tcp_input+0x740>)
 80081a2:	69fb      	ldr	r3, [r7, #28]
 80081a4:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 80081a6:	69f8      	ldr	r0, [r7, #28]
 80081a8:	f000 fb18 	bl	80087dc <tcp_process>
 80081ac:	4603      	mov	r3, r0
 80081ae:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 80081b0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80081b4:	f113 0f0d 	cmn.w	r3, #13
 80081b8:	f000 80d3 	beq.w	8008362 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 80081bc:	4b71      	ldr	r3, [pc, #452]	; (8008384 <tcp_input+0x730>)
 80081be:	781b      	ldrb	r3, [r3, #0]
 80081c0:	f003 0308 	and.w	r3, r3, #8
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d015      	beq.n	80081f4 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80081c8:	69fb      	ldr	r3, [r7, #28]
 80081ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d008      	beq.n	80081e4 <tcp_input+0x590>
 80081d2:	69fb      	ldr	r3, [r7, #28]
 80081d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081d8:	69fa      	ldr	r2, [r7, #28]
 80081da:	6912      	ldr	r2, [r2, #16]
 80081dc:	f06f 010d 	mvn.w	r1, #13
 80081e0:	4610      	mov	r0, r2
 80081e2:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80081e4:	69f9      	ldr	r1, [r7, #28]
 80081e6:	486c      	ldr	r0, [pc, #432]	; (8008398 <tcp_input+0x744>)
 80081e8:	f7ff fbbc 	bl	8007964 <tcp_pcb_remove>
        tcp_free(pcb);
 80081ec:	69f8      	ldr	r0, [r7, #28]
 80081ee:	f7fe f9a9 	bl	8006544 <tcp_free>
 80081f2:	e0da      	b.n	80083aa <tcp_input+0x756>
      } else {
        err = ERR_OK;
 80081f4:	2300      	movs	r3, #0
 80081f6:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 80081f8:	4b63      	ldr	r3, [pc, #396]	; (8008388 <tcp_input+0x734>)
 80081fa:	881b      	ldrh	r3, [r3, #0]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d01d      	beq.n	800823c <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8008200:	4b61      	ldr	r3, [pc, #388]	; (8008388 <tcp_input+0x734>)
 8008202:	881b      	ldrh	r3, [r3, #0]
 8008204:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8008206:	69fb      	ldr	r3, [r7, #28]
 8008208:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800820c:	2b00      	cmp	r3, #0
 800820e:	d00a      	beq.n	8008226 <tcp_input+0x5d2>
 8008210:	69fb      	ldr	r3, [r7, #28]
 8008212:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008216:	69fa      	ldr	r2, [r7, #28]
 8008218:	6910      	ldr	r0, [r2, #16]
 800821a:	89fa      	ldrh	r2, [r7, #14]
 800821c:	69f9      	ldr	r1, [r7, #28]
 800821e:	4798      	blx	r3
 8008220:	4603      	mov	r3, r0
 8008222:	74fb      	strb	r3, [r7, #19]
 8008224:	e001      	b.n	800822a <tcp_input+0x5d6>
 8008226:	2300      	movs	r3, #0
 8008228:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800822a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800822e:	f113 0f0d 	cmn.w	r3, #13
 8008232:	f000 8098 	beq.w	8008366 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 8008236:	4b54      	ldr	r3, [pc, #336]	; (8008388 <tcp_input+0x734>)
 8008238:	2200      	movs	r2, #0
 800823a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800823c:	69f8      	ldr	r0, [r7, #28]
 800823e:	f000 f915 	bl	800846c <tcp_input_delayed_close>
 8008242:	4603      	mov	r3, r0
 8008244:	2b00      	cmp	r3, #0
 8008246:	f040 8090 	bne.w	800836a <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800824a:	4b4d      	ldr	r3, [pc, #308]	; (8008380 <tcp_input+0x72c>)
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d041      	beq.n	80082d6 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8008252:	69fb      	ldr	r3, [r7, #28]
 8008254:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008256:	2b00      	cmp	r3, #0
 8008258:	d006      	beq.n	8008268 <tcp_input+0x614>
 800825a:	4b50      	ldr	r3, [pc, #320]	; (800839c <tcp_input+0x748>)
 800825c:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8008260:	494f      	ldr	r1, [pc, #316]	; (80083a0 <tcp_input+0x74c>)
 8008262:	4850      	ldr	r0, [pc, #320]	; (80083a4 <tcp_input+0x750>)
 8008264:	f008 fa66 	bl	8010734 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8008268:	69fb      	ldr	r3, [r7, #28]
 800826a:	8b5b      	ldrh	r3, [r3, #26]
 800826c:	f003 0310 	and.w	r3, r3, #16
 8008270:	2b00      	cmp	r3, #0
 8008272:	d008      	beq.n	8008286 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8008274:	4b42      	ldr	r3, [pc, #264]	; (8008380 <tcp_input+0x72c>)
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	4618      	mov	r0, r3
 800827a:	f7fd feb3 	bl	8005fe4 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800827e:	69f8      	ldr	r0, [r7, #28]
 8008280:	f7fe fc48 	bl	8006b14 <tcp_abort>
            goto aborted;
 8008284:	e091      	b.n	80083aa <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8008286:	69fb      	ldr	r3, [r7, #28]
 8008288:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800828c:	2b00      	cmp	r3, #0
 800828e:	d00c      	beq.n	80082aa <tcp_input+0x656>
 8008290:	69fb      	ldr	r3, [r7, #28]
 8008292:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8008296:	69fb      	ldr	r3, [r7, #28]
 8008298:	6918      	ldr	r0, [r3, #16]
 800829a:	4b39      	ldr	r3, [pc, #228]	; (8008380 <tcp_input+0x72c>)
 800829c:	681a      	ldr	r2, [r3, #0]
 800829e:	2300      	movs	r3, #0
 80082a0:	69f9      	ldr	r1, [r7, #28]
 80082a2:	47a0      	blx	r4
 80082a4:	4603      	mov	r3, r0
 80082a6:	74fb      	strb	r3, [r7, #19]
 80082a8:	e008      	b.n	80082bc <tcp_input+0x668>
 80082aa:	4b35      	ldr	r3, [pc, #212]	; (8008380 <tcp_input+0x72c>)
 80082ac:	681a      	ldr	r2, [r3, #0]
 80082ae:	2300      	movs	r3, #0
 80082b0:	69f9      	ldr	r1, [r7, #28]
 80082b2:	2000      	movs	r0, #0
 80082b4:	f7ff f95e 	bl	8007574 <tcp_recv_null>
 80082b8:	4603      	mov	r3, r0
 80082ba:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 80082bc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80082c0:	f113 0f0d 	cmn.w	r3, #13
 80082c4:	d053      	beq.n	800836e <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 80082c6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d003      	beq.n	80082d6 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 80082ce:	4b2c      	ldr	r3, [pc, #176]	; (8008380 <tcp_input+0x72c>)
 80082d0:	681a      	ldr	r2, [r3, #0]
 80082d2:	69fb      	ldr	r3, [r7, #28]
 80082d4:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 80082d6:	4b2b      	ldr	r3, [pc, #172]	; (8008384 <tcp_input+0x730>)
 80082d8:	781b      	ldrb	r3, [r3, #0]
 80082da:	f003 0320 	and.w	r3, r3, #32
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d030      	beq.n	8008344 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 80082e2:	69fb      	ldr	r3, [r7, #28]
 80082e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d009      	beq.n	80082fe <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80082ea:	69fb      	ldr	r3, [r7, #28]
 80082ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80082ee:	7b5a      	ldrb	r2, [r3, #13]
 80082f0:	69fb      	ldr	r3, [r7, #28]
 80082f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80082f4:	f042 0220 	orr.w	r2, r2, #32
 80082f8:	b2d2      	uxtb	r2, r2
 80082fa:	735a      	strb	r2, [r3, #13]
 80082fc:	e022      	b.n	8008344 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80082fe:	69fb      	ldr	r3, [r7, #28]
 8008300:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008302:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8008306:	d005      	beq.n	8008314 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8008308:	69fb      	ldr	r3, [r7, #28]
 800830a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800830c:	3301      	adds	r3, #1
 800830e:	b29a      	uxth	r2, r3
 8008310:	69fb      	ldr	r3, [r7, #28]
 8008312:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8008314:	69fb      	ldr	r3, [r7, #28]
 8008316:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800831a:	2b00      	cmp	r3, #0
 800831c:	d00b      	beq.n	8008336 <tcp_input+0x6e2>
 800831e:	69fb      	ldr	r3, [r7, #28]
 8008320:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8008324:	69fb      	ldr	r3, [r7, #28]
 8008326:	6918      	ldr	r0, [r3, #16]
 8008328:	2300      	movs	r3, #0
 800832a:	2200      	movs	r2, #0
 800832c:	69f9      	ldr	r1, [r7, #28]
 800832e:	47a0      	blx	r4
 8008330:	4603      	mov	r3, r0
 8008332:	74fb      	strb	r3, [r7, #19]
 8008334:	e001      	b.n	800833a <tcp_input+0x6e6>
 8008336:	2300      	movs	r3, #0
 8008338:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800833a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800833e:	f113 0f0d 	cmn.w	r3, #13
 8008342:	d016      	beq.n	8008372 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8008344:	4b13      	ldr	r3, [pc, #76]	; (8008394 <tcp_input+0x740>)
 8008346:	2200      	movs	r2, #0
 8008348:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800834a:	69f8      	ldr	r0, [r7, #28]
 800834c:	f000 f88e 	bl	800846c <tcp_input_delayed_close>
 8008350:	4603      	mov	r3, r0
 8008352:	2b00      	cmp	r3, #0
 8008354:	d128      	bne.n	80083a8 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8008356:	69f8      	ldr	r0, [r7, #28]
 8008358:	f002 fac8 	bl	800a8ec <tcp_output>
 800835c:	e025      	b.n	80083aa <tcp_input+0x756>
        goto aborted;
 800835e:	bf00      	nop
 8008360:	e023      	b.n	80083aa <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8008362:	bf00      	nop
 8008364:	e021      	b.n	80083aa <tcp_input+0x756>
              goto aborted;
 8008366:	bf00      	nop
 8008368:	e01f      	b.n	80083aa <tcp_input+0x756>
          goto aborted;
 800836a:	bf00      	nop
 800836c:	e01d      	b.n	80083aa <tcp_input+0x756>
            goto aborted;
 800836e:	bf00      	nop
 8008370:	e01b      	b.n	80083aa <tcp_input+0x756>
              goto aborted;
 8008372:	bf00      	nop
 8008374:	e019      	b.n	80083aa <tcp_input+0x756>
 8008376:	bf00      	nop
 8008378:	20007c6c 	.word	0x20007c6c
 800837c:	20007c7c 	.word	0x20007c7c
 8008380:	20007c9c 	.word	0x20007c9c
 8008384:	20007c99 	.word	0x20007c99
 8008388:	20007c94 	.word	0x20007c94
 800838c:	20007c98 	.word	0x20007c98
 8008390:	20007c96 	.word	0x20007c96
 8008394:	20007ca0 	.word	0x20007ca0
 8008398:	20007c60 	.word	0x20007c60
 800839c:	08012a20 	.word	0x08012a20
 80083a0:	08012bd4 	.word	0x08012bd4
 80083a4:	08012a6c 	.word	0x08012a6c
          goto aborted;
 80083a8:	bf00      	nop
    tcp_input_pcb = NULL;
 80083aa:	4b27      	ldr	r3, [pc, #156]	; (8008448 <tcp_input+0x7f4>)
 80083ac:	2200      	movs	r2, #0
 80083ae:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80083b0:	4b26      	ldr	r3, [pc, #152]	; (800844c <tcp_input+0x7f8>)
 80083b2:	2200      	movs	r2, #0
 80083b4:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 80083b6:	4b26      	ldr	r3, [pc, #152]	; (8008450 <tcp_input+0x7fc>)
 80083b8:	685b      	ldr	r3, [r3, #4]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d03f      	beq.n	800843e <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 80083be:	4b24      	ldr	r3, [pc, #144]	; (8008450 <tcp_input+0x7fc>)
 80083c0:	685b      	ldr	r3, [r3, #4]
 80083c2:	4618      	mov	r0, r3
 80083c4:	f7fd fe0e 	bl	8005fe4 <pbuf_free>
      inseg.p = NULL;
 80083c8:	4b21      	ldr	r3, [pc, #132]	; (8008450 <tcp_input+0x7fc>)
 80083ca:	2200      	movs	r2, #0
 80083cc:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 80083ce:	e036      	b.n	800843e <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 80083d0:	4b20      	ldr	r3, [pc, #128]	; (8008454 <tcp_input+0x800>)
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	899b      	ldrh	r3, [r3, #12]
 80083d6:	b29b      	uxth	r3, r3
 80083d8:	4618      	mov	r0, r3
 80083da:	f7fc fa01 	bl	80047e0 <lwip_htons>
 80083de:	4603      	mov	r3, r0
 80083e0:	b2db      	uxtb	r3, r3
 80083e2:	f003 0304 	and.w	r3, r3, #4
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d118      	bne.n	800841c <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80083ea:	4b1b      	ldr	r3, [pc, #108]	; (8008458 <tcp_input+0x804>)
 80083ec:	6819      	ldr	r1, [r3, #0]
 80083ee:	4b1b      	ldr	r3, [pc, #108]	; (800845c <tcp_input+0x808>)
 80083f0:	881b      	ldrh	r3, [r3, #0]
 80083f2:	461a      	mov	r2, r3
 80083f4:	4b1a      	ldr	r3, [pc, #104]	; (8008460 <tcp_input+0x80c>)
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80083fa:	4b16      	ldr	r3, [pc, #88]	; (8008454 <tcp_input+0x800>)
 80083fc:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80083fe:	885b      	ldrh	r3, [r3, #2]
 8008400:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008402:	4a14      	ldr	r2, [pc, #80]	; (8008454 <tcp_input+0x800>)
 8008404:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008406:	8812      	ldrh	r2, [r2, #0]
 8008408:	b292      	uxth	r2, r2
 800840a:	9202      	str	r2, [sp, #8]
 800840c:	9301      	str	r3, [sp, #4]
 800840e:	4b15      	ldr	r3, [pc, #84]	; (8008464 <tcp_input+0x810>)
 8008410:	9300      	str	r3, [sp, #0]
 8008412:	4b15      	ldr	r3, [pc, #84]	; (8008468 <tcp_input+0x814>)
 8008414:	4602      	mov	r2, r0
 8008416:	2000      	movs	r0, #0
 8008418:	f003 f81c 	bl	800b454 <tcp_rst>
    pbuf_free(p);
 800841c:	6878      	ldr	r0, [r7, #4]
 800841e:	f7fd fde1 	bl	8005fe4 <pbuf_free>
  return;
 8008422:	e00c      	b.n	800843e <tcp_input+0x7ea>
    goto dropped;
 8008424:	bf00      	nop
 8008426:	e006      	b.n	8008436 <tcp_input+0x7e2>
    goto dropped;
 8008428:	bf00      	nop
 800842a:	e004      	b.n	8008436 <tcp_input+0x7e2>
    goto dropped;
 800842c:	bf00      	nop
 800842e:	e002      	b.n	8008436 <tcp_input+0x7e2>
      goto dropped;
 8008430:	bf00      	nop
 8008432:	e000      	b.n	8008436 <tcp_input+0x7e2>
      goto dropped;
 8008434:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8008436:	6878      	ldr	r0, [r7, #4]
 8008438:	f7fd fdd4 	bl	8005fe4 <pbuf_free>
 800843c:	e000      	b.n	8008440 <tcp_input+0x7ec>
  return;
 800843e:	bf00      	nop
}
 8008440:	3724      	adds	r7, #36	; 0x24
 8008442:	46bd      	mov	sp, r7
 8008444:	bd90      	pop	{r4, r7, pc}
 8008446:	bf00      	nop
 8008448:	20007ca0 	.word	0x20007ca0
 800844c:	20007c9c 	.word	0x20007c9c
 8008450:	20007c6c 	.word	0x20007c6c
 8008454:	20007c7c 	.word	0x20007c7c
 8008458:	20007c90 	.word	0x20007c90
 800845c:	20007c96 	.word	0x20007c96
 8008460:	20007c8c 	.word	0x20007c8c
 8008464:	20004d28 	.word	0x20004d28
 8008468:	20004d2c 	.word	0x20004d2c

0800846c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800846c:	b580      	push	{r7, lr}
 800846e:	b082      	sub	sp, #8
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d106      	bne.n	8008488 <tcp_input_delayed_close+0x1c>
 800847a:	4b17      	ldr	r3, [pc, #92]	; (80084d8 <tcp_input_delayed_close+0x6c>)
 800847c:	f240 225a 	movw	r2, #602	; 0x25a
 8008480:	4916      	ldr	r1, [pc, #88]	; (80084dc <tcp_input_delayed_close+0x70>)
 8008482:	4817      	ldr	r0, [pc, #92]	; (80084e0 <tcp_input_delayed_close+0x74>)
 8008484:	f008 f956 	bl	8010734 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8008488:	4b16      	ldr	r3, [pc, #88]	; (80084e4 <tcp_input_delayed_close+0x78>)
 800848a:	781b      	ldrb	r3, [r3, #0]
 800848c:	f003 0310 	and.w	r3, r3, #16
 8008490:	2b00      	cmp	r3, #0
 8008492:	d01c      	beq.n	80084ce <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	8b5b      	ldrh	r3, [r3, #26]
 8008498:	f003 0310 	and.w	r3, r3, #16
 800849c:	2b00      	cmp	r3, #0
 800849e:	d10d      	bne.n	80084bc <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d008      	beq.n	80084bc <tcp_input_delayed_close+0x50>
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80084b0:	687a      	ldr	r2, [r7, #4]
 80084b2:	6912      	ldr	r2, [r2, #16]
 80084b4:	f06f 010e 	mvn.w	r1, #14
 80084b8:	4610      	mov	r0, r2
 80084ba:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80084bc:	6879      	ldr	r1, [r7, #4]
 80084be:	480a      	ldr	r0, [pc, #40]	; (80084e8 <tcp_input_delayed_close+0x7c>)
 80084c0:	f7ff fa50 	bl	8007964 <tcp_pcb_remove>
    tcp_free(pcb);
 80084c4:	6878      	ldr	r0, [r7, #4]
 80084c6:	f7fe f83d 	bl	8006544 <tcp_free>
    return 1;
 80084ca:	2301      	movs	r3, #1
 80084cc:	e000      	b.n	80084d0 <tcp_input_delayed_close+0x64>
  }
  return 0;
 80084ce:	2300      	movs	r3, #0
}
 80084d0:	4618      	mov	r0, r3
 80084d2:	3708      	adds	r7, #8
 80084d4:	46bd      	mov	sp, r7
 80084d6:	bd80      	pop	{r7, pc}
 80084d8:	08012a20 	.word	0x08012a20
 80084dc:	08012bf0 	.word	0x08012bf0
 80084e0:	08012a6c 	.word	0x08012a6c
 80084e4:	20007c99 	.word	0x20007c99
 80084e8:	20007c60 	.word	0x20007c60

080084ec <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 80084ec:	b590      	push	{r4, r7, lr}
 80084ee:	b08b      	sub	sp, #44	; 0x2c
 80084f0:	af04      	add	r7, sp, #16
 80084f2:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 80084f4:	4b6f      	ldr	r3, [pc, #444]	; (80086b4 <tcp_listen_input+0x1c8>)
 80084f6:	781b      	ldrb	r3, [r3, #0]
 80084f8:	f003 0304 	and.w	r3, r3, #4
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	f040 80d2 	bne.w	80086a6 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d106      	bne.n	8008516 <tcp_listen_input+0x2a>
 8008508:	4b6b      	ldr	r3, [pc, #428]	; (80086b8 <tcp_listen_input+0x1cc>)
 800850a:	f240 2281 	movw	r2, #641	; 0x281
 800850e:	496b      	ldr	r1, [pc, #428]	; (80086bc <tcp_listen_input+0x1d0>)
 8008510:	486b      	ldr	r0, [pc, #428]	; (80086c0 <tcp_listen_input+0x1d4>)
 8008512:	f008 f90f 	bl	8010734 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8008516:	4b67      	ldr	r3, [pc, #412]	; (80086b4 <tcp_listen_input+0x1c8>)
 8008518:	781b      	ldrb	r3, [r3, #0]
 800851a:	f003 0310 	and.w	r3, r3, #16
 800851e:	2b00      	cmp	r3, #0
 8008520:	d019      	beq.n	8008556 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008522:	4b68      	ldr	r3, [pc, #416]	; (80086c4 <tcp_listen_input+0x1d8>)
 8008524:	6819      	ldr	r1, [r3, #0]
 8008526:	4b68      	ldr	r3, [pc, #416]	; (80086c8 <tcp_listen_input+0x1dc>)
 8008528:	881b      	ldrh	r3, [r3, #0]
 800852a:	461a      	mov	r2, r3
 800852c:	4b67      	ldr	r3, [pc, #412]	; (80086cc <tcp_listen_input+0x1e0>)
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008532:	4b67      	ldr	r3, [pc, #412]	; (80086d0 <tcp_listen_input+0x1e4>)
 8008534:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008536:	885b      	ldrh	r3, [r3, #2]
 8008538:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800853a:	4a65      	ldr	r2, [pc, #404]	; (80086d0 <tcp_listen_input+0x1e4>)
 800853c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800853e:	8812      	ldrh	r2, [r2, #0]
 8008540:	b292      	uxth	r2, r2
 8008542:	9202      	str	r2, [sp, #8]
 8008544:	9301      	str	r3, [sp, #4]
 8008546:	4b63      	ldr	r3, [pc, #396]	; (80086d4 <tcp_listen_input+0x1e8>)
 8008548:	9300      	str	r3, [sp, #0]
 800854a:	4b63      	ldr	r3, [pc, #396]	; (80086d8 <tcp_listen_input+0x1ec>)
 800854c:	4602      	mov	r2, r0
 800854e:	6878      	ldr	r0, [r7, #4]
 8008550:	f002 ff80 	bl	800b454 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8008554:	e0a9      	b.n	80086aa <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8008556:	4b57      	ldr	r3, [pc, #348]	; (80086b4 <tcp_listen_input+0x1c8>)
 8008558:	781b      	ldrb	r3, [r3, #0]
 800855a:	f003 0302 	and.w	r3, r3, #2
 800855e:	2b00      	cmp	r3, #0
 8008560:	f000 80a3 	beq.w	80086aa <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	7d5b      	ldrb	r3, [r3, #21]
 8008568:	4618      	mov	r0, r3
 800856a:	f7ff f927 	bl	80077bc <tcp_alloc>
 800856e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8008570:	697b      	ldr	r3, [r7, #20]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d111      	bne.n	800859a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	699b      	ldr	r3, [r3, #24]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d00a      	beq.n	8008594 <tcp_listen_input+0xa8>
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	699b      	ldr	r3, [r3, #24]
 8008582:	687a      	ldr	r2, [r7, #4]
 8008584:	6910      	ldr	r0, [r2, #16]
 8008586:	f04f 32ff 	mov.w	r2, #4294967295
 800858a:	2100      	movs	r1, #0
 800858c:	4798      	blx	r3
 800858e:	4603      	mov	r3, r0
 8008590:	73bb      	strb	r3, [r7, #14]
      return;
 8008592:	e08b      	b.n	80086ac <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8008594:	23f0      	movs	r3, #240	; 0xf0
 8008596:	73bb      	strb	r3, [r7, #14]
      return;
 8008598:	e088      	b.n	80086ac <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800859a:	4b50      	ldr	r3, [pc, #320]	; (80086dc <tcp_listen_input+0x1f0>)
 800859c:	695a      	ldr	r2, [r3, #20]
 800859e:	697b      	ldr	r3, [r7, #20]
 80085a0:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80085a2:	4b4e      	ldr	r3, [pc, #312]	; (80086dc <tcp_listen_input+0x1f0>)
 80085a4:	691a      	ldr	r2, [r3, #16]
 80085a6:	697b      	ldr	r3, [r7, #20]
 80085a8:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	8ada      	ldrh	r2, [r3, #22]
 80085ae:	697b      	ldr	r3, [r7, #20]
 80085b0:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 80085b2:	4b47      	ldr	r3, [pc, #284]	; (80086d0 <tcp_listen_input+0x1e4>)
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	881b      	ldrh	r3, [r3, #0]
 80085b8:	b29a      	uxth	r2, r3
 80085ba:	697b      	ldr	r3, [r7, #20]
 80085bc:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 80085be:	697b      	ldr	r3, [r7, #20]
 80085c0:	2203      	movs	r2, #3
 80085c2:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 80085c4:	4b41      	ldr	r3, [pc, #260]	; (80086cc <tcp_listen_input+0x1e0>)
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	1c5a      	adds	r2, r3, #1
 80085ca:	697b      	ldr	r3, [r7, #20]
 80085cc:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80085ce:	697b      	ldr	r3, [r7, #20]
 80085d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80085d2:	697b      	ldr	r3, [r7, #20]
 80085d4:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 80085d6:	6978      	ldr	r0, [r7, #20]
 80085d8:	f7ff fa58 	bl	8007a8c <tcp_next_iss>
 80085dc:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 80085de:	697b      	ldr	r3, [r7, #20]
 80085e0:	693a      	ldr	r2, [r7, #16]
 80085e2:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 80085e4:	697b      	ldr	r3, [r7, #20]
 80085e6:	693a      	ldr	r2, [r7, #16]
 80085e8:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 80085ea:	697b      	ldr	r3, [r7, #20]
 80085ec:	693a      	ldr	r2, [r7, #16]
 80085ee:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 80085f0:	697b      	ldr	r3, [r7, #20]
 80085f2:	693a      	ldr	r2, [r7, #16]
 80085f4:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80085f6:	4b35      	ldr	r3, [pc, #212]	; (80086cc <tcp_listen_input+0x1e0>)
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	1e5a      	subs	r2, r3, #1
 80085fc:	697b      	ldr	r3, [r7, #20]
 80085fe:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	691a      	ldr	r2, [r3, #16]
 8008604:	697b      	ldr	r3, [r7, #20]
 8008606:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8008608:	697b      	ldr	r3, [r7, #20]
 800860a:	687a      	ldr	r2, [r7, #4]
 800860c:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	7a5b      	ldrb	r3, [r3, #9]
 8008612:	f003 030c 	and.w	r3, r3, #12
 8008616:	b2da      	uxtb	r2, r3
 8008618:	697b      	ldr	r3, [r7, #20]
 800861a:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	7a1a      	ldrb	r2, [r3, #8]
 8008620:	697b      	ldr	r3, [r7, #20]
 8008622:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8008624:	4b2e      	ldr	r3, [pc, #184]	; (80086e0 <tcp_listen_input+0x1f4>)
 8008626:	681a      	ldr	r2, [r3, #0]
 8008628:	697b      	ldr	r3, [r7, #20]
 800862a:	60da      	str	r2, [r3, #12]
 800862c:	4a2c      	ldr	r2, [pc, #176]	; (80086e0 <tcp_listen_input+0x1f4>)
 800862e:	697b      	ldr	r3, [r7, #20]
 8008630:	6013      	str	r3, [r2, #0]
 8008632:	f003 f8d1 	bl	800b7d8 <tcp_timer_needed>
 8008636:	4b2b      	ldr	r3, [pc, #172]	; (80086e4 <tcp_listen_input+0x1f8>)
 8008638:	2201      	movs	r2, #1
 800863a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800863c:	6978      	ldr	r0, [r7, #20]
 800863e:	f001 fd8f 	bl	800a160 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8008642:	4b23      	ldr	r3, [pc, #140]	; (80086d0 <tcp_listen_input+0x1e4>)
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	89db      	ldrh	r3, [r3, #14]
 8008648:	b29a      	uxth	r2, r3
 800864a:	697b      	ldr	r3, [r7, #20]
 800864c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8008650:	697b      	ldr	r3, [r7, #20]
 8008652:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8008656:	697b      	ldr	r3, [r7, #20]
 8008658:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800865c:	697b      	ldr	r3, [r7, #20]
 800865e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8008660:	697b      	ldr	r3, [r7, #20]
 8008662:	3304      	adds	r3, #4
 8008664:	4618      	mov	r0, r3
 8008666:	f006 fe11 	bl	800f28c <ip4_route>
 800866a:	4601      	mov	r1, r0
 800866c:	697b      	ldr	r3, [r7, #20]
 800866e:	3304      	adds	r3, #4
 8008670:	461a      	mov	r2, r3
 8008672:	4620      	mov	r0, r4
 8008674:	f7ff fa30 	bl	8007ad8 <tcp_eff_send_mss_netif>
 8008678:	4603      	mov	r3, r0
 800867a:	461a      	mov	r2, r3
 800867c:	697b      	ldr	r3, [r7, #20]
 800867e:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8008680:	2112      	movs	r1, #18
 8008682:	6978      	ldr	r0, [r7, #20]
 8008684:	f002 f844 	bl	800a710 <tcp_enqueue_flags>
 8008688:	4603      	mov	r3, r0
 800868a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800868c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d004      	beq.n	800869e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8008694:	2100      	movs	r1, #0
 8008696:	6978      	ldr	r0, [r7, #20]
 8008698:	f7fe f97e 	bl	8006998 <tcp_abandon>
      return;
 800869c:	e006      	b.n	80086ac <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800869e:	6978      	ldr	r0, [r7, #20]
 80086a0:	f002 f924 	bl	800a8ec <tcp_output>
  return;
 80086a4:	e001      	b.n	80086aa <tcp_listen_input+0x1be>
    return;
 80086a6:	bf00      	nop
 80086a8:	e000      	b.n	80086ac <tcp_listen_input+0x1c0>
  return;
 80086aa:	bf00      	nop
}
 80086ac:	371c      	adds	r7, #28
 80086ae:	46bd      	mov	sp, r7
 80086b0:	bd90      	pop	{r4, r7, pc}
 80086b2:	bf00      	nop
 80086b4:	20007c98 	.word	0x20007c98
 80086b8:	08012a20 	.word	0x08012a20
 80086bc:	08012c18 	.word	0x08012c18
 80086c0:	08012a6c 	.word	0x08012a6c
 80086c4:	20007c90 	.word	0x20007c90
 80086c8:	20007c96 	.word	0x20007c96
 80086cc:	20007c8c 	.word	0x20007c8c
 80086d0:	20007c7c 	.word	0x20007c7c
 80086d4:	20004d28 	.word	0x20004d28
 80086d8:	20004d2c 	.word	0x20004d2c
 80086dc:	20004d18 	.word	0x20004d18
 80086e0:	20007c60 	.word	0x20007c60
 80086e4:	20007c68 	.word	0x20007c68

080086e8 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b086      	sub	sp, #24
 80086ec:	af04      	add	r7, sp, #16
 80086ee:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 80086f0:	4b2f      	ldr	r3, [pc, #188]	; (80087b0 <tcp_timewait_input+0xc8>)
 80086f2:	781b      	ldrb	r3, [r3, #0]
 80086f4:	f003 0304 	and.w	r3, r3, #4
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d153      	bne.n	80087a4 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d106      	bne.n	8008710 <tcp_timewait_input+0x28>
 8008702:	4b2c      	ldr	r3, [pc, #176]	; (80087b4 <tcp_timewait_input+0xcc>)
 8008704:	f240 22ee 	movw	r2, #750	; 0x2ee
 8008708:	492b      	ldr	r1, [pc, #172]	; (80087b8 <tcp_timewait_input+0xd0>)
 800870a:	482c      	ldr	r0, [pc, #176]	; (80087bc <tcp_timewait_input+0xd4>)
 800870c:	f008 f812 	bl	8010734 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8008710:	4b27      	ldr	r3, [pc, #156]	; (80087b0 <tcp_timewait_input+0xc8>)
 8008712:	781b      	ldrb	r3, [r3, #0]
 8008714:	f003 0302 	and.w	r3, r3, #2
 8008718:	2b00      	cmp	r3, #0
 800871a:	d02a      	beq.n	8008772 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800871c:	4b28      	ldr	r3, [pc, #160]	; (80087c0 <tcp_timewait_input+0xd8>)
 800871e:	681a      	ldr	r2, [r3, #0]
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008724:	1ad3      	subs	r3, r2, r3
 8008726:	2b00      	cmp	r3, #0
 8008728:	db2d      	blt.n	8008786 <tcp_timewait_input+0x9e>
 800872a:	4b25      	ldr	r3, [pc, #148]	; (80087c0 <tcp_timewait_input+0xd8>)
 800872c:	681a      	ldr	r2, [r3, #0]
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008732:	6879      	ldr	r1, [r7, #4]
 8008734:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008736:	440b      	add	r3, r1
 8008738:	1ad3      	subs	r3, r2, r3
 800873a:	2b00      	cmp	r3, #0
 800873c:	dc23      	bgt.n	8008786 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800873e:	4b21      	ldr	r3, [pc, #132]	; (80087c4 <tcp_timewait_input+0xdc>)
 8008740:	6819      	ldr	r1, [r3, #0]
 8008742:	4b21      	ldr	r3, [pc, #132]	; (80087c8 <tcp_timewait_input+0xe0>)
 8008744:	881b      	ldrh	r3, [r3, #0]
 8008746:	461a      	mov	r2, r3
 8008748:	4b1d      	ldr	r3, [pc, #116]	; (80087c0 <tcp_timewait_input+0xd8>)
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800874e:	4b1f      	ldr	r3, [pc, #124]	; (80087cc <tcp_timewait_input+0xe4>)
 8008750:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008752:	885b      	ldrh	r3, [r3, #2]
 8008754:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008756:	4a1d      	ldr	r2, [pc, #116]	; (80087cc <tcp_timewait_input+0xe4>)
 8008758:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800875a:	8812      	ldrh	r2, [r2, #0]
 800875c:	b292      	uxth	r2, r2
 800875e:	9202      	str	r2, [sp, #8]
 8008760:	9301      	str	r3, [sp, #4]
 8008762:	4b1b      	ldr	r3, [pc, #108]	; (80087d0 <tcp_timewait_input+0xe8>)
 8008764:	9300      	str	r3, [sp, #0]
 8008766:	4b1b      	ldr	r3, [pc, #108]	; (80087d4 <tcp_timewait_input+0xec>)
 8008768:	4602      	mov	r2, r0
 800876a:	6878      	ldr	r0, [r7, #4]
 800876c:	f002 fe72 	bl	800b454 <tcp_rst>
      return;
 8008770:	e01b      	b.n	80087aa <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8008772:	4b0f      	ldr	r3, [pc, #60]	; (80087b0 <tcp_timewait_input+0xc8>)
 8008774:	781b      	ldrb	r3, [r3, #0]
 8008776:	f003 0301 	and.w	r3, r3, #1
 800877a:	2b00      	cmp	r3, #0
 800877c:	d003      	beq.n	8008786 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800877e:	4b16      	ldr	r3, [pc, #88]	; (80087d8 <tcp_timewait_input+0xf0>)
 8008780:	681a      	ldr	r2, [r3, #0]
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8008786:	4b10      	ldr	r3, [pc, #64]	; (80087c8 <tcp_timewait_input+0xe0>)
 8008788:	881b      	ldrh	r3, [r3, #0]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d00c      	beq.n	80087a8 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	8b5b      	ldrh	r3, [r3, #26]
 8008792:	f043 0302 	orr.w	r3, r3, #2
 8008796:	b29a      	uxth	r2, r3
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800879c:	6878      	ldr	r0, [r7, #4]
 800879e:	f002 f8a5 	bl	800a8ec <tcp_output>
  }
  return;
 80087a2:	e001      	b.n	80087a8 <tcp_timewait_input+0xc0>
    return;
 80087a4:	bf00      	nop
 80087a6:	e000      	b.n	80087aa <tcp_timewait_input+0xc2>
  return;
 80087a8:	bf00      	nop
}
 80087aa:	3708      	adds	r7, #8
 80087ac:	46bd      	mov	sp, r7
 80087ae:	bd80      	pop	{r7, pc}
 80087b0:	20007c98 	.word	0x20007c98
 80087b4:	08012a20 	.word	0x08012a20
 80087b8:	08012c38 	.word	0x08012c38
 80087bc:	08012a6c 	.word	0x08012a6c
 80087c0:	20007c8c 	.word	0x20007c8c
 80087c4:	20007c90 	.word	0x20007c90
 80087c8:	20007c96 	.word	0x20007c96
 80087cc:	20007c7c 	.word	0x20007c7c
 80087d0:	20004d28 	.word	0x20004d28
 80087d4:	20004d2c 	.word	0x20004d2c
 80087d8:	20007c54 	.word	0x20007c54

080087dc <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 80087dc:	b590      	push	{r4, r7, lr}
 80087de:	b08d      	sub	sp, #52	; 0x34
 80087e0:	af04      	add	r7, sp, #16
 80087e2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 80087e4:	2300      	movs	r3, #0
 80087e6:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 80087e8:	2300      	movs	r3, #0
 80087ea:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d106      	bne.n	8008800 <tcp_process+0x24>
 80087f2:	4b9d      	ldr	r3, [pc, #628]	; (8008a68 <tcp_process+0x28c>)
 80087f4:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80087f8:	499c      	ldr	r1, [pc, #624]	; (8008a6c <tcp_process+0x290>)
 80087fa:	489d      	ldr	r0, [pc, #628]	; (8008a70 <tcp_process+0x294>)
 80087fc:	f007 ff9a 	bl	8010734 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8008800:	4b9c      	ldr	r3, [pc, #624]	; (8008a74 <tcp_process+0x298>)
 8008802:	781b      	ldrb	r3, [r3, #0]
 8008804:	f003 0304 	and.w	r3, r3, #4
 8008808:	2b00      	cmp	r3, #0
 800880a:	d04e      	beq.n	80088aa <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	7d1b      	ldrb	r3, [r3, #20]
 8008810:	2b02      	cmp	r3, #2
 8008812:	d108      	bne.n	8008826 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008818:	4b97      	ldr	r3, [pc, #604]	; (8008a78 <tcp_process+0x29c>)
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	429a      	cmp	r2, r3
 800881e:	d123      	bne.n	8008868 <tcp_process+0x8c>
        acceptable = 1;
 8008820:	2301      	movs	r3, #1
 8008822:	76fb      	strb	r3, [r7, #27]
 8008824:	e020      	b.n	8008868 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800882a:	4b94      	ldr	r3, [pc, #592]	; (8008a7c <tcp_process+0x2a0>)
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	429a      	cmp	r2, r3
 8008830:	d102      	bne.n	8008838 <tcp_process+0x5c>
        acceptable = 1;
 8008832:	2301      	movs	r3, #1
 8008834:	76fb      	strb	r3, [r7, #27]
 8008836:	e017      	b.n	8008868 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8008838:	4b90      	ldr	r3, [pc, #576]	; (8008a7c <tcp_process+0x2a0>)
 800883a:	681a      	ldr	r2, [r3, #0]
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008840:	1ad3      	subs	r3, r2, r3
 8008842:	2b00      	cmp	r3, #0
 8008844:	db10      	blt.n	8008868 <tcp_process+0x8c>
 8008846:	4b8d      	ldr	r3, [pc, #564]	; (8008a7c <tcp_process+0x2a0>)
 8008848:	681a      	ldr	r2, [r3, #0]
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800884e:	6879      	ldr	r1, [r7, #4]
 8008850:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008852:	440b      	add	r3, r1
 8008854:	1ad3      	subs	r3, r2, r3
 8008856:	2b00      	cmp	r3, #0
 8008858:	dc06      	bgt.n	8008868 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	8b5b      	ldrh	r3, [r3, #26]
 800885e:	f043 0302 	orr.w	r3, r3, #2
 8008862:	b29a      	uxth	r2, r3
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8008868:	7efb      	ldrb	r3, [r7, #27]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d01b      	beq.n	80088a6 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	7d1b      	ldrb	r3, [r3, #20]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d106      	bne.n	8008884 <tcp_process+0xa8>
 8008876:	4b7c      	ldr	r3, [pc, #496]	; (8008a68 <tcp_process+0x28c>)
 8008878:	f44f 724e 	mov.w	r2, #824	; 0x338
 800887c:	4980      	ldr	r1, [pc, #512]	; (8008a80 <tcp_process+0x2a4>)
 800887e:	487c      	ldr	r0, [pc, #496]	; (8008a70 <tcp_process+0x294>)
 8008880:	f007 ff58 	bl	8010734 <iprintf>
      recv_flags |= TF_RESET;
 8008884:	4b7f      	ldr	r3, [pc, #508]	; (8008a84 <tcp_process+0x2a8>)
 8008886:	781b      	ldrb	r3, [r3, #0]
 8008888:	f043 0308 	orr.w	r3, r3, #8
 800888c:	b2da      	uxtb	r2, r3
 800888e:	4b7d      	ldr	r3, [pc, #500]	; (8008a84 <tcp_process+0x2a8>)
 8008890:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	8b5b      	ldrh	r3, [r3, #26]
 8008896:	f023 0301 	bic.w	r3, r3, #1
 800889a:	b29a      	uxth	r2, r3
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 80088a0:	f06f 030d 	mvn.w	r3, #13
 80088a4:	e37a      	b.n	8008f9c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 80088a6:	2300      	movs	r3, #0
 80088a8:	e378      	b.n	8008f9c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80088aa:	4b72      	ldr	r3, [pc, #456]	; (8008a74 <tcp_process+0x298>)
 80088ac:	781b      	ldrb	r3, [r3, #0]
 80088ae:	f003 0302 	and.w	r3, r3, #2
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d010      	beq.n	80088d8 <tcp_process+0xfc>
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	7d1b      	ldrb	r3, [r3, #20]
 80088ba:	2b02      	cmp	r3, #2
 80088bc:	d00c      	beq.n	80088d8 <tcp_process+0xfc>
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	7d1b      	ldrb	r3, [r3, #20]
 80088c2:	2b03      	cmp	r3, #3
 80088c4:	d008      	beq.n	80088d8 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	8b5b      	ldrh	r3, [r3, #26]
 80088ca:	f043 0302 	orr.w	r3, r3, #2
 80088ce:	b29a      	uxth	r2, r3
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 80088d4:	2300      	movs	r3, #0
 80088d6:	e361      	b.n	8008f9c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	8b5b      	ldrh	r3, [r3, #26]
 80088dc:	f003 0310 	and.w	r3, r3, #16
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d103      	bne.n	80088ec <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 80088e4:	4b68      	ldr	r3, [pc, #416]	; (8008a88 <tcp_process+0x2ac>)
 80088e6:	681a      	ldr	r2, [r3, #0]
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2200      	movs	r2, #0
 80088f0:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2200      	movs	r2, #0
 80088f8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 80088fc:	6878      	ldr	r0, [r7, #4]
 80088fe:	f001 fc2f 	bl	800a160 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	7d1b      	ldrb	r3, [r3, #20]
 8008906:	3b02      	subs	r3, #2
 8008908:	2b07      	cmp	r3, #7
 800890a:	f200 8337 	bhi.w	8008f7c <tcp_process+0x7a0>
 800890e:	a201      	add	r2, pc, #4	; (adr r2, 8008914 <tcp_process+0x138>)
 8008910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008914:	08008935 	.word	0x08008935
 8008918:	08008b65 	.word	0x08008b65
 800891c:	08008cdd 	.word	0x08008cdd
 8008920:	08008d07 	.word	0x08008d07
 8008924:	08008e2b 	.word	0x08008e2b
 8008928:	08008cdd 	.word	0x08008cdd
 800892c:	08008eb7 	.word	0x08008eb7
 8008930:	08008f47 	.word	0x08008f47
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8008934:	4b4f      	ldr	r3, [pc, #316]	; (8008a74 <tcp_process+0x298>)
 8008936:	781b      	ldrb	r3, [r3, #0]
 8008938:	f003 0310 	and.w	r3, r3, #16
 800893c:	2b00      	cmp	r3, #0
 800893e:	f000 80e4 	beq.w	8008b0a <tcp_process+0x32e>
 8008942:	4b4c      	ldr	r3, [pc, #304]	; (8008a74 <tcp_process+0x298>)
 8008944:	781b      	ldrb	r3, [r3, #0]
 8008946:	f003 0302 	and.w	r3, r3, #2
 800894a:	2b00      	cmp	r3, #0
 800894c:	f000 80dd 	beq.w	8008b0a <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008954:	1c5a      	adds	r2, r3, #1
 8008956:	4b48      	ldr	r3, [pc, #288]	; (8008a78 <tcp_process+0x29c>)
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	429a      	cmp	r2, r3
 800895c:	f040 80d5 	bne.w	8008b0a <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8008960:	4b46      	ldr	r3, [pc, #280]	; (8008a7c <tcp_process+0x2a0>)
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	1c5a      	adds	r2, r3, #1
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8008972:	4b41      	ldr	r3, [pc, #260]	; (8008a78 <tcp_process+0x29c>)
 8008974:	681a      	ldr	r2, [r3, #0]
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800897a:	4b44      	ldr	r3, [pc, #272]	; (8008a8c <tcp_process+0x2b0>)
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	89db      	ldrh	r3, [r3, #14]
 8008980:	b29a      	uxth	r2, r3
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8008994:	4b39      	ldr	r3, [pc, #228]	; (8008a7c <tcp_process+0x2a0>)
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	1e5a      	subs	r2, r3, #1
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	2204      	movs	r2, #4
 80089a2:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	3304      	adds	r3, #4
 80089ac:	4618      	mov	r0, r3
 80089ae:	f006 fc6d 	bl	800f28c <ip4_route>
 80089b2:	4601      	mov	r1, r0
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	3304      	adds	r3, #4
 80089b8:	461a      	mov	r2, r3
 80089ba:	4620      	mov	r0, r4
 80089bc:	f7ff f88c 	bl	8007ad8 <tcp_eff_send_mss_netif>
 80089c0:	4603      	mov	r3, r0
 80089c2:	461a      	mov	r2, r3
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80089cc:	009a      	lsls	r2, r3, #2
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80089d2:	005b      	lsls	r3, r3, #1
 80089d4:	f241 111c 	movw	r1, #4380	; 0x111c
 80089d8:	428b      	cmp	r3, r1
 80089da:	bf38      	it	cc
 80089dc:	460b      	movcc	r3, r1
 80089de:	429a      	cmp	r2, r3
 80089e0:	d204      	bcs.n	80089ec <tcp_process+0x210>
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80089e6:	009b      	lsls	r3, r3, #2
 80089e8:	b29b      	uxth	r3, r3
 80089ea:	e00d      	b.n	8008a08 <tcp_process+0x22c>
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80089f0:	005b      	lsls	r3, r3, #1
 80089f2:	f241 121c 	movw	r2, #4380	; 0x111c
 80089f6:	4293      	cmp	r3, r2
 80089f8:	d904      	bls.n	8008a04 <tcp_process+0x228>
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80089fe:	005b      	lsls	r3, r3, #1
 8008a00:	b29b      	uxth	r3, r3
 8008a02:	e001      	b.n	8008a08 <tcp_process+0x22c>
 8008a04:	f241 131c 	movw	r3, #4380	; 0x111c
 8008a08:	687a      	ldr	r2, [r7, #4]
 8008a0a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d106      	bne.n	8008a26 <tcp_process+0x24a>
 8008a18:	4b13      	ldr	r3, [pc, #76]	; (8008a68 <tcp_process+0x28c>)
 8008a1a:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8008a1e:	491c      	ldr	r1, [pc, #112]	; (8008a90 <tcp_process+0x2b4>)
 8008a20:	4813      	ldr	r0, [pc, #76]	; (8008a70 <tcp_process+0x294>)
 8008a22:	f007 fe87 	bl	8010734 <iprintf>
        --pcb->snd_queuelen;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8008a2c:	3b01      	subs	r3, #1
 8008a2e:	b29a      	uxth	r2, r3
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a3a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8008a3c:	69fb      	ldr	r3, [r7, #28]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d12a      	bne.n	8008a98 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a46:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8008a48:	69fb      	ldr	r3, [r7, #28]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d106      	bne.n	8008a5c <tcp_process+0x280>
 8008a4e:	4b06      	ldr	r3, [pc, #24]	; (8008a68 <tcp_process+0x28c>)
 8008a50:	f44f 725d 	mov.w	r2, #884	; 0x374
 8008a54:	490f      	ldr	r1, [pc, #60]	; (8008a94 <tcp_process+0x2b8>)
 8008a56:	4806      	ldr	r0, [pc, #24]	; (8008a70 <tcp_process+0x294>)
 8008a58:	f007 fe6c 	bl	8010734 <iprintf>
          pcb->unsent = rseg->next;
 8008a5c:	69fb      	ldr	r3, [r7, #28]
 8008a5e:	681a      	ldr	r2, [r3, #0]
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	66da      	str	r2, [r3, #108]	; 0x6c
 8008a64:	e01c      	b.n	8008aa0 <tcp_process+0x2c4>
 8008a66:	bf00      	nop
 8008a68:	08012a20 	.word	0x08012a20
 8008a6c:	08012c58 	.word	0x08012c58
 8008a70:	08012a6c 	.word	0x08012a6c
 8008a74:	20007c98 	.word	0x20007c98
 8008a78:	20007c90 	.word	0x20007c90
 8008a7c:	20007c8c 	.word	0x20007c8c
 8008a80:	08012c74 	.word	0x08012c74
 8008a84:	20007c99 	.word	0x20007c99
 8008a88:	20007c54 	.word	0x20007c54
 8008a8c:	20007c7c 	.word	0x20007c7c
 8008a90:	08012c94 	.word	0x08012c94
 8008a94:	08012cac 	.word	0x08012cac
        } else {
          pcb->unacked = rseg->next;
 8008a98:	69fb      	ldr	r3, [r7, #28]
 8008a9a:	681a      	ldr	r2, [r3, #0]
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8008aa0:	69f8      	ldr	r0, [r7, #28]
 8008aa2:	f7fe fd22 	bl	80074ea <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d104      	bne.n	8008ab8 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008ab4:	861a      	strh	r2, [r3, #48]	; 0x30
 8008ab6:	e006      	b.n	8008ac6 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	2200      	movs	r2, #0
 8008abc:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d00a      	beq.n	8008ae6 <tcp_process+0x30a>
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ad6:	687a      	ldr	r2, [r7, #4]
 8008ad8:	6910      	ldr	r0, [r2, #16]
 8008ada:	2200      	movs	r2, #0
 8008adc:	6879      	ldr	r1, [r7, #4]
 8008ade:	4798      	blx	r3
 8008ae0:	4603      	mov	r3, r0
 8008ae2:	76bb      	strb	r3, [r7, #26]
 8008ae4:	e001      	b.n	8008aea <tcp_process+0x30e>
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8008aea:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8008aee:	f113 0f0d 	cmn.w	r3, #13
 8008af2:	d102      	bne.n	8008afa <tcp_process+0x31e>
          return ERR_ABRT;
 8008af4:	f06f 030c 	mvn.w	r3, #12
 8008af8:	e250      	b.n	8008f9c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	8b5b      	ldrh	r3, [r3, #26]
 8008afe:	f043 0302 	orr.w	r3, r3, #2
 8008b02:	b29a      	uxth	r2, r3
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8008b08:	e23a      	b.n	8008f80 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8008b0a:	4b98      	ldr	r3, [pc, #608]	; (8008d6c <tcp_process+0x590>)
 8008b0c:	781b      	ldrb	r3, [r3, #0]
 8008b0e:	f003 0310 	and.w	r3, r3, #16
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	f000 8234 	beq.w	8008f80 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008b18:	4b95      	ldr	r3, [pc, #596]	; (8008d70 <tcp_process+0x594>)
 8008b1a:	6819      	ldr	r1, [r3, #0]
 8008b1c:	4b95      	ldr	r3, [pc, #596]	; (8008d74 <tcp_process+0x598>)
 8008b1e:	881b      	ldrh	r3, [r3, #0]
 8008b20:	461a      	mov	r2, r3
 8008b22:	4b95      	ldr	r3, [pc, #596]	; (8008d78 <tcp_process+0x59c>)
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008b28:	4b94      	ldr	r3, [pc, #592]	; (8008d7c <tcp_process+0x5a0>)
 8008b2a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008b2c:	885b      	ldrh	r3, [r3, #2]
 8008b2e:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008b30:	4a92      	ldr	r2, [pc, #584]	; (8008d7c <tcp_process+0x5a0>)
 8008b32:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008b34:	8812      	ldrh	r2, [r2, #0]
 8008b36:	b292      	uxth	r2, r2
 8008b38:	9202      	str	r2, [sp, #8]
 8008b3a:	9301      	str	r3, [sp, #4]
 8008b3c:	4b90      	ldr	r3, [pc, #576]	; (8008d80 <tcp_process+0x5a4>)
 8008b3e:	9300      	str	r3, [sp, #0]
 8008b40:	4b90      	ldr	r3, [pc, #576]	; (8008d84 <tcp_process+0x5a8>)
 8008b42:	4602      	mov	r2, r0
 8008b44:	6878      	ldr	r0, [r7, #4]
 8008b46:	f002 fc85 	bl	800b454 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008b50:	2b05      	cmp	r3, #5
 8008b52:	f200 8215 	bhi.w	8008f80 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	2200      	movs	r2, #0
 8008b5a:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8008b5c:	6878      	ldr	r0, [r7, #4]
 8008b5e:	f002 fa4f 	bl	800b000 <tcp_rexmit_rto>
      break;
 8008b62:	e20d      	b.n	8008f80 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8008b64:	4b81      	ldr	r3, [pc, #516]	; (8008d6c <tcp_process+0x590>)
 8008b66:	781b      	ldrb	r3, [r3, #0]
 8008b68:	f003 0310 	and.w	r3, r3, #16
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	f000 80a1 	beq.w	8008cb4 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8008b72:	4b7f      	ldr	r3, [pc, #508]	; (8008d70 <tcp_process+0x594>)
 8008b74:	681a      	ldr	r2, [r3, #0]
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b7a:	1ad3      	subs	r3, r2, r3
 8008b7c:	3b01      	subs	r3, #1
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	db7e      	blt.n	8008c80 <tcp_process+0x4a4>
 8008b82:	4b7b      	ldr	r3, [pc, #492]	; (8008d70 <tcp_process+0x594>)
 8008b84:	681a      	ldr	r2, [r3, #0]
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b8a:	1ad3      	subs	r3, r2, r3
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	dc77      	bgt.n	8008c80 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	2204      	movs	r2, #4
 8008b94:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d102      	bne.n	8008ba4 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8008b9e:	23fa      	movs	r3, #250	; 0xfa
 8008ba0:	76bb      	strb	r3, [r7, #26]
 8008ba2:	e01d      	b.n	8008be0 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008ba8:	699b      	ldr	r3, [r3, #24]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d106      	bne.n	8008bbc <tcp_process+0x3e0>
 8008bae:	4b76      	ldr	r3, [pc, #472]	; (8008d88 <tcp_process+0x5ac>)
 8008bb0:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8008bb4:	4975      	ldr	r1, [pc, #468]	; (8008d8c <tcp_process+0x5b0>)
 8008bb6:	4876      	ldr	r0, [pc, #472]	; (8008d90 <tcp_process+0x5b4>)
 8008bb8:	f007 fdbc 	bl	8010734 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008bc0:	699b      	ldr	r3, [r3, #24]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d00a      	beq.n	8008bdc <tcp_process+0x400>
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008bca:	699b      	ldr	r3, [r3, #24]
 8008bcc:	687a      	ldr	r2, [r7, #4]
 8008bce:	6910      	ldr	r0, [r2, #16]
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	6879      	ldr	r1, [r7, #4]
 8008bd4:	4798      	blx	r3
 8008bd6:	4603      	mov	r3, r0
 8008bd8:	76bb      	strb	r3, [r7, #26]
 8008bda:	e001      	b.n	8008be0 <tcp_process+0x404>
 8008bdc:	23f0      	movs	r3, #240	; 0xf0
 8008bde:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8008be0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d00a      	beq.n	8008bfe <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8008be8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8008bec:	f113 0f0d 	cmn.w	r3, #13
 8008bf0:	d002      	beq.n	8008bf8 <tcp_process+0x41c>
              tcp_abort(pcb);
 8008bf2:	6878      	ldr	r0, [r7, #4]
 8008bf4:	f7fd ff8e 	bl	8006b14 <tcp_abort>
            }
            return ERR_ABRT;
 8008bf8:	f06f 030c 	mvn.w	r3, #12
 8008bfc:	e1ce      	b.n	8008f9c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8008bfe:	6878      	ldr	r0, [r7, #4]
 8008c00:	f000 fae0 	bl	80091c4 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8008c04:	4b63      	ldr	r3, [pc, #396]	; (8008d94 <tcp_process+0x5b8>)
 8008c06:	881b      	ldrh	r3, [r3, #0]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d005      	beq.n	8008c18 <tcp_process+0x43c>
            recv_acked--;
 8008c0c:	4b61      	ldr	r3, [pc, #388]	; (8008d94 <tcp_process+0x5b8>)
 8008c0e:	881b      	ldrh	r3, [r3, #0]
 8008c10:	3b01      	subs	r3, #1
 8008c12:	b29a      	uxth	r2, r3
 8008c14:	4b5f      	ldr	r3, [pc, #380]	; (8008d94 <tcp_process+0x5b8>)
 8008c16:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008c1c:	009a      	lsls	r2, r3, #2
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008c22:	005b      	lsls	r3, r3, #1
 8008c24:	f241 111c 	movw	r1, #4380	; 0x111c
 8008c28:	428b      	cmp	r3, r1
 8008c2a:	bf38      	it	cc
 8008c2c:	460b      	movcc	r3, r1
 8008c2e:	429a      	cmp	r2, r3
 8008c30:	d204      	bcs.n	8008c3c <tcp_process+0x460>
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008c36:	009b      	lsls	r3, r3, #2
 8008c38:	b29b      	uxth	r3, r3
 8008c3a:	e00d      	b.n	8008c58 <tcp_process+0x47c>
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008c40:	005b      	lsls	r3, r3, #1
 8008c42:	f241 121c 	movw	r2, #4380	; 0x111c
 8008c46:	4293      	cmp	r3, r2
 8008c48:	d904      	bls.n	8008c54 <tcp_process+0x478>
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008c4e:	005b      	lsls	r3, r3, #1
 8008c50:	b29b      	uxth	r3, r3
 8008c52:	e001      	b.n	8008c58 <tcp_process+0x47c>
 8008c54:	f241 131c 	movw	r3, #4380	; 0x111c
 8008c58:	687a      	ldr	r2, [r7, #4]
 8008c5a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8008c5e:	4b4e      	ldr	r3, [pc, #312]	; (8008d98 <tcp_process+0x5bc>)
 8008c60:	781b      	ldrb	r3, [r3, #0]
 8008c62:	f003 0320 	and.w	r3, r3, #32
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d037      	beq.n	8008cda <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	8b5b      	ldrh	r3, [r3, #26]
 8008c6e:	f043 0302 	orr.w	r3, r3, #2
 8008c72:	b29a      	uxth	r2, r3
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	2207      	movs	r2, #7
 8008c7c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8008c7e:	e02c      	b.n	8008cda <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008c80:	4b3b      	ldr	r3, [pc, #236]	; (8008d70 <tcp_process+0x594>)
 8008c82:	6819      	ldr	r1, [r3, #0]
 8008c84:	4b3b      	ldr	r3, [pc, #236]	; (8008d74 <tcp_process+0x598>)
 8008c86:	881b      	ldrh	r3, [r3, #0]
 8008c88:	461a      	mov	r2, r3
 8008c8a:	4b3b      	ldr	r3, [pc, #236]	; (8008d78 <tcp_process+0x59c>)
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008c90:	4b3a      	ldr	r3, [pc, #232]	; (8008d7c <tcp_process+0x5a0>)
 8008c92:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008c94:	885b      	ldrh	r3, [r3, #2]
 8008c96:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008c98:	4a38      	ldr	r2, [pc, #224]	; (8008d7c <tcp_process+0x5a0>)
 8008c9a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008c9c:	8812      	ldrh	r2, [r2, #0]
 8008c9e:	b292      	uxth	r2, r2
 8008ca0:	9202      	str	r2, [sp, #8]
 8008ca2:	9301      	str	r3, [sp, #4]
 8008ca4:	4b36      	ldr	r3, [pc, #216]	; (8008d80 <tcp_process+0x5a4>)
 8008ca6:	9300      	str	r3, [sp, #0]
 8008ca8:	4b36      	ldr	r3, [pc, #216]	; (8008d84 <tcp_process+0x5a8>)
 8008caa:	4602      	mov	r2, r0
 8008cac:	6878      	ldr	r0, [r7, #4]
 8008cae:	f002 fbd1 	bl	800b454 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8008cb2:	e167      	b.n	8008f84 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8008cb4:	4b2d      	ldr	r3, [pc, #180]	; (8008d6c <tcp_process+0x590>)
 8008cb6:	781b      	ldrb	r3, [r3, #0]
 8008cb8:	f003 0302 	and.w	r3, r3, #2
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	f000 8161 	beq.w	8008f84 <tcp_process+0x7a8>
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cc6:	1e5a      	subs	r2, r3, #1
 8008cc8:	4b2b      	ldr	r3, [pc, #172]	; (8008d78 <tcp_process+0x59c>)
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	429a      	cmp	r2, r3
 8008cce:	f040 8159 	bne.w	8008f84 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8008cd2:	6878      	ldr	r0, [r7, #4]
 8008cd4:	f002 f9b6 	bl	800b044 <tcp_rexmit>
      break;
 8008cd8:	e154      	b.n	8008f84 <tcp_process+0x7a8>
 8008cda:	e153      	b.n	8008f84 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8008cdc:	6878      	ldr	r0, [r7, #4]
 8008cde:	f000 fa71 	bl	80091c4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8008ce2:	4b2d      	ldr	r3, [pc, #180]	; (8008d98 <tcp_process+0x5bc>)
 8008ce4:	781b      	ldrb	r3, [r3, #0]
 8008ce6:	f003 0320 	and.w	r3, r3, #32
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	f000 814c 	beq.w	8008f88 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	8b5b      	ldrh	r3, [r3, #26]
 8008cf4:	f043 0302 	orr.w	r3, r3, #2
 8008cf8:	b29a      	uxth	r2, r3
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	2207      	movs	r2, #7
 8008d02:	751a      	strb	r2, [r3, #20]
      }
      break;
 8008d04:	e140      	b.n	8008f88 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8008d06:	6878      	ldr	r0, [r7, #4]
 8008d08:	f000 fa5c 	bl	80091c4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8008d0c:	4b22      	ldr	r3, [pc, #136]	; (8008d98 <tcp_process+0x5bc>)
 8008d0e:	781b      	ldrb	r3, [r3, #0]
 8008d10:	f003 0320 	and.w	r3, r3, #32
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d071      	beq.n	8008dfc <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008d18:	4b14      	ldr	r3, [pc, #80]	; (8008d6c <tcp_process+0x590>)
 8008d1a:	781b      	ldrb	r3, [r3, #0]
 8008d1c:	f003 0310 	and.w	r3, r3, #16
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d060      	beq.n	8008de6 <tcp_process+0x60a>
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008d28:	4b11      	ldr	r3, [pc, #68]	; (8008d70 <tcp_process+0x594>)
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	429a      	cmp	r2, r3
 8008d2e:	d15a      	bne.n	8008de6 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d156      	bne.n	8008de6 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	8b5b      	ldrh	r3, [r3, #26]
 8008d3c:	f043 0302 	orr.w	r3, r3, #2
 8008d40:	b29a      	uxth	r2, r3
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8008d46:	6878      	ldr	r0, [r7, #4]
 8008d48:	f7fe fdbc 	bl	80078c4 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8008d4c:	4b13      	ldr	r3, [pc, #76]	; (8008d9c <tcp_process+0x5c0>)
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	687a      	ldr	r2, [r7, #4]
 8008d52:	429a      	cmp	r2, r3
 8008d54:	d105      	bne.n	8008d62 <tcp_process+0x586>
 8008d56:	4b11      	ldr	r3, [pc, #68]	; (8008d9c <tcp_process+0x5c0>)
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	68db      	ldr	r3, [r3, #12]
 8008d5c:	4a0f      	ldr	r2, [pc, #60]	; (8008d9c <tcp_process+0x5c0>)
 8008d5e:	6013      	str	r3, [r2, #0]
 8008d60:	e02e      	b.n	8008dc0 <tcp_process+0x5e4>
 8008d62:	4b0e      	ldr	r3, [pc, #56]	; (8008d9c <tcp_process+0x5c0>)
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	617b      	str	r3, [r7, #20]
 8008d68:	e027      	b.n	8008dba <tcp_process+0x5de>
 8008d6a:	bf00      	nop
 8008d6c:	20007c98 	.word	0x20007c98
 8008d70:	20007c90 	.word	0x20007c90
 8008d74:	20007c96 	.word	0x20007c96
 8008d78:	20007c8c 	.word	0x20007c8c
 8008d7c:	20007c7c 	.word	0x20007c7c
 8008d80:	20004d28 	.word	0x20004d28
 8008d84:	20004d2c 	.word	0x20004d2c
 8008d88:	08012a20 	.word	0x08012a20
 8008d8c:	08012cc0 	.word	0x08012cc0
 8008d90:	08012a6c 	.word	0x08012a6c
 8008d94:	20007c94 	.word	0x20007c94
 8008d98:	20007c99 	.word	0x20007c99
 8008d9c:	20007c60 	.word	0x20007c60
 8008da0:	697b      	ldr	r3, [r7, #20]
 8008da2:	68db      	ldr	r3, [r3, #12]
 8008da4:	687a      	ldr	r2, [r7, #4]
 8008da6:	429a      	cmp	r2, r3
 8008da8:	d104      	bne.n	8008db4 <tcp_process+0x5d8>
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	68da      	ldr	r2, [r3, #12]
 8008dae:	697b      	ldr	r3, [r7, #20]
 8008db0:	60da      	str	r2, [r3, #12]
 8008db2:	e005      	b.n	8008dc0 <tcp_process+0x5e4>
 8008db4:	697b      	ldr	r3, [r7, #20]
 8008db6:	68db      	ldr	r3, [r3, #12]
 8008db8:	617b      	str	r3, [r7, #20]
 8008dba:	697b      	ldr	r3, [r7, #20]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d1ef      	bne.n	8008da0 <tcp_process+0x5c4>
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2200      	movs	r2, #0
 8008dc4:	60da      	str	r2, [r3, #12]
 8008dc6:	4b77      	ldr	r3, [pc, #476]	; (8008fa4 <tcp_process+0x7c8>)
 8008dc8:	2201      	movs	r2, #1
 8008dca:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	220a      	movs	r2, #10
 8008dd0:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8008dd2:	4b75      	ldr	r3, [pc, #468]	; (8008fa8 <tcp_process+0x7cc>)
 8008dd4:	681a      	ldr	r2, [r3, #0]
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	60da      	str	r2, [r3, #12]
 8008dda:	4a73      	ldr	r2, [pc, #460]	; (8008fa8 <tcp_process+0x7cc>)
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	6013      	str	r3, [r2, #0]
 8008de0:	f002 fcfa 	bl	800b7d8 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8008de4:	e0d2      	b.n	8008f8c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	8b5b      	ldrh	r3, [r3, #26]
 8008dea:	f043 0302 	orr.w	r3, r3, #2
 8008dee:	b29a      	uxth	r2, r3
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	2208      	movs	r2, #8
 8008df8:	751a      	strb	r2, [r3, #20]
      break;
 8008dfa:	e0c7      	b.n	8008f8c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008dfc:	4b6b      	ldr	r3, [pc, #428]	; (8008fac <tcp_process+0x7d0>)
 8008dfe:	781b      	ldrb	r3, [r3, #0]
 8008e00:	f003 0310 	and.w	r3, r3, #16
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	f000 80c1 	beq.w	8008f8c <tcp_process+0x7b0>
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008e0e:	4b68      	ldr	r3, [pc, #416]	; (8008fb0 <tcp_process+0x7d4>)
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	429a      	cmp	r2, r3
 8008e14:	f040 80ba 	bne.w	8008f8c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	f040 80b5 	bne.w	8008f8c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	2206      	movs	r2, #6
 8008e26:	751a      	strb	r2, [r3, #20]
      break;
 8008e28:	e0b0      	b.n	8008f8c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8008e2a:	6878      	ldr	r0, [r7, #4]
 8008e2c:	f000 f9ca 	bl	80091c4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8008e30:	4b60      	ldr	r3, [pc, #384]	; (8008fb4 <tcp_process+0x7d8>)
 8008e32:	781b      	ldrb	r3, [r3, #0]
 8008e34:	f003 0320 	and.w	r3, r3, #32
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	f000 80a9 	beq.w	8008f90 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	8b5b      	ldrh	r3, [r3, #26]
 8008e42:	f043 0302 	orr.w	r3, r3, #2
 8008e46:	b29a      	uxth	r2, r3
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8008e4c:	6878      	ldr	r0, [r7, #4]
 8008e4e:	f7fe fd39 	bl	80078c4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8008e52:	4b59      	ldr	r3, [pc, #356]	; (8008fb8 <tcp_process+0x7dc>)
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	687a      	ldr	r2, [r7, #4]
 8008e58:	429a      	cmp	r2, r3
 8008e5a:	d105      	bne.n	8008e68 <tcp_process+0x68c>
 8008e5c:	4b56      	ldr	r3, [pc, #344]	; (8008fb8 <tcp_process+0x7dc>)
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	68db      	ldr	r3, [r3, #12]
 8008e62:	4a55      	ldr	r2, [pc, #340]	; (8008fb8 <tcp_process+0x7dc>)
 8008e64:	6013      	str	r3, [r2, #0]
 8008e66:	e013      	b.n	8008e90 <tcp_process+0x6b4>
 8008e68:	4b53      	ldr	r3, [pc, #332]	; (8008fb8 <tcp_process+0x7dc>)
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	613b      	str	r3, [r7, #16]
 8008e6e:	e00c      	b.n	8008e8a <tcp_process+0x6ae>
 8008e70:	693b      	ldr	r3, [r7, #16]
 8008e72:	68db      	ldr	r3, [r3, #12]
 8008e74:	687a      	ldr	r2, [r7, #4]
 8008e76:	429a      	cmp	r2, r3
 8008e78:	d104      	bne.n	8008e84 <tcp_process+0x6a8>
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	68da      	ldr	r2, [r3, #12]
 8008e7e:	693b      	ldr	r3, [r7, #16]
 8008e80:	60da      	str	r2, [r3, #12]
 8008e82:	e005      	b.n	8008e90 <tcp_process+0x6b4>
 8008e84:	693b      	ldr	r3, [r7, #16]
 8008e86:	68db      	ldr	r3, [r3, #12]
 8008e88:	613b      	str	r3, [r7, #16]
 8008e8a:	693b      	ldr	r3, [r7, #16]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d1ef      	bne.n	8008e70 <tcp_process+0x694>
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	2200      	movs	r2, #0
 8008e94:	60da      	str	r2, [r3, #12]
 8008e96:	4b43      	ldr	r3, [pc, #268]	; (8008fa4 <tcp_process+0x7c8>)
 8008e98:	2201      	movs	r2, #1
 8008e9a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	220a      	movs	r2, #10
 8008ea0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8008ea2:	4b41      	ldr	r3, [pc, #260]	; (8008fa8 <tcp_process+0x7cc>)
 8008ea4:	681a      	ldr	r2, [r3, #0]
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	60da      	str	r2, [r3, #12]
 8008eaa:	4a3f      	ldr	r2, [pc, #252]	; (8008fa8 <tcp_process+0x7cc>)
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	6013      	str	r3, [r2, #0]
 8008eb0:	f002 fc92 	bl	800b7d8 <tcp_timer_needed>
      }
      break;
 8008eb4:	e06c      	b.n	8008f90 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8008eb6:	6878      	ldr	r0, [r7, #4]
 8008eb8:	f000 f984 	bl	80091c4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8008ebc:	4b3b      	ldr	r3, [pc, #236]	; (8008fac <tcp_process+0x7d0>)
 8008ebe:	781b      	ldrb	r3, [r3, #0]
 8008ec0:	f003 0310 	and.w	r3, r3, #16
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d065      	beq.n	8008f94 <tcp_process+0x7b8>
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008ecc:	4b38      	ldr	r3, [pc, #224]	; (8008fb0 <tcp_process+0x7d4>)
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	429a      	cmp	r2, r3
 8008ed2:	d15f      	bne.n	8008f94 <tcp_process+0x7b8>
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d15b      	bne.n	8008f94 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8008edc:	6878      	ldr	r0, [r7, #4]
 8008ede:	f7fe fcf1 	bl	80078c4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8008ee2:	4b35      	ldr	r3, [pc, #212]	; (8008fb8 <tcp_process+0x7dc>)
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	687a      	ldr	r2, [r7, #4]
 8008ee8:	429a      	cmp	r2, r3
 8008eea:	d105      	bne.n	8008ef8 <tcp_process+0x71c>
 8008eec:	4b32      	ldr	r3, [pc, #200]	; (8008fb8 <tcp_process+0x7dc>)
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	68db      	ldr	r3, [r3, #12]
 8008ef2:	4a31      	ldr	r2, [pc, #196]	; (8008fb8 <tcp_process+0x7dc>)
 8008ef4:	6013      	str	r3, [r2, #0]
 8008ef6:	e013      	b.n	8008f20 <tcp_process+0x744>
 8008ef8:	4b2f      	ldr	r3, [pc, #188]	; (8008fb8 <tcp_process+0x7dc>)
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	60fb      	str	r3, [r7, #12]
 8008efe:	e00c      	b.n	8008f1a <tcp_process+0x73e>
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	68db      	ldr	r3, [r3, #12]
 8008f04:	687a      	ldr	r2, [r7, #4]
 8008f06:	429a      	cmp	r2, r3
 8008f08:	d104      	bne.n	8008f14 <tcp_process+0x738>
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	68da      	ldr	r2, [r3, #12]
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	60da      	str	r2, [r3, #12]
 8008f12:	e005      	b.n	8008f20 <tcp_process+0x744>
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	68db      	ldr	r3, [r3, #12]
 8008f18:	60fb      	str	r3, [r7, #12]
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d1ef      	bne.n	8008f00 <tcp_process+0x724>
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2200      	movs	r2, #0
 8008f24:	60da      	str	r2, [r3, #12]
 8008f26:	4b1f      	ldr	r3, [pc, #124]	; (8008fa4 <tcp_process+0x7c8>)
 8008f28:	2201      	movs	r2, #1
 8008f2a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	220a      	movs	r2, #10
 8008f30:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8008f32:	4b1d      	ldr	r3, [pc, #116]	; (8008fa8 <tcp_process+0x7cc>)
 8008f34:	681a      	ldr	r2, [r3, #0]
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	60da      	str	r2, [r3, #12]
 8008f3a:	4a1b      	ldr	r2, [pc, #108]	; (8008fa8 <tcp_process+0x7cc>)
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	6013      	str	r3, [r2, #0]
 8008f40:	f002 fc4a 	bl	800b7d8 <tcp_timer_needed>
      }
      break;
 8008f44:	e026      	b.n	8008f94 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8008f46:	6878      	ldr	r0, [r7, #4]
 8008f48:	f000 f93c 	bl	80091c4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8008f4c:	4b17      	ldr	r3, [pc, #92]	; (8008fac <tcp_process+0x7d0>)
 8008f4e:	781b      	ldrb	r3, [r3, #0]
 8008f50:	f003 0310 	and.w	r3, r3, #16
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d01f      	beq.n	8008f98 <tcp_process+0x7bc>
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008f5c:	4b14      	ldr	r3, [pc, #80]	; (8008fb0 <tcp_process+0x7d4>)
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	429a      	cmp	r2, r3
 8008f62:	d119      	bne.n	8008f98 <tcp_process+0x7bc>
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d115      	bne.n	8008f98 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8008f6c:	4b11      	ldr	r3, [pc, #68]	; (8008fb4 <tcp_process+0x7d8>)
 8008f6e:	781b      	ldrb	r3, [r3, #0]
 8008f70:	f043 0310 	orr.w	r3, r3, #16
 8008f74:	b2da      	uxtb	r2, r3
 8008f76:	4b0f      	ldr	r3, [pc, #60]	; (8008fb4 <tcp_process+0x7d8>)
 8008f78:	701a      	strb	r2, [r3, #0]
      }
      break;
 8008f7a:	e00d      	b.n	8008f98 <tcp_process+0x7bc>
    default:
      break;
 8008f7c:	bf00      	nop
 8008f7e:	e00c      	b.n	8008f9a <tcp_process+0x7be>
      break;
 8008f80:	bf00      	nop
 8008f82:	e00a      	b.n	8008f9a <tcp_process+0x7be>
      break;
 8008f84:	bf00      	nop
 8008f86:	e008      	b.n	8008f9a <tcp_process+0x7be>
      break;
 8008f88:	bf00      	nop
 8008f8a:	e006      	b.n	8008f9a <tcp_process+0x7be>
      break;
 8008f8c:	bf00      	nop
 8008f8e:	e004      	b.n	8008f9a <tcp_process+0x7be>
      break;
 8008f90:	bf00      	nop
 8008f92:	e002      	b.n	8008f9a <tcp_process+0x7be>
      break;
 8008f94:	bf00      	nop
 8008f96:	e000      	b.n	8008f9a <tcp_process+0x7be>
      break;
 8008f98:	bf00      	nop
  }
  return ERR_OK;
 8008f9a:	2300      	movs	r3, #0
}
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	3724      	adds	r7, #36	; 0x24
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	bd90      	pop	{r4, r7, pc}
 8008fa4:	20007c68 	.word	0x20007c68
 8008fa8:	20007c64 	.word	0x20007c64
 8008fac:	20007c98 	.word	0x20007c98
 8008fb0:	20007c90 	.word	0x20007c90
 8008fb4:	20007c99 	.word	0x20007c99
 8008fb8:	20007c60 	.word	0x20007c60

08008fbc <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8008fbc:	b590      	push	{r4, r7, lr}
 8008fbe:	b085      	sub	sp, #20
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
 8008fc4:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d106      	bne.n	8008fda <tcp_oos_insert_segment+0x1e>
 8008fcc:	4b3b      	ldr	r3, [pc, #236]	; (80090bc <tcp_oos_insert_segment+0x100>)
 8008fce:	f240 421f 	movw	r2, #1055	; 0x41f
 8008fd2:	493b      	ldr	r1, [pc, #236]	; (80090c0 <tcp_oos_insert_segment+0x104>)
 8008fd4:	483b      	ldr	r0, [pc, #236]	; (80090c4 <tcp_oos_insert_segment+0x108>)
 8008fd6:	f007 fbad 	bl	8010734 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	68db      	ldr	r3, [r3, #12]
 8008fde:	899b      	ldrh	r3, [r3, #12]
 8008fe0:	b29b      	uxth	r3, r3
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	f7fb fbfc 	bl	80047e0 <lwip_htons>
 8008fe8:	4603      	mov	r3, r0
 8008fea:	b2db      	uxtb	r3, r3
 8008fec:	f003 0301 	and.w	r3, r3, #1
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d028      	beq.n	8009046 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8008ff4:	6838      	ldr	r0, [r7, #0]
 8008ff6:	f7fe fa63 	bl	80074c0 <tcp_segs_free>
    next = NULL;
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	603b      	str	r3, [r7, #0]
 8008ffe:	e056      	b.n	80090ae <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8009000:	683b      	ldr	r3, [r7, #0]
 8009002:	68db      	ldr	r3, [r3, #12]
 8009004:	899b      	ldrh	r3, [r3, #12]
 8009006:	b29b      	uxth	r3, r3
 8009008:	4618      	mov	r0, r3
 800900a:	f7fb fbe9 	bl	80047e0 <lwip_htons>
 800900e:	4603      	mov	r3, r0
 8009010:	b2db      	uxtb	r3, r3
 8009012:	f003 0301 	and.w	r3, r3, #1
 8009016:	2b00      	cmp	r3, #0
 8009018:	d00d      	beq.n	8009036 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	68db      	ldr	r3, [r3, #12]
 800901e:	899b      	ldrh	r3, [r3, #12]
 8009020:	b29c      	uxth	r4, r3
 8009022:	2001      	movs	r0, #1
 8009024:	f7fb fbdc 	bl	80047e0 <lwip_htons>
 8009028:	4603      	mov	r3, r0
 800902a:	461a      	mov	r2, r3
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	68db      	ldr	r3, [r3, #12]
 8009030:	4322      	orrs	r2, r4
 8009032:	b292      	uxth	r2, r2
 8009034:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8009036:	683b      	ldr	r3, [r7, #0]
 8009038:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800903a:	683b      	ldr	r3, [r7, #0]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8009040:	68f8      	ldr	r0, [r7, #12]
 8009042:	f7fe fa52 	bl	80074ea <tcp_seg_free>
    while (next &&
 8009046:	683b      	ldr	r3, [r7, #0]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d00e      	beq.n	800906a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	891b      	ldrh	r3, [r3, #8]
 8009050:	461a      	mov	r2, r3
 8009052:	4b1d      	ldr	r3, [pc, #116]	; (80090c8 <tcp_oos_insert_segment+0x10c>)
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	441a      	add	r2, r3
 8009058:	683b      	ldr	r3, [r7, #0]
 800905a:	68db      	ldr	r3, [r3, #12]
 800905c:	685b      	ldr	r3, [r3, #4]
 800905e:	6839      	ldr	r1, [r7, #0]
 8009060:	8909      	ldrh	r1, [r1, #8]
 8009062:	440b      	add	r3, r1
 8009064:	1ad3      	subs	r3, r2, r3
    while (next &&
 8009066:	2b00      	cmp	r3, #0
 8009068:	daca      	bge.n	8009000 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800906a:	683b      	ldr	r3, [r7, #0]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d01e      	beq.n	80090ae <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	891b      	ldrh	r3, [r3, #8]
 8009074:	461a      	mov	r2, r3
 8009076:	4b14      	ldr	r3, [pc, #80]	; (80090c8 <tcp_oos_insert_segment+0x10c>)
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	441a      	add	r2, r3
 800907c:	683b      	ldr	r3, [r7, #0]
 800907e:	68db      	ldr	r3, [r3, #12]
 8009080:	685b      	ldr	r3, [r3, #4]
 8009082:	1ad3      	subs	r3, r2, r3
    if (next &&
 8009084:	2b00      	cmp	r3, #0
 8009086:	dd12      	ble.n	80090ae <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8009088:	683b      	ldr	r3, [r7, #0]
 800908a:	68db      	ldr	r3, [r3, #12]
 800908c:	685b      	ldr	r3, [r3, #4]
 800908e:	b29a      	uxth	r2, r3
 8009090:	4b0d      	ldr	r3, [pc, #52]	; (80090c8 <tcp_oos_insert_segment+0x10c>)
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	b29b      	uxth	r3, r3
 8009096:	1ad3      	subs	r3, r2, r3
 8009098:	b29a      	uxth	r2, r3
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	685a      	ldr	r2, [r3, #4]
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	891b      	ldrh	r3, [r3, #8]
 80090a6:	4619      	mov	r1, r3
 80090a8:	4610      	mov	r0, r2
 80090aa:	f7fc fe15 	bl	8005cd8 <pbuf_realloc>
    }
  }
  cseg->next = next;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	683a      	ldr	r2, [r7, #0]
 80090b2:	601a      	str	r2, [r3, #0]
}
 80090b4:	bf00      	nop
 80090b6:	3714      	adds	r7, #20
 80090b8:	46bd      	mov	sp, r7
 80090ba:	bd90      	pop	{r4, r7, pc}
 80090bc:	08012a20 	.word	0x08012a20
 80090c0:	08012ce0 	.word	0x08012ce0
 80090c4:	08012a6c 	.word	0x08012a6c
 80090c8:	20007c8c 	.word	0x20007c8c

080090cc <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 80090cc:	b5b0      	push	{r4, r5, r7, lr}
 80090ce:	b086      	sub	sp, #24
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	60f8      	str	r0, [r7, #12]
 80090d4:	60b9      	str	r1, [r7, #8]
 80090d6:	607a      	str	r2, [r7, #4]
 80090d8:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 80090da:	e03e      	b.n	800915a <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 80090dc:	68bb      	ldr	r3, [r7, #8]
 80090de:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 80090e0:	68bb      	ldr	r3, [r7, #8]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 80090e6:	697b      	ldr	r3, [r7, #20]
 80090e8:	685b      	ldr	r3, [r3, #4]
 80090ea:	4618      	mov	r0, r3
 80090ec:	f7fd f802 	bl	80060f4 <pbuf_clen>
 80090f0:	4603      	mov	r3, r0
 80090f2:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80090fa:	8a7a      	ldrh	r2, [r7, #18]
 80090fc:	429a      	cmp	r2, r3
 80090fe:	d906      	bls.n	800910e <tcp_free_acked_segments+0x42>
 8009100:	4b2a      	ldr	r3, [pc, #168]	; (80091ac <tcp_free_acked_segments+0xe0>)
 8009102:	f240 4257 	movw	r2, #1111	; 0x457
 8009106:	492a      	ldr	r1, [pc, #168]	; (80091b0 <tcp_free_acked_segments+0xe4>)
 8009108:	482a      	ldr	r0, [pc, #168]	; (80091b4 <tcp_free_acked_segments+0xe8>)
 800910a:	f007 fb13 	bl	8010734 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8009114:	8a7b      	ldrh	r3, [r7, #18]
 8009116:	1ad3      	subs	r3, r2, r3
 8009118:	b29a      	uxth	r2, r3
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8009120:	697b      	ldr	r3, [r7, #20]
 8009122:	891a      	ldrh	r2, [r3, #8]
 8009124:	4b24      	ldr	r3, [pc, #144]	; (80091b8 <tcp_free_acked_segments+0xec>)
 8009126:	881b      	ldrh	r3, [r3, #0]
 8009128:	4413      	add	r3, r2
 800912a:	b29a      	uxth	r2, r3
 800912c:	4b22      	ldr	r3, [pc, #136]	; (80091b8 <tcp_free_acked_segments+0xec>)
 800912e:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8009130:	6978      	ldr	r0, [r7, #20]
 8009132:	f7fe f9da 	bl	80074ea <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800913c:	2b00      	cmp	r3, #0
 800913e:	d00c      	beq.n	800915a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8009140:	68bb      	ldr	r3, [r7, #8]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d109      	bne.n	800915a <tcp_free_acked_segments+0x8e>
 8009146:	683b      	ldr	r3, [r7, #0]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d106      	bne.n	800915a <tcp_free_acked_segments+0x8e>
 800914c:	4b17      	ldr	r3, [pc, #92]	; (80091ac <tcp_free_acked_segments+0xe0>)
 800914e:	f240 4261 	movw	r2, #1121	; 0x461
 8009152:	491a      	ldr	r1, [pc, #104]	; (80091bc <tcp_free_acked_segments+0xf0>)
 8009154:	4817      	ldr	r0, [pc, #92]	; (80091b4 <tcp_free_acked_segments+0xe8>)
 8009156:	f007 faed 	bl	8010734 <iprintf>
  while (seg_list != NULL &&
 800915a:	68bb      	ldr	r3, [r7, #8]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d020      	beq.n	80091a2 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8009160:	68bb      	ldr	r3, [r7, #8]
 8009162:	68db      	ldr	r3, [r3, #12]
 8009164:	685b      	ldr	r3, [r3, #4]
 8009166:	4618      	mov	r0, r3
 8009168:	f7fb fb4f 	bl	800480a <lwip_htonl>
 800916c:	4604      	mov	r4, r0
 800916e:	68bb      	ldr	r3, [r7, #8]
 8009170:	891b      	ldrh	r3, [r3, #8]
 8009172:	461d      	mov	r5, r3
 8009174:	68bb      	ldr	r3, [r7, #8]
 8009176:	68db      	ldr	r3, [r3, #12]
 8009178:	899b      	ldrh	r3, [r3, #12]
 800917a:	b29b      	uxth	r3, r3
 800917c:	4618      	mov	r0, r3
 800917e:	f7fb fb2f 	bl	80047e0 <lwip_htons>
 8009182:	4603      	mov	r3, r0
 8009184:	b2db      	uxtb	r3, r3
 8009186:	f003 0303 	and.w	r3, r3, #3
 800918a:	2b00      	cmp	r3, #0
 800918c:	d001      	beq.n	8009192 <tcp_free_acked_segments+0xc6>
 800918e:	2301      	movs	r3, #1
 8009190:	e000      	b.n	8009194 <tcp_free_acked_segments+0xc8>
 8009192:	2300      	movs	r3, #0
 8009194:	442b      	add	r3, r5
 8009196:	18e2      	adds	r2, r4, r3
 8009198:	4b09      	ldr	r3, [pc, #36]	; (80091c0 <tcp_free_acked_segments+0xf4>)
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800919e:	2b00      	cmp	r3, #0
 80091a0:	dd9c      	ble.n	80090dc <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 80091a2:	68bb      	ldr	r3, [r7, #8]
}
 80091a4:	4618      	mov	r0, r3
 80091a6:	3718      	adds	r7, #24
 80091a8:	46bd      	mov	sp, r7
 80091aa:	bdb0      	pop	{r4, r5, r7, pc}
 80091ac:	08012a20 	.word	0x08012a20
 80091b0:	08012d08 	.word	0x08012d08
 80091b4:	08012a6c 	.word	0x08012a6c
 80091b8:	20007c94 	.word	0x20007c94
 80091bc:	08012d30 	.word	0x08012d30
 80091c0:	20007c90 	.word	0x20007c90

080091c4 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 80091c4:	b5b0      	push	{r4, r5, r7, lr}
 80091c6:	b094      	sub	sp, #80	; 0x50
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 80091cc:	2300      	movs	r3, #0
 80091ce:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d106      	bne.n	80091e4 <tcp_receive+0x20>
 80091d6:	4b91      	ldr	r3, [pc, #580]	; (800941c <tcp_receive+0x258>)
 80091d8:	f240 427b 	movw	r2, #1147	; 0x47b
 80091dc:	4990      	ldr	r1, [pc, #576]	; (8009420 <tcp_receive+0x25c>)
 80091de:	4891      	ldr	r0, [pc, #580]	; (8009424 <tcp_receive+0x260>)
 80091e0:	f007 faa8 	bl	8010734 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	7d1b      	ldrb	r3, [r3, #20]
 80091e8:	2b03      	cmp	r3, #3
 80091ea:	d806      	bhi.n	80091fa <tcp_receive+0x36>
 80091ec:	4b8b      	ldr	r3, [pc, #556]	; (800941c <tcp_receive+0x258>)
 80091ee:	f240 427c 	movw	r2, #1148	; 0x47c
 80091f2:	498d      	ldr	r1, [pc, #564]	; (8009428 <tcp_receive+0x264>)
 80091f4:	488b      	ldr	r0, [pc, #556]	; (8009424 <tcp_receive+0x260>)
 80091f6:	f007 fa9d 	bl	8010734 <iprintf>

  if (flags & TCP_ACK) {
 80091fa:	4b8c      	ldr	r3, [pc, #560]	; (800942c <tcp_receive+0x268>)
 80091fc:	781b      	ldrb	r3, [r3, #0]
 80091fe:	f003 0310 	and.w	r3, r3, #16
 8009202:	2b00      	cmp	r3, #0
 8009204:	f000 8264 	beq.w	80096d0 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800920e:	461a      	mov	r2, r3
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009214:	4413      	add	r3, r2
 8009216:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800921c:	4b84      	ldr	r3, [pc, #528]	; (8009430 <tcp_receive+0x26c>)
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	1ad3      	subs	r3, r2, r3
 8009222:	2b00      	cmp	r3, #0
 8009224:	db1b      	blt.n	800925e <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800922a:	4b81      	ldr	r3, [pc, #516]	; (8009430 <tcp_receive+0x26c>)
 800922c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800922e:	429a      	cmp	r2, r3
 8009230:	d106      	bne.n	8009240 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009236:	4b7f      	ldr	r3, [pc, #508]	; (8009434 <tcp_receive+0x270>)
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	1ad3      	subs	r3, r2, r3
 800923c:	2b00      	cmp	r3, #0
 800923e:	db0e      	blt.n	800925e <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009244:	4b7b      	ldr	r3, [pc, #492]	; (8009434 <tcp_receive+0x270>)
 8009246:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8009248:	429a      	cmp	r2, r3
 800924a:	d125      	bne.n	8009298 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800924c:	4b7a      	ldr	r3, [pc, #488]	; (8009438 <tcp_receive+0x274>)
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	89db      	ldrh	r3, [r3, #14]
 8009252:	b29a      	uxth	r2, r3
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800925a:	429a      	cmp	r2, r3
 800925c:	d91c      	bls.n	8009298 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800925e:	4b76      	ldr	r3, [pc, #472]	; (8009438 <tcp_receive+0x274>)
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	89db      	ldrh	r3, [r3, #14]
 8009264:	b29a      	uxth	r2, r3
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009278:	429a      	cmp	r2, r3
 800927a:	d205      	bcs.n	8009288 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8009288:	4b69      	ldr	r3, [pc, #420]	; (8009430 <tcp_receive+0x26c>)
 800928a:	681a      	ldr	r2, [r3, #0]
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8009290:	4b68      	ldr	r3, [pc, #416]	; (8009434 <tcp_receive+0x270>)
 8009292:	681a      	ldr	r2, [r3, #0]
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8009298:	4b66      	ldr	r3, [pc, #408]	; (8009434 <tcp_receive+0x270>)
 800929a:	681a      	ldr	r2, [r3, #0]
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092a0:	1ad3      	subs	r3, r2, r3
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	dc58      	bgt.n	8009358 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 80092a6:	4b65      	ldr	r3, [pc, #404]	; (800943c <tcp_receive+0x278>)
 80092a8:	881b      	ldrh	r3, [r3, #0]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d14b      	bne.n	8009346 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092b2:	687a      	ldr	r2, [r7, #4]
 80092b4:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 80092b8:	4413      	add	r3, r2
 80092ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80092bc:	429a      	cmp	r2, r3
 80092be:	d142      	bne.n	8009346 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	db3d      	blt.n	8009346 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80092ce:	4b59      	ldr	r3, [pc, #356]	; (8009434 <tcp_receive+0x270>)
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	429a      	cmp	r2, r3
 80092d4:	d137      	bne.n	8009346 <tcp_receive+0x182>
              found_dupack = 1;
 80092d6:	2301      	movs	r3, #1
 80092d8:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80092e0:	2bff      	cmp	r3, #255	; 0xff
 80092e2:	d007      	beq.n	80092f4 <tcp_receive+0x130>
                ++pcb->dupacks;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80092ea:	3301      	adds	r3, #1
 80092ec:	b2da      	uxtb	r2, r3
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80092fa:	2b03      	cmp	r3, #3
 80092fc:	d91b      	bls.n	8009336 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009308:	4413      	add	r3, r2
 800930a:	b29a      	uxth	r2, r3
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009312:	429a      	cmp	r2, r3
 8009314:	d30a      	bcc.n	800932c <tcp_receive+0x168>
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009320:	4413      	add	r3, r2
 8009322:	b29a      	uxth	r2, r3
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800932a:	e004      	b.n	8009336 <tcp_receive+0x172>
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009332:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800933c:	2b02      	cmp	r3, #2
 800933e:	d902      	bls.n	8009346 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8009340:	6878      	ldr	r0, [r7, #4]
 8009342:	f001 feeb 	bl	800b11c <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8009346:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009348:	2b00      	cmp	r3, #0
 800934a:	f040 8161 	bne.w	8009610 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	2200      	movs	r2, #0
 8009352:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009356:	e15b      	b.n	8009610 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009358:	4b36      	ldr	r3, [pc, #216]	; (8009434 <tcp_receive+0x270>)
 800935a:	681a      	ldr	r2, [r3, #0]
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009360:	1ad3      	subs	r3, r2, r3
 8009362:	3b01      	subs	r3, #1
 8009364:	2b00      	cmp	r3, #0
 8009366:	f2c0 814e 	blt.w	8009606 <tcp_receive+0x442>
 800936a:	4b32      	ldr	r3, [pc, #200]	; (8009434 <tcp_receive+0x270>)
 800936c:	681a      	ldr	r2, [r3, #0]
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009372:	1ad3      	subs	r3, r2, r3
 8009374:	2b00      	cmp	r3, #0
 8009376:	f300 8146 	bgt.w	8009606 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	8b5b      	ldrh	r3, [r3, #26]
 800937e:	f003 0304 	and.w	r3, r3, #4
 8009382:	2b00      	cmp	r3, #0
 8009384:	d010      	beq.n	80093a8 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	8b5b      	ldrh	r3, [r3, #26]
 800938a:	f023 0304 	bic.w	r3, r3, #4
 800938e:	b29a      	uxth	r2, r3
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	2200      	movs	r2, #0
 80093a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	2200      	movs	r2, #0
 80093ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80093b6:	10db      	asrs	r3, r3, #3
 80093b8:	b21b      	sxth	r3, r3
 80093ba:	b29a      	uxth	r2, r3
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80093c2:	b29b      	uxth	r3, r3
 80093c4:	4413      	add	r3, r2
 80093c6:	b29b      	uxth	r3, r3
 80093c8:	b21a      	sxth	r2, r3
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 80093d0:	4b18      	ldr	r3, [pc, #96]	; (8009434 <tcp_receive+0x270>)
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	b29a      	uxth	r2, r3
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093da:	b29b      	uxth	r3, r3
 80093dc:	1ad3      	subs	r3, r2, r3
 80093de:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	2200      	movs	r2, #0
 80093e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 80093e8:	4b12      	ldr	r3, [pc, #72]	; (8009434 <tcp_receive+0x270>)
 80093ea:	681a      	ldr	r2, [r3, #0]
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	7d1b      	ldrb	r3, [r3, #20]
 80093f4:	2b03      	cmp	r3, #3
 80093f6:	f240 8097 	bls.w	8009528 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8009406:	429a      	cmp	r2, r3
 8009408:	d245      	bcs.n	8009496 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	8b5b      	ldrh	r3, [r3, #26]
 800940e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009412:	2b00      	cmp	r3, #0
 8009414:	d014      	beq.n	8009440 <tcp_receive+0x27c>
 8009416:	2301      	movs	r3, #1
 8009418:	e013      	b.n	8009442 <tcp_receive+0x27e>
 800941a:	bf00      	nop
 800941c:	08012a20 	.word	0x08012a20
 8009420:	08012d50 	.word	0x08012d50
 8009424:	08012a6c 	.word	0x08012a6c
 8009428:	08012d6c 	.word	0x08012d6c
 800942c:	20007c98 	.word	0x20007c98
 8009430:	20007c8c 	.word	0x20007c8c
 8009434:	20007c90 	.word	0x20007c90
 8009438:	20007c7c 	.word	0x20007c7c
 800943c:	20007c96 	.word	0x20007c96
 8009440:	2302      	movs	r3, #2
 8009442:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8009446:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800944a:	b29a      	uxth	r2, r3
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009450:	fb12 f303 	smulbb	r3, r2, r3
 8009454:	b29b      	uxth	r3, r3
 8009456:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009458:	4293      	cmp	r3, r2
 800945a:	bf28      	it	cs
 800945c:	4613      	movcs	r3, r2
 800945e:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009466:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009468:	4413      	add	r3, r2
 800946a:	b29a      	uxth	r2, r3
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009472:	429a      	cmp	r2, r3
 8009474:	d309      	bcc.n	800948a <tcp_receive+0x2c6>
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800947c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800947e:	4413      	add	r3, r2
 8009480:	b29a      	uxth	r2, r3
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8009488:	e04e      	b.n	8009528 <tcp_receive+0x364>
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009490:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8009494:	e048      	b.n	8009528 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800949c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800949e:	4413      	add	r3, r2
 80094a0:	b29a      	uxth	r2, r3
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80094a8:	429a      	cmp	r2, r3
 80094aa:	d309      	bcc.n	80094c0 <tcp_receive+0x2fc>
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80094b2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80094b4:	4413      	add	r3, r2
 80094b6:	b29a      	uxth	r2, r3
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80094be:	e004      	b.n	80094ca <tcp_receive+0x306>
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80094c6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80094d6:	429a      	cmp	r2, r3
 80094d8:	d326      	bcc.n	8009528 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80094e6:	1ad3      	subs	r3, r2, r3
 80094e8:	b29a      	uxth	r2, r3
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80094fa:	4413      	add	r3, r2
 80094fc:	b29a      	uxth	r2, r3
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009504:	429a      	cmp	r2, r3
 8009506:	d30a      	bcc.n	800951e <tcp_receive+0x35a>
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009512:	4413      	add	r3, r2
 8009514:	b29a      	uxth	r2, r3
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800951c:	e004      	b.n	8009528 <tcp_receive+0x364>
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009524:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009530:	4a98      	ldr	r2, [pc, #608]	; (8009794 <tcp_receive+0x5d0>)
 8009532:	6878      	ldr	r0, [r7, #4]
 8009534:	f7ff fdca 	bl	80090cc <tcp_free_acked_segments>
 8009538:	4602      	mov	r2, r0
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009546:	4a94      	ldr	r2, [pc, #592]	; (8009798 <tcp_receive+0x5d4>)
 8009548:	6878      	ldr	r0, [r7, #4]
 800954a:	f7ff fdbf 	bl	80090cc <tcp_free_acked_segments>
 800954e:	4602      	mov	r2, r0
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009558:	2b00      	cmp	r3, #0
 800955a:	d104      	bne.n	8009566 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009562:	861a      	strh	r2, [r3, #48]	; 0x30
 8009564:	e002      	b.n	800956c <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	2200      	movs	r2, #0
 800956a:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	2200      	movs	r2, #0
 8009570:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009576:	2b00      	cmp	r3, #0
 8009578:	d103      	bne.n	8009582 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	2200      	movs	r2, #0
 800957e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8009588:	4b84      	ldr	r3, [pc, #528]	; (800979c <tcp_receive+0x5d8>)
 800958a:	881b      	ldrh	r3, [r3, #0]
 800958c:	4413      	add	r3, r2
 800958e:	b29a      	uxth	r2, r3
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	8b5b      	ldrh	r3, [r3, #26]
 800959a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d035      	beq.n	800960e <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d118      	bne.n	80095dc <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d00c      	beq.n	80095cc <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80095ba:	68db      	ldr	r3, [r3, #12]
 80095bc:	685b      	ldr	r3, [r3, #4]
 80095be:	4618      	mov	r0, r3
 80095c0:	f7fb f923 	bl	800480a <lwip_htonl>
 80095c4:	4603      	mov	r3, r0
 80095c6:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	dc20      	bgt.n	800960e <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	8b5b      	ldrh	r3, [r3, #26]
 80095d0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80095d4:	b29a      	uxth	r2, r3
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80095da:	e018      	b.n	800960e <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095e4:	68db      	ldr	r3, [r3, #12]
 80095e6:	685b      	ldr	r3, [r3, #4]
 80095e8:	4618      	mov	r0, r3
 80095ea:	f7fb f90e 	bl	800480a <lwip_htonl>
 80095ee:	4603      	mov	r3, r0
 80095f0:	1ae3      	subs	r3, r4, r3
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	dc0b      	bgt.n	800960e <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	8b5b      	ldrh	r3, [r3, #26]
 80095fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80095fe:	b29a      	uxth	r2, r3
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009604:	e003      	b.n	800960e <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8009606:	6878      	ldr	r0, [r7, #4]
 8009608:	f001 ff76 	bl	800b4f8 <tcp_send_empty_ack>
 800960c:	e000      	b.n	8009610 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800960e:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009614:	2b00      	cmp	r3, #0
 8009616:	d05b      	beq.n	80096d0 <tcp_receive+0x50c>
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800961c:	4b60      	ldr	r3, [pc, #384]	; (80097a0 <tcp_receive+0x5dc>)
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	1ad3      	subs	r3, r2, r3
 8009622:	2b00      	cmp	r3, #0
 8009624:	da54      	bge.n	80096d0 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8009626:	4b5f      	ldr	r3, [pc, #380]	; (80097a4 <tcp_receive+0x5e0>)
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	b29a      	uxth	r2, r3
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009630:	b29b      	uxth	r3, r3
 8009632:	1ad3      	subs	r3, r2, r3
 8009634:	b29b      	uxth	r3, r3
 8009636:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800963a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8009644:	10db      	asrs	r3, r3, #3
 8009646:	b21b      	sxth	r3, r3
 8009648:	b29b      	uxth	r3, r3
 800964a:	1ad3      	subs	r3, r2, r3
 800964c:	b29b      	uxth	r3, r3
 800964e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8009658:	b29a      	uxth	r2, r3
 800965a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800965e:	4413      	add	r3, r2
 8009660:	b29b      	uxth	r3, r3
 8009662:	b21a      	sxth	r2, r3
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8009668:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800966c:	2b00      	cmp	r3, #0
 800966e:	da05      	bge.n	800967c <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8009670:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009674:	425b      	negs	r3, r3
 8009676:	b29b      	uxth	r3, r3
 8009678:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800967c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8009686:	109b      	asrs	r3, r3, #2
 8009688:	b21b      	sxth	r3, r3
 800968a:	b29b      	uxth	r3, r3
 800968c:	1ad3      	subs	r3, r2, r3
 800968e:	b29b      	uxth	r3, r3
 8009690:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800969a:	b29a      	uxth	r2, r3
 800969c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80096a0:	4413      	add	r3, r2
 80096a2:	b29b      	uxth	r3, r3
 80096a4:	b21a      	sxth	r2, r3
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80096b0:	10db      	asrs	r3, r3, #3
 80096b2:	b21b      	sxth	r3, r3
 80096b4:	b29a      	uxth	r2, r3
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80096bc:	b29b      	uxth	r3, r3
 80096be:	4413      	add	r3, r2
 80096c0:	b29b      	uxth	r3, r3
 80096c2:	b21a      	sxth	r2, r3
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	2200      	movs	r2, #0
 80096ce:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80096d0:	4b35      	ldr	r3, [pc, #212]	; (80097a8 <tcp_receive+0x5e4>)
 80096d2:	881b      	ldrh	r3, [r3, #0]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	f000 84e2 	beq.w	800a09e <tcp_receive+0xeda>
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	7d1b      	ldrb	r3, [r3, #20]
 80096de:	2b06      	cmp	r3, #6
 80096e0:	f200 84dd 	bhi.w	800a09e <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80096e8:	4b30      	ldr	r3, [pc, #192]	; (80097ac <tcp_receive+0x5e8>)
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	1ad3      	subs	r3, r2, r3
 80096ee:	3b01      	subs	r3, #1
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	f2c0 808f 	blt.w	8009814 <tcp_receive+0x650>
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80096fa:	4b2b      	ldr	r3, [pc, #172]	; (80097a8 <tcp_receive+0x5e4>)
 80096fc:	881b      	ldrh	r3, [r3, #0]
 80096fe:	4619      	mov	r1, r3
 8009700:	4b2a      	ldr	r3, [pc, #168]	; (80097ac <tcp_receive+0x5e8>)
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	440b      	add	r3, r1
 8009706:	1ad3      	subs	r3, r2, r3
 8009708:	3301      	adds	r3, #1
 800970a:	2b00      	cmp	r3, #0
 800970c:	f300 8082 	bgt.w	8009814 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8009710:	4b27      	ldr	r3, [pc, #156]	; (80097b0 <tcp_receive+0x5ec>)
 8009712:	685b      	ldr	r3, [r3, #4]
 8009714:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800971a:	4b24      	ldr	r3, [pc, #144]	; (80097ac <tcp_receive+0x5e8>)
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	1ad3      	subs	r3, r2, r3
 8009720:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8009722:	4b23      	ldr	r3, [pc, #140]	; (80097b0 <tcp_receive+0x5ec>)
 8009724:	685b      	ldr	r3, [r3, #4]
 8009726:	2b00      	cmp	r3, #0
 8009728:	d106      	bne.n	8009738 <tcp_receive+0x574>
 800972a:	4b22      	ldr	r3, [pc, #136]	; (80097b4 <tcp_receive+0x5f0>)
 800972c:	f240 5294 	movw	r2, #1428	; 0x594
 8009730:	4921      	ldr	r1, [pc, #132]	; (80097b8 <tcp_receive+0x5f4>)
 8009732:	4822      	ldr	r0, [pc, #136]	; (80097bc <tcp_receive+0x5f8>)
 8009734:	f006 fffe 	bl	8010734 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8009738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800973a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800973e:	4293      	cmp	r3, r2
 8009740:	d906      	bls.n	8009750 <tcp_receive+0x58c>
 8009742:	4b1c      	ldr	r3, [pc, #112]	; (80097b4 <tcp_receive+0x5f0>)
 8009744:	f240 5295 	movw	r2, #1429	; 0x595
 8009748:	491d      	ldr	r1, [pc, #116]	; (80097c0 <tcp_receive+0x5fc>)
 800974a:	481c      	ldr	r0, [pc, #112]	; (80097bc <tcp_receive+0x5f8>)
 800974c:	f006 fff2 	bl	8010734 <iprintf>
      off = (u16_t)off32;
 8009750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009752:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8009756:	4b16      	ldr	r3, [pc, #88]	; (80097b0 <tcp_receive+0x5ec>)
 8009758:	685b      	ldr	r3, [r3, #4]
 800975a:	891b      	ldrh	r3, [r3, #8]
 800975c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8009760:	429a      	cmp	r2, r3
 8009762:	d906      	bls.n	8009772 <tcp_receive+0x5ae>
 8009764:	4b13      	ldr	r3, [pc, #76]	; (80097b4 <tcp_receive+0x5f0>)
 8009766:	f240 5297 	movw	r2, #1431	; 0x597
 800976a:	4916      	ldr	r1, [pc, #88]	; (80097c4 <tcp_receive+0x600>)
 800976c:	4813      	ldr	r0, [pc, #76]	; (80097bc <tcp_receive+0x5f8>)
 800976e:	f006 ffe1 	bl	8010734 <iprintf>
      inseg.len -= off;
 8009772:	4b0f      	ldr	r3, [pc, #60]	; (80097b0 <tcp_receive+0x5ec>)
 8009774:	891a      	ldrh	r2, [r3, #8]
 8009776:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800977a:	1ad3      	subs	r3, r2, r3
 800977c:	b29a      	uxth	r2, r3
 800977e:	4b0c      	ldr	r3, [pc, #48]	; (80097b0 <tcp_receive+0x5ec>)
 8009780:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8009782:	4b0b      	ldr	r3, [pc, #44]	; (80097b0 <tcp_receive+0x5ec>)
 8009784:	685b      	ldr	r3, [r3, #4]
 8009786:	891a      	ldrh	r2, [r3, #8]
 8009788:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800978c:	1ad3      	subs	r3, r2, r3
 800978e:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8009790:	e02a      	b.n	80097e8 <tcp_receive+0x624>
 8009792:	bf00      	nop
 8009794:	08012d88 	.word	0x08012d88
 8009798:	08012d90 	.word	0x08012d90
 800979c:	20007c94 	.word	0x20007c94
 80097a0:	20007c90 	.word	0x20007c90
 80097a4:	20007c54 	.word	0x20007c54
 80097a8:	20007c96 	.word	0x20007c96
 80097ac:	20007c8c 	.word	0x20007c8c
 80097b0:	20007c6c 	.word	0x20007c6c
 80097b4:	08012a20 	.word	0x08012a20
 80097b8:	08012d98 	.word	0x08012d98
 80097bc:	08012a6c 	.word	0x08012a6c
 80097c0:	08012da8 	.word	0x08012da8
 80097c4:	08012db8 	.word	0x08012db8
        off -= p->len;
 80097c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80097ca:	895b      	ldrh	r3, [r3, #10]
 80097cc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80097d0:	1ad3      	subs	r3, r2, r3
 80097d2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 80097d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80097d8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80097da:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 80097dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80097de:	2200      	movs	r2, #0
 80097e0:	815a      	strh	r2, [r3, #10]
        p = p->next;
 80097e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 80097e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80097ea:	895b      	ldrh	r3, [r3, #10]
 80097ec:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80097f0:	429a      	cmp	r2, r3
 80097f2:	d8e9      	bhi.n	80097c8 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 80097f4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80097f8:	4619      	mov	r1, r3
 80097fa:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80097fc:	f7fc fb6c 	bl	8005ed8 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009804:	4a91      	ldr	r2, [pc, #580]	; (8009a4c <tcp_receive+0x888>)
 8009806:	6013      	str	r3, [r2, #0]
 8009808:	4b91      	ldr	r3, [pc, #580]	; (8009a50 <tcp_receive+0x88c>)
 800980a:	68db      	ldr	r3, [r3, #12]
 800980c:	4a8f      	ldr	r2, [pc, #572]	; (8009a4c <tcp_receive+0x888>)
 800980e:	6812      	ldr	r2, [r2, #0]
 8009810:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8009812:	e00d      	b.n	8009830 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8009814:	4b8d      	ldr	r3, [pc, #564]	; (8009a4c <tcp_receive+0x888>)
 8009816:	681a      	ldr	r2, [r3, #0]
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800981c:	1ad3      	subs	r3, r2, r3
 800981e:	2b00      	cmp	r3, #0
 8009820:	da06      	bge.n	8009830 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	8b5b      	ldrh	r3, [r3, #26]
 8009826:	f043 0302 	orr.w	r3, r3, #2
 800982a:	b29a      	uxth	r2, r3
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8009830:	4b86      	ldr	r3, [pc, #536]	; (8009a4c <tcp_receive+0x888>)
 8009832:	681a      	ldr	r2, [r3, #0]
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009838:	1ad3      	subs	r3, r2, r3
 800983a:	2b00      	cmp	r3, #0
 800983c:	f2c0 842a 	blt.w	800a094 <tcp_receive+0xed0>
 8009840:	4b82      	ldr	r3, [pc, #520]	; (8009a4c <tcp_receive+0x888>)
 8009842:	681a      	ldr	r2, [r3, #0]
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009848:	6879      	ldr	r1, [r7, #4]
 800984a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800984c:	440b      	add	r3, r1
 800984e:	1ad3      	subs	r3, r2, r3
 8009850:	3301      	adds	r3, #1
 8009852:	2b00      	cmp	r3, #0
 8009854:	f300 841e 	bgt.w	800a094 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800985c:	4b7b      	ldr	r3, [pc, #492]	; (8009a4c <tcp_receive+0x888>)
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	429a      	cmp	r2, r3
 8009862:	f040 829a 	bne.w	8009d9a <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8009866:	4b7a      	ldr	r3, [pc, #488]	; (8009a50 <tcp_receive+0x88c>)
 8009868:	891c      	ldrh	r4, [r3, #8]
 800986a:	4b79      	ldr	r3, [pc, #484]	; (8009a50 <tcp_receive+0x88c>)
 800986c:	68db      	ldr	r3, [r3, #12]
 800986e:	899b      	ldrh	r3, [r3, #12]
 8009870:	b29b      	uxth	r3, r3
 8009872:	4618      	mov	r0, r3
 8009874:	f7fa ffb4 	bl	80047e0 <lwip_htons>
 8009878:	4603      	mov	r3, r0
 800987a:	b2db      	uxtb	r3, r3
 800987c:	f003 0303 	and.w	r3, r3, #3
 8009880:	2b00      	cmp	r3, #0
 8009882:	d001      	beq.n	8009888 <tcp_receive+0x6c4>
 8009884:	2301      	movs	r3, #1
 8009886:	e000      	b.n	800988a <tcp_receive+0x6c6>
 8009888:	2300      	movs	r3, #0
 800988a:	4423      	add	r3, r4
 800988c:	b29a      	uxth	r2, r3
 800988e:	4b71      	ldr	r3, [pc, #452]	; (8009a54 <tcp_receive+0x890>)
 8009890:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009896:	4b6f      	ldr	r3, [pc, #444]	; (8009a54 <tcp_receive+0x890>)
 8009898:	881b      	ldrh	r3, [r3, #0]
 800989a:	429a      	cmp	r2, r3
 800989c:	d275      	bcs.n	800998a <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800989e:	4b6c      	ldr	r3, [pc, #432]	; (8009a50 <tcp_receive+0x88c>)
 80098a0:	68db      	ldr	r3, [r3, #12]
 80098a2:	899b      	ldrh	r3, [r3, #12]
 80098a4:	b29b      	uxth	r3, r3
 80098a6:	4618      	mov	r0, r3
 80098a8:	f7fa ff9a 	bl	80047e0 <lwip_htons>
 80098ac:	4603      	mov	r3, r0
 80098ae:	b2db      	uxtb	r3, r3
 80098b0:	f003 0301 	and.w	r3, r3, #1
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d01f      	beq.n	80098f8 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80098b8:	4b65      	ldr	r3, [pc, #404]	; (8009a50 <tcp_receive+0x88c>)
 80098ba:	68db      	ldr	r3, [r3, #12]
 80098bc:	899b      	ldrh	r3, [r3, #12]
 80098be:	b29b      	uxth	r3, r3
 80098c0:	b21b      	sxth	r3, r3
 80098c2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80098c6:	b21c      	sxth	r4, r3
 80098c8:	4b61      	ldr	r3, [pc, #388]	; (8009a50 <tcp_receive+0x88c>)
 80098ca:	68db      	ldr	r3, [r3, #12]
 80098cc:	899b      	ldrh	r3, [r3, #12]
 80098ce:	b29b      	uxth	r3, r3
 80098d0:	4618      	mov	r0, r3
 80098d2:	f7fa ff85 	bl	80047e0 <lwip_htons>
 80098d6:	4603      	mov	r3, r0
 80098d8:	b2db      	uxtb	r3, r3
 80098da:	b29b      	uxth	r3, r3
 80098dc:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80098e0:	b29b      	uxth	r3, r3
 80098e2:	4618      	mov	r0, r3
 80098e4:	f7fa ff7c 	bl	80047e0 <lwip_htons>
 80098e8:	4603      	mov	r3, r0
 80098ea:	b21b      	sxth	r3, r3
 80098ec:	4323      	orrs	r3, r4
 80098ee:	b21a      	sxth	r2, r3
 80098f0:	4b57      	ldr	r3, [pc, #348]	; (8009a50 <tcp_receive+0x88c>)
 80098f2:	68db      	ldr	r3, [r3, #12]
 80098f4:	b292      	uxth	r2, r2
 80098f6:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80098fc:	4b54      	ldr	r3, [pc, #336]	; (8009a50 <tcp_receive+0x88c>)
 80098fe:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8009900:	4b53      	ldr	r3, [pc, #332]	; (8009a50 <tcp_receive+0x88c>)
 8009902:	68db      	ldr	r3, [r3, #12]
 8009904:	899b      	ldrh	r3, [r3, #12]
 8009906:	b29b      	uxth	r3, r3
 8009908:	4618      	mov	r0, r3
 800990a:	f7fa ff69 	bl	80047e0 <lwip_htons>
 800990e:	4603      	mov	r3, r0
 8009910:	b2db      	uxtb	r3, r3
 8009912:	f003 0302 	and.w	r3, r3, #2
 8009916:	2b00      	cmp	r3, #0
 8009918:	d005      	beq.n	8009926 <tcp_receive+0x762>
            inseg.len -= 1;
 800991a:	4b4d      	ldr	r3, [pc, #308]	; (8009a50 <tcp_receive+0x88c>)
 800991c:	891b      	ldrh	r3, [r3, #8]
 800991e:	3b01      	subs	r3, #1
 8009920:	b29a      	uxth	r2, r3
 8009922:	4b4b      	ldr	r3, [pc, #300]	; (8009a50 <tcp_receive+0x88c>)
 8009924:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8009926:	4b4a      	ldr	r3, [pc, #296]	; (8009a50 <tcp_receive+0x88c>)
 8009928:	685b      	ldr	r3, [r3, #4]
 800992a:	4a49      	ldr	r2, [pc, #292]	; (8009a50 <tcp_receive+0x88c>)
 800992c:	8912      	ldrh	r2, [r2, #8]
 800992e:	4611      	mov	r1, r2
 8009930:	4618      	mov	r0, r3
 8009932:	f7fc f9d1 	bl	8005cd8 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8009936:	4b46      	ldr	r3, [pc, #280]	; (8009a50 <tcp_receive+0x88c>)
 8009938:	891c      	ldrh	r4, [r3, #8]
 800993a:	4b45      	ldr	r3, [pc, #276]	; (8009a50 <tcp_receive+0x88c>)
 800993c:	68db      	ldr	r3, [r3, #12]
 800993e:	899b      	ldrh	r3, [r3, #12]
 8009940:	b29b      	uxth	r3, r3
 8009942:	4618      	mov	r0, r3
 8009944:	f7fa ff4c 	bl	80047e0 <lwip_htons>
 8009948:	4603      	mov	r3, r0
 800994a:	b2db      	uxtb	r3, r3
 800994c:	f003 0303 	and.w	r3, r3, #3
 8009950:	2b00      	cmp	r3, #0
 8009952:	d001      	beq.n	8009958 <tcp_receive+0x794>
 8009954:	2301      	movs	r3, #1
 8009956:	e000      	b.n	800995a <tcp_receive+0x796>
 8009958:	2300      	movs	r3, #0
 800995a:	4423      	add	r3, r4
 800995c:	b29a      	uxth	r2, r3
 800995e:	4b3d      	ldr	r3, [pc, #244]	; (8009a54 <tcp_receive+0x890>)
 8009960:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8009962:	4b3c      	ldr	r3, [pc, #240]	; (8009a54 <tcp_receive+0x890>)
 8009964:	881b      	ldrh	r3, [r3, #0]
 8009966:	461a      	mov	r2, r3
 8009968:	4b38      	ldr	r3, [pc, #224]	; (8009a4c <tcp_receive+0x888>)
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	441a      	add	r2, r3
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009972:	6879      	ldr	r1, [r7, #4]
 8009974:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009976:	440b      	add	r3, r1
 8009978:	429a      	cmp	r2, r3
 800997a:	d006      	beq.n	800998a <tcp_receive+0x7c6>
 800997c:	4b36      	ldr	r3, [pc, #216]	; (8009a58 <tcp_receive+0x894>)
 800997e:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8009982:	4936      	ldr	r1, [pc, #216]	; (8009a5c <tcp_receive+0x898>)
 8009984:	4836      	ldr	r0, [pc, #216]	; (8009a60 <tcp_receive+0x89c>)
 8009986:	f006 fed5 	bl	8010734 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800998e:	2b00      	cmp	r3, #0
 8009990:	f000 80e7 	beq.w	8009b62 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009994:	4b2e      	ldr	r3, [pc, #184]	; (8009a50 <tcp_receive+0x88c>)
 8009996:	68db      	ldr	r3, [r3, #12]
 8009998:	899b      	ldrh	r3, [r3, #12]
 800999a:	b29b      	uxth	r3, r3
 800999c:	4618      	mov	r0, r3
 800999e:	f7fa ff1f 	bl	80047e0 <lwip_htons>
 80099a2:	4603      	mov	r3, r0
 80099a4:	b2db      	uxtb	r3, r3
 80099a6:	f003 0301 	and.w	r3, r3, #1
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d010      	beq.n	80099d0 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 80099ae:	e00a      	b.n	80099c6 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80099b4:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80099ba:	681a      	ldr	r2, [r3, #0]
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 80099c0:	68f8      	ldr	r0, [r7, #12]
 80099c2:	f7fd fd92 	bl	80074ea <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d1f0      	bne.n	80099b0 <tcp_receive+0x7ec>
 80099ce:	e0c8      	b.n	8009b62 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80099d4:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80099d6:	e052      	b.n	8009a7e <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80099d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099da:	68db      	ldr	r3, [r3, #12]
 80099dc:	899b      	ldrh	r3, [r3, #12]
 80099de:	b29b      	uxth	r3, r3
 80099e0:	4618      	mov	r0, r3
 80099e2:	f7fa fefd 	bl	80047e0 <lwip_htons>
 80099e6:	4603      	mov	r3, r0
 80099e8:	b2db      	uxtb	r3, r3
 80099ea:	f003 0301 	and.w	r3, r3, #1
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d03d      	beq.n	8009a6e <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80099f2:	4b17      	ldr	r3, [pc, #92]	; (8009a50 <tcp_receive+0x88c>)
 80099f4:	68db      	ldr	r3, [r3, #12]
 80099f6:	899b      	ldrh	r3, [r3, #12]
 80099f8:	b29b      	uxth	r3, r3
 80099fa:	4618      	mov	r0, r3
 80099fc:	f7fa fef0 	bl	80047e0 <lwip_htons>
 8009a00:	4603      	mov	r3, r0
 8009a02:	b2db      	uxtb	r3, r3
 8009a04:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d130      	bne.n	8009a6e <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8009a0c:	4b10      	ldr	r3, [pc, #64]	; (8009a50 <tcp_receive+0x88c>)
 8009a0e:	68db      	ldr	r3, [r3, #12]
 8009a10:	899b      	ldrh	r3, [r3, #12]
 8009a12:	b29c      	uxth	r4, r3
 8009a14:	2001      	movs	r0, #1
 8009a16:	f7fa fee3 	bl	80047e0 <lwip_htons>
 8009a1a:	4603      	mov	r3, r0
 8009a1c:	461a      	mov	r2, r3
 8009a1e:	4b0c      	ldr	r3, [pc, #48]	; (8009a50 <tcp_receive+0x88c>)
 8009a20:	68db      	ldr	r3, [r3, #12]
 8009a22:	4322      	orrs	r2, r4
 8009a24:	b292      	uxth	r2, r2
 8009a26:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8009a28:	4b09      	ldr	r3, [pc, #36]	; (8009a50 <tcp_receive+0x88c>)
 8009a2a:	891c      	ldrh	r4, [r3, #8]
 8009a2c:	4b08      	ldr	r3, [pc, #32]	; (8009a50 <tcp_receive+0x88c>)
 8009a2e:	68db      	ldr	r3, [r3, #12]
 8009a30:	899b      	ldrh	r3, [r3, #12]
 8009a32:	b29b      	uxth	r3, r3
 8009a34:	4618      	mov	r0, r3
 8009a36:	f7fa fed3 	bl	80047e0 <lwip_htons>
 8009a3a:	4603      	mov	r3, r0
 8009a3c:	b2db      	uxtb	r3, r3
 8009a3e:	f003 0303 	and.w	r3, r3, #3
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d00e      	beq.n	8009a64 <tcp_receive+0x8a0>
 8009a46:	2301      	movs	r3, #1
 8009a48:	e00d      	b.n	8009a66 <tcp_receive+0x8a2>
 8009a4a:	bf00      	nop
 8009a4c:	20007c8c 	.word	0x20007c8c
 8009a50:	20007c6c 	.word	0x20007c6c
 8009a54:	20007c96 	.word	0x20007c96
 8009a58:	08012a20 	.word	0x08012a20
 8009a5c:	08012dc8 	.word	0x08012dc8
 8009a60:	08012a6c 	.word	0x08012a6c
 8009a64:	2300      	movs	r3, #0
 8009a66:	4423      	add	r3, r4
 8009a68:	b29a      	uxth	r2, r3
 8009a6a:	4b98      	ldr	r3, [pc, #608]	; (8009ccc <tcp_receive+0xb08>)
 8009a6c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8009a6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a70:	613b      	str	r3, [r7, #16]
              next = next->next;
 8009a72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8009a78:	6938      	ldr	r0, [r7, #16]
 8009a7a:	f7fd fd36 	bl	80074ea <tcp_seg_free>
            while (next &&
 8009a7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d00e      	beq.n	8009aa2 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8009a84:	4b91      	ldr	r3, [pc, #580]	; (8009ccc <tcp_receive+0xb08>)
 8009a86:	881b      	ldrh	r3, [r3, #0]
 8009a88:	461a      	mov	r2, r3
 8009a8a:	4b91      	ldr	r3, [pc, #580]	; (8009cd0 <tcp_receive+0xb0c>)
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	441a      	add	r2, r3
 8009a90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a92:	68db      	ldr	r3, [r3, #12]
 8009a94:	685b      	ldr	r3, [r3, #4]
 8009a96:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009a98:	8909      	ldrh	r1, [r1, #8]
 8009a9a:	440b      	add	r3, r1
 8009a9c:	1ad3      	subs	r3, r2, r3
            while (next &&
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	da9a      	bge.n	80099d8 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8009aa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d059      	beq.n	8009b5c <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 8009aa8:	4b88      	ldr	r3, [pc, #544]	; (8009ccc <tcp_receive+0xb08>)
 8009aaa:	881b      	ldrh	r3, [r3, #0]
 8009aac:	461a      	mov	r2, r3
 8009aae:	4b88      	ldr	r3, [pc, #544]	; (8009cd0 <tcp_receive+0xb0c>)
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	441a      	add	r2, r3
 8009ab4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ab6:	68db      	ldr	r3, [r3, #12]
 8009ab8:	685b      	ldr	r3, [r3, #4]
 8009aba:	1ad3      	subs	r3, r2, r3
            if (next &&
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	dd4d      	ble.n	8009b5c <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8009ac0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ac2:	68db      	ldr	r3, [r3, #12]
 8009ac4:	685b      	ldr	r3, [r3, #4]
 8009ac6:	b29a      	uxth	r2, r3
 8009ac8:	4b81      	ldr	r3, [pc, #516]	; (8009cd0 <tcp_receive+0xb0c>)
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	b29b      	uxth	r3, r3
 8009ace:	1ad3      	subs	r3, r2, r3
 8009ad0:	b29a      	uxth	r2, r3
 8009ad2:	4b80      	ldr	r3, [pc, #512]	; (8009cd4 <tcp_receive+0xb10>)
 8009ad4:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8009ad6:	4b7f      	ldr	r3, [pc, #508]	; (8009cd4 <tcp_receive+0xb10>)
 8009ad8:	68db      	ldr	r3, [r3, #12]
 8009ada:	899b      	ldrh	r3, [r3, #12]
 8009adc:	b29b      	uxth	r3, r3
 8009ade:	4618      	mov	r0, r3
 8009ae0:	f7fa fe7e 	bl	80047e0 <lwip_htons>
 8009ae4:	4603      	mov	r3, r0
 8009ae6:	b2db      	uxtb	r3, r3
 8009ae8:	f003 0302 	and.w	r3, r3, #2
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d005      	beq.n	8009afc <tcp_receive+0x938>
                inseg.len -= 1;
 8009af0:	4b78      	ldr	r3, [pc, #480]	; (8009cd4 <tcp_receive+0xb10>)
 8009af2:	891b      	ldrh	r3, [r3, #8]
 8009af4:	3b01      	subs	r3, #1
 8009af6:	b29a      	uxth	r2, r3
 8009af8:	4b76      	ldr	r3, [pc, #472]	; (8009cd4 <tcp_receive+0xb10>)
 8009afa:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8009afc:	4b75      	ldr	r3, [pc, #468]	; (8009cd4 <tcp_receive+0xb10>)
 8009afe:	685b      	ldr	r3, [r3, #4]
 8009b00:	4a74      	ldr	r2, [pc, #464]	; (8009cd4 <tcp_receive+0xb10>)
 8009b02:	8912      	ldrh	r2, [r2, #8]
 8009b04:	4611      	mov	r1, r2
 8009b06:	4618      	mov	r0, r3
 8009b08:	f7fc f8e6 	bl	8005cd8 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8009b0c:	4b71      	ldr	r3, [pc, #452]	; (8009cd4 <tcp_receive+0xb10>)
 8009b0e:	891c      	ldrh	r4, [r3, #8]
 8009b10:	4b70      	ldr	r3, [pc, #448]	; (8009cd4 <tcp_receive+0xb10>)
 8009b12:	68db      	ldr	r3, [r3, #12]
 8009b14:	899b      	ldrh	r3, [r3, #12]
 8009b16:	b29b      	uxth	r3, r3
 8009b18:	4618      	mov	r0, r3
 8009b1a:	f7fa fe61 	bl	80047e0 <lwip_htons>
 8009b1e:	4603      	mov	r3, r0
 8009b20:	b2db      	uxtb	r3, r3
 8009b22:	f003 0303 	and.w	r3, r3, #3
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d001      	beq.n	8009b2e <tcp_receive+0x96a>
 8009b2a:	2301      	movs	r3, #1
 8009b2c:	e000      	b.n	8009b30 <tcp_receive+0x96c>
 8009b2e:	2300      	movs	r3, #0
 8009b30:	4423      	add	r3, r4
 8009b32:	b29a      	uxth	r2, r3
 8009b34:	4b65      	ldr	r3, [pc, #404]	; (8009ccc <tcp_receive+0xb08>)
 8009b36:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8009b38:	4b64      	ldr	r3, [pc, #400]	; (8009ccc <tcp_receive+0xb08>)
 8009b3a:	881b      	ldrh	r3, [r3, #0]
 8009b3c:	461a      	mov	r2, r3
 8009b3e:	4b64      	ldr	r3, [pc, #400]	; (8009cd0 <tcp_receive+0xb0c>)
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	441a      	add	r2, r3
 8009b44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b46:	68db      	ldr	r3, [r3, #12]
 8009b48:	685b      	ldr	r3, [r3, #4]
 8009b4a:	429a      	cmp	r2, r3
 8009b4c:	d006      	beq.n	8009b5c <tcp_receive+0x998>
 8009b4e:	4b62      	ldr	r3, [pc, #392]	; (8009cd8 <tcp_receive+0xb14>)
 8009b50:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8009b54:	4961      	ldr	r1, [pc, #388]	; (8009cdc <tcp_receive+0xb18>)
 8009b56:	4862      	ldr	r0, [pc, #392]	; (8009ce0 <tcp_receive+0xb1c>)
 8009b58:	f006 fdec 	bl	8010734 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009b60:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8009b62:	4b5a      	ldr	r3, [pc, #360]	; (8009ccc <tcp_receive+0xb08>)
 8009b64:	881b      	ldrh	r3, [r3, #0]
 8009b66:	461a      	mov	r2, r3
 8009b68:	4b59      	ldr	r3, [pc, #356]	; (8009cd0 <tcp_receive+0xb0c>)
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	441a      	add	r2, r3
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009b76:	4b55      	ldr	r3, [pc, #340]	; (8009ccc <tcp_receive+0xb08>)
 8009b78:	881b      	ldrh	r3, [r3, #0]
 8009b7a:	429a      	cmp	r2, r3
 8009b7c:	d206      	bcs.n	8009b8c <tcp_receive+0x9c8>
 8009b7e:	4b56      	ldr	r3, [pc, #344]	; (8009cd8 <tcp_receive+0xb14>)
 8009b80:	f240 6207 	movw	r2, #1543	; 0x607
 8009b84:	4957      	ldr	r1, [pc, #348]	; (8009ce4 <tcp_receive+0xb20>)
 8009b86:	4856      	ldr	r0, [pc, #344]	; (8009ce0 <tcp_receive+0xb1c>)
 8009b88:	f006 fdd4 	bl	8010734 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009b90:	4b4e      	ldr	r3, [pc, #312]	; (8009ccc <tcp_receive+0xb08>)
 8009b92:	881b      	ldrh	r3, [r3, #0]
 8009b94:	1ad3      	subs	r3, r2, r3
 8009b96:	b29a      	uxth	r2, r3
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8009b9c:	6878      	ldr	r0, [r7, #4]
 8009b9e:	f7fc ffc5 	bl	8006b2c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8009ba2:	4b4c      	ldr	r3, [pc, #304]	; (8009cd4 <tcp_receive+0xb10>)
 8009ba4:	685b      	ldr	r3, [r3, #4]
 8009ba6:	891b      	ldrh	r3, [r3, #8]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d006      	beq.n	8009bba <tcp_receive+0x9f6>
          recv_data = inseg.p;
 8009bac:	4b49      	ldr	r3, [pc, #292]	; (8009cd4 <tcp_receive+0xb10>)
 8009bae:	685b      	ldr	r3, [r3, #4]
 8009bb0:	4a4d      	ldr	r2, [pc, #308]	; (8009ce8 <tcp_receive+0xb24>)
 8009bb2:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8009bb4:	4b47      	ldr	r3, [pc, #284]	; (8009cd4 <tcp_receive+0xb10>)
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009bba:	4b46      	ldr	r3, [pc, #280]	; (8009cd4 <tcp_receive+0xb10>)
 8009bbc:	68db      	ldr	r3, [r3, #12]
 8009bbe:	899b      	ldrh	r3, [r3, #12]
 8009bc0:	b29b      	uxth	r3, r3
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	f7fa fe0c 	bl	80047e0 <lwip_htons>
 8009bc8:	4603      	mov	r3, r0
 8009bca:	b2db      	uxtb	r3, r3
 8009bcc:	f003 0301 	and.w	r3, r3, #1
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	f000 80b8 	beq.w	8009d46 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8009bd6:	4b45      	ldr	r3, [pc, #276]	; (8009cec <tcp_receive+0xb28>)
 8009bd8:	781b      	ldrb	r3, [r3, #0]
 8009bda:	f043 0320 	orr.w	r3, r3, #32
 8009bde:	b2da      	uxtb	r2, r3
 8009be0:	4b42      	ldr	r3, [pc, #264]	; (8009cec <tcp_receive+0xb28>)
 8009be2:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8009be4:	e0af      	b.n	8009d46 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009bea:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009bf0:	68db      	ldr	r3, [r3, #12]
 8009bf2:	685b      	ldr	r3, [r3, #4]
 8009bf4:	4a36      	ldr	r2, [pc, #216]	; (8009cd0 <tcp_receive+0xb0c>)
 8009bf6:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8009bf8:	68bb      	ldr	r3, [r7, #8]
 8009bfa:	891b      	ldrh	r3, [r3, #8]
 8009bfc:	461c      	mov	r4, r3
 8009bfe:	68bb      	ldr	r3, [r7, #8]
 8009c00:	68db      	ldr	r3, [r3, #12]
 8009c02:	899b      	ldrh	r3, [r3, #12]
 8009c04:	b29b      	uxth	r3, r3
 8009c06:	4618      	mov	r0, r3
 8009c08:	f7fa fdea 	bl	80047e0 <lwip_htons>
 8009c0c:	4603      	mov	r3, r0
 8009c0e:	b2db      	uxtb	r3, r3
 8009c10:	f003 0303 	and.w	r3, r3, #3
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d001      	beq.n	8009c1c <tcp_receive+0xa58>
 8009c18:	2301      	movs	r3, #1
 8009c1a:	e000      	b.n	8009c1e <tcp_receive+0xa5a>
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	191a      	adds	r2, r3, r4
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c24:	441a      	add	r2, r3
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c2e:	461c      	mov	r4, r3
 8009c30:	68bb      	ldr	r3, [r7, #8]
 8009c32:	891b      	ldrh	r3, [r3, #8]
 8009c34:	461d      	mov	r5, r3
 8009c36:	68bb      	ldr	r3, [r7, #8]
 8009c38:	68db      	ldr	r3, [r3, #12]
 8009c3a:	899b      	ldrh	r3, [r3, #12]
 8009c3c:	b29b      	uxth	r3, r3
 8009c3e:	4618      	mov	r0, r3
 8009c40:	f7fa fdce 	bl	80047e0 <lwip_htons>
 8009c44:	4603      	mov	r3, r0
 8009c46:	b2db      	uxtb	r3, r3
 8009c48:	f003 0303 	and.w	r3, r3, #3
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d001      	beq.n	8009c54 <tcp_receive+0xa90>
 8009c50:	2301      	movs	r3, #1
 8009c52:	e000      	b.n	8009c56 <tcp_receive+0xa92>
 8009c54:	2300      	movs	r3, #0
 8009c56:	442b      	add	r3, r5
 8009c58:	429c      	cmp	r4, r3
 8009c5a:	d206      	bcs.n	8009c6a <tcp_receive+0xaa6>
 8009c5c:	4b1e      	ldr	r3, [pc, #120]	; (8009cd8 <tcp_receive+0xb14>)
 8009c5e:	f240 622b 	movw	r2, #1579	; 0x62b
 8009c62:	4923      	ldr	r1, [pc, #140]	; (8009cf0 <tcp_receive+0xb2c>)
 8009c64:	481e      	ldr	r0, [pc, #120]	; (8009ce0 <tcp_receive+0xb1c>)
 8009c66:	f006 fd65 	bl	8010734 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8009c6a:	68bb      	ldr	r3, [r7, #8]
 8009c6c:	891b      	ldrh	r3, [r3, #8]
 8009c6e:	461c      	mov	r4, r3
 8009c70:	68bb      	ldr	r3, [r7, #8]
 8009c72:	68db      	ldr	r3, [r3, #12]
 8009c74:	899b      	ldrh	r3, [r3, #12]
 8009c76:	b29b      	uxth	r3, r3
 8009c78:	4618      	mov	r0, r3
 8009c7a:	f7fa fdb1 	bl	80047e0 <lwip_htons>
 8009c7e:	4603      	mov	r3, r0
 8009c80:	b2db      	uxtb	r3, r3
 8009c82:	f003 0303 	and.w	r3, r3, #3
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d001      	beq.n	8009c8e <tcp_receive+0xaca>
 8009c8a:	2301      	movs	r3, #1
 8009c8c:	e000      	b.n	8009c90 <tcp_receive+0xacc>
 8009c8e:	2300      	movs	r3, #0
 8009c90:	1919      	adds	r1, r3, r4
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009c96:	b28b      	uxth	r3, r1
 8009c98:	1ad3      	subs	r3, r2, r3
 8009c9a:	b29a      	uxth	r2, r3
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8009ca0:	6878      	ldr	r0, [r7, #4]
 8009ca2:	f7fc ff43 	bl	8006b2c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8009ca6:	68bb      	ldr	r3, [r7, #8]
 8009ca8:	685b      	ldr	r3, [r3, #4]
 8009caa:	891b      	ldrh	r3, [r3, #8]
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d028      	beq.n	8009d02 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8009cb0:	4b0d      	ldr	r3, [pc, #52]	; (8009ce8 <tcp_receive+0xb24>)
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d01d      	beq.n	8009cf4 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 8009cb8:	4b0b      	ldr	r3, [pc, #44]	; (8009ce8 <tcp_receive+0xb24>)
 8009cba:	681a      	ldr	r2, [r3, #0]
 8009cbc:	68bb      	ldr	r3, [r7, #8]
 8009cbe:	685b      	ldr	r3, [r3, #4]
 8009cc0:	4619      	mov	r1, r3
 8009cc2:	4610      	mov	r0, r2
 8009cc4:	f7fc fa50 	bl	8006168 <pbuf_cat>
 8009cc8:	e018      	b.n	8009cfc <tcp_receive+0xb38>
 8009cca:	bf00      	nop
 8009ccc:	20007c96 	.word	0x20007c96
 8009cd0:	20007c8c 	.word	0x20007c8c
 8009cd4:	20007c6c 	.word	0x20007c6c
 8009cd8:	08012a20 	.word	0x08012a20
 8009cdc:	08012e00 	.word	0x08012e00
 8009ce0:	08012a6c 	.word	0x08012a6c
 8009ce4:	08012e3c 	.word	0x08012e3c
 8009ce8:	20007c9c 	.word	0x20007c9c
 8009cec:	20007c99 	.word	0x20007c99
 8009cf0:	08012e5c 	.word	0x08012e5c
            } else {
              recv_data = cseg->p;
 8009cf4:	68bb      	ldr	r3, [r7, #8]
 8009cf6:	685b      	ldr	r3, [r3, #4]
 8009cf8:	4a70      	ldr	r2, [pc, #448]	; (8009ebc <tcp_receive+0xcf8>)
 8009cfa:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8009cfc:	68bb      	ldr	r3, [r7, #8]
 8009cfe:	2200      	movs	r2, #0
 8009d00:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8009d02:	68bb      	ldr	r3, [r7, #8]
 8009d04:	68db      	ldr	r3, [r3, #12]
 8009d06:	899b      	ldrh	r3, [r3, #12]
 8009d08:	b29b      	uxth	r3, r3
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	f7fa fd68 	bl	80047e0 <lwip_htons>
 8009d10:	4603      	mov	r3, r0
 8009d12:	b2db      	uxtb	r3, r3
 8009d14:	f003 0301 	and.w	r3, r3, #1
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d00d      	beq.n	8009d38 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8009d1c:	4b68      	ldr	r3, [pc, #416]	; (8009ec0 <tcp_receive+0xcfc>)
 8009d1e:	781b      	ldrb	r3, [r3, #0]
 8009d20:	f043 0320 	orr.w	r3, r3, #32
 8009d24:	b2da      	uxtb	r2, r3
 8009d26:	4b66      	ldr	r3, [pc, #408]	; (8009ec0 <tcp_receive+0xcfc>)
 8009d28:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	7d1b      	ldrb	r3, [r3, #20]
 8009d2e:	2b04      	cmp	r3, #4
 8009d30:	d102      	bne.n	8009d38 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	2207      	movs	r2, #7
 8009d36:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8009d38:	68bb      	ldr	r3, [r7, #8]
 8009d3a:	681a      	ldr	r2, [r3, #0]
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8009d40:	68b8      	ldr	r0, [r7, #8]
 8009d42:	f7fd fbd2 	bl	80074ea <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d008      	beq.n	8009d60 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d52:	68db      	ldr	r3, [r3, #12]
 8009d54:	685a      	ldr	r2, [r3, #4]
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8009d5a:	429a      	cmp	r2, r3
 8009d5c:	f43f af43 	beq.w	8009be6 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	8b5b      	ldrh	r3, [r3, #26]
 8009d64:	f003 0301 	and.w	r3, r3, #1
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d00e      	beq.n	8009d8a <tcp_receive+0xbc6>
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	8b5b      	ldrh	r3, [r3, #26]
 8009d70:	f023 0301 	bic.w	r3, r3, #1
 8009d74:	b29a      	uxth	r2, r3
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	835a      	strh	r2, [r3, #26]
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	8b5b      	ldrh	r3, [r3, #26]
 8009d7e:	f043 0302 	orr.w	r3, r3, #2
 8009d82:	b29a      	uxth	r2, r3
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8009d88:	e188      	b.n	800a09c <tcp_receive+0xed8>
        tcp_ack(pcb);
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	8b5b      	ldrh	r3, [r3, #26]
 8009d8e:	f043 0301 	orr.w	r3, r3, #1
 8009d92:	b29a      	uxth	r2, r3
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8009d98:	e180      	b.n	800a09c <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d106      	bne.n	8009db0 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8009da2:	4848      	ldr	r0, [pc, #288]	; (8009ec4 <tcp_receive+0xd00>)
 8009da4:	f7fd fbba 	bl	800751c <tcp_seg_copy>
 8009da8:	4602      	mov	r2, r0
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	675a      	str	r2, [r3, #116]	; 0x74
 8009dae:	e16d      	b.n	800a08c <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8009db0:	2300      	movs	r3, #0
 8009db2:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009db8:	63bb      	str	r3, [r7, #56]	; 0x38
 8009dba:	e157      	b.n	800a06c <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 8009dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dbe:	68db      	ldr	r3, [r3, #12]
 8009dc0:	685a      	ldr	r2, [r3, #4]
 8009dc2:	4b41      	ldr	r3, [pc, #260]	; (8009ec8 <tcp_receive+0xd04>)
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	429a      	cmp	r2, r3
 8009dc8:	d11d      	bne.n	8009e06 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8009dca:	4b3e      	ldr	r3, [pc, #248]	; (8009ec4 <tcp_receive+0xd00>)
 8009dcc:	891a      	ldrh	r2, [r3, #8]
 8009dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dd0:	891b      	ldrh	r3, [r3, #8]
 8009dd2:	429a      	cmp	r2, r3
 8009dd4:	f240 814f 	bls.w	800a076 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8009dd8:	483a      	ldr	r0, [pc, #232]	; (8009ec4 <tcp_receive+0xd00>)
 8009dda:	f7fd fb9f 	bl	800751c <tcp_seg_copy>
 8009dde:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8009de0:	697b      	ldr	r3, [r7, #20]
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	f000 8149 	beq.w	800a07a <tcp_receive+0xeb6>
                  if (prev != NULL) {
 8009de8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d003      	beq.n	8009df6 <tcp_receive+0xc32>
                    prev->next = cseg;
 8009dee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009df0:	697a      	ldr	r2, [r7, #20]
 8009df2:	601a      	str	r2, [r3, #0]
 8009df4:	e002      	b.n	8009dfc <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	697a      	ldr	r2, [r7, #20]
 8009dfa:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8009dfc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009dfe:	6978      	ldr	r0, [r7, #20]
 8009e00:	f7ff f8dc 	bl	8008fbc <tcp_oos_insert_segment>
                }
                break;
 8009e04:	e139      	b.n	800a07a <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8009e06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d117      	bne.n	8009e3c <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8009e0c:	4b2e      	ldr	r3, [pc, #184]	; (8009ec8 <tcp_receive+0xd04>)
 8009e0e:	681a      	ldr	r2, [r3, #0]
 8009e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e12:	68db      	ldr	r3, [r3, #12]
 8009e14:	685b      	ldr	r3, [r3, #4]
 8009e16:	1ad3      	subs	r3, r2, r3
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	da57      	bge.n	8009ecc <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8009e1c:	4829      	ldr	r0, [pc, #164]	; (8009ec4 <tcp_receive+0xd00>)
 8009e1e:	f7fd fb7d 	bl	800751c <tcp_seg_copy>
 8009e22:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8009e24:	69bb      	ldr	r3, [r7, #24]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	f000 8129 	beq.w	800a07e <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	69ba      	ldr	r2, [r7, #24]
 8009e30:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8009e32:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009e34:	69b8      	ldr	r0, [r7, #24]
 8009e36:	f7ff f8c1 	bl	8008fbc <tcp_oos_insert_segment>
                  }
                  break;
 8009e3a:	e120      	b.n	800a07e <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8009e3c:	4b22      	ldr	r3, [pc, #136]	; (8009ec8 <tcp_receive+0xd04>)
 8009e3e:	681a      	ldr	r2, [r3, #0]
 8009e40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e42:	68db      	ldr	r3, [r3, #12]
 8009e44:	685b      	ldr	r3, [r3, #4]
 8009e46:	1ad3      	subs	r3, r2, r3
 8009e48:	3b01      	subs	r3, #1
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	db3e      	blt.n	8009ecc <tcp_receive+0xd08>
 8009e4e:	4b1e      	ldr	r3, [pc, #120]	; (8009ec8 <tcp_receive+0xd04>)
 8009e50:	681a      	ldr	r2, [r3, #0]
 8009e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e54:	68db      	ldr	r3, [r3, #12]
 8009e56:	685b      	ldr	r3, [r3, #4]
 8009e58:	1ad3      	subs	r3, r2, r3
 8009e5a:	3301      	adds	r3, #1
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	dc35      	bgt.n	8009ecc <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8009e60:	4818      	ldr	r0, [pc, #96]	; (8009ec4 <tcp_receive+0xd00>)
 8009e62:	f7fd fb5b 	bl	800751c <tcp_seg_copy>
 8009e66:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8009e68:	69fb      	ldr	r3, [r7, #28]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	f000 8109 	beq.w	800a082 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8009e70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e72:	68db      	ldr	r3, [r3, #12]
 8009e74:	685b      	ldr	r3, [r3, #4]
 8009e76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009e78:	8912      	ldrh	r2, [r2, #8]
 8009e7a:	441a      	add	r2, r3
 8009e7c:	4b12      	ldr	r3, [pc, #72]	; (8009ec8 <tcp_receive+0xd04>)
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	1ad3      	subs	r3, r2, r3
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	dd12      	ble.n	8009eac <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8009e86:	4b10      	ldr	r3, [pc, #64]	; (8009ec8 <tcp_receive+0xd04>)
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	b29a      	uxth	r2, r3
 8009e8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e8e:	68db      	ldr	r3, [r3, #12]
 8009e90:	685b      	ldr	r3, [r3, #4]
 8009e92:	b29b      	uxth	r3, r3
 8009e94:	1ad3      	subs	r3, r2, r3
 8009e96:	b29a      	uxth	r2, r3
 8009e98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e9a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8009e9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e9e:	685a      	ldr	r2, [r3, #4]
 8009ea0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ea2:	891b      	ldrh	r3, [r3, #8]
 8009ea4:	4619      	mov	r1, r3
 8009ea6:	4610      	mov	r0, r2
 8009ea8:	f7fb ff16 	bl	8005cd8 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8009eac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009eae:	69fa      	ldr	r2, [r7, #28]
 8009eb0:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8009eb2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009eb4:	69f8      	ldr	r0, [r7, #28]
 8009eb6:	f7ff f881 	bl	8008fbc <tcp_oos_insert_segment>
                  }
                  break;
 8009eba:	e0e2      	b.n	800a082 <tcp_receive+0xebe>
 8009ebc:	20007c9c 	.word	0x20007c9c
 8009ec0:	20007c99 	.word	0x20007c99
 8009ec4:	20007c6c 	.word	0x20007c6c
 8009ec8:	20007c8c 	.word	0x20007c8c
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8009ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ece:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8009ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	f040 80c6 	bne.w	800a066 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8009eda:	4b80      	ldr	r3, [pc, #512]	; (800a0dc <tcp_receive+0xf18>)
 8009edc:	681a      	ldr	r2, [r3, #0]
 8009ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ee0:	68db      	ldr	r3, [r3, #12]
 8009ee2:	685b      	ldr	r3, [r3, #4]
 8009ee4:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	f340 80bd 	ble.w	800a066 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8009eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009eee:	68db      	ldr	r3, [r3, #12]
 8009ef0:	899b      	ldrh	r3, [r3, #12]
 8009ef2:	b29b      	uxth	r3, r3
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	f7fa fc73 	bl	80047e0 <lwip_htons>
 8009efa:	4603      	mov	r3, r0
 8009efc:	b2db      	uxtb	r3, r3
 8009efe:	f003 0301 	and.w	r3, r3, #1
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	f040 80bf 	bne.w	800a086 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8009f08:	4875      	ldr	r0, [pc, #468]	; (800a0e0 <tcp_receive+0xf1c>)
 8009f0a:	f7fd fb07 	bl	800751c <tcp_seg_copy>
 8009f0e:	4602      	mov	r2, r0
 8009f10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f12:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8009f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	f000 80b6 	beq.w	800a08a <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8009f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f20:	68db      	ldr	r3, [r3, #12]
 8009f22:	685b      	ldr	r3, [r3, #4]
 8009f24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009f26:	8912      	ldrh	r2, [r2, #8]
 8009f28:	441a      	add	r2, r3
 8009f2a:	4b6c      	ldr	r3, [pc, #432]	; (800a0dc <tcp_receive+0xf18>)
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	1ad3      	subs	r3, r2, r3
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	dd12      	ble.n	8009f5a <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8009f34:	4b69      	ldr	r3, [pc, #420]	; (800a0dc <tcp_receive+0xf18>)
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	b29a      	uxth	r2, r3
 8009f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f3c:	68db      	ldr	r3, [r3, #12]
 8009f3e:	685b      	ldr	r3, [r3, #4]
 8009f40:	b29b      	uxth	r3, r3
 8009f42:	1ad3      	subs	r3, r2, r3
 8009f44:	b29a      	uxth	r2, r3
 8009f46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f48:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8009f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f4c:	685a      	ldr	r2, [r3, #4]
 8009f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f50:	891b      	ldrh	r3, [r3, #8]
 8009f52:	4619      	mov	r1, r3
 8009f54:	4610      	mov	r0, r2
 8009f56:	f7fb febf 	bl	8005cd8 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8009f5a:	4b62      	ldr	r3, [pc, #392]	; (800a0e4 <tcp_receive+0xf20>)
 8009f5c:	881b      	ldrh	r3, [r3, #0]
 8009f5e:	461a      	mov	r2, r3
 8009f60:	4b5e      	ldr	r3, [pc, #376]	; (800a0dc <tcp_receive+0xf18>)
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	441a      	add	r2, r3
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f6a:	6879      	ldr	r1, [r7, #4]
 8009f6c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009f6e:	440b      	add	r3, r1
 8009f70:	1ad3      	subs	r3, r2, r3
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	f340 8089 	ble.w	800a08a <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8009f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	68db      	ldr	r3, [r3, #12]
 8009f7e:	899b      	ldrh	r3, [r3, #12]
 8009f80:	b29b      	uxth	r3, r3
 8009f82:	4618      	mov	r0, r3
 8009f84:	f7fa fc2c 	bl	80047e0 <lwip_htons>
 8009f88:	4603      	mov	r3, r0
 8009f8a:	b2db      	uxtb	r3, r3
 8009f8c:	f003 0301 	and.w	r3, r3, #1
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d022      	beq.n	8009fda <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8009f94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	68db      	ldr	r3, [r3, #12]
 8009f9a:	899b      	ldrh	r3, [r3, #12]
 8009f9c:	b29b      	uxth	r3, r3
 8009f9e:	b21b      	sxth	r3, r3
 8009fa0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009fa4:	b21c      	sxth	r4, r3
 8009fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	68db      	ldr	r3, [r3, #12]
 8009fac:	899b      	ldrh	r3, [r3, #12]
 8009fae:	b29b      	uxth	r3, r3
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	f7fa fc15 	bl	80047e0 <lwip_htons>
 8009fb6:	4603      	mov	r3, r0
 8009fb8:	b2db      	uxtb	r3, r3
 8009fba:	b29b      	uxth	r3, r3
 8009fbc:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8009fc0:	b29b      	uxth	r3, r3
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	f7fa fc0c 	bl	80047e0 <lwip_htons>
 8009fc8:	4603      	mov	r3, r0
 8009fca:	b21b      	sxth	r3, r3
 8009fcc:	4323      	orrs	r3, r4
 8009fce:	b21a      	sxth	r2, r3
 8009fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	68db      	ldr	r3, [r3, #12]
 8009fd6:	b292      	uxth	r2, r2
 8009fd8:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fde:	b29a      	uxth	r2, r3
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009fe4:	4413      	add	r3, r2
 8009fe6:	b299      	uxth	r1, r3
 8009fe8:	4b3c      	ldr	r3, [pc, #240]	; (800a0dc <tcp_receive+0xf18>)
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	b29a      	uxth	r2, r3
 8009fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	1a8a      	subs	r2, r1, r2
 8009ff4:	b292      	uxth	r2, r2
 8009ff6:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8009ff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	685a      	ldr	r2, [r3, #4]
 8009ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	891b      	ldrh	r3, [r3, #8]
 800a004:	4619      	mov	r1, r3
 800a006:	4610      	mov	r0, r2
 800a008:	f7fb fe66 	bl	8005cd8 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800a00c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	891c      	ldrh	r4, [r3, #8]
 800a012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	68db      	ldr	r3, [r3, #12]
 800a018:	899b      	ldrh	r3, [r3, #12]
 800a01a:	b29b      	uxth	r3, r3
 800a01c:	4618      	mov	r0, r3
 800a01e:	f7fa fbdf 	bl	80047e0 <lwip_htons>
 800a022:	4603      	mov	r3, r0
 800a024:	b2db      	uxtb	r3, r3
 800a026:	f003 0303 	and.w	r3, r3, #3
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d001      	beq.n	800a032 <tcp_receive+0xe6e>
 800a02e:	2301      	movs	r3, #1
 800a030:	e000      	b.n	800a034 <tcp_receive+0xe70>
 800a032:	2300      	movs	r3, #0
 800a034:	4423      	add	r3, r4
 800a036:	b29a      	uxth	r2, r3
 800a038:	4b2a      	ldr	r3, [pc, #168]	; (800a0e4 <tcp_receive+0xf20>)
 800a03a:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800a03c:	4b29      	ldr	r3, [pc, #164]	; (800a0e4 <tcp_receive+0xf20>)
 800a03e:	881b      	ldrh	r3, [r3, #0]
 800a040:	461a      	mov	r2, r3
 800a042:	4b26      	ldr	r3, [pc, #152]	; (800a0dc <tcp_receive+0xf18>)
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	441a      	add	r2, r3
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a04c:	6879      	ldr	r1, [r7, #4]
 800a04e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a050:	440b      	add	r3, r1
 800a052:	429a      	cmp	r2, r3
 800a054:	d019      	beq.n	800a08a <tcp_receive+0xec6>
 800a056:	4b24      	ldr	r3, [pc, #144]	; (800a0e8 <tcp_receive+0xf24>)
 800a058:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800a05c:	4923      	ldr	r1, [pc, #140]	; (800a0ec <tcp_receive+0xf28>)
 800a05e:	4824      	ldr	r0, [pc, #144]	; (800a0f0 <tcp_receive+0xf2c>)
 800a060:	f006 fb68 	bl	8010734 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800a064:	e011      	b.n	800a08a <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800a066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	63bb      	str	r3, [r7, #56]	; 0x38
 800a06c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a06e:	2b00      	cmp	r3, #0
 800a070:	f47f aea4 	bne.w	8009dbc <tcp_receive+0xbf8>
 800a074:	e00a      	b.n	800a08c <tcp_receive+0xec8>
                break;
 800a076:	bf00      	nop
 800a078:	e008      	b.n	800a08c <tcp_receive+0xec8>
                break;
 800a07a:	bf00      	nop
 800a07c:	e006      	b.n	800a08c <tcp_receive+0xec8>
                  break;
 800a07e:	bf00      	nop
 800a080:	e004      	b.n	800a08c <tcp_receive+0xec8>
                  break;
 800a082:	bf00      	nop
 800a084:	e002      	b.n	800a08c <tcp_receive+0xec8>
                  break;
 800a086:	bf00      	nop
 800a088:	e000      	b.n	800a08c <tcp_receive+0xec8>
                break;
 800a08a:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800a08c:	6878      	ldr	r0, [r7, #4]
 800a08e:	f001 fa33 	bl	800b4f8 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800a092:	e003      	b.n	800a09c <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800a094:	6878      	ldr	r0, [r7, #4]
 800a096:	f001 fa2f 	bl	800b4f8 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a09a:	e01a      	b.n	800a0d2 <tcp_receive+0xf0e>
 800a09c:	e019      	b.n	800a0d2 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800a09e:	4b0f      	ldr	r3, [pc, #60]	; (800a0dc <tcp_receive+0xf18>)
 800a0a0:	681a      	ldr	r2, [r3, #0]
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0a6:	1ad3      	subs	r3, r2, r3
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	db0a      	blt.n	800a0c2 <tcp_receive+0xefe>
 800a0ac:	4b0b      	ldr	r3, [pc, #44]	; (800a0dc <tcp_receive+0xf18>)
 800a0ae:	681a      	ldr	r2, [r3, #0]
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0b4:	6879      	ldr	r1, [r7, #4]
 800a0b6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a0b8:	440b      	add	r3, r1
 800a0ba:	1ad3      	subs	r3, r2, r3
 800a0bc:	3301      	adds	r3, #1
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	dd07      	ble.n	800a0d2 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	8b5b      	ldrh	r3, [r3, #26]
 800a0c6:	f043 0302 	orr.w	r3, r3, #2
 800a0ca:	b29a      	uxth	r2, r3
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800a0d0:	e7ff      	b.n	800a0d2 <tcp_receive+0xf0e>
 800a0d2:	bf00      	nop
 800a0d4:	3750      	adds	r7, #80	; 0x50
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	bdb0      	pop	{r4, r5, r7, pc}
 800a0da:	bf00      	nop
 800a0dc:	20007c8c 	.word	0x20007c8c
 800a0e0:	20007c6c 	.word	0x20007c6c
 800a0e4:	20007c96 	.word	0x20007c96
 800a0e8:	08012a20 	.word	0x08012a20
 800a0ec:	08012dc8 	.word	0x08012dc8
 800a0f0:	08012a6c 	.word	0x08012a6c

0800a0f4 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800a0f4:	b480      	push	{r7}
 800a0f6:	b083      	sub	sp, #12
 800a0f8:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800a0fa:	4b15      	ldr	r3, [pc, #84]	; (800a150 <tcp_get_next_optbyte+0x5c>)
 800a0fc:	881b      	ldrh	r3, [r3, #0]
 800a0fe:	1c5a      	adds	r2, r3, #1
 800a100:	b291      	uxth	r1, r2
 800a102:	4a13      	ldr	r2, [pc, #76]	; (800a150 <tcp_get_next_optbyte+0x5c>)
 800a104:	8011      	strh	r1, [r2, #0]
 800a106:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800a108:	4b12      	ldr	r3, [pc, #72]	; (800a154 <tcp_get_next_optbyte+0x60>)
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d004      	beq.n	800a11a <tcp_get_next_optbyte+0x26>
 800a110:	4b11      	ldr	r3, [pc, #68]	; (800a158 <tcp_get_next_optbyte+0x64>)
 800a112:	881b      	ldrh	r3, [r3, #0]
 800a114:	88fa      	ldrh	r2, [r7, #6]
 800a116:	429a      	cmp	r2, r3
 800a118:	d208      	bcs.n	800a12c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800a11a:	4b10      	ldr	r3, [pc, #64]	; (800a15c <tcp_get_next_optbyte+0x68>)
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	3314      	adds	r3, #20
 800a120:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800a122:	88fb      	ldrh	r3, [r7, #6]
 800a124:	683a      	ldr	r2, [r7, #0]
 800a126:	4413      	add	r3, r2
 800a128:	781b      	ldrb	r3, [r3, #0]
 800a12a:	e00b      	b.n	800a144 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800a12c:	88fb      	ldrh	r3, [r7, #6]
 800a12e:	b2da      	uxtb	r2, r3
 800a130:	4b09      	ldr	r3, [pc, #36]	; (800a158 <tcp_get_next_optbyte+0x64>)
 800a132:	881b      	ldrh	r3, [r3, #0]
 800a134:	b2db      	uxtb	r3, r3
 800a136:	1ad3      	subs	r3, r2, r3
 800a138:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800a13a:	4b06      	ldr	r3, [pc, #24]	; (800a154 <tcp_get_next_optbyte+0x60>)
 800a13c:	681a      	ldr	r2, [r3, #0]
 800a13e:	797b      	ldrb	r3, [r7, #5]
 800a140:	4413      	add	r3, r2
 800a142:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a144:	4618      	mov	r0, r3
 800a146:	370c      	adds	r7, #12
 800a148:	46bd      	mov	sp, r7
 800a14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a14e:	4770      	bx	lr
 800a150:	20007c88 	.word	0x20007c88
 800a154:	20007c84 	.word	0x20007c84
 800a158:	20007c82 	.word	0x20007c82
 800a15c:	20007c7c 	.word	0x20007c7c

0800a160 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800a160:	b580      	push	{r7, lr}
 800a162:	b084      	sub	sp, #16
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d106      	bne.n	800a17c <tcp_parseopt+0x1c>
 800a16e:	4b32      	ldr	r3, [pc, #200]	; (800a238 <tcp_parseopt+0xd8>)
 800a170:	f240 727d 	movw	r2, #1917	; 0x77d
 800a174:	4931      	ldr	r1, [pc, #196]	; (800a23c <tcp_parseopt+0xdc>)
 800a176:	4832      	ldr	r0, [pc, #200]	; (800a240 <tcp_parseopt+0xe0>)
 800a178:	f006 fadc 	bl	8010734 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800a17c:	4b31      	ldr	r3, [pc, #196]	; (800a244 <tcp_parseopt+0xe4>)
 800a17e:	881b      	ldrh	r3, [r3, #0]
 800a180:	2b00      	cmp	r3, #0
 800a182:	d055      	beq.n	800a230 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800a184:	4b30      	ldr	r3, [pc, #192]	; (800a248 <tcp_parseopt+0xe8>)
 800a186:	2200      	movs	r2, #0
 800a188:	801a      	strh	r2, [r3, #0]
 800a18a:	e045      	b.n	800a218 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800a18c:	f7ff ffb2 	bl	800a0f4 <tcp_get_next_optbyte>
 800a190:	4603      	mov	r3, r0
 800a192:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800a194:	7bfb      	ldrb	r3, [r7, #15]
 800a196:	2b02      	cmp	r3, #2
 800a198:	d006      	beq.n	800a1a8 <tcp_parseopt+0x48>
 800a19a:	2b02      	cmp	r3, #2
 800a19c:	dc2b      	bgt.n	800a1f6 <tcp_parseopt+0x96>
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d041      	beq.n	800a226 <tcp_parseopt+0xc6>
 800a1a2:	2b01      	cmp	r3, #1
 800a1a4:	d127      	bne.n	800a1f6 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800a1a6:	e037      	b.n	800a218 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800a1a8:	f7ff ffa4 	bl	800a0f4 <tcp_get_next_optbyte>
 800a1ac:	4603      	mov	r3, r0
 800a1ae:	2b04      	cmp	r3, #4
 800a1b0:	d13b      	bne.n	800a22a <tcp_parseopt+0xca>
 800a1b2:	4b25      	ldr	r3, [pc, #148]	; (800a248 <tcp_parseopt+0xe8>)
 800a1b4:	881b      	ldrh	r3, [r3, #0]
 800a1b6:	3301      	adds	r3, #1
 800a1b8:	4a22      	ldr	r2, [pc, #136]	; (800a244 <tcp_parseopt+0xe4>)
 800a1ba:	8812      	ldrh	r2, [r2, #0]
 800a1bc:	4293      	cmp	r3, r2
 800a1be:	da34      	bge.n	800a22a <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800a1c0:	f7ff ff98 	bl	800a0f4 <tcp_get_next_optbyte>
 800a1c4:	4603      	mov	r3, r0
 800a1c6:	b29b      	uxth	r3, r3
 800a1c8:	021b      	lsls	r3, r3, #8
 800a1ca:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800a1cc:	f7ff ff92 	bl	800a0f4 <tcp_get_next_optbyte>
 800a1d0:	4603      	mov	r3, r0
 800a1d2:	b29a      	uxth	r2, r3
 800a1d4:	89bb      	ldrh	r3, [r7, #12]
 800a1d6:	4313      	orrs	r3, r2
 800a1d8:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800a1da:	89bb      	ldrh	r3, [r7, #12]
 800a1dc:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800a1e0:	d804      	bhi.n	800a1ec <tcp_parseopt+0x8c>
 800a1e2:	89bb      	ldrh	r3, [r7, #12]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d001      	beq.n	800a1ec <tcp_parseopt+0x8c>
 800a1e8:	89ba      	ldrh	r2, [r7, #12]
 800a1ea:	e001      	b.n	800a1f0 <tcp_parseopt+0x90>
 800a1ec:	f44f 7206 	mov.w	r2, #536	; 0x218
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800a1f4:	e010      	b.n	800a218 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800a1f6:	f7ff ff7d 	bl	800a0f4 <tcp_get_next_optbyte>
 800a1fa:	4603      	mov	r3, r0
 800a1fc:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800a1fe:	7afb      	ldrb	r3, [r7, #11]
 800a200:	2b01      	cmp	r3, #1
 800a202:	d914      	bls.n	800a22e <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800a204:	7afb      	ldrb	r3, [r7, #11]
 800a206:	b29a      	uxth	r2, r3
 800a208:	4b0f      	ldr	r3, [pc, #60]	; (800a248 <tcp_parseopt+0xe8>)
 800a20a:	881b      	ldrh	r3, [r3, #0]
 800a20c:	4413      	add	r3, r2
 800a20e:	b29b      	uxth	r3, r3
 800a210:	3b02      	subs	r3, #2
 800a212:	b29a      	uxth	r2, r3
 800a214:	4b0c      	ldr	r3, [pc, #48]	; (800a248 <tcp_parseopt+0xe8>)
 800a216:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800a218:	4b0b      	ldr	r3, [pc, #44]	; (800a248 <tcp_parseopt+0xe8>)
 800a21a:	881a      	ldrh	r2, [r3, #0]
 800a21c:	4b09      	ldr	r3, [pc, #36]	; (800a244 <tcp_parseopt+0xe4>)
 800a21e:	881b      	ldrh	r3, [r3, #0]
 800a220:	429a      	cmp	r2, r3
 800a222:	d3b3      	bcc.n	800a18c <tcp_parseopt+0x2c>
 800a224:	e004      	b.n	800a230 <tcp_parseopt+0xd0>
          return;
 800a226:	bf00      	nop
 800a228:	e002      	b.n	800a230 <tcp_parseopt+0xd0>
            return;
 800a22a:	bf00      	nop
 800a22c:	e000      	b.n	800a230 <tcp_parseopt+0xd0>
            return;
 800a22e:	bf00      	nop
      }
    }
  }
}
 800a230:	3710      	adds	r7, #16
 800a232:	46bd      	mov	sp, r7
 800a234:	bd80      	pop	{r7, pc}
 800a236:	bf00      	nop
 800a238:	08012a20 	.word	0x08012a20
 800a23c:	08012e84 	.word	0x08012e84
 800a240:	08012a6c 	.word	0x08012a6c
 800a244:	20007c80 	.word	0x20007c80
 800a248:	20007c88 	.word	0x20007c88

0800a24c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800a24c:	b480      	push	{r7}
 800a24e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800a250:	4b05      	ldr	r3, [pc, #20]	; (800a268 <tcp_trigger_input_pcb_close+0x1c>)
 800a252:	781b      	ldrb	r3, [r3, #0]
 800a254:	f043 0310 	orr.w	r3, r3, #16
 800a258:	b2da      	uxtb	r2, r3
 800a25a:	4b03      	ldr	r3, [pc, #12]	; (800a268 <tcp_trigger_input_pcb_close+0x1c>)
 800a25c:	701a      	strb	r2, [r3, #0]
}
 800a25e:	bf00      	nop
 800a260:	46bd      	mov	sp, r7
 800a262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a266:	4770      	bx	lr
 800a268:	20007c99 	.word	0x20007c99

0800a26c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800a26c:	b580      	push	{r7, lr}
 800a26e:	b084      	sub	sp, #16
 800a270:	af00      	add	r7, sp, #0
 800a272:	60f8      	str	r0, [r7, #12]
 800a274:	60b9      	str	r1, [r7, #8]
 800a276:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d00a      	beq.n	800a294 <tcp_route+0x28>
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	7a1b      	ldrb	r3, [r3, #8]
 800a282:	2b00      	cmp	r3, #0
 800a284:	d006      	beq.n	800a294 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	7a1b      	ldrb	r3, [r3, #8]
 800a28a:	4618      	mov	r0, r3
 800a28c:	f7fb fb6a 	bl	8005964 <netif_get_by_index>
 800a290:	4603      	mov	r3, r0
 800a292:	e003      	b.n	800a29c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800a294:	6878      	ldr	r0, [r7, #4]
 800a296:	f004 fff9 	bl	800f28c <ip4_route>
 800a29a:	4603      	mov	r3, r0
  }
}
 800a29c:	4618      	mov	r0, r3
 800a29e:	3710      	adds	r7, #16
 800a2a0:	46bd      	mov	sp, r7
 800a2a2:	bd80      	pop	{r7, pc}

0800a2a4 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800a2a4:	b590      	push	{r4, r7, lr}
 800a2a6:	b087      	sub	sp, #28
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	60f8      	str	r0, [r7, #12]
 800a2ac:	60b9      	str	r1, [r7, #8]
 800a2ae:	603b      	str	r3, [r7, #0]
 800a2b0:	4613      	mov	r3, r2
 800a2b2:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d105      	bne.n	800a2c6 <tcp_create_segment+0x22>
 800a2ba:	4b44      	ldr	r3, [pc, #272]	; (800a3cc <tcp_create_segment+0x128>)
 800a2bc:	22a3      	movs	r2, #163	; 0xa3
 800a2be:	4944      	ldr	r1, [pc, #272]	; (800a3d0 <tcp_create_segment+0x12c>)
 800a2c0:	4844      	ldr	r0, [pc, #272]	; (800a3d4 <tcp_create_segment+0x130>)
 800a2c2:	f006 fa37 	bl	8010734 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800a2c6:	68bb      	ldr	r3, [r7, #8]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d105      	bne.n	800a2d8 <tcp_create_segment+0x34>
 800a2cc:	4b3f      	ldr	r3, [pc, #252]	; (800a3cc <tcp_create_segment+0x128>)
 800a2ce:	22a4      	movs	r2, #164	; 0xa4
 800a2d0:	4941      	ldr	r1, [pc, #260]	; (800a3d8 <tcp_create_segment+0x134>)
 800a2d2:	4840      	ldr	r0, [pc, #256]	; (800a3d4 <tcp_create_segment+0x130>)
 800a2d4:	f006 fa2e 	bl	8010734 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800a2d8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a2dc:	009b      	lsls	r3, r3, #2
 800a2de:	b2db      	uxtb	r3, r3
 800a2e0:	f003 0304 	and.w	r3, r3, #4
 800a2e4:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800a2e6:	2003      	movs	r0, #3
 800a2e8:	f7fa ffaa 	bl	8005240 <memp_malloc>
 800a2ec:	6138      	str	r0, [r7, #16]
 800a2ee:	693b      	ldr	r3, [r7, #16]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d104      	bne.n	800a2fe <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800a2f4:	68b8      	ldr	r0, [r7, #8]
 800a2f6:	f7fb fe75 	bl	8005fe4 <pbuf_free>
    return NULL;
 800a2fa:	2300      	movs	r3, #0
 800a2fc:	e061      	b.n	800a3c2 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800a2fe:	693b      	ldr	r3, [r7, #16]
 800a300:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800a304:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800a306:	693b      	ldr	r3, [r7, #16]
 800a308:	2200      	movs	r2, #0
 800a30a:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800a30c:	693b      	ldr	r3, [r7, #16]
 800a30e:	68ba      	ldr	r2, [r7, #8]
 800a310:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800a312:	68bb      	ldr	r3, [r7, #8]
 800a314:	891a      	ldrh	r2, [r3, #8]
 800a316:	7dfb      	ldrb	r3, [r7, #23]
 800a318:	b29b      	uxth	r3, r3
 800a31a:	429a      	cmp	r2, r3
 800a31c:	d205      	bcs.n	800a32a <tcp_create_segment+0x86>
 800a31e:	4b2b      	ldr	r3, [pc, #172]	; (800a3cc <tcp_create_segment+0x128>)
 800a320:	22b0      	movs	r2, #176	; 0xb0
 800a322:	492e      	ldr	r1, [pc, #184]	; (800a3dc <tcp_create_segment+0x138>)
 800a324:	482b      	ldr	r0, [pc, #172]	; (800a3d4 <tcp_create_segment+0x130>)
 800a326:	f006 fa05 	bl	8010734 <iprintf>
  seg->len = p->tot_len - optlen;
 800a32a:	68bb      	ldr	r3, [r7, #8]
 800a32c:	891a      	ldrh	r2, [r3, #8]
 800a32e:	7dfb      	ldrb	r3, [r7, #23]
 800a330:	b29b      	uxth	r3, r3
 800a332:	1ad3      	subs	r3, r2, r3
 800a334:	b29a      	uxth	r2, r3
 800a336:	693b      	ldr	r3, [r7, #16]
 800a338:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800a33a:	2114      	movs	r1, #20
 800a33c:	68b8      	ldr	r0, [r7, #8]
 800a33e:	f7fb fdbb 	bl	8005eb8 <pbuf_add_header>
 800a342:	4603      	mov	r3, r0
 800a344:	2b00      	cmp	r3, #0
 800a346:	d004      	beq.n	800a352 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800a348:	6938      	ldr	r0, [r7, #16]
 800a34a:	f7fd f8ce 	bl	80074ea <tcp_seg_free>
    return NULL;
 800a34e:	2300      	movs	r3, #0
 800a350:	e037      	b.n	800a3c2 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800a352:	693b      	ldr	r3, [r7, #16]
 800a354:	685b      	ldr	r3, [r3, #4]
 800a356:	685a      	ldr	r2, [r3, #4]
 800a358:	693b      	ldr	r3, [r7, #16]
 800a35a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	8ada      	ldrh	r2, [r3, #22]
 800a360:	693b      	ldr	r3, [r7, #16]
 800a362:	68dc      	ldr	r4, [r3, #12]
 800a364:	4610      	mov	r0, r2
 800a366:	f7fa fa3b 	bl	80047e0 <lwip_htons>
 800a36a:	4603      	mov	r3, r0
 800a36c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	8b1a      	ldrh	r2, [r3, #24]
 800a372:	693b      	ldr	r3, [r7, #16]
 800a374:	68dc      	ldr	r4, [r3, #12]
 800a376:	4610      	mov	r0, r2
 800a378:	f7fa fa32 	bl	80047e0 <lwip_htons>
 800a37c:	4603      	mov	r3, r0
 800a37e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800a380:	693b      	ldr	r3, [r7, #16]
 800a382:	68dc      	ldr	r4, [r3, #12]
 800a384:	6838      	ldr	r0, [r7, #0]
 800a386:	f7fa fa40 	bl	800480a <lwip_htonl>
 800a38a:	4603      	mov	r3, r0
 800a38c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800a38e:	7dfb      	ldrb	r3, [r7, #23]
 800a390:	089b      	lsrs	r3, r3, #2
 800a392:	b2db      	uxtb	r3, r3
 800a394:	b29b      	uxth	r3, r3
 800a396:	3305      	adds	r3, #5
 800a398:	b29b      	uxth	r3, r3
 800a39a:	031b      	lsls	r3, r3, #12
 800a39c:	b29a      	uxth	r2, r3
 800a39e:	79fb      	ldrb	r3, [r7, #7]
 800a3a0:	b29b      	uxth	r3, r3
 800a3a2:	4313      	orrs	r3, r2
 800a3a4:	b29a      	uxth	r2, r3
 800a3a6:	693b      	ldr	r3, [r7, #16]
 800a3a8:	68dc      	ldr	r4, [r3, #12]
 800a3aa:	4610      	mov	r0, r2
 800a3ac:	f7fa fa18 	bl	80047e0 <lwip_htons>
 800a3b0:	4603      	mov	r3, r0
 800a3b2:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800a3b4:	693b      	ldr	r3, [r7, #16]
 800a3b6:	68db      	ldr	r3, [r3, #12]
 800a3b8:	2200      	movs	r2, #0
 800a3ba:	749a      	strb	r2, [r3, #18]
 800a3bc:	2200      	movs	r2, #0
 800a3be:	74da      	strb	r2, [r3, #19]
  return seg;
 800a3c0:	693b      	ldr	r3, [r7, #16]
}
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	371c      	adds	r7, #28
 800a3c6:	46bd      	mov	sp, r7
 800a3c8:	bd90      	pop	{r4, r7, pc}
 800a3ca:	bf00      	nop
 800a3cc:	08012ea0 	.word	0x08012ea0
 800a3d0:	08012ed4 	.word	0x08012ed4
 800a3d4:	08012ef4 	.word	0x08012ef4
 800a3d8:	08012f1c 	.word	0x08012f1c
 800a3dc:	08012f40 	.word	0x08012f40

0800a3e0 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800a3e0:	b590      	push	{r4, r7, lr}
 800a3e2:	b08b      	sub	sp, #44	; 0x2c
 800a3e4:	af02      	add	r7, sp, #8
 800a3e6:	6078      	str	r0, [r7, #4]
 800a3e8:	460b      	mov	r3, r1
 800a3ea:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800a3ec:	2300      	movs	r3, #0
 800a3ee:	61fb      	str	r3, [r7, #28]
 800a3f0:	2300      	movs	r3, #0
 800a3f2:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800a3f4:	2300      	movs	r3, #0
 800a3f6:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d106      	bne.n	800a40c <tcp_split_unsent_seg+0x2c>
 800a3fe:	4b95      	ldr	r3, [pc, #596]	; (800a654 <tcp_split_unsent_seg+0x274>)
 800a400:	f240 324b 	movw	r2, #843	; 0x34b
 800a404:	4994      	ldr	r1, [pc, #592]	; (800a658 <tcp_split_unsent_seg+0x278>)
 800a406:	4895      	ldr	r0, [pc, #596]	; (800a65c <tcp_split_unsent_seg+0x27c>)
 800a408:	f006 f994 	bl	8010734 <iprintf>

  useg = pcb->unsent;
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a410:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800a412:	697b      	ldr	r3, [r7, #20]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d102      	bne.n	800a41e <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800a418:	f04f 33ff 	mov.w	r3, #4294967295
 800a41c:	e116      	b.n	800a64c <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800a41e:	887b      	ldrh	r3, [r7, #2]
 800a420:	2b00      	cmp	r3, #0
 800a422:	d109      	bne.n	800a438 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800a424:	4b8b      	ldr	r3, [pc, #556]	; (800a654 <tcp_split_unsent_seg+0x274>)
 800a426:	f240 3253 	movw	r2, #851	; 0x353
 800a42a:	498d      	ldr	r1, [pc, #564]	; (800a660 <tcp_split_unsent_seg+0x280>)
 800a42c:	488b      	ldr	r0, [pc, #556]	; (800a65c <tcp_split_unsent_seg+0x27c>)
 800a42e:	f006 f981 	bl	8010734 <iprintf>
    return ERR_VAL;
 800a432:	f06f 0305 	mvn.w	r3, #5
 800a436:	e109      	b.n	800a64c <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800a438:	697b      	ldr	r3, [r7, #20]
 800a43a:	891b      	ldrh	r3, [r3, #8]
 800a43c:	887a      	ldrh	r2, [r7, #2]
 800a43e:	429a      	cmp	r2, r3
 800a440:	d301      	bcc.n	800a446 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800a442:	2300      	movs	r3, #0
 800a444:	e102      	b.n	800a64c <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a44a:	887a      	ldrh	r2, [r7, #2]
 800a44c:	429a      	cmp	r2, r3
 800a44e:	d906      	bls.n	800a45e <tcp_split_unsent_seg+0x7e>
 800a450:	4b80      	ldr	r3, [pc, #512]	; (800a654 <tcp_split_unsent_seg+0x274>)
 800a452:	f240 325b 	movw	r2, #859	; 0x35b
 800a456:	4983      	ldr	r1, [pc, #524]	; (800a664 <tcp_split_unsent_seg+0x284>)
 800a458:	4880      	ldr	r0, [pc, #512]	; (800a65c <tcp_split_unsent_seg+0x27c>)
 800a45a:	f006 f96b 	bl	8010734 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800a45e:	697b      	ldr	r3, [r7, #20]
 800a460:	891b      	ldrh	r3, [r3, #8]
 800a462:	2b00      	cmp	r3, #0
 800a464:	d106      	bne.n	800a474 <tcp_split_unsent_seg+0x94>
 800a466:	4b7b      	ldr	r3, [pc, #492]	; (800a654 <tcp_split_unsent_seg+0x274>)
 800a468:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800a46c:	497e      	ldr	r1, [pc, #504]	; (800a668 <tcp_split_unsent_seg+0x288>)
 800a46e:	487b      	ldr	r0, [pc, #492]	; (800a65c <tcp_split_unsent_seg+0x27c>)
 800a470:	f006 f960 	bl	8010734 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800a474:	697b      	ldr	r3, [r7, #20]
 800a476:	7a9b      	ldrb	r3, [r3, #10]
 800a478:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800a47a:	7bfb      	ldrb	r3, [r7, #15]
 800a47c:	009b      	lsls	r3, r3, #2
 800a47e:	b2db      	uxtb	r3, r3
 800a480:	f003 0304 	and.w	r3, r3, #4
 800a484:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800a486:	697b      	ldr	r3, [r7, #20]
 800a488:	891a      	ldrh	r2, [r3, #8]
 800a48a:	887b      	ldrh	r3, [r7, #2]
 800a48c:	1ad3      	subs	r3, r2, r3
 800a48e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800a490:	7bbb      	ldrb	r3, [r7, #14]
 800a492:	b29a      	uxth	r2, r3
 800a494:	89bb      	ldrh	r3, [r7, #12]
 800a496:	4413      	add	r3, r2
 800a498:	b29b      	uxth	r3, r3
 800a49a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800a49e:	4619      	mov	r1, r3
 800a4a0:	2036      	movs	r0, #54	; 0x36
 800a4a2:	f7fb fabb 	bl	8005a1c <pbuf_alloc>
 800a4a6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800a4a8:	693b      	ldr	r3, [r7, #16]
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	f000 80b7 	beq.w	800a61e <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800a4b0:	697b      	ldr	r3, [r7, #20]
 800a4b2:	685b      	ldr	r3, [r3, #4]
 800a4b4:	891a      	ldrh	r2, [r3, #8]
 800a4b6:	697b      	ldr	r3, [r7, #20]
 800a4b8:	891b      	ldrh	r3, [r3, #8]
 800a4ba:	1ad3      	subs	r3, r2, r3
 800a4bc:	b29a      	uxth	r2, r3
 800a4be:	887b      	ldrh	r3, [r7, #2]
 800a4c0:	4413      	add	r3, r2
 800a4c2:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800a4c4:	697b      	ldr	r3, [r7, #20]
 800a4c6:	6858      	ldr	r0, [r3, #4]
 800a4c8:	693b      	ldr	r3, [r7, #16]
 800a4ca:	685a      	ldr	r2, [r3, #4]
 800a4cc:	7bbb      	ldrb	r3, [r7, #14]
 800a4ce:	18d1      	adds	r1, r2, r3
 800a4d0:	897b      	ldrh	r3, [r7, #10]
 800a4d2:	89ba      	ldrh	r2, [r7, #12]
 800a4d4:	f7fb ff80 	bl	80063d8 <pbuf_copy_partial>
 800a4d8:	4603      	mov	r3, r0
 800a4da:	461a      	mov	r2, r3
 800a4dc:	89bb      	ldrh	r3, [r7, #12]
 800a4de:	4293      	cmp	r3, r2
 800a4e0:	f040 809f 	bne.w	800a622 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800a4e4:	697b      	ldr	r3, [r7, #20]
 800a4e6:	68db      	ldr	r3, [r3, #12]
 800a4e8:	899b      	ldrh	r3, [r3, #12]
 800a4ea:	b29b      	uxth	r3, r3
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	f7fa f977 	bl	80047e0 <lwip_htons>
 800a4f2:	4603      	mov	r3, r0
 800a4f4:	b2db      	uxtb	r3, r3
 800a4f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a4fa:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800a4fc:	2300      	movs	r3, #0
 800a4fe:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800a500:	7efb      	ldrb	r3, [r7, #27]
 800a502:	f003 0308 	and.w	r3, r3, #8
 800a506:	2b00      	cmp	r3, #0
 800a508:	d007      	beq.n	800a51a <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800a50a:	7efb      	ldrb	r3, [r7, #27]
 800a50c:	f023 0308 	bic.w	r3, r3, #8
 800a510:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800a512:	7ebb      	ldrb	r3, [r7, #26]
 800a514:	f043 0308 	orr.w	r3, r3, #8
 800a518:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800a51a:	7efb      	ldrb	r3, [r7, #27]
 800a51c:	f003 0301 	and.w	r3, r3, #1
 800a520:	2b00      	cmp	r3, #0
 800a522:	d007      	beq.n	800a534 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800a524:	7efb      	ldrb	r3, [r7, #27]
 800a526:	f023 0301 	bic.w	r3, r3, #1
 800a52a:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800a52c:	7ebb      	ldrb	r3, [r7, #26]
 800a52e:	f043 0301 	orr.w	r3, r3, #1
 800a532:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800a534:	697b      	ldr	r3, [r7, #20]
 800a536:	68db      	ldr	r3, [r3, #12]
 800a538:	685b      	ldr	r3, [r3, #4]
 800a53a:	4618      	mov	r0, r3
 800a53c:	f7fa f965 	bl	800480a <lwip_htonl>
 800a540:	4602      	mov	r2, r0
 800a542:	887b      	ldrh	r3, [r7, #2]
 800a544:	18d1      	adds	r1, r2, r3
 800a546:	7eba      	ldrb	r2, [r7, #26]
 800a548:	7bfb      	ldrb	r3, [r7, #15]
 800a54a:	9300      	str	r3, [sp, #0]
 800a54c:	460b      	mov	r3, r1
 800a54e:	6939      	ldr	r1, [r7, #16]
 800a550:	6878      	ldr	r0, [r7, #4]
 800a552:	f7ff fea7 	bl	800a2a4 <tcp_create_segment>
 800a556:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800a558:	69fb      	ldr	r3, [r7, #28]
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d063      	beq.n	800a626 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800a55e:	697b      	ldr	r3, [r7, #20]
 800a560:	685b      	ldr	r3, [r3, #4]
 800a562:	4618      	mov	r0, r3
 800a564:	f7fb fdc6 	bl	80060f4 <pbuf_clen>
 800a568:	4603      	mov	r3, r0
 800a56a:	461a      	mov	r2, r3
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a572:	1a9b      	subs	r3, r3, r2
 800a574:	b29a      	uxth	r2, r3
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800a57c:	697b      	ldr	r3, [r7, #20]
 800a57e:	6858      	ldr	r0, [r3, #4]
 800a580:	697b      	ldr	r3, [r7, #20]
 800a582:	685b      	ldr	r3, [r3, #4]
 800a584:	891a      	ldrh	r2, [r3, #8]
 800a586:	89bb      	ldrh	r3, [r7, #12]
 800a588:	1ad3      	subs	r3, r2, r3
 800a58a:	b29b      	uxth	r3, r3
 800a58c:	4619      	mov	r1, r3
 800a58e:	f7fb fba3 	bl	8005cd8 <pbuf_realloc>
  useg->len -= remainder;
 800a592:	697b      	ldr	r3, [r7, #20]
 800a594:	891a      	ldrh	r2, [r3, #8]
 800a596:	89bb      	ldrh	r3, [r7, #12]
 800a598:	1ad3      	subs	r3, r2, r3
 800a59a:	b29a      	uxth	r2, r3
 800a59c:	697b      	ldr	r3, [r7, #20]
 800a59e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800a5a0:	697b      	ldr	r3, [r7, #20]
 800a5a2:	68db      	ldr	r3, [r3, #12]
 800a5a4:	899b      	ldrh	r3, [r3, #12]
 800a5a6:	b29c      	uxth	r4, r3
 800a5a8:	7efb      	ldrb	r3, [r7, #27]
 800a5aa:	b29b      	uxth	r3, r3
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	f7fa f917 	bl	80047e0 <lwip_htons>
 800a5b2:	4603      	mov	r3, r0
 800a5b4:	461a      	mov	r2, r3
 800a5b6:	697b      	ldr	r3, [r7, #20]
 800a5b8:	68db      	ldr	r3, [r3, #12]
 800a5ba:	4322      	orrs	r2, r4
 800a5bc:	b292      	uxth	r2, r2
 800a5be:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800a5c0:	697b      	ldr	r3, [r7, #20]
 800a5c2:	685b      	ldr	r3, [r3, #4]
 800a5c4:	4618      	mov	r0, r3
 800a5c6:	f7fb fd95 	bl	80060f4 <pbuf_clen>
 800a5ca:	4603      	mov	r3, r0
 800a5cc:	461a      	mov	r2, r3
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a5d4:	4413      	add	r3, r2
 800a5d6:	b29a      	uxth	r2, r3
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800a5de:	69fb      	ldr	r3, [r7, #28]
 800a5e0:	685b      	ldr	r3, [r3, #4]
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	f7fb fd86 	bl	80060f4 <pbuf_clen>
 800a5e8:	4603      	mov	r3, r0
 800a5ea:	461a      	mov	r2, r3
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a5f2:	4413      	add	r3, r2
 800a5f4:	b29a      	uxth	r2, r3
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800a5fc:	697b      	ldr	r3, [r7, #20]
 800a5fe:	681a      	ldr	r2, [r3, #0]
 800a600:	69fb      	ldr	r3, [r7, #28]
 800a602:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800a604:	697b      	ldr	r3, [r7, #20]
 800a606:	69fa      	ldr	r2, [r7, #28]
 800a608:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800a60a:	69fb      	ldr	r3, [r7, #28]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d103      	bne.n	800a61a <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	2200      	movs	r2, #0
 800a616:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800a61a:	2300      	movs	r3, #0
 800a61c:	e016      	b.n	800a64c <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800a61e:	bf00      	nop
 800a620:	e002      	b.n	800a628 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800a622:	bf00      	nop
 800a624:	e000      	b.n	800a628 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800a626:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800a628:	69fb      	ldr	r3, [r7, #28]
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d006      	beq.n	800a63c <tcp_split_unsent_seg+0x25c>
 800a62e:	4b09      	ldr	r3, [pc, #36]	; (800a654 <tcp_split_unsent_seg+0x274>)
 800a630:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800a634:	490d      	ldr	r1, [pc, #52]	; (800a66c <tcp_split_unsent_seg+0x28c>)
 800a636:	4809      	ldr	r0, [pc, #36]	; (800a65c <tcp_split_unsent_seg+0x27c>)
 800a638:	f006 f87c 	bl	8010734 <iprintf>
  if (p != NULL) {
 800a63c:	693b      	ldr	r3, [r7, #16]
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d002      	beq.n	800a648 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800a642:	6938      	ldr	r0, [r7, #16]
 800a644:	f7fb fcce 	bl	8005fe4 <pbuf_free>
  }

  return ERR_MEM;
 800a648:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a64c:	4618      	mov	r0, r3
 800a64e:	3724      	adds	r7, #36	; 0x24
 800a650:	46bd      	mov	sp, r7
 800a652:	bd90      	pop	{r4, r7, pc}
 800a654:	08012ea0 	.word	0x08012ea0
 800a658:	08013234 	.word	0x08013234
 800a65c:	08012ef4 	.word	0x08012ef4
 800a660:	08013258 	.word	0x08013258
 800a664:	0801327c 	.word	0x0801327c
 800a668:	0801328c 	.word	0x0801328c
 800a66c:	0801329c 	.word	0x0801329c

0800a670 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800a670:	b590      	push	{r4, r7, lr}
 800a672:	b085      	sub	sp, #20
 800a674:	af00      	add	r7, sp, #0
 800a676:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d106      	bne.n	800a68c <tcp_send_fin+0x1c>
 800a67e:	4b21      	ldr	r3, [pc, #132]	; (800a704 <tcp_send_fin+0x94>)
 800a680:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800a684:	4920      	ldr	r1, [pc, #128]	; (800a708 <tcp_send_fin+0x98>)
 800a686:	4821      	ldr	r0, [pc, #132]	; (800a70c <tcp_send_fin+0x9c>)
 800a688:	f006 f854 	bl	8010734 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a690:	2b00      	cmp	r3, #0
 800a692:	d02e      	beq.n	800a6f2 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a698:	60fb      	str	r3, [r7, #12]
 800a69a:	e002      	b.n	800a6a2 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d1f8      	bne.n	800a69c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	68db      	ldr	r3, [r3, #12]
 800a6ae:	899b      	ldrh	r3, [r3, #12]
 800a6b0:	b29b      	uxth	r3, r3
 800a6b2:	4618      	mov	r0, r3
 800a6b4:	f7fa f894 	bl	80047e0 <lwip_htons>
 800a6b8:	4603      	mov	r3, r0
 800a6ba:	b2db      	uxtb	r3, r3
 800a6bc:	f003 0307 	and.w	r3, r3, #7
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d116      	bne.n	800a6f2 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	68db      	ldr	r3, [r3, #12]
 800a6c8:	899b      	ldrh	r3, [r3, #12]
 800a6ca:	b29c      	uxth	r4, r3
 800a6cc:	2001      	movs	r0, #1
 800a6ce:	f7fa f887 	bl	80047e0 <lwip_htons>
 800a6d2:	4603      	mov	r3, r0
 800a6d4:	461a      	mov	r2, r3
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	68db      	ldr	r3, [r3, #12]
 800a6da:	4322      	orrs	r2, r4
 800a6dc:	b292      	uxth	r2, r2
 800a6de:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	8b5b      	ldrh	r3, [r3, #26]
 800a6e4:	f043 0320 	orr.w	r3, r3, #32
 800a6e8:	b29a      	uxth	r2, r3
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800a6ee:	2300      	movs	r3, #0
 800a6f0:	e004      	b.n	800a6fc <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800a6f2:	2101      	movs	r1, #1
 800a6f4:	6878      	ldr	r0, [r7, #4]
 800a6f6:	f000 f80b 	bl	800a710 <tcp_enqueue_flags>
 800a6fa:	4603      	mov	r3, r0
}
 800a6fc:	4618      	mov	r0, r3
 800a6fe:	3714      	adds	r7, #20
 800a700:	46bd      	mov	sp, r7
 800a702:	bd90      	pop	{r4, r7, pc}
 800a704:	08012ea0 	.word	0x08012ea0
 800a708:	080132a8 	.word	0x080132a8
 800a70c:	08012ef4 	.word	0x08012ef4

0800a710 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800a710:	b580      	push	{r7, lr}
 800a712:	b08a      	sub	sp, #40	; 0x28
 800a714:	af02      	add	r7, sp, #8
 800a716:	6078      	str	r0, [r7, #4]
 800a718:	460b      	mov	r3, r1
 800a71a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800a71c:	2300      	movs	r3, #0
 800a71e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800a720:	2300      	movs	r3, #0
 800a722:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800a724:	78fb      	ldrb	r3, [r7, #3]
 800a726:	f003 0303 	and.w	r3, r3, #3
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d106      	bne.n	800a73c <tcp_enqueue_flags+0x2c>
 800a72e:	4b67      	ldr	r3, [pc, #412]	; (800a8cc <tcp_enqueue_flags+0x1bc>)
 800a730:	f240 4211 	movw	r2, #1041	; 0x411
 800a734:	4966      	ldr	r1, [pc, #408]	; (800a8d0 <tcp_enqueue_flags+0x1c0>)
 800a736:	4867      	ldr	r0, [pc, #412]	; (800a8d4 <tcp_enqueue_flags+0x1c4>)
 800a738:	f005 fffc 	bl	8010734 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d106      	bne.n	800a750 <tcp_enqueue_flags+0x40>
 800a742:	4b62      	ldr	r3, [pc, #392]	; (800a8cc <tcp_enqueue_flags+0x1bc>)
 800a744:	f240 4213 	movw	r2, #1043	; 0x413
 800a748:	4963      	ldr	r1, [pc, #396]	; (800a8d8 <tcp_enqueue_flags+0x1c8>)
 800a74a:	4862      	ldr	r0, [pc, #392]	; (800a8d4 <tcp_enqueue_flags+0x1c4>)
 800a74c:	f005 fff2 	bl	8010734 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800a750:	78fb      	ldrb	r3, [r7, #3]
 800a752:	f003 0302 	and.w	r3, r3, #2
 800a756:	2b00      	cmp	r3, #0
 800a758:	d001      	beq.n	800a75e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800a75a:	2301      	movs	r3, #1
 800a75c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800a75e:	7ffb      	ldrb	r3, [r7, #31]
 800a760:	009b      	lsls	r3, r3, #2
 800a762:	b2db      	uxtb	r3, r3
 800a764:	f003 0304 	and.w	r3, r3, #4
 800a768:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800a76a:	7dfb      	ldrb	r3, [r7, #23]
 800a76c:	b29b      	uxth	r3, r3
 800a76e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800a772:	4619      	mov	r1, r3
 800a774:	2036      	movs	r0, #54	; 0x36
 800a776:	f7fb f951 	bl	8005a1c <pbuf_alloc>
 800a77a:	6138      	str	r0, [r7, #16]
 800a77c:	693b      	ldr	r3, [r7, #16]
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d109      	bne.n	800a796 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	8b5b      	ldrh	r3, [r3, #26]
 800a786:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a78a:	b29a      	uxth	r2, r3
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800a790:	f04f 33ff 	mov.w	r3, #4294967295
 800a794:	e095      	b.n	800a8c2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800a796:	693b      	ldr	r3, [r7, #16]
 800a798:	895a      	ldrh	r2, [r3, #10]
 800a79a:	7dfb      	ldrb	r3, [r7, #23]
 800a79c:	b29b      	uxth	r3, r3
 800a79e:	429a      	cmp	r2, r3
 800a7a0:	d206      	bcs.n	800a7b0 <tcp_enqueue_flags+0xa0>
 800a7a2:	4b4a      	ldr	r3, [pc, #296]	; (800a8cc <tcp_enqueue_flags+0x1bc>)
 800a7a4:	f240 4239 	movw	r2, #1081	; 0x439
 800a7a8:	494c      	ldr	r1, [pc, #304]	; (800a8dc <tcp_enqueue_flags+0x1cc>)
 800a7aa:	484a      	ldr	r0, [pc, #296]	; (800a8d4 <tcp_enqueue_flags+0x1c4>)
 800a7ac:	f005 ffc2 	bl	8010734 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800a7b4:	78fa      	ldrb	r2, [r7, #3]
 800a7b6:	7ffb      	ldrb	r3, [r7, #31]
 800a7b8:	9300      	str	r3, [sp, #0]
 800a7ba:	460b      	mov	r3, r1
 800a7bc:	6939      	ldr	r1, [r7, #16]
 800a7be:	6878      	ldr	r0, [r7, #4]
 800a7c0:	f7ff fd70 	bl	800a2a4 <tcp_create_segment>
 800a7c4:	60f8      	str	r0, [r7, #12]
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d109      	bne.n	800a7e0 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	8b5b      	ldrh	r3, [r3, #26]
 800a7d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a7d4:	b29a      	uxth	r2, r3
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800a7da:	f04f 33ff 	mov.w	r3, #4294967295
 800a7de:	e070      	b.n	800a8c2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	68db      	ldr	r3, [r3, #12]
 800a7e4:	f003 0303 	and.w	r3, r3, #3
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d006      	beq.n	800a7fa <tcp_enqueue_flags+0xea>
 800a7ec:	4b37      	ldr	r3, [pc, #220]	; (800a8cc <tcp_enqueue_flags+0x1bc>)
 800a7ee:	f240 4242 	movw	r2, #1090	; 0x442
 800a7f2:	493b      	ldr	r1, [pc, #236]	; (800a8e0 <tcp_enqueue_flags+0x1d0>)
 800a7f4:	4837      	ldr	r0, [pc, #220]	; (800a8d4 <tcp_enqueue_flags+0x1c4>)
 800a7f6:	f005 ff9d 	bl	8010734 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	891b      	ldrh	r3, [r3, #8]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d006      	beq.n	800a810 <tcp_enqueue_flags+0x100>
 800a802:	4b32      	ldr	r3, [pc, #200]	; (800a8cc <tcp_enqueue_flags+0x1bc>)
 800a804:	f240 4243 	movw	r2, #1091	; 0x443
 800a808:	4936      	ldr	r1, [pc, #216]	; (800a8e4 <tcp_enqueue_flags+0x1d4>)
 800a80a:	4832      	ldr	r0, [pc, #200]	; (800a8d4 <tcp_enqueue_flags+0x1c4>)
 800a80c:	f005 ff92 	bl	8010734 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a814:	2b00      	cmp	r3, #0
 800a816:	d103      	bne.n	800a820 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	68fa      	ldr	r2, [r7, #12]
 800a81c:	66da      	str	r2, [r3, #108]	; 0x6c
 800a81e:	e00d      	b.n	800a83c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a824:	61bb      	str	r3, [r7, #24]
 800a826:	e002      	b.n	800a82e <tcp_enqueue_flags+0x11e>
 800a828:	69bb      	ldr	r3, [r7, #24]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	61bb      	str	r3, [r7, #24]
 800a82e:	69bb      	ldr	r3, [r7, #24]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	2b00      	cmp	r3, #0
 800a834:	d1f8      	bne.n	800a828 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800a836:	69bb      	ldr	r3, [r7, #24]
 800a838:	68fa      	ldr	r2, [r7, #12]
 800a83a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	2200      	movs	r2, #0
 800a840:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800a844:	78fb      	ldrb	r3, [r7, #3]
 800a846:	f003 0302 	and.w	r3, r3, #2
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d104      	bne.n	800a858 <tcp_enqueue_flags+0x148>
 800a84e:	78fb      	ldrb	r3, [r7, #3]
 800a850:	f003 0301 	and.w	r3, r3, #1
 800a854:	2b00      	cmp	r3, #0
 800a856:	d004      	beq.n	800a862 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a85c:	1c5a      	adds	r2, r3, #1
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800a862:	78fb      	ldrb	r3, [r7, #3]
 800a864:	f003 0301 	and.w	r3, r3, #1
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d006      	beq.n	800a87a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	8b5b      	ldrh	r3, [r3, #26]
 800a870:	f043 0320 	orr.w	r3, r3, #32
 800a874:	b29a      	uxth	r2, r3
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	685b      	ldr	r3, [r3, #4]
 800a87e:	4618      	mov	r0, r3
 800a880:	f7fb fc38 	bl	80060f4 <pbuf_clen>
 800a884:	4603      	mov	r3, r0
 800a886:	461a      	mov	r2, r3
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a88e:	4413      	add	r3, r2
 800a890:	b29a      	uxth	r2, r3
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d00e      	beq.n	800a8c0 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d10a      	bne.n	800a8c0 <tcp_enqueue_flags+0x1b0>
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d106      	bne.n	800a8c0 <tcp_enqueue_flags+0x1b0>
 800a8b2:	4b06      	ldr	r3, [pc, #24]	; (800a8cc <tcp_enqueue_flags+0x1bc>)
 800a8b4:	f240 4265 	movw	r2, #1125	; 0x465
 800a8b8:	490b      	ldr	r1, [pc, #44]	; (800a8e8 <tcp_enqueue_flags+0x1d8>)
 800a8ba:	4806      	ldr	r0, [pc, #24]	; (800a8d4 <tcp_enqueue_flags+0x1c4>)
 800a8bc:	f005 ff3a 	bl	8010734 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800a8c0:	2300      	movs	r3, #0
}
 800a8c2:	4618      	mov	r0, r3
 800a8c4:	3720      	adds	r7, #32
 800a8c6:	46bd      	mov	sp, r7
 800a8c8:	bd80      	pop	{r7, pc}
 800a8ca:	bf00      	nop
 800a8cc:	08012ea0 	.word	0x08012ea0
 800a8d0:	080132c4 	.word	0x080132c4
 800a8d4:	08012ef4 	.word	0x08012ef4
 800a8d8:	0801331c 	.word	0x0801331c
 800a8dc:	0801333c 	.word	0x0801333c
 800a8e0:	08013378 	.word	0x08013378
 800a8e4:	08013390 	.word	0x08013390
 800a8e8:	080133bc 	.word	0x080133bc

0800a8ec <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800a8ec:	b5b0      	push	{r4, r5, r7, lr}
 800a8ee:	b08a      	sub	sp, #40	; 0x28
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d106      	bne.n	800a908 <tcp_output+0x1c>
 800a8fa:	4b8a      	ldr	r3, [pc, #552]	; (800ab24 <tcp_output+0x238>)
 800a8fc:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800a900:	4989      	ldr	r1, [pc, #548]	; (800ab28 <tcp_output+0x23c>)
 800a902:	488a      	ldr	r0, [pc, #552]	; (800ab2c <tcp_output+0x240>)
 800a904:	f005 ff16 	bl	8010734 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	7d1b      	ldrb	r3, [r3, #20]
 800a90c:	2b01      	cmp	r3, #1
 800a90e:	d106      	bne.n	800a91e <tcp_output+0x32>
 800a910:	4b84      	ldr	r3, [pc, #528]	; (800ab24 <tcp_output+0x238>)
 800a912:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800a916:	4986      	ldr	r1, [pc, #536]	; (800ab30 <tcp_output+0x244>)
 800a918:	4884      	ldr	r0, [pc, #528]	; (800ab2c <tcp_output+0x240>)
 800a91a:	f005 ff0b 	bl	8010734 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800a91e:	4b85      	ldr	r3, [pc, #532]	; (800ab34 <tcp_output+0x248>)
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	687a      	ldr	r2, [r7, #4]
 800a924:	429a      	cmp	r2, r3
 800a926:	d101      	bne.n	800a92c <tcp_output+0x40>
    return ERR_OK;
 800a928:	2300      	movs	r3, #0
 800a92a:	e1ce      	b.n	800acca <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a938:	4293      	cmp	r3, r2
 800a93a:	bf28      	it	cs
 800a93c:	4613      	movcs	r3, r2
 800a93e:	b29b      	uxth	r3, r3
 800a940:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a946:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800a948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d10b      	bne.n	800a966 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	8b5b      	ldrh	r3, [r3, #26]
 800a952:	f003 0302 	and.w	r3, r3, #2
 800a956:	2b00      	cmp	r3, #0
 800a958:	f000 81aa 	beq.w	800acb0 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800a95c:	6878      	ldr	r0, [r7, #4]
 800a95e:	f000 fdcb 	bl	800b4f8 <tcp_send_empty_ack>
 800a962:	4603      	mov	r3, r0
 800a964:	e1b1      	b.n	800acca <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800a966:	6879      	ldr	r1, [r7, #4]
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	3304      	adds	r3, #4
 800a96c:	461a      	mov	r2, r3
 800a96e:	6878      	ldr	r0, [r7, #4]
 800a970:	f7ff fc7c 	bl	800a26c <tcp_route>
 800a974:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800a976:	697b      	ldr	r3, [r7, #20]
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d102      	bne.n	800a982 <tcp_output+0x96>
    return ERR_RTE;
 800a97c:	f06f 0303 	mvn.w	r3, #3
 800a980:	e1a3      	b.n	800acca <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	2b00      	cmp	r3, #0
 800a986:	d003      	beq.n	800a990 <tcp_output+0xa4>
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d111      	bne.n	800a9b4 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800a990:	697b      	ldr	r3, [r7, #20]
 800a992:	2b00      	cmp	r3, #0
 800a994:	d002      	beq.n	800a99c <tcp_output+0xb0>
 800a996:	697b      	ldr	r3, [r7, #20]
 800a998:	3304      	adds	r3, #4
 800a99a:	e000      	b.n	800a99e <tcp_output+0xb2>
 800a99c:	2300      	movs	r3, #0
 800a99e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800a9a0:	693b      	ldr	r3, [r7, #16]
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d102      	bne.n	800a9ac <tcp_output+0xc0>
      return ERR_RTE;
 800a9a6:	f06f 0303 	mvn.w	r3, #3
 800a9aa:	e18e      	b.n	800acca <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800a9ac:	693b      	ldr	r3, [r7, #16]
 800a9ae:	681a      	ldr	r2, [r3, #0]
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800a9b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9b6:	68db      	ldr	r3, [r3, #12]
 800a9b8:	685b      	ldr	r3, [r3, #4]
 800a9ba:	4618      	mov	r0, r3
 800a9bc:	f7f9 ff25 	bl	800480a <lwip_htonl>
 800a9c0:	4602      	mov	r2, r0
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a9c6:	1ad3      	subs	r3, r2, r3
 800a9c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a9ca:	8912      	ldrh	r2, [r2, #8]
 800a9cc:	4413      	add	r3, r2
 800a9ce:	69ba      	ldr	r2, [r7, #24]
 800a9d0:	429a      	cmp	r2, r3
 800a9d2:	d227      	bcs.n	800aa24 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a9da:	461a      	mov	r2, r3
 800a9dc:	69bb      	ldr	r3, [r7, #24]
 800a9de:	4293      	cmp	r3, r2
 800a9e0:	d114      	bne.n	800aa0c <tcp_output+0x120>
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d110      	bne.n	800aa0c <tcp_output+0x120>
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d10b      	bne.n	800aa0c <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	2200      	movs	r2, #0
 800a9f8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	2201      	movs	r2, #1
 800aa00:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	2200      	movs	r2, #0
 800aa08:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	8b5b      	ldrh	r3, [r3, #26]
 800aa10:	f003 0302 	and.w	r3, r3, #2
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	f000 814d 	beq.w	800acb4 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800aa1a:	6878      	ldr	r0, [r7, #4]
 800aa1c:	f000 fd6c 	bl	800b4f8 <tcp_send_empty_ack>
 800aa20:	4603      	mov	r3, r0
 800aa22:	e152      	b.n	800acca <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	2200      	movs	r2, #0
 800aa28:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa30:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800aa32:	6a3b      	ldr	r3, [r7, #32]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	f000 811c 	beq.w	800ac72 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800aa3a:	e002      	b.n	800aa42 <tcp_output+0x156>
 800aa3c:	6a3b      	ldr	r3, [r7, #32]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	623b      	str	r3, [r7, #32]
 800aa42:	6a3b      	ldr	r3, [r7, #32]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d1f8      	bne.n	800aa3c <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800aa4a:	e112      	b.n	800ac72 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800aa4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa4e:	68db      	ldr	r3, [r3, #12]
 800aa50:	899b      	ldrh	r3, [r3, #12]
 800aa52:	b29b      	uxth	r3, r3
 800aa54:	4618      	mov	r0, r3
 800aa56:	f7f9 fec3 	bl	80047e0 <lwip_htons>
 800aa5a:	4603      	mov	r3, r0
 800aa5c:	b2db      	uxtb	r3, r3
 800aa5e:	f003 0304 	and.w	r3, r3, #4
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d006      	beq.n	800aa74 <tcp_output+0x188>
 800aa66:	4b2f      	ldr	r3, [pc, #188]	; (800ab24 <tcp_output+0x238>)
 800aa68:	f240 5236 	movw	r2, #1334	; 0x536
 800aa6c:	4932      	ldr	r1, [pc, #200]	; (800ab38 <tcp_output+0x24c>)
 800aa6e:	482f      	ldr	r0, [pc, #188]	; (800ab2c <tcp_output+0x240>)
 800aa70:	f005 fe60 	bl	8010734 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d01f      	beq.n	800aabc <tcp_output+0x1d0>
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	8b5b      	ldrh	r3, [r3, #26]
 800aa80:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d119      	bne.n	800aabc <tcp_output+0x1d0>
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d00b      	beq.n	800aaa8 <tcp_output+0x1bc>
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d110      	bne.n	800aabc <tcp_output+0x1d0>
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aa9e:	891a      	ldrh	r2, [r3, #8]
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800aaa4:	429a      	cmp	r2, r3
 800aaa6:	d209      	bcs.n	800aabc <tcp_output+0x1d0>
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d004      	beq.n	800aabc <tcp_output+0x1d0>
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800aab8:	2b08      	cmp	r3, #8
 800aaba:	d901      	bls.n	800aac0 <tcp_output+0x1d4>
 800aabc:	2301      	movs	r3, #1
 800aabe:	e000      	b.n	800aac2 <tcp_output+0x1d6>
 800aac0:	2300      	movs	r3, #0
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d106      	bne.n	800aad4 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	8b5b      	ldrh	r3, [r3, #26]
 800aaca:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800aace:	2b00      	cmp	r3, #0
 800aad0:	f000 80e4 	beq.w	800ac9c <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	7d1b      	ldrb	r3, [r3, #20]
 800aad8:	2b02      	cmp	r3, #2
 800aada:	d00d      	beq.n	800aaf8 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800aadc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aade:	68db      	ldr	r3, [r3, #12]
 800aae0:	899b      	ldrh	r3, [r3, #12]
 800aae2:	b29c      	uxth	r4, r3
 800aae4:	2010      	movs	r0, #16
 800aae6:	f7f9 fe7b 	bl	80047e0 <lwip_htons>
 800aaea:	4603      	mov	r3, r0
 800aaec:	461a      	mov	r2, r3
 800aaee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaf0:	68db      	ldr	r3, [r3, #12]
 800aaf2:	4322      	orrs	r2, r4
 800aaf4:	b292      	uxth	r2, r2
 800aaf6:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800aaf8:	697a      	ldr	r2, [r7, #20]
 800aafa:	6879      	ldr	r1, [r7, #4]
 800aafc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800aafe:	f000 f909 	bl	800ad14 <tcp_output_segment>
 800ab02:	4603      	mov	r3, r0
 800ab04:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800ab06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d016      	beq.n	800ab3c <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	8b5b      	ldrh	r3, [r3, #26]
 800ab12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab16:	b29a      	uxth	r2, r3
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	835a      	strh	r2, [r3, #26]
      return err;
 800ab1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ab20:	e0d3      	b.n	800acca <tcp_output+0x3de>
 800ab22:	bf00      	nop
 800ab24:	08012ea0 	.word	0x08012ea0
 800ab28:	080133e4 	.word	0x080133e4
 800ab2c:	08012ef4 	.word	0x08012ef4
 800ab30:	080133fc 	.word	0x080133fc
 800ab34:	20007ca0 	.word	0x20007ca0
 800ab38:	08013424 	.word	0x08013424
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800ab3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab3e:	681a      	ldr	r2, [r3, #0]
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	7d1b      	ldrb	r3, [r3, #20]
 800ab48:	2b02      	cmp	r3, #2
 800ab4a:	d006      	beq.n	800ab5a <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	8b5b      	ldrh	r3, [r3, #26]
 800ab50:	f023 0303 	bic.w	r3, r3, #3
 800ab54:	b29a      	uxth	r2, r3
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800ab5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab5c:	68db      	ldr	r3, [r3, #12]
 800ab5e:	685b      	ldr	r3, [r3, #4]
 800ab60:	4618      	mov	r0, r3
 800ab62:	f7f9 fe52 	bl	800480a <lwip_htonl>
 800ab66:	4604      	mov	r4, r0
 800ab68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab6a:	891b      	ldrh	r3, [r3, #8]
 800ab6c:	461d      	mov	r5, r3
 800ab6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab70:	68db      	ldr	r3, [r3, #12]
 800ab72:	899b      	ldrh	r3, [r3, #12]
 800ab74:	b29b      	uxth	r3, r3
 800ab76:	4618      	mov	r0, r3
 800ab78:	f7f9 fe32 	bl	80047e0 <lwip_htons>
 800ab7c:	4603      	mov	r3, r0
 800ab7e:	b2db      	uxtb	r3, r3
 800ab80:	f003 0303 	and.w	r3, r3, #3
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d001      	beq.n	800ab8c <tcp_output+0x2a0>
 800ab88:	2301      	movs	r3, #1
 800ab8a:	e000      	b.n	800ab8e <tcp_output+0x2a2>
 800ab8c:	2300      	movs	r3, #0
 800ab8e:	442b      	add	r3, r5
 800ab90:	4423      	add	r3, r4
 800ab92:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ab98:	68bb      	ldr	r3, [r7, #8]
 800ab9a:	1ad3      	subs	r3, r2, r3
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	da02      	bge.n	800aba6 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	68ba      	ldr	r2, [r7, #8]
 800aba4:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800aba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aba8:	891b      	ldrh	r3, [r3, #8]
 800abaa:	461c      	mov	r4, r3
 800abac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abae:	68db      	ldr	r3, [r3, #12]
 800abb0:	899b      	ldrh	r3, [r3, #12]
 800abb2:	b29b      	uxth	r3, r3
 800abb4:	4618      	mov	r0, r3
 800abb6:	f7f9 fe13 	bl	80047e0 <lwip_htons>
 800abba:	4603      	mov	r3, r0
 800abbc:	b2db      	uxtb	r3, r3
 800abbe:	f003 0303 	and.w	r3, r3, #3
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d001      	beq.n	800abca <tcp_output+0x2de>
 800abc6:	2301      	movs	r3, #1
 800abc8:	e000      	b.n	800abcc <tcp_output+0x2e0>
 800abca:	2300      	movs	r3, #0
 800abcc:	4423      	add	r3, r4
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d049      	beq.n	800ac66 <tcp_output+0x37a>
      seg->next = NULL;
 800abd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abd4:	2200      	movs	r2, #0
 800abd6:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d105      	bne.n	800abec <tcp_output+0x300>
        pcb->unacked = seg;
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800abe4:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800abe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abe8:	623b      	str	r3, [r7, #32]
 800abea:	e03f      	b.n	800ac6c <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800abec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abee:	68db      	ldr	r3, [r3, #12]
 800abf0:	685b      	ldr	r3, [r3, #4]
 800abf2:	4618      	mov	r0, r3
 800abf4:	f7f9 fe09 	bl	800480a <lwip_htonl>
 800abf8:	4604      	mov	r4, r0
 800abfa:	6a3b      	ldr	r3, [r7, #32]
 800abfc:	68db      	ldr	r3, [r3, #12]
 800abfe:	685b      	ldr	r3, [r3, #4]
 800ac00:	4618      	mov	r0, r3
 800ac02:	f7f9 fe02 	bl	800480a <lwip_htonl>
 800ac06:	4603      	mov	r3, r0
 800ac08:	1ae3      	subs	r3, r4, r3
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	da24      	bge.n	800ac58 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	3370      	adds	r3, #112	; 0x70
 800ac12:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800ac14:	e002      	b.n	800ac1c <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800ac16:	69fb      	ldr	r3, [r7, #28]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800ac1c:	69fb      	ldr	r3, [r7, #28]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d011      	beq.n	800ac48 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800ac24:	69fb      	ldr	r3, [r7, #28]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	68db      	ldr	r3, [r3, #12]
 800ac2a:	685b      	ldr	r3, [r3, #4]
 800ac2c:	4618      	mov	r0, r3
 800ac2e:	f7f9 fdec 	bl	800480a <lwip_htonl>
 800ac32:	4604      	mov	r4, r0
 800ac34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac36:	68db      	ldr	r3, [r3, #12]
 800ac38:	685b      	ldr	r3, [r3, #4]
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	f7f9 fde5 	bl	800480a <lwip_htonl>
 800ac40:	4603      	mov	r3, r0
 800ac42:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	dbe6      	blt.n	800ac16 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800ac48:	69fb      	ldr	r3, [r7, #28]
 800ac4a:	681a      	ldr	r2, [r3, #0]
 800ac4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac4e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800ac50:	69fb      	ldr	r3, [r7, #28]
 800ac52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac54:	601a      	str	r2, [r3, #0]
 800ac56:	e009      	b.n	800ac6c <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800ac58:	6a3b      	ldr	r3, [r7, #32]
 800ac5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac5c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800ac5e:	6a3b      	ldr	r3, [r7, #32]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	623b      	str	r3, [r7, #32]
 800ac64:	e002      	b.n	800ac6c <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800ac66:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ac68:	f7fc fc3f 	bl	80074ea <tcp_seg_free>
    }
    seg = pcb->unsent;
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac70:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800ac72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d012      	beq.n	800ac9e <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800ac78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac7a:	68db      	ldr	r3, [r3, #12]
 800ac7c:	685b      	ldr	r3, [r3, #4]
 800ac7e:	4618      	mov	r0, r3
 800ac80:	f7f9 fdc3 	bl	800480a <lwip_htonl>
 800ac84:	4602      	mov	r2, r0
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac8a:	1ad3      	subs	r3, r2, r3
 800ac8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac8e:	8912      	ldrh	r2, [r2, #8]
 800ac90:	4413      	add	r3, r2
  while (seg != NULL &&
 800ac92:	69ba      	ldr	r2, [r7, #24]
 800ac94:	429a      	cmp	r2, r3
 800ac96:	f4bf aed9 	bcs.w	800aa4c <tcp_output+0x160>
 800ac9a:	e000      	b.n	800ac9e <tcp_output+0x3b2>
      break;
 800ac9c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d108      	bne.n	800acb8 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	2200      	movs	r2, #0
 800acaa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800acae:	e004      	b.n	800acba <tcp_output+0x3ce>
    goto output_done;
 800acb0:	bf00      	nop
 800acb2:	e002      	b.n	800acba <tcp_output+0x3ce>
    goto output_done;
 800acb4:	bf00      	nop
 800acb6:	e000      	b.n	800acba <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800acb8:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	8b5b      	ldrh	r3, [r3, #26]
 800acbe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800acc2:	b29a      	uxth	r2, r3
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800acc8:	2300      	movs	r3, #0
}
 800acca:	4618      	mov	r0, r3
 800accc:	3728      	adds	r7, #40	; 0x28
 800acce:	46bd      	mov	sp, r7
 800acd0:	bdb0      	pop	{r4, r5, r7, pc}
 800acd2:	bf00      	nop

0800acd4 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800acd4:	b580      	push	{r7, lr}
 800acd6:	b082      	sub	sp, #8
 800acd8:	af00      	add	r7, sp, #0
 800acda:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d106      	bne.n	800acf0 <tcp_output_segment_busy+0x1c>
 800ace2:	4b09      	ldr	r3, [pc, #36]	; (800ad08 <tcp_output_segment_busy+0x34>)
 800ace4:	f240 529a 	movw	r2, #1434	; 0x59a
 800ace8:	4908      	ldr	r1, [pc, #32]	; (800ad0c <tcp_output_segment_busy+0x38>)
 800acea:	4809      	ldr	r0, [pc, #36]	; (800ad10 <tcp_output_segment_busy+0x3c>)
 800acec:	f005 fd22 	bl	8010734 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	685b      	ldr	r3, [r3, #4]
 800acf4:	7b9b      	ldrb	r3, [r3, #14]
 800acf6:	2b01      	cmp	r3, #1
 800acf8:	d001      	beq.n	800acfe <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800acfa:	2301      	movs	r3, #1
 800acfc:	e000      	b.n	800ad00 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800acfe:	2300      	movs	r3, #0
}
 800ad00:	4618      	mov	r0, r3
 800ad02:	3708      	adds	r7, #8
 800ad04:	46bd      	mov	sp, r7
 800ad06:	bd80      	pop	{r7, pc}
 800ad08:	08012ea0 	.word	0x08012ea0
 800ad0c:	0801343c 	.word	0x0801343c
 800ad10:	08012ef4 	.word	0x08012ef4

0800ad14 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800ad14:	b5b0      	push	{r4, r5, r7, lr}
 800ad16:	b08c      	sub	sp, #48	; 0x30
 800ad18:	af04      	add	r7, sp, #16
 800ad1a:	60f8      	str	r0, [r7, #12]
 800ad1c:	60b9      	str	r1, [r7, #8]
 800ad1e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d106      	bne.n	800ad34 <tcp_output_segment+0x20>
 800ad26:	4b63      	ldr	r3, [pc, #396]	; (800aeb4 <tcp_output_segment+0x1a0>)
 800ad28:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800ad2c:	4962      	ldr	r1, [pc, #392]	; (800aeb8 <tcp_output_segment+0x1a4>)
 800ad2e:	4863      	ldr	r0, [pc, #396]	; (800aebc <tcp_output_segment+0x1a8>)
 800ad30:	f005 fd00 	bl	8010734 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800ad34:	68bb      	ldr	r3, [r7, #8]
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d106      	bne.n	800ad48 <tcp_output_segment+0x34>
 800ad3a:	4b5e      	ldr	r3, [pc, #376]	; (800aeb4 <tcp_output_segment+0x1a0>)
 800ad3c:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800ad40:	495f      	ldr	r1, [pc, #380]	; (800aec0 <tcp_output_segment+0x1ac>)
 800ad42:	485e      	ldr	r0, [pc, #376]	; (800aebc <tcp_output_segment+0x1a8>)
 800ad44:	f005 fcf6 	bl	8010734 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d106      	bne.n	800ad5c <tcp_output_segment+0x48>
 800ad4e:	4b59      	ldr	r3, [pc, #356]	; (800aeb4 <tcp_output_segment+0x1a0>)
 800ad50:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800ad54:	495b      	ldr	r1, [pc, #364]	; (800aec4 <tcp_output_segment+0x1b0>)
 800ad56:	4859      	ldr	r0, [pc, #356]	; (800aebc <tcp_output_segment+0x1a8>)
 800ad58:	f005 fcec 	bl	8010734 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800ad5c:	68f8      	ldr	r0, [r7, #12]
 800ad5e:	f7ff ffb9 	bl	800acd4 <tcp_output_segment_busy>
 800ad62:	4603      	mov	r3, r0
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d001      	beq.n	800ad6c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800ad68:	2300      	movs	r3, #0
 800ad6a:	e09f      	b.n	800aeac <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800ad6c:	68bb      	ldr	r3, [r7, #8]
 800ad6e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	68dc      	ldr	r4, [r3, #12]
 800ad74:	4610      	mov	r0, r2
 800ad76:	f7f9 fd48 	bl	800480a <lwip_htonl>
 800ad7a:	4603      	mov	r3, r0
 800ad7c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800ad7e:	68bb      	ldr	r3, [r7, #8]
 800ad80:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	68dc      	ldr	r4, [r3, #12]
 800ad86:	4610      	mov	r0, r2
 800ad88:	f7f9 fd2a 	bl	80047e0 <lwip_htons>
 800ad8c:	4603      	mov	r3, r0
 800ad8e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800ad90:	68bb      	ldr	r3, [r7, #8]
 800ad92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad94:	68ba      	ldr	r2, [r7, #8]
 800ad96:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800ad98:	441a      	add	r2, r3
 800ad9a:	68bb      	ldr	r3, [r7, #8]
 800ad9c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	68db      	ldr	r3, [r3, #12]
 800ada2:	3314      	adds	r3, #20
 800ada4:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	7a9b      	ldrb	r3, [r3, #10]
 800adaa:	f003 0301 	and.w	r3, r3, #1
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d015      	beq.n	800adde <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800adb2:	68bb      	ldr	r3, [r7, #8]
 800adb4:	3304      	adds	r3, #4
 800adb6:	461a      	mov	r2, r3
 800adb8:	6879      	ldr	r1, [r7, #4]
 800adba:	f44f 7006 	mov.w	r0, #536	; 0x218
 800adbe:	f7fc fe8b 	bl	8007ad8 <tcp_eff_send_mss_netif>
 800adc2:	4603      	mov	r3, r0
 800adc4:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800adc6:	8b7b      	ldrh	r3, [r7, #26]
 800adc8:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800adcc:	4618      	mov	r0, r3
 800adce:	f7f9 fd1c 	bl	800480a <lwip_htonl>
 800add2:	4602      	mov	r2, r0
 800add4:	69fb      	ldr	r3, [r7, #28]
 800add6:	601a      	str	r2, [r3, #0]
    opts += 1;
 800add8:	69fb      	ldr	r3, [r7, #28]
 800adda:	3304      	adds	r3, #4
 800addc:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800adde:	68bb      	ldr	r3, [r7, #8]
 800ade0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	da02      	bge.n	800adee <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800ade8:	68bb      	ldr	r3, [r7, #8]
 800adea:	2200      	movs	r2, #0
 800adec:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800adee:	68bb      	ldr	r3, [r7, #8]
 800adf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d10c      	bne.n	800ae10 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800adf6:	4b34      	ldr	r3, [pc, #208]	; (800aec8 <tcp_output_segment+0x1b4>)
 800adf8:	681a      	ldr	r2, [r3, #0]
 800adfa:	68bb      	ldr	r3, [r7, #8]
 800adfc:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	68db      	ldr	r3, [r3, #12]
 800ae02:	685b      	ldr	r3, [r3, #4]
 800ae04:	4618      	mov	r0, r3
 800ae06:	f7f9 fd00 	bl	800480a <lwip_htonl>
 800ae0a:	4602      	mov	r2, r0
 800ae0c:	68bb      	ldr	r3, [r7, #8]
 800ae0e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	68da      	ldr	r2, [r3, #12]
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	685b      	ldr	r3, [r3, #4]
 800ae18:	685b      	ldr	r3, [r3, #4]
 800ae1a:	1ad3      	subs	r3, r2, r3
 800ae1c:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	685b      	ldr	r3, [r3, #4]
 800ae22:	8959      	ldrh	r1, [r3, #10]
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	685b      	ldr	r3, [r3, #4]
 800ae28:	8b3a      	ldrh	r2, [r7, #24]
 800ae2a:	1a8a      	subs	r2, r1, r2
 800ae2c:	b292      	uxth	r2, r2
 800ae2e:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	685b      	ldr	r3, [r3, #4]
 800ae34:	8919      	ldrh	r1, [r3, #8]
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	685b      	ldr	r3, [r3, #4]
 800ae3a:	8b3a      	ldrh	r2, [r7, #24]
 800ae3c:	1a8a      	subs	r2, r1, r2
 800ae3e:	b292      	uxth	r2, r2
 800ae40:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	685b      	ldr	r3, [r3, #4]
 800ae46:	68fa      	ldr	r2, [r7, #12]
 800ae48:	68d2      	ldr	r2, [r2, #12]
 800ae4a:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	68db      	ldr	r3, [r3, #12]
 800ae50:	2200      	movs	r2, #0
 800ae52:	741a      	strb	r2, [r3, #16]
 800ae54:	2200      	movs	r2, #0
 800ae56:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	68db      	ldr	r3, [r3, #12]
 800ae5c:	f103 0214 	add.w	r2, r3, #20
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	7a9b      	ldrb	r3, [r3, #10]
 800ae64:	009b      	lsls	r3, r3, #2
 800ae66:	f003 0304 	and.w	r3, r3, #4
 800ae6a:	4413      	add	r3, r2
 800ae6c:	69fa      	ldr	r2, [r7, #28]
 800ae6e:	429a      	cmp	r2, r3
 800ae70:	d006      	beq.n	800ae80 <tcp_output_segment+0x16c>
 800ae72:	4b10      	ldr	r3, [pc, #64]	; (800aeb4 <tcp_output_segment+0x1a0>)
 800ae74:	f240 621c 	movw	r2, #1564	; 0x61c
 800ae78:	4914      	ldr	r1, [pc, #80]	; (800aecc <tcp_output_segment+0x1b8>)
 800ae7a:	4810      	ldr	r0, [pc, #64]	; (800aebc <tcp_output_segment+0x1a8>)
 800ae7c:	f005 fc5a 	bl	8010734 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	6858      	ldr	r0, [r3, #4]
 800ae84:	68b9      	ldr	r1, [r7, #8]
 800ae86:	68bb      	ldr	r3, [r7, #8]
 800ae88:	1d1c      	adds	r4, r3, #4
 800ae8a:	68bb      	ldr	r3, [r7, #8]
 800ae8c:	7add      	ldrb	r5, [r3, #11]
 800ae8e:	68bb      	ldr	r3, [r7, #8]
 800ae90:	7a9b      	ldrb	r3, [r3, #10]
 800ae92:	687a      	ldr	r2, [r7, #4]
 800ae94:	9202      	str	r2, [sp, #8]
 800ae96:	2206      	movs	r2, #6
 800ae98:	9201      	str	r2, [sp, #4]
 800ae9a:	9300      	str	r3, [sp, #0]
 800ae9c:	462b      	mov	r3, r5
 800ae9e:	4622      	mov	r2, r4
 800aea0:	f004 fbd0 	bl	800f644 <ip4_output_if>
 800aea4:	4603      	mov	r3, r0
 800aea6:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800aea8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800aeac:	4618      	mov	r0, r3
 800aeae:	3720      	adds	r7, #32
 800aeb0:	46bd      	mov	sp, r7
 800aeb2:	bdb0      	pop	{r4, r5, r7, pc}
 800aeb4:	08012ea0 	.word	0x08012ea0
 800aeb8:	08013464 	.word	0x08013464
 800aebc:	08012ef4 	.word	0x08012ef4
 800aec0:	08013484 	.word	0x08013484
 800aec4:	080134a4 	.word	0x080134a4
 800aec8:	20007c54 	.word	0x20007c54
 800aecc:	080134c8 	.word	0x080134c8

0800aed0 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800aed0:	b5b0      	push	{r4, r5, r7, lr}
 800aed2:	b084      	sub	sp, #16
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d106      	bne.n	800aeec <tcp_rexmit_rto_prepare+0x1c>
 800aede:	4b31      	ldr	r3, [pc, #196]	; (800afa4 <tcp_rexmit_rto_prepare+0xd4>)
 800aee0:	f240 6263 	movw	r2, #1635	; 0x663
 800aee4:	4930      	ldr	r1, [pc, #192]	; (800afa8 <tcp_rexmit_rto_prepare+0xd8>)
 800aee6:	4831      	ldr	r0, [pc, #196]	; (800afac <tcp_rexmit_rto_prepare+0xdc>)
 800aee8:	f005 fc24 	bl	8010734 <iprintf>

  if (pcb->unacked == NULL) {
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d102      	bne.n	800aefa <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800aef4:	f06f 0305 	mvn.w	r3, #5
 800aef8:	e050      	b.n	800af9c <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aefe:	60fb      	str	r3, [r7, #12]
 800af00:	e00b      	b.n	800af1a <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800af02:	68f8      	ldr	r0, [r7, #12]
 800af04:	f7ff fee6 	bl	800acd4 <tcp_output_segment_busy>
 800af08:	4603      	mov	r3, r0
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d002      	beq.n	800af14 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800af0e:	f06f 0305 	mvn.w	r3, #5
 800af12:	e043      	b.n	800af9c <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	60fb      	str	r3, [r7, #12]
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d1ef      	bne.n	800af02 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800af22:	68f8      	ldr	r0, [r7, #12]
 800af24:	f7ff fed6 	bl	800acd4 <tcp_output_segment_busy>
 800af28:	4603      	mov	r3, r0
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d002      	beq.n	800af34 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800af2e:	f06f 0305 	mvn.w	r3, #5
 800af32:	e033      	b.n	800af9c <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	2200      	movs	r2, #0
 800af48:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	8b5b      	ldrh	r3, [r3, #26]
 800af4e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800af52:	b29a      	uxth	r2, r3
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	68db      	ldr	r3, [r3, #12]
 800af5c:	685b      	ldr	r3, [r3, #4]
 800af5e:	4618      	mov	r0, r3
 800af60:	f7f9 fc53 	bl	800480a <lwip_htonl>
 800af64:	4604      	mov	r4, r0
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	891b      	ldrh	r3, [r3, #8]
 800af6a:	461d      	mov	r5, r3
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	68db      	ldr	r3, [r3, #12]
 800af70:	899b      	ldrh	r3, [r3, #12]
 800af72:	b29b      	uxth	r3, r3
 800af74:	4618      	mov	r0, r3
 800af76:	f7f9 fc33 	bl	80047e0 <lwip_htons>
 800af7a:	4603      	mov	r3, r0
 800af7c:	b2db      	uxtb	r3, r3
 800af7e:	f003 0303 	and.w	r3, r3, #3
 800af82:	2b00      	cmp	r3, #0
 800af84:	d001      	beq.n	800af8a <tcp_rexmit_rto_prepare+0xba>
 800af86:	2301      	movs	r3, #1
 800af88:	e000      	b.n	800af8c <tcp_rexmit_rto_prepare+0xbc>
 800af8a:	2300      	movs	r3, #0
 800af8c:	442b      	add	r3, r5
 800af8e:	18e2      	adds	r2, r4, r3
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	2200      	movs	r2, #0
 800af98:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800af9a:	2300      	movs	r3, #0
}
 800af9c:	4618      	mov	r0, r3
 800af9e:	3710      	adds	r7, #16
 800afa0:	46bd      	mov	sp, r7
 800afa2:	bdb0      	pop	{r4, r5, r7, pc}
 800afa4:	08012ea0 	.word	0x08012ea0
 800afa8:	080134dc 	.word	0x080134dc
 800afac:	08012ef4 	.word	0x08012ef4

0800afb0 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800afb0:	b580      	push	{r7, lr}
 800afb2:	b082      	sub	sp, #8
 800afb4:	af00      	add	r7, sp, #0
 800afb6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d106      	bne.n	800afcc <tcp_rexmit_rto_commit+0x1c>
 800afbe:	4b0d      	ldr	r3, [pc, #52]	; (800aff4 <tcp_rexmit_rto_commit+0x44>)
 800afc0:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800afc4:	490c      	ldr	r1, [pc, #48]	; (800aff8 <tcp_rexmit_rto_commit+0x48>)
 800afc6:	480d      	ldr	r0, [pc, #52]	; (800affc <tcp_rexmit_rto_commit+0x4c>)
 800afc8:	f005 fbb4 	bl	8010734 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800afd2:	2bff      	cmp	r3, #255	; 0xff
 800afd4:	d007      	beq.n	800afe6 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800afdc:	3301      	adds	r3, #1
 800afde:	b2da      	uxtb	r2, r3
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800afe6:	6878      	ldr	r0, [r7, #4]
 800afe8:	f7ff fc80 	bl	800a8ec <tcp_output>
}
 800afec:	bf00      	nop
 800afee:	3708      	adds	r7, #8
 800aff0:	46bd      	mov	sp, r7
 800aff2:	bd80      	pop	{r7, pc}
 800aff4:	08012ea0 	.word	0x08012ea0
 800aff8:	08013500 	.word	0x08013500
 800affc:	08012ef4 	.word	0x08012ef4

0800b000 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800b000:	b580      	push	{r7, lr}
 800b002:	b082      	sub	sp, #8
 800b004:	af00      	add	r7, sp, #0
 800b006:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d106      	bne.n	800b01c <tcp_rexmit_rto+0x1c>
 800b00e:	4b0a      	ldr	r3, [pc, #40]	; (800b038 <tcp_rexmit_rto+0x38>)
 800b010:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800b014:	4909      	ldr	r1, [pc, #36]	; (800b03c <tcp_rexmit_rto+0x3c>)
 800b016:	480a      	ldr	r0, [pc, #40]	; (800b040 <tcp_rexmit_rto+0x40>)
 800b018:	f005 fb8c 	bl	8010734 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800b01c:	6878      	ldr	r0, [r7, #4]
 800b01e:	f7ff ff57 	bl	800aed0 <tcp_rexmit_rto_prepare>
 800b022:	4603      	mov	r3, r0
 800b024:	2b00      	cmp	r3, #0
 800b026:	d102      	bne.n	800b02e <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800b028:	6878      	ldr	r0, [r7, #4]
 800b02a:	f7ff ffc1 	bl	800afb0 <tcp_rexmit_rto_commit>
  }
}
 800b02e:	bf00      	nop
 800b030:	3708      	adds	r7, #8
 800b032:	46bd      	mov	sp, r7
 800b034:	bd80      	pop	{r7, pc}
 800b036:	bf00      	nop
 800b038:	08012ea0 	.word	0x08012ea0
 800b03c:	08013524 	.word	0x08013524
 800b040:	08012ef4 	.word	0x08012ef4

0800b044 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800b044:	b590      	push	{r4, r7, lr}
 800b046:	b085      	sub	sp, #20
 800b048:	af00      	add	r7, sp, #0
 800b04a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d106      	bne.n	800b060 <tcp_rexmit+0x1c>
 800b052:	4b2f      	ldr	r3, [pc, #188]	; (800b110 <tcp_rexmit+0xcc>)
 800b054:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800b058:	492e      	ldr	r1, [pc, #184]	; (800b114 <tcp_rexmit+0xd0>)
 800b05a:	482f      	ldr	r0, [pc, #188]	; (800b118 <tcp_rexmit+0xd4>)
 800b05c:	f005 fb6a 	bl	8010734 <iprintf>

  if (pcb->unacked == NULL) {
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b064:	2b00      	cmp	r3, #0
 800b066:	d102      	bne.n	800b06e <tcp_rexmit+0x2a>
    return ERR_VAL;
 800b068:	f06f 0305 	mvn.w	r3, #5
 800b06c:	e04c      	b.n	800b108 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b072:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800b074:	68b8      	ldr	r0, [r7, #8]
 800b076:	f7ff fe2d 	bl	800acd4 <tcp_output_segment_busy>
 800b07a:	4603      	mov	r3, r0
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d002      	beq.n	800b086 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800b080:	f06f 0305 	mvn.w	r3, #5
 800b084:	e040      	b.n	800b108 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800b086:	68bb      	ldr	r3, [r7, #8]
 800b088:	681a      	ldr	r2, [r3, #0]
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	336c      	adds	r3, #108	; 0x6c
 800b092:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800b094:	e002      	b.n	800b09c <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d011      	beq.n	800b0c8 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	68db      	ldr	r3, [r3, #12]
 800b0aa:	685b      	ldr	r3, [r3, #4]
 800b0ac:	4618      	mov	r0, r3
 800b0ae:	f7f9 fbac 	bl	800480a <lwip_htonl>
 800b0b2:	4604      	mov	r4, r0
 800b0b4:	68bb      	ldr	r3, [r7, #8]
 800b0b6:	68db      	ldr	r3, [r3, #12]
 800b0b8:	685b      	ldr	r3, [r3, #4]
 800b0ba:	4618      	mov	r0, r3
 800b0bc:	f7f9 fba5 	bl	800480a <lwip_htonl>
 800b0c0:	4603      	mov	r3, r0
 800b0c2:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	dbe6      	blt.n	800b096 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	681a      	ldr	r2, [r3, #0]
 800b0cc:	68bb      	ldr	r3, [r7, #8]
 800b0ce:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	68ba      	ldr	r2, [r7, #8]
 800b0d4:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800b0d6:	68bb      	ldr	r3, [r7, #8]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d103      	bne.n	800b0e6 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	2200      	movs	r2, #0
 800b0e2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b0ec:	2bff      	cmp	r3, #255	; 0xff
 800b0ee:	d007      	beq.n	800b100 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b0f6:	3301      	adds	r3, #1
 800b0f8:	b2da      	uxtb	r2, r3
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	2200      	movs	r2, #0
 800b104:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800b106:	2300      	movs	r3, #0
}
 800b108:	4618      	mov	r0, r3
 800b10a:	3714      	adds	r7, #20
 800b10c:	46bd      	mov	sp, r7
 800b10e:	bd90      	pop	{r4, r7, pc}
 800b110:	08012ea0 	.word	0x08012ea0
 800b114:	08013540 	.word	0x08013540
 800b118:	08012ef4 	.word	0x08012ef4

0800b11c <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800b11c:	b580      	push	{r7, lr}
 800b11e:	b082      	sub	sp, #8
 800b120:	af00      	add	r7, sp, #0
 800b122:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	2b00      	cmp	r3, #0
 800b128:	d106      	bne.n	800b138 <tcp_rexmit_fast+0x1c>
 800b12a:	4b2a      	ldr	r3, [pc, #168]	; (800b1d4 <tcp_rexmit_fast+0xb8>)
 800b12c:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800b130:	4929      	ldr	r1, [pc, #164]	; (800b1d8 <tcp_rexmit_fast+0xbc>)
 800b132:	482a      	ldr	r0, [pc, #168]	; (800b1dc <tcp_rexmit_fast+0xc0>)
 800b134:	f005 fafe 	bl	8010734 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d044      	beq.n	800b1ca <tcp_rexmit_fast+0xae>
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	8b5b      	ldrh	r3, [r3, #26]
 800b144:	f003 0304 	and.w	r3, r3, #4
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d13e      	bne.n	800b1ca <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800b14c:	6878      	ldr	r0, [r7, #4]
 800b14e:	f7ff ff79 	bl	800b044 <tcp_rexmit>
 800b152:	4603      	mov	r3, r0
 800b154:	2b00      	cmp	r3, #0
 800b156:	d138      	bne.n	800b1ca <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b164:	4293      	cmp	r3, r2
 800b166:	bf28      	it	cs
 800b168:	4613      	movcs	r3, r2
 800b16a:	b29b      	uxth	r3, r3
 800b16c:	0fda      	lsrs	r2, r3, #31
 800b16e:	4413      	add	r3, r2
 800b170:	105b      	asrs	r3, r3, #1
 800b172:	b29a      	uxth	r2, r3
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800b180:	461a      	mov	r2, r3
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b186:	005b      	lsls	r3, r3, #1
 800b188:	429a      	cmp	r2, r3
 800b18a:	d206      	bcs.n	800b19a <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b190:	005b      	lsls	r3, r3, #1
 800b192:	b29a      	uxth	r2, r3
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b1a4:	4619      	mov	r1, r3
 800b1a6:	0049      	lsls	r1, r1, #1
 800b1a8:	440b      	add	r3, r1
 800b1aa:	b29b      	uxth	r3, r3
 800b1ac:	4413      	add	r3, r2
 800b1ae:	b29a      	uxth	r2, r3
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	8b5b      	ldrh	r3, [r3, #26]
 800b1ba:	f043 0304 	orr.w	r3, r3, #4
 800b1be:	b29a      	uxth	r2, r3
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	2200      	movs	r2, #0
 800b1c8:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800b1ca:	bf00      	nop
 800b1cc:	3708      	adds	r7, #8
 800b1ce:	46bd      	mov	sp, r7
 800b1d0:	bd80      	pop	{r7, pc}
 800b1d2:	bf00      	nop
 800b1d4:	08012ea0 	.word	0x08012ea0
 800b1d8:	08013558 	.word	0x08013558
 800b1dc:	08012ef4 	.word	0x08012ef4

0800b1e0 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800b1e0:	b580      	push	{r7, lr}
 800b1e2:	b086      	sub	sp, #24
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	60f8      	str	r0, [r7, #12]
 800b1e8:	607b      	str	r3, [r7, #4]
 800b1ea:	460b      	mov	r3, r1
 800b1ec:	817b      	strh	r3, [r7, #10]
 800b1ee:	4613      	mov	r3, r2
 800b1f0:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800b1f2:	897a      	ldrh	r2, [r7, #10]
 800b1f4:	893b      	ldrh	r3, [r7, #8]
 800b1f6:	4413      	add	r3, r2
 800b1f8:	b29b      	uxth	r3, r3
 800b1fa:	3314      	adds	r3, #20
 800b1fc:	b29b      	uxth	r3, r3
 800b1fe:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b202:	4619      	mov	r1, r3
 800b204:	2022      	movs	r0, #34	; 0x22
 800b206:	f7fa fc09 	bl	8005a1c <pbuf_alloc>
 800b20a:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800b20c:	697b      	ldr	r3, [r7, #20]
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d04d      	beq.n	800b2ae <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800b212:	897b      	ldrh	r3, [r7, #10]
 800b214:	3313      	adds	r3, #19
 800b216:	697a      	ldr	r2, [r7, #20]
 800b218:	8952      	ldrh	r2, [r2, #10]
 800b21a:	4293      	cmp	r3, r2
 800b21c:	db06      	blt.n	800b22c <tcp_output_alloc_header_common+0x4c>
 800b21e:	4b26      	ldr	r3, [pc, #152]	; (800b2b8 <tcp_output_alloc_header_common+0xd8>)
 800b220:	f240 7223 	movw	r2, #1827	; 0x723
 800b224:	4925      	ldr	r1, [pc, #148]	; (800b2bc <tcp_output_alloc_header_common+0xdc>)
 800b226:	4826      	ldr	r0, [pc, #152]	; (800b2c0 <tcp_output_alloc_header_common+0xe0>)
 800b228:	f005 fa84 	bl	8010734 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800b22c:	697b      	ldr	r3, [r7, #20]
 800b22e:	685b      	ldr	r3, [r3, #4]
 800b230:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800b232:	8c3b      	ldrh	r3, [r7, #32]
 800b234:	4618      	mov	r0, r3
 800b236:	f7f9 fad3 	bl	80047e0 <lwip_htons>
 800b23a:	4603      	mov	r3, r0
 800b23c:	461a      	mov	r2, r3
 800b23e:	693b      	ldr	r3, [r7, #16]
 800b240:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800b242:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b244:	4618      	mov	r0, r3
 800b246:	f7f9 facb 	bl	80047e0 <lwip_htons>
 800b24a:	4603      	mov	r3, r0
 800b24c:	461a      	mov	r2, r3
 800b24e:	693b      	ldr	r3, [r7, #16]
 800b250:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800b252:	693b      	ldr	r3, [r7, #16]
 800b254:	687a      	ldr	r2, [r7, #4]
 800b256:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800b258:	68f8      	ldr	r0, [r7, #12]
 800b25a:	f7f9 fad6 	bl	800480a <lwip_htonl>
 800b25e:	4602      	mov	r2, r0
 800b260:	693b      	ldr	r3, [r7, #16]
 800b262:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800b264:	897b      	ldrh	r3, [r7, #10]
 800b266:	089b      	lsrs	r3, r3, #2
 800b268:	b29b      	uxth	r3, r3
 800b26a:	3305      	adds	r3, #5
 800b26c:	b29b      	uxth	r3, r3
 800b26e:	031b      	lsls	r3, r3, #12
 800b270:	b29a      	uxth	r2, r3
 800b272:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b276:	b29b      	uxth	r3, r3
 800b278:	4313      	orrs	r3, r2
 800b27a:	b29b      	uxth	r3, r3
 800b27c:	4618      	mov	r0, r3
 800b27e:	f7f9 faaf 	bl	80047e0 <lwip_htons>
 800b282:	4603      	mov	r3, r0
 800b284:	461a      	mov	r2, r3
 800b286:	693b      	ldr	r3, [r7, #16]
 800b288:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800b28a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b28c:	4618      	mov	r0, r3
 800b28e:	f7f9 faa7 	bl	80047e0 <lwip_htons>
 800b292:	4603      	mov	r3, r0
 800b294:	461a      	mov	r2, r3
 800b296:	693b      	ldr	r3, [r7, #16]
 800b298:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800b29a:	693b      	ldr	r3, [r7, #16]
 800b29c:	2200      	movs	r2, #0
 800b29e:	741a      	strb	r2, [r3, #16]
 800b2a0:	2200      	movs	r2, #0
 800b2a2:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800b2a4:	693b      	ldr	r3, [r7, #16]
 800b2a6:	2200      	movs	r2, #0
 800b2a8:	749a      	strb	r2, [r3, #18]
 800b2aa:	2200      	movs	r2, #0
 800b2ac:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800b2ae:	697b      	ldr	r3, [r7, #20]
}
 800b2b0:	4618      	mov	r0, r3
 800b2b2:	3718      	adds	r7, #24
 800b2b4:	46bd      	mov	sp, r7
 800b2b6:	bd80      	pop	{r7, pc}
 800b2b8:	08012ea0 	.word	0x08012ea0
 800b2bc:	08013578 	.word	0x08013578
 800b2c0:	08012ef4 	.word	0x08012ef4

0800b2c4 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800b2c4:	b5b0      	push	{r4, r5, r7, lr}
 800b2c6:	b08a      	sub	sp, #40	; 0x28
 800b2c8:	af04      	add	r7, sp, #16
 800b2ca:	60f8      	str	r0, [r7, #12]
 800b2cc:	607b      	str	r3, [r7, #4]
 800b2ce:	460b      	mov	r3, r1
 800b2d0:	817b      	strh	r3, [r7, #10]
 800b2d2:	4613      	mov	r3, r2
 800b2d4:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d106      	bne.n	800b2ea <tcp_output_alloc_header+0x26>
 800b2dc:	4b15      	ldr	r3, [pc, #84]	; (800b334 <tcp_output_alloc_header+0x70>)
 800b2de:	f240 7242 	movw	r2, #1858	; 0x742
 800b2e2:	4915      	ldr	r1, [pc, #84]	; (800b338 <tcp_output_alloc_header+0x74>)
 800b2e4:	4815      	ldr	r0, [pc, #84]	; (800b33c <tcp_output_alloc_header+0x78>)
 800b2e6:	f005 fa25 	bl	8010734 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	8adb      	ldrh	r3, [r3, #22]
 800b2f2:	68fa      	ldr	r2, [r7, #12]
 800b2f4:	8b12      	ldrh	r2, [r2, #24]
 800b2f6:	68f9      	ldr	r1, [r7, #12]
 800b2f8:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800b2fa:	893d      	ldrh	r5, [r7, #8]
 800b2fc:	897c      	ldrh	r4, [r7, #10]
 800b2fe:	9103      	str	r1, [sp, #12]
 800b300:	2110      	movs	r1, #16
 800b302:	9102      	str	r1, [sp, #8]
 800b304:	9201      	str	r2, [sp, #4]
 800b306:	9300      	str	r3, [sp, #0]
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	462a      	mov	r2, r5
 800b30c:	4621      	mov	r1, r4
 800b30e:	f7ff ff67 	bl	800b1e0 <tcp_output_alloc_header_common>
 800b312:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800b314:	697b      	ldr	r3, [r7, #20]
 800b316:	2b00      	cmp	r3, #0
 800b318:	d006      	beq.n	800b328 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b31e:	68fa      	ldr	r2, [r7, #12]
 800b320:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800b322:	441a      	add	r2, r3
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800b328:	697b      	ldr	r3, [r7, #20]
}
 800b32a:	4618      	mov	r0, r3
 800b32c:	3718      	adds	r7, #24
 800b32e:	46bd      	mov	sp, r7
 800b330:	bdb0      	pop	{r4, r5, r7, pc}
 800b332:	bf00      	nop
 800b334:	08012ea0 	.word	0x08012ea0
 800b338:	080135a8 	.word	0x080135a8
 800b33c:	08012ef4 	.word	0x08012ef4

0800b340 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800b340:	b580      	push	{r7, lr}
 800b342:	b088      	sub	sp, #32
 800b344:	af00      	add	r7, sp, #0
 800b346:	60f8      	str	r0, [r7, #12]
 800b348:	60b9      	str	r1, [r7, #8]
 800b34a:	4611      	mov	r1, r2
 800b34c:	461a      	mov	r2, r3
 800b34e:	460b      	mov	r3, r1
 800b350:	71fb      	strb	r3, [r7, #7]
 800b352:	4613      	mov	r3, r2
 800b354:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800b356:	2300      	movs	r3, #0
 800b358:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800b35a:	68bb      	ldr	r3, [r7, #8]
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d106      	bne.n	800b36e <tcp_output_fill_options+0x2e>
 800b360:	4b13      	ldr	r3, [pc, #76]	; (800b3b0 <tcp_output_fill_options+0x70>)
 800b362:	f240 7256 	movw	r2, #1878	; 0x756
 800b366:	4913      	ldr	r1, [pc, #76]	; (800b3b4 <tcp_output_fill_options+0x74>)
 800b368:	4813      	ldr	r0, [pc, #76]	; (800b3b8 <tcp_output_fill_options+0x78>)
 800b36a:	f005 f9e3 	bl	8010734 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800b36e:	68bb      	ldr	r3, [r7, #8]
 800b370:	685b      	ldr	r3, [r3, #4]
 800b372:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800b374:	69bb      	ldr	r3, [r7, #24]
 800b376:	3314      	adds	r3, #20
 800b378:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800b37a:	69bb      	ldr	r3, [r7, #24]
 800b37c:	f103 0214 	add.w	r2, r3, #20
 800b380:	8bfb      	ldrh	r3, [r7, #30]
 800b382:	009b      	lsls	r3, r3, #2
 800b384:	4619      	mov	r1, r3
 800b386:	79fb      	ldrb	r3, [r7, #7]
 800b388:	009b      	lsls	r3, r3, #2
 800b38a:	f003 0304 	and.w	r3, r3, #4
 800b38e:	440b      	add	r3, r1
 800b390:	4413      	add	r3, r2
 800b392:	697a      	ldr	r2, [r7, #20]
 800b394:	429a      	cmp	r2, r3
 800b396:	d006      	beq.n	800b3a6 <tcp_output_fill_options+0x66>
 800b398:	4b05      	ldr	r3, [pc, #20]	; (800b3b0 <tcp_output_fill_options+0x70>)
 800b39a:	f240 7275 	movw	r2, #1909	; 0x775
 800b39e:	4907      	ldr	r1, [pc, #28]	; (800b3bc <tcp_output_fill_options+0x7c>)
 800b3a0:	4805      	ldr	r0, [pc, #20]	; (800b3b8 <tcp_output_fill_options+0x78>)
 800b3a2:	f005 f9c7 	bl	8010734 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800b3a6:	bf00      	nop
 800b3a8:	3720      	adds	r7, #32
 800b3aa:	46bd      	mov	sp, r7
 800b3ac:	bd80      	pop	{r7, pc}
 800b3ae:	bf00      	nop
 800b3b0:	08012ea0 	.word	0x08012ea0
 800b3b4:	080135d0 	.word	0x080135d0
 800b3b8:	08012ef4 	.word	0x08012ef4
 800b3bc:	080134c8 	.word	0x080134c8

0800b3c0 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800b3c0:	b580      	push	{r7, lr}
 800b3c2:	b08a      	sub	sp, #40	; 0x28
 800b3c4:	af04      	add	r7, sp, #16
 800b3c6:	60f8      	str	r0, [r7, #12]
 800b3c8:	60b9      	str	r1, [r7, #8]
 800b3ca:	607a      	str	r2, [r7, #4]
 800b3cc:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800b3ce:	68bb      	ldr	r3, [r7, #8]
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d106      	bne.n	800b3e2 <tcp_output_control_segment+0x22>
 800b3d4:	4b1c      	ldr	r3, [pc, #112]	; (800b448 <tcp_output_control_segment+0x88>)
 800b3d6:	f240 7287 	movw	r2, #1927	; 0x787
 800b3da:	491c      	ldr	r1, [pc, #112]	; (800b44c <tcp_output_control_segment+0x8c>)
 800b3dc:	481c      	ldr	r0, [pc, #112]	; (800b450 <tcp_output_control_segment+0x90>)
 800b3de:	f005 f9a9 	bl	8010734 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800b3e2:	683a      	ldr	r2, [r7, #0]
 800b3e4:	6879      	ldr	r1, [r7, #4]
 800b3e6:	68f8      	ldr	r0, [r7, #12]
 800b3e8:	f7fe ff40 	bl	800a26c <tcp_route>
 800b3ec:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800b3ee:	693b      	ldr	r3, [r7, #16]
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d102      	bne.n	800b3fa <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800b3f4:	23fc      	movs	r3, #252	; 0xfc
 800b3f6:	75fb      	strb	r3, [r7, #23]
 800b3f8:	e01c      	b.n	800b434 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d006      	beq.n	800b40e <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	7adb      	ldrb	r3, [r3, #11]
 800b404:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	7a9b      	ldrb	r3, [r3, #10]
 800b40a:	757b      	strb	r3, [r7, #21]
 800b40c:	e003      	b.n	800b416 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800b40e:	23ff      	movs	r3, #255	; 0xff
 800b410:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800b412:	2300      	movs	r3, #0
 800b414:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800b416:	7dba      	ldrb	r2, [r7, #22]
 800b418:	693b      	ldr	r3, [r7, #16]
 800b41a:	9302      	str	r3, [sp, #8]
 800b41c:	2306      	movs	r3, #6
 800b41e:	9301      	str	r3, [sp, #4]
 800b420:	7d7b      	ldrb	r3, [r7, #21]
 800b422:	9300      	str	r3, [sp, #0]
 800b424:	4613      	mov	r3, r2
 800b426:	683a      	ldr	r2, [r7, #0]
 800b428:	6879      	ldr	r1, [r7, #4]
 800b42a:	68b8      	ldr	r0, [r7, #8]
 800b42c:	f004 f90a 	bl	800f644 <ip4_output_if>
 800b430:	4603      	mov	r3, r0
 800b432:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800b434:	68b8      	ldr	r0, [r7, #8]
 800b436:	f7fa fdd5 	bl	8005fe4 <pbuf_free>
  return err;
 800b43a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b43e:	4618      	mov	r0, r3
 800b440:	3718      	adds	r7, #24
 800b442:	46bd      	mov	sp, r7
 800b444:	bd80      	pop	{r7, pc}
 800b446:	bf00      	nop
 800b448:	08012ea0 	.word	0x08012ea0
 800b44c:	080135f8 	.word	0x080135f8
 800b450:	08012ef4 	.word	0x08012ef4

0800b454 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800b454:	b590      	push	{r4, r7, lr}
 800b456:	b08b      	sub	sp, #44	; 0x2c
 800b458:	af04      	add	r7, sp, #16
 800b45a:	60f8      	str	r0, [r7, #12]
 800b45c:	60b9      	str	r1, [r7, #8]
 800b45e:	607a      	str	r2, [r7, #4]
 800b460:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800b462:	683b      	ldr	r3, [r7, #0]
 800b464:	2b00      	cmp	r3, #0
 800b466:	d106      	bne.n	800b476 <tcp_rst+0x22>
 800b468:	4b1f      	ldr	r3, [pc, #124]	; (800b4e8 <tcp_rst+0x94>)
 800b46a:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800b46e:	491f      	ldr	r1, [pc, #124]	; (800b4ec <tcp_rst+0x98>)
 800b470:	481f      	ldr	r0, [pc, #124]	; (800b4f0 <tcp_rst+0x9c>)
 800b472:	f005 f95f 	bl	8010734 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800b476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d106      	bne.n	800b48a <tcp_rst+0x36>
 800b47c:	4b1a      	ldr	r3, [pc, #104]	; (800b4e8 <tcp_rst+0x94>)
 800b47e:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800b482:	491c      	ldr	r1, [pc, #112]	; (800b4f4 <tcp_rst+0xa0>)
 800b484:	481a      	ldr	r0, [pc, #104]	; (800b4f0 <tcp_rst+0x9c>)
 800b486:	f005 f955 	bl	8010734 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800b48a:	2300      	movs	r3, #0
 800b48c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800b48e:	f246 0308 	movw	r3, #24584	; 0x6008
 800b492:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800b494:	7dfb      	ldrb	r3, [r7, #23]
 800b496:	b29c      	uxth	r4, r3
 800b498:	68b8      	ldr	r0, [r7, #8]
 800b49a:	f7f9 f9b6 	bl	800480a <lwip_htonl>
 800b49e:	4602      	mov	r2, r0
 800b4a0:	8abb      	ldrh	r3, [r7, #20]
 800b4a2:	9303      	str	r3, [sp, #12]
 800b4a4:	2314      	movs	r3, #20
 800b4a6:	9302      	str	r3, [sp, #8]
 800b4a8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800b4aa:	9301      	str	r3, [sp, #4]
 800b4ac:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b4ae:	9300      	str	r3, [sp, #0]
 800b4b0:	4613      	mov	r3, r2
 800b4b2:	2200      	movs	r2, #0
 800b4b4:	4621      	mov	r1, r4
 800b4b6:	6878      	ldr	r0, [r7, #4]
 800b4b8:	f7ff fe92 	bl	800b1e0 <tcp_output_alloc_header_common>
 800b4bc:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800b4be:	693b      	ldr	r3, [r7, #16]
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d00c      	beq.n	800b4de <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800b4c4:	7dfb      	ldrb	r3, [r7, #23]
 800b4c6:	2200      	movs	r2, #0
 800b4c8:	6939      	ldr	r1, [r7, #16]
 800b4ca:	68f8      	ldr	r0, [r7, #12]
 800b4cc:	f7ff ff38 	bl	800b340 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800b4d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4d2:	683a      	ldr	r2, [r7, #0]
 800b4d4:	6939      	ldr	r1, [r7, #16]
 800b4d6:	68f8      	ldr	r0, [r7, #12]
 800b4d8:	f7ff ff72 	bl	800b3c0 <tcp_output_control_segment>
 800b4dc:	e000      	b.n	800b4e0 <tcp_rst+0x8c>
    return;
 800b4de:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800b4e0:	371c      	adds	r7, #28
 800b4e2:	46bd      	mov	sp, r7
 800b4e4:	bd90      	pop	{r4, r7, pc}
 800b4e6:	bf00      	nop
 800b4e8:	08012ea0 	.word	0x08012ea0
 800b4ec:	08013624 	.word	0x08013624
 800b4f0:	08012ef4 	.word	0x08012ef4
 800b4f4:	08013640 	.word	0x08013640

0800b4f8 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800b4f8:	b590      	push	{r4, r7, lr}
 800b4fa:	b087      	sub	sp, #28
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800b500:	2300      	movs	r3, #0
 800b502:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800b504:	2300      	movs	r3, #0
 800b506:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d106      	bne.n	800b51c <tcp_send_empty_ack+0x24>
 800b50e:	4b28      	ldr	r3, [pc, #160]	; (800b5b0 <tcp_send_empty_ack+0xb8>)
 800b510:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800b514:	4927      	ldr	r1, [pc, #156]	; (800b5b4 <tcp_send_empty_ack+0xbc>)
 800b516:	4828      	ldr	r0, [pc, #160]	; (800b5b8 <tcp_send_empty_ack+0xc0>)
 800b518:	f005 f90c 	bl	8010734 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800b51c:	7dfb      	ldrb	r3, [r7, #23]
 800b51e:	009b      	lsls	r3, r3, #2
 800b520:	b2db      	uxtb	r3, r3
 800b522:	f003 0304 	and.w	r3, r3, #4
 800b526:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800b528:	7d7b      	ldrb	r3, [r7, #21]
 800b52a:	b29c      	uxth	r4, r3
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b530:	4618      	mov	r0, r3
 800b532:	f7f9 f96a 	bl	800480a <lwip_htonl>
 800b536:	4603      	mov	r3, r0
 800b538:	2200      	movs	r2, #0
 800b53a:	4621      	mov	r1, r4
 800b53c:	6878      	ldr	r0, [r7, #4]
 800b53e:	f7ff fec1 	bl	800b2c4 <tcp_output_alloc_header>
 800b542:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800b544:	693b      	ldr	r3, [r7, #16]
 800b546:	2b00      	cmp	r3, #0
 800b548:	d109      	bne.n	800b55e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	8b5b      	ldrh	r3, [r3, #26]
 800b54e:	f043 0303 	orr.w	r3, r3, #3
 800b552:	b29a      	uxth	r2, r3
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800b558:	f06f 0301 	mvn.w	r3, #1
 800b55c:	e023      	b.n	800b5a6 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800b55e:	7dbb      	ldrb	r3, [r7, #22]
 800b560:	7dfa      	ldrb	r2, [r7, #23]
 800b562:	6939      	ldr	r1, [r7, #16]
 800b564:	6878      	ldr	r0, [r7, #4]
 800b566:	f7ff feeb 	bl	800b340 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800b56a:	687a      	ldr	r2, [r7, #4]
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	3304      	adds	r3, #4
 800b570:	6939      	ldr	r1, [r7, #16]
 800b572:	6878      	ldr	r0, [r7, #4]
 800b574:	f7ff ff24 	bl	800b3c0 <tcp_output_control_segment>
 800b578:	4603      	mov	r3, r0
 800b57a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800b57c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b580:	2b00      	cmp	r3, #0
 800b582:	d007      	beq.n	800b594 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	8b5b      	ldrh	r3, [r3, #26]
 800b588:	f043 0303 	orr.w	r3, r3, #3
 800b58c:	b29a      	uxth	r2, r3
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	835a      	strh	r2, [r3, #26]
 800b592:	e006      	b.n	800b5a2 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	8b5b      	ldrh	r3, [r3, #26]
 800b598:	f023 0303 	bic.w	r3, r3, #3
 800b59c:	b29a      	uxth	r2, r3
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800b5a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b5a6:	4618      	mov	r0, r3
 800b5a8:	371c      	adds	r7, #28
 800b5aa:	46bd      	mov	sp, r7
 800b5ac:	bd90      	pop	{r4, r7, pc}
 800b5ae:	bf00      	nop
 800b5b0:	08012ea0 	.word	0x08012ea0
 800b5b4:	0801365c 	.word	0x0801365c
 800b5b8:	08012ef4 	.word	0x08012ef4

0800b5bc <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800b5bc:	b590      	push	{r4, r7, lr}
 800b5be:	b087      	sub	sp, #28
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800b5c4:	2300      	movs	r3, #0
 800b5c6:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d106      	bne.n	800b5dc <tcp_keepalive+0x20>
 800b5ce:	4b18      	ldr	r3, [pc, #96]	; (800b630 <tcp_keepalive+0x74>)
 800b5d0:	f640 0224 	movw	r2, #2084	; 0x824
 800b5d4:	4917      	ldr	r1, [pc, #92]	; (800b634 <tcp_keepalive+0x78>)
 800b5d6:	4818      	ldr	r0, [pc, #96]	; (800b638 <tcp_keepalive+0x7c>)
 800b5d8:	f005 f8ac 	bl	8010734 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800b5dc:	7dfb      	ldrb	r3, [r7, #23]
 800b5de:	b29c      	uxth	r4, r3
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b5e4:	3b01      	subs	r3, #1
 800b5e6:	4618      	mov	r0, r3
 800b5e8:	f7f9 f90f 	bl	800480a <lwip_htonl>
 800b5ec:	4603      	mov	r3, r0
 800b5ee:	2200      	movs	r2, #0
 800b5f0:	4621      	mov	r1, r4
 800b5f2:	6878      	ldr	r0, [r7, #4]
 800b5f4:	f7ff fe66 	bl	800b2c4 <tcp_output_alloc_header>
 800b5f8:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800b5fa:	693b      	ldr	r3, [r7, #16]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d102      	bne.n	800b606 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800b600:	f04f 33ff 	mov.w	r3, #4294967295
 800b604:	e010      	b.n	800b628 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800b606:	7dfb      	ldrb	r3, [r7, #23]
 800b608:	2200      	movs	r2, #0
 800b60a:	6939      	ldr	r1, [r7, #16]
 800b60c:	6878      	ldr	r0, [r7, #4]
 800b60e:	f7ff fe97 	bl	800b340 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800b612:	687a      	ldr	r2, [r7, #4]
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	3304      	adds	r3, #4
 800b618:	6939      	ldr	r1, [r7, #16]
 800b61a:	6878      	ldr	r0, [r7, #4]
 800b61c:	f7ff fed0 	bl	800b3c0 <tcp_output_control_segment>
 800b620:	4603      	mov	r3, r0
 800b622:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800b624:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b628:	4618      	mov	r0, r3
 800b62a:	371c      	adds	r7, #28
 800b62c:	46bd      	mov	sp, r7
 800b62e:	bd90      	pop	{r4, r7, pc}
 800b630:	08012ea0 	.word	0x08012ea0
 800b634:	0801367c 	.word	0x0801367c
 800b638:	08012ef4 	.word	0x08012ef4

0800b63c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800b63c:	b590      	push	{r4, r7, lr}
 800b63e:	b08b      	sub	sp, #44	; 0x2c
 800b640:	af00      	add	r7, sp, #0
 800b642:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800b644:	2300      	movs	r3, #0
 800b646:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d106      	bne.n	800b65e <tcp_zero_window_probe+0x22>
 800b650:	4b4c      	ldr	r3, [pc, #304]	; (800b784 <tcp_zero_window_probe+0x148>)
 800b652:	f640 024f 	movw	r2, #2127	; 0x84f
 800b656:	494c      	ldr	r1, [pc, #304]	; (800b788 <tcp_zero_window_probe+0x14c>)
 800b658:	484c      	ldr	r0, [pc, #304]	; (800b78c <tcp_zero_window_probe+0x150>)
 800b65a:	f005 f86b 	bl	8010734 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b662:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800b664:	6a3b      	ldr	r3, [r7, #32]
 800b666:	2b00      	cmp	r3, #0
 800b668:	d101      	bne.n	800b66e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800b66a:	2300      	movs	r3, #0
 800b66c:	e086      	b.n	800b77c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800b674:	2bff      	cmp	r3, #255	; 0xff
 800b676:	d007      	beq.n	800b688 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800b67e:	3301      	adds	r3, #1
 800b680:	b2da      	uxtb	r2, r3
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800b688:	6a3b      	ldr	r3, [r7, #32]
 800b68a:	68db      	ldr	r3, [r3, #12]
 800b68c:	899b      	ldrh	r3, [r3, #12]
 800b68e:	b29b      	uxth	r3, r3
 800b690:	4618      	mov	r0, r3
 800b692:	f7f9 f8a5 	bl	80047e0 <lwip_htons>
 800b696:	4603      	mov	r3, r0
 800b698:	b2db      	uxtb	r3, r3
 800b69a:	f003 0301 	and.w	r3, r3, #1
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d005      	beq.n	800b6ae <tcp_zero_window_probe+0x72>
 800b6a2:	6a3b      	ldr	r3, [r7, #32]
 800b6a4:	891b      	ldrh	r3, [r3, #8]
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d101      	bne.n	800b6ae <tcp_zero_window_probe+0x72>
 800b6aa:	2301      	movs	r3, #1
 800b6ac:	e000      	b.n	800b6b0 <tcp_zero_window_probe+0x74>
 800b6ae:	2300      	movs	r3, #0
 800b6b0:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800b6b2:	7ffb      	ldrb	r3, [r7, #31]
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	bf0c      	ite	eq
 800b6b8:	2301      	moveq	r3, #1
 800b6ba:	2300      	movne	r3, #0
 800b6bc:	b2db      	uxtb	r3, r3
 800b6be:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800b6c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b6c4:	b299      	uxth	r1, r3
 800b6c6:	6a3b      	ldr	r3, [r7, #32]
 800b6c8:	68db      	ldr	r3, [r3, #12]
 800b6ca:	685b      	ldr	r3, [r3, #4]
 800b6cc:	8bba      	ldrh	r2, [r7, #28]
 800b6ce:	6878      	ldr	r0, [r7, #4]
 800b6d0:	f7ff fdf8 	bl	800b2c4 <tcp_output_alloc_header>
 800b6d4:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800b6d6:	69bb      	ldr	r3, [r7, #24]
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d102      	bne.n	800b6e2 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800b6dc:	f04f 33ff 	mov.w	r3, #4294967295
 800b6e0:	e04c      	b.n	800b77c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800b6e2:	69bb      	ldr	r3, [r7, #24]
 800b6e4:	685b      	ldr	r3, [r3, #4]
 800b6e6:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800b6e8:	7ffb      	ldrb	r3, [r7, #31]
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d011      	beq.n	800b712 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800b6ee:	697b      	ldr	r3, [r7, #20]
 800b6f0:	899b      	ldrh	r3, [r3, #12]
 800b6f2:	b29b      	uxth	r3, r3
 800b6f4:	b21b      	sxth	r3, r3
 800b6f6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b6fa:	b21c      	sxth	r4, r3
 800b6fc:	2011      	movs	r0, #17
 800b6fe:	f7f9 f86f 	bl	80047e0 <lwip_htons>
 800b702:	4603      	mov	r3, r0
 800b704:	b21b      	sxth	r3, r3
 800b706:	4323      	orrs	r3, r4
 800b708:	b21b      	sxth	r3, r3
 800b70a:	b29a      	uxth	r2, r3
 800b70c:	697b      	ldr	r3, [r7, #20]
 800b70e:	819a      	strh	r2, [r3, #12]
 800b710:	e010      	b.n	800b734 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800b712:	69bb      	ldr	r3, [r7, #24]
 800b714:	685b      	ldr	r3, [r3, #4]
 800b716:	3314      	adds	r3, #20
 800b718:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800b71a:	6a3b      	ldr	r3, [r7, #32]
 800b71c:	6858      	ldr	r0, [r3, #4]
 800b71e:	6a3b      	ldr	r3, [r7, #32]
 800b720:	685b      	ldr	r3, [r3, #4]
 800b722:	891a      	ldrh	r2, [r3, #8]
 800b724:	6a3b      	ldr	r3, [r7, #32]
 800b726:	891b      	ldrh	r3, [r3, #8]
 800b728:	1ad3      	subs	r3, r2, r3
 800b72a:	b29b      	uxth	r3, r3
 800b72c:	2201      	movs	r2, #1
 800b72e:	6939      	ldr	r1, [r7, #16]
 800b730:	f7fa fe52 	bl	80063d8 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800b734:	6a3b      	ldr	r3, [r7, #32]
 800b736:	68db      	ldr	r3, [r3, #12]
 800b738:	685b      	ldr	r3, [r3, #4]
 800b73a:	4618      	mov	r0, r3
 800b73c:	f7f9 f865 	bl	800480a <lwip_htonl>
 800b740:	4603      	mov	r3, r0
 800b742:	3301      	adds	r3, #1
 800b744:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	1ad3      	subs	r3, r2, r3
 800b74e:	2b00      	cmp	r3, #0
 800b750:	da02      	bge.n	800b758 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	68fa      	ldr	r2, [r7, #12]
 800b756:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800b758:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b75c:	2200      	movs	r2, #0
 800b75e:	69b9      	ldr	r1, [r7, #24]
 800b760:	6878      	ldr	r0, [r7, #4]
 800b762:	f7ff fded 	bl	800b340 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800b766:	687a      	ldr	r2, [r7, #4]
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	3304      	adds	r3, #4
 800b76c:	69b9      	ldr	r1, [r7, #24]
 800b76e:	6878      	ldr	r0, [r7, #4]
 800b770:	f7ff fe26 	bl	800b3c0 <tcp_output_control_segment>
 800b774:	4603      	mov	r3, r0
 800b776:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800b778:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800b77c:	4618      	mov	r0, r3
 800b77e:	372c      	adds	r7, #44	; 0x2c
 800b780:	46bd      	mov	sp, r7
 800b782:	bd90      	pop	{r4, r7, pc}
 800b784:	08012ea0 	.word	0x08012ea0
 800b788:	08013698 	.word	0x08013698
 800b78c:	08012ef4 	.word	0x08012ef4

0800b790 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800b790:	b580      	push	{r7, lr}
 800b792:	b082      	sub	sp, #8
 800b794:	af00      	add	r7, sp, #0
 800b796:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800b798:	f7fa ff0c 	bl	80065b4 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800b79c:	4b0a      	ldr	r3, [pc, #40]	; (800b7c8 <tcpip_tcp_timer+0x38>)
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d103      	bne.n	800b7ac <tcpip_tcp_timer+0x1c>
 800b7a4:	4b09      	ldr	r3, [pc, #36]	; (800b7cc <tcpip_tcp_timer+0x3c>)
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d005      	beq.n	800b7b8 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800b7ac:	2200      	movs	r2, #0
 800b7ae:	4908      	ldr	r1, [pc, #32]	; (800b7d0 <tcpip_tcp_timer+0x40>)
 800b7b0:	20fa      	movs	r0, #250	; 0xfa
 800b7b2:	f000 f8f3 	bl	800b99c <sys_timeout>
 800b7b6:	e003      	b.n	800b7c0 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800b7b8:	4b06      	ldr	r3, [pc, #24]	; (800b7d4 <tcpip_tcp_timer+0x44>)
 800b7ba:	2200      	movs	r2, #0
 800b7bc:	601a      	str	r2, [r3, #0]
  }
}
 800b7be:	bf00      	nop
 800b7c0:	bf00      	nop
 800b7c2:	3708      	adds	r7, #8
 800b7c4:	46bd      	mov	sp, r7
 800b7c6:	bd80      	pop	{r7, pc}
 800b7c8:	20007c60 	.word	0x20007c60
 800b7cc:	20007c64 	.word	0x20007c64
 800b7d0:	0800b791 	.word	0x0800b791
 800b7d4:	20007cac 	.word	0x20007cac

0800b7d8 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800b7d8:	b580      	push	{r7, lr}
 800b7da:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800b7dc:	4b0a      	ldr	r3, [pc, #40]	; (800b808 <tcp_timer_needed+0x30>)
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d10f      	bne.n	800b804 <tcp_timer_needed+0x2c>
 800b7e4:	4b09      	ldr	r3, [pc, #36]	; (800b80c <tcp_timer_needed+0x34>)
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d103      	bne.n	800b7f4 <tcp_timer_needed+0x1c>
 800b7ec:	4b08      	ldr	r3, [pc, #32]	; (800b810 <tcp_timer_needed+0x38>)
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d007      	beq.n	800b804 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800b7f4:	4b04      	ldr	r3, [pc, #16]	; (800b808 <tcp_timer_needed+0x30>)
 800b7f6:	2201      	movs	r2, #1
 800b7f8:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800b7fa:	2200      	movs	r2, #0
 800b7fc:	4905      	ldr	r1, [pc, #20]	; (800b814 <tcp_timer_needed+0x3c>)
 800b7fe:	20fa      	movs	r0, #250	; 0xfa
 800b800:	f000 f8cc 	bl	800b99c <sys_timeout>
  }
}
 800b804:	bf00      	nop
 800b806:	bd80      	pop	{r7, pc}
 800b808:	20007cac 	.word	0x20007cac
 800b80c:	20007c60 	.word	0x20007c60
 800b810:	20007c64 	.word	0x20007c64
 800b814:	0800b791 	.word	0x0800b791

0800b818 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800b818:	b580      	push	{r7, lr}
 800b81a:	b086      	sub	sp, #24
 800b81c:	af00      	add	r7, sp, #0
 800b81e:	60f8      	str	r0, [r7, #12]
 800b820:	60b9      	str	r1, [r7, #8]
 800b822:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800b824:	2006      	movs	r0, #6
 800b826:	f7f9 fd0b 	bl	8005240 <memp_malloc>
 800b82a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800b82c:	693b      	ldr	r3, [r7, #16]
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d109      	bne.n	800b846 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800b832:	693b      	ldr	r3, [r7, #16]
 800b834:	2b00      	cmp	r3, #0
 800b836:	d151      	bne.n	800b8dc <sys_timeout_abs+0xc4>
 800b838:	4b2a      	ldr	r3, [pc, #168]	; (800b8e4 <sys_timeout_abs+0xcc>)
 800b83a:	22be      	movs	r2, #190	; 0xbe
 800b83c:	492a      	ldr	r1, [pc, #168]	; (800b8e8 <sys_timeout_abs+0xd0>)
 800b83e:	482b      	ldr	r0, [pc, #172]	; (800b8ec <sys_timeout_abs+0xd4>)
 800b840:	f004 ff78 	bl	8010734 <iprintf>
    return;
 800b844:	e04a      	b.n	800b8dc <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800b846:	693b      	ldr	r3, [r7, #16]
 800b848:	2200      	movs	r2, #0
 800b84a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800b84c:	693b      	ldr	r3, [r7, #16]
 800b84e:	68ba      	ldr	r2, [r7, #8]
 800b850:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800b852:	693b      	ldr	r3, [r7, #16]
 800b854:	687a      	ldr	r2, [r7, #4]
 800b856:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800b858:	693b      	ldr	r3, [r7, #16]
 800b85a:	68fa      	ldr	r2, [r7, #12]
 800b85c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800b85e:	4b24      	ldr	r3, [pc, #144]	; (800b8f0 <sys_timeout_abs+0xd8>)
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	2b00      	cmp	r3, #0
 800b864:	d103      	bne.n	800b86e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800b866:	4a22      	ldr	r2, [pc, #136]	; (800b8f0 <sys_timeout_abs+0xd8>)
 800b868:	693b      	ldr	r3, [r7, #16]
 800b86a:	6013      	str	r3, [r2, #0]
    return;
 800b86c:	e037      	b.n	800b8de <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800b86e:	693b      	ldr	r3, [r7, #16]
 800b870:	685a      	ldr	r2, [r3, #4]
 800b872:	4b1f      	ldr	r3, [pc, #124]	; (800b8f0 <sys_timeout_abs+0xd8>)
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	685b      	ldr	r3, [r3, #4]
 800b878:	1ad3      	subs	r3, r2, r3
 800b87a:	0fdb      	lsrs	r3, r3, #31
 800b87c:	f003 0301 	and.w	r3, r3, #1
 800b880:	b2db      	uxtb	r3, r3
 800b882:	2b00      	cmp	r3, #0
 800b884:	d007      	beq.n	800b896 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800b886:	4b1a      	ldr	r3, [pc, #104]	; (800b8f0 <sys_timeout_abs+0xd8>)
 800b888:	681a      	ldr	r2, [r3, #0]
 800b88a:	693b      	ldr	r3, [r7, #16]
 800b88c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800b88e:	4a18      	ldr	r2, [pc, #96]	; (800b8f0 <sys_timeout_abs+0xd8>)
 800b890:	693b      	ldr	r3, [r7, #16]
 800b892:	6013      	str	r3, [r2, #0]
 800b894:	e023      	b.n	800b8de <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800b896:	4b16      	ldr	r3, [pc, #88]	; (800b8f0 <sys_timeout_abs+0xd8>)
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	617b      	str	r3, [r7, #20]
 800b89c:	e01a      	b.n	800b8d4 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800b89e:	697b      	ldr	r3, [r7, #20]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d00b      	beq.n	800b8be <sys_timeout_abs+0xa6>
 800b8a6:	693b      	ldr	r3, [r7, #16]
 800b8a8:	685a      	ldr	r2, [r3, #4]
 800b8aa:	697b      	ldr	r3, [r7, #20]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	685b      	ldr	r3, [r3, #4]
 800b8b0:	1ad3      	subs	r3, r2, r3
 800b8b2:	0fdb      	lsrs	r3, r3, #31
 800b8b4:	f003 0301 	and.w	r3, r3, #1
 800b8b8:	b2db      	uxtb	r3, r3
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d007      	beq.n	800b8ce <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800b8be:	697b      	ldr	r3, [r7, #20]
 800b8c0:	681a      	ldr	r2, [r3, #0]
 800b8c2:	693b      	ldr	r3, [r7, #16]
 800b8c4:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800b8c6:	697b      	ldr	r3, [r7, #20]
 800b8c8:	693a      	ldr	r2, [r7, #16]
 800b8ca:	601a      	str	r2, [r3, #0]
        break;
 800b8cc:	e007      	b.n	800b8de <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800b8ce:	697b      	ldr	r3, [r7, #20]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	617b      	str	r3, [r7, #20]
 800b8d4:	697b      	ldr	r3, [r7, #20]
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d1e1      	bne.n	800b89e <sys_timeout_abs+0x86>
 800b8da:	e000      	b.n	800b8de <sys_timeout_abs+0xc6>
    return;
 800b8dc:	bf00      	nop
      }
    }
  }
}
 800b8de:	3718      	adds	r7, #24
 800b8e0:	46bd      	mov	sp, r7
 800b8e2:	bd80      	pop	{r7, pc}
 800b8e4:	080136bc 	.word	0x080136bc
 800b8e8:	080136f0 	.word	0x080136f0
 800b8ec:	08013730 	.word	0x08013730
 800b8f0:	20007ca4 	.word	0x20007ca4

0800b8f4 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800b8f4:	b580      	push	{r7, lr}
 800b8f6:	b086      	sub	sp, #24
 800b8f8:	af00      	add	r7, sp, #0
 800b8fa:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800b900:	697b      	ldr	r3, [r7, #20]
 800b902:	685b      	ldr	r3, [r3, #4]
 800b904:	4798      	blx	r3

  now = sys_now();
 800b906:	f7f8 fd93 	bl	8004430 <sys_now>
 800b90a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800b90c:	697b      	ldr	r3, [r7, #20]
 800b90e:	681a      	ldr	r2, [r3, #0]
 800b910:	4b0f      	ldr	r3, [pc, #60]	; (800b950 <lwip_cyclic_timer+0x5c>)
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	4413      	add	r3, r2
 800b916:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800b918:	68fa      	ldr	r2, [r7, #12]
 800b91a:	693b      	ldr	r3, [r7, #16]
 800b91c:	1ad3      	subs	r3, r2, r3
 800b91e:	0fdb      	lsrs	r3, r3, #31
 800b920:	f003 0301 	and.w	r3, r3, #1
 800b924:	b2db      	uxtb	r3, r3
 800b926:	2b00      	cmp	r3, #0
 800b928:	d009      	beq.n	800b93e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800b92a:	697b      	ldr	r3, [r7, #20]
 800b92c:	681a      	ldr	r2, [r3, #0]
 800b92e:	693b      	ldr	r3, [r7, #16]
 800b930:	4413      	add	r3, r2
 800b932:	687a      	ldr	r2, [r7, #4]
 800b934:	4907      	ldr	r1, [pc, #28]	; (800b954 <lwip_cyclic_timer+0x60>)
 800b936:	4618      	mov	r0, r3
 800b938:	f7ff ff6e 	bl	800b818 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800b93c:	e004      	b.n	800b948 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800b93e:	687a      	ldr	r2, [r7, #4]
 800b940:	4904      	ldr	r1, [pc, #16]	; (800b954 <lwip_cyclic_timer+0x60>)
 800b942:	68f8      	ldr	r0, [r7, #12]
 800b944:	f7ff ff68 	bl	800b818 <sys_timeout_abs>
}
 800b948:	bf00      	nop
 800b94a:	3718      	adds	r7, #24
 800b94c:	46bd      	mov	sp, r7
 800b94e:	bd80      	pop	{r7, pc}
 800b950:	20007ca8 	.word	0x20007ca8
 800b954:	0800b8f5 	.word	0x0800b8f5

0800b958 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800b958:	b580      	push	{r7, lr}
 800b95a:	b082      	sub	sp, #8
 800b95c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800b95e:	2301      	movs	r3, #1
 800b960:	607b      	str	r3, [r7, #4]
 800b962:	e00e      	b.n	800b982 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800b964:	4a0b      	ldr	r2, [pc, #44]	; (800b994 <sys_timeouts_init+0x3c>)
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	00db      	lsls	r3, r3, #3
 800b970:	4a08      	ldr	r2, [pc, #32]	; (800b994 <sys_timeouts_init+0x3c>)
 800b972:	4413      	add	r3, r2
 800b974:	461a      	mov	r2, r3
 800b976:	4908      	ldr	r1, [pc, #32]	; (800b998 <sys_timeouts_init+0x40>)
 800b978:	f000 f810 	bl	800b99c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	3301      	adds	r3, #1
 800b980:	607b      	str	r3, [r7, #4]
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	2b04      	cmp	r3, #4
 800b986:	d9ed      	bls.n	800b964 <sys_timeouts_init+0xc>
  }
}
 800b988:	bf00      	nop
 800b98a:	bf00      	nop
 800b98c:	3708      	adds	r7, #8
 800b98e:	46bd      	mov	sp, r7
 800b990:	bd80      	pop	{r7, pc}
 800b992:	bf00      	nop
 800b994:	08014648 	.word	0x08014648
 800b998:	0800b8f5 	.word	0x0800b8f5

0800b99c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800b99c:	b580      	push	{r7, lr}
 800b99e:	b086      	sub	sp, #24
 800b9a0:	af00      	add	r7, sp, #0
 800b9a2:	60f8      	str	r0, [r7, #12]
 800b9a4:	60b9      	str	r1, [r7, #8]
 800b9a6:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b9ae:	d306      	bcc.n	800b9be <sys_timeout+0x22>
 800b9b0:	4b0a      	ldr	r3, [pc, #40]	; (800b9dc <sys_timeout+0x40>)
 800b9b2:	f240 1229 	movw	r2, #297	; 0x129
 800b9b6:	490a      	ldr	r1, [pc, #40]	; (800b9e0 <sys_timeout+0x44>)
 800b9b8:	480a      	ldr	r0, [pc, #40]	; (800b9e4 <sys_timeout+0x48>)
 800b9ba:	f004 febb 	bl	8010734 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800b9be:	f7f8 fd37 	bl	8004430 <sys_now>
 800b9c2:	4602      	mov	r2, r0
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	4413      	add	r3, r2
 800b9c8:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800b9ca:	687a      	ldr	r2, [r7, #4]
 800b9cc:	68b9      	ldr	r1, [r7, #8]
 800b9ce:	6978      	ldr	r0, [r7, #20]
 800b9d0:	f7ff ff22 	bl	800b818 <sys_timeout_abs>
#endif
}
 800b9d4:	bf00      	nop
 800b9d6:	3718      	adds	r7, #24
 800b9d8:	46bd      	mov	sp, r7
 800b9da:	bd80      	pop	{r7, pc}
 800b9dc:	080136bc 	.word	0x080136bc
 800b9e0:	08013758 	.word	0x08013758
 800b9e4:	08013730 	.word	0x08013730

0800b9e8 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800b9e8:	b580      	push	{r7, lr}
 800b9ea:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800b9ec:	f004 feba 	bl	8010764 <rand>
 800b9f0:	4603      	mov	r3, r0
 800b9f2:	b29b      	uxth	r3, r3
 800b9f4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800b9f8:	b29b      	uxth	r3, r3
 800b9fa:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800b9fe:	b29a      	uxth	r2, r3
 800ba00:	4b01      	ldr	r3, [pc, #4]	; (800ba08 <udp_init+0x20>)
 800ba02:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800ba04:	bf00      	nop
 800ba06:	bd80      	pop	{r7, pc}
 800ba08:	20000028 	.word	0x20000028

0800ba0c <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800ba0c:	b480      	push	{r7}
 800ba0e:	b083      	sub	sp, #12
 800ba10:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800ba12:	2300      	movs	r3, #0
 800ba14:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800ba16:	4b17      	ldr	r3, [pc, #92]	; (800ba74 <udp_new_port+0x68>)
 800ba18:	881b      	ldrh	r3, [r3, #0]
 800ba1a:	1c5a      	adds	r2, r3, #1
 800ba1c:	b291      	uxth	r1, r2
 800ba1e:	4a15      	ldr	r2, [pc, #84]	; (800ba74 <udp_new_port+0x68>)
 800ba20:	8011      	strh	r1, [r2, #0]
 800ba22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ba26:	4293      	cmp	r3, r2
 800ba28:	d103      	bne.n	800ba32 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800ba2a:	4b12      	ldr	r3, [pc, #72]	; (800ba74 <udp_new_port+0x68>)
 800ba2c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800ba30:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800ba32:	4b11      	ldr	r3, [pc, #68]	; (800ba78 <udp_new_port+0x6c>)
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	603b      	str	r3, [r7, #0]
 800ba38:	e011      	b.n	800ba5e <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800ba3a:	683b      	ldr	r3, [r7, #0]
 800ba3c:	8a5a      	ldrh	r2, [r3, #18]
 800ba3e:	4b0d      	ldr	r3, [pc, #52]	; (800ba74 <udp_new_port+0x68>)
 800ba40:	881b      	ldrh	r3, [r3, #0]
 800ba42:	429a      	cmp	r2, r3
 800ba44:	d108      	bne.n	800ba58 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800ba46:	88fb      	ldrh	r3, [r7, #6]
 800ba48:	3301      	adds	r3, #1
 800ba4a:	80fb      	strh	r3, [r7, #6]
 800ba4c:	88fb      	ldrh	r3, [r7, #6]
 800ba4e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ba52:	d3e0      	bcc.n	800ba16 <udp_new_port+0xa>
        return 0;
 800ba54:	2300      	movs	r3, #0
 800ba56:	e007      	b.n	800ba68 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800ba58:	683b      	ldr	r3, [r7, #0]
 800ba5a:	68db      	ldr	r3, [r3, #12]
 800ba5c:	603b      	str	r3, [r7, #0]
 800ba5e:	683b      	ldr	r3, [r7, #0]
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d1ea      	bne.n	800ba3a <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800ba64:	4b03      	ldr	r3, [pc, #12]	; (800ba74 <udp_new_port+0x68>)
 800ba66:	881b      	ldrh	r3, [r3, #0]
}
 800ba68:	4618      	mov	r0, r3
 800ba6a:	370c      	adds	r7, #12
 800ba6c:	46bd      	mov	sp, r7
 800ba6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba72:	4770      	bx	lr
 800ba74:	20000028 	.word	0x20000028
 800ba78:	20007cb0 	.word	0x20007cb0

0800ba7c <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800ba7c:	b580      	push	{r7, lr}
 800ba7e:	b084      	sub	sp, #16
 800ba80:	af00      	add	r7, sp, #0
 800ba82:	60f8      	str	r0, [r7, #12]
 800ba84:	60b9      	str	r1, [r7, #8]
 800ba86:	4613      	mov	r3, r2
 800ba88:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d105      	bne.n	800ba9c <udp_input_local_match+0x20>
 800ba90:	4b27      	ldr	r3, [pc, #156]	; (800bb30 <udp_input_local_match+0xb4>)
 800ba92:	2287      	movs	r2, #135	; 0x87
 800ba94:	4927      	ldr	r1, [pc, #156]	; (800bb34 <udp_input_local_match+0xb8>)
 800ba96:	4828      	ldr	r0, [pc, #160]	; (800bb38 <udp_input_local_match+0xbc>)
 800ba98:	f004 fe4c 	bl	8010734 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800ba9c:	68bb      	ldr	r3, [r7, #8]
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d105      	bne.n	800baae <udp_input_local_match+0x32>
 800baa2:	4b23      	ldr	r3, [pc, #140]	; (800bb30 <udp_input_local_match+0xb4>)
 800baa4:	2288      	movs	r2, #136	; 0x88
 800baa6:	4925      	ldr	r1, [pc, #148]	; (800bb3c <udp_input_local_match+0xc0>)
 800baa8:	4823      	ldr	r0, [pc, #140]	; (800bb38 <udp_input_local_match+0xbc>)
 800baaa:	f004 fe43 	bl	8010734 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	7a1b      	ldrb	r3, [r3, #8]
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d00b      	beq.n	800bace <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	7a1a      	ldrb	r2, [r3, #8]
 800baba:	4b21      	ldr	r3, [pc, #132]	; (800bb40 <udp_input_local_match+0xc4>)
 800babc:	685b      	ldr	r3, [r3, #4]
 800babe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800bac2:	3301      	adds	r3, #1
 800bac4:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800bac6:	429a      	cmp	r2, r3
 800bac8:	d001      	beq.n	800bace <udp_input_local_match+0x52>
    return 0;
 800baca:	2300      	movs	r3, #0
 800bacc:	e02b      	b.n	800bb26 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800bace:	79fb      	ldrb	r3, [r7, #7]
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d018      	beq.n	800bb06 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d013      	beq.n	800bb02 <udp_input_local_match+0x86>
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d00f      	beq.n	800bb02 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800bae2:	4b17      	ldr	r3, [pc, #92]	; (800bb40 <udp_input_local_match+0xc4>)
 800bae4:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800bae6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800baea:	d00a      	beq.n	800bb02 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	681a      	ldr	r2, [r3, #0]
 800baf0:	4b13      	ldr	r3, [pc, #76]	; (800bb40 <udp_input_local_match+0xc4>)
 800baf2:	695b      	ldr	r3, [r3, #20]
 800baf4:	405a      	eors	r2, r3
 800baf6:	68bb      	ldr	r3, [r7, #8]
 800baf8:	3308      	adds	r3, #8
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d110      	bne.n	800bb24 <udp_input_local_match+0xa8>
          return 1;
 800bb02:	2301      	movs	r3, #1
 800bb04:	e00f      	b.n	800bb26 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d009      	beq.n	800bb20 <udp_input_local_match+0xa4>
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d005      	beq.n	800bb20 <udp_input_local_match+0xa4>
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	681a      	ldr	r2, [r3, #0]
 800bb18:	4b09      	ldr	r3, [pc, #36]	; (800bb40 <udp_input_local_match+0xc4>)
 800bb1a:	695b      	ldr	r3, [r3, #20]
 800bb1c:	429a      	cmp	r2, r3
 800bb1e:	d101      	bne.n	800bb24 <udp_input_local_match+0xa8>
        return 1;
 800bb20:	2301      	movs	r3, #1
 800bb22:	e000      	b.n	800bb26 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800bb24:	2300      	movs	r3, #0
}
 800bb26:	4618      	mov	r0, r3
 800bb28:	3710      	adds	r7, #16
 800bb2a:	46bd      	mov	sp, r7
 800bb2c:	bd80      	pop	{r7, pc}
 800bb2e:	bf00      	nop
 800bb30:	080137a4 	.word	0x080137a4
 800bb34:	080137d4 	.word	0x080137d4
 800bb38:	080137f8 	.word	0x080137f8
 800bb3c:	08013820 	.word	0x08013820
 800bb40:	20004d18 	.word	0x20004d18

0800bb44 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800bb44:	b590      	push	{r4, r7, lr}
 800bb46:	b08d      	sub	sp, #52	; 0x34
 800bb48:	af02      	add	r7, sp, #8
 800bb4a:	6078      	str	r0, [r7, #4]
 800bb4c:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800bb4e:	2300      	movs	r3, #0
 800bb50:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d105      	bne.n	800bb64 <udp_input+0x20>
 800bb58:	4b7c      	ldr	r3, [pc, #496]	; (800bd4c <udp_input+0x208>)
 800bb5a:	22cf      	movs	r2, #207	; 0xcf
 800bb5c:	497c      	ldr	r1, [pc, #496]	; (800bd50 <udp_input+0x20c>)
 800bb5e:	487d      	ldr	r0, [pc, #500]	; (800bd54 <udp_input+0x210>)
 800bb60:	f004 fde8 	bl	8010734 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800bb64:	683b      	ldr	r3, [r7, #0]
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d105      	bne.n	800bb76 <udp_input+0x32>
 800bb6a:	4b78      	ldr	r3, [pc, #480]	; (800bd4c <udp_input+0x208>)
 800bb6c:	22d0      	movs	r2, #208	; 0xd0
 800bb6e:	497a      	ldr	r1, [pc, #488]	; (800bd58 <udp_input+0x214>)
 800bb70:	4878      	ldr	r0, [pc, #480]	; (800bd54 <udp_input+0x210>)
 800bb72:	f004 fddf 	bl	8010734 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	895b      	ldrh	r3, [r3, #10]
 800bb7a:	2b07      	cmp	r3, #7
 800bb7c:	d803      	bhi.n	800bb86 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800bb7e:	6878      	ldr	r0, [r7, #4]
 800bb80:	f7fa fa30 	bl	8005fe4 <pbuf_free>
    goto end;
 800bb84:	e0de      	b.n	800bd44 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	685b      	ldr	r3, [r3, #4]
 800bb8a:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800bb8c:	4b73      	ldr	r3, [pc, #460]	; (800bd5c <udp_input+0x218>)
 800bb8e:	695b      	ldr	r3, [r3, #20]
 800bb90:	4a72      	ldr	r2, [pc, #456]	; (800bd5c <udp_input+0x218>)
 800bb92:	6812      	ldr	r2, [r2, #0]
 800bb94:	4611      	mov	r1, r2
 800bb96:	4618      	mov	r0, r3
 800bb98:	f003 fe2c 	bl	800f7f4 <ip4_addr_isbroadcast_u32>
 800bb9c:	4603      	mov	r3, r0
 800bb9e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800bba0:	697b      	ldr	r3, [r7, #20]
 800bba2:	881b      	ldrh	r3, [r3, #0]
 800bba4:	b29b      	uxth	r3, r3
 800bba6:	4618      	mov	r0, r3
 800bba8:	f7f8 fe1a 	bl	80047e0 <lwip_htons>
 800bbac:	4603      	mov	r3, r0
 800bbae:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800bbb0:	697b      	ldr	r3, [r7, #20]
 800bbb2:	885b      	ldrh	r3, [r3, #2]
 800bbb4:	b29b      	uxth	r3, r3
 800bbb6:	4618      	mov	r0, r3
 800bbb8:	f7f8 fe12 	bl	80047e0 <lwip_htons>
 800bbbc:	4603      	mov	r3, r0
 800bbbe:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800bbc0:	2300      	movs	r3, #0
 800bbc2:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800bbc4:	2300      	movs	r3, #0
 800bbc6:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800bbc8:	2300      	movs	r3, #0
 800bbca:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800bbcc:	4b64      	ldr	r3, [pc, #400]	; (800bd60 <udp_input+0x21c>)
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	627b      	str	r3, [r7, #36]	; 0x24
 800bbd2:	e054      	b.n	800bc7e <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800bbd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbd6:	8a5b      	ldrh	r3, [r3, #18]
 800bbd8:	89fa      	ldrh	r2, [r7, #14]
 800bbda:	429a      	cmp	r2, r3
 800bbdc:	d14a      	bne.n	800bc74 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800bbde:	7cfb      	ldrb	r3, [r7, #19]
 800bbe0:	461a      	mov	r2, r3
 800bbe2:	6839      	ldr	r1, [r7, #0]
 800bbe4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bbe6:	f7ff ff49 	bl	800ba7c <udp_input_local_match>
 800bbea:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d041      	beq.n	800bc74 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800bbf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbf2:	7c1b      	ldrb	r3, [r3, #16]
 800bbf4:	f003 0304 	and.w	r3, r3, #4
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d11d      	bne.n	800bc38 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800bbfc:	69fb      	ldr	r3, [r7, #28]
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d102      	bne.n	800bc08 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800bc02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc04:	61fb      	str	r3, [r7, #28]
 800bc06:	e017      	b.n	800bc38 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800bc08:	7cfb      	ldrb	r3, [r7, #19]
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d014      	beq.n	800bc38 <udp_input+0xf4>
 800bc0e:	4b53      	ldr	r3, [pc, #332]	; (800bd5c <udp_input+0x218>)
 800bc10:	695b      	ldr	r3, [r3, #20]
 800bc12:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc16:	d10f      	bne.n	800bc38 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800bc18:	69fb      	ldr	r3, [r7, #28]
 800bc1a:	681a      	ldr	r2, [r3, #0]
 800bc1c:	683b      	ldr	r3, [r7, #0]
 800bc1e:	3304      	adds	r3, #4
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	429a      	cmp	r2, r3
 800bc24:	d008      	beq.n	800bc38 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800bc26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc28:	681a      	ldr	r2, [r3, #0]
 800bc2a:	683b      	ldr	r3, [r7, #0]
 800bc2c:	3304      	adds	r3, #4
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	429a      	cmp	r2, r3
 800bc32:	d101      	bne.n	800bc38 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800bc34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc36:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800bc38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc3a:	8a9b      	ldrh	r3, [r3, #20]
 800bc3c:	8a3a      	ldrh	r2, [r7, #16]
 800bc3e:	429a      	cmp	r2, r3
 800bc40:	d118      	bne.n	800bc74 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800bc42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc44:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d005      	beq.n	800bc56 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800bc4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc4c:	685a      	ldr	r2, [r3, #4]
 800bc4e:	4b43      	ldr	r3, [pc, #268]	; (800bd5c <udp_input+0x218>)
 800bc50:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800bc52:	429a      	cmp	r2, r3
 800bc54:	d10e      	bne.n	800bc74 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800bc56:	6a3b      	ldr	r3, [r7, #32]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d014      	beq.n	800bc86 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800bc5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc5e:	68da      	ldr	r2, [r3, #12]
 800bc60:	6a3b      	ldr	r3, [r7, #32]
 800bc62:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800bc64:	4b3e      	ldr	r3, [pc, #248]	; (800bd60 <udp_input+0x21c>)
 800bc66:	681a      	ldr	r2, [r3, #0]
 800bc68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc6a:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800bc6c:	4a3c      	ldr	r2, [pc, #240]	; (800bd60 <udp_input+0x21c>)
 800bc6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc70:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800bc72:	e008      	b.n	800bc86 <udp_input+0x142>
      }
    }

    prev = pcb;
 800bc74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc76:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800bc78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc7a:	68db      	ldr	r3, [r3, #12]
 800bc7c:	627b      	str	r3, [r7, #36]	; 0x24
 800bc7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d1a7      	bne.n	800bbd4 <udp_input+0x90>
 800bc84:	e000      	b.n	800bc88 <udp_input+0x144>
        break;
 800bc86:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800bc88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d101      	bne.n	800bc92 <udp_input+0x14e>
    pcb = uncon_pcb;
 800bc8e:	69fb      	ldr	r3, [r7, #28]
 800bc90:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800bc92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d002      	beq.n	800bc9e <udp_input+0x15a>
    for_us = 1;
 800bc98:	2301      	movs	r3, #1
 800bc9a:	76fb      	strb	r3, [r7, #27]
 800bc9c:	e00a      	b.n	800bcb4 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800bc9e:	683b      	ldr	r3, [r7, #0]
 800bca0:	3304      	adds	r3, #4
 800bca2:	681a      	ldr	r2, [r3, #0]
 800bca4:	4b2d      	ldr	r3, [pc, #180]	; (800bd5c <udp_input+0x218>)
 800bca6:	695b      	ldr	r3, [r3, #20]
 800bca8:	429a      	cmp	r2, r3
 800bcaa:	bf0c      	ite	eq
 800bcac:	2301      	moveq	r3, #1
 800bcae:	2300      	movne	r3, #0
 800bcb0:	b2db      	uxtb	r3, r3
 800bcb2:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800bcb4:	7efb      	ldrb	r3, [r7, #27]
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d041      	beq.n	800bd3e <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800bcba:	2108      	movs	r1, #8
 800bcbc:	6878      	ldr	r0, [r7, #4]
 800bcbe:	f7fa f90b 	bl	8005ed8 <pbuf_remove_header>
 800bcc2:	4603      	mov	r3, r0
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d00a      	beq.n	800bcde <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800bcc8:	4b20      	ldr	r3, [pc, #128]	; (800bd4c <udp_input+0x208>)
 800bcca:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800bcce:	4925      	ldr	r1, [pc, #148]	; (800bd64 <udp_input+0x220>)
 800bcd0:	4820      	ldr	r0, [pc, #128]	; (800bd54 <udp_input+0x210>)
 800bcd2:	f004 fd2f 	bl	8010734 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800bcd6:	6878      	ldr	r0, [r7, #4]
 800bcd8:	f7fa f984 	bl	8005fe4 <pbuf_free>
      goto end;
 800bcdc:	e032      	b.n	800bd44 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800bcde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d012      	beq.n	800bd0a <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800bce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bce6:	699b      	ldr	r3, [r3, #24]
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d00a      	beq.n	800bd02 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800bcec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcee:	699c      	ldr	r4, [r3, #24]
 800bcf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcf2:	69d8      	ldr	r0, [r3, #28]
 800bcf4:	8a3b      	ldrh	r3, [r7, #16]
 800bcf6:	9300      	str	r3, [sp, #0]
 800bcf8:	4b1b      	ldr	r3, [pc, #108]	; (800bd68 <udp_input+0x224>)
 800bcfa:	687a      	ldr	r2, [r7, #4]
 800bcfc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bcfe:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800bd00:	e021      	b.n	800bd46 <udp_input+0x202>
        pbuf_free(p);
 800bd02:	6878      	ldr	r0, [r7, #4]
 800bd04:	f7fa f96e 	bl	8005fe4 <pbuf_free>
        goto end;
 800bd08:	e01c      	b.n	800bd44 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800bd0a:	7cfb      	ldrb	r3, [r7, #19]
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d112      	bne.n	800bd36 <udp_input+0x1f2>
 800bd10:	4b12      	ldr	r3, [pc, #72]	; (800bd5c <udp_input+0x218>)
 800bd12:	695b      	ldr	r3, [r3, #20]
 800bd14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bd18:	2be0      	cmp	r3, #224	; 0xe0
 800bd1a:	d00c      	beq.n	800bd36 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800bd1c:	4b0f      	ldr	r3, [pc, #60]	; (800bd5c <udp_input+0x218>)
 800bd1e:	899b      	ldrh	r3, [r3, #12]
 800bd20:	3308      	adds	r3, #8
 800bd22:	b29b      	uxth	r3, r3
 800bd24:	b21b      	sxth	r3, r3
 800bd26:	4619      	mov	r1, r3
 800bd28:	6878      	ldr	r0, [r7, #4]
 800bd2a:	f7fa f948 	bl	8005fbe <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800bd2e:	2103      	movs	r1, #3
 800bd30:	6878      	ldr	r0, [r7, #4]
 800bd32:	f003 fa17 	bl	800f164 <icmp_dest_unreach>
      pbuf_free(p);
 800bd36:	6878      	ldr	r0, [r7, #4]
 800bd38:	f7fa f954 	bl	8005fe4 <pbuf_free>
  return;
 800bd3c:	e003      	b.n	800bd46 <udp_input+0x202>
    pbuf_free(p);
 800bd3e:	6878      	ldr	r0, [r7, #4]
 800bd40:	f7fa f950 	bl	8005fe4 <pbuf_free>
  return;
 800bd44:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800bd46:	372c      	adds	r7, #44	; 0x2c
 800bd48:	46bd      	mov	sp, r7
 800bd4a:	bd90      	pop	{r4, r7, pc}
 800bd4c:	080137a4 	.word	0x080137a4
 800bd50:	08013848 	.word	0x08013848
 800bd54:	080137f8 	.word	0x080137f8
 800bd58:	08013860 	.word	0x08013860
 800bd5c:	20004d18 	.word	0x20004d18
 800bd60:	20007cb0 	.word	0x20007cb0
 800bd64:	0801387c 	.word	0x0801387c
 800bd68:	20004d28 	.word	0x20004d28

0800bd6c <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800bd6c:	b580      	push	{r7, lr}
 800bd6e:	b088      	sub	sp, #32
 800bd70:	af02      	add	r7, sp, #8
 800bd72:	60f8      	str	r0, [r7, #12]
 800bd74:	60b9      	str	r1, [r7, #8]
 800bd76:	607a      	str	r2, [r7, #4]
 800bd78:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d109      	bne.n	800bd94 <udp_sendto_if+0x28>
 800bd80:	4b2e      	ldr	r3, [pc, #184]	; (800be3c <udp_sendto_if+0xd0>)
 800bd82:	f44f 7220 	mov.w	r2, #640	; 0x280
 800bd86:	492e      	ldr	r1, [pc, #184]	; (800be40 <udp_sendto_if+0xd4>)
 800bd88:	482e      	ldr	r0, [pc, #184]	; (800be44 <udp_sendto_if+0xd8>)
 800bd8a:	f004 fcd3 	bl	8010734 <iprintf>
 800bd8e:	f06f 030f 	mvn.w	r3, #15
 800bd92:	e04f      	b.n	800be34 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800bd94:	68bb      	ldr	r3, [r7, #8]
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d109      	bne.n	800bdae <udp_sendto_if+0x42>
 800bd9a:	4b28      	ldr	r3, [pc, #160]	; (800be3c <udp_sendto_if+0xd0>)
 800bd9c:	f240 2281 	movw	r2, #641	; 0x281
 800bda0:	4929      	ldr	r1, [pc, #164]	; (800be48 <udp_sendto_if+0xdc>)
 800bda2:	4828      	ldr	r0, [pc, #160]	; (800be44 <udp_sendto_if+0xd8>)
 800bda4:	f004 fcc6 	bl	8010734 <iprintf>
 800bda8:	f06f 030f 	mvn.w	r3, #15
 800bdac:	e042      	b.n	800be34 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d109      	bne.n	800bdc8 <udp_sendto_if+0x5c>
 800bdb4:	4b21      	ldr	r3, [pc, #132]	; (800be3c <udp_sendto_if+0xd0>)
 800bdb6:	f240 2282 	movw	r2, #642	; 0x282
 800bdba:	4924      	ldr	r1, [pc, #144]	; (800be4c <udp_sendto_if+0xe0>)
 800bdbc:	4821      	ldr	r0, [pc, #132]	; (800be44 <udp_sendto_if+0xd8>)
 800bdbe:	f004 fcb9 	bl	8010734 <iprintf>
 800bdc2:	f06f 030f 	mvn.w	r3, #15
 800bdc6:	e035      	b.n	800be34 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800bdc8:	6a3b      	ldr	r3, [r7, #32]
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d109      	bne.n	800bde2 <udp_sendto_if+0x76>
 800bdce:	4b1b      	ldr	r3, [pc, #108]	; (800be3c <udp_sendto_if+0xd0>)
 800bdd0:	f240 2283 	movw	r2, #643	; 0x283
 800bdd4:	491e      	ldr	r1, [pc, #120]	; (800be50 <udp_sendto_if+0xe4>)
 800bdd6:	481b      	ldr	r0, [pc, #108]	; (800be44 <udp_sendto_if+0xd8>)
 800bdd8:	f004 fcac 	bl	8010734 <iprintf>
 800bddc:	f06f 030f 	mvn.w	r3, #15
 800bde0:	e028      	b.n	800be34 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d009      	beq.n	800bdfc <udp_sendto_if+0x90>
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d005      	beq.n	800bdfc <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800bdf8:	2be0      	cmp	r3, #224	; 0xe0
 800bdfa:	d103      	bne.n	800be04 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 800bdfc:	6a3b      	ldr	r3, [r7, #32]
 800bdfe:	3304      	adds	r3, #4
 800be00:	617b      	str	r3, [r7, #20]
 800be02:	e00b      	b.n	800be1c <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	681a      	ldr	r2, [r3, #0]
 800be08:	6a3b      	ldr	r3, [r7, #32]
 800be0a:	3304      	adds	r3, #4
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	429a      	cmp	r2, r3
 800be10:	d002      	beq.n	800be18 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 800be12:	f06f 0303 	mvn.w	r3, #3
 800be16:	e00d      	b.n	800be34 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800be1c:	887a      	ldrh	r2, [r7, #2]
 800be1e:	697b      	ldr	r3, [r7, #20]
 800be20:	9301      	str	r3, [sp, #4]
 800be22:	6a3b      	ldr	r3, [r7, #32]
 800be24:	9300      	str	r3, [sp, #0]
 800be26:	4613      	mov	r3, r2
 800be28:	687a      	ldr	r2, [r7, #4]
 800be2a:	68b9      	ldr	r1, [r7, #8]
 800be2c:	68f8      	ldr	r0, [r7, #12]
 800be2e:	f000 f811 	bl	800be54 <udp_sendto_if_src>
 800be32:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800be34:	4618      	mov	r0, r3
 800be36:	3718      	adds	r7, #24
 800be38:	46bd      	mov	sp, r7
 800be3a:	bd80      	pop	{r7, pc}
 800be3c:	080137a4 	.word	0x080137a4
 800be40:	08013918 	.word	0x08013918
 800be44:	080137f8 	.word	0x080137f8
 800be48:	08013934 	.word	0x08013934
 800be4c:	08013950 	.word	0x08013950
 800be50:	08013970 	.word	0x08013970

0800be54 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800be54:	b580      	push	{r7, lr}
 800be56:	b08c      	sub	sp, #48	; 0x30
 800be58:	af04      	add	r7, sp, #16
 800be5a:	60f8      	str	r0, [r7, #12]
 800be5c:	60b9      	str	r1, [r7, #8]
 800be5e:	607a      	str	r2, [r7, #4]
 800be60:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	2b00      	cmp	r3, #0
 800be66:	d109      	bne.n	800be7c <udp_sendto_if_src+0x28>
 800be68:	4b65      	ldr	r3, [pc, #404]	; (800c000 <udp_sendto_if_src+0x1ac>)
 800be6a:	f240 22d1 	movw	r2, #721	; 0x2d1
 800be6e:	4965      	ldr	r1, [pc, #404]	; (800c004 <udp_sendto_if_src+0x1b0>)
 800be70:	4865      	ldr	r0, [pc, #404]	; (800c008 <udp_sendto_if_src+0x1b4>)
 800be72:	f004 fc5f 	bl	8010734 <iprintf>
 800be76:	f06f 030f 	mvn.w	r3, #15
 800be7a:	e0bc      	b.n	800bff6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800be7c:	68bb      	ldr	r3, [r7, #8]
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d109      	bne.n	800be96 <udp_sendto_if_src+0x42>
 800be82:	4b5f      	ldr	r3, [pc, #380]	; (800c000 <udp_sendto_if_src+0x1ac>)
 800be84:	f240 22d2 	movw	r2, #722	; 0x2d2
 800be88:	4960      	ldr	r1, [pc, #384]	; (800c00c <udp_sendto_if_src+0x1b8>)
 800be8a:	485f      	ldr	r0, [pc, #380]	; (800c008 <udp_sendto_if_src+0x1b4>)
 800be8c:	f004 fc52 	bl	8010734 <iprintf>
 800be90:	f06f 030f 	mvn.w	r3, #15
 800be94:	e0af      	b.n	800bff6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d109      	bne.n	800beb0 <udp_sendto_if_src+0x5c>
 800be9c:	4b58      	ldr	r3, [pc, #352]	; (800c000 <udp_sendto_if_src+0x1ac>)
 800be9e:	f240 22d3 	movw	r2, #723	; 0x2d3
 800bea2:	495b      	ldr	r1, [pc, #364]	; (800c010 <udp_sendto_if_src+0x1bc>)
 800bea4:	4858      	ldr	r0, [pc, #352]	; (800c008 <udp_sendto_if_src+0x1b4>)
 800bea6:	f004 fc45 	bl	8010734 <iprintf>
 800beaa:	f06f 030f 	mvn.w	r3, #15
 800beae:	e0a2      	b.n	800bff6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800beb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d109      	bne.n	800beca <udp_sendto_if_src+0x76>
 800beb6:	4b52      	ldr	r3, [pc, #328]	; (800c000 <udp_sendto_if_src+0x1ac>)
 800beb8:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800bebc:	4955      	ldr	r1, [pc, #340]	; (800c014 <udp_sendto_if_src+0x1c0>)
 800bebe:	4852      	ldr	r0, [pc, #328]	; (800c008 <udp_sendto_if_src+0x1b4>)
 800bec0:	f004 fc38 	bl	8010734 <iprintf>
 800bec4:	f06f 030f 	mvn.w	r3, #15
 800bec8:	e095      	b.n	800bff6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800beca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800becc:	2b00      	cmp	r3, #0
 800bece:	d109      	bne.n	800bee4 <udp_sendto_if_src+0x90>
 800bed0:	4b4b      	ldr	r3, [pc, #300]	; (800c000 <udp_sendto_if_src+0x1ac>)
 800bed2:	f240 22d5 	movw	r2, #725	; 0x2d5
 800bed6:	4950      	ldr	r1, [pc, #320]	; (800c018 <udp_sendto_if_src+0x1c4>)
 800bed8:	484b      	ldr	r0, [pc, #300]	; (800c008 <udp_sendto_if_src+0x1b4>)
 800beda:	f004 fc2b 	bl	8010734 <iprintf>
 800bede:	f06f 030f 	mvn.w	r3, #15
 800bee2:	e088      	b.n	800bff6 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	8a5b      	ldrh	r3, [r3, #18]
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d10f      	bne.n	800bf0c <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800beec:	68f9      	ldr	r1, [r7, #12]
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	8a5b      	ldrh	r3, [r3, #18]
 800bef2:	461a      	mov	r2, r3
 800bef4:	68f8      	ldr	r0, [r7, #12]
 800bef6:	f000 f893 	bl	800c020 <udp_bind>
 800befa:	4603      	mov	r3, r0
 800befc:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 800befe:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d002      	beq.n	800bf0c <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800bf06:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800bf0a:	e074      	b.n	800bff6 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800bf0c:	68bb      	ldr	r3, [r7, #8]
 800bf0e:	891b      	ldrh	r3, [r3, #8]
 800bf10:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 800bf14:	4293      	cmp	r3, r2
 800bf16:	d902      	bls.n	800bf1e <udp_sendto_if_src+0xca>
    return ERR_MEM;
 800bf18:	f04f 33ff 	mov.w	r3, #4294967295
 800bf1c:	e06b      	b.n	800bff6 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 800bf1e:	2108      	movs	r1, #8
 800bf20:	68b8      	ldr	r0, [r7, #8]
 800bf22:	f7f9 ffc9 	bl	8005eb8 <pbuf_add_header>
 800bf26:	4603      	mov	r3, r0
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d015      	beq.n	800bf58 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800bf2c:	f44f 7220 	mov.w	r2, #640	; 0x280
 800bf30:	2108      	movs	r1, #8
 800bf32:	2022      	movs	r0, #34	; 0x22
 800bf34:	f7f9 fd72 	bl	8005a1c <pbuf_alloc>
 800bf38:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800bf3a:	69fb      	ldr	r3, [r7, #28]
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d102      	bne.n	800bf46 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800bf40:	f04f 33ff 	mov.w	r3, #4294967295
 800bf44:	e057      	b.n	800bff6 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 800bf46:	68bb      	ldr	r3, [r7, #8]
 800bf48:	891b      	ldrh	r3, [r3, #8]
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d006      	beq.n	800bf5c <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800bf4e:	68b9      	ldr	r1, [r7, #8]
 800bf50:	69f8      	ldr	r0, [r7, #28]
 800bf52:	f7fa f95f 	bl	8006214 <pbuf_chain>
 800bf56:	e001      	b.n	800bf5c <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800bf58:	68bb      	ldr	r3, [r7, #8]
 800bf5a:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800bf5c:	69fb      	ldr	r3, [r7, #28]
 800bf5e:	895b      	ldrh	r3, [r3, #10]
 800bf60:	2b07      	cmp	r3, #7
 800bf62:	d806      	bhi.n	800bf72 <udp_sendto_if_src+0x11e>
 800bf64:	4b26      	ldr	r3, [pc, #152]	; (800c000 <udp_sendto_if_src+0x1ac>)
 800bf66:	f240 320d 	movw	r2, #781	; 0x30d
 800bf6a:	492c      	ldr	r1, [pc, #176]	; (800c01c <udp_sendto_if_src+0x1c8>)
 800bf6c:	4826      	ldr	r0, [pc, #152]	; (800c008 <udp_sendto_if_src+0x1b4>)
 800bf6e:	f004 fbe1 	bl	8010734 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800bf72:	69fb      	ldr	r3, [r7, #28]
 800bf74:	685b      	ldr	r3, [r3, #4]
 800bf76:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	8a5b      	ldrh	r3, [r3, #18]
 800bf7c:	4618      	mov	r0, r3
 800bf7e:	f7f8 fc2f 	bl	80047e0 <lwip_htons>
 800bf82:	4603      	mov	r3, r0
 800bf84:	461a      	mov	r2, r3
 800bf86:	697b      	ldr	r3, [r7, #20]
 800bf88:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800bf8a:	887b      	ldrh	r3, [r7, #2]
 800bf8c:	4618      	mov	r0, r3
 800bf8e:	f7f8 fc27 	bl	80047e0 <lwip_htons>
 800bf92:	4603      	mov	r3, r0
 800bf94:	461a      	mov	r2, r3
 800bf96:	697b      	ldr	r3, [r7, #20]
 800bf98:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800bf9a:	697b      	ldr	r3, [r7, #20]
 800bf9c:	2200      	movs	r2, #0
 800bf9e:	719a      	strb	r2, [r3, #6]
 800bfa0:	2200      	movs	r2, #0
 800bfa2:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800bfa4:	69fb      	ldr	r3, [r7, #28]
 800bfa6:	891b      	ldrh	r3, [r3, #8]
 800bfa8:	4618      	mov	r0, r3
 800bfaa:	f7f8 fc19 	bl	80047e0 <lwip_htons>
 800bfae:	4603      	mov	r3, r0
 800bfb0:	461a      	mov	r2, r3
 800bfb2:	697b      	ldr	r3, [r7, #20]
 800bfb4:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800bfb6:	2311      	movs	r3, #17
 800bfb8:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	7adb      	ldrb	r3, [r3, #11]
 800bfbe:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	7a9b      	ldrb	r3, [r3, #10]
 800bfc4:	7cb9      	ldrb	r1, [r7, #18]
 800bfc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bfc8:	9202      	str	r2, [sp, #8]
 800bfca:	7cfa      	ldrb	r2, [r7, #19]
 800bfcc:	9201      	str	r2, [sp, #4]
 800bfce:	9300      	str	r3, [sp, #0]
 800bfd0:	460b      	mov	r3, r1
 800bfd2:	687a      	ldr	r2, [r7, #4]
 800bfd4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bfd6:	69f8      	ldr	r0, [r7, #28]
 800bfd8:	f003 fb5e 	bl	800f698 <ip4_output_if_src>
 800bfdc:	4603      	mov	r3, r0
 800bfde:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800bfe0:	69fa      	ldr	r2, [r7, #28]
 800bfe2:	68bb      	ldr	r3, [r7, #8]
 800bfe4:	429a      	cmp	r2, r3
 800bfe6:	d004      	beq.n	800bff2 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 800bfe8:	69f8      	ldr	r0, [r7, #28]
 800bfea:	f7f9 fffb 	bl	8005fe4 <pbuf_free>
    q = NULL;
 800bfee:	2300      	movs	r3, #0
 800bff0:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 800bff2:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 800bff6:	4618      	mov	r0, r3
 800bff8:	3720      	adds	r7, #32
 800bffa:	46bd      	mov	sp, r7
 800bffc:	bd80      	pop	{r7, pc}
 800bffe:	bf00      	nop
 800c000:	080137a4 	.word	0x080137a4
 800c004:	08013990 	.word	0x08013990
 800c008:	080137f8 	.word	0x080137f8
 800c00c:	080139b0 	.word	0x080139b0
 800c010:	080139d0 	.word	0x080139d0
 800c014:	080139f4 	.word	0x080139f4
 800c018:	08013a18 	.word	0x08013a18
 800c01c:	08013a3c 	.word	0x08013a3c

0800c020 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800c020:	b580      	push	{r7, lr}
 800c022:	b086      	sub	sp, #24
 800c024:	af00      	add	r7, sp, #0
 800c026:	60f8      	str	r0, [r7, #12]
 800c028:	60b9      	str	r1, [r7, #8]
 800c02a:	4613      	mov	r3, r2
 800c02c:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800c02e:	68bb      	ldr	r3, [r7, #8]
 800c030:	2b00      	cmp	r3, #0
 800c032:	d101      	bne.n	800c038 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800c034:	4b39      	ldr	r3, [pc, #228]	; (800c11c <udp_bind+0xfc>)
 800c036:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d109      	bne.n	800c052 <udp_bind+0x32>
 800c03e:	4b38      	ldr	r3, [pc, #224]	; (800c120 <udp_bind+0x100>)
 800c040:	f240 32b7 	movw	r2, #951	; 0x3b7
 800c044:	4937      	ldr	r1, [pc, #220]	; (800c124 <udp_bind+0x104>)
 800c046:	4838      	ldr	r0, [pc, #224]	; (800c128 <udp_bind+0x108>)
 800c048:	f004 fb74 	bl	8010734 <iprintf>
 800c04c:	f06f 030f 	mvn.w	r3, #15
 800c050:	e060      	b.n	800c114 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800c052:	2300      	movs	r3, #0
 800c054:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c056:	4b35      	ldr	r3, [pc, #212]	; (800c12c <udp_bind+0x10c>)
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	617b      	str	r3, [r7, #20]
 800c05c:	e009      	b.n	800c072 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800c05e:	68fa      	ldr	r2, [r7, #12]
 800c060:	697b      	ldr	r3, [r7, #20]
 800c062:	429a      	cmp	r2, r3
 800c064:	d102      	bne.n	800c06c <udp_bind+0x4c>
      rebind = 1;
 800c066:	2301      	movs	r3, #1
 800c068:	74fb      	strb	r3, [r7, #19]
      break;
 800c06a:	e005      	b.n	800c078 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c06c:	697b      	ldr	r3, [r7, #20]
 800c06e:	68db      	ldr	r3, [r3, #12]
 800c070:	617b      	str	r3, [r7, #20]
 800c072:	697b      	ldr	r3, [r7, #20]
 800c074:	2b00      	cmp	r3, #0
 800c076:	d1f2      	bne.n	800c05e <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800c078:	88fb      	ldrh	r3, [r7, #6]
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d109      	bne.n	800c092 <udp_bind+0x72>
    port = udp_new_port();
 800c07e:	f7ff fcc5 	bl	800ba0c <udp_new_port>
 800c082:	4603      	mov	r3, r0
 800c084:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800c086:	88fb      	ldrh	r3, [r7, #6]
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d12c      	bne.n	800c0e6 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800c08c:	f06f 0307 	mvn.w	r3, #7
 800c090:	e040      	b.n	800c114 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c092:	4b26      	ldr	r3, [pc, #152]	; (800c12c <udp_bind+0x10c>)
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	617b      	str	r3, [r7, #20]
 800c098:	e022      	b.n	800c0e0 <udp_bind+0xc0>
      if (pcb != ipcb) {
 800c09a:	68fa      	ldr	r2, [r7, #12]
 800c09c:	697b      	ldr	r3, [r7, #20]
 800c09e:	429a      	cmp	r2, r3
 800c0a0:	d01b      	beq.n	800c0da <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800c0a2:	697b      	ldr	r3, [r7, #20]
 800c0a4:	8a5b      	ldrh	r3, [r3, #18]
 800c0a6:	88fa      	ldrh	r2, [r7, #6]
 800c0a8:	429a      	cmp	r2, r3
 800c0aa:	d116      	bne.n	800c0da <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800c0ac:	697b      	ldr	r3, [r7, #20]
 800c0ae:	681a      	ldr	r2, [r3, #0]
 800c0b0:	68bb      	ldr	r3, [r7, #8]
 800c0b2:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800c0b4:	429a      	cmp	r2, r3
 800c0b6:	d00d      	beq.n	800c0d4 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800c0b8:	68bb      	ldr	r3, [r7, #8]
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d00a      	beq.n	800c0d4 <udp_bind+0xb4>
 800c0be:	68bb      	ldr	r3, [r7, #8]
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d006      	beq.n	800c0d4 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800c0c6:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d003      	beq.n	800c0d4 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800c0cc:	697b      	ldr	r3, [r7, #20]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d102      	bne.n	800c0da <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800c0d4:	f06f 0307 	mvn.w	r3, #7
 800c0d8:	e01c      	b.n	800c114 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c0da:	697b      	ldr	r3, [r7, #20]
 800c0dc:	68db      	ldr	r3, [r3, #12]
 800c0de:	617b      	str	r3, [r7, #20]
 800c0e0:	697b      	ldr	r3, [r7, #20]
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d1d9      	bne.n	800c09a <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800c0e6:	68bb      	ldr	r3, [r7, #8]
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d002      	beq.n	800c0f2 <udp_bind+0xd2>
 800c0ec:	68bb      	ldr	r3, [r7, #8]
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	e000      	b.n	800c0f4 <udp_bind+0xd4>
 800c0f2:	2300      	movs	r3, #0
 800c0f4:	68fa      	ldr	r2, [r7, #12]
 800c0f6:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	88fa      	ldrh	r2, [r7, #6]
 800c0fc:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800c0fe:	7cfb      	ldrb	r3, [r7, #19]
 800c100:	2b00      	cmp	r3, #0
 800c102:	d106      	bne.n	800c112 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800c104:	4b09      	ldr	r3, [pc, #36]	; (800c12c <udp_bind+0x10c>)
 800c106:	681a      	ldr	r2, [r3, #0]
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800c10c:	4a07      	ldr	r2, [pc, #28]	; (800c12c <udp_bind+0x10c>)
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800c112:	2300      	movs	r3, #0
}
 800c114:	4618      	mov	r0, r3
 800c116:	3718      	adds	r7, #24
 800c118:	46bd      	mov	sp, r7
 800c11a:	bd80      	pop	{r7, pc}
 800c11c:	08014670 	.word	0x08014670
 800c120:	080137a4 	.word	0x080137a4
 800c124:	08013a6c 	.word	0x08013a6c
 800c128:	080137f8 	.word	0x080137f8
 800c12c:	20007cb0 	.word	0x20007cb0

0800c130 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800c130:	b580      	push	{r7, lr}
 800c132:	b086      	sub	sp, #24
 800c134:	af00      	add	r7, sp, #0
 800c136:	60f8      	str	r0, [r7, #12]
 800c138:	60b9      	str	r1, [r7, #8]
 800c13a:	4613      	mov	r3, r2
 800c13c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	2b00      	cmp	r3, #0
 800c142:	d109      	bne.n	800c158 <udp_connect+0x28>
 800c144:	4b2c      	ldr	r3, [pc, #176]	; (800c1f8 <udp_connect+0xc8>)
 800c146:	f240 4235 	movw	r2, #1077	; 0x435
 800c14a:	492c      	ldr	r1, [pc, #176]	; (800c1fc <udp_connect+0xcc>)
 800c14c:	482c      	ldr	r0, [pc, #176]	; (800c200 <udp_connect+0xd0>)
 800c14e:	f004 faf1 	bl	8010734 <iprintf>
 800c152:	f06f 030f 	mvn.w	r3, #15
 800c156:	e04b      	b.n	800c1f0 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800c158:	68bb      	ldr	r3, [r7, #8]
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d109      	bne.n	800c172 <udp_connect+0x42>
 800c15e:	4b26      	ldr	r3, [pc, #152]	; (800c1f8 <udp_connect+0xc8>)
 800c160:	f240 4236 	movw	r2, #1078	; 0x436
 800c164:	4927      	ldr	r1, [pc, #156]	; (800c204 <udp_connect+0xd4>)
 800c166:	4826      	ldr	r0, [pc, #152]	; (800c200 <udp_connect+0xd0>)
 800c168:	f004 fae4 	bl	8010734 <iprintf>
 800c16c:	f06f 030f 	mvn.w	r3, #15
 800c170:	e03e      	b.n	800c1f0 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	8a5b      	ldrh	r3, [r3, #18]
 800c176:	2b00      	cmp	r3, #0
 800c178:	d10f      	bne.n	800c19a <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800c17a:	68f9      	ldr	r1, [r7, #12]
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	8a5b      	ldrh	r3, [r3, #18]
 800c180:	461a      	mov	r2, r3
 800c182:	68f8      	ldr	r0, [r7, #12]
 800c184:	f7ff ff4c 	bl	800c020 <udp_bind>
 800c188:	4603      	mov	r3, r0
 800c18a:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800c18c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c190:	2b00      	cmp	r3, #0
 800c192:	d002      	beq.n	800c19a <udp_connect+0x6a>
      return err;
 800c194:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c198:	e02a      	b.n	800c1f0 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800c19a:	68bb      	ldr	r3, [r7, #8]
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d002      	beq.n	800c1a6 <udp_connect+0x76>
 800c1a0:	68bb      	ldr	r3, [r7, #8]
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	e000      	b.n	800c1a8 <udp_connect+0x78>
 800c1a6:	2300      	movs	r3, #0
 800c1a8:	68fa      	ldr	r2, [r7, #12]
 800c1aa:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	88fa      	ldrh	r2, [r7, #6]
 800c1b0:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	7c1b      	ldrb	r3, [r3, #16]
 800c1b6:	f043 0304 	orr.w	r3, r3, #4
 800c1ba:	b2da      	uxtb	r2, r3
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c1c0:	4b11      	ldr	r3, [pc, #68]	; (800c208 <udp_connect+0xd8>)
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	617b      	str	r3, [r7, #20]
 800c1c6:	e008      	b.n	800c1da <udp_connect+0xaa>
    if (pcb == ipcb) {
 800c1c8:	68fa      	ldr	r2, [r7, #12]
 800c1ca:	697b      	ldr	r3, [r7, #20]
 800c1cc:	429a      	cmp	r2, r3
 800c1ce:	d101      	bne.n	800c1d4 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 800c1d0:	2300      	movs	r3, #0
 800c1d2:	e00d      	b.n	800c1f0 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c1d4:	697b      	ldr	r3, [r7, #20]
 800c1d6:	68db      	ldr	r3, [r3, #12]
 800c1d8:	617b      	str	r3, [r7, #20]
 800c1da:	697b      	ldr	r3, [r7, #20]
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d1f3      	bne.n	800c1c8 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 800c1e0:	4b09      	ldr	r3, [pc, #36]	; (800c208 <udp_connect+0xd8>)
 800c1e2:	681a      	ldr	r2, [r3, #0]
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 800c1e8:	4a07      	ldr	r2, [pc, #28]	; (800c208 <udp_connect+0xd8>)
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 800c1ee:	2300      	movs	r3, #0
}
 800c1f0:	4618      	mov	r0, r3
 800c1f2:	3718      	adds	r7, #24
 800c1f4:	46bd      	mov	sp, r7
 800c1f6:	bd80      	pop	{r7, pc}
 800c1f8:	080137a4 	.word	0x080137a4
 800c1fc:	08013a84 	.word	0x08013a84
 800c200:	080137f8 	.word	0x080137f8
 800c204:	08013aa0 	.word	0x08013aa0
 800c208:	20007cb0 	.word	0x20007cb0

0800c20c <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800c20c:	b580      	push	{r7, lr}
 800c20e:	b084      	sub	sp, #16
 800c210:	af00      	add	r7, sp, #0
 800c212:	60f8      	str	r0, [r7, #12]
 800c214:	60b9      	str	r1, [r7, #8]
 800c216:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d107      	bne.n	800c22e <udp_recv+0x22>
 800c21e:	4b08      	ldr	r3, [pc, #32]	; (800c240 <udp_recv+0x34>)
 800c220:	f240 428a 	movw	r2, #1162	; 0x48a
 800c224:	4907      	ldr	r1, [pc, #28]	; (800c244 <udp_recv+0x38>)
 800c226:	4808      	ldr	r0, [pc, #32]	; (800c248 <udp_recv+0x3c>)
 800c228:	f004 fa84 	bl	8010734 <iprintf>
 800c22c:	e005      	b.n	800c23a <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	68ba      	ldr	r2, [r7, #8]
 800c232:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	687a      	ldr	r2, [r7, #4]
 800c238:	61da      	str	r2, [r3, #28]
}
 800c23a:	3710      	adds	r7, #16
 800c23c:	46bd      	mov	sp, r7
 800c23e:	bd80      	pop	{r7, pc}
 800c240:	080137a4 	.word	0x080137a4
 800c244:	08013ad8 	.word	0x08013ad8
 800c248:	080137f8 	.word	0x080137f8

0800c24c <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 800c24c:	b580      	push	{r7, lr}
 800c24e:	b084      	sub	sp, #16
 800c250:	af00      	add	r7, sp, #0
 800c252:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	2b00      	cmp	r3, #0
 800c258:	d107      	bne.n	800c26a <udp_remove+0x1e>
 800c25a:	4b19      	ldr	r3, [pc, #100]	; (800c2c0 <udp_remove+0x74>)
 800c25c:	f240 42a1 	movw	r2, #1185	; 0x4a1
 800c260:	4918      	ldr	r1, [pc, #96]	; (800c2c4 <udp_remove+0x78>)
 800c262:	4819      	ldr	r0, [pc, #100]	; (800c2c8 <udp_remove+0x7c>)
 800c264:	f004 fa66 	bl	8010734 <iprintf>
 800c268:	e026      	b.n	800c2b8 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800c26a:	4b18      	ldr	r3, [pc, #96]	; (800c2cc <udp_remove+0x80>)
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	687a      	ldr	r2, [r7, #4]
 800c270:	429a      	cmp	r2, r3
 800c272:	d105      	bne.n	800c280 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 800c274:	4b15      	ldr	r3, [pc, #84]	; (800c2cc <udp_remove+0x80>)
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	68db      	ldr	r3, [r3, #12]
 800c27a:	4a14      	ldr	r2, [pc, #80]	; (800c2cc <udp_remove+0x80>)
 800c27c:	6013      	str	r3, [r2, #0]
 800c27e:	e017      	b.n	800c2b0 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800c280:	4b12      	ldr	r3, [pc, #72]	; (800c2cc <udp_remove+0x80>)
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	60fb      	str	r3, [r7, #12]
 800c286:	e010      	b.n	800c2aa <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	68db      	ldr	r3, [r3, #12]
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d009      	beq.n	800c2a4 <udp_remove+0x58>
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	68db      	ldr	r3, [r3, #12]
 800c294:	687a      	ldr	r2, [r7, #4]
 800c296:	429a      	cmp	r2, r3
 800c298:	d104      	bne.n	800c2a4 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	68da      	ldr	r2, [r3, #12]
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	60da      	str	r2, [r3, #12]
        break;
 800c2a2:	e005      	b.n	800c2b0 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	68db      	ldr	r3, [r3, #12]
 800c2a8:	60fb      	str	r3, [r7, #12]
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d1eb      	bne.n	800c288 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800c2b0:	6879      	ldr	r1, [r7, #4]
 800c2b2:	2000      	movs	r0, #0
 800c2b4:	f7f9 f834 	bl	8005320 <memp_free>
}
 800c2b8:	3710      	adds	r7, #16
 800c2ba:	46bd      	mov	sp, r7
 800c2bc:	bd80      	pop	{r7, pc}
 800c2be:	bf00      	nop
 800c2c0:	080137a4 	.word	0x080137a4
 800c2c4:	08013af0 	.word	0x08013af0
 800c2c8:	080137f8 	.word	0x080137f8
 800c2cc:	20007cb0 	.word	0x20007cb0

0800c2d0 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800c2d0:	b580      	push	{r7, lr}
 800c2d2:	b082      	sub	sp, #8
 800c2d4:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800c2d6:	2000      	movs	r0, #0
 800c2d8:	f7f8 ffb2 	bl	8005240 <memp_malloc>
 800c2dc:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d007      	beq.n	800c2f4 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800c2e4:	2220      	movs	r2, #32
 800c2e6:	2100      	movs	r1, #0
 800c2e8:	6878      	ldr	r0, [r7, #4]
 800c2ea:	f004 fa1b 	bl	8010724 <memset>
    pcb->ttl = UDP_TTL;
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	22ff      	movs	r2, #255	; 0xff
 800c2f2:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800c2f4:	687b      	ldr	r3, [r7, #4]
}
 800c2f6:	4618      	mov	r0, r3
 800c2f8:	3708      	adds	r7, #8
 800c2fa:	46bd      	mov	sp, r7
 800c2fc:	bd80      	pop	{r7, pc}
	...

0800c300 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800c300:	b480      	push	{r7}
 800c302:	b085      	sub	sp, #20
 800c304:	af00      	add	r7, sp, #0
 800c306:	6078      	str	r0, [r7, #4]
 800c308:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d01e      	beq.n	800c34e <udp_netif_ip_addr_changed+0x4e>
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	2b00      	cmp	r3, #0
 800c316:	d01a      	beq.n	800c34e <udp_netif_ip_addr_changed+0x4e>
 800c318:	683b      	ldr	r3, [r7, #0]
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d017      	beq.n	800c34e <udp_netif_ip_addr_changed+0x4e>
 800c31e:	683b      	ldr	r3, [r7, #0]
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	2b00      	cmp	r3, #0
 800c324:	d013      	beq.n	800c34e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800c326:	4b0d      	ldr	r3, [pc, #52]	; (800c35c <udp_netif_ip_addr_changed+0x5c>)
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	60fb      	str	r3, [r7, #12]
 800c32c:	e00c      	b.n	800c348 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	681a      	ldr	r2, [r3, #0]
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	429a      	cmp	r2, r3
 800c338:	d103      	bne.n	800c342 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800c33a:	683b      	ldr	r3, [r7, #0]
 800c33c:	681a      	ldr	r2, [r3, #0]
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	68db      	ldr	r3, [r3, #12]
 800c346:	60fb      	str	r3, [r7, #12]
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d1ef      	bne.n	800c32e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800c34e:	bf00      	nop
 800c350:	3714      	adds	r7, #20
 800c352:	46bd      	mov	sp, r7
 800c354:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c358:	4770      	bx	lr
 800c35a:	bf00      	nop
 800c35c:	20007cb0 	.word	0x20007cb0

0800c360 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 800c360:	b580      	push	{r7, lr}
 800c362:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 800c364:	4b20      	ldr	r3, [pc, #128]	; (800c3e8 <dhcp_inc_pcb_refcount+0x88>)
 800c366:	781b      	ldrb	r3, [r3, #0]
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d133      	bne.n	800c3d4 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 800c36c:	4b1f      	ldr	r3, [pc, #124]	; (800c3ec <dhcp_inc_pcb_refcount+0x8c>)
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	2b00      	cmp	r3, #0
 800c372:	d005      	beq.n	800c380 <dhcp_inc_pcb_refcount+0x20>
 800c374:	4b1e      	ldr	r3, [pc, #120]	; (800c3f0 <dhcp_inc_pcb_refcount+0x90>)
 800c376:	22e5      	movs	r2, #229	; 0xe5
 800c378:	491e      	ldr	r1, [pc, #120]	; (800c3f4 <dhcp_inc_pcb_refcount+0x94>)
 800c37a:	481f      	ldr	r0, [pc, #124]	; (800c3f8 <dhcp_inc_pcb_refcount+0x98>)
 800c37c:	f004 f9da 	bl	8010734 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 800c380:	f7ff ffa6 	bl	800c2d0 <udp_new>
 800c384:	4603      	mov	r3, r0
 800c386:	4a19      	ldr	r2, [pc, #100]	; (800c3ec <dhcp_inc_pcb_refcount+0x8c>)
 800c388:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 800c38a:	4b18      	ldr	r3, [pc, #96]	; (800c3ec <dhcp_inc_pcb_refcount+0x8c>)
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d102      	bne.n	800c398 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 800c392:	f04f 33ff 	mov.w	r3, #4294967295
 800c396:	e024      	b.n	800c3e2 <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 800c398:	4b14      	ldr	r3, [pc, #80]	; (800c3ec <dhcp_inc_pcb_refcount+0x8c>)
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	7a5a      	ldrb	r2, [r3, #9]
 800c39e:	4b13      	ldr	r3, [pc, #76]	; (800c3ec <dhcp_inc_pcb_refcount+0x8c>)
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	f042 0220 	orr.w	r2, r2, #32
 800c3a6:	b2d2      	uxtb	r2, r2
 800c3a8:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 800c3aa:	4b10      	ldr	r3, [pc, #64]	; (800c3ec <dhcp_inc_pcb_refcount+0x8c>)
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	2244      	movs	r2, #68	; 0x44
 800c3b0:	4912      	ldr	r1, [pc, #72]	; (800c3fc <dhcp_inc_pcb_refcount+0x9c>)
 800c3b2:	4618      	mov	r0, r3
 800c3b4:	f7ff fe34 	bl	800c020 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 800c3b8:	4b0c      	ldr	r3, [pc, #48]	; (800c3ec <dhcp_inc_pcb_refcount+0x8c>)
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	2243      	movs	r2, #67	; 0x43
 800c3be:	490f      	ldr	r1, [pc, #60]	; (800c3fc <dhcp_inc_pcb_refcount+0x9c>)
 800c3c0:	4618      	mov	r0, r3
 800c3c2:	f7ff feb5 	bl	800c130 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 800c3c6:	4b09      	ldr	r3, [pc, #36]	; (800c3ec <dhcp_inc_pcb_refcount+0x8c>)
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	2200      	movs	r2, #0
 800c3cc:	490c      	ldr	r1, [pc, #48]	; (800c400 <dhcp_inc_pcb_refcount+0xa0>)
 800c3ce:	4618      	mov	r0, r3
 800c3d0:	f7ff ff1c 	bl	800c20c <udp_recv>
  }

  dhcp_pcb_refcount++;
 800c3d4:	4b04      	ldr	r3, [pc, #16]	; (800c3e8 <dhcp_inc_pcb_refcount+0x88>)
 800c3d6:	781b      	ldrb	r3, [r3, #0]
 800c3d8:	3301      	adds	r3, #1
 800c3da:	b2da      	uxtb	r2, r3
 800c3dc:	4b02      	ldr	r3, [pc, #8]	; (800c3e8 <dhcp_inc_pcb_refcount+0x88>)
 800c3de:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 800c3e0:	2300      	movs	r3, #0
}
 800c3e2:	4618      	mov	r0, r3
 800c3e4:	bd80      	pop	{r7, pc}
 800c3e6:	bf00      	nop
 800c3e8:	20007ce0 	.word	0x20007ce0
 800c3ec:	20007cdc 	.word	0x20007cdc
 800c3f0:	08013b08 	.word	0x08013b08
 800c3f4:	08013b40 	.word	0x08013b40
 800c3f8:	08013b68 	.word	0x08013b68
 800c3fc:	08014670 	.word	0x08014670
 800c400:	0800dc95 	.word	0x0800dc95

0800c404 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 800c404:	b580      	push	{r7, lr}
 800c406:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 800c408:	4b0e      	ldr	r3, [pc, #56]	; (800c444 <dhcp_dec_pcb_refcount+0x40>)
 800c40a:	781b      	ldrb	r3, [r3, #0]
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d105      	bne.n	800c41c <dhcp_dec_pcb_refcount+0x18>
 800c410:	4b0d      	ldr	r3, [pc, #52]	; (800c448 <dhcp_dec_pcb_refcount+0x44>)
 800c412:	22ff      	movs	r2, #255	; 0xff
 800c414:	490d      	ldr	r1, [pc, #52]	; (800c44c <dhcp_dec_pcb_refcount+0x48>)
 800c416:	480e      	ldr	r0, [pc, #56]	; (800c450 <dhcp_dec_pcb_refcount+0x4c>)
 800c418:	f004 f98c 	bl	8010734 <iprintf>
  dhcp_pcb_refcount--;
 800c41c:	4b09      	ldr	r3, [pc, #36]	; (800c444 <dhcp_dec_pcb_refcount+0x40>)
 800c41e:	781b      	ldrb	r3, [r3, #0]
 800c420:	3b01      	subs	r3, #1
 800c422:	b2da      	uxtb	r2, r3
 800c424:	4b07      	ldr	r3, [pc, #28]	; (800c444 <dhcp_dec_pcb_refcount+0x40>)
 800c426:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 800c428:	4b06      	ldr	r3, [pc, #24]	; (800c444 <dhcp_dec_pcb_refcount+0x40>)
 800c42a:	781b      	ldrb	r3, [r3, #0]
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d107      	bne.n	800c440 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 800c430:	4b08      	ldr	r3, [pc, #32]	; (800c454 <dhcp_dec_pcb_refcount+0x50>)
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	4618      	mov	r0, r3
 800c436:	f7ff ff09 	bl	800c24c <udp_remove>
    dhcp_pcb = NULL;
 800c43a:	4b06      	ldr	r3, [pc, #24]	; (800c454 <dhcp_dec_pcb_refcount+0x50>)
 800c43c:	2200      	movs	r2, #0
 800c43e:	601a      	str	r2, [r3, #0]
  }
}
 800c440:	bf00      	nop
 800c442:	bd80      	pop	{r7, pc}
 800c444:	20007ce0 	.word	0x20007ce0
 800c448:	08013b08 	.word	0x08013b08
 800c44c:	08013b90 	.word	0x08013b90
 800c450:	08013b68 	.word	0x08013b68
 800c454:	20007cdc 	.word	0x20007cdc

0800c458 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 800c458:	b580      	push	{r7, lr}
 800c45a:	b084      	sub	sp, #16
 800c45c:	af00      	add	r7, sp, #0
 800c45e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c464:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 800c466:	210c      	movs	r1, #12
 800c468:	68f8      	ldr	r0, [r7, #12]
 800c46a:	f001 f855 	bl	800d518 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 800c46e:	4b06      	ldr	r3, [pc, #24]	; (800c488 <dhcp_handle_nak+0x30>)
 800c470:	4a05      	ldr	r2, [pc, #20]	; (800c488 <dhcp_handle_nak+0x30>)
 800c472:	4905      	ldr	r1, [pc, #20]	; (800c488 <dhcp_handle_nak+0x30>)
 800c474:	6878      	ldr	r0, [r7, #4]
 800c476:	f7f9 f8f5 	bl	8005664 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 800c47a:	6878      	ldr	r0, [r7, #4]
 800c47c:	f000 fc48 	bl	800cd10 <dhcp_discover>
}
 800c480:	bf00      	nop
 800c482:	3710      	adds	r7, #16
 800c484:	46bd      	mov	sp, r7
 800c486:	bd80      	pop	{r7, pc}
 800c488:	08014670 	.word	0x08014670

0800c48c <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 800c48c:	b580      	push	{r7, lr}
 800c48e:	b084      	sub	sp, #16
 800c490:	af00      	add	r7, sp, #0
 800c492:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c498:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 800c49a:	2108      	movs	r1, #8
 800c49c:	68f8      	ldr	r0, [r7, #12]
 800c49e:	f001 f83b 	bl	800d518 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	331c      	adds	r3, #28
 800c4a6:	2200      	movs	r2, #0
 800c4a8:	4619      	mov	r1, r3
 800c4aa:	6878      	ldr	r0, [r7, #4]
 800c4ac:	f002 fb3c 	bl	800eb28 <etharp_query>
 800c4b0:	4603      	mov	r3, r0
 800c4b2:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	799b      	ldrb	r3, [r3, #6]
 800c4b8:	2bff      	cmp	r3, #255	; 0xff
 800c4ba:	d005      	beq.n	800c4c8 <dhcp_check+0x3c>
    dhcp->tries++;
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	799b      	ldrb	r3, [r3, #6]
 800c4c0:	3301      	adds	r3, #1
 800c4c2:	b2da      	uxtb	r2, r3
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 800c4c8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800c4cc:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800c4ce:	893b      	ldrh	r3, [r7, #8]
 800c4d0:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800c4d4:	4a06      	ldr	r2, [pc, #24]	; (800c4f0 <dhcp_check+0x64>)
 800c4d6:	fb82 1203 	smull	r1, r2, r2, r3
 800c4da:	1152      	asrs	r2, r2, #5
 800c4dc:	17db      	asrs	r3, r3, #31
 800c4de:	1ad3      	subs	r3, r2, r3
 800c4e0:	b29a      	uxth	r2, r3
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 800c4e6:	bf00      	nop
 800c4e8:	3710      	adds	r7, #16
 800c4ea:	46bd      	mov	sp, r7
 800c4ec:	bd80      	pop	{r7, pc}
 800c4ee:	bf00      	nop
 800c4f0:	10624dd3 	.word	0x10624dd3

0800c4f4 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 800c4f4:	b580      	push	{r7, lr}
 800c4f6:	b084      	sub	sp, #16
 800c4f8:	af00      	add	r7, sp, #0
 800c4fa:	6078      	str	r0, [r7, #4]
 800c4fc:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c502:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 800c504:	4b0c      	ldr	r3, [pc, #48]	; (800c538 <dhcp_handle_offer+0x44>)
 800c506:	789b      	ldrb	r3, [r3, #2]
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d011      	beq.n	800c530 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	2200      	movs	r2, #0
 800c510:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 800c512:	4b0a      	ldr	r3, [pc, #40]	; (800c53c <dhcp_handle_offer+0x48>)
 800c514:	689b      	ldr	r3, [r3, #8]
 800c516:	4618      	mov	r0, r3
 800c518:	f7f8 f977 	bl	800480a <lwip_htonl>
 800c51c:	4602      	mov	r2, r0
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 800c522:	683b      	ldr	r3, [r7, #0]
 800c524:	691a      	ldr	r2, [r3, #16]
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 800c52a:	6878      	ldr	r0, [r7, #4]
 800c52c:	f000 f808 	bl	800c540 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 800c530:	bf00      	nop
 800c532:	3710      	adds	r7, #16
 800c534:	46bd      	mov	sp, r7
 800c536:	bd80      	pop	{r7, pc}
 800c538:	20007cd4 	.word	0x20007cd4
 800c53c:	20007cb4 	.word	0x20007cb4

0800c540 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 800c540:	b5b0      	push	{r4, r5, r7, lr}
 800c542:	b08a      	sub	sp, #40	; 0x28
 800c544:	af02      	add	r7, sp, #8
 800c546:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d109      	bne.n	800c562 <dhcp_select+0x22>
 800c54e:	4b71      	ldr	r3, [pc, #452]	; (800c714 <dhcp_select+0x1d4>)
 800c550:	f240 1277 	movw	r2, #375	; 0x177
 800c554:	4970      	ldr	r1, [pc, #448]	; (800c718 <dhcp_select+0x1d8>)
 800c556:	4871      	ldr	r0, [pc, #452]	; (800c71c <dhcp_select+0x1dc>)
 800c558:	f004 f8ec 	bl	8010734 <iprintf>
 800c55c:	f06f 030f 	mvn.w	r3, #15
 800c560:	e0d3      	b.n	800c70a <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c566:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 800c568:	69bb      	ldr	r3, [r7, #24]
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d109      	bne.n	800c582 <dhcp_select+0x42>
 800c56e:	4b69      	ldr	r3, [pc, #420]	; (800c714 <dhcp_select+0x1d4>)
 800c570:	f240 1279 	movw	r2, #377	; 0x179
 800c574:	496a      	ldr	r1, [pc, #424]	; (800c720 <dhcp_select+0x1e0>)
 800c576:	4869      	ldr	r0, [pc, #420]	; (800c71c <dhcp_select+0x1dc>)
 800c578:	f004 f8dc 	bl	8010734 <iprintf>
 800c57c:	f06f 0305 	mvn.w	r3, #5
 800c580:	e0c3      	b.n	800c70a <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 800c582:	2101      	movs	r1, #1
 800c584:	69b8      	ldr	r0, [r7, #24]
 800c586:	f000 ffc7 	bl	800d518 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800c58a:	f107 030c 	add.w	r3, r7, #12
 800c58e:	2203      	movs	r2, #3
 800c590:	69b9      	ldr	r1, [r7, #24]
 800c592:	6878      	ldr	r0, [r7, #4]
 800c594:	f001 fc4c 	bl	800de30 <dhcp_create_msg>
 800c598:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800c59a:	697b      	ldr	r3, [r7, #20]
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	f000 8085 	beq.w	800c6ac <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800c5a2:	697b      	ldr	r3, [r7, #20]
 800c5a4:	685b      	ldr	r3, [r3, #4]
 800c5a6:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800c5a8:	89b8      	ldrh	r0, [r7, #12]
 800c5aa:	693b      	ldr	r3, [r7, #16]
 800c5ac:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800c5b0:	2302      	movs	r3, #2
 800c5b2:	2239      	movs	r2, #57	; 0x39
 800c5b4:	f000 ffca 	bl	800d54c <dhcp_option>
 800c5b8:	4603      	mov	r3, r0
 800c5ba:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800c5bc:	89b8      	ldrh	r0, [r7, #12]
 800c5be:	693b      	ldr	r3, [r7, #16]
 800c5c0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c5c8:	461a      	mov	r2, r3
 800c5ca:	f001 f819 	bl	800d600 <dhcp_option_short>
 800c5ce:	4603      	mov	r3, r0
 800c5d0:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800c5d2:	89b8      	ldrh	r0, [r7, #12]
 800c5d4:	693b      	ldr	r3, [r7, #16]
 800c5d6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800c5da:	2304      	movs	r3, #4
 800c5dc:	2232      	movs	r2, #50	; 0x32
 800c5de:	f000 ffb5 	bl	800d54c <dhcp_option>
 800c5e2:	4603      	mov	r3, r0
 800c5e4:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800c5e6:	89bc      	ldrh	r4, [r7, #12]
 800c5e8:	693b      	ldr	r3, [r7, #16]
 800c5ea:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800c5ee:	69bb      	ldr	r3, [r7, #24]
 800c5f0:	69db      	ldr	r3, [r3, #28]
 800c5f2:	4618      	mov	r0, r3
 800c5f4:	f7f8 f909 	bl	800480a <lwip_htonl>
 800c5f8:	4603      	mov	r3, r0
 800c5fa:	461a      	mov	r2, r3
 800c5fc:	4629      	mov	r1, r5
 800c5fe:	4620      	mov	r0, r4
 800c600:	f001 f830 	bl	800d664 <dhcp_option_long>
 800c604:	4603      	mov	r3, r0
 800c606:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 800c608:	89b8      	ldrh	r0, [r7, #12]
 800c60a:	693b      	ldr	r3, [r7, #16]
 800c60c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800c610:	2304      	movs	r3, #4
 800c612:	2236      	movs	r2, #54	; 0x36
 800c614:	f000 ff9a 	bl	800d54c <dhcp_option>
 800c618:	4603      	mov	r3, r0
 800c61a:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 800c61c:	89bc      	ldrh	r4, [r7, #12]
 800c61e:	693b      	ldr	r3, [r7, #16]
 800c620:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800c624:	69bb      	ldr	r3, [r7, #24]
 800c626:	699b      	ldr	r3, [r3, #24]
 800c628:	4618      	mov	r0, r3
 800c62a:	f7f8 f8ee 	bl	800480a <lwip_htonl>
 800c62e:	4603      	mov	r3, r0
 800c630:	461a      	mov	r2, r3
 800c632:	4629      	mov	r1, r5
 800c634:	4620      	mov	r0, r4
 800c636:	f001 f815 	bl	800d664 <dhcp_option_long>
 800c63a:	4603      	mov	r3, r0
 800c63c:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800c63e:	89b8      	ldrh	r0, [r7, #12]
 800c640:	693b      	ldr	r3, [r7, #16]
 800c642:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800c646:	2303      	movs	r3, #3
 800c648:	2237      	movs	r2, #55	; 0x37
 800c64a:	f000 ff7f 	bl	800d54c <dhcp_option>
 800c64e:	4603      	mov	r3, r0
 800c650:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800c652:	2300      	movs	r3, #0
 800c654:	77bb      	strb	r3, [r7, #30]
 800c656:	e00e      	b.n	800c676 <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800c658:	89b8      	ldrh	r0, [r7, #12]
 800c65a:	693b      	ldr	r3, [r7, #16]
 800c65c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800c660:	7fbb      	ldrb	r3, [r7, #30]
 800c662:	4a30      	ldr	r2, [pc, #192]	; (800c724 <dhcp_select+0x1e4>)
 800c664:	5cd3      	ldrb	r3, [r2, r3]
 800c666:	461a      	mov	r2, r3
 800c668:	f000 ffa4 	bl	800d5b4 <dhcp_option_byte>
 800c66c:	4603      	mov	r3, r0
 800c66e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800c670:	7fbb      	ldrb	r3, [r7, #30]
 800c672:	3301      	adds	r3, #1
 800c674:	77bb      	strb	r3, [r7, #30]
 800c676:	7fbb      	ldrb	r3, [r7, #30]
 800c678:	2b02      	cmp	r3, #2
 800c67a:	d9ed      	bls.n	800c658 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800c67c:	89b8      	ldrh	r0, [r7, #12]
 800c67e:	693b      	ldr	r3, [r7, #16]
 800c680:	33f0      	adds	r3, #240	; 0xf0
 800c682:	697a      	ldr	r2, [r7, #20]
 800c684:	4619      	mov	r1, r3
 800c686:	f001 fca9 	bl	800dfdc <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800c68a:	4b27      	ldr	r3, [pc, #156]	; (800c728 <dhcp_select+0x1e8>)
 800c68c:	6818      	ldr	r0, [r3, #0]
 800c68e:	4b27      	ldr	r3, [pc, #156]	; (800c72c <dhcp_select+0x1ec>)
 800c690:	9301      	str	r3, [sp, #4]
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	9300      	str	r3, [sp, #0]
 800c696:	2343      	movs	r3, #67	; 0x43
 800c698:	4a25      	ldr	r2, [pc, #148]	; (800c730 <dhcp_select+0x1f0>)
 800c69a:	6979      	ldr	r1, [r7, #20]
 800c69c:	f7ff fbda 	bl	800be54 <udp_sendto_if_src>
 800c6a0:	4603      	mov	r3, r0
 800c6a2:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800c6a4:	6978      	ldr	r0, [r7, #20]
 800c6a6:	f7f9 fc9d 	bl	8005fe4 <pbuf_free>
 800c6aa:	e001      	b.n	800c6b0 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800c6ac:	23ff      	movs	r3, #255	; 0xff
 800c6ae:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800c6b0:	69bb      	ldr	r3, [r7, #24]
 800c6b2:	799b      	ldrb	r3, [r3, #6]
 800c6b4:	2bff      	cmp	r3, #255	; 0xff
 800c6b6:	d005      	beq.n	800c6c4 <dhcp_select+0x184>
    dhcp->tries++;
 800c6b8:	69bb      	ldr	r3, [r7, #24]
 800c6ba:	799b      	ldrb	r3, [r3, #6]
 800c6bc:	3301      	adds	r3, #1
 800c6be:	b2da      	uxtb	r2, r3
 800c6c0:	69bb      	ldr	r3, [r7, #24]
 800c6c2:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 800c6c4:	69bb      	ldr	r3, [r7, #24]
 800c6c6:	799b      	ldrb	r3, [r3, #6]
 800c6c8:	2b05      	cmp	r3, #5
 800c6ca:	d80d      	bhi.n	800c6e8 <dhcp_select+0x1a8>
 800c6cc:	69bb      	ldr	r3, [r7, #24]
 800c6ce:	799b      	ldrb	r3, [r3, #6]
 800c6d0:	461a      	mov	r2, r3
 800c6d2:	2301      	movs	r3, #1
 800c6d4:	4093      	lsls	r3, r2
 800c6d6:	b29b      	uxth	r3, r3
 800c6d8:	461a      	mov	r2, r3
 800c6da:	0152      	lsls	r2, r2, #5
 800c6dc:	1ad2      	subs	r2, r2, r3
 800c6de:	0092      	lsls	r2, r2, #2
 800c6e0:	4413      	add	r3, r2
 800c6e2:	00db      	lsls	r3, r3, #3
 800c6e4:	b29b      	uxth	r3, r3
 800c6e6:	e001      	b.n	800c6ec <dhcp_select+0x1ac>
 800c6e8:	f64e 2360 	movw	r3, #60000	; 0xea60
 800c6ec:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800c6ee:	89fb      	ldrh	r3, [r7, #14]
 800c6f0:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800c6f4:	4a0f      	ldr	r2, [pc, #60]	; (800c734 <dhcp_select+0x1f4>)
 800c6f6:	fb82 1203 	smull	r1, r2, r2, r3
 800c6fa:	1152      	asrs	r2, r2, #5
 800c6fc:	17db      	asrs	r3, r3, #31
 800c6fe:	1ad3      	subs	r3, r2, r3
 800c700:	b29a      	uxth	r2, r3
 800c702:	69bb      	ldr	r3, [r7, #24]
 800c704:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800c706:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800c70a:	4618      	mov	r0, r3
 800c70c:	3720      	adds	r7, #32
 800c70e:	46bd      	mov	sp, r7
 800c710:	bdb0      	pop	{r4, r5, r7, pc}
 800c712:	bf00      	nop
 800c714:	08013b08 	.word	0x08013b08
 800c718:	08013bb4 	.word	0x08013bb4
 800c71c:	08013b68 	.word	0x08013b68
 800c720:	08013bd0 	.word	0x08013bd0
 800c724:	2000002c 	.word	0x2000002c
 800c728:	20007cdc 	.word	0x20007cdc
 800c72c:	08014670 	.word	0x08014670
 800c730:	08014674 	.word	0x08014674
 800c734:	10624dd3 	.word	0x10624dd3

0800c738 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 800c738:	b580      	push	{r7, lr}
 800c73a:	b082      	sub	sp, #8
 800c73c:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 800c73e:	4b27      	ldr	r3, [pc, #156]	; (800c7dc <dhcp_coarse_tmr+0xa4>)
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	607b      	str	r3, [r7, #4]
 800c744:	e042      	b.n	800c7cc <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c74a:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 800c74c:	683b      	ldr	r3, [r7, #0]
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d039      	beq.n	800c7c6 <dhcp_coarse_tmr+0x8e>
 800c752:	683b      	ldr	r3, [r7, #0]
 800c754:	795b      	ldrb	r3, [r3, #5]
 800c756:	2b00      	cmp	r3, #0
 800c758:	d035      	beq.n	800c7c6 <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 800c75a:	683b      	ldr	r3, [r7, #0]
 800c75c:	8a9b      	ldrh	r3, [r3, #20]
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d012      	beq.n	800c788 <dhcp_coarse_tmr+0x50>
 800c762:	683b      	ldr	r3, [r7, #0]
 800c764:	8a5b      	ldrh	r3, [r3, #18]
 800c766:	3301      	adds	r3, #1
 800c768:	b29a      	uxth	r2, r3
 800c76a:	683b      	ldr	r3, [r7, #0]
 800c76c:	825a      	strh	r2, [r3, #18]
 800c76e:	683b      	ldr	r3, [r7, #0]
 800c770:	8a5a      	ldrh	r2, [r3, #18]
 800c772:	683b      	ldr	r3, [r7, #0]
 800c774:	8a9b      	ldrh	r3, [r3, #20]
 800c776:	429a      	cmp	r2, r3
 800c778:	d106      	bne.n	800c788 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 800c77a:	6878      	ldr	r0, [r7, #4]
 800c77c:	f000 fe32 	bl	800d3e4 <dhcp_release_and_stop>
        dhcp_start(netif);
 800c780:	6878      	ldr	r0, [r7, #4]
 800c782:	f000 f969 	bl	800ca58 <dhcp_start>
 800c786:	e01e      	b.n	800c7c6 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 800c788:	683b      	ldr	r3, [r7, #0]
 800c78a:	8a1b      	ldrh	r3, [r3, #16]
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d00b      	beq.n	800c7a8 <dhcp_coarse_tmr+0x70>
 800c790:	683b      	ldr	r3, [r7, #0]
 800c792:	8a1b      	ldrh	r3, [r3, #16]
 800c794:	1e5a      	subs	r2, r3, #1
 800c796:	b291      	uxth	r1, r2
 800c798:	683a      	ldr	r2, [r7, #0]
 800c79a:	8211      	strh	r1, [r2, #16]
 800c79c:	2b01      	cmp	r3, #1
 800c79e:	d103      	bne.n	800c7a8 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 800c7a0:	6878      	ldr	r0, [r7, #4]
 800c7a2:	f000 f8c6 	bl	800c932 <dhcp_t2_timeout>
 800c7a6:	e00e      	b.n	800c7c6 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 800c7a8:	683b      	ldr	r3, [r7, #0]
 800c7aa:	89db      	ldrh	r3, [r3, #14]
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d00a      	beq.n	800c7c6 <dhcp_coarse_tmr+0x8e>
 800c7b0:	683b      	ldr	r3, [r7, #0]
 800c7b2:	89db      	ldrh	r3, [r3, #14]
 800c7b4:	1e5a      	subs	r2, r3, #1
 800c7b6:	b291      	uxth	r1, r2
 800c7b8:	683a      	ldr	r2, [r7, #0]
 800c7ba:	81d1      	strh	r1, [r2, #14]
 800c7bc:	2b01      	cmp	r3, #1
 800c7be:	d102      	bne.n	800c7c6 <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 800c7c0:	6878      	ldr	r0, [r7, #4]
 800c7c2:	f000 f888 	bl	800c8d6 <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	607b      	str	r3, [r7, #4]
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d1b9      	bne.n	800c746 <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 800c7d2:	bf00      	nop
 800c7d4:	bf00      	nop
 800c7d6:	3708      	adds	r7, #8
 800c7d8:	46bd      	mov	sp, r7
 800c7da:	bd80      	pop	{r7, pc}
 800c7dc:	20007c48 	.word	0x20007c48

0800c7e0 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 800c7e0:	b580      	push	{r7, lr}
 800c7e2:	b082      	sub	sp, #8
 800c7e4:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 800c7e6:	4b16      	ldr	r3, [pc, #88]	; (800c840 <dhcp_fine_tmr+0x60>)
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	607b      	str	r3, [r7, #4]
 800c7ec:	e020      	b.n	800c830 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7f2:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 800c7f4:	683b      	ldr	r3, [r7, #0]
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d017      	beq.n	800c82a <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 800c7fa:	683b      	ldr	r3, [r7, #0]
 800c7fc:	891b      	ldrh	r3, [r3, #8]
 800c7fe:	2b01      	cmp	r3, #1
 800c800:	d906      	bls.n	800c810 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 800c802:	683b      	ldr	r3, [r7, #0]
 800c804:	891b      	ldrh	r3, [r3, #8]
 800c806:	3b01      	subs	r3, #1
 800c808:	b29a      	uxth	r2, r3
 800c80a:	683b      	ldr	r3, [r7, #0]
 800c80c:	811a      	strh	r2, [r3, #8]
 800c80e:	e00c      	b.n	800c82a <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 800c810:	683b      	ldr	r3, [r7, #0]
 800c812:	891b      	ldrh	r3, [r3, #8]
 800c814:	2b01      	cmp	r3, #1
 800c816:	d108      	bne.n	800c82a <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 800c818:	683b      	ldr	r3, [r7, #0]
 800c81a:	891b      	ldrh	r3, [r3, #8]
 800c81c:	3b01      	subs	r3, #1
 800c81e:	b29a      	uxth	r2, r3
 800c820:	683b      	ldr	r3, [r7, #0]
 800c822:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 800c824:	6878      	ldr	r0, [r7, #4]
 800c826:	f000 f80d 	bl	800c844 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	607b      	str	r3, [r7, #4]
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	2b00      	cmp	r3, #0
 800c834:	d1db      	bne.n	800c7ee <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 800c836:	bf00      	nop
 800c838:	bf00      	nop
 800c83a:	3708      	adds	r7, #8
 800c83c:	46bd      	mov	sp, r7
 800c83e:	bd80      	pop	{r7, pc}
 800c840:	20007c48 	.word	0x20007c48

0800c844 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 800c844:	b580      	push	{r7, lr}
 800c846:	b084      	sub	sp, #16
 800c848:	af00      	add	r7, sp, #0
 800c84a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c850:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	795b      	ldrb	r3, [r3, #5]
 800c856:	2b0c      	cmp	r3, #12
 800c858:	d003      	beq.n	800c862 <dhcp_timeout+0x1e>
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	795b      	ldrb	r3, [r3, #5]
 800c85e:	2b06      	cmp	r3, #6
 800c860:	d103      	bne.n	800c86a <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 800c862:	6878      	ldr	r0, [r7, #4]
 800c864:	f000 fa54 	bl	800cd10 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 800c868:	e031      	b.n	800c8ce <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	795b      	ldrb	r3, [r3, #5]
 800c86e:	2b01      	cmp	r3, #1
 800c870:	d10e      	bne.n	800c890 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	799b      	ldrb	r3, [r3, #6]
 800c876:	2b05      	cmp	r3, #5
 800c878:	d803      	bhi.n	800c882 <dhcp_timeout+0x3e>
      dhcp_select(netif);
 800c87a:	6878      	ldr	r0, [r7, #4]
 800c87c:	f7ff fe60 	bl	800c540 <dhcp_select>
}
 800c880:	e025      	b.n	800c8ce <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 800c882:	6878      	ldr	r0, [r7, #4]
 800c884:	f000 fdae 	bl	800d3e4 <dhcp_release_and_stop>
      dhcp_start(netif);
 800c888:	6878      	ldr	r0, [r7, #4]
 800c88a:	f000 f8e5 	bl	800ca58 <dhcp_start>
}
 800c88e:	e01e      	b.n	800c8ce <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	795b      	ldrb	r3, [r3, #5]
 800c894:	2b08      	cmp	r3, #8
 800c896:	d10b      	bne.n	800c8b0 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	799b      	ldrb	r3, [r3, #6]
 800c89c:	2b01      	cmp	r3, #1
 800c89e:	d803      	bhi.n	800c8a8 <dhcp_timeout+0x64>
      dhcp_check(netif);
 800c8a0:	6878      	ldr	r0, [r7, #4]
 800c8a2:	f7ff fdf3 	bl	800c48c <dhcp_check>
}
 800c8a6:	e012      	b.n	800c8ce <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 800c8a8:	6878      	ldr	r0, [r7, #4]
 800c8aa:	f000 fad3 	bl	800ce54 <dhcp_bind>
}
 800c8ae:	e00e      	b.n	800c8ce <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	795b      	ldrb	r3, [r3, #5]
 800c8b4:	2b03      	cmp	r3, #3
 800c8b6:	d10a      	bne.n	800c8ce <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	799b      	ldrb	r3, [r3, #6]
 800c8bc:	2b01      	cmp	r3, #1
 800c8be:	d803      	bhi.n	800c8c8 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 800c8c0:	6878      	ldr	r0, [r7, #4]
 800c8c2:	f000 fcd9 	bl	800d278 <dhcp_reboot>
}
 800c8c6:	e002      	b.n	800c8ce <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 800c8c8:	6878      	ldr	r0, [r7, #4]
 800c8ca:	f000 fa21 	bl	800cd10 <dhcp_discover>
}
 800c8ce:	bf00      	nop
 800c8d0:	3710      	adds	r7, #16
 800c8d2:	46bd      	mov	sp, r7
 800c8d4:	bd80      	pop	{r7, pc}

0800c8d6 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 800c8d6:	b580      	push	{r7, lr}
 800c8d8:	b084      	sub	sp, #16
 800c8da:	af00      	add	r7, sp, #0
 800c8dc:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8e2:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	795b      	ldrb	r3, [r3, #5]
 800c8e8:	2b01      	cmp	r3, #1
 800c8ea:	d007      	beq.n	800c8fc <dhcp_t1_timeout+0x26>
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	795b      	ldrb	r3, [r3, #5]
 800c8f0:	2b0a      	cmp	r3, #10
 800c8f2:	d003      	beq.n	800c8fc <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800c8f8:	2b05      	cmp	r3, #5
 800c8fa:	d116      	bne.n	800c92a <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 800c8fc:	6878      	ldr	r0, [r7, #4]
 800c8fe:	f000 fb83 	bl	800d008 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	899b      	ldrh	r3, [r3, #12]
 800c906:	461a      	mov	r2, r3
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	8a5b      	ldrh	r3, [r3, #18]
 800c90c:	1ad3      	subs	r3, r2, r3
 800c90e:	2b01      	cmp	r3, #1
 800c910:	dd0b      	ble.n	800c92a <dhcp_t1_timeout+0x54>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	899b      	ldrh	r3, [r3, #12]
 800c916:	461a      	mov	r2, r3
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	8a5b      	ldrh	r3, [r3, #18]
 800c91c:	1ad3      	subs	r3, r2, r3
 800c91e:	0fda      	lsrs	r2, r3, #31
 800c920:	4413      	add	r3, r2
 800c922:	105b      	asrs	r3, r3, #1
 800c924:	b29a      	uxth	r2, r3
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	81da      	strh	r2, [r3, #14]
    }
  }
}
 800c92a:	bf00      	nop
 800c92c:	3710      	adds	r7, #16
 800c92e:	46bd      	mov	sp, r7
 800c930:	bd80      	pop	{r7, pc}

0800c932 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 800c932:	b580      	push	{r7, lr}
 800c934:	b084      	sub	sp, #16
 800c936:	af00      	add	r7, sp, #0
 800c938:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c93e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	795b      	ldrb	r3, [r3, #5]
 800c944:	2b01      	cmp	r3, #1
 800c946:	d00b      	beq.n	800c960 <dhcp_t2_timeout+0x2e>
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	795b      	ldrb	r3, [r3, #5]
 800c94c:	2b0a      	cmp	r3, #10
 800c94e:	d007      	beq.n	800c960 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800c954:	2b05      	cmp	r3, #5
 800c956:	d003      	beq.n	800c960 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	795b      	ldrb	r3, [r3, #5]
 800c95c:	2b04      	cmp	r3, #4
 800c95e:	d116      	bne.n	800c98e <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 800c960:	6878      	ldr	r0, [r7, #4]
 800c962:	f000 fbed 	bl	800d140 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	8a9b      	ldrh	r3, [r3, #20]
 800c96a:	461a      	mov	r2, r3
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	8a5b      	ldrh	r3, [r3, #18]
 800c970:	1ad3      	subs	r3, r2, r3
 800c972:	2b01      	cmp	r3, #1
 800c974:	dd0b      	ble.n	800c98e <dhcp_t2_timeout+0x5c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	8a9b      	ldrh	r3, [r3, #20]
 800c97a:	461a      	mov	r2, r3
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	8a5b      	ldrh	r3, [r3, #18]
 800c980:	1ad3      	subs	r3, r2, r3
 800c982:	0fda      	lsrs	r2, r3, #31
 800c984:	4413      	add	r3, r2
 800c986:	105b      	asrs	r3, r3, #1
 800c988:	b29a      	uxth	r2, r3
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	821a      	strh	r2, [r3, #16]
    }
  }
}
 800c98e:	bf00      	nop
 800c990:	3710      	adds	r7, #16
 800c992:	46bd      	mov	sp, r7
 800c994:	bd80      	pop	{r7, pc}
	...

0800c998 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 800c998:	b580      	push	{r7, lr}
 800c99a:	b084      	sub	sp, #16
 800c99c:	af00      	add	r7, sp, #0
 800c99e:	6078      	str	r0, [r7, #4]
 800c9a0:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9a6:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	2200      	movs	r2, #0
 800c9ac:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	2200      	movs	r2, #0
 800c9b2:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 800c9b4:	4b26      	ldr	r3, [pc, #152]	; (800ca50 <dhcp_handle_ack+0xb8>)
 800c9b6:	78db      	ldrb	r3, [r3, #3]
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d003      	beq.n	800c9c4 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 800c9bc:	4b25      	ldr	r3, [pc, #148]	; (800ca54 <dhcp_handle_ack+0xbc>)
 800c9be:	68da      	ldr	r2, [r3, #12]
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 800c9c4:	4b22      	ldr	r3, [pc, #136]	; (800ca50 <dhcp_handle_ack+0xb8>)
 800c9c6:	791b      	ldrb	r3, [r3, #4]
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d004      	beq.n	800c9d6 <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 800c9cc:	4b21      	ldr	r3, [pc, #132]	; (800ca54 <dhcp_handle_ack+0xbc>)
 800c9ce:	691a      	ldr	r2, [r3, #16]
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	62da      	str	r2, [r3, #44]	; 0x2c
 800c9d4:	e004      	b.n	800c9e0 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9da:	085a      	lsrs	r2, r3, #1
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 800c9e0:	4b1b      	ldr	r3, [pc, #108]	; (800ca50 <dhcp_handle_ack+0xb8>)
 800c9e2:	795b      	ldrb	r3, [r3, #5]
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d004      	beq.n	800c9f2 <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 800c9e8:	4b1a      	ldr	r3, [pc, #104]	; (800ca54 <dhcp_handle_ack+0xbc>)
 800c9ea:	695a      	ldr	r2, [r3, #20]
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	631a      	str	r2, [r3, #48]	; 0x30
 800c9f0:	e007      	b.n	800ca02 <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c9f6:	4613      	mov	r3, r2
 800c9f8:	00db      	lsls	r3, r3, #3
 800c9fa:	1a9b      	subs	r3, r3, r2
 800c9fc:	08da      	lsrs	r2, r3, #3
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 800ca02:	683b      	ldr	r3, [r7, #0]
 800ca04:	691a      	ldr	r2, [r3, #16]
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 800ca0a:	4b11      	ldr	r3, [pc, #68]	; (800ca50 <dhcp_handle_ack+0xb8>)
 800ca0c:	799b      	ldrb	r3, [r3, #6]
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d00b      	beq.n	800ca2a <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 800ca12:	4b10      	ldr	r3, [pc, #64]	; (800ca54 <dhcp_handle_ack+0xbc>)
 800ca14:	699b      	ldr	r3, [r3, #24]
 800ca16:	4618      	mov	r0, r3
 800ca18:	f7f7 fef7 	bl	800480a <lwip_htonl>
 800ca1c:	4602      	mov	r2, r0
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	2201      	movs	r2, #1
 800ca26:	71da      	strb	r2, [r3, #7]
 800ca28:	e002      	b.n	800ca30 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	2200      	movs	r2, #0
 800ca2e:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 800ca30:	4b07      	ldr	r3, [pc, #28]	; (800ca50 <dhcp_handle_ack+0xb8>)
 800ca32:	79db      	ldrb	r3, [r3, #7]
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d007      	beq.n	800ca48 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 800ca38:	4b06      	ldr	r3, [pc, #24]	; (800ca54 <dhcp_handle_ack+0xbc>)
 800ca3a:	69db      	ldr	r3, [r3, #28]
 800ca3c:	4618      	mov	r0, r3
 800ca3e:	f7f7 fee4 	bl	800480a <lwip_htonl>
 800ca42:	4602      	mov	r2, r0
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 800ca48:	bf00      	nop
 800ca4a:	3710      	adds	r7, #16
 800ca4c:	46bd      	mov	sp, r7
 800ca4e:	bd80      	pop	{r7, pc}
 800ca50:	20007cd4 	.word	0x20007cd4
 800ca54:	20007cb4 	.word	0x20007cb4

0800ca58 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 800ca58:	b580      	push	{r7, lr}
 800ca5a:	b084      	sub	sp, #16
 800ca5c:	af00      	add	r7, sp, #0
 800ca5e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d109      	bne.n	800ca7a <dhcp_start+0x22>
 800ca66:	4b37      	ldr	r3, [pc, #220]	; (800cb44 <dhcp_start+0xec>)
 800ca68:	f240 22e7 	movw	r2, #743	; 0x2e7
 800ca6c:	4936      	ldr	r1, [pc, #216]	; (800cb48 <dhcp_start+0xf0>)
 800ca6e:	4837      	ldr	r0, [pc, #220]	; (800cb4c <dhcp_start+0xf4>)
 800ca70:	f003 fe60 	bl	8010734 <iprintf>
 800ca74:	f06f 030f 	mvn.w	r3, #15
 800ca78:	e060      	b.n	800cb3c <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ca80:	f003 0301 	and.w	r3, r3, #1
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d109      	bne.n	800ca9c <dhcp_start+0x44>
 800ca88:	4b2e      	ldr	r3, [pc, #184]	; (800cb44 <dhcp_start+0xec>)
 800ca8a:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 800ca8e:	4930      	ldr	r1, [pc, #192]	; (800cb50 <dhcp_start+0xf8>)
 800ca90:	482e      	ldr	r0, [pc, #184]	; (800cb4c <dhcp_start+0xf4>)
 800ca92:	f003 fe4f 	bl	8010734 <iprintf>
 800ca96:	f06f 030f 	mvn.w	r3, #15
 800ca9a:	e04f      	b.n	800cb3c <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800caa0:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800caa6:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 800caaa:	d202      	bcs.n	800cab2 <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 800caac:	f04f 33ff 	mov.w	r3, #4294967295
 800cab0:	e044      	b.n	800cb3c <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d10d      	bne.n	800cad4 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 800cab8:	2034      	movs	r0, #52	; 0x34
 800caba:	f7f8 fa31 	bl	8004f20 <mem_malloc>
 800cabe:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d102      	bne.n	800cacc <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 800cac6:	f04f 33ff 	mov.w	r3, #4294967295
 800caca:	e037      	b.n	800cb3c <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	68fa      	ldr	r2, [r7, #12]
 800cad0:	625a      	str	r2, [r3, #36]	; 0x24
 800cad2:	e005      	b.n	800cae0 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	791b      	ldrb	r3, [r3, #4]
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d001      	beq.n	800cae0 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 800cadc:	f7ff fc92 	bl	800c404 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 800cae0:	2234      	movs	r2, #52	; 0x34
 800cae2:	2100      	movs	r1, #0
 800cae4:	68f8      	ldr	r0, [r7, #12]
 800cae6:	f003 fe1d 	bl	8010724 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 800caea:	f7ff fc39 	bl	800c360 <dhcp_inc_pcb_refcount>
 800caee:	4603      	mov	r3, r0
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d002      	beq.n	800cafa <dhcp_start+0xa2>
    return ERR_MEM;
 800caf4:	f04f 33ff 	mov.w	r3, #4294967295
 800caf8:	e020      	b.n	800cb3c <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	2201      	movs	r2, #1
 800cafe:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800cb06:	f003 0304 	and.w	r3, r3, #4
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d105      	bne.n	800cb1a <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 800cb0e:	2102      	movs	r1, #2
 800cb10:	68f8      	ldr	r0, [r7, #12]
 800cb12:	f000 fd01 	bl	800d518 <dhcp_set_state>
    return ERR_OK;
 800cb16:	2300      	movs	r3, #0
 800cb18:	e010      	b.n	800cb3c <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 800cb1a:	6878      	ldr	r0, [r7, #4]
 800cb1c:	f000 f8f8 	bl	800cd10 <dhcp_discover>
 800cb20:	4603      	mov	r3, r0
 800cb22:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 800cb24:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d005      	beq.n	800cb38 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 800cb2c:	6878      	ldr	r0, [r7, #4]
 800cb2e:	f000 fc59 	bl	800d3e4 <dhcp_release_and_stop>
    return ERR_MEM;
 800cb32:	f04f 33ff 	mov.w	r3, #4294967295
 800cb36:	e001      	b.n	800cb3c <dhcp_start+0xe4>
  }
  return result;
 800cb38:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800cb3c:	4618      	mov	r0, r3
 800cb3e:	3710      	adds	r7, #16
 800cb40:	46bd      	mov	sp, r7
 800cb42:	bd80      	pop	{r7, pc}
 800cb44:	08013b08 	.word	0x08013b08
 800cb48:	08013bec 	.word	0x08013bec
 800cb4c:	08013b68 	.word	0x08013b68
 800cb50:	08013c30 	.word	0x08013c30

0800cb54 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 800cb54:	b580      	push	{r7, lr}
 800cb56:	b084      	sub	sp, #16
 800cb58:	af00      	add	r7, sp, #0
 800cb5a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb60:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d025      	beq.n	800cbb4 <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	795b      	ldrb	r3, [r3, #5]
 800cb6c:	2b0a      	cmp	r3, #10
 800cb6e:	d008      	beq.n	800cb82 <dhcp_network_changed+0x2e>
 800cb70:	2b0a      	cmp	r3, #10
 800cb72:	dc0d      	bgt.n	800cb90 <dhcp_network_changed+0x3c>
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d01f      	beq.n	800cbb8 <dhcp_network_changed+0x64>
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	db09      	blt.n	800cb90 <dhcp_network_changed+0x3c>
 800cb7c:	3b03      	subs	r3, #3
 800cb7e:	2b02      	cmp	r3, #2
 800cb80:	d806      	bhi.n	800cb90 <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	2200      	movs	r2, #0
 800cb86:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 800cb88:	6878      	ldr	r0, [r7, #4]
 800cb8a:	f000 fb75 	bl	800d278 <dhcp_reboot>
      break;
 800cb8e:	e014      	b.n	800cbba <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	795b      	ldrb	r3, [r3, #5]
 800cb94:	2b0c      	cmp	r3, #12
 800cb96:	d906      	bls.n	800cba6 <dhcp_network_changed+0x52>
 800cb98:	4b09      	ldr	r3, [pc, #36]	; (800cbc0 <dhcp_network_changed+0x6c>)
 800cb9a:	f240 326d 	movw	r2, #877	; 0x36d
 800cb9e:	4909      	ldr	r1, [pc, #36]	; (800cbc4 <dhcp_network_changed+0x70>)
 800cba0:	4809      	ldr	r0, [pc, #36]	; (800cbc8 <dhcp_network_changed+0x74>)
 800cba2:	f003 fdc7 	bl	8010734 <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	2200      	movs	r2, #0
 800cbaa:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 800cbac:	6878      	ldr	r0, [r7, #4]
 800cbae:	f000 f8af 	bl	800cd10 <dhcp_discover>
      break;
 800cbb2:	e002      	b.n	800cbba <dhcp_network_changed+0x66>
    return;
 800cbb4:	bf00      	nop
 800cbb6:	e000      	b.n	800cbba <dhcp_network_changed+0x66>
      break;
 800cbb8:	bf00      	nop
  }
}
 800cbba:	3710      	adds	r7, #16
 800cbbc:	46bd      	mov	sp, r7
 800cbbe:	bd80      	pop	{r7, pc}
 800cbc0:	08013b08 	.word	0x08013b08
 800cbc4:	08013c54 	.word	0x08013c54
 800cbc8:	08013b68 	.word	0x08013b68

0800cbcc <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 800cbcc:	b580      	push	{r7, lr}
 800cbce:	b084      	sub	sp, #16
 800cbd0:	af00      	add	r7, sp, #0
 800cbd2:	6078      	str	r0, [r7, #4]
 800cbd4:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d107      	bne.n	800cbec <dhcp_arp_reply+0x20>
 800cbdc:	4b0e      	ldr	r3, [pc, #56]	; (800cc18 <dhcp_arp_reply+0x4c>)
 800cbde:	f240 328b 	movw	r2, #907	; 0x38b
 800cbe2:	490e      	ldr	r1, [pc, #56]	; (800cc1c <dhcp_arp_reply+0x50>)
 800cbe4:	480e      	ldr	r0, [pc, #56]	; (800cc20 <dhcp_arp_reply+0x54>)
 800cbe6:	f003 fda5 	bl	8010734 <iprintf>
 800cbea:	e012      	b.n	800cc12 <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbf0:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d00c      	beq.n	800cc12 <dhcp_arp_reply+0x46>
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	795b      	ldrb	r3, [r3, #5]
 800cbfc:	2b08      	cmp	r3, #8
 800cbfe:	d108      	bne.n	800cc12 <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 800cc00:	683b      	ldr	r3, [r7, #0]
 800cc02:	681a      	ldr	r2, [r3, #0]
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	69db      	ldr	r3, [r3, #28]
 800cc08:	429a      	cmp	r2, r3
 800cc0a:	d102      	bne.n	800cc12 <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 800cc0c:	6878      	ldr	r0, [r7, #4]
 800cc0e:	f000 f809 	bl	800cc24 <dhcp_decline>
    }
  }
}
 800cc12:	3710      	adds	r7, #16
 800cc14:	46bd      	mov	sp, r7
 800cc16:	bd80      	pop	{r7, pc}
 800cc18:	08013b08 	.word	0x08013b08
 800cc1c:	08013bec 	.word	0x08013bec
 800cc20:	08013b68 	.word	0x08013b68

0800cc24 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 800cc24:	b5b0      	push	{r4, r5, r7, lr}
 800cc26:	b08a      	sub	sp, #40	; 0x28
 800cc28:	af02      	add	r7, sp, #8
 800cc2a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc30:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 800cc32:	210c      	movs	r1, #12
 800cc34:	69b8      	ldr	r0, [r7, #24]
 800cc36:	f000 fc6f 	bl	800d518 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 800cc3a:	f107 030c 	add.w	r3, r7, #12
 800cc3e:	2204      	movs	r2, #4
 800cc40:	69b9      	ldr	r1, [r7, #24]
 800cc42:	6878      	ldr	r0, [r7, #4]
 800cc44:	f001 f8f4 	bl	800de30 <dhcp_create_msg>
 800cc48:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800cc4a:	697b      	ldr	r3, [r7, #20]
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d035      	beq.n	800ccbc <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800cc50:	697b      	ldr	r3, [r7, #20]
 800cc52:	685b      	ldr	r3, [r3, #4]
 800cc54:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800cc56:	89b8      	ldrh	r0, [r7, #12]
 800cc58:	693b      	ldr	r3, [r7, #16]
 800cc5a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800cc5e:	2304      	movs	r3, #4
 800cc60:	2232      	movs	r2, #50	; 0x32
 800cc62:	f000 fc73 	bl	800d54c <dhcp_option>
 800cc66:	4603      	mov	r3, r0
 800cc68:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800cc6a:	89bc      	ldrh	r4, [r7, #12]
 800cc6c:	693b      	ldr	r3, [r7, #16]
 800cc6e:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800cc72:	69bb      	ldr	r3, [r7, #24]
 800cc74:	69db      	ldr	r3, [r3, #28]
 800cc76:	4618      	mov	r0, r3
 800cc78:	f7f7 fdc7 	bl	800480a <lwip_htonl>
 800cc7c:	4603      	mov	r3, r0
 800cc7e:	461a      	mov	r2, r3
 800cc80:	4629      	mov	r1, r5
 800cc82:	4620      	mov	r0, r4
 800cc84:	f000 fcee 	bl	800d664 <dhcp_option_long>
 800cc88:	4603      	mov	r3, r0
 800cc8a:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800cc8c:	89b8      	ldrh	r0, [r7, #12]
 800cc8e:	693b      	ldr	r3, [r7, #16]
 800cc90:	33f0      	adds	r3, #240	; 0xf0
 800cc92:	697a      	ldr	r2, [r7, #20]
 800cc94:	4619      	mov	r1, r3
 800cc96:	f001 f9a1 	bl	800dfdc <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800cc9a:	4b19      	ldr	r3, [pc, #100]	; (800cd00 <dhcp_decline+0xdc>)
 800cc9c:	6818      	ldr	r0, [r3, #0]
 800cc9e:	4b19      	ldr	r3, [pc, #100]	; (800cd04 <dhcp_decline+0xe0>)
 800cca0:	9301      	str	r3, [sp, #4]
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	9300      	str	r3, [sp, #0]
 800cca6:	2343      	movs	r3, #67	; 0x43
 800cca8:	4a17      	ldr	r2, [pc, #92]	; (800cd08 <dhcp_decline+0xe4>)
 800ccaa:	6979      	ldr	r1, [r7, #20]
 800ccac:	f7ff f8d2 	bl	800be54 <udp_sendto_if_src>
 800ccb0:	4603      	mov	r3, r0
 800ccb2:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800ccb4:	6978      	ldr	r0, [r7, #20]
 800ccb6:	f7f9 f995 	bl	8005fe4 <pbuf_free>
 800ccba:	e001      	b.n	800ccc0 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800ccbc:	23ff      	movs	r3, #255	; 0xff
 800ccbe:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800ccc0:	69bb      	ldr	r3, [r7, #24]
 800ccc2:	799b      	ldrb	r3, [r3, #6]
 800ccc4:	2bff      	cmp	r3, #255	; 0xff
 800ccc6:	d005      	beq.n	800ccd4 <dhcp_decline+0xb0>
    dhcp->tries++;
 800ccc8:	69bb      	ldr	r3, [r7, #24]
 800ccca:	799b      	ldrb	r3, [r3, #6]
 800cccc:	3301      	adds	r3, #1
 800ccce:	b2da      	uxtb	r2, r3
 800ccd0:	69bb      	ldr	r3, [r7, #24]
 800ccd2:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 800ccd4:	f242 7310 	movw	r3, #10000	; 0x2710
 800ccd8:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800ccda:	89fb      	ldrh	r3, [r7, #14]
 800ccdc:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800cce0:	4a0a      	ldr	r2, [pc, #40]	; (800cd0c <dhcp_decline+0xe8>)
 800cce2:	fb82 1203 	smull	r1, r2, r2, r3
 800cce6:	1152      	asrs	r2, r2, #5
 800cce8:	17db      	asrs	r3, r3, #31
 800ccea:	1ad3      	subs	r3, r2, r3
 800ccec:	b29a      	uxth	r2, r3
 800ccee:	69bb      	ldr	r3, [r7, #24]
 800ccf0:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800ccf2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800ccf6:	4618      	mov	r0, r3
 800ccf8:	3720      	adds	r7, #32
 800ccfa:	46bd      	mov	sp, r7
 800ccfc:	bdb0      	pop	{r4, r5, r7, pc}
 800ccfe:	bf00      	nop
 800cd00:	20007cdc 	.word	0x20007cdc
 800cd04:	08014670 	.word	0x08014670
 800cd08:	08014674 	.word	0x08014674
 800cd0c:	10624dd3 	.word	0x10624dd3

0800cd10 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 800cd10:	b580      	push	{r7, lr}
 800cd12:	b08a      	sub	sp, #40	; 0x28
 800cd14:	af02      	add	r7, sp, #8
 800cd16:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd1c:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 800cd1e:	2300      	movs	r3, #0
 800cd20:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 800cd22:	69bb      	ldr	r3, [r7, #24]
 800cd24:	2200      	movs	r2, #0
 800cd26:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 800cd28:	2106      	movs	r1, #6
 800cd2a:	69b8      	ldr	r0, [r7, #24]
 800cd2c:	f000 fbf4 	bl	800d518 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 800cd30:	f107 0308 	add.w	r3, r7, #8
 800cd34:	2201      	movs	r2, #1
 800cd36:	69b9      	ldr	r1, [r7, #24]
 800cd38:	6878      	ldr	r0, [r7, #4]
 800cd3a:	f001 f879 	bl	800de30 <dhcp_create_msg>
 800cd3e:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 800cd40:	693b      	ldr	r3, [r7, #16]
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d04b      	beq.n	800cdde <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800cd46:	693b      	ldr	r3, [r7, #16]
 800cd48:	685b      	ldr	r3, [r3, #4]
 800cd4a:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800cd4c:	8938      	ldrh	r0, [r7, #8]
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800cd54:	2302      	movs	r3, #2
 800cd56:	2239      	movs	r2, #57	; 0x39
 800cd58:	f000 fbf8 	bl	800d54c <dhcp_option>
 800cd5c:	4603      	mov	r3, r0
 800cd5e:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800cd60:	8938      	ldrh	r0, [r7, #8]
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cd6c:	461a      	mov	r2, r3
 800cd6e:	f000 fc47 	bl	800d600 <dhcp_option_short>
 800cd72:	4603      	mov	r3, r0
 800cd74:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800cd76:	8938      	ldrh	r0, [r7, #8]
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800cd7e:	2303      	movs	r3, #3
 800cd80:	2237      	movs	r2, #55	; 0x37
 800cd82:	f000 fbe3 	bl	800d54c <dhcp_option>
 800cd86:	4603      	mov	r3, r0
 800cd88:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800cd8a:	2300      	movs	r3, #0
 800cd8c:	77fb      	strb	r3, [r7, #31]
 800cd8e:	e00e      	b.n	800cdae <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800cd90:	8938      	ldrh	r0, [r7, #8]
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800cd98:	7ffb      	ldrb	r3, [r7, #31]
 800cd9a:	4a29      	ldr	r2, [pc, #164]	; (800ce40 <dhcp_discover+0x130>)
 800cd9c:	5cd3      	ldrb	r3, [r2, r3]
 800cd9e:	461a      	mov	r2, r3
 800cda0:	f000 fc08 	bl	800d5b4 <dhcp_option_byte>
 800cda4:	4603      	mov	r3, r0
 800cda6:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800cda8:	7ffb      	ldrb	r3, [r7, #31]
 800cdaa:	3301      	adds	r3, #1
 800cdac:	77fb      	strb	r3, [r7, #31]
 800cdae:	7ffb      	ldrb	r3, [r7, #31]
 800cdb0:	2b02      	cmp	r3, #2
 800cdb2:	d9ed      	bls.n	800cd90 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800cdb4:	8938      	ldrh	r0, [r7, #8]
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	33f0      	adds	r3, #240	; 0xf0
 800cdba:	693a      	ldr	r2, [r7, #16]
 800cdbc:	4619      	mov	r1, r3
 800cdbe:	f001 f90d 	bl	800dfdc <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800cdc2:	4b20      	ldr	r3, [pc, #128]	; (800ce44 <dhcp_discover+0x134>)
 800cdc4:	6818      	ldr	r0, [r3, #0]
 800cdc6:	4b20      	ldr	r3, [pc, #128]	; (800ce48 <dhcp_discover+0x138>)
 800cdc8:	9301      	str	r3, [sp, #4]
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	9300      	str	r3, [sp, #0]
 800cdce:	2343      	movs	r3, #67	; 0x43
 800cdd0:	4a1e      	ldr	r2, [pc, #120]	; (800ce4c <dhcp_discover+0x13c>)
 800cdd2:	6939      	ldr	r1, [r7, #16]
 800cdd4:	f7ff f83e 	bl	800be54 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 800cdd8:	6938      	ldr	r0, [r7, #16]
 800cdda:	f7f9 f903 	bl	8005fe4 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 800cdde:	69bb      	ldr	r3, [r7, #24]
 800cde0:	799b      	ldrb	r3, [r3, #6]
 800cde2:	2bff      	cmp	r3, #255	; 0xff
 800cde4:	d005      	beq.n	800cdf2 <dhcp_discover+0xe2>
    dhcp->tries++;
 800cde6:	69bb      	ldr	r3, [r7, #24]
 800cde8:	799b      	ldrb	r3, [r3, #6]
 800cdea:	3301      	adds	r3, #1
 800cdec:	b2da      	uxtb	r2, r3
 800cdee:	69bb      	ldr	r3, [r7, #24]
 800cdf0:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 800cdf2:	69bb      	ldr	r3, [r7, #24]
 800cdf4:	799b      	ldrb	r3, [r3, #6]
 800cdf6:	2b05      	cmp	r3, #5
 800cdf8:	d80d      	bhi.n	800ce16 <dhcp_discover+0x106>
 800cdfa:	69bb      	ldr	r3, [r7, #24]
 800cdfc:	799b      	ldrb	r3, [r3, #6]
 800cdfe:	461a      	mov	r2, r3
 800ce00:	2301      	movs	r3, #1
 800ce02:	4093      	lsls	r3, r2
 800ce04:	b29b      	uxth	r3, r3
 800ce06:	461a      	mov	r2, r3
 800ce08:	0152      	lsls	r2, r2, #5
 800ce0a:	1ad2      	subs	r2, r2, r3
 800ce0c:	0092      	lsls	r2, r2, #2
 800ce0e:	4413      	add	r3, r2
 800ce10:	00db      	lsls	r3, r3, #3
 800ce12:	b29b      	uxth	r3, r3
 800ce14:	e001      	b.n	800ce1a <dhcp_discover+0x10a>
 800ce16:	f64e 2360 	movw	r3, #60000	; 0xea60
 800ce1a:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800ce1c:	897b      	ldrh	r3, [r7, #10]
 800ce1e:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800ce22:	4a0b      	ldr	r2, [pc, #44]	; (800ce50 <dhcp_discover+0x140>)
 800ce24:	fb82 1203 	smull	r1, r2, r2, r3
 800ce28:	1152      	asrs	r2, r2, #5
 800ce2a:	17db      	asrs	r3, r3, #31
 800ce2c:	1ad3      	subs	r3, r2, r3
 800ce2e:	b29a      	uxth	r2, r3
 800ce30:	69bb      	ldr	r3, [r7, #24]
 800ce32:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800ce34:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ce38:	4618      	mov	r0, r3
 800ce3a:	3720      	adds	r7, #32
 800ce3c:	46bd      	mov	sp, r7
 800ce3e:	bd80      	pop	{r7, pc}
 800ce40:	2000002c 	.word	0x2000002c
 800ce44:	20007cdc 	.word	0x20007cdc
 800ce48:	08014670 	.word	0x08014670
 800ce4c:	08014674 	.word	0x08014674
 800ce50:	10624dd3 	.word	0x10624dd3

0800ce54 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 800ce54:	b580      	push	{r7, lr}
 800ce56:	b088      	sub	sp, #32
 800ce58:	af00      	add	r7, sp, #0
 800ce5a:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d107      	bne.n	800ce72 <dhcp_bind+0x1e>
 800ce62:	4b64      	ldr	r3, [pc, #400]	; (800cff4 <dhcp_bind+0x1a0>)
 800ce64:	f240 4215 	movw	r2, #1045	; 0x415
 800ce68:	4963      	ldr	r1, [pc, #396]	; (800cff8 <dhcp_bind+0x1a4>)
 800ce6a:	4864      	ldr	r0, [pc, #400]	; (800cffc <dhcp_bind+0x1a8>)
 800ce6c:	f003 fc62 	bl	8010734 <iprintf>
 800ce70:	e0bc      	b.n	800cfec <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce76:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 800ce78:	69bb      	ldr	r3, [r7, #24]
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d107      	bne.n	800ce8e <dhcp_bind+0x3a>
 800ce7e:	4b5d      	ldr	r3, [pc, #372]	; (800cff4 <dhcp_bind+0x1a0>)
 800ce80:	f240 4217 	movw	r2, #1047	; 0x417
 800ce84:	495e      	ldr	r1, [pc, #376]	; (800d000 <dhcp_bind+0x1ac>)
 800ce86:	485d      	ldr	r0, [pc, #372]	; (800cffc <dhcp_bind+0x1a8>)
 800ce88:	f003 fc54 	bl	8010734 <iprintf>
 800ce8c:	e0ae      	b.n	800cfec <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 800ce8e:	69bb      	ldr	r3, [r7, #24]
 800ce90:	2200      	movs	r2, #0
 800ce92:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 800ce94:	69bb      	ldr	r3, [r7, #24]
 800ce96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce98:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce9c:	d019      	beq.n	800ced2 <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800ce9e:	69bb      	ldr	r3, [r7, #24]
 800cea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cea2:	331e      	adds	r3, #30
 800cea4:	4a57      	ldr	r2, [pc, #348]	; (800d004 <dhcp_bind+0x1b0>)
 800cea6:	fba2 2303 	umull	r2, r3, r2, r3
 800ceaa:	095b      	lsrs	r3, r3, #5
 800ceac:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800ceae:	69fb      	ldr	r3, [r7, #28]
 800ceb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ceb4:	d302      	bcc.n	800cebc <dhcp_bind+0x68>
      timeout = 0xffff;
 800ceb6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ceba:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 800cebc:	69fb      	ldr	r3, [r7, #28]
 800cebe:	b29a      	uxth	r2, r3
 800cec0:	69bb      	ldr	r3, [r7, #24]
 800cec2:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 800cec4:	69bb      	ldr	r3, [r7, #24]
 800cec6:	8a9b      	ldrh	r3, [r3, #20]
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d102      	bne.n	800ced2 <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 800cecc:	69bb      	ldr	r3, [r7, #24]
 800cece:	2201      	movs	r2, #1
 800ced0:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 800ced2:	69bb      	ldr	r3, [r7, #24]
 800ced4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ced6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ceda:	d01d      	beq.n	800cf18 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800cedc:	69bb      	ldr	r3, [r7, #24]
 800cede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cee0:	331e      	adds	r3, #30
 800cee2:	4a48      	ldr	r2, [pc, #288]	; (800d004 <dhcp_bind+0x1b0>)
 800cee4:	fba2 2303 	umull	r2, r3, r2, r3
 800cee8:	095b      	lsrs	r3, r3, #5
 800ceea:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800ceec:	69fb      	ldr	r3, [r7, #28]
 800ceee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cef2:	d302      	bcc.n	800cefa <dhcp_bind+0xa6>
      timeout = 0xffff;
 800cef4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cef8:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 800cefa:	69fb      	ldr	r3, [r7, #28]
 800cefc:	b29a      	uxth	r2, r3
 800cefe:	69bb      	ldr	r3, [r7, #24]
 800cf00:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 800cf02:	69bb      	ldr	r3, [r7, #24]
 800cf04:	895b      	ldrh	r3, [r3, #10]
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d102      	bne.n	800cf10 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 800cf0a:	69bb      	ldr	r3, [r7, #24]
 800cf0c:	2201      	movs	r2, #1
 800cf0e:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 800cf10:	69bb      	ldr	r3, [r7, #24]
 800cf12:	895a      	ldrh	r2, [r3, #10]
 800cf14:	69bb      	ldr	r3, [r7, #24]
 800cf16:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 800cf18:	69bb      	ldr	r3, [r7, #24]
 800cf1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf20:	d01d      	beq.n	800cf5e <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800cf22:	69bb      	ldr	r3, [r7, #24]
 800cf24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf26:	331e      	adds	r3, #30
 800cf28:	4a36      	ldr	r2, [pc, #216]	; (800d004 <dhcp_bind+0x1b0>)
 800cf2a:	fba2 2303 	umull	r2, r3, r2, r3
 800cf2e:	095b      	lsrs	r3, r3, #5
 800cf30:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800cf32:	69fb      	ldr	r3, [r7, #28]
 800cf34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cf38:	d302      	bcc.n	800cf40 <dhcp_bind+0xec>
      timeout = 0xffff;
 800cf3a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cf3e:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 800cf40:	69fb      	ldr	r3, [r7, #28]
 800cf42:	b29a      	uxth	r2, r3
 800cf44:	69bb      	ldr	r3, [r7, #24]
 800cf46:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 800cf48:	69bb      	ldr	r3, [r7, #24]
 800cf4a:	899b      	ldrh	r3, [r3, #12]
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d102      	bne.n	800cf56 <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 800cf50:	69bb      	ldr	r3, [r7, #24]
 800cf52:	2201      	movs	r2, #1
 800cf54:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 800cf56:	69bb      	ldr	r3, [r7, #24]
 800cf58:	899a      	ldrh	r2, [r3, #12]
 800cf5a:	69bb      	ldr	r3, [r7, #24]
 800cf5c:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 800cf5e:	69bb      	ldr	r3, [r7, #24]
 800cf60:	895a      	ldrh	r2, [r3, #10]
 800cf62:	69bb      	ldr	r3, [r7, #24]
 800cf64:	899b      	ldrh	r3, [r3, #12]
 800cf66:	429a      	cmp	r2, r3
 800cf68:	d306      	bcc.n	800cf78 <dhcp_bind+0x124>
 800cf6a:	69bb      	ldr	r3, [r7, #24]
 800cf6c:	899b      	ldrh	r3, [r3, #12]
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d002      	beq.n	800cf78 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 800cf72:	69bb      	ldr	r3, [r7, #24]
 800cf74:	2200      	movs	r2, #0
 800cf76:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 800cf78:	69bb      	ldr	r3, [r7, #24]
 800cf7a:	79db      	ldrb	r3, [r3, #7]
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d003      	beq.n	800cf88 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 800cf80:	69bb      	ldr	r3, [r7, #24]
 800cf82:	6a1b      	ldr	r3, [r3, #32]
 800cf84:	613b      	str	r3, [r7, #16]
 800cf86:	e014      	b.n	800cfb2 <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 800cf88:	69bb      	ldr	r3, [r7, #24]
 800cf8a:	331c      	adds	r3, #28
 800cf8c:	781b      	ldrb	r3, [r3, #0]
 800cf8e:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 800cf90:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	db02      	blt.n	800cf9e <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 800cf98:	23ff      	movs	r3, #255	; 0xff
 800cf9a:	613b      	str	r3, [r7, #16]
 800cf9c:	e009      	b.n	800cfb2 <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 800cf9e:	7dfb      	ldrb	r3, [r7, #23]
 800cfa0:	2bbf      	cmp	r3, #191	; 0xbf
 800cfa2:	d903      	bls.n	800cfac <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 800cfa4:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800cfa8:	613b      	str	r3, [r7, #16]
 800cfaa:	e002      	b.n	800cfb2 <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 800cfac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cfb0:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 800cfb2:	69bb      	ldr	r3, [r7, #24]
 800cfb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfb6:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d108      	bne.n	800cfd0 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 800cfbe:	69bb      	ldr	r3, [r7, #24]
 800cfc0:	69da      	ldr	r2, [r3, #28]
 800cfc2:	693b      	ldr	r3, [r7, #16]
 800cfc4:	4013      	ands	r3, r2
 800cfc6:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800cfce:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 800cfd0:	210a      	movs	r1, #10
 800cfd2:	69b8      	ldr	r0, [r7, #24]
 800cfd4:	f000 faa0 	bl	800d518 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 800cfd8:	69bb      	ldr	r3, [r7, #24]
 800cfda:	f103 011c 	add.w	r1, r3, #28
 800cfde:	f107 030c 	add.w	r3, r7, #12
 800cfe2:	f107 0210 	add.w	r2, r7, #16
 800cfe6:	6878      	ldr	r0, [r7, #4]
 800cfe8:	f7f8 fb3c 	bl	8005664 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 800cfec:	3720      	adds	r7, #32
 800cfee:	46bd      	mov	sp, r7
 800cff0:	bd80      	pop	{r7, pc}
 800cff2:	bf00      	nop
 800cff4:	08013b08 	.word	0x08013b08
 800cff8:	08013c68 	.word	0x08013c68
 800cffc:	08013b68 	.word	0x08013b68
 800d000:	08013c84 	.word	0x08013c84
 800d004:	88888889 	.word	0x88888889

0800d008 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 800d008:	b580      	push	{r7, lr}
 800d00a:	b08a      	sub	sp, #40	; 0x28
 800d00c:	af02      	add	r7, sp, #8
 800d00e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d014:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 800d016:	2105      	movs	r1, #5
 800d018:	69b8      	ldr	r0, [r7, #24]
 800d01a:	f000 fa7d 	bl	800d518 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800d01e:	f107 030c 	add.w	r3, r7, #12
 800d022:	2203      	movs	r2, #3
 800d024:	69b9      	ldr	r1, [r7, #24]
 800d026:	6878      	ldr	r0, [r7, #4]
 800d028:	f000 ff02 	bl	800de30 <dhcp_create_msg>
 800d02c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800d02e:	697b      	ldr	r3, [r7, #20]
 800d030:	2b00      	cmp	r3, #0
 800d032:	d04e      	beq.n	800d0d2 <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800d034:	697b      	ldr	r3, [r7, #20]
 800d036:	685b      	ldr	r3, [r3, #4]
 800d038:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800d03a:	89b8      	ldrh	r0, [r7, #12]
 800d03c:	693b      	ldr	r3, [r7, #16]
 800d03e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800d042:	2302      	movs	r3, #2
 800d044:	2239      	movs	r2, #57	; 0x39
 800d046:	f000 fa81 	bl	800d54c <dhcp_option>
 800d04a:	4603      	mov	r3, r0
 800d04c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800d04e:	89b8      	ldrh	r0, [r7, #12]
 800d050:	693b      	ldr	r3, [r7, #16]
 800d052:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d05a:	461a      	mov	r2, r3
 800d05c:	f000 fad0 	bl	800d600 <dhcp_option_short>
 800d060:	4603      	mov	r3, r0
 800d062:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800d064:	89b8      	ldrh	r0, [r7, #12]
 800d066:	693b      	ldr	r3, [r7, #16]
 800d068:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800d06c:	2303      	movs	r3, #3
 800d06e:	2237      	movs	r2, #55	; 0x37
 800d070:	f000 fa6c 	bl	800d54c <dhcp_option>
 800d074:	4603      	mov	r3, r0
 800d076:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800d078:	2300      	movs	r3, #0
 800d07a:	77bb      	strb	r3, [r7, #30]
 800d07c:	e00e      	b.n	800d09c <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800d07e:	89b8      	ldrh	r0, [r7, #12]
 800d080:	693b      	ldr	r3, [r7, #16]
 800d082:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800d086:	7fbb      	ldrb	r3, [r7, #30]
 800d088:	4a2a      	ldr	r2, [pc, #168]	; (800d134 <dhcp_renew+0x12c>)
 800d08a:	5cd3      	ldrb	r3, [r2, r3]
 800d08c:	461a      	mov	r2, r3
 800d08e:	f000 fa91 	bl	800d5b4 <dhcp_option_byte>
 800d092:	4603      	mov	r3, r0
 800d094:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800d096:	7fbb      	ldrb	r3, [r7, #30]
 800d098:	3301      	adds	r3, #1
 800d09a:	77bb      	strb	r3, [r7, #30]
 800d09c:	7fbb      	ldrb	r3, [r7, #30]
 800d09e:	2b02      	cmp	r3, #2
 800d0a0:	d9ed      	bls.n	800d07e <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800d0a2:	89b8      	ldrh	r0, [r7, #12]
 800d0a4:	693b      	ldr	r3, [r7, #16]
 800d0a6:	33f0      	adds	r3, #240	; 0xf0
 800d0a8:	697a      	ldr	r2, [r7, #20]
 800d0aa:	4619      	mov	r1, r3
 800d0ac:	f000 ff96 	bl	800dfdc <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800d0b0:	4b21      	ldr	r3, [pc, #132]	; (800d138 <dhcp_renew+0x130>)
 800d0b2:	6818      	ldr	r0, [r3, #0]
 800d0b4:	69bb      	ldr	r3, [r7, #24]
 800d0b6:	f103 0218 	add.w	r2, r3, #24
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	9300      	str	r3, [sp, #0]
 800d0be:	2343      	movs	r3, #67	; 0x43
 800d0c0:	6979      	ldr	r1, [r7, #20]
 800d0c2:	f7fe fe53 	bl	800bd6c <udp_sendto_if>
 800d0c6:	4603      	mov	r3, r0
 800d0c8:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800d0ca:	6978      	ldr	r0, [r7, #20]
 800d0cc:	f7f8 ff8a 	bl	8005fe4 <pbuf_free>
 800d0d0:	e001      	b.n	800d0d6 <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800d0d2:	23ff      	movs	r3, #255	; 0xff
 800d0d4:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800d0d6:	69bb      	ldr	r3, [r7, #24]
 800d0d8:	799b      	ldrb	r3, [r3, #6]
 800d0da:	2bff      	cmp	r3, #255	; 0xff
 800d0dc:	d005      	beq.n	800d0ea <dhcp_renew+0xe2>
    dhcp->tries++;
 800d0de:	69bb      	ldr	r3, [r7, #24]
 800d0e0:	799b      	ldrb	r3, [r3, #6]
 800d0e2:	3301      	adds	r3, #1
 800d0e4:	b2da      	uxtb	r2, r3
 800d0e6:	69bb      	ldr	r3, [r7, #24]
 800d0e8:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 800d0ea:	69bb      	ldr	r3, [r7, #24]
 800d0ec:	799b      	ldrb	r3, [r3, #6]
 800d0ee:	2b09      	cmp	r3, #9
 800d0f0:	d80a      	bhi.n	800d108 <dhcp_renew+0x100>
 800d0f2:	69bb      	ldr	r3, [r7, #24]
 800d0f4:	799b      	ldrb	r3, [r3, #6]
 800d0f6:	b29b      	uxth	r3, r3
 800d0f8:	461a      	mov	r2, r3
 800d0fa:	0152      	lsls	r2, r2, #5
 800d0fc:	1ad2      	subs	r2, r2, r3
 800d0fe:	0092      	lsls	r2, r2, #2
 800d100:	4413      	add	r3, r2
 800d102:	011b      	lsls	r3, r3, #4
 800d104:	b29b      	uxth	r3, r3
 800d106:	e001      	b.n	800d10c <dhcp_renew+0x104>
 800d108:	f644 6320 	movw	r3, #20000	; 0x4e20
 800d10c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800d10e:	89fb      	ldrh	r3, [r7, #14]
 800d110:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800d114:	4a09      	ldr	r2, [pc, #36]	; (800d13c <dhcp_renew+0x134>)
 800d116:	fb82 1203 	smull	r1, r2, r2, r3
 800d11a:	1152      	asrs	r2, r2, #5
 800d11c:	17db      	asrs	r3, r3, #31
 800d11e:	1ad3      	subs	r3, r2, r3
 800d120:	b29a      	uxth	r2, r3
 800d122:	69bb      	ldr	r3, [r7, #24]
 800d124:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800d126:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d12a:	4618      	mov	r0, r3
 800d12c:	3720      	adds	r7, #32
 800d12e:	46bd      	mov	sp, r7
 800d130:	bd80      	pop	{r7, pc}
 800d132:	bf00      	nop
 800d134:	2000002c 	.word	0x2000002c
 800d138:	20007cdc 	.word	0x20007cdc
 800d13c:	10624dd3 	.word	0x10624dd3

0800d140 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 800d140:	b580      	push	{r7, lr}
 800d142:	b08a      	sub	sp, #40	; 0x28
 800d144:	af02      	add	r7, sp, #8
 800d146:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d14c:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 800d14e:	2104      	movs	r1, #4
 800d150:	69b8      	ldr	r0, [r7, #24]
 800d152:	f000 f9e1 	bl	800d518 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800d156:	f107 030c 	add.w	r3, r7, #12
 800d15a:	2203      	movs	r2, #3
 800d15c:	69b9      	ldr	r1, [r7, #24]
 800d15e:	6878      	ldr	r0, [r7, #4]
 800d160:	f000 fe66 	bl	800de30 <dhcp_create_msg>
 800d164:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800d166:	697b      	ldr	r3, [r7, #20]
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d04c      	beq.n	800d206 <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800d16c:	697b      	ldr	r3, [r7, #20]
 800d16e:	685b      	ldr	r3, [r3, #4]
 800d170:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800d172:	89b8      	ldrh	r0, [r7, #12]
 800d174:	693b      	ldr	r3, [r7, #16]
 800d176:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800d17a:	2302      	movs	r3, #2
 800d17c:	2239      	movs	r2, #57	; 0x39
 800d17e:	f000 f9e5 	bl	800d54c <dhcp_option>
 800d182:	4603      	mov	r3, r0
 800d184:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800d186:	89b8      	ldrh	r0, [r7, #12]
 800d188:	693b      	ldr	r3, [r7, #16]
 800d18a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d192:	461a      	mov	r2, r3
 800d194:	f000 fa34 	bl	800d600 <dhcp_option_short>
 800d198:	4603      	mov	r3, r0
 800d19a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800d19c:	89b8      	ldrh	r0, [r7, #12]
 800d19e:	693b      	ldr	r3, [r7, #16]
 800d1a0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800d1a4:	2303      	movs	r3, #3
 800d1a6:	2237      	movs	r2, #55	; 0x37
 800d1a8:	f000 f9d0 	bl	800d54c <dhcp_option>
 800d1ac:	4603      	mov	r3, r0
 800d1ae:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800d1b0:	2300      	movs	r3, #0
 800d1b2:	77bb      	strb	r3, [r7, #30]
 800d1b4:	e00e      	b.n	800d1d4 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800d1b6:	89b8      	ldrh	r0, [r7, #12]
 800d1b8:	693b      	ldr	r3, [r7, #16]
 800d1ba:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800d1be:	7fbb      	ldrb	r3, [r7, #30]
 800d1c0:	4a29      	ldr	r2, [pc, #164]	; (800d268 <dhcp_rebind+0x128>)
 800d1c2:	5cd3      	ldrb	r3, [r2, r3]
 800d1c4:	461a      	mov	r2, r3
 800d1c6:	f000 f9f5 	bl	800d5b4 <dhcp_option_byte>
 800d1ca:	4603      	mov	r3, r0
 800d1cc:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800d1ce:	7fbb      	ldrb	r3, [r7, #30]
 800d1d0:	3301      	adds	r3, #1
 800d1d2:	77bb      	strb	r3, [r7, #30]
 800d1d4:	7fbb      	ldrb	r3, [r7, #30]
 800d1d6:	2b02      	cmp	r3, #2
 800d1d8:	d9ed      	bls.n	800d1b6 <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800d1da:	89b8      	ldrh	r0, [r7, #12]
 800d1dc:	693b      	ldr	r3, [r7, #16]
 800d1de:	33f0      	adds	r3, #240	; 0xf0
 800d1e0:	697a      	ldr	r2, [r7, #20]
 800d1e2:	4619      	mov	r1, r3
 800d1e4:	f000 fefa 	bl	800dfdc <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800d1e8:	4b20      	ldr	r3, [pc, #128]	; (800d26c <dhcp_rebind+0x12c>)
 800d1ea:	6818      	ldr	r0, [r3, #0]
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	9300      	str	r3, [sp, #0]
 800d1f0:	2343      	movs	r3, #67	; 0x43
 800d1f2:	4a1f      	ldr	r2, [pc, #124]	; (800d270 <dhcp_rebind+0x130>)
 800d1f4:	6979      	ldr	r1, [r7, #20]
 800d1f6:	f7fe fdb9 	bl	800bd6c <udp_sendto_if>
 800d1fa:	4603      	mov	r3, r0
 800d1fc:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800d1fe:	6978      	ldr	r0, [r7, #20]
 800d200:	f7f8 fef0 	bl	8005fe4 <pbuf_free>
 800d204:	e001      	b.n	800d20a <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800d206:	23ff      	movs	r3, #255	; 0xff
 800d208:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800d20a:	69bb      	ldr	r3, [r7, #24]
 800d20c:	799b      	ldrb	r3, [r3, #6]
 800d20e:	2bff      	cmp	r3, #255	; 0xff
 800d210:	d005      	beq.n	800d21e <dhcp_rebind+0xde>
    dhcp->tries++;
 800d212:	69bb      	ldr	r3, [r7, #24]
 800d214:	799b      	ldrb	r3, [r3, #6]
 800d216:	3301      	adds	r3, #1
 800d218:	b2da      	uxtb	r2, r3
 800d21a:	69bb      	ldr	r3, [r7, #24]
 800d21c:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 800d21e:	69bb      	ldr	r3, [r7, #24]
 800d220:	799b      	ldrb	r3, [r3, #6]
 800d222:	2b09      	cmp	r3, #9
 800d224:	d80a      	bhi.n	800d23c <dhcp_rebind+0xfc>
 800d226:	69bb      	ldr	r3, [r7, #24]
 800d228:	799b      	ldrb	r3, [r3, #6]
 800d22a:	b29b      	uxth	r3, r3
 800d22c:	461a      	mov	r2, r3
 800d22e:	0152      	lsls	r2, r2, #5
 800d230:	1ad2      	subs	r2, r2, r3
 800d232:	0092      	lsls	r2, r2, #2
 800d234:	4413      	add	r3, r2
 800d236:	00db      	lsls	r3, r3, #3
 800d238:	b29b      	uxth	r3, r3
 800d23a:	e001      	b.n	800d240 <dhcp_rebind+0x100>
 800d23c:	f242 7310 	movw	r3, #10000	; 0x2710
 800d240:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800d242:	89fb      	ldrh	r3, [r7, #14]
 800d244:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800d248:	4a0a      	ldr	r2, [pc, #40]	; (800d274 <dhcp_rebind+0x134>)
 800d24a:	fb82 1203 	smull	r1, r2, r2, r3
 800d24e:	1152      	asrs	r2, r2, #5
 800d250:	17db      	asrs	r3, r3, #31
 800d252:	1ad3      	subs	r3, r2, r3
 800d254:	b29a      	uxth	r2, r3
 800d256:	69bb      	ldr	r3, [r7, #24]
 800d258:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800d25a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d25e:	4618      	mov	r0, r3
 800d260:	3720      	adds	r7, #32
 800d262:	46bd      	mov	sp, r7
 800d264:	bd80      	pop	{r7, pc}
 800d266:	bf00      	nop
 800d268:	2000002c 	.word	0x2000002c
 800d26c:	20007cdc 	.word	0x20007cdc
 800d270:	08014674 	.word	0x08014674
 800d274:	10624dd3 	.word	0x10624dd3

0800d278 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 800d278:	b5b0      	push	{r4, r5, r7, lr}
 800d27a:	b08a      	sub	sp, #40	; 0x28
 800d27c:	af02      	add	r7, sp, #8
 800d27e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d284:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 800d286:	2103      	movs	r1, #3
 800d288:	69b8      	ldr	r0, [r7, #24]
 800d28a:	f000 f945 	bl	800d518 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800d28e:	f107 030c 	add.w	r3, r7, #12
 800d292:	2203      	movs	r2, #3
 800d294:	69b9      	ldr	r1, [r7, #24]
 800d296:	6878      	ldr	r0, [r7, #4]
 800d298:	f000 fdca 	bl	800de30 <dhcp_create_msg>
 800d29c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800d29e:	697b      	ldr	r3, [r7, #20]
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d066      	beq.n	800d372 <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800d2a4:	697b      	ldr	r3, [r7, #20]
 800d2a6:	685b      	ldr	r3, [r3, #4]
 800d2a8:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800d2aa:	89b8      	ldrh	r0, [r7, #12]
 800d2ac:	693b      	ldr	r3, [r7, #16]
 800d2ae:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800d2b2:	2302      	movs	r3, #2
 800d2b4:	2239      	movs	r2, #57	; 0x39
 800d2b6:	f000 f949 	bl	800d54c <dhcp_option>
 800d2ba:	4603      	mov	r3, r0
 800d2bc:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 800d2be:	89b8      	ldrh	r0, [r7, #12]
 800d2c0:	693b      	ldr	r3, [r7, #16]
 800d2c2:	33f0      	adds	r3, #240	; 0xf0
 800d2c4:	f44f 7210 	mov.w	r2, #576	; 0x240
 800d2c8:	4619      	mov	r1, r3
 800d2ca:	f000 f999 	bl	800d600 <dhcp_option_short>
 800d2ce:	4603      	mov	r3, r0
 800d2d0:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800d2d2:	89b8      	ldrh	r0, [r7, #12]
 800d2d4:	693b      	ldr	r3, [r7, #16]
 800d2d6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800d2da:	2304      	movs	r3, #4
 800d2dc:	2232      	movs	r2, #50	; 0x32
 800d2de:	f000 f935 	bl	800d54c <dhcp_option>
 800d2e2:	4603      	mov	r3, r0
 800d2e4:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800d2e6:	89bc      	ldrh	r4, [r7, #12]
 800d2e8:	693b      	ldr	r3, [r7, #16]
 800d2ea:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800d2ee:	69bb      	ldr	r3, [r7, #24]
 800d2f0:	69db      	ldr	r3, [r3, #28]
 800d2f2:	4618      	mov	r0, r3
 800d2f4:	f7f7 fa89 	bl	800480a <lwip_htonl>
 800d2f8:	4603      	mov	r3, r0
 800d2fa:	461a      	mov	r2, r3
 800d2fc:	4629      	mov	r1, r5
 800d2fe:	4620      	mov	r0, r4
 800d300:	f000 f9b0 	bl	800d664 <dhcp_option_long>
 800d304:	4603      	mov	r3, r0
 800d306:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800d308:	89b8      	ldrh	r0, [r7, #12]
 800d30a:	693b      	ldr	r3, [r7, #16]
 800d30c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800d310:	2303      	movs	r3, #3
 800d312:	2237      	movs	r2, #55	; 0x37
 800d314:	f000 f91a 	bl	800d54c <dhcp_option>
 800d318:	4603      	mov	r3, r0
 800d31a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800d31c:	2300      	movs	r3, #0
 800d31e:	77bb      	strb	r3, [r7, #30]
 800d320:	e00e      	b.n	800d340 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800d322:	89b8      	ldrh	r0, [r7, #12]
 800d324:	693b      	ldr	r3, [r7, #16]
 800d326:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800d32a:	7fbb      	ldrb	r3, [r7, #30]
 800d32c:	4a29      	ldr	r2, [pc, #164]	; (800d3d4 <dhcp_reboot+0x15c>)
 800d32e:	5cd3      	ldrb	r3, [r2, r3]
 800d330:	461a      	mov	r2, r3
 800d332:	f000 f93f 	bl	800d5b4 <dhcp_option_byte>
 800d336:	4603      	mov	r3, r0
 800d338:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800d33a:	7fbb      	ldrb	r3, [r7, #30]
 800d33c:	3301      	adds	r3, #1
 800d33e:	77bb      	strb	r3, [r7, #30]
 800d340:	7fbb      	ldrb	r3, [r7, #30]
 800d342:	2b02      	cmp	r3, #2
 800d344:	d9ed      	bls.n	800d322 <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800d346:	89b8      	ldrh	r0, [r7, #12]
 800d348:	693b      	ldr	r3, [r7, #16]
 800d34a:	33f0      	adds	r3, #240	; 0xf0
 800d34c:	697a      	ldr	r2, [r7, #20]
 800d34e:	4619      	mov	r1, r3
 800d350:	f000 fe44 	bl	800dfdc <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800d354:	4b20      	ldr	r3, [pc, #128]	; (800d3d8 <dhcp_reboot+0x160>)
 800d356:	6818      	ldr	r0, [r3, #0]
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	9300      	str	r3, [sp, #0]
 800d35c:	2343      	movs	r3, #67	; 0x43
 800d35e:	4a1f      	ldr	r2, [pc, #124]	; (800d3dc <dhcp_reboot+0x164>)
 800d360:	6979      	ldr	r1, [r7, #20]
 800d362:	f7fe fd03 	bl	800bd6c <udp_sendto_if>
 800d366:	4603      	mov	r3, r0
 800d368:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800d36a:	6978      	ldr	r0, [r7, #20]
 800d36c:	f7f8 fe3a 	bl	8005fe4 <pbuf_free>
 800d370:	e001      	b.n	800d376 <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800d372:	23ff      	movs	r3, #255	; 0xff
 800d374:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800d376:	69bb      	ldr	r3, [r7, #24]
 800d378:	799b      	ldrb	r3, [r3, #6]
 800d37a:	2bff      	cmp	r3, #255	; 0xff
 800d37c:	d005      	beq.n	800d38a <dhcp_reboot+0x112>
    dhcp->tries++;
 800d37e:	69bb      	ldr	r3, [r7, #24]
 800d380:	799b      	ldrb	r3, [r3, #6]
 800d382:	3301      	adds	r3, #1
 800d384:	b2da      	uxtb	r2, r3
 800d386:	69bb      	ldr	r3, [r7, #24]
 800d388:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 800d38a:	69bb      	ldr	r3, [r7, #24]
 800d38c:	799b      	ldrb	r3, [r3, #6]
 800d38e:	2b09      	cmp	r3, #9
 800d390:	d80a      	bhi.n	800d3a8 <dhcp_reboot+0x130>
 800d392:	69bb      	ldr	r3, [r7, #24]
 800d394:	799b      	ldrb	r3, [r3, #6]
 800d396:	b29b      	uxth	r3, r3
 800d398:	461a      	mov	r2, r3
 800d39a:	0152      	lsls	r2, r2, #5
 800d39c:	1ad2      	subs	r2, r2, r3
 800d39e:	0092      	lsls	r2, r2, #2
 800d3a0:	4413      	add	r3, r2
 800d3a2:	00db      	lsls	r3, r3, #3
 800d3a4:	b29b      	uxth	r3, r3
 800d3a6:	e001      	b.n	800d3ac <dhcp_reboot+0x134>
 800d3a8:	f242 7310 	movw	r3, #10000	; 0x2710
 800d3ac:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800d3ae:	89fb      	ldrh	r3, [r7, #14]
 800d3b0:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800d3b4:	4a0a      	ldr	r2, [pc, #40]	; (800d3e0 <dhcp_reboot+0x168>)
 800d3b6:	fb82 1203 	smull	r1, r2, r2, r3
 800d3ba:	1152      	asrs	r2, r2, #5
 800d3bc:	17db      	asrs	r3, r3, #31
 800d3be:	1ad3      	subs	r3, r2, r3
 800d3c0:	b29a      	uxth	r2, r3
 800d3c2:	69bb      	ldr	r3, [r7, #24]
 800d3c4:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800d3c6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d3ca:	4618      	mov	r0, r3
 800d3cc:	3720      	adds	r7, #32
 800d3ce:	46bd      	mov	sp, r7
 800d3d0:	bdb0      	pop	{r4, r5, r7, pc}
 800d3d2:	bf00      	nop
 800d3d4:	2000002c 	.word	0x2000002c
 800d3d8:	20007cdc 	.word	0x20007cdc
 800d3dc:	08014674 	.word	0x08014674
 800d3e0:	10624dd3 	.word	0x10624dd3

0800d3e4 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 800d3e4:	b5b0      	push	{r4, r5, r7, lr}
 800d3e6:	b08a      	sub	sp, #40	; 0x28
 800d3e8:	af02      	add	r7, sp, #8
 800d3ea:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3f0:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 800d3f2:	69fb      	ldr	r3, [r7, #28]
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	f000 8084 	beq.w	800d502 <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 800d3fa:	69fb      	ldr	r3, [r7, #28]
 800d3fc:	795b      	ldrb	r3, [r3, #5]
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	f000 8081 	beq.w	800d506 <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 800d404:	69fb      	ldr	r3, [r7, #28]
 800d406:	699b      	ldr	r3, [r3, #24]
 800d408:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 800d40a:	69fb      	ldr	r3, [r7, #28]
 800d40c:	2200      	movs	r2, #0
 800d40e:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 800d410:	69fb      	ldr	r3, [r7, #28]
 800d412:	2200      	movs	r2, #0
 800d414:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 800d416:	69fb      	ldr	r3, [r7, #28]
 800d418:	2200      	movs	r2, #0
 800d41a:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 800d41c:	69fb      	ldr	r3, [r7, #28]
 800d41e:	2200      	movs	r2, #0
 800d420:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 800d422:	69fb      	ldr	r3, [r7, #28]
 800d424:	2200      	movs	r2, #0
 800d426:	631a      	str	r2, [r3, #48]	; 0x30
 800d428:	69fb      	ldr	r3, [r7, #28]
 800d42a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d42c:	69fb      	ldr	r3, [r7, #28]
 800d42e:	62da      	str	r2, [r3, #44]	; 0x2c
 800d430:	69fb      	ldr	r3, [r7, #28]
 800d432:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d434:	69fb      	ldr	r3, [r7, #28]
 800d436:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 800d438:	69fb      	ldr	r3, [r7, #28]
 800d43a:	2200      	movs	r2, #0
 800d43c:	829a      	strh	r2, [r3, #20]
 800d43e:	69fb      	ldr	r3, [r7, #28]
 800d440:	8a9a      	ldrh	r2, [r3, #20]
 800d442:	69fb      	ldr	r3, [r7, #28]
 800d444:	825a      	strh	r2, [r3, #18]
 800d446:	69fb      	ldr	r3, [r7, #28]
 800d448:	8a5a      	ldrh	r2, [r3, #18]
 800d44a:	69fb      	ldr	r3, [r7, #28]
 800d44c:	821a      	strh	r2, [r3, #16]
 800d44e:	69fb      	ldr	r3, [r7, #28]
 800d450:	8a1a      	ldrh	r2, [r3, #16]
 800d452:	69fb      	ldr	r3, [r7, #28]
 800d454:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 800d456:	6878      	ldr	r0, [r7, #4]
 800d458:	f000 fdee 	bl	800e038 <dhcp_supplied_address>
 800d45c:	4603      	mov	r3, r0
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d03b      	beq.n	800d4da <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 800d462:	f107 030e 	add.w	r3, r7, #14
 800d466:	2207      	movs	r2, #7
 800d468:	69f9      	ldr	r1, [r7, #28]
 800d46a:	6878      	ldr	r0, [r7, #4]
 800d46c:	f000 fce0 	bl	800de30 <dhcp_create_msg>
 800d470:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 800d472:	69bb      	ldr	r3, [r7, #24]
 800d474:	2b00      	cmp	r3, #0
 800d476:	d030      	beq.n	800d4da <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800d478:	69bb      	ldr	r3, [r7, #24]
 800d47a:	685b      	ldr	r3, [r3, #4]
 800d47c:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 800d47e:	89f8      	ldrh	r0, [r7, #14]
 800d480:	697b      	ldr	r3, [r7, #20]
 800d482:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800d486:	2304      	movs	r3, #4
 800d488:	2236      	movs	r2, #54	; 0x36
 800d48a:	f000 f85f 	bl	800d54c <dhcp_option>
 800d48e:	4603      	mov	r3, r0
 800d490:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 800d492:	89fc      	ldrh	r4, [r7, #14]
 800d494:	697b      	ldr	r3, [r7, #20]
 800d496:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800d49a:	693b      	ldr	r3, [r7, #16]
 800d49c:	4618      	mov	r0, r3
 800d49e:	f7f7 f9b4 	bl	800480a <lwip_htonl>
 800d4a2:	4603      	mov	r3, r0
 800d4a4:	461a      	mov	r2, r3
 800d4a6:	4629      	mov	r1, r5
 800d4a8:	4620      	mov	r0, r4
 800d4aa:	f000 f8db 	bl	800d664 <dhcp_option_long>
 800d4ae:	4603      	mov	r3, r0
 800d4b0:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800d4b2:	89f8      	ldrh	r0, [r7, #14]
 800d4b4:	697b      	ldr	r3, [r7, #20]
 800d4b6:	33f0      	adds	r3, #240	; 0xf0
 800d4b8:	69ba      	ldr	r2, [r7, #24]
 800d4ba:	4619      	mov	r1, r3
 800d4bc:	f000 fd8e 	bl	800dfdc <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800d4c0:	4b13      	ldr	r3, [pc, #76]	; (800d510 <dhcp_release_and_stop+0x12c>)
 800d4c2:	6818      	ldr	r0, [r3, #0]
 800d4c4:	f107 0210 	add.w	r2, r7, #16
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	9300      	str	r3, [sp, #0]
 800d4cc:	2343      	movs	r3, #67	; 0x43
 800d4ce:	69b9      	ldr	r1, [r7, #24]
 800d4d0:	f7fe fc4c 	bl	800bd6c <udp_sendto_if>
      pbuf_free(p_out);
 800d4d4:	69b8      	ldr	r0, [r7, #24]
 800d4d6:	f7f8 fd85 	bl	8005fe4 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 800d4da:	4b0e      	ldr	r3, [pc, #56]	; (800d514 <dhcp_release_and_stop+0x130>)
 800d4dc:	4a0d      	ldr	r2, [pc, #52]	; (800d514 <dhcp_release_and_stop+0x130>)
 800d4de:	490d      	ldr	r1, [pc, #52]	; (800d514 <dhcp_release_and_stop+0x130>)
 800d4e0:	6878      	ldr	r0, [r7, #4]
 800d4e2:	f7f8 f8bf 	bl	8005664 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 800d4e6:	2100      	movs	r1, #0
 800d4e8:	69f8      	ldr	r0, [r7, #28]
 800d4ea:	f000 f815 	bl	800d518 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 800d4ee:	69fb      	ldr	r3, [r7, #28]
 800d4f0:	791b      	ldrb	r3, [r3, #4]
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d008      	beq.n	800d508 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 800d4f6:	f7fe ff85 	bl	800c404 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 800d4fa:	69fb      	ldr	r3, [r7, #28]
 800d4fc:	2200      	movs	r2, #0
 800d4fe:	711a      	strb	r2, [r3, #4]
 800d500:	e002      	b.n	800d508 <dhcp_release_and_stop+0x124>
    return;
 800d502:	bf00      	nop
 800d504:	e000      	b.n	800d508 <dhcp_release_and_stop+0x124>
    return;
 800d506:	bf00      	nop
  }
}
 800d508:	3720      	adds	r7, #32
 800d50a:	46bd      	mov	sp, r7
 800d50c:	bdb0      	pop	{r4, r5, r7, pc}
 800d50e:	bf00      	nop
 800d510:	20007cdc 	.word	0x20007cdc
 800d514:	08014670 	.word	0x08014670

0800d518 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 800d518:	b480      	push	{r7}
 800d51a:	b083      	sub	sp, #12
 800d51c:	af00      	add	r7, sp, #0
 800d51e:	6078      	str	r0, [r7, #4]
 800d520:	460b      	mov	r3, r1
 800d522:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	795b      	ldrb	r3, [r3, #5]
 800d528:	78fa      	ldrb	r2, [r7, #3]
 800d52a:	429a      	cmp	r2, r3
 800d52c:	d008      	beq.n	800d540 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	78fa      	ldrb	r2, [r7, #3]
 800d532:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	2200      	movs	r2, #0
 800d538:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	2200      	movs	r2, #0
 800d53e:	811a      	strh	r2, [r3, #8]
  }
}
 800d540:	bf00      	nop
 800d542:	370c      	adds	r7, #12
 800d544:	46bd      	mov	sp, r7
 800d546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d54a:	4770      	bx	lr

0800d54c <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 800d54c:	b580      	push	{r7, lr}
 800d54e:	b082      	sub	sp, #8
 800d550:	af00      	add	r7, sp, #0
 800d552:	6039      	str	r1, [r7, #0]
 800d554:	4611      	mov	r1, r2
 800d556:	461a      	mov	r2, r3
 800d558:	4603      	mov	r3, r0
 800d55a:	80fb      	strh	r3, [r7, #6]
 800d55c:	460b      	mov	r3, r1
 800d55e:	717b      	strb	r3, [r7, #5]
 800d560:	4613      	mov	r3, r2
 800d562:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 800d564:	88fa      	ldrh	r2, [r7, #6]
 800d566:	793b      	ldrb	r3, [r7, #4]
 800d568:	4413      	add	r3, r2
 800d56a:	3302      	adds	r3, #2
 800d56c:	2b44      	cmp	r3, #68	; 0x44
 800d56e:	d906      	bls.n	800d57e <dhcp_option+0x32>
 800d570:	4b0d      	ldr	r3, [pc, #52]	; (800d5a8 <dhcp_option+0x5c>)
 800d572:	f240 529a 	movw	r2, #1434	; 0x59a
 800d576:	490d      	ldr	r1, [pc, #52]	; (800d5ac <dhcp_option+0x60>)
 800d578:	480d      	ldr	r0, [pc, #52]	; (800d5b0 <dhcp_option+0x64>)
 800d57a:	f003 f8db 	bl	8010734 <iprintf>
  options[options_out_len++] = option_type;
 800d57e:	88fb      	ldrh	r3, [r7, #6]
 800d580:	1c5a      	adds	r2, r3, #1
 800d582:	80fa      	strh	r2, [r7, #6]
 800d584:	461a      	mov	r2, r3
 800d586:	683b      	ldr	r3, [r7, #0]
 800d588:	4413      	add	r3, r2
 800d58a:	797a      	ldrb	r2, [r7, #5]
 800d58c:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 800d58e:	88fb      	ldrh	r3, [r7, #6]
 800d590:	1c5a      	adds	r2, r3, #1
 800d592:	80fa      	strh	r2, [r7, #6]
 800d594:	461a      	mov	r2, r3
 800d596:	683b      	ldr	r3, [r7, #0]
 800d598:	4413      	add	r3, r2
 800d59a:	793a      	ldrb	r2, [r7, #4]
 800d59c:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800d59e:	88fb      	ldrh	r3, [r7, #6]
}
 800d5a0:	4618      	mov	r0, r3
 800d5a2:	3708      	adds	r7, #8
 800d5a4:	46bd      	mov	sp, r7
 800d5a6:	bd80      	pop	{r7, pc}
 800d5a8:	08013b08 	.word	0x08013b08
 800d5ac:	08013c9c 	.word	0x08013c9c
 800d5b0:	08013b68 	.word	0x08013b68

0800d5b4 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 800d5b4:	b580      	push	{r7, lr}
 800d5b6:	b082      	sub	sp, #8
 800d5b8:	af00      	add	r7, sp, #0
 800d5ba:	4603      	mov	r3, r0
 800d5bc:	6039      	str	r1, [r7, #0]
 800d5be:	80fb      	strh	r3, [r7, #6]
 800d5c0:	4613      	mov	r3, r2
 800d5c2:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 800d5c4:	88fb      	ldrh	r3, [r7, #6]
 800d5c6:	2b43      	cmp	r3, #67	; 0x43
 800d5c8:	d906      	bls.n	800d5d8 <dhcp_option_byte+0x24>
 800d5ca:	4b0a      	ldr	r3, [pc, #40]	; (800d5f4 <dhcp_option_byte+0x40>)
 800d5cc:	f240 52a6 	movw	r2, #1446	; 0x5a6
 800d5d0:	4909      	ldr	r1, [pc, #36]	; (800d5f8 <dhcp_option_byte+0x44>)
 800d5d2:	480a      	ldr	r0, [pc, #40]	; (800d5fc <dhcp_option_byte+0x48>)
 800d5d4:	f003 f8ae 	bl	8010734 <iprintf>
  options[options_out_len++] = value;
 800d5d8:	88fb      	ldrh	r3, [r7, #6]
 800d5da:	1c5a      	adds	r2, r3, #1
 800d5dc:	80fa      	strh	r2, [r7, #6]
 800d5de:	461a      	mov	r2, r3
 800d5e0:	683b      	ldr	r3, [r7, #0]
 800d5e2:	4413      	add	r3, r2
 800d5e4:	797a      	ldrb	r2, [r7, #5]
 800d5e6:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800d5e8:	88fb      	ldrh	r3, [r7, #6]
}
 800d5ea:	4618      	mov	r0, r3
 800d5ec:	3708      	adds	r7, #8
 800d5ee:	46bd      	mov	sp, r7
 800d5f0:	bd80      	pop	{r7, pc}
 800d5f2:	bf00      	nop
 800d5f4:	08013b08 	.word	0x08013b08
 800d5f8:	08013ce0 	.word	0x08013ce0
 800d5fc:	08013b68 	.word	0x08013b68

0800d600 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 800d600:	b580      	push	{r7, lr}
 800d602:	b082      	sub	sp, #8
 800d604:	af00      	add	r7, sp, #0
 800d606:	4603      	mov	r3, r0
 800d608:	6039      	str	r1, [r7, #0]
 800d60a:	80fb      	strh	r3, [r7, #6]
 800d60c:	4613      	mov	r3, r2
 800d60e:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 800d610:	88fb      	ldrh	r3, [r7, #6]
 800d612:	3302      	adds	r3, #2
 800d614:	2b44      	cmp	r3, #68	; 0x44
 800d616:	d906      	bls.n	800d626 <dhcp_option_short+0x26>
 800d618:	4b0f      	ldr	r3, [pc, #60]	; (800d658 <dhcp_option_short+0x58>)
 800d61a:	f240 52ae 	movw	r2, #1454	; 0x5ae
 800d61e:	490f      	ldr	r1, [pc, #60]	; (800d65c <dhcp_option_short+0x5c>)
 800d620:	480f      	ldr	r0, [pc, #60]	; (800d660 <dhcp_option_short+0x60>)
 800d622:	f003 f887 	bl	8010734 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 800d626:	88bb      	ldrh	r3, [r7, #4]
 800d628:	0a1b      	lsrs	r3, r3, #8
 800d62a:	b29a      	uxth	r2, r3
 800d62c:	88fb      	ldrh	r3, [r7, #6]
 800d62e:	1c59      	adds	r1, r3, #1
 800d630:	80f9      	strh	r1, [r7, #6]
 800d632:	4619      	mov	r1, r3
 800d634:	683b      	ldr	r3, [r7, #0]
 800d636:	440b      	add	r3, r1
 800d638:	b2d2      	uxtb	r2, r2
 800d63a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 800d63c:	88fb      	ldrh	r3, [r7, #6]
 800d63e:	1c5a      	adds	r2, r3, #1
 800d640:	80fa      	strh	r2, [r7, #6]
 800d642:	461a      	mov	r2, r3
 800d644:	683b      	ldr	r3, [r7, #0]
 800d646:	4413      	add	r3, r2
 800d648:	88ba      	ldrh	r2, [r7, #4]
 800d64a:	b2d2      	uxtb	r2, r2
 800d64c:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800d64e:	88fb      	ldrh	r3, [r7, #6]
}
 800d650:	4618      	mov	r0, r3
 800d652:	3708      	adds	r7, #8
 800d654:	46bd      	mov	sp, r7
 800d656:	bd80      	pop	{r7, pc}
 800d658:	08013b08 	.word	0x08013b08
 800d65c:	08013d18 	.word	0x08013d18
 800d660:	08013b68 	.word	0x08013b68

0800d664 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 800d664:	b580      	push	{r7, lr}
 800d666:	b084      	sub	sp, #16
 800d668:	af00      	add	r7, sp, #0
 800d66a:	4603      	mov	r3, r0
 800d66c:	60b9      	str	r1, [r7, #8]
 800d66e:	607a      	str	r2, [r7, #4]
 800d670:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 800d672:	89fb      	ldrh	r3, [r7, #14]
 800d674:	3304      	adds	r3, #4
 800d676:	2b44      	cmp	r3, #68	; 0x44
 800d678:	d906      	bls.n	800d688 <dhcp_option_long+0x24>
 800d67a:	4b19      	ldr	r3, [pc, #100]	; (800d6e0 <dhcp_option_long+0x7c>)
 800d67c:	f240 52b7 	movw	r2, #1463	; 0x5b7
 800d680:	4918      	ldr	r1, [pc, #96]	; (800d6e4 <dhcp_option_long+0x80>)
 800d682:	4819      	ldr	r0, [pc, #100]	; (800d6e8 <dhcp_option_long+0x84>)
 800d684:	f003 f856 	bl	8010734 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	0e1a      	lsrs	r2, r3, #24
 800d68c:	89fb      	ldrh	r3, [r7, #14]
 800d68e:	1c59      	adds	r1, r3, #1
 800d690:	81f9      	strh	r1, [r7, #14]
 800d692:	4619      	mov	r1, r3
 800d694:	68bb      	ldr	r3, [r7, #8]
 800d696:	440b      	add	r3, r1
 800d698:	b2d2      	uxtb	r2, r2
 800d69a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	0c1a      	lsrs	r2, r3, #16
 800d6a0:	89fb      	ldrh	r3, [r7, #14]
 800d6a2:	1c59      	adds	r1, r3, #1
 800d6a4:	81f9      	strh	r1, [r7, #14]
 800d6a6:	4619      	mov	r1, r3
 800d6a8:	68bb      	ldr	r3, [r7, #8]
 800d6aa:	440b      	add	r3, r1
 800d6ac:	b2d2      	uxtb	r2, r2
 800d6ae:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	0a1a      	lsrs	r2, r3, #8
 800d6b4:	89fb      	ldrh	r3, [r7, #14]
 800d6b6:	1c59      	adds	r1, r3, #1
 800d6b8:	81f9      	strh	r1, [r7, #14]
 800d6ba:	4619      	mov	r1, r3
 800d6bc:	68bb      	ldr	r3, [r7, #8]
 800d6be:	440b      	add	r3, r1
 800d6c0:	b2d2      	uxtb	r2, r2
 800d6c2:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 800d6c4:	89fb      	ldrh	r3, [r7, #14]
 800d6c6:	1c5a      	adds	r2, r3, #1
 800d6c8:	81fa      	strh	r2, [r7, #14]
 800d6ca:	461a      	mov	r2, r3
 800d6cc:	68bb      	ldr	r3, [r7, #8]
 800d6ce:	4413      	add	r3, r2
 800d6d0:	687a      	ldr	r2, [r7, #4]
 800d6d2:	b2d2      	uxtb	r2, r2
 800d6d4:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800d6d6:	89fb      	ldrh	r3, [r7, #14]
}
 800d6d8:	4618      	mov	r0, r3
 800d6da:	3710      	adds	r7, #16
 800d6dc:	46bd      	mov	sp, r7
 800d6de:	bd80      	pop	{r7, pc}
 800d6e0:	08013b08 	.word	0x08013b08
 800d6e4:	08013d54 	.word	0x08013d54
 800d6e8:	08013b68 	.word	0x08013b68

0800d6ec <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 800d6ec:	b580      	push	{r7, lr}
 800d6ee:	b090      	sub	sp, #64	; 0x40
 800d6f0:	af00      	add	r7, sp, #0
 800d6f2:	6078      	str	r0, [r7, #4]
 800d6f4:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 800d6f6:	2300      	movs	r3, #0
 800d6f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 800d6fa:	2300      	movs	r3, #0
 800d6fc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 800d6fe:	2208      	movs	r2, #8
 800d700:	2100      	movs	r1, #0
 800d702:	48b5      	ldr	r0, [pc, #724]	; (800d9d8 <dhcp_parse_reply+0x2ec>)
 800d704:	f003 f80e 	bl	8010724 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	895b      	ldrh	r3, [r3, #10]
 800d70c:	2b2b      	cmp	r3, #43	; 0x2b
 800d70e:	d802      	bhi.n	800d716 <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 800d710:	f06f 0301 	mvn.w	r3, #1
 800d714:	e2a7      	b.n	800dc66 <dhcp_parse_reply+0x57a>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	685b      	ldr	r3, [r3, #4]
 800d71a:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 800d71c:	23f0      	movs	r3, #240	; 0xf0
 800d71e:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	891b      	ldrh	r3, [r3, #8]
 800d724:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 800d72a:	e00c      	b.n	800d746 <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 800d72c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d72e:	895b      	ldrh	r3, [r3, #10]
 800d730:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800d732:	1ad3      	subs	r3, r2, r3
 800d734:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 800d736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d738:	895b      	ldrh	r3, [r3, #10]
 800d73a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800d73c:	1ad3      	subs	r3, r2, r3
 800d73e:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 800d740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 800d746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d004      	beq.n	800d756 <dhcp_parse_reply+0x6a>
 800d74c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d74e:	895b      	ldrh	r3, [r3, #10]
 800d750:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800d752:	429a      	cmp	r2, r3
 800d754:	d2ea      	bcs.n	800d72c <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 800d756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d102      	bne.n	800d762 <dhcp_parse_reply+0x76>
    return ERR_BUF;
 800d75c:	f06f 0301 	mvn.w	r3, #1
 800d760:	e281      	b.n	800dc66 <dhcp_parse_reply+0x57a>
  }
  offset = options_idx;
 800d762:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d764:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 800d766:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800d768:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 800d76a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d76c:	685b      	ldr	r3, [r3, #4]
 800d76e:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 800d770:	e239      	b.n	800dbe6 <dhcp_parse_reply+0x4fa>
    u8_t op = options[offset];
 800d772:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800d774:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d776:	4413      	add	r3, r2
 800d778:	781b      	ldrb	r3, [r3, #0]
 800d77a:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 800d77c:	2300      	movs	r3, #0
 800d77e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 800d782:	f04f 33ff 	mov.w	r3, #4294967295
 800d786:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 800d788:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800d78a:	3302      	adds	r3, #2
 800d78c:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 800d78e:	8bfa      	ldrh	r2, [r7, #30]
 800d790:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800d792:	429a      	cmp	r2, r3
 800d794:	d202      	bcs.n	800d79c <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 800d796:	f06f 0301 	mvn.w	r3, #1
 800d79a:	e264      	b.n	800dc66 <dhcp_parse_reply+0x57a>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 800d79c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800d79e:	3301      	adds	r3, #1
 800d7a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d7a2:	8952      	ldrh	r2, [r2, #10]
 800d7a4:	4293      	cmp	r3, r2
 800d7a6:	da07      	bge.n	800d7b8 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 800d7a8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800d7aa:	3301      	adds	r3, #1
 800d7ac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d7ae:	4413      	add	r3, r2
 800d7b0:	781b      	ldrb	r3, [r3, #0]
 800d7b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d7b6:	e00b      	b.n	800d7d0 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 800d7b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d004      	beq.n	800d7ca <dhcp_parse_reply+0xde>
 800d7c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	685b      	ldr	r3, [r3, #4]
 800d7c6:	781b      	ldrb	r3, [r3, #0]
 800d7c8:	e000      	b.n	800d7cc <dhcp_parse_reply+0xe0>
 800d7ca:	2300      	movs	r3, #0
 800d7cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 800d7d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d7d4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 800d7d8:	7dfb      	ldrb	r3, [r7, #23]
 800d7da:	2b3b      	cmp	r3, #59	; 0x3b
 800d7dc:	f200 812c 	bhi.w	800da38 <dhcp_parse_reply+0x34c>
 800d7e0:	a201      	add	r2, pc, #4	; (adr r2, 800d7e8 <dhcp_parse_reply+0xfc>)
 800d7e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7e6:	bf00      	nop
 800d7e8:	0800d8d9 	.word	0x0800d8d9
 800d7ec:	0800d8e9 	.word	0x0800d8e9
 800d7f0:	0800da39 	.word	0x0800da39
 800d7f4:	0800d90b 	.word	0x0800d90b
 800d7f8:	0800da39 	.word	0x0800da39
 800d7fc:	0800da39 	.word	0x0800da39
 800d800:	0800da39 	.word	0x0800da39
 800d804:	0800da39 	.word	0x0800da39
 800d808:	0800da39 	.word	0x0800da39
 800d80c:	0800da39 	.word	0x0800da39
 800d810:	0800da39 	.word	0x0800da39
 800d814:	0800da39 	.word	0x0800da39
 800d818:	0800da39 	.word	0x0800da39
 800d81c:	0800da39 	.word	0x0800da39
 800d820:	0800da39 	.word	0x0800da39
 800d824:	0800da39 	.word	0x0800da39
 800d828:	0800da39 	.word	0x0800da39
 800d82c:	0800da39 	.word	0x0800da39
 800d830:	0800da39 	.word	0x0800da39
 800d834:	0800da39 	.word	0x0800da39
 800d838:	0800da39 	.word	0x0800da39
 800d83c:	0800da39 	.word	0x0800da39
 800d840:	0800da39 	.word	0x0800da39
 800d844:	0800da39 	.word	0x0800da39
 800d848:	0800da39 	.word	0x0800da39
 800d84c:	0800da39 	.word	0x0800da39
 800d850:	0800da39 	.word	0x0800da39
 800d854:	0800da39 	.word	0x0800da39
 800d858:	0800da39 	.word	0x0800da39
 800d85c:	0800da39 	.word	0x0800da39
 800d860:	0800da39 	.word	0x0800da39
 800d864:	0800da39 	.word	0x0800da39
 800d868:	0800da39 	.word	0x0800da39
 800d86c:	0800da39 	.word	0x0800da39
 800d870:	0800da39 	.word	0x0800da39
 800d874:	0800da39 	.word	0x0800da39
 800d878:	0800da39 	.word	0x0800da39
 800d87c:	0800da39 	.word	0x0800da39
 800d880:	0800da39 	.word	0x0800da39
 800d884:	0800da39 	.word	0x0800da39
 800d888:	0800da39 	.word	0x0800da39
 800d88c:	0800da39 	.word	0x0800da39
 800d890:	0800da39 	.word	0x0800da39
 800d894:	0800da39 	.word	0x0800da39
 800d898:	0800da39 	.word	0x0800da39
 800d89c:	0800da39 	.word	0x0800da39
 800d8a0:	0800da39 	.word	0x0800da39
 800d8a4:	0800da39 	.word	0x0800da39
 800d8a8:	0800da39 	.word	0x0800da39
 800d8ac:	0800da39 	.word	0x0800da39
 800d8b0:	0800da39 	.word	0x0800da39
 800d8b4:	0800d937 	.word	0x0800d937
 800d8b8:	0800d959 	.word	0x0800d959
 800d8bc:	0800d995 	.word	0x0800d995
 800d8c0:	0800d9b7 	.word	0x0800d9b7
 800d8c4:	0800da39 	.word	0x0800da39
 800d8c8:	0800da39 	.word	0x0800da39
 800d8cc:	0800da39 	.word	0x0800da39
 800d8d0:	0800d9f5 	.word	0x0800d9f5
 800d8d4:	0800da17 	.word	0x0800da17
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 800d8d8:	2300      	movs	r3, #0
 800d8da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d8de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d8e2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 800d8e6:	e0ab      	b.n	800da40 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800d8e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d8ec:	2b04      	cmp	r3, #4
 800d8ee:	d009      	beq.n	800d904 <dhcp_parse_reply+0x218>
 800d8f0:	4b3a      	ldr	r3, [pc, #232]	; (800d9dc <dhcp_parse_reply+0x2f0>)
 800d8f2:	f240 622e 	movw	r2, #1582	; 0x62e
 800d8f6:	493a      	ldr	r1, [pc, #232]	; (800d9e0 <dhcp_parse_reply+0x2f4>)
 800d8f8:	483a      	ldr	r0, [pc, #232]	; (800d9e4 <dhcp_parse_reply+0x2f8>)
 800d8fa:	f002 ff1b 	bl	8010734 <iprintf>
 800d8fe:	f06f 0305 	mvn.w	r3, #5
 800d902:	e1b0      	b.n	800dc66 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 800d904:	2306      	movs	r3, #6
 800d906:	623b      	str	r3, [r7, #32]
        break;
 800d908:	e09a      	b.n	800da40 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 800d90a:	2304      	movs	r3, #4
 800d90c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 800d910:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800d914:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d918:	429a      	cmp	r2, r3
 800d91a:	d209      	bcs.n	800d930 <dhcp_parse_reply+0x244>
 800d91c:	4b2f      	ldr	r3, [pc, #188]	; (800d9dc <dhcp_parse_reply+0x2f0>)
 800d91e:	f240 6233 	movw	r2, #1587	; 0x633
 800d922:	4931      	ldr	r1, [pc, #196]	; (800d9e8 <dhcp_parse_reply+0x2fc>)
 800d924:	482f      	ldr	r0, [pc, #188]	; (800d9e4 <dhcp_parse_reply+0x2f8>)
 800d926:	f002 ff05 	bl	8010734 <iprintf>
 800d92a:	f06f 0305 	mvn.w	r3, #5
 800d92e:	e19a      	b.n	800dc66 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 800d930:	2307      	movs	r3, #7
 800d932:	623b      	str	r3, [r7, #32]
        break;
 800d934:	e084      	b.n	800da40 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800d936:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d93a:	2b04      	cmp	r3, #4
 800d93c:	d009      	beq.n	800d952 <dhcp_parse_reply+0x266>
 800d93e:	4b27      	ldr	r3, [pc, #156]	; (800d9dc <dhcp_parse_reply+0x2f0>)
 800d940:	f240 6241 	movw	r2, #1601	; 0x641
 800d944:	4926      	ldr	r1, [pc, #152]	; (800d9e0 <dhcp_parse_reply+0x2f4>)
 800d946:	4827      	ldr	r0, [pc, #156]	; (800d9e4 <dhcp_parse_reply+0x2f8>)
 800d948:	f002 fef4 	bl	8010734 <iprintf>
 800d94c:	f06f 0305 	mvn.w	r3, #5
 800d950:	e189      	b.n	800dc66 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 800d952:	2303      	movs	r3, #3
 800d954:	623b      	str	r3, [r7, #32]
        break;
 800d956:	e073      	b.n	800da40 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 800d958:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d95c:	2b01      	cmp	r3, #1
 800d95e:	d009      	beq.n	800d974 <dhcp_parse_reply+0x288>
 800d960:	4b1e      	ldr	r3, [pc, #120]	; (800d9dc <dhcp_parse_reply+0x2f0>)
 800d962:	f240 624f 	movw	r2, #1615	; 0x64f
 800d966:	4921      	ldr	r1, [pc, #132]	; (800d9ec <dhcp_parse_reply+0x300>)
 800d968:	481e      	ldr	r0, [pc, #120]	; (800d9e4 <dhcp_parse_reply+0x2f8>)
 800d96a:	f002 fee3 	bl	8010734 <iprintf>
 800d96e:	f06f 0305 	mvn.w	r3, #5
 800d972:	e178      	b.n	800dc66 <dhcp_parse_reply+0x57a>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 800d974:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d976:	2bf0      	cmp	r3, #240	; 0xf0
 800d978:	d009      	beq.n	800d98e <dhcp_parse_reply+0x2a2>
 800d97a:	4b18      	ldr	r3, [pc, #96]	; (800d9dc <dhcp_parse_reply+0x2f0>)
 800d97c:	f240 6251 	movw	r2, #1617	; 0x651
 800d980:	491b      	ldr	r1, [pc, #108]	; (800d9f0 <dhcp_parse_reply+0x304>)
 800d982:	4818      	ldr	r0, [pc, #96]	; (800d9e4 <dhcp_parse_reply+0x2f8>)
 800d984:	f002 fed6 	bl	8010734 <iprintf>
 800d988:	f06f 0305 	mvn.w	r3, #5
 800d98c:	e16b      	b.n	800dc66 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 800d98e:	2300      	movs	r3, #0
 800d990:	623b      	str	r3, [r7, #32]
        break;
 800d992:	e055      	b.n	800da40 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 800d994:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d998:	2b01      	cmp	r3, #1
 800d99a:	d009      	beq.n	800d9b0 <dhcp_parse_reply+0x2c4>
 800d99c:	4b0f      	ldr	r3, [pc, #60]	; (800d9dc <dhcp_parse_reply+0x2f0>)
 800d99e:	f240 6255 	movw	r2, #1621	; 0x655
 800d9a2:	4912      	ldr	r1, [pc, #72]	; (800d9ec <dhcp_parse_reply+0x300>)
 800d9a4:	480f      	ldr	r0, [pc, #60]	; (800d9e4 <dhcp_parse_reply+0x2f8>)
 800d9a6:	f002 fec5 	bl	8010734 <iprintf>
 800d9aa:	f06f 0305 	mvn.w	r3, #5
 800d9ae:	e15a      	b.n	800dc66 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 800d9b0:	2301      	movs	r3, #1
 800d9b2:	623b      	str	r3, [r7, #32]
        break;
 800d9b4:	e044      	b.n	800da40 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800d9b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d9ba:	2b04      	cmp	r3, #4
 800d9bc:	d009      	beq.n	800d9d2 <dhcp_parse_reply+0x2e6>
 800d9be:	4b07      	ldr	r3, [pc, #28]	; (800d9dc <dhcp_parse_reply+0x2f0>)
 800d9c0:	f240 6259 	movw	r2, #1625	; 0x659
 800d9c4:	4906      	ldr	r1, [pc, #24]	; (800d9e0 <dhcp_parse_reply+0x2f4>)
 800d9c6:	4807      	ldr	r0, [pc, #28]	; (800d9e4 <dhcp_parse_reply+0x2f8>)
 800d9c8:	f002 feb4 	bl	8010734 <iprintf>
 800d9cc:	f06f 0305 	mvn.w	r3, #5
 800d9d0:	e149      	b.n	800dc66 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 800d9d2:	2302      	movs	r3, #2
 800d9d4:	623b      	str	r3, [r7, #32]
        break;
 800d9d6:	e033      	b.n	800da40 <dhcp_parse_reply+0x354>
 800d9d8:	20007cd4 	.word	0x20007cd4
 800d9dc:	08013b08 	.word	0x08013b08
 800d9e0:	08013d90 	.word	0x08013d90
 800d9e4:	08013b68 	.word	0x08013b68
 800d9e8:	08013d9c 	.word	0x08013d9c
 800d9ec:	08013db0 	.word	0x08013db0
 800d9f0:	08013dbc 	.word	0x08013dbc
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800d9f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d9f8:	2b04      	cmp	r3, #4
 800d9fa:	d009      	beq.n	800da10 <dhcp_parse_reply+0x324>
 800d9fc:	4b9c      	ldr	r3, [pc, #624]	; (800dc70 <dhcp_parse_reply+0x584>)
 800d9fe:	f240 625d 	movw	r2, #1629	; 0x65d
 800da02:	499c      	ldr	r1, [pc, #624]	; (800dc74 <dhcp_parse_reply+0x588>)
 800da04:	489c      	ldr	r0, [pc, #624]	; (800dc78 <dhcp_parse_reply+0x58c>)
 800da06:	f002 fe95 	bl	8010734 <iprintf>
 800da0a:	f06f 0305 	mvn.w	r3, #5
 800da0e:	e12a      	b.n	800dc66 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T1;
 800da10:	2304      	movs	r3, #4
 800da12:	623b      	str	r3, [r7, #32]
        break;
 800da14:	e014      	b.n	800da40 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800da16:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800da1a:	2b04      	cmp	r3, #4
 800da1c:	d009      	beq.n	800da32 <dhcp_parse_reply+0x346>
 800da1e:	4b94      	ldr	r3, [pc, #592]	; (800dc70 <dhcp_parse_reply+0x584>)
 800da20:	f240 6261 	movw	r2, #1633	; 0x661
 800da24:	4993      	ldr	r1, [pc, #588]	; (800dc74 <dhcp_parse_reply+0x588>)
 800da26:	4894      	ldr	r0, [pc, #592]	; (800dc78 <dhcp_parse_reply+0x58c>)
 800da28:	f002 fe84 	bl	8010734 <iprintf>
 800da2c:	f06f 0305 	mvn.w	r3, #5
 800da30:	e119      	b.n	800dc66 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T2;
 800da32:	2305      	movs	r3, #5
 800da34:	623b      	str	r3, [r7, #32]
        break;
 800da36:	e003      	b.n	800da40 <dhcp_parse_reply+0x354>
      default:
        decode_len = 0;
 800da38:	2300      	movs	r3, #0
 800da3a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 800da3e:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 800da40:	7dfb      	ldrb	r3, [r7, #23]
 800da42:	2b00      	cmp	r3, #0
 800da44:	d103      	bne.n	800da4e <dhcp_parse_reply+0x362>
      offset++;
 800da46:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800da48:	3301      	adds	r3, #1
 800da4a:	877b      	strh	r3, [r7, #58]	; 0x3a
 800da4c:	e0a1      	b.n	800db92 <dhcp_parse_reply+0x4a6>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 800da4e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800da50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800da54:	4413      	add	r3, r2
 800da56:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 800da5a:	4293      	cmp	r3, r2
 800da5c:	dd02      	ble.n	800da64 <dhcp_parse_reply+0x378>
        /* overflow */
        return ERR_BUF;
 800da5e:	f06f 0301 	mvn.w	r3, #1
 800da62:	e100      	b.n	800dc66 <dhcp_parse_reply+0x57a>
      }
      offset = (u16_t)(offset + len + 2);
 800da64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800da68:	b29a      	uxth	r2, r3
 800da6a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800da6c:	4413      	add	r3, r2
 800da6e:	b29b      	uxth	r3, r3
 800da70:	3302      	adds	r3, #2
 800da72:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 800da74:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800da78:	2b00      	cmp	r3, #0
 800da7a:	f000 808a 	beq.w	800db92 <dhcp_parse_reply+0x4a6>
        u32_t value = 0;
 800da7e:	2300      	movs	r3, #0
 800da80:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 800da82:	6a3b      	ldr	r3, [r7, #32]
 800da84:	2b00      	cmp	r3, #0
 800da86:	db02      	blt.n	800da8e <dhcp_parse_reply+0x3a2>
 800da88:	6a3b      	ldr	r3, [r7, #32]
 800da8a:	2b07      	cmp	r3, #7
 800da8c:	dd06      	ble.n	800da9c <dhcp_parse_reply+0x3b0>
 800da8e:	4b78      	ldr	r3, [pc, #480]	; (800dc70 <dhcp_parse_reply+0x584>)
 800da90:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 800da94:	4979      	ldr	r1, [pc, #484]	; (800dc7c <dhcp_parse_reply+0x590>)
 800da96:	4878      	ldr	r0, [pc, #480]	; (800dc78 <dhcp_parse_reply+0x58c>)
 800da98:	f002 fe4c 	bl	8010734 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 800da9c:	4a78      	ldr	r2, [pc, #480]	; (800dc80 <dhcp_parse_reply+0x594>)
 800da9e:	6a3b      	ldr	r3, [r7, #32]
 800daa0:	4413      	add	r3, r2
 800daa2:	781b      	ldrb	r3, [r3, #0]
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d174      	bne.n	800db92 <dhcp_parse_reply+0x4a6>
          copy_len = LWIP_MIN(decode_len, 4);
 800daa8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800daac:	2b04      	cmp	r3, #4
 800daae:	bf28      	it	cs
 800dab0:	2304      	movcs	r3, #4
 800dab2:	b2db      	uxtb	r3, r3
 800dab4:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 800dab6:	8bfb      	ldrh	r3, [r7, #30]
 800dab8:	8aba      	ldrh	r2, [r7, #20]
 800daba:	f107 0108 	add.w	r1, r7, #8
 800dabe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dac0:	f7f8 fc8a 	bl	80063d8 <pbuf_copy_partial>
 800dac4:	4603      	mov	r3, r0
 800dac6:	461a      	mov	r2, r3
 800dac8:	8abb      	ldrh	r3, [r7, #20]
 800daca:	4293      	cmp	r3, r2
 800dacc:	d002      	beq.n	800dad4 <dhcp_parse_reply+0x3e8>
            return ERR_BUF;
 800dace:	f06f 0301 	mvn.w	r3, #1
 800dad2:	e0c8      	b.n	800dc66 <dhcp_parse_reply+0x57a>
          }
          if (decode_len > 4) {
 800dad4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dad8:	2b04      	cmp	r3, #4
 800dada:	d933      	bls.n	800db44 <dhcp_parse_reply+0x458>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 800dadc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dae0:	f003 0303 	and.w	r3, r3, #3
 800dae4:	b2db      	uxtb	r3, r3
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d009      	beq.n	800dafe <dhcp_parse_reply+0x412>
 800daea:	4b61      	ldr	r3, [pc, #388]	; (800dc70 <dhcp_parse_reply+0x584>)
 800daec:	f240 6281 	movw	r2, #1665	; 0x681
 800daf0:	4964      	ldr	r1, [pc, #400]	; (800dc84 <dhcp_parse_reply+0x598>)
 800daf2:	4861      	ldr	r0, [pc, #388]	; (800dc78 <dhcp_parse_reply+0x58c>)
 800daf4:	f002 fe1e 	bl	8010734 <iprintf>
 800daf8:	f06f 0305 	mvn.w	r3, #5
 800dafc:	e0b3      	b.n	800dc66 <dhcp_parse_reply+0x57a>
            dhcp_got_option(dhcp, decode_idx);
 800dafe:	4a60      	ldr	r2, [pc, #384]	; (800dc80 <dhcp_parse_reply+0x594>)
 800db00:	6a3b      	ldr	r3, [r7, #32]
 800db02:	4413      	add	r3, r2
 800db04:	2201      	movs	r2, #1
 800db06:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 800db08:	68bb      	ldr	r3, [r7, #8]
 800db0a:	4618      	mov	r0, r3
 800db0c:	f7f6 fe7d 	bl	800480a <lwip_htonl>
 800db10:	4602      	mov	r2, r0
 800db12:	495d      	ldr	r1, [pc, #372]	; (800dc88 <dhcp_parse_reply+0x59c>)
 800db14:	6a3b      	ldr	r3, [r7, #32]
 800db16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 800db1a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800db1e:	3b04      	subs	r3, #4
 800db20:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 800db24:	8bfb      	ldrh	r3, [r7, #30]
 800db26:	3304      	adds	r3, #4
 800db28:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 800db2a:	8a7a      	ldrh	r2, [r7, #18]
 800db2c:	8bfb      	ldrh	r3, [r7, #30]
 800db2e:	429a      	cmp	r2, r3
 800db30:	d202      	bcs.n	800db38 <dhcp_parse_reply+0x44c>
              /* overflow */
              return ERR_BUF;
 800db32:	f06f 0301 	mvn.w	r3, #1
 800db36:	e096      	b.n	800dc66 <dhcp_parse_reply+0x57a>
            }
            val_offset = next_val_offset;
 800db38:	8a7b      	ldrh	r3, [r7, #18]
 800db3a:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 800db3c:	6a3b      	ldr	r3, [r7, #32]
 800db3e:	3301      	adds	r3, #1
 800db40:	623b      	str	r3, [r7, #32]
            goto decode_next;
 800db42:	e79e      	b.n	800da82 <dhcp_parse_reply+0x396>
          } else if (decode_len == 4) {
 800db44:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800db48:	2b04      	cmp	r3, #4
 800db4a:	d106      	bne.n	800db5a <dhcp_parse_reply+0x46e>
            value = lwip_ntohl(value);
 800db4c:	68bb      	ldr	r3, [r7, #8]
 800db4e:	4618      	mov	r0, r3
 800db50:	f7f6 fe5b 	bl	800480a <lwip_htonl>
 800db54:	4603      	mov	r3, r0
 800db56:	60bb      	str	r3, [r7, #8]
 800db58:	e011      	b.n	800db7e <dhcp_parse_reply+0x492>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 800db5a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800db5e:	2b01      	cmp	r3, #1
 800db60:	d009      	beq.n	800db76 <dhcp_parse_reply+0x48a>
 800db62:	4b43      	ldr	r3, [pc, #268]	; (800dc70 <dhcp_parse_reply+0x584>)
 800db64:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 800db68:	4948      	ldr	r1, [pc, #288]	; (800dc8c <dhcp_parse_reply+0x5a0>)
 800db6a:	4843      	ldr	r0, [pc, #268]	; (800dc78 <dhcp_parse_reply+0x58c>)
 800db6c:	f002 fde2 	bl	8010734 <iprintf>
 800db70:	f06f 0305 	mvn.w	r3, #5
 800db74:	e077      	b.n	800dc66 <dhcp_parse_reply+0x57a>
            value = ((u8_t *)&value)[0];
 800db76:	f107 0308 	add.w	r3, r7, #8
 800db7a:	781b      	ldrb	r3, [r3, #0]
 800db7c:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 800db7e:	4a40      	ldr	r2, [pc, #256]	; (800dc80 <dhcp_parse_reply+0x594>)
 800db80:	6a3b      	ldr	r3, [r7, #32]
 800db82:	4413      	add	r3, r2
 800db84:	2201      	movs	r2, #1
 800db86:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 800db88:	68ba      	ldr	r2, [r7, #8]
 800db8a:	493f      	ldr	r1, [pc, #252]	; (800dc88 <dhcp_parse_reply+0x59c>)
 800db8c:	6a3b      	ldr	r3, [r7, #32]
 800db8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 800db92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db94:	895b      	ldrh	r3, [r3, #10]
 800db96:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800db98:	429a      	cmp	r2, r3
 800db9a:	d324      	bcc.n	800dbe6 <dhcp_parse_reply+0x4fa>
      offset = (u16_t)(offset - q->len);
 800db9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db9e:	895b      	ldrh	r3, [r3, #10]
 800dba0:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800dba2:	1ad3      	subs	r3, r2, r3
 800dba4:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 800dba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dba8:	895b      	ldrh	r3, [r3, #10]
 800dbaa:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800dbac:	1ad3      	subs	r3, r2, r3
 800dbae:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 800dbb0:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800dbb2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800dbb4:	429a      	cmp	r2, r3
 800dbb6:	d213      	bcs.n	800dbe0 <dhcp_parse_reply+0x4f4>
        q = q->next;
 800dbb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 800dbbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d109      	bne.n	800dbd8 <dhcp_parse_reply+0x4ec>
 800dbc4:	4b2a      	ldr	r3, [pc, #168]	; (800dc70 <dhcp_parse_reply+0x584>)
 800dbc6:	f240 629d 	movw	r2, #1693	; 0x69d
 800dbca:	4931      	ldr	r1, [pc, #196]	; (800dc90 <dhcp_parse_reply+0x5a4>)
 800dbcc:	482a      	ldr	r0, [pc, #168]	; (800dc78 <dhcp_parse_reply+0x58c>)
 800dbce:	f002 fdb1 	bl	8010734 <iprintf>
 800dbd2:	f06f 0305 	mvn.w	r3, #5
 800dbd6:	e046      	b.n	800dc66 <dhcp_parse_reply+0x57a>
        options = (u8_t *)q->payload;
 800dbd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbda:	685b      	ldr	r3, [r3, #4]
 800dbdc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dbde:	e002      	b.n	800dbe6 <dhcp_parse_reply+0x4fa>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 800dbe0:	f06f 0301 	mvn.w	r3, #1
 800dbe4:	e03f      	b.n	800dc66 <dhcp_parse_reply+0x57a>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 800dbe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d00a      	beq.n	800dc02 <dhcp_parse_reply+0x516>
 800dbec:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800dbee:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800dbf0:	429a      	cmp	r2, r3
 800dbf2:	d206      	bcs.n	800dc02 <dhcp_parse_reply+0x516>
 800dbf4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800dbf6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800dbf8:	4413      	add	r3, r2
 800dbfa:	781b      	ldrb	r3, [r3, #0]
 800dbfc:	2bff      	cmp	r3, #255	; 0xff
 800dbfe:	f47f adb8 	bne.w	800d772 <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 800dc02:	4b1f      	ldr	r3, [pc, #124]	; (800dc80 <dhcp_parse_reply+0x594>)
 800dc04:	781b      	ldrb	r3, [r3, #0]
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d018      	beq.n	800dc3c <dhcp_parse_reply+0x550>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 800dc0a:	4b1f      	ldr	r3, [pc, #124]	; (800dc88 <dhcp_parse_reply+0x59c>)
 800dc0c:	681b      	ldr	r3, [r3, #0]
 800dc0e:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 800dc10:	4b1b      	ldr	r3, [pc, #108]	; (800dc80 <dhcp_parse_reply+0x594>)
 800dc12:	2200      	movs	r2, #0
 800dc14:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 800dc16:	68fb      	ldr	r3, [r7, #12]
 800dc18:	2b01      	cmp	r3, #1
 800dc1a:	d102      	bne.n	800dc22 <dhcp_parse_reply+0x536>
      parse_file_as_options = 1;
 800dc1c:	2301      	movs	r3, #1
 800dc1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dc20:	e00c      	b.n	800dc3c <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	2b02      	cmp	r3, #2
 800dc26:	d102      	bne.n	800dc2e <dhcp_parse_reply+0x542>
      parse_sname_as_options = 1;
 800dc28:	2301      	movs	r3, #1
 800dc2a:	62bb      	str	r3, [r7, #40]	; 0x28
 800dc2c:	e006      	b.n	800dc3c <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	2b03      	cmp	r3, #3
 800dc32:	d103      	bne.n	800dc3c <dhcp_parse_reply+0x550>
      parse_sname_as_options = 1;
 800dc34:	2301      	movs	r3, #1
 800dc36:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 800dc38:	2301      	movs	r3, #1
 800dc3a:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 800dc3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d006      	beq.n	800dc50 <dhcp_parse_reply+0x564>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 800dc42:	2300      	movs	r3, #0
 800dc44:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 800dc46:	236c      	movs	r3, #108	; 0x6c
 800dc48:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 800dc4a:	23ec      	movs	r3, #236	; 0xec
 800dc4c:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 800dc4e:	e56a      	b.n	800d726 <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 800dc50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	d006      	beq.n	800dc64 <dhcp_parse_reply+0x578>
    parse_sname_as_options = 0;
 800dc56:	2300      	movs	r3, #0
 800dc58:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 800dc5a:	232c      	movs	r3, #44	; 0x2c
 800dc5c:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 800dc5e:	236c      	movs	r3, #108	; 0x6c
 800dc60:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 800dc62:	e560      	b.n	800d726 <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 800dc64:	2300      	movs	r3, #0
}
 800dc66:	4618      	mov	r0, r3
 800dc68:	3740      	adds	r7, #64	; 0x40
 800dc6a:	46bd      	mov	sp, r7
 800dc6c:	bd80      	pop	{r7, pc}
 800dc6e:	bf00      	nop
 800dc70:	08013b08 	.word	0x08013b08
 800dc74:	08013d90 	.word	0x08013d90
 800dc78:	08013b68 	.word	0x08013b68
 800dc7c:	08013dd4 	.word	0x08013dd4
 800dc80:	20007cd4 	.word	0x20007cd4
 800dc84:	08013de8 	.word	0x08013de8
 800dc88:	20007cb4 	.word	0x20007cb4
 800dc8c:	08013e00 	.word	0x08013e00
 800dc90:	08013e14 	.word	0x08013e14

0800dc94 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 800dc94:	b580      	push	{r7, lr}
 800dc96:	b08a      	sub	sp, #40	; 0x28
 800dc98:	af00      	add	r7, sp, #0
 800dc9a:	60f8      	str	r0, [r7, #12]
 800dc9c:	60b9      	str	r1, [r7, #8]
 800dc9e:	607a      	str	r2, [r7, #4]
 800dca0:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 800dca2:	4b60      	ldr	r3, [pc, #384]	; (800de24 <dhcp_recv+0x190>)
 800dca4:	685b      	ldr	r3, [r3, #4]
 800dca6:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800dca8:	6a3b      	ldr	r3, [r7, #32]
 800dcaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcac:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	685b      	ldr	r3, [r3, #4]
 800dcb2:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 800dcb4:	69fb      	ldr	r3, [r7, #28]
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	f000 809d 	beq.w	800ddf6 <dhcp_recv+0x162>
 800dcbc:	69fb      	ldr	r3, [r7, #28]
 800dcbe:	791b      	ldrb	r3, [r3, #4]
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	f000 8098 	beq.w	800ddf6 <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	895b      	ldrh	r3, [r3, #10]
 800dcca:	2b2b      	cmp	r3, #43	; 0x2b
 800dccc:	f240 8095 	bls.w	800ddfa <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 800dcd0:	69bb      	ldr	r3, [r7, #24]
 800dcd2:	781b      	ldrb	r3, [r3, #0]
 800dcd4:	2b02      	cmp	r3, #2
 800dcd6:	f040 8092 	bne.w	800ddfe <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800dcda:	2300      	movs	r3, #0
 800dcdc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800dce0:	e012      	b.n	800dd08 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 800dce2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dce6:	6a3a      	ldr	r2, [r7, #32]
 800dce8:	4413      	add	r3, r2
 800dcea:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 800dcee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dcf2:	69b9      	ldr	r1, [r7, #24]
 800dcf4:	440b      	add	r3, r1
 800dcf6:	7f1b      	ldrb	r3, [r3, #28]
 800dcf8:	429a      	cmp	r2, r3
 800dcfa:	f040 8082 	bne.w	800de02 <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800dcfe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dd02:	3301      	adds	r3, #1
 800dd04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800dd08:	6a3b      	ldr	r3, [r7, #32]
 800dd0a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800dd0e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800dd12:	429a      	cmp	r2, r3
 800dd14:	d203      	bcs.n	800dd1e <dhcp_recv+0x8a>
 800dd16:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dd1a:	2b05      	cmp	r3, #5
 800dd1c:	d9e1      	bls.n	800dce2 <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 800dd1e:	69bb      	ldr	r3, [r7, #24]
 800dd20:	685b      	ldr	r3, [r3, #4]
 800dd22:	4618      	mov	r0, r3
 800dd24:	f7f6 fd71 	bl	800480a <lwip_htonl>
 800dd28:	4602      	mov	r2, r0
 800dd2a:	69fb      	ldr	r3, [r7, #28]
 800dd2c:	681b      	ldr	r3, [r3, #0]
 800dd2e:	429a      	cmp	r2, r3
 800dd30:	d169      	bne.n	800de06 <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 800dd32:	69f9      	ldr	r1, [r7, #28]
 800dd34:	6878      	ldr	r0, [r7, #4]
 800dd36:	f7ff fcd9 	bl	800d6ec <dhcp_parse_reply>
 800dd3a:	4603      	mov	r3, r0
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d164      	bne.n	800de0a <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 800dd40:	4b39      	ldr	r3, [pc, #228]	; (800de28 <dhcp_recv+0x194>)
 800dd42:	785b      	ldrb	r3, [r3, #1]
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d062      	beq.n	800de0e <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	685b      	ldr	r3, [r3, #4]
 800dd4c:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 800dd4e:	4b37      	ldr	r3, [pc, #220]	; (800de2c <dhcp_recv+0x198>)
 800dd50:	685b      	ldr	r3, [r3, #4]
 800dd52:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 800dd54:	7cfb      	ldrb	r3, [r7, #19]
 800dd56:	2b05      	cmp	r3, #5
 800dd58:	d12a      	bne.n	800ddb0 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 800dd5a:	69fb      	ldr	r3, [r7, #28]
 800dd5c:	795b      	ldrb	r3, [r3, #5]
 800dd5e:	2b01      	cmp	r3, #1
 800dd60:	d112      	bne.n	800dd88 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 800dd62:	6979      	ldr	r1, [r7, #20]
 800dd64:	6a38      	ldr	r0, [r7, #32]
 800dd66:	f7fe fe17 	bl	800c998 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 800dd6a:	6a3b      	ldr	r3, [r7, #32]
 800dd6c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800dd70:	f003 0308 	and.w	r3, r3, #8
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d003      	beq.n	800dd80 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 800dd78:	6a38      	ldr	r0, [r7, #32]
 800dd7a:	f7fe fb87 	bl	800c48c <dhcp_check>
 800dd7e:	e049      	b.n	800de14 <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 800dd80:	6a38      	ldr	r0, [r7, #32]
 800dd82:	f7ff f867 	bl	800ce54 <dhcp_bind>
 800dd86:	e045      	b.n	800de14 <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 800dd88:	69fb      	ldr	r3, [r7, #28]
 800dd8a:	795b      	ldrb	r3, [r3, #5]
 800dd8c:	2b03      	cmp	r3, #3
 800dd8e:	d007      	beq.n	800dda0 <dhcp_recv+0x10c>
 800dd90:	69fb      	ldr	r3, [r7, #28]
 800dd92:	795b      	ldrb	r3, [r3, #5]
 800dd94:	2b04      	cmp	r3, #4
 800dd96:	d003      	beq.n	800dda0 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 800dd98:	69fb      	ldr	r3, [r7, #28]
 800dd9a:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 800dd9c:	2b05      	cmp	r3, #5
 800dd9e:	d139      	bne.n	800de14 <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 800dda0:	6979      	ldr	r1, [r7, #20]
 800dda2:	6a38      	ldr	r0, [r7, #32]
 800dda4:	f7fe fdf8 	bl	800c998 <dhcp_handle_ack>
      dhcp_bind(netif);
 800dda8:	6a38      	ldr	r0, [r7, #32]
 800ddaa:	f7ff f853 	bl	800ce54 <dhcp_bind>
 800ddae:	e031      	b.n	800de14 <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 800ddb0:	7cfb      	ldrb	r3, [r7, #19]
 800ddb2:	2b06      	cmp	r3, #6
 800ddb4:	d113      	bne.n	800ddde <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 800ddb6:	69fb      	ldr	r3, [r7, #28]
 800ddb8:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 800ddba:	2b03      	cmp	r3, #3
 800ddbc:	d00b      	beq.n	800ddd6 <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 800ddbe:	69fb      	ldr	r3, [r7, #28]
 800ddc0:	795b      	ldrb	r3, [r3, #5]
 800ddc2:	2b01      	cmp	r3, #1
 800ddc4:	d007      	beq.n	800ddd6 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 800ddc6:	69fb      	ldr	r3, [r7, #28]
 800ddc8:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 800ddca:	2b04      	cmp	r3, #4
 800ddcc:	d003      	beq.n	800ddd6 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 800ddce:	69fb      	ldr	r3, [r7, #28]
 800ddd0:	795b      	ldrb	r3, [r3, #5]
 800ddd2:	2b05      	cmp	r3, #5
 800ddd4:	d103      	bne.n	800ddde <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 800ddd6:	6a38      	ldr	r0, [r7, #32]
 800ddd8:	f7fe fb3e 	bl	800c458 <dhcp_handle_nak>
 800dddc:	e01a      	b.n	800de14 <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 800ddde:	7cfb      	ldrb	r3, [r7, #19]
 800dde0:	2b02      	cmp	r3, #2
 800dde2:	d116      	bne.n	800de12 <dhcp_recv+0x17e>
 800dde4:	69fb      	ldr	r3, [r7, #28]
 800dde6:	795b      	ldrb	r3, [r3, #5]
 800dde8:	2b06      	cmp	r3, #6
 800ddea:	d112      	bne.n	800de12 <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 800ddec:	6979      	ldr	r1, [r7, #20]
 800ddee:	6a38      	ldr	r0, [r7, #32]
 800ddf0:	f7fe fb80 	bl	800c4f4 <dhcp_handle_offer>
 800ddf4:	e00e      	b.n	800de14 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 800ddf6:	bf00      	nop
 800ddf8:	e00c      	b.n	800de14 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 800ddfa:	bf00      	nop
 800ddfc:	e00a      	b.n	800de14 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 800ddfe:	bf00      	nop
 800de00:	e008      	b.n	800de14 <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 800de02:	bf00      	nop
 800de04:	e006      	b.n	800de14 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 800de06:	bf00      	nop
 800de08:	e004      	b.n	800de14 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 800de0a:	bf00      	nop
 800de0c:	e002      	b.n	800de14 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 800de0e:	bf00      	nop
 800de10:	e000      	b.n	800de14 <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 800de12:	bf00      	nop
  pbuf_free(p);
 800de14:	6878      	ldr	r0, [r7, #4]
 800de16:	f7f8 f8e5 	bl	8005fe4 <pbuf_free>
}
 800de1a:	bf00      	nop
 800de1c:	3728      	adds	r7, #40	; 0x28
 800de1e:	46bd      	mov	sp, r7
 800de20:	bd80      	pop	{r7, pc}
 800de22:	bf00      	nop
 800de24:	20004d18 	.word	0x20004d18
 800de28:	20007cd4 	.word	0x20007cd4
 800de2c:	20007cb4 	.word	0x20007cb4

0800de30 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 800de30:	b580      	push	{r7, lr}
 800de32:	b088      	sub	sp, #32
 800de34:	af00      	add	r7, sp, #0
 800de36:	60f8      	str	r0, [r7, #12]
 800de38:	60b9      	str	r1, [r7, #8]
 800de3a:	603b      	str	r3, [r7, #0]
 800de3c:	4613      	mov	r3, r2
 800de3e:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 800de40:	68fb      	ldr	r3, [r7, #12]
 800de42:	2b00      	cmp	r3, #0
 800de44:	d108      	bne.n	800de58 <dhcp_create_msg+0x28>
 800de46:	4b5f      	ldr	r3, [pc, #380]	; (800dfc4 <dhcp_create_msg+0x194>)
 800de48:	f240 7269 	movw	r2, #1897	; 0x769
 800de4c:	495e      	ldr	r1, [pc, #376]	; (800dfc8 <dhcp_create_msg+0x198>)
 800de4e:	485f      	ldr	r0, [pc, #380]	; (800dfcc <dhcp_create_msg+0x19c>)
 800de50:	f002 fc70 	bl	8010734 <iprintf>
 800de54:	2300      	movs	r3, #0
 800de56:	e0b1      	b.n	800dfbc <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 800de58:	68bb      	ldr	r3, [r7, #8]
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d108      	bne.n	800de70 <dhcp_create_msg+0x40>
 800de5e:	4b59      	ldr	r3, [pc, #356]	; (800dfc4 <dhcp_create_msg+0x194>)
 800de60:	f240 726a 	movw	r2, #1898	; 0x76a
 800de64:	495a      	ldr	r1, [pc, #360]	; (800dfd0 <dhcp_create_msg+0x1a0>)
 800de66:	4859      	ldr	r0, [pc, #356]	; (800dfcc <dhcp_create_msg+0x19c>)
 800de68:	f002 fc64 	bl	8010734 <iprintf>
 800de6c:	2300      	movs	r3, #0
 800de6e:	e0a5      	b.n	800dfbc <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 800de70:	f44f 7220 	mov.w	r2, #640	; 0x280
 800de74:	f44f 719a 	mov.w	r1, #308	; 0x134
 800de78:	2036      	movs	r0, #54	; 0x36
 800de7a:	f7f7 fdcf 	bl	8005a1c <pbuf_alloc>
 800de7e:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 800de80:	69bb      	ldr	r3, [r7, #24]
 800de82:	2b00      	cmp	r3, #0
 800de84:	d101      	bne.n	800de8a <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 800de86:	2300      	movs	r3, #0
 800de88:	e098      	b.n	800dfbc <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 800de8a:	69bb      	ldr	r3, [r7, #24]
 800de8c:	895b      	ldrh	r3, [r3, #10]
 800de8e:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 800de92:	d206      	bcs.n	800dea2 <dhcp_create_msg+0x72>
 800de94:	4b4b      	ldr	r3, [pc, #300]	; (800dfc4 <dhcp_create_msg+0x194>)
 800de96:	f240 7271 	movw	r2, #1905	; 0x771
 800de9a:	494e      	ldr	r1, [pc, #312]	; (800dfd4 <dhcp_create_msg+0x1a4>)
 800de9c:	484b      	ldr	r0, [pc, #300]	; (800dfcc <dhcp_create_msg+0x19c>)
 800de9e:	f002 fc49 	bl	8010734 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 800dea2:	79fb      	ldrb	r3, [r7, #7]
 800dea4:	2b03      	cmp	r3, #3
 800dea6:	d103      	bne.n	800deb0 <dhcp_create_msg+0x80>
 800dea8:	68bb      	ldr	r3, [r7, #8]
 800deaa:	795b      	ldrb	r3, [r3, #5]
 800deac:	2b03      	cmp	r3, #3
 800deae:	d10d      	bne.n	800decc <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 800deb0:	68bb      	ldr	r3, [r7, #8]
 800deb2:	799b      	ldrb	r3, [r3, #6]
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	d105      	bne.n	800dec4 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 800deb8:	f002 fc54 	bl	8010764 <rand>
 800debc:	4603      	mov	r3, r0
 800debe:	461a      	mov	r2, r3
 800dec0:	4b45      	ldr	r3, [pc, #276]	; (800dfd8 <dhcp_create_msg+0x1a8>)
 800dec2:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 800dec4:	4b44      	ldr	r3, [pc, #272]	; (800dfd8 <dhcp_create_msg+0x1a8>)
 800dec6:	681a      	ldr	r2, [r3, #0]
 800dec8:	68bb      	ldr	r3, [r7, #8]
 800deca:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 800decc:	69bb      	ldr	r3, [r7, #24]
 800dece:	685b      	ldr	r3, [r3, #4]
 800ded0:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 800ded2:	f44f 729a 	mov.w	r2, #308	; 0x134
 800ded6:	2100      	movs	r1, #0
 800ded8:	6978      	ldr	r0, [r7, #20]
 800deda:	f002 fc23 	bl	8010724 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 800dede:	697b      	ldr	r3, [r7, #20]
 800dee0:	2201      	movs	r2, #1
 800dee2:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 800dee4:	697b      	ldr	r3, [r7, #20]
 800dee6:	2201      	movs	r2, #1
 800dee8:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800def0:	697b      	ldr	r3, [r7, #20]
 800def2:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 800def4:	68bb      	ldr	r3, [r7, #8]
 800def6:	681b      	ldr	r3, [r3, #0]
 800def8:	4618      	mov	r0, r3
 800defa:	f7f6 fc86 	bl	800480a <lwip_htonl>
 800defe:	4602      	mov	r2, r0
 800df00:	697b      	ldr	r3, [r7, #20]
 800df02:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 800df04:	79fb      	ldrb	r3, [r7, #7]
 800df06:	2b08      	cmp	r3, #8
 800df08:	d010      	beq.n	800df2c <dhcp_create_msg+0xfc>
 800df0a:	79fb      	ldrb	r3, [r7, #7]
 800df0c:	2b04      	cmp	r3, #4
 800df0e:	d00d      	beq.n	800df2c <dhcp_create_msg+0xfc>
 800df10:	79fb      	ldrb	r3, [r7, #7]
 800df12:	2b07      	cmp	r3, #7
 800df14:	d00a      	beq.n	800df2c <dhcp_create_msg+0xfc>
 800df16:	79fb      	ldrb	r3, [r7, #7]
 800df18:	2b03      	cmp	r3, #3
 800df1a:	d10c      	bne.n	800df36 <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 800df1c:	68bb      	ldr	r3, [r7, #8]
 800df1e:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 800df20:	2b05      	cmp	r3, #5
 800df22:	d003      	beq.n	800df2c <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 800df24:	68bb      	ldr	r3, [r7, #8]
 800df26:	795b      	ldrb	r3, [r3, #5]
 800df28:	2b04      	cmp	r3, #4
 800df2a:	d104      	bne.n	800df36 <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	3304      	adds	r3, #4
 800df30:	681a      	ldr	r2, [r3, #0]
 800df32:	697b      	ldr	r3, [r7, #20]
 800df34:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800df36:	2300      	movs	r3, #0
 800df38:	83fb      	strh	r3, [r7, #30]
 800df3a:	e00c      	b.n	800df56 <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 800df3c:	8bfa      	ldrh	r2, [r7, #30]
 800df3e:	8bfb      	ldrh	r3, [r7, #30]
 800df40:	68f9      	ldr	r1, [r7, #12]
 800df42:	440a      	add	r2, r1
 800df44:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 800df48:	697a      	ldr	r2, [r7, #20]
 800df4a:	4413      	add	r3, r2
 800df4c:	460a      	mov	r2, r1
 800df4e:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800df50:	8bfb      	ldrh	r3, [r7, #30]
 800df52:	3301      	adds	r3, #1
 800df54:	83fb      	strh	r3, [r7, #30]
 800df56:	8bfb      	ldrh	r3, [r7, #30]
 800df58:	2b05      	cmp	r3, #5
 800df5a:	d9ef      	bls.n	800df3c <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 800df5c:	697b      	ldr	r3, [r7, #20]
 800df5e:	2200      	movs	r2, #0
 800df60:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 800df64:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 800df68:	2200      	movs	r2, #0
 800df6a:	f062 027d 	orn	r2, r2, #125	; 0x7d
 800df6e:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 800df72:	2200      	movs	r2, #0
 800df74:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 800df78:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 800df7c:	2200      	movs	r2, #0
 800df7e:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 800df82:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 800df86:	697b      	ldr	r3, [r7, #20]
 800df88:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800df8c:	2301      	movs	r3, #1
 800df8e:	2235      	movs	r2, #53	; 0x35
 800df90:	2000      	movs	r0, #0
 800df92:	f7ff fadb 	bl	800d54c <dhcp_option>
 800df96:	4603      	mov	r3, r0
 800df98:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 800df9a:	697b      	ldr	r3, [r7, #20]
 800df9c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800dfa0:	79fa      	ldrb	r2, [r7, #7]
 800dfa2:	8a7b      	ldrh	r3, [r7, #18]
 800dfa4:	4618      	mov	r0, r3
 800dfa6:	f7ff fb05 	bl	800d5b4 <dhcp_option_byte>
 800dfaa:	4603      	mov	r3, r0
 800dfac:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 800dfae:	683b      	ldr	r3, [r7, #0]
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d002      	beq.n	800dfba <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 800dfb4:	683b      	ldr	r3, [r7, #0]
 800dfb6:	8a7a      	ldrh	r2, [r7, #18]
 800dfb8:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 800dfba:	69bb      	ldr	r3, [r7, #24]
}
 800dfbc:	4618      	mov	r0, r3
 800dfbe:	3720      	adds	r7, #32
 800dfc0:	46bd      	mov	sp, r7
 800dfc2:	bd80      	pop	{r7, pc}
 800dfc4:	08013b08 	.word	0x08013b08
 800dfc8:	08013e28 	.word	0x08013e28
 800dfcc:	08013b68 	.word	0x08013b68
 800dfd0:	08013e48 	.word	0x08013e48
 800dfd4:	08013e68 	.word	0x08013e68
 800dfd8:	20007ce4 	.word	0x20007ce4

0800dfdc <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 800dfdc:	b580      	push	{r7, lr}
 800dfde:	b084      	sub	sp, #16
 800dfe0:	af00      	add	r7, sp, #0
 800dfe2:	4603      	mov	r3, r0
 800dfe4:	60b9      	str	r1, [r7, #8]
 800dfe6:	607a      	str	r2, [r7, #4]
 800dfe8:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 800dfea:	89fb      	ldrh	r3, [r7, #14]
 800dfec:	1c5a      	adds	r2, r3, #1
 800dfee:	81fa      	strh	r2, [r7, #14]
 800dff0:	461a      	mov	r2, r3
 800dff2:	68bb      	ldr	r3, [r7, #8]
 800dff4:	4413      	add	r3, r2
 800dff6:	22ff      	movs	r2, #255	; 0xff
 800dff8:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 800dffa:	e007      	b.n	800e00c <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 800dffc:	89fb      	ldrh	r3, [r7, #14]
 800dffe:	1c5a      	adds	r2, r3, #1
 800e000:	81fa      	strh	r2, [r7, #14]
 800e002:	461a      	mov	r2, r3
 800e004:	68bb      	ldr	r3, [r7, #8]
 800e006:	4413      	add	r3, r2
 800e008:	2200      	movs	r2, #0
 800e00a:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 800e00c:	89fb      	ldrh	r3, [r7, #14]
 800e00e:	2b43      	cmp	r3, #67	; 0x43
 800e010:	d904      	bls.n	800e01c <dhcp_option_trailer+0x40>
 800e012:	89fb      	ldrh	r3, [r7, #14]
 800e014:	f003 0303 	and.w	r3, r3, #3
 800e018:	2b00      	cmp	r3, #0
 800e01a:	d002      	beq.n	800e022 <dhcp_option_trailer+0x46>
 800e01c:	89fb      	ldrh	r3, [r7, #14]
 800e01e:	2b43      	cmp	r3, #67	; 0x43
 800e020:	d9ec      	bls.n	800dffc <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 800e022:	89fb      	ldrh	r3, [r7, #14]
 800e024:	33f0      	adds	r3, #240	; 0xf0
 800e026:	b29b      	uxth	r3, r3
 800e028:	4619      	mov	r1, r3
 800e02a:	6878      	ldr	r0, [r7, #4]
 800e02c:	f7f7 fe54 	bl	8005cd8 <pbuf_realloc>
}
 800e030:	bf00      	nop
 800e032:	3710      	adds	r7, #16
 800e034:	46bd      	mov	sp, r7
 800e036:	bd80      	pop	{r7, pc}

0800e038 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 800e038:	b480      	push	{r7}
 800e03a:	b085      	sub	sp, #20
 800e03c:	af00      	add	r7, sp, #0
 800e03e:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	2b00      	cmp	r3, #0
 800e044:	d017      	beq.n	800e076 <dhcp_supplied_address+0x3e>
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d013      	beq.n	800e076 <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e052:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 800e054:	68fb      	ldr	r3, [r7, #12]
 800e056:	795b      	ldrb	r3, [r3, #5]
 800e058:	2b0a      	cmp	r3, #10
 800e05a:	d007      	beq.n	800e06c <dhcp_supplied_address+0x34>
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	795b      	ldrb	r3, [r3, #5]
 800e060:	2b05      	cmp	r3, #5
 800e062:	d003      	beq.n	800e06c <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 800e064:	68fb      	ldr	r3, [r7, #12]
 800e066:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 800e068:	2b04      	cmp	r3, #4
 800e06a:	d101      	bne.n	800e070 <dhcp_supplied_address+0x38>
 800e06c:	2301      	movs	r3, #1
 800e06e:	e000      	b.n	800e072 <dhcp_supplied_address+0x3a>
 800e070:	2300      	movs	r3, #0
 800e072:	b2db      	uxtb	r3, r3
 800e074:	e000      	b.n	800e078 <dhcp_supplied_address+0x40>
  }
  return 0;
 800e076:	2300      	movs	r3, #0
}
 800e078:	4618      	mov	r0, r3
 800e07a:	3714      	adds	r7, #20
 800e07c:	46bd      	mov	sp, r7
 800e07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e082:	4770      	bx	lr

0800e084 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800e084:	b580      	push	{r7, lr}
 800e086:	b082      	sub	sp, #8
 800e088:	af00      	add	r7, sp, #0
 800e08a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800e08c:	4915      	ldr	r1, [pc, #84]	; (800e0e4 <etharp_free_entry+0x60>)
 800e08e:	687a      	ldr	r2, [r7, #4]
 800e090:	4613      	mov	r3, r2
 800e092:	005b      	lsls	r3, r3, #1
 800e094:	4413      	add	r3, r2
 800e096:	00db      	lsls	r3, r3, #3
 800e098:	440b      	add	r3, r1
 800e09a:	681b      	ldr	r3, [r3, #0]
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d013      	beq.n	800e0c8 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800e0a0:	4910      	ldr	r1, [pc, #64]	; (800e0e4 <etharp_free_entry+0x60>)
 800e0a2:	687a      	ldr	r2, [r7, #4]
 800e0a4:	4613      	mov	r3, r2
 800e0a6:	005b      	lsls	r3, r3, #1
 800e0a8:	4413      	add	r3, r2
 800e0aa:	00db      	lsls	r3, r3, #3
 800e0ac:	440b      	add	r3, r1
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	4618      	mov	r0, r3
 800e0b2:	f7f7 ff97 	bl	8005fe4 <pbuf_free>
    arp_table[i].q = NULL;
 800e0b6:	490b      	ldr	r1, [pc, #44]	; (800e0e4 <etharp_free_entry+0x60>)
 800e0b8:	687a      	ldr	r2, [r7, #4]
 800e0ba:	4613      	mov	r3, r2
 800e0bc:	005b      	lsls	r3, r3, #1
 800e0be:	4413      	add	r3, r2
 800e0c0:	00db      	lsls	r3, r3, #3
 800e0c2:	440b      	add	r3, r1
 800e0c4:	2200      	movs	r2, #0
 800e0c6:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800e0c8:	4906      	ldr	r1, [pc, #24]	; (800e0e4 <etharp_free_entry+0x60>)
 800e0ca:	687a      	ldr	r2, [r7, #4]
 800e0cc:	4613      	mov	r3, r2
 800e0ce:	005b      	lsls	r3, r3, #1
 800e0d0:	4413      	add	r3, r2
 800e0d2:	00db      	lsls	r3, r3, #3
 800e0d4:	440b      	add	r3, r1
 800e0d6:	3314      	adds	r3, #20
 800e0d8:	2200      	movs	r2, #0
 800e0da:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800e0dc:	bf00      	nop
 800e0de:	3708      	adds	r7, #8
 800e0e0:	46bd      	mov	sp, r7
 800e0e2:	bd80      	pop	{r7, pc}
 800e0e4:	20007ce8 	.word	0x20007ce8

0800e0e8 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800e0e8:	b580      	push	{r7, lr}
 800e0ea:	b082      	sub	sp, #8
 800e0ec:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e0ee:	2300      	movs	r3, #0
 800e0f0:	607b      	str	r3, [r7, #4]
 800e0f2:	e096      	b.n	800e222 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800e0f4:	494f      	ldr	r1, [pc, #316]	; (800e234 <etharp_tmr+0x14c>)
 800e0f6:	687a      	ldr	r2, [r7, #4]
 800e0f8:	4613      	mov	r3, r2
 800e0fa:	005b      	lsls	r3, r3, #1
 800e0fc:	4413      	add	r3, r2
 800e0fe:	00db      	lsls	r3, r3, #3
 800e100:	440b      	add	r3, r1
 800e102:	3314      	adds	r3, #20
 800e104:	781b      	ldrb	r3, [r3, #0]
 800e106:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800e108:	78fb      	ldrb	r3, [r7, #3]
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	f000 8086 	beq.w	800e21c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800e110:	4948      	ldr	r1, [pc, #288]	; (800e234 <etharp_tmr+0x14c>)
 800e112:	687a      	ldr	r2, [r7, #4]
 800e114:	4613      	mov	r3, r2
 800e116:	005b      	lsls	r3, r3, #1
 800e118:	4413      	add	r3, r2
 800e11a:	00db      	lsls	r3, r3, #3
 800e11c:	440b      	add	r3, r1
 800e11e:	3312      	adds	r3, #18
 800e120:	881b      	ldrh	r3, [r3, #0]
 800e122:	3301      	adds	r3, #1
 800e124:	b298      	uxth	r0, r3
 800e126:	4943      	ldr	r1, [pc, #268]	; (800e234 <etharp_tmr+0x14c>)
 800e128:	687a      	ldr	r2, [r7, #4]
 800e12a:	4613      	mov	r3, r2
 800e12c:	005b      	lsls	r3, r3, #1
 800e12e:	4413      	add	r3, r2
 800e130:	00db      	lsls	r3, r3, #3
 800e132:	440b      	add	r3, r1
 800e134:	3312      	adds	r3, #18
 800e136:	4602      	mov	r2, r0
 800e138:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800e13a:	493e      	ldr	r1, [pc, #248]	; (800e234 <etharp_tmr+0x14c>)
 800e13c:	687a      	ldr	r2, [r7, #4]
 800e13e:	4613      	mov	r3, r2
 800e140:	005b      	lsls	r3, r3, #1
 800e142:	4413      	add	r3, r2
 800e144:	00db      	lsls	r3, r3, #3
 800e146:	440b      	add	r3, r1
 800e148:	3312      	adds	r3, #18
 800e14a:	881b      	ldrh	r3, [r3, #0]
 800e14c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800e150:	d215      	bcs.n	800e17e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800e152:	4938      	ldr	r1, [pc, #224]	; (800e234 <etharp_tmr+0x14c>)
 800e154:	687a      	ldr	r2, [r7, #4]
 800e156:	4613      	mov	r3, r2
 800e158:	005b      	lsls	r3, r3, #1
 800e15a:	4413      	add	r3, r2
 800e15c:	00db      	lsls	r3, r3, #3
 800e15e:	440b      	add	r3, r1
 800e160:	3314      	adds	r3, #20
 800e162:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800e164:	2b01      	cmp	r3, #1
 800e166:	d10e      	bne.n	800e186 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800e168:	4932      	ldr	r1, [pc, #200]	; (800e234 <etharp_tmr+0x14c>)
 800e16a:	687a      	ldr	r2, [r7, #4]
 800e16c:	4613      	mov	r3, r2
 800e16e:	005b      	lsls	r3, r3, #1
 800e170:	4413      	add	r3, r2
 800e172:	00db      	lsls	r3, r3, #3
 800e174:	440b      	add	r3, r1
 800e176:	3312      	adds	r3, #18
 800e178:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800e17a:	2b04      	cmp	r3, #4
 800e17c:	d903      	bls.n	800e186 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800e17e:	6878      	ldr	r0, [r7, #4]
 800e180:	f7ff ff80 	bl	800e084 <etharp_free_entry>
 800e184:	e04a      	b.n	800e21c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800e186:	492b      	ldr	r1, [pc, #172]	; (800e234 <etharp_tmr+0x14c>)
 800e188:	687a      	ldr	r2, [r7, #4]
 800e18a:	4613      	mov	r3, r2
 800e18c:	005b      	lsls	r3, r3, #1
 800e18e:	4413      	add	r3, r2
 800e190:	00db      	lsls	r3, r3, #3
 800e192:	440b      	add	r3, r1
 800e194:	3314      	adds	r3, #20
 800e196:	781b      	ldrb	r3, [r3, #0]
 800e198:	2b03      	cmp	r3, #3
 800e19a:	d10a      	bne.n	800e1b2 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800e19c:	4925      	ldr	r1, [pc, #148]	; (800e234 <etharp_tmr+0x14c>)
 800e19e:	687a      	ldr	r2, [r7, #4]
 800e1a0:	4613      	mov	r3, r2
 800e1a2:	005b      	lsls	r3, r3, #1
 800e1a4:	4413      	add	r3, r2
 800e1a6:	00db      	lsls	r3, r3, #3
 800e1a8:	440b      	add	r3, r1
 800e1aa:	3314      	adds	r3, #20
 800e1ac:	2204      	movs	r2, #4
 800e1ae:	701a      	strb	r2, [r3, #0]
 800e1b0:	e034      	b.n	800e21c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800e1b2:	4920      	ldr	r1, [pc, #128]	; (800e234 <etharp_tmr+0x14c>)
 800e1b4:	687a      	ldr	r2, [r7, #4]
 800e1b6:	4613      	mov	r3, r2
 800e1b8:	005b      	lsls	r3, r3, #1
 800e1ba:	4413      	add	r3, r2
 800e1bc:	00db      	lsls	r3, r3, #3
 800e1be:	440b      	add	r3, r1
 800e1c0:	3314      	adds	r3, #20
 800e1c2:	781b      	ldrb	r3, [r3, #0]
 800e1c4:	2b04      	cmp	r3, #4
 800e1c6:	d10a      	bne.n	800e1de <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800e1c8:	491a      	ldr	r1, [pc, #104]	; (800e234 <etharp_tmr+0x14c>)
 800e1ca:	687a      	ldr	r2, [r7, #4]
 800e1cc:	4613      	mov	r3, r2
 800e1ce:	005b      	lsls	r3, r3, #1
 800e1d0:	4413      	add	r3, r2
 800e1d2:	00db      	lsls	r3, r3, #3
 800e1d4:	440b      	add	r3, r1
 800e1d6:	3314      	adds	r3, #20
 800e1d8:	2202      	movs	r2, #2
 800e1da:	701a      	strb	r2, [r3, #0]
 800e1dc:	e01e      	b.n	800e21c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800e1de:	4915      	ldr	r1, [pc, #84]	; (800e234 <etharp_tmr+0x14c>)
 800e1e0:	687a      	ldr	r2, [r7, #4]
 800e1e2:	4613      	mov	r3, r2
 800e1e4:	005b      	lsls	r3, r3, #1
 800e1e6:	4413      	add	r3, r2
 800e1e8:	00db      	lsls	r3, r3, #3
 800e1ea:	440b      	add	r3, r1
 800e1ec:	3314      	adds	r3, #20
 800e1ee:	781b      	ldrb	r3, [r3, #0]
 800e1f0:	2b01      	cmp	r3, #1
 800e1f2:	d113      	bne.n	800e21c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800e1f4:	490f      	ldr	r1, [pc, #60]	; (800e234 <etharp_tmr+0x14c>)
 800e1f6:	687a      	ldr	r2, [r7, #4]
 800e1f8:	4613      	mov	r3, r2
 800e1fa:	005b      	lsls	r3, r3, #1
 800e1fc:	4413      	add	r3, r2
 800e1fe:	00db      	lsls	r3, r3, #3
 800e200:	440b      	add	r3, r1
 800e202:	3308      	adds	r3, #8
 800e204:	6818      	ldr	r0, [r3, #0]
 800e206:	687a      	ldr	r2, [r7, #4]
 800e208:	4613      	mov	r3, r2
 800e20a:	005b      	lsls	r3, r3, #1
 800e20c:	4413      	add	r3, r2
 800e20e:	00db      	lsls	r3, r3, #3
 800e210:	4a08      	ldr	r2, [pc, #32]	; (800e234 <etharp_tmr+0x14c>)
 800e212:	4413      	add	r3, r2
 800e214:	3304      	adds	r3, #4
 800e216:	4619      	mov	r1, r3
 800e218:	f000 fe72 	bl	800ef00 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	3301      	adds	r3, #1
 800e220:	607b      	str	r3, [r7, #4]
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	2b09      	cmp	r3, #9
 800e226:	f77f af65 	ble.w	800e0f4 <etharp_tmr+0xc>
      }
    }
  }
}
 800e22a:	bf00      	nop
 800e22c:	bf00      	nop
 800e22e:	3708      	adds	r7, #8
 800e230:	46bd      	mov	sp, r7
 800e232:	bd80      	pop	{r7, pc}
 800e234:	20007ce8 	.word	0x20007ce8

0800e238 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800e238:	b580      	push	{r7, lr}
 800e23a:	b08a      	sub	sp, #40	; 0x28
 800e23c:	af00      	add	r7, sp, #0
 800e23e:	60f8      	str	r0, [r7, #12]
 800e240:	460b      	mov	r3, r1
 800e242:	607a      	str	r2, [r7, #4]
 800e244:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800e246:	230a      	movs	r3, #10
 800e248:	84fb      	strh	r3, [r7, #38]	; 0x26
 800e24a:	230a      	movs	r3, #10
 800e24c:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800e24e:	230a      	movs	r3, #10
 800e250:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800e252:	2300      	movs	r3, #0
 800e254:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800e256:	230a      	movs	r3, #10
 800e258:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800e25a:	2300      	movs	r3, #0
 800e25c:	83bb      	strh	r3, [r7, #28]
 800e25e:	2300      	movs	r3, #0
 800e260:	837b      	strh	r3, [r7, #26]
 800e262:	2300      	movs	r3, #0
 800e264:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e266:	2300      	movs	r3, #0
 800e268:	843b      	strh	r3, [r7, #32]
 800e26a:	e0ae      	b.n	800e3ca <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800e26c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e270:	49a6      	ldr	r1, [pc, #664]	; (800e50c <etharp_find_entry+0x2d4>)
 800e272:	4613      	mov	r3, r2
 800e274:	005b      	lsls	r3, r3, #1
 800e276:	4413      	add	r3, r2
 800e278:	00db      	lsls	r3, r3, #3
 800e27a:	440b      	add	r3, r1
 800e27c:	3314      	adds	r3, #20
 800e27e:	781b      	ldrb	r3, [r3, #0]
 800e280:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800e282:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800e286:	2b0a      	cmp	r3, #10
 800e288:	d105      	bne.n	800e296 <etharp_find_entry+0x5e>
 800e28a:	7dfb      	ldrb	r3, [r7, #23]
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d102      	bne.n	800e296 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800e290:	8c3b      	ldrh	r3, [r7, #32]
 800e292:	847b      	strh	r3, [r7, #34]	; 0x22
 800e294:	e095      	b.n	800e3c2 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800e296:	7dfb      	ldrb	r3, [r7, #23]
 800e298:	2b00      	cmp	r3, #0
 800e29a:	f000 8092 	beq.w	800e3c2 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800e29e:	7dfb      	ldrb	r3, [r7, #23]
 800e2a0:	2b01      	cmp	r3, #1
 800e2a2:	d009      	beq.n	800e2b8 <etharp_find_entry+0x80>
 800e2a4:	7dfb      	ldrb	r3, [r7, #23]
 800e2a6:	2b01      	cmp	r3, #1
 800e2a8:	d806      	bhi.n	800e2b8 <etharp_find_entry+0x80>
 800e2aa:	4b99      	ldr	r3, [pc, #612]	; (800e510 <etharp_find_entry+0x2d8>)
 800e2ac:	f240 1223 	movw	r2, #291	; 0x123
 800e2b0:	4998      	ldr	r1, [pc, #608]	; (800e514 <etharp_find_entry+0x2dc>)
 800e2b2:	4899      	ldr	r0, [pc, #612]	; (800e518 <etharp_find_entry+0x2e0>)
 800e2b4:	f002 fa3e 	bl	8010734 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	d020      	beq.n	800e300 <etharp_find_entry+0xc8>
 800e2be:	68fb      	ldr	r3, [r7, #12]
 800e2c0:	6819      	ldr	r1, [r3, #0]
 800e2c2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e2c6:	4891      	ldr	r0, [pc, #580]	; (800e50c <etharp_find_entry+0x2d4>)
 800e2c8:	4613      	mov	r3, r2
 800e2ca:	005b      	lsls	r3, r3, #1
 800e2cc:	4413      	add	r3, r2
 800e2ce:	00db      	lsls	r3, r3, #3
 800e2d0:	4403      	add	r3, r0
 800e2d2:	3304      	adds	r3, #4
 800e2d4:	681b      	ldr	r3, [r3, #0]
 800e2d6:	4299      	cmp	r1, r3
 800e2d8:	d112      	bne.n	800e300 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	d00c      	beq.n	800e2fa <etharp_find_entry+0xc2>
 800e2e0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e2e4:	4989      	ldr	r1, [pc, #548]	; (800e50c <etharp_find_entry+0x2d4>)
 800e2e6:	4613      	mov	r3, r2
 800e2e8:	005b      	lsls	r3, r3, #1
 800e2ea:	4413      	add	r3, r2
 800e2ec:	00db      	lsls	r3, r3, #3
 800e2ee:	440b      	add	r3, r1
 800e2f0:	3308      	adds	r3, #8
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	687a      	ldr	r2, [r7, #4]
 800e2f6:	429a      	cmp	r2, r3
 800e2f8:	d102      	bne.n	800e300 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800e2fa:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800e2fe:	e100      	b.n	800e502 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800e300:	7dfb      	ldrb	r3, [r7, #23]
 800e302:	2b01      	cmp	r3, #1
 800e304:	d140      	bne.n	800e388 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800e306:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e30a:	4980      	ldr	r1, [pc, #512]	; (800e50c <etharp_find_entry+0x2d4>)
 800e30c:	4613      	mov	r3, r2
 800e30e:	005b      	lsls	r3, r3, #1
 800e310:	4413      	add	r3, r2
 800e312:	00db      	lsls	r3, r3, #3
 800e314:	440b      	add	r3, r1
 800e316:	681b      	ldr	r3, [r3, #0]
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d01a      	beq.n	800e352 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800e31c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e320:	497a      	ldr	r1, [pc, #488]	; (800e50c <etharp_find_entry+0x2d4>)
 800e322:	4613      	mov	r3, r2
 800e324:	005b      	lsls	r3, r3, #1
 800e326:	4413      	add	r3, r2
 800e328:	00db      	lsls	r3, r3, #3
 800e32a:	440b      	add	r3, r1
 800e32c:	3312      	adds	r3, #18
 800e32e:	881b      	ldrh	r3, [r3, #0]
 800e330:	8bba      	ldrh	r2, [r7, #28]
 800e332:	429a      	cmp	r2, r3
 800e334:	d845      	bhi.n	800e3c2 <etharp_find_entry+0x18a>
            old_queue = i;
 800e336:	8c3b      	ldrh	r3, [r7, #32]
 800e338:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800e33a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e33e:	4973      	ldr	r1, [pc, #460]	; (800e50c <etharp_find_entry+0x2d4>)
 800e340:	4613      	mov	r3, r2
 800e342:	005b      	lsls	r3, r3, #1
 800e344:	4413      	add	r3, r2
 800e346:	00db      	lsls	r3, r3, #3
 800e348:	440b      	add	r3, r1
 800e34a:	3312      	adds	r3, #18
 800e34c:	881b      	ldrh	r3, [r3, #0]
 800e34e:	83bb      	strh	r3, [r7, #28]
 800e350:	e037      	b.n	800e3c2 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800e352:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e356:	496d      	ldr	r1, [pc, #436]	; (800e50c <etharp_find_entry+0x2d4>)
 800e358:	4613      	mov	r3, r2
 800e35a:	005b      	lsls	r3, r3, #1
 800e35c:	4413      	add	r3, r2
 800e35e:	00db      	lsls	r3, r3, #3
 800e360:	440b      	add	r3, r1
 800e362:	3312      	adds	r3, #18
 800e364:	881b      	ldrh	r3, [r3, #0]
 800e366:	8b7a      	ldrh	r2, [r7, #26]
 800e368:	429a      	cmp	r2, r3
 800e36a:	d82a      	bhi.n	800e3c2 <etharp_find_entry+0x18a>
            old_pending = i;
 800e36c:	8c3b      	ldrh	r3, [r7, #32]
 800e36e:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800e370:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e374:	4965      	ldr	r1, [pc, #404]	; (800e50c <etharp_find_entry+0x2d4>)
 800e376:	4613      	mov	r3, r2
 800e378:	005b      	lsls	r3, r3, #1
 800e37a:	4413      	add	r3, r2
 800e37c:	00db      	lsls	r3, r3, #3
 800e37e:	440b      	add	r3, r1
 800e380:	3312      	adds	r3, #18
 800e382:	881b      	ldrh	r3, [r3, #0]
 800e384:	837b      	strh	r3, [r7, #26]
 800e386:	e01c      	b.n	800e3c2 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800e388:	7dfb      	ldrb	r3, [r7, #23]
 800e38a:	2b01      	cmp	r3, #1
 800e38c:	d919      	bls.n	800e3c2 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800e38e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e392:	495e      	ldr	r1, [pc, #376]	; (800e50c <etharp_find_entry+0x2d4>)
 800e394:	4613      	mov	r3, r2
 800e396:	005b      	lsls	r3, r3, #1
 800e398:	4413      	add	r3, r2
 800e39a:	00db      	lsls	r3, r3, #3
 800e39c:	440b      	add	r3, r1
 800e39e:	3312      	adds	r3, #18
 800e3a0:	881b      	ldrh	r3, [r3, #0]
 800e3a2:	8b3a      	ldrh	r2, [r7, #24]
 800e3a4:	429a      	cmp	r2, r3
 800e3a6:	d80c      	bhi.n	800e3c2 <etharp_find_entry+0x18a>
            old_stable = i;
 800e3a8:	8c3b      	ldrh	r3, [r7, #32]
 800e3aa:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800e3ac:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e3b0:	4956      	ldr	r1, [pc, #344]	; (800e50c <etharp_find_entry+0x2d4>)
 800e3b2:	4613      	mov	r3, r2
 800e3b4:	005b      	lsls	r3, r3, #1
 800e3b6:	4413      	add	r3, r2
 800e3b8:	00db      	lsls	r3, r3, #3
 800e3ba:	440b      	add	r3, r1
 800e3bc:	3312      	adds	r3, #18
 800e3be:	881b      	ldrh	r3, [r3, #0]
 800e3c0:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e3c2:	8c3b      	ldrh	r3, [r7, #32]
 800e3c4:	3301      	adds	r3, #1
 800e3c6:	b29b      	uxth	r3, r3
 800e3c8:	843b      	strh	r3, [r7, #32]
 800e3ca:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800e3ce:	2b09      	cmp	r3, #9
 800e3d0:	f77f af4c 	ble.w	800e26c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800e3d4:	7afb      	ldrb	r3, [r7, #11]
 800e3d6:	f003 0302 	and.w	r3, r3, #2
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d108      	bne.n	800e3f0 <etharp_find_entry+0x1b8>
 800e3de:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800e3e2:	2b0a      	cmp	r3, #10
 800e3e4:	d107      	bne.n	800e3f6 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800e3e6:	7afb      	ldrb	r3, [r7, #11]
 800e3e8:	f003 0301 	and.w	r3, r3, #1
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	d102      	bne.n	800e3f6 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800e3f0:	f04f 33ff 	mov.w	r3, #4294967295
 800e3f4:	e085      	b.n	800e502 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800e3f6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800e3fa:	2b09      	cmp	r3, #9
 800e3fc:	dc02      	bgt.n	800e404 <etharp_find_entry+0x1cc>
    i = empty;
 800e3fe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e400:	843b      	strh	r3, [r7, #32]
 800e402:	e039      	b.n	800e478 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800e404:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800e408:	2b09      	cmp	r3, #9
 800e40a:	dc14      	bgt.n	800e436 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800e40c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e40e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800e410:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e414:	493d      	ldr	r1, [pc, #244]	; (800e50c <etharp_find_entry+0x2d4>)
 800e416:	4613      	mov	r3, r2
 800e418:	005b      	lsls	r3, r3, #1
 800e41a:	4413      	add	r3, r2
 800e41c:	00db      	lsls	r3, r3, #3
 800e41e:	440b      	add	r3, r1
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	2b00      	cmp	r3, #0
 800e424:	d018      	beq.n	800e458 <etharp_find_entry+0x220>
 800e426:	4b3a      	ldr	r3, [pc, #232]	; (800e510 <etharp_find_entry+0x2d8>)
 800e428:	f240 126d 	movw	r2, #365	; 0x16d
 800e42c:	493b      	ldr	r1, [pc, #236]	; (800e51c <etharp_find_entry+0x2e4>)
 800e42e:	483a      	ldr	r0, [pc, #232]	; (800e518 <etharp_find_entry+0x2e0>)
 800e430:	f002 f980 	bl	8010734 <iprintf>
 800e434:	e010      	b.n	800e458 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800e436:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800e43a:	2b09      	cmp	r3, #9
 800e43c:	dc02      	bgt.n	800e444 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800e43e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e440:	843b      	strh	r3, [r7, #32]
 800e442:	e009      	b.n	800e458 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800e444:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800e448:	2b09      	cmp	r3, #9
 800e44a:	dc02      	bgt.n	800e452 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800e44c:	8bfb      	ldrh	r3, [r7, #30]
 800e44e:	843b      	strh	r3, [r7, #32]
 800e450:	e002      	b.n	800e458 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800e452:	f04f 33ff 	mov.w	r3, #4294967295
 800e456:	e054      	b.n	800e502 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800e458:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800e45c:	2b09      	cmp	r3, #9
 800e45e:	dd06      	ble.n	800e46e <etharp_find_entry+0x236>
 800e460:	4b2b      	ldr	r3, [pc, #172]	; (800e510 <etharp_find_entry+0x2d8>)
 800e462:	f240 127f 	movw	r2, #383	; 0x17f
 800e466:	492e      	ldr	r1, [pc, #184]	; (800e520 <etharp_find_entry+0x2e8>)
 800e468:	482b      	ldr	r0, [pc, #172]	; (800e518 <etharp_find_entry+0x2e0>)
 800e46a:	f002 f963 	bl	8010734 <iprintf>
    etharp_free_entry(i);
 800e46e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800e472:	4618      	mov	r0, r3
 800e474:	f7ff fe06 	bl	800e084 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800e478:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800e47c:	2b09      	cmp	r3, #9
 800e47e:	dd06      	ble.n	800e48e <etharp_find_entry+0x256>
 800e480:	4b23      	ldr	r3, [pc, #140]	; (800e510 <etharp_find_entry+0x2d8>)
 800e482:	f240 1283 	movw	r2, #387	; 0x183
 800e486:	4926      	ldr	r1, [pc, #152]	; (800e520 <etharp_find_entry+0x2e8>)
 800e488:	4823      	ldr	r0, [pc, #140]	; (800e518 <etharp_find_entry+0x2e0>)
 800e48a:	f002 f953 	bl	8010734 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800e48e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e492:	491e      	ldr	r1, [pc, #120]	; (800e50c <etharp_find_entry+0x2d4>)
 800e494:	4613      	mov	r3, r2
 800e496:	005b      	lsls	r3, r3, #1
 800e498:	4413      	add	r3, r2
 800e49a:	00db      	lsls	r3, r3, #3
 800e49c:	440b      	add	r3, r1
 800e49e:	3314      	adds	r3, #20
 800e4a0:	781b      	ldrb	r3, [r3, #0]
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d006      	beq.n	800e4b4 <etharp_find_entry+0x27c>
 800e4a6:	4b1a      	ldr	r3, [pc, #104]	; (800e510 <etharp_find_entry+0x2d8>)
 800e4a8:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800e4ac:	491d      	ldr	r1, [pc, #116]	; (800e524 <etharp_find_entry+0x2ec>)
 800e4ae:	481a      	ldr	r0, [pc, #104]	; (800e518 <etharp_find_entry+0x2e0>)
 800e4b0:	f002 f940 	bl	8010734 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800e4b4:	68fb      	ldr	r3, [r7, #12]
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d00b      	beq.n	800e4d2 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800e4ba:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e4be:	68fb      	ldr	r3, [r7, #12]
 800e4c0:	6819      	ldr	r1, [r3, #0]
 800e4c2:	4812      	ldr	r0, [pc, #72]	; (800e50c <etharp_find_entry+0x2d4>)
 800e4c4:	4613      	mov	r3, r2
 800e4c6:	005b      	lsls	r3, r3, #1
 800e4c8:	4413      	add	r3, r2
 800e4ca:	00db      	lsls	r3, r3, #3
 800e4cc:	4403      	add	r3, r0
 800e4ce:	3304      	adds	r3, #4
 800e4d0:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800e4d2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e4d6:	490d      	ldr	r1, [pc, #52]	; (800e50c <etharp_find_entry+0x2d4>)
 800e4d8:	4613      	mov	r3, r2
 800e4da:	005b      	lsls	r3, r3, #1
 800e4dc:	4413      	add	r3, r2
 800e4de:	00db      	lsls	r3, r3, #3
 800e4e0:	440b      	add	r3, r1
 800e4e2:	3312      	adds	r3, #18
 800e4e4:	2200      	movs	r2, #0
 800e4e6:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800e4e8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e4ec:	4907      	ldr	r1, [pc, #28]	; (800e50c <etharp_find_entry+0x2d4>)
 800e4ee:	4613      	mov	r3, r2
 800e4f0:	005b      	lsls	r3, r3, #1
 800e4f2:	4413      	add	r3, r2
 800e4f4:	00db      	lsls	r3, r3, #3
 800e4f6:	440b      	add	r3, r1
 800e4f8:	3308      	adds	r3, #8
 800e4fa:	687a      	ldr	r2, [r7, #4]
 800e4fc:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800e4fe:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800e502:	4618      	mov	r0, r3
 800e504:	3728      	adds	r7, #40	; 0x28
 800e506:	46bd      	mov	sp, r7
 800e508:	bd80      	pop	{r7, pc}
 800e50a:	bf00      	nop
 800e50c:	20007ce8 	.word	0x20007ce8
 800e510:	08013ea8 	.word	0x08013ea8
 800e514:	08013ee0 	.word	0x08013ee0
 800e518:	08013f20 	.word	0x08013f20
 800e51c:	08013f48 	.word	0x08013f48
 800e520:	08013f60 	.word	0x08013f60
 800e524:	08013f74 	.word	0x08013f74

0800e528 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800e528:	b580      	push	{r7, lr}
 800e52a:	b088      	sub	sp, #32
 800e52c:	af02      	add	r7, sp, #8
 800e52e:	60f8      	str	r0, [r7, #12]
 800e530:	60b9      	str	r1, [r7, #8]
 800e532:	607a      	str	r2, [r7, #4]
 800e534:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800e536:	68fb      	ldr	r3, [r7, #12]
 800e538:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e53c:	2b06      	cmp	r3, #6
 800e53e:	d006      	beq.n	800e54e <etharp_update_arp_entry+0x26>
 800e540:	4b48      	ldr	r3, [pc, #288]	; (800e664 <etharp_update_arp_entry+0x13c>)
 800e542:	f240 12a9 	movw	r2, #425	; 0x1a9
 800e546:	4948      	ldr	r1, [pc, #288]	; (800e668 <etharp_update_arp_entry+0x140>)
 800e548:	4848      	ldr	r0, [pc, #288]	; (800e66c <etharp_update_arp_entry+0x144>)
 800e54a:	f002 f8f3 	bl	8010734 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800e54e:	68bb      	ldr	r3, [r7, #8]
 800e550:	2b00      	cmp	r3, #0
 800e552:	d012      	beq.n	800e57a <etharp_update_arp_entry+0x52>
 800e554:	68bb      	ldr	r3, [r7, #8]
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d00e      	beq.n	800e57a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800e55c:	68bb      	ldr	r3, [r7, #8]
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	68f9      	ldr	r1, [r7, #12]
 800e562:	4618      	mov	r0, r3
 800e564:	f001 f946 	bl	800f7f4 <ip4_addr_isbroadcast_u32>
 800e568:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d105      	bne.n	800e57a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800e56e:	68bb      	ldr	r3, [r7, #8]
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800e576:	2be0      	cmp	r3, #224	; 0xe0
 800e578:	d102      	bne.n	800e580 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800e57a:	f06f 030f 	mvn.w	r3, #15
 800e57e:	e06c      	b.n	800e65a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800e580:	78fb      	ldrb	r3, [r7, #3]
 800e582:	68fa      	ldr	r2, [r7, #12]
 800e584:	4619      	mov	r1, r3
 800e586:	68b8      	ldr	r0, [r7, #8]
 800e588:	f7ff fe56 	bl	800e238 <etharp_find_entry>
 800e58c:	4603      	mov	r3, r0
 800e58e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800e590:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800e594:	2b00      	cmp	r3, #0
 800e596:	da02      	bge.n	800e59e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800e598:	8afb      	ldrh	r3, [r7, #22]
 800e59a:	b25b      	sxtb	r3, r3
 800e59c:	e05d      	b.n	800e65a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800e59e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e5a2:	4933      	ldr	r1, [pc, #204]	; (800e670 <etharp_update_arp_entry+0x148>)
 800e5a4:	4613      	mov	r3, r2
 800e5a6:	005b      	lsls	r3, r3, #1
 800e5a8:	4413      	add	r3, r2
 800e5aa:	00db      	lsls	r3, r3, #3
 800e5ac:	440b      	add	r3, r1
 800e5ae:	3314      	adds	r3, #20
 800e5b0:	2202      	movs	r2, #2
 800e5b2:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800e5b4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e5b8:	492d      	ldr	r1, [pc, #180]	; (800e670 <etharp_update_arp_entry+0x148>)
 800e5ba:	4613      	mov	r3, r2
 800e5bc:	005b      	lsls	r3, r3, #1
 800e5be:	4413      	add	r3, r2
 800e5c0:	00db      	lsls	r3, r3, #3
 800e5c2:	440b      	add	r3, r1
 800e5c4:	3308      	adds	r3, #8
 800e5c6:	68fa      	ldr	r2, [r7, #12]
 800e5c8:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800e5ca:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e5ce:	4613      	mov	r3, r2
 800e5d0:	005b      	lsls	r3, r3, #1
 800e5d2:	4413      	add	r3, r2
 800e5d4:	00db      	lsls	r3, r3, #3
 800e5d6:	3308      	adds	r3, #8
 800e5d8:	4a25      	ldr	r2, [pc, #148]	; (800e670 <etharp_update_arp_entry+0x148>)
 800e5da:	4413      	add	r3, r2
 800e5dc:	3304      	adds	r3, #4
 800e5de:	2206      	movs	r2, #6
 800e5e0:	6879      	ldr	r1, [r7, #4]
 800e5e2:	4618      	mov	r0, r3
 800e5e4:	f002 f890 	bl	8010708 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800e5e8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e5ec:	4920      	ldr	r1, [pc, #128]	; (800e670 <etharp_update_arp_entry+0x148>)
 800e5ee:	4613      	mov	r3, r2
 800e5f0:	005b      	lsls	r3, r3, #1
 800e5f2:	4413      	add	r3, r2
 800e5f4:	00db      	lsls	r3, r3, #3
 800e5f6:	440b      	add	r3, r1
 800e5f8:	3312      	adds	r3, #18
 800e5fa:	2200      	movs	r2, #0
 800e5fc:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800e5fe:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e602:	491b      	ldr	r1, [pc, #108]	; (800e670 <etharp_update_arp_entry+0x148>)
 800e604:	4613      	mov	r3, r2
 800e606:	005b      	lsls	r3, r3, #1
 800e608:	4413      	add	r3, r2
 800e60a:	00db      	lsls	r3, r3, #3
 800e60c:	440b      	add	r3, r1
 800e60e:	681b      	ldr	r3, [r3, #0]
 800e610:	2b00      	cmp	r3, #0
 800e612:	d021      	beq.n	800e658 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800e614:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e618:	4915      	ldr	r1, [pc, #84]	; (800e670 <etharp_update_arp_entry+0x148>)
 800e61a:	4613      	mov	r3, r2
 800e61c:	005b      	lsls	r3, r3, #1
 800e61e:	4413      	add	r3, r2
 800e620:	00db      	lsls	r3, r3, #3
 800e622:	440b      	add	r3, r1
 800e624:	681b      	ldr	r3, [r3, #0]
 800e626:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800e628:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e62c:	4910      	ldr	r1, [pc, #64]	; (800e670 <etharp_update_arp_entry+0x148>)
 800e62e:	4613      	mov	r3, r2
 800e630:	005b      	lsls	r3, r3, #1
 800e632:	4413      	add	r3, r2
 800e634:	00db      	lsls	r3, r3, #3
 800e636:	440b      	add	r3, r1
 800e638:	2200      	movs	r2, #0
 800e63a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800e63c:	68fb      	ldr	r3, [r7, #12]
 800e63e:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 800e642:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e646:	9300      	str	r3, [sp, #0]
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	6939      	ldr	r1, [r7, #16]
 800e64c:	68f8      	ldr	r0, [r7, #12]
 800e64e:	f001 ffdf 	bl	8010610 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800e652:	6938      	ldr	r0, [r7, #16]
 800e654:	f7f7 fcc6 	bl	8005fe4 <pbuf_free>
  }
  return ERR_OK;
 800e658:	2300      	movs	r3, #0
}
 800e65a:	4618      	mov	r0, r3
 800e65c:	3718      	adds	r7, #24
 800e65e:	46bd      	mov	sp, r7
 800e660:	bd80      	pop	{r7, pc}
 800e662:	bf00      	nop
 800e664:	08013ea8 	.word	0x08013ea8
 800e668:	08013fa0 	.word	0x08013fa0
 800e66c:	08013f20 	.word	0x08013f20
 800e670:	20007ce8 	.word	0x20007ce8

0800e674 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800e674:	b580      	push	{r7, lr}
 800e676:	b084      	sub	sp, #16
 800e678:	af00      	add	r7, sp, #0
 800e67a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e67c:	2300      	movs	r3, #0
 800e67e:	60fb      	str	r3, [r7, #12]
 800e680:	e01e      	b.n	800e6c0 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800e682:	4913      	ldr	r1, [pc, #76]	; (800e6d0 <etharp_cleanup_netif+0x5c>)
 800e684:	68fa      	ldr	r2, [r7, #12]
 800e686:	4613      	mov	r3, r2
 800e688:	005b      	lsls	r3, r3, #1
 800e68a:	4413      	add	r3, r2
 800e68c:	00db      	lsls	r3, r3, #3
 800e68e:	440b      	add	r3, r1
 800e690:	3314      	adds	r3, #20
 800e692:	781b      	ldrb	r3, [r3, #0]
 800e694:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800e696:	7afb      	ldrb	r3, [r7, #11]
 800e698:	2b00      	cmp	r3, #0
 800e69a:	d00e      	beq.n	800e6ba <etharp_cleanup_netif+0x46>
 800e69c:	490c      	ldr	r1, [pc, #48]	; (800e6d0 <etharp_cleanup_netif+0x5c>)
 800e69e:	68fa      	ldr	r2, [r7, #12]
 800e6a0:	4613      	mov	r3, r2
 800e6a2:	005b      	lsls	r3, r3, #1
 800e6a4:	4413      	add	r3, r2
 800e6a6:	00db      	lsls	r3, r3, #3
 800e6a8:	440b      	add	r3, r1
 800e6aa:	3308      	adds	r3, #8
 800e6ac:	681b      	ldr	r3, [r3, #0]
 800e6ae:	687a      	ldr	r2, [r7, #4]
 800e6b0:	429a      	cmp	r2, r3
 800e6b2:	d102      	bne.n	800e6ba <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800e6b4:	68f8      	ldr	r0, [r7, #12]
 800e6b6:	f7ff fce5 	bl	800e084 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e6ba:	68fb      	ldr	r3, [r7, #12]
 800e6bc:	3301      	adds	r3, #1
 800e6be:	60fb      	str	r3, [r7, #12]
 800e6c0:	68fb      	ldr	r3, [r7, #12]
 800e6c2:	2b09      	cmp	r3, #9
 800e6c4:	dddd      	ble.n	800e682 <etharp_cleanup_netif+0xe>
    }
  }
}
 800e6c6:	bf00      	nop
 800e6c8:	bf00      	nop
 800e6ca:	3710      	adds	r7, #16
 800e6cc:	46bd      	mov	sp, r7
 800e6ce:	bd80      	pop	{r7, pc}
 800e6d0:	20007ce8 	.word	0x20007ce8

0800e6d4 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800e6d4:	b5b0      	push	{r4, r5, r7, lr}
 800e6d6:	b08a      	sub	sp, #40	; 0x28
 800e6d8:	af04      	add	r7, sp, #16
 800e6da:	6078      	str	r0, [r7, #4]
 800e6dc:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800e6de:	683b      	ldr	r3, [r7, #0]
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	d107      	bne.n	800e6f4 <etharp_input+0x20>
 800e6e4:	4b3f      	ldr	r3, [pc, #252]	; (800e7e4 <etharp_input+0x110>)
 800e6e6:	f240 228a 	movw	r2, #650	; 0x28a
 800e6ea:	493f      	ldr	r1, [pc, #252]	; (800e7e8 <etharp_input+0x114>)
 800e6ec:	483f      	ldr	r0, [pc, #252]	; (800e7ec <etharp_input+0x118>)
 800e6ee:	f002 f821 	bl	8010734 <iprintf>
 800e6f2:	e074      	b.n	800e7de <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	685b      	ldr	r3, [r3, #4]
 800e6f8:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800e6fa:	693b      	ldr	r3, [r7, #16]
 800e6fc:	881b      	ldrh	r3, [r3, #0]
 800e6fe:	b29b      	uxth	r3, r3
 800e700:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e704:	d10c      	bne.n	800e720 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800e706:	693b      	ldr	r3, [r7, #16]
 800e708:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800e70a:	2b06      	cmp	r3, #6
 800e70c:	d108      	bne.n	800e720 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800e70e:	693b      	ldr	r3, [r7, #16]
 800e710:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800e712:	2b04      	cmp	r3, #4
 800e714:	d104      	bne.n	800e720 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800e716:	693b      	ldr	r3, [r7, #16]
 800e718:	885b      	ldrh	r3, [r3, #2]
 800e71a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800e71c:	2b08      	cmp	r3, #8
 800e71e:	d003      	beq.n	800e728 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800e720:	6878      	ldr	r0, [r7, #4]
 800e722:	f7f7 fc5f 	bl	8005fe4 <pbuf_free>
    return;
 800e726:	e05a      	b.n	800e7de <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800e728:	693b      	ldr	r3, [r7, #16]
 800e72a:	330e      	adds	r3, #14
 800e72c:	681b      	ldr	r3, [r3, #0]
 800e72e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800e730:	693b      	ldr	r3, [r7, #16]
 800e732:	3318      	adds	r3, #24
 800e734:	681b      	ldr	r3, [r3, #0]
 800e736:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800e738:	683b      	ldr	r3, [r7, #0]
 800e73a:	3304      	adds	r3, #4
 800e73c:	681b      	ldr	r3, [r3, #0]
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d102      	bne.n	800e748 <etharp_input+0x74>
    for_us = 0;
 800e742:	2300      	movs	r3, #0
 800e744:	75fb      	strb	r3, [r7, #23]
 800e746:	e009      	b.n	800e75c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800e748:	68ba      	ldr	r2, [r7, #8]
 800e74a:	683b      	ldr	r3, [r7, #0]
 800e74c:	3304      	adds	r3, #4
 800e74e:	681b      	ldr	r3, [r3, #0]
 800e750:	429a      	cmp	r2, r3
 800e752:	bf0c      	ite	eq
 800e754:	2301      	moveq	r3, #1
 800e756:	2300      	movne	r3, #0
 800e758:	b2db      	uxtb	r3, r3
 800e75a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800e75c:	693b      	ldr	r3, [r7, #16]
 800e75e:	f103 0208 	add.w	r2, r3, #8
 800e762:	7dfb      	ldrb	r3, [r7, #23]
 800e764:	2b00      	cmp	r3, #0
 800e766:	d001      	beq.n	800e76c <etharp_input+0x98>
 800e768:	2301      	movs	r3, #1
 800e76a:	e000      	b.n	800e76e <etharp_input+0x9a>
 800e76c:	2302      	movs	r3, #2
 800e76e:	f107 010c 	add.w	r1, r7, #12
 800e772:	6838      	ldr	r0, [r7, #0]
 800e774:	f7ff fed8 	bl	800e528 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800e778:	693b      	ldr	r3, [r7, #16]
 800e77a:	88db      	ldrh	r3, [r3, #6]
 800e77c:	b29b      	uxth	r3, r3
 800e77e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e782:	d003      	beq.n	800e78c <etharp_input+0xb8>
 800e784:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e788:	d01e      	beq.n	800e7c8 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800e78a:	e025      	b.n	800e7d8 <etharp_input+0x104>
      if (for_us) {
 800e78c:	7dfb      	ldrb	r3, [r7, #23]
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d021      	beq.n	800e7d6 <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800e792:	683b      	ldr	r3, [r7, #0]
 800e794:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 800e798:	693b      	ldr	r3, [r7, #16]
 800e79a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800e79e:	683b      	ldr	r3, [r7, #0]
 800e7a0:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 800e7a4:	683b      	ldr	r3, [r7, #0]
 800e7a6:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800e7a8:	693a      	ldr	r2, [r7, #16]
 800e7aa:	3208      	adds	r2, #8
        etharp_raw(netif,
 800e7ac:	2102      	movs	r1, #2
 800e7ae:	9103      	str	r1, [sp, #12]
 800e7b0:	f107 010c 	add.w	r1, r7, #12
 800e7b4:	9102      	str	r1, [sp, #8]
 800e7b6:	9201      	str	r2, [sp, #4]
 800e7b8:	9300      	str	r3, [sp, #0]
 800e7ba:	462b      	mov	r3, r5
 800e7bc:	4622      	mov	r2, r4
 800e7be:	4601      	mov	r1, r0
 800e7c0:	6838      	ldr	r0, [r7, #0]
 800e7c2:	f000 faef 	bl	800eda4 <etharp_raw>
      break;
 800e7c6:	e006      	b.n	800e7d6 <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 800e7c8:	f107 030c 	add.w	r3, r7, #12
 800e7cc:	4619      	mov	r1, r3
 800e7ce:	6838      	ldr	r0, [r7, #0]
 800e7d0:	f7fe f9fc 	bl	800cbcc <dhcp_arp_reply>
      break;
 800e7d4:	e000      	b.n	800e7d8 <etharp_input+0x104>
      break;
 800e7d6:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800e7d8:	6878      	ldr	r0, [r7, #4]
 800e7da:	f7f7 fc03 	bl	8005fe4 <pbuf_free>
}
 800e7de:	3718      	adds	r7, #24
 800e7e0:	46bd      	mov	sp, r7
 800e7e2:	bdb0      	pop	{r4, r5, r7, pc}
 800e7e4:	08013ea8 	.word	0x08013ea8
 800e7e8:	08013ff8 	.word	0x08013ff8
 800e7ec:	08013f20 	.word	0x08013f20

0800e7f0 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800e7f0:	b580      	push	{r7, lr}
 800e7f2:	b086      	sub	sp, #24
 800e7f4:	af02      	add	r7, sp, #8
 800e7f6:	60f8      	str	r0, [r7, #12]
 800e7f8:	60b9      	str	r1, [r7, #8]
 800e7fa:	4613      	mov	r3, r2
 800e7fc:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800e7fe:	79fa      	ldrb	r2, [r7, #7]
 800e800:	4944      	ldr	r1, [pc, #272]	; (800e914 <etharp_output_to_arp_index+0x124>)
 800e802:	4613      	mov	r3, r2
 800e804:	005b      	lsls	r3, r3, #1
 800e806:	4413      	add	r3, r2
 800e808:	00db      	lsls	r3, r3, #3
 800e80a:	440b      	add	r3, r1
 800e80c:	3314      	adds	r3, #20
 800e80e:	781b      	ldrb	r3, [r3, #0]
 800e810:	2b01      	cmp	r3, #1
 800e812:	d806      	bhi.n	800e822 <etharp_output_to_arp_index+0x32>
 800e814:	4b40      	ldr	r3, [pc, #256]	; (800e918 <etharp_output_to_arp_index+0x128>)
 800e816:	f240 22ee 	movw	r2, #750	; 0x2ee
 800e81a:	4940      	ldr	r1, [pc, #256]	; (800e91c <etharp_output_to_arp_index+0x12c>)
 800e81c:	4840      	ldr	r0, [pc, #256]	; (800e920 <etharp_output_to_arp_index+0x130>)
 800e81e:	f001 ff89 	bl	8010734 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800e822:	79fa      	ldrb	r2, [r7, #7]
 800e824:	493b      	ldr	r1, [pc, #236]	; (800e914 <etharp_output_to_arp_index+0x124>)
 800e826:	4613      	mov	r3, r2
 800e828:	005b      	lsls	r3, r3, #1
 800e82a:	4413      	add	r3, r2
 800e82c:	00db      	lsls	r3, r3, #3
 800e82e:	440b      	add	r3, r1
 800e830:	3314      	adds	r3, #20
 800e832:	781b      	ldrb	r3, [r3, #0]
 800e834:	2b02      	cmp	r3, #2
 800e836:	d153      	bne.n	800e8e0 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800e838:	79fa      	ldrb	r2, [r7, #7]
 800e83a:	4936      	ldr	r1, [pc, #216]	; (800e914 <etharp_output_to_arp_index+0x124>)
 800e83c:	4613      	mov	r3, r2
 800e83e:	005b      	lsls	r3, r3, #1
 800e840:	4413      	add	r3, r2
 800e842:	00db      	lsls	r3, r3, #3
 800e844:	440b      	add	r3, r1
 800e846:	3312      	adds	r3, #18
 800e848:	881b      	ldrh	r3, [r3, #0]
 800e84a:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800e84e:	d919      	bls.n	800e884 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800e850:	79fa      	ldrb	r2, [r7, #7]
 800e852:	4613      	mov	r3, r2
 800e854:	005b      	lsls	r3, r3, #1
 800e856:	4413      	add	r3, r2
 800e858:	00db      	lsls	r3, r3, #3
 800e85a:	4a2e      	ldr	r2, [pc, #184]	; (800e914 <etharp_output_to_arp_index+0x124>)
 800e85c:	4413      	add	r3, r2
 800e85e:	3304      	adds	r3, #4
 800e860:	4619      	mov	r1, r3
 800e862:	68f8      	ldr	r0, [r7, #12]
 800e864:	f000 fb4c 	bl	800ef00 <etharp_request>
 800e868:	4603      	mov	r3, r0
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d138      	bne.n	800e8e0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800e86e:	79fa      	ldrb	r2, [r7, #7]
 800e870:	4928      	ldr	r1, [pc, #160]	; (800e914 <etharp_output_to_arp_index+0x124>)
 800e872:	4613      	mov	r3, r2
 800e874:	005b      	lsls	r3, r3, #1
 800e876:	4413      	add	r3, r2
 800e878:	00db      	lsls	r3, r3, #3
 800e87a:	440b      	add	r3, r1
 800e87c:	3314      	adds	r3, #20
 800e87e:	2203      	movs	r2, #3
 800e880:	701a      	strb	r2, [r3, #0]
 800e882:	e02d      	b.n	800e8e0 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800e884:	79fa      	ldrb	r2, [r7, #7]
 800e886:	4923      	ldr	r1, [pc, #140]	; (800e914 <etharp_output_to_arp_index+0x124>)
 800e888:	4613      	mov	r3, r2
 800e88a:	005b      	lsls	r3, r3, #1
 800e88c:	4413      	add	r3, r2
 800e88e:	00db      	lsls	r3, r3, #3
 800e890:	440b      	add	r3, r1
 800e892:	3312      	adds	r3, #18
 800e894:	881b      	ldrh	r3, [r3, #0]
 800e896:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800e89a:	d321      	bcc.n	800e8e0 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800e89c:	79fa      	ldrb	r2, [r7, #7]
 800e89e:	4613      	mov	r3, r2
 800e8a0:	005b      	lsls	r3, r3, #1
 800e8a2:	4413      	add	r3, r2
 800e8a4:	00db      	lsls	r3, r3, #3
 800e8a6:	4a1b      	ldr	r2, [pc, #108]	; (800e914 <etharp_output_to_arp_index+0x124>)
 800e8a8:	4413      	add	r3, r2
 800e8aa:	1d19      	adds	r1, r3, #4
 800e8ac:	79fa      	ldrb	r2, [r7, #7]
 800e8ae:	4613      	mov	r3, r2
 800e8b0:	005b      	lsls	r3, r3, #1
 800e8b2:	4413      	add	r3, r2
 800e8b4:	00db      	lsls	r3, r3, #3
 800e8b6:	3308      	adds	r3, #8
 800e8b8:	4a16      	ldr	r2, [pc, #88]	; (800e914 <etharp_output_to_arp_index+0x124>)
 800e8ba:	4413      	add	r3, r2
 800e8bc:	3304      	adds	r3, #4
 800e8be:	461a      	mov	r2, r3
 800e8c0:	68f8      	ldr	r0, [r7, #12]
 800e8c2:	f000 fafb 	bl	800eebc <etharp_request_dst>
 800e8c6:	4603      	mov	r3, r0
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d109      	bne.n	800e8e0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800e8cc:	79fa      	ldrb	r2, [r7, #7]
 800e8ce:	4911      	ldr	r1, [pc, #68]	; (800e914 <etharp_output_to_arp_index+0x124>)
 800e8d0:	4613      	mov	r3, r2
 800e8d2:	005b      	lsls	r3, r3, #1
 800e8d4:	4413      	add	r3, r2
 800e8d6:	00db      	lsls	r3, r3, #3
 800e8d8:	440b      	add	r3, r1
 800e8da:	3314      	adds	r3, #20
 800e8dc:	2203      	movs	r2, #3
 800e8de:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800e8e0:	68fb      	ldr	r3, [r7, #12]
 800e8e2:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 800e8e6:	79fa      	ldrb	r2, [r7, #7]
 800e8e8:	4613      	mov	r3, r2
 800e8ea:	005b      	lsls	r3, r3, #1
 800e8ec:	4413      	add	r3, r2
 800e8ee:	00db      	lsls	r3, r3, #3
 800e8f0:	3308      	adds	r3, #8
 800e8f2:	4a08      	ldr	r2, [pc, #32]	; (800e914 <etharp_output_to_arp_index+0x124>)
 800e8f4:	4413      	add	r3, r2
 800e8f6:	3304      	adds	r3, #4
 800e8f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e8fc:	9200      	str	r2, [sp, #0]
 800e8fe:	460a      	mov	r2, r1
 800e900:	68b9      	ldr	r1, [r7, #8]
 800e902:	68f8      	ldr	r0, [r7, #12]
 800e904:	f001 fe84 	bl	8010610 <ethernet_output>
 800e908:	4603      	mov	r3, r0
}
 800e90a:	4618      	mov	r0, r3
 800e90c:	3710      	adds	r7, #16
 800e90e:	46bd      	mov	sp, r7
 800e910:	bd80      	pop	{r7, pc}
 800e912:	bf00      	nop
 800e914:	20007ce8 	.word	0x20007ce8
 800e918:	08013ea8 	.word	0x08013ea8
 800e91c:	08014018 	.word	0x08014018
 800e920:	08013f20 	.word	0x08013f20

0800e924 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800e924:	b580      	push	{r7, lr}
 800e926:	b08a      	sub	sp, #40	; 0x28
 800e928:	af02      	add	r7, sp, #8
 800e92a:	60f8      	str	r0, [r7, #12]
 800e92c:	60b9      	str	r1, [r7, #8]
 800e92e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800e934:	68fb      	ldr	r3, [r7, #12]
 800e936:	2b00      	cmp	r3, #0
 800e938:	d106      	bne.n	800e948 <etharp_output+0x24>
 800e93a:	4b73      	ldr	r3, [pc, #460]	; (800eb08 <etharp_output+0x1e4>)
 800e93c:	f240 321e 	movw	r2, #798	; 0x31e
 800e940:	4972      	ldr	r1, [pc, #456]	; (800eb0c <etharp_output+0x1e8>)
 800e942:	4873      	ldr	r0, [pc, #460]	; (800eb10 <etharp_output+0x1ec>)
 800e944:	f001 fef6 	bl	8010734 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800e948:	68bb      	ldr	r3, [r7, #8]
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d106      	bne.n	800e95c <etharp_output+0x38>
 800e94e:	4b6e      	ldr	r3, [pc, #440]	; (800eb08 <etharp_output+0x1e4>)
 800e950:	f240 321f 	movw	r2, #799	; 0x31f
 800e954:	496f      	ldr	r1, [pc, #444]	; (800eb14 <etharp_output+0x1f0>)
 800e956:	486e      	ldr	r0, [pc, #440]	; (800eb10 <etharp_output+0x1ec>)
 800e958:	f001 feec 	bl	8010734 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d106      	bne.n	800e970 <etharp_output+0x4c>
 800e962:	4b69      	ldr	r3, [pc, #420]	; (800eb08 <etharp_output+0x1e4>)
 800e964:	f44f 7248 	mov.w	r2, #800	; 0x320
 800e968:	496b      	ldr	r1, [pc, #428]	; (800eb18 <etharp_output+0x1f4>)
 800e96a:	4869      	ldr	r0, [pc, #420]	; (800eb10 <etharp_output+0x1ec>)
 800e96c:	f001 fee2 	bl	8010734 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	681b      	ldr	r3, [r3, #0]
 800e974:	68f9      	ldr	r1, [r7, #12]
 800e976:	4618      	mov	r0, r3
 800e978:	f000 ff3c 	bl	800f7f4 <ip4_addr_isbroadcast_u32>
 800e97c:	4603      	mov	r3, r0
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d002      	beq.n	800e988 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800e982:	4b66      	ldr	r3, [pc, #408]	; (800eb1c <etharp_output+0x1f8>)
 800e984:	61fb      	str	r3, [r7, #28]
 800e986:	e0af      	b.n	800eae8 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	681b      	ldr	r3, [r3, #0]
 800e98c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e990:	2be0      	cmp	r3, #224	; 0xe0
 800e992:	d118      	bne.n	800e9c6 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800e994:	2301      	movs	r3, #1
 800e996:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800e998:	2300      	movs	r3, #0
 800e99a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800e99c:	235e      	movs	r3, #94	; 0x5e
 800e99e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	3301      	adds	r3, #1
 800e9a4:	781b      	ldrb	r3, [r3, #0]
 800e9a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e9aa:	b2db      	uxtb	r3, r3
 800e9ac:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	3302      	adds	r3, #2
 800e9b2:	781b      	ldrb	r3, [r3, #0]
 800e9b4:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	3303      	adds	r3, #3
 800e9ba:	781b      	ldrb	r3, [r3, #0]
 800e9bc:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800e9be:	f107 0310 	add.w	r3, r7, #16
 800e9c2:	61fb      	str	r3, [r7, #28]
 800e9c4:	e090      	b.n	800eae8 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	681a      	ldr	r2, [r3, #0]
 800e9ca:	68fb      	ldr	r3, [r7, #12]
 800e9cc:	3304      	adds	r3, #4
 800e9ce:	681b      	ldr	r3, [r3, #0]
 800e9d0:	405a      	eors	r2, r3
 800e9d2:	68fb      	ldr	r3, [r7, #12]
 800e9d4:	3308      	adds	r3, #8
 800e9d6:	681b      	ldr	r3, [r3, #0]
 800e9d8:	4013      	ands	r3, r2
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	d012      	beq.n	800ea04 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	681b      	ldr	r3, [r3, #0]
 800e9e2:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800e9e4:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800e9e8:	4293      	cmp	r3, r2
 800e9ea:	d00b      	beq.n	800ea04 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800e9ec:	68fb      	ldr	r3, [r7, #12]
 800e9ee:	330c      	adds	r3, #12
 800e9f0:	681b      	ldr	r3, [r3, #0]
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	d003      	beq.n	800e9fe <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800e9f6:	68fb      	ldr	r3, [r7, #12]
 800e9f8:	330c      	adds	r3, #12
 800e9fa:	61bb      	str	r3, [r7, #24]
 800e9fc:	e002      	b.n	800ea04 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800e9fe:	f06f 0303 	mvn.w	r3, #3
 800ea02:	e07d      	b.n	800eb00 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800ea04:	4b46      	ldr	r3, [pc, #280]	; (800eb20 <etharp_output+0x1fc>)
 800ea06:	781b      	ldrb	r3, [r3, #0]
 800ea08:	4619      	mov	r1, r3
 800ea0a:	4a46      	ldr	r2, [pc, #280]	; (800eb24 <etharp_output+0x200>)
 800ea0c:	460b      	mov	r3, r1
 800ea0e:	005b      	lsls	r3, r3, #1
 800ea10:	440b      	add	r3, r1
 800ea12:	00db      	lsls	r3, r3, #3
 800ea14:	4413      	add	r3, r2
 800ea16:	3314      	adds	r3, #20
 800ea18:	781b      	ldrb	r3, [r3, #0]
 800ea1a:	2b01      	cmp	r3, #1
 800ea1c:	d925      	bls.n	800ea6a <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800ea1e:	4b40      	ldr	r3, [pc, #256]	; (800eb20 <etharp_output+0x1fc>)
 800ea20:	781b      	ldrb	r3, [r3, #0]
 800ea22:	4619      	mov	r1, r3
 800ea24:	4a3f      	ldr	r2, [pc, #252]	; (800eb24 <etharp_output+0x200>)
 800ea26:	460b      	mov	r3, r1
 800ea28:	005b      	lsls	r3, r3, #1
 800ea2a:	440b      	add	r3, r1
 800ea2c:	00db      	lsls	r3, r3, #3
 800ea2e:	4413      	add	r3, r2
 800ea30:	3308      	adds	r3, #8
 800ea32:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800ea34:	68fa      	ldr	r2, [r7, #12]
 800ea36:	429a      	cmp	r2, r3
 800ea38:	d117      	bne.n	800ea6a <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800ea3a:	69bb      	ldr	r3, [r7, #24]
 800ea3c:	681a      	ldr	r2, [r3, #0]
 800ea3e:	4b38      	ldr	r3, [pc, #224]	; (800eb20 <etharp_output+0x1fc>)
 800ea40:	781b      	ldrb	r3, [r3, #0]
 800ea42:	4618      	mov	r0, r3
 800ea44:	4937      	ldr	r1, [pc, #220]	; (800eb24 <etharp_output+0x200>)
 800ea46:	4603      	mov	r3, r0
 800ea48:	005b      	lsls	r3, r3, #1
 800ea4a:	4403      	add	r3, r0
 800ea4c:	00db      	lsls	r3, r3, #3
 800ea4e:	440b      	add	r3, r1
 800ea50:	3304      	adds	r3, #4
 800ea52:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800ea54:	429a      	cmp	r2, r3
 800ea56:	d108      	bne.n	800ea6a <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800ea58:	4b31      	ldr	r3, [pc, #196]	; (800eb20 <etharp_output+0x1fc>)
 800ea5a:	781b      	ldrb	r3, [r3, #0]
 800ea5c:	461a      	mov	r2, r3
 800ea5e:	68b9      	ldr	r1, [r7, #8]
 800ea60:	68f8      	ldr	r0, [r7, #12]
 800ea62:	f7ff fec5 	bl	800e7f0 <etharp_output_to_arp_index>
 800ea66:	4603      	mov	r3, r0
 800ea68:	e04a      	b.n	800eb00 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800ea6a:	2300      	movs	r3, #0
 800ea6c:	75fb      	strb	r3, [r7, #23]
 800ea6e:	e031      	b.n	800ead4 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800ea70:	7dfa      	ldrb	r2, [r7, #23]
 800ea72:	492c      	ldr	r1, [pc, #176]	; (800eb24 <etharp_output+0x200>)
 800ea74:	4613      	mov	r3, r2
 800ea76:	005b      	lsls	r3, r3, #1
 800ea78:	4413      	add	r3, r2
 800ea7a:	00db      	lsls	r3, r3, #3
 800ea7c:	440b      	add	r3, r1
 800ea7e:	3314      	adds	r3, #20
 800ea80:	781b      	ldrb	r3, [r3, #0]
 800ea82:	2b01      	cmp	r3, #1
 800ea84:	d923      	bls.n	800eace <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800ea86:	7dfa      	ldrb	r2, [r7, #23]
 800ea88:	4926      	ldr	r1, [pc, #152]	; (800eb24 <etharp_output+0x200>)
 800ea8a:	4613      	mov	r3, r2
 800ea8c:	005b      	lsls	r3, r3, #1
 800ea8e:	4413      	add	r3, r2
 800ea90:	00db      	lsls	r3, r3, #3
 800ea92:	440b      	add	r3, r1
 800ea94:	3308      	adds	r3, #8
 800ea96:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800ea98:	68fa      	ldr	r2, [r7, #12]
 800ea9a:	429a      	cmp	r2, r3
 800ea9c:	d117      	bne.n	800eace <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800ea9e:	69bb      	ldr	r3, [r7, #24]
 800eaa0:	6819      	ldr	r1, [r3, #0]
 800eaa2:	7dfa      	ldrb	r2, [r7, #23]
 800eaa4:	481f      	ldr	r0, [pc, #124]	; (800eb24 <etharp_output+0x200>)
 800eaa6:	4613      	mov	r3, r2
 800eaa8:	005b      	lsls	r3, r3, #1
 800eaaa:	4413      	add	r3, r2
 800eaac:	00db      	lsls	r3, r3, #3
 800eaae:	4403      	add	r3, r0
 800eab0:	3304      	adds	r3, #4
 800eab2:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800eab4:	4299      	cmp	r1, r3
 800eab6:	d10a      	bne.n	800eace <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800eab8:	4a19      	ldr	r2, [pc, #100]	; (800eb20 <etharp_output+0x1fc>)
 800eaba:	7dfb      	ldrb	r3, [r7, #23]
 800eabc:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800eabe:	7dfb      	ldrb	r3, [r7, #23]
 800eac0:	461a      	mov	r2, r3
 800eac2:	68b9      	ldr	r1, [r7, #8]
 800eac4:	68f8      	ldr	r0, [r7, #12]
 800eac6:	f7ff fe93 	bl	800e7f0 <etharp_output_to_arp_index>
 800eaca:	4603      	mov	r3, r0
 800eacc:	e018      	b.n	800eb00 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800eace:	7dfb      	ldrb	r3, [r7, #23]
 800ead0:	3301      	adds	r3, #1
 800ead2:	75fb      	strb	r3, [r7, #23]
 800ead4:	7dfb      	ldrb	r3, [r7, #23]
 800ead6:	2b09      	cmp	r3, #9
 800ead8:	d9ca      	bls.n	800ea70 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800eada:	68ba      	ldr	r2, [r7, #8]
 800eadc:	69b9      	ldr	r1, [r7, #24]
 800eade:	68f8      	ldr	r0, [r7, #12]
 800eae0:	f000 f822 	bl	800eb28 <etharp_query>
 800eae4:	4603      	mov	r3, r0
 800eae6:	e00b      	b.n	800eb00 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800eae8:	68fb      	ldr	r3, [r7, #12]
 800eaea:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 800eaee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800eaf2:	9300      	str	r3, [sp, #0]
 800eaf4:	69fb      	ldr	r3, [r7, #28]
 800eaf6:	68b9      	ldr	r1, [r7, #8]
 800eaf8:	68f8      	ldr	r0, [r7, #12]
 800eafa:	f001 fd89 	bl	8010610 <ethernet_output>
 800eafe:	4603      	mov	r3, r0
}
 800eb00:	4618      	mov	r0, r3
 800eb02:	3720      	adds	r7, #32
 800eb04:	46bd      	mov	sp, r7
 800eb06:	bd80      	pop	{r7, pc}
 800eb08:	08013ea8 	.word	0x08013ea8
 800eb0c:	08013ff8 	.word	0x08013ff8
 800eb10:	08013f20 	.word	0x08013f20
 800eb14:	08014048 	.word	0x08014048
 800eb18:	08013fe8 	.word	0x08013fe8
 800eb1c:	08014678 	.word	0x08014678
 800eb20:	20007dd8 	.word	0x20007dd8
 800eb24:	20007ce8 	.word	0x20007ce8

0800eb28 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800eb28:	b580      	push	{r7, lr}
 800eb2a:	b08c      	sub	sp, #48	; 0x30
 800eb2c:	af02      	add	r7, sp, #8
 800eb2e:	60f8      	str	r0, [r7, #12]
 800eb30:	60b9      	str	r1, [r7, #8]
 800eb32:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800eb34:	68fb      	ldr	r3, [r7, #12]
 800eb36:	332a      	adds	r3, #42	; 0x2a
 800eb38:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800eb3a:	23ff      	movs	r3, #255	; 0xff
 800eb3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800eb40:	2300      	movs	r3, #0
 800eb42:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800eb44:	68bb      	ldr	r3, [r7, #8]
 800eb46:	681b      	ldr	r3, [r3, #0]
 800eb48:	68f9      	ldr	r1, [r7, #12]
 800eb4a:	4618      	mov	r0, r3
 800eb4c:	f000 fe52 	bl	800f7f4 <ip4_addr_isbroadcast_u32>
 800eb50:	4603      	mov	r3, r0
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	d10c      	bne.n	800eb70 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800eb56:	68bb      	ldr	r3, [r7, #8]
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800eb5e:	2be0      	cmp	r3, #224	; 0xe0
 800eb60:	d006      	beq.n	800eb70 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800eb62:	68bb      	ldr	r3, [r7, #8]
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d003      	beq.n	800eb70 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800eb68:	68bb      	ldr	r3, [r7, #8]
 800eb6a:	681b      	ldr	r3, [r3, #0]
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d102      	bne.n	800eb76 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800eb70:	f06f 030f 	mvn.w	r3, #15
 800eb74:	e101      	b.n	800ed7a <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800eb76:	68fa      	ldr	r2, [r7, #12]
 800eb78:	2101      	movs	r1, #1
 800eb7a:	68b8      	ldr	r0, [r7, #8]
 800eb7c:	f7ff fb5c 	bl	800e238 <etharp_find_entry>
 800eb80:	4603      	mov	r3, r0
 800eb82:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800eb84:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	da02      	bge.n	800eb92 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800eb8c:	8a7b      	ldrh	r3, [r7, #18]
 800eb8e:	b25b      	sxtb	r3, r3
 800eb90:	e0f3      	b.n	800ed7a <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800eb92:	8a7b      	ldrh	r3, [r7, #18]
 800eb94:	2b7e      	cmp	r3, #126	; 0x7e
 800eb96:	d906      	bls.n	800eba6 <etharp_query+0x7e>
 800eb98:	4b7a      	ldr	r3, [pc, #488]	; (800ed84 <etharp_query+0x25c>)
 800eb9a:	f240 32c1 	movw	r2, #961	; 0x3c1
 800eb9e:	497a      	ldr	r1, [pc, #488]	; (800ed88 <etharp_query+0x260>)
 800eba0:	487a      	ldr	r0, [pc, #488]	; (800ed8c <etharp_query+0x264>)
 800eba2:	f001 fdc7 	bl	8010734 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800eba6:	8a7b      	ldrh	r3, [r7, #18]
 800eba8:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800ebaa:	7c7a      	ldrb	r2, [r7, #17]
 800ebac:	4978      	ldr	r1, [pc, #480]	; (800ed90 <etharp_query+0x268>)
 800ebae:	4613      	mov	r3, r2
 800ebb0:	005b      	lsls	r3, r3, #1
 800ebb2:	4413      	add	r3, r2
 800ebb4:	00db      	lsls	r3, r3, #3
 800ebb6:	440b      	add	r3, r1
 800ebb8:	3314      	adds	r3, #20
 800ebba:	781b      	ldrb	r3, [r3, #0]
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	d115      	bne.n	800ebec <etharp_query+0xc4>
    is_new_entry = 1;
 800ebc0:	2301      	movs	r3, #1
 800ebc2:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800ebc4:	7c7a      	ldrb	r2, [r7, #17]
 800ebc6:	4972      	ldr	r1, [pc, #456]	; (800ed90 <etharp_query+0x268>)
 800ebc8:	4613      	mov	r3, r2
 800ebca:	005b      	lsls	r3, r3, #1
 800ebcc:	4413      	add	r3, r2
 800ebce:	00db      	lsls	r3, r3, #3
 800ebd0:	440b      	add	r3, r1
 800ebd2:	3314      	adds	r3, #20
 800ebd4:	2201      	movs	r2, #1
 800ebd6:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800ebd8:	7c7a      	ldrb	r2, [r7, #17]
 800ebda:	496d      	ldr	r1, [pc, #436]	; (800ed90 <etharp_query+0x268>)
 800ebdc:	4613      	mov	r3, r2
 800ebde:	005b      	lsls	r3, r3, #1
 800ebe0:	4413      	add	r3, r2
 800ebe2:	00db      	lsls	r3, r3, #3
 800ebe4:	440b      	add	r3, r1
 800ebe6:	3308      	adds	r3, #8
 800ebe8:	68fa      	ldr	r2, [r7, #12]
 800ebea:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800ebec:	7c7a      	ldrb	r2, [r7, #17]
 800ebee:	4968      	ldr	r1, [pc, #416]	; (800ed90 <etharp_query+0x268>)
 800ebf0:	4613      	mov	r3, r2
 800ebf2:	005b      	lsls	r3, r3, #1
 800ebf4:	4413      	add	r3, r2
 800ebf6:	00db      	lsls	r3, r3, #3
 800ebf8:	440b      	add	r3, r1
 800ebfa:	3314      	adds	r3, #20
 800ebfc:	781b      	ldrb	r3, [r3, #0]
 800ebfe:	2b01      	cmp	r3, #1
 800ec00:	d011      	beq.n	800ec26 <etharp_query+0xfe>
 800ec02:	7c7a      	ldrb	r2, [r7, #17]
 800ec04:	4962      	ldr	r1, [pc, #392]	; (800ed90 <etharp_query+0x268>)
 800ec06:	4613      	mov	r3, r2
 800ec08:	005b      	lsls	r3, r3, #1
 800ec0a:	4413      	add	r3, r2
 800ec0c:	00db      	lsls	r3, r3, #3
 800ec0e:	440b      	add	r3, r1
 800ec10:	3314      	adds	r3, #20
 800ec12:	781b      	ldrb	r3, [r3, #0]
 800ec14:	2b01      	cmp	r3, #1
 800ec16:	d806      	bhi.n	800ec26 <etharp_query+0xfe>
 800ec18:	4b5a      	ldr	r3, [pc, #360]	; (800ed84 <etharp_query+0x25c>)
 800ec1a:	f240 32cd 	movw	r2, #973	; 0x3cd
 800ec1e:	495d      	ldr	r1, [pc, #372]	; (800ed94 <etharp_query+0x26c>)
 800ec20:	485a      	ldr	r0, [pc, #360]	; (800ed8c <etharp_query+0x264>)
 800ec22:	f001 fd87 	bl	8010734 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800ec26:	6a3b      	ldr	r3, [r7, #32]
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	d102      	bne.n	800ec32 <etharp_query+0x10a>
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d10c      	bne.n	800ec4c <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800ec32:	68b9      	ldr	r1, [r7, #8]
 800ec34:	68f8      	ldr	r0, [r7, #12]
 800ec36:	f000 f963 	bl	800ef00 <etharp_request>
 800ec3a:	4603      	mov	r3, r0
 800ec3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	d102      	bne.n	800ec4c <etharp_query+0x124>
      return result;
 800ec46:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ec4a:	e096      	b.n	800ed7a <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	d106      	bne.n	800ec60 <etharp_query+0x138>
 800ec52:	4b4c      	ldr	r3, [pc, #304]	; (800ed84 <etharp_query+0x25c>)
 800ec54:	f240 32e1 	movw	r2, #993	; 0x3e1
 800ec58:	494f      	ldr	r1, [pc, #316]	; (800ed98 <etharp_query+0x270>)
 800ec5a:	484c      	ldr	r0, [pc, #304]	; (800ed8c <etharp_query+0x264>)
 800ec5c:	f001 fd6a 	bl	8010734 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800ec60:	7c7a      	ldrb	r2, [r7, #17]
 800ec62:	494b      	ldr	r1, [pc, #300]	; (800ed90 <etharp_query+0x268>)
 800ec64:	4613      	mov	r3, r2
 800ec66:	005b      	lsls	r3, r3, #1
 800ec68:	4413      	add	r3, r2
 800ec6a:	00db      	lsls	r3, r3, #3
 800ec6c:	440b      	add	r3, r1
 800ec6e:	3314      	adds	r3, #20
 800ec70:	781b      	ldrb	r3, [r3, #0]
 800ec72:	2b01      	cmp	r3, #1
 800ec74:	d917      	bls.n	800eca6 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800ec76:	4a49      	ldr	r2, [pc, #292]	; (800ed9c <etharp_query+0x274>)
 800ec78:	7c7b      	ldrb	r3, [r7, #17]
 800ec7a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800ec7c:	7c7a      	ldrb	r2, [r7, #17]
 800ec7e:	4613      	mov	r3, r2
 800ec80:	005b      	lsls	r3, r3, #1
 800ec82:	4413      	add	r3, r2
 800ec84:	00db      	lsls	r3, r3, #3
 800ec86:	3308      	adds	r3, #8
 800ec88:	4a41      	ldr	r2, [pc, #260]	; (800ed90 <etharp_query+0x268>)
 800ec8a:	4413      	add	r3, r2
 800ec8c:	3304      	adds	r3, #4
 800ec8e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ec92:	9200      	str	r2, [sp, #0]
 800ec94:	697a      	ldr	r2, [r7, #20]
 800ec96:	6879      	ldr	r1, [r7, #4]
 800ec98:	68f8      	ldr	r0, [r7, #12]
 800ec9a:	f001 fcb9 	bl	8010610 <ethernet_output>
 800ec9e:	4603      	mov	r3, r0
 800eca0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800eca4:	e067      	b.n	800ed76 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800eca6:	7c7a      	ldrb	r2, [r7, #17]
 800eca8:	4939      	ldr	r1, [pc, #228]	; (800ed90 <etharp_query+0x268>)
 800ecaa:	4613      	mov	r3, r2
 800ecac:	005b      	lsls	r3, r3, #1
 800ecae:	4413      	add	r3, r2
 800ecb0:	00db      	lsls	r3, r3, #3
 800ecb2:	440b      	add	r3, r1
 800ecb4:	3314      	adds	r3, #20
 800ecb6:	781b      	ldrb	r3, [r3, #0]
 800ecb8:	2b01      	cmp	r3, #1
 800ecba:	d15c      	bne.n	800ed76 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800ecbc:	2300      	movs	r3, #0
 800ecbe:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	61fb      	str	r3, [r7, #28]
    while (p) {
 800ecc4:	e01c      	b.n	800ed00 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800ecc6:	69fb      	ldr	r3, [r7, #28]
 800ecc8:	895a      	ldrh	r2, [r3, #10]
 800ecca:	69fb      	ldr	r3, [r7, #28]
 800eccc:	891b      	ldrh	r3, [r3, #8]
 800ecce:	429a      	cmp	r2, r3
 800ecd0:	d10a      	bne.n	800ece8 <etharp_query+0x1c0>
 800ecd2:	69fb      	ldr	r3, [r7, #28]
 800ecd4:	681b      	ldr	r3, [r3, #0]
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	d006      	beq.n	800ece8 <etharp_query+0x1c0>
 800ecda:	4b2a      	ldr	r3, [pc, #168]	; (800ed84 <etharp_query+0x25c>)
 800ecdc:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800ece0:	492f      	ldr	r1, [pc, #188]	; (800eda0 <etharp_query+0x278>)
 800ece2:	482a      	ldr	r0, [pc, #168]	; (800ed8c <etharp_query+0x264>)
 800ece4:	f001 fd26 	bl	8010734 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800ece8:	69fb      	ldr	r3, [r7, #28]
 800ecea:	7b1b      	ldrb	r3, [r3, #12]
 800ecec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	d002      	beq.n	800ecfa <etharp_query+0x1d2>
        copy_needed = 1;
 800ecf4:	2301      	movs	r3, #1
 800ecf6:	61bb      	str	r3, [r7, #24]
        break;
 800ecf8:	e005      	b.n	800ed06 <etharp_query+0x1de>
      }
      p = p->next;
 800ecfa:	69fb      	ldr	r3, [r7, #28]
 800ecfc:	681b      	ldr	r3, [r3, #0]
 800ecfe:	61fb      	str	r3, [r7, #28]
    while (p) {
 800ed00:	69fb      	ldr	r3, [r7, #28]
 800ed02:	2b00      	cmp	r3, #0
 800ed04:	d1df      	bne.n	800ecc6 <etharp_query+0x19e>
    }
    if (copy_needed) {
 800ed06:	69bb      	ldr	r3, [r7, #24]
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d007      	beq.n	800ed1c <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800ed0c:	687a      	ldr	r2, [r7, #4]
 800ed0e:	f44f 7120 	mov.w	r1, #640	; 0x280
 800ed12:	200e      	movs	r0, #14
 800ed14:	f7f7 fbd2 	bl	80064bc <pbuf_clone>
 800ed18:	61f8      	str	r0, [r7, #28]
 800ed1a:	e004      	b.n	800ed26 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800ed20:	69f8      	ldr	r0, [r7, #28]
 800ed22:	f7f7 f9ff 	bl	8006124 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800ed26:	69fb      	ldr	r3, [r7, #28]
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	d021      	beq.n	800ed70 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800ed2c:	7c7a      	ldrb	r2, [r7, #17]
 800ed2e:	4918      	ldr	r1, [pc, #96]	; (800ed90 <etharp_query+0x268>)
 800ed30:	4613      	mov	r3, r2
 800ed32:	005b      	lsls	r3, r3, #1
 800ed34:	4413      	add	r3, r2
 800ed36:	00db      	lsls	r3, r3, #3
 800ed38:	440b      	add	r3, r1
 800ed3a:	681b      	ldr	r3, [r3, #0]
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	d00a      	beq.n	800ed56 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800ed40:	7c7a      	ldrb	r2, [r7, #17]
 800ed42:	4913      	ldr	r1, [pc, #76]	; (800ed90 <etharp_query+0x268>)
 800ed44:	4613      	mov	r3, r2
 800ed46:	005b      	lsls	r3, r3, #1
 800ed48:	4413      	add	r3, r2
 800ed4a:	00db      	lsls	r3, r3, #3
 800ed4c:	440b      	add	r3, r1
 800ed4e:	681b      	ldr	r3, [r3, #0]
 800ed50:	4618      	mov	r0, r3
 800ed52:	f7f7 f947 	bl	8005fe4 <pbuf_free>
      }
      arp_table[i].q = p;
 800ed56:	7c7a      	ldrb	r2, [r7, #17]
 800ed58:	490d      	ldr	r1, [pc, #52]	; (800ed90 <etharp_query+0x268>)
 800ed5a:	4613      	mov	r3, r2
 800ed5c:	005b      	lsls	r3, r3, #1
 800ed5e:	4413      	add	r3, r2
 800ed60:	00db      	lsls	r3, r3, #3
 800ed62:	440b      	add	r3, r1
 800ed64:	69fa      	ldr	r2, [r7, #28]
 800ed66:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800ed68:	2300      	movs	r3, #0
 800ed6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ed6e:	e002      	b.n	800ed76 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800ed70:	23ff      	movs	r3, #255	; 0xff
 800ed72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800ed76:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800ed7a:	4618      	mov	r0, r3
 800ed7c:	3728      	adds	r7, #40	; 0x28
 800ed7e:	46bd      	mov	sp, r7
 800ed80:	bd80      	pop	{r7, pc}
 800ed82:	bf00      	nop
 800ed84:	08013ea8 	.word	0x08013ea8
 800ed88:	08014054 	.word	0x08014054
 800ed8c:	08013f20 	.word	0x08013f20
 800ed90:	20007ce8 	.word	0x20007ce8
 800ed94:	08014064 	.word	0x08014064
 800ed98:	08014048 	.word	0x08014048
 800ed9c:	20007dd8 	.word	0x20007dd8
 800eda0:	0801408c 	.word	0x0801408c

0800eda4 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800eda4:	b580      	push	{r7, lr}
 800eda6:	b08a      	sub	sp, #40	; 0x28
 800eda8:	af02      	add	r7, sp, #8
 800edaa:	60f8      	str	r0, [r7, #12]
 800edac:	60b9      	str	r1, [r7, #8]
 800edae:	607a      	str	r2, [r7, #4]
 800edb0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800edb2:	2300      	movs	r3, #0
 800edb4:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800edb6:	68fb      	ldr	r3, [r7, #12]
 800edb8:	2b00      	cmp	r3, #0
 800edba:	d106      	bne.n	800edca <etharp_raw+0x26>
 800edbc:	4b3a      	ldr	r3, [pc, #232]	; (800eea8 <etharp_raw+0x104>)
 800edbe:	f240 4257 	movw	r2, #1111	; 0x457
 800edc2:	493a      	ldr	r1, [pc, #232]	; (800eeac <etharp_raw+0x108>)
 800edc4:	483a      	ldr	r0, [pc, #232]	; (800eeb0 <etharp_raw+0x10c>)
 800edc6:	f001 fcb5 	bl	8010734 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800edca:	f44f 7220 	mov.w	r2, #640	; 0x280
 800edce:	211c      	movs	r1, #28
 800edd0:	200e      	movs	r0, #14
 800edd2:	f7f6 fe23 	bl	8005a1c <pbuf_alloc>
 800edd6:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800edd8:	69bb      	ldr	r3, [r7, #24]
 800edda:	2b00      	cmp	r3, #0
 800eddc:	d102      	bne.n	800ede4 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800edde:	f04f 33ff 	mov.w	r3, #4294967295
 800ede2:	e05d      	b.n	800eea0 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800ede4:	69bb      	ldr	r3, [r7, #24]
 800ede6:	895b      	ldrh	r3, [r3, #10]
 800ede8:	2b1b      	cmp	r3, #27
 800edea:	d806      	bhi.n	800edfa <etharp_raw+0x56>
 800edec:	4b2e      	ldr	r3, [pc, #184]	; (800eea8 <etharp_raw+0x104>)
 800edee:	f240 4262 	movw	r2, #1122	; 0x462
 800edf2:	4930      	ldr	r1, [pc, #192]	; (800eeb4 <etharp_raw+0x110>)
 800edf4:	482e      	ldr	r0, [pc, #184]	; (800eeb0 <etharp_raw+0x10c>)
 800edf6:	f001 fc9d 	bl	8010734 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800edfa:	69bb      	ldr	r3, [r7, #24]
 800edfc:	685b      	ldr	r3, [r3, #4]
 800edfe:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800ee00:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800ee02:	4618      	mov	r0, r3
 800ee04:	f7f5 fcec 	bl	80047e0 <lwip_htons>
 800ee08:	4603      	mov	r3, r0
 800ee0a:	461a      	mov	r2, r3
 800ee0c:	697b      	ldr	r3, [r7, #20]
 800ee0e:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800ee10:	68fb      	ldr	r3, [r7, #12]
 800ee12:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ee16:	2b06      	cmp	r3, #6
 800ee18:	d006      	beq.n	800ee28 <etharp_raw+0x84>
 800ee1a:	4b23      	ldr	r3, [pc, #140]	; (800eea8 <etharp_raw+0x104>)
 800ee1c:	f240 4269 	movw	r2, #1129	; 0x469
 800ee20:	4925      	ldr	r1, [pc, #148]	; (800eeb8 <etharp_raw+0x114>)
 800ee22:	4823      	ldr	r0, [pc, #140]	; (800eeb0 <etharp_raw+0x10c>)
 800ee24:	f001 fc86 	bl	8010734 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800ee28:	697b      	ldr	r3, [r7, #20]
 800ee2a:	3308      	adds	r3, #8
 800ee2c:	2206      	movs	r2, #6
 800ee2e:	6839      	ldr	r1, [r7, #0]
 800ee30:	4618      	mov	r0, r3
 800ee32:	f001 fc69 	bl	8010708 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800ee36:	697b      	ldr	r3, [r7, #20]
 800ee38:	3312      	adds	r3, #18
 800ee3a:	2206      	movs	r2, #6
 800ee3c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ee3e:	4618      	mov	r0, r3
 800ee40:	f001 fc62 	bl	8010708 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800ee44:	697b      	ldr	r3, [r7, #20]
 800ee46:	330e      	adds	r3, #14
 800ee48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ee4a:	6812      	ldr	r2, [r2, #0]
 800ee4c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800ee4e:	697b      	ldr	r3, [r7, #20]
 800ee50:	3318      	adds	r3, #24
 800ee52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ee54:	6812      	ldr	r2, [r2, #0]
 800ee56:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800ee58:	697b      	ldr	r3, [r7, #20]
 800ee5a:	2200      	movs	r2, #0
 800ee5c:	701a      	strb	r2, [r3, #0]
 800ee5e:	2200      	movs	r2, #0
 800ee60:	f042 0201 	orr.w	r2, r2, #1
 800ee64:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800ee66:	697b      	ldr	r3, [r7, #20]
 800ee68:	2200      	movs	r2, #0
 800ee6a:	f042 0208 	orr.w	r2, r2, #8
 800ee6e:	709a      	strb	r2, [r3, #2]
 800ee70:	2200      	movs	r2, #0
 800ee72:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800ee74:	697b      	ldr	r3, [r7, #20]
 800ee76:	2206      	movs	r2, #6
 800ee78:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800ee7a:	697b      	ldr	r3, [r7, #20]
 800ee7c:	2204      	movs	r2, #4
 800ee7e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800ee80:	f640 0306 	movw	r3, #2054	; 0x806
 800ee84:	9300      	str	r3, [sp, #0]
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	68ba      	ldr	r2, [r7, #8]
 800ee8a:	69b9      	ldr	r1, [r7, #24]
 800ee8c:	68f8      	ldr	r0, [r7, #12]
 800ee8e:	f001 fbbf 	bl	8010610 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800ee92:	69b8      	ldr	r0, [r7, #24]
 800ee94:	f7f7 f8a6 	bl	8005fe4 <pbuf_free>
  p = NULL;
 800ee98:	2300      	movs	r3, #0
 800ee9a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800ee9c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800eea0:	4618      	mov	r0, r3
 800eea2:	3720      	adds	r7, #32
 800eea4:	46bd      	mov	sp, r7
 800eea6:	bd80      	pop	{r7, pc}
 800eea8:	08013ea8 	.word	0x08013ea8
 800eeac:	08013ff8 	.word	0x08013ff8
 800eeb0:	08013f20 	.word	0x08013f20
 800eeb4:	080140a8 	.word	0x080140a8
 800eeb8:	080140dc 	.word	0x080140dc

0800eebc <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800eebc:	b580      	push	{r7, lr}
 800eebe:	b088      	sub	sp, #32
 800eec0:	af04      	add	r7, sp, #16
 800eec2:	60f8      	str	r0, [r7, #12]
 800eec4:	60b9      	str	r1, [r7, #8]
 800eec6:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800eec8:	68fb      	ldr	r3, [r7, #12]
 800eeca:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800eece:	68fb      	ldr	r3, [r7, #12]
 800eed0:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 800eed4:	68fb      	ldr	r3, [r7, #12]
 800eed6:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800eed8:	2201      	movs	r2, #1
 800eeda:	9203      	str	r2, [sp, #12]
 800eedc:	68ba      	ldr	r2, [r7, #8]
 800eede:	9202      	str	r2, [sp, #8]
 800eee0:	4a06      	ldr	r2, [pc, #24]	; (800eefc <etharp_request_dst+0x40>)
 800eee2:	9201      	str	r2, [sp, #4]
 800eee4:	9300      	str	r3, [sp, #0]
 800eee6:	4603      	mov	r3, r0
 800eee8:	687a      	ldr	r2, [r7, #4]
 800eeea:	68f8      	ldr	r0, [r7, #12]
 800eeec:	f7ff ff5a 	bl	800eda4 <etharp_raw>
 800eef0:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800eef2:	4618      	mov	r0, r3
 800eef4:	3710      	adds	r7, #16
 800eef6:	46bd      	mov	sp, r7
 800eef8:	bd80      	pop	{r7, pc}
 800eefa:	bf00      	nop
 800eefc:	08014680 	.word	0x08014680

0800ef00 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800ef00:	b580      	push	{r7, lr}
 800ef02:	b082      	sub	sp, #8
 800ef04:	af00      	add	r7, sp, #0
 800ef06:	6078      	str	r0, [r7, #4]
 800ef08:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800ef0a:	4a05      	ldr	r2, [pc, #20]	; (800ef20 <etharp_request+0x20>)
 800ef0c:	6839      	ldr	r1, [r7, #0]
 800ef0e:	6878      	ldr	r0, [r7, #4]
 800ef10:	f7ff ffd4 	bl	800eebc <etharp_request_dst>
 800ef14:	4603      	mov	r3, r0
}
 800ef16:	4618      	mov	r0, r3
 800ef18:	3708      	adds	r7, #8
 800ef1a:	46bd      	mov	sp, r7
 800ef1c:	bd80      	pop	{r7, pc}
 800ef1e:	bf00      	nop
 800ef20:	08014678 	.word	0x08014678

0800ef24 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800ef24:	b580      	push	{r7, lr}
 800ef26:	b08e      	sub	sp, #56	; 0x38
 800ef28:	af04      	add	r7, sp, #16
 800ef2a:	6078      	str	r0, [r7, #4]
 800ef2c:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800ef2e:	4b87      	ldr	r3, [pc, #540]	; (800f14c <icmp_input+0x228>)
 800ef30:	689b      	ldr	r3, [r3, #8]
 800ef32:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800ef34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef36:	781b      	ldrb	r3, [r3, #0]
 800ef38:	f003 030f 	and.w	r3, r3, #15
 800ef3c:	b2db      	uxtb	r3, r3
 800ef3e:	009b      	lsls	r3, r3, #2
 800ef40:	b2db      	uxtb	r3, r3
 800ef42:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800ef44:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ef46:	2b13      	cmp	r3, #19
 800ef48:	f240 80e8 	bls.w	800f11c <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	895b      	ldrh	r3, [r3, #10]
 800ef50:	2b03      	cmp	r3, #3
 800ef52:	f240 80e5 	bls.w	800f120 <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	685b      	ldr	r3, [r3, #4]
 800ef5a:	781b      	ldrb	r3, [r3, #0]
 800ef5c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800ef60:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	f000 80d2 	beq.w	800f10e <icmp_input+0x1ea>
 800ef6a:	2b08      	cmp	r3, #8
 800ef6c:	f040 80d2 	bne.w	800f114 <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800ef70:	4b77      	ldr	r3, [pc, #476]	; (800f150 <icmp_input+0x22c>)
 800ef72:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800ef74:	4b75      	ldr	r3, [pc, #468]	; (800f14c <icmp_input+0x228>)
 800ef76:	695b      	ldr	r3, [r3, #20]
 800ef78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ef7c:	2be0      	cmp	r3, #224	; 0xe0
 800ef7e:	f000 80d6 	beq.w	800f12e <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800ef82:	4b72      	ldr	r3, [pc, #456]	; (800f14c <icmp_input+0x228>)
 800ef84:	695b      	ldr	r3, [r3, #20]
 800ef86:	4a71      	ldr	r2, [pc, #452]	; (800f14c <icmp_input+0x228>)
 800ef88:	6812      	ldr	r2, [r2, #0]
 800ef8a:	4611      	mov	r1, r2
 800ef8c:	4618      	mov	r0, r3
 800ef8e:	f000 fc31 	bl	800f7f4 <ip4_addr_isbroadcast_u32>
 800ef92:	4603      	mov	r3, r0
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	f040 80cc 	bne.w	800f132 <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	891b      	ldrh	r3, [r3, #8]
 800ef9e:	2b07      	cmp	r3, #7
 800efa0:	f240 80c0 	bls.w	800f124 <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 800efa4:	6878      	ldr	r0, [r7, #4]
 800efa6:	f7f5 fcb8 	bl	800491a <inet_chksum_pbuf>
 800efaa:	4603      	mov	r3, r0
 800efac:	2b00      	cmp	r3, #0
 800efae:	d003      	beq.n	800efb8 <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 800efb0:	6878      	ldr	r0, [r7, #4]
 800efb2:	f7f7 f817 	bl	8005fe4 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 800efb6:	e0c5      	b.n	800f144 <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800efb8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800efba:	330e      	adds	r3, #14
 800efbc:	4619      	mov	r1, r3
 800efbe:	6878      	ldr	r0, [r7, #4]
 800efc0:	f7f6 ff7a 	bl	8005eb8 <pbuf_add_header>
 800efc4:	4603      	mov	r3, r0
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	d04b      	beq.n	800f062 <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	891a      	ldrh	r2, [r3, #8]
 800efce:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800efd0:	4413      	add	r3, r2
 800efd2:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	891b      	ldrh	r3, [r3, #8]
 800efd8:	8b7a      	ldrh	r2, [r7, #26]
 800efda:	429a      	cmp	r2, r3
 800efdc:	f0c0 80ab 	bcc.w	800f136 <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800efe0:	8b7b      	ldrh	r3, [r7, #26]
 800efe2:	f44f 7220 	mov.w	r2, #640	; 0x280
 800efe6:	4619      	mov	r1, r3
 800efe8:	200e      	movs	r0, #14
 800efea:	f7f6 fd17 	bl	8005a1c <pbuf_alloc>
 800efee:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800eff0:	697b      	ldr	r3, [r7, #20]
 800eff2:	2b00      	cmp	r3, #0
 800eff4:	f000 80a1 	beq.w	800f13a <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800eff8:	697b      	ldr	r3, [r7, #20]
 800effa:	895b      	ldrh	r3, [r3, #10]
 800effc:	461a      	mov	r2, r3
 800effe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f000:	3308      	adds	r3, #8
 800f002:	429a      	cmp	r2, r3
 800f004:	d203      	bcs.n	800f00e <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800f006:	6978      	ldr	r0, [r7, #20]
 800f008:	f7f6 ffec 	bl	8005fe4 <pbuf_free>
          goto icmperr;
 800f00c:	e096      	b.n	800f13c <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800f00e:	697b      	ldr	r3, [r7, #20]
 800f010:	685b      	ldr	r3, [r3, #4]
 800f012:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800f014:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f016:	4618      	mov	r0, r3
 800f018:	f001 fb76 	bl	8010708 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800f01c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f01e:	4619      	mov	r1, r3
 800f020:	6978      	ldr	r0, [r7, #20]
 800f022:	f7f6 ff59 	bl	8005ed8 <pbuf_remove_header>
 800f026:	4603      	mov	r3, r0
 800f028:	2b00      	cmp	r3, #0
 800f02a:	d009      	beq.n	800f040 <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800f02c:	4b49      	ldr	r3, [pc, #292]	; (800f154 <icmp_input+0x230>)
 800f02e:	22b6      	movs	r2, #182	; 0xb6
 800f030:	4949      	ldr	r1, [pc, #292]	; (800f158 <icmp_input+0x234>)
 800f032:	484a      	ldr	r0, [pc, #296]	; (800f15c <icmp_input+0x238>)
 800f034:	f001 fb7e 	bl	8010734 <iprintf>
          pbuf_free(r);
 800f038:	6978      	ldr	r0, [r7, #20]
 800f03a:	f7f6 ffd3 	bl	8005fe4 <pbuf_free>
          goto icmperr;
 800f03e:	e07d      	b.n	800f13c <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800f040:	6879      	ldr	r1, [r7, #4]
 800f042:	6978      	ldr	r0, [r7, #20]
 800f044:	f7f7 f8f6 	bl	8006234 <pbuf_copy>
 800f048:	4603      	mov	r3, r0
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	d003      	beq.n	800f056 <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800f04e:	6978      	ldr	r0, [r7, #20]
 800f050:	f7f6 ffc8 	bl	8005fe4 <pbuf_free>
          goto icmperr;
 800f054:	e072      	b.n	800f13c <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 800f056:	6878      	ldr	r0, [r7, #4]
 800f058:	f7f6 ffc4 	bl	8005fe4 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800f05c:	697b      	ldr	r3, [r7, #20]
 800f05e:	607b      	str	r3, [r7, #4]
 800f060:	e00f      	b.n	800f082 <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800f062:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f064:	330e      	adds	r3, #14
 800f066:	4619      	mov	r1, r3
 800f068:	6878      	ldr	r0, [r7, #4]
 800f06a:	f7f6 ff35 	bl	8005ed8 <pbuf_remove_header>
 800f06e:	4603      	mov	r3, r0
 800f070:	2b00      	cmp	r3, #0
 800f072:	d006      	beq.n	800f082 <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800f074:	4b37      	ldr	r3, [pc, #220]	; (800f154 <icmp_input+0x230>)
 800f076:	22c7      	movs	r2, #199	; 0xc7
 800f078:	4939      	ldr	r1, [pc, #228]	; (800f160 <icmp_input+0x23c>)
 800f07a:	4838      	ldr	r0, [pc, #224]	; (800f15c <icmp_input+0x238>)
 800f07c:	f001 fb5a 	bl	8010734 <iprintf>
          goto icmperr;
 800f080:	e05c      	b.n	800f13c <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	685b      	ldr	r3, [r3, #4]
 800f086:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800f088:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f08a:	4619      	mov	r1, r3
 800f08c:	6878      	ldr	r0, [r7, #4]
 800f08e:	f7f6 ff13 	bl	8005eb8 <pbuf_add_header>
 800f092:	4603      	mov	r3, r0
 800f094:	2b00      	cmp	r3, #0
 800f096:	d13c      	bne.n	800f112 <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	685b      	ldr	r3, [r3, #4]
 800f09c:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800f09e:	69fb      	ldr	r3, [r7, #28]
 800f0a0:	681a      	ldr	r2, [r3, #0]
 800f0a2:	68fb      	ldr	r3, [r7, #12]
 800f0a4:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800f0a6:	4b29      	ldr	r3, [pc, #164]	; (800f14c <icmp_input+0x228>)
 800f0a8:	691a      	ldr	r2, [r3, #16]
 800f0aa:	68fb      	ldr	r3, [r7, #12]
 800f0ac:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800f0ae:	693b      	ldr	r3, [r7, #16]
 800f0b0:	2200      	movs	r2, #0
 800f0b2:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 800f0b4:	693b      	ldr	r3, [r7, #16]
 800f0b6:	885b      	ldrh	r3, [r3, #2]
 800f0b8:	b29b      	uxth	r3, r3
 800f0ba:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 800f0be:	4293      	cmp	r3, r2
 800f0c0:	d907      	bls.n	800f0d2 <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 800f0c2:	693b      	ldr	r3, [r7, #16]
 800f0c4:	885b      	ldrh	r3, [r3, #2]
 800f0c6:	b29b      	uxth	r3, r3
 800f0c8:	3309      	adds	r3, #9
 800f0ca:	b29a      	uxth	r2, r3
 800f0cc:	693b      	ldr	r3, [r7, #16]
 800f0ce:	805a      	strh	r2, [r3, #2]
 800f0d0:	e006      	b.n	800f0e0 <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 800f0d2:	693b      	ldr	r3, [r7, #16]
 800f0d4:	885b      	ldrh	r3, [r3, #2]
 800f0d6:	b29b      	uxth	r3, r3
 800f0d8:	3308      	adds	r3, #8
 800f0da:	b29a      	uxth	r2, r3
 800f0dc:	693b      	ldr	r3, [r7, #16]
 800f0de:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800f0e0:	68fb      	ldr	r3, [r7, #12]
 800f0e2:	22ff      	movs	r2, #255	; 0xff
 800f0e4:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800f0e6:	68fb      	ldr	r3, [r7, #12]
 800f0e8:	2200      	movs	r2, #0
 800f0ea:	729a      	strb	r2, [r3, #10]
 800f0ec:	2200      	movs	r2, #0
 800f0ee:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800f0f0:	683b      	ldr	r3, [r7, #0]
 800f0f2:	9302      	str	r3, [sp, #8]
 800f0f4:	2301      	movs	r3, #1
 800f0f6:	9301      	str	r3, [sp, #4]
 800f0f8:	2300      	movs	r3, #0
 800f0fa:	9300      	str	r3, [sp, #0]
 800f0fc:	23ff      	movs	r3, #255	; 0xff
 800f0fe:	2200      	movs	r2, #0
 800f100:	69f9      	ldr	r1, [r7, #28]
 800f102:	6878      	ldr	r0, [r7, #4]
 800f104:	f000 fa9e 	bl	800f644 <ip4_output_if>
 800f108:	4603      	mov	r3, r0
 800f10a:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800f10c:	e001      	b.n	800f112 <icmp_input+0x1ee>
      break;
 800f10e:	bf00      	nop
 800f110:	e000      	b.n	800f114 <icmp_input+0x1f0>
      break;
 800f112:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800f114:	6878      	ldr	r0, [r7, #4]
 800f116:	f7f6 ff65 	bl	8005fe4 <pbuf_free>
  return;
 800f11a:	e013      	b.n	800f144 <icmp_input+0x220>
    goto lenerr;
 800f11c:	bf00      	nop
 800f11e:	e002      	b.n	800f126 <icmp_input+0x202>
    goto lenerr;
 800f120:	bf00      	nop
 800f122:	e000      	b.n	800f126 <icmp_input+0x202>
        goto lenerr;
 800f124:	bf00      	nop
lenerr:
  pbuf_free(p);
 800f126:	6878      	ldr	r0, [r7, #4]
 800f128:	f7f6 ff5c 	bl	8005fe4 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800f12c:	e00a      	b.n	800f144 <icmp_input+0x220>
        goto icmperr;
 800f12e:	bf00      	nop
 800f130:	e004      	b.n	800f13c <icmp_input+0x218>
        goto icmperr;
 800f132:	bf00      	nop
 800f134:	e002      	b.n	800f13c <icmp_input+0x218>
          goto icmperr;
 800f136:	bf00      	nop
 800f138:	e000      	b.n	800f13c <icmp_input+0x218>
          goto icmperr;
 800f13a:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800f13c:	6878      	ldr	r0, [r7, #4]
 800f13e:	f7f6 ff51 	bl	8005fe4 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800f142:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800f144:	3728      	adds	r7, #40	; 0x28
 800f146:	46bd      	mov	sp, r7
 800f148:	bd80      	pop	{r7, pc}
 800f14a:	bf00      	nop
 800f14c:	20004d18 	.word	0x20004d18
 800f150:	20004d2c 	.word	0x20004d2c
 800f154:	08014120 	.word	0x08014120
 800f158:	08014158 	.word	0x08014158
 800f15c:	08014190 	.word	0x08014190
 800f160:	080141b8 	.word	0x080141b8

0800f164 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800f164:	b580      	push	{r7, lr}
 800f166:	b082      	sub	sp, #8
 800f168:	af00      	add	r7, sp, #0
 800f16a:	6078      	str	r0, [r7, #4]
 800f16c:	460b      	mov	r3, r1
 800f16e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800f170:	78fb      	ldrb	r3, [r7, #3]
 800f172:	461a      	mov	r2, r3
 800f174:	2103      	movs	r1, #3
 800f176:	6878      	ldr	r0, [r7, #4]
 800f178:	f000 f814 	bl	800f1a4 <icmp_send_response>
}
 800f17c:	bf00      	nop
 800f17e:	3708      	adds	r7, #8
 800f180:	46bd      	mov	sp, r7
 800f182:	bd80      	pop	{r7, pc}

0800f184 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800f184:	b580      	push	{r7, lr}
 800f186:	b082      	sub	sp, #8
 800f188:	af00      	add	r7, sp, #0
 800f18a:	6078      	str	r0, [r7, #4]
 800f18c:	460b      	mov	r3, r1
 800f18e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800f190:	78fb      	ldrb	r3, [r7, #3]
 800f192:	461a      	mov	r2, r3
 800f194:	210b      	movs	r1, #11
 800f196:	6878      	ldr	r0, [r7, #4]
 800f198:	f000 f804 	bl	800f1a4 <icmp_send_response>
}
 800f19c:	bf00      	nop
 800f19e:	3708      	adds	r7, #8
 800f1a0:	46bd      	mov	sp, r7
 800f1a2:	bd80      	pop	{r7, pc}

0800f1a4 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800f1a4:	b580      	push	{r7, lr}
 800f1a6:	b08c      	sub	sp, #48	; 0x30
 800f1a8:	af04      	add	r7, sp, #16
 800f1aa:	6078      	str	r0, [r7, #4]
 800f1ac:	460b      	mov	r3, r1
 800f1ae:	70fb      	strb	r3, [r7, #3]
 800f1b0:	4613      	mov	r3, r2
 800f1b2:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800f1b4:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f1b8:	2124      	movs	r1, #36	; 0x24
 800f1ba:	2022      	movs	r0, #34	; 0x22
 800f1bc:	f7f6 fc2e 	bl	8005a1c <pbuf_alloc>
 800f1c0:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800f1c2:	69fb      	ldr	r3, [r7, #28]
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	d056      	beq.n	800f276 <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800f1c8:	69fb      	ldr	r3, [r7, #28]
 800f1ca:	895b      	ldrh	r3, [r3, #10]
 800f1cc:	2b23      	cmp	r3, #35	; 0x23
 800f1ce:	d806      	bhi.n	800f1de <icmp_send_response+0x3a>
 800f1d0:	4b2b      	ldr	r3, [pc, #172]	; (800f280 <icmp_send_response+0xdc>)
 800f1d2:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800f1d6:	492b      	ldr	r1, [pc, #172]	; (800f284 <icmp_send_response+0xe0>)
 800f1d8:	482b      	ldr	r0, [pc, #172]	; (800f288 <icmp_send_response+0xe4>)
 800f1da:	f001 faab 	bl	8010734 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	685b      	ldr	r3, [r3, #4]
 800f1e2:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800f1e4:	69fb      	ldr	r3, [r7, #28]
 800f1e6:	685b      	ldr	r3, [r3, #4]
 800f1e8:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800f1ea:	697b      	ldr	r3, [r7, #20]
 800f1ec:	78fa      	ldrb	r2, [r7, #3]
 800f1ee:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800f1f0:	697b      	ldr	r3, [r7, #20]
 800f1f2:	78ba      	ldrb	r2, [r7, #2]
 800f1f4:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800f1f6:	697b      	ldr	r3, [r7, #20]
 800f1f8:	2200      	movs	r2, #0
 800f1fa:	711a      	strb	r2, [r3, #4]
 800f1fc:	2200      	movs	r2, #0
 800f1fe:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800f200:	697b      	ldr	r3, [r7, #20]
 800f202:	2200      	movs	r2, #0
 800f204:	719a      	strb	r2, [r3, #6]
 800f206:	2200      	movs	r2, #0
 800f208:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800f20a:	69fb      	ldr	r3, [r7, #28]
 800f20c:	685b      	ldr	r3, [r3, #4]
 800f20e:	f103 0008 	add.w	r0, r3, #8
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	685b      	ldr	r3, [r3, #4]
 800f216:	221c      	movs	r2, #28
 800f218:	4619      	mov	r1, r3
 800f21a:	f001 fa75 	bl	8010708 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800f21e:	69bb      	ldr	r3, [r7, #24]
 800f220:	68db      	ldr	r3, [r3, #12]
 800f222:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800f224:	f107 030c 	add.w	r3, r7, #12
 800f228:	4618      	mov	r0, r3
 800f22a:	f000 f82f 	bl	800f28c <ip4_route>
 800f22e:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800f230:	693b      	ldr	r3, [r7, #16]
 800f232:	2b00      	cmp	r3, #0
 800f234:	d01b      	beq.n	800f26e <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800f236:	697b      	ldr	r3, [r7, #20]
 800f238:	2200      	movs	r2, #0
 800f23a:	709a      	strb	r2, [r3, #2]
 800f23c:	2200      	movs	r2, #0
 800f23e:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 800f240:	69fb      	ldr	r3, [r7, #28]
 800f242:	895b      	ldrh	r3, [r3, #10]
 800f244:	4619      	mov	r1, r3
 800f246:	6978      	ldr	r0, [r7, #20]
 800f248:	f7f5 fb55 	bl	80048f6 <inet_chksum>
 800f24c:	4603      	mov	r3, r0
 800f24e:	461a      	mov	r2, r3
 800f250:	697b      	ldr	r3, [r7, #20]
 800f252:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800f254:	f107 020c 	add.w	r2, r7, #12
 800f258:	693b      	ldr	r3, [r7, #16]
 800f25a:	9302      	str	r3, [sp, #8]
 800f25c:	2301      	movs	r3, #1
 800f25e:	9301      	str	r3, [sp, #4]
 800f260:	2300      	movs	r3, #0
 800f262:	9300      	str	r3, [sp, #0]
 800f264:	23ff      	movs	r3, #255	; 0xff
 800f266:	2100      	movs	r1, #0
 800f268:	69f8      	ldr	r0, [r7, #28]
 800f26a:	f000 f9eb 	bl	800f644 <ip4_output_if>
  }
  pbuf_free(q);
 800f26e:	69f8      	ldr	r0, [r7, #28]
 800f270:	f7f6 feb8 	bl	8005fe4 <pbuf_free>
 800f274:	e000      	b.n	800f278 <icmp_send_response+0xd4>
    return;
 800f276:	bf00      	nop
}
 800f278:	3720      	adds	r7, #32
 800f27a:	46bd      	mov	sp, r7
 800f27c:	bd80      	pop	{r7, pc}
 800f27e:	bf00      	nop
 800f280:	08014120 	.word	0x08014120
 800f284:	080141ec 	.word	0x080141ec
 800f288:	08014190 	.word	0x08014190

0800f28c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800f28c:	b480      	push	{r7}
 800f28e:	b085      	sub	sp, #20
 800f290:	af00      	add	r7, sp, #0
 800f292:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800f294:	4b33      	ldr	r3, [pc, #204]	; (800f364 <ip4_route+0xd8>)
 800f296:	681b      	ldr	r3, [r3, #0]
 800f298:	60fb      	str	r3, [r7, #12]
 800f29a:	e036      	b.n	800f30a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800f29c:	68fb      	ldr	r3, [r7, #12]
 800f29e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800f2a2:	f003 0301 	and.w	r3, r3, #1
 800f2a6:	b2db      	uxtb	r3, r3
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	d02b      	beq.n	800f304 <ip4_route+0x78>
 800f2ac:	68fb      	ldr	r3, [r7, #12]
 800f2ae:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800f2b2:	089b      	lsrs	r3, r3, #2
 800f2b4:	f003 0301 	and.w	r3, r3, #1
 800f2b8:	b2db      	uxtb	r3, r3
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	d022      	beq.n	800f304 <ip4_route+0x78>
 800f2be:	68fb      	ldr	r3, [r7, #12]
 800f2c0:	3304      	adds	r3, #4
 800f2c2:	681b      	ldr	r3, [r3, #0]
 800f2c4:	2b00      	cmp	r3, #0
 800f2c6:	d01d      	beq.n	800f304 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	681a      	ldr	r2, [r3, #0]
 800f2cc:	68fb      	ldr	r3, [r7, #12]
 800f2ce:	3304      	adds	r3, #4
 800f2d0:	681b      	ldr	r3, [r3, #0]
 800f2d2:	405a      	eors	r2, r3
 800f2d4:	68fb      	ldr	r3, [r7, #12]
 800f2d6:	3308      	adds	r3, #8
 800f2d8:	681b      	ldr	r3, [r3, #0]
 800f2da:	4013      	ands	r3, r2
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	d101      	bne.n	800f2e4 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800f2e0:	68fb      	ldr	r3, [r7, #12]
 800f2e2:	e038      	b.n	800f356 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800f2e4:	68fb      	ldr	r3, [r7, #12]
 800f2e6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800f2ea:	f003 0302 	and.w	r3, r3, #2
 800f2ee:	2b00      	cmp	r3, #0
 800f2f0:	d108      	bne.n	800f304 <ip4_route+0x78>
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	681a      	ldr	r2, [r3, #0]
 800f2f6:	68fb      	ldr	r3, [r7, #12]
 800f2f8:	330c      	adds	r3, #12
 800f2fa:	681b      	ldr	r3, [r3, #0]
 800f2fc:	429a      	cmp	r2, r3
 800f2fe:	d101      	bne.n	800f304 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800f300:	68fb      	ldr	r3, [r7, #12]
 800f302:	e028      	b.n	800f356 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800f304:	68fb      	ldr	r3, [r7, #12]
 800f306:	681b      	ldr	r3, [r3, #0]
 800f308:	60fb      	str	r3, [r7, #12]
 800f30a:	68fb      	ldr	r3, [r7, #12]
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	d1c5      	bne.n	800f29c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800f310:	4b15      	ldr	r3, [pc, #84]	; (800f368 <ip4_route+0xdc>)
 800f312:	681b      	ldr	r3, [r3, #0]
 800f314:	2b00      	cmp	r3, #0
 800f316:	d01a      	beq.n	800f34e <ip4_route+0xc2>
 800f318:	4b13      	ldr	r3, [pc, #76]	; (800f368 <ip4_route+0xdc>)
 800f31a:	681b      	ldr	r3, [r3, #0]
 800f31c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800f320:	f003 0301 	and.w	r3, r3, #1
 800f324:	2b00      	cmp	r3, #0
 800f326:	d012      	beq.n	800f34e <ip4_route+0xc2>
 800f328:	4b0f      	ldr	r3, [pc, #60]	; (800f368 <ip4_route+0xdc>)
 800f32a:	681b      	ldr	r3, [r3, #0]
 800f32c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800f330:	f003 0304 	and.w	r3, r3, #4
 800f334:	2b00      	cmp	r3, #0
 800f336:	d00a      	beq.n	800f34e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800f338:	4b0b      	ldr	r3, [pc, #44]	; (800f368 <ip4_route+0xdc>)
 800f33a:	681b      	ldr	r3, [r3, #0]
 800f33c:	3304      	adds	r3, #4
 800f33e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800f340:	2b00      	cmp	r3, #0
 800f342:	d004      	beq.n	800f34e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	681b      	ldr	r3, [r3, #0]
 800f348:	b2db      	uxtb	r3, r3
 800f34a:	2b7f      	cmp	r3, #127	; 0x7f
 800f34c:	d101      	bne.n	800f352 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800f34e:	2300      	movs	r3, #0
 800f350:	e001      	b.n	800f356 <ip4_route+0xca>
  }

  return netif_default;
 800f352:	4b05      	ldr	r3, [pc, #20]	; (800f368 <ip4_route+0xdc>)
 800f354:	681b      	ldr	r3, [r3, #0]
}
 800f356:	4618      	mov	r0, r3
 800f358:	3714      	adds	r7, #20
 800f35a:	46bd      	mov	sp, r7
 800f35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f360:	4770      	bx	lr
 800f362:	bf00      	nop
 800f364:	20007c48 	.word	0x20007c48
 800f368:	20007c4c 	.word	0x20007c4c

0800f36c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800f36c:	b580      	push	{r7, lr}
 800f36e:	b082      	sub	sp, #8
 800f370:	af00      	add	r7, sp, #0
 800f372:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800f37a:	f003 0301 	and.w	r3, r3, #1
 800f37e:	b2db      	uxtb	r3, r3
 800f380:	2b00      	cmp	r3, #0
 800f382:	d016      	beq.n	800f3b2 <ip4_input_accept+0x46>
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	3304      	adds	r3, #4
 800f388:	681b      	ldr	r3, [r3, #0]
 800f38a:	2b00      	cmp	r3, #0
 800f38c:	d011      	beq.n	800f3b2 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800f38e:	4b0b      	ldr	r3, [pc, #44]	; (800f3bc <ip4_input_accept+0x50>)
 800f390:	695a      	ldr	r2, [r3, #20]
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	3304      	adds	r3, #4
 800f396:	681b      	ldr	r3, [r3, #0]
 800f398:	429a      	cmp	r2, r3
 800f39a:	d008      	beq.n	800f3ae <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800f39c:	4b07      	ldr	r3, [pc, #28]	; (800f3bc <ip4_input_accept+0x50>)
 800f39e:	695b      	ldr	r3, [r3, #20]
 800f3a0:	6879      	ldr	r1, [r7, #4]
 800f3a2:	4618      	mov	r0, r3
 800f3a4:	f000 fa26 	bl	800f7f4 <ip4_addr_isbroadcast_u32>
 800f3a8:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	d001      	beq.n	800f3b2 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800f3ae:	2301      	movs	r3, #1
 800f3b0:	e000      	b.n	800f3b4 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800f3b2:	2300      	movs	r3, #0
}
 800f3b4:	4618      	mov	r0, r3
 800f3b6:	3708      	adds	r7, #8
 800f3b8:	46bd      	mov	sp, r7
 800f3ba:	bd80      	pop	{r7, pc}
 800f3bc:	20004d18 	.word	0x20004d18

0800f3c0 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800f3c0:	b580      	push	{r7, lr}
 800f3c2:	b088      	sub	sp, #32
 800f3c4:	af00      	add	r7, sp, #0
 800f3c6:	6078      	str	r0, [r7, #4]
 800f3c8:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 800f3ca:	2301      	movs	r3, #1
 800f3cc:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	685b      	ldr	r3, [r3, #4]
 800f3d2:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 800f3d4:	69fb      	ldr	r3, [r7, #28]
 800f3d6:	781b      	ldrb	r3, [r3, #0]
 800f3d8:	091b      	lsrs	r3, r3, #4
 800f3da:	b2db      	uxtb	r3, r3
 800f3dc:	2b04      	cmp	r3, #4
 800f3de:	d004      	beq.n	800f3ea <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800f3e0:	6878      	ldr	r0, [r7, #4]
 800f3e2:	f7f6 fdff 	bl	8005fe4 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800f3e6:	2300      	movs	r3, #0
 800f3e8:	e123      	b.n	800f632 <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800f3ea:	69fb      	ldr	r3, [r7, #28]
 800f3ec:	781b      	ldrb	r3, [r3, #0]
 800f3ee:	f003 030f 	and.w	r3, r3, #15
 800f3f2:	b2db      	uxtb	r3, r3
 800f3f4:	009b      	lsls	r3, r3, #2
 800f3f6:	b2db      	uxtb	r3, r3
 800f3f8:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800f3fa:	69fb      	ldr	r3, [r7, #28]
 800f3fc:	885b      	ldrh	r3, [r3, #2]
 800f3fe:	b29b      	uxth	r3, r3
 800f400:	4618      	mov	r0, r3
 800f402:	f7f5 f9ed 	bl	80047e0 <lwip_htons>
 800f406:	4603      	mov	r3, r0
 800f408:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	891b      	ldrh	r3, [r3, #8]
 800f40e:	8a3a      	ldrh	r2, [r7, #16]
 800f410:	429a      	cmp	r2, r3
 800f412:	d204      	bcs.n	800f41e <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 800f414:	8a3b      	ldrh	r3, [r7, #16]
 800f416:	4619      	mov	r1, r3
 800f418:	6878      	ldr	r0, [r7, #4]
 800f41a:	f7f6 fc5d 	bl	8005cd8 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	895b      	ldrh	r3, [r3, #10]
 800f422:	8a7a      	ldrh	r2, [r7, #18]
 800f424:	429a      	cmp	r2, r3
 800f426:	d807      	bhi.n	800f438 <ip4_input+0x78>
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	891b      	ldrh	r3, [r3, #8]
 800f42c:	8a3a      	ldrh	r2, [r7, #16]
 800f42e:	429a      	cmp	r2, r3
 800f430:	d802      	bhi.n	800f438 <ip4_input+0x78>
 800f432:	8a7b      	ldrh	r3, [r7, #18]
 800f434:	2b13      	cmp	r3, #19
 800f436:	d804      	bhi.n	800f442 <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800f438:	6878      	ldr	r0, [r7, #4]
 800f43a:	f7f6 fdd3 	bl	8005fe4 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800f43e:	2300      	movs	r3, #0
 800f440:	e0f7      	b.n	800f632 <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800f442:	69fb      	ldr	r3, [r7, #28]
 800f444:	691b      	ldr	r3, [r3, #16]
 800f446:	4a7d      	ldr	r2, [pc, #500]	; (800f63c <ip4_input+0x27c>)
 800f448:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800f44a:	69fb      	ldr	r3, [r7, #28]
 800f44c:	68db      	ldr	r3, [r3, #12]
 800f44e:	4a7b      	ldr	r2, [pc, #492]	; (800f63c <ip4_input+0x27c>)
 800f450:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800f452:	4b7a      	ldr	r3, [pc, #488]	; (800f63c <ip4_input+0x27c>)
 800f454:	695b      	ldr	r3, [r3, #20]
 800f456:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f45a:	2be0      	cmp	r3, #224	; 0xe0
 800f45c:	d112      	bne.n	800f484 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800f45e:	683b      	ldr	r3, [r7, #0]
 800f460:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800f464:	f003 0301 	and.w	r3, r3, #1
 800f468:	b2db      	uxtb	r3, r3
 800f46a:	2b00      	cmp	r3, #0
 800f46c:	d007      	beq.n	800f47e <ip4_input+0xbe>
 800f46e:	683b      	ldr	r3, [r7, #0]
 800f470:	3304      	adds	r3, #4
 800f472:	681b      	ldr	r3, [r3, #0]
 800f474:	2b00      	cmp	r3, #0
 800f476:	d002      	beq.n	800f47e <ip4_input+0xbe>
      netif = inp;
 800f478:	683b      	ldr	r3, [r7, #0]
 800f47a:	61bb      	str	r3, [r7, #24]
 800f47c:	e02a      	b.n	800f4d4 <ip4_input+0x114>
    } else {
      netif = NULL;
 800f47e:	2300      	movs	r3, #0
 800f480:	61bb      	str	r3, [r7, #24]
 800f482:	e027      	b.n	800f4d4 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800f484:	6838      	ldr	r0, [r7, #0]
 800f486:	f7ff ff71 	bl	800f36c <ip4_input_accept>
 800f48a:	4603      	mov	r3, r0
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	d002      	beq.n	800f496 <ip4_input+0xd6>
      netif = inp;
 800f490:	683b      	ldr	r3, [r7, #0]
 800f492:	61bb      	str	r3, [r7, #24]
 800f494:	e01e      	b.n	800f4d4 <ip4_input+0x114>
    } else {
      netif = NULL;
 800f496:	2300      	movs	r3, #0
 800f498:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800f49a:	4b68      	ldr	r3, [pc, #416]	; (800f63c <ip4_input+0x27c>)
 800f49c:	695b      	ldr	r3, [r3, #20]
 800f49e:	b2db      	uxtb	r3, r3
 800f4a0:	2b7f      	cmp	r3, #127	; 0x7f
 800f4a2:	d017      	beq.n	800f4d4 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800f4a4:	4b66      	ldr	r3, [pc, #408]	; (800f640 <ip4_input+0x280>)
 800f4a6:	681b      	ldr	r3, [r3, #0]
 800f4a8:	61bb      	str	r3, [r7, #24]
 800f4aa:	e00e      	b.n	800f4ca <ip4_input+0x10a>
          if (netif == inp) {
 800f4ac:	69ba      	ldr	r2, [r7, #24]
 800f4ae:	683b      	ldr	r3, [r7, #0]
 800f4b0:	429a      	cmp	r2, r3
 800f4b2:	d006      	beq.n	800f4c2 <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800f4b4:	69b8      	ldr	r0, [r7, #24]
 800f4b6:	f7ff ff59 	bl	800f36c <ip4_input_accept>
 800f4ba:	4603      	mov	r3, r0
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	d108      	bne.n	800f4d2 <ip4_input+0x112>
 800f4c0:	e000      	b.n	800f4c4 <ip4_input+0x104>
            continue;
 800f4c2:	bf00      	nop
        NETIF_FOREACH(netif) {
 800f4c4:	69bb      	ldr	r3, [r7, #24]
 800f4c6:	681b      	ldr	r3, [r3, #0]
 800f4c8:	61bb      	str	r3, [r7, #24]
 800f4ca:	69bb      	ldr	r3, [r7, #24]
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	d1ed      	bne.n	800f4ac <ip4_input+0xec>
 800f4d0:	e000      	b.n	800f4d4 <ip4_input+0x114>
            break;
 800f4d2:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 800f4d4:	69bb      	ldr	r3, [r7, #24]
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	d111      	bne.n	800f4fe <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 800f4da:	69fb      	ldr	r3, [r7, #28]
 800f4dc:	7a5b      	ldrb	r3, [r3, #9]
 800f4de:	2b11      	cmp	r3, #17
 800f4e0:	d10d      	bne.n	800f4fe <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 800f4e2:	8a7b      	ldrh	r3, [r7, #18]
 800f4e4:	69fa      	ldr	r2, [r7, #28]
 800f4e6:	4413      	add	r3, r2
 800f4e8:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 800f4ea:	68fb      	ldr	r3, [r7, #12]
 800f4ec:	885b      	ldrh	r3, [r3, #2]
 800f4ee:	b29b      	uxth	r3, r3
 800f4f0:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 800f4f4:	d103      	bne.n	800f4fe <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 800f4f6:	683b      	ldr	r3, [r7, #0]
 800f4f8:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 800f4fa:	2300      	movs	r3, #0
 800f4fc:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 800f4fe:	697b      	ldr	r3, [r7, #20]
 800f500:	2b00      	cmp	r3, #0
 800f502:	d017      	beq.n	800f534 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 800f504:	4b4d      	ldr	r3, [pc, #308]	; (800f63c <ip4_input+0x27c>)
 800f506:	691b      	ldr	r3, [r3, #16]
 800f508:	2b00      	cmp	r3, #0
 800f50a:	d013      	beq.n	800f534 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800f50c:	4b4b      	ldr	r3, [pc, #300]	; (800f63c <ip4_input+0x27c>)
 800f50e:	691b      	ldr	r3, [r3, #16]
 800f510:	6839      	ldr	r1, [r7, #0]
 800f512:	4618      	mov	r0, r3
 800f514:	f000 f96e 	bl	800f7f4 <ip4_addr_isbroadcast_u32>
 800f518:	4603      	mov	r3, r0
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	d105      	bne.n	800f52a <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800f51e:	4b47      	ldr	r3, [pc, #284]	; (800f63c <ip4_input+0x27c>)
 800f520:	691b      	ldr	r3, [r3, #16]
 800f522:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800f526:	2be0      	cmp	r3, #224	; 0xe0
 800f528:	d104      	bne.n	800f534 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800f52a:	6878      	ldr	r0, [r7, #4]
 800f52c:	f7f6 fd5a 	bl	8005fe4 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800f530:	2300      	movs	r3, #0
 800f532:	e07e      	b.n	800f632 <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800f534:	69bb      	ldr	r3, [r7, #24]
 800f536:	2b00      	cmp	r3, #0
 800f538:	d104      	bne.n	800f544 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800f53a:	6878      	ldr	r0, [r7, #4]
 800f53c:	f7f6 fd52 	bl	8005fe4 <pbuf_free>
    return ERR_OK;
 800f540:	2300      	movs	r3, #0
 800f542:	e076      	b.n	800f632 <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800f544:	69fb      	ldr	r3, [r7, #28]
 800f546:	88db      	ldrh	r3, [r3, #6]
 800f548:	b29b      	uxth	r3, r3
 800f54a:	461a      	mov	r2, r3
 800f54c:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800f550:	4013      	ands	r3, r2
 800f552:	2b00      	cmp	r3, #0
 800f554:	d00b      	beq.n	800f56e <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800f556:	6878      	ldr	r0, [r7, #4]
 800f558:	f000 fc92 	bl	800fe80 <ip4_reass>
 800f55c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	2b00      	cmp	r3, #0
 800f562:	d101      	bne.n	800f568 <ip4_input+0x1a8>
      return ERR_OK;
 800f564:	2300      	movs	r3, #0
 800f566:	e064      	b.n	800f632 <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	685b      	ldr	r3, [r3, #4]
 800f56c:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800f56e:	4a33      	ldr	r2, [pc, #204]	; (800f63c <ip4_input+0x27c>)
 800f570:	69bb      	ldr	r3, [r7, #24]
 800f572:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800f574:	4a31      	ldr	r2, [pc, #196]	; (800f63c <ip4_input+0x27c>)
 800f576:	683b      	ldr	r3, [r7, #0]
 800f578:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800f57a:	4a30      	ldr	r2, [pc, #192]	; (800f63c <ip4_input+0x27c>)
 800f57c:	69fb      	ldr	r3, [r7, #28]
 800f57e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800f580:	69fb      	ldr	r3, [r7, #28]
 800f582:	781b      	ldrb	r3, [r3, #0]
 800f584:	f003 030f 	and.w	r3, r3, #15
 800f588:	b2db      	uxtb	r3, r3
 800f58a:	009b      	lsls	r3, r3, #2
 800f58c:	b2db      	uxtb	r3, r3
 800f58e:	b29a      	uxth	r2, r3
 800f590:	4b2a      	ldr	r3, [pc, #168]	; (800f63c <ip4_input+0x27c>)
 800f592:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800f594:	8a7b      	ldrh	r3, [r7, #18]
 800f596:	4619      	mov	r1, r3
 800f598:	6878      	ldr	r0, [r7, #4]
 800f59a:	f7f6 fc9d 	bl	8005ed8 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800f59e:	69fb      	ldr	r3, [r7, #28]
 800f5a0:	7a5b      	ldrb	r3, [r3, #9]
 800f5a2:	2b11      	cmp	r3, #17
 800f5a4:	d006      	beq.n	800f5b4 <ip4_input+0x1f4>
 800f5a6:	2b11      	cmp	r3, #17
 800f5a8:	dc13      	bgt.n	800f5d2 <ip4_input+0x212>
 800f5aa:	2b01      	cmp	r3, #1
 800f5ac:	d00c      	beq.n	800f5c8 <ip4_input+0x208>
 800f5ae:	2b06      	cmp	r3, #6
 800f5b0:	d005      	beq.n	800f5be <ip4_input+0x1fe>
 800f5b2:	e00e      	b.n	800f5d2 <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800f5b4:	6839      	ldr	r1, [r7, #0]
 800f5b6:	6878      	ldr	r0, [r7, #4]
 800f5b8:	f7fc fac4 	bl	800bb44 <udp_input>
        break;
 800f5bc:	e026      	b.n	800f60c <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800f5be:	6839      	ldr	r1, [r7, #0]
 800f5c0:	6878      	ldr	r0, [r7, #4]
 800f5c2:	f7f8 fb47 	bl	8007c54 <tcp_input>
        break;
 800f5c6:	e021      	b.n	800f60c <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800f5c8:	6839      	ldr	r1, [r7, #0]
 800f5ca:	6878      	ldr	r0, [r7, #4]
 800f5cc:	f7ff fcaa 	bl	800ef24 <icmp_input>
        break;
 800f5d0:	e01c      	b.n	800f60c <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800f5d2:	4b1a      	ldr	r3, [pc, #104]	; (800f63c <ip4_input+0x27c>)
 800f5d4:	695b      	ldr	r3, [r3, #20]
 800f5d6:	69b9      	ldr	r1, [r7, #24]
 800f5d8:	4618      	mov	r0, r3
 800f5da:	f000 f90b 	bl	800f7f4 <ip4_addr_isbroadcast_u32>
 800f5de:	4603      	mov	r3, r0
 800f5e0:	2b00      	cmp	r3, #0
 800f5e2:	d10f      	bne.n	800f604 <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800f5e4:	4b15      	ldr	r3, [pc, #84]	; (800f63c <ip4_input+0x27c>)
 800f5e6:	695b      	ldr	r3, [r3, #20]
 800f5e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800f5ec:	2be0      	cmp	r3, #224	; 0xe0
 800f5ee:	d009      	beq.n	800f604 <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800f5f0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f5f4:	4619      	mov	r1, r3
 800f5f6:	6878      	ldr	r0, [r7, #4]
 800f5f8:	f7f6 fce1 	bl	8005fbe <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800f5fc:	2102      	movs	r1, #2
 800f5fe:	6878      	ldr	r0, [r7, #4]
 800f600:	f7ff fdb0 	bl	800f164 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800f604:	6878      	ldr	r0, [r7, #4]
 800f606:	f7f6 fced 	bl	8005fe4 <pbuf_free>
        break;
 800f60a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800f60c:	4b0b      	ldr	r3, [pc, #44]	; (800f63c <ip4_input+0x27c>)
 800f60e:	2200      	movs	r2, #0
 800f610:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800f612:	4b0a      	ldr	r3, [pc, #40]	; (800f63c <ip4_input+0x27c>)
 800f614:	2200      	movs	r2, #0
 800f616:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800f618:	4b08      	ldr	r3, [pc, #32]	; (800f63c <ip4_input+0x27c>)
 800f61a:	2200      	movs	r2, #0
 800f61c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800f61e:	4b07      	ldr	r3, [pc, #28]	; (800f63c <ip4_input+0x27c>)
 800f620:	2200      	movs	r2, #0
 800f622:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800f624:	4b05      	ldr	r3, [pc, #20]	; (800f63c <ip4_input+0x27c>)
 800f626:	2200      	movs	r2, #0
 800f628:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800f62a:	4b04      	ldr	r3, [pc, #16]	; (800f63c <ip4_input+0x27c>)
 800f62c:	2200      	movs	r2, #0
 800f62e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800f630:	2300      	movs	r3, #0
}
 800f632:	4618      	mov	r0, r3
 800f634:	3720      	adds	r7, #32
 800f636:	46bd      	mov	sp, r7
 800f638:	bd80      	pop	{r7, pc}
 800f63a:	bf00      	nop
 800f63c:	20004d18 	.word	0x20004d18
 800f640:	20007c48 	.word	0x20007c48

0800f644 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800f644:	b580      	push	{r7, lr}
 800f646:	b08a      	sub	sp, #40	; 0x28
 800f648:	af04      	add	r7, sp, #16
 800f64a:	60f8      	str	r0, [r7, #12]
 800f64c:	60b9      	str	r1, [r7, #8]
 800f64e:	607a      	str	r2, [r7, #4]
 800f650:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800f652:	68bb      	ldr	r3, [r7, #8]
 800f654:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	2b00      	cmp	r3, #0
 800f65a:	d009      	beq.n	800f670 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800f65c:	68bb      	ldr	r3, [r7, #8]
 800f65e:	2b00      	cmp	r3, #0
 800f660:	d003      	beq.n	800f66a <ip4_output_if+0x26>
 800f662:	68bb      	ldr	r3, [r7, #8]
 800f664:	681b      	ldr	r3, [r3, #0]
 800f666:	2b00      	cmp	r3, #0
 800f668:	d102      	bne.n	800f670 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800f66a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f66c:	3304      	adds	r3, #4
 800f66e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800f670:	78fa      	ldrb	r2, [r7, #3]
 800f672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f674:	9302      	str	r3, [sp, #8]
 800f676:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800f67a:	9301      	str	r3, [sp, #4]
 800f67c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f680:	9300      	str	r3, [sp, #0]
 800f682:	4613      	mov	r3, r2
 800f684:	687a      	ldr	r2, [r7, #4]
 800f686:	6979      	ldr	r1, [r7, #20]
 800f688:	68f8      	ldr	r0, [r7, #12]
 800f68a:	f000 f805 	bl	800f698 <ip4_output_if_src>
 800f68e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800f690:	4618      	mov	r0, r3
 800f692:	3718      	adds	r7, #24
 800f694:	46bd      	mov	sp, r7
 800f696:	bd80      	pop	{r7, pc}

0800f698 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800f698:	b580      	push	{r7, lr}
 800f69a:	b088      	sub	sp, #32
 800f69c:	af00      	add	r7, sp, #0
 800f69e:	60f8      	str	r0, [r7, #12]
 800f6a0:	60b9      	str	r1, [r7, #8]
 800f6a2:	607a      	str	r2, [r7, #4]
 800f6a4:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800f6a6:	68fb      	ldr	r3, [r7, #12]
 800f6a8:	7b9b      	ldrb	r3, [r3, #14]
 800f6aa:	2b01      	cmp	r3, #1
 800f6ac:	d006      	beq.n	800f6bc <ip4_output_if_src+0x24>
 800f6ae:	4b4b      	ldr	r3, [pc, #300]	; (800f7dc <ip4_output_if_src+0x144>)
 800f6b0:	f44f 7255 	mov.w	r2, #852	; 0x354
 800f6b4:	494a      	ldr	r1, [pc, #296]	; (800f7e0 <ip4_output_if_src+0x148>)
 800f6b6:	484b      	ldr	r0, [pc, #300]	; (800f7e4 <ip4_output_if_src+0x14c>)
 800f6b8:	f001 f83c 	bl	8010734 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	d060      	beq.n	800f784 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800f6c2:	2314      	movs	r3, #20
 800f6c4:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800f6c6:	2114      	movs	r1, #20
 800f6c8:	68f8      	ldr	r0, [r7, #12]
 800f6ca:	f7f6 fbf5 	bl	8005eb8 <pbuf_add_header>
 800f6ce:	4603      	mov	r3, r0
 800f6d0:	2b00      	cmp	r3, #0
 800f6d2:	d002      	beq.n	800f6da <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800f6d4:	f06f 0301 	mvn.w	r3, #1
 800f6d8:	e07c      	b.n	800f7d4 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800f6da:	68fb      	ldr	r3, [r7, #12]
 800f6dc:	685b      	ldr	r3, [r3, #4]
 800f6de:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800f6e0:	68fb      	ldr	r3, [r7, #12]
 800f6e2:	895b      	ldrh	r3, [r3, #10]
 800f6e4:	2b13      	cmp	r3, #19
 800f6e6:	d806      	bhi.n	800f6f6 <ip4_output_if_src+0x5e>
 800f6e8:	4b3c      	ldr	r3, [pc, #240]	; (800f7dc <ip4_output_if_src+0x144>)
 800f6ea:	f44f 7262 	mov.w	r2, #904	; 0x388
 800f6ee:	493e      	ldr	r1, [pc, #248]	; (800f7e8 <ip4_output_if_src+0x150>)
 800f6f0:	483c      	ldr	r0, [pc, #240]	; (800f7e4 <ip4_output_if_src+0x14c>)
 800f6f2:	f001 f81f 	bl	8010734 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800f6f6:	69fb      	ldr	r3, [r7, #28]
 800f6f8:	78fa      	ldrb	r2, [r7, #3]
 800f6fa:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800f6fc:	69fb      	ldr	r3, [r7, #28]
 800f6fe:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800f702:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	681a      	ldr	r2, [r3, #0]
 800f708:	69fb      	ldr	r3, [r7, #28]
 800f70a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800f70c:	8b7b      	ldrh	r3, [r7, #26]
 800f70e:	089b      	lsrs	r3, r3, #2
 800f710:	b29b      	uxth	r3, r3
 800f712:	b2db      	uxtb	r3, r3
 800f714:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f718:	b2da      	uxtb	r2, r3
 800f71a:	69fb      	ldr	r3, [r7, #28]
 800f71c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800f71e:	69fb      	ldr	r3, [r7, #28]
 800f720:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800f724:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800f726:	68fb      	ldr	r3, [r7, #12]
 800f728:	891b      	ldrh	r3, [r3, #8]
 800f72a:	4618      	mov	r0, r3
 800f72c:	f7f5 f858 	bl	80047e0 <lwip_htons>
 800f730:	4603      	mov	r3, r0
 800f732:	461a      	mov	r2, r3
 800f734:	69fb      	ldr	r3, [r7, #28]
 800f736:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800f738:	69fb      	ldr	r3, [r7, #28]
 800f73a:	2200      	movs	r2, #0
 800f73c:	719a      	strb	r2, [r3, #6]
 800f73e:	2200      	movs	r2, #0
 800f740:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800f742:	4b2a      	ldr	r3, [pc, #168]	; (800f7ec <ip4_output_if_src+0x154>)
 800f744:	881b      	ldrh	r3, [r3, #0]
 800f746:	4618      	mov	r0, r3
 800f748:	f7f5 f84a 	bl	80047e0 <lwip_htons>
 800f74c:	4603      	mov	r3, r0
 800f74e:	461a      	mov	r2, r3
 800f750:	69fb      	ldr	r3, [r7, #28]
 800f752:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800f754:	4b25      	ldr	r3, [pc, #148]	; (800f7ec <ip4_output_if_src+0x154>)
 800f756:	881b      	ldrh	r3, [r3, #0]
 800f758:	3301      	adds	r3, #1
 800f75a:	b29a      	uxth	r2, r3
 800f75c:	4b23      	ldr	r3, [pc, #140]	; (800f7ec <ip4_output_if_src+0x154>)
 800f75e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800f760:	68bb      	ldr	r3, [r7, #8]
 800f762:	2b00      	cmp	r3, #0
 800f764:	d104      	bne.n	800f770 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800f766:	4b22      	ldr	r3, [pc, #136]	; (800f7f0 <ip4_output_if_src+0x158>)
 800f768:	681a      	ldr	r2, [r3, #0]
 800f76a:	69fb      	ldr	r3, [r7, #28]
 800f76c:	60da      	str	r2, [r3, #12]
 800f76e:	e003      	b.n	800f778 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800f770:	68bb      	ldr	r3, [r7, #8]
 800f772:	681a      	ldr	r2, [r3, #0]
 800f774:	69fb      	ldr	r3, [r7, #28]
 800f776:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800f778:	69fb      	ldr	r3, [r7, #28]
 800f77a:	2200      	movs	r2, #0
 800f77c:	729a      	strb	r2, [r3, #10]
 800f77e:	2200      	movs	r2, #0
 800f780:	72da      	strb	r2, [r3, #11]
 800f782:	e00f      	b.n	800f7a4 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800f784:	68fb      	ldr	r3, [r7, #12]
 800f786:	895b      	ldrh	r3, [r3, #10]
 800f788:	2b13      	cmp	r3, #19
 800f78a:	d802      	bhi.n	800f792 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800f78c:	f06f 0301 	mvn.w	r3, #1
 800f790:	e020      	b.n	800f7d4 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800f792:	68fb      	ldr	r3, [r7, #12]
 800f794:	685b      	ldr	r3, [r3, #4]
 800f796:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800f798:	69fb      	ldr	r3, [r7, #28]
 800f79a:	691b      	ldr	r3, [r3, #16]
 800f79c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800f79e:	f107 0314 	add.w	r3, r7, #20
 800f7a2:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800f7a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f7a8:	2b00      	cmp	r3, #0
 800f7aa:	d00c      	beq.n	800f7c6 <ip4_output_if_src+0x12e>
 800f7ac:	68fb      	ldr	r3, [r7, #12]
 800f7ae:	891a      	ldrh	r2, [r3, #8]
 800f7b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f7b4:	429a      	cmp	r2, r3
 800f7b6:	d906      	bls.n	800f7c6 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800f7b8:	687a      	ldr	r2, [r7, #4]
 800f7ba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f7bc:	68f8      	ldr	r0, [r7, #12]
 800f7be:	f000 fd53 	bl	8010268 <ip4_frag>
 800f7c2:	4603      	mov	r3, r0
 800f7c4:	e006      	b.n	800f7d4 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800f7c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7c8:	695b      	ldr	r3, [r3, #20]
 800f7ca:	687a      	ldr	r2, [r7, #4]
 800f7cc:	68f9      	ldr	r1, [r7, #12]
 800f7ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f7d0:	4798      	blx	r3
 800f7d2:	4603      	mov	r3, r0
}
 800f7d4:	4618      	mov	r0, r3
 800f7d6:	3720      	adds	r7, #32
 800f7d8:	46bd      	mov	sp, r7
 800f7da:	bd80      	pop	{r7, pc}
 800f7dc:	08014218 	.word	0x08014218
 800f7e0:	0801424c 	.word	0x0801424c
 800f7e4:	08014258 	.word	0x08014258
 800f7e8:	08014280 	.word	0x08014280
 800f7ec:	20007dda 	.word	0x20007dda
 800f7f0:	08014670 	.word	0x08014670

0800f7f4 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800f7f4:	b480      	push	{r7}
 800f7f6:	b085      	sub	sp, #20
 800f7f8:	af00      	add	r7, sp, #0
 800f7fa:	6078      	str	r0, [r7, #4]
 800f7fc:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f808:	d002      	beq.n	800f810 <ip4_addr_isbroadcast_u32+0x1c>
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	d101      	bne.n	800f814 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800f810:	2301      	movs	r3, #1
 800f812:	e02a      	b.n	800f86a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800f814:	683b      	ldr	r3, [r7, #0]
 800f816:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800f81a:	f003 0302 	and.w	r3, r3, #2
 800f81e:	2b00      	cmp	r3, #0
 800f820:	d101      	bne.n	800f826 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800f822:	2300      	movs	r3, #0
 800f824:	e021      	b.n	800f86a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800f826:	683b      	ldr	r3, [r7, #0]
 800f828:	3304      	adds	r3, #4
 800f82a:	681b      	ldr	r3, [r3, #0]
 800f82c:	687a      	ldr	r2, [r7, #4]
 800f82e:	429a      	cmp	r2, r3
 800f830:	d101      	bne.n	800f836 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800f832:	2300      	movs	r3, #0
 800f834:	e019      	b.n	800f86a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800f836:	68fa      	ldr	r2, [r7, #12]
 800f838:	683b      	ldr	r3, [r7, #0]
 800f83a:	3304      	adds	r3, #4
 800f83c:	681b      	ldr	r3, [r3, #0]
 800f83e:	405a      	eors	r2, r3
 800f840:	683b      	ldr	r3, [r7, #0]
 800f842:	3308      	adds	r3, #8
 800f844:	681b      	ldr	r3, [r3, #0]
 800f846:	4013      	ands	r3, r2
 800f848:	2b00      	cmp	r3, #0
 800f84a:	d10d      	bne.n	800f868 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800f84c:	683b      	ldr	r3, [r7, #0]
 800f84e:	3308      	adds	r3, #8
 800f850:	681b      	ldr	r3, [r3, #0]
 800f852:	43da      	mvns	r2, r3
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800f858:	683b      	ldr	r3, [r7, #0]
 800f85a:	3308      	adds	r3, #8
 800f85c:	681b      	ldr	r3, [r3, #0]
 800f85e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800f860:	429a      	cmp	r2, r3
 800f862:	d101      	bne.n	800f868 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800f864:	2301      	movs	r3, #1
 800f866:	e000      	b.n	800f86a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800f868:	2300      	movs	r3, #0
  }
}
 800f86a:	4618      	mov	r0, r3
 800f86c:	3714      	adds	r7, #20
 800f86e:	46bd      	mov	sp, r7
 800f870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f874:	4770      	bx	lr
	...

0800f878 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800f878:	b580      	push	{r7, lr}
 800f87a:	b084      	sub	sp, #16
 800f87c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800f87e:	2300      	movs	r3, #0
 800f880:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800f882:	4b12      	ldr	r3, [pc, #72]	; (800f8cc <ip_reass_tmr+0x54>)
 800f884:	681b      	ldr	r3, [r3, #0]
 800f886:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800f888:	e018      	b.n	800f8bc <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800f88a:	68fb      	ldr	r3, [r7, #12]
 800f88c:	7fdb      	ldrb	r3, [r3, #31]
 800f88e:	2b00      	cmp	r3, #0
 800f890:	d00b      	beq.n	800f8aa <ip_reass_tmr+0x32>
      r->timer--;
 800f892:	68fb      	ldr	r3, [r7, #12]
 800f894:	7fdb      	ldrb	r3, [r3, #31]
 800f896:	3b01      	subs	r3, #1
 800f898:	b2da      	uxtb	r2, r3
 800f89a:	68fb      	ldr	r3, [r7, #12]
 800f89c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800f89e:	68fb      	ldr	r3, [r7, #12]
 800f8a0:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800f8a2:	68fb      	ldr	r3, [r7, #12]
 800f8a4:	681b      	ldr	r3, [r3, #0]
 800f8a6:	60fb      	str	r3, [r7, #12]
 800f8a8:	e008      	b.n	800f8bc <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800f8aa:	68fb      	ldr	r3, [r7, #12]
 800f8ac:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800f8ae:	68fb      	ldr	r3, [r7, #12]
 800f8b0:	681b      	ldr	r3, [r3, #0]
 800f8b2:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800f8b4:	68b9      	ldr	r1, [r7, #8]
 800f8b6:	6878      	ldr	r0, [r7, #4]
 800f8b8:	f000 f80a 	bl	800f8d0 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800f8bc:	68fb      	ldr	r3, [r7, #12]
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	d1e3      	bne.n	800f88a <ip_reass_tmr+0x12>
    }
  }
}
 800f8c2:	bf00      	nop
 800f8c4:	bf00      	nop
 800f8c6:	3710      	adds	r7, #16
 800f8c8:	46bd      	mov	sp, r7
 800f8ca:	bd80      	pop	{r7, pc}
 800f8cc:	20007ddc 	.word	0x20007ddc

0800f8d0 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800f8d0:	b580      	push	{r7, lr}
 800f8d2:	b088      	sub	sp, #32
 800f8d4:	af00      	add	r7, sp, #0
 800f8d6:	6078      	str	r0, [r7, #4]
 800f8d8:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800f8da:	2300      	movs	r3, #0
 800f8dc:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800f8de:	683a      	ldr	r2, [r7, #0]
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	429a      	cmp	r2, r3
 800f8e4:	d105      	bne.n	800f8f2 <ip_reass_free_complete_datagram+0x22>
 800f8e6:	4b45      	ldr	r3, [pc, #276]	; (800f9fc <ip_reass_free_complete_datagram+0x12c>)
 800f8e8:	22ab      	movs	r2, #171	; 0xab
 800f8ea:	4945      	ldr	r1, [pc, #276]	; (800fa00 <ip_reass_free_complete_datagram+0x130>)
 800f8ec:	4845      	ldr	r0, [pc, #276]	; (800fa04 <ip_reass_free_complete_datagram+0x134>)
 800f8ee:	f000 ff21 	bl	8010734 <iprintf>
  if (prev != NULL) {
 800f8f2:	683b      	ldr	r3, [r7, #0]
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	d00a      	beq.n	800f90e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800f8f8:	683b      	ldr	r3, [r7, #0]
 800f8fa:	681b      	ldr	r3, [r3, #0]
 800f8fc:	687a      	ldr	r2, [r7, #4]
 800f8fe:	429a      	cmp	r2, r3
 800f900:	d005      	beq.n	800f90e <ip_reass_free_complete_datagram+0x3e>
 800f902:	4b3e      	ldr	r3, [pc, #248]	; (800f9fc <ip_reass_free_complete_datagram+0x12c>)
 800f904:	22ad      	movs	r2, #173	; 0xad
 800f906:	4940      	ldr	r1, [pc, #256]	; (800fa08 <ip_reass_free_complete_datagram+0x138>)
 800f908:	483e      	ldr	r0, [pc, #248]	; (800fa04 <ip_reass_free_complete_datagram+0x134>)
 800f90a:	f000 ff13 	bl	8010734 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	685b      	ldr	r3, [r3, #4]
 800f912:	685b      	ldr	r3, [r3, #4]
 800f914:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800f916:	697b      	ldr	r3, [r7, #20]
 800f918:	889b      	ldrh	r3, [r3, #4]
 800f91a:	b29b      	uxth	r3, r3
 800f91c:	2b00      	cmp	r3, #0
 800f91e:	d12a      	bne.n	800f976 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	685b      	ldr	r3, [r3, #4]
 800f924:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800f926:	697b      	ldr	r3, [r7, #20]
 800f928:	681a      	ldr	r2, [r3, #0]
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800f92e:	69bb      	ldr	r3, [r7, #24]
 800f930:	6858      	ldr	r0, [r3, #4]
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	3308      	adds	r3, #8
 800f936:	2214      	movs	r2, #20
 800f938:	4619      	mov	r1, r3
 800f93a:	f000 fee5 	bl	8010708 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800f93e:	2101      	movs	r1, #1
 800f940:	69b8      	ldr	r0, [r7, #24]
 800f942:	f7ff fc1f 	bl	800f184 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800f946:	69b8      	ldr	r0, [r7, #24]
 800f948:	f7f6 fbd4 	bl	80060f4 <pbuf_clen>
 800f94c:	4603      	mov	r3, r0
 800f94e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800f950:	8bfa      	ldrh	r2, [r7, #30]
 800f952:	8a7b      	ldrh	r3, [r7, #18]
 800f954:	4413      	add	r3, r2
 800f956:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f95a:	db05      	blt.n	800f968 <ip_reass_free_complete_datagram+0x98>
 800f95c:	4b27      	ldr	r3, [pc, #156]	; (800f9fc <ip_reass_free_complete_datagram+0x12c>)
 800f95e:	22bc      	movs	r2, #188	; 0xbc
 800f960:	492a      	ldr	r1, [pc, #168]	; (800fa0c <ip_reass_free_complete_datagram+0x13c>)
 800f962:	4828      	ldr	r0, [pc, #160]	; (800fa04 <ip_reass_free_complete_datagram+0x134>)
 800f964:	f000 fee6 	bl	8010734 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800f968:	8bfa      	ldrh	r2, [r7, #30]
 800f96a:	8a7b      	ldrh	r3, [r7, #18]
 800f96c:	4413      	add	r3, r2
 800f96e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800f970:	69b8      	ldr	r0, [r7, #24]
 800f972:	f7f6 fb37 	bl	8005fe4 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	685b      	ldr	r3, [r3, #4]
 800f97a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800f97c:	e01f      	b.n	800f9be <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800f97e:	69bb      	ldr	r3, [r7, #24]
 800f980:	685b      	ldr	r3, [r3, #4]
 800f982:	617b      	str	r3, [r7, #20]
    pcur = p;
 800f984:	69bb      	ldr	r3, [r7, #24]
 800f986:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800f988:	697b      	ldr	r3, [r7, #20]
 800f98a:	681b      	ldr	r3, [r3, #0]
 800f98c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800f98e:	68f8      	ldr	r0, [r7, #12]
 800f990:	f7f6 fbb0 	bl	80060f4 <pbuf_clen>
 800f994:	4603      	mov	r3, r0
 800f996:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800f998:	8bfa      	ldrh	r2, [r7, #30]
 800f99a:	8a7b      	ldrh	r3, [r7, #18]
 800f99c:	4413      	add	r3, r2
 800f99e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f9a2:	db05      	blt.n	800f9b0 <ip_reass_free_complete_datagram+0xe0>
 800f9a4:	4b15      	ldr	r3, [pc, #84]	; (800f9fc <ip_reass_free_complete_datagram+0x12c>)
 800f9a6:	22cc      	movs	r2, #204	; 0xcc
 800f9a8:	4918      	ldr	r1, [pc, #96]	; (800fa0c <ip_reass_free_complete_datagram+0x13c>)
 800f9aa:	4816      	ldr	r0, [pc, #88]	; (800fa04 <ip_reass_free_complete_datagram+0x134>)
 800f9ac:	f000 fec2 	bl	8010734 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800f9b0:	8bfa      	ldrh	r2, [r7, #30]
 800f9b2:	8a7b      	ldrh	r3, [r7, #18]
 800f9b4:	4413      	add	r3, r2
 800f9b6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800f9b8:	68f8      	ldr	r0, [r7, #12]
 800f9ba:	f7f6 fb13 	bl	8005fe4 <pbuf_free>
  while (p != NULL) {
 800f9be:	69bb      	ldr	r3, [r7, #24]
 800f9c0:	2b00      	cmp	r3, #0
 800f9c2:	d1dc      	bne.n	800f97e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800f9c4:	6839      	ldr	r1, [r7, #0]
 800f9c6:	6878      	ldr	r0, [r7, #4]
 800f9c8:	f000 f8c2 	bl	800fb50 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800f9cc:	4b10      	ldr	r3, [pc, #64]	; (800fa10 <ip_reass_free_complete_datagram+0x140>)
 800f9ce:	881b      	ldrh	r3, [r3, #0]
 800f9d0:	8bfa      	ldrh	r2, [r7, #30]
 800f9d2:	429a      	cmp	r2, r3
 800f9d4:	d905      	bls.n	800f9e2 <ip_reass_free_complete_datagram+0x112>
 800f9d6:	4b09      	ldr	r3, [pc, #36]	; (800f9fc <ip_reass_free_complete_datagram+0x12c>)
 800f9d8:	22d2      	movs	r2, #210	; 0xd2
 800f9da:	490e      	ldr	r1, [pc, #56]	; (800fa14 <ip_reass_free_complete_datagram+0x144>)
 800f9dc:	4809      	ldr	r0, [pc, #36]	; (800fa04 <ip_reass_free_complete_datagram+0x134>)
 800f9de:	f000 fea9 	bl	8010734 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800f9e2:	4b0b      	ldr	r3, [pc, #44]	; (800fa10 <ip_reass_free_complete_datagram+0x140>)
 800f9e4:	881a      	ldrh	r2, [r3, #0]
 800f9e6:	8bfb      	ldrh	r3, [r7, #30]
 800f9e8:	1ad3      	subs	r3, r2, r3
 800f9ea:	b29a      	uxth	r2, r3
 800f9ec:	4b08      	ldr	r3, [pc, #32]	; (800fa10 <ip_reass_free_complete_datagram+0x140>)
 800f9ee:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800f9f0:	8bfb      	ldrh	r3, [r7, #30]
}
 800f9f2:	4618      	mov	r0, r3
 800f9f4:	3720      	adds	r7, #32
 800f9f6:	46bd      	mov	sp, r7
 800f9f8:	bd80      	pop	{r7, pc}
 800f9fa:	bf00      	nop
 800f9fc:	080142b0 	.word	0x080142b0
 800fa00:	080142ec 	.word	0x080142ec
 800fa04:	080142f8 	.word	0x080142f8
 800fa08:	08014320 	.word	0x08014320
 800fa0c:	08014334 	.word	0x08014334
 800fa10:	20007de0 	.word	0x20007de0
 800fa14:	08014354 	.word	0x08014354

0800fa18 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800fa18:	b580      	push	{r7, lr}
 800fa1a:	b08a      	sub	sp, #40	; 0x28
 800fa1c:	af00      	add	r7, sp, #0
 800fa1e:	6078      	str	r0, [r7, #4]
 800fa20:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800fa22:	2300      	movs	r3, #0
 800fa24:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800fa26:	2300      	movs	r3, #0
 800fa28:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800fa2a:	2300      	movs	r3, #0
 800fa2c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800fa2e:	2300      	movs	r3, #0
 800fa30:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800fa32:	2300      	movs	r3, #0
 800fa34:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800fa36:	4b28      	ldr	r3, [pc, #160]	; (800fad8 <ip_reass_remove_oldest_datagram+0xc0>)
 800fa38:	681b      	ldr	r3, [r3, #0]
 800fa3a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800fa3c:	e030      	b.n	800faa0 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800fa3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa40:	695a      	ldr	r2, [r3, #20]
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	68db      	ldr	r3, [r3, #12]
 800fa46:	429a      	cmp	r2, r3
 800fa48:	d10c      	bne.n	800fa64 <ip_reass_remove_oldest_datagram+0x4c>
 800fa4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa4c:	699a      	ldr	r2, [r3, #24]
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	691b      	ldr	r3, [r3, #16]
 800fa52:	429a      	cmp	r2, r3
 800fa54:	d106      	bne.n	800fa64 <ip_reass_remove_oldest_datagram+0x4c>
 800fa56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa58:	899a      	ldrh	r2, [r3, #12]
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	889b      	ldrh	r3, [r3, #4]
 800fa5e:	b29b      	uxth	r3, r3
 800fa60:	429a      	cmp	r2, r3
 800fa62:	d014      	beq.n	800fa8e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800fa64:	693b      	ldr	r3, [r7, #16]
 800fa66:	3301      	adds	r3, #1
 800fa68:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800fa6a:	6a3b      	ldr	r3, [r7, #32]
 800fa6c:	2b00      	cmp	r3, #0
 800fa6e:	d104      	bne.n	800fa7a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800fa70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa72:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800fa74:	69fb      	ldr	r3, [r7, #28]
 800fa76:	61bb      	str	r3, [r7, #24]
 800fa78:	e009      	b.n	800fa8e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800fa7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa7c:	7fda      	ldrb	r2, [r3, #31]
 800fa7e:	6a3b      	ldr	r3, [r7, #32]
 800fa80:	7fdb      	ldrb	r3, [r3, #31]
 800fa82:	429a      	cmp	r2, r3
 800fa84:	d803      	bhi.n	800fa8e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800fa86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa88:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800fa8a:	69fb      	ldr	r3, [r7, #28]
 800fa8c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800fa8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa90:	681b      	ldr	r3, [r3, #0]
 800fa92:	2b00      	cmp	r3, #0
 800fa94:	d001      	beq.n	800fa9a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800fa96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa98:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800fa9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa9c:	681b      	ldr	r3, [r3, #0]
 800fa9e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800faa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800faa2:	2b00      	cmp	r3, #0
 800faa4:	d1cb      	bne.n	800fa3e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800faa6:	6a3b      	ldr	r3, [r7, #32]
 800faa8:	2b00      	cmp	r3, #0
 800faaa:	d008      	beq.n	800fabe <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800faac:	69b9      	ldr	r1, [r7, #24]
 800faae:	6a38      	ldr	r0, [r7, #32]
 800fab0:	f7ff ff0e 	bl	800f8d0 <ip_reass_free_complete_datagram>
 800fab4:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800fab6:	697a      	ldr	r2, [r7, #20]
 800fab8:	68fb      	ldr	r3, [r7, #12]
 800faba:	4413      	add	r3, r2
 800fabc:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800fabe:	697a      	ldr	r2, [r7, #20]
 800fac0:	683b      	ldr	r3, [r7, #0]
 800fac2:	429a      	cmp	r2, r3
 800fac4:	da02      	bge.n	800facc <ip_reass_remove_oldest_datagram+0xb4>
 800fac6:	693b      	ldr	r3, [r7, #16]
 800fac8:	2b01      	cmp	r3, #1
 800faca:	dcac      	bgt.n	800fa26 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800facc:	697b      	ldr	r3, [r7, #20]
}
 800face:	4618      	mov	r0, r3
 800fad0:	3728      	adds	r7, #40	; 0x28
 800fad2:	46bd      	mov	sp, r7
 800fad4:	bd80      	pop	{r7, pc}
 800fad6:	bf00      	nop
 800fad8:	20007ddc 	.word	0x20007ddc

0800fadc <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800fadc:	b580      	push	{r7, lr}
 800fade:	b084      	sub	sp, #16
 800fae0:	af00      	add	r7, sp, #0
 800fae2:	6078      	str	r0, [r7, #4]
 800fae4:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800fae6:	2004      	movs	r0, #4
 800fae8:	f7f5 fbaa 	bl	8005240 <memp_malloc>
 800faec:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800faee:	68fb      	ldr	r3, [r7, #12]
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	d110      	bne.n	800fb16 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800faf4:	6839      	ldr	r1, [r7, #0]
 800faf6:	6878      	ldr	r0, [r7, #4]
 800faf8:	f7ff ff8e 	bl	800fa18 <ip_reass_remove_oldest_datagram>
 800fafc:	4602      	mov	r2, r0
 800fafe:	683b      	ldr	r3, [r7, #0]
 800fb00:	4293      	cmp	r3, r2
 800fb02:	dc03      	bgt.n	800fb0c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800fb04:	2004      	movs	r0, #4
 800fb06:	f7f5 fb9b 	bl	8005240 <memp_malloc>
 800fb0a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800fb0c:	68fb      	ldr	r3, [r7, #12]
 800fb0e:	2b00      	cmp	r3, #0
 800fb10:	d101      	bne.n	800fb16 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800fb12:	2300      	movs	r3, #0
 800fb14:	e016      	b.n	800fb44 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800fb16:	2220      	movs	r2, #32
 800fb18:	2100      	movs	r1, #0
 800fb1a:	68f8      	ldr	r0, [r7, #12]
 800fb1c:	f000 fe02 	bl	8010724 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800fb20:	68fb      	ldr	r3, [r7, #12]
 800fb22:	220f      	movs	r2, #15
 800fb24:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800fb26:	4b09      	ldr	r3, [pc, #36]	; (800fb4c <ip_reass_enqueue_new_datagram+0x70>)
 800fb28:	681a      	ldr	r2, [r3, #0]
 800fb2a:	68fb      	ldr	r3, [r7, #12]
 800fb2c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800fb2e:	4a07      	ldr	r2, [pc, #28]	; (800fb4c <ip_reass_enqueue_new_datagram+0x70>)
 800fb30:	68fb      	ldr	r3, [r7, #12]
 800fb32:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800fb34:	68fb      	ldr	r3, [r7, #12]
 800fb36:	3308      	adds	r3, #8
 800fb38:	2214      	movs	r2, #20
 800fb3a:	6879      	ldr	r1, [r7, #4]
 800fb3c:	4618      	mov	r0, r3
 800fb3e:	f000 fde3 	bl	8010708 <memcpy>
  return ipr;
 800fb42:	68fb      	ldr	r3, [r7, #12]
}
 800fb44:	4618      	mov	r0, r3
 800fb46:	3710      	adds	r7, #16
 800fb48:	46bd      	mov	sp, r7
 800fb4a:	bd80      	pop	{r7, pc}
 800fb4c:	20007ddc 	.word	0x20007ddc

0800fb50 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800fb50:	b580      	push	{r7, lr}
 800fb52:	b082      	sub	sp, #8
 800fb54:	af00      	add	r7, sp, #0
 800fb56:	6078      	str	r0, [r7, #4]
 800fb58:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800fb5a:	4b10      	ldr	r3, [pc, #64]	; (800fb9c <ip_reass_dequeue_datagram+0x4c>)
 800fb5c:	681b      	ldr	r3, [r3, #0]
 800fb5e:	687a      	ldr	r2, [r7, #4]
 800fb60:	429a      	cmp	r2, r3
 800fb62:	d104      	bne.n	800fb6e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	681b      	ldr	r3, [r3, #0]
 800fb68:	4a0c      	ldr	r2, [pc, #48]	; (800fb9c <ip_reass_dequeue_datagram+0x4c>)
 800fb6a:	6013      	str	r3, [r2, #0]
 800fb6c:	e00d      	b.n	800fb8a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800fb6e:	683b      	ldr	r3, [r7, #0]
 800fb70:	2b00      	cmp	r3, #0
 800fb72:	d106      	bne.n	800fb82 <ip_reass_dequeue_datagram+0x32>
 800fb74:	4b0a      	ldr	r3, [pc, #40]	; (800fba0 <ip_reass_dequeue_datagram+0x50>)
 800fb76:	f240 1245 	movw	r2, #325	; 0x145
 800fb7a:	490a      	ldr	r1, [pc, #40]	; (800fba4 <ip_reass_dequeue_datagram+0x54>)
 800fb7c:	480a      	ldr	r0, [pc, #40]	; (800fba8 <ip_reass_dequeue_datagram+0x58>)
 800fb7e:	f000 fdd9 	bl	8010734 <iprintf>
    prev->next = ipr->next;
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	681a      	ldr	r2, [r3, #0]
 800fb86:	683b      	ldr	r3, [r7, #0]
 800fb88:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800fb8a:	6879      	ldr	r1, [r7, #4]
 800fb8c:	2004      	movs	r0, #4
 800fb8e:	f7f5 fbc7 	bl	8005320 <memp_free>
}
 800fb92:	bf00      	nop
 800fb94:	3708      	adds	r7, #8
 800fb96:	46bd      	mov	sp, r7
 800fb98:	bd80      	pop	{r7, pc}
 800fb9a:	bf00      	nop
 800fb9c:	20007ddc 	.word	0x20007ddc
 800fba0:	080142b0 	.word	0x080142b0
 800fba4:	08014378 	.word	0x08014378
 800fba8:	080142f8 	.word	0x080142f8

0800fbac <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800fbac:	b580      	push	{r7, lr}
 800fbae:	b08c      	sub	sp, #48	; 0x30
 800fbb0:	af00      	add	r7, sp, #0
 800fbb2:	60f8      	str	r0, [r7, #12]
 800fbb4:	60b9      	str	r1, [r7, #8]
 800fbb6:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800fbb8:	2300      	movs	r3, #0
 800fbba:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800fbbc:	2301      	movs	r3, #1
 800fbbe:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800fbc0:	68bb      	ldr	r3, [r7, #8]
 800fbc2:	685b      	ldr	r3, [r3, #4]
 800fbc4:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800fbc6:	69fb      	ldr	r3, [r7, #28]
 800fbc8:	885b      	ldrh	r3, [r3, #2]
 800fbca:	b29b      	uxth	r3, r3
 800fbcc:	4618      	mov	r0, r3
 800fbce:	f7f4 fe07 	bl	80047e0 <lwip_htons>
 800fbd2:	4603      	mov	r3, r0
 800fbd4:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800fbd6:	69fb      	ldr	r3, [r7, #28]
 800fbd8:	781b      	ldrb	r3, [r3, #0]
 800fbda:	f003 030f 	and.w	r3, r3, #15
 800fbde:	b2db      	uxtb	r3, r3
 800fbe0:	009b      	lsls	r3, r3, #2
 800fbe2:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800fbe4:	7e7b      	ldrb	r3, [r7, #25]
 800fbe6:	b29b      	uxth	r3, r3
 800fbe8:	8b7a      	ldrh	r2, [r7, #26]
 800fbea:	429a      	cmp	r2, r3
 800fbec:	d202      	bcs.n	800fbf4 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800fbee:	f04f 33ff 	mov.w	r3, #4294967295
 800fbf2:	e135      	b.n	800fe60 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800fbf4:	7e7b      	ldrb	r3, [r7, #25]
 800fbf6:	b29b      	uxth	r3, r3
 800fbf8:	8b7a      	ldrh	r2, [r7, #26]
 800fbfa:	1ad3      	subs	r3, r2, r3
 800fbfc:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800fbfe:	69fb      	ldr	r3, [r7, #28]
 800fc00:	88db      	ldrh	r3, [r3, #6]
 800fc02:	b29b      	uxth	r3, r3
 800fc04:	4618      	mov	r0, r3
 800fc06:	f7f4 fdeb 	bl	80047e0 <lwip_htons>
 800fc0a:	4603      	mov	r3, r0
 800fc0c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800fc10:	b29b      	uxth	r3, r3
 800fc12:	00db      	lsls	r3, r3, #3
 800fc14:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800fc16:	68bb      	ldr	r3, [r7, #8]
 800fc18:	685b      	ldr	r3, [r3, #4]
 800fc1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800fc1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc1e:	2200      	movs	r2, #0
 800fc20:	701a      	strb	r2, [r3, #0]
 800fc22:	2200      	movs	r2, #0
 800fc24:	705a      	strb	r2, [r3, #1]
 800fc26:	2200      	movs	r2, #0
 800fc28:	709a      	strb	r2, [r3, #2]
 800fc2a:	2200      	movs	r2, #0
 800fc2c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800fc2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc30:	8afa      	ldrh	r2, [r7, #22]
 800fc32:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800fc34:	8afa      	ldrh	r2, [r7, #22]
 800fc36:	8b7b      	ldrh	r3, [r7, #26]
 800fc38:	4413      	add	r3, r2
 800fc3a:	b29a      	uxth	r2, r3
 800fc3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc3e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800fc40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc42:	88db      	ldrh	r3, [r3, #6]
 800fc44:	b29b      	uxth	r3, r3
 800fc46:	8afa      	ldrh	r2, [r7, #22]
 800fc48:	429a      	cmp	r2, r3
 800fc4a:	d902      	bls.n	800fc52 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800fc4c:	f04f 33ff 	mov.w	r3, #4294967295
 800fc50:	e106      	b.n	800fe60 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800fc52:	68fb      	ldr	r3, [r7, #12]
 800fc54:	685b      	ldr	r3, [r3, #4]
 800fc56:	627b      	str	r3, [r7, #36]	; 0x24
 800fc58:	e068      	b.n	800fd2c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800fc5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc5c:	685b      	ldr	r3, [r3, #4]
 800fc5e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800fc60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc62:	889b      	ldrh	r3, [r3, #4]
 800fc64:	b29a      	uxth	r2, r3
 800fc66:	693b      	ldr	r3, [r7, #16]
 800fc68:	889b      	ldrh	r3, [r3, #4]
 800fc6a:	b29b      	uxth	r3, r3
 800fc6c:	429a      	cmp	r2, r3
 800fc6e:	d235      	bcs.n	800fcdc <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800fc70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fc74:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800fc76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc78:	2b00      	cmp	r3, #0
 800fc7a:	d020      	beq.n	800fcbe <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800fc7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc7e:	889b      	ldrh	r3, [r3, #4]
 800fc80:	b29a      	uxth	r2, r3
 800fc82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc84:	88db      	ldrh	r3, [r3, #6]
 800fc86:	b29b      	uxth	r3, r3
 800fc88:	429a      	cmp	r2, r3
 800fc8a:	d307      	bcc.n	800fc9c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800fc8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc8e:	88db      	ldrh	r3, [r3, #6]
 800fc90:	b29a      	uxth	r2, r3
 800fc92:	693b      	ldr	r3, [r7, #16]
 800fc94:	889b      	ldrh	r3, [r3, #4]
 800fc96:	b29b      	uxth	r3, r3
 800fc98:	429a      	cmp	r2, r3
 800fc9a:	d902      	bls.n	800fca2 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800fc9c:	f04f 33ff 	mov.w	r3, #4294967295
 800fca0:	e0de      	b.n	800fe60 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800fca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fca4:	68ba      	ldr	r2, [r7, #8]
 800fca6:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800fca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcaa:	88db      	ldrh	r3, [r3, #6]
 800fcac:	b29a      	uxth	r2, r3
 800fcae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcb0:	889b      	ldrh	r3, [r3, #4]
 800fcb2:	b29b      	uxth	r3, r3
 800fcb4:	429a      	cmp	r2, r3
 800fcb6:	d03d      	beq.n	800fd34 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800fcb8:	2300      	movs	r3, #0
 800fcba:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800fcbc:	e03a      	b.n	800fd34 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800fcbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcc0:	88db      	ldrh	r3, [r3, #6]
 800fcc2:	b29a      	uxth	r2, r3
 800fcc4:	693b      	ldr	r3, [r7, #16]
 800fcc6:	889b      	ldrh	r3, [r3, #4]
 800fcc8:	b29b      	uxth	r3, r3
 800fcca:	429a      	cmp	r2, r3
 800fccc:	d902      	bls.n	800fcd4 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800fcce:	f04f 33ff 	mov.w	r3, #4294967295
 800fcd2:	e0c5      	b.n	800fe60 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800fcd4:	68fb      	ldr	r3, [r7, #12]
 800fcd6:	68ba      	ldr	r2, [r7, #8]
 800fcd8:	605a      	str	r2, [r3, #4]
      break;
 800fcda:	e02b      	b.n	800fd34 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800fcdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcde:	889b      	ldrh	r3, [r3, #4]
 800fce0:	b29a      	uxth	r2, r3
 800fce2:	693b      	ldr	r3, [r7, #16]
 800fce4:	889b      	ldrh	r3, [r3, #4]
 800fce6:	b29b      	uxth	r3, r3
 800fce8:	429a      	cmp	r2, r3
 800fcea:	d102      	bne.n	800fcf2 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800fcec:	f04f 33ff 	mov.w	r3, #4294967295
 800fcf0:	e0b6      	b.n	800fe60 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800fcf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcf4:	889b      	ldrh	r3, [r3, #4]
 800fcf6:	b29a      	uxth	r2, r3
 800fcf8:	693b      	ldr	r3, [r7, #16]
 800fcfa:	88db      	ldrh	r3, [r3, #6]
 800fcfc:	b29b      	uxth	r3, r3
 800fcfe:	429a      	cmp	r2, r3
 800fd00:	d202      	bcs.n	800fd08 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800fd02:	f04f 33ff 	mov.w	r3, #4294967295
 800fd06:	e0ab      	b.n	800fe60 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800fd08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd0a:	2b00      	cmp	r3, #0
 800fd0c:	d009      	beq.n	800fd22 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800fd0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd10:	88db      	ldrh	r3, [r3, #6]
 800fd12:	b29a      	uxth	r2, r3
 800fd14:	693b      	ldr	r3, [r7, #16]
 800fd16:	889b      	ldrh	r3, [r3, #4]
 800fd18:	b29b      	uxth	r3, r3
 800fd1a:	429a      	cmp	r2, r3
 800fd1c:	d001      	beq.n	800fd22 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800fd1e:	2300      	movs	r3, #0
 800fd20:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800fd22:	693b      	ldr	r3, [r7, #16]
 800fd24:	681b      	ldr	r3, [r3, #0]
 800fd26:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800fd28:	693b      	ldr	r3, [r7, #16]
 800fd2a:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800fd2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd2e:	2b00      	cmp	r3, #0
 800fd30:	d193      	bne.n	800fc5a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800fd32:	e000      	b.n	800fd36 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800fd34:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800fd36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd38:	2b00      	cmp	r3, #0
 800fd3a:	d12d      	bne.n	800fd98 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800fd3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd3e:	2b00      	cmp	r3, #0
 800fd40:	d01c      	beq.n	800fd7c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800fd42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd44:	88db      	ldrh	r3, [r3, #6]
 800fd46:	b29a      	uxth	r2, r3
 800fd48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd4a:	889b      	ldrh	r3, [r3, #4]
 800fd4c:	b29b      	uxth	r3, r3
 800fd4e:	429a      	cmp	r2, r3
 800fd50:	d906      	bls.n	800fd60 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800fd52:	4b45      	ldr	r3, [pc, #276]	; (800fe68 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800fd54:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800fd58:	4944      	ldr	r1, [pc, #272]	; (800fe6c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800fd5a:	4845      	ldr	r0, [pc, #276]	; (800fe70 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800fd5c:	f000 fcea 	bl	8010734 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800fd60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd62:	68ba      	ldr	r2, [r7, #8]
 800fd64:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800fd66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd68:	88db      	ldrh	r3, [r3, #6]
 800fd6a:	b29a      	uxth	r2, r3
 800fd6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd6e:	889b      	ldrh	r3, [r3, #4]
 800fd70:	b29b      	uxth	r3, r3
 800fd72:	429a      	cmp	r2, r3
 800fd74:	d010      	beq.n	800fd98 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800fd76:	2300      	movs	r3, #0
 800fd78:	623b      	str	r3, [r7, #32]
 800fd7a:	e00d      	b.n	800fd98 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800fd7c:	68fb      	ldr	r3, [r7, #12]
 800fd7e:	685b      	ldr	r3, [r3, #4]
 800fd80:	2b00      	cmp	r3, #0
 800fd82:	d006      	beq.n	800fd92 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800fd84:	4b38      	ldr	r3, [pc, #224]	; (800fe68 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800fd86:	f44f 72df 	mov.w	r2, #446	; 0x1be
 800fd8a:	493a      	ldr	r1, [pc, #232]	; (800fe74 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800fd8c:	4838      	ldr	r0, [pc, #224]	; (800fe70 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800fd8e:	f000 fcd1 	bl	8010734 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800fd92:	68fb      	ldr	r3, [r7, #12]
 800fd94:	68ba      	ldr	r2, [r7, #8]
 800fd96:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	2b00      	cmp	r3, #0
 800fd9c:	d105      	bne.n	800fdaa <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800fd9e:	68fb      	ldr	r3, [r7, #12]
 800fda0:	7f9b      	ldrb	r3, [r3, #30]
 800fda2:	f003 0301 	and.w	r3, r3, #1
 800fda6:	2b00      	cmp	r3, #0
 800fda8:	d059      	beq.n	800fe5e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800fdaa:	6a3b      	ldr	r3, [r7, #32]
 800fdac:	2b00      	cmp	r3, #0
 800fdae:	d04f      	beq.n	800fe50 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800fdb0:	68fb      	ldr	r3, [r7, #12]
 800fdb2:	685b      	ldr	r3, [r3, #4]
 800fdb4:	2b00      	cmp	r3, #0
 800fdb6:	d006      	beq.n	800fdc6 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800fdb8:	68fb      	ldr	r3, [r7, #12]
 800fdba:	685b      	ldr	r3, [r3, #4]
 800fdbc:	685b      	ldr	r3, [r3, #4]
 800fdbe:	889b      	ldrh	r3, [r3, #4]
 800fdc0:	b29b      	uxth	r3, r3
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	d002      	beq.n	800fdcc <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800fdc6:	2300      	movs	r3, #0
 800fdc8:	623b      	str	r3, [r7, #32]
 800fdca:	e041      	b.n	800fe50 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800fdcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdce:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800fdd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdd2:	681b      	ldr	r3, [r3, #0]
 800fdd4:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800fdd6:	e012      	b.n	800fdfe <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800fdd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdda:	685b      	ldr	r3, [r3, #4]
 800fddc:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800fdde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fde0:	88db      	ldrh	r3, [r3, #6]
 800fde2:	b29a      	uxth	r2, r3
 800fde4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fde6:	889b      	ldrh	r3, [r3, #4]
 800fde8:	b29b      	uxth	r3, r3
 800fdea:	429a      	cmp	r2, r3
 800fdec:	d002      	beq.n	800fdf4 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800fdee:	2300      	movs	r3, #0
 800fdf0:	623b      	str	r3, [r7, #32]
            break;
 800fdf2:	e007      	b.n	800fe04 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800fdf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdf6:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800fdf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdfa:	681b      	ldr	r3, [r3, #0]
 800fdfc:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800fdfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe00:	2b00      	cmp	r3, #0
 800fe02:	d1e9      	bne.n	800fdd8 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800fe04:	6a3b      	ldr	r3, [r7, #32]
 800fe06:	2b00      	cmp	r3, #0
 800fe08:	d022      	beq.n	800fe50 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800fe0a:	68fb      	ldr	r3, [r7, #12]
 800fe0c:	685b      	ldr	r3, [r3, #4]
 800fe0e:	2b00      	cmp	r3, #0
 800fe10:	d106      	bne.n	800fe20 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800fe12:	4b15      	ldr	r3, [pc, #84]	; (800fe68 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800fe14:	f240 12df 	movw	r2, #479	; 0x1df
 800fe18:	4917      	ldr	r1, [pc, #92]	; (800fe78 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800fe1a:	4815      	ldr	r0, [pc, #84]	; (800fe70 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800fe1c:	f000 fc8a 	bl	8010734 <iprintf>
          LWIP_ASSERT("sanity check",
 800fe20:	68fb      	ldr	r3, [r7, #12]
 800fe22:	685b      	ldr	r3, [r3, #4]
 800fe24:	685b      	ldr	r3, [r3, #4]
 800fe26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fe28:	429a      	cmp	r2, r3
 800fe2a:	d106      	bne.n	800fe3a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800fe2c:	4b0e      	ldr	r3, [pc, #56]	; (800fe68 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800fe2e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800fe32:	4911      	ldr	r1, [pc, #68]	; (800fe78 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800fe34:	480e      	ldr	r0, [pc, #56]	; (800fe70 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800fe36:	f000 fc7d 	bl	8010734 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800fe3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe3c:	681b      	ldr	r3, [r3, #0]
 800fe3e:	2b00      	cmp	r3, #0
 800fe40:	d006      	beq.n	800fe50 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800fe42:	4b09      	ldr	r3, [pc, #36]	; (800fe68 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800fe44:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 800fe48:	490c      	ldr	r1, [pc, #48]	; (800fe7c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800fe4a:	4809      	ldr	r0, [pc, #36]	; (800fe70 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800fe4c:	f000 fc72 	bl	8010734 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800fe50:	6a3b      	ldr	r3, [r7, #32]
 800fe52:	2b00      	cmp	r3, #0
 800fe54:	bf14      	ite	ne
 800fe56:	2301      	movne	r3, #1
 800fe58:	2300      	moveq	r3, #0
 800fe5a:	b2db      	uxtb	r3, r3
 800fe5c:	e000      	b.n	800fe60 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800fe5e:	2300      	movs	r3, #0
}
 800fe60:	4618      	mov	r0, r3
 800fe62:	3730      	adds	r7, #48	; 0x30
 800fe64:	46bd      	mov	sp, r7
 800fe66:	bd80      	pop	{r7, pc}
 800fe68:	080142b0 	.word	0x080142b0
 800fe6c:	08014394 	.word	0x08014394
 800fe70:	080142f8 	.word	0x080142f8
 800fe74:	080143b4 	.word	0x080143b4
 800fe78:	080143ec 	.word	0x080143ec
 800fe7c:	080143fc 	.word	0x080143fc

0800fe80 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800fe80:	b580      	push	{r7, lr}
 800fe82:	b08e      	sub	sp, #56	; 0x38
 800fe84:	af00      	add	r7, sp, #0
 800fe86:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	685b      	ldr	r3, [r3, #4]
 800fe8c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800fe8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe90:	781b      	ldrb	r3, [r3, #0]
 800fe92:	f003 030f 	and.w	r3, r3, #15
 800fe96:	b2db      	uxtb	r3, r3
 800fe98:	009b      	lsls	r3, r3, #2
 800fe9a:	b2db      	uxtb	r3, r3
 800fe9c:	2b14      	cmp	r3, #20
 800fe9e:	f040 8171 	bne.w	8010184 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800fea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fea4:	88db      	ldrh	r3, [r3, #6]
 800fea6:	b29b      	uxth	r3, r3
 800fea8:	4618      	mov	r0, r3
 800feaa:	f7f4 fc99 	bl	80047e0 <lwip_htons>
 800feae:	4603      	mov	r3, r0
 800feb0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800feb4:	b29b      	uxth	r3, r3
 800feb6:	00db      	lsls	r3, r3, #3
 800feb8:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800feba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800febc:	885b      	ldrh	r3, [r3, #2]
 800febe:	b29b      	uxth	r3, r3
 800fec0:	4618      	mov	r0, r3
 800fec2:	f7f4 fc8d 	bl	80047e0 <lwip_htons>
 800fec6:	4603      	mov	r3, r0
 800fec8:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800feca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fecc:	781b      	ldrb	r3, [r3, #0]
 800fece:	f003 030f 	and.w	r3, r3, #15
 800fed2:	b2db      	uxtb	r3, r3
 800fed4:	009b      	lsls	r3, r3, #2
 800fed6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 800feda:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800fede:	b29b      	uxth	r3, r3
 800fee0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800fee2:	429a      	cmp	r2, r3
 800fee4:	f0c0 8150 	bcc.w	8010188 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800fee8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800feec:	b29b      	uxth	r3, r3
 800feee:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800fef0:	1ad3      	subs	r3, r2, r3
 800fef2:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800fef4:	6878      	ldr	r0, [r7, #4]
 800fef6:	f7f6 f8fd 	bl	80060f4 <pbuf_clen>
 800fefa:	4603      	mov	r3, r0
 800fefc:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800fefe:	4b8c      	ldr	r3, [pc, #560]	; (8010130 <ip4_reass+0x2b0>)
 800ff00:	881b      	ldrh	r3, [r3, #0]
 800ff02:	461a      	mov	r2, r3
 800ff04:	8c3b      	ldrh	r3, [r7, #32]
 800ff06:	4413      	add	r3, r2
 800ff08:	2b0a      	cmp	r3, #10
 800ff0a:	dd10      	ble.n	800ff2e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800ff0c:	8c3b      	ldrh	r3, [r7, #32]
 800ff0e:	4619      	mov	r1, r3
 800ff10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ff12:	f7ff fd81 	bl	800fa18 <ip_reass_remove_oldest_datagram>
 800ff16:	4603      	mov	r3, r0
 800ff18:	2b00      	cmp	r3, #0
 800ff1a:	f000 8137 	beq.w	801018c <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800ff1e:	4b84      	ldr	r3, [pc, #528]	; (8010130 <ip4_reass+0x2b0>)
 800ff20:	881b      	ldrh	r3, [r3, #0]
 800ff22:	461a      	mov	r2, r3
 800ff24:	8c3b      	ldrh	r3, [r7, #32]
 800ff26:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800ff28:	2b0a      	cmp	r3, #10
 800ff2a:	f300 812f 	bgt.w	801018c <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800ff2e:	4b81      	ldr	r3, [pc, #516]	; (8010134 <ip4_reass+0x2b4>)
 800ff30:	681b      	ldr	r3, [r3, #0]
 800ff32:	633b      	str	r3, [r7, #48]	; 0x30
 800ff34:	e015      	b.n	800ff62 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800ff36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff38:	695a      	ldr	r2, [r3, #20]
 800ff3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff3c:	68db      	ldr	r3, [r3, #12]
 800ff3e:	429a      	cmp	r2, r3
 800ff40:	d10c      	bne.n	800ff5c <ip4_reass+0xdc>
 800ff42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff44:	699a      	ldr	r2, [r3, #24]
 800ff46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff48:	691b      	ldr	r3, [r3, #16]
 800ff4a:	429a      	cmp	r2, r3
 800ff4c:	d106      	bne.n	800ff5c <ip4_reass+0xdc>
 800ff4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff50:	899a      	ldrh	r2, [r3, #12]
 800ff52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff54:	889b      	ldrh	r3, [r3, #4]
 800ff56:	b29b      	uxth	r3, r3
 800ff58:	429a      	cmp	r2, r3
 800ff5a:	d006      	beq.n	800ff6a <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800ff5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff5e:	681b      	ldr	r3, [r3, #0]
 800ff60:	633b      	str	r3, [r7, #48]	; 0x30
 800ff62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff64:	2b00      	cmp	r3, #0
 800ff66:	d1e6      	bne.n	800ff36 <ip4_reass+0xb6>
 800ff68:	e000      	b.n	800ff6c <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800ff6a:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800ff6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff6e:	2b00      	cmp	r3, #0
 800ff70:	d109      	bne.n	800ff86 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800ff72:	8c3b      	ldrh	r3, [r7, #32]
 800ff74:	4619      	mov	r1, r3
 800ff76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ff78:	f7ff fdb0 	bl	800fadc <ip_reass_enqueue_new_datagram>
 800ff7c:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800ff7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	d11c      	bne.n	800ffbe <ip4_reass+0x13e>
      goto nullreturn;
 800ff84:	e105      	b.n	8010192 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800ff86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff88:	88db      	ldrh	r3, [r3, #6]
 800ff8a:	b29b      	uxth	r3, r3
 800ff8c:	4618      	mov	r0, r3
 800ff8e:	f7f4 fc27 	bl	80047e0 <lwip_htons>
 800ff92:	4603      	mov	r3, r0
 800ff94:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ff98:	2b00      	cmp	r3, #0
 800ff9a:	d110      	bne.n	800ffbe <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800ff9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff9e:	89db      	ldrh	r3, [r3, #14]
 800ffa0:	4618      	mov	r0, r3
 800ffa2:	f7f4 fc1d 	bl	80047e0 <lwip_htons>
 800ffa6:	4603      	mov	r3, r0
 800ffa8:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800ffac:	2b00      	cmp	r3, #0
 800ffae:	d006      	beq.n	800ffbe <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800ffb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffb2:	3308      	adds	r3, #8
 800ffb4:	2214      	movs	r2, #20
 800ffb6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ffb8:	4618      	mov	r0, r3
 800ffba:	f000 fba5 	bl	8010708 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800ffbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffc0:	88db      	ldrh	r3, [r3, #6]
 800ffc2:	b29b      	uxth	r3, r3
 800ffc4:	f003 0320 	and.w	r3, r3, #32
 800ffc8:	2b00      	cmp	r3, #0
 800ffca:	bf0c      	ite	eq
 800ffcc:	2301      	moveq	r3, #1
 800ffce:	2300      	movne	r3, #0
 800ffd0:	b2db      	uxtb	r3, r3
 800ffd2:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800ffd4:	69fb      	ldr	r3, [r7, #28]
 800ffd6:	2b00      	cmp	r3, #0
 800ffd8:	d00e      	beq.n	800fff8 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800ffda:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ffdc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ffde:	4413      	add	r3, r2
 800ffe0:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800ffe2:	8b7a      	ldrh	r2, [r7, #26]
 800ffe4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ffe6:	429a      	cmp	r2, r3
 800ffe8:	f0c0 80a0 	bcc.w	801012c <ip4_reass+0x2ac>
 800ffec:	8b7b      	ldrh	r3, [r7, #26]
 800ffee:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800fff2:	4293      	cmp	r3, r2
 800fff4:	f200 809a 	bhi.w	801012c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800fff8:	69fa      	ldr	r2, [r7, #28]
 800fffa:	6879      	ldr	r1, [r7, #4]
 800fffc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fffe:	f7ff fdd5 	bl	800fbac <ip_reass_chain_frag_into_datagram_and_validate>
 8010002:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8010004:	697b      	ldr	r3, [r7, #20]
 8010006:	f1b3 3fff 	cmp.w	r3, #4294967295
 801000a:	f000 809b 	beq.w	8010144 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801000e:	4b48      	ldr	r3, [pc, #288]	; (8010130 <ip4_reass+0x2b0>)
 8010010:	881a      	ldrh	r2, [r3, #0]
 8010012:	8c3b      	ldrh	r3, [r7, #32]
 8010014:	4413      	add	r3, r2
 8010016:	b29a      	uxth	r2, r3
 8010018:	4b45      	ldr	r3, [pc, #276]	; (8010130 <ip4_reass+0x2b0>)
 801001a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801001c:	69fb      	ldr	r3, [r7, #28]
 801001e:	2b00      	cmp	r3, #0
 8010020:	d00d      	beq.n	801003e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8010022:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8010024:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010026:	4413      	add	r3, r2
 8010028:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801002a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801002c:	8a7a      	ldrh	r2, [r7, #18]
 801002e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8010030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010032:	7f9b      	ldrb	r3, [r3, #30]
 8010034:	f043 0301 	orr.w	r3, r3, #1
 8010038:	b2da      	uxtb	r2, r3
 801003a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801003c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801003e:	697b      	ldr	r3, [r7, #20]
 8010040:	2b01      	cmp	r3, #1
 8010042:	d171      	bne.n	8010128 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8010044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010046:	8b9b      	ldrh	r3, [r3, #28]
 8010048:	3314      	adds	r3, #20
 801004a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801004c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801004e:	685b      	ldr	r3, [r3, #4]
 8010050:	685b      	ldr	r3, [r3, #4]
 8010052:	681b      	ldr	r3, [r3, #0]
 8010054:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8010056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010058:	685b      	ldr	r3, [r3, #4]
 801005a:	685b      	ldr	r3, [r3, #4]
 801005c:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801005e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010060:	3308      	adds	r3, #8
 8010062:	2214      	movs	r2, #20
 8010064:	4619      	mov	r1, r3
 8010066:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010068:	f000 fb4e 	bl	8010708 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801006c:	8a3b      	ldrh	r3, [r7, #16]
 801006e:	4618      	mov	r0, r3
 8010070:	f7f4 fbb6 	bl	80047e0 <lwip_htons>
 8010074:	4603      	mov	r3, r0
 8010076:	461a      	mov	r2, r3
 8010078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801007a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801007c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801007e:	2200      	movs	r2, #0
 8010080:	719a      	strb	r2, [r3, #6]
 8010082:	2200      	movs	r2, #0
 8010084:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8010086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010088:	2200      	movs	r2, #0
 801008a:	729a      	strb	r2, [r3, #10]
 801008c:	2200      	movs	r2, #0
 801008e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8010090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010092:	685b      	ldr	r3, [r3, #4]
 8010094:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8010096:	e00d      	b.n	80100b4 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8010098:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801009a:	685b      	ldr	r3, [r3, #4]
 801009c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801009e:	2114      	movs	r1, #20
 80100a0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80100a2:	f7f5 ff19 	bl	8005ed8 <pbuf_remove_header>
      pbuf_cat(p, r);
 80100a6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80100a8:	6878      	ldr	r0, [r7, #4]
 80100aa:	f7f6 f85d 	bl	8006168 <pbuf_cat>
      r = iprh->next_pbuf;
 80100ae:	68fb      	ldr	r3, [r7, #12]
 80100b0:	681b      	ldr	r3, [r3, #0]
 80100b2:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 80100b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80100b6:	2b00      	cmp	r3, #0
 80100b8:	d1ee      	bne.n	8010098 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80100ba:	4b1e      	ldr	r3, [pc, #120]	; (8010134 <ip4_reass+0x2b4>)
 80100bc:	681b      	ldr	r3, [r3, #0]
 80100be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80100c0:	429a      	cmp	r2, r3
 80100c2:	d102      	bne.n	80100ca <ip4_reass+0x24a>
      ipr_prev = NULL;
 80100c4:	2300      	movs	r3, #0
 80100c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80100c8:	e010      	b.n	80100ec <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80100ca:	4b1a      	ldr	r3, [pc, #104]	; (8010134 <ip4_reass+0x2b4>)
 80100cc:	681b      	ldr	r3, [r3, #0]
 80100ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80100d0:	e007      	b.n	80100e2 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 80100d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100d4:	681b      	ldr	r3, [r3, #0]
 80100d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80100d8:	429a      	cmp	r2, r3
 80100da:	d006      	beq.n	80100ea <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80100dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100de:	681b      	ldr	r3, [r3, #0]
 80100e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80100e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100e4:	2b00      	cmp	r3, #0
 80100e6:	d1f4      	bne.n	80100d2 <ip4_reass+0x252>
 80100e8:	e000      	b.n	80100ec <ip4_reass+0x26c>
          break;
 80100ea:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80100ec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80100ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80100f0:	f7ff fd2e 	bl	800fb50 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 80100f4:	6878      	ldr	r0, [r7, #4]
 80100f6:	f7f5 fffd 	bl	80060f4 <pbuf_clen>
 80100fa:	4603      	mov	r3, r0
 80100fc:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80100fe:	4b0c      	ldr	r3, [pc, #48]	; (8010130 <ip4_reass+0x2b0>)
 8010100:	881b      	ldrh	r3, [r3, #0]
 8010102:	8c3a      	ldrh	r2, [r7, #32]
 8010104:	429a      	cmp	r2, r3
 8010106:	d906      	bls.n	8010116 <ip4_reass+0x296>
 8010108:	4b0b      	ldr	r3, [pc, #44]	; (8010138 <ip4_reass+0x2b8>)
 801010a:	f240 229b 	movw	r2, #667	; 0x29b
 801010e:	490b      	ldr	r1, [pc, #44]	; (801013c <ip4_reass+0x2bc>)
 8010110:	480b      	ldr	r0, [pc, #44]	; (8010140 <ip4_reass+0x2c0>)
 8010112:	f000 fb0f 	bl	8010734 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8010116:	4b06      	ldr	r3, [pc, #24]	; (8010130 <ip4_reass+0x2b0>)
 8010118:	881a      	ldrh	r2, [r3, #0]
 801011a:	8c3b      	ldrh	r3, [r7, #32]
 801011c:	1ad3      	subs	r3, r2, r3
 801011e:	b29a      	uxth	r2, r3
 8010120:	4b03      	ldr	r3, [pc, #12]	; (8010130 <ip4_reass+0x2b0>)
 8010122:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	e038      	b.n	801019a <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8010128:	2300      	movs	r3, #0
 801012a:	e036      	b.n	801019a <ip4_reass+0x31a>
      goto nullreturn_ipr;
 801012c:	bf00      	nop
 801012e:	e00a      	b.n	8010146 <ip4_reass+0x2c6>
 8010130:	20007de0 	.word	0x20007de0
 8010134:	20007ddc 	.word	0x20007ddc
 8010138:	080142b0 	.word	0x080142b0
 801013c:	08014420 	.word	0x08014420
 8010140:	080142f8 	.word	0x080142f8
    goto nullreturn_ipr;
 8010144:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8010146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010148:	2b00      	cmp	r3, #0
 801014a:	d106      	bne.n	801015a <ip4_reass+0x2da>
 801014c:	4b15      	ldr	r3, [pc, #84]	; (80101a4 <ip4_reass+0x324>)
 801014e:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8010152:	4915      	ldr	r1, [pc, #84]	; (80101a8 <ip4_reass+0x328>)
 8010154:	4815      	ldr	r0, [pc, #84]	; (80101ac <ip4_reass+0x32c>)
 8010156:	f000 faed 	bl	8010734 <iprintf>
  if (ipr->p == NULL) {
 801015a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801015c:	685b      	ldr	r3, [r3, #4]
 801015e:	2b00      	cmp	r3, #0
 8010160:	d116      	bne.n	8010190 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8010162:	4b13      	ldr	r3, [pc, #76]	; (80101b0 <ip4_reass+0x330>)
 8010164:	681b      	ldr	r3, [r3, #0]
 8010166:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010168:	429a      	cmp	r2, r3
 801016a:	d006      	beq.n	801017a <ip4_reass+0x2fa>
 801016c:	4b0d      	ldr	r3, [pc, #52]	; (80101a4 <ip4_reass+0x324>)
 801016e:	f240 22ab 	movw	r2, #683	; 0x2ab
 8010172:	4910      	ldr	r1, [pc, #64]	; (80101b4 <ip4_reass+0x334>)
 8010174:	480d      	ldr	r0, [pc, #52]	; (80101ac <ip4_reass+0x32c>)
 8010176:	f000 fadd 	bl	8010734 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801017a:	2100      	movs	r1, #0
 801017c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801017e:	f7ff fce7 	bl	800fb50 <ip_reass_dequeue_datagram>
 8010182:	e006      	b.n	8010192 <ip4_reass+0x312>
    goto nullreturn;
 8010184:	bf00      	nop
 8010186:	e004      	b.n	8010192 <ip4_reass+0x312>
    goto nullreturn;
 8010188:	bf00      	nop
 801018a:	e002      	b.n	8010192 <ip4_reass+0x312>
      goto nullreturn;
 801018c:	bf00      	nop
 801018e:	e000      	b.n	8010192 <ip4_reass+0x312>
  }

nullreturn:
 8010190:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8010192:	6878      	ldr	r0, [r7, #4]
 8010194:	f7f5 ff26 	bl	8005fe4 <pbuf_free>
  return NULL;
 8010198:	2300      	movs	r3, #0
}
 801019a:	4618      	mov	r0, r3
 801019c:	3738      	adds	r7, #56	; 0x38
 801019e:	46bd      	mov	sp, r7
 80101a0:	bd80      	pop	{r7, pc}
 80101a2:	bf00      	nop
 80101a4:	080142b0 	.word	0x080142b0
 80101a8:	0801443c 	.word	0x0801443c
 80101ac:	080142f8 	.word	0x080142f8
 80101b0:	20007ddc 	.word	0x20007ddc
 80101b4:	08014448 	.word	0x08014448

080101b8 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80101b8:	b580      	push	{r7, lr}
 80101ba:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80101bc:	2005      	movs	r0, #5
 80101be:	f7f5 f83f 	bl	8005240 <memp_malloc>
 80101c2:	4603      	mov	r3, r0
}
 80101c4:	4618      	mov	r0, r3
 80101c6:	bd80      	pop	{r7, pc}

080101c8 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80101c8:	b580      	push	{r7, lr}
 80101ca:	b082      	sub	sp, #8
 80101cc:	af00      	add	r7, sp, #0
 80101ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	2b00      	cmp	r3, #0
 80101d4:	d106      	bne.n	80101e4 <ip_frag_free_pbuf_custom_ref+0x1c>
 80101d6:	4b07      	ldr	r3, [pc, #28]	; (80101f4 <ip_frag_free_pbuf_custom_ref+0x2c>)
 80101d8:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 80101dc:	4906      	ldr	r1, [pc, #24]	; (80101f8 <ip_frag_free_pbuf_custom_ref+0x30>)
 80101de:	4807      	ldr	r0, [pc, #28]	; (80101fc <ip_frag_free_pbuf_custom_ref+0x34>)
 80101e0:	f000 faa8 	bl	8010734 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80101e4:	6879      	ldr	r1, [r7, #4]
 80101e6:	2005      	movs	r0, #5
 80101e8:	f7f5 f89a 	bl	8005320 <memp_free>
}
 80101ec:	bf00      	nop
 80101ee:	3708      	adds	r7, #8
 80101f0:	46bd      	mov	sp, r7
 80101f2:	bd80      	pop	{r7, pc}
 80101f4:	080142b0 	.word	0x080142b0
 80101f8:	08014468 	.word	0x08014468
 80101fc:	080142f8 	.word	0x080142f8

08010200 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8010200:	b580      	push	{r7, lr}
 8010202:	b084      	sub	sp, #16
 8010204:	af00      	add	r7, sp, #0
 8010206:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801020c:	68fb      	ldr	r3, [r7, #12]
 801020e:	2b00      	cmp	r3, #0
 8010210:	d106      	bne.n	8010220 <ipfrag_free_pbuf_custom+0x20>
 8010212:	4b11      	ldr	r3, [pc, #68]	; (8010258 <ipfrag_free_pbuf_custom+0x58>)
 8010214:	f240 22ce 	movw	r2, #718	; 0x2ce
 8010218:	4910      	ldr	r1, [pc, #64]	; (801025c <ipfrag_free_pbuf_custom+0x5c>)
 801021a:	4811      	ldr	r0, [pc, #68]	; (8010260 <ipfrag_free_pbuf_custom+0x60>)
 801021c:	f000 fa8a 	bl	8010734 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8010220:	68fa      	ldr	r2, [r7, #12]
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	429a      	cmp	r2, r3
 8010226:	d006      	beq.n	8010236 <ipfrag_free_pbuf_custom+0x36>
 8010228:	4b0b      	ldr	r3, [pc, #44]	; (8010258 <ipfrag_free_pbuf_custom+0x58>)
 801022a:	f240 22cf 	movw	r2, #719	; 0x2cf
 801022e:	490d      	ldr	r1, [pc, #52]	; (8010264 <ipfrag_free_pbuf_custom+0x64>)
 8010230:	480b      	ldr	r0, [pc, #44]	; (8010260 <ipfrag_free_pbuf_custom+0x60>)
 8010232:	f000 fa7f 	bl	8010734 <iprintf>
  if (pcr->original != NULL) {
 8010236:	68fb      	ldr	r3, [r7, #12]
 8010238:	695b      	ldr	r3, [r3, #20]
 801023a:	2b00      	cmp	r3, #0
 801023c:	d004      	beq.n	8010248 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801023e:	68fb      	ldr	r3, [r7, #12]
 8010240:	695b      	ldr	r3, [r3, #20]
 8010242:	4618      	mov	r0, r3
 8010244:	f7f5 fece 	bl	8005fe4 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8010248:	68f8      	ldr	r0, [r7, #12]
 801024a:	f7ff ffbd 	bl	80101c8 <ip_frag_free_pbuf_custom_ref>
}
 801024e:	bf00      	nop
 8010250:	3710      	adds	r7, #16
 8010252:	46bd      	mov	sp, r7
 8010254:	bd80      	pop	{r7, pc}
 8010256:	bf00      	nop
 8010258:	080142b0 	.word	0x080142b0
 801025c:	08014474 	.word	0x08014474
 8010260:	080142f8 	.word	0x080142f8
 8010264:	08014480 	.word	0x08014480

08010268 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8010268:	b580      	push	{r7, lr}
 801026a:	b094      	sub	sp, #80	; 0x50
 801026c:	af02      	add	r7, sp, #8
 801026e:	60f8      	str	r0, [r7, #12]
 8010270:	60b9      	str	r1, [r7, #8]
 8010272:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8010274:	2300      	movs	r3, #0
 8010276:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801027a:	68bb      	ldr	r3, [r7, #8]
 801027c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801027e:	3b14      	subs	r3, #20
 8010280:	2b00      	cmp	r3, #0
 8010282:	da00      	bge.n	8010286 <ip4_frag+0x1e>
 8010284:	3307      	adds	r3, #7
 8010286:	10db      	asrs	r3, r3, #3
 8010288:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801028a:	2314      	movs	r3, #20
 801028c:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801028e:	68fb      	ldr	r3, [r7, #12]
 8010290:	685b      	ldr	r3, [r3, #4]
 8010292:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8010294:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010296:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8010298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801029a:	781b      	ldrb	r3, [r3, #0]
 801029c:	f003 030f 	and.w	r3, r3, #15
 80102a0:	b2db      	uxtb	r3, r3
 80102a2:	009b      	lsls	r3, r3, #2
 80102a4:	b2db      	uxtb	r3, r3
 80102a6:	2b14      	cmp	r3, #20
 80102a8:	d002      	beq.n	80102b0 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80102aa:	f06f 0305 	mvn.w	r3, #5
 80102ae:	e110      	b.n	80104d2 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80102b0:	68fb      	ldr	r3, [r7, #12]
 80102b2:	895b      	ldrh	r3, [r3, #10]
 80102b4:	2b13      	cmp	r3, #19
 80102b6:	d809      	bhi.n	80102cc <ip4_frag+0x64>
 80102b8:	4b88      	ldr	r3, [pc, #544]	; (80104dc <ip4_frag+0x274>)
 80102ba:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 80102be:	4988      	ldr	r1, [pc, #544]	; (80104e0 <ip4_frag+0x278>)
 80102c0:	4888      	ldr	r0, [pc, #544]	; (80104e4 <ip4_frag+0x27c>)
 80102c2:	f000 fa37 	bl	8010734 <iprintf>
 80102c6:	f06f 0305 	mvn.w	r3, #5
 80102ca:	e102      	b.n	80104d2 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80102cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102ce:	88db      	ldrh	r3, [r3, #6]
 80102d0:	b29b      	uxth	r3, r3
 80102d2:	4618      	mov	r0, r3
 80102d4:	f7f4 fa84 	bl	80047e0 <lwip_htons>
 80102d8:	4603      	mov	r3, r0
 80102da:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 80102dc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80102de:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80102e2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 80102e6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80102e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80102ec:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 80102ee:	68fb      	ldr	r3, [r7, #12]
 80102f0:	891b      	ldrh	r3, [r3, #8]
 80102f2:	3b14      	subs	r3, #20
 80102f4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 80102f8:	e0e1      	b.n	80104be <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80102fa:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80102fc:	00db      	lsls	r3, r3, #3
 80102fe:	b29b      	uxth	r3, r3
 8010300:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010304:	4293      	cmp	r3, r2
 8010306:	bf28      	it	cs
 8010308:	4613      	movcs	r3, r2
 801030a:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801030c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010310:	2114      	movs	r1, #20
 8010312:	200e      	movs	r0, #14
 8010314:	f7f5 fb82 	bl	8005a1c <pbuf_alloc>
 8010318:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801031a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801031c:	2b00      	cmp	r3, #0
 801031e:	f000 80d5 	beq.w	80104cc <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8010322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010324:	895b      	ldrh	r3, [r3, #10]
 8010326:	2b13      	cmp	r3, #19
 8010328:	d806      	bhi.n	8010338 <ip4_frag+0xd0>
 801032a:	4b6c      	ldr	r3, [pc, #432]	; (80104dc <ip4_frag+0x274>)
 801032c:	f44f 7249 	mov.w	r2, #804	; 0x324
 8010330:	496d      	ldr	r1, [pc, #436]	; (80104e8 <ip4_frag+0x280>)
 8010332:	486c      	ldr	r0, [pc, #432]	; (80104e4 <ip4_frag+0x27c>)
 8010334:	f000 f9fe 	bl	8010734 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8010338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801033a:	685b      	ldr	r3, [r3, #4]
 801033c:	2214      	movs	r2, #20
 801033e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010340:	4618      	mov	r0, r3
 8010342:	f000 f9e1 	bl	8010708 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8010346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010348:	685b      	ldr	r3, [r3, #4]
 801034a:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 801034c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801034e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8010352:	e064      	b.n	801041e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8010354:	68fb      	ldr	r3, [r7, #12]
 8010356:	895a      	ldrh	r2, [r3, #10]
 8010358:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801035a:	1ad3      	subs	r3, r2, r3
 801035c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801035e:	68fb      	ldr	r3, [r7, #12]
 8010360:	895b      	ldrh	r3, [r3, #10]
 8010362:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8010364:	429a      	cmp	r2, r3
 8010366:	d906      	bls.n	8010376 <ip4_frag+0x10e>
 8010368:	4b5c      	ldr	r3, [pc, #368]	; (80104dc <ip4_frag+0x274>)
 801036a:	f240 322d 	movw	r2, #813	; 0x32d
 801036e:	495f      	ldr	r1, [pc, #380]	; (80104ec <ip4_frag+0x284>)
 8010370:	485c      	ldr	r0, [pc, #368]	; (80104e4 <ip4_frag+0x27c>)
 8010372:	f000 f9df 	bl	8010734 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8010376:	8bfa      	ldrh	r2, [r7, #30]
 8010378:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801037c:	4293      	cmp	r3, r2
 801037e:	bf28      	it	cs
 8010380:	4613      	movcs	r3, r2
 8010382:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8010386:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801038a:	2b00      	cmp	r3, #0
 801038c:	d105      	bne.n	801039a <ip4_frag+0x132>
        poff = 0;
 801038e:	2300      	movs	r3, #0
 8010390:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8010392:	68fb      	ldr	r3, [r7, #12]
 8010394:	681b      	ldr	r3, [r3, #0]
 8010396:	60fb      	str	r3, [r7, #12]
        continue;
 8010398:	e041      	b.n	801041e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801039a:	f7ff ff0d 	bl	80101b8 <ip_frag_alloc_pbuf_custom_ref>
 801039e:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80103a0:	69bb      	ldr	r3, [r7, #24]
 80103a2:	2b00      	cmp	r3, #0
 80103a4:	d103      	bne.n	80103ae <ip4_frag+0x146>
        pbuf_free(rambuf);
 80103a6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80103a8:	f7f5 fe1c 	bl	8005fe4 <pbuf_free>
        goto memerr;
 80103ac:	e08f      	b.n	80104ce <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80103ae:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80103b0:	68fb      	ldr	r3, [r7, #12]
 80103b2:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80103b4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80103b6:	4413      	add	r3, r2
 80103b8:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 80103bc:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80103c0:	9201      	str	r2, [sp, #4]
 80103c2:	9300      	str	r3, [sp, #0]
 80103c4:	4603      	mov	r3, r0
 80103c6:	2241      	movs	r2, #65	; 0x41
 80103c8:	2000      	movs	r0, #0
 80103ca:	f7f5 fc51 	bl	8005c70 <pbuf_alloced_custom>
 80103ce:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 80103d0:	697b      	ldr	r3, [r7, #20]
 80103d2:	2b00      	cmp	r3, #0
 80103d4:	d106      	bne.n	80103e4 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 80103d6:	69b8      	ldr	r0, [r7, #24]
 80103d8:	f7ff fef6 	bl	80101c8 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 80103dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80103de:	f7f5 fe01 	bl	8005fe4 <pbuf_free>
        goto memerr;
 80103e2:	e074      	b.n	80104ce <ip4_frag+0x266>
      }
      pbuf_ref(p);
 80103e4:	68f8      	ldr	r0, [r7, #12]
 80103e6:	f7f5 fe9d 	bl	8006124 <pbuf_ref>
      pcr->original = p;
 80103ea:	69bb      	ldr	r3, [r7, #24]
 80103ec:	68fa      	ldr	r2, [r7, #12]
 80103ee:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80103f0:	69bb      	ldr	r3, [r7, #24]
 80103f2:	4a3f      	ldr	r2, [pc, #252]	; (80104f0 <ip4_frag+0x288>)
 80103f4:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 80103f6:	6979      	ldr	r1, [r7, #20]
 80103f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80103fa:	f7f5 feb5 	bl	8006168 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 80103fe:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8010402:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8010406:	1ad3      	subs	r3, r2, r3
 8010408:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 801040c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8010410:	2b00      	cmp	r3, #0
 8010412:	d004      	beq.n	801041e <ip4_frag+0x1b6>
        poff = 0;
 8010414:	2300      	movs	r3, #0
 8010416:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8010418:	68fb      	ldr	r3, [r7, #12]
 801041a:	681b      	ldr	r3, [r3, #0]
 801041c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801041e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8010422:	2b00      	cmp	r3, #0
 8010424:	d196      	bne.n	8010354 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8010426:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8010428:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801042c:	4413      	add	r3, r2
 801042e:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8010430:	68bb      	ldr	r3, [r7, #8]
 8010432:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010434:	f1a3 0213 	sub.w	r2, r3, #19
 8010438:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801043c:	429a      	cmp	r2, r3
 801043e:	bfcc      	ite	gt
 8010440:	2301      	movgt	r3, #1
 8010442:	2300      	movle	r3, #0
 8010444:	b2db      	uxtb	r3, r3
 8010446:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8010448:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801044c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010450:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8010452:	6a3b      	ldr	r3, [r7, #32]
 8010454:	2b00      	cmp	r3, #0
 8010456:	d002      	beq.n	801045e <ip4_frag+0x1f6>
 8010458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801045a:	2b00      	cmp	r3, #0
 801045c:	d003      	beq.n	8010466 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801045e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010460:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8010464:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8010466:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010468:	4618      	mov	r0, r3
 801046a:	f7f4 f9b9 	bl	80047e0 <lwip_htons>
 801046e:	4603      	mov	r3, r0
 8010470:	461a      	mov	r2, r3
 8010472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010474:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8010476:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010478:	3314      	adds	r3, #20
 801047a:	b29b      	uxth	r3, r3
 801047c:	4618      	mov	r0, r3
 801047e:	f7f4 f9af 	bl	80047e0 <lwip_htons>
 8010482:	4603      	mov	r3, r0
 8010484:	461a      	mov	r2, r3
 8010486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010488:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801048a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801048c:	2200      	movs	r2, #0
 801048e:	729a      	strb	r2, [r3, #10]
 8010490:	2200      	movs	r2, #0
 8010492:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8010494:	68bb      	ldr	r3, [r7, #8]
 8010496:	695b      	ldr	r3, [r3, #20]
 8010498:	687a      	ldr	r2, [r7, #4]
 801049a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801049c:	68b8      	ldr	r0, [r7, #8]
 801049e:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80104a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80104a2:	f7f5 fd9f 	bl	8005fe4 <pbuf_free>
    left = (u16_t)(left - fragsize);
 80104a6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80104aa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80104ac:	1ad3      	subs	r3, r2, r3
 80104ae:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 80104b2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80104b6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80104b8:	4413      	add	r3, r2
 80104ba:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 80104be:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80104c2:	2b00      	cmp	r3, #0
 80104c4:	f47f af19 	bne.w	80102fa <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80104c8:	2300      	movs	r3, #0
 80104ca:	e002      	b.n	80104d2 <ip4_frag+0x26a>
      goto memerr;
 80104cc:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80104ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80104d2:	4618      	mov	r0, r3
 80104d4:	3748      	adds	r7, #72	; 0x48
 80104d6:	46bd      	mov	sp, r7
 80104d8:	bd80      	pop	{r7, pc}
 80104da:	bf00      	nop
 80104dc:	080142b0 	.word	0x080142b0
 80104e0:	0801448c 	.word	0x0801448c
 80104e4:	080142f8 	.word	0x080142f8
 80104e8:	080144a8 	.word	0x080144a8
 80104ec:	080144c8 	.word	0x080144c8
 80104f0:	08010201 	.word	0x08010201

080104f4 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 80104f4:	b580      	push	{r7, lr}
 80104f6:	b086      	sub	sp, #24
 80104f8:	af00      	add	r7, sp, #0
 80104fa:	6078      	str	r0, [r7, #4]
 80104fc:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 80104fe:	230e      	movs	r3, #14
 8010500:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	895b      	ldrh	r3, [r3, #10]
 8010506:	2b0e      	cmp	r3, #14
 8010508:	d96e      	bls.n	80105e8 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	7bdb      	ldrb	r3, [r3, #15]
 801050e:	2b00      	cmp	r3, #0
 8010510:	d106      	bne.n	8010520 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8010512:	683b      	ldr	r3, [r7, #0]
 8010514:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8010518:	3301      	adds	r3, #1
 801051a:	b2da      	uxtb	r2, r3
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	685b      	ldr	r3, [r3, #4]
 8010524:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8010526:	693b      	ldr	r3, [r7, #16]
 8010528:	7b1a      	ldrb	r2, [r3, #12]
 801052a:	7b5b      	ldrb	r3, [r3, #13]
 801052c:	021b      	lsls	r3, r3, #8
 801052e:	4313      	orrs	r3, r2
 8010530:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8010532:	693b      	ldr	r3, [r7, #16]
 8010534:	781b      	ldrb	r3, [r3, #0]
 8010536:	f003 0301 	and.w	r3, r3, #1
 801053a:	2b00      	cmp	r3, #0
 801053c:	d023      	beq.n	8010586 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801053e:	693b      	ldr	r3, [r7, #16]
 8010540:	781b      	ldrb	r3, [r3, #0]
 8010542:	2b01      	cmp	r3, #1
 8010544:	d10f      	bne.n	8010566 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8010546:	693b      	ldr	r3, [r7, #16]
 8010548:	785b      	ldrb	r3, [r3, #1]
 801054a:	2b00      	cmp	r3, #0
 801054c:	d11b      	bne.n	8010586 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801054e:	693b      	ldr	r3, [r7, #16]
 8010550:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8010552:	2b5e      	cmp	r3, #94	; 0x5e
 8010554:	d117      	bne.n	8010586 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	7b5b      	ldrb	r3, [r3, #13]
 801055a:	f043 0310 	orr.w	r3, r3, #16
 801055e:	b2da      	uxtb	r2, r3
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	735a      	strb	r2, [r3, #13]
 8010564:	e00f      	b.n	8010586 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8010566:	693b      	ldr	r3, [r7, #16]
 8010568:	2206      	movs	r2, #6
 801056a:	4928      	ldr	r1, [pc, #160]	; (801060c <ethernet_input+0x118>)
 801056c:	4618      	mov	r0, r3
 801056e:	f000 f8bb 	bl	80106e8 <memcmp>
 8010572:	4603      	mov	r3, r0
 8010574:	2b00      	cmp	r3, #0
 8010576:	d106      	bne.n	8010586 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	7b5b      	ldrb	r3, [r3, #13]
 801057c:	f043 0308 	orr.w	r3, r3, #8
 8010580:	b2da      	uxtb	r2, r3
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8010586:	89fb      	ldrh	r3, [r7, #14]
 8010588:	2b08      	cmp	r3, #8
 801058a:	d003      	beq.n	8010594 <ethernet_input+0xa0>
 801058c:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8010590:	d014      	beq.n	80105bc <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8010592:	e032      	b.n	80105fa <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8010594:	683b      	ldr	r3, [r7, #0]
 8010596:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801059a:	f003 0308 	and.w	r3, r3, #8
 801059e:	2b00      	cmp	r3, #0
 80105a0:	d024      	beq.n	80105ec <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80105a2:	8afb      	ldrh	r3, [r7, #22]
 80105a4:	4619      	mov	r1, r3
 80105a6:	6878      	ldr	r0, [r7, #4]
 80105a8:	f7f5 fc96 	bl	8005ed8 <pbuf_remove_header>
 80105ac:	4603      	mov	r3, r0
 80105ae:	2b00      	cmp	r3, #0
 80105b0:	d11e      	bne.n	80105f0 <ethernet_input+0xfc>
        ip4_input(p, netif);
 80105b2:	6839      	ldr	r1, [r7, #0]
 80105b4:	6878      	ldr	r0, [r7, #4]
 80105b6:	f7fe ff03 	bl	800f3c0 <ip4_input>
      break;
 80105ba:	e013      	b.n	80105e4 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80105bc:	683b      	ldr	r3, [r7, #0]
 80105be:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80105c2:	f003 0308 	and.w	r3, r3, #8
 80105c6:	2b00      	cmp	r3, #0
 80105c8:	d014      	beq.n	80105f4 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80105ca:	8afb      	ldrh	r3, [r7, #22]
 80105cc:	4619      	mov	r1, r3
 80105ce:	6878      	ldr	r0, [r7, #4]
 80105d0:	f7f5 fc82 	bl	8005ed8 <pbuf_remove_header>
 80105d4:	4603      	mov	r3, r0
 80105d6:	2b00      	cmp	r3, #0
 80105d8:	d10e      	bne.n	80105f8 <ethernet_input+0x104>
        etharp_input(p, netif);
 80105da:	6839      	ldr	r1, [r7, #0]
 80105dc:	6878      	ldr	r0, [r7, #4]
 80105de:	f7fe f879 	bl	800e6d4 <etharp_input>
      break;
 80105e2:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 80105e4:	2300      	movs	r3, #0
 80105e6:	e00c      	b.n	8010602 <ethernet_input+0x10e>
    goto free_and_return;
 80105e8:	bf00      	nop
 80105ea:	e006      	b.n	80105fa <ethernet_input+0x106>
        goto free_and_return;
 80105ec:	bf00      	nop
 80105ee:	e004      	b.n	80105fa <ethernet_input+0x106>
        goto free_and_return;
 80105f0:	bf00      	nop
 80105f2:	e002      	b.n	80105fa <ethernet_input+0x106>
        goto free_and_return;
 80105f4:	bf00      	nop
 80105f6:	e000      	b.n	80105fa <ethernet_input+0x106>
        goto free_and_return;
 80105f8:	bf00      	nop

free_and_return:
  pbuf_free(p);
 80105fa:	6878      	ldr	r0, [r7, #4]
 80105fc:	f7f5 fcf2 	bl	8005fe4 <pbuf_free>
  return ERR_OK;
 8010600:	2300      	movs	r3, #0
}
 8010602:	4618      	mov	r0, r3
 8010604:	3718      	adds	r7, #24
 8010606:	46bd      	mov	sp, r7
 8010608:	bd80      	pop	{r7, pc}
 801060a:	bf00      	nop
 801060c:	08014678 	.word	0x08014678

08010610 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8010610:	b580      	push	{r7, lr}
 8010612:	b086      	sub	sp, #24
 8010614:	af00      	add	r7, sp, #0
 8010616:	60f8      	str	r0, [r7, #12]
 8010618:	60b9      	str	r1, [r7, #8]
 801061a:	607a      	str	r2, [r7, #4]
 801061c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801061e:	8c3b      	ldrh	r3, [r7, #32]
 8010620:	4618      	mov	r0, r3
 8010622:	f7f4 f8dd 	bl	80047e0 <lwip_htons>
 8010626:	4603      	mov	r3, r0
 8010628:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801062a:	210e      	movs	r1, #14
 801062c:	68b8      	ldr	r0, [r7, #8]
 801062e:	f7f5 fc43 	bl	8005eb8 <pbuf_add_header>
 8010632:	4603      	mov	r3, r0
 8010634:	2b00      	cmp	r3, #0
 8010636:	d125      	bne.n	8010684 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8010638:	68bb      	ldr	r3, [r7, #8]
 801063a:	685b      	ldr	r3, [r3, #4]
 801063c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801063e:	693b      	ldr	r3, [r7, #16]
 8010640:	8afa      	ldrh	r2, [r7, #22]
 8010642:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8010644:	693b      	ldr	r3, [r7, #16]
 8010646:	2206      	movs	r2, #6
 8010648:	6839      	ldr	r1, [r7, #0]
 801064a:	4618      	mov	r0, r3
 801064c:	f000 f85c 	bl	8010708 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8010650:	693b      	ldr	r3, [r7, #16]
 8010652:	3306      	adds	r3, #6
 8010654:	2206      	movs	r2, #6
 8010656:	6879      	ldr	r1, [r7, #4]
 8010658:	4618      	mov	r0, r3
 801065a:	f000 f855 	bl	8010708 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801065e:	68fb      	ldr	r3, [r7, #12]
 8010660:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010664:	2b06      	cmp	r3, #6
 8010666:	d006      	beq.n	8010676 <ethernet_output+0x66>
 8010668:	4b0a      	ldr	r3, [pc, #40]	; (8010694 <ethernet_output+0x84>)
 801066a:	f44f 7299 	mov.w	r2, #306	; 0x132
 801066e:	490a      	ldr	r1, [pc, #40]	; (8010698 <ethernet_output+0x88>)
 8010670:	480a      	ldr	r0, [pc, #40]	; (801069c <ethernet_output+0x8c>)
 8010672:	f000 f85f 	bl	8010734 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8010676:	68fb      	ldr	r3, [r7, #12]
 8010678:	699b      	ldr	r3, [r3, #24]
 801067a:	68b9      	ldr	r1, [r7, #8]
 801067c:	68f8      	ldr	r0, [r7, #12]
 801067e:	4798      	blx	r3
 8010680:	4603      	mov	r3, r0
 8010682:	e002      	b.n	801068a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8010684:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8010686:	f06f 0301 	mvn.w	r3, #1
}
 801068a:	4618      	mov	r0, r3
 801068c:	3718      	adds	r7, #24
 801068e:	46bd      	mov	sp, r7
 8010690:	bd80      	pop	{r7, pc}
 8010692:	bf00      	nop
 8010694:	080144d8 	.word	0x080144d8
 8010698:	08014510 	.word	0x08014510
 801069c:	08014544 	.word	0x08014544

080106a0 <__libc_init_array>:
 80106a0:	b570      	push	{r4, r5, r6, lr}
 80106a2:	4d0d      	ldr	r5, [pc, #52]	; (80106d8 <__libc_init_array+0x38>)
 80106a4:	4c0d      	ldr	r4, [pc, #52]	; (80106dc <__libc_init_array+0x3c>)
 80106a6:	1b64      	subs	r4, r4, r5
 80106a8:	10a4      	asrs	r4, r4, #2
 80106aa:	2600      	movs	r6, #0
 80106ac:	42a6      	cmp	r6, r4
 80106ae:	d109      	bne.n	80106c4 <__libc_init_array+0x24>
 80106b0:	4d0b      	ldr	r5, [pc, #44]	; (80106e0 <__libc_init_array+0x40>)
 80106b2:	4c0c      	ldr	r4, [pc, #48]	; (80106e4 <__libc_init_array+0x44>)
 80106b4:	f001 f88e 	bl	80117d4 <_init>
 80106b8:	1b64      	subs	r4, r4, r5
 80106ba:	10a4      	asrs	r4, r4, #2
 80106bc:	2600      	movs	r6, #0
 80106be:	42a6      	cmp	r6, r4
 80106c0:	d105      	bne.n	80106ce <__libc_init_array+0x2e>
 80106c2:	bd70      	pop	{r4, r5, r6, pc}
 80106c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80106c8:	4798      	blx	r3
 80106ca:	3601      	adds	r6, #1
 80106cc:	e7ee      	b.n	80106ac <__libc_init_array+0xc>
 80106ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80106d2:	4798      	blx	r3
 80106d4:	3601      	adds	r6, #1
 80106d6:	e7f2      	b.n	80106be <__libc_init_array+0x1e>
 80106d8:	080147d8 	.word	0x080147d8
 80106dc:	080147d8 	.word	0x080147d8
 80106e0:	080147d8 	.word	0x080147d8
 80106e4:	080147dc 	.word	0x080147dc

080106e8 <memcmp>:
 80106e8:	b510      	push	{r4, lr}
 80106ea:	3901      	subs	r1, #1
 80106ec:	4402      	add	r2, r0
 80106ee:	4290      	cmp	r0, r2
 80106f0:	d101      	bne.n	80106f6 <memcmp+0xe>
 80106f2:	2000      	movs	r0, #0
 80106f4:	e005      	b.n	8010702 <memcmp+0x1a>
 80106f6:	7803      	ldrb	r3, [r0, #0]
 80106f8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80106fc:	42a3      	cmp	r3, r4
 80106fe:	d001      	beq.n	8010704 <memcmp+0x1c>
 8010700:	1b18      	subs	r0, r3, r4
 8010702:	bd10      	pop	{r4, pc}
 8010704:	3001      	adds	r0, #1
 8010706:	e7f2      	b.n	80106ee <memcmp+0x6>

08010708 <memcpy>:
 8010708:	440a      	add	r2, r1
 801070a:	4291      	cmp	r1, r2
 801070c:	f100 33ff 	add.w	r3, r0, #4294967295
 8010710:	d100      	bne.n	8010714 <memcpy+0xc>
 8010712:	4770      	bx	lr
 8010714:	b510      	push	{r4, lr}
 8010716:	f811 4b01 	ldrb.w	r4, [r1], #1
 801071a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801071e:	4291      	cmp	r1, r2
 8010720:	d1f9      	bne.n	8010716 <memcpy+0xe>
 8010722:	bd10      	pop	{r4, pc}

08010724 <memset>:
 8010724:	4402      	add	r2, r0
 8010726:	4603      	mov	r3, r0
 8010728:	4293      	cmp	r3, r2
 801072a:	d100      	bne.n	801072e <memset+0xa>
 801072c:	4770      	bx	lr
 801072e:	f803 1b01 	strb.w	r1, [r3], #1
 8010732:	e7f9      	b.n	8010728 <memset+0x4>

08010734 <iprintf>:
 8010734:	b40f      	push	{r0, r1, r2, r3}
 8010736:	4b0a      	ldr	r3, [pc, #40]	; (8010760 <iprintf+0x2c>)
 8010738:	b513      	push	{r0, r1, r4, lr}
 801073a:	681c      	ldr	r4, [r3, #0]
 801073c:	b124      	cbz	r4, 8010748 <iprintf+0x14>
 801073e:	69a3      	ldr	r3, [r4, #24]
 8010740:	b913      	cbnz	r3, 8010748 <iprintf+0x14>
 8010742:	4620      	mov	r0, r4
 8010744:	f000 f8c2 	bl	80108cc <__sinit>
 8010748:	ab05      	add	r3, sp, #20
 801074a:	9a04      	ldr	r2, [sp, #16]
 801074c:	68a1      	ldr	r1, [r4, #8]
 801074e:	9301      	str	r3, [sp, #4]
 8010750:	4620      	mov	r0, r4
 8010752:	f000 fa7f 	bl	8010c54 <_vfiprintf_r>
 8010756:	b002      	add	sp, #8
 8010758:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801075c:	b004      	add	sp, #16
 801075e:	4770      	bx	lr
 8010760:	20000030 	.word	0x20000030

08010764 <rand>:
 8010764:	4b16      	ldr	r3, [pc, #88]	; (80107c0 <rand+0x5c>)
 8010766:	b510      	push	{r4, lr}
 8010768:	681c      	ldr	r4, [r3, #0]
 801076a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801076c:	b9b3      	cbnz	r3, 801079c <rand+0x38>
 801076e:	2018      	movs	r0, #24
 8010770:	f000 f95e 	bl	8010a30 <malloc>
 8010774:	63a0      	str	r0, [r4, #56]	; 0x38
 8010776:	b928      	cbnz	r0, 8010784 <rand+0x20>
 8010778:	4602      	mov	r2, r0
 801077a:	4b12      	ldr	r3, [pc, #72]	; (80107c4 <rand+0x60>)
 801077c:	4812      	ldr	r0, [pc, #72]	; (80107c8 <rand+0x64>)
 801077e:	214e      	movs	r1, #78	; 0x4e
 8010780:	f000 f82e 	bl	80107e0 <__assert_func>
 8010784:	4a11      	ldr	r2, [pc, #68]	; (80107cc <rand+0x68>)
 8010786:	4b12      	ldr	r3, [pc, #72]	; (80107d0 <rand+0x6c>)
 8010788:	e9c0 2300 	strd	r2, r3, [r0]
 801078c:	4b11      	ldr	r3, [pc, #68]	; (80107d4 <rand+0x70>)
 801078e:	6083      	str	r3, [r0, #8]
 8010790:	230b      	movs	r3, #11
 8010792:	8183      	strh	r3, [r0, #12]
 8010794:	2201      	movs	r2, #1
 8010796:	2300      	movs	r3, #0
 8010798:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801079c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 801079e:	4a0e      	ldr	r2, [pc, #56]	; (80107d8 <rand+0x74>)
 80107a0:	6920      	ldr	r0, [r4, #16]
 80107a2:	6963      	ldr	r3, [r4, #20]
 80107a4:	490d      	ldr	r1, [pc, #52]	; (80107dc <rand+0x78>)
 80107a6:	4342      	muls	r2, r0
 80107a8:	fb01 2203 	mla	r2, r1, r3, r2
 80107ac:	fba0 0101 	umull	r0, r1, r0, r1
 80107b0:	1c43      	adds	r3, r0, #1
 80107b2:	eb42 0001 	adc.w	r0, r2, r1
 80107b6:	e9c4 3004 	strd	r3, r0, [r4, #16]
 80107ba:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80107be:	bd10      	pop	{r4, pc}
 80107c0:	20000030 	.word	0x20000030
 80107c4:	0801468c 	.word	0x0801468c
 80107c8:	080146a3 	.word	0x080146a3
 80107cc:	abcd330e 	.word	0xabcd330e
 80107d0:	e66d1234 	.word	0xe66d1234
 80107d4:	0005deec 	.word	0x0005deec
 80107d8:	5851f42d 	.word	0x5851f42d
 80107dc:	4c957f2d 	.word	0x4c957f2d

080107e0 <__assert_func>:
 80107e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80107e2:	4614      	mov	r4, r2
 80107e4:	461a      	mov	r2, r3
 80107e6:	4b09      	ldr	r3, [pc, #36]	; (801080c <__assert_func+0x2c>)
 80107e8:	681b      	ldr	r3, [r3, #0]
 80107ea:	4605      	mov	r5, r0
 80107ec:	68d8      	ldr	r0, [r3, #12]
 80107ee:	b14c      	cbz	r4, 8010804 <__assert_func+0x24>
 80107f0:	4b07      	ldr	r3, [pc, #28]	; (8010810 <__assert_func+0x30>)
 80107f2:	9100      	str	r1, [sp, #0]
 80107f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80107f8:	4906      	ldr	r1, [pc, #24]	; (8010814 <__assert_func+0x34>)
 80107fa:	462b      	mov	r3, r5
 80107fc:	f000 f8e4 	bl	80109c8 <fiprintf>
 8010800:	f000 fe12 	bl	8011428 <abort>
 8010804:	4b04      	ldr	r3, [pc, #16]	; (8010818 <__assert_func+0x38>)
 8010806:	461c      	mov	r4, r3
 8010808:	e7f3      	b.n	80107f2 <__assert_func+0x12>
 801080a:	bf00      	nop
 801080c:	20000030 	.word	0x20000030
 8010810:	080146fe 	.word	0x080146fe
 8010814:	0801470b 	.word	0x0801470b
 8010818:	08014739 	.word	0x08014739

0801081c <std>:
 801081c:	2300      	movs	r3, #0
 801081e:	b510      	push	{r4, lr}
 8010820:	4604      	mov	r4, r0
 8010822:	e9c0 3300 	strd	r3, r3, [r0]
 8010826:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801082a:	6083      	str	r3, [r0, #8]
 801082c:	8181      	strh	r1, [r0, #12]
 801082e:	6643      	str	r3, [r0, #100]	; 0x64
 8010830:	81c2      	strh	r2, [r0, #14]
 8010832:	6183      	str	r3, [r0, #24]
 8010834:	4619      	mov	r1, r3
 8010836:	2208      	movs	r2, #8
 8010838:	305c      	adds	r0, #92	; 0x5c
 801083a:	f7ff ff73 	bl	8010724 <memset>
 801083e:	4b05      	ldr	r3, [pc, #20]	; (8010854 <std+0x38>)
 8010840:	6263      	str	r3, [r4, #36]	; 0x24
 8010842:	4b05      	ldr	r3, [pc, #20]	; (8010858 <std+0x3c>)
 8010844:	62a3      	str	r3, [r4, #40]	; 0x28
 8010846:	4b05      	ldr	r3, [pc, #20]	; (801085c <std+0x40>)
 8010848:	62e3      	str	r3, [r4, #44]	; 0x2c
 801084a:	4b05      	ldr	r3, [pc, #20]	; (8010860 <std+0x44>)
 801084c:	6224      	str	r4, [r4, #32]
 801084e:	6323      	str	r3, [r4, #48]	; 0x30
 8010850:	bd10      	pop	{r4, pc}
 8010852:	bf00      	nop
 8010854:	080111fd 	.word	0x080111fd
 8010858:	0801121f 	.word	0x0801121f
 801085c:	08011257 	.word	0x08011257
 8010860:	0801127b 	.word	0x0801127b

08010864 <_cleanup_r>:
 8010864:	4901      	ldr	r1, [pc, #4]	; (801086c <_cleanup_r+0x8>)
 8010866:	f000 b8c1 	b.w	80109ec <_fwalk_reent>
 801086a:	bf00      	nop
 801086c:	08011565 	.word	0x08011565

08010870 <__sfmoreglue>:
 8010870:	b570      	push	{r4, r5, r6, lr}
 8010872:	2268      	movs	r2, #104	; 0x68
 8010874:	1e4d      	subs	r5, r1, #1
 8010876:	4355      	muls	r5, r2
 8010878:	460e      	mov	r6, r1
 801087a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801087e:	f000 f94b 	bl	8010b18 <_malloc_r>
 8010882:	4604      	mov	r4, r0
 8010884:	b140      	cbz	r0, 8010898 <__sfmoreglue+0x28>
 8010886:	2100      	movs	r1, #0
 8010888:	e9c0 1600 	strd	r1, r6, [r0]
 801088c:	300c      	adds	r0, #12
 801088e:	60a0      	str	r0, [r4, #8]
 8010890:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010894:	f7ff ff46 	bl	8010724 <memset>
 8010898:	4620      	mov	r0, r4
 801089a:	bd70      	pop	{r4, r5, r6, pc}

0801089c <__sfp_lock_acquire>:
 801089c:	4801      	ldr	r0, [pc, #4]	; (80108a4 <__sfp_lock_acquire+0x8>)
 801089e:	f000 b8c5 	b.w	8010a2c <__retarget_lock_acquire_recursive>
 80108a2:	bf00      	nop
 80108a4:	20007de9 	.word	0x20007de9

080108a8 <__sfp_lock_release>:
 80108a8:	4801      	ldr	r0, [pc, #4]	; (80108b0 <__sfp_lock_release+0x8>)
 80108aa:	f000 b8c0 	b.w	8010a2e <__retarget_lock_release_recursive>
 80108ae:	bf00      	nop
 80108b0:	20007de9 	.word	0x20007de9

080108b4 <__sinit_lock_acquire>:
 80108b4:	4801      	ldr	r0, [pc, #4]	; (80108bc <__sinit_lock_acquire+0x8>)
 80108b6:	f000 b8b9 	b.w	8010a2c <__retarget_lock_acquire_recursive>
 80108ba:	bf00      	nop
 80108bc:	20007dea 	.word	0x20007dea

080108c0 <__sinit_lock_release>:
 80108c0:	4801      	ldr	r0, [pc, #4]	; (80108c8 <__sinit_lock_release+0x8>)
 80108c2:	f000 b8b4 	b.w	8010a2e <__retarget_lock_release_recursive>
 80108c6:	bf00      	nop
 80108c8:	20007dea 	.word	0x20007dea

080108cc <__sinit>:
 80108cc:	b510      	push	{r4, lr}
 80108ce:	4604      	mov	r4, r0
 80108d0:	f7ff fff0 	bl	80108b4 <__sinit_lock_acquire>
 80108d4:	69a3      	ldr	r3, [r4, #24]
 80108d6:	b11b      	cbz	r3, 80108e0 <__sinit+0x14>
 80108d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80108dc:	f7ff bff0 	b.w	80108c0 <__sinit_lock_release>
 80108e0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80108e4:	6523      	str	r3, [r4, #80]	; 0x50
 80108e6:	4b13      	ldr	r3, [pc, #76]	; (8010934 <__sinit+0x68>)
 80108e8:	4a13      	ldr	r2, [pc, #76]	; (8010938 <__sinit+0x6c>)
 80108ea:	681b      	ldr	r3, [r3, #0]
 80108ec:	62a2      	str	r2, [r4, #40]	; 0x28
 80108ee:	42a3      	cmp	r3, r4
 80108f0:	bf04      	itt	eq
 80108f2:	2301      	moveq	r3, #1
 80108f4:	61a3      	streq	r3, [r4, #24]
 80108f6:	4620      	mov	r0, r4
 80108f8:	f000 f820 	bl	801093c <__sfp>
 80108fc:	6060      	str	r0, [r4, #4]
 80108fe:	4620      	mov	r0, r4
 8010900:	f000 f81c 	bl	801093c <__sfp>
 8010904:	60a0      	str	r0, [r4, #8]
 8010906:	4620      	mov	r0, r4
 8010908:	f000 f818 	bl	801093c <__sfp>
 801090c:	2200      	movs	r2, #0
 801090e:	60e0      	str	r0, [r4, #12]
 8010910:	2104      	movs	r1, #4
 8010912:	6860      	ldr	r0, [r4, #4]
 8010914:	f7ff ff82 	bl	801081c <std>
 8010918:	68a0      	ldr	r0, [r4, #8]
 801091a:	2201      	movs	r2, #1
 801091c:	2109      	movs	r1, #9
 801091e:	f7ff ff7d 	bl	801081c <std>
 8010922:	68e0      	ldr	r0, [r4, #12]
 8010924:	2202      	movs	r2, #2
 8010926:	2112      	movs	r1, #18
 8010928:	f7ff ff78 	bl	801081c <std>
 801092c:	2301      	movs	r3, #1
 801092e:	61a3      	str	r3, [r4, #24]
 8010930:	e7d2      	b.n	80108d8 <__sinit+0xc>
 8010932:	bf00      	nop
 8010934:	08014688 	.word	0x08014688
 8010938:	08010865 	.word	0x08010865

0801093c <__sfp>:
 801093c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801093e:	4607      	mov	r7, r0
 8010940:	f7ff ffac 	bl	801089c <__sfp_lock_acquire>
 8010944:	4b1e      	ldr	r3, [pc, #120]	; (80109c0 <__sfp+0x84>)
 8010946:	681e      	ldr	r6, [r3, #0]
 8010948:	69b3      	ldr	r3, [r6, #24]
 801094a:	b913      	cbnz	r3, 8010952 <__sfp+0x16>
 801094c:	4630      	mov	r0, r6
 801094e:	f7ff ffbd 	bl	80108cc <__sinit>
 8010952:	3648      	adds	r6, #72	; 0x48
 8010954:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010958:	3b01      	subs	r3, #1
 801095a:	d503      	bpl.n	8010964 <__sfp+0x28>
 801095c:	6833      	ldr	r3, [r6, #0]
 801095e:	b30b      	cbz	r3, 80109a4 <__sfp+0x68>
 8010960:	6836      	ldr	r6, [r6, #0]
 8010962:	e7f7      	b.n	8010954 <__sfp+0x18>
 8010964:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010968:	b9d5      	cbnz	r5, 80109a0 <__sfp+0x64>
 801096a:	4b16      	ldr	r3, [pc, #88]	; (80109c4 <__sfp+0x88>)
 801096c:	60e3      	str	r3, [r4, #12]
 801096e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010972:	6665      	str	r5, [r4, #100]	; 0x64
 8010974:	f000 f859 	bl	8010a2a <__retarget_lock_init_recursive>
 8010978:	f7ff ff96 	bl	80108a8 <__sfp_lock_release>
 801097c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010980:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010984:	6025      	str	r5, [r4, #0]
 8010986:	61a5      	str	r5, [r4, #24]
 8010988:	2208      	movs	r2, #8
 801098a:	4629      	mov	r1, r5
 801098c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010990:	f7ff fec8 	bl	8010724 <memset>
 8010994:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010998:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801099c:	4620      	mov	r0, r4
 801099e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80109a0:	3468      	adds	r4, #104	; 0x68
 80109a2:	e7d9      	b.n	8010958 <__sfp+0x1c>
 80109a4:	2104      	movs	r1, #4
 80109a6:	4638      	mov	r0, r7
 80109a8:	f7ff ff62 	bl	8010870 <__sfmoreglue>
 80109ac:	4604      	mov	r4, r0
 80109ae:	6030      	str	r0, [r6, #0]
 80109b0:	2800      	cmp	r0, #0
 80109b2:	d1d5      	bne.n	8010960 <__sfp+0x24>
 80109b4:	f7ff ff78 	bl	80108a8 <__sfp_lock_release>
 80109b8:	230c      	movs	r3, #12
 80109ba:	603b      	str	r3, [r7, #0]
 80109bc:	e7ee      	b.n	801099c <__sfp+0x60>
 80109be:	bf00      	nop
 80109c0:	08014688 	.word	0x08014688
 80109c4:	ffff0001 	.word	0xffff0001

080109c8 <fiprintf>:
 80109c8:	b40e      	push	{r1, r2, r3}
 80109ca:	b503      	push	{r0, r1, lr}
 80109cc:	4601      	mov	r1, r0
 80109ce:	ab03      	add	r3, sp, #12
 80109d0:	4805      	ldr	r0, [pc, #20]	; (80109e8 <fiprintf+0x20>)
 80109d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80109d6:	6800      	ldr	r0, [r0, #0]
 80109d8:	9301      	str	r3, [sp, #4]
 80109da:	f000 f93b 	bl	8010c54 <_vfiprintf_r>
 80109de:	b002      	add	sp, #8
 80109e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80109e4:	b003      	add	sp, #12
 80109e6:	4770      	bx	lr
 80109e8:	20000030 	.word	0x20000030

080109ec <_fwalk_reent>:
 80109ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80109f0:	4606      	mov	r6, r0
 80109f2:	4688      	mov	r8, r1
 80109f4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80109f8:	2700      	movs	r7, #0
 80109fa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80109fe:	f1b9 0901 	subs.w	r9, r9, #1
 8010a02:	d505      	bpl.n	8010a10 <_fwalk_reent+0x24>
 8010a04:	6824      	ldr	r4, [r4, #0]
 8010a06:	2c00      	cmp	r4, #0
 8010a08:	d1f7      	bne.n	80109fa <_fwalk_reent+0xe>
 8010a0a:	4638      	mov	r0, r7
 8010a0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010a10:	89ab      	ldrh	r3, [r5, #12]
 8010a12:	2b01      	cmp	r3, #1
 8010a14:	d907      	bls.n	8010a26 <_fwalk_reent+0x3a>
 8010a16:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010a1a:	3301      	adds	r3, #1
 8010a1c:	d003      	beq.n	8010a26 <_fwalk_reent+0x3a>
 8010a1e:	4629      	mov	r1, r5
 8010a20:	4630      	mov	r0, r6
 8010a22:	47c0      	blx	r8
 8010a24:	4307      	orrs	r7, r0
 8010a26:	3568      	adds	r5, #104	; 0x68
 8010a28:	e7e9      	b.n	80109fe <_fwalk_reent+0x12>

08010a2a <__retarget_lock_init_recursive>:
 8010a2a:	4770      	bx	lr

08010a2c <__retarget_lock_acquire_recursive>:
 8010a2c:	4770      	bx	lr

08010a2e <__retarget_lock_release_recursive>:
 8010a2e:	4770      	bx	lr

08010a30 <malloc>:
 8010a30:	4b02      	ldr	r3, [pc, #8]	; (8010a3c <malloc+0xc>)
 8010a32:	4601      	mov	r1, r0
 8010a34:	6818      	ldr	r0, [r3, #0]
 8010a36:	f000 b86f 	b.w	8010b18 <_malloc_r>
 8010a3a:	bf00      	nop
 8010a3c:	20000030 	.word	0x20000030

08010a40 <_free_r>:
 8010a40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010a42:	2900      	cmp	r1, #0
 8010a44:	d044      	beq.n	8010ad0 <_free_r+0x90>
 8010a46:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010a4a:	9001      	str	r0, [sp, #4]
 8010a4c:	2b00      	cmp	r3, #0
 8010a4e:	f1a1 0404 	sub.w	r4, r1, #4
 8010a52:	bfb8      	it	lt
 8010a54:	18e4      	addlt	r4, r4, r3
 8010a56:	f000 fe39 	bl	80116cc <__malloc_lock>
 8010a5a:	4a1e      	ldr	r2, [pc, #120]	; (8010ad4 <_free_r+0x94>)
 8010a5c:	9801      	ldr	r0, [sp, #4]
 8010a5e:	6813      	ldr	r3, [r2, #0]
 8010a60:	b933      	cbnz	r3, 8010a70 <_free_r+0x30>
 8010a62:	6063      	str	r3, [r4, #4]
 8010a64:	6014      	str	r4, [r2, #0]
 8010a66:	b003      	add	sp, #12
 8010a68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010a6c:	f000 be34 	b.w	80116d8 <__malloc_unlock>
 8010a70:	42a3      	cmp	r3, r4
 8010a72:	d908      	bls.n	8010a86 <_free_r+0x46>
 8010a74:	6825      	ldr	r5, [r4, #0]
 8010a76:	1961      	adds	r1, r4, r5
 8010a78:	428b      	cmp	r3, r1
 8010a7a:	bf01      	itttt	eq
 8010a7c:	6819      	ldreq	r1, [r3, #0]
 8010a7e:	685b      	ldreq	r3, [r3, #4]
 8010a80:	1949      	addeq	r1, r1, r5
 8010a82:	6021      	streq	r1, [r4, #0]
 8010a84:	e7ed      	b.n	8010a62 <_free_r+0x22>
 8010a86:	461a      	mov	r2, r3
 8010a88:	685b      	ldr	r3, [r3, #4]
 8010a8a:	b10b      	cbz	r3, 8010a90 <_free_r+0x50>
 8010a8c:	42a3      	cmp	r3, r4
 8010a8e:	d9fa      	bls.n	8010a86 <_free_r+0x46>
 8010a90:	6811      	ldr	r1, [r2, #0]
 8010a92:	1855      	adds	r5, r2, r1
 8010a94:	42a5      	cmp	r5, r4
 8010a96:	d10b      	bne.n	8010ab0 <_free_r+0x70>
 8010a98:	6824      	ldr	r4, [r4, #0]
 8010a9a:	4421      	add	r1, r4
 8010a9c:	1854      	adds	r4, r2, r1
 8010a9e:	42a3      	cmp	r3, r4
 8010aa0:	6011      	str	r1, [r2, #0]
 8010aa2:	d1e0      	bne.n	8010a66 <_free_r+0x26>
 8010aa4:	681c      	ldr	r4, [r3, #0]
 8010aa6:	685b      	ldr	r3, [r3, #4]
 8010aa8:	6053      	str	r3, [r2, #4]
 8010aaa:	4421      	add	r1, r4
 8010aac:	6011      	str	r1, [r2, #0]
 8010aae:	e7da      	b.n	8010a66 <_free_r+0x26>
 8010ab0:	d902      	bls.n	8010ab8 <_free_r+0x78>
 8010ab2:	230c      	movs	r3, #12
 8010ab4:	6003      	str	r3, [r0, #0]
 8010ab6:	e7d6      	b.n	8010a66 <_free_r+0x26>
 8010ab8:	6825      	ldr	r5, [r4, #0]
 8010aba:	1961      	adds	r1, r4, r5
 8010abc:	428b      	cmp	r3, r1
 8010abe:	bf04      	itt	eq
 8010ac0:	6819      	ldreq	r1, [r3, #0]
 8010ac2:	685b      	ldreq	r3, [r3, #4]
 8010ac4:	6063      	str	r3, [r4, #4]
 8010ac6:	bf04      	itt	eq
 8010ac8:	1949      	addeq	r1, r1, r5
 8010aca:	6021      	streq	r1, [r4, #0]
 8010acc:	6054      	str	r4, [r2, #4]
 8010ace:	e7ca      	b.n	8010a66 <_free_r+0x26>
 8010ad0:	b003      	add	sp, #12
 8010ad2:	bd30      	pop	{r4, r5, pc}
 8010ad4:	20007dec 	.word	0x20007dec

08010ad8 <sbrk_aligned>:
 8010ad8:	b570      	push	{r4, r5, r6, lr}
 8010ada:	4e0e      	ldr	r6, [pc, #56]	; (8010b14 <sbrk_aligned+0x3c>)
 8010adc:	460c      	mov	r4, r1
 8010ade:	6831      	ldr	r1, [r6, #0]
 8010ae0:	4605      	mov	r5, r0
 8010ae2:	b911      	cbnz	r1, 8010aea <sbrk_aligned+0x12>
 8010ae4:	f000 fb7a 	bl	80111dc <_sbrk_r>
 8010ae8:	6030      	str	r0, [r6, #0]
 8010aea:	4621      	mov	r1, r4
 8010aec:	4628      	mov	r0, r5
 8010aee:	f000 fb75 	bl	80111dc <_sbrk_r>
 8010af2:	1c43      	adds	r3, r0, #1
 8010af4:	d00a      	beq.n	8010b0c <sbrk_aligned+0x34>
 8010af6:	1cc4      	adds	r4, r0, #3
 8010af8:	f024 0403 	bic.w	r4, r4, #3
 8010afc:	42a0      	cmp	r0, r4
 8010afe:	d007      	beq.n	8010b10 <sbrk_aligned+0x38>
 8010b00:	1a21      	subs	r1, r4, r0
 8010b02:	4628      	mov	r0, r5
 8010b04:	f000 fb6a 	bl	80111dc <_sbrk_r>
 8010b08:	3001      	adds	r0, #1
 8010b0a:	d101      	bne.n	8010b10 <sbrk_aligned+0x38>
 8010b0c:	f04f 34ff 	mov.w	r4, #4294967295
 8010b10:	4620      	mov	r0, r4
 8010b12:	bd70      	pop	{r4, r5, r6, pc}
 8010b14:	20007df0 	.word	0x20007df0

08010b18 <_malloc_r>:
 8010b18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b1c:	1ccd      	adds	r5, r1, #3
 8010b1e:	f025 0503 	bic.w	r5, r5, #3
 8010b22:	3508      	adds	r5, #8
 8010b24:	2d0c      	cmp	r5, #12
 8010b26:	bf38      	it	cc
 8010b28:	250c      	movcc	r5, #12
 8010b2a:	2d00      	cmp	r5, #0
 8010b2c:	4607      	mov	r7, r0
 8010b2e:	db01      	blt.n	8010b34 <_malloc_r+0x1c>
 8010b30:	42a9      	cmp	r1, r5
 8010b32:	d905      	bls.n	8010b40 <_malloc_r+0x28>
 8010b34:	230c      	movs	r3, #12
 8010b36:	603b      	str	r3, [r7, #0]
 8010b38:	2600      	movs	r6, #0
 8010b3a:	4630      	mov	r0, r6
 8010b3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b40:	4e2e      	ldr	r6, [pc, #184]	; (8010bfc <_malloc_r+0xe4>)
 8010b42:	f000 fdc3 	bl	80116cc <__malloc_lock>
 8010b46:	6833      	ldr	r3, [r6, #0]
 8010b48:	461c      	mov	r4, r3
 8010b4a:	bb34      	cbnz	r4, 8010b9a <_malloc_r+0x82>
 8010b4c:	4629      	mov	r1, r5
 8010b4e:	4638      	mov	r0, r7
 8010b50:	f7ff ffc2 	bl	8010ad8 <sbrk_aligned>
 8010b54:	1c43      	adds	r3, r0, #1
 8010b56:	4604      	mov	r4, r0
 8010b58:	d14d      	bne.n	8010bf6 <_malloc_r+0xde>
 8010b5a:	6834      	ldr	r4, [r6, #0]
 8010b5c:	4626      	mov	r6, r4
 8010b5e:	2e00      	cmp	r6, #0
 8010b60:	d140      	bne.n	8010be4 <_malloc_r+0xcc>
 8010b62:	6823      	ldr	r3, [r4, #0]
 8010b64:	4631      	mov	r1, r6
 8010b66:	4638      	mov	r0, r7
 8010b68:	eb04 0803 	add.w	r8, r4, r3
 8010b6c:	f000 fb36 	bl	80111dc <_sbrk_r>
 8010b70:	4580      	cmp	r8, r0
 8010b72:	d13a      	bne.n	8010bea <_malloc_r+0xd2>
 8010b74:	6821      	ldr	r1, [r4, #0]
 8010b76:	3503      	adds	r5, #3
 8010b78:	1a6d      	subs	r5, r5, r1
 8010b7a:	f025 0503 	bic.w	r5, r5, #3
 8010b7e:	3508      	adds	r5, #8
 8010b80:	2d0c      	cmp	r5, #12
 8010b82:	bf38      	it	cc
 8010b84:	250c      	movcc	r5, #12
 8010b86:	4629      	mov	r1, r5
 8010b88:	4638      	mov	r0, r7
 8010b8a:	f7ff ffa5 	bl	8010ad8 <sbrk_aligned>
 8010b8e:	3001      	adds	r0, #1
 8010b90:	d02b      	beq.n	8010bea <_malloc_r+0xd2>
 8010b92:	6823      	ldr	r3, [r4, #0]
 8010b94:	442b      	add	r3, r5
 8010b96:	6023      	str	r3, [r4, #0]
 8010b98:	e00e      	b.n	8010bb8 <_malloc_r+0xa0>
 8010b9a:	6822      	ldr	r2, [r4, #0]
 8010b9c:	1b52      	subs	r2, r2, r5
 8010b9e:	d41e      	bmi.n	8010bde <_malloc_r+0xc6>
 8010ba0:	2a0b      	cmp	r2, #11
 8010ba2:	d916      	bls.n	8010bd2 <_malloc_r+0xba>
 8010ba4:	1961      	adds	r1, r4, r5
 8010ba6:	42a3      	cmp	r3, r4
 8010ba8:	6025      	str	r5, [r4, #0]
 8010baa:	bf18      	it	ne
 8010bac:	6059      	strne	r1, [r3, #4]
 8010bae:	6863      	ldr	r3, [r4, #4]
 8010bb0:	bf08      	it	eq
 8010bb2:	6031      	streq	r1, [r6, #0]
 8010bb4:	5162      	str	r2, [r4, r5]
 8010bb6:	604b      	str	r3, [r1, #4]
 8010bb8:	4638      	mov	r0, r7
 8010bba:	f104 060b 	add.w	r6, r4, #11
 8010bbe:	f000 fd8b 	bl	80116d8 <__malloc_unlock>
 8010bc2:	f026 0607 	bic.w	r6, r6, #7
 8010bc6:	1d23      	adds	r3, r4, #4
 8010bc8:	1af2      	subs	r2, r6, r3
 8010bca:	d0b6      	beq.n	8010b3a <_malloc_r+0x22>
 8010bcc:	1b9b      	subs	r3, r3, r6
 8010bce:	50a3      	str	r3, [r4, r2]
 8010bd0:	e7b3      	b.n	8010b3a <_malloc_r+0x22>
 8010bd2:	6862      	ldr	r2, [r4, #4]
 8010bd4:	42a3      	cmp	r3, r4
 8010bd6:	bf0c      	ite	eq
 8010bd8:	6032      	streq	r2, [r6, #0]
 8010bda:	605a      	strne	r2, [r3, #4]
 8010bdc:	e7ec      	b.n	8010bb8 <_malloc_r+0xa0>
 8010bde:	4623      	mov	r3, r4
 8010be0:	6864      	ldr	r4, [r4, #4]
 8010be2:	e7b2      	b.n	8010b4a <_malloc_r+0x32>
 8010be4:	4634      	mov	r4, r6
 8010be6:	6876      	ldr	r6, [r6, #4]
 8010be8:	e7b9      	b.n	8010b5e <_malloc_r+0x46>
 8010bea:	230c      	movs	r3, #12
 8010bec:	603b      	str	r3, [r7, #0]
 8010bee:	4638      	mov	r0, r7
 8010bf0:	f000 fd72 	bl	80116d8 <__malloc_unlock>
 8010bf4:	e7a1      	b.n	8010b3a <_malloc_r+0x22>
 8010bf6:	6025      	str	r5, [r4, #0]
 8010bf8:	e7de      	b.n	8010bb8 <_malloc_r+0xa0>
 8010bfa:	bf00      	nop
 8010bfc:	20007dec 	.word	0x20007dec

08010c00 <__sfputc_r>:
 8010c00:	6893      	ldr	r3, [r2, #8]
 8010c02:	3b01      	subs	r3, #1
 8010c04:	2b00      	cmp	r3, #0
 8010c06:	b410      	push	{r4}
 8010c08:	6093      	str	r3, [r2, #8]
 8010c0a:	da08      	bge.n	8010c1e <__sfputc_r+0x1e>
 8010c0c:	6994      	ldr	r4, [r2, #24]
 8010c0e:	42a3      	cmp	r3, r4
 8010c10:	db01      	blt.n	8010c16 <__sfputc_r+0x16>
 8010c12:	290a      	cmp	r1, #10
 8010c14:	d103      	bne.n	8010c1e <__sfputc_r+0x1e>
 8010c16:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010c1a:	f000 bb33 	b.w	8011284 <__swbuf_r>
 8010c1e:	6813      	ldr	r3, [r2, #0]
 8010c20:	1c58      	adds	r0, r3, #1
 8010c22:	6010      	str	r0, [r2, #0]
 8010c24:	7019      	strb	r1, [r3, #0]
 8010c26:	4608      	mov	r0, r1
 8010c28:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010c2c:	4770      	bx	lr

08010c2e <__sfputs_r>:
 8010c2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c30:	4606      	mov	r6, r0
 8010c32:	460f      	mov	r7, r1
 8010c34:	4614      	mov	r4, r2
 8010c36:	18d5      	adds	r5, r2, r3
 8010c38:	42ac      	cmp	r4, r5
 8010c3a:	d101      	bne.n	8010c40 <__sfputs_r+0x12>
 8010c3c:	2000      	movs	r0, #0
 8010c3e:	e007      	b.n	8010c50 <__sfputs_r+0x22>
 8010c40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010c44:	463a      	mov	r2, r7
 8010c46:	4630      	mov	r0, r6
 8010c48:	f7ff ffda 	bl	8010c00 <__sfputc_r>
 8010c4c:	1c43      	adds	r3, r0, #1
 8010c4e:	d1f3      	bne.n	8010c38 <__sfputs_r+0xa>
 8010c50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010c54 <_vfiprintf_r>:
 8010c54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c58:	460d      	mov	r5, r1
 8010c5a:	b09d      	sub	sp, #116	; 0x74
 8010c5c:	4614      	mov	r4, r2
 8010c5e:	4698      	mov	r8, r3
 8010c60:	4606      	mov	r6, r0
 8010c62:	b118      	cbz	r0, 8010c6c <_vfiprintf_r+0x18>
 8010c64:	6983      	ldr	r3, [r0, #24]
 8010c66:	b90b      	cbnz	r3, 8010c6c <_vfiprintf_r+0x18>
 8010c68:	f7ff fe30 	bl	80108cc <__sinit>
 8010c6c:	4b89      	ldr	r3, [pc, #548]	; (8010e94 <_vfiprintf_r+0x240>)
 8010c6e:	429d      	cmp	r5, r3
 8010c70:	d11b      	bne.n	8010caa <_vfiprintf_r+0x56>
 8010c72:	6875      	ldr	r5, [r6, #4]
 8010c74:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010c76:	07d9      	lsls	r1, r3, #31
 8010c78:	d405      	bmi.n	8010c86 <_vfiprintf_r+0x32>
 8010c7a:	89ab      	ldrh	r3, [r5, #12]
 8010c7c:	059a      	lsls	r2, r3, #22
 8010c7e:	d402      	bmi.n	8010c86 <_vfiprintf_r+0x32>
 8010c80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010c82:	f7ff fed3 	bl	8010a2c <__retarget_lock_acquire_recursive>
 8010c86:	89ab      	ldrh	r3, [r5, #12]
 8010c88:	071b      	lsls	r3, r3, #28
 8010c8a:	d501      	bpl.n	8010c90 <_vfiprintf_r+0x3c>
 8010c8c:	692b      	ldr	r3, [r5, #16]
 8010c8e:	b9eb      	cbnz	r3, 8010ccc <_vfiprintf_r+0x78>
 8010c90:	4629      	mov	r1, r5
 8010c92:	4630      	mov	r0, r6
 8010c94:	f000 fb5a 	bl	801134c <__swsetup_r>
 8010c98:	b1c0      	cbz	r0, 8010ccc <_vfiprintf_r+0x78>
 8010c9a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010c9c:	07dc      	lsls	r4, r3, #31
 8010c9e:	d50e      	bpl.n	8010cbe <_vfiprintf_r+0x6a>
 8010ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8010ca4:	b01d      	add	sp, #116	; 0x74
 8010ca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010caa:	4b7b      	ldr	r3, [pc, #492]	; (8010e98 <_vfiprintf_r+0x244>)
 8010cac:	429d      	cmp	r5, r3
 8010cae:	d101      	bne.n	8010cb4 <_vfiprintf_r+0x60>
 8010cb0:	68b5      	ldr	r5, [r6, #8]
 8010cb2:	e7df      	b.n	8010c74 <_vfiprintf_r+0x20>
 8010cb4:	4b79      	ldr	r3, [pc, #484]	; (8010e9c <_vfiprintf_r+0x248>)
 8010cb6:	429d      	cmp	r5, r3
 8010cb8:	bf08      	it	eq
 8010cba:	68f5      	ldreq	r5, [r6, #12]
 8010cbc:	e7da      	b.n	8010c74 <_vfiprintf_r+0x20>
 8010cbe:	89ab      	ldrh	r3, [r5, #12]
 8010cc0:	0598      	lsls	r0, r3, #22
 8010cc2:	d4ed      	bmi.n	8010ca0 <_vfiprintf_r+0x4c>
 8010cc4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010cc6:	f7ff feb2 	bl	8010a2e <__retarget_lock_release_recursive>
 8010cca:	e7e9      	b.n	8010ca0 <_vfiprintf_r+0x4c>
 8010ccc:	2300      	movs	r3, #0
 8010cce:	9309      	str	r3, [sp, #36]	; 0x24
 8010cd0:	2320      	movs	r3, #32
 8010cd2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010cd6:	f8cd 800c 	str.w	r8, [sp, #12]
 8010cda:	2330      	movs	r3, #48	; 0x30
 8010cdc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8010ea0 <_vfiprintf_r+0x24c>
 8010ce0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010ce4:	f04f 0901 	mov.w	r9, #1
 8010ce8:	4623      	mov	r3, r4
 8010cea:	469a      	mov	sl, r3
 8010cec:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010cf0:	b10a      	cbz	r2, 8010cf6 <_vfiprintf_r+0xa2>
 8010cf2:	2a25      	cmp	r2, #37	; 0x25
 8010cf4:	d1f9      	bne.n	8010cea <_vfiprintf_r+0x96>
 8010cf6:	ebba 0b04 	subs.w	fp, sl, r4
 8010cfa:	d00b      	beq.n	8010d14 <_vfiprintf_r+0xc0>
 8010cfc:	465b      	mov	r3, fp
 8010cfe:	4622      	mov	r2, r4
 8010d00:	4629      	mov	r1, r5
 8010d02:	4630      	mov	r0, r6
 8010d04:	f7ff ff93 	bl	8010c2e <__sfputs_r>
 8010d08:	3001      	adds	r0, #1
 8010d0a:	f000 80aa 	beq.w	8010e62 <_vfiprintf_r+0x20e>
 8010d0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010d10:	445a      	add	r2, fp
 8010d12:	9209      	str	r2, [sp, #36]	; 0x24
 8010d14:	f89a 3000 	ldrb.w	r3, [sl]
 8010d18:	2b00      	cmp	r3, #0
 8010d1a:	f000 80a2 	beq.w	8010e62 <_vfiprintf_r+0x20e>
 8010d1e:	2300      	movs	r3, #0
 8010d20:	f04f 32ff 	mov.w	r2, #4294967295
 8010d24:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010d28:	f10a 0a01 	add.w	sl, sl, #1
 8010d2c:	9304      	str	r3, [sp, #16]
 8010d2e:	9307      	str	r3, [sp, #28]
 8010d30:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010d34:	931a      	str	r3, [sp, #104]	; 0x68
 8010d36:	4654      	mov	r4, sl
 8010d38:	2205      	movs	r2, #5
 8010d3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010d3e:	4858      	ldr	r0, [pc, #352]	; (8010ea0 <_vfiprintf_r+0x24c>)
 8010d40:	f7ef fa56 	bl	80001f0 <memchr>
 8010d44:	9a04      	ldr	r2, [sp, #16]
 8010d46:	b9d8      	cbnz	r0, 8010d80 <_vfiprintf_r+0x12c>
 8010d48:	06d1      	lsls	r1, r2, #27
 8010d4a:	bf44      	itt	mi
 8010d4c:	2320      	movmi	r3, #32
 8010d4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010d52:	0713      	lsls	r3, r2, #28
 8010d54:	bf44      	itt	mi
 8010d56:	232b      	movmi	r3, #43	; 0x2b
 8010d58:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010d5c:	f89a 3000 	ldrb.w	r3, [sl]
 8010d60:	2b2a      	cmp	r3, #42	; 0x2a
 8010d62:	d015      	beq.n	8010d90 <_vfiprintf_r+0x13c>
 8010d64:	9a07      	ldr	r2, [sp, #28]
 8010d66:	4654      	mov	r4, sl
 8010d68:	2000      	movs	r0, #0
 8010d6a:	f04f 0c0a 	mov.w	ip, #10
 8010d6e:	4621      	mov	r1, r4
 8010d70:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010d74:	3b30      	subs	r3, #48	; 0x30
 8010d76:	2b09      	cmp	r3, #9
 8010d78:	d94e      	bls.n	8010e18 <_vfiprintf_r+0x1c4>
 8010d7a:	b1b0      	cbz	r0, 8010daa <_vfiprintf_r+0x156>
 8010d7c:	9207      	str	r2, [sp, #28]
 8010d7e:	e014      	b.n	8010daa <_vfiprintf_r+0x156>
 8010d80:	eba0 0308 	sub.w	r3, r0, r8
 8010d84:	fa09 f303 	lsl.w	r3, r9, r3
 8010d88:	4313      	orrs	r3, r2
 8010d8a:	9304      	str	r3, [sp, #16]
 8010d8c:	46a2      	mov	sl, r4
 8010d8e:	e7d2      	b.n	8010d36 <_vfiprintf_r+0xe2>
 8010d90:	9b03      	ldr	r3, [sp, #12]
 8010d92:	1d19      	adds	r1, r3, #4
 8010d94:	681b      	ldr	r3, [r3, #0]
 8010d96:	9103      	str	r1, [sp, #12]
 8010d98:	2b00      	cmp	r3, #0
 8010d9a:	bfbb      	ittet	lt
 8010d9c:	425b      	neglt	r3, r3
 8010d9e:	f042 0202 	orrlt.w	r2, r2, #2
 8010da2:	9307      	strge	r3, [sp, #28]
 8010da4:	9307      	strlt	r3, [sp, #28]
 8010da6:	bfb8      	it	lt
 8010da8:	9204      	strlt	r2, [sp, #16]
 8010daa:	7823      	ldrb	r3, [r4, #0]
 8010dac:	2b2e      	cmp	r3, #46	; 0x2e
 8010dae:	d10c      	bne.n	8010dca <_vfiprintf_r+0x176>
 8010db0:	7863      	ldrb	r3, [r4, #1]
 8010db2:	2b2a      	cmp	r3, #42	; 0x2a
 8010db4:	d135      	bne.n	8010e22 <_vfiprintf_r+0x1ce>
 8010db6:	9b03      	ldr	r3, [sp, #12]
 8010db8:	1d1a      	adds	r2, r3, #4
 8010dba:	681b      	ldr	r3, [r3, #0]
 8010dbc:	9203      	str	r2, [sp, #12]
 8010dbe:	2b00      	cmp	r3, #0
 8010dc0:	bfb8      	it	lt
 8010dc2:	f04f 33ff 	movlt.w	r3, #4294967295
 8010dc6:	3402      	adds	r4, #2
 8010dc8:	9305      	str	r3, [sp, #20]
 8010dca:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8010eb0 <_vfiprintf_r+0x25c>
 8010dce:	7821      	ldrb	r1, [r4, #0]
 8010dd0:	2203      	movs	r2, #3
 8010dd2:	4650      	mov	r0, sl
 8010dd4:	f7ef fa0c 	bl	80001f0 <memchr>
 8010dd8:	b140      	cbz	r0, 8010dec <_vfiprintf_r+0x198>
 8010dda:	2340      	movs	r3, #64	; 0x40
 8010ddc:	eba0 000a 	sub.w	r0, r0, sl
 8010de0:	fa03 f000 	lsl.w	r0, r3, r0
 8010de4:	9b04      	ldr	r3, [sp, #16]
 8010de6:	4303      	orrs	r3, r0
 8010de8:	3401      	adds	r4, #1
 8010dea:	9304      	str	r3, [sp, #16]
 8010dec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010df0:	482c      	ldr	r0, [pc, #176]	; (8010ea4 <_vfiprintf_r+0x250>)
 8010df2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010df6:	2206      	movs	r2, #6
 8010df8:	f7ef f9fa 	bl	80001f0 <memchr>
 8010dfc:	2800      	cmp	r0, #0
 8010dfe:	d03f      	beq.n	8010e80 <_vfiprintf_r+0x22c>
 8010e00:	4b29      	ldr	r3, [pc, #164]	; (8010ea8 <_vfiprintf_r+0x254>)
 8010e02:	bb1b      	cbnz	r3, 8010e4c <_vfiprintf_r+0x1f8>
 8010e04:	9b03      	ldr	r3, [sp, #12]
 8010e06:	3307      	adds	r3, #7
 8010e08:	f023 0307 	bic.w	r3, r3, #7
 8010e0c:	3308      	adds	r3, #8
 8010e0e:	9303      	str	r3, [sp, #12]
 8010e10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010e12:	443b      	add	r3, r7
 8010e14:	9309      	str	r3, [sp, #36]	; 0x24
 8010e16:	e767      	b.n	8010ce8 <_vfiprintf_r+0x94>
 8010e18:	fb0c 3202 	mla	r2, ip, r2, r3
 8010e1c:	460c      	mov	r4, r1
 8010e1e:	2001      	movs	r0, #1
 8010e20:	e7a5      	b.n	8010d6e <_vfiprintf_r+0x11a>
 8010e22:	2300      	movs	r3, #0
 8010e24:	3401      	adds	r4, #1
 8010e26:	9305      	str	r3, [sp, #20]
 8010e28:	4619      	mov	r1, r3
 8010e2a:	f04f 0c0a 	mov.w	ip, #10
 8010e2e:	4620      	mov	r0, r4
 8010e30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010e34:	3a30      	subs	r2, #48	; 0x30
 8010e36:	2a09      	cmp	r2, #9
 8010e38:	d903      	bls.n	8010e42 <_vfiprintf_r+0x1ee>
 8010e3a:	2b00      	cmp	r3, #0
 8010e3c:	d0c5      	beq.n	8010dca <_vfiprintf_r+0x176>
 8010e3e:	9105      	str	r1, [sp, #20]
 8010e40:	e7c3      	b.n	8010dca <_vfiprintf_r+0x176>
 8010e42:	fb0c 2101 	mla	r1, ip, r1, r2
 8010e46:	4604      	mov	r4, r0
 8010e48:	2301      	movs	r3, #1
 8010e4a:	e7f0      	b.n	8010e2e <_vfiprintf_r+0x1da>
 8010e4c:	ab03      	add	r3, sp, #12
 8010e4e:	9300      	str	r3, [sp, #0]
 8010e50:	462a      	mov	r2, r5
 8010e52:	4b16      	ldr	r3, [pc, #88]	; (8010eac <_vfiprintf_r+0x258>)
 8010e54:	a904      	add	r1, sp, #16
 8010e56:	4630      	mov	r0, r6
 8010e58:	f3af 8000 	nop.w
 8010e5c:	4607      	mov	r7, r0
 8010e5e:	1c78      	adds	r0, r7, #1
 8010e60:	d1d6      	bne.n	8010e10 <_vfiprintf_r+0x1bc>
 8010e62:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010e64:	07d9      	lsls	r1, r3, #31
 8010e66:	d405      	bmi.n	8010e74 <_vfiprintf_r+0x220>
 8010e68:	89ab      	ldrh	r3, [r5, #12]
 8010e6a:	059a      	lsls	r2, r3, #22
 8010e6c:	d402      	bmi.n	8010e74 <_vfiprintf_r+0x220>
 8010e6e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010e70:	f7ff fddd 	bl	8010a2e <__retarget_lock_release_recursive>
 8010e74:	89ab      	ldrh	r3, [r5, #12]
 8010e76:	065b      	lsls	r3, r3, #25
 8010e78:	f53f af12 	bmi.w	8010ca0 <_vfiprintf_r+0x4c>
 8010e7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010e7e:	e711      	b.n	8010ca4 <_vfiprintf_r+0x50>
 8010e80:	ab03      	add	r3, sp, #12
 8010e82:	9300      	str	r3, [sp, #0]
 8010e84:	462a      	mov	r2, r5
 8010e86:	4b09      	ldr	r3, [pc, #36]	; (8010eac <_vfiprintf_r+0x258>)
 8010e88:	a904      	add	r1, sp, #16
 8010e8a:	4630      	mov	r0, r6
 8010e8c:	f000 f880 	bl	8010f90 <_printf_i>
 8010e90:	e7e4      	b.n	8010e5c <_vfiprintf_r+0x208>
 8010e92:	bf00      	nop
 8010e94:	0801475c 	.word	0x0801475c
 8010e98:	0801477c 	.word	0x0801477c
 8010e9c:	0801473c 	.word	0x0801473c
 8010ea0:	0801479c 	.word	0x0801479c
 8010ea4:	080147a6 	.word	0x080147a6
 8010ea8:	00000000 	.word	0x00000000
 8010eac:	08010c2f 	.word	0x08010c2f
 8010eb0:	080147a2 	.word	0x080147a2

08010eb4 <_printf_common>:
 8010eb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010eb8:	4616      	mov	r6, r2
 8010eba:	4699      	mov	r9, r3
 8010ebc:	688a      	ldr	r2, [r1, #8]
 8010ebe:	690b      	ldr	r3, [r1, #16]
 8010ec0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010ec4:	4293      	cmp	r3, r2
 8010ec6:	bfb8      	it	lt
 8010ec8:	4613      	movlt	r3, r2
 8010eca:	6033      	str	r3, [r6, #0]
 8010ecc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010ed0:	4607      	mov	r7, r0
 8010ed2:	460c      	mov	r4, r1
 8010ed4:	b10a      	cbz	r2, 8010eda <_printf_common+0x26>
 8010ed6:	3301      	adds	r3, #1
 8010ed8:	6033      	str	r3, [r6, #0]
 8010eda:	6823      	ldr	r3, [r4, #0]
 8010edc:	0699      	lsls	r1, r3, #26
 8010ede:	bf42      	ittt	mi
 8010ee0:	6833      	ldrmi	r3, [r6, #0]
 8010ee2:	3302      	addmi	r3, #2
 8010ee4:	6033      	strmi	r3, [r6, #0]
 8010ee6:	6825      	ldr	r5, [r4, #0]
 8010ee8:	f015 0506 	ands.w	r5, r5, #6
 8010eec:	d106      	bne.n	8010efc <_printf_common+0x48>
 8010eee:	f104 0a19 	add.w	sl, r4, #25
 8010ef2:	68e3      	ldr	r3, [r4, #12]
 8010ef4:	6832      	ldr	r2, [r6, #0]
 8010ef6:	1a9b      	subs	r3, r3, r2
 8010ef8:	42ab      	cmp	r3, r5
 8010efa:	dc26      	bgt.n	8010f4a <_printf_common+0x96>
 8010efc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010f00:	1e13      	subs	r3, r2, #0
 8010f02:	6822      	ldr	r2, [r4, #0]
 8010f04:	bf18      	it	ne
 8010f06:	2301      	movne	r3, #1
 8010f08:	0692      	lsls	r2, r2, #26
 8010f0a:	d42b      	bmi.n	8010f64 <_printf_common+0xb0>
 8010f0c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010f10:	4649      	mov	r1, r9
 8010f12:	4638      	mov	r0, r7
 8010f14:	47c0      	blx	r8
 8010f16:	3001      	adds	r0, #1
 8010f18:	d01e      	beq.n	8010f58 <_printf_common+0xa4>
 8010f1a:	6823      	ldr	r3, [r4, #0]
 8010f1c:	68e5      	ldr	r5, [r4, #12]
 8010f1e:	6832      	ldr	r2, [r6, #0]
 8010f20:	f003 0306 	and.w	r3, r3, #6
 8010f24:	2b04      	cmp	r3, #4
 8010f26:	bf08      	it	eq
 8010f28:	1aad      	subeq	r5, r5, r2
 8010f2a:	68a3      	ldr	r3, [r4, #8]
 8010f2c:	6922      	ldr	r2, [r4, #16]
 8010f2e:	bf0c      	ite	eq
 8010f30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010f34:	2500      	movne	r5, #0
 8010f36:	4293      	cmp	r3, r2
 8010f38:	bfc4      	itt	gt
 8010f3a:	1a9b      	subgt	r3, r3, r2
 8010f3c:	18ed      	addgt	r5, r5, r3
 8010f3e:	2600      	movs	r6, #0
 8010f40:	341a      	adds	r4, #26
 8010f42:	42b5      	cmp	r5, r6
 8010f44:	d11a      	bne.n	8010f7c <_printf_common+0xc8>
 8010f46:	2000      	movs	r0, #0
 8010f48:	e008      	b.n	8010f5c <_printf_common+0xa8>
 8010f4a:	2301      	movs	r3, #1
 8010f4c:	4652      	mov	r2, sl
 8010f4e:	4649      	mov	r1, r9
 8010f50:	4638      	mov	r0, r7
 8010f52:	47c0      	blx	r8
 8010f54:	3001      	adds	r0, #1
 8010f56:	d103      	bne.n	8010f60 <_printf_common+0xac>
 8010f58:	f04f 30ff 	mov.w	r0, #4294967295
 8010f5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010f60:	3501      	adds	r5, #1
 8010f62:	e7c6      	b.n	8010ef2 <_printf_common+0x3e>
 8010f64:	18e1      	adds	r1, r4, r3
 8010f66:	1c5a      	adds	r2, r3, #1
 8010f68:	2030      	movs	r0, #48	; 0x30
 8010f6a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010f6e:	4422      	add	r2, r4
 8010f70:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010f74:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010f78:	3302      	adds	r3, #2
 8010f7a:	e7c7      	b.n	8010f0c <_printf_common+0x58>
 8010f7c:	2301      	movs	r3, #1
 8010f7e:	4622      	mov	r2, r4
 8010f80:	4649      	mov	r1, r9
 8010f82:	4638      	mov	r0, r7
 8010f84:	47c0      	blx	r8
 8010f86:	3001      	adds	r0, #1
 8010f88:	d0e6      	beq.n	8010f58 <_printf_common+0xa4>
 8010f8a:	3601      	adds	r6, #1
 8010f8c:	e7d9      	b.n	8010f42 <_printf_common+0x8e>
	...

08010f90 <_printf_i>:
 8010f90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010f94:	7e0f      	ldrb	r7, [r1, #24]
 8010f96:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010f98:	2f78      	cmp	r7, #120	; 0x78
 8010f9a:	4691      	mov	r9, r2
 8010f9c:	4680      	mov	r8, r0
 8010f9e:	460c      	mov	r4, r1
 8010fa0:	469a      	mov	sl, r3
 8010fa2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8010fa6:	d807      	bhi.n	8010fb8 <_printf_i+0x28>
 8010fa8:	2f62      	cmp	r7, #98	; 0x62
 8010faa:	d80a      	bhi.n	8010fc2 <_printf_i+0x32>
 8010fac:	2f00      	cmp	r7, #0
 8010fae:	f000 80d8 	beq.w	8011162 <_printf_i+0x1d2>
 8010fb2:	2f58      	cmp	r7, #88	; 0x58
 8010fb4:	f000 80a3 	beq.w	80110fe <_printf_i+0x16e>
 8010fb8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010fbc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010fc0:	e03a      	b.n	8011038 <_printf_i+0xa8>
 8010fc2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010fc6:	2b15      	cmp	r3, #21
 8010fc8:	d8f6      	bhi.n	8010fb8 <_printf_i+0x28>
 8010fca:	a101      	add	r1, pc, #4	; (adr r1, 8010fd0 <_printf_i+0x40>)
 8010fcc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010fd0:	08011029 	.word	0x08011029
 8010fd4:	0801103d 	.word	0x0801103d
 8010fd8:	08010fb9 	.word	0x08010fb9
 8010fdc:	08010fb9 	.word	0x08010fb9
 8010fe0:	08010fb9 	.word	0x08010fb9
 8010fe4:	08010fb9 	.word	0x08010fb9
 8010fe8:	0801103d 	.word	0x0801103d
 8010fec:	08010fb9 	.word	0x08010fb9
 8010ff0:	08010fb9 	.word	0x08010fb9
 8010ff4:	08010fb9 	.word	0x08010fb9
 8010ff8:	08010fb9 	.word	0x08010fb9
 8010ffc:	08011149 	.word	0x08011149
 8011000:	0801106d 	.word	0x0801106d
 8011004:	0801112b 	.word	0x0801112b
 8011008:	08010fb9 	.word	0x08010fb9
 801100c:	08010fb9 	.word	0x08010fb9
 8011010:	0801116b 	.word	0x0801116b
 8011014:	08010fb9 	.word	0x08010fb9
 8011018:	0801106d 	.word	0x0801106d
 801101c:	08010fb9 	.word	0x08010fb9
 8011020:	08010fb9 	.word	0x08010fb9
 8011024:	08011133 	.word	0x08011133
 8011028:	682b      	ldr	r3, [r5, #0]
 801102a:	1d1a      	adds	r2, r3, #4
 801102c:	681b      	ldr	r3, [r3, #0]
 801102e:	602a      	str	r2, [r5, #0]
 8011030:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011034:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011038:	2301      	movs	r3, #1
 801103a:	e0a3      	b.n	8011184 <_printf_i+0x1f4>
 801103c:	6820      	ldr	r0, [r4, #0]
 801103e:	6829      	ldr	r1, [r5, #0]
 8011040:	0606      	lsls	r6, r0, #24
 8011042:	f101 0304 	add.w	r3, r1, #4
 8011046:	d50a      	bpl.n	801105e <_printf_i+0xce>
 8011048:	680e      	ldr	r6, [r1, #0]
 801104a:	602b      	str	r3, [r5, #0]
 801104c:	2e00      	cmp	r6, #0
 801104e:	da03      	bge.n	8011058 <_printf_i+0xc8>
 8011050:	232d      	movs	r3, #45	; 0x2d
 8011052:	4276      	negs	r6, r6
 8011054:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011058:	485e      	ldr	r0, [pc, #376]	; (80111d4 <_printf_i+0x244>)
 801105a:	230a      	movs	r3, #10
 801105c:	e019      	b.n	8011092 <_printf_i+0x102>
 801105e:	680e      	ldr	r6, [r1, #0]
 8011060:	602b      	str	r3, [r5, #0]
 8011062:	f010 0f40 	tst.w	r0, #64	; 0x40
 8011066:	bf18      	it	ne
 8011068:	b236      	sxthne	r6, r6
 801106a:	e7ef      	b.n	801104c <_printf_i+0xbc>
 801106c:	682b      	ldr	r3, [r5, #0]
 801106e:	6820      	ldr	r0, [r4, #0]
 8011070:	1d19      	adds	r1, r3, #4
 8011072:	6029      	str	r1, [r5, #0]
 8011074:	0601      	lsls	r1, r0, #24
 8011076:	d501      	bpl.n	801107c <_printf_i+0xec>
 8011078:	681e      	ldr	r6, [r3, #0]
 801107a:	e002      	b.n	8011082 <_printf_i+0xf2>
 801107c:	0646      	lsls	r6, r0, #25
 801107e:	d5fb      	bpl.n	8011078 <_printf_i+0xe8>
 8011080:	881e      	ldrh	r6, [r3, #0]
 8011082:	4854      	ldr	r0, [pc, #336]	; (80111d4 <_printf_i+0x244>)
 8011084:	2f6f      	cmp	r7, #111	; 0x6f
 8011086:	bf0c      	ite	eq
 8011088:	2308      	moveq	r3, #8
 801108a:	230a      	movne	r3, #10
 801108c:	2100      	movs	r1, #0
 801108e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011092:	6865      	ldr	r5, [r4, #4]
 8011094:	60a5      	str	r5, [r4, #8]
 8011096:	2d00      	cmp	r5, #0
 8011098:	bfa2      	ittt	ge
 801109a:	6821      	ldrge	r1, [r4, #0]
 801109c:	f021 0104 	bicge.w	r1, r1, #4
 80110a0:	6021      	strge	r1, [r4, #0]
 80110a2:	b90e      	cbnz	r6, 80110a8 <_printf_i+0x118>
 80110a4:	2d00      	cmp	r5, #0
 80110a6:	d04d      	beq.n	8011144 <_printf_i+0x1b4>
 80110a8:	4615      	mov	r5, r2
 80110aa:	fbb6 f1f3 	udiv	r1, r6, r3
 80110ae:	fb03 6711 	mls	r7, r3, r1, r6
 80110b2:	5dc7      	ldrb	r7, [r0, r7]
 80110b4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80110b8:	4637      	mov	r7, r6
 80110ba:	42bb      	cmp	r3, r7
 80110bc:	460e      	mov	r6, r1
 80110be:	d9f4      	bls.n	80110aa <_printf_i+0x11a>
 80110c0:	2b08      	cmp	r3, #8
 80110c2:	d10b      	bne.n	80110dc <_printf_i+0x14c>
 80110c4:	6823      	ldr	r3, [r4, #0]
 80110c6:	07de      	lsls	r6, r3, #31
 80110c8:	d508      	bpl.n	80110dc <_printf_i+0x14c>
 80110ca:	6923      	ldr	r3, [r4, #16]
 80110cc:	6861      	ldr	r1, [r4, #4]
 80110ce:	4299      	cmp	r1, r3
 80110d0:	bfde      	ittt	le
 80110d2:	2330      	movle	r3, #48	; 0x30
 80110d4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80110d8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80110dc:	1b52      	subs	r2, r2, r5
 80110de:	6122      	str	r2, [r4, #16]
 80110e0:	f8cd a000 	str.w	sl, [sp]
 80110e4:	464b      	mov	r3, r9
 80110e6:	aa03      	add	r2, sp, #12
 80110e8:	4621      	mov	r1, r4
 80110ea:	4640      	mov	r0, r8
 80110ec:	f7ff fee2 	bl	8010eb4 <_printf_common>
 80110f0:	3001      	adds	r0, #1
 80110f2:	d14c      	bne.n	801118e <_printf_i+0x1fe>
 80110f4:	f04f 30ff 	mov.w	r0, #4294967295
 80110f8:	b004      	add	sp, #16
 80110fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80110fe:	4835      	ldr	r0, [pc, #212]	; (80111d4 <_printf_i+0x244>)
 8011100:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8011104:	6829      	ldr	r1, [r5, #0]
 8011106:	6823      	ldr	r3, [r4, #0]
 8011108:	f851 6b04 	ldr.w	r6, [r1], #4
 801110c:	6029      	str	r1, [r5, #0]
 801110e:	061d      	lsls	r5, r3, #24
 8011110:	d514      	bpl.n	801113c <_printf_i+0x1ac>
 8011112:	07df      	lsls	r7, r3, #31
 8011114:	bf44      	itt	mi
 8011116:	f043 0320 	orrmi.w	r3, r3, #32
 801111a:	6023      	strmi	r3, [r4, #0]
 801111c:	b91e      	cbnz	r6, 8011126 <_printf_i+0x196>
 801111e:	6823      	ldr	r3, [r4, #0]
 8011120:	f023 0320 	bic.w	r3, r3, #32
 8011124:	6023      	str	r3, [r4, #0]
 8011126:	2310      	movs	r3, #16
 8011128:	e7b0      	b.n	801108c <_printf_i+0xfc>
 801112a:	6823      	ldr	r3, [r4, #0]
 801112c:	f043 0320 	orr.w	r3, r3, #32
 8011130:	6023      	str	r3, [r4, #0]
 8011132:	2378      	movs	r3, #120	; 0x78
 8011134:	4828      	ldr	r0, [pc, #160]	; (80111d8 <_printf_i+0x248>)
 8011136:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801113a:	e7e3      	b.n	8011104 <_printf_i+0x174>
 801113c:	0659      	lsls	r1, r3, #25
 801113e:	bf48      	it	mi
 8011140:	b2b6      	uxthmi	r6, r6
 8011142:	e7e6      	b.n	8011112 <_printf_i+0x182>
 8011144:	4615      	mov	r5, r2
 8011146:	e7bb      	b.n	80110c0 <_printf_i+0x130>
 8011148:	682b      	ldr	r3, [r5, #0]
 801114a:	6826      	ldr	r6, [r4, #0]
 801114c:	6961      	ldr	r1, [r4, #20]
 801114e:	1d18      	adds	r0, r3, #4
 8011150:	6028      	str	r0, [r5, #0]
 8011152:	0635      	lsls	r5, r6, #24
 8011154:	681b      	ldr	r3, [r3, #0]
 8011156:	d501      	bpl.n	801115c <_printf_i+0x1cc>
 8011158:	6019      	str	r1, [r3, #0]
 801115a:	e002      	b.n	8011162 <_printf_i+0x1d2>
 801115c:	0670      	lsls	r0, r6, #25
 801115e:	d5fb      	bpl.n	8011158 <_printf_i+0x1c8>
 8011160:	8019      	strh	r1, [r3, #0]
 8011162:	2300      	movs	r3, #0
 8011164:	6123      	str	r3, [r4, #16]
 8011166:	4615      	mov	r5, r2
 8011168:	e7ba      	b.n	80110e0 <_printf_i+0x150>
 801116a:	682b      	ldr	r3, [r5, #0]
 801116c:	1d1a      	adds	r2, r3, #4
 801116e:	602a      	str	r2, [r5, #0]
 8011170:	681d      	ldr	r5, [r3, #0]
 8011172:	6862      	ldr	r2, [r4, #4]
 8011174:	2100      	movs	r1, #0
 8011176:	4628      	mov	r0, r5
 8011178:	f7ef f83a 	bl	80001f0 <memchr>
 801117c:	b108      	cbz	r0, 8011182 <_printf_i+0x1f2>
 801117e:	1b40      	subs	r0, r0, r5
 8011180:	6060      	str	r0, [r4, #4]
 8011182:	6863      	ldr	r3, [r4, #4]
 8011184:	6123      	str	r3, [r4, #16]
 8011186:	2300      	movs	r3, #0
 8011188:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801118c:	e7a8      	b.n	80110e0 <_printf_i+0x150>
 801118e:	6923      	ldr	r3, [r4, #16]
 8011190:	462a      	mov	r2, r5
 8011192:	4649      	mov	r1, r9
 8011194:	4640      	mov	r0, r8
 8011196:	47d0      	blx	sl
 8011198:	3001      	adds	r0, #1
 801119a:	d0ab      	beq.n	80110f4 <_printf_i+0x164>
 801119c:	6823      	ldr	r3, [r4, #0]
 801119e:	079b      	lsls	r3, r3, #30
 80111a0:	d413      	bmi.n	80111ca <_printf_i+0x23a>
 80111a2:	68e0      	ldr	r0, [r4, #12]
 80111a4:	9b03      	ldr	r3, [sp, #12]
 80111a6:	4298      	cmp	r0, r3
 80111a8:	bfb8      	it	lt
 80111aa:	4618      	movlt	r0, r3
 80111ac:	e7a4      	b.n	80110f8 <_printf_i+0x168>
 80111ae:	2301      	movs	r3, #1
 80111b0:	4632      	mov	r2, r6
 80111b2:	4649      	mov	r1, r9
 80111b4:	4640      	mov	r0, r8
 80111b6:	47d0      	blx	sl
 80111b8:	3001      	adds	r0, #1
 80111ba:	d09b      	beq.n	80110f4 <_printf_i+0x164>
 80111bc:	3501      	adds	r5, #1
 80111be:	68e3      	ldr	r3, [r4, #12]
 80111c0:	9903      	ldr	r1, [sp, #12]
 80111c2:	1a5b      	subs	r3, r3, r1
 80111c4:	42ab      	cmp	r3, r5
 80111c6:	dcf2      	bgt.n	80111ae <_printf_i+0x21e>
 80111c8:	e7eb      	b.n	80111a2 <_printf_i+0x212>
 80111ca:	2500      	movs	r5, #0
 80111cc:	f104 0619 	add.w	r6, r4, #25
 80111d0:	e7f5      	b.n	80111be <_printf_i+0x22e>
 80111d2:	bf00      	nop
 80111d4:	080147ad 	.word	0x080147ad
 80111d8:	080147be 	.word	0x080147be

080111dc <_sbrk_r>:
 80111dc:	b538      	push	{r3, r4, r5, lr}
 80111de:	4d06      	ldr	r5, [pc, #24]	; (80111f8 <_sbrk_r+0x1c>)
 80111e0:	2300      	movs	r3, #0
 80111e2:	4604      	mov	r4, r0
 80111e4:	4608      	mov	r0, r1
 80111e6:	602b      	str	r3, [r5, #0]
 80111e8:	f7ef fc38 	bl	8000a5c <_sbrk>
 80111ec:	1c43      	adds	r3, r0, #1
 80111ee:	d102      	bne.n	80111f6 <_sbrk_r+0x1a>
 80111f0:	682b      	ldr	r3, [r5, #0]
 80111f2:	b103      	cbz	r3, 80111f6 <_sbrk_r+0x1a>
 80111f4:	6023      	str	r3, [r4, #0]
 80111f6:	bd38      	pop	{r3, r4, r5, pc}
 80111f8:	20007de4 	.word	0x20007de4

080111fc <__sread>:
 80111fc:	b510      	push	{r4, lr}
 80111fe:	460c      	mov	r4, r1
 8011200:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011204:	f000 fa6e 	bl	80116e4 <_read_r>
 8011208:	2800      	cmp	r0, #0
 801120a:	bfab      	itete	ge
 801120c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801120e:	89a3      	ldrhlt	r3, [r4, #12]
 8011210:	181b      	addge	r3, r3, r0
 8011212:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011216:	bfac      	ite	ge
 8011218:	6563      	strge	r3, [r4, #84]	; 0x54
 801121a:	81a3      	strhlt	r3, [r4, #12]
 801121c:	bd10      	pop	{r4, pc}

0801121e <__swrite>:
 801121e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011222:	461f      	mov	r7, r3
 8011224:	898b      	ldrh	r3, [r1, #12]
 8011226:	05db      	lsls	r3, r3, #23
 8011228:	4605      	mov	r5, r0
 801122a:	460c      	mov	r4, r1
 801122c:	4616      	mov	r6, r2
 801122e:	d505      	bpl.n	801123c <__swrite+0x1e>
 8011230:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011234:	2302      	movs	r3, #2
 8011236:	2200      	movs	r2, #0
 8011238:	f000 f9d0 	bl	80115dc <_lseek_r>
 801123c:	89a3      	ldrh	r3, [r4, #12]
 801123e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011242:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011246:	81a3      	strh	r3, [r4, #12]
 8011248:	4632      	mov	r2, r6
 801124a:	463b      	mov	r3, r7
 801124c:	4628      	mov	r0, r5
 801124e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011252:	f000 b869 	b.w	8011328 <_write_r>

08011256 <__sseek>:
 8011256:	b510      	push	{r4, lr}
 8011258:	460c      	mov	r4, r1
 801125a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801125e:	f000 f9bd 	bl	80115dc <_lseek_r>
 8011262:	1c43      	adds	r3, r0, #1
 8011264:	89a3      	ldrh	r3, [r4, #12]
 8011266:	bf15      	itete	ne
 8011268:	6560      	strne	r0, [r4, #84]	; 0x54
 801126a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801126e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011272:	81a3      	strheq	r3, [r4, #12]
 8011274:	bf18      	it	ne
 8011276:	81a3      	strhne	r3, [r4, #12]
 8011278:	bd10      	pop	{r4, pc}

0801127a <__sclose>:
 801127a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801127e:	f000 b8db 	b.w	8011438 <_close_r>
	...

08011284 <__swbuf_r>:
 8011284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011286:	460e      	mov	r6, r1
 8011288:	4614      	mov	r4, r2
 801128a:	4605      	mov	r5, r0
 801128c:	b118      	cbz	r0, 8011296 <__swbuf_r+0x12>
 801128e:	6983      	ldr	r3, [r0, #24]
 8011290:	b90b      	cbnz	r3, 8011296 <__swbuf_r+0x12>
 8011292:	f7ff fb1b 	bl	80108cc <__sinit>
 8011296:	4b21      	ldr	r3, [pc, #132]	; (801131c <__swbuf_r+0x98>)
 8011298:	429c      	cmp	r4, r3
 801129a:	d12b      	bne.n	80112f4 <__swbuf_r+0x70>
 801129c:	686c      	ldr	r4, [r5, #4]
 801129e:	69a3      	ldr	r3, [r4, #24]
 80112a0:	60a3      	str	r3, [r4, #8]
 80112a2:	89a3      	ldrh	r3, [r4, #12]
 80112a4:	071a      	lsls	r2, r3, #28
 80112a6:	d52f      	bpl.n	8011308 <__swbuf_r+0x84>
 80112a8:	6923      	ldr	r3, [r4, #16]
 80112aa:	b36b      	cbz	r3, 8011308 <__swbuf_r+0x84>
 80112ac:	6923      	ldr	r3, [r4, #16]
 80112ae:	6820      	ldr	r0, [r4, #0]
 80112b0:	1ac0      	subs	r0, r0, r3
 80112b2:	6963      	ldr	r3, [r4, #20]
 80112b4:	b2f6      	uxtb	r6, r6
 80112b6:	4283      	cmp	r3, r0
 80112b8:	4637      	mov	r7, r6
 80112ba:	dc04      	bgt.n	80112c6 <__swbuf_r+0x42>
 80112bc:	4621      	mov	r1, r4
 80112be:	4628      	mov	r0, r5
 80112c0:	f000 f950 	bl	8011564 <_fflush_r>
 80112c4:	bb30      	cbnz	r0, 8011314 <__swbuf_r+0x90>
 80112c6:	68a3      	ldr	r3, [r4, #8]
 80112c8:	3b01      	subs	r3, #1
 80112ca:	60a3      	str	r3, [r4, #8]
 80112cc:	6823      	ldr	r3, [r4, #0]
 80112ce:	1c5a      	adds	r2, r3, #1
 80112d0:	6022      	str	r2, [r4, #0]
 80112d2:	701e      	strb	r6, [r3, #0]
 80112d4:	6963      	ldr	r3, [r4, #20]
 80112d6:	3001      	adds	r0, #1
 80112d8:	4283      	cmp	r3, r0
 80112da:	d004      	beq.n	80112e6 <__swbuf_r+0x62>
 80112dc:	89a3      	ldrh	r3, [r4, #12]
 80112de:	07db      	lsls	r3, r3, #31
 80112e0:	d506      	bpl.n	80112f0 <__swbuf_r+0x6c>
 80112e2:	2e0a      	cmp	r6, #10
 80112e4:	d104      	bne.n	80112f0 <__swbuf_r+0x6c>
 80112e6:	4621      	mov	r1, r4
 80112e8:	4628      	mov	r0, r5
 80112ea:	f000 f93b 	bl	8011564 <_fflush_r>
 80112ee:	b988      	cbnz	r0, 8011314 <__swbuf_r+0x90>
 80112f0:	4638      	mov	r0, r7
 80112f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80112f4:	4b0a      	ldr	r3, [pc, #40]	; (8011320 <__swbuf_r+0x9c>)
 80112f6:	429c      	cmp	r4, r3
 80112f8:	d101      	bne.n	80112fe <__swbuf_r+0x7a>
 80112fa:	68ac      	ldr	r4, [r5, #8]
 80112fc:	e7cf      	b.n	801129e <__swbuf_r+0x1a>
 80112fe:	4b09      	ldr	r3, [pc, #36]	; (8011324 <__swbuf_r+0xa0>)
 8011300:	429c      	cmp	r4, r3
 8011302:	bf08      	it	eq
 8011304:	68ec      	ldreq	r4, [r5, #12]
 8011306:	e7ca      	b.n	801129e <__swbuf_r+0x1a>
 8011308:	4621      	mov	r1, r4
 801130a:	4628      	mov	r0, r5
 801130c:	f000 f81e 	bl	801134c <__swsetup_r>
 8011310:	2800      	cmp	r0, #0
 8011312:	d0cb      	beq.n	80112ac <__swbuf_r+0x28>
 8011314:	f04f 37ff 	mov.w	r7, #4294967295
 8011318:	e7ea      	b.n	80112f0 <__swbuf_r+0x6c>
 801131a:	bf00      	nop
 801131c:	0801475c 	.word	0x0801475c
 8011320:	0801477c 	.word	0x0801477c
 8011324:	0801473c 	.word	0x0801473c

08011328 <_write_r>:
 8011328:	b538      	push	{r3, r4, r5, lr}
 801132a:	4d07      	ldr	r5, [pc, #28]	; (8011348 <_write_r+0x20>)
 801132c:	4604      	mov	r4, r0
 801132e:	4608      	mov	r0, r1
 8011330:	4611      	mov	r1, r2
 8011332:	2200      	movs	r2, #0
 8011334:	602a      	str	r2, [r5, #0]
 8011336:	461a      	mov	r2, r3
 8011338:	f7ef fa9e 	bl	8000878 <_write>
 801133c:	1c43      	adds	r3, r0, #1
 801133e:	d102      	bne.n	8011346 <_write_r+0x1e>
 8011340:	682b      	ldr	r3, [r5, #0]
 8011342:	b103      	cbz	r3, 8011346 <_write_r+0x1e>
 8011344:	6023      	str	r3, [r4, #0]
 8011346:	bd38      	pop	{r3, r4, r5, pc}
 8011348:	20007de4 	.word	0x20007de4

0801134c <__swsetup_r>:
 801134c:	4b32      	ldr	r3, [pc, #200]	; (8011418 <__swsetup_r+0xcc>)
 801134e:	b570      	push	{r4, r5, r6, lr}
 8011350:	681d      	ldr	r5, [r3, #0]
 8011352:	4606      	mov	r6, r0
 8011354:	460c      	mov	r4, r1
 8011356:	b125      	cbz	r5, 8011362 <__swsetup_r+0x16>
 8011358:	69ab      	ldr	r3, [r5, #24]
 801135a:	b913      	cbnz	r3, 8011362 <__swsetup_r+0x16>
 801135c:	4628      	mov	r0, r5
 801135e:	f7ff fab5 	bl	80108cc <__sinit>
 8011362:	4b2e      	ldr	r3, [pc, #184]	; (801141c <__swsetup_r+0xd0>)
 8011364:	429c      	cmp	r4, r3
 8011366:	d10f      	bne.n	8011388 <__swsetup_r+0x3c>
 8011368:	686c      	ldr	r4, [r5, #4]
 801136a:	89a3      	ldrh	r3, [r4, #12]
 801136c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011370:	0719      	lsls	r1, r3, #28
 8011372:	d42c      	bmi.n	80113ce <__swsetup_r+0x82>
 8011374:	06dd      	lsls	r5, r3, #27
 8011376:	d411      	bmi.n	801139c <__swsetup_r+0x50>
 8011378:	2309      	movs	r3, #9
 801137a:	6033      	str	r3, [r6, #0]
 801137c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011380:	81a3      	strh	r3, [r4, #12]
 8011382:	f04f 30ff 	mov.w	r0, #4294967295
 8011386:	e03e      	b.n	8011406 <__swsetup_r+0xba>
 8011388:	4b25      	ldr	r3, [pc, #148]	; (8011420 <__swsetup_r+0xd4>)
 801138a:	429c      	cmp	r4, r3
 801138c:	d101      	bne.n	8011392 <__swsetup_r+0x46>
 801138e:	68ac      	ldr	r4, [r5, #8]
 8011390:	e7eb      	b.n	801136a <__swsetup_r+0x1e>
 8011392:	4b24      	ldr	r3, [pc, #144]	; (8011424 <__swsetup_r+0xd8>)
 8011394:	429c      	cmp	r4, r3
 8011396:	bf08      	it	eq
 8011398:	68ec      	ldreq	r4, [r5, #12]
 801139a:	e7e6      	b.n	801136a <__swsetup_r+0x1e>
 801139c:	0758      	lsls	r0, r3, #29
 801139e:	d512      	bpl.n	80113c6 <__swsetup_r+0x7a>
 80113a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80113a2:	b141      	cbz	r1, 80113b6 <__swsetup_r+0x6a>
 80113a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80113a8:	4299      	cmp	r1, r3
 80113aa:	d002      	beq.n	80113b2 <__swsetup_r+0x66>
 80113ac:	4630      	mov	r0, r6
 80113ae:	f7ff fb47 	bl	8010a40 <_free_r>
 80113b2:	2300      	movs	r3, #0
 80113b4:	6363      	str	r3, [r4, #52]	; 0x34
 80113b6:	89a3      	ldrh	r3, [r4, #12]
 80113b8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80113bc:	81a3      	strh	r3, [r4, #12]
 80113be:	2300      	movs	r3, #0
 80113c0:	6063      	str	r3, [r4, #4]
 80113c2:	6923      	ldr	r3, [r4, #16]
 80113c4:	6023      	str	r3, [r4, #0]
 80113c6:	89a3      	ldrh	r3, [r4, #12]
 80113c8:	f043 0308 	orr.w	r3, r3, #8
 80113cc:	81a3      	strh	r3, [r4, #12]
 80113ce:	6923      	ldr	r3, [r4, #16]
 80113d0:	b94b      	cbnz	r3, 80113e6 <__swsetup_r+0x9a>
 80113d2:	89a3      	ldrh	r3, [r4, #12]
 80113d4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80113d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80113dc:	d003      	beq.n	80113e6 <__swsetup_r+0x9a>
 80113de:	4621      	mov	r1, r4
 80113e0:	4630      	mov	r0, r6
 80113e2:	f000 f933 	bl	801164c <__smakebuf_r>
 80113e6:	89a0      	ldrh	r0, [r4, #12]
 80113e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80113ec:	f010 0301 	ands.w	r3, r0, #1
 80113f0:	d00a      	beq.n	8011408 <__swsetup_r+0xbc>
 80113f2:	2300      	movs	r3, #0
 80113f4:	60a3      	str	r3, [r4, #8]
 80113f6:	6963      	ldr	r3, [r4, #20]
 80113f8:	425b      	negs	r3, r3
 80113fa:	61a3      	str	r3, [r4, #24]
 80113fc:	6923      	ldr	r3, [r4, #16]
 80113fe:	b943      	cbnz	r3, 8011412 <__swsetup_r+0xc6>
 8011400:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011404:	d1ba      	bne.n	801137c <__swsetup_r+0x30>
 8011406:	bd70      	pop	{r4, r5, r6, pc}
 8011408:	0781      	lsls	r1, r0, #30
 801140a:	bf58      	it	pl
 801140c:	6963      	ldrpl	r3, [r4, #20]
 801140e:	60a3      	str	r3, [r4, #8]
 8011410:	e7f4      	b.n	80113fc <__swsetup_r+0xb0>
 8011412:	2000      	movs	r0, #0
 8011414:	e7f7      	b.n	8011406 <__swsetup_r+0xba>
 8011416:	bf00      	nop
 8011418:	20000030 	.word	0x20000030
 801141c:	0801475c 	.word	0x0801475c
 8011420:	0801477c 	.word	0x0801477c
 8011424:	0801473c 	.word	0x0801473c

08011428 <abort>:
 8011428:	b508      	push	{r3, lr}
 801142a:	2006      	movs	r0, #6
 801142c:	f000 f994 	bl	8011758 <raise>
 8011430:	2001      	movs	r0, #1
 8011432:	f7ef fab7 	bl	80009a4 <_exit>
	...

08011438 <_close_r>:
 8011438:	b538      	push	{r3, r4, r5, lr}
 801143a:	4d06      	ldr	r5, [pc, #24]	; (8011454 <_close_r+0x1c>)
 801143c:	2300      	movs	r3, #0
 801143e:	4604      	mov	r4, r0
 8011440:	4608      	mov	r0, r1
 8011442:	602b      	str	r3, [r5, #0]
 8011444:	f7ef fad5 	bl	80009f2 <_close>
 8011448:	1c43      	adds	r3, r0, #1
 801144a:	d102      	bne.n	8011452 <_close_r+0x1a>
 801144c:	682b      	ldr	r3, [r5, #0]
 801144e:	b103      	cbz	r3, 8011452 <_close_r+0x1a>
 8011450:	6023      	str	r3, [r4, #0]
 8011452:	bd38      	pop	{r3, r4, r5, pc}
 8011454:	20007de4 	.word	0x20007de4

08011458 <__sflush_r>:
 8011458:	898a      	ldrh	r2, [r1, #12]
 801145a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801145e:	4605      	mov	r5, r0
 8011460:	0710      	lsls	r0, r2, #28
 8011462:	460c      	mov	r4, r1
 8011464:	d458      	bmi.n	8011518 <__sflush_r+0xc0>
 8011466:	684b      	ldr	r3, [r1, #4]
 8011468:	2b00      	cmp	r3, #0
 801146a:	dc05      	bgt.n	8011478 <__sflush_r+0x20>
 801146c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801146e:	2b00      	cmp	r3, #0
 8011470:	dc02      	bgt.n	8011478 <__sflush_r+0x20>
 8011472:	2000      	movs	r0, #0
 8011474:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011478:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801147a:	2e00      	cmp	r6, #0
 801147c:	d0f9      	beq.n	8011472 <__sflush_r+0x1a>
 801147e:	2300      	movs	r3, #0
 8011480:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011484:	682f      	ldr	r7, [r5, #0]
 8011486:	602b      	str	r3, [r5, #0]
 8011488:	d032      	beq.n	80114f0 <__sflush_r+0x98>
 801148a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801148c:	89a3      	ldrh	r3, [r4, #12]
 801148e:	075a      	lsls	r2, r3, #29
 8011490:	d505      	bpl.n	801149e <__sflush_r+0x46>
 8011492:	6863      	ldr	r3, [r4, #4]
 8011494:	1ac0      	subs	r0, r0, r3
 8011496:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011498:	b10b      	cbz	r3, 801149e <__sflush_r+0x46>
 801149a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801149c:	1ac0      	subs	r0, r0, r3
 801149e:	2300      	movs	r3, #0
 80114a0:	4602      	mov	r2, r0
 80114a2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80114a4:	6a21      	ldr	r1, [r4, #32]
 80114a6:	4628      	mov	r0, r5
 80114a8:	47b0      	blx	r6
 80114aa:	1c43      	adds	r3, r0, #1
 80114ac:	89a3      	ldrh	r3, [r4, #12]
 80114ae:	d106      	bne.n	80114be <__sflush_r+0x66>
 80114b0:	6829      	ldr	r1, [r5, #0]
 80114b2:	291d      	cmp	r1, #29
 80114b4:	d82c      	bhi.n	8011510 <__sflush_r+0xb8>
 80114b6:	4a2a      	ldr	r2, [pc, #168]	; (8011560 <__sflush_r+0x108>)
 80114b8:	40ca      	lsrs	r2, r1
 80114ba:	07d6      	lsls	r6, r2, #31
 80114bc:	d528      	bpl.n	8011510 <__sflush_r+0xb8>
 80114be:	2200      	movs	r2, #0
 80114c0:	6062      	str	r2, [r4, #4]
 80114c2:	04d9      	lsls	r1, r3, #19
 80114c4:	6922      	ldr	r2, [r4, #16]
 80114c6:	6022      	str	r2, [r4, #0]
 80114c8:	d504      	bpl.n	80114d4 <__sflush_r+0x7c>
 80114ca:	1c42      	adds	r2, r0, #1
 80114cc:	d101      	bne.n	80114d2 <__sflush_r+0x7a>
 80114ce:	682b      	ldr	r3, [r5, #0]
 80114d0:	b903      	cbnz	r3, 80114d4 <__sflush_r+0x7c>
 80114d2:	6560      	str	r0, [r4, #84]	; 0x54
 80114d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80114d6:	602f      	str	r7, [r5, #0]
 80114d8:	2900      	cmp	r1, #0
 80114da:	d0ca      	beq.n	8011472 <__sflush_r+0x1a>
 80114dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80114e0:	4299      	cmp	r1, r3
 80114e2:	d002      	beq.n	80114ea <__sflush_r+0x92>
 80114e4:	4628      	mov	r0, r5
 80114e6:	f7ff faab 	bl	8010a40 <_free_r>
 80114ea:	2000      	movs	r0, #0
 80114ec:	6360      	str	r0, [r4, #52]	; 0x34
 80114ee:	e7c1      	b.n	8011474 <__sflush_r+0x1c>
 80114f0:	6a21      	ldr	r1, [r4, #32]
 80114f2:	2301      	movs	r3, #1
 80114f4:	4628      	mov	r0, r5
 80114f6:	47b0      	blx	r6
 80114f8:	1c41      	adds	r1, r0, #1
 80114fa:	d1c7      	bne.n	801148c <__sflush_r+0x34>
 80114fc:	682b      	ldr	r3, [r5, #0]
 80114fe:	2b00      	cmp	r3, #0
 8011500:	d0c4      	beq.n	801148c <__sflush_r+0x34>
 8011502:	2b1d      	cmp	r3, #29
 8011504:	d001      	beq.n	801150a <__sflush_r+0xb2>
 8011506:	2b16      	cmp	r3, #22
 8011508:	d101      	bne.n	801150e <__sflush_r+0xb6>
 801150a:	602f      	str	r7, [r5, #0]
 801150c:	e7b1      	b.n	8011472 <__sflush_r+0x1a>
 801150e:	89a3      	ldrh	r3, [r4, #12]
 8011510:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011514:	81a3      	strh	r3, [r4, #12]
 8011516:	e7ad      	b.n	8011474 <__sflush_r+0x1c>
 8011518:	690f      	ldr	r7, [r1, #16]
 801151a:	2f00      	cmp	r7, #0
 801151c:	d0a9      	beq.n	8011472 <__sflush_r+0x1a>
 801151e:	0793      	lsls	r3, r2, #30
 8011520:	680e      	ldr	r6, [r1, #0]
 8011522:	bf08      	it	eq
 8011524:	694b      	ldreq	r3, [r1, #20]
 8011526:	600f      	str	r7, [r1, #0]
 8011528:	bf18      	it	ne
 801152a:	2300      	movne	r3, #0
 801152c:	eba6 0807 	sub.w	r8, r6, r7
 8011530:	608b      	str	r3, [r1, #8]
 8011532:	f1b8 0f00 	cmp.w	r8, #0
 8011536:	dd9c      	ble.n	8011472 <__sflush_r+0x1a>
 8011538:	6a21      	ldr	r1, [r4, #32]
 801153a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801153c:	4643      	mov	r3, r8
 801153e:	463a      	mov	r2, r7
 8011540:	4628      	mov	r0, r5
 8011542:	47b0      	blx	r6
 8011544:	2800      	cmp	r0, #0
 8011546:	dc06      	bgt.n	8011556 <__sflush_r+0xfe>
 8011548:	89a3      	ldrh	r3, [r4, #12]
 801154a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801154e:	81a3      	strh	r3, [r4, #12]
 8011550:	f04f 30ff 	mov.w	r0, #4294967295
 8011554:	e78e      	b.n	8011474 <__sflush_r+0x1c>
 8011556:	4407      	add	r7, r0
 8011558:	eba8 0800 	sub.w	r8, r8, r0
 801155c:	e7e9      	b.n	8011532 <__sflush_r+0xda>
 801155e:	bf00      	nop
 8011560:	20400001 	.word	0x20400001

08011564 <_fflush_r>:
 8011564:	b538      	push	{r3, r4, r5, lr}
 8011566:	690b      	ldr	r3, [r1, #16]
 8011568:	4605      	mov	r5, r0
 801156a:	460c      	mov	r4, r1
 801156c:	b913      	cbnz	r3, 8011574 <_fflush_r+0x10>
 801156e:	2500      	movs	r5, #0
 8011570:	4628      	mov	r0, r5
 8011572:	bd38      	pop	{r3, r4, r5, pc}
 8011574:	b118      	cbz	r0, 801157e <_fflush_r+0x1a>
 8011576:	6983      	ldr	r3, [r0, #24]
 8011578:	b90b      	cbnz	r3, 801157e <_fflush_r+0x1a>
 801157a:	f7ff f9a7 	bl	80108cc <__sinit>
 801157e:	4b14      	ldr	r3, [pc, #80]	; (80115d0 <_fflush_r+0x6c>)
 8011580:	429c      	cmp	r4, r3
 8011582:	d11b      	bne.n	80115bc <_fflush_r+0x58>
 8011584:	686c      	ldr	r4, [r5, #4]
 8011586:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801158a:	2b00      	cmp	r3, #0
 801158c:	d0ef      	beq.n	801156e <_fflush_r+0xa>
 801158e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011590:	07d0      	lsls	r0, r2, #31
 8011592:	d404      	bmi.n	801159e <_fflush_r+0x3a>
 8011594:	0599      	lsls	r1, r3, #22
 8011596:	d402      	bmi.n	801159e <_fflush_r+0x3a>
 8011598:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801159a:	f7ff fa47 	bl	8010a2c <__retarget_lock_acquire_recursive>
 801159e:	4628      	mov	r0, r5
 80115a0:	4621      	mov	r1, r4
 80115a2:	f7ff ff59 	bl	8011458 <__sflush_r>
 80115a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80115a8:	07da      	lsls	r2, r3, #31
 80115aa:	4605      	mov	r5, r0
 80115ac:	d4e0      	bmi.n	8011570 <_fflush_r+0xc>
 80115ae:	89a3      	ldrh	r3, [r4, #12]
 80115b0:	059b      	lsls	r3, r3, #22
 80115b2:	d4dd      	bmi.n	8011570 <_fflush_r+0xc>
 80115b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80115b6:	f7ff fa3a 	bl	8010a2e <__retarget_lock_release_recursive>
 80115ba:	e7d9      	b.n	8011570 <_fflush_r+0xc>
 80115bc:	4b05      	ldr	r3, [pc, #20]	; (80115d4 <_fflush_r+0x70>)
 80115be:	429c      	cmp	r4, r3
 80115c0:	d101      	bne.n	80115c6 <_fflush_r+0x62>
 80115c2:	68ac      	ldr	r4, [r5, #8]
 80115c4:	e7df      	b.n	8011586 <_fflush_r+0x22>
 80115c6:	4b04      	ldr	r3, [pc, #16]	; (80115d8 <_fflush_r+0x74>)
 80115c8:	429c      	cmp	r4, r3
 80115ca:	bf08      	it	eq
 80115cc:	68ec      	ldreq	r4, [r5, #12]
 80115ce:	e7da      	b.n	8011586 <_fflush_r+0x22>
 80115d0:	0801475c 	.word	0x0801475c
 80115d4:	0801477c 	.word	0x0801477c
 80115d8:	0801473c 	.word	0x0801473c

080115dc <_lseek_r>:
 80115dc:	b538      	push	{r3, r4, r5, lr}
 80115de:	4d07      	ldr	r5, [pc, #28]	; (80115fc <_lseek_r+0x20>)
 80115e0:	4604      	mov	r4, r0
 80115e2:	4608      	mov	r0, r1
 80115e4:	4611      	mov	r1, r2
 80115e6:	2200      	movs	r2, #0
 80115e8:	602a      	str	r2, [r5, #0]
 80115ea:	461a      	mov	r2, r3
 80115ec:	f7ef fa28 	bl	8000a40 <_lseek>
 80115f0:	1c43      	adds	r3, r0, #1
 80115f2:	d102      	bne.n	80115fa <_lseek_r+0x1e>
 80115f4:	682b      	ldr	r3, [r5, #0]
 80115f6:	b103      	cbz	r3, 80115fa <_lseek_r+0x1e>
 80115f8:	6023      	str	r3, [r4, #0]
 80115fa:	bd38      	pop	{r3, r4, r5, pc}
 80115fc:	20007de4 	.word	0x20007de4

08011600 <__swhatbuf_r>:
 8011600:	b570      	push	{r4, r5, r6, lr}
 8011602:	460e      	mov	r6, r1
 8011604:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011608:	2900      	cmp	r1, #0
 801160a:	b096      	sub	sp, #88	; 0x58
 801160c:	4614      	mov	r4, r2
 801160e:	461d      	mov	r5, r3
 8011610:	da08      	bge.n	8011624 <__swhatbuf_r+0x24>
 8011612:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8011616:	2200      	movs	r2, #0
 8011618:	602a      	str	r2, [r5, #0]
 801161a:	061a      	lsls	r2, r3, #24
 801161c:	d410      	bmi.n	8011640 <__swhatbuf_r+0x40>
 801161e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011622:	e00e      	b.n	8011642 <__swhatbuf_r+0x42>
 8011624:	466a      	mov	r2, sp
 8011626:	f000 f8b3 	bl	8011790 <_fstat_r>
 801162a:	2800      	cmp	r0, #0
 801162c:	dbf1      	blt.n	8011612 <__swhatbuf_r+0x12>
 801162e:	9a01      	ldr	r2, [sp, #4]
 8011630:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011634:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011638:	425a      	negs	r2, r3
 801163a:	415a      	adcs	r2, r3
 801163c:	602a      	str	r2, [r5, #0]
 801163e:	e7ee      	b.n	801161e <__swhatbuf_r+0x1e>
 8011640:	2340      	movs	r3, #64	; 0x40
 8011642:	2000      	movs	r0, #0
 8011644:	6023      	str	r3, [r4, #0]
 8011646:	b016      	add	sp, #88	; 0x58
 8011648:	bd70      	pop	{r4, r5, r6, pc}
	...

0801164c <__smakebuf_r>:
 801164c:	898b      	ldrh	r3, [r1, #12]
 801164e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011650:	079d      	lsls	r5, r3, #30
 8011652:	4606      	mov	r6, r0
 8011654:	460c      	mov	r4, r1
 8011656:	d507      	bpl.n	8011668 <__smakebuf_r+0x1c>
 8011658:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801165c:	6023      	str	r3, [r4, #0]
 801165e:	6123      	str	r3, [r4, #16]
 8011660:	2301      	movs	r3, #1
 8011662:	6163      	str	r3, [r4, #20]
 8011664:	b002      	add	sp, #8
 8011666:	bd70      	pop	{r4, r5, r6, pc}
 8011668:	ab01      	add	r3, sp, #4
 801166a:	466a      	mov	r2, sp
 801166c:	f7ff ffc8 	bl	8011600 <__swhatbuf_r>
 8011670:	9900      	ldr	r1, [sp, #0]
 8011672:	4605      	mov	r5, r0
 8011674:	4630      	mov	r0, r6
 8011676:	f7ff fa4f 	bl	8010b18 <_malloc_r>
 801167a:	b948      	cbnz	r0, 8011690 <__smakebuf_r+0x44>
 801167c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011680:	059a      	lsls	r2, r3, #22
 8011682:	d4ef      	bmi.n	8011664 <__smakebuf_r+0x18>
 8011684:	f023 0303 	bic.w	r3, r3, #3
 8011688:	f043 0302 	orr.w	r3, r3, #2
 801168c:	81a3      	strh	r3, [r4, #12]
 801168e:	e7e3      	b.n	8011658 <__smakebuf_r+0xc>
 8011690:	4b0d      	ldr	r3, [pc, #52]	; (80116c8 <__smakebuf_r+0x7c>)
 8011692:	62b3      	str	r3, [r6, #40]	; 0x28
 8011694:	89a3      	ldrh	r3, [r4, #12]
 8011696:	6020      	str	r0, [r4, #0]
 8011698:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801169c:	81a3      	strh	r3, [r4, #12]
 801169e:	9b00      	ldr	r3, [sp, #0]
 80116a0:	6163      	str	r3, [r4, #20]
 80116a2:	9b01      	ldr	r3, [sp, #4]
 80116a4:	6120      	str	r0, [r4, #16]
 80116a6:	b15b      	cbz	r3, 80116c0 <__smakebuf_r+0x74>
 80116a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80116ac:	4630      	mov	r0, r6
 80116ae:	f000 f881 	bl	80117b4 <_isatty_r>
 80116b2:	b128      	cbz	r0, 80116c0 <__smakebuf_r+0x74>
 80116b4:	89a3      	ldrh	r3, [r4, #12]
 80116b6:	f023 0303 	bic.w	r3, r3, #3
 80116ba:	f043 0301 	orr.w	r3, r3, #1
 80116be:	81a3      	strh	r3, [r4, #12]
 80116c0:	89a0      	ldrh	r0, [r4, #12]
 80116c2:	4305      	orrs	r5, r0
 80116c4:	81a5      	strh	r5, [r4, #12]
 80116c6:	e7cd      	b.n	8011664 <__smakebuf_r+0x18>
 80116c8:	08010865 	.word	0x08010865

080116cc <__malloc_lock>:
 80116cc:	4801      	ldr	r0, [pc, #4]	; (80116d4 <__malloc_lock+0x8>)
 80116ce:	f7ff b9ad 	b.w	8010a2c <__retarget_lock_acquire_recursive>
 80116d2:	bf00      	nop
 80116d4:	20007de8 	.word	0x20007de8

080116d8 <__malloc_unlock>:
 80116d8:	4801      	ldr	r0, [pc, #4]	; (80116e0 <__malloc_unlock+0x8>)
 80116da:	f7ff b9a8 	b.w	8010a2e <__retarget_lock_release_recursive>
 80116de:	bf00      	nop
 80116e0:	20007de8 	.word	0x20007de8

080116e4 <_read_r>:
 80116e4:	b538      	push	{r3, r4, r5, lr}
 80116e6:	4d07      	ldr	r5, [pc, #28]	; (8011704 <_read_r+0x20>)
 80116e8:	4604      	mov	r4, r0
 80116ea:	4608      	mov	r0, r1
 80116ec:	4611      	mov	r1, r2
 80116ee:	2200      	movs	r2, #0
 80116f0:	602a      	str	r2, [r5, #0]
 80116f2:	461a      	mov	r2, r3
 80116f4:	f7ef f960 	bl	80009b8 <_read>
 80116f8:	1c43      	adds	r3, r0, #1
 80116fa:	d102      	bne.n	8011702 <_read_r+0x1e>
 80116fc:	682b      	ldr	r3, [r5, #0]
 80116fe:	b103      	cbz	r3, 8011702 <_read_r+0x1e>
 8011700:	6023      	str	r3, [r4, #0]
 8011702:	bd38      	pop	{r3, r4, r5, pc}
 8011704:	20007de4 	.word	0x20007de4

08011708 <_raise_r>:
 8011708:	291f      	cmp	r1, #31
 801170a:	b538      	push	{r3, r4, r5, lr}
 801170c:	4604      	mov	r4, r0
 801170e:	460d      	mov	r5, r1
 8011710:	d904      	bls.n	801171c <_raise_r+0x14>
 8011712:	2316      	movs	r3, #22
 8011714:	6003      	str	r3, [r0, #0]
 8011716:	f04f 30ff 	mov.w	r0, #4294967295
 801171a:	bd38      	pop	{r3, r4, r5, pc}
 801171c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801171e:	b112      	cbz	r2, 8011726 <_raise_r+0x1e>
 8011720:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011724:	b94b      	cbnz	r3, 801173a <_raise_r+0x32>
 8011726:	4620      	mov	r0, r4
 8011728:	f000 f830 	bl	801178c <_getpid_r>
 801172c:	462a      	mov	r2, r5
 801172e:	4601      	mov	r1, r0
 8011730:	4620      	mov	r0, r4
 8011732:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011736:	f000 b817 	b.w	8011768 <_kill_r>
 801173a:	2b01      	cmp	r3, #1
 801173c:	d00a      	beq.n	8011754 <_raise_r+0x4c>
 801173e:	1c59      	adds	r1, r3, #1
 8011740:	d103      	bne.n	801174a <_raise_r+0x42>
 8011742:	2316      	movs	r3, #22
 8011744:	6003      	str	r3, [r0, #0]
 8011746:	2001      	movs	r0, #1
 8011748:	e7e7      	b.n	801171a <_raise_r+0x12>
 801174a:	2400      	movs	r4, #0
 801174c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011750:	4628      	mov	r0, r5
 8011752:	4798      	blx	r3
 8011754:	2000      	movs	r0, #0
 8011756:	e7e0      	b.n	801171a <_raise_r+0x12>

08011758 <raise>:
 8011758:	4b02      	ldr	r3, [pc, #8]	; (8011764 <raise+0xc>)
 801175a:	4601      	mov	r1, r0
 801175c:	6818      	ldr	r0, [r3, #0]
 801175e:	f7ff bfd3 	b.w	8011708 <_raise_r>
 8011762:	bf00      	nop
 8011764:	20000030 	.word	0x20000030

08011768 <_kill_r>:
 8011768:	b538      	push	{r3, r4, r5, lr}
 801176a:	4d07      	ldr	r5, [pc, #28]	; (8011788 <_kill_r+0x20>)
 801176c:	2300      	movs	r3, #0
 801176e:	4604      	mov	r4, r0
 8011770:	4608      	mov	r0, r1
 8011772:	4611      	mov	r1, r2
 8011774:	602b      	str	r3, [r5, #0]
 8011776:	f7ef f903 	bl	8000980 <_kill>
 801177a:	1c43      	adds	r3, r0, #1
 801177c:	d102      	bne.n	8011784 <_kill_r+0x1c>
 801177e:	682b      	ldr	r3, [r5, #0]
 8011780:	b103      	cbz	r3, 8011784 <_kill_r+0x1c>
 8011782:	6023      	str	r3, [r4, #0]
 8011784:	bd38      	pop	{r3, r4, r5, pc}
 8011786:	bf00      	nop
 8011788:	20007de4 	.word	0x20007de4

0801178c <_getpid_r>:
 801178c:	f7ef b8f0 	b.w	8000970 <_getpid>

08011790 <_fstat_r>:
 8011790:	b538      	push	{r3, r4, r5, lr}
 8011792:	4d07      	ldr	r5, [pc, #28]	; (80117b0 <_fstat_r+0x20>)
 8011794:	2300      	movs	r3, #0
 8011796:	4604      	mov	r4, r0
 8011798:	4608      	mov	r0, r1
 801179a:	4611      	mov	r1, r2
 801179c:	602b      	str	r3, [r5, #0]
 801179e:	f7ef f934 	bl	8000a0a <_fstat>
 80117a2:	1c43      	adds	r3, r0, #1
 80117a4:	d102      	bne.n	80117ac <_fstat_r+0x1c>
 80117a6:	682b      	ldr	r3, [r5, #0]
 80117a8:	b103      	cbz	r3, 80117ac <_fstat_r+0x1c>
 80117aa:	6023      	str	r3, [r4, #0]
 80117ac:	bd38      	pop	{r3, r4, r5, pc}
 80117ae:	bf00      	nop
 80117b0:	20007de4 	.word	0x20007de4

080117b4 <_isatty_r>:
 80117b4:	b538      	push	{r3, r4, r5, lr}
 80117b6:	4d06      	ldr	r5, [pc, #24]	; (80117d0 <_isatty_r+0x1c>)
 80117b8:	2300      	movs	r3, #0
 80117ba:	4604      	mov	r4, r0
 80117bc:	4608      	mov	r0, r1
 80117be:	602b      	str	r3, [r5, #0]
 80117c0:	f7ef f933 	bl	8000a2a <_isatty>
 80117c4:	1c43      	adds	r3, r0, #1
 80117c6:	d102      	bne.n	80117ce <_isatty_r+0x1a>
 80117c8:	682b      	ldr	r3, [r5, #0]
 80117ca:	b103      	cbz	r3, 80117ce <_isatty_r+0x1a>
 80117cc:	6023      	str	r3, [r4, #0]
 80117ce:	bd38      	pop	{r3, r4, r5, pc}
 80117d0:	20007de4 	.word	0x20007de4

080117d4 <_init>:
 80117d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80117d6:	bf00      	nop
 80117d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80117da:	bc08      	pop	{r3}
 80117dc:	469e      	mov	lr, r3
 80117de:	4770      	bx	lr

080117e0 <_fini>:
 80117e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80117e2:	bf00      	nop
 80117e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80117e6:	bc08      	pop	{r3}
 80117e8:	469e      	mov	lr, r3
 80117ea:	4770      	bx	lr
