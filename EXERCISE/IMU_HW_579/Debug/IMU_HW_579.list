
IMU_HW_579.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000068b0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000130  08006a60  08006a60  00016a60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b90  08006b90  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006b90  08006b90  00016b90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006b98  08006b98  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b98  08006b98  00016b98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006b9c  08006b9c  00016b9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006ba0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          0000014c  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001bc  200001bc  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000def4  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000224b  00000000  00000000  0002df94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b18  00000000  00000000  000301e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000a38  00000000  00000000  00030cf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002457a  00000000  00000000  00031730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f3ba  00000000  00000000  00055caa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d5b95  00000000  00000000  00065064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013abf9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003448  00000000  00000000  0013ac4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08006a48 	.word	0x08006a48

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	08006a48 	.word	0x08006a48

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b08a      	sub	sp, #40	; 0x28
 8000598:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800059a:	f107 0314 	add.w	r3, r7, #20
 800059e:	2200      	movs	r2, #0
 80005a0:	601a      	str	r2, [r3, #0]
 80005a2:	605a      	str	r2, [r3, #4]
 80005a4:	609a      	str	r2, [r3, #8]
 80005a6:	60da      	str	r2, [r3, #12]
 80005a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005aa:	2300      	movs	r3, #0
 80005ac:	613b      	str	r3, [r7, #16]
 80005ae:	4b75      	ldr	r3, [pc, #468]	; (8000784 <MX_GPIO_Init+0x1f0>)
 80005b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b2:	4a74      	ldr	r2, [pc, #464]	; (8000784 <MX_GPIO_Init+0x1f0>)
 80005b4:	f043 0304 	orr.w	r3, r3, #4
 80005b8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ba:	4b72      	ldr	r3, [pc, #456]	; (8000784 <MX_GPIO_Init+0x1f0>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005be:	f003 0304 	and.w	r3, r3, #4
 80005c2:	613b      	str	r3, [r7, #16]
 80005c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005c6:	2300      	movs	r3, #0
 80005c8:	60fb      	str	r3, [r7, #12]
 80005ca:	4b6e      	ldr	r3, [pc, #440]	; (8000784 <MX_GPIO_Init+0x1f0>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ce:	4a6d      	ldr	r2, [pc, #436]	; (8000784 <MX_GPIO_Init+0x1f0>)
 80005d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005d4:	6313      	str	r3, [r2, #48]	; 0x30
 80005d6:	4b6b      	ldr	r3, [pc, #428]	; (8000784 <MX_GPIO_Init+0x1f0>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005de:	60fb      	str	r3, [r7, #12]
 80005e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e2:	2300      	movs	r3, #0
 80005e4:	60bb      	str	r3, [r7, #8]
 80005e6:	4b67      	ldr	r3, [pc, #412]	; (8000784 <MX_GPIO_Init+0x1f0>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ea:	4a66      	ldr	r2, [pc, #408]	; (8000784 <MX_GPIO_Init+0x1f0>)
 80005ec:	f043 0301 	orr.w	r3, r3, #1
 80005f0:	6313      	str	r3, [r2, #48]	; 0x30
 80005f2:	4b64      	ldr	r3, [pc, #400]	; (8000784 <MX_GPIO_Init+0x1f0>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f6:	f003 0301 	and.w	r3, r3, #1
 80005fa:	60bb      	str	r3, [r7, #8]
 80005fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005fe:	2300      	movs	r3, #0
 8000600:	607b      	str	r3, [r7, #4]
 8000602:	4b60      	ldr	r3, [pc, #384]	; (8000784 <MX_GPIO_Init+0x1f0>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000606:	4a5f      	ldr	r2, [pc, #380]	; (8000784 <MX_GPIO_Init+0x1f0>)
 8000608:	f043 0302 	orr.w	r3, r3, #2
 800060c:	6313      	str	r3, [r2, #48]	; 0x30
 800060e:	4b5d      	ldr	r3, [pc, #372]	; (8000784 <MX_GPIO_Init+0x1f0>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000612:	f003 0302 	and.w	r3, r3, #2
 8000616:	607b      	str	r3, [r7, #4]
 8000618:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800061a:	2300      	movs	r3, #0
 800061c:	603b      	str	r3, [r7, #0]
 800061e:	4b59      	ldr	r3, [pc, #356]	; (8000784 <MX_GPIO_Init+0x1f0>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000622:	4a58      	ldr	r2, [pc, #352]	; (8000784 <MX_GPIO_Init+0x1f0>)
 8000624:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000628:	6313      	str	r3, [r2, #48]	; 0x30
 800062a:	4b56      	ldr	r3, [pc, #344]	; (8000784 <MX_GPIO_Init+0x1f0>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000632:	603b      	str	r3, [r7, #0]
 8000634:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000636:	2200      	movs	r2, #0
 8000638:	f244 0181 	movw	r1, #16513	; 0x4081
 800063c:	4852      	ldr	r0, [pc, #328]	; (8000788 <MX_GPIO_Init+0x1f4>)
 800063e:	f001 f835 	bl	80016ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000642:	2200      	movs	r2, #0
 8000644:	2140      	movs	r1, #64	; 0x40
 8000646:	4851      	ldr	r0, [pc, #324]	; (800078c <MX_GPIO_Init+0x1f8>)
 8000648:	f001 f830 	bl	80016ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800064c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000650:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000652:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000656:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000658:	2300      	movs	r3, #0
 800065a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800065c:	f107 0314 	add.w	r3, r7, #20
 8000660:	4619      	mov	r1, r3
 8000662:	484b      	ldr	r0, [pc, #300]	; (8000790 <MX_GPIO_Init+0x1fc>)
 8000664:	f000 fe76 	bl	8001354 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000668:	2332      	movs	r3, #50	; 0x32
 800066a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800066c:	2302      	movs	r3, #2
 800066e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000670:	2300      	movs	r3, #0
 8000672:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000674:	2303      	movs	r3, #3
 8000676:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000678:	230b      	movs	r3, #11
 800067a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800067c:	f107 0314 	add.w	r3, r7, #20
 8000680:	4619      	mov	r1, r3
 8000682:	4843      	ldr	r0, [pc, #268]	; (8000790 <MX_GPIO_Init+0x1fc>)
 8000684:	f000 fe66 	bl	8001354 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000688:	2386      	movs	r3, #134	; 0x86
 800068a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800068c:	2302      	movs	r3, #2
 800068e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000690:	2300      	movs	r3, #0
 8000692:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000694:	2303      	movs	r3, #3
 8000696:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000698:	230b      	movs	r3, #11
 800069a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800069c:	f107 0314 	add.w	r3, r7, #20
 80006a0:	4619      	mov	r1, r3
 80006a2:	483c      	ldr	r0, [pc, #240]	; (8000794 <MX_GPIO_Init+0x200>)
 80006a4:	f000 fe56 	bl	8001354 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80006a8:	f244 0381 	movw	r3, #16513	; 0x4081
 80006ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ae:	2301      	movs	r3, #1
 80006b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b2:	2300      	movs	r3, #0
 80006b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b6:	2300      	movs	r3, #0
 80006b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006ba:	f107 0314 	add.w	r3, r7, #20
 80006be:	4619      	mov	r1, r3
 80006c0:	4831      	ldr	r0, [pc, #196]	; (8000788 <MX_GPIO_Init+0x1f4>)
 80006c2:	f000 fe47 	bl	8001354 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80006c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006cc:	2302      	movs	r3, #2
 80006ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d0:	2300      	movs	r3, #0
 80006d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006d4:	2303      	movs	r3, #3
 80006d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006d8:	230b      	movs	r3, #11
 80006da:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80006dc:	f107 0314 	add.w	r3, r7, #20
 80006e0:	4619      	mov	r1, r3
 80006e2:	4829      	ldr	r0, [pc, #164]	; (8000788 <MX_GPIO_Init+0x1f4>)
 80006e4:	f000 fe36 	bl	8001354 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80006e8:	2340      	movs	r3, #64	; 0x40
 80006ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ec:	2301      	movs	r3, #1
 80006ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f0:	2300      	movs	r3, #0
 80006f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f4:	2300      	movs	r3, #0
 80006f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80006f8:	f107 0314 	add.w	r3, r7, #20
 80006fc:	4619      	mov	r1, r3
 80006fe:	4823      	ldr	r0, [pc, #140]	; (800078c <MX_GPIO_Init+0x1f8>)
 8000700:	f000 fe28 	bl	8001354 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000704:	2380      	movs	r3, #128	; 0x80
 8000706:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000708:	2300      	movs	r3, #0
 800070a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070c:	2300      	movs	r3, #0
 800070e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000710:	f107 0314 	add.w	r3, r7, #20
 8000714:	4619      	mov	r1, r3
 8000716:	481d      	ldr	r0, [pc, #116]	; (800078c <MX_GPIO_Init+0x1f8>)
 8000718:	f000 fe1c 	bl	8001354 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800071c:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000720:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000722:	2302      	movs	r3, #2
 8000724:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000726:	2300      	movs	r3, #0
 8000728:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800072a:	2303      	movs	r3, #3
 800072c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800072e:	230a      	movs	r3, #10
 8000730:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000732:	f107 0314 	add.w	r3, r7, #20
 8000736:	4619      	mov	r1, r3
 8000738:	4816      	ldr	r0, [pc, #88]	; (8000794 <MX_GPIO_Init+0x200>)
 800073a:	f000 fe0b 	bl	8001354 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800073e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000742:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000744:	2300      	movs	r3, #0
 8000746:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000748:	2300      	movs	r3, #0
 800074a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800074c:	f107 0314 	add.w	r3, r7, #20
 8000750:	4619      	mov	r1, r3
 8000752:	4810      	ldr	r0, [pc, #64]	; (8000794 <MX_GPIO_Init+0x200>)
 8000754:	f000 fdfe 	bl	8001354 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000758:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800075c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800075e:	2302      	movs	r3, #2
 8000760:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000762:	2300      	movs	r3, #0
 8000764:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000766:	2303      	movs	r3, #3
 8000768:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800076a:	230b      	movs	r3, #11
 800076c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800076e:	f107 0314 	add.w	r3, r7, #20
 8000772:	4619      	mov	r1, r3
 8000774:	4805      	ldr	r0, [pc, #20]	; (800078c <MX_GPIO_Init+0x1f8>)
 8000776:	f000 fded 	bl	8001354 <HAL_GPIO_Init>

}
 800077a:	bf00      	nop
 800077c:	3728      	adds	r7, #40	; 0x28
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	40023800 	.word	0x40023800
 8000788:	40020400 	.word	0x40020400
 800078c:	40021800 	.word	0x40021800
 8000790:	40020800 	.word	0x40020800
 8000794:	40020000 	.word	0x40020000

08000798 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800079c:	4b1b      	ldr	r3, [pc, #108]	; (800080c <MX_I2C1_Init+0x74>)
 800079e:	4a1c      	ldr	r2, [pc, #112]	; (8000810 <MX_I2C1_Init+0x78>)
 80007a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80007a2:	4b1a      	ldr	r3, [pc, #104]	; (800080c <MX_I2C1_Init+0x74>)
 80007a4:	4a1b      	ldr	r2, [pc, #108]	; (8000814 <MX_I2C1_Init+0x7c>)
 80007a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007a8:	4b18      	ldr	r3, [pc, #96]	; (800080c <MX_I2C1_Init+0x74>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007ae:	4b17      	ldr	r3, [pc, #92]	; (800080c <MX_I2C1_Init+0x74>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007b4:	4b15      	ldr	r3, [pc, #84]	; (800080c <MX_I2C1_Init+0x74>)
 80007b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007ba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007bc:	4b13      	ldr	r3, [pc, #76]	; (800080c <MX_I2C1_Init+0x74>)
 80007be:	2200      	movs	r2, #0
 80007c0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007c2:	4b12      	ldr	r3, [pc, #72]	; (800080c <MX_I2C1_Init+0x74>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007c8:	4b10      	ldr	r3, [pc, #64]	; (800080c <MX_I2C1_Init+0x74>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007ce:	4b0f      	ldr	r3, [pc, #60]	; (800080c <MX_I2C1_Init+0x74>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007d4:	480d      	ldr	r0, [pc, #52]	; (800080c <MX_I2C1_Init+0x74>)
 80007d6:	f000 ff83 	bl	80016e0 <HAL_I2C_Init>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007e0:	f000 f9bc 	bl	8000b5c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007e4:	2100      	movs	r1, #0
 80007e6:	4809      	ldr	r0, [pc, #36]	; (800080c <MX_I2C1_Init+0x74>)
 80007e8:	f003 fb80 	bl	8003eec <HAL_I2CEx_ConfigAnalogFilter>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80007f2:	f000 f9b3 	bl	8000b5c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80007f6:	2100      	movs	r1, #0
 80007f8:	4804      	ldr	r0, [pc, #16]	; (800080c <MX_I2C1_Init+0x74>)
 80007fa:	f003 fbb3 	bl	8003f64 <HAL_I2CEx_ConfigDigitalFilter>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000804:	f000 f9aa 	bl	8000b5c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000808:	bf00      	nop
 800080a:	bd80      	pop	{r7, pc}
 800080c:	2000008c 	.word	0x2000008c
 8000810:	40005400 	.word	0x40005400
 8000814:	000186a0 	.word	0x000186a0

08000818 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b08a      	sub	sp, #40	; 0x28
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000820:	f107 0314 	add.w	r3, r7, #20
 8000824:	2200      	movs	r2, #0
 8000826:	601a      	str	r2, [r3, #0]
 8000828:	605a      	str	r2, [r3, #4]
 800082a:	609a      	str	r2, [r3, #8]
 800082c:	60da      	str	r2, [r3, #12]
 800082e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	4a21      	ldr	r2, [pc, #132]	; (80008bc <HAL_I2C_MspInit+0xa4>)
 8000836:	4293      	cmp	r3, r2
 8000838:	d13c      	bne.n	80008b4 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	613b      	str	r3, [r7, #16]
 800083e:	4b20      	ldr	r3, [pc, #128]	; (80008c0 <HAL_I2C_MspInit+0xa8>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	4a1f      	ldr	r2, [pc, #124]	; (80008c0 <HAL_I2C_MspInit+0xa8>)
 8000844:	f043 0302 	orr.w	r3, r3, #2
 8000848:	6313      	str	r3, [r2, #48]	; 0x30
 800084a:	4b1d      	ldr	r3, [pc, #116]	; (80008c0 <HAL_I2C_MspInit+0xa8>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	f003 0302 	and.w	r3, r3, #2
 8000852:	613b      	str	r3, [r7, #16]
 8000854:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000856:	f44f 7340 	mov.w	r3, #768	; 0x300
 800085a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800085c:	2312      	movs	r3, #18
 800085e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000860:	2300      	movs	r3, #0
 8000862:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000864:	2303      	movs	r3, #3
 8000866:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000868:	2304      	movs	r3, #4
 800086a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800086c:	f107 0314 	add.w	r3, r7, #20
 8000870:	4619      	mov	r1, r3
 8000872:	4814      	ldr	r0, [pc, #80]	; (80008c4 <HAL_I2C_MspInit+0xac>)
 8000874:	f000 fd6e 	bl	8001354 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000878:	2300      	movs	r3, #0
 800087a:	60fb      	str	r3, [r7, #12]
 800087c:	4b10      	ldr	r3, [pc, #64]	; (80008c0 <HAL_I2C_MspInit+0xa8>)
 800087e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000880:	4a0f      	ldr	r2, [pc, #60]	; (80008c0 <HAL_I2C_MspInit+0xa8>)
 8000882:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000886:	6413      	str	r3, [r2, #64]	; 0x40
 8000888:	4b0d      	ldr	r3, [pc, #52]	; (80008c0 <HAL_I2C_MspInit+0xa8>)
 800088a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800088c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000890:	60fb      	str	r3, [r7, #12]
 8000892:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000894:	2200      	movs	r2, #0
 8000896:	2100      	movs	r1, #0
 8000898:	201f      	movs	r0, #31
 800089a:	f000 fc84 	bl	80011a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800089e:	201f      	movs	r0, #31
 80008a0:	f000 fc9d 	bl	80011de <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80008a4:	2200      	movs	r2, #0
 80008a6:	2100      	movs	r1, #0
 80008a8:	2020      	movs	r0, #32
 80008aa:	f000 fc7c 	bl	80011a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80008ae:	2020      	movs	r0, #32
 80008b0:	f000 fc95 	bl	80011de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80008b4:	bf00      	nop
 80008b6:	3728      	adds	r7, #40	; 0x28
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	40005400 	.word	0x40005400
 80008c0:	40023800 	.word	0x40023800
 80008c4:	40020400 	.word	0x40020400

080008c8 <_write>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
int _write(int file, char *p, int len)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b084      	sub	sp, #16
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	60f8      	str	r0, [r7, #12]
 80008d0:	60b9      	str	r1, [r7, #8]
 80008d2:	607a      	str	r2, [r7, #4]
	if(HAL_UART_Transmit(&huart3, (uint8_t *)p, len, 10) == HAL_OK) return len;
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	b29a      	uxth	r2, r3
 80008d8:	230a      	movs	r3, #10
 80008da:	68b9      	ldr	r1, [r7, #8]
 80008dc:	4806      	ldr	r0, [pc, #24]	; (80008f8 <_write+0x30>)
 80008de:	f004 f8b6 	bl	8004a4e <HAL_UART_Transmit>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d101      	bne.n	80008ec <_write+0x24>
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	e000      	b.n	80008ee <_write+0x26>
	else return 0;
 80008ec:	2300      	movs	r3, #0
}
 80008ee:	4618      	mov	r0, r3
 80008f0:	3710      	adds	r7, #16
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	20000164 	.word	0x20000164

080008fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b0a8      	sub	sp, #160	; 0xa0
 8000900:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000902:	f000 fadf 	bl	8000ec4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000906:	f000 f8b9 	bl	8000a7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800090a:	f7ff fe43 	bl	8000594 <MX_GPIO_Init>
  MX_I2C1_Init();
 800090e:	f7ff ff43 	bl	8000798 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8000912:	f000 fa33 	bl	8000d7c <MX_USART3_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_StatusTypeDef state;
  uint8_t slave_address;
  uint8_t state_buffer[128] = {0, };
 8000916:	2300      	movs	r3, #0
 8000918:	607b      	str	r3, [r7, #4]
 800091a:	f107 0308 	add.w	r3, r7, #8
 800091e:	227c      	movs	r2, #124	; 0x7c
 8000920:	2100      	movs	r1, #0
 8000922:	4618      	mov	r0, r3
 8000924:	f005 f884 	bl	8005a30 <memset>
  uint8_t sensors[3] = {0, };
 8000928:	4b4a      	ldr	r3, [pc, #296]	; (8000a54 <main+0x158>)
 800092a:	881b      	ldrh	r3, [r3, #0]
 800092c:	803b      	strh	r3, [r7, #0]
 800092e:	2300      	movs	r3, #0
 8000930:	70bb      	strb	r3, [r7, #2]
  uint8_t numSensors = 0;
 8000932:	2300      	movs	r3, #0
 8000934:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  uint8_t nDevices;

  HAL_Delay(1000);
 8000938:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800093c:	f000 fb34 	bl	8000fa8 <HAL_Delay>
  printf("I2C Scan Start\r\n");
 8000940:	4845      	ldr	r0, [pc, #276]	; (8000a58 <main+0x15c>)
 8000942:	f005 f903 	bl	8005b4c <puts>
  printf("==================\r\n");
 8000946:	4845      	ldr	r0, [pc, #276]	; (8000a5c <main+0x160>)
 8000948:	f005 f900 	bl	8005b4c <puts>
  for(slave_address = 1; slave_address < 128; slave_address++)
 800094c:	2301      	movs	r3, #1
 800094e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8000952:	e030      	b.n	80009b6 <main+0xba>
  {
	  //state = HAL_I2C_Master_Transmit(&hi2c1, slave_address, state_buffer, 3, HAL_MAX_DELAY);
	  state = HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t)(slave_address << 1), 3, 10);
 8000954:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8000958:	b29b      	uxth	r3, r3
 800095a:	005b      	lsls	r3, r3, #1
 800095c:	b299      	uxth	r1, r3
 800095e:	230a      	movs	r3, #10
 8000960:	2203      	movs	r2, #3
 8000962:	483f      	ldr	r0, [pc, #252]	; (8000a60 <main+0x164>)
 8000964:	f001 fa26 	bl	8001db4 <HAL_I2C_IsDeviceReady>
 8000968:	4603      	mov	r3, r0
 800096a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	  if (state == HAL_OK)
 800096e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8000972:	2b00      	cmp	r3, #0
 8000974:	d113      	bne.n	800099e <main+0xa2>
	  {
		  sensors[numSensors] = slave_address;
 8000976:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 800097a:	3390      	adds	r3, #144	; 0x90
 800097c:	443b      	add	r3, r7
 800097e:	f897 208f 	ldrb.w	r2, [r7, #143]	; 0x8f
 8000982:	f803 2c90 	strb.w	r2, [r3, #-144]
		  numSensors++;
 8000986:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 800098a:	3301      	adds	r3, #1
 800098c:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
		  printf("Address : 0x%X\r\n", slave_address);	// !HAL_OK = 1
 8000990:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8000994:	4619      	mov	r1, r3
 8000996:	4833      	ldr	r0, [pc, #204]	; (8000a64 <main+0x168>)
 8000998:	f005 f852 	bl	8005a40 <iprintf>
 800099c:	e006      	b.n	80009ac <main+0xb0>
	  }
	  else
	  {
		  while(HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 800099e:	bf00      	nop
 80009a0:	482f      	ldr	r0, [pc, #188]	; (8000a60 <main+0x164>)
 80009a2:	f001 fdb5 	bl	8002510 <HAL_I2C_GetState>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b20      	cmp	r3, #32
 80009aa:	d1f9      	bne.n	80009a0 <main+0xa4>
  for(slave_address = 1; slave_address < 128; slave_address++)
 80009ac:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80009b0:	3301      	adds	r3, #1
 80009b2:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 80009b6:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	daca      	bge.n	8000954 <main+0x58>
	  }
  }
  printf("==================\r\n");
 80009be:	4827      	ldr	r0, [pc, #156]	; (8000a5c <main+0x160>)
 80009c0:	f005 f8c4 	bl	8005b4c <puts>
  printf("End Scanning\r\n");
 80009c4:	4828      	ldr	r0, [pc, #160]	; (8000a68 <main+0x16c>)
 80009c6:	f005 f8c1 	bl	8005b4c <puts>

  for(int i = 0; i < numSensors; i++)
 80009ca:	2300      	movs	r3, #0
 80009cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80009d0:	e00d      	b.n	80009ee <main+0xf2>
  {
	  printf("result : [0x%X]\r\n", sensors[i]);
 80009d2:	463a      	mov	r2, r7
 80009d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80009d8:	4413      	add	r3, r2
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	4619      	mov	r1, r3
 80009de:	4823      	ldr	r0, [pc, #140]	; (8000a6c <main+0x170>)
 80009e0:	f005 f82e 	bl	8005a40 <iprintf>
  for(int i = 0; i < numSensors; i++)
 80009e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80009e8:	3301      	adds	r3, #1
 80009ea:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80009ee:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 80009f2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80009f6:	429a      	cmp	r2, r3
 80009f8:	dbeb      	blt.n	80009d2 <main+0xd6>
  }

  while (1)
  {

	  state = HAL_I2C_Mem_Read(&hi2c1, 0xE5, 0x32, 1, buffer, 1, HAL_MAX_DELAY);
 80009fa:	f04f 33ff 	mov.w	r3, #4294967295
 80009fe:	9302      	str	r3, [sp, #8]
 8000a00:	2301      	movs	r3, #1
 8000a02:	9301      	str	r3, [sp, #4]
 8000a04:	4b1a      	ldr	r3, [pc, #104]	; (8000a70 <main+0x174>)
 8000a06:	9300      	str	r3, [sp, #0]
 8000a08:	2301      	movs	r3, #1
 8000a0a:	2232      	movs	r2, #50	; 0x32
 8000a0c:	21e5      	movs	r1, #229	; 0xe5
 8000a0e:	4814      	ldr	r0, [pc, #80]	; (8000a60 <main+0x164>)
 8000a10:	f000 ffaa 	bl	8001968 <HAL_I2C_Mem_Read>
 8000a14:	4603      	mov	r3, r0
 8000a16:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	  if(state != HAL_OK) while(HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8000a1a:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d007      	beq.n	8000a32 <main+0x136>
 8000a22:	bf00      	nop
 8000a24:	480e      	ldr	r0, [pc, #56]	; (8000a60 <main+0x164>)
 8000a26:	f001 fd73 	bl	8002510 <HAL_I2C_GetState>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b20      	cmp	r3, #32
 8000a2e:	d1f9      	bne.n	8000a24 <main+0x128>
 8000a30:	e00b      	b.n	8000a4a <main+0x14e>
	  else if(state == HAL_OK)
 8000a32:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d107      	bne.n	8000a4a <main+0x14e>
	  {
		  printf("Memory address : 0x%X\r\n", 0x32);
 8000a3a:	2132      	movs	r1, #50	; 0x32
 8000a3c:	480d      	ldr	r0, [pc, #52]	; (8000a74 <main+0x178>)
 8000a3e:	f004 ffff 	bl	8005a40 <iprintf>
		  printf("%s\r\n", buffer);	// get 8bits ?
 8000a42:	490b      	ldr	r1, [pc, #44]	; (8000a70 <main+0x174>)
 8000a44:	480c      	ldr	r0, [pc, #48]	; (8000a78 <main+0x17c>)
 8000a46:	f004 fffb 	bl	8005a40 <iprintf>
	  }
	  HAL_Delay(100);
 8000a4a:	2064      	movs	r0, #100	; 0x64
 8000a4c:	f000 faac 	bl	8000fa8 <HAL_Delay>
	  state = HAL_I2C_Mem_Read(&hi2c1, 0xE5, 0x32, 1, buffer, 1, HAL_MAX_DELAY);
 8000a50:	e7d3      	b.n	80009fa <main+0xfe>
 8000a52:	bf00      	nop
 8000a54:	08006adc 	.word	0x08006adc
 8000a58:	08006a60 	.word	0x08006a60
 8000a5c:	08006a70 	.word	0x08006a70
 8000a60:	2000008c 	.word	0x2000008c
 8000a64:	08006a84 	.word	0x08006a84
 8000a68:	08006a98 	.word	0x08006a98
 8000a6c:	08006aa8 	.word	0x08006aa8
 8000a70:	200000e0 	.word	0x200000e0
 8000a74:	08006abc 	.word	0x08006abc
 8000a78:	08006ad4 	.word	0x08006ad4

08000a7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b094      	sub	sp, #80	; 0x50
 8000a80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a82:	f107 0320 	add.w	r3, r7, #32
 8000a86:	2230      	movs	r2, #48	; 0x30
 8000a88:	2100      	movs	r1, #0
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f004 ffd0 	bl	8005a30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a90:	f107 030c 	add.w	r3, r7, #12
 8000a94:	2200      	movs	r2, #0
 8000a96:	601a      	str	r2, [r3, #0]
 8000a98:	605a      	str	r2, [r3, #4]
 8000a9a:	609a      	str	r2, [r3, #8]
 8000a9c:	60da      	str	r2, [r3, #12]
 8000a9e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	60bb      	str	r3, [r7, #8]
 8000aa4:	4b2b      	ldr	r3, [pc, #172]	; (8000b54 <SystemClock_Config+0xd8>)
 8000aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa8:	4a2a      	ldr	r2, [pc, #168]	; (8000b54 <SystemClock_Config+0xd8>)
 8000aaa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aae:	6413      	str	r3, [r2, #64]	; 0x40
 8000ab0:	4b28      	ldr	r3, [pc, #160]	; (8000b54 <SystemClock_Config+0xd8>)
 8000ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ab8:	60bb      	str	r3, [r7, #8]
 8000aba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000abc:	2300      	movs	r3, #0
 8000abe:	607b      	str	r3, [r7, #4]
 8000ac0:	4b25      	ldr	r3, [pc, #148]	; (8000b58 <SystemClock_Config+0xdc>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4a24      	ldr	r2, [pc, #144]	; (8000b58 <SystemClock_Config+0xdc>)
 8000ac6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000aca:	6013      	str	r3, [r2, #0]
 8000acc:	4b22      	ldr	r3, [pc, #136]	; (8000b58 <SystemClock_Config+0xdc>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ad4:	607b      	str	r3, [r7, #4]
 8000ad6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ad8:	2301      	movs	r3, #1
 8000ada:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000adc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000ae0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ae2:	2302      	movs	r3, #2
 8000ae4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ae6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000aea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000aec:	2304      	movs	r3, #4
 8000aee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000af0:	23b4      	movs	r3, #180	; 0xb4
 8000af2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000af4:	2302      	movs	r3, #2
 8000af6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000af8:	2304      	movs	r3, #4
 8000afa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000afc:	f107 0320 	add.w	r3, r7, #32
 8000b00:	4618      	mov	r0, r3
 8000b02:	f003 fabf 	bl	8004084 <HAL_RCC_OscConfig>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000b0c:	f000 f826 	bl	8000b5c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000b10:	f003 fa68 	bl	8003fe4 <HAL_PWREx_EnableOverDrive>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000b1a:	f000 f81f 	bl	8000b5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b1e:	230f      	movs	r3, #15
 8000b20:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b22:	2302      	movs	r3, #2
 8000b24:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b26:	2300      	movs	r3, #0
 8000b28:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b2a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b2e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b34:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000b36:	f107 030c 	add.w	r3, r7, #12
 8000b3a:	2105      	movs	r1, #5
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f003 fd19 	bl	8004574 <HAL_RCC_ClockConfig>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000b48:	f000 f808 	bl	8000b5c <Error_Handler>
  }
}
 8000b4c:	bf00      	nop
 8000b4e:	3750      	adds	r7, #80	; 0x50
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	40023800 	.word	0x40023800
 8000b58:	40007000 	.word	0x40007000

08000b5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b60:	b672      	cpsid	i
}
 8000b62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b64:	e7fe      	b.n	8000b64 <Error_Handler+0x8>
	...

08000b68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b083      	sub	sp, #12
 8000b6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b6e:	2300      	movs	r3, #0
 8000b70:	607b      	str	r3, [r7, #4]
 8000b72:	4b10      	ldr	r3, [pc, #64]	; (8000bb4 <HAL_MspInit+0x4c>)
 8000b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b76:	4a0f      	ldr	r2, [pc, #60]	; (8000bb4 <HAL_MspInit+0x4c>)
 8000b78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b7c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b7e:	4b0d      	ldr	r3, [pc, #52]	; (8000bb4 <HAL_MspInit+0x4c>)
 8000b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b86:	607b      	str	r3, [r7, #4]
 8000b88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	603b      	str	r3, [r7, #0]
 8000b8e:	4b09      	ldr	r3, [pc, #36]	; (8000bb4 <HAL_MspInit+0x4c>)
 8000b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b92:	4a08      	ldr	r2, [pc, #32]	; (8000bb4 <HAL_MspInit+0x4c>)
 8000b94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b98:	6413      	str	r3, [r2, #64]	; 0x40
 8000b9a:	4b06      	ldr	r3, [pc, #24]	; (8000bb4 <HAL_MspInit+0x4c>)
 8000b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ba2:	603b      	str	r3, [r7, #0]
 8000ba4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ba6:	bf00      	nop
 8000ba8:	370c      	adds	r7, #12
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	40023800 	.word	0x40023800

08000bb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bbc:	e7fe      	b.n	8000bbc <NMI_Handler+0x4>

08000bbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bc2:	e7fe      	b.n	8000bc2 <HardFault_Handler+0x4>

08000bc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bc8:	e7fe      	b.n	8000bc8 <MemManage_Handler+0x4>

08000bca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bca:	b480      	push	{r7}
 8000bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bce:	e7fe      	b.n	8000bce <BusFault_Handler+0x4>

08000bd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bd4:	e7fe      	b.n	8000bd4 <UsageFault_Handler+0x4>

08000bd6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bda:	bf00      	nop
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr

08000be4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000be8:	bf00      	nop
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr

08000bf2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bf2:	b480      	push	{r7}
 8000bf4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bf6:	bf00      	nop
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr

08000c00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c04:	f000 f9b0 	bl	8000f68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c08:	bf00      	nop
 8000c0a:	bd80      	pop	{r7, pc}

08000c0c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000c10:	4802      	ldr	r0, [pc, #8]	; (8000c1c <I2C1_EV_IRQHandler+0x10>)
 8000c12:	f001 f9fd 	bl	8002010 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000c16:	bf00      	nop
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	2000008c 	.word	0x2000008c

08000c20 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000c24:	4802      	ldr	r0, [pc, #8]	; (8000c30 <I2C1_ER_IRQHandler+0x10>)
 8000c26:	f001 fb64 	bl	80022f2 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	2000008c 	.word	0x2000008c

08000c34 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000c38:	4802      	ldr	r0, [pc, #8]	; (8000c44 <USART3_IRQHandler+0x10>)
 8000c3a:	f003 ff9b 	bl	8004b74 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000c3e:	bf00      	nop
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	20000164 	.word	0x20000164

08000c48 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b086      	sub	sp, #24
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	60f8      	str	r0, [r7, #12]
 8000c50:	60b9      	str	r1, [r7, #8]
 8000c52:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c54:	2300      	movs	r3, #0
 8000c56:	617b      	str	r3, [r7, #20]
 8000c58:	e00a      	b.n	8000c70 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000c5a:	f3af 8000 	nop.w
 8000c5e:	4601      	mov	r1, r0
 8000c60:	68bb      	ldr	r3, [r7, #8]
 8000c62:	1c5a      	adds	r2, r3, #1
 8000c64:	60ba      	str	r2, [r7, #8]
 8000c66:	b2ca      	uxtb	r2, r1
 8000c68:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c6a:	697b      	ldr	r3, [r7, #20]
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	617b      	str	r3, [r7, #20]
 8000c70:	697a      	ldr	r2, [r7, #20]
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	429a      	cmp	r2, r3
 8000c76:	dbf0      	blt.n	8000c5a <_read+0x12>
	}

return len;
 8000c78:	687b      	ldr	r3, [r7, #4]
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	3718      	adds	r7, #24
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}

08000c82 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000c82:	b480      	push	{r7}
 8000c84:	b083      	sub	sp, #12
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	6078      	str	r0, [r7, #4]
	return -1;
 8000c8a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	370c      	adds	r7, #12
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr

08000c9a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c9a:	b480      	push	{r7}
 8000c9c:	b083      	sub	sp, #12
 8000c9e:	af00      	add	r7, sp, #0
 8000ca0:	6078      	str	r0, [r7, #4]
 8000ca2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000caa:	605a      	str	r2, [r3, #4]
	return 0;
 8000cac:	2300      	movs	r3, #0
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	370c      	adds	r7, #12
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr

08000cba <_isatty>:

int _isatty(int file)
{
 8000cba:	b480      	push	{r7}
 8000cbc:	b083      	sub	sp, #12
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	6078      	str	r0, [r7, #4]
	return 1;
 8000cc2:	2301      	movs	r3, #1
}
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	370c      	adds	r7, #12
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr

08000cd0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b085      	sub	sp, #20
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	60f8      	str	r0, [r7, #12]
 8000cd8:	60b9      	str	r1, [r7, #8]
 8000cda:	607a      	str	r2, [r7, #4]
	return 0;
 8000cdc:	2300      	movs	r3, #0
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	3714      	adds	r7, #20
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr
	...

08000cec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b086      	sub	sp, #24
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cf4:	4a14      	ldr	r2, [pc, #80]	; (8000d48 <_sbrk+0x5c>)
 8000cf6:	4b15      	ldr	r3, [pc, #84]	; (8000d4c <_sbrk+0x60>)
 8000cf8:	1ad3      	subs	r3, r2, r3
 8000cfa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d00:	4b13      	ldr	r3, [pc, #76]	; (8000d50 <_sbrk+0x64>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d102      	bne.n	8000d0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d08:	4b11      	ldr	r3, [pc, #68]	; (8000d50 <_sbrk+0x64>)
 8000d0a:	4a12      	ldr	r2, [pc, #72]	; (8000d54 <_sbrk+0x68>)
 8000d0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d0e:	4b10      	ldr	r3, [pc, #64]	; (8000d50 <_sbrk+0x64>)
 8000d10:	681a      	ldr	r2, [r3, #0]
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	4413      	add	r3, r2
 8000d16:	693a      	ldr	r2, [r7, #16]
 8000d18:	429a      	cmp	r2, r3
 8000d1a:	d207      	bcs.n	8000d2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d1c:	f004 fe5e 	bl	80059dc <__errno>
 8000d20:	4603      	mov	r3, r0
 8000d22:	220c      	movs	r2, #12
 8000d24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d26:	f04f 33ff 	mov.w	r3, #4294967295
 8000d2a:	e009      	b.n	8000d40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d2c:	4b08      	ldr	r3, [pc, #32]	; (8000d50 <_sbrk+0x64>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d32:	4b07      	ldr	r3, [pc, #28]	; (8000d50 <_sbrk+0x64>)
 8000d34:	681a      	ldr	r2, [r3, #0]
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	4413      	add	r3, r2
 8000d3a:	4a05      	ldr	r2, [pc, #20]	; (8000d50 <_sbrk+0x64>)
 8000d3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d3e:	68fb      	ldr	r3, [r7, #12]
}
 8000d40:	4618      	mov	r0, r3
 8000d42:	3718      	adds	r7, #24
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	20030000 	.word	0x20030000
 8000d4c:	00000400 	.word	0x00000400
 8000d50:	20000160 	.word	0x20000160
 8000d54:	200001c0 	.word	0x200001c0

08000d58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d5c:	4b06      	ldr	r3, [pc, #24]	; (8000d78 <SystemInit+0x20>)
 8000d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d62:	4a05      	ldr	r2, [pc, #20]	; (8000d78 <SystemInit+0x20>)
 8000d64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d6c:	bf00      	nop
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	e000ed00 	.word	0xe000ed00

08000d7c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d80:	4b11      	ldr	r3, [pc, #68]	; (8000dc8 <MX_USART3_UART_Init+0x4c>)
 8000d82:	4a12      	ldr	r2, [pc, #72]	; (8000dcc <MX_USART3_UART_Init+0x50>)
 8000d84:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000d86:	4b10      	ldr	r3, [pc, #64]	; (8000dc8 <MX_USART3_UART_Init+0x4c>)
 8000d88:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d8c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d8e:	4b0e      	ldr	r3, [pc, #56]	; (8000dc8 <MX_USART3_UART_Init+0x4c>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d94:	4b0c      	ldr	r3, [pc, #48]	; (8000dc8 <MX_USART3_UART_Init+0x4c>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d9a:	4b0b      	ldr	r3, [pc, #44]	; (8000dc8 <MX_USART3_UART_Init+0x4c>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000da0:	4b09      	ldr	r3, [pc, #36]	; (8000dc8 <MX_USART3_UART_Init+0x4c>)
 8000da2:	220c      	movs	r2, #12
 8000da4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000da6:	4b08      	ldr	r3, [pc, #32]	; (8000dc8 <MX_USART3_UART_Init+0x4c>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dac:	4b06      	ldr	r3, [pc, #24]	; (8000dc8 <MX_USART3_UART_Init+0x4c>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000db2:	4805      	ldr	r0, [pc, #20]	; (8000dc8 <MX_USART3_UART_Init+0x4c>)
 8000db4:	f003 fdfe 	bl	80049b4 <HAL_UART_Init>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000dbe:	f7ff fecd 	bl	8000b5c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000dc2:	bf00      	nop
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	20000164 	.word	0x20000164
 8000dcc:	40004800 	.word	0x40004800

08000dd0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b08a      	sub	sp, #40	; 0x28
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd8:	f107 0314 	add.w	r3, r7, #20
 8000ddc:	2200      	movs	r2, #0
 8000dde:	601a      	str	r2, [r3, #0]
 8000de0:	605a      	str	r2, [r3, #4]
 8000de2:	609a      	str	r2, [r3, #8]
 8000de4:	60da      	str	r2, [r3, #12]
 8000de6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a1d      	ldr	r2, [pc, #116]	; (8000e64 <HAL_UART_MspInit+0x94>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d134      	bne.n	8000e5c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000df2:	2300      	movs	r3, #0
 8000df4:	613b      	str	r3, [r7, #16]
 8000df6:	4b1c      	ldr	r3, [pc, #112]	; (8000e68 <HAL_UART_MspInit+0x98>)
 8000df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfa:	4a1b      	ldr	r2, [pc, #108]	; (8000e68 <HAL_UART_MspInit+0x98>)
 8000dfc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e00:	6413      	str	r3, [r2, #64]	; 0x40
 8000e02:	4b19      	ldr	r3, [pc, #100]	; (8000e68 <HAL_UART_MspInit+0x98>)
 8000e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e0a:	613b      	str	r3, [r7, #16]
 8000e0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e0e:	2300      	movs	r3, #0
 8000e10:	60fb      	str	r3, [r7, #12]
 8000e12:	4b15      	ldr	r3, [pc, #84]	; (8000e68 <HAL_UART_MspInit+0x98>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e16:	4a14      	ldr	r2, [pc, #80]	; (8000e68 <HAL_UART_MspInit+0x98>)
 8000e18:	f043 0302 	orr.w	r3, r3, #2
 8000e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e1e:	4b12      	ldr	r3, [pc, #72]	; (8000e68 <HAL_UART_MspInit+0x98>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e22:	f003 0302 	and.w	r3, r3, #2
 8000e26:	60fb      	str	r3, [r7, #12]
 8000e28:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000e2a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000e2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e30:	2302      	movs	r3, #2
 8000e32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e34:	2300      	movs	r3, #0
 8000e36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e38:	2303      	movs	r3, #3
 8000e3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e3c:	2307      	movs	r3, #7
 8000e3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e40:	f107 0314 	add.w	r3, r7, #20
 8000e44:	4619      	mov	r1, r3
 8000e46:	4809      	ldr	r0, [pc, #36]	; (8000e6c <HAL_UART_MspInit+0x9c>)
 8000e48:	f000 fa84 	bl	8001354 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	2100      	movs	r1, #0
 8000e50:	2027      	movs	r0, #39	; 0x27
 8000e52:	f000 f9a8 	bl	80011a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000e56:	2027      	movs	r0, #39	; 0x27
 8000e58:	f000 f9c1 	bl	80011de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000e5c:	bf00      	nop
 8000e5e:	3728      	adds	r7, #40	; 0x28
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	40004800 	.word	0x40004800
 8000e68:	40023800 	.word	0x40023800
 8000e6c:	40020400 	.word	0x40020400

08000e70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000e70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ea8 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e74:	480d      	ldr	r0, [pc, #52]	; (8000eac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e76:	490e      	ldr	r1, [pc, #56]	; (8000eb0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e78:	4a0e      	ldr	r2, [pc, #56]	; (8000eb4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e7c:	e002      	b.n	8000e84 <LoopCopyDataInit>

08000e7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e82:	3304      	adds	r3, #4

08000e84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e88:	d3f9      	bcc.n	8000e7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e8a:	4a0b      	ldr	r2, [pc, #44]	; (8000eb8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e8c:	4c0b      	ldr	r4, [pc, #44]	; (8000ebc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e90:	e001      	b.n	8000e96 <LoopFillZerobss>

08000e92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e94:	3204      	adds	r2, #4

08000e96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e98:	d3fb      	bcc.n	8000e92 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e9a:	f7ff ff5d 	bl	8000d58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e9e:	f004 fda3 	bl	80059e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ea2:	f7ff fd2b 	bl	80008fc <main>
  bx  lr    
 8000ea6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000ea8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000eac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000eb0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000eb4:	08006ba0 	.word	0x08006ba0
  ldr r2, =_sbss
 8000eb8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000ebc:	200001bc 	.word	0x200001bc

08000ec0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ec0:	e7fe      	b.n	8000ec0 <ADC_IRQHandler>
	...

08000ec4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ec8:	4b0e      	ldr	r3, [pc, #56]	; (8000f04 <HAL_Init+0x40>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a0d      	ldr	r2, [pc, #52]	; (8000f04 <HAL_Init+0x40>)
 8000ece:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ed2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ed4:	4b0b      	ldr	r3, [pc, #44]	; (8000f04 <HAL_Init+0x40>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a0a      	ldr	r2, [pc, #40]	; (8000f04 <HAL_Init+0x40>)
 8000eda:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ede:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ee0:	4b08      	ldr	r3, [pc, #32]	; (8000f04 <HAL_Init+0x40>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a07      	ldr	r2, [pc, #28]	; (8000f04 <HAL_Init+0x40>)
 8000ee6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eec:	2003      	movs	r0, #3
 8000eee:	f000 f94f 	bl	8001190 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ef2:	2000      	movs	r0, #0
 8000ef4:	f000 f808 	bl	8000f08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ef8:	f7ff fe36 	bl	8000b68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000efc:	2300      	movs	r3, #0
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	40023c00 	.word	0x40023c00

08000f08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f10:	4b12      	ldr	r3, [pc, #72]	; (8000f5c <HAL_InitTick+0x54>)
 8000f12:	681a      	ldr	r2, [r3, #0]
 8000f14:	4b12      	ldr	r3, [pc, #72]	; (8000f60 <HAL_InitTick+0x58>)
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	4619      	mov	r1, r3
 8000f1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f22:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f26:	4618      	mov	r0, r3
 8000f28:	f000 f967 	bl	80011fa <HAL_SYSTICK_Config>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f32:	2301      	movs	r3, #1
 8000f34:	e00e      	b.n	8000f54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	2b0f      	cmp	r3, #15
 8000f3a:	d80a      	bhi.n	8000f52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	6879      	ldr	r1, [r7, #4]
 8000f40:	f04f 30ff 	mov.w	r0, #4294967295
 8000f44:	f000 f92f 	bl	80011a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f48:	4a06      	ldr	r2, [pc, #24]	; (8000f64 <HAL_InitTick+0x5c>)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	e000      	b.n	8000f54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f52:	2301      	movs	r3, #1
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	3708      	adds	r7, #8
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	20000000 	.word	0x20000000
 8000f60:	20000008 	.word	0x20000008
 8000f64:	20000004 	.word	0x20000004

08000f68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f6c:	4b06      	ldr	r3, [pc, #24]	; (8000f88 <HAL_IncTick+0x20>)
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	461a      	mov	r2, r3
 8000f72:	4b06      	ldr	r3, [pc, #24]	; (8000f8c <HAL_IncTick+0x24>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4413      	add	r3, r2
 8000f78:	4a04      	ldr	r2, [pc, #16]	; (8000f8c <HAL_IncTick+0x24>)
 8000f7a:	6013      	str	r3, [r2, #0]
}
 8000f7c:	bf00      	nop
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	20000008 	.word	0x20000008
 8000f8c:	200001a8 	.word	0x200001a8

08000f90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  return uwTick;
 8000f94:	4b03      	ldr	r3, [pc, #12]	; (8000fa4 <HAL_GetTick+0x14>)
 8000f96:	681b      	ldr	r3, [r3, #0]
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	200001a8 	.word	0x200001a8

08000fa8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fb0:	f7ff ffee 	bl	8000f90 <HAL_GetTick>
 8000fb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fc0:	d005      	beq.n	8000fce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fc2:	4b0a      	ldr	r3, [pc, #40]	; (8000fec <HAL_Delay+0x44>)
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	461a      	mov	r2, r3
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	4413      	add	r3, r2
 8000fcc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fce:	bf00      	nop
 8000fd0:	f7ff ffde 	bl	8000f90 <HAL_GetTick>
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	68bb      	ldr	r3, [r7, #8]
 8000fd8:	1ad3      	subs	r3, r2, r3
 8000fda:	68fa      	ldr	r2, [r7, #12]
 8000fdc:	429a      	cmp	r2, r3
 8000fde:	d8f7      	bhi.n	8000fd0 <HAL_Delay+0x28>
  {
  }
}
 8000fe0:	bf00      	nop
 8000fe2:	bf00      	nop
 8000fe4:	3710      	adds	r7, #16
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	20000008 	.word	0x20000008

08000ff0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b085      	sub	sp, #20
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	f003 0307 	and.w	r3, r3, #7
 8000ffe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001000:	4b0c      	ldr	r3, [pc, #48]	; (8001034 <__NVIC_SetPriorityGrouping+0x44>)
 8001002:	68db      	ldr	r3, [r3, #12]
 8001004:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001006:	68ba      	ldr	r2, [r7, #8]
 8001008:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800100c:	4013      	ands	r3, r2
 800100e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001018:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800101c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001020:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001022:	4a04      	ldr	r2, [pc, #16]	; (8001034 <__NVIC_SetPriorityGrouping+0x44>)
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	60d3      	str	r3, [r2, #12]
}
 8001028:	bf00      	nop
 800102a:	3714      	adds	r7, #20
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr
 8001034:	e000ed00 	.word	0xe000ed00

08001038 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800103c:	4b04      	ldr	r3, [pc, #16]	; (8001050 <__NVIC_GetPriorityGrouping+0x18>)
 800103e:	68db      	ldr	r3, [r3, #12]
 8001040:	0a1b      	lsrs	r3, r3, #8
 8001042:	f003 0307 	and.w	r3, r3, #7
}
 8001046:	4618      	mov	r0, r3
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr
 8001050:	e000ed00 	.word	0xe000ed00

08001054 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	4603      	mov	r3, r0
 800105c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800105e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001062:	2b00      	cmp	r3, #0
 8001064:	db0b      	blt.n	800107e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001066:	79fb      	ldrb	r3, [r7, #7]
 8001068:	f003 021f 	and.w	r2, r3, #31
 800106c:	4907      	ldr	r1, [pc, #28]	; (800108c <__NVIC_EnableIRQ+0x38>)
 800106e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001072:	095b      	lsrs	r3, r3, #5
 8001074:	2001      	movs	r0, #1
 8001076:	fa00 f202 	lsl.w	r2, r0, r2
 800107a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800107e:	bf00      	nop
 8001080:	370c      	adds	r7, #12
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop
 800108c:	e000e100 	.word	0xe000e100

08001090 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	4603      	mov	r3, r0
 8001098:	6039      	str	r1, [r7, #0]
 800109a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800109c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	db0a      	blt.n	80010ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	b2da      	uxtb	r2, r3
 80010a8:	490c      	ldr	r1, [pc, #48]	; (80010dc <__NVIC_SetPriority+0x4c>)
 80010aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ae:	0112      	lsls	r2, r2, #4
 80010b0:	b2d2      	uxtb	r2, r2
 80010b2:	440b      	add	r3, r1
 80010b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010b8:	e00a      	b.n	80010d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	b2da      	uxtb	r2, r3
 80010be:	4908      	ldr	r1, [pc, #32]	; (80010e0 <__NVIC_SetPriority+0x50>)
 80010c0:	79fb      	ldrb	r3, [r7, #7]
 80010c2:	f003 030f 	and.w	r3, r3, #15
 80010c6:	3b04      	subs	r3, #4
 80010c8:	0112      	lsls	r2, r2, #4
 80010ca:	b2d2      	uxtb	r2, r2
 80010cc:	440b      	add	r3, r1
 80010ce:	761a      	strb	r2, [r3, #24]
}
 80010d0:	bf00      	nop
 80010d2:	370c      	adds	r7, #12
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr
 80010dc:	e000e100 	.word	0xe000e100
 80010e0:	e000ed00 	.word	0xe000ed00

080010e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b089      	sub	sp, #36	; 0x24
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	60f8      	str	r0, [r7, #12]
 80010ec:	60b9      	str	r1, [r7, #8]
 80010ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	f003 0307 	and.w	r3, r3, #7
 80010f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010f8:	69fb      	ldr	r3, [r7, #28]
 80010fa:	f1c3 0307 	rsb	r3, r3, #7
 80010fe:	2b04      	cmp	r3, #4
 8001100:	bf28      	it	cs
 8001102:	2304      	movcs	r3, #4
 8001104:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	3304      	adds	r3, #4
 800110a:	2b06      	cmp	r3, #6
 800110c:	d902      	bls.n	8001114 <NVIC_EncodePriority+0x30>
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	3b03      	subs	r3, #3
 8001112:	e000      	b.n	8001116 <NVIC_EncodePriority+0x32>
 8001114:	2300      	movs	r3, #0
 8001116:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001118:	f04f 32ff 	mov.w	r2, #4294967295
 800111c:	69bb      	ldr	r3, [r7, #24]
 800111e:	fa02 f303 	lsl.w	r3, r2, r3
 8001122:	43da      	mvns	r2, r3
 8001124:	68bb      	ldr	r3, [r7, #8]
 8001126:	401a      	ands	r2, r3
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800112c:	f04f 31ff 	mov.w	r1, #4294967295
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	fa01 f303 	lsl.w	r3, r1, r3
 8001136:	43d9      	mvns	r1, r3
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800113c:	4313      	orrs	r3, r2
         );
}
 800113e:	4618      	mov	r0, r3
 8001140:	3724      	adds	r7, #36	; 0x24
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
	...

0800114c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	3b01      	subs	r3, #1
 8001158:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800115c:	d301      	bcc.n	8001162 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800115e:	2301      	movs	r3, #1
 8001160:	e00f      	b.n	8001182 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001162:	4a0a      	ldr	r2, [pc, #40]	; (800118c <SysTick_Config+0x40>)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	3b01      	subs	r3, #1
 8001168:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800116a:	210f      	movs	r1, #15
 800116c:	f04f 30ff 	mov.w	r0, #4294967295
 8001170:	f7ff ff8e 	bl	8001090 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001174:	4b05      	ldr	r3, [pc, #20]	; (800118c <SysTick_Config+0x40>)
 8001176:	2200      	movs	r2, #0
 8001178:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800117a:	4b04      	ldr	r3, [pc, #16]	; (800118c <SysTick_Config+0x40>)
 800117c:	2207      	movs	r2, #7
 800117e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001180:	2300      	movs	r3, #0
}
 8001182:	4618      	mov	r0, r3
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	e000e010 	.word	0xe000e010

08001190 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001198:	6878      	ldr	r0, [r7, #4]
 800119a:	f7ff ff29 	bl	8000ff0 <__NVIC_SetPriorityGrouping>
}
 800119e:	bf00      	nop
 80011a0:	3708      	adds	r7, #8
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}

080011a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011a6:	b580      	push	{r7, lr}
 80011a8:	b086      	sub	sp, #24
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	4603      	mov	r3, r0
 80011ae:	60b9      	str	r1, [r7, #8]
 80011b0:	607a      	str	r2, [r7, #4]
 80011b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011b4:	2300      	movs	r3, #0
 80011b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011b8:	f7ff ff3e 	bl	8001038 <__NVIC_GetPriorityGrouping>
 80011bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011be:	687a      	ldr	r2, [r7, #4]
 80011c0:	68b9      	ldr	r1, [r7, #8]
 80011c2:	6978      	ldr	r0, [r7, #20]
 80011c4:	f7ff ff8e 	bl	80010e4 <NVIC_EncodePriority>
 80011c8:	4602      	mov	r2, r0
 80011ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011ce:	4611      	mov	r1, r2
 80011d0:	4618      	mov	r0, r3
 80011d2:	f7ff ff5d 	bl	8001090 <__NVIC_SetPriority>
}
 80011d6:	bf00      	nop
 80011d8:	3718      	adds	r7, #24
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}

080011de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011de:	b580      	push	{r7, lr}
 80011e0:	b082      	sub	sp, #8
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	4603      	mov	r3, r0
 80011e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ec:	4618      	mov	r0, r3
 80011ee:	f7ff ff31 	bl	8001054 <__NVIC_EnableIRQ>
}
 80011f2:	bf00      	nop
 80011f4:	3708      	adds	r7, #8
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}

080011fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011fa:	b580      	push	{r7, lr}
 80011fc:	b082      	sub	sp, #8
 80011fe:	af00      	add	r7, sp, #0
 8001200:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001202:	6878      	ldr	r0, [r7, #4]
 8001204:	f7ff ffa2 	bl	800114c <SysTick_Config>
 8001208:	4603      	mov	r3, r0
}
 800120a:	4618      	mov	r0, r3
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}

08001212 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001212:	b580      	push	{r7, lr}
 8001214:	b084      	sub	sp, #16
 8001216:	af00      	add	r7, sp, #0
 8001218:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800121e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001220:	f7ff feb6 	bl	8000f90 <HAL_GetTick>
 8001224:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800122c:	b2db      	uxtb	r3, r3
 800122e:	2b02      	cmp	r3, #2
 8001230:	d008      	beq.n	8001244 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2280      	movs	r2, #128	; 0x80
 8001236:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2200      	movs	r2, #0
 800123c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001240:	2301      	movs	r3, #1
 8001242:	e052      	b.n	80012ea <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f022 0216 	bic.w	r2, r2, #22
 8001252:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	695a      	ldr	r2, [r3, #20]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001262:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001268:	2b00      	cmp	r3, #0
 800126a:	d103      	bne.n	8001274 <HAL_DMA_Abort+0x62>
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001270:	2b00      	cmp	r3, #0
 8001272:	d007      	beq.n	8001284 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	681a      	ldr	r2, [r3, #0]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f022 0208 	bic.w	r2, r2, #8
 8001282:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f022 0201 	bic.w	r2, r2, #1
 8001292:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001294:	e013      	b.n	80012be <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001296:	f7ff fe7b 	bl	8000f90 <HAL_GetTick>
 800129a:	4602      	mov	r2, r0
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	1ad3      	subs	r3, r2, r3
 80012a0:	2b05      	cmp	r3, #5
 80012a2:	d90c      	bls.n	80012be <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2220      	movs	r2, #32
 80012a8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2203      	movs	r2, #3
 80012ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2200      	movs	r2, #0
 80012b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80012ba:	2303      	movs	r3, #3
 80012bc:	e015      	b.n	80012ea <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f003 0301 	and.w	r3, r3, #1
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d1e4      	bne.n	8001296 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012d0:	223f      	movs	r2, #63	; 0x3f
 80012d2:	409a      	lsls	r2, r3
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2201      	movs	r2, #1
 80012dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2200      	movs	r2, #0
 80012e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80012e8:	2300      	movs	r3, #0
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3710      	adds	r7, #16
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}

080012f2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80012f2:	b480      	push	{r7}
 80012f4:	b083      	sub	sp, #12
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001300:	b2db      	uxtb	r3, r3
 8001302:	2b02      	cmp	r3, #2
 8001304:	d004      	beq.n	8001310 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2280      	movs	r2, #128	; 0x80
 800130a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800130c:	2301      	movs	r3, #1
 800130e:	e00c      	b.n	800132a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2205      	movs	r2, #5
 8001314:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f022 0201 	bic.w	r2, r2, #1
 8001326:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001328:	2300      	movs	r3, #0
}
 800132a:	4618      	mov	r0, r3
 800132c:	370c      	adds	r7, #12
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr

08001336 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001336:	b480      	push	{r7}
 8001338:	b083      	sub	sp, #12
 800133a:	af00      	add	r7, sp, #0
 800133c:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001344:	b2db      	uxtb	r3, r3
}
 8001346:	4618      	mov	r0, r3
 8001348:	370c      	adds	r7, #12
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr
	...

08001354 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001354:	b480      	push	{r7}
 8001356:	b089      	sub	sp, #36	; 0x24
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
 800135c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800135e:	2300      	movs	r3, #0
 8001360:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001362:	2300      	movs	r3, #0
 8001364:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001366:	2300      	movs	r3, #0
 8001368:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800136a:	2300      	movs	r3, #0
 800136c:	61fb      	str	r3, [r7, #28]
 800136e:	e177      	b.n	8001660 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001370:	2201      	movs	r2, #1
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	fa02 f303 	lsl.w	r3, r2, r3
 8001378:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	697a      	ldr	r2, [r7, #20]
 8001380:	4013      	ands	r3, r2
 8001382:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001384:	693a      	ldr	r2, [r7, #16]
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	429a      	cmp	r2, r3
 800138a:	f040 8166 	bne.w	800165a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	f003 0303 	and.w	r3, r3, #3
 8001396:	2b01      	cmp	r3, #1
 8001398:	d005      	beq.n	80013a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013a2:	2b02      	cmp	r3, #2
 80013a4:	d130      	bne.n	8001408 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	689b      	ldr	r3, [r3, #8]
 80013aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013ac:	69fb      	ldr	r3, [r7, #28]
 80013ae:	005b      	lsls	r3, r3, #1
 80013b0:	2203      	movs	r2, #3
 80013b2:	fa02 f303 	lsl.w	r3, r2, r3
 80013b6:	43db      	mvns	r3, r3
 80013b8:	69ba      	ldr	r2, [r7, #24]
 80013ba:	4013      	ands	r3, r2
 80013bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	68da      	ldr	r2, [r3, #12]
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	005b      	lsls	r3, r3, #1
 80013c6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ca:	69ba      	ldr	r2, [r7, #24]
 80013cc:	4313      	orrs	r3, r2
 80013ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	69ba      	ldr	r2, [r7, #24]
 80013d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013dc:	2201      	movs	r2, #1
 80013de:	69fb      	ldr	r3, [r7, #28]
 80013e0:	fa02 f303 	lsl.w	r3, r2, r3
 80013e4:	43db      	mvns	r3, r3
 80013e6:	69ba      	ldr	r2, [r7, #24]
 80013e8:	4013      	ands	r3, r2
 80013ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	091b      	lsrs	r3, r3, #4
 80013f2:	f003 0201 	and.w	r2, r3, #1
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	fa02 f303 	lsl.w	r3, r2, r3
 80013fc:	69ba      	ldr	r2, [r7, #24]
 80013fe:	4313      	orrs	r3, r2
 8001400:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	69ba      	ldr	r2, [r7, #24]
 8001406:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f003 0303 	and.w	r3, r3, #3
 8001410:	2b03      	cmp	r3, #3
 8001412:	d017      	beq.n	8001444 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	68db      	ldr	r3, [r3, #12]
 8001418:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	005b      	lsls	r3, r3, #1
 800141e:	2203      	movs	r2, #3
 8001420:	fa02 f303 	lsl.w	r3, r2, r3
 8001424:	43db      	mvns	r3, r3
 8001426:	69ba      	ldr	r2, [r7, #24]
 8001428:	4013      	ands	r3, r2
 800142a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	689a      	ldr	r2, [r3, #8]
 8001430:	69fb      	ldr	r3, [r7, #28]
 8001432:	005b      	lsls	r3, r3, #1
 8001434:	fa02 f303 	lsl.w	r3, r2, r3
 8001438:	69ba      	ldr	r2, [r7, #24]
 800143a:	4313      	orrs	r3, r2
 800143c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	69ba      	ldr	r2, [r7, #24]
 8001442:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f003 0303 	and.w	r3, r3, #3
 800144c:	2b02      	cmp	r3, #2
 800144e:	d123      	bne.n	8001498 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	08da      	lsrs	r2, r3, #3
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	3208      	adds	r2, #8
 8001458:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800145c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	f003 0307 	and.w	r3, r3, #7
 8001464:	009b      	lsls	r3, r3, #2
 8001466:	220f      	movs	r2, #15
 8001468:	fa02 f303 	lsl.w	r3, r2, r3
 800146c:	43db      	mvns	r3, r3
 800146e:	69ba      	ldr	r2, [r7, #24]
 8001470:	4013      	ands	r3, r2
 8001472:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	691a      	ldr	r2, [r3, #16]
 8001478:	69fb      	ldr	r3, [r7, #28]
 800147a:	f003 0307 	and.w	r3, r3, #7
 800147e:	009b      	lsls	r3, r3, #2
 8001480:	fa02 f303 	lsl.w	r3, r2, r3
 8001484:	69ba      	ldr	r2, [r7, #24]
 8001486:	4313      	orrs	r3, r2
 8001488:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	08da      	lsrs	r2, r3, #3
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	3208      	adds	r2, #8
 8001492:	69b9      	ldr	r1, [r7, #24]
 8001494:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800149e:	69fb      	ldr	r3, [r7, #28]
 80014a0:	005b      	lsls	r3, r3, #1
 80014a2:	2203      	movs	r2, #3
 80014a4:	fa02 f303 	lsl.w	r3, r2, r3
 80014a8:	43db      	mvns	r3, r3
 80014aa:	69ba      	ldr	r2, [r7, #24]
 80014ac:	4013      	ands	r3, r2
 80014ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	f003 0203 	and.w	r2, r3, #3
 80014b8:	69fb      	ldr	r3, [r7, #28]
 80014ba:	005b      	lsls	r3, r3, #1
 80014bc:	fa02 f303 	lsl.w	r3, r2, r3
 80014c0:	69ba      	ldr	r2, [r7, #24]
 80014c2:	4313      	orrs	r3, r2
 80014c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	69ba      	ldr	r2, [r7, #24]
 80014ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	f000 80c0 	beq.w	800165a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014da:	2300      	movs	r3, #0
 80014dc:	60fb      	str	r3, [r7, #12]
 80014de:	4b66      	ldr	r3, [pc, #408]	; (8001678 <HAL_GPIO_Init+0x324>)
 80014e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014e2:	4a65      	ldr	r2, [pc, #404]	; (8001678 <HAL_GPIO_Init+0x324>)
 80014e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014e8:	6453      	str	r3, [r2, #68]	; 0x44
 80014ea:	4b63      	ldr	r3, [pc, #396]	; (8001678 <HAL_GPIO_Init+0x324>)
 80014ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014f2:	60fb      	str	r3, [r7, #12]
 80014f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80014f6:	4a61      	ldr	r2, [pc, #388]	; (800167c <HAL_GPIO_Init+0x328>)
 80014f8:	69fb      	ldr	r3, [r7, #28]
 80014fa:	089b      	lsrs	r3, r3, #2
 80014fc:	3302      	adds	r3, #2
 80014fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001502:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001504:	69fb      	ldr	r3, [r7, #28]
 8001506:	f003 0303 	and.w	r3, r3, #3
 800150a:	009b      	lsls	r3, r3, #2
 800150c:	220f      	movs	r2, #15
 800150e:	fa02 f303 	lsl.w	r3, r2, r3
 8001512:	43db      	mvns	r3, r3
 8001514:	69ba      	ldr	r2, [r7, #24]
 8001516:	4013      	ands	r3, r2
 8001518:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	4a58      	ldr	r2, [pc, #352]	; (8001680 <HAL_GPIO_Init+0x32c>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d037      	beq.n	8001592 <HAL_GPIO_Init+0x23e>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	4a57      	ldr	r2, [pc, #348]	; (8001684 <HAL_GPIO_Init+0x330>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d031      	beq.n	800158e <HAL_GPIO_Init+0x23a>
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	4a56      	ldr	r2, [pc, #344]	; (8001688 <HAL_GPIO_Init+0x334>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d02b      	beq.n	800158a <HAL_GPIO_Init+0x236>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4a55      	ldr	r2, [pc, #340]	; (800168c <HAL_GPIO_Init+0x338>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d025      	beq.n	8001586 <HAL_GPIO_Init+0x232>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4a54      	ldr	r2, [pc, #336]	; (8001690 <HAL_GPIO_Init+0x33c>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d01f      	beq.n	8001582 <HAL_GPIO_Init+0x22e>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	4a53      	ldr	r2, [pc, #332]	; (8001694 <HAL_GPIO_Init+0x340>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d019      	beq.n	800157e <HAL_GPIO_Init+0x22a>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	4a52      	ldr	r2, [pc, #328]	; (8001698 <HAL_GPIO_Init+0x344>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d013      	beq.n	800157a <HAL_GPIO_Init+0x226>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	4a51      	ldr	r2, [pc, #324]	; (800169c <HAL_GPIO_Init+0x348>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d00d      	beq.n	8001576 <HAL_GPIO_Init+0x222>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	4a50      	ldr	r2, [pc, #320]	; (80016a0 <HAL_GPIO_Init+0x34c>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d007      	beq.n	8001572 <HAL_GPIO_Init+0x21e>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	4a4f      	ldr	r2, [pc, #316]	; (80016a4 <HAL_GPIO_Init+0x350>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d101      	bne.n	800156e <HAL_GPIO_Init+0x21a>
 800156a:	2309      	movs	r3, #9
 800156c:	e012      	b.n	8001594 <HAL_GPIO_Init+0x240>
 800156e:	230a      	movs	r3, #10
 8001570:	e010      	b.n	8001594 <HAL_GPIO_Init+0x240>
 8001572:	2308      	movs	r3, #8
 8001574:	e00e      	b.n	8001594 <HAL_GPIO_Init+0x240>
 8001576:	2307      	movs	r3, #7
 8001578:	e00c      	b.n	8001594 <HAL_GPIO_Init+0x240>
 800157a:	2306      	movs	r3, #6
 800157c:	e00a      	b.n	8001594 <HAL_GPIO_Init+0x240>
 800157e:	2305      	movs	r3, #5
 8001580:	e008      	b.n	8001594 <HAL_GPIO_Init+0x240>
 8001582:	2304      	movs	r3, #4
 8001584:	e006      	b.n	8001594 <HAL_GPIO_Init+0x240>
 8001586:	2303      	movs	r3, #3
 8001588:	e004      	b.n	8001594 <HAL_GPIO_Init+0x240>
 800158a:	2302      	movs	r3, #2
 800158c:	e002      	b.n	8001594 <HAL_GPIO_Init+0x240>
 800158e:	2301      	movs	r3, #1
 8001590:	e000      	b.n	8001594 <HAL_GPIO_Init+0x240>
 8001592:	2300      	movs	r3, #0
 8001594:	69fa      	ldr	r2, [r7, #28]
 8001596:	f002 0203 	and.w	r2, r2, #3
 800159a:	0092      	lsls	r2, r2, #2
 800159c:	4093      	lsls	r3, r2
 800159e:	69ba      	ldr	r2, [r7, #24]
 80015a0:	4313      	orrs	r3, r2
 80015a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015a4:	4935      	ldr	r1, [pc, #212]	; (800167c <HAL_GPIO_Init+0x328>)
 80015a6:	69fb      	ldr	r3, [r7, #28]
 80015a8:	089b      	lsrs	r3, r3, #2
 80015aa:	3302      	adds	r3, #2
 80015ac:	69ba      	ldr	r2, [r7, #24]
 80015ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015b2:	4b3d      	ldr	r3, [pc, #244]	; (80016a8 <HAL_GPIO_Init+0x354>)
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	43db      	mvns	r3, r3
 80015bc:	69ba      	ldr	r2, [r7, #24]
 80015be:	4013      	ands	r3, r2
 80015c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d003      	beq.n	80015d6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80015ce:	69ba      	ldr	r2, [r7, #24]
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	4313      	orrs	r3, r2
 80015d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015d6:	4a34      	ldr	r2, [pc, #208]	; (80016a8 <HAL_GPIO_Init+0x354>)
 80015d8:	69bb      	ldr	r3, [r7, #24]
 80015da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015dc:	4b32      	ldr	r3, [pc, #200]	; (80016a8 <HAL_GPIO_Init+0x354>)
 80015de:	68db      	ldr	r3, [r3, #12]
 80015e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	43db      	mvns	r3, r3
 80015e6:	69ba      	ldr	r2, [r7, #24]
 80015e8:	4013      	ands	r3, r2
 80015ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d003      	beq.n	8001600 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80015f8:	69ba      	ldr	r2, [r7, #24]
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	4313      	orrs	r3, r2
 80015fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001600:	4a29      	ldr	r2, [pc, #164]	; (80016a8 <HAL_GPIO_Init+0x354>)
 8001602:	69bb      	ldr	r3, [r7, #24]
 8001604:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001606:	4b28      	ldr	r3, [pc, #160]	; (80016a8 <HAL_GPIO_Init+0x354>)
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	43db      	mvns	r3, r3
 8001610:	69ba      	ldr	r2, [r7, #24]
 8001612:	4013      	ands	r3, r2
 8001614:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800161e:	2b00      	cmp	r3, #0
 8001620:	d003      	beq.n	800162a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001622:	69ba      	ldr	r2, [r7, #24]
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	4313      	orrs	r3, r2
 8001628:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800162a:	4a1f      	ldr	r2, [pc, #124]	; (80016a8 <HAL_GPIO_Init+0x354>)
 800162c:	69bb      	ldr	r3, [r7, #24]
 800162e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001630:	4b1d      	ldr	r3, [pc, #116]	; (80016a8 <HAL_GPIO_Init+0x354>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	43db      	mvns	r3, r3
 800163a:	69ba      	ldr	r2, [r7, #24]
 800163c:	4013      	ands	r3, r2
 800163e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001648:	2b00      	cmp	r3, #0
 800164a:	d003      	beq.n	8001654 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800164c:	69ba      	ldr	r2, [r7, #24]
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	4313      	orrs	r3, r2
 8001652:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001654:	4a14      	ldr	r2, [pc, #80]	; (80016a8 <HAL_GPIO_Init+0x354>)
 8001656:	69bb      	ldr	r3, [r7, #24]
 8001658:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	3301      	adds	r3, #1
 800165e:	61fb      	str	r3, [r7, #28]
 8001660:	69fb      	ldr	r3, [r7, #28]
 8001662:	2b0f      	cmp	r3, #15
 8001664:	f67f ae84 	bls.w	8001370 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001668:	bf00      	nop
 800166a:	bf00      	nop
 800166c:	3724      	adds	r7, #36	; 0x24
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	40023800 	.word	0x40023800
 800167c:	40013800 	.word	0x40013800
 8001680:	40020000 	.word	0x40020000
 8001684:	40020400 	.word	0x40020400
 8001688:	40020800 	.word	0x40020800
 800168c:	40020c00 	.word	0x40020c00
 8001690:	40021000 	.word	0x40021000
 8001694:	40021400 	.word	0x40021400
 8001698:	40021800 	.word	0x40021800
 800169c:	40021c00 	.word	0x40021c00
 80016a0:	40022000 	.word	0x40022000
 80016a4:	40022400 	.word	0x40022400
 80016a8:	40013c00 	.word	0x40013c00

080016ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b083      	sub	sp, #12
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
 80016b4:	460b      	mov	r3, r1
 80016b6:	807b      	strh	r3, [r7, #2]
 80016b8:	4613      	mov	r3, r2
 80016ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016bc:	787b      	ldrb	r3, [r7, #1]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d003      	beq.n	80016ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016c2:	887a      	ldrh	r2, [r7, #2]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80016c8:	e003      	b.n	80016d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80016ca:	887b      	ldrh	r3, [r7, #2]
 80016cc:	041a      	lsls	r2, r3, #16
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	619a      	str	r2, [r3, #24]
}
 80016d2:	bf00      	nop
 80016d4:	370c      	adds	r7, #12
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
	...

080016e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b084      	sub	sp, #16
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d101      	bne.n	80016f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	e12b      	b.n	800194a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d106      	bne.n	800170c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2200      	movs	r2, #0
 8001702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001706:	6878      	ldr	r0, [r7, #4]
 8001708:	f7ff f886 	bl	8000818 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2224      	movs	r2, #36	; 0x24
 8001710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f022 0201 	bic.w	r2, r2, #1
 8001722:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001732:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001742:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001744:	f003 f90e 	bl	8004964 <HAL_RCC_GetPCLK1Freq>
 8001748:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	4a81      	ldr	r2, [pc, #516]	; (8001954 <HAL_I2C_Init+0x274>)
 8001750:	4293      	cmp	r3, r2
 8001752:	d807      	bhi.n	8001764 <HAL_I2C_Init+0x84>
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	4a80      	ldr	r2, [pc, #512]	; (8001958 <HAL_I2C_Init+0x278>)
 8001758:	4293      	cmp	r3, r2
 800175a:	bf94      	ite	ls
 800175c:	2301      	movls	r3, #1
 800175e:	2300      	movhi	r3, #0
 8001760:	b2db      	uxtb	r3, r3
 8001762:	e006      	b.n	8001772 <HAL_I2C_Init+0x92>
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	4a7d      	ldr	r2, [pc, #500]	; (800195c <HAL_I2C_Init+0x27c>)
 8001768:	4293      	cmp	r3, r2
 800176a:	bf94      	ite	ls
 800176c:	2301      	movls	r3, #1
 800176e:	2300      	movhi	r3, #0
 8001770:	b2db      	uxtb	r3, r3
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e0e7      	b.n	800194a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	4a78      	ldr	r2, [pc, #480]	; (8001960 <HAL_I2C_Init+0x280>)
 800177e:	fba2 2303 	umull	r2, r3, r2, r3
 8001782:	0c9b      	lsrs	r3, r3, #18
 8001784:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	68ba      	ldr	r2, [r7, #8]
 8001796:	430a      	orrs	r2, r1
 8001798:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	6a1b      	ldr	r3, [r3, #32]
 80017a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	4a6a      	ldr	r2, [pc, #424]	; (8001954 <HAL_I2C_Init+0x274>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d802      	bhi.n	80017b4 <HAL_I2C_Init+0xd4>
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	3301      	adds	r3, #1
 80017b2:	e009      	b.n	80017c8 <HAL_I2C_Init+0xe8>
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80017ba:	fb02 f303 	mul.w	r3, r2, r3
 80017be:	4a69      	ldr	r2, [pc, #420]	; (8001964 <HAL_I2C_Init+0x284>)
 80017c0:	fba2 2303 	umull	r2, r3, r2, r3
 80017c4:	099b      	lsrs	r3, r3, #6
 80017c6:	3301      	adds	r3, #1
 80017c8:	687a      	ldr	r2, [r7, #4]
 80017ca:	6812      	ldr	r2, [r2, #0]
 80017cc:	430b      	orrs	r3, r1
 80017ce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	69db      	ldr	r3, [r3, #28]
 80017d6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80017da:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	495c      	ldr	r1, [pc, #368]	; (8001954 <HAL_I2C_Init+0x274>)
 80017e4:	428b      	cmp	r3, r1
 80017e6:	d819      	bhi.n	800181c <HAL_I2C_Init+0x13c>
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	1e59      	subs	r1, r3, #1
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	005b      	lsls	r3, r3, #1
 80017f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80017f6:	1c59      	adds	r1, r3, #1
 80017f8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80017fc:	400b      	ands	r3, r1
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d00a      	beq.n	8001818 <HAL_I2C_Init+0x138>
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	1e59      	subs	r1, r3, #1
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	005b      	lsls	r3, r3, #1
 800180c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001810:	3301      	adds	r3, #1
 8001812:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001816:	e051      	b.n	80018bc <HAL_I2C_Init+0x1dc>
 8001818:	2304      	movs	r3, #4
 800181a:	e04f      	b.n	80018bc <HAL_I2C_Init+0x1dc>
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d111      	bne.n	8001848 <HAL_I2C_Init+0x168>
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	1e58      	subs	r0, r3, #1
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6859      	ldr	r1, [r3, #4]
 800182c:	460b      	mov	r3, r1
 800182e:	005b      	lsls	r3, r3, #1
 8001830:	440b      	add	r3, r1
 8001832:	fbb0 f3f3 	udiv	r3, r0, r3
 8001836:	3301      	adds	r3, #1
 8001838:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800183c:	2b00      	cmp	r3, #0
 800183e:	bf0c      	ite	eq
 8001840:	2301      	moveq	r3, #1
 8001842:	2300      	movne	r3, #0
 8001844:	b2db      	uxtb	r3, r3
 8001846:	e012      	b.n	800186e <HAL_I2C_Init+0x18e>
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	1e58      	subs	r0, r3, #1
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6859      	ldr	r1, [r3, #4]
 8001850:	460b      	mov	r3, r1
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	440b      	add	r3, r1
 8001856:	0099      	lsls	r1, r3, #2
 8001858:	440b      	add	r3, r1
 800185a:	fbb0 f3f3 	udiv	r3, r0, r3
 800185e:	3301      	adds	r3, #1
 8001860:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001864:	2b00      	cmp	r3, #0
 8001866:	bf0c      	ite	eq
 8001868:	2301      	moveq	r3, #1
 800186a:	2300      	movne	r3, #0
 800186c:	b2db      	uxtb	r3, r3
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <HAL_I2C_Init+0x196>
 8001872:	2301      	movs	r3, #1
 8001874:	e022      	b.n	80018bc <HAL_I2C_Init+0x1dc>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d10e      	bne.n	800189c <HAL_I2C_Init+0x1bc>
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	1e58      	subs	r0, r3, #1
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6859      	ldr	r1, [r3, #4]
 8001886:	460b      	mov	r3, r1
 8001888:	005b      	lsls	r3, r3, #1
 800188a:	440b      	add	r3, r1
 800188c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001890:	3301      	adds	r3, #1
 8001892:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001896:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800189a:	e00f      	b.n	80018bc <HAL_I2C_Init+0x1dc>
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	1e58      	subs	r0, r3, #1
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6859      	ldr	r1, [r3, #4]
 80018a4:	460b      	mov	r3, r1
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	440b      	add	r3, r1
 80018aa:	0099      	lsls	r1, r3, #2
 80018ac:	440b      	add	r3, r1
 80018ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80018b2:	3301      	adds	r3, #1
 80018b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80018bc:	6879      	ldr	r1, [r7, #4]
 80018be:	6809      	ldr	r1, [r1, #0]
 80018c0:	4313      	orrs	r3, r2
 80018c2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	69da      	ldr	r2, [r3, #28]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6a1b      	ldr	r3, [r3, #32]
 80018d6:	431a      	orrs	r2, r3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	430a      	orrs	r2, r1
 80018de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80018ea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80018ee:	687a      	ldr	r2, [r7, #4]
 80018f0:	6911      	ldr	r1, [r2, #16]
 80018f2:	687a      	ldr	r2, [r7, #4]
 80018f4:	68d2      	ldr	r2, [r2, #12]
 80018f6:	4311      	orrs	r1, r2
 80018f8:	687a      	ldr	r2, [r7, #4]
 80018fa:	6812      	ldr	r2, [r2, #0]
 80018fc:	430b      	orrs	r3, r1
 80018fe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	68db      	ldr	r3, [r3, #12]
 8001906:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	695a      	ldr	r2, [r3, #20]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	699b      	ldr	r3, [r3, #24]
 8001912:	431a      	orrs	r2, r3
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	430a      	orrs	r2, r1
 800191a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f042 0201 	orr.w	r2, r2, #1
 800192a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2200      	movs	r2, #0
 8001930:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2220      	movs	r2, #32
 8001936:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2200      	movs	r2, #0
 800193e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2200      	movs	r2, #0
 8001944:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001948:	2300      	movs	r3, #0
}
 800194a:	4618      	mov	r0, r3
 800194c:	3710      	adds	r7, #16
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	000186a0 	.word	0x000186a0
 8001958:	001e847f 	.word	0x001e847f
 800195c:	003d08ff 	.word	0x003d08ff
 8001960:	431bde83 	.word	0x431bde83
 8001964:	10624dd3 	.word	0x10624dd3

08001968 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b08c      	sub	sp, #48	; 0x30
 800196c:	af02      	add	r7, sp, #8
 800196e:	60f8      	str	r0, [r7, #12]
 8001970:	4608      	mov	r0, r1
 8001972:	4611      	mov	r1, r2
 8001974:	461a      	mov	r2, r3
 8001976:	4603      	mov	r3, r0
 8001978:	817b      	strh	r3, [r7, #10]
 800197a:	460b      	mov	r3, r1
 800197c:	813b      	strh	r3, [r7, #8]
 800197e:	4613      	mov	r3, r2
 8001980:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001982:	f7ff fb05 	bl	8000f90 <HAL_GetTick>
 8001986:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800198e:	b2db      	uxtb	r3, r3
 8001990:	2b20      	cmp	r3, #32
 8001992:	f040 8208 	bne.w	8001da6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001998:	9300      	str	r3, [sp, #0]
 800199a:	2319      	movs	r3, #25
 800199c:	2201      	movs	r2, #1
 800199e:	497b      	ldr	r1, [pc, #492]	; (8001b8c <HAL_I2C_Mem_Read+0x224>)
 80019a0:	68f8      	ldr	r0, [r7, #12]
 80019a2:	f002 f8b9 	bl	8003b18 <I2C_WaitOnFlagUntilTimeout>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d001      	beq.n	80019b0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80019ac:	2302      	movs	r3, #2
 80019ae:	e1fb      	b.n	8001da8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019b6:	2b01      	cmp	r3, #1
 80019b8:	d101      	bne.n	80019be <HAL_I2C_Mem_Read+0x56>
 80019ba:	2302      	movs	r3, #2
 80019bc:	e1f4      	b.n	8001da8 <HAL_I2C_Mem_Read+0x440>
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	2201      	movs	r2, #1
 80019c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f003 0301 	and.w	r3, r3, #1
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	d007      	beq.n	80019e4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f042 0201 	orr.w	r2, r2, #1
 80019e2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80019f2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	2222      	movs	r2, #34	; 0x22
 80019f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	2240      	movs	r2, #64	; 0x40
 8001a00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	2200      	movs	r2, #0
 8001a08:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001a0e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001a14:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a1a:	b29a      	uxth	r2, r3
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	4a5b      	ldr	r2, [pc, #364]	; (8001b90 <HAL_I2C_Mem_Read+0x228>)
 8001a24:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001a26:	88f8      	ldrh	r0, [r7, #6]
 8001a28:	893a      	ldrh	r2, [r7, #8]
 8001a2a:	8979      	ldrh	r1, [r7, #10]
 8001a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a2e:	9301      	str	r3, [sp, #4]
 8001a30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a32:	9300      	str	r3, [sp, #0]
 8001a34:	4603      	mov	r3, r0
 8001a36:	68f8      	ldr	r0, [r7, #12]
 8001a38:	f001 fede 	bl	80037f8 <I2C_RequestMemoryRead>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d001      	beq.n	8001a46 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	e1b0      	b.n	8001da8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d113      	bne.n	8001a76 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a4e:	2300      	movs	r3, #0
 8001a50:	623b      	str	r3, [r7, #32]
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	695b      	ldr	r3, [r3, #20]
 8001a58:	623b      	str	r3, [r7, #32]
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	699b      	ldr	r3, [r3, #24]
 8001a60:	623b      	str	r3, [r7, #32]
 8001a62:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a72:	601a      	str	r2, [r3, #0]
 8001a74:	e184      	b.n	8001d80 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	d11b      	bne.n	8001ab6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a8c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a8e:	2300      	movs	r3, #0
 8001a90:	61fb      	str	r3, [r7, #28]
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	695b      	ldr	r3, [r3, #20]
 8001a98:	61fb      	str	r3, [r7, #28]
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	699b      	ldr	r3, [r3, #24]
 8001aa0:	61fb      	str	r3, [r7, #28]
 8001aa2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ab2:	601a      	str	r2, [r3, #0]
 8001ab4:	e164      	b.n	8001d80 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	d11b      	bne.n	8001af6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001acc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001adc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ade:	2300      	movs	r3, #0
 8001ae0:	61bb      	str	r3, [r7, #24]
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	695b      	ldr	r3, [r3, #20]
 8001ae8:	61bb      	str	r3, [r7, #24]
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	699b      	ldr	r3, [r3, #24]
 8001af0:	61bb      	str	r3, [r7, #24]
 8001af2:	69bb      	ldr	r3, [r7, #24]
 8001af4:	e144      	b.n	8001d80 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001af6:	2300      	movs	r3, #0
 8001af8:	617b      	str	r3, [r7, #20]
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	695b      	ldr	r3, [r3, #20]
 8001b00:	617b      	str	r3, [r7, #20]
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	699b      	ldr	r3, [r3, #24]
 8001b08:	617b      	str	r3, [r7, #20]
 8001b0a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001b0c:	e138      	b.n	8001d80 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b12:	2b03      	cmp	r3, #3
 8001b14:	f200 80f1 	bhi.w	8001cfa <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d123      	bne.n	8001b68 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b22:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001b24:	68f8      	ldr	r0, [r7, #12]
 8001b26:	f002 f941 	bl	8003dac <I2C_WaitOnRXNEFlagUntilTimeout>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d001      	beq.n	8001b34 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	e139      	b.n	8001da8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	691a      	ldr	r2, [r3, #16]
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b3e:	b2d2      	uxtb	r2, r2
 8001b40:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b46:	1c5a      	adds	r2, r3, #1
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b50:	3b01      	subs	r3, #1
 8001b52:	b29a      	uxth	r2, r3
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b5c:	b29b      	uxth	r3, r3
 8001b5e:	3b01      	subs	r3, #1
 8001b60:	b29a      	uxth	r2, r3
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001b66:	e10b      	b.n	8001d80 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b6c:	2b02      	cmp	r3, #2
 8001b6e:	d14e      	bne.n	8001c0e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b72:	9300      	str	r3, [sp, #0]
 8001b74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b76:	2200      	movs	r2, #0
 8001b78:	4906      	ldr	r1, [pc, #24]	; (8001b94 <HAL_I2C_Mem_Read+0x22c>)
 8001b7a:	68f8      	ldr	r0, [r7, #12]
 8001b7c:	f001 ffcc 	bl	8003b18 <I2C_WaitOnFlagUntilTimeout>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d008      	beq.n	8001b98 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e10e      	b.n	8001da8 <HAL_I2C_Mem_Read+0x440>
 8001b8a:	bf00      	nop
 8001b8c:	00100002 	.word	0x00100002
 8001b90:	ffff0000 	.word	0xffff0000
 8001b94:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ba6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	691a      	ldr	r2, [r3, #16]
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb2:	b2d2      	uxtb	r2, r2
 8001bb4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bba:	1c5a      	adds	r2, r3, #1
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bc4:	3b01      	subs	r3, #1
 8001bc6:	b29a      	uxth	r2, r3
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bd0:	b29b      	uxth	r3, r3
 8001bd2:	3b01      	subs	r3, #1
 8001bd4:	b29a      	uxth	r2, r3
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	691a      	ldr	r2, [r3, #16]
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be4:	b2d2      	uxtb	r2, r2
 8001be6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bec:	1c5a      	adds	r2, r3, #1
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bf6:	3b01      	subs	r3, #1
 8001bf8:	b29a      	uxth	r2, r3
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c02:	b29b      	uxth	r3, r3
 8001c04:	3b01      	subs	r3, #1
 8001c06:	b29a      	uxth	r2, r3
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001c0c:	e0b8      	b.n	8001d80 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c10:	9300      	str	r3, [sp, #0]
 8001c12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c14:	2200      	movs	r2, #0
 8001c16:	4966      	ldr	r1, [pc, #408]	; (8001db0 <HAL_I2C_Mem_Read+0x448>)
 8001c18:	68f8      	ldr	r0, [r7, #12]
 8001c1a:	f001 ff7d 	bl	8003b18 <I2C_WaitOnFlagUntilTimeout>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d001      	beq.n	8001c28 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	e0bf      	b.n	8001da8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c36:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	691a      	ldr	r2, [r3, #16]
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c42:	b2d2      	uxtb	r2, r2
 8001c44:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c4a:	1c5a      	adds	r2, r3, #1
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c54:	3b01      	subs	r3, #1
 8001c56:	b29a      	uxth	r2, r3
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c60:	b29b      	uxth	r3, r3
 8001c62:	3b01      	subs	r3, #1
 8001c64:	b29a      	uxth	r2, r3
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6c:	9300      	str	r3, [sp, #0]
 8001c6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c70:	2200      	movs	r2, #0
 8001c72:	494f      	ldr	r1, [pc, #316]	; (8001db0 <HAL_I2C_Mem_Read+0x448>)
 8001c74:	68f8      	ldr	r0, [r7, #12]
 8001c76:	f001 ff4f 	bl	8003b18 <I2C_WaitOnFlagUntilTimeout>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d001      	beq.n	8001c84 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	e091      	b.n	8001da8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c92:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	691a      	ldr	r2, [r3, #16]
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c9e:	b2d2      	uxtb	r2, r2
 8001ca0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca6:	1c5a      	adds	r2, r3, #1
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cb0:	3b01      	subs	r3, #1
 8001cb2:	b29a      	uxth	r2, r3
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cbc:	b29b      	uxth	r3, r3
 8001cbe:	3b01      	subs	r3, #1
 8001cc0:	b29a      	uxth	r2, r3
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	691a      	ldr	r2, [r3, #16]
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd0:	b2d2      	uxtb	r2, r2
 8001cd2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd8:	1c5a      	adds	r2, r3, #1
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ce2:	3b01      	subs	r3, #1
 8001ce4:	b29a      	uxth	r2, r3
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cee:	b29b      	uxth	r3, r3
 8001cf0:	3b01      	subs	r3, #1
 8001cf2:	b29a      	uxth	r2, r3
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001cf8:	e042      	b.n	8001d80 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cfc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001cfe:	68f8      	ldr	r0, [r7, #12]
 8001d00:	f002 f854 	bl	8003dac <I2C_WaitOnRXNEFlagUntilTimeout>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d001      	beq.n	8001d0e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e04c      	b.n	8001da8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	691a      	ldr	r2, [r3, #16]
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d18:	b2d2      	uxtb	r2, r2
 8001d1a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d20:	1c5a      	adds	r2, r3, #1
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d2a:	3b01      	subs	r3, #1
 8001d2c:	b29a      	uxth	r2, r3
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d36:	b29b      	uxth	r3, r3
 8001d38:	3b01      	subs	r3, #1
 8001d3a:	b29a      	uxth	r2, r3
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	695b      	ldr	r3, [r3, #20]
 8001d46:	f003 0304 	and.w	r3, r3, #4
 8001d4a:	2b04      	cmp	r3, #4
 8001d4c:	d118      	bne.n	8001d80 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	691a      	ldr	r2, [r3, #16]
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d58:	b2d2      	uxtb	r2, r2
 8001d5a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d60:	1c5a      	adds	r2, r3, #1
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d6a:	3b01      	subs	r3, #1
 8001d6c:	b29a      	uxth	r2, r3
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d76:	b29b      	uxth	r3, r3
 8001d78:	3b01      	subs	r3, #1
 8001d7a:	b29a      	uxth	r2, r3
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	f47f aec2 	bne.w	8001b0e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	2220      	movs	r2, #32
 8001d8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	2200      	movs	r2, #0
 8001d96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001da2:	2300      	movs	r3, #0
 8001da4:	e000      	b.n	8001da8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8001da6:	2302      	movs	r3, #2
  }
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	3728      	adds	r7, #40	; 0x28
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	00010004 	.word	0x00010004

08001db4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b08a      	sub	sp, #40	; 0x28
 8001db8:	af02      	add	r7, sp, #8
 8001dba:	60f8      	str	r0, [r7, #12]
 8001dbc:	607a      	str	r2, [r7, #4]
 8001dbe:	603b      	str	r3, [r7, #0]
 8001dc0:	460b      	mov	r3, r1
 8001dc2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001dc4:	f7ff f8e4 	bl	8000f90 <HAL_GetTick>
 8001dc8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	2b20      	cmp	r3, #32
 8001dd8:	f040 8111 	bne.w	8001ffe <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	9300      	str	r3, [sp, #0]
 8001de0:	2319      	movs	r3, #25
 8001de2:	2201      	movs	r2, #1
 8001de4:	4988      	ldr	r1, [pc, #544]	; (8002008 <HAL_I2C_IsDeviceReady+0x254>)
 8001de6:	68f8      	ldr	r0, [r7, #12]
 8001de8:	f001 fe96 	bl	8003b18 <I2C_WaitOnFlagUntilTimeout>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d001      	beq.n	8001df6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8001df2:	2302      	movs	r3, #2
 8001df4:	e104      	b.n	8002000 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d101      	bne.n	8001e04 <HAL_I2C_IsDeviceReady+0x50>
 8001e00:	2302      	movs	r3, #2
 8001e02:	e0fd      	b.n	8002000 <HAL_I2C_IsDeviceReady+0x24c>
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	2201      	movs	r2, #1
 8001e08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 0301 	and.w	r3, r3, #1
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d007      	beq.n	8001e2a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f042 0201 	orr.w	r2, r2, #1
 8001e28:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e38:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	2224      	movs	r2, #36	; 0x24
 8001e3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	2200      	movs	r2, #0
 8001e46:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	4a70      	ldr	r2, [pc, #448]	; (800200c <HAL_I2C_IsDeviceReady+0x258>)
 8001e4c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e5c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	9300      	str	r3, [sp, #0]
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	2200      	movs	r2, #0
 8001e66:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001e6a:	68f8      	ldr	r0, [r7, #12]
 8001e6c:	f001 fe54 	bl	8003b18 <I2C_WaitOnFlagUntilTimeout>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d00d      	beq.n	8001e92 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e84:	d103      	bne.n	8001e8e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e8c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8001e8e:	2303      	movs	r3, #3
 8001e90:	e0b6      	b.n	8002000 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001e92:	897b      	ldrh	r3, [r7, #10]
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	461a      	mov	r2, r3
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001ea0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001ea2:	f7ff f875 	bl	8000f90 <HAL_GetTick>
 8001ea6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	695b      	ldr	r3, [r3, #20]
 8001eae:	f003 0302 	and.w	r3, r3, #2
 8001eb2:	2b02      	cmp	r3, #2
 8001eb4:	bf0c      	ite	eq
 8001eb6:	2301      	moveq	r3, #1
 8001eb8:	2300      	movne	r3, #0
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	695b      	ldr	r3, [r3, #20]
 8001ec4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ec8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ecc:	bf0c      	ite	eq
 8001ece:	2301      	moveq	r3, #1
 8001ed0:	2300      	movne	r3, #0
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001ed6:	e025      	b.n	8001f24 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001ed8:	f7ff f85a 	bl	8000f90 <HAL_GetTick>
 8001edc:	4602      	mov	r2, r0
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	683a      	ldr	r2, [r7, #0]
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d302      	bcc.n	8001eee <HAL_I2C_IsDeviceReady+0x13a>
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d103      	bne.n	8001ef6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	22a0      	movs	r2, #160	; 0xa0
 8001ef2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	695b      	ldr	r3, [r3, #20]
 8001efc:	f003 0302 	and.w	r3, r3, #2
 8001f00:	2b02      	cmp	r3, #2
 8001f02:	bf0c      	ite	eq
 8001f04:	2301      	moveq	r3, #1
 8001f06:	2300      	movne	r3, #0
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	695b      	ldr	r3, [r3, #20]
 8001f12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f1a:	bf0c      	ite	eq
 8001f1c:	2301      	moveq	r3, #1
 8001f1e:	2300      	movne	r3, #0
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	2ba0      	cmp	r3, #160	; 0xa0
 8001f2e:	d005      	beq.n	8001f3c <HAL_I2C_IsDeviceReady+0x188>
 8001f30:	7dfb      	ldrb	r3, [r7, #23]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d102      	bne.n	8001f3c <HAL_I2C_IsDeviceReady+0x188>
 8001f36:	7dbb      	ldrb	r3, [r7, #22]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d0cd      	beq.n	8001ed8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	2220      	movs	r2, #32
 8001f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	695b      	ldr	r3, [r3, #20]
 8001f4a:	f003 0302 	and.w	r3, r3, #2
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	d129      	bne.n	8001fa6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f60:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f62:	2300      	movs	r3, #0
 8001f64:	613b      	str	r3, [r7, #16]
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	695b      	ldr	r3, [r3, #20]
 8001f6c:	613b      	str	r3, [r7, #16]
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	699b      	ldr	r3, [r3, #24]
 8001f74:	613b      	str	r3, [r7, #16]
 8001f76:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	9300      	str	r3, [sp, #0]
 8001f7c:	2319      	movs	r3, #25
 8001f7e:	2201      	movs	r2, #1
 8001f80:	4921      	ldr	r1, [pc, #132]	; (8002008 <HAL_I2C_IsDeviceReady+0x254>)
 8001f82:	68f8      	ldr	r0, [r7, #12]
 8001f84:	f001 fdc8 	bl	8003b18 <I2C_WaitOnFlagUntilTimeout>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d001      	beq.n	8001f92 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e036      	b.n	8002000 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	2220      	movs	r2, #32
 8001f96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	e02c      	b.n	8002000 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fb4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001fbe:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	9300      	str	r3, [sp, #0]
 8001fc4:	2319      	movs	r3, #25
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	490f      	ldr	r1, [pc, #60]	; (8002008 <HAL_I2C_IsDeviceReady+0x254>)
 8001fca:	68f8      	ldr	r0, [r7, #12]
 8001fcc:	f001 fda4 	bl	8003b18 <I2C_WaitOnFlagUntilTimeout>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d001      	beq.n	8001fda <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e012      	b.n	8002000 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8001fda:	69bb      	ldr	r3, [r7, #24]
 8001fdc:	3301      	adds	r3, #1
 8001fde:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8001fe0:	69ba      	ldr	r2, [r7, #24]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	f4ff af32 	bcc.w	8001e4e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	2220      	movs	r2, #32
 8001fee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e000      	b.n	8002000 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8001ffe:	2302      	movs	r3, #2
  }
}
 8002000:	4618      	mov	r0, r3
 8002002:	3720      	adds	r7, #32
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}
 8002008:	00100002 	.word	0x00100002
 800200c:	ffff0000 	.word	0xffff0000

08002010 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b088      	sub	sp, #32
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002018:	2300      	movs	r3, #0
 800201a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002028:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002030:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002038:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800203a:	7bfb      	ldrb	r3, [r7, #15]
 800203c:	2b10      	cmp	r3, #16
 800203e:	d003      	beq.n	8002048 <HAL_I2C_EV_IRQHandler+0x38>
 8002040:	7bfb      	ldrb	r3, [r7, #15]
 8002042:	2b40      	cmp	r3, #64	; 0x40
 8002044:	f040 80c1 	bne.w	80021ca <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	699b      	ldr	r3, [r3, #24]
 800204e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	695b      	ldr	r3, [r3, #20]
 8002056:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002058:	69fb      	ldr	r3, [r7, #28]
 800205a:	f003 0301 	and.w	r3, r3, #1
 800205e:	2b00      	cmp	r3, #0
 8002060:	d10d      	bne.n	800207e <HAL_I2C_EV_IRQHandler+0x6e>
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002068:	d003      	beq.n	8002072 <HAL_I2C_EV_IRQHandler+0x62>
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002070:	d101      	bne.n	8002076 <HAL_I2C_EV_IRQHandler+0x66>
 8002072:	2301      	movs	r3, #1
 8002074:	e000      	b.n	8002078 <HAL_I2C_EV_IRQHandler+0x68>
 8002076:	2300      	movs	r3, #0
 8002078:	2b01      	cmp	r3, #1
 800207a:	f000 8132 	beq.w	80022e2 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	f003 0301 	and.w	r3, r3, #1
 8002084:	2b00      	cmp	r3, #0
 8002086:	d00c      	beq.n	80020a2 <HAL_I2C_EV_IRQHandler+0x92>
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	0a5b      	lsrs	r3, r3, #9
 800208c:	f003 0301 	and.w	r3, r3, #1
 8002090:	2b00      	cmp	r3, #0
 8002092:	d006      	beq.n	80020a2 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	f001 ff0e 	bl	8003eb6 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f000 fd91 	bl	8002bc2 <I2C_Master_SB>
 80020a0:	e092      	b.n	80021c8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	08db      	lsrs	r3, r3, #3
 80020a6:	f003 0301 	and.w	r3, r3, #1
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d009      	beq.n	80020c2 <HAL_I2C_EV_IRQHandler+0xb2>
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	0a5b      	lsrs	r3, r3, #9
 80020b2:	f003 0301 	and.w	r3, r3, #1
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d003      	beq.n	80020c2 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f000 fe07 	bl	8002cce <I2C_Master_ADD10>
 80020c0:	e082      	b.n	80021c8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	085b      	lsrs	r3, r3, #1
 80020c6:	f003 0301 	and.w	r3, r3, #1
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d009      	beq.n	80020e2 <HAL_I2C_EV_IRQHandler+0xd2>
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	0a5b      	lsrs	r3, r3, #9
 80020d2:	f003 0301 	and.w	r3, r3, #1
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d003      	beq.n	80020e2 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f000 fe21 	bl	8002d22 <I2C_Master_ADDR>
 80020e0:	e072      	b.n	80021c8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80020e2:	69bb      	ldr	r3, [r7, #24]
 80020e4:	089b      	lsrs	r3, r3, #2
 80020e6:	f003 0301 	and.w	r3, r3, #1
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d03b      	beq.n	8002166 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80020fc:	f000 80f3 	beq.w	80022e6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002100:	69fb      	ldr	r3, [r7, #28]
 8002102:	09db      	lsrs	r3, r3, #7
 8002104:	f003 0301 	and.w	r3, r3, #1
 8002108:	2b00      	cmp	r3, #0
 800210a:	d00f      	beq.n	800212c <HAL_I2C_EV_IRQHandler+0x11c>
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	0a9b      	lsrs	r3, r3, #10
 8002110:	f003 0301 	and.w	r3, r3, #1
 8002114:	2b00      	cmp	r3, #0
 8002116:	d009      	beq.n	800212c <HAL_I2C_EV_IRQHandler+0x11c>
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	089b      	lsrs	r3, r3, #2
 800211c:	f003 0301 	and.w	r3, r3, #1
 8002120:	2b00      	cmp	r3, #0
 8002122:	d103      	bne.n	800212c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002124:	6878      	ldr	r0, [r7, #4]
 8002126:	f000 fa01 	bl	800252c <I2C_MasterTransmit_TXE>
 800212a:	e04d      	b.n	80021c8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	089b      	lsrs	r3, r3, #2
 8002130:	f003 0301 	and.w	r3, r3, #1
 8002134:	2b00      	cmp	r3, #0
 8002136:	f000 80d6 	beq.w	80022e6 <HAL_I2C_EV_IRQHandler+0x2d6>
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	0a5b      	lsrs	r3, r3, #9
 800213e:	f003 0301 	and.w	r3, r3, #1
 8002142:	2b00      	cmp	r3, #0
 8002144:	f000 80cf 	beq.w	80022e6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002148:	7bbb      	ldrb	r3, [r7, #14]
 800214a:	2b21      	cmp	r3, #33	; 0x21
 800214c:	d103      	bne.n	8002156 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f000 fa88 	bl	8002664 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002154:	e0c7      	b.n	80022e6 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8002156:	7bfb      	ldrb	r3, [r7, #15]
 8002158:	2b40      	cmp	r3, #64	; 0x40
 800215a:	f040 80c4 	bne.w	80022e6 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	f000 faf6 	bl	8002750 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002164:	e0bf      	b.n	80022e6 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002170:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002174:	f000 80b7 	beq.w	80022e6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	099b      	lsrs	r3, r3, #6
 800217c:	f003 0301 	and.w	r3, r3, #1
 8002180:	2b00      	cmp	r3, #0
 8002182:	d00f      	beq.n	80021a4 <HAL_I2C_EV_IRQHandler+0x194>
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	0a9b      	lsrs	r3, r3, #10
 8002188:	f003 0301 	and.w	r3, r3, #1
 800218c:	2b00      	cmp	r3, #0
 800218e:	d009      	beq.n	80021a4 <HAL_I2C_EV_IRQHandler+0x194>
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	089b      	lsrs	r3, r3, #2
 8002194:	f003 0301 	and.w	r3, r3, #1
 8002198:	2b00      	cmp	r3, #0
 800219a:	d103      	bne.n	80021a4 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	f000 fb6b 	bl	8002878 <I2C_MasterReceive_RXNE>
 80021a2:	e011      	b.n	80021c8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80021a4:	69fb      	ldr	r3, [r7, #28]
 80021a6:	089b      	lsrs	r3, r3, #2
 80021a8:	f003 0301 	and.w	r3, r3, #1
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	f000 809a 	beq.w	80022e6 <HAL_I2C_EV_IRQHandler+0x2d6>
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	0a5b      	lsrs	r3, r3, #9
 80021b6:	f003 0301 	and.w	r3, r3, #1
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	f000 8093 	beq.w	80022e6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80021c0:	6878      	ldr	r0, [r7, #4]
 80021c2:	f000 fc14 	bl	80029ee <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80021c6:	e08e      	b.n	80022e6 <HAL_I2C_EV_IRQHandler+0x2d6>
 80021c8:	e08d      	b.n	80022e6 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d004      	beq.n	80021dc <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	695b      	ldr	r3, [r3, #20]
 80021d8:	61fb      	str	r3, [r7, #28]
 80021da:	e007      	b.n	80021ec <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	699b      	ldr	r3, [r3, #24]
 80021e2:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	695b      	ldr	r3, [r3, #20]
 80021ea:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80021ec:	69fb      	ldr	r3, [r7, #28]
 80021ee:	085b      	lsrs	r3, r3, #1
 80021f0:	f003 0301 	and.w	r3, r3, #1
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d012      	beq.n	800221e <HAL_I2C_EV_IRQHandler+0x20e>
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	0a5b      	lsrs	r3, r3, #9
 80021fc:	f003 0301 	and.w	r3, r3, #1
 8002200:	2b00      	cmp	r3, #0
 8002202:	d00c      	beq.n	800221e <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002208:	2b00      	cmp	r3, #0
 800220a:	d003      	beq.n	8002214 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	699b      	ldr	r3, [r3, #24]
 8002212:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002214:	69b9      	ldr	r1, [r7, #24]
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f000 ffd2 	bl	80031c0 <I2C_Slave_ADDR>
 800221c:	e066      	b.n	80022ec <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	091b      	lsrs	r3, r3, #4
 8002222:	f003 0301 	and.w	r3, r3, #1
 8002226:	2b00      	cmp	r3, #0
 8002228:	d009      	beq.n	800223e <HAL_I2C_EV_IRQHandler+0x22e>
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	0a5b      	lsrs	r3, r3, #9
 800222e:	f003 0301 	and.w	r3, r3, #1
 8002232:	2b00      	cmp	r3, #0
 8002234:	d003      	beq.n	800223e <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f001 f80c 	bl	8003254 <I2C_Slave_STOPF>
 800223c:	e056      	b.n	80022ec <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800223e:	7bbb      	ldrb	r3, [r7, #14]
 8002240:	2b21      	cmp	r3, #33	; 0x21
 8002242:	d002      	beq.n	800224a <HAL_I2C_EV_IRQHandler+0x23a>
 8002244:	7bbb      	ldrb	r3, [r7, #14]
 8002246:	2b29      	cmp	r3, #41	; 0x29
 8002248:	d125      	bne.n	8002296 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	09db      	lsrs	r3, r3, #7
 800224e:	f003 0301 	and.w	r3, r3, #1
 8002252:	2b00      	cmp	r3, #0
 8002254:	d00f      	beq.n	8002276 <HAL_I2C_EV_IRQHandler+0x266>
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	0a9b      	lsrs	r3, r3, #10
 800225a:	f003 0301 	and.w	r3, r3, #1
 800225e:	2b00      	cmp	r3, #0
 8002260:	d009      	beq.n	8002276 <HAL_I2C_EV_IRQHandler+0x266>
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	089b      	lsrs	r3, r3, #2
 8002266:	f003 0301 	and.w	r3, r3, #1
 800226a:	2b00      	cmp	r3, #0
 800226c:	d103      	bne.n	8002276 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	f000 fee8 	bl	8003044 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002274:	e039      	b.n	80022ea <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	089b      	lsrs	r3, r3, #2
 800227a:	f003 0301 	and.w	r3, r3, #1
 800227e:	2b00      	cmp	r3, #0
 8002280:	d033      	beq.n	80022ea <HAL_I2C_EV_IRQHandler+0x2da>
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	0a5b      	lsrs	r3, r3, #9
 8002286:	f003 0301 	and.w	r3, r3, #1
 800228a:	2b00      	cmp	r3, #0
 800228c:	d02d      	beq.n	80022ea <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f000 ff15 	bl	80030be <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002294:	e029      	b.n	80022ea <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	099b      	lsrs	r3, r3, #6
 800229a:	f003 0301 	and.w	r3, r3, #1
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d00f      	beq.n	80022c2 <HAL_I2C_EV_IRQHandler+0x2b2>
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	0a9b      	lsrs	r3, r3, #10
 80022a6:	f003 0301 	and.w	r3, r3, #1
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d009      	beq.n	80022c2 <HAL_I2C_EV_IRQHandler+0x2b2>
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	089b      	lsrs	r3, r3, #2
 80022b2:	f003 0301 	and.w	r3, r3, #1
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d103      	bne.n	80022c2 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f000 ff20 	bl	8003100 <I2C_SlaveReceive_RXNE>
 80022c0:	e014      	b.n	80022ec <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	089b      	lsrs	r3, r3, #2
 80022c6:	f003 0301 	and.w	r3, r3, #1
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d00e      	beq.n	80022ec <HAL_I2C_EV_IRQHandler+0x2dc>
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	0a5b      	lsrs	r3, r3, #9
 80022d2:	f003 0301 	and.w	r3, r3, #1
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d008      	beq.n	80022ec <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f000 ff4e 	bl	800317c <I2C_SlaveReceive_BTF>
 80022e0:	e004      	b.n	80022ec <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80022e2:	bf00      	nop
 80022e4:	e002      	b.n	80022ec <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80022e6:	bf00      	nop
 80022e8:	e000      	b.n	80022ec <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80022ea:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80022ec:	3720      	adds	r7, #32
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}

080022f2 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80022f2:	b580      	push	{r7, lr}
 80022f4:	b08a      	sub	sp, #40	; 0x28
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	695b      	ldr	r3, [r3, #20]
 8002300:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800230a:	2300      	movs	r3, #0
 800230c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002314:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002316:	6a3b      	ldr	r3, [r7, #32]
 8002318:	0a1b      	lsrs	r3, r3, #8
 800231a:	f003 0301 	and.w	r3, r3, #1
 800231e:	2b00      	cmp	r3, #0
 8002320:	d00e      	beq.n	8002340 <HAL_I2C_ER_IRQHandler+0x4e>
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	0a1b      	lsrs	r3, r3, #8
 8002326:	f003 0301 	and.w	r3, r3, #1
 800232a:	2b00      	cmp	r3, #0
 800232c:	d008      	beq.n	8002340 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800232e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002330:	f043 0301 	orr.w	r3, r3, #1
 8002334:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800233e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002340:	6a3b      	ldr	r3, [r7, #32]
 8002342:	0a5b      	lsrs	r3, r3, #9
 8002344:	f003 0301 	and.w	r3, r3, #1
 8002348:	2b00      	cmp	r3, #0
 800234a:	d00e      	beq.n	800236a <HAL_I2C_ER_IRQHandler+0x78>
 800234c:	69fb      	ldr	r3, [r7, #28]
 800234e:	0a1b      	lsrs	r3, r3, #8
 8002350:	f003 0301 	and.w	r3, r3, #1
 8002354:	2b00      	cmp	r3, #0
 8002356:	d008      	beq.n	800236a <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8002358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235a:	f043 0302 	orr.w	r3, r3, #2
 800235e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8002368:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800236a:	6a3b      	ldr	r3, [r7, #32]
 800236c:	0a9b      	lsrs	r3, r3, #10
 800236e:	f003 0301 	and.w	r3, r3, #1
 8002372:	2b00      	cmp	r3, #0
 8002374:	d03f      	beq.n	80023f6 <HAL_I2C_ER_IRQHandler+0x104>
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	0a1b      	lsrs	r3, r3, #8
 800237a:	f003 0301 	and.w	r3, r3, #1
 800237e:	2b00      	cmp	r3, #0
 8002380:	d039      	beq.n	80023f6 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8002382:	7efb      	ldrb	r3, [r7, #27]
 8002384:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800238a:	b29b      	uxth	r3, r3
 800238c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002394:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800239c:	7ebb      	ldrb	r3, [r7, #26]
 800239e:	2b20      	cmp	r3, #32
 80023a0:	d112      	bne.n	80023c8 <HAL_I2C_ER_IRQHandler+0xd6>
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d10f      	bne.n	80023c8 <HAL_I2C_ER_IRQHandler+0xd6>
 80023a8:	7cfb      	ldrb	r3, [r7, #19]
 80023aa:	2b21      	cmp	r3, #33	; 0x21
 80023ac:	d008      	beq.n	80023c0 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80023ae:	7cfb      	ldrb	r3, [r7, #19]
 80023b0:	2b29      	cmp	r3, #41	; 0x29
 80023b2:	d005      	beq.n	80023c0 <HAL_I2C_ER_IRQHandler+0xce>
 80023b4:	7cfb      	ldrb	r3, [r7, #19]
 80023b6:	2b28      	cmp	r3, #40	; 0x28
 80023b8:	d106      	bne.n	80023c8 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	2b21      	cmp	r3, #33	; 0x21
 80023be:	d103      	bne.n	80023c8 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80023c0:	6878      	ldr	r0, [r7, #4]
 80023c2:	f001 f877 	bl	80034b4 <I2C_Slave_AF>
 80023c6:	e016      	b.n	80023f6 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80023d0:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80023d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d4:	f043 0304 	orr.w	r3, r3, #4
 80023d8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80023da:	7efb      	ldrb	r3, [r7, #27]
 80023dc:	2b10      	cmp	r3, #16
 80023de:	d002      	beq.n	80023e6 <HAL_I2C_ER_IRQHandler+0xf4>
 80023e0:	7efb      	ldrb	r3, [r7, #27]
 80023e2:	2b40      	cmp	r3, #64	; 0x40
 80023e4:	d107      	bne.n	80023f6 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023f4:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80023f6:	6a3b      	ldr	r3, [r7, #32]
 80023f8:	0adb      	lsrs	r3, r3, #11
 80023fa:	f003 0301 	and.w	r3, r3, #1
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d00e      	beq.n	8002420 <HAL_I2C_ER_IRQHandler+0x12e>
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	0a1b      	lsrs	r3, r3, #8
 8002406:	f003 0301 	and.w	r3, r3, #1
 800240a:	2b00      	cmp	r3, #0
 800240c:	d008      	beq.n	8002420 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800240e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002410:	f043 0308 	orr.w	r3, r3, #8
 8002414:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800241e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8002420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002422:	2b00      	cmp	r3, #0
 8002424:	d008      	beq.n	8002438 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800242a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242c:	431a      	orrs	r2, r3
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f001 f8ae 	bl	8003594 <I2C_ITError>
  }
}
 8002438:	bf00      	nop
 800243a:	3728      	adds	r7, #40	; 0x28
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}

08002440 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002448:	bf00      	nop
 800244a:	370c      	adds	r7, #12
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr

08002454 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002454:	b480      	push	{r7}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800245c:	bf00      	nop
 800245e:	370c      	adds	r7, #12
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr

08002468 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002470:	bf00      	nop
 8002472:	370c      	adds	r7, #12
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr

0800247c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800247c:	b480      	push	{r7}
 800247e:	b083      	sub	sp, #12
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002484:	bf00      	nop
 8002486:	370c      	adds	r7, #12
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr

08002490 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002490:	b480      	push	{r7}
 8002492:	b083      	sub	sp, #12
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
 8002498:	460b      	mov	r3, r1
 800249a:	70fb      	strb	r3, [r7, #3]
 800249c:	4613      	mov	r3, r2
 800249e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80024a0:	bf00      	nop
 80024a2:	370c      	adds	r7, #12
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr

080024ac <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b083      	sub	sp, #12
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80024b4:	bf00      	nop
 80024b6:	370c      	adds	r7, #12
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr

080024c0 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80024c8:	bf00      	nop
 80024ca:	370c      	adds	r7, #12
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr

080024d4 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80024dc:	bf00      	nop
 80024de:	370c      	adds	r7, #12
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr

080024e8 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b083      	sub	sp, #12
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80024f0:	bf00      	nop
 80024f2:	370c      	adds	r7, #12
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr

080024fc <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b083      	sub	sp, #12
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002504:	bf00      	nop
 8002506:	370c      	adds	r7, #12
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr

08002510 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8002510:	b480      	push	{r7}
 8002512:	b083      	sub	sp, #12
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800251e:	b2db      	uxtb	r3, r3
}
 8002520:	4618      	mov	r0, r3
 8002522:	370c      	adds	r7, #12
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr

0800252c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b084      	sub	sp, #16
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800253a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002542:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002548:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800254e:	2b00      	cmp	r3, #0
 8002550:	d150      	bne.n	80025f4 <I2C_MasterTransmit_TXE+0xc8>
 8002552:	7bfb      	ldrb	r3, [r7, #15]
 8002554:	2b21      	cmp	r3, #33	; 0x21
 8002556:	d14d      	bne.n	80025f4 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	2b08      	cmp	r3, #8
 800255c:	d01d      	beq.n	800259a <I2C_MasterTransmit_TXE+0x6e>
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	2b20      	cmp	r3, #32
 8002562:	d01a      	beq.n	800259a <I2C_MasterTransmit_TXE+0x6e>
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800256a:	d016      	beq.n	800259a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	685a      	ldr	r2, [r3, #4]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800257a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2211      	movs	r2, #17
 8002580:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2200      	movs	r2, #0
 8002586:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2220      	movs	r2, #32
 800258e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f7ff ff54 	bl	8002440 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002598:	e060      	b.n	800265c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	685a      	ldr	r2, [r3, #4]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80025a8:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025b8:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2200      	movs	r2, #0
 80025be:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2220      	movs	r2, #32
 80025c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	2b40      	cmp	r3, #64	; 0x40
 80025d2:	d107      	bne.n	80025e4 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2200      	movs	r2, #0
 80025d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80025dc:	6878      	ldr	r0, [r7, #4]
 80025de:	f7ff ff6f 	bl	80024c0 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80025e2:	e03b      	b.n	800265c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2200      	movs	r2, #0
 80025e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	f7ff ff27 	bl	8002440 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80025f2:	e033      	b.n	800265c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80025f4:	7bfb      	ldrb	r3, [r7, #15]
 80025f6:	2b21      	cmp	r3, #33	; 0x21
 80025f8:	d005      	beq.n	8002606 <I2C_MasterTransmit_TXE+0xda>
 80025fa:	7bbb      	ldrb	r3, [r7, #14]
 80025fc:	2b40      	cmp	r3, #64	; 0x40
 80025fe:	d12d      	bne.n	800265c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002600:	7bfb      	ldrb	r3, [r7, #15]
 8002602:	2b22      	cmp	r3, #34	; 0x22
 8002604:	d12a      	bne.n	800265c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800260a:	b29b      	uxth	r3, r3
 800260c:	2b00      	cmp	r3, #0
 800260e:	d108      	bne.n	8002622 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	685a      	ldr	r2, [r3, #4]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800261e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002620:	e01c      	b.n	800265c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002628:	b2db      	uxtb	r3, r3
 800262a:	2b40      	cmp	r3, #64	; 0x40
 800262c:	d103      	bne.n	8002636 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f000 f88e 	bl	8002750 <I2C_MemoryTransmit_TXE_BTF>
}
 8002634:	e012      	b.n	800265c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800263a:	781a      	ldrb	r2, [r3, #0]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002646:	1c5a      	adds	r2, r3, #1
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002650:	b29b      	uxth	r3, r3
 8002652:	3b01      	subs	r3, #1
 8002654:	b29a      	uxth	r2, r3
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800265a:	e7ff      	b.n	800265c <I2C_MasterTransmit_TXE+0x130>
 800265c:	bf00      	nop
 800265e:	3710      	adds	r7, #16
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}

08002664 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b084      	sub	sp, #16
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002670:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002678:	b2db      	uxtb	r3, r3
 800267a:	2b21      	cmp	r3, #33	; 0x21
 800267c:	d164      	bne.n	8002748 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002682:	b29b      	uxth	r3, r3
 8002684:	2b00      	cmp	r3, #0
 8002686:	d012      	beq.n	80026ae <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800268c:	781a      	ldrb	r2, [r3, #0]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002698:	1c5a      	adds	r2, r3, #1
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026a2:	b29b      	uxth	r3, r3
 80026a4:	3b01      	subs	r3, #1
 80026a6:	b29a      	uxth	r2, r3
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80026ac:	e04c      	b.n	8002748 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2b08      	cmp	r3, #8
 80026b2:	d01d      	beq.n	80026f0 <I2C_MasterTransmit_BTF+0x8c>
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2b20      	cmp	r3, #32
 80026b8:	d01a      	beq.n	80026f0 <I2C_MasterTransmit_BTF+0x8c>
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80026c0:	d016      	beq.n	80026f0 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	685a      	ldr	r2, [r3, #4]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80026d0:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2211      	movs	r2, #17
 80026d6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2200      	movs	r2, #0
 80026dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2220      	movs	r2, #32
 80026e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80026e8:	6878      	ldr	r0, [r7, #4]
 80026ea:	f7ff fea9 	bl	8002440 <HAL_I2C_MasterTxCpltCallback>
}
 80026ee:	e02b      	b.n	8002748 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	685a      	ldr	r2, [r3, #4]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80026fe:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800270e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2200      	movs	r2, #0
 8002714:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2220      	movs	r2, #32
 800271a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002724:	b2db      	uxtb	r3, r3
 8002726:	2b40      	cmp	r3, #64	; 0x40
 8002728:	d107      	bne.n	800273a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2200      	movs	r2, #0
 800272e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f7ff fec4 	bl	80024c0 <HAL_I2C_MemTxCpltCallback>
}
 8002738:	e006      	b.n	8002748 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2200      	movs	r2, #0
 800273e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	f7ff fe7c 	bl	8002440 <HAL_I2C_MasterTxCpltCallback>
}
 8002748:	bf00      	nop
 800274a:	3710      	adds	r7, #16
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}

08002750 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b084      	sub	sp, #16
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800275e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002764:	2b00      	cmp	r3, #0
 8002766:	d11d      	bne.n	80027a4 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800276c:	2b01      	cmp	r3, #1
 800276e:	d10b      	bne.n	8002788 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002774:	b2da      	uxtb	r2, r3
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002780:	1c9a      	adds	r2, r3, #2
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8002786:	e073      	b.n	8002870 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800278c:	b29b      	uxth	r3, r3
 800278e:	121b      	asrs	r3, r3, #8
 8002790:	b2da      	uxtb	r2, r3
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800279c:	1c5a      	adds	r2, r3, #1
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80027a2:	e065      	b.n	8002870 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d10b      	bne.n	80027c4 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027b0:	b2da      	uxtb	r2, r3
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027bc:	1c5a      	adds	r2, r3, #1
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80027c2:	e055      	b.n	8002870 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027c8:	2b02      	cmp	r3, #2
 80027ca:	d151      	bne.n	8002870 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80027cc:	7bfb      	ldrb	r3, [r7, #15]
 80027ce:	2b22      	cmp	r3, #34	; 0x22
 80027d0:	d10d      	bne.n	80027ee <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027e0:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027e6:	1c5a      	adds	r2, r3, #1
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	651a      	str	r2, [r3, #80]	; 0x50
}
 80027ec:	e040      	b.n	8002870 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027f2:	b29b      	uxth	r3, r3
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d015      	beq.n	8002824 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80027f8:	7bfb      	ldrb	r3, [r7, #15]
 80027fa:	2b21      	cmp	r3, #33	; 0x21
 80027fc:	d112      	bne.n	8002824 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002802:	781a      	ldrb	r2, [r3, #0]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800280e:	1c5a      	adds	r2, r3, #1
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002818:	b29b      	uxth	r3, r3
 800281a:	3b01      	subs	r3, #1
 800281c:	b29a      	uxth	r2, r3
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002822:	e025      	b.n	8002870 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002828:	b29b      	uxth	r3, r3
 800282a:	2b00      	cmp	r3, #0
 800282c:	d120      	bne.n	8002870 <I2C_MemoryTransmit_TXE_BTF+0x120>
 800282e:	7bfb      	ldrb	r3, [r7, #15]
 8002830:	2b21      	cmp	r3, #33	; 0x21
 8002832:	d11d      	bne.n	8002870 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	685a      	ldr	r2, [r3, #4]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002842:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002852:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2200      	movs	r2, #0
 8002858:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2220      	movs	r2, #32
 800285e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2200      	movs	r2, #0
 8002866:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f7ff fe28 	bl	80024c0 <HAL_I2C_MemTxCpltCallback>
}
 8002870:	bf00      	nop
 8002872:	3710      	adds	r7, #16
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}

08002878 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b084      	sub	sp, #16
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002886:	b2db      	uxtb	r3, r3
 8002888:	2b22      	cmp	r3, #34	; 0x22
 800288a:	f040 80ac 	bne.w	80029e6 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002892:	b29b      	uxth	r3, r3
 8002894:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2b03      	cmp	r3, #3
 800289a:	d921      	bls.n	80028e0 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	691a      	ldr	r2, [r3, #16]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a6:	b2d2      	uxtb	r2, r2
 80028a8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ae:	1c5a      	adds	r2, r3, #1
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028b8:	b29b      	uxth	r3, r3
 80028ba:	3b01      	subs	r3, #1
 80028bc:	b29a      	uxth	r2, r3
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028c6:	b29b      	uxth	r3, r3
 80028c8:	2b03      	cmp	r3, #3
 80028ca:	f040 808c 	bne.w	80029e6 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	685a      	ldr	r2, [r3, #4]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028dc:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80028de:	e082      	b.n	80029e6 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028e4:	2b02      	cmp	r3, #2
 80028e6:	d075      	beq.n	80029d4 <I2C_MasterReceive_RXNE+0x15c>
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	d002      	beq.n	80028f4 <I2C_MasterReceive_RXNE+0x7c>
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d16f      	bne.n	80029d4 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80028f4:	6878      	ldr	r0, [r7, #4]
 80028f6:	f001 fa27 	bl	8003d48 <I2C_WaitOnSTOPRequestThroughIT>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d142      	bne.n	8002986 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800290e:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	685a      	ldr	r2, [r3, #4]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800291e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	691a      	ldr	r2, [r3, #16]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800292a:	b2d2      	uxtb	r2, r2
 800292c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002932:	1c5a      	adds	r2, r3, #1
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800293c:	b29b      	uxth	r3, r3
 800293e:	3b01      	subs	r3, #1
 8002940:	b29a      	uxth	r2, r3
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2220      	movs	r2, #32
 800294a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002954:	b2db      	uxtb	r3, r3
 8002956:	2b40      	cmp	r3, #64	; 0x40
 8002958:	d10a      	bne.n	8002970 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2200      	movs	r2, #0
 800295e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2200      	movs	r2, #0
 8002966:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8002968:	6878      	ldr	r0, [r7, #4]
 800296a:	f7ff fdb3 	bl	80024d4 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800296e:	e03a      	b.n	80029e6 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2200      	movs	r2, #0
 8002974:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2212      	movs	r2, #18
 800297c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f7ff fd68 	bl	8002454 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002984:	e02f      	b.n	80029e6 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	685a      	ldr	r2, [r3, #4]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002994:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	691a      	ldr	r2, [r3, #16]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a0:	b2d2      	uxtb	r2, r2
 80029a2:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a8:	1c5a      	adds	r2, r3, #1
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029b2:	b29b      	uxth	r3, r3
 80029b4:	3b01      	subs	r3, #1
 80029b6:	b29a      	uxth	r2, r3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2220      	movs	r2, #32
 80029c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2200      	movs	r2, #0
 80029c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	f7ff fd8b 	bl	80024e8 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80029d2:	e008      	b.n	80029e6 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	685a      	ldr	r2, [r3, #4]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029e2:	605a      	str	r2, [r3, #4]
}
 80029e4:	e7ff      	b.n	80029e6 <I2C_MasterReceive_RXNE+0x16e>
 80029e6:	bf00      	nop
 80029e8:	3710      	adds	r7, #16
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}

080029ee <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80029ee:	b580      	push	{r7, lr}
 80029f0:	b084      	sub	sp, #16
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029fa:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a00:	b29b      	uxth	r3, r3
 8002a02:	2b04      	cmp	r3, #4
 8002a04:	d11b      	bne.n	8002a3e <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	685a      	ldr	r2, [r3, #4]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a14:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	691a      	ldr	r2, [r3, #16]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a20:	b2d2      	uxtb	r2, r2
 8002a22:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a28:	1c5a      	adds	r2, r3, #1
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a32:	b29b      	uxth	r3, r3
 8002a34:	3b01      	subs	r3, #1
 8002a36:	b29a      	uxth	r2, r3
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8002a3c:	e0bd      	b.n	8002bba <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a42:	b29b      	uxth	r3, r3
 8002a44:	2b03      	cmp	r3, #3
 8002a46:	d129      	bne.n	8002a9c <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	685a      	ldr	r2, [r3, #4]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a56:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2b04      	cmp	r3, #4
 8002a5c:	d00a      	beq.n	8002a74 <I2C_MasterReceive_BTF+0x86>
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2b02      	cmp	r3, #2
 8002a62:	d007      	beq.n	8002a74 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a72:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	691a      	ldr	r2, [r3, #16]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a7e:	b2d2      	uxtb	r2, r2
 8002a80:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a86:	1c5a      	adds	r2, r3, #1
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a90:	b29b      	uxth	r3, r3
 8002a92:	3b01      	subs	r3, #1
 8002a94:	b29a      	uxth	r2, r3
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002a9a:	e08e      	b.n	8002bba <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aa0:	b29b      	uxth	r3, r3
 8002aa2:	2b02      	cmp	r3, #2
 8002aa4:	d176      	bne.n	8002b94 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d002      	beq.n	8002ab2 <I2C_MasterReceive_BTF+0xc4>
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	2b10      	cmp	r3, #16
 8002ab0:	d108      	bne.n	8002ac4 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ac0:	601a      	str	r2, [r3, #0]
 8002ac2:	e019      	b.n	8002af8 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2b04      	cmp	r3, #4
 8002ac8:	d002      	beq.n	8002ad0 <I2C_MasterReceive_BTF+0xe2>
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	d108      	bne.n	8002ae2 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002ade:	601a      	str	r2, [r3, #0]
 8002ae0:	e00a      	b.n	8002af8 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2b10      	cmp	r3, #16
 8002ae6:	d007      	beq.n	8002af8 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002af6:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	691a      	ldr	r2, [r3, #16]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b02:	b2d2      	uxtb	r2, r2
 8002b04:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b0a:	1c5a      	adds	r2, r3, #1
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b14:	b29b      	uxth	r3, r3
 8002b16:	3b01      	subs	r3, #1
 8002b18:	b29a      	uxth	r2, r3
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	691a      	ldr	r2, [r3, #16]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b28:	b2d2      	uxtb	r2, r2
 8002b2a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b30:	1c5a      	adds	r2, r3, #1
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b3a:	b29b      	uxth	r3, r3
 8002b3c:	3b01      	subs	r3, #1
 8002b3e:	b29a      	uxth	r2, r3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	685a      	ldr	r2, [r3, #4]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002b52:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2220      	movs	r2, #32
 8002b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	2b40      	cmp	r3, #64	; 0x40
 8002b66:	d10a      	bne.n	8002b7e <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2200      	movs	r2, #0
 8002b74:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f7ff fcac 	bl	80024d4 <HAL_I2C_MemRxCpltCallback>
}
 8002b7c:	e01d      	b.n	8002bba <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2200      	movs	r2, #0
 8002b82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2212      	movs	r2, #18
 8002b8a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	f7ff fc61 	bl	8002454 <HAL_I2C_MasterRxCpltCallback>
}
 8002b92:	e012      	b.n	8002bba <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	691a      	ldr	r2, [r3, #16]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b9e:	b2d2      	uxtb	r2, r2
 8002ba0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba6:	1c5a      	adds	r2, r3, #1
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bb0:	b29b      	uxth	r3, r3
 8002bb2:	3b01      	subs	r3, #1
 8002bb4:	b29a      	uxth	r2, r3
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002bba:	bf00      	nop
 8002bbc:	3710      	adds	r7, #16
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}

08002bc2 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8002bc2:	b480      	push	{r7}
 8002bc4:	b083      	sub	sp, #12
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	2b40      	cmp	r3, #64	; 0x40
 8002bd4:	d117      	bne.n	8002c06 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d109      	bne.n	8002bf2 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	461a      	mov	r2, r3
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002bee:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8002bf0:	e067      	b.n	8002cc2 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	f043 0301 	orr.w	r3, r3, #1
 8002bfc:	b2da      	uxtb	r2, r3
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	611a      	str	r2, [r3, #16]
}
 8002c04:	e05d      	b.n	8002cc2 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	691b      	ldr	r3, [r3, #16]
 8002c0a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c0e:	d133      	bne.n	8002c78 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	2b21      	cmp	r3, #33	; 0x21
 8002c1a:	d109      	bne.n	8002c30 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	461a      	mov	r2, r3
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002c2c:	611a      	str	r2, [r3, #16]
 8002c2e:	e008      	b.n	8002c42 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	f043 0301 	orr.w	r3, r3, #1
 8002c3a:	b2da      	uxtb	r2, r3
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d004      	beq.n	8002c54 <I2C_Master_SB+0x92>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d108      	bne.n	8002c66 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d032      	beq.n	8002cc2 <I2C_Master_SB+0x100>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d02d      	beq.n	8002cc2 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	685a      	ldr	r2, [r3, #4]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c74:	605a      	str	r2, [r3, #4]
}
 8002c76:	e024      	b.n	8002cc2 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d10e      	bne.n	8002c9e <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c84:	b29b      	uxth	r3, r3
 8002c86:	11db      	asrs	r3, r3, #7
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	f003 0306 	and.w	r3, r3, #6
 8002c8e:	b2db      	uxtb	r3, r3
 8002c90:	f063 030f 	orn	r3, r3, #15
 8002c94:	b2da      	uxtb	r2, r3
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	611a      	str	r2, [r3, #16]
}
 8002c9c:	e011      	b.n	8002cc2 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	d10d      	bne.n	8002cc2 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002caa:	b29b      	uxth	r3, r3
 8002cac:	11db      	asrs	r3, r3, #7
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	f003 0306 	and.w	r3, r3, #6
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	f063 030e 	orn	r3, r3, #14
 8002cba:	b2da      	uxtb	r2, r3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	611a      	str	r2, [r3, #16]
}
 8002cc2:	bf00      	nop
 8002cc4:	370c      	adds	r7, #12
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr

08002cce <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8002cce:	b480      	push	{r7}
 8002cd0:	b083      	sub	sp, #12
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cda:	b2da      	uxtb	r2, r3
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d004      	beq.n	8002cf4 <I2C_Master_ADD10+0x26>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d108      	bne.n	8002d06 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d00c      	beq.n	8002d16 <I2C_Master_ADD10+0x48>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d007      	beq.n	8002d16 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	685a      	ldr	r2, [r3, #4]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d14:	605a      	str	r2, [r3, #4]
  }
}
 8002d16:	bf00      	nop
 8002d18:	370c      	adds	r7, #12
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr

08002d22 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8002d22:	b480      	push	{r7}
 8002d24:	b091      	sub	sp, #68	; 0x44
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d30:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d38:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3e:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d46:	b2db      	uxtb	r3, r3
 8002d48:	2b22      	cmp	r3, #34	; 0x22
 8002d4a:	f040 8169 	bne.w	8003020 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d10f      	bne.n	8002d76 <I2C_Master_ADDR+0x54>
 8002d56:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002d5a:	2b40      	cmp	r3, #64	; 0x40
 8002d5c:	d10b      	bne.n	8002d76 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d5e:	2300      	movs	r3, #0
 8002d60:	633b      	str	r3, [r7, #48]	; 0x30
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	695b      	ldr	r3, [r3, #20]
 8002d68:	633b      	str	r3, [r7, #48]	; 0x30
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	699b      	ldr	r3, [r3, #24]
 8002d70:	633b      	str	r3, [r7, #48]	; 0x30
 8002d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d74:	e160      	b.n	8003038 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d11d      	bne.n	8002dba <I2C_Master_ADDR+0x98>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	691b      	ldr	r3, [r3, #16]
 8002d82:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002d86:	d118      	bne.n	8002dba <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d88:	2300      	movs	r3, #0
 8002d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	695b      	ldr	r3, [r3, #20]
 8002d92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	699b      	ldr	r3, [r3, #24]
 8002d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002dac:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002db2:	1c5a      	adds	r2, r3, #1
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	651a      	str	r2, [r3, #80]	; 0x50
 8002db8:	e13e      	b.n	8003038 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dbe:	b29b      	uxth	r3, r3
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d113      	bne.n	8002dec <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	62bb      	str	r3, [r7, #40]	; 0x28
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	695b      	ldr	r3, [r3, #20]
 8002dce:	62bb      	str	r3, [r7, #40]	; 0x28
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	699b      	ldr	r3, [r3, #24]
 8002dd6:	62bb      	str	r3, [r7, #40]	; 0x28
 8002dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002de8:	601a      	str	r2, [r3, #0]
 8002dea:	e115      	b.n	8003018 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002df0:	b29b      	uxth	r3, r3
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	f040 808a 	bne.w	8002f0c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002df8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dfa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002dfe:	d137      	bne.n	8002e70 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e0e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e1e:	d113      	bne.n	8002e48 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e2e:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e30:	2300      	movs	r3, #0
 8002e32:	627b      	str	r3, [r7, #36]	; 0x24
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	695b      	ldr	r3, [r3, #20]
 8002e3a:	627b      	str	r3, [r7, #36]	; 0x24
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	699b      	ldr	r3, [r3, #24]
 8002e42:	627b      	str	r3, [r7, #36]	; 0x24
 8002e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e46:	e0e7      	b.n	8003018 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e48:	2300      	movs	r3, #0
 8002e4a:	623b      	str	r3, [r7, #32]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	695b      	ldr	r3, [r3, #20]
 8002e52:	623b      	str	r3, [r7, #32]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	699b      	ldr	r3, [r3, #24]
 8002e5a:	623b      	str	r3, [r7, #32]
 8002e5c:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e6c:	601a      	str	r2, [r3, #0]
 8002e6e:	e0d3      	b.n	8003018 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e72:	2b08      	cmp	r3, #8
 8002e74:	d02e      	beq.n	8002ed4 <I2C_Master_ADDR+0x1b2>
 8002e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e78:	2b20      	cmp	r3, #32
 8002e7a:	d02b      	beq.n	8002ed4 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002e7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e7e:	2b12      	cmp	r3, #18
 8002e80:	d102      	bne.n	8002e88 <I2C_Master_ADDR+0x166>
 8002e82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d125      	bne.n	8002ed4 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002e88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e8a:	2b04      	cmp	r3, #4
 8002e8c:	d00e      	beq.n	8002eac <I2C_Master_ADDR+0x18a>
 8002e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e90:	2b02      	cmp	r3, #2
 8002e92:	d00b      	beq.n	8002eac <I2C_Master_ADDR+0x18a>
 8002e94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e96:	2b10      	cmp	r3, #16
 8002e98:	d008      	beq.n	8002eac <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ea8:	601a      	str	r2, [r3, #0]
 8002eaa:	e007      	b.n	8002ebc <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002eba:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	61fb      	str	r3, [r7, #28]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	695b      	ldr	r3, [r3, #20]
 8002ec6:	61fb      	str	r3, [r7, #28]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	699b      	ldr	r3, [r3, #24]
 8002ece:	61fb      	str	r3, [r7, #28]
 8002ed0:	69fb      	ldr	r3, [r7, #28]
 8002ed2:	e0a1      	b.n	8003018 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ee2:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	61bb      	str	r3, [r7, #24]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	695b      	ldr	r3, [r3, #20]
 8002eee:	61bb      	str	r3, [r7, #24]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	699b      	ldr	r3, [r3, #24]
 8002ef6:	61bb      	str	r3, [r7, #24]
 8002ef8:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f08:	601a      	str	r2, [r3, #0]
 8002f0a:	e085      	b.n	8003018 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f10:	b29b      	uxth	r3, r3
 8002f12:	2b02      	cmp	r3, #2
 8002f14:	d14d      	bne.n	8002fb2 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f18:	2b04      	cmp	r3, #4
 8002f1a:	d016      	beq.n	8002f4a <I2C_Master_ADDR+0x228>
 8002f1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f1e:	2b02      	cmp	r3, #2
 8002f20:	d013      	beq.n	8002f4a <I2C_Master_ADDR+0x228>
 8002f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f24:	2b10      	cmp	r3, #16
 8002f26:	d010      	beq.n	8002f4a <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f36:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f46:	601a      	str	r2, [r3, #0]
 8002f48:	e007      	b.n	8002f5a <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002f58:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f68:	d117      	bne.n	8002f9a <I2C_Master_ADDR+0x278>
 8002f6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f6c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002f70:	d00b      	beq.n	8002f8a <I2C_Master_ADDR+0x268>
 8002f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d008      	beq.n	8002f8a <I2C_Master_ADDR+0x268>
 8002f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f7a:	2b08      	cmp	r3, #8
 8002f7c:	d005      	beq.n	8002f8a <I2C_Master_ADDR+0x268>
 8002f7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f80:	2b10      	cmp	r3, #16
 8002f82:	d002      	beq.n	8002f8a <I2C_Master_ADDR+0x268>
 8002f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f86:	2b20      	cmp	r3, #32
 8002f88:	d107      	bne.n	8002f9a <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	685a      	ldr	r2, [r3, #4]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002f98:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	617b      	str	r3, [r7, #20]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	695b      	ldr	r3, [r3, #20]
 8002fa4:	617b      	str	r3, [r7, #20]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	699b      	ldr	r3, [r3, #24]
 8002fac:	617b      	str	r3, [r7, #20]
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	e032      	b.n	8003018 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002fc0:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fcc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002fd0:	d117      	bne.n	8003002 <I2C_Master_ADDR+0x2e0>
 8002fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fd4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002fd8:	d00b      	beq.n	8002ff2 <I2C_Master_ADDR+0x2d0>
 8002fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d008      	beq.n	8002ff2 <I2C_Master_ADDR+0x2d0>
 8002fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fe2:	2b08      	cmp	r3, #8
 8002fe4:	d005      	beq.n	8002ff2 <I2C_Master_ADDR+0x2d0>
 8002fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fe8:	2b10      	cmp	r3, #16
 8002fea:	d002      	beq.n	8002ff2 <I2C_Master_ADDR+0x2d0>
 8002fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fee:	2b20      	cmp	r3, #32
 8002ff0:	d107      	bne.n	8003002 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	685a      	ldr	r2, [r3, #4]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003000:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003002:	2300      	movs	r3, #0
 8003004:	613b      	str	r3, [r7, #16]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	695b      	ldr	r3, [r3, #20]
 800300c:	613b      	str	r3, [r7, #16]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	699b      	ldr	r3, [r3, #24]
 8003014:	613b      	str	r3, [r7, #16]
 8003016:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2200      	movs	r2, #0
 800301c:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800301e:	e00b      	b.n	8003038 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003020:	2300      	movs	r3, #0
 8003022:	60fb      	str	r3, [r7, #12]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	695b      	ldr	r3, [r3, #20]
 800302a:	60fb      	str	r3, [r7, #12]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	699b      	ldr	r3, [r3, #24]
 8003032:	60fb      	str	r3, [r7, #12]
 8003034:	68fb      	ldr	r3, [r7, #12]
}
 8003036:	e7ff      	b.n	8003038 <I2C_Master_ADDR+0x316>
 8003038:	bf00      	nop
 800303a:	3744      	adds	r7, #68	; 0x44
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr

08003044 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b084      	sub	sp, #16
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003052:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003058:	b29b      	uxth	r3, r3
 800305a:	2b00      	cmp	r3, #0
 800305c:	d02b      	beq.n	80030b6 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003062:	781a      	ldrb	r2, [r3, #0]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306e:	1c5a      	adds	r2, r3, #1
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003078:	b29b      	uxth	r3, r3
 800307a:	3b01      	subs	r3, #1
 800307c:	b29a      	uxth	r2, r3
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003086:	b29b      	uxth	r3, r3
 8003088:	2b00      	cmp	r3, #0
 800308a:	d114      	bne.n	80030b6 <I2C_SlaveTransmit_TXE+0x72>
 800308c:	7bfb      	ldrb	r3, [r7, #15]
 800308e:	2b29      	cmp	r3, #41	; 0x29
 8003090:	d111      	bne.n	80030b6 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	685a      	ldr	r2, [r3, #4]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030a0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2221      	movs	r2, #33	; 0x21
 80030a6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2228      	movs	r2, #40	; 0x28
 80030ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	f7ff f9d9 	bl	8002468 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80030b6:	bf00      	nop
 80030b8:	3710      	adds	r7, #16
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}

080030be <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80030be:	b480      	push	{r7}
 80030c0:	b083      	sub	sp, #12
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030ca:	b29b      	uxth	r3, r3
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d011      	beq.n	80030f4 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d4:	781a      	ldrb	r2, [r3, #0]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e0:	1c5a      	adds	r2, r3, #1
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030ea:	b29b      	uxth	r3, r3
 80030ec:	3b01      	subs	r3, #1
 80030ee:	b29a      	uxth	r2, r3
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80030f4:	bf00      	nop
 80030f6:	370c      	adds	r7, #12
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr

08003100 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b084      	sub	sp, #16
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800310e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003114:	b29b      	uxth	r3, r3
 8003116:	2b00      	cmp	r3, #0
 8003118:	d02c      	beq.n	8003174 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	691a      	ldr	r2, [r3, #16]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003124:	b2d2      	uxtb	r2, r2
 8003126:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312c:	1c5a      	adds	r2, r3, #1
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003136:	b29b      	uxth	r3, r3
 8003138:	3b01      	subs	r3, #1
 800313a:	b29a      	uxth	r2, r3
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003144:	b29b      	uxth	r3, r3
 8003146:	2b00      	cmp	r3, #0
 8003148:	d114      	bne.n	8003174 <I2C_SlaveReceive_RXNE+0x74>
 800314a:	7bfb      	ldrb	r3, [r7, #15]
 800314c:	2b2a      	cmp	r3, #42	; 0x2a
 800314e:	d111      	bne.n	8003174 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	685a      	ldr	r2, [r3, #4]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800315e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2222      	movs	r2, #34	; 0x22
 8003164:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2228      	movs	r2, #40	; 0x28
 800316a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f7ff f984 	bl	800247c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003174:	bf00      	nop
 8003176:	3710      	adds	r7, #16
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}

0800317c <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800317c:	b480      	push	{r7}
 800317e:	b083      	sub	sp, #12
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003188:	b29b      	uxth	r3, r3
 800318a:	2b00      	cmp	r3, #0
 800318c:	d012      	beq.n	80031b4 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	691a      	ldr	r2, [r3, #16]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003198:	b2d2      	uxtb	r2, r2
 800319a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a0:	1c5a      	adds	r2, r3, #1
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031aa:	b29b      	uxth	r3, r3
 80031ac:	3b01      	subs	r3, #1
 80031ae:	b29a      	uxth	r2, r3
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80031b4:	bf00      	nop
 80031b6:	370c      	adds	r7, #12
 80031b8:	46bd      	mov	sp, r7
 80031ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031be:	4770      	bx	lr

080031c0 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b084      	sub	sp, #16
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
 80031c8:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80031ca:	2300      	movs	r3, #0
 80031cc:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80031da:	2b28      	cmp	r3, #40	; 0x28
 80031dc:	d127      	bne.n	800322e <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	685a      	ldr	r2, [r3, #4]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031ec:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	089b      	lsrs	r3, r3, #2
 80031f2:	f003 0301 	and.w	r3, r3, #1
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d101      	bne.n	80031fe <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80031fa:	2301      	movs	r3, #1
 80031fc:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	09db      	lsrs	r3, r3, #7
 8003202:	f003 0301 	and.w	r3, r3, #1
 8003206:	2b00      	cmp	r3, #0
 8003208:	d103      	bne.n	8003212 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	68db      	ldr	r3, [r3, #12]
 800320e:	81bb      	strh	r3, [r7, #12]
 8003210:	e002      	b.n	8003218 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	699b      	ldr	r3, [r3, #24]
 8003216:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2200      	movs	r2, #0
 800321c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003220:	89ba      	ldrh	r2, [r7, #12]
 8003222:	7bfb      	ldrb	r3, [r7, #15]
 8003224:	4619      	mov	r1, r3
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f7ff f932 	bl	8002490 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800322c:	e00e      	b.n	800324c <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800322e:	2300      	movs	r3, #0
 8003230:	60bb      	str	r3, [r7, #8]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	695b      	ldr	r3, [r3, #20]
 8003238:	60bb      	str	r3, [r7, #8]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	699b      	ldr	r3, [r3, #24]
 8003240:	60bb      	str	r3, [r7, #8]
 8003242:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2200      	movs	r2, #0
 8003248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800324c:	bf00      	nop
 800324e:	3710      	adds	r7, #16
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}

08003254 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b084      	sub	sp, #16
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003262:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	685a      	ldr	r2, [r3, #4]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003272:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003274:	2300      	movs	r3, #0
 8003276:	60bb      	str	r3, [r7, #8]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	695b      	ldr	r3, [r3, #20]
 800327e:	60bb      	str	r3, [r7, #8]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f042 0201 	orr.w	r2, r2, #1
 800328e:	601a      	str	r2, [r3, #0]
 8003290:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032a0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032b0:	d172      	bne.n	8003398 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80032b2:	7bfb      	ldrb	r3, [r7, #15]
 80032b4:	2b22      	cmp	r3, #34	; 0x22
 80032b6:	d002      	beq.n	80032be <I2C_Slave_STOPF+0x6a>
 80032b8:	7bfb      	ldrb	r3, [r7, #15]
 80032ba:	2b2a      	cmp	r3, #42	; 0x2a
 80032bc:	d135      	bne.n	800332a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	b29a      	uxth	r2, r3
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032d0:	b29b      	uxth	r3, r3
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d005      	beq.n	80032e2 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032da:	f043 0204 	orr.w	r2, r3, #4
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	685a      	ldr	r2, [r3, #4]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032f0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032f6:	4618      	mov	r0, r3
 80032f8:	f7fe f81d 	bl	8001336 <HAL_DMA_GetState>
 80032fc:	4603      	mov	r3, r0
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d049      	beq.n	8003396 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003306:	4a69      	ldr	r2, [pc, #420]	; (80034ac <I2C_Slave_STOPF+0x258>)
 8003308:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800330e:	4618      	mov	r0, r3
 8003310:	f7fd ffef 	bl	80012f2 <HAL_DMA_Abort_IT>
 8003314:	4603      	mov	r3, r0
 8003316:	2b00      	cmp	r3, #0
 8003318:	d03d      	beq.n	8003396 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800331e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003320:	687a      	ldr	r2, [r7, #4]
 8003322:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003324:	4610      	mov	r0, r2
 8003326:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003328:	e035      	b.n	8003396 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	b29a      	uxth	r2, r3
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800333c:	b29b      	uxth	r3, r3
 800333e:	2b00      	cmp	r3, #0
 8003340:	d005      	beq.n	800334e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003346:	f043 0204 	orr.w	r2, r3, #4
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	685a      	ldr	r2, [r3, #4]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800335c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003362:	4618      	mov	r0, r3
 8003364:	f7fd ffe7 	bl	8001336 <HAL_DMA_GetState>
 8003368:	4603      	mov	r3, r0
 800336a:	2b01      	cmp	r3, #1
 800336c:	d014      	beq.n	8003398 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003372:	4a4e      	ldr	r2, [pc, #312]	; (80034ac <I2C_Slave_STOPF+0x258>)
 8003374:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800337a:	4618      	mov	r0, r3
 800337c:	f7fd ffb9 	bl	80012f2 <HAL_DMA_Abort_IT>
 8003380:	4603      	mov	r3, r0
 8003382:	2b00      	cmp	r3, #0
 8003384:	d008      	beq.n	8003398 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800338a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800338c:	687a      	ldr	r2, [r7, #4]
 800338e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003390:	4610      	mov	r0, r2
 8003392:	4798      	blx	r3
 8003394:	e000      	b.n	8003398 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003396:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800339c:	b29b      	uxth	r3, r3
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d03e      	beq.n	8003420 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	695b      	ldr	r3, [r3, #20]
 80033a8:	f003 0304 	and.w	r3, r3, #4
 80033ac:	2b04      	cmp	r3, #4
 80033ae:	d112      	bne.n	80033d6 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	691a      	ldr	r2, [r3, #16]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ba:	b2d2      	uxtb	r2, r2
 80033bc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c2:	1c5a      	adds	r2, r3, #1
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033cc:	b29b      	uxth	r3, r3
 80033ce:	3b01      	subs	r3, #1
 80033d0:	b29a      	uxth	r2, r3
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	695b      	ldr	r3, [r3, #20]
 80033dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033e0:	2b40      	cmp	r3, #64	; 0x40
 80033e2:	d112      	bne.n	800340a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	691a      	ldr	r2, [r3, #16]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ee:	b2d2      	uxtb	r2, r2
 80033f0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f6:	1c5a      	adds	r2, r3, #1
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003400:	b29b      	uxth	r3, r3
 8003402:	3b01      	subs	r3, #1
 8003404:	b29a      	uxth	r2, r3
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800340e:	b29b      	uxth	r3, r3
 8003410:	2b00      	cmp	r3, #0
 8003412:	d005      	beq.n	8003420 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003418:	f043 0204 	orr.w	r2, r3, #4
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003424:	2b00      	cmp	r3, #0
 8003426:	d003      	beq.n	8003430 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	f000 f8b3 	bl	8003594 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800342e:	e039      	b.n	80034a4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003430:	7bfb      	ldrb	r3, [r7, #15]
 8003432:	2b2a      	cmp	r3, #42	; 0x2a
 8003434:	d109      	bne.n	800344a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2200      	movs	r2, #0
 800343a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2228      	movs	r2, #40	; 0x28
 8003440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003444:	6878      	ldr	r0, [r7, #4]
 8003446:	f7ff f819 	bl	800247c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003450:	b2db      	uxtb	r3, r3
 8003452:	2b28      	cmp	r3, #40	; 0x28
 8003454:	d111      	bne.n	800347a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	4a15      	ldr	r2, [pc, #84]	; (80034b0 <I2C_Slave_STOPF+0x25c>)
 800345a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2200      	movs	r2, #0
 8003460:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2220      	movs	r2, #32
 8003466:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2200      	movs	r2, #0
 800346e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f7ff f81a 	bl	80024ac <HAL_I2C_ListenCpltCallback>
}
 8003478:	e014      	b.n	80034a4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800347e:	2b22      	cmp	r3, #34	; 0x22
 8003480:	d002      	beq.n	8003488 <I2C_Slave_STOPF+0x234>
 8003482:	7bfb      	ldrb	r3, [r7, #15]
 8003484:	2b22      	cmp	r3, #34	; 0x22
 8003486:	d10d      	bne.n	80034a4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2200      	movs	r2, #0
 800348c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2220      	movs	r2, #32
 8003492:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2200      	movs	r2, #0
 800349a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f7fe ffec 	bl	800247c <HAL_I2C_SlaveRxCpltCallback>
}
 80034a4:	bf00      	nop
 80034a6:	3710      	adds	r7, #16
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}
 80034ac:	080039c9 	.word	0x080039c9
 80034b0:	ffff0000 	.word	0xffff0000

080034b4 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b084      	sub	sp, #16
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034c2:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034c8:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	2b08      	cmp	r3, #8
 80034ce:	d002      	beq.n	80034d6 <I2C_Slave_AF+0x22>
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	2b20      	cmp	r3, #32
 80034d4:	d129      	bne.n	800352a <I2C_Slave_AF+0x76>
 80034d6:	7bfb      	ldrb	r3, [r7, #15]
 80034d8:	2b28      	cmp	r3, #40	; 0x28
 80034da:	d126      	bne.n	800352a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	4a2c      	ldr	r2, [pc, #176]	; (8003590 <I2C_Slave_AF+0xdc>)
 80034e0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	685a      	ldr	r2, [r3, #4]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80034f0:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80034fa:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800350a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2200      	movs	r2, #0
 8003510:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2220      	movs	r2, #32
 8003516:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2200      	movs	r2, #0
 800351e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f7fe ffc2 	bl	80024ac <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8003528:	e02e      	b.n	8003588 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800352a:	7bfb      	ldrb	r3, [r7, #15]
 800352c:	2b21      	cmp	r3, #33	; 0x21
 800352e:	d126      	bne.n	800357e <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	4a17      	ldr	r2, [pc, #92]	; (8003590 <I2C_Slave_AF+0xdc>)
 8003534:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2221      	movs	r2, #33	; 0x21
 800353a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2220      	movs	r2, #32
 8003540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2200      	movs	r2, #0
 8003548:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	685a      	ldr	r2, [r3, #4]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800355a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003564:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003574:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f7fe ff76 	bl	8002468 <HAL_I2C_SlaveTxCpltCallback>
}
 800357c:	e004      	b.n	8003588 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003586:	615a      	str	r2, [r3, #20]
}
 8003588:	bf00      	nop
 800358a:	3710      	adds	r7, #16
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}
 8003590:	ffff0000 	.word	0xffff0000

08003594 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b084      	sub	sp, #16
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035a2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80035aa:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80035ac:	7bbb      	ldrb	r3, [r7, #14]
 80035ae:	2b10      	cmp	r3, #16
 80035b0:	d002      	beq.n	80035b8 <I2C_ITError+0x24>
 80035b2:	7bbb      	ldrb	r3, [r7, #14]
 80035b4:	2b40      	cmp	r3, #64	; 0x40
 80035b6:	d10a      	bne.n	80035ce <I2C_ITError+0x3a>
 80035b8:	7bfb      	ldrb	r3, [r7, #15]
 80035ba:	2b22      	cmp	r3, #34	; 0x22
 80035bc:	d107      	bne.n	80035ce <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035cc:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80035ce:	7bfb      	ldrb	r3, [r7, #15]
 80035d0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80035d4:	2b28      	cmp	r3, #40	; 0x28
 80035d6:	d107      	bne.n	80035e8 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2200      	movs	r2, #0
 80035dc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2228      	movs	r2, #40	; 0x28
 80035e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80035e6:	e015      	b.n	8003614 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035f6:	d00a      	beq.n	800360e <I2C_ITError+0x7a>
 80035f8:	7bfb      	ldrb	r3, [r7, #15]
 80035fa:	2b60      	cmp	r3, #96	; 0x60
 80035fc:	d007      	beq.n	800360e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2220      	movs	r2, #32
 8003602:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2200      	movs	r2, #0
 800360a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2200      	movs	r2, #0
 8003612:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800361e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003622:	d162      	bne.n	80036ea <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	685a      	ldr	r2, [r3, #4]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003632:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003638:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800363c:	b2db      	uxtb	r3, r3
 800363e:	2b01      	cmp	r3, #1
 8003640:	d020      	beq.n	8003684 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003646:	4a6a      	ldr	r2, [pc, #424]	; (80037f0 <I2C_ITError+0x25c>)
 8003648:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800364e:	4618      	mov	r0, r3
 8003650:	f7fd fe4f 	bl	80012f2 <HAL_DMA_Abort_IT>
 8003654:	4603      	mov	r3, r0
 8003656:	2b00      	cmp	r3, #0
 8003658:	f000 8089 	beq.w	800376e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f022 0201 	bic.w	r2, r2, #1
 800366a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2220      	movs	r2, #32
 8003670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003678:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800367e:	4610      	mov	r0, r2
 8003680:	4798      	blx	r3
 8003682:	e074      	b.n	800376e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003688:	4a59      	ldr	r2, [pc, #356]	; (80037f0 <I2C_ITError+0x25c>)
 800368a:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003690:	4618      	mov	r0, r3
 8003692:	f7fd fe2e 	bl	80012f2 <HAL_DMA_Abort_IT>
 8003696:	4603      	mov	r3, r0
 8003698:	2b00      	cmp	r3, #0
 800369a:	d068      	beq.n	800376e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	695b      	ldr	r3, [r3, #20]
 80036a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036a6:	2b40      	cmp	r3, #64	; 0x40
 80036a8:	d10b      	bne.n	80036c2 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	691a      	ldr	r2, [r3, #16]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b4:	b2d2      	uxtb	r2, r2
 80036b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036bc:	1c5a      	adds	r2, r3, #1
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f022 0201 	bic.w	r2, r2, #1
 80036d0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2220      	movs	r2, #32
 80036d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036e0:	687a      	ldr	r2, [r7, #4]
 80036e2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80036e4:	4610      	mov	r0, r2
 80036e6:	4798      	blx	r3
 80036e8:	e041      	b.n	800376e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	2b60      	cmp	r3, #96	; 0x60
 80036f4:	d125      	bne.n	8003742 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2220      	movs	r2, #32
 80036fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2200      	movs	r2, #0
 8003702:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	695b      	ldr	r3, [r3, #20]
 800370a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800370e:	2b40      	cmp	r3, #64	; 0x40
 8003710:	d10b      	bne.n	800372a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	691a      	ldr	r2, [r3, #16]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800371c:	b2d2      	uxtb	r2, r2
 800371e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003724:	1c5a      	adds	r2, r3, #1
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f022 0201 	bic.w	r2, r2, #1
 8003738:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f7fe fede 	bl	80024fc <HAL_I2C_AbortCpltCallback>
 8003740:	e015      	b.n	800376e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	695b      	ldr	r3, [r3, #20]
 8003748:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800374c:	2b40      	cmp	r3, #64	; 0x40
 800374e:	d10b      	bne.n	8003768 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	691a      	ldr	r2, [r3, #16]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800375a:	b2d2      	uxtb	r2, r2
 800375c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003762:	1c5a      	adds	r2, r3, #1
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003768:	6878      	ldr	r0, [r7, #4]
 800376a:	f7fe febd 	bl	80024e8 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003772:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	f003 0301 	and.w	r3, r3, #1
 800377a:	2b00      	cmp	r3, #0
 800377c:	d10e      	bne.n	800379c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003784:	2b00      	cmp	r3, #0
 8003786:	d109      	bne.n	800379c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800378e:	2b00      	cmp	r3, #0
 8003790:	d104      	bne.n	800379c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003798:	2b00      	cmp	r3, #0
 800379a:	d007      	beq.n	80037ac <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	685a      	ldr	r2, [r3, #4]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80037aa:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037b2:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b8:	f003 0304 	and.w	r3, r3, #4
 80037bc:	2b04      	cmp	r3, #4
 80037be:	d113      	bne.n	80037e8 <I2C_ITError+0x254>
 80037c0:	7bfb      	ldrb	r3, [r7, #15]
 80037c2:	2b28      	cmp	r3, #40	; 0x28
 80037c4:	d110      	bne.n	80037e8 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	4a0a      	ldr	r2, [pc, #40]	; (80037f4 <I2C_ITError+0x260>)
 80037ca:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2200      	movs	r2, #0
 80037d0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2220      	movs	r2, #32
 80037d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2200      	movs	r2, #0
 80037de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f7fe fe62 	bl	80024ac <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80037e8:	bf00      	nop
 80037ea:	3710      	adds	r7, #16
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}
 80037f0:	080039c9 	.word	0x080039c9
 80037f4:	ffff0000 	.word	0xffff0000

080037f8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b088      	sub	sp, #32
 80037fc:	af02      	add	r7, sp, #8
 80037fe:	60f8      	str	r0, [r7, #12]
 8003800:	4608      	mov	r0, r1
 8003802:	4611      	mov	r1, r2
 8003804:	461a      	mov	r2, r3
 8003806:	4603      	mov	r3, r0
 8003808:	817b      	strh	r3, [r7, #10]
 800380a:	460b      	mov	r3, r1
 800380c:	813b      	strh	r3, [r7, #8]
 800380e:	4613      	mov	r3, r2
 8003810:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003820:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003830:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003834:	9300      	str	r3, [sp, #0]
 8003836:	6a3b      	ldr	r3, [r7, #32]
 8003838:	2200      	movs	r2, #0
 800383a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800383e:	68f8      	ldr	r0, [r7, #12]
 8003840:	f000 f96a 	bl	8003b18 <I2C_WaitOnFlagUntilTimeout>
 8003844:	4603      	mov	r3, r0
 8003846:	2b00      	cmp	r3, #0
 8003848:	d00d      	beq.n	8003866 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003854:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003858:	d103      	bne.n	8003862 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003860:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003862:	2303      	movs	r3, #3
 8003864:	e0aa      	b.n	80039bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003866:	897b      	ldrh	r3, [r7, #10]
 8003868:	b2db      	uxtb	r3, r3
 800386a:	461a      	mov	r2, r3
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003874:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003878:	6a3a      	ldr	r2, [r7, #32]
 800387a:	4952      	ldr	r1, [pc, #328]	; (80039c4 <I2C_RequestMemoryRead+0x1cc>)
 800387c:	68f8      	ldr	r0, [r7, #12]
 800387e:	f000 f9a2 	bl	8003bc6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003882:	4603      	mov	r3, r0
 8003884:	2b00      	cmp	r3, #0
 8003886:	d001      	beq.n	800388c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	e097      	b.n	80039bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800388c:	2300      	movs	r3, #0
 800388e:	617b      	str	r3, [r7, #20]
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	695b      	ldr	r3, [r3, #20]
 8003896:	617b      	str	r3, [r7, #20]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	699b      	ldr	r3, [r3, #24]
 800389e:	617b      	str	r3, [r7, #20]
 80038a0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80038a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038a4:	6a39      	ldr	r1, [r7, #32]
 80038a6:	68f8      	ldr	r0, [r7, #12]
 80038a8:	f000 fa0c 	bl	8003cc4 <I2C_WaitOnTXEFlagUntilTimeout>
 80038ac:	4603      	mov	r3, r0
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d00d      	beq.n	80038ce <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b6:	2b04      	cmp	r3, #4
 80038b8:	d107      	bne.n	80038ca <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	681a      	ldr	r2, [r3, #0]
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038c8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e076      	b.n	80039bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80038ce:	88fb      	ldrh	r3, [r7, #6]
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d105      	bne.n	80038e0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80038d4:	893b      	ldrh	r3, [r7, #8]
 80038d6:	b2da      	uxtb	r2, r3
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	611a      	str	r2, [r3, #16]
 80038de:	e021      	b.n	8003924 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80038e0:	893b      	ldrh	r3, [r7, #8]
 80038e2:	0a1b      	lsrs	r3, r3, #8
 80038e4:	b29b      	uxth	r3, r3
 80038e6:	b2da      	uxtb	r2, r3
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80038ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038f0:	6a39      	ldr	r1, [r7, #32]
 80038f2:	68f8      	ldr	r0, [r7, #12]
 80038f4:	f000 f9e6 	bl	8003cc4 <I2C_WaitOnTXEFlagUntilTimeout>
 80038f8:	4603      	mov	r3, r0
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d00d      	beq.n	800391a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003902:	2b04      	cmp	r3, #4
 8003904:	d107      	bne.n	8003916 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003914:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e050      	b.n	80039bc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800391a:	893b      	ldrh	r3, [r7, #8]
 800391c:	b2da      	uxtb	r2, r3
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003924:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003926:	6a39      	ldr	r1, [r7, #32]
 8003928:	68f8      	ldr	r0, [r7, #12]
 800392a:	f000 f9cb 	bl	8003cc4 <I2C_WaitOnTXEFlagUntilTimeout>
 800392e:	4603      	mov	r3, r0
 8003930:	2b00      	cmp	r3, #0
 8003932:	d00d      	beq.n	8003950 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003938:	2b04      	cmp	r3, #4
 800393a:	d107      	bne.n	800394c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800394a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	e035      	b.n	80039bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800395e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003962:	9300      	str	r3, [sp, #0]
 8003964:	6a3b      	ldr	r3, [r7, #32]
 8003966:	2200      	movs	r2, #0
 8003968:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800396c:	68f8      	ldr	r0, [r7, #12]
 800396e:	f000 f8d3 	bl	8003b18 <I2C_WaitOnFlagUntilTimeout>
 8003972:	4603      	mov	r3, r0
 8003974:	2b00      	cmp	r3, #0
 8003976:	d00d      	beq.n	8003994 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003982:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003986:	d103      	bne.n	8003990 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800398e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003990:	2303      	movs	r3, #3
 8003992:	e013      	b.n	80039bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003994:	897b      	ldrh	r3, [r7, #10]
 8003996:	b2db      	uxtb	r3, r3
 8003998:	f043 0301 	orr.w	r3, r3, #1
 800399c:	b2da      	uxtb	r2, r3
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80039a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a6:	6a3a      	ldr	r2, [r7, #32]
 80039a8:	4906      	ldr	r1, [pc, #24]	; (80039c4 <I2C_RequestMemoryRead+0x1cc>)
 80039aa:	68f8      	ldr	r0, [r7, #12]
 80039ac:	f000 f90b 	bl	8003bc6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80039b0:	4603      	mov	r3, r0
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d001      	beq.n	80039ba <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	e000      	b.n	80039bc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80039ba:	2300      	movs	r3, #0
}
 80039bc:	4618      	mov	r0, r3
 80039be:	3718      	adds	r7, #24
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}
 80039c4:	00010002 	.word	0x00010002

080039c8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b086      	sub	sp, #24
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80039d0:	2300      	movs	r3, #0
 80039d2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039d8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039e0:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80039e2:	4b4b      	ldr	r3, [pc, #300]	; (8003b10 <I2C_DMAAbort+0x148>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	08db      	lsrs	r3, r3, #3
 80039e8:	4a4a      	ldr	r2, [pc, #296]	; (8003b14 <I2C_DMAAbort+0x14c>)
 80039ea:	fba2 2303 	umull	r2, r3, r2, r3
 80039ee:	0a1a      	lsrs	r2, r3, #8
 80039f0:	4613      	mov	r3, r2
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	4413      	add	r3, r2
 80039f6:	00da      	lsls	r2, r3, #3
 80039f8:	1ad3      	subs	r3, r2, r3
 80039fa:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d106      	bne.n	8003a10 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a06:	f043 0220 	orr.w	r2, r3, #32
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8003a0e:	e00a      	b.n	8003a26 <I2C_DMAAbort+0x5e>
    }
    count--;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	3b01      	subs	r3, #1
 8003a14:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a24:	d0ea      	beq.n	80039fc <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d003      	beq.n	8003a36 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a32:	2200      	movs	r2, #0
 8003a34:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d003      	beq.n	8003a46 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a42:	2200      	movs	r2, #0
 8003a44:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a54:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d003      	beq.n	8003a6c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a68:	2200      	movs	r2, #0
 8003a6a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d003      	beq.n	8003a7c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a78:	2200      	movs	r2, #0
 8003a7a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	681a      	ldr	r2, [r3, #0]
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f022 0201 	bic.w	r2, r2, #1
 8003a8a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a92:	b2db      	uxtb	r3, r3
 8003a94:	2b60      	cmp	r3, #96	; 0x60
 8003a96:	d10e      	bne.n	8003ab6 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	2220      	movs	r2, #32
 8003a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003aae:	6978      	ldr	r0, [r7, #20]
 8003ab0:	f7fe fd24 	bl	80024fc <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003ab4:	e027      	b.n	8003b06 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003ab6:	7cfb      	ldrb	r3, [r7, #19]
 8003ab8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003abc:	2b28      	cmp	r3, #40	; 0x28
 8003abe:	d117      	bne.n	8003af0 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f042 0201 	orr.w	r2, r2, #1
 8003ace:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003ade:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	2228      	movs	r2, #40	; 0x28
 8003aea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003aee:	e007      	b.n	8003b00 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	2220      	movs	r2, #32
 8003af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	2200      	movs	r2, #0
 8003afc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003b00:	6978      	ldr	r0, [r7, #20]
 8003b02:	f7fe fcf1 	bl	80024e8 <HAL_I2C_ErrorCallback>
}
 8003b06:	bf00      	nop
 8003b08:	3718      	adds	r7, #24
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}
 8003b0e:	bf00      	nop
 8003b10:	20000000 	.word	0x20000000
 8003b14:	14f8b589 	.word	0x14f8b589

08003b18 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b084      	sub	sp, #16
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	60f8      	str	r0, [r7, #12]
 8003b20:	60b9      	str	r1, [r7, #8]
 8003b22:	603b      	str	r3, [r7, #0]
 8003b24:	4613      	mov	r3, r2
 8003b26:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b28:	e025      	b.n	8003b76 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b30:	d021      	beq.n	8003b76 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b32:	f7fd fa2d 	bl	8000f90 <HAL_GetTick>
 8003b36:	4602      	mov	r2, r0
 8003b38:	69bb      	ldr	r3, [r7, #24]
 8003b3a:	1ad3      	subs	r3, r2, r3
 8003b3c:	683a      	ldr	r2, [r7, #0]
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d302      	bcc.n	8003b48 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d116      	bne.n	8003b76 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2220      	movs	r2, #32
 8003b52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b62:	f043 0220 	orr.w	r2, r3, #32
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	e023      	b.n	8003bbe <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	0c1b      	lsrs	r3, r3, #16
 8003b7a:	b2db      	uxtb	r3, r3
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	d10d      	bne.n	8003b9c <I2C_WaitOnFlagUntilTimeout+0x84>
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	695b      	ldr	r3, [r3, #20]
 8003b86:	43da      	mvns	r2, r3
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	4013      	ands	r3, r2
 8003b8c:	b29b      	uxth	r3, r3
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	bf0c      	ite	eq
 8003b92:	2301      	moveq	r3, #1
 8003b94:	2300      	movne	r3, #0
 8003b96:	b2db      	uxtb	r3, r3
 8003b98:	461a      	mov	r2, r3
 8003b9a:	e00c      	b.n	8003bb6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	699b      	ldr	r3, [r3, #24]
 8003ba2:	43da      	mvns	r2, r3
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	4013      	ands	r3, r2
 8003ba8:	b29b      	uxth	r3, r3
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	bf0c      	ite	eq
 8003bae:	2301      	moveq	r3, #1
 8003bb0:	2300      	movne	r3, #0
 8003bb2:	b2db      	uxtb	r3, r3
 8003bb4:	461a      	mov	r2, r3
 8003bb6:	79fb      	ldrb	r3, [r7, #7]
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d0b6      	beq.n	8003b2a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003bbc:	2300      	movs	r3, #0
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3710      	adds	r7, #16
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}

08003bc6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003bc6:	b580      	push	{r7, lr}
 8003bc8:	b084      	sub	sp, #16
 8003bca:	af00      	add	r7, sp, #0
 8003bcc:	60f8      	str	r0, [r7, #12]
 8003bce:	60b9      	str	r1, [r7, #8]
 8003bd0:	607a      	str	r2, [r7, #4]
 8003bd2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003bd4:	e051      	b.n	8003c7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	695b      	ldr	r3, [r3, #20]
 8003bdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003be0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003be4:	d123      	bne.n	8003c2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bf4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003bfe:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	2200      	movs	r2, #0
 8003c04:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2220      	movs	r2, #32
 8003c0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2200      	movs	r2, #0
 8003c12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1a:	f043 0204 	orr.w	r2, r3, #4
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2200      	movs	r2, #0
 8003c26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e046      	b.n	8003cbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c34:	d021      	beq.n	8003c7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c36:	f7fd f9ab 	bl	8000f90 <HAL_GetTick>
 8003c3a:	4602      	mov	r2, r0
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	1ad3      	subs	r3, r2, r3
 8003c40:	687a      	ldr	r2, [r7, #4]
 8003c42:	429a      	cmp	r2, r3
 8003c44:	d302      	bcc.n	8003c4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d116      	bne.n	8003c7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2220      	movs	r2, #32
 8003c56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c66:	f043 0220 	orr.w	r2, r3, #32
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2200      	movs	r2, #0
 8003c72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e020      	b.n	8003cbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	0c1b      	lsrs	r3, r3, #16
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	d10c      	bne.n	8003c9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	695b      	ldr	r3, [r3, #20]
 8003c8a:	43da      	mvns	r2, r3
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	4013      	ands	r3, r2
 8003c90:	b29b      	uxth	r3, r3
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	bf14      	ite	ne
 8003c96:	2301      	movne	r3, #1
 8003c98:	2300      	moveq	r3, #0
 8003c9a:	b2db      	uxtb	r3, r3
 8003c9c:	e00b      	b.n	8003cb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	699b      	ldr	r3, [r3, #24]
 8003ca4:	43da      	mvns	r2, r3
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	4013      	ands	r3, r2
 8003caa:	b29b      	uxth	r3, r3
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	bf14      	ite	ne
 8003cb0:	2301      	movne	r3, #1
 8003cb2:	2300      	moveq	r3, #0
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d18d      	bne.n	8003bd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003cba:	2300      	movs	r3, #0
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	3710      	adds	r7, #16
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}

08003cc4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b084      	sub	sp, #16
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	60f8      	str	r0, [r7, #12]
 8003ccc:	60b9      	str	r1, [r7, #8]
 8003cce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003cd0:	e02d      	b.n	8003d2e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003cd2:	68f8      	ldr	r0, [r7, #12]
 8003cd4:	f000 f8c0 	bl	8003e58 <I2C_IsAcknowledgeFailed>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d001      	beq.n	8003ce2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e02d      	b.n	8003d3e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ce8:	d021      	beq.n	8003d2e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cea:	f7fd f951 	bl	8000f90 <HAL_GetTick>
 8003cee:	4602      	mov	r2, r0
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	1ad3      	subs	r3, r2, r3
 8003cf4:	68ba      	ldr	r2, [r7, #8]
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	d302      	bcc.n	8003d00 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d116      	bne.n	8003d2e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2200      	movs	r2, #0
 8003d04:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2220      	movs	r2, #32
 8003d0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2200      	movs	r2, #0
 8003d12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d1a:	f043 0220 	orr.w	r2, r3, #32
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2200      	movs	r2, #0
 8003d26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e007      	b.n	8003d3e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	695b      	ldr	r3, [r3, #20]
 8003d34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d38:	2b80      	cmp	r3, #128	; 0x80
 8003d3a:	d1ca      	bne.n	8003cd2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003d3c:	2300      	movs	r3, #0
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3710      	adds	r7, #16
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}
	...

08003d48 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b085      	sub	sp, #20
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003d50:	2300      	movs	r3, #0
 8003d52:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8003d54:	4b13      	ldr	r3, [pc, #76]	; (8003da4 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	08db      	lsrs	r3, r3, #3
 8003d5a:	4a13      	ldr	r2, [pc, #76]	; (8003da8 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8003d5c:	fba2 2303 	umull	r2, r3, r2, r3
 8003d60:	0a1a      	lsrs	r2, r3, #8
 8003d62:	4613      	mov	r3, r2
 8003d64:	009b      	lsls	r3, r3, #2
 8003d66:	4413      	add	r3, r2
 8003d68:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	3b01      	subs	r3, #1
 8003d6e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d107      	bne.n	8003d86 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7a:	f043 0220 	orr.w	r2, r3, #32
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	e008      	b.n	8003d98 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d94:	d0e9      	beq.n	8003d6a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8003d96:	2300      	movs	r3, #0
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	3714      	adds	r7, #20
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da2:	4770      	bx	lr
 8003da4:	20000000 	.word	0x20000000
 8003da8:	14f8b589 	.word	0x14f8b589

08003dac <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b084      	sub	sp, #16
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	60f8      	str	r0, [r7, #12]
 8003db4:	60b9      	str	r1, [r7, #8]
 8003db6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003db8:	e042      	b.n	8003e40 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	695b      	ldr	r3, [r3, #20]
 8003dc0:	f003 0310 	and.w	r3, r3, #16
 8003dc4:	2b10      	cmp	r3, #16
 8003dc6:	d119      	bne.n	8003dfc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f06f 0210 	mvn.w	r2, #16
 8003dd0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2220      	movs	r2, #32
 8003ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2200      	movs	r2, #0
 8003de4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2200      	movs	r2, #0
 8003df4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	e029      	b.n	8003e50 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dfc:	f7fd f8c8 	bl	8000f90 <HAL_GetTick>
 8003e00:	4602      	mov	r2, r0
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	1ad3      	subs	r3, r2, r3
 8003e06:	68ba      	ldr	r2, [r7, #8]
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d302      	bcc.n	8003e12 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d116      	bne.n	8003e40 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2200      	movs	r2, #0
 8003e16:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2220      	movs	r2, #32
 8003e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2200      	movs	r2, #0
 8003e24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e2c:	f043 0220 	orr.w	r2, r3, #32
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2200      	movs	r2, #0
 8003e38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	e007      	b.n	8003e50 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	695b      	ldr	r3, [r3, #20]
 8003e46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e4a:	2b40      	cmp	r3, #64	; 0x40
 8003e4c:	d1b5      	bne.n	8003dba <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003e4e:	2300      	movs	r3, #0
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	3710      	adds	r7, #16
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}

08003e58 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b083      	sub	sp, #12
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	695b      	ldr	r3, [r3, #20]
 8003e66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e6e:	d11b      	bne.n	8003ea8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003e78:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2220      	movs	r2, #32
 8003e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e94:	f043 0204 	orr.w	r2, r3, #4
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	e000      	b.n	8003eaa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003ea8:	2300      	movs	r3, #0
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	370c      	adds	r7, #12
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb4:	4770      	bx	lr

08003eb6 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8003eb6:	b480      	push	{r7}
 8003eb8:	b083      	sub	sp, #12
 8003eba:	af00      	add	r7, sp, #0
 8003ebc:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ec2:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003ec6:	d103      	bne.n	8003ed0 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8003ece:	e007      	b.n	8003ee0 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ed4:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003ed8:	d102      	bne.n	8003ee0 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2208      	movs	r2, #8
 8003ede:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003ee0:	bf00      	nop
 8003ee2:	370c      	adds	r7, #12
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eea:	4770      	bx	lr

08003eec <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b083      	sub	sp, #12
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
 8003ef4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003efc:	b2db      	uxtb	r3, r3
 8003efe:	2b20      	cmp	r3, #32
 8003f00:	d129      	bne.n	8003f56 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2224      	movs	r2, #36	; 0x24
 8003f06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f022 0201 	bic.w	r2, r2, #1
 8003f18:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f022 0210 	bic.w	r2, r2, #16
 8003f28:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	683a      	ldr	r2, [r7, #0]
 8003f36:	430a      	orrs	r2, r1
 8003f38:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	681a      	ldr	r2, [r3, #0]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f042 0201 	orr.w	r2, r2, #1
 8003f48:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2220      	movs	r2, #32
 8003f4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003f52:	2300      	movs	r3, #0
 8003f54:	e000      	b.n	8003f58 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8003f56:	2302      	movs	r3, #2
  }
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	370c      	adds	r7, #12
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr

08003f64 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b085      	sub	sp, #20
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
 8003f6c:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f78:	b2db      	uxtb	r3, r3
 8003f7a:	2b20      	cmp	r3, #32
 8003f7c:	d12a      	bne.n	8003fd4 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2224      	movs	r2, #36	; 0x24
 8003f82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f022 0201 	bic.w	r2, r2, #1
 8003f94:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f9c:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003f9e:	89fb      	ldrh	r3, [r7, #14]
 8003fa0:	f023 030f 	bic.w	r3, r3, #15
 8003fa4:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	b29a      	uxth	r2, r3
 8003faa:	89fb      	ldrh	r3, [r7, #14]
 8003fac:	4313      	orrs	r3, r2
 8003fae:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	89fa      	ldrh	r2, [r7, #14]
 8003fb6:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f042 0201 	orr.w	r2, r2, #1
 8003fc6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2220      	movs	r2, #32
 8003fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	e000      	b.n	8003fd6 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003fd4:	2302      	movs	r3, #2
  }
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	3714      	adds	r7, #20
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe0:	4770      	bx	lr
	...

08003fe4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b082      	sub	sp, #8
 8003fe8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003fea:	2300      	movs	r3, #0
 8003fec:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003fee:	2300      	movs	r3, #0
 8003ff0:	603b      	str	r3, [r7, #0]
 8003ff2:	4b20      	ldr	r3, [pc, #128]	; (8004074 <HAL_PWREx_EnableOverDrive+0x90>)
 8003ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff6:	4a1f      	ldr	r2, [pc, #124]	; (8004074 <HAL_PWREx_EnableOverDrive+0x90>)
 8003ff8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ffc:	6413      	str	r3, [r2, #64]	; 0x40
 8003ffe:	4b1d      	ldr	r3, [pc, #116]	; (8004074 <HAL_PWREx_EnableOverDrive+0x90>)
 8004000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004002:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004006:	603b      	str	r3, [r7, #0]
 8004008:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800400a:	4b1b      	ldr	r3, [pc, #108]	; (8004078 <HAL_PWREx_EnableOverDrive+0x94>)
 800400c:	2201      	movs	r2, #1
 800400e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004010:	f7fc ffbe 	bl	8000f90 <HAL_GetTick>
 8004014:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004016:	e009      	b.n	800402c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004018:	f7fc ffba 	bl	8000f90 <HAL_GetTick>
 800401c:	4602      	mov	r2, r0
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	1ad3      	subs	r3, r2, r3
 8004022:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004026:	d901      	bls.n	800402c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8004028:	2303      	movs	r3, #3
 800402a:	e01f      	b.n	800406c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800402c:	4b13      	ldr	r3, [pc, #76]	; (800407c <HAL_PWREx_EnableOverDrive+0x98>)
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004034:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004038:	d1ee      	bne.n	8004018 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800403a:	4b11      	ldr	r3, [pc, #68]	; (8004080 <HAL_PWREx_EnableOverDrive+0x9c>)
 800403c:	2201      	movs	r2, #1
 800403e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004040:	f7fc ffa6 	bl	8000f90 <HAL_GetTick>
 8004044:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004046:	e009      	b.n	800405c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004048:	f7fc ffa2 	bl	8000f90 <HAL_GetTick>
 800404c:	4602      	mov	r2, r0
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	1ad3      	subs	r3, r2, r3
 8004052:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004056:	d901      	bls.n	800405c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8004058:	2303      	movs	r3, #3
 800405a:	e007      	b.n	800406c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800405c:	4b07      	ldr	r3, [pc, #28]	; (800407c <HAL_PWREx_EnableOverDrive+0x98>)
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004064:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004068:	d1ee      	bne.n	8004048 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800406a:	2300      	movs	r3, #0
}
 800406c:	4618      	mov	r0, r3
 800406e:	3708      	adds	r7, #8
 8004070:	46bd      	mov	sp, r7
 8004072:	bd80      	pop	{r7, pc}
 8004074:	40023800 	.word	0x40023800
 8004078:	420e0040 	.word	0x420e0040
 800407c:	40007000 	.word	0x40007000
 8004080:	420e0044 	.word	0x420e0044

08004084 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b086      	sub	sp, #24
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d101      	bne.n	8004096 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	e267      	b.n	8004566 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 0301 	and.w	r3, r3, #1
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d075      	beq.n	800418e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80040a2:	4b88      	ldr	r3, [pc, #544]	; (80042c4 <HAL_RCC_OscConfig+0x240>)
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	f003 030c 	and.w	r3, r3, #12
 80040aa:	2b04      	cmp	r3, #4
 80040ac:	d00c      	beq.n	80040c8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040ae:	4b85      	ldr	r3, [pc, #532]	; (80042c4 <HAL_RCC_OscConfig+0x240>)
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80040b6:	2b08      	cmp	r3, #8
 80040b8:	d112      	bne.n	80040e0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040ba:	4b82      	ldr	r3, [pc, #520]	; (80042c4 <HAL_RCC_OscConfig+0x240>)
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040c6:	d10b      	bne.n	80040e0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040c8:	4b7e      	ldr	r3, [pc, #504]	; (80042c4 <HAL_RCC_OscConfig+0x240>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d05b      	beq.n	800418c <HAL_RCC_OscConfig+0x108>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d157      	bne.n	800418c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80040dc:	2301      	movs	r3, #1
 80040de:	e242      	b.n	8004566 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040e8:	d106      	bne.n	80040f8 <HAL_RCC_OscConfig+0x74>
 80040ea:	4b76      	ldr	r3, [pc, #472]	; (80042c4 <HAL_RCC_OscConfig+0x240>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a75      	ldr	r2, [pc, #468]	; (80042c4 <HAL_RCC_OscConfig+0x240>)
 80040f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040f4:	6013      	str	r3, [r2, #0]
 80040f6:	e01d      	b.n	8004134 <HAL_RCC_OscConfig+0xb0>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004100:	d10c      	bne.n	800411c <HAL_RCC_OscConfig+0x98>
 8004102:	4b70      	ldr	r3, [pc, #448]	; (80042c4 <HAL_RCC_OscConfig+0x240>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a6f      	ldr	r2, [pc, #444]	; (80042c4 <HAL_RCC_OscConfig+0x240>)
 8004108:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800410c:	6013      	str	r3, [r2, #0]
 800410e:	4b6d      	ldr	r3, [pc, #436]	; (80042c4 <HAL_RCC_OscConfig+0x240>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a6c      	ldr	r2, [pc, #432]	; (80042c4 <HAL_RCC_OscConfig+0x240>)
 8004114:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004118:	6013      	str	r3, [r2, #0]
 800411a:	e00b      	b.n	8004134 <HAL_RCC_OscConfig+0xb0>
 800411c:	4b69      	ldr	r3, [pc, #420]	; (80042c4 <HAL_RCC_OscConfig+0x240>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a68      	ldr	r2, [pc, #416]	; (80042c4 <HAL_RCC_OscConfig+0x240>)
 8004122:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004126:	6013      	str	r3, [r2, #0]
 8004128:	4b66      	ldr	r3, [pc, #408]	; (80042c4 <HAL_RCC_OscConfig+0x240>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a65      	ldr	r2, [pc, #404]	; (80042c4 <HAL_RCC_OscConfig+0x240>)
 800412e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004132:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d013      	beq.n	8004164 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800413c:	f7fc ff28 	bl	8000f90 <HAL_GetTick>
 8004140:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004142:	e008      	b.n	8004156 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004144:	f7fc ff24 	bl	8000f90 <HAL_GetTick>
 8004148:	4602      	mov	r2, r0
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	1ad3      	subs	r3, r2, r3
 800414e:	2b64      	cmp	r3, #100	; 0x64
 8004150:	d901      	bls.n	8004156 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004152:	2303      	movs	r3, #3
 8004154:	e207      	b.n	8004566 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004156:	4b5b      	ldr	r3, [pc, #364]	; (80042c4 <HAL_RCC_OscConfig+0x240>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800415e:	2b00      	cmp	r3, #0
 8004160:	d0f0      	beq.n	8004144 <HAL_RCC_OscConfig+0xc0>
 8004162:	e014      	b.n	800418e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004164:	f7fc ff14 	bl	8000f90 <HAL_GetTick>
 8004168:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800416a:	e008      	b.n	800417e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800416c:	f7fc ff10 	bl	8000f90 <HAL_GetTick>
 8004170:	4602      	mov	r2, r0
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	1ad3      	subs	r3, r2, r3
 8004176:	2b64      	cmp	r3, #100	; 0x64
 8004178:	d901      	bls.n	800417e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800417a:	2303      	movs	r3, #3
 800417c:	e1f3      	b.n	8004566 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800417e:	4b51      	ldr	r3, [pc, #324]	; (80042c4 <HAL_RCC_OscConfig+0x240>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004186:	2b00      	cmp	r3, #0
 8004188:	d1f0      	bne.n	800416c <HAL_RCC_OscConfig+0xe8>
 800418a:	e000      	b.n	800418e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800418c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 0302 	and.w	r3, r3, #2
 8004196:	2b00      	cmp	r3, #0
 8004198:	d063      	beq.n	8004262 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800419a:	4b4a      	ldr	r3, [pc, #296]	; (80042c4 <HAL_RCC_OscConfig+0x240>)
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	f003 030c 	and.w	r3, r3, #12
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d00b      	beq.n	80041be <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041a6:	4b47      	ldr	r3, [pc, #284]	; (80042c4 <HAL_RCC_OscConfig+0x240>)
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80041ae:	2b08      	cmp	r3, #8
 80041b0:	d11c      	bne.n	80041ec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041b2:	4b44      	ldr	r3, [pc, #272]	; (80042c4 <HAL_RCC_OscConfig+0x240>)
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d116      	bne.n	80041ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041be:	4b41      	ldr	r3, [pc, #260]	; (80042c4 <HAL_RCC_OscConfig+0x240>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f003 0302 	and.w	r3, r3, #2
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d005      	beq.n	80041d6 <HAL_RCC_OscConfig+0x152>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	68db      	ldr	r3, [r3, #12]
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d001      	beq.n	80041d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e1c7      	b.n	8004566 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041d6:	4b3b      	ldr	r3, [pc, #236]	; (80042c4 <HAL_RCC_OscConfig+0x240>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	691b      	ldr	r3, [r3, #16]
 80041e2:	00db      	lsls	r3, r3, #3
 80041e4:	4937      	ldr	r1, [pc, #220]	; (80042c4 <HAL_RCC_OscConfig+0x240>)
 80041e6:	4313      	orrs	r3, r2
 80041e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041ea:	e03a      	b.n	8004262 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	68db      	ldr	r3, [r3, #12]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d020      	beq.n	8004236 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041f4:	4b34      	ldr	r3, [pc, #208]	; (80042c8 <HAL_RCC_OscConfig+0x244>)
 80041f6:	2201      	movs	r2, #1
 80041f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041fa:	f7fc fec9 	bl	8000f90 <HAL_GetTick>
 80041fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004200:	e008      	b.n	8004214 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004202:	f7fc fec5 	bl	8000f90 <HAL_GetTick>
 8004206:	4602      	mov	r2, r0
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	1ad3      	subs	r3, r2, r3
 800420c:	2b02      	cmp	r3, #2
 800420e:	d901      	bls.n	8004214 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004210:	2303      	movs	r3, #3
 8004212:	e1a8      	b.n	8004566 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004214:	4b2b      	ldr	r3, [pc, #172]	; (80042c4 <HAL_RCC_OscConfig+0x240>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 0302 	and.w	r3, r3, #2
 800421c:	2b00      	cmp	r3, #0
 800421e:	d0f0      	beq.n	8004202 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004220:	4b28      	ldr	r3, [pc, #160]	; (80042c4 <HAL_RCC_OscConfig+0x240>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	691b      	ldr	r3, [r3, #16]
 800422c:	00db      	lsls	r3, r3, #3
 800422e:	4925      	ldr	r1, [pc, #148]	; (80042c4 <HAL_RCC_OscConfig+0x240>)
 8004230:	4313      	orrs	r3, r2
 8004232:	600b      	str	r3, [r1, #0]
 8004234:	e015      	b.n	8004262 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004236:	4b24      	ldr	r3, [pc, #144]	; (80042c8 <HAL_RCC_OscConfig+0x244>)
 8004238:	2200      	movs	r2, #0
 800423a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800423c:	f7fc fea8 	bl	8000f90 <HAL_GetTick>
 8004240:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004242:	e008      	b.n	8004256 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004244:	f7fc fea4 	bl	8000f90 <HAL_GetTick>
 8004248:	4602      	mov	r2, r0
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	1ad3      	subs	r3, r2, r3
 800424e:	2b02      	cmp	r3, #2
 8004250:	d901      	bls.n	8004256 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004252:	2303      	movs	r3, #3
 8004254:	e187      	b.n	8004566 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004256:	4b1b      	ldr	r3, [pc, #108]	; (80042c4 <HAL_RCC_OscConfig+0x240>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 0302 	and.w	r3, r3, #2
 800425e:	2b00      	cmp	r3, #0
 8004260:	d1f0      	bne.n	8004244 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f003 0308 	and.w	r3, r3, #8
 800426a:	2b00      	cmp	r3, #0
 800426c:	d036      	beq.n	80042dc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	695b      	ldr	r3, [r3, #20]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d016      	beq.n	80042a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004276:	4b15      	ldr	r3, [pc, #84]	; (80042cc <HAL_RCC_OscConfig+0x248>)
 8004278:	2201      	movs	r2, #1
 800427a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800427c:	f7fc fe88 	bl	8000f90 <HAL_GetTick>
 8004280:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004282:	e008      	b.n	8004296 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004284:	f7fc fe84 	bl	8000f90 <HAL_GetTick>
 8004288:	4602      	mov	r2, r0
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	1ad3      	subs	r3, r2, r3
 800428e:	2b02      	cmp	r3, #2
 8004290:	d901      	bls.n	8004296 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004292:	2303      	movs	r3, #3
 8004294:	e167      	b.n	8004566 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004296:	4b0b      	ldr	r3, [pc, #44]	; (80042c4 <HAL_RCC_OscConfig+0x240>)
 8004298:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800429a:	f003 0302 	and.w	r3, r3, #2
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d0f0      	beq.n	8004284 <HAL_RCC_OscConfig+0x200>
 80042a2:	e01b      	b.n	80042dc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042a4:	4b09      	ldr	r3, [pc, #36]	; (80042cc <HAL_RCC_OscConfig+0x248>)
 80042a6:	2200      	movs	r2, #0
 80042a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042aa:	f7fc fe71 	bl	8000f90 <HAL_GetTick>
 80042ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042b0:	e00e      	b.n	80042d0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042b2:	f7fc fe6d 	bl	8000f90 <HAL_GetTick>
 80042b6:	4602      	mov	r2, r0
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	1ad3      	subs	r3, r2, r3
 80042bc:	2b02      	cmp	r3, #2
 80042be:	d907      	bls.n	80042d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80042c0:	2303      	movs	r3, #3
 80042c2:	e150      	b.n	8004566 <HAL_RCC_OscConfig+0x4e2>
 80042c4:	40023800 	.word	0x40023800
 80042c8:	42470000 	.word	0x42470000
 80042cc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042d0:	4b88      	ldr	r3, [pc, #544]	; (80044f4 <HAL_RCC_OscConfig+0x470>)
 80042d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042d4:	f003 0302 	and.w	r3, r3, #2
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d1ea      	bne.n	80042b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f003 0304 	and.w	r3, r3, #4
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	f000 8097 	beq.w	8004418 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042ea:	2300      	movs	r3, #0
 80042ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042ee:	4b81      	ldr	r3, [pc, #516]	; (80044f4 <HAL_RCC_OscConfig+0x470>)
 80042f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d10f      	bne.n	800431a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042fa:	2300      	movs	r3, #0
 80042fc:	60bb      	str	r3, [r7, #8]
 80042fe:	4b7d      	ldr	r3, [pc, #500]	; (80044f4 <HAL_RCC_OscConfig+0x470>)
 8004300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004302:	4a7c      	ldr	r2, [pc, #496]	; (80044f4 <HAL_RCC_OscConfig+0x470>)
 8004304:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004308:	6413      	str	r3, [r2, #64]	; 0x40
 800430a:	4b7a      	ldr	r3, [pc, #488]	; (80044f4 <HAL_RCC_OscConfig+0x470>)
 800430c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800430e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004312:	60bb      	str	r3, [r7, #8]
 8004314:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004316:	2301      	movs	r3, #1
 8004318:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800431a:	4b77      	ldr	r3, [pc, #476]	; (80044f8 <HAL_RCC_OscConfig+0x474>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004322:	2b00      	cmp	r3, #0
 8004324:	d118      	bne.n	8004358 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004326:	4b74      	ldr	r3, [pc, #464]	; (80044f8 <HAL_RCC_OscConfig+0x474>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a73      	ldr	r2, [pc, #460]	; (80044f8 <HAL_RCC_OscConfig+0x474>)
 800432c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004330:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004332:	f7fc fe2d 	bl	8000f90 <HAL_GetTick>
 8004336:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004338:	e008      	b.n	800434c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800433a:	f7fc fe29 	bl	8000f90 <HAL_GetTick>
 800433e:	4602      	mov	r2, r0
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	1ad3      	subs	r3, r2, r3
 8004344:	2b02      	cmp	r3, #2
 8004346:	d901      	bls.n	800434c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004348:	2303      	movs	r3, #3
 800434a:	e10c      	b.n	8004566 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800434c:	4b6a      	ldr	r3, [pc, #424]	; (80044f8 <HAL_RCC_OscConfig+0x474>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004354:	2b00      	cmp	r3, #0
 8004356:	d0f0      	beq.n	800433a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	2b01      	cmp	r3, #1
 800435e:	d106      	bne.n	800436e <HAL_RCC_OscConfig+0x2ea>
 8004360:	4b64      	ldr	r3, [pc, #400]	; (80044f4 <HAL_RCC_OscConfig+0x470>)
 8004362:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004364:	4a63      	ldr	r2, [pc, #396]	; (80044f4 <HAL_RCC_OscConfig+0x470>)
 8004366:	f043 0301 	orr.w	r3, r3, #1
 800436a:	6713      	str	r3, [r2, #112]	; 0x70
 800436c:	e01c      	b.n	80043a8 <HAL_RCC_OscConfig+0x324>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	2b05      	cmp	r3, #5
 8004374:	d10c      	bne.n	8004390 <HAL_RCC_OscConfig+0x30c>
 8004376:	4b5f      	ldr	r3, [pc, #380]	; (80044f4 <HAL_RCC_OscConfig+0x470>)
 8004378:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800437a:	4a5e      	ldr	r2, [pc, #376]	; (80044f4 <HAL_RCC_OscConfig+0x470>)
 800437c:	f043 0304 	orr.w	r3, r3, #4
 8004380:	6713      	str	r3, [r2, #112]	; 0x70
 8004382:	4b5c      	ldr	r3, [pc, #368]	; (80044f4 <HAL_RCC_OscConfig+0x470>)
 8004384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004386:	4a5b      	ldr	r2, [pc, #364]	; (80044f4 <HAL_RCC_OscConfig+0x470>)
 8004388:	f043 0301 	orr.w	r3, r3, #1
 800438c:	6713      	str	r3, [r2, #112]	; 0x70
 800438e:	e00b      	b.n	80043a8 <HAL_RCC_OscConfig+0x324>
 8004390:	4b58      	ldr	r3, [pc, #352]	; (80044f4 <HAL_RCC_OscConfig+0x470>)
 8004392:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004394:	4a57      	ldr	r2, [pc, #348]	; (80044f4 <HAL_RCC_OscConfig+0x470>)
 8004396:	f023 0301 	bic.w	r3, r3, #1
 800439a:	6713      	str	r3, [r2, #112]	; 0x70
 800439c:	4b55      	ldr	r3, [pc, #340]	; (80044f4 <HAL_RCC_OscConfig+0x470>)
 800439e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043a0:	4a54      	ldr	r2, [pc, #336]	; (80044f4 <HAL_RCC_OscConfig+0x470>)
 80043a2:	f023 0304 	bic.w	r3, r3, #4
 80043a6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	689b      	ldr	r3, [r3, #8]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d015      	beq.n	80043dc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043b0:	f7fc fdee 	bl	8000f90 <HAL_GetTick>
 80043b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043b6:	e00a      	b.n	80043ce <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043b8:	f7fc fdea 	bl	8000f90 <HAL_GetTick>
 80043bc:	4602      	mov	r2, r0
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	1ad3      	subs	r3, r2, r3
 80043c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d901      	bls.n	80043ce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80043ca:	2303      	movs	r3, #3
 80043cc:	e0cb      	b.n	8004566 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043ce:	4b49      	ldr	r3, [pc, #292]	; (80044f4 <HAL_RCC_OscConfig+0x470>)
 80043d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043d2:	f003 0302 	and.w	r3, r3, #2
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d0ee      	beq.n	80043b8 <HAL_RCC_OscConfig+0x334>
 80043da:	e014      	b.n	8004406 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043dc:	f7fc fdd8 	bl	8000f90 <HAL_GetTick>
 80043e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043e2:	e00a      	b.n	80043fa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043e4:	f7fc fdd4 	bl	8000f90 <HAL_GetTick>
 80043e8:	4602      	mov	r2, r0
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	1ad3      	subs	r3, r2, r3
 80043ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d901      	bls.n	80043fa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80043f6:	2303      	movs	r3, #3
 80043f8:	e0b5      	b.n	8004566 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043fa:	4b3e      	ldr	r3, [pc, #248]	; (80044f4 <HAL_RCC_OscConfig+0x470>)
 80043fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043fe:	f003 0302 	and.w	r3, r3, #2
 8004402:	2b00      	cmp	r3, #0
 8004404:	d1ee      	bne.n	80043e4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004406:	7dfb      	ldrb	r3, [r7, #23]
 8004408:	2b01      	cmp	r3, #1
 800440a:	d105      	bne.n	8004418 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800440c:	4b39      	ldr	r3, [pc, #228]	; (80044f4 <HAL_RCC_OscConfig+0x470>)
 800440e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004410:	4a38      	ldr	r2, [pc, #224]	; (80044f4 <HAL_RCC_OscConfig+0x470>)
 8004412:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004416:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	699b      	ldr	r3, [r3, #24]
 800441c:	2b00      	cmp	r3, #0
 800441e:	f000 80a1 	beq.w	8004564 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004422:	4b34      	ldr	r3, [pc, #208]	; (80044f4 <HAL_RCC_OscConfig+0x470>)
 8004424:	689b      	ldr	r3, [r3, #8]
 8004426:	f003 030c 	and.w	r3, r3, #12
 800442a:	2b08      	cmp	r3, #8
 800442c:	d05c      	beq.n	80044e8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	699b      	ldr	r3, [r3, #24]
 8004432:	2b02      	cmp	r3, #2
 8004434:	d141      	bne.n	80044ba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004436:	4b31      	ldr	r3, [pc, #196]	; (80044fc <HAL_RCC_OscConfig+0x478>)
 8004438:	2200      	movs	r2, #0
 800443a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800443c:	f7fc fda8 	bl	8000f90 <HAL_GetTick>
 8004440:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004442:	e008      	b.n	8004456 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004444:	f7fc fda4 	bl	8000f90 <HAL_GetTick>
 8004448:	4602      	mov	r2, r0
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	1ad3      	subs	r3, r2, r3
 800444e:	2b02      	cmp	r3, #2
 8004450:	d901      	bls.n	8004456 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004452:	2303      	movs	r3, #3
 8004454:	e087      	b.n	8004566 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004456:	4b27      	ldr	r3, [pc, #156]	; (80044f4 <HAL_RCC_OscConfig+0x470>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800445e:	2b00      	cmp	r3, #0
 8004460:	d1f0      	bne.n	8004444 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	69da      	ldr	r2, [r3, #28]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6a1b      	ldr	r3, [r3, #32]
 800446a:	431a      	orrs	r2, r3
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004470:	019b      	lsls	r3, r3, #6
 8004472:	431a      	orrs	r2, r3
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004478:	085b      	lsrs	r3, r3, #1
 800447a:	3b01      	subs	r3, #1
 800447c:	041b      	lsls	r3, r3, #16
 800447e:	431a      	orrs	r2, r3
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004484:	061b      	lsls	r3, r3, #24
 8004486:	491b      	ldr	r1, [pc, #108]	; (80044f4 <HAL_RCC_OscConfig+0x470>)
 8004488:	4313      	orrs	r3, r2
 800448a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800448c:	4b1b      	ldr	r3, [pc, #108]	; (80044fc <HAL_RCC_OscConfig+0x478>)
 800448e:	2201      	movs	r2, #1
 8004490:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004492:	f7fc fd7d 	bl	8000f90 <HAL_GetTick>
 8004496:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004498:	e008      	b.n	80044ac <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800449a:	f7fc fd79 	bl	8000f90 <HAL_GetTick>
 800449e:	4602      	mov	r2, r0
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	1ad3      	subs	r3, r2, r3
 80044a4:	2b02      	cmp	r3, #2
 80044a6:	d901      	bls.n	80044ac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80044a8:	2303      	movs	r3, #3
 80044aa:	e05c      	b.n	8004566 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044ac:	4b11      	ldr	r3, [pc, #68]	; (80044f4 <HAL_RCC_OscConfig+0x470>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d0f0      	beq.n	800449a <HAL_RCC_OscConfig+0x416>
 80044b8:	e054      	b.n	8004564 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044ba:	4b10      	ldr	r3, [pc, #64]	; (80044fc <HAL_RCC_OscConfig+0x478>)
 80044bc:	2200      	movs	r2, #0
 80044be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044c0:	f7fc fd66 	bl	8000f90 <HAL_GetTick>
 80044c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044c6:	e008      	b.n	80044da <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044c8:	f7fc fd62 	bl	8000f90 <HAL_GetTick>
 80044cc:	4602      	mov	r2, r0
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	1ad3      	subs	r3, r2, r3
 80044d2:	2b02      	cmp	r3, #2
 80044d4:	d901      	bls.n	80044da <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80044d6:	2303      	movs	r3, #3
 80044d8:	e045      	b.n	8004566 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044da:	4b06      	ldr	r3, [pc, #24]	; (80044f4 <HAL_RCC_OscConfig+0x470>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d1f0      	bne.n	80044c8 <HAL_RCC_OscConfig+0x444>
 80044e6:	e03d      	b.n	8004564 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	699b      	ldr	r3, [r3, #24]
 80044ec:	2b01      	cmp	r3, #1
 80044ee:	d107      	bne.n	8004500 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	e038      	b.n	8004566 <HAL_RCC_OscConfig+0x4e2>
 80044f4:	40023800 	.word	0x40023800
 80044f8:	40007000 	.word	0x40007000
 80044fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004500:	4b1b      	ldr	r3, [pc, #108]	; (8004570 <HAL_RCC_OscConfig+0x4ec>)
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	699b      	ldr	r3, [r3, #24]
 800450a:	2b01      	cmp	r3, #1
 800450c:	d028      	beq.n	8004560 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004518:	429a      	cmp	r2, r3
 800451a:	d121      	bne.n	8004560 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004526:	429a      	cmp	r2, r3
 8004528:	d11a      	bne.n	8004560 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800452a:	68fa      	ldr	r2, [r7, #12]
 800452c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004530:	4013      	ands	r3, r2
 8004532:	687a      	ldr	r2, [r7, #4]
 8004534:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004536:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004538:	4293      	cmp	r3, r2
 800453a:	d111      	bne.n	8004560 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004546:	085b      	lsrs	r3, r3, #1
 8004548:	3b01      	subs	r3, #1
 800454a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800454c:	429a      	cmp	r2, r3
 800454e:	d107      	bne.n	8004560 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800455a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800455c:	429a      	cmp	r2, r3
 800455e:	d001      	beq.n	8004564 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	e000      	b.n	8004566 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004564:	2300      	movs	r3, #0
}
 8004566:	4618      	mov	r0, r3
 8004568:	3718      	adds	r7, #24
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}
 800456e:	bf00      	nop
 8004570:	40023800 	.word	0x40023800

08004574 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b084      	sub	sp, #16
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
 800457c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d101      	bne.n	8004588 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004584:	2301      	movs	r3, #1
 8004586:	e0cc      	b.n	8004722 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004588:	4b68      	ldr	r3, [pc, #416]	; (800472c <HAL_RCC_ClockConfig+0x1b8>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f003 030f 	and.w	r3, r3, #15
 8004590:	683a      	ldr	r2, [r7, #0]
 8004592:	429a      	cmp	r2, r3
 8004594:	d90c      	bls.n	80045b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004596:	4b65      	ldr	r3, [pc, #404]	; (800472c <HAL_RCC_ClockConfig+0x1b8>)
 8004598:	683a      	ldr	r2, [r7, #0]
 800459a:	b2d2      	uxtb	r2, r2
 800459c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800459e:	4b63      	ldr	r3, [pc, #396]	; (800472c <HAL_RCC_ClockConfig+0x1b8>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f003 030f 	and.w	r3, r3, #15
 80045a6:	683a      	ldr	r2, [r7, #0]
 80045a8:	429a      	cmp	r2, r3
 80045aa:	d001      	beq.n	80045b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	e0b8      	b.n	8004722 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f003 0302 	and.w	r3, r3, #2
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d020      	beq.n	80045fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f003 0304 	and.w	r3, r3, #4
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d005      	beq.n	80045d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80045c8:	4b59      	ldr	r3, [pc, #356]	; (8004730 <HAL_RCC_ClockConfig+0x1bc>)
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	4a58      	ldr	r2, [pc, #352]	; (8004730 <HAL_RCC_ClockConfig+0x1bc>)
 80045ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80045d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f003 0308 	and.w	r3, r3, #8
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d005      	beq.n	80045ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80045e0:	4b53      	ldr	r3, [pc, #332]	; (8004730 <HAL_RCC_ClockConfig+0x1bc>)
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	4a52      	ldr	r2, [pc, #328]	; (8004730 <HAL_RCC_ClockConfig+0x1bc>)
 80045e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80045ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045ec:	4b50      	ldr	r3, [pc, #320]	; (8004730 <HAL_RCC_ClockConfig+0x1bc>)
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	494d      	ldr	r1, [pc, #308]	; (8004730 <HAL_RCC_ClockConfig+0x1bc>)
 80045fa:	4313      	orrs	r3, r2
 80045fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f003 0301 	and.w	r3, r3, #1
 8004606:	2b00      	cmp	r3, #0
 8004608:	d044      	beq.n	8004694 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	2b01      	cmp	r3, #1
 8004610:	d107      	bne.n	8004622 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004612:	4b47      	ldr	r3, [pc, #284]	; (8004730 <HAL_RCC_ClockConfig+0x1bc>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800461a:	2b00      	cmp	r3, #0
 800461c:	d119      	bne.n	8004652 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	e07f      	b.n	8004722 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	2b02      	cmp	r3, #2
 8004628:	d003      	beq.n	8004632 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800462e:	2b03      	cmp	r3, #3
 8004630:	d107      	bne.n	8004642 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004632:	4b3f      	ldr	r3, [pc, #252]	; (8004730 <HAL_RCC_ClockConfig+0x1bc>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800463a:	2b00      	cmp	r3, #0
 800463c:	d109      	bne.n	8004652 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800463e:	2301      	movs	r3, #1
 8004640:	e06f      	b.n	8004722 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004642:	4b3b      	ldr	r3, [pc, #236]	; (8004730 <HAL_RCC_ClockConfig+0x1bc>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f003 0302 	and.w	r3, r3, #2
 800464a:	2b00      	cmp	r3, #0
 800464c:	d101      	bne.n	8004652 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	e067      	b.n	8004722 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004652:	4b37      	ldr	r3, [pc, #220]	; (8004730 <HAL_RCC_ClockConfig+0x1bc>)
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	f023 0203 	bic.w	r2, r3, #3
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	4934      	ldr	r1, [pc, #208]	; (8004730 <HAL_RCC_ClockConfig+0x1bc>)
 8004660:	4313      	orrs	r3, r2
 8004662:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004664:	f7fc fc94 	bl	8000f90 <HAL_GetTick>
 8004668:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800466a:	e00a      	b.n	8004682 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800466c:	f7fc fc90 	bl	8000f90 <HAL_GetTick>
 8004670:	4602      	mov	r2, r0
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	1ad3      	subs	r3, r2, r3
 8004676:	f241 3288 	movw	r2, #5000	; 0x1388
 800467a:	4293      	cmp	r3, r2
 800467c:	d901      	bls.n	8004682 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800467e:	2303      	movs	r3, #3
 8004680:	e04f      	b.n	8004722 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004682:	4b2b      	ldr	r3, [pc, #172]	; (8004730 <HAL_RCC_ClockConfig+0x1bc>)
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	f003 020c 	and.w	r2, r3, #12
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	009b      	lsls	r3, r3, #2
 8004690:	429a      	cmp	r2, r3
 8004692:	d1eb      	bne.n	800466c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004694:	4b25      	ldr	r3, [pc, #148]	; (800472c <HAL_RCC_ClockConfig+0x1b8>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f003 030f 	and.w	r3, r3, #15
 800469c:	683a      	ldr	r2, [r7, #0]
 800469e:	429a      	cmp	r2, r3
 80046a0:	d20c      	bcs.n	80046bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046a2:	4b22      	ldr	r3, [pc, #136]	; (800472c <HAL_RCC_ClockConfig+0x1b8>)
 80046a4:	683a      	ldr	r2, [r7, #0]
 80046a6:	b2d2      	uxtb	r2, r2
 80046a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046aa:	4b20      	ldr	r3, [pc, #128]	; (800472c <HAL_RCC_ClockConfig+0x1b8>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f003 030f 	and.w	r3, r3, #15
 80046b2:	683a      	ldr	r2, [r7, #0]
 80046b4:	429a      	cmp	r2, r3
 80046b6:	d001      	beq.n	80046bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80046b8:	2301      	movs	r3, #1
 80046ba:	e032      	b.n	8004722 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f003 0304 	and.w	r3, r3, #4
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d008      	beq.n	80046da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046c8:	4b19      	ldr	r3, [pc, #100]	; (8004730 <HAL_RCC_ClockConfig+0x1bc>)
 80046ca:	689b      	ldr	r3, [r3, #8]
 80046cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	68db      	ldr	r3, [r3, #12]
 80046d4:	4916      	ldr	r1, [pc, #88]	; (8004730 <HAL_RCC_ClockConfig+0x1bc>)
 80046d6:	4313      	orrs	r3, r2
 80046d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f003 0308 	and.w	r3, r3, #8
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d009      	beq.n	80046fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80046e6:	4b12      	ldr	r3, [pc, #72]	; (8004730 <HAL_RCC_ClockConfig+0x1bc>)
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	691b      	ldr	r3, [r3, #16]
 80046f2:	00db      	lsls	r3, r3, #3
 80046f4:	490e      	ldr	r1, [pc, #56]	; (8004730 <HAL_RCC_ClockConfig+0x1bc>)
 80046f6:	4313      	orrs	r3, r2
 80046f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80046fa:	f000 f821 	bl	8004740 <HAL_RCC_GetSysClockFreq>
 80046fe:	4602      	mov	r2, r0
 8004700:	4b0b      	ldr	r3, [pc, #44]	; (8004730 <HAL_RCC_ClockConfig+0x1bc>)
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	091b      	lsrs	r3, r3, #4
 8004706:	f003 030f 	and.w	r3, r3, #15
 800470a:	490a      	ldr	r1, [pc, #40]	; (8004734 <HAL_RCC_ClockConfig+0x1c0>)
 800470c:	5ccb      	ldrb	r3, [r1, r3]
 800470e:	fa22 f303 	lsr.w	r3, r2, r3
 8004712:	4a09      	ldr	r2, [pc, #36]	; (8004738 <HAL_RCC_ClockConfig+0x1c4>)
 8004714:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004716:	4b09      	ldr	r3, [pc, #36]	; (800473c <HAL_RCC_ClockConfig+0x1c8>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4618      	mov	r0, r3
 800471c:	f7fc fbf4 	bl	8000f08 <HAL_InitTick>

  return HAL_OK;
 8004720:	2300      	movs	r3, #0
}
 8004722:	4618      	mov	r0, r3
 8004724:	3710      	adds	r7, #16
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}
 800472a:	bf00      	nop
 800472c:	40023c00 	.word	0x40023c00
 8004730:	40023800 	.word	0x40023800
 8004734:	08006ae0 	.word	0x08006ae0
 8004738:	20000000 	.word	0x20000000
 800473c:	20000004 	.word	0x20000004

08004740 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004740:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004744:	b094      	sub	sp, #80	; 0x50
 8004746:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004748:	2300      	movs	r3, #0
 800474a:	647b      	str	r3, [r7, #68]	; 0x44
 800474c:	2300      	movs	r3, #0
 800474e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004750:	2300      	movs	r3, #0
 8004752:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004754:	2300      	movs	r3, #0
 8004756:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004758:	4b79      	ldr	r3, [pc, #484]	; (8004940 <HAL_RCC_GetSysClockFreq+0x200>)
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	f003 030c 	and.w	r3, r3, #12
 8004760:	2b08      	cmp	r3, #8
 8004762:	d00d      	beq.n	8004780 <HAL_RCC_GetSysClockFreq+0x40>
 8004764:	2b08      	cmp	r3, #8
 8004766:	f200 80e1 	bhi.w	800492c <HAL_RCC_GetSysClockFreq+0x1ec>
 800476a:	2b00      	cmp	r3, #0
 800476c:	d002      	beq.n	8004774 <HAL_RCC_GetSysClockFreq+0x34>
 800476e:	2b04      	cmp	r3, #4
 8004770:	d003      	beq.n	800477a <HAL_RCC_GetSysClockFreq+0x3a>
 8004772:	e0db      	b.n	800492c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004774:	4b73      	ldr	r3, [pc, #460]	; (8004944 <HAL_RCC_GetSysClockFreq+0x204>)
 8004776:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004778:	e0db      	b.n	8004932 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800477a:	4b73      	ldr	r3, [pc, #460]	; (8004948 <HAL_RCC_GetSysClockFreq+0x208>)
 800477c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800477e:	e0d8      	b.n	8004932 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004780:	4b6f      	ldr	r3, [pc, #444]	; (8004940 <HAL_RCC_GetSysClockFreq+0x200>)
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004788:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800478a:	4b6d      	ldr	r3, [pc, #436]	; (8004940 <HAL_RCC_GetSysClockFreq+0x200>)
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004792:	2b00      	cmp	r3, #0
 8004794:	d063      	beq.n	800485e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004796:	4b6a      	ldr	r3, [pc, #424]	; (8004940 <HAL_RCC_GetSysClockFreq+0x200>)
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	099b      	lsrs	r3, r3, #6
 800479c:	2200      	movs	r2, #0
 800479e:	63bb      	str	r3, [r7, #56]	; 0x38
 80047a0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80047a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047a8:	633b      	str	r3, [r7, #48]	; 0x30
 80047aa:	2300      	movs	r3, #0
 80047ac:	637b      	str	r3, [r7, #52]	; 0x34
 80047ae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80047b2:	4622      	mov	r2, r4
 80047b4:	462b      	mov	r3, r5
 80047b6:	f04f 0000 	mov.w	r0, #0
 80047ba:	f04f 0100 	mov.w	r1, #0
 80047be:	0159      	lsls	r1, r3, #5
 80047c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80047c4:	0150      	lsls	r0, r2, #5
 80047c6:	4602      	mov	r2, r0
 80047c8:	460b      	mov	r3, r1
 80047ca:	4621      	mov	r1, r4
 80047cc:	1a51      	subs	r1, r2, r1
 80047ce:	6139      	str	r1, [r7, #16]
 80047d0:	4629      	mov	r1, r5
 80047d2:	eb63 0301 	sbc.w	r3, r3, r1
 80047d6:	617b      	str	r3, [r7, #20]
 80047d8:	f04f 0200 	mov.w	r2, #0
 80047dc:	f04f 0300 	mov.w	r3, #0
 80047e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80047e4:	4659      	mov	r1, fp
 80047e6:	018b      	lsls	r3, r1, #6
 80047e8:	4651      	mov	r1, sl
 80047ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80047ee:	4651      	mov	r1, sl
 80047f0:	018a      	lsls	r2, r1, #6
 80047f2:	4651      	mov	r1, sl
 80047f4:	ebb2 0801 	subs.w	r8, r2, r1
 80047f8:	4659      	mov	r1, fp
 80047fa:	eb63 0901 	sbc.w	r9, r3, r1
 80047fe:	f04f 0200 	mov.w	r2, #0
 8004802:	f04f 0300 	mov.w	r3, #0
 8004806:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800480a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800480e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004812:	4690      	mov	r8, r2
 8004814:	4699      	mov	r9, r3
 8004816:	4623      	mov	r3, r4
 8004818:	eb18 0303 	adds.w	r3, r8, r3
 800481c:	60bb      	str	r3, [r7, #8]
 800481e:	462b      	mov	r3, r5
 8004820:	eb49 0303 	adc.w	r3, r9, r3
 8004824:	60fb      	str	r3, [r7, #12]
 8004826:	f04f 0200 	mov.w	r2, #0
 800482a:	f04f 0300 	mov.w	r3, #0
 800482e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004832:	4629      	mov	r1, r5
 8004834:	024b      	lsls	r3, r1, #9
 8004836:	4621      	mov	r1, r4
 8004838:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800483c:	4621      	mov	r1, r4
 800483e:	024a      	lsls	r2, r1, #9
 8004840:	4610      	mov	r0, r2
 8004842:	4619      	mov	r1, r3
 8004844:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004846:	2200      	movs	r2, #0
 8004848:	62bb      	str	r3, [r7, #40]	; 0x28
 800484a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800484c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004850:	f7fb fd1e 	bl	8000290 <__aeabi_uldivmod>
 8004854:	4602      	mov	r2, r0
 8004856:	460b      	mov	r3, r1
 8004858:	4613      	mov	r3, r2
 800485a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800485c:	e058      	b.n	8004910 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800485e:	4b38      	ldr	r3, [pc, #224]	; (8004940 <HAL_RCC_GetSysClockFreq+0x200>)
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	099b      	lsrs	r3, r3, #6
 8004864:	2200      	movs	r2, #0
 8004866:	4618      	mov	r0, r3
 8004868:	4611      	mov	r1, r2
 800486a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800486e:	623b      	str	r3, [r7, #32]
 8004870:	2300      	movs	r3, #0
 8004872:	627b      	str	r3, [r7, #36]	; 0x24
 8004874:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004878:	4642      	mov	r2, r8
 800487a:	464b      	mov	r3, r9
 800487c:	f04f 0000 	mov.w	r0, #0
 8004880:	f04f 0100 	mov.w	r1, #0
 8004884:	0159      	lsls	r1, r3, #5
 8004886:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800488a:	0150      	lsls	r0, r2, #5
 800488c:	4602      	mov	r2, r0
 800488e:	460b      	mov	r3, r1
 8004890:	4641      	mov	r1, r8
 8004892:	ebb2 0a01 	subs.w	sl, r2, r1
 8004896:	4649      	mov	r1, r9
 8004898:	eb63 0b01 	sbc.w	fp, r3, r1
 800489c:	f04f 0200 	mov.w	r2, #0
 80048a0:	f04f 0300 	mov.w	r3, #0
 80048a4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80048a8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80048ac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80048b0:	ebb2 040a 	subs.w	r4, r2, sl
 80048b4:	eb63 050b 	sbc.w	r5, r3, fp
 80048b8:	f04f 0200 	mov.w	r2, #0
 80048bc:	f04f 0300 	mov.w	r3, #0
 80048c0:	00eb      	lsls	r3, r5, #3
 80048c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80048c6:	00e2      	lsls	r2, r4, #3
 80048c8:	4614      	mov	r4, r2
 80048ca:	461d      	mov	r5, r3
 80048cc:	4643      	mov	r3, r8
 80048ce:	18e3      	adds	r3, r4, r3
 80048d0:	603b      	str	r3, [r7, #0]
 80048d2:	464b      	mov	r3, r9
 80048d4:	eb45 0303 	adc.w	r3, r5, r3
 80048d8:	607b      	str	r3, [r7, #4]
 80048da:	f04f 0200 	mov.w	r2, #0
 80048de:	f04f 0300 	mov.w	r3, #0
 80048e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80048e6:	4629      	mov	r1, r5
 80048e8:	028b      	lsls	r3, r1, #10
 80048ea:	4621      	mov	r1, r4
 80048ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80048f0:	4621      	mov	r1, r4
 80048f2:	028a      	lsls	r2, r1, #10
 80048f4:	4610      	mov	r0, r2
 80048f6:	4619      	mov	r1, r3
 80048f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048fa:	2200      	movs	r2, #0
 80048fc:	61bb      	str	r3, [r7, #24]
 80048fe:	61fa      	str	r2, [r7, #28]
 8004900:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004904:	f7fb fcc4 	bl	8000290 <__aeabi_uldivmod>
 8004908:	4602      	mov	r2, r0
 800490a:	460b      	mov	r3, r1
 800490c:	4613      	mov	r3, r2
 800490e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004910:	4b0b      	ldr	r3, [pc, #44]	; (8004940 <HAL_RCC_GetSysClockFreq+0x200>)
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	0c1b      	lsrs	r3, r3, #16
 8004916:	f003 0303 	and.w	r3, r3, #3
 800491a:	3301      	adds	r3, #1
 800491c:	005b      	lsls	r3, r3, #1
 800491e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004920:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004922:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004924:	fbb2 f3f3 	udiv	r3, r2, r3
 8004928:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800492a:	e002      	b.n	8004932 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800492c:	4b05      	ldr	r3, [pc, #20]	; (8004944 <HAL_RCC_GetSysClockFreq+0x204>)
 800492e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004930:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004932:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004934:	4618      	mov	r0, r3
 8004936:	3750      	adds	r7, #80	; 0x50
 8004938:	46bd      	mov	sp, r7
 800493a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800493e:	bf00      	nop
 8004940:	40023800 	.word	0x40023800
 8004944:	00f42400 	.word	0x00f42400
 8004948:	007a1200 	.word	0x007a1200

0800494c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800494c:	b480      	push	{r7}
 800494e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004950:	4b03      	ldr	r3, [pc, #12]	; (8004960 <HAL_RCC_GetHCLKFreq+0x14>)
 8004952:	681b      	ldr	r3, [r3, #0]
}
 8004954:	4618      	mov	r0, r3
 8004956:	46bd      	mov	sp, r7
 8004958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495c:	4770      	bx	lr
 800495e:	bf00      	nop
 8004960:	20000000 	.word	0x20000000

08004964 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004968:	f7ff fff0 	bl	800494c <HAL_RCC_GetHCLKFreq>
 800496c:	4602      	mov	r2, r0
 800496e:	4b05      	ldr	r3, [pc, #20]	; (8004984 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004970:	689b      	ldr	r3, [r3, #8]
 8004972:	0a9b      	lsrs	r3, r3, #10
 8004974:	f003 0307 	and.w	r3, r3, #7
 8004978:	4903      	ldr	r1, [pc, #12]	; (8004988 <HAL_RCC_GetPCLK1Freq+0x24>)
 800497a:	5ccb      	ldrb	r3, [r1, r3]
 800497c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004980:	4618      	mov	r0, r3
 8004982:	bd80      	pop	{r7, pc}
 8004984:	40023800 	.word	0x40023800
 8004988:	08006af0 	.word	0x08006af0

0800498c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004990:	f7ff ffdc 	bl	800494c <HAL_RCC_GetHCLKFreq>
 8004994:	4602      	mov	r2, r0
 8004996:	4b05      	ldr	r3, [pc, #20]	; (80049ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	0b5b      	lsrs	r3, r3, #13
 800499c:	f003 0307 	and.w	r3, r3, #7
 80049a0:	4903      	ldr	r1, [pc, #12]	; (80049b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80049a2:	5ccb      	ldrb	r3, [r1, r3]
 80049a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	bd80      	pop	{r7, pc}
 80049ac:	40023800 	.word	0x40023800
 80049b0:	08006af0 	.word	0x08006af0

080049b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b082      	sub	sp, #8
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d101      	bne.n	80049c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80049c2:	2301      	movs	r3, #1
 80049c4:	e03f      	b.n	8004a46 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049cc:	b2db      	uxtb	r3, r3
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d106      	bne.n	80049e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2200      	movs	r2, #0
 80049d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	f7fc f9f8 	bl	8000dd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2224      	movs	r2, #36	; 0x24
 80049e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	68da      	ldr	r2, [r3, #12]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80049f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80049f8:	6878      	ldr	r0, [r7, #4]
 80049fa:	f000 fd7b 	bl	80054f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	691a      	ldr	r2, [r3, #16]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a0c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	695a      	ldr	r2, [r3, #20]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a1c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	68da      	ldr	r2, [r3, #12]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004a2c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2200      	movs	r2, #0
 8004a32:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2220      	movs	r2, #32
 8004a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2220      	movs	r2, #32
 8004a40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004a44:	2300      	movs	r3, #0
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	3708      	adds	r7, #8
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}

08004a4e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a4e:	b580      	push	{r7, lr}
 8004a50:	b08a      	sub	sp, #40	; 0x28
 8004a52:	af02      	add	r7, sp, #8
 8004a54:	60f8      	str	r0, [r7, #12]
 8004a56:	60b9      	str	r1, [r7, #8]
 8004a58:	603b      	str	r3, [r7, #0]
 8004a5a:	4613      	mov	r3, r2
 8004a5c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a68:	b2db      	uxtb	r3, r3
 8004a6a:	2b20      	cmp	r3, #32
 8004a6c:	d17c      	bne.n	8004b68 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d002      	beq.n	8004a7a <HAL_UART_Transmit+0x2c>
 8004a74:	88fb      	ldrh	r3, [r7, #6]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d101      	bne.n	8004a7e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e075      	b.n	8004b6a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a84:	2b01      	cmp	r3, #1
 8004a86:	d101      	bne.n	8004a8c <HAL_UART_Transmit+0x3e>
 8004a88:	2302      	movs	r3, #2
 8004a8a:	e06e      	b.n	8004b6a <HAL_UART_Transmit+0x11c>
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	2201      	movs	r2, #1
 8004a90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	2200      	movs	r2, #0
 8004a98:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	2221      	movs	r2, #33	; 0x21
 8004a9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004aa2:	f7fc fa75 	bl	8000f90 <HAL_GetTick>
 8004aa6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	88fa      	ldrh	r2, [r7, #6]
 8004aac:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	88fa      	ldrh	r2, [r7, #6]
 8004ab2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004abc:	d108      	bne.n	8004ad0 <HAL_UART_Transmit+0x82>
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	691b      	ldr	r3, [r3, #16]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d104      	bne.n	8004ad0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	61bb      	str	r3, [r7, #24]
 8004ace:	e003      	b.n	8004ad8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2200      	movs	r2, #0
 8004adc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004ae0:	e02a      	b.n	8004b38 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	9300      	str	r3, [sp, #0]
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	2180      	movs	r1, #128	; 0x80
 8004aec:	68f8      	ldr	r0, [r7, #12]
 8004aee:	f000 faf9 	bl	80050e4 <UART_WaitOnFlagUntilTimeout>
 8004af2:	4603      	mov	r3, r0
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d001      	beq.n	8004afc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004af8:	2303      	movs	r3, #3
 8004afa:	e036      	b.n	8004b6a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004afc:	69fb      	ldr	r3, [r7, #28]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d10b      	bne.n	8004b1a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004b02:	69bb      	ldr	r3, [r7, #24]
 8004b04:	881b      	ldrh	r3, [r3, #0]
 8004b06:	461a      	mov	r2, r3
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b10:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004b12:	69bb      	ldr	r3, [r7, #24]
 8004b14:	3302      	adds	r3, #2
 8004b16:	61bb      	str	r3, [r7, #24]
 8004b18:	e007      	b.n	8004b2a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004b1a:	69fb      	ldr	r3, [r7, #28]
 8004b1c:	781a      	ldrb	r2, [r3, #0]
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004b24:	69fb      	ldr	r3, [r7, #28]
 8004b26:	3301      	adds	r3, #1
 8004b28:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004b2e:	b29b      	uxth	r3, r3
 8004b30:	3b01      	subs	r3, #1
 8004b32:	b29a      	uxth	r2, r3
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004b3c:	b29b      	uxth	r3, r3
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d1cf      	bne.n	8004ae2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	9300      	str	r3, [sp, #0]
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	2140      	movs	r1, #64	; 0x40
 8004b4c:	68f8      	ldr	r0, [r7, #12]
 8004b4e:	f000 fac9 	bl	80050e4 <UART_WaitOnFlagUntilTimeout>
 8004b52:	4603      	mov	r3, r0
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d001      	beq.n	8004b5c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004b58:	2303      	movs	r3, #3
 8004b5a:	e006      	b.n	8004b6a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2220      	movs	r2, #32
 8004b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004b64:	2300      	movs	r3, #0
 8004b66:	e000      	b.n	8004b6a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004b68:	2302      	movs	r3, #2
  }
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	3720      	adds	r7, #32
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}
	...

08004b74 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b0ba      	sub	sp, #232	; 0xe8
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	68db      	ldr	r3, [r3, #12]
 8004b8c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	695b      	ldr	r3, [r3, #20]
 8004b96:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004ba6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004baa:	f003 030f 	and.w	r3, r3, #15
 8004bae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004bb2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d10f      	bne.n	8004bda <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004bba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bbe:	f003 0320 	and.w	r3, r3, #32
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d009      	beq.n	8004bda <HAL_UART_IRQHandler+0x66>
 8004bc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004bca:	f003 0320 	and.w	r3, r3, #32
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d003      	beq.n	8004bda <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f000 fbd3 	bl	800537e <UART_Receive_IT>
      return;
 8004bd8:	e256      	b.n	8005088 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004bda:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	f000 80de 	beq.w	8004da0 <HAL_UART_IRQHandler+0x22c>
 8004be4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004be8:	f003 0301 	and.w	r3, r3, #1
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d106      	bne.n	8004bfe <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004bf0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004bf4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	f000 80d1 	beq.w	8004da0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004bfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c02:	f003 0301 	and.w	r3, r3, #1
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d00b      	beq.n	8004c22 <HAL_UART_IRQHandler+0xae>
 8004c0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d005      	beq.n	8004c22 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c1a:	f043 0201 	orr.w	r2, r3, #1
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004c22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c26:	f003 0304 	and.w	r3, r3, #4
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d00b      	beq.n	8004c46 <HAL_UART_IRQHandler+0xd2>
 8004c2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c32:	f003 0301 	and.w	r3, r3, #1
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d005      	beq.n	8004c46 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c3e:	f043 0202 	orr.w	r2, r3, #2
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004c46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c4a:	f003 0302 	and.w	r3, r3, #2
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d00b      	beq.n	8004c6a <HAL_UART_IRQHandler+0xf6>
 8004c52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c56:	f003 0301 	and.w	r3, r3, #1
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d005      	beq.n	8004c6a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c62:	f043 0204 	orr.w	r2, r3, #4
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004c6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c6e:	f003 0308 	and.w	r3, r3, #8
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d011      	beq.n	8004c9a <HAL_UART_IRQHandler+0x126>
 8004c76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c7a:	f003 0320 	and.w	r3, r3, #32
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d105      	bne.n	8004c8e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004c82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c86:	f003 0301 	and.w	r3, r3, #1
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d005      	beq.n	8004c9a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c92:	f043 0208 	orr.w	r2, r3, #8
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	f000 81ed 	beq.w	800507e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004ca4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ca8:	f003 0320 	and.w	r3, r3, #32
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d008      	beq.n	8004cc2 <HAL_UART_IRQHandler+0x14e>
 8004cb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004cb4:	f003 0320 	and.w	r3, r3, #32
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d002      	beq.n	8004cc2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004cbc:	6878      	ldr	r0, [r7, #4]
 8004cbe:	f000 fb5e 	bl	800537e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	695b      	ldr	r3, [r3, #20]
 8004cc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ccc:	2b40      	cmp	r3, #64	; 0x40
 8004cce:	bf0c      	ite	eq
 8004cd0:	2301      	moveq	r3, #1
 8004cd2:	2300      	movne	r3, #0
 8004cd4:	b2db      	uxtb	r3, r3
 8004cd6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cde:	f003 0308 	and.w	r3, r3, #8
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d103      	bne.n	8004cee <HAL_UART_IRQHandler+0x17a>
 8004ce6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d04f      	beq.n	8004d8e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f000 fa66 	bl	80051c0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	695b      	ldr	r3, [r3, #20]
 8004cfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cfe:	2b40      	cmp	r3, #64	; 0x40
 8004d00:	d141      	bne.n	8004d86 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	3314      	adds	r3, #20
 8004d08:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d0c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004d10:	e853 3f00 	ldrex	r3, [r3]
 8004d14:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004d18:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004d1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d20:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	3314      	adds	r3, #20
 8004d2a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004d2e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004d32:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d36:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004d3a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004d3e:	e841 2300 	strex	r3, r2, [r1]
 8004d42:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004d46:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d1d9      	bne.n	8004d02 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d013      	beq.n	8004d7e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d5a:	4a7d      	ldr	r2, [pc, #500]	; (8004f50 <HAL_UART_IRQHandler+0x3dc>)
 8004d5c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d62:	4618      	mov	r0, r3
 8004d64:	f7fc fac5 	bl	80012f2 <HAL_DMA_Abort_IT>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d016      	beq.n	8004d9c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d74:	687a      	ldr	r2, [r7, #4]
 8004d76:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004d78:	4610      	mov	r0, r2
 8004d7a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d7c:	e00e      	b.n	8004d9c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f000 f99a 	bl	80050b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d84:	e00a      	b.n	8004d9c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	f000 f996 	bl	80050b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d8c:	e006      	b.n	8004d9c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f000 f992 	bl	80050b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2200      	movs	r2, #0
 8004d98:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004d9a:	e170      	b.n	800507e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d9c:	bf00      	nop
    return;
 8004d9e:	e16e      	b.n	800507e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	f040 814a 	bne.w	800503e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004daa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004dae:	f003 0310 	and.w	r3, r3, #16
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	f000 8143 	beq.w	800503e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004db8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004dbc:	f003 0310 	and.w	r3, r3, #16
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	f000 813c 	beq.w	800503e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	60bb      	str	r3, [r7, #8]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	60bb      	str	r3, [r7, #8]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	60bb      	str	r3, [r7, #8]
 8004dda:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	695b      	ldr	r3, [r3, #20]
 8004de2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004de6:	2b40      	cmp	r3, #64	; 0x40
 8004de8:	f040 80b4 	bne.w	8004f54 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004df8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	f000 8140 	beq.w	8005082 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004e06:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004e0a:	429a      	cmp	r2, r3
 8004e0c:	f080 8139 	bcs.w	8005082 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004e16:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e1c:	69db      	ldr	r3, [r3, #28]
 8004e1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e22:	f000 8088 	beq.w	8004f36 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	330c      	adds	r3, #12
 8004e2c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e30:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004e34:	e853 3f00 	ldrex	r3, [r3]
 8004e38:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004e3c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004e40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e44:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	330c      	adds	r3, #12
 8004e4e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004e52:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004e56:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e5a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004e5e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004e62:	e841 2300 	strex	r3, r2, [r1]
 8004e66:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004e6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d1d9      	bne.n	8004e26 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	3314      	adds	r3, #20
 8004e78:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e7c:	e853 3f00 	ldrex	r3, [r3]
 8004e80:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004e82:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004e84:	f023 0301 	bic.w	r3, r3, #1
 8004e88:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	3314      	adds	r3, #20
 8004e92:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004e96:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004e9a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e9c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004e9e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004ea2:	e841 2300 	strex	r3, r2, [r1]
 8004ea6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004ea8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d1e1      	bne.n	8004e72 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	3314      	adds	r3, #20
 8004eb4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eb6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004eb8:	e853 3f00 	ldrex	r3, [r3]
 8004ebc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004ebe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ec0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ec4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	3314      	adds	r3, #20
 8004ece:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004ed2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004ed4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ed6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004ed8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004eda:	e841 2300 	strex	r3, r2, [r1]
 8004ede:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004ee0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d1e3      	bne.n	8004eae <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2220      	movs	r2, #32
 8004eea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	330c      	adds	r3, #12
 8004efa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004efc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004efe:	e853 3f00 	ldrex	r3, [r3]
 8004f02:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004f04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f06:	f023 0310 	bic.w	r3, r3, #16
 8004f0a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	330c      	adds	r3, #12
 8004f14:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004f18:	65ba      	str	r2, [r7, #88]	; 0x58
 8004f1a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f1c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004f1e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004f20:	e841 2300 	strex	r3, r2, [r1]
 8004f24:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004f26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d1e3      	bne.n	8004ef4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f30:	4618      	mov	r0, r3
 8004f32:	f7fc f96e 	bl	8001212 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004f3e:	b29b      	uxth	r3, r3
 8004f40:	1ad3      	subs	r3, r2, r3
 8004f42:	b29b      	uxth	r3, r3
 8004f44:	4619      	mov	r1, r3
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f000 f8c0 	bl	80050cc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004f4c:	e099      	b.n	8005082 <HAL_UART_IRQHandler+0x50e>
 8004f4e:	bf00      	nop
 8004f50:	08005287 	.word	0x08005287
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004f5c:	b29b      	uxth	r3, r3
 8004f5e:	1ad3      	subs	r3, r2, r3
 8004f60:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004f68:	b29b      	uxth	r3, r3
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	f000 808b 	beq.w	8005086 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004f70:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	f000 8086 	beq.w	8005086 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	330c      	adds	r3, #12
 8004f80:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f84:	e853 3f00 	ldrex	r3, [r3]
 8004f88:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004f8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f8c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004f90:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	330c      	adds	r3, #12
 8004f9a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004f9e:	647a      	str	r2, [r7, #68]	; 0x44
 8004fa0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fa2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004fa4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004fa6:	e841 2300 	strex	r3, r2, [r1]
 8004faa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004fac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d1e3      	bne.n	8004f7a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	3314      	adds	r3, #20
 8004fb8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fbc:	e853 3f00 	ldrex	r3, [r3]
 8004fc0:	623b      	str	r3, [r7, #32]
   return(result);
 8004fc2:	6a3b      	ldr	r3, [r7, #32]
 8004fc4:	f023 0301 	bic.w	r3, r3, #1
 8004fc8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	3314      	adds	r3, #20
 8004fd2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004fd6:	633a      	str	r2, [r7, #48]	; 0x30
 8004fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fda:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004fdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fde:	e841 2300 	strex	r3, r2, [r1]
 8004fe2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d1e3      	bne.n	8004fb2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2220      	movs	r2, #32
 8004fee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	330c      	adds	r3, #12
 8004ffe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	e853 3f00 	ldrex	r3, [r3]
 8005006:	60fb      	str	r3, [r7, #12]
   return(result);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	f023 0310 	bic.w	r3, r3, #16
 800500e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	330c      	adds	r3, #12
 8005018:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800501c:	61fa      	str	r2, [r7, #28]
 800501e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005020:	69b9      	ldr	r1, [r7, #24]
 8005022:	69fa      	ldr	r2, [r7, #28]
 8005024:	e841 2300 	strex	r3, r2, [r1]
 8005028:	617b      	str	r3, [r7, #20]
   return(result);
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d1e3      	bne.n	8004ff8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005030:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005034:	4619      	mov	r1, r3
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f000 f848 	bl	80050cc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800503c:	e023      	b.n	8005086 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800503e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005042:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005046:	2b00      	cmp	r3, #0
 8005048:	d009      	beq.n	800505e <HAL_UART_IRQHandler+0x4ea>
 800504a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800504e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005052:	2b00      	cmp	r3, #0
 8005054:	d003      	beq.n	800505e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f000 f929 	bl	80052ae <UART_Transmit_IT>
    return;
 800505c:	e014      	b.n	8005088 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800505e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005062:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005066:	2b00      	cmp	r3, #0
 8005068:	d00e      	beq.n	8005088 <HAL_UART_IRQHandler+0x514>
 800506a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800506e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005072:	2b00      	cmp	r3, #0
 8005074:	d008      	beq.n	8005088 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005076:	6878      	ldr	r0, [r7, #4]
 8005078:	f000 f969 	bl	800534e <UART_EndTransmit_IT>
    return;
 800507c:	e004      	b.n	8005088 <HAL_UART_IRQHandler+0x514>
    return;
 800507e:	bf00      	nop
 8005080:	e002      	b.n	8005088 <HAL_UART_IRQHandler+0x514>
      return;
 8005082:	bf00      	nop
 8005084:	e000      	b.n	8005088 <HAL_UART_IRQHandler+0x514>
      return;
 8005086:	bf00      	nop
  }
}
 8005088:	37e8      	adds	r7, #232	; 0xe8
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}
 800508e:	bf00      	nop

08005090 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005090:	b480      	push	{r7}
 8005092:	b083      	sub	sp, #12
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005098:	bf00      	nop
 800509a:	370c      	adds	r7, #12
 800509c:	46bd      	mov	sp, r7
 800509e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a2:	4770      	bx	lr

080050a4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b083      	sub	sp, #12
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80050ac:	bf00      	nop
 80050ae:	370c      	adds	r7, #12
 80050b0:	46bd      	mov	sp, r7
 80050b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b6:	4770      	bx	lr

080050b8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b083      	sub	sp, #12
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80050c0:	bf00      	nop
 80050c2:	370c      	adds	r7, #12
 80050c4:	46bd      	mov	sp, r7
 80050c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ca:	4770      	bx	lr

080050cc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b083      	sub	sp, #12
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
 80050d4:	460b      	mov	r3, r1
 80050d6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80050d8:	bf00      	nop
 80050da:	370c      	adds	r7, #12
 80050dc:	46bd      	mov	sp, r7
 80050de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e2:	4770      	bx	lr

080050e4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b090      	sub	sp, #64	; 0x40
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	60f8      	str	r0, [r7, #12]
 80050ec:	60b9      	str	r1, [r7, #8]
 80050ee:	603b      	str	r3, [r7, #0]
 80050f0:	4613      	mov	r3, r2
 80050f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050f4:	e050      	b.n	8005198 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050fc:	d04c      	beq.n	8005198 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80050fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005100:	2b00      	cmp	r3, #0
 8005102:	d007      	beq.n	8005114 <UART_WaitOnFlagUntilTimeout+0x30>
 8005104:	f7fb ff44 	bl	8000f90 <HAL_GetTick>
 8005108:	4602      	mov	r2, r0
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	1ad3      	subs	r3, r2, r3
 800510e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005110:	429a      	cmp	r2, r3
 8005112:	d241      	bcs.n	8005198 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	330c      	adds	r3, #12
 800511a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800511c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800511e:	e853 3f00 	ldrex	r3, [r3]
 8005122:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005126:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800512a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	330c      	adds	r3, #12
 8005132:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005134:	637a      	str	r2, [r7, #52]	; 0x34
 8005136:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005138:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800513a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800513c:	e841 2300 	strex	r3, r2, [r1]
 8005140:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005144:	2b00      	cmp	r3, #0
 8005146:	d1e5      	bne.n	8005114 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	3314      	adds	r3, #20
 800514e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	e853 3f00 	ldrex	r3, [r3]
 8005156:	613b      	str	r3, [r7, #16]
   return(result);
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	f023 0301 	bic.w	r3, r3, #1
 800515e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	3314      	adds	r3, #20
 8005166:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005168:	623a      	str	r2, [r7, #32]
 800516a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800516c:	69f9      	ldr	r1, [r7, #28]
 800516e:	6a3a      	ldr	r2, [r7, #32]
 8005170:	e841 2300 	strex	r3, r2, [r1]
 8005174:	61bb      	str	r3, [r7, #24]
   return(result);
 8005176:	69bb      	ldr	r3, [r7, #24]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d1e5      	bne.n	8005148 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2220      	movs	r2, #32
 8005180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2220      	movs	r2, #32
 8005188:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	2200      	movs	r2, #0
 8005190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005194:	2303      	movs	r3, #3
 8005196:	e00f      	b.n	80051b8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	681a      	ldr	r2, [r3, #0]
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	4013      	ands	r3, r2
 80051a2:	68ba      	ldr	r2, [r7, #8]
 80051a4:	429a      	cmp	r2, r3
 80051a6:	bf0c      	ite	eq
 80051a8:	2301      	moveq	r3, #1
 80051aa:	2300      	movne	r3, #0
 80051ac:	b2db      	uxtb	r3, r3
 80051ae:	461a      	mov	r2, r3
 80051b0:	79fb      	ldrb	r3, [r7, #7]
 80051b2:	429a      	cmp	r2, r3
 80051b4:	d09f      	beq.n	80050f6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80051b6:	2300      	movs	r3, #0
}
 80051b8:	4618      	mov	r0, r3
 80051ba:	3740      	adds	r7, #64	; 0x40
 80051bc:	46bd      	mov	sp, r7
 80051be:	bd80      	pop	{r7, pc}

080051c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b095      	sub	sp, #84	; 0x54
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	330c      	adds	r3, #12
 80051ce:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051d2:	e853 3f00 	ldrex	r3, [r3]
 80051d6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80051d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051da:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80051de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	330c      	adds	r3, #12
 80051e6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80051e8:	643a      	str	r2, [r7, #64]	; 0x40
 80051ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80051ee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80051f0:	e841 2300 	strex	r3, r2, [r1]
 80051f4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80051f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d1e5      	bne.n	80051c8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	3314      	adds	r3, #20
 8005202:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005204:	6a3b      	ldr	r3, [r7, #32]
 8005206:	e853 3f00 	ldrex	r3, [r3]
 800520a:	61fb      	str	r3, [r7, #28]
   return(result);
 800520c:	69fb      	ldr	r3, [r7, #28]
 800520e:	f023 0301 	bic.w	r3, r3, #1
 8005212:	64bb      	str	r3, [r7, #72]	; 0x48
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	3314      	adds	r3, #20
 800521a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800521c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800521e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005220:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005222:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005224:	e841 2300 	strex	r3, r2, [r1]
 8005228:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800522a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800522c:	2b00      	cmp	r3, #0
 800522e:	d1e5      	bne.n	80051fc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005234:	2b01      	cmp	r3, #1
 8005236:	d119      	bne.n	800526c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	330c      	adds	r3, #12
 800523e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	e853 3f00 	ldrex	r3, [r3]
 8005246:	60bb      	str	r3, [r7, #8]
   return(result);
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	f023 0310 	bic.w	r3, r3, #16
 800524e:	647b      	str	r3, [r7, #68]	; 0x44
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	330c      	adds	r3, #12
 8005256:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005258:	61ba      	str	r2, [r7, #24]
 800525a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800525c:	6979      	ldr	r1, [r7, #20]
 800525e:	69ba      	ldr	r2, [r7, #24]
 8005260:	e841 2300 	strex	r3, r2, [r1]
 8005264:	613b      	str	r3, [r7, #16]
   return(result);
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d1e5      	bne.n	8005238 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2220      	movs	r2, #32
 8005270:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2200      	movs	r2, #0
 8005278:	631a      	str	r2, [r3, #48]	; 0x30
}
 800527a:	bf00      	nop
 800527c:	3754      	adds	r7, #84	; 0x54
 800527e:	46bd      	mov	sp, r7
 8005280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005284:	4770      	bx	lr

08005286 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005286:	b580      	push	{r7, lr}
 8005288:	b084      	sub	sp, #16
 800528a:	af00      	add	r7, sp, #0
 800528c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005292:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	2200      	movs	r2, #0
 8005298:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2200      	movs	r2, #0
 800529e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80052a0:	68f8      	ldr	r0, [r7, #12]
 80052a2:	f7ff ff09 	bl	80050b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80052a6:	bf00      	nop
 80052a8:	3710      	adds	r7, #16
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}

080052ae <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80052ae:	b480      	push	{r7}
 80052b0:	b085      	sub	sp, #20
 80052b2:	af00      	add	r7, sp, #0
 80052b4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052bc:	b2db      	uxtb	r3, r3
 80052be:	2b21      	cmp	r3, #33	; 0x21
 80052c0:	d13e      	bne.n	8005340 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	689b      	ldr	r3, [r3, #8]
 80052c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052ca:	d114      	bne.n	80052f6 <UART_Transmit_IT+0x48>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	691b      	ldr	r3, [r3, #16]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d110      	bne.n	80052f6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6a1b      	ldr	r3, [r3, #32]
 80052d8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	881b      	ldrh	r3, [r3, #0]
 80052de:	461a      	mov	r2, r3
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80052e8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6a1b      	ldr	r3, [r3, #32]
 80052ee:	1c9a      	adds	r2, r3, #2
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	621a      	str	r2, [r3, #32]
 80052f4:	e008      	b.n	8005308 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6a1b      	ldr	r3, [r3, #32]
 80052fa:	1c59      	adds	r1, r3, #1
 80052fc:	687a      	ldr	r2, [r7, #4]
 80052fe:	6211      	str	r1, [r2, #32]
 8005300:	781a      	ldrb	r2, [r3, #0]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800530c:	b29b      	uxth	r3, r3
 800530e:	3b01      	subs	r3, #1
 8005310:	b29b      	uxth	r3, r3
 8005312:	687a      	ldr	r2, [r7, #4]
 8005314:	4619      	mov	r1, r3
 8005316:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005318:	2b00      	cmp	r3, #0
 800531a:	d10f      	bne.n	800533c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	68da      	ldr	r2, [r3, #12]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800532a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	68da      	ldr	r2, [r3, #12]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800533a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800533c:	2300      	movs	r3, #0
 800533e:	e000      	b.n	8005342 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005340:	2302      	movs	r3, #2
  }
}
 8005342:	4618      	mov	r0, r3
 8005344:	3714      	adds	r7, #20
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr

0800534e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800534e:	b580      	push	{r7, lr}
 8005350:	b082      	sub	sp, #8
 8005352:	af00      	add	r7, sp, #0
 8005354:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	68da      	ldr	r2, [r3, #12]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005364:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2220      	movs	r2, #32
 800536a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	f7ff fe8e 	bl	8005090 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005374:	2300      	movs	r3, #0
}
 8005376:	4618      	mov	r0, r3
 8005378:	3708      	adds	r7, #8
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}

0800537e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800537e:	b580      	push	{r7, lr}
 8005380:	b08c      	sub	sp, #48	; 0x30
 8005382:	af00      	add	r7, sp, #0
 8005384:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800538c:	b2db      	uxtb	r3, r3
 800538e:	2b22      	cmp	r3, #34	; 0x22
 8005390:	f040 80ab 	bne.w	80054ea <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	689b      	ldr	r3, [r3, #8]
 8005398:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800539c:	d117      	bne.n	80053ce <UART_Receive_IT+0x50>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	691b      	ldr	r3, [r3, #16]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d113      	bne.n	80053ce <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80053a6:	2300      	movs	r3, #0
 80053a8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053ae:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	b29b      	uxth	r3, r3
 80053b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053bc:	b29a      	uxth	r2, r3
 80053be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053c0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053c6:	1c9a      	adds	r2, r3, #2
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	629a      	str	r2, [r3, #40]	; 0x28
 80053cc:	e026      	b.n	800541c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053d2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80053d4:	2300      	movs	r3, #0
 80053d6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053e0:	d007      	beq.n	80053f2 <UART_Receive_IT+0x74>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	689b      	ldr	r3, [r3, #8]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d10a      	bne.n	8005400 <UART_Receive_IT+0x82>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	691b      	ldr	r3, [r3, #16]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d106      	bne.n	8005400 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	b2da      	uxtb	r2, r3
 80053fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053fc:	701a      	strb	r2, [r3, #0]
 80053fe:	e008      	b.n	8005412 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	b2db      	uxtb	r3, r3
 8005408:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800540c:	b2da      	uxtb	r2, r3
 800540e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005410:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005416:	1c5a      	adds	r2, r3, #1
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005420:	b29b      	uxth	r3, r3
 8005422:	3b01      	subs	r3, #1
 8005424:	b29b      	uxth	r3, r3
 8005426:	687a      	ldr	r2, [r7, #4]
 8005428:	4619      	mov	r1, r3
 800542a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800542c:	2b00      	cmp	r3, #0
 800542e:	d15a      	bne.n	80054e6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	68da      	ldr	r2, [r3, #12]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f022 0220 	bic.w	r2, r2, #32
 800543e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	68da      	ldr	r2, [r3, #12]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800544e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	695a      	ldr	r2, [r3, #20]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f022 0201 	bic.w	r2, r2, #1
 800545e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2220      	movs	r2, #32
 8005464:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800546c:	2b01      	cmp	r3, #1
 800546e:	d135      	bne.n	80054dc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2200      	movs	r2, #0
 8005474:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	330c      	adds	r3, #12
 800547c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	e853 3f00 	ldrex	r3, [r3]
 8005484:	613b      	str	r3, [r7, #16]
   return(result);
 8005486:	693b      	ldr	r3, [r7, #16]
 8005488:	f023 0310 	bic.w	r3, r3, #16
 800548c:	627b      	str	r3, [r7, #36]	; 0x24
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	330c      	adds	r3, #12
 8005494:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005496:	623a      	str	r2, [r7, #32]
 8005498:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800549a:	69f9      	ldr	r1, [r7, #28]
 800549c:	6a3a      	ldr	r2, [r7, #32]
 800549e:	e841 2300 	strex	r3, r2, [r1]
 80054a2:	61bb      	str	r3, [r7, #24]
   return(result);
 80054a4:	69bb      	ldr	r3, [r7, #24]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d1e5      	bne.n	8005476 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f003 0310 	and.w	r3, r3, #16
 80054b4:	2b10      	cmp	r3, #16
 80054b6:	d10a      	bne.n	80054ce <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80054b8:	2300      	movs	r3, #0
 80054ba:	60fb      	str	r3, [r7, #12]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	60fb      	str	r3, [r7, #12]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	60fb      	str	r3, [r7, #12]
 80054cc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80054d2:	4619      	mov	r1, r3
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	f7ff fdf9 	bl	80050cc <HAL_UARTEx_RxEventCallback>
 80054da:	e002      	b.n	80054e2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80054dc:	6878      	ldr	r0, [r7, #4]
 80054de:	f7ff fde1 	bl	80050a4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80054e2:	2300      	movs	r3, #0
 80054e4:	e002      	b.n	80054ec <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80054e6:	2300      	movs	r3, #0
 80054e8:	e000      	b.n	80054ec <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80054ea:	2302      	movs	r3, #2
  }
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	3730      	adds	r7, #48	; 0x30
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bd80      	pop	{r7, pc}

080054f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80054f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80054f8:	b0c0      	sub	sp, #256	; 0x100
 80054fa:	af00      	add	r7, sp, #0
 80054fc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005500:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	691b      	ldr	r3, [r3, #16]
 8005508:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800550c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005510:	68d9      	ldr	r1, [r3, #12]
 8005512:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005516:	681a      	ldr	r2, [r3, #0]
 8005518:	ea40 0301 	orr.w	r3, r0, r1
 800551c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800551e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005522:	689a      	ldr	r2, [r3, #8]
 8005524:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005528:	691b      	ldr	r3, [r3, #16]
 800552a:	431a      	orrs	r2, r3
 800552c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005530:	695b      	ldr	r3, [r3, #20]
 8005532:	431a      	orrs	r2, r3
 8005534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005538:	69db      	ldr	r3, [r3, #28]
 800553a:	4313      	orrs	r3, r2
 800553c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005540:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	68db      	ldr	r3, [r3, #12]
 8005548:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800554c:	f021 010c 	bic.w	r1, r1, #12
 8005550:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005554:	681a      	ldr	r2, [r3, #0]
 8005556:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800555a:	430b      	orrs	r3, r1
 800555c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800555e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	695b      	ldr	r3, [r3, #20]
 8005566:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800556a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800556e:	6999      	ldr	r1, [r3, #24]
 8005570:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005574:	681a      	ldr	r2, [r3, #0]
 8005576:	ea40 0301 	orr.w	r3, r0, r1
 800557a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800557c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005580:	681a      	ldr	r2, [r3, #0]
 8005582:	4b8f      	ldr	r3, [pc, #572]	; (80057c0 <UART_SetConfig+0x2cc>)
 8005584:	429a      	cmp	r2, r3
 8005586:	d005      	beq.n	8005594 <UART_SetConfig+0xa0>
 8005588:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800558c:	681a      	ldr	r2, [r3, #0]
 800558e:	4b8d      	ldr	r3, [pc, #564]	; (80057c4 <UART_SetConfig+0x2d0>)
 8005590:	429a      	cmp	r2, r3
 8005592:	d104      	bne.n	800559e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005594:	f7ff f9fa 	bl	800498c <HAL_RCC_GetPCLK2Freq>
 8005598:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800559c:	e003      	b.n	80055a6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800559e:	f7ff f9e1 	bl	8004964 <HAL_RCC_GetPCLK1Freq>
 80055a2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055aa:	69db      	ldr	r3, [r3, #28]
 80055ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055b0:	f040 810c 	bne.w	80057cc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80055b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80055b8:	2200      	movs	r2, #0
 80055ba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80055be:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80055c2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80055c6:	4622      	mov	r2, r4
 80055c8:	462b      	mov	r3, r5
 80055ca:	1891      	adds	r1, r2, r2
 80055cc:	65b9      	str	r1, [r7, #88]	; 0x58
 80055ce:	415b      	adcs	r3, r3
 80055d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80055d2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80055d6:	4621      	mov	r1, r4
 80055d8:	eb12 0801 	adds.w	r8, r2, r1
 80055dc:	4629      	mov	r1, r5
 80055de:	eb43 0901 	adc.w	r9, r3, r1
 80055e2:	f04f 0200 	mov.w	r2, #0
 80055e6:	f04f 0300 	mov.w	r3, #0
 80055ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80055ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80055f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80055f6:	4690      	mov	r8, r2
 80055f8:	4699      	mov	r9, r3
 80055fa:	4623      	mov	r3, r4
 80055fc:	eb18 0303 	adds.w	r3, r8, r3
 8005600:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005604:	462b      	mov	r3, r5
 8005606:	eb49 0303 	adc.w	r3, r9, r3
 800560a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800560e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005612:	685b      	ldr	r3, [r3, #4]
 8005614:	2200      	movs	r2, #0
 8005616:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800561a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800561e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005622:	460b      	mov	r3, r1
 8005624:	18db      	adds	r3, r3, r3
 8005626:	653b      	str	r3, [r7, #80]	; 0x50
 8005628:	4613      	mov	r3, r2
 800562a:	eb42 0303 	adc.w	r3, r2, r3
 800562e:	657b      	str	r3, [r7, #84]	; 0x54
 8005630:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005634:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005638:	f7fa fe2a 	bl	8000290 <__aeabi_uldivmod>
 800563c:	4602      	mov	r2, r0
 800563e:	460b      	mov	r3, r1
 8005640:	4b61      	ldr	r3, [pc, #388]	; (80057c8 <UART_SetConfig+0x2d4>)
 8005642:	fba3 2302 	umull	r2, r3, r3, r2
 8005646:	095b      	lsrs	r3, r3, #5
 8005648:	011c      	lsls	r4, r3, #4
 800564a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800564e:	2200      	movs	r2, #0
 8005650:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005654:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005658:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800565c:	4642      	mov	r2, r8
 800565e:	464b      	mov	r3, r9
 8005660:	1891      	adds	r1, r2, r2
 8005662:	64b9      	str	r1, [r7, #72]	; 0x48
 8005664:	415b      	adcs	r3, r3
 8005666:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005668:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800566c:	4641      	mov	r1, r8
 800566e:	eb12 0a01 	adds.w	sl, r2, r1
 8005672:	4649      	mov	r1, r9
 8005674:	eb43 0b01 	adc.w	fp, r3, r1
 8005678:	f04f 0200 	mov.w	r2, #0
 800567c:	f04f 0300 	mov.w	r3, #0
 8005680:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005684:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005688:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800568c:	4692      	mov	sl, r2
 800568e:	469b      	mov	fp, r3
 8005690:	4643      	mov	r3, r8
 8005692:	eb1a 0303 	adds.w	r3, sl, r3
 8005696:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800569a:	464b      	mov	r3, r9
 800569c:	eb4b 0303 	adc.w	r3, fp, r3
 80056a0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80056a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056a8:	685b      	ldr	r3, [r3, #4]
 80056aa:	2200      	movs	r2, #0
 80056ac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80056b0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80056b4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80056b8:	460b      	mov	r3, r1
 80056ba:	18db      	adds	r3, r3, r3
 80056bc:	643b      	str	r3, [r7, #64]	; 0x40
 80056be:	4613      	mov	r3, r2
 80056c0:	eb42 0303 	adc.w	r3, r2, r3
 80056c4:	647b      	str	r3, [r7, #68]	; 0x44
 80056c6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80056ca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80056ce:	f7fa fddf 	bl	8000290 <__aeabi_uldivmod>
 80056d2:	4602      	mov	r2, r0
 80056d4:	460b      	mov	r3, r1
 80056d6:	4611      	mov	r1, r2
 80056d8:	4b3b      	ldr	r3, [pc, #236]	; (80057c8 <UART_SetConfig+0x2d4>)
 80056da:	fba3 2301 	umull	r2, r3, r3, r1
 80056de:	095b      	lsrs	r3, r3, #5
 80056e0:	2264      	movs	r2, #100	; 0x64
 80056e2:	fb02 f303 	mul.w	r3, r2, r3
 80056e6:	1acb      	subs	r3, r1, r3
 80056e8:	00db      	lsls	r3, r3, #3
 80056ea:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80056ee:	4b36      	ldr	r3, [pc, #216]	; (80057c8 <UART_SetConfig+0x2d4>)
 80056f0:	fba3 2302 	umull	r2, r3, r3, r2
 80056f4:	095b      	lsrs	r3, r3, #5
 80056f6:	005b      	lsls	r3, r3, #1
 80056f8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80056fc:	441c      	add	r4, r3
 80056fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005702:	2200      	movs	r2, #0
 8005704:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005708:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800570c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005710:	4642      	mov	r2, r8
 8005712:	464b      	mov	r3, r9
 8005714:	1891      	adds	r1, r2, r2
 8005716:	63b9      	str	r1, [r7, #56]	; 0x38
 8005718:	415b      	adcs	r3, r3
 800571a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800571c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005720:	4641      	mov	r1, r8
 8005722:	1851      	adds	r1, r2, r1
 8005724:	6339      	str	r1, [r7, #48]	; 0x30
 8005726:	4649      	mov	r1, r9
 8005728:	414b      	adcs	r3, r1
 800572a:	637b      	str	r3, [r7, #52]	; 0x34
 800572c:	f04f 0200 	mov.w	r2, #0
 8005730:	f04f 0300 	mov.w	r3, #0
 8005734:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005738:	4659      	mov	r1, fp
 800573a:	00cb      	lsls	r3, r1, #3
 800573c:	4651      	mov	r1, sl
 800573e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005742:	4651      	mov	r1, sl
 8005744:	00ca      	lsls	r2, r1, #3
 8005746:	4610      	mov	r0, r2
 8005748:	4619      	mov	r1, r3
 800574a:	4603      	mov	r3, r0
 800574c:	4642      	mov	r2, r8
 800574e:	189b      	adds	r3, r3, r2
 8005750:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005754:	464b      	mov	r3, r9
 8005756:	460a      	mov	r2, r1
 8005758:	eb42 0303 	adc.w	r3, r2, r3
 800575c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005760:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	2200      	movs	r2, #0
 8005768:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800576c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005770:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005774:	460b      	mov	r3, r1
 8005776:	18db      	adds	r3, r3, r3
 8005778:	62bb      	str	r3, [r7, #40]	; 0x28
 800577a:	4613      	mov	r3, r2
 800577c:	eb42 0303 	adc.w	r3, r2, r3
 8005780:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005782:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005786:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800578a:	f7fa fd81 	bl	8000290 <__aeabi_uldivmod>
 800578e:	4602      	mov	r2, r0
 8005790:	460b      	mov	r3, r1
 8005792:	4b0d      	ldr	r3, [pc, #52]	; (80057c8 <UART_SetConfig+0x2d4>)
 8005794:	fba3 1302 	umull	r1, r3, r3, r2
 8005798:	095b      	lsrs	r3, r3, #5
 800579a:	2164      	movs	r1, #100	; 0x64
 800579c:	fb01 f303 	mul.w	r3, r1, r3
 80057a0:	1ad3      	subs	r3, r2, r3
 80057a2:	00db      	lsls	r3, r3, #3
 80057a4:	3332      	adds	r3, #50	; 0x32
 80057a6:	4a08      	ldr	r2, [pc, #32]	; (80057c8 <UART_SetConfig+0x2d4>)
 80057a8:	fba2 2303 	umull	r2, r3, r2, r3
 80057ac:	095b      	lsrs	r3, r3, #5
 80057ae:	f003 0207 	and.w	r2, r3, #7
 80057b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4422      	add	r2, r4
 80057ba:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80057bc:	e105      	b.n	80059ca <UART_SetConfig+0x4d6>
 80057be:	bf00      	nop
 80057c0:	40011000 	.word	0x40011000
 80057c4:	40011400 	.word	0x40011400
 80057c8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80057cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80057d0:	2200      	movs	r2, #0
 80057d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80057d6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80057da:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80057de:	4642      	mov	r2, r8
 80057e0:	464b      	mov	r3, r9
 80057e2:	1891      	adds	r1, r2, r2
 80057e4:	6239      	str	r1, [r7, #32]
 80057e6:	415b      	adcs	r3, r3
 80057e8:	627b      	str	r3, [r7, #36]	; 0x24
 80057ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80057ee:	4641      	mov	r1, r8
 80057f0:	1854      	adds	r4, r2, r1
 80057f2:	4649      	mov	r1, r9
 80057f4:	eb43 0501 	adc.w	r5, r3, r1
 80057f8:	f04f 0200 	mov.w	r2, #0
 80057fc:	f04f 0300 	mov.w	r3, #0
 8005800:	00eb      	lsls	r3, r5, #3
 8005802:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005806:	00e2      	lsls	r2, r4, #3
 8005808:	4614      	mov	r4, r2
 800580a:	461d      	mov	r5, r3
 800580c:	4643      	mov	r3, r8
 800580e:	18e3      	adds	r3, r4, r3
 8005810:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005814:	464b      	mov	r3, r9
 8005816:	eb45 0303 	adc.w	r3, r5, r3
 800581a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800581e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	2200      	movs	r2, #0
 8005826:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800582a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800582e:	f04f 0200 	mov.w	r2, #0
 8005832:	f04f 0300 	mov.w	r3, #0
 8005836:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800583a:	4629      	mov	r1, r5
 800583c:	008b      	lsls	r3, r1, #2
 800583e:	4621      	mov	r1, r4
 8005840:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005844:	4621      	mov	r1, r4
 8005846:	008a      	lsls	r2, r1, #2
 8005848:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800584c:	f7fa fd20 	bl	8000290 <__aeabi_uldivmod>
 8005850:	4602      	mov	r2, r0
 8005852:	460b      	mov	r3, r1
 8005854:	4b60      	ldr	r3, [pc, #384]	; (80059d8 <UART_SetConfig+0x4e4>)
 8005856:	fba3 2302 	umull	r2, r3, r3, r2
 800585a:	095b      	lsrs	r3, r3, #5
 800585c:	011c      	lsls	r4, r3, #4
 800585e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005862:	2200      	movs	r2, #0
 8005864:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005868:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800586c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005870:	4642      	mov	r2, r8
 8005872:	464b      	mov	r3, r9
 8005874:	1891      	adds	r1, r2, r2
 8005876:	61b9      	str	r1, [r7, #24]
 8005878:	415b      	adcs	r3, r3
 800587a:	61fb      	str	r3, [r7, #28]
 800587c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005880:	4641      	mov	r1, r8
 8005882:	1851      	adds	r1, r2, r1
 8005884:	6139      	str	r1, [r7, #16]
 8005886:	4649      	mov	r1, r9
 8005888:	414b      	adcs	r3, r1
 800588a:	617b      	str	r3, [r7, #20]
 800588c:	f04f 0200 	mov.w	r2, #0
 8005890:	f04f 0300 	mov.w	r3, #0
 8005894:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005898:	4659      	mov	r1, fp
 800589a:	00cb      	lsls	r3, r1, #3
 800589c:	4651      	mov	r1, sl
 800589e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80058a2:	4651      	mov	r1, sl
 80058a4:	00ca      	lsls	r2, r1, #3
 80058a6:	4610      	mov	r0, r2
 80058a8:	4619      	mov	r1, r3
 80058aa:	4603      	mov	r3, r0
 80058ac:	4642      	mov	r2, r8
 80058ae:	189b      	adds	r3, r3, r2
 80058b0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80058b4:	464b      	mov	r3, r9
 80058b6:	460a      	mov	r2, r1
 80058b8:	eb42 0303 	adc.w	r3, r2, r3
 80058bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80058c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	2200      	movs	r2, #0
 80058c8:	67bb      	str	r3, [r7, #120]	; 0x78
 80058ca:	67fa      	str	r2, [r7, #124]	; 0x7c
 80058cc:	f04f 0200 	mov.w	r2, #0
 80058d0:	f04f 0300 	mov.w	r3, #0
 80058d4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80058d8:	4649      	mov	r1, r9
 80058da:	008b      	lsls	r3, r1, #2
 80058dc:	4641      	mov	r1, r8
 80058de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80058e2:	4641      	mov	r1, r8
 80058e4:	008a      	lsls	r2, r1, #2
 80058e6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80058ea:	f7fa fcd1 	bl	8000290 <__aeabi_uldivmod>
 80058ee:	4602      	mov	r2, r0
 80058f0:	460b      	mov	r3, r1
 80058f2:	4b39      	ldr	r3, [pc, #228]	; (80059d8 <UART_SetConfig+0x4e4>)
 80058f4:	fba3 1302 	umull	r1, r3, r3, r2
 80058f8:	095b      	lsrs	r3, r3, #5
 80058fa:	2164      	movs	r1, #100	; 0x64
 80058fc:	fb01 f303 	mul.w	r3, r1, r3
 8005900:	1ad3      	subs	r3, r2, r3
 8005902:	011b      	lsls	r3, r3, #4
 8005904:	3332      	adds	r3, #50	; 0x32
 8005906:	4a34      	ldr	r2, [pc, #208]	; (80059d8 <UART_SetConfig+0x4e4>)
 8005908:	fba2 2303 	umull	r2, r3, r2, r3
 800590c:	095b      	lsrs	r3, r3, #5
 800590e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005912:	441c      	add	r4, r3
 8005914:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005918:	2200      	movs	r2, #0
 800591a:	673b      	str	r3, [r7, #112]	; 0x70
 800591c:	677a      	str	r2, [r7, #116]	; 0x74
 800591e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005922:	4642      	mov	r2, r8
 8005924:	464b      	mov	r3, r9
 8005926:	1891      	adds	r1, r2, r2
 8005928:	60b9      	str	r1, [r7, #8]
 800592a:	415b      	adcs	r3, r3
 800592c:	60fb      	str	r3, [r7, #12]
 800592e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005932:	4641      	mov	r1, r8
 8005934:	1851      	adds	r1, r2, r1
 8005936:	6039      	str	r1, [r7, #0]
 8005938:	4649      	mov	r1, r9
 800593a:	414b      	adcs	r3, r1
 800593c:	607b      	str	r3, [r7, #4]
 800593e:	f04f 0200 	mov.w	r2, #0
 8005942:	f04f 0300 	mov.w	r3, #0
 8005946:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800594a:	4659      	mov	r1, fp
 800594c:	00cb      	lsls	r3, r1, #3
 800594e:	4651      	mov	r1, sl
 8005950:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005954:	4651      	mov	r1, sl
 8005956:	00ca      	lsls	r2, r1, #3
 8005958:	4610      	mov	r0, r2
 800595a:	4619      	mov	r1, r3
 800595c:	4603      	mov	r3, r0
 800595e:	4642      	mov	r2, r8
 8005960:	189b      	adds	r3, r3, r2
 8005962:	66bb      	str	r3, [r7, #104]	; 0x68
 8005964:	464b      	mov	r3, r9
 8005966:	460a      	mov	r2, r1
 8005968:	eb42 0303 	adc.w	r3, r2, r3
 800596c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800596e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	2200      	movs	r2, #0
 8005976:	663b      	str	r3, [r7, #96]	; 0x60
 8005978:	667a      	str	r2, [r7, #100]	; 0x64
 800597a:	f04f 0200 	mov.w	r2, #0
 800597e:	f04f 0300 	mov.w	r3, #0
 8005982:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005986:	4649      	mov	r1, r9
 8005988:	008b      	lsls	r3, r1, #2
 800598a:	4641      	mov	r1, r8
 800598c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005990:	4641      	mov	r1, r8
 8005992:	008a      	lsls	r2, r1, #2
 8005994:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005998:	f7fa fc7a 	bl	8000290 <__aeabi_uldivmod>
 800599c:	4602      	mov	r2, r0
 800599e:	460b      	mov	r3, r1
 80059a0:	4b0d      	ldr	r3, [pc, #52]	; (80059d8 <UART_SetConfig+0x4e4>)
 80059a2:	fba3 1302 	umull	r1, r3, r3, r2
 80059a6:	095b      	lsrs	r3, r3, #5
 80059a8:	2164      	movs	r1, #100	; 0x64
 80059aa:	fb01 f303 	mul.w	r3, r1, r3
 80059ae:	1ad3      	subs	r3, r2, r3
 80059b0:	011b      	lsls	r3, r3, #4
 80059b2:	3332      	adds	r3, #50	; 0x32
 80059b4:	4a08      	ldr	r2, [pc, #32]	; (80059d8 <UART_SetConfig+0x4e4>)
 80059b6:	fba2 2303 	umull	r2, r3, r2, r3
 80059ba:	095b      	lsrs	r3, r3, #5
 80059bc:	f003 020f 	and.w	r2, r3, #15
 80059c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4422      	add	r2, r4
 80059c8:	609a      	str	r2, [r3, #8]
}
 80059ca:	bf00      	nop
 80059cc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80059d0:	46bd      	mov	sp, r7
 80059d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80059d6:	bf00      	nop
 80059d8:	51eb851f 	.word	0x51eb851f

080059dc <__errno>:
 80059dc:	4b01      	ldr	r3, [pc, #4]	; (80059e4 <__errno+0x8>)
 80059de:	6818      	ldr	r0, [r3, #0]
 80059e0:	4770      	bx	lr
 80059e2:	bf00      	nop
 80059e4:	2000000c 	.word	0x2000000c

080059e8 <__libc_init_array>:
 80059e8:	b570      	push	{r4, r5, r6, lr}
 80059ea:	4d0d      	ldr	r5, [pc, #52]	; (8005a20 <__libc_init_array+0x38>)
 80059ec:	4c0d      	ldr	r4, [pc, #52]	; (8005a24 <__libc_init_array+0x3c>)
 80059ee:	1b64      	subs	r4, r4, r5
 80059f0:	10a4      	asrs	r4, r4, #2
 80059f2:	2600      	movs	r6, #0
 80059f4:	42a6      	cmp	r6, r4
 80059f6:	d109      	bne.n	8005a0c <__libc_init_array+0x24>
 80059f8:	4d0b      	ldr	r5, [pc, #44]	; (8005a28 <__libc_init_array+0x40>)
 80059fa:	4c0c      	ldr	r4, [pc, #48]	; (8005a2c <__libc_init_array+0x44>)
 80059fc:	f001 f824 	bl	8006a48 <_init>
 8005a00:	1b64      	subs	r4, r4, r5
 8005a02:	10a4      	asrs	r4, r4, #2
 8005a04:	2600      	movs	r6, #0
 8005a06:	42a6      	cmp	r6, r4
 8005a08:	d105      	bne.n	8005a16 <__libc_init_array+0x2e>
 8005a0a:	bd70      	pop	{r4, r5, r6, pc}
 8005a0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a10:	4798      	blx	r3
 8005a12:	3601      	adds	r6, #1
 8005a14:	e7ee      	b.n	80059f4 <__libc_init_array+0xc>
 8005a16:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a1a:	4798      	blx	r3
 8005a1c:	3601      	adds	r6, #1
 8005a1e:	e7f2      	b.n	8005a06 <__libc_init_array+0x1e>
 8005a20:	08006b98 	.word	0x08006b98
 8005a24:	08006b98 	.word	0x08006b98
 8005a28:	08006b98 	.word	0x08006b98
 8005a2c:	08006b9c 	.word	0x08006b9c

08005a30 <memset>:
 8005a30:	4402      	add	r2, r0
 8005a32:	4603      	mov	r3, r0
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d100      	bne.n	8005a3a <memset+0xa>
 8005a38:	4770      	bx	lr
 8005a3a:	f803 1b01 	strb.w	r1, [r3], #1
 8005a3e:	e7f9      	b.n	8005a34 <memset+0x4>

08005a40 <iprintf>:
 8005a40:	b40f      	push	{r0, r1, r2, r3}
 8005a42:	4b0a      	ldr	r3, [pc, #40]	; (8005a6c <iprintf+0x2c>)
 8005a44:	b513      	push	{r0, r1, r4, lr}
 8005a46:	681c      	ldr	r4, [r3, #0]
 8005a48:	b124      	cbz	r4, 8005a54 <iprintf+0x14>
 8005a4a:	69a3      	ldr	r3, [r4, #24]
 8005a4c:	b913      	cbnz	r3, 8005a54 <iprintf+0x14>
 8005a4e:	4620      	mov	r0, r4
 8005a50:	f000 fa5e 	bl	8005f10 <__sinit>
 8005a54:	ab05      	add	r3, sp, #20
 8005a56:	9a04      	ldr	r2, [sp, #16]
 8005a58:	68a1      	ldr	r1, [r4, #8]
 8005a5a:	9301      	str	r3, [sp, #4]
 8005a5c:	4620      	mov	r0, r4
 8005a5e:	f000 fc67 	bl	8006330 <_vfiprintf_r>
 8005a62:	b002      	add	sp, #8
 8005a64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a68:	b004      	add	sp, #16
 8005a6a:	4770      	bx	lr
 8005a6c:	2000000c 	.word	0x2000000c

08005a70 <_puts_r>:
 8005a70:	b570      	push	{r4, r5, r6, lr}
 8005a72:	460e      	mov	r6, r1
 8005a74:	4605      	mov	r5, r0
 8005a76:	b118      	cbz	r0, 8005a80 <_puts_r+0x10>
 8005a78:	6983      	ldr	r3, [r0, #24]
 8005a7a:	b90b      	cbnz	r3, 8005a80 <_puts_r+0x10>
 8005a7c:	f000 fa48 	bl	8005f10 <__sinit>
 8005a80:	69ab      	ldr	r3, [r5, #24]
 8005a82:	68ac      	ldr	r4, [r5, #8]
 8005a84:	b913      	cbnz	r3, 8005a8c <_puts_r+0x1c>
 8005a86:	4628      	mov	r0, r5
 8005a88:	f000 fa42 	bl	8005f10 <__sinit>
 8005a8c:	4b2c      	ldr	r3, [pc, #176]	; (8005b40 <_puts_r+0xd0>)
 8005a8e:	429c      	cmp	r4, r3
 8005a90:	d120      	bne.n	8005ad4 <_puts_r+0x64>
 8005a92:	686c      	ldr	r4, [r5, #4]
 8005a94:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005a96:	07db      	lsls	r3, r3, #31
 8005a98:	d405      	bmi.n	8005aa6 <_puts_r+0x36>
 8005a9a:	89a3      	ldrh	r3, [r4, #12]
 8005a9c:	0598      	lsls	r0, r3, #22
 8005a9e:	d402      	bmi.n	8005aa6 <_puts_r+0x36>
 8005aa0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005aa2:	f000 fad3 	bl	800604c <__retarget_lock_acquire_recursive>
 8005aa6:	89a3      	ldrh	r3, [r4, #12]
 8005aa8:	0719      	lsls	r1, r3, #28
 8005aaa:	d51d      	bpl.n	8005ae8 <_puts_r+0x78>
 8005aac:	6923      	ldr	r3, [r4, #16]
 8005aae:	b1db      	cbz	r3, 8005ae8 <_puts_r+0x78>
 8005ab0:	3e01      	subs	r6, #1
 8005ab2:	68a3      	ldr	r3, [r4, #8]
 8005ab4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005ab8:	3b01      	subs	r3, #1
 8005aba:	60a3      	str	r3, [r4, #8]
 8005abc:	bb39      	cbnz	r1, 8005b0e <_puts_r+0x9e>
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	da38      	bge.n	8005b34 <_puts_r+0xc4>
 8005ac2:	4622      	mov	r2, r4
 8005ac4:	210a      	movs	r1, #10
 8005ac6:	4628      	mov	r0, r5
 8005ac8:	f000 f848 	bl	8005b5c <__swbuf_r>
 8005acc:	3001      	adds	r0, #1
 8005ace:	d011      	beq.n	8005af4 <_puts_r+0x84>
 8005ad0:	250a      	movs	r5, #10
 8005ad2:	e011      	b.n	8005af8 <_puts_r+0x88>
 8005ad4:	4b1b      	ldr	r3, [pc, #108]	; (8005b44 <_puts_r+0xd4>)
 8005ad6:	429c      	cmp	r4, r3
 8005ad8:	d101      	bne.n	8005ade <_puts_r+0x6e>
 8005ada:	68ac      	ldr	r4, [r5, #8]
 8005adc:	e7da      	b.n	8005a94 <_puts_r+0x24>
 8005ade:	4b1a      	ldr	r3, [pc, #104]	; (8005b48 <_puts_r+0xd8>)
 8005ae0:	429c      	cmp	r4, r3
 8005ae2:	bf08      	it	eq
 8005ae4:	68ec      	ldreq	r4, [r5, #12]
 8005ae6:	e7d5      	b.n	8005a94 <_puts_r+0x24>
 8005ae8:	4621      	mov	r1, r4
 8005aea:	4628      	mov	r0, r5
 8005aec:	f000 f888 	bl	8005c00 <__swsetup_r>
 8005af0:	2800      	cmp	r0, #0
 8005af2:	d0dd      	beq.n	8005ab0 <_puts_r+0x40>
 8005af4:	f04f 35ff 	mov.w	r5, #4294967295
 8005af8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005afa:	07da      	lsls	r2, r3, #31
 8005afc:	d405      	bmi.n	8005b0a <_puts_r+0x9a>
 8005afe:	89a3      	ldrh	r3, [r4, #12]
 8005b00:	059b      	lsls	r3, r3, #22
 8005b02:	d402      	bmi.n	8005b0a <_puts_r+0x9a>
 8005b04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b06:	f000 faa2 	bl	800604e <__retarget_lock_release_recursive>
 8005b0a:	4628      	mov	r0, r5
 8005b0c:	bd70      	pop	{r4, r5, r6, pc}
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	da04      	bge.n	8005b1c <_puts_r+0xac>
 8005b12:	69a2      	ldr	r2, [r4, #24]
 8005b14:	429a      	cmp	r2, r3
 8005b16:	dc06      	bgt.n	8005b26 <_puts_r+0xb6>
 8005b18:	290a      	cmp	r1, #10
 8005b1a:	d004      	beq.n	8005b26 <_puts_r+0xb6>
 8005b1c:	6823      	ldr	r3, [r4, #0]
 8005b1e:	1c5a      	adds	r2, r3, #1
 8005b20:	6022      	str	r2, [r4, #0]
 8005b22:	7019      	strb	r1, [r3, #0]
 8005b24:	e7c5      	b.n	8005ab2 <_puts_r+0x42>
 8005b26:	4622      	mov	r2, r4
 8005b28:	4628      	mov	r0, r5
 8005b2a:	f000 f817 	bl	8005b5c <__swbuf_r>
 8005b2e:	3001      	adds	r0, #1
 8005b30:	d1bf      	bne.n	8005ab2 <_puts_r+0x42>
 8005b32:	e7df      	b.n	8005af4 <_puts_r+0x84>
 8005b34:	6823      	ldr	r3, [r4, #0]
 8005b36:	250a      	movs	r5, #10
 8005b38:	1c5a      	adds	r2, r3, #1
 8005b3a:	6022      	str	r2, [r4, #0]
 8005b3c:	701d      	strb	r5, [r3, #0]
 8005b3e:	e7db      	b.n	8005af8 <_puts_r+0x88>
 8005b40:	08006b1c 	.word	0x08006b1c
 8005b44:	08006b3c 	.word	0x08006b3c
 8005b48:	08006afc 	.word	0x08006afc

08005b4c <puts>:
 8005b4c:	4b02      	ldr	r3, [pc, #8]	; (8005b58 <puts+0xc>)
 8005b4e:	4601      	mov	r1, r0
 8005b50:	6818      	ldr	r0, [r3, #0]
 8005b52:	f7ff bf8d 	b.w	8005a70 <_puts_r>
 8005b56:	bf00      	nop
 8005b58:	2000000c 	.word	0x2000000c

08005b5c <__swbuf_r>:
 8005b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b5e:	460e      	mov	r6, r1
 8005b60:	4614      	mov	r4, r2
 8005b62:	4605      	mov	r5, r0
 8005b64:	b118      	cbz	r0, 8005b6e <__swbuf_r+0x12>
 8005b66:	6983      	ldr	r3, [r0, #24]
 8005b68:	b90b      	cbnz	r3, 8005b6e <__swbuf_r+0x12>
 8005b6a:	f000 f9d1 	bl	8005f10 <__sinit>
 8005b6e:	4b21      	ldr	r3, [pc, #132]	; (8005bf4 <__swbuf_r+0x98>)
 8005b70:	429c      	cmp	r4, r3
 8005b72:	d12b      	bne.n	8005bcc <__swbuf_r+0x70>
 8005b74:	686c      	ldr	r4, [r5, #4]
 8005b76:	69a3      	ldr	r3, [r4, #24]
 8005b78:	60a3      	str	r3, [r4, #8]
 8005b7a:	89a3      	ldrh	r3, [r4, #12]
 8005b7c:	071a      	lsls	r2, r3, #28
 8005b7e:	d52f      	bpl.n	8005be0 <__swbuf_r+0x84>
 8005b80:	6923      	ldr	r3, [r4, #16]
 8005b82:	b36b      	cbz	r3, 8005be0 <__swbuf_r+0x84>
 8005b84:	6923      	ldr	r3, [r4, #16]
 8005b86:	6820      	ldr	r0, [r4, #0]
 8005b88:	1ac0      	subs	r0, r0, r3
 8005b8a:	6963      	ldr	r3, [r4, #20]
 8005b8c:	b2f6      	uxtb	r6, r6
 8005b8e:	4283      	cmp	r3, r0
 8005b90:	4637      	mov	r7, r6
 8005b92:	dc04      	bgt.n	8005b9e <__swbuf_r+0x42>
 8005b94:	4621      	mov	r1, r4
 8005b96:	4628      	mov	r0, r5
 8005b98:	f000 f926 	bl	8005de8 <_fflush_r>
 8005b9c:	bb30      	cbnz	r0, 8005bec <__swbuf_r+0x90>
 8005b9e:	68a3      	ldr	r3, [r4, #8]
 8005ba0:	3b01      	subs	r3, #1
 8005ba2:	60a3      	str	r3, [r4, #8]
 8005ba4:	6823      	ldr	r3, [r4, #0]
 8005ba6:	1c5a      	adds	r2, r3, #1
 8005ba8:	6022      	str	r2, [r4, #0]
 8005baa:	701e      	strb	r6, [r3, #0]
 8005bac:	6963      	ldr	r3, [r4, #20]
 8005bae:	3001      	adds	r0, #1
 8005bb0:	4283      	cmp	r3, r0
 8005bb2:	d004      	beq.n	8005bbe <__swbuf_r+0x62>
 8005bb4:	89a3      	ldrh	r3, [r4, #12]
 8005bb6:	07db      	lsls	r3, r3, #31
 8005bb8:	d506      	bpl.n	8005bc8 <__swbuf_r+0x6c>
 8005bba:	2e0a      	cmp	r6, #10
 8005bbc:	d104      	bne.n	8005bc8 <__swbuf_r+0x6c>
 8005bbe:	4621      	mov	r1, r4
 8005bc0:	4628      	mov	r0, r5
 8005bc2:	f000 f911 	bl	8005de8 <_fflush_r>
 8005bc6:	b988      	cbnz	r0, 8005bec <__swbuf_r+0x90>
 8005bc8:	4638      	mov	r0, r7
 8005bca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005bcc:	4b0a      	ldr	r3, [pc, #40]	; (8005bf8 <__swbuf_r+0x9c>)
 8005bce:	429c      	cmp	r4, r3
 8005bd0:	d101      	bne.n	8005bd6 <__swbuf_r+0x7a>
 8005bd2:	68ac      	ldr	r4, [r5, #8]
 8005bd4:	e7cf      	b.n	8005b76 <__swbuf_r+0x1a>
 8005bd6:	4b09      	ldr	r3, [pc, #36]	; (8005bfc <__swbuf_r+0xa0>)
 8005bd8:	429c      	cmp	r4, r3
 8005bda:	bf08      	it	eq
 8005bdc:	68ec      	ldreq	r4, [r5, #12]
 8005bde:	e7ca      	b.n	8005b76 <__swbuf_r+0x1a>
 8005be0:	4621      	mov	r1, r4
 8005be2:	4628      	mov	r0, r5
 8005be4:	f000 f80c 	bl	8005c00 <__swsetup_r>
 8005be8:	2800      	cmp	r0, #0
 8005bea:	d0cb      	beq.n	8005b84 <__swbuf_r+0x28>
 8005bec:	f04f 37ff 	mov.w	r7, #4294967295
 8005bf0:	e7ea      	b.n	8005bc8 <__swbuf_r+0x6c>
 8005bf2:	bf00      	nop
 8005bf4:	08006b1c 	.word	0x08006b1c
 8005bf8:	08006b3c 	.word	0x08006b3c
 8005bfc:	08006afc 	.word	0x08006afc

08005c00 <__swsetup_r>:
 8005c00:	4b32      	ldr	r3, [pc, #200]	; (8005ccc <__swsetup_r+0xcc>)
 8005c02:	b570      	push	{r4, r5, r6, lr}
 8005c04:	681d      	ldr	r5, [r3, #0]
 8005c06:	4606      	mov	r6, r0
 8005c08:	460c      	mov	r4, r1
 8005c0a:	b125      	cbz	r5, 8005c16 <__swsetup_r+0x16>
 8005c0c:	69ab      	ldr	r3, [r5, #24]
 8005c0e:	b913      	cbnz	r3, 8005c16 <__swsetup_r+0x16>
 8005c10:	4628      	mov	r0, r5
 8005c12:	f000 f97d 	bl	8005f10 <__sinit>
 8005c16:	4b2e      	ldr	r3, [pc, #184]	; (8005cd0 <__swsetup_r+0xd0>)
 8005c18:	429c      	cmp	r4, r3
 8005c1a:	d10f      	bne.n	8005c3c <__swsetup_r+0x3c>
 8005c1c:	686c      	ldr	r4, [r5, #4]
 8005c1e:	89a3      	ldrh	r3, [r4, #12]
 8005c20:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005c24:	0719      	lsls	r1, r3, #28
 8005c26:	d42c      	bmi.n	8005c82 <__swsetup_r+0x82>
 8005c28:	06dd      	lsls	r5, r3, #27
 8005c2a:	d411      	bmi.n	8005c50 <__swsetup_r+0x50>
 8005c2c:	2309      	movs	r3, #9
 8005c2e:	6033      	str	r3, [r6, #0]
 8005c30:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005c34:	81a3      	strh	r3, [r4, #12]
 8005c36:	f04f 30ff 	mov.w	r0, #4294967295
 8005c3a:	e03e      	b.n	8005cba <__swsetup_r+0xba>
 8005c3c:	4b25      	ldr	r3, [pc, #148]	; (8005cd4 <__swsetup_r+0xd4>)
 8005c3e:	429c      	cmp	r4, r3
 8005c40:	d101      	bne.n	8005c46 <__swsetup_r+0x46>
 8005c42:	68ac      	ldr	r4, [r5, #8]
 8005c44:	e7eb      	b.n	8005c1e <__swsetup_r+0x1e>
 8005c46:	4b24      	ldr	r3, [pc, #144]	; (8005cd8 <__swsetup_r+0xd8>)
 8005c48:	429c      	cmp	r4, r3
 8005c4a:	bf08      	it	eq
 8005c4c:	68ec      	ldreq	r4, [r5, #12]
 8005c4e:	e7e6      	b.n	8005c1e <__swsetup_r+0x1e>
 8005c50:	0758      	lsls	r0, r3, #29
 8005c52:	d512      	bpl.n	8005c7a <__swsetup_r+0x7a>
 8005c54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005c56:	b141      	cbz	r1, 8005c6a <__swsetup_r+0x6a>
 8005c58:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005c5c:	4299      	cmp	r1, r3
 8005c5e:	d002      	beq.n	8005c66 <__swsetup_r+0x66>
 8005c60:	4630      	mov	r0, r6
 8005c62:	f000 fa5b 	bl	800611c <_free_r>
 8005c66:	2300      	movs	r3, #0
 8005c68:	6363      	str	r3, [r4, #52]	; 0x34
 8005c6a:	89a3      	ldrh	r3, [r4, #12]
 8005c6c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005c70:	81a3      	strh	r3, [r4, #12]
 8005c72:	2300      	movs	r3, #0
 8005c74:	6063      	str	r3, [r4, #4]
 8005c76:	6923      	ldr	r3, [r4, #16]
 8005c78:	6023      	str	r3, [r4, #0]
 8005c7a:	89a3      	ldrh	r3, [r4, #12]
 8005c7c:	f043 0308 	orr.w	r3, r3, #8
 8005c80:	81a3      	strh	r3, [r4, #12]
 8005c82:	6923      	ldr	r3, [r4, #16]
 8005c84:	b94b      	cbnz	r3, 8005c9a <__swsetup_r+0x9a>
 8005c86:	89a3      	ldrh	r3, [r4, #12]
 8005c88:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005c8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c90:	d003      	beq.n	8005c9a <__swsetup_r+0x9a>
 8005c92:	4621      	mov	r1, r4
 8005c94:	4630      	mov	r0, r6
 8005c96:	f000 fa01 	bl	800609c <__smakebuf_r>
 8005c9a:	89a0      	ldrh	r0, [r4, #12]
 8005c9c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005ca0:	f010 0301 	ands.w	r3, r0, #1
 8005ca4:	d00a      	beq.n	8005cbc <__swsetup_r+0xbc>
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	60a3      	str	r3, [r4, #8]
 8005caa:	6963      	ldr	r3, [r4, #20]
 8005cac:	425b      	negs	r3, r3
 8005cae:	61a3      	str	r3, [r4, #24]
 8005cb0:	6923      	ldr	r3, [r4, #16]
 8005cb2:	b943      	cbnz	r3, 8005cc6 <__swsetup_r+0xc6>
 8005cb4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005cb8:	d1ba      	bne.n	8005c30 <__swsetup_r+0x30>
 8005cba:	bd70      	pop	{r4, r5, r6, pc}
 8005cbc:	0781      	lsls	r1, r0, #30
 8005cbe:	bf58      	it	pl
 8005cc0:	6963      	ldrpl	r3, [r4, #20]
 8005cc2:	60a3      	str	r3, [r4, #8]
 8005cc4:	e7f4      	b.n	8005cb0 <__swsetup_r+0xb0>
 8005cc6:	2000      	movs	r0, #0
 8005cc8:	e7f7      	b.n	8005cba <__swsetup_r+0xba>
 8005cca:	bf00      	nop
 8005ccc:	2000000c 	.word	0x2000000c
 8005cd0:	08006b1c 	.word	0x08006b1c
 8005cd4:	08006b3c 	.word	0x08006b3c
 8005cd8:	08006afc 	.word	0x08006afc

08005cdc <__sflush_r>:
 8005cdc:	898a      	ldrh	r2, [r1, #12]
 8005cde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ce2:	4605      	mov	r5, r0
 8005ce4:	0710      	lsls	r0, r2, #28
 8005ce6:	460c      	mov	r4, r1
 8005ce8:	d458      	bmi.n	8005d9c <__sflush_r+0xc0>
 8005cea:	684b      	ldr	r3, [r1, #4]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	dc05      	bgt.n	8005cfc <__sflush_r+0x20>
 8005cf0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	dc02      	bgt.n	8005cfc <__sflush_r+0x20>
 8005cf6:	2000      	movs	r0, #0
 8005cf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005cfc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005cfe:	2e00      	cmp	r6, #0
 8005d00:	d0f9      	beq.n	8005cf6 <__sflush_r+0x1a>
 8005d02:	2300      	movs	r3, #0
 8005d04:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005d08:	682f      	ldr	r7, [r5, #0]
 8005d0a:	602b      	str	r3, [r5, #0]
 8005d0c:	d032      	beq.n	8005d74 <__sflush_r+0x98>
 8005d0e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005d10:	89a3      	ldrh	r3, [r4, #12]
 8005d12:	075a      	lsls	r2, r3, #29
 8005d14:	d505      	bpl.n	8005d22 <__sflush_r+0x46>
 8005d16:	6863      	ldr	r3, [r4, #4]
 8005d18:	1ac0      	subs	r0, r0, r3
 8005d1a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005d1c:	b10b      	cbz	r3, 8005d22 <__sflush_r+0x46>
 8005d1e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005d20:	1ac0      	subs	r0, r0, r3
 8005d22:	2300      	movs	r3, #0
 8005d24:	4602      	mov	r2, r0
 8005d26:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005d28:	6a21      	ldr	r1, [r4, #32]
 8005d2a:	4628      	mov	r0, r5
 8005d2c:	47b0      	blx	r6
 8005d2e:	1c43      	adds	r3, r0, #1
 8005d30:	89a3      	ldrh	r3, [r4, #12]
 8005d32:	d106      	bne.n	8005d42 <__sflush_r+0x66>
 8005d34:	6829      	ldr	r1, [r5, #0]
 8005d36:	291d      	cmp	r1, #29
 8005d38:	d82c      	bhi.n	8005d94 <__sflush_r+0xb8>
 8005d3a:	4a2a      	ldr	r2, [pc, #168]	; (8005de4 <__sflush_r+0x108>)
 8005d3c:	40ca      	lsrs	r2, r1
 8005d3e:	07d6      	lsls	r6, r2, #31
 8005d40:	d528      	bpl.n	8005d94 <__sflush_r+0xb8>
 8005d42:	2200      	movs	r2, #0
 8005d44:	6062      	str	r2, [r4, #4]
 8005d46:	04d9      	lsls	r1, r3, #19
 8005d48:	6922      	ldr	r2, [r4, #16]
 8005d4a:	6022      	str	r2, [r4, #0]
 8005d4c:	d504      	bpl.n	8005d58 <__sflush_r+0x7c>
 8005d4e:	1c42      	adds	r2, r0, #1
 8005d50:	d101      	bne.n	8005d56 <__sflush_r+0x7a>
 8005d52:	682b      	ldr	r3, [r5, #0]
 8005d54:	b903      	cbnz	r3, 8005d58 <__sflush_r+0x7c>
 8005d56:	6560      	str	r0, [r4, #84]	; 0x54
 8005d58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005d5a:	602f      	str	r7, [r5, #0]
 8005d5c:	2900      	cmp	r1, #0
 8005d5e:	d0ca      	beq.n	8005cf6 <__sflush_r+0x1a>
 8005d60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005d64:	4299      	cmp	r1, r3
 8005d66:	d002      	beq.n	8005d6e <__sflush_r+0x92>
 8005d68:	4628      	mov	r0, r5
 8005d6a:	f000 f9d7 	bl	800611c <_free_r>
 8005d6e:	2000      	movs	r0, #0
 8005d70:	6360      	str	r0, [r4, #52]	; 0x34
 8005d72:	e7c1      	b.n	8005cf8 <__sflush_r+0x1c>
 8005d74:	6a21      	ldr	r1, [r4, #32]
 8005d76:	2301      	movs	r3, #1
 8005d78:	4628      	mov	r0, r5
 8005d7a:	47b0      	blx	r6
 8005d7c:	1c41      	adds	r1, r0, #1
 8005d7e:	d1c7      	bne.n	8005d10 <__sflush_r+0x34>
 8005d80:	682b      	ldr	r3, [r5, #0]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d0c4      	beq.n	8005d10 <__sflush_r+0x34>
 8005d86:	2b1d      	cmp	r3, #29
 8005d88:	d001      	beq.n	8005d8e <__sflush_r+0xb2>
 8005d8a:	2b16      	cmp	r3, #22
 8005d8c:	d101      	bne.n	8005d92 <__sflush_r+0xb6>
 8005d8e:	602f      	str	r7, [r5, #0]
 8005d90:	e7b1      	b.n	8005cf6 <__sflush_r+0x1a>
 8005d92:	89a3      	ldrh	r3, [r4, #12]
 8005d94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d98:	81a3      	strh	r3, [r4, #12]
 8005d9a:	e7ad      	b.n	8005cf8 <__sflush_r+0x1c>
 8005d9c:	690f      	ldr	r7, [r1, #16]
 8005d9e:	2f00      	cmp	r7, #0
 8005da0:	d0a9      	beq.n	8005cf6 <__sflush_r+0x1a>
 8005da2:	0793      	lsls	r3, r2, #30
 8005da4:	680e      	ldr	r6, [r1, #0]
 8005da6:	bf08      	it	eq
 8005da8:	694b      	ldreq	r3, [r1, #20]
 8005daa:	600f      	str	r7, [r1, #0]
 8005dac:	bf18      	it	ne
 8005dae:	2300      	movne	r3, #0
 8005db0:	eba6 0807 	sub.w	r8, r6, r7
 8005db4:	608b      	str	r3, [r1, #8]
 8005db6:	f1b8 0f00 	cmp.w	r8, #0
 8005dba:	dd9c      	ble.n	8005cf6 <__sflush_r+0x1a>
 8005dbc:	6a21      	ldr	r1, [r4, #32]
 8005dbe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005dc0:	4643      	mov	r3, r8
 8005dc2:	463a      	mov	r2, r7
 8005dc4:	4628      	mov	r0, r5
 8005dc6:	47b0      	blx	r6
 8005dc8:	2800      	cmp	r0, #0
 8005dca:	dc06      	bgt.n	8005dda <__sflush_r+0xfe>
 8005dcc:	89a3      	ldrh	r3, [r4, #12]
 8005dce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005dd2:	81a3      	strh	r3, [r4, #12]
 8005dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8005dd8:	e78e      	b.n	8005cf8 <__sflush_r+0x1c>
 8005dda:	4407      	add	r7, r0
 8005ddc:	eba8 0800 	sub.w	r8, r8, r0
 8005de0:	e7e9      	b.n	8005db6 <__sflush_r+0xda>
 8005de2:	bf00      	nop
 8005de4:	20400001 	.word	0x20400001

08005de8 <_fflush_r>:
 8005de8:	b538      	push	{r3, r4, r5, lr}
 8005dea:	690b      	ldr	r3, [r1, #16]
 8005dec:	4605      	mov	r5, r0
 8005dee:	460c      	mov	r4, r1
 8005df0:	b913      	cbnz	r3, 8005df8 <_fflush_r+0x10>
 8005df2:	2500      	movs	r5, #0
 8005df4:	4628      	mov	r0, r5
 8005df6:	bd38      	pop	{r3, r4, r5, pc}
 8005df8:	b118      	cbz	r0, 8005e02 <_fflush_r+0x1a>
 8005dfa:	6983      	ldr	r3, [r0, #24]
 8005dfc:	b90b      	cbnz	r3, 8005e02 <_fflush_r+0x1a>
 8005dfe:	f000 f887 	bl	8005f10 <__sinit>
 8005e02:	4b14      	ldr	r3, [pc, #80]	; (8005e54 <_fflush_r+0x6c>)
 8005e04:	429c      	cmp	r4, r3
 8005e06:	d11b      	bne.n	8005e40 <_fflush_r+0x58>
 8005e08:	686c      	ldr	r4, [r5, #4]
 8005e0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d0ef      	beq.n	8005df2 <_fflush_r+0xa>
 8005e12:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005e14:	07d0      	lsls	r0, r2, #31
 8005e16:	d404      	bmi.n	8005e22 <_fflush_r+0x3a>
 8005e18:	0599      	lsls	r1, r3, #22
 8005e1a:	d402      	bmi.n	8005e22 <_fflush_r+0x3a>
 8005e1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005e1e:	f000 f915 	bl	800604c <__retarget_lock_acquire_recursive>
 8005e22:	4628      	mov	r0, r5
 8005e24:	4621      	mov	r1, r4
 8005e26:	f7ff ff59 	bl	8005cdc <__sflush_r>
 8005e2a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005e2c:	07da      	lsls	r2, r3, #31
 8005e2e:	4605      	mov	r5, r0
 8005e30:	d4e0      	bmi.n	8005df4 <_fflush_r+0xc>
 8005e32:	89a3      	ldrh	r3, [r4, #12]
 8005e34:	059b      	lsls	r3, r3, #22
 8005e36:	d4dd      	bmi.n	8005df4 <_fflush_r+0xc>
 8005e38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005e3a:	f000 f908 	bl	800604e <__retarget_lock_release_recursive>
 8005e3e:	e7d9      	b.n	8005df4 <_fflush_r+0xc>
 8005e40:	4b05      	ldr	r3, [pc, #20]	; (8005e58 <_fflush_r+0x70>)
 8005e42:	429c      	cmp	r4, r3
 8005e44:	d101      	bne.n	8005e4a <_fflush_r+0x62>
 8005e46:	68ac      	ldr	r4, [r5, #8]
 8005e48:	e7df      	b.n	8005e0a <_fflush_r+0x22>
 8005e4a:	4b04      	ldr	r3, [pc, #16]	; (8005e5c <_fflush_r+0x74>)
 8005e4c:	429c      	cmp	r4, r3
 8005e4e:	bf08      	it	eq
 8005e50:	68ec      	ldreq	r4, [r5, #12]
 8005e52:	e7da      	b.n	8005e0a <_fflush_r+0x22>
 8005e54:	08006b1c 	.word	0x08006b1c
 8005e58:	08006b3c 	.word	0x08006b3c
 8005e5c:	08006afc 	.word	0x08006afc

08005e60 <std>:
 8005e60:	2300      	movs	r3, #0
 8005e62:	b510      	push	{r4, lr}
 8005e64:	4604      	mov	r4, r0
 8005e66:	e9c0 3300 	strd	r3, r3, [r0]
 8005e6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005e6e:	6083      	str	r3, [r0, #8]
 8005e70:	8181      	strh	r1, [r0, #12]
 8005e72:	6643      	str	r3, [r0, #100]	; 0x64
 8005e74:	81c2      	strh	r2, [r0, #14]
 8005e76:	6183      	str	r3, [r0, #24]
 8005e78:	4619      	mov	r1, r3
 8005e7a:	2208      	movs	r2, #8
 8005e7c:	305c      	adds	r0, #92	; 0x5c
 8005e7e:	f7ff fdd7 	bl	8005a30 <memset>
 8005e82:	4b05      	ldr	r3, [pc, #20]	; (8005e98 <std+0x38>)
 8005e84:	6263      	str	r3, [r4, #36]	; 0x24
 8005e86:	4b05      	ldr	r3, [pc, #20]	; (8005e9c <std+0x3c>)
 8005e88:	62a3      	str	r3, [r4, #40]	; 0x28
 8005e8a:	4b05      	ldr	r3, [pc, #20]	; (8005ea0 <std+0x40>)
 8005e8c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005e8e:	4b05      	ldr	r3, [pc, #20]	; (8005ea4 <std+0x44>)
 8005e90:	6224      	str	r4, [r4, #32]
 8005e92:	6323      	str	r3, [r4, #48]	; 0x30
 8005e94:	bd10      	pop	{r4, pc}
 8005e96:	bf00      	nop
 8005e98:	080068d9 	.word	0x080068d9
 8005e9c:	080068fb 	.word	0x080068fb
 8005ea0:	08006933 	.word	0x08006933
 8005ea4:	08006957 	.word	0x08006957

08005ea8 <_cleanup_r>:
 8005ea8:	4901      	ldr	r1, [pc, #4]	; (8005eb0 <_cleanup_r+0x8>)
 8005eaa:	f000 b8af 	b.w	800600c <_fwalk_reent>
 8005eae:	bf00      	nop
 8005eb0:	08005de9 	.word	0x08005de9

08005eb4 <__sfmoreglue>:
 8005eb4:	b570      	push	{r4, r5, r6, lr}
 8005eb6:	2268      	movs	r2, #104	; 0x68
 8005eb8:	1e4d      	subs	r5, r1, #1
 8005eba:	4355      	muls	r5, r2
 8005ebc:	460e      	mov	r6, r1
 8005ebe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005ec2:	f000 f997 	bl	80061f4 <_malloc_r>
 8005ec6:	4604      	mov	r4, r0
 8005ec8:	b140      	cbz	r0, 8005edc <__sfmoreglue+0x28>
 8005eca:	2100      	movs	r1, #0
 8005ecc:	e9c0 1600 	strd	r1, r6, [r0]
 8005ed0:	300c      	adds	r0, #12
 8005ed2:	60a0      	str	r0, [r4, #8]
 8005ed4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005ed8:	f7ff fdaa 	bl	8005a30 <memset>
 8005edc:	4620      	mov	r0, r4
 8005ede:	bd70      	pop	{r4, r5, r6, pc}

08005ee0 <__sfp_lock_acquire>:
 8005ee0:	4801      	ldr	r0, [pc, #4]	; (8005ee8 <__sfp_lock_acquire+0x8>)
 8005ee2:	f000 b8b3 	b.w	800604c <__retarget_lock_acquire_recursive>
 8005ee6:	bf00      	nop
 8005ee8:	200001ad 	.word	0x200001ad

08005eec <__sfp_lock_release>:
 8005eec:	4801      	ldr	r0, [pc, #4]	; (8005ef4 <__sfp_lock_release+0x8>)
 8005eee:	f000 b8ae 	b.w	800604e <__retarget_lock_release_recursive>
 8005ef2:	bf00      	nop
 8005ef4:	200001ad 	.word	0x200001ad

08005ef8 <__sinit_lock_acquire>:
 8005ef8:	4801      	ldr	r0, [pc, #4]	; (8005f00 <__sinit_lock_acquire+0x8>)
 8005efa:	f000 b8a7 	b.w	800604c <__retarget_lock_acquire_recursive>
 8005efe:	bf00      	nop
 8005f00:	200001ae 	.word	0x200001ae

08005f04 <__sinit_lock_release>:
 8005f04:	4801      	ldr	r0, [pc, #4]	; (8005f0c <__sinit_lock_release+0x8>)
 8005f06:	f000 b8a2 	b.w	800604e <__retarget_lock_release_recursive>
 8005f0a:	bf00      	nop
 8005f0c:	200001ae 	.word	0x200001ae

08005f10 <__sinit>:
 8005f10:	b510      	push	{r4, lr}
 8005f12:	4604      	mov	r4, r0
 8005f14:	f7ff fff0 	bl	8005ef8 <__sinit_lock_acquire>
 8005f18:	69a3      	ldr	r3, [r4, #24]
 8005f1a:	b11b      	cbz	r3, 8005f24 <__sinit+0x14>
 8005f1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f20:	f7ff bff0 	b.w	8005f04 <__sinit_lock_release>
 8005f24:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005f28:	6523      	str	r3, [r4, #80]	; 0x50
 8005f2a:	4b13      	ldr	r3, [pc, #76]	; (8005f78 <__sinit+0x68>)
 8005f2c:	4a13      	ldr	r2, [pc, #76]	; (8005f7c <__sinit+0x6c>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	62a2      	str	r2, [r4, #40]	; 0x28
 8005f32:	42a3      	cmp	r3, r4
 8005f34:	bf04      	itt	eq
 8005f36:	2301      	moveq	r3, #1
 8005f38:	61a3      	streq	r3, [r4, #24]
 8005f3a:	4620      	mov	r0, r4
 8005f3c:	f000 f820 	bl	8005f80 <__sfp>
 8005f40:	6060      	str	r0, [r4, #4]
 8005f42:	4620      	mov	r0, r4
 8005f44:	f000 f81c 	bl	8005f80 <__sfp>
 8005f48:	60a0      	str	r0, [r4, #8]
 8005f4a:	4620      	mov	r0, r4
 8005f4c:	f000 f818 	bl	8005f80 <__sfp>
 8005f50:	2200      	movs	r2, #0
 8005f52:	60e0      	str	r0, [r4, #12]
 8005f54:	2104      	movs	r1, #4
 8005f56:	6860      	ldr	r0, [r4, #4]
 8005f58:	f7ff ff82 	bl	8005e60 <std>
 8005f5c:	68a0      	ldr	r0, [r4, #8]
 8005f5e:	2201      	movs	r2, #1
 8005f60:	2109      	movs	r1, #9
 8005f62:	f7ff ff7d 	bl	8005e60 <std>
 8005f66:	68e0      	ldr	r0, [r4, #12]
 8005f68:	2202      	movs	r2, #2
 8005f6a:	2112      	movs	r1, #18
 8005f6c:	f7ff ff78 	bl	8005e60 <std>
 8005f70:	2301      	movs	r3, #1
 8005f72:	61a3      	str	r3, [r4, #24]
 8005f74:	e7d2      	b.n	8005f1c <__sinit+0xc>
 8005f76:	bf00      	nop
 8005f78:	08006af8 	.word	0x08006af8
 8005f7c:	08005ea9 	.word	0x08005ea9

08005f80 <__sfp>:
 8005f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f82:	4607      	mov	r7, r0
 8005f84:	f7ff ffac 	bl	8005ee0 <__sfp_lock_acquire>
 8005f88:	4b1e      	ldr	r3, [pc, #120]	; (8006004 <__sfp+0x84>)
 8005f8a:	681e      	ldr	r6, [r3, #0]
 8005f8c:	69b3      	ldr	r3, [r6, #24]
 8005f8e:	b913      	cbnz	r3, 8005f96 <__sfp+0x16>
 8005f90:	4630      	mov	r0, r6
 8005f92:	f7ff ffbd 	bl	8005f10 <__sinit>
 8005f96:	3648      	adds	r6, #72	; 0x48
 8005f98:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005f9c:	3b01      	subs	r3, #1
 8005f9e:	d503      	bpl.n	8005fa8 <__sfp+0x28>
 8005fa0:	6833      	ldr	r3, [r6, #0]
 8005fa2:	b30b      	cbz	r3, 8005fe8 <__sfp+0x68>
 8005fa4:	6836      	ldr	r6, [r6, #0]
 8005fa6:	e7f7      	b.n	8005f98 <__sfp+0x18>
 8005fa8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005fac:	b9d5      	cbnz	r5, 8005fe4 <__sfp+0x64>
 8005fae:	4b16      	ldr	r3, [pc, #88]	; (8006008 <__sfp+0x88>)
 8005fb0:	60e3      	str	r3, [r4, #12]
 8005fb2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005fb6:	6665      	str	r5, [r4, #100]	; 0x64
 8005fb8:	f000 f847 	bl	800604a <__retarget_lock_init_recursive>
 8005fbc:	f7ff ff96 	bl	8005eec <__sfp_lock_release>
 8005fc0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005fc4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005fc8:	6025      	str	r5, [r4, #0]
 8005fca:	61a5      	str	r5, [r4, #24]
 8005fcc:	2208      	movs	r2, #8
 8005fce:	4629      	mov	r1, r5
 8005fd0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005fd4:	f7ff fd2c 	bl	8005a30 <memset>
 8005fd8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005fdc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005fe0:	4620      	mov	r0, r4
 8005fe2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005fe4:	3468      	adds	r4, #104	; 0x68
 8005fe6:	e7d9      	b.n	8005f9c <__sfp+0x1c>
 8005fe8:	2104      	movs	r1, #4
 8005fea:	4638      	mov	r0, r7
 8005fec:	f7ff ff62 	bl	8005eb4 <__sfmoreglue>
 8005ff0:	4604      	mov	r4, r0
 8005ff2:	6030      	str	r0, [r6, #0]
 8005ff4:	2800      	cmp	r0, #0
 8005ff6:	d1d5      	bne.n	8005fa4 <__sfp+0x24>
 8005ff8:	f7ff ff78 	bl	8005eec <__sfp_lock_release>
 8005ffc:	230c      	movs	r3, #12
 8005ffe:	603b      	str	r3, [r7, #0]
 8006000:	e7ee      	b.n	8005fe0 <__sfp+0x60>
 8006002:	bf00      	nop
 8006004:	08006af8 	.word	0x08006af8
 8006008:	ffff0001 	.word	0xffff0001

0800600c <_fwalk_reent>:
 800600c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006010:	4606      	mov	r6, r0
 8006012:	4688      	mov	r8, r1
 8006014:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006018:	2700      	movs	r7, #0
 800601a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800601e:	f1b9 0901 	subs.w	r9, r9, #1
 8006022:	d505      	bpl.n	8006030 <_fwalk_reent+0x24>
 8006024:	6824      	ldr	r4, [r4, #0]
 8006026:	2c00      	cmp	r4, #0
 8006028:	d1f7      	bne.n	800601a <_fwalk_reent+0xe>
 800602a:	4638      	mov	r0, r7
 800602c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006030:	89ab      	ldrh	r3, [r5, #12]
 8006032:	2b01      	cmp	r3, #1
 8006034:	d907      	bls.n	8006046 <_fwalk_reent+0x3a>
 8006036:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800603a:	3301      	adds	r3, #1
 800603c:	d003      	beq.n	8006046 <_fwalk_reent+0x3a>
 800603e:	4629      	mov	r1, r5
 8006040:	4630      	mov	r0, r6
 8006042:	47c0      	blx	r8
 8006044:	4307      	orrs	r7, r0
 8006046:	3568      	adds	r5, #104	; 0x68
 8006048:	e7e9      	b.n	800601e <_fwalk_reent+0x12>

0800604a <__retarget_lock_init_recursive>:
 800604a:	4770      	bx	lr

0800604c <__retarget_lock_acquire_recursive>:
 800604c:	4770      	bx	lr

0800604e <__retarget_lock_release_recursive>:
 800604e:	4770      	bx	lr

08006050 <__swhatbuf_r>:
 8006050:	b570      	push	{r4, r5, r6, lr}
 8006052:	460e      	mov	r6, r1
 8006054:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006058:	2900      	cmp	r1, #0
 800605a:	b096      	sub	sp, #88	; 0x58
 800605c:	4614      	mov	r4, r2
 800605e:	461d      	mov	r5, r3
 8006060:	da08      	bge.n	8006074 <__swhatbuf_r+0x24>
 8006062:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006066:	2200      	movs	r2, #0
 8006068:	602a      	str	r2, [r5, #0]
 800606a:	061a      	lsls	r2, r3, #24
 800606c:	d410      	bmi.n	8006090 <__swhatbuf_r+0x40>
 800606e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006072:	e00e      	b.n	8006092 <__swhatbuf_r+0x42>
 8006074:	466a      	mov	r2, sp
 8006076:	f000 fc95 	bl	80069a4 <_fstat_r>
 800607a:	2800      	cmp	r0, #0
 800607c:	dbf1      	blt.n	8006062 <__swhatbuf_r+0x12>
 800607e:	9a01      	ldr	r2, [sp, #4]
 8006080:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006084:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006088:	425a      	negs	r2, r3
 800608a:	415a      	adcs	r2, r3
 800608c:	602a      	str	r2, [r5, #0]
 800608e:	e7ee      	b.n	800606e <__swhatbuf_r+0x1e>
 8006090:	2340      	movs	r3, #64	; 0x40
 8006092:	2000      	movs	r0, #0
 8006094:	6023      	str	r3, [r4, #0]
 8006096:	b016      	add	sp, #88	; 0x58
 8006098:	bd70      	pop	{r4, r5, r6, pc}
	...

0800609c <__smakebuf_r>:
 800609c:	898b      	ldrh	r3, [r1, #12]
 800609e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80060a0:	079d      	lsls	r5, r3, #30
 80060a2:	4606      	mov	r6, r0
 80060a4:	460c      	mov	r4, r1
 80060a6:	d507      	bpl.n	80060b8 <__smakebuf_r+0x1c>
 80060a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80060ac:	6023      	str	r3, [r4, #0]
 80060ae:	6123      	str	r3, [r4, #16]
 80060b0:	2301      	movs	r3, #1
 80060b2:	6163      	str	r3, [r4, #20]
 80060b4:	b002      	add	sp, #8
 80060b6:	bd70      	pop	{r4, r5, r6, pc}
 80060b8:	ab01      	add	r3, sp, #4
 80060ba:	466a      	mov	r2, sp
 80060bc:	f7ff ffc8 	bl	8006050 <__swhatbuf_r>
 80060c0:	9900      	ldr	r1, [sp, #0]
 80060c2:	4605      	mov	r5, r0
 80060c4:	4630      	mov	r0, r6
 80060c6:	f000 f895 	bl	80061f4 <_malloc_r>
 80060ca:	b948      	cbnz	r0, 80060e0 <__smakebuf_r+0x44>
 80060cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80060d0:	059a      	lsls	r2, r3, #22
 80060d2:	d4ef      	bmi.n	80060b4 <__smakebuf_r+0x18>
 80060d4:	f023 0303 	bic.w	r3, r3, #3
 80060d8:	f043 0302 	orr.w	r3, r3, #2
 80060dc:	81a3      	strh	r3, [r4, #12]
 80060de:	e7e3      	b.n	80060a8 <__smakebuf_r+0xc>
 80060e0:	4b0d      	ldr	r3, [pc, #52]	; (8006118 <__smakebuf_r+0x7c>)
 80060e2:	62b3      	str	r3, [r6, #40]	; 0x28
 80060e4:	89a3      	ldrh	r3, [r4, #12]
 80060e6:	6020      	str	r0, [r4, #0]
 80060e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060ec:	81a3      	strh	r3, [r4, #12]
 80060ee:	9b00      	ldr	r3, [sp, #0]
 80060f0:	6163      	str	r3, [r4, #20]
 80060f2:	9b01      	ldr	r3, [sp, #4]
 80060f4:	6120      	str	r0, [r4, #16]
 80060f6:	b15b      	cbz	r3, 8006110 <__smakebuf_r+0x74>
 80060f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80060fc:	4630      	mov	r0, r6
 80060fe:	f000 fc63 	bl	80069c8 <_isatty_r>
 8006102:	b128      	cbz	r0, 8006110 <__smakebuf_r+0x74>
 8006104:	89a3      	ldrh	r3, [r4, #12]
 8006106:	f023 0303 	bic.w	r3, r3, #3
 800610a:	f043 0301 	orr.w	r3, r3, #1
 800610e:	81a3      	strh	r3, [r4, #12]
 8006110:	89a0      	ldrh	r0, [r4, #12]
 8006112:	4305      	orrs	r5, r0
 8006114:	81a5      	strh	r5, [r4, #12]
 8006116:	e7cd      	b.n	80060b4 <__smakebuf_r+0x18>
 8006118:	08005ea9 	.word	0x08005ea9

0800611c <_free_r>:
 800611c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800611e:	2900      	cmp	r1, #0
 8006120:	d044      	beq.n	80061ac <_free_r+0x90>
 8006122:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006126:	9001      	str	r0, [sp, #4]
 8006128:	2b00      	cmp	r3, #0
 800612a:	f1a1 0404 	sub.w	r4, r1, #4
 800612e:	bfb8      	it	lt
 8006130:	18e4      	addlt	r4, r4, r3
 8006132:	f000 fc6b 	bl	8006a0c <__malloc_lock>
 8006136:	4a1e      	ldr	r2, [pc, #120]	; (80061b0 <_free_r+0x94>)
 8006138:	9801      	ldr	r0, [sp, #4]
 800613a:	6813      	ldr	r3, [r2, #0]
 800613c:	b933      	cbnz	r3, 800614c <_free_r+0x30>
 800613e:	6063      	str	r3, [r4, #4]
 8006140:	6014      	str	r4, [r2, #0]
 8006142:	b003      	add	sp, #12
 8006144:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006148:	f000 bc66 	b.w	8006a18 <__malloc_unlock>
 800614c:	42a3      	cmp	r3, r4
 800614e:	d908      	bls.n	8006162 <_free_r+0x46>
 8006150:	6825      	ldr	r5, [r4, #0]
 8006152:	1961      	adds	r1, r4, r5
 8006154:	428b      	cmp	r3, r1
 8006156:	bf01      	itttt	eq
 8006158:	6819      	ldreq	r1, [r3, #0]
 800615a:	685b      	ldreq	r3, [r3, #4]
 800615c:	1949      	addeq	r1, r1, r5
 800615e:	6021      	streq	r1, [r4, #0]
 8006160:	e7ed      	b.n	800613e <_free_r+0x22>
 8006162:	461a      	mov	r2, r3
 8006164:	685b      	ldr	r3, [r3, #4]
 8006166:	b10b      	cbz	r3, 800616c <_free_r+0x50>
 8006168:	42a3      	cmp	r3, r4
 800616a:	d9fa      	bls.n	8006162 <_free_r+0x46>
 800616c:	6811      	ldr	r1, [r2, #0]
 800616e:	1855      	adds	r5, r2, r1
 8006170:	42a5      	cmp	r5, r4
 8006172:	d10b      	bne.n	800618c <_free_r+0x70>
 8006174:	6824      	ldr	r4, [r4, #0]
 8006176:	4421      	add	r1, r4
 8006178:	1854      	adds	r4, r2, r1
 800617a:	42a3      	cmp	r3, r4
 800617c:	6011      	str	r1, [r2, #0]
 800617e:	d1e0      	bne.n	8006142 <_free_r+0x26>
 8006180:	681c      	ldr	r4, [r3, #0]
 8006182:	685b      	ldr	r3, [r3, #4]
 8006184:	6053      	str	r3, [r2, #4]
 8006186:	4421      	add	r1, r4
 8006188:	6011      	str	r1, [r2, #0]
 800618a:	e7da      	b.n	8006142 <_free_r+0x26>
 800618c:	d902      	bls.n	8006194 <_free_r+0x78>
 800618e:	230c      	movs	r3, #12
 8006190:	6003      	str	r3, [r0, #0]
 8006192:	e7d6      	b.n	8006142 <_free_r+0x26>
 8006194:	6825      	ldr	r5, [r4, #0]
 8006196:	1961      	adds	r1, r4, r5
 8006198:	428b      	cmp	r3, r1
 800619a:	bf04      	itt	eq
 800619c:	6819      	ldreq	r1, [r3, #0]
 800619e:	685b      	ldreq	r3, [r3, #4]
 80061a0:	6063      	str	r3, [r4, #4]
 80061a2:	bf04      	itt	eq
 80061a4:	1949      	addeq	r1, r1, r5
 80061a6:	6021      	streq	r1, [r4, #0]
 80061a8:	6054      	str	r4, [r2, #4]
 80061aa:	e7ca      	b.n	8006142 <_free_r+0x26>
 80061ac:	b003      	add	sp, #12
 80061ae:	bd30      	pop	{r4, r5, pc}
 80061b0:	200001b0 	.word	0x200001b0

080061b4 <sbrk_aligned>:
 80061b4:	b570      	push	{r4, r5, r6, lr}
 80061b6:	4e0e      	ldr	r6, [pc, #56]	; (80061f0 <sbrk_aligned+0x3c>)
 80061b8:	460c      	mov	r4, r1
 80061ba:	6831      	ldr	r1, [r6, #0]
 80061bc:	4605      	mov	r5, r0
 80061be:	b911      	cbnz	r1, 80061c6 <sbrk_aligned+0x12>
 80061c0:	f000 fb7a 	bl	80068b8 <_sbrk_r>
 80061c4:	6030      	str	r0, [r6, #0]
 80061c6:	4621      	mov	r1, r4
 80061c8:	4628      	mov	r0, r5
 80061ca:	f000 fb75 	bl	80068b8 <_sbrk_r>
 80061ce:	1c43      	adds	r3, r0, #1
 80061d0:	d00a      	beq.n	80061e8 <sbrk_aligned+0x34>
 80061d2:	1cc4      	adds	r4, r0, #3
 80061d4:	f024 0403 	bic.w	r4, r4, #3
 80061d8:	42a0      	cmp	r0, r4
 80061da:	d007      	beq.n	80061ec <sbrk_aligned+0x38>
 80061dc:	1a21      	subs	r1, r4, r0
 80061de:	4628      	mov	r0, r5
 80061e0:	f000 fb6a 	bl	80068b8 <_sbrk_r>
 80061e4:	3001      	adds	r0, #1
 80061e6:	d101      	bne.n	80061ec <sbrk_aligned+0x38>
 80061e8:	f04f 34ff 	mov.w	r4, #4294967295
 80061ec:	4620      	mov	r0, r4
 80061ee:	bd70      	pop	{r4, r5, r6, pc}
 80061f0:	200001b4 	.word	0x200001b4

080061f4 <_malloc_r>:
 80061f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061f8:	1ccd      	adds	r5, r1, #3
 80061fa:	f025 0503 	bic.w	r5, r5, #3
 80061fe:	3508      	adds	r5, #8
 8006200:	2d0c      	cmp	r5, #12
 8006202:	bf38      	it	cc
 8006204:	250c      	movcc	r5, #12
 8006206:	2d00      	cmp	r5, #0
 8006208:	4607      	mov	r7, r0
 800620a:	db01      	blt.n	8006210 <_malloc_r+0x1c>
 800620c:	42a9      	cmp	r1, r5
 800620e:	d905      	bls.n	800621c <_malloc_r+0x28>
 8006210:	230c      	movs	r3, #12
 8006212:	603b      	str	r3, [r7, #0]
 8006214:	2600      	movs	r6, #0
 8006216:	4630      	mov	r0, r6
 8006218:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800621c:	4e2e      	ldr	r6, [pc, #184]	; (80062d8 <_malloc_r+0xe4>)
 800621e:	f000 fbf5 	bl	8006a0c <__malloc_lock>
 8006222:	6833      	ldr	r3, [r6, #0]
 8006224:	461c      	mov	r4, r3
 8006226:	bb34      	cbnz	r4, 8006276 <_malloc_r+0x82>
 8006228:	4629      	mov	r1, r5
 800622a:	4638      	mov	r0, r7
 800622c:	f7ff ffc2 	bl	80061b4 <sbrk_aligned>
 8006230:	1c43      	adds	r3, r0, #1
 8006232:	4604      	mov	r4, r0
 8006234:	d14d      	bne.n	80062d2 <_malloc_r+0xde>
 8006236:	6834      	ldr	r4, [r6, #0]
 8006238:	4626      	mov	r6, r4
 800623a:	2e00      	cmp	r6, #0
 800623c:	d140      	bne.n	80062c0 <_malloc_r+0xcc>
 800623e:	6823      	ldr	r3, [r4, #0]
 8006240:	4631      	mov	r1, r6
 8006242:	4638      	mov	r0, r7
 8006244:	eb04 0803 	add.w	r8, r4, r3
 8006248:	f000 fb36 	bl	80068b8 <_sbrk_r>
 800624c:	4580      	cmp	r8, r0
 800624e:	d13a      	bne.n	80062c6 <_malloc_r+0xd2>
 8006250:	6821      	ldr	r1, [r4, #0]
 8006252:	3503      	adds	r5, #3
 8006254:	1a6d      	subs	r5, r5, r1
 8006256:	f025 0503 	bic.w	r5, r5, #3
 800625a:	3508      	adds	r5, #8
 800625c:	2d0c      	cmp	r5, #12
 800625e:	bf38      	it	cc
 8006260:	250c      	movcc	r5, #12
 8006262:	4629      	mov	r1, r5
 8006264:	4638      	mov	r0, r7
 8006266:	f7ff ffa5 	bl	80061b4 <sbrk_aligned>
 800626a:	3001      	adds	r0, #1
 800626c:	d02b      	beq.n	80062c6 <_malloc_r+0xd2>
 800626e:	6823      	ldr	r3, [r4, #0]
 8006270:	442b      	add	r3, r5
 8006272:	6023      	str	r3, [r4, #0]
 8006274:	e00e      	b.n	8006294 <_malloc_r+0xa0>
 8006276:	6822      	ldr	r2, [r4, #0]
 8006278:	1b52      	subs	r2, r2, r5
 800627a:	d41e      	bmi.n	80062ba <_malloc_r+0xc6>
 800627c:	2a0b      	cmp	r2, #11
 800627e:	d916      	bls.n	80062ae <_malloc_r+0xba>
 8006280:	1961      	adds	r1, r4, r5
 8006282:	42a3      	cmp	r3, r4
 8006284:	6025      	str	r5, [r4, #0]
 8006286:	bf18      	it	ne
 8006288:	6059      	strne	r1, [r3, #4]
 800628a:	6863      	ldr	r3, [r4, #4]
 800628c:	bf08      	it	eq
 800628e:	6031      	streq	r1, [r6, #0]
 8006290:	5162      	str	r2, [r4, r5]
 8006292:	604b      	str	r3, [r1, #4]
 8006294:	4638      	mov	r0, r7
 8006296:	f104 060b 	add.w	r6, r4, #11
 800629a:	f000 fbbd 	bl	8006a18 <__malloc_unlock>
 800629e:	f026 0607 	bic.w	r6, r6, #7
 80062a2:	1d23      	adds	r3, r4, #4
 80062a4:	1af2      	subs	r2, r6, r3
 80062a6:	d0b6      	beq.n	8006216 <_malloc_r+0x22>
 80062a8:	1b9b      	subs	r3, r3, r6
 80062aa:	50a3      	str	r3, [r4, r2]
 80062ac:	e7b3      	b.n	8006216 <_malloc_r+0x22>
 80062ae:	6862      	ldr	r2, [r4, #4]
 80062b0:	42a3      	cmp	r3, r4
 80062b2:	bf0c      	ite	eq
 80062b4:	6032      	streq	r2, [r6, #0]
 80062b6:	605a      	strne	r2, [r3, #4]
 80062b8:	e7ec      	b.n	8006294 <_malloc_r+0xa0>
 80062ba:	4623      	mov	r3, r4
 80062bc:	6864      	ldr	r4, [r4, #4]
 80062be:	e7b2      	b.n	8006226 <_malloc_r+0x32>
 80062c0:	4634      	mov	r4, r6
 80062c2:	6876      	ldr	r6, [r6, #4]
 80062c4:	e7b9      	b.n	800623a <_malloc_r+0x46>
 80062c6:	230c      	movs	r3, #12
 80062c8:	603b      	str	r3, [r7, #0]
 80062ca:	4638      	mov	r0, r7
 80062cc:	f000 fba4 	bl	8006a18 <__malloc_unlock>
 80062d0:	e7a1      	b.n	8006216 <_malloc_r+0x22>
 80062d2:	6025      	str	r5, [r4, #0]
 80062d4:	e7de      	b.n	8006294 <_malloc_r+0xa0>
 80062d6:	bf00      	nop
 80062d8:	200001b0 	.word	0x200001b0

080062dc <__sfputc_r>:
 80062dc:	6893      	ldr	r3, [r2, #8]
 80062de:	3b01      	subs	r3, #1
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	b410      	push	{r4}
 80062e4:	6093      	str	r3, [r2, #8]
 80062e6:	da08      	bge.n	80062fa <__sfputc_r+0x1e>
 80062e8:	6994      	ldr	r4, [r2, #24]
 80062ea:	42a3      	cmp	r3, r4
 80062ec:	db01      	blt.n	80062f2 <__sfputc_r+0x16>
 80062ee:	290a      	cmp	r1, #10
 80062f0:	d103      	bne.n	80062fa <__sfputc_r+0x1e>
 80062f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80062f6:	f7ff bc31 	b.w	8005b5c <__swbuf_r>
 80062fa:	6813      	ldr	r3, [r2, #0]
 80062fc:	1c58      	adds	r0, r3, #1
 80062fe:	6010      	str	r0, [r2, #0]
 8006300:	7019      	strb	r1, [r3, #0]
 8006302:	4608      	mov	r0, r1
 8006304:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006308:	4770      	bx	lr

0800630a <__sfputs_r>:
 800630a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800630c:	4606      	mov	r6, r0
 800630e:	460f      	mov	r7, r1
 8006310:	4614      	mov	r4, r2
 8006312:	18d5      	adds	r5, r2, r3
 8006314:	42ac      	cmp	r4, r5
 8006316:	d101      	bne.n	800631c <__sfputs_r+0x12>
 8006318:	2000      	movs	r0, #0
 800631a:	e007      	b.n	800632c <__sfputs_r+0x22>
 800631c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006320:	463a      	mov	r2, r7
 8006322:	4630      	mov	r0, r6
 8006324:	f7ff ffda 	bl	80062dc <__sfputc_r>
 8006328:	1c43      	adds	r3, r0, #1
 800632a:	d1f3      	bne.n	8006314 <__sfputs_r+0xa>
 800632c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006330 <_vfiprintf_r>:
 8006330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006334:	460d      	mov	r5, r1
 8006336:	b09d      	sub	sp, #116	; 0x74
 8006338:	4614      	mov	r4, r2
 800633a:	4698      	mov	r8, r3
 800633c:	4606      	mov	r6, r0
 800633e:	b118      	cbz	r0, 8006348 <_vfiprintf_r+0x18>
 8006340:	6983      	ldr	r3, [r0, #24]
 8006342:	b90b      	cbnz	r3, 8006348 <_vfiprintf_r+0x18>
 8006344:	f7ff fde4 	bl	8005f10 <__sinit>
 8006348:	4b89      	ldr	r3, [pc, #548]	; (8006570 <_vfiprintf_r+0x240>)
 800634a:	429d      	cmp	r5, r3
 800634c:	d11b      	bne.n	8006386 <_vfiprintf_r+0x56>
 800634e:	6875      	ldr	r5, [r6, #4]
 8006350:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006352:	07d9      	lsls	r1, r3, #31
 8006354:	d405      	bmi.n	8006362 <_vfiprintf_r+0x32>
 8006356:	89ab      	ldrh	r3, [r5, #12]
 8006358:	059a      	lsls	r2, r3, #22
 800635a:	d402      	bmi.n	8006362 <_vfiprintf_r+0x32>
 800635c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800635e:	f7ff fe75 	bl	800604c <__retarget_lock_acquire_recursive>
 8006362:	89ab      	ldrh	r3, [r5, #12]
 8006364:	071b      	lsls	r3, r3, #28
 8006366:	d501      	bpl.n	800636c <_vfiprintf_r+0x3c>
 8006368:	692b      	ldr	r3, [r5, #16]
 800636a:	b9eb      	cbnz	r3, 80063a8 <_vfiprintf_r+0x78>
 800636c:	4629      	mov	r1, r5
 800636e:	4630      	mov	r0, r6
 8006370:	f7ff fc46 	bl	8005c00 <__swsetup_r>
 8006374:	b1c0      	cbz	r0, 80063a8 <_vfiprintf_r+0x78>
 8006376:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006378:	07dc      	lsls	r4, r3, #31
 800637a:	d50e      	bpl.n	800639a <_vfiprintf_r+0x6a>
 800637c:	f04f 30ff 	mov.w	r0, #4294967295
 8006380:	b01d      	add	sp, #116	; 0x74
 8006382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006386:	4b7b      	ldr	r3, [pc, #492]	; (8006574 <_vfiprintf_r+0x244>)
 8006388:	429d      	cmp	r5, r3
 800638a:	d101      	bne.n	8006390 <_vfiprintf_r+0x60>
 800638c:	68b5      	ldr	r5, [r6, #8]
 800638e:	e7df      	b.n	8006350 <_vfiprintf_r+0x20>
 8006390:	4b79      	ldr	r3, [pc, #484]	; (8006578 <_vfiprintf_r+0x248>)
 8006392:	429d      	cmp	r5, r3
 8006394:	bf08      	it	eq
 8006396:	68f5      	ldreq	r5, [r6, #12]
 8006398:	e7da      	b.n	8006350 <_vfiprintf_r+0x20>
 800639a:	89ab      	ldrh	r3, [r5, #12]
 800639c:	0598      	lsls	r0, r3, #22
 800639e:	d4ed      	bmi.n	800637c <_vfiprintf_r+0x4c>
 80063a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80063a2:	f7ff fe54 	bl	800604e <__retarget_lock_release_recursive>
 80063a6:	e7e9      	b.n	800637c <_vfiprintf_r+0x4c>
 80063a8:	2300      	movs	r3, #0
 80063aa:	9309      	str	r3, [sp, #36]	; 0x24
 80063ac:	2320      	movs	r3, #32
 80063ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80063b2:	f8cd 800c 	str.w	r8, [sp, #12]
 80063b6:	2330      	movs	r3, #48	; 0x30
 80063b8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800657c <_vfiprintf_r+0x24c>
 80063bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80063c0:	f04f 0901 	mov.w	r9, #1
 80063c4:	4623      	mov	r3, r4
 80063c6:	469a      	mov	sl, r3
 80063c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80063cc:	b10a      	cbz	r2, 80063d2 <_vfiprintf_r+0xa2>
 80063ce:	2a25      	cmp	r2, #37	; 0x25
 80063d0:	d1f9      	bne.n	80063c6 <_vfiprintf_r+0x96>
 80063d2:	ebba 0b04 	subs.w	fp, sl, r4
 80063d6:	d00b      	beq.n	80063f0 <_vfiprintf_r+0xc0>
 80063d8:	465b      	mov	r3, fp
 80063da:	4622      	mov	r2, r4
 80063dc:	4629      	mov	r1, r5
 80063de:	4630      	mov	r0, r6
 80063e0:	f7ff ff93 	bl	800630a <__sfputs_r>
 80063e4:	3001      	adds	r0, #1
 80063e6:	f000 80aa 	beq.w	800653e <_vfiprintf_r+0x20e>
 80063ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80063ec:	445a      	add	r2, fp
 80063ee:	9209      	str	r2, [sp, #36]	; 0x24
 80063f0:	f89a 3000 	ldrb.w	r3, [sl]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	f000 80a2 	beq.w	800653e <_vfiprintf_r+0x20e>
 80063fa:	2300      	movs	r3, #0
 80063fc:	f04f 32ff 	mov.w	r2, #4294967295
 8006400:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006404:	f10a 0a01 	add.w	sl, sl, #1
 8006408:	9304      	str	r3, [sp, #16]
 800640a:	9307      	str	r3, [sp, #28]
 800640c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006410:	931a      	str	r3, [sp, #104]	; 0x68
 8006412:	4654      	mov	r4, sl
 8006414:	2205      	movs	r2, #5
 8006416:	f814 1b01 	ldrb.w	r1, [r4], #1
 800641a:	4858      	ldr	r0, [pc, #352]	; (800657c <_vfiprintf_r+0x24c>)
 800641c:	f7f9 fee8 	bl	80001f0 <memchr>
 8006420:	9a04      	ldr	r2, [sp, #16]
 8006422:	b9d8      	cbnz	r0, 800645c <_vfiprintf_r+0x12c>
 8006424:	06d1      	lsls	r1, r2, #27
 8006426:	bf44      	itt	mi
 8006428:	2320      	movmi	r3, #32
 800642a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800642e:	0713      	lsls	r3, r2, #28
 8006430:	bf44      	itt	mi
 8006432:	232b      	movmi	r3, #43	; 0x2b
 8006434:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006438:	f89a 3000 	ldrb.w	r3, [sl]
 800643c:	2b2a      	cmp	r3, #42	; 0x2a
 800643e:	d015      	beq.n	800646c <_vfiprintf_r+0x13c>
 8006440:	9a07      	ldr	r2, [sp, #28]
 8006442:	4654      	mov	r4, sl
 8006444:	2000      	movs	r0, #0
 8006446:	f04f 0c0a 	mov.w	ip, #10
 800644a:	4621      	mov	r1, r4
 800644c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006450:	3b30      	subs	r3, #48	; 0x30
 8006452:	2b09      	cmp	r3, #9
 8006454:	d94e      	bls.n	80064f4 <_vfiprintf_r+0x1c4>
 8006456:	b1b0      	cbz	r0, 8006486 <_vfiprintf_r+0x156>
 8006458:	9207      	str	r2, [sp, #28]
 800645a:	e014      	b.n	8006486 <_vfiprintf_r+0x156>
 800645c:	eba0 0308 	sub.w	r3, r0, r8
 8006460:	fa09 f303 	lsl.w	r3, r9, r3
 8006464:	4313      	orrs	r3, r2
 8006466:	9304      	str	r3, [sp, #16]
 8006468:	46a2      	mov	sl, r4
 800646a:	e7d2      	b.n	8006412 <_vfiprintf_r+0xe2>
 800646c:	9b03      	ldr	r3, [sp, #12]
 800646e:	1d19      	adds	r1, r3, #4
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	9103      	str	r1, [sp, #12]
 8006474:	2b00      	cmp	r3, #0
 8006476:	bfbb      	ittet	lt
 8006478:	425b      	neglt	r3, r3
 800647a:	f042 0202 	orrlt.w	r2, r2, #2
 800647e:	9307      	strge	r3, [sp, #28]
 8006480:	9307      	strlt	r3, [sp, #28]
 8006482:	bfb8      	it	lt
 8006484:	9204      	strlt	r2, [sp, #16]
 8006486:	7823      	ldrb	r3, [r4, #0]
 8006488:	2b2e      	cmp	r3, #46	; 0x2e
 800648a:	d10c      	bne.n	80064a6 <_vfiprintf_r+0x176>
 800648c:	7863      	ldrb	r3, [r4, #1]
 800648e:	2b2a      	cmp	r3, #42	; 0x2a
 8006490:	d135      	bne.n	80064fe <_vfiprintf_r+0x1ce>
 8006492:	9b03      	ldr	r3, [sp, #12]
 8006494:	1d1a      	adds	r2, r3, #4
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	9203      	str	r2, [sp, #12]
 800649a:	2b00      	cmp	r3, #0
 800649c:	bfb8      	it	lt
 800649e:	f04f 33ff 	movlt.w	r3, #4294967295
 80064a2:	3402      	adds	r4, #2
 80064a4:	9305      	str	r3, [sp, #20]
 80064a6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800658c <_vfiprintf_r+0x25c>
 80064aa:	7821      	ldrb	r1, [r4, #0]
 80064ac:	2203      	movs	r2, #3
 80064ae:	4650      	mov	r0, sl
 80064b0:	f7f9 fe9e 	bl	80001f0 <memchr>
 80064b4:	b140      	cbz	r0, 80064c8 <_vfiprintf_r+0x198>
 80064b6:	2340      	movs	r3, #64	; 0x40
 80064b8:	eba0 000a 	sub.w	r0, r0, sl
 80064bc:	fa03 f000 	lsl.w	r0, r3, r0
 80064c0:	9b04      	ldr	r3, [sp, #16]
 80064c2:	4303      	orrs	r3, r0
 80064c4:	3401      	adds	r4, #1
 80064c6:	9304      	str	r3, [sp, #16]
 80064c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064cc:	482c      	ldr	r0, [pc, #176]	; (8006580 <_vfiprintf_r+0x250>)
 80064ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80064d2:	2206      	movs	r2, #6
 80064d4:	f7f9 fe8c 	bl	80001f0 <memchr>
 80064d8:	2800      	cmp	r0, #0
 80064da:	d03f      	beq.n	800655c <_vfiprintf_r+0x22c>
 80064dc:	4b29      	ldr	r3, [pc, #164]	; (8006584 <_vfiprintf_r+0x254>)
 80064de:	bb1b      	cbnz	r3, 8006528 <_vfiprintf_r+0x1f8>
 80064e0:	9b03      	ldr	r3, [sp, #12]
 80064e2:	3307      	adds	r3, #7
 80064e4:	f023 0307 	bic.w	r3, r3, #7
 80064e8:	3308      	adds	r3, #8
 80064ea:	9303      	str	r3, [sp, #12]
 80064ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064ee:	443b      	add	r3, r7
 80064f0:	9309      	str	r3, [sp, #36]	; 0x24
 80064f2:	e767      	b.n	80063c4 <_vfiprintf_r+0x94>
 80064f4:	fb0c 3202 	mla	r2, ip, r2, r3
 80064f8:	460c      	mov	r4, r1
 80064fa:	2001      	movs	r0, #1
 80064fc:	e7a5      	b.n	800644a <_vfiprintf_r+0x11a>
 80064fe:	2300      	movs	r3, #0
 8006500:	3401      	adds	r4, #1
 8006502:	9305      	str	r3, [sp, #20]
 8006504:	4619      	mov	r1, r3
 8006506:	f04f 0c0a 	mov.w	ip, #10
 800650a:	4620      	mov	r0, r4
 800650c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006510:	3a30      	subs	r2, #48	; 0x30
 8006512:	2a09      	cmp	r2, #9
 8006514:	d903      	bls.n	800651e <_vfiprintf_r+0x1ee>
 8006516:	2b00      	cmp	r3, #0
 8006518:	d0c5      	beq.n	80064a6 <_vfiprintf_r+0x176>
 800651a:	9105      	str	r1, [sp, #20]
 800651c:	e7c3      	b.n	80064a6 <_vfiprintf_r+0x176>
 800651e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006522:	4604      	mov	r4, r0
 8006524:	2301      	movs	r3, #1
 8006526:	e7f0      	b.n	800650a <_vfiprintf_r+0x1da>
 8006528:	ab03      	add	r3, sp, #12
 800652a:	9300      	str	r3, [sp, #0]
 800652c:	462a      	mov	r2, r5
 800652e:	4b16      	ldr	r3, [pc, #88]	; (8006588 <_vfiprintf_r+0x258>)
 8006530:	a904      	add	r1, sp, #16
 8006532:	4630      	mov	r0, r6
 8006534:	f3af 8000 	nop.w
 8006538:	4607      	mov	r7, r0
 800653a:	1c78      	adds	r0, r7, #1
 800653c:	d1d6      	bne.n	80064ec <_vfiprintf_r+0x1bc>
 800653e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006540:	07d9      	lsls	r1, r3, #31
 8006542:	d405      	bmi.n	8006550 <_vfiprintf_r+0x220>
 8006544:	89ab      	ldrh	r3, [r5, #12]
 8006546:	059a      	lsls	r2, r3, #22
 8006548:	d402      	bmi.n	8006550 <_vfiprintf_r+0x220>
 800654a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800654c:	f7ff fd7f 	bl	800604e <__retarget_lock_release_recursive>
 8006550:	89ab      	ldrh	r3, [r5, #12]
 8006552:	065b      	lsls	r3, r3, #25
 8006554:	f53f af12 	bmi.w	800637c <_vfiprintf_r+0x4c>
 8006558:	9809      	ldr	r0, [sp, #36]	; 0x24
 800655a:	e711      	b.n	8006380 <_vfiprintf_r+0x50>
 800655c:	ab03      	add	r3, sp, #12
 800655e:	9300      	str	r3, [sp, #0]
 8006560:	462a      	mov	r2, r5
 8006562:	4b09      	ldr	r3, [pc, #36]	; (8006588 <_vfiprintf_r+0x258>)
 8006564:	a904      	add	r1, sp, #16
 8006566:	4630      	mov	r0, r6
 8006568:	f000 f880 	bl	800666c <_printf_i>
 800656c:	e7e4      	b.n	8006538 <_vfiprintf_r+0x208>
 800656e:	bf00      	nop
 8006570:	08006b1c 	.word	0x08006b1c
 8006574:	08006b3c 	.word	0x08006b3c
 8006578:	08006afc 	.word	0x08006afc
 800657c:	08006b5c 	.word	0x08006b5c
 8006580:	08006b66 	.word	0x08006b66
 8006584:	00000000 	.word	0x00000000
 8006588:	0800630b 	.word	0x0800630b
 800658c:	08006b62 	.word	0x08006b62

08006590 <_printf_common>:
 8006590:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006594:	4616      	mov	r6, r2
 8006596:	4699      	mov	r9, r3
 8006598:	688a      	ldr	r2, [r1, #8]
 800659a:	690b      	ldr	r3, [r1, #16]
 800659c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80065a0:	4293      	cmp	r3, r2
 80065a2:	bfb8      	it	lt
 80065a4:	4613      	movlt	r3, r2
 80065a6:	6033      	str	r3, [r6, #0]
 80065a8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80065ac:	4607      	mov	r7, r0
 80065ae:	460c      	mov	r4, r1
 80065b0:	b10a      	cbz	r2, 80065b6 <_printf_common+0x26>
 80065b2:	3301      	adds	r3, #1
 80065b4:	6033      	str	r3, [r6, #0]
 80065b6:	6823      	ldr	r3, [r4, #0]
 80065b8:	0699      	lsls	r1, r3, #26
 80065ba:	bf42      	ittt	mi
 80065bc:	6833      	ldrmi	r3, [r6, #0]
 80065be:	3302      	addmi	r3, #2
 80065c0:	6033      	strmi	r3, [r6, #0]
 80065c2:	6825      	ldr	r5, [r4, #0]
 80065c4:	f015 0506 	ands.w	r5, r5, #6
 80065c8:	d106      	bne.n	80065d8 <_printf_common+0x48>
 80065ca:	f104 0a19 	add.w	sl, r4, #25
 80065ce:	68e3      	ldr	r3, [r4, #12]
 80065d0:	6832      	ldr	r2, [r6, #0]
 80065d2:	1a9b      	subs	r3, r3, r2
 80065d4:	42ab      	cmp	r3, r5
 80065d6:	dc26      	bgt.n	8006626 <_printf_common+0x96>
 80065d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80065dc:	1e13      	subs	r3, r2, #0
 80065de:	6822      	ldr	r2, [r4, #0]
 80065e0:	bf18      	it	ne
 80065e2:	2301      	movne	r3, #1
 80065e4:	0692      	lsls	r2, r2, #26
 80065e6:	d42b      	bmi.n	8006640 <_printf_common+0xb0>
 80065e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80065ec:	4649      	mov	r1, r9
 80065ee:	4638      	mov	r0, r7
 80065f0:	47c0      	blx	r8
 80065f2:	3001      	adds	r0, #1
 80065f4:	d01e      	beq.n	8006634 <_printf_common+0xa4>
 80065f6:	6823      	ldr	r3, [r4, #0]
 80065f8:	68e5      	ldr	r5, [r4, #12]
 80065fa:	6832      	ldr	r2, [r6, #0]
 80065fc:	f003 0306 	and.w	r3, r3, #6
 8006600:	2b04      	cmp	r3, #4
 8006602:	bf08      	it	eq
 8006604:	1aad      	subeq	r5, r5, r2
 8006606:	68a3      	ldr	r3, [r4, #8]
 8006608:	6922      	ldr	r2, [r4, #16]
 800660a:	bf0c      	ite	eq
 800660c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006610:	2500      	movne	r5, #0
 8006612:	4293      	cmp	r3, r2
 8006614:	bfc4      	itt	gt
 8006616:	1a9b      	subgt	r3, r3, r2
 8006618:	18ed      	addgt	r5, r5, r3
 800661a:	2600      	movs	r6, #0
 800661c:	341a      	adds	r4, #26
 800661e:	42b5      	cmp	r5, r6
 8006620:	d11a      	bne.n	8006658 <_printf_common+0xc8>
 8006622:	2000      	movs	r0, #0
 8006624:	e008      	b.n	8006638 <_printf_common+0xa8>
 8006626:	2301      	movs	r3, #1
 8006628:	4652      	mov	r2, sl
 800662a:	4649      	mov	r1, r9
 800662c:	4638      	mov	r0, r7
 800662e:	47c0      	blx	r8
 8006630:	3001      	adds	r0, #1
 8006632:	d103      	bne.n	800663c <_printf_common+0xac>
 8006634:	f04f 30ff 	mov.w	r0, #4294967295
 8006638:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800663c:	3501      	adds	r5, #1
 800663e:	e7c6      	b.n	80065ce <_printf_common+0x3e>
 8006640:	18e1      	adds	r1, r4, r3
 8006642:	1c5a      	adds	r2, r3, #1
 8006644:	2030      	movs	r0, #48	; 0x30
 8006646:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800664a:	4422      	add	r2, r4
 800664c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006650:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006654:	3302      	adds	r3, #2
 8006656:	e7c7      	b.n	80065e8 <_printf_common+0x58>
 8006658:	2301      	movs	r3, #1
 800665a:	4622      	mov	r2, r4
 800665c:	4649      	mov	r1, r9
 800665e:	4638      	mov	r0, r7
 8006660:	47c0      	blx	r8
 8006662:	3001      	adds	r0, #1
 8006664:	d0e6      	beq.n	8006634 <_printf_common+0xa4>
 8006666:	3601      	adds	r6, #1
 8006668:	e7d9      	b.n	800661e <_printf_common+0x8e>
	...

0800666c <_printf_i>:
 800666c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006670:	7e0f      	ldrb	r7, [r1, #24]
 8006672:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006674:	2f78      	cmp	r7, #120	; 0x78
 8006676:	4691      	mov	r9, r2
 8006678:	4680      	mov	r8, r0
 800667a:	460c      	mov	r4, r1
 800667c:	469a      	mov	sl, r3
 800667e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006682:	d807      	bhi.n	8006694 <_printf_i+0x28>
 8006684:	2f62      	cmp	r7, #98	; 0x62
 8006686:	d80a      	bhi.n	800669e <_printf_i+0x32>
 8006688:	2f00      	cmp	r7, #0
 800668a:	f000 80d8 	beq.w	800683e <_printf_i+0x1d2>
 800668e:	2f58      	cmp	r7, #88	; 0x58
 8006690:	f000 80a3 	beq.w	80067da <_printf_i+0x16e>
 8006694:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006698:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800669c:	e03a      	b.n	8006714 <_printf_i+0xa8>
 800669e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80066a2:	2b15      	cmp	r3, #21
 80066a4:	d8f6      	bhi.n	8006694 <_printf_i+0x28>
 80066a6:	a101      	add	r1, pc, #4	; (adr r1, 80066ac <_printf_i+0x40>)
 80066a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80066ac:	08006705 	.word	0x08006705
 80066b0:	08006719 	.word	0x08006719
 80066b4:	08006695 	.word	0x08006695
 80066b8:	08006695 	.word	0x08006695
 80066bc:	08006695 	.word	0x08006695
 80066c0:	08006695 	.word	0x08006695
 80066c4:	08006719 	.word	0x08006719
 80066c8:	08006695 	.word	0x08006695
 80066cc:	08006695 	.word	0x08006695
 80066d0:	08006695 	.word	0x08006695
 80066d4:	08006695 	.word	0x08006695
 80066d8:	08006825 	.word	0x08006825
 80066dc:	08006749 	.word	0x08006749
 80066e0:	08006807 	.word	0x08006807
 80066e4:	08006695 	.word	0x08006695
 80066e8:	08006695 	.word	0x08006695
 80066ec:	08006847 	.word	0x08006847
 80066f0:	08006695 	.word	0x08006695
 80066f4:	08006749 	.word	0x08006749
 80066f8:	08006695 	.word	0x08006695
 80066fc:	08006695 	.word	0x08006695
 8006700:	0800680f 	.word	0x0800680f
 8006704:	682b      	ldr	r3, [r5, #0]
 8006706:	1d1a      	adds	r2, r3, #4
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	602a      	str	r2, [r5, #0]
 800670c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006710:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006714:	2301      	movs	r3, #1
 8006716:	e0a3      	b.n	8006860 <_printf_i+0x1f4>
 8006718:	6820      	ldr	r0, [r4, #0]
 800671a:	6829      	ldr	r1, [r5, #0]
 800671c:	0606      	lsls	r6, r0, #24
 800671e:	f101 0304 	add.w	r3, r1, #4
 8006722:	d50a      	bpl.n	800673a <_printf_i+0xce>
 8006724:	680e      	ldr	r6, [r1, #0]
 8006726:	602b      	str	r3, [r5, #0]
 8006728:	2e00      	cmp	r6, #0
 800672a:	da03      	bge.n	8006734 <_printf_i+0xc8>
 800672c:	232d      	movs	r3, #45	; 0x2d
 800672e:	4276      	negs	r6, r6
 8006730:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006734:	485e      	ldr	r0, [pc, #376]	; (80068b0 <_printf_i+0x244>)
 8006736:	230a      	movs	r3, #10
 8006738:	e019      	b.n	800676e <_printf_i+0x102>
 800673a:	680e      	ldr	r6, [r1, #0]
 800673c:	602b      	str	r3, [r5, #0]
 800673e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006742:	bf18      	it	ne
 8006744:	b236      	sxthne	r6, r6
 8006746:	e7ef      	b.n	8006728 <_printf_i+0xbc>
 8006748:	682b      	ldr	r3, [r5, #0]
 800674a:	6820      	ldr	r0, [r4, #0]
 800674c:	1d19      	adds	r1, r3, #4
 800674e:	6029      	str	r1, [r5, #0]
 8006750:	0601      	lsls	r1, r0, #24
 8006752:	d501      	bpl.n	8006758 <_printf_i+0xec>
 8006754:	681e      	ldr	r6, [r3, #0]
 8006756:	e002      	b.n	800675e <_printf_i+0xf2>
 8006758:	0646      	lsls	r6, r0, #25
 800675a:	d5fb      	bpl.n	8006754 <_printf_i+0xe8>
 800675c:	881e      	ldrh	r6, [r3, #0]
 800675e:	4854      	ldr	r0, [pc, #336]	; (80068b0 <_printf_i+0x244>)
 8006760:	2f6f      	cmp	r7, #111	; 0x6f
 8006762:	bf0c      	ite	eq
 8006764:	2308      	moveq	r3, #8
 8006766:	230a      	movne	r3, #10
 8006768:	2100      	movs	r1, #0
 800676a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800676e:	6865      	ldr	r5, [r4, #4]
 8006770:	60a5      	str	r5, [r4, #8]
 8006772:	2d00      	cmp	r5, #0
 8006774:	bfa2      	ittt	ge
 8006776:	6821      	ldrge	r1, [r4, #0]
 8006778:	f021 0104 	bicge.w	r1, r1, #4
 800677c:	6021      	strge	r1, [r4, #0]
 800677e:	b90e      	cbnz	r6, 8006784 <_printf_i+0x118>
 8006780:	2d00      	cmp	r5, #0
 8006782:	d04d      	beq.n	8006820 <_printf_i+0x1b4>
 8006784:	4615      	mov	r5, r2
 8006786:	fbb6 f1f3 	udiv	r1, r6, r3
 800678a:	fb03 6711 	mls	r7, r3, r1, r6
 800678e:	5dc7      	ldrb	r7, [r0, r7]
 8006790:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006794:	4637      	mov	r7, r6
 8006796:	42bb      	cmp	r3, r7
 8006798:	460e      	mov	r6, r1
 800679a:	d9f4      	bls.n	8006786 <_printf_i+0x11a>
 800679c:	2b08      	cmp	r3, #8
 800679e:	d10b      	bne.n	80067b8 <_printf_i+0x14c>
 80067a0:	6823      	ldr	r3, [r4, #0]
 80067a2:	07de      	lsls	r6, r3, #31
 80067a4:	d508      	bpl.n	80067b8 <_printf_i+0x14c>
 80067a6:	6923      	ldr	r3, [r4, #16]
 80067a8:	6861      	ldr	r1, [r4, #4]
 80067aa:	4299      	cmp	r1, r3
 80067ac:	bfde      	ittt	le
 80067ae:	2330      	movle	r3, #48	; 0x30
 80067b0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80067b4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80067b8:	1b52      	subs	r2, r2, r5
 80067ba:	6122      	str	r2, [r4, #16]
 80067bc:	f8cd a000 	str.w	sl, [sp]
 80067c0:	464b      	mov	r3, r9
 80067c2:	aa03      	add	r2, sp, #12
 80067c4:	4621      	mov	r1, r4
 80067c6:	4640      	mov	r0, r8
 80067c8:	f7ff fee2 	bl	8006590 <_printf_common>
 80067cc:	3001      	adds	r0, #1
 80067ce:	d14c      	bne.n	800686a <_printf_i+0x1fe>
 80067d0:	f04f 30ff 	mov.w	r0, #4294967295
 80067d4:	b004      	add	sp, #16
 80067d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067da:	4835      	ldr	r0, [pc, #212]	; (80068b0 <_printf_i+0x244>)
 80067dc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80067e0:	6829      	ldr	r1, [r5, #0]
 80067e2:	6823      	ldr	r3, [r4, #0]
 80067e4:	f851 6b04 	ldr.w	r6, [r1], #4
 80067e8:	6029      	str	r1, [r5, #0]
 80067ea:	061d      	lsls	r5, r3, #24
 80067ec:	d514      	bpl.n	8006818 <_printf_i+0x1ac>
 80067ee:	07df      	lsls	r7, r3, #31
 80067f0:	bf44      	itt	mi
 80067f2:	f043 0320 	orrmi.w	r3, r3, #32
 80067f6:	6023      	strmi	r3, [r4, #0]
 80067f8:	b91e      	cbnz	r6, 8006802 <_printf_i+0x196>
 80067fa:	6823      	ldr	r3, [r4, #0]
 80067fc:	f023 0320 	bic.w	r3, r3, #32
 8006800:	6023      	str	r3, [r4, #0]
 8006802:	2310      	movs	r3, #16
 8006804:	e7b0      	b.n	8006768 <_printf_i+0xfc>
 8006806:	6823      	ldr	r3, [r4, #0]
 8006808:	f043 0320 	orr.w	r3, r3, #32
 800680c:	6023      	str	r3, [r4, #0]
 800680e:	2378      	movs	r3, #120	; 0x78
 8006810:	4828      	ldr	r0, [pc, #160]	; (80068b4 <_printf_i+0x248>)
 8006812:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006816:	e7e3      	b.n	80067e0 <_printf_i+0x174>
 8006818:	0659      	lsls	r1, r3, #25
 800681a:	bf48      	it	mi
 800681c:	b2b6      	uxthmi	r6, r6
 800681e:	e7e6      	b.n	80067ee <_printf_i+0x182>
 8006820:	4615      	mov	r5, r2
 8006822:	e7bb      	b.n	800679c <_printf_i+0x130>
 8006824:	682b      	ldr	r3, [r5, #0]
 8006826:	6826      	ldr	r6, [r4, #0]
 8006828:	6961      	ldr	r1, [r4, #20]
 800682a:	1d18      	adds	r0, r3, #4
 800682c:	6028      	str	r0, [r5, #0]
 800682e:	0635      	lsls	r5, r6, #24
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	d501      	bpl.n	8006838 <_printf_i+0x1cc>
 8006834:	6019      	str	r1, [r3, #0]
 8006836:	e002      	b.n	800683e <_printf_i+0x1d2>
 8006838:	0670      	lsls	r0, r6, #25
 800683a:	d5fb      	bpl.n	8006834 <_printf_i+0x1c8>
 800683c:	8019      	strh	r1, [r3, #0]
 800683e:	2300      	movs	r3, #0
 8006840:	6123      	str	r3, [r4, #16]
 8006842:	4615      	mov	r5, r2
 8006844:	e7ba      	b.n	80067bc <_printf_i+0x150>
 8006846:	682b      	ldr	r3, [r5, #0]
 8006848:	1d1a      	adds	r2, r3, #4
 800684a:	602a      	str	r2, [r5, #0]
 800684c:	681d      	ldr	r5, [r3, #0]
 800684e:	6862      	ldr	r2, [r4, #4]
 8006850:	2100      	movs	r1, #0
 8006852:	4628      	mov	r0, r5
 8006854:	f7f9 fccc 	bl	80001f0 <memchr>
 8006858:	b108      	cbz	r0, 800685e <_printf_i+0x1f2>
 800685a:	1b40      	subs	r0, r0, r5
 800685c:	6060      	str	r0, [r4, #4]
 800685e:	6863      	ldr	r3, [r4, #4]
 8006860:	6123      	str	r3, [r4, #16]
 8006862:	2300      	movs	r3, #0
 8006864:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006868:	e7a8      	b.n	80067bc <_printf_i+0x150>
 800686a:	6923      	ldr	r3, [r4, #16]
 800686c:	462a      	mov	r2, r5
 800686e:	4649      	mov	r1, r9
 8006870:	4640      	mov	r0, r8
 8006872:	47d0      	blx	sl
 8006874:	3001      	adds	r0, #1
 8006876:	d0ab      	beq.n	80067d0 <_printf_i+0x164>
 8006878:	6823      	ldr	r3, [r4, #0]
 800687a:	079b      	lsls	r3, r3, #30
 800687c:	d413      	bmi.n	80068a6 <_printf_i+0x23a>
 800687e:	68e0      	ldr	r0, [r4, #12]
 8006880:	9b03      	ldr	r3, [sp, #12]
 8006882:	4298      	cmp	r0, r3
 8006884:	bfb8      	it	lt
 8006886:	4618      	movlt	r0, r3
 8006888:	e7a4      	b.n	80067d4 <_printf_i+0x168>
 800688a:	2301      	movs	r3, #1
 800688c:	4632      	mov	r2, r6
 800688e:	4649      	mov	r1, r9
 8006890:	4640      	mov	r0, r8
 8006892:	47d0      	blx	sl
 8006894:	3001      	adds	r0, #1
 8006896:	d09b      	beq.n	80067d0 <_printf_i+0x164>
 8006898:	3501      	adds	r5, #1
 800689a:	68e3      	ldr	r3, [r4, #12]
 800689c:	9903      	ldr	r1, [sp, #12]
 800689e:	1a5b      	subs	r3, r3, r1
 80068a0:	42ab      	cmp	r3, r5
 80068a2:	dcf2      	bgt.n	800688a <_printf_i+0x21e>
 80068a4:	e7eb      	b.n	800687e <_printf_i+0x212>
 80068a6:	2500      	movs	r5, #0
 80068a8:	f104 0619 	add.w	r6, r4, #25
 80068ac:	e7f5      	b.n	800689a <_printf_i+0x22e>
 80068ae:	bf00      	nop
 80068b0:	08006b6d 	.word	0x08006b6d
 80068b4:	08006b7e 	.word	0x08006b7e

080068b8 <_sbrk_r>:
 80068b8:	b538      	push	{r3, r4, r5, lr}
 80068ba:	4d06      	ldr	r5, [pc, #24]	; (80068d4 <_sbrk_r+0x1c>)
 80068bc:	2300      	movs	r3, #0
 80068be:	4604      	mov	r4, r0
 80068c0:	4608      	mov	r0, r1
 80068c2:	602b      	str	r3, [r5, #0]
 80068c4:	f7fa fa12 	bl	8000cec <_sbrk>
 80068c8:	1c43      	adds	r3, r0, #1
 80068ca:	d102      	bne.n	80068d2 <_sbrk_r+0x1a>
 80068cc:	682b      	ldr	r3, [r5, #0]
 80068ce:	b103      	cbz	r3, 80068d2 <_sbrk_r+0x1a>
 80068d0:	6023      	str	r3, [r4, #0]
 80068d2:	bd38      	pop	{r3, r4, r5, pc}
 80068d4:	200001b8 	.word	0x200001b8

080068d8 <__sread>:
 80068d8:	b510      	push	{r4, lr}
 80068da:	460c      	mov	r4, r1
 80068dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068e0:	f000 f8a0 	bl	8006a24 <_read_r>
 80068e4:	2800      	cmp	r0, #0
 80068e6:	bfab      	itete	ge
 80068e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80068ea:	89a3      	ldrhlt	r3, [r4, #12]
 80068ec:	181b      	addge	r3, r3, r0
 80068ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80068f2:	bfac      	ite	ge
 80068f4:	6563      	strge	r3, [r4, #84]	; 0x54
 80068f6:	81a3      	strhlt	r3, [r4, #12]
 80068f8:	bd10      	pop	{r4, pc}

080068fa <__swrite>:
 80068fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068fe:	461f      	mov	r7, r3
 8006900:	898b      	ldrh	r3, [r1, #12]
 8006902:	05db      	lsls	r3, r3, #23
 8006904:	4605      	mov	r5, r0
 8006906:	460c      	mov	r4, r1
 8006908:	4616      	mov	r6, r2
 800690a:	d505      	bpl.n	8006918 <__swrite+0x1e>
 800690c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006910:	2302      	movs	r3, #2
 8006912:	2200      	movs	r2, #0
 8006914:	f000 f868 	bl	80069e8 <_lseek_r>
 8006918:	89a3      	ldrh	r3, [r4, #12]
 800691a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800691e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006922:	81a3      	strh	r3, [r4, #12]
 8006924:	4632      	mov	r2, r6
 8006926:	463b      	mov	r3, r7
 8006928:	4628      	mov	r0, r5
 800692a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800692e:	f000 b817 	b.w	8006960 <_write_r>

08006932 <__sseek>:
 8006932:	b510      	push	{r4, lr}
 8006934:	460c      	mov	r4, r1
 8006936:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800693a:	f000 f855 	bl	80069e8 <_lseek_r>
 800693e:	1c43      	adds	r3, r0, #1
 8006940:	89a3      	ldrh	r3, [r4, #12]
 8006942:	bf15      	itete	ne
 8006944:	6560      	strne	r0, [r4, #84]	; 0x54
 8006946:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800694a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800694e:	81a3      	strheq	r3, [r4, #12]
 8006950:	bf18      	it	ne
 8006952:	81a3      	strhne	r3, [r4, #12]
 8006954:	bd10      	pop	{r4, pc}

08006956 <__sclose>:
 8006956:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800695a:	f000 b813 	b.w	8006984 <_close_r>
	...

08006960 <_write_r>:
 8006960:	b538      	push	{r3, r4, r5, lr}
 8006962:	4d07      	ldr	r5, [pc, #28]	; (8006980 <_write_r+0x20>)
 8006964:	4604      	mov	r4, r0
 8006966:	4608      	mov	r0, r1
 8006968:	4611      	mov	r1, r2
 800696a:	2200      	movs	r2, #0
 800696c:	602a      	str	r2, [r5, #0]
 800696e:	461a      	mov	r2, r3
 8006970:	f7f9 ffaa 	bl	80008c8 <_write>
 8006974:	1c43      	adds	r3, r0, #1
 8006976:	d102      	bne.n	800697e <_write_r+0x1e>
 8006978:	682b      	ldr	r3, [r5, #0]
 800697a:	b103      	cbz	r3, 800697e <_write_r+0x1e>
 800697c:	6023      	str	r3, [r4, #0]
 800697e:	bd38      	pop	{r3, r4, r5, pc}
 8006980:	200001b8 	.word	0x200001b8

08006984 <_close_r>:
 8006984:	b538      	push	{r3, r4, r5, lr}
 8006986:	4d06      	ldr	r5, [pc, #24]	; (80069a0 <_close_r+0x1c>)
 8006988:	2300      	movs	r3, #0
 800698a:	4604      	mov	r4, r0
 800698c:	4608      	mov	r0, r1
 800698e:	602b      	str	r3, [r5, #0]
 8006990:	f7fa f977 	bl	8000c82 <_close>
 8006994:	1c43      	adds	r3, r0, #1
 8006996:	d102      	bne.n	800699e <_close_r+0x1a>
 8006998:	682b      	ldr	r3, [r5, #0]
 800699a:	b103      	cbz	r3, 800699e <_close_r+0x1a>
 800699c:	6023      	str	r3, [r4, #0]
 800699e:	bd38      	pop	{r3, r4, r5, pc}
 80069a0:	200001b8 	.word	0x200001b8

080069a4 <_fstat_r>:
 80069a4:	b538      	push	{r3, r4, r5, lr}
 80069a6:	4d07      	ldr	r5, [pc, #28]	; (80069c4 <_fstat_r+0x20>)
 80069a8:	2300      	movs	r3, #0
 80069aa:	4604      	mov	r4, r0
 80069ac:	4608      	mov	r0, r1
 80069ae:	4611      	mov	r1, r2
 80069b0:	602b      	str	r3, [r5, #0]
 80069b2:	f7fa f972 	bl	8000c9a <_fstat>
 80069b6:	1c43      	adds	r3, r0, #1
 80069b8:	d102      	bne.n	80069c0 <_fstat_r+0x1c>
 80069ba:	682b      	ldr	r3, [r5, #0]
 80069bc:	b103      	cbz	r3, 80069c0 <_fstat_r+0x1c>
 80069be:	6023      	str	r3, [r4, #0]
 80069c0:	bd38      	pop	{r3, r4, r5, pc}
 80069c2:	bf00      	nop
 80069c4:	200001b8 	.word	0x200001b8

080069c8 <_isatty_r>:
 80069c8:	b538      	push	{r3, r4, r5, lr}
 80069ca:	4d06      	ldr	r5, [pc, #24]	; (80069e4 <_isatty_r+0x1c>)
 80069cc:	2300      	movs	r3, #0
 80069ce:	4604      	mov	r4, r0
 80069d0:	4608      	mov	r0, r1
 80069d2:	602b      	str	r3, [r5, #0]
 80069d4:	f7fa f971 	bl	8000cba <_isatty>
 80069d8:	1c43      	adds	r3, r0, #1
 80069da:	d102      	bne.n	80069e2 <_isatty_r+0x1a>
 80069dc:	682b      	ldr	r3, [r5, #0]
 80069de:	b103      	cbz	r3, 80069e2 <_isatty_r+0x1a>
 80069e0:	6023      	str	r3, [r4, #0]
 80069e2:	bd38      	pop	{r3, r4, r5, pc}
 80069e4:	200001b8 	.word	0x200001b8

080069e8 <_lseek_r>:
 80069e8:	b538      	push	{r3, r4, r5, lr}
 80069ea:	4d07      	ldr	r5, [pc, #28]	; (8006a08 <_lseek_r+0x20>)
 80069ec:	4604      	mov	r4, r0
 80069ee:	4608      	mov	r0, r1
 80069f0:	4611      	mov	r1, r2
 80069f2:	2200      	movs	r2, #0
 80069f4:	602a      	str	r2, [r5, #0]
 80069f6:	461a      	mov	r2, r3
 80069f8:	f7fa f96a 	bl	8000cd0 <_lseek>
 80069fc:	1c43      	adds	r3, r0, #1
 80069fe:	d102      	bne.n	8006a06 <_lseek_r+0x1e>
 8006a00:	682b      	ldr	r3, [r5, #0]
 8006a02:	b103      	cbz	r3, 8006a06 <_lseek_r+0x1e>
 8006a04:	6023      	str	r3, [r4, #0]
 8006a06:	bd38      	pop	{r3, r4, r5, pc}
 8006a08:	200001b8 	.word	0x200001b8

08006a0c <__malloc_lock>:
 8006a0c:	4801      	ldr	r0, [pc, #4]	; (8006a14 <__malloc_lock+0x8>)
 8006a0e:	f7ff bb1d 	b.w	800604c <__retarget_lock_acquire_recursive>
 8006a12:	bf00      	nop
 8006a14:	200001ac 	.word	0x200001ac

08006a18 <__malloc_unlock>:
 8006a18:	4801      	ldr	r0, [pc, #4]	; (8006a20 <__malloc_unlock+0x8>)
 8006a1a:	f7ff bb18 	b.w	800604e <__retarget_lock_release_recursive>
 8006a1e:	bf00      	nop
 8006a20:	200001ac 	.word	0x200001ac

08006a24 <_read_r>:
 8006a24:	b538      	push	{r3, r4, r5, lr}
 8006a26:	4d07      	ldr	r5, [pc, #28]	; (8006a44 <_read_r+0x20>)
 8006a28:	4604      	mov	r4, r0
 8006a2a:	4608      	mov	r0, r1
 8006a2c:	4611      	mov	r1, r2
 8006a2e:	2200      	movs	r2, #0
 8006a30:	602a      	str	r2, [r5, #0]
 8006a32:	461a      	mov	r2, r3
 8006a34:	f7fa f908 	bl	8000c48 <_read>
 8006a38:	1c43      	adds	r3, r0, #1
 8006a3a:	d102      	bne.n	8006a42 <_read_r+0x1e>
 8006a3c:	682b      	ldr	r3, [r5, #0]
 8006a3e:	b103      	cbz	r3, 8006a42 <_read_r+0x1e>
 8006a40:	6023      	str	r3, [r4, #0]
 8006a42:	bd38      	pop	{r3, r4, r5, pc}
 8006a44:	200001b8 	.word	0x200001b8

08006a48 <_init>:
 8006a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a4a:	bf00      	nop
 8006a4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a4e:	bc08      	pop	{r3}
 8006a50:	469e      	mov	lr, r3
 8006a52:	4770      	bx	lr

08006a54 <_fini>:
 8006a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a56:	bf00      	nop
 8006a58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a5a:	bc08      	pop	{r3}
 8006a5c:	469e      	mov	lr, r3
 8006a5e:	4770      	bx	lr
