
IMU_HW_579.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f24  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  080070d4  080070d4  000170d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800722c  0800722c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800722c  0800722c  0001722c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007234  08007234  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007234  08007234  00017234  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007238  08007238  00017238  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800723c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          0000017c  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001ec  200001ec  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f482  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000026a9  00000000  00000000  0002f522  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c20  00000000  00000000  00031bd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000b20  00000000  00000000  000327f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000037f2  00000000  00000000  00033310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000109a0  00000000  00000000  00036b02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d6282  00000000  00000000  000474a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0011d724  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003808  00000000  00000000  0011d774  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080070bc 	.word	0x080070bc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	080070bc 	.word	0x080070bc

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <getI2C_Address>:
HW579 hw579;
SENSOR_ENUM sensor_enum;


uint8_t* getI2C_Address(I2C_HandleTypeDef *hi2c)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b084      	sub	sp, #16
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef state;
	uint8_t slave_address;
	uint8_t numSensors = 0;
 800059c:	2300      	movs	r3, #0
 800059e:	73bb      	strb	r3, [r7, #14]
	static uint8_t sensors[3] = {0, };

	for(slave_address = 1; slave_address < 128; slave_address++)
 80005a0:	2301      	movs	r3, #1
 80005a2:	73fb      	strb	r3, [r7, #15]
 80005a4:	e024      	b.n	80005f0 <getI2C_Address+0x5c>
	{
		state = HAL_I2C_IsDeviceReady(hi2c, (uint16_t)(slave_address << 1), 3, 10);
 80005a6:	7bfb      	ldrb	r3, [r7, #15]
 80005a8:	b29b      	uxth	r3, r3
 80005aa:	005b      	lsls	r3, r3, #1
 80005ac:	b299      	uxth	r1, r3
 80005ae:	230a      	movs	r3, #10
 80005b0:	2203      	movs	r2, #3
 80005b2:	6878      	ldr	r0, [r7, #4]
 80005b4:	f001 fe76 	bl	80022a4 <HAL_I2C_IsDeviceReady>
 80005b8:	4603      	mov	r3, r0
 80005ba:	737b      	strb	r3, [r7, #13]
	    if (state == HAL_OK)
 80005bc:	7b7b      	ldrb	r3, [r7, #13]
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d10c      	bne.n	80005dc <getI2C_Address+0x48>
		{
		  sensors[numSensors] = slave_address;
 80005c2:	7bbb      	ldrb	r3, [r7, #14]
 80005c4:	4924      	ldr	r1, [pc, #144]	; (8000658 <getI2C_Address+0xc4>)
 80005c6:	7bfa      	ldrb	r2, [r7, #15]
 80005c8:	54ca      	strb	r2, [r1, r3]
		  numSensors++;
 80005ca:	7bbb      	ldrb	r3, [r7, #14]
 80005cc:	3301      	adds	r3, #1
 80005ce:	73bb      	strb	r3, [r7, #14]

#ifdef DEBUG_PRINT
		  printf("Address : 0x%X\r\n", slave_address);	// !HAL_OK = 1
 80005d0:	7bfb      	ldrb	r3, [r7, #15]
 80005d2:	4619      	mov	r1, r3
 80005d4:	4821      	ldr	r0, [pc, #132]	; (800065c <getI2C_Address+0xc8>)
 80005d6:	f005 fd6d 	bl	80060b4 <iprintf>
 80005da:	e006      	b.n	80005ea <getI2C_Address+0x56>
#endif
	    }
	    else
	    {
		  while(HAL_I2C_GetState(hi2c) != HAL_I2C_STATE_READY);
 80005dc:	bf00      	nop
 80005de:	6878      	ldr	r0, [r7, #4]
 80005e0:	f002 fa0e 	bl	8002a00 <HAL_I2C_GetState>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b20      	cmp	r3, #32
 80005e8:	d1f9      	bne.n	80005de <getI2C_Address+0x4a>
	for(slave_address = 1; slave_address < 128; slave_address++)
 80005ea:	7bfb      	ldrb	r3, [r7, #15]
 80005ec:	3301      	adds	r3, #1
 80005ee:	73fb      	strb	r3, [r7, #15]
 80005f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	dad6      	bge.n	80005a6 <getI2C_Address+0x12>
	    }
	}

	hw579.magneto_address = sensors[0] << 1;
 80005f8:	4b17      	ldr	r3, [pc, #92]	; (8000658 <getI2C_Address+0xc4>)
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	005b      	lsls	r3, r3, #1
 80005fe:	b2da      	uxtb	r2, r3
 8000600:	4b17      	ldr	r3, [pc, #92]	; (8000660 <getI2C_Address+0xcc>)
 8000602:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	hw579.accel_address   = sensors[1] << 1;
 8000606:	4b14      	ldr	r3, [pc, #80]	; (8000658 <getI2C_Address+0xc4>)
 8000608:	785b      	ldrb	r3, [r3, #1]
 800060a:	005b      	lsls	r3, r3, #1
 800060c:	b2da      	uxtb	r2, r3
 800060e:	4b14      	ldr	r3, [pc, #80]	; (8000660 <getI2C_Address+0xcc>)
 8000610:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	hw579.gyro_address    = sensors[2] << 1;
 8000614:	4b10      	ldr	r3, [pc, #64]	; (8000658 <getI2C_Address+0xc4>)
 8000616:	789b      	ldrb	r3, [r3, #2]
 8000618:	005b      	lsls	r3, r3, #1
 800061a:	b2da      	uxtb	r2, r3
 800061c:	4b10      	ldr	r3, [pc, #64]	; (8000660 <getI2C_Address+0xcc>)
 800061e:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56

#ifdef DEBUG_PRINT
	printf("MAGNETO : 0x%X\r\n", sensors[0] << 1);
 8000622:	4b0d      	ldr	r3, [pc, #52]	; (8000658 <getI2C_Address+0xc4>)
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	005b      	lsls	r3, r3, #1
 8000628:	4619      	mov	r1, r3
 800062a:	480e      	ldr	r0, [pc, #56]	; (8000664 <getI2C_Address+0xd0>)
 800062c:	f005 fd42 	bl	80060b4 <iprintf>
	printf("ACCEL   : 0x%X\r\n", sensors[1] << 1);
 8000630:	4b09      	ldr	r3, [pc, #36]	; (8000658 <getI2C_Address+0xc4>)
 8000632:	785b      	ldrb	r3, [r3, #1]
 8000634:	005b      	lsls	r3, r3, #1
 8000636:	4619      	mov	r1, r3
 8000638:	480b      	ldr	r0, [pc, #44]	; (8000668 <getI2C_Address+0xd4>)
 800063a:	f005 fd3b 	bl	80060b4 <iprintf>
	printf("GYRO    : 0x%X\r\n", sensors[2] << 1);
 800063e:	4b06      	ldr	r3, [pc, #24]	; (8000658 <getI2C_Address+0xc4>)
 8000640:	789b      	ldrb	r3, [r3, #2]
 8000642:	005b      	lsls	r3, r3, #1
 8000644:	4619      	mov	r1, r3
 8000646:	4809      	ldr	r0, [pc, #36]	; (800066c <getI2C_Address+0xd8>)
 8000648:	f005 fd34 	bl	80060b4 <iprintf>
#endif

	return sensors;
 800064c:	4b02      	ldr	r3, [pc, #8]	; (8000658 <getI2C_Address+0xc4>)
}
 800064e:	4618      	mov	r0, r3
 8000650:	3710      	adds	r7, #16
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	200000e4 	.word	0x200000e4
 800065c:	080070d4 	.word	0x080070d4
 8000660:	2000008c 	.word	0x2000008c
 8000664:	080070e8 	.word	0x080070e8
 8000668:	080070fc 	.word	0x080070fc
 800066c:	08007110 	.word	0x08007110

08000670 <I2C_Writebyte>:

void I2C_Writebyte(HW579 * I2C, uint8_t register_address, uint8_t data, uint8_t TYPE)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b086      	sub	sp, #24
 8000674:	af02      	add	r7, sp, #8
 8000676:	6078      	str	r0, [r7, #4]
 8000678:	4608      	mov	r0, r1
 800067a:	4611      	mov	r1, r2
 800067c:	461a      	mov	r2, r3
 800067e:	4603      	mov	r3, r0
 8000680:	70fb      	strb	r3, [r7, #3]
 8000682:	460b      	mov	r3, r1
 8000684:	70bb      	strb	r3, [r7, #2]
 8000686:	4613      	mov	r3, r2
 8000688:	707b      	strb	r3, [r7, #1]
	uint8_t Trans[2] = {register_address, data};
 800068a:	78fb      	ldrb	r3, [r7, #3]
 800068c:	733b      	strb	r3, [r7, #12]
 800068e:	78bb      	ldrb	r3, [r7, #2]
 8000690:	737b      	strb	r3, [r7, #13]

	switch(TYPE)
 8000692:	787b      	ldrb	r3, [r7, #1]
 8000694:	2b02      	cmp	r3, #2
 8000696:	d020      	beq.n	80006da <I2C_Writebyte+0x6a>
 8000698:	2b02      	cmp	r3, #2
 800069a:	dc2b      	bgt.n	80006f4 <I2C_Writebyte+0x84>
 800069c:	2b00      	cmp	r3, #0
 800069e:	d002      	beq.n	80006a6 <I2C_Writebyte+0x36>
 80006a0:	2b01      	cmp	r3, #1
 80006a2:	d00d      	beq.n	80006c0 <I2C_Writebyte+0x50>
 80006a4:	e026      	b.n	80006f4 <I2C_Writebyte+0x84>
	{
		case magneto:
			HAL_I2C_Master_Transmit(&(I2C->i2c), I2C->magneto_address, Trans, 2, 10);
 80006a6:	6878      	ldr	r0, [r7, #4]
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80006ae:	b299      	uxth	r1, r3
 80006b0:	f107 020c 	add.w	r2, r7, #12
 80006b4:	230a      	movs	r3, #10
 80006b6:	9300      	str	r3, [sp, #0]
 80006b8:	2302      	movs	r3, #2
 80006ba:	f001 facf 	bl	8001c5c <HAL_I2C_Master_Transmit>
			break;
 80006be:	e01d      	b.n	80006fc <I2C_Writebyte+0x8c>

		case accel:
			HAL_I2C_Master_Transmit(&(I2C->i2c), I2C->accel_address, Trans, 2, 10);
 80006c0:	6878      	ldr	r0, [r7, #4]
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80006c8:	b299      	uxth	r1, r3
 80006ca:	f107 020c 	add.w	r2, r7, #12
 80006ce:	230a      	movs	r3, #10
 80006d0:	9300      	str	r3, [sp, #0]
 80006d2:	2302      	movs	r3, #2
 80006d4:	f001 fac2 	bl	8001c5c <HAL_I2C_Master_Transmit>
			break;
 80006d8:	e010      	b.n	80006fc <I2C_Writebyte+0x8c>

		case gyro:
			HAL_I2C_Master_Transmit(&(I2C->i2c), I2C->gyro_address, Trans, 2, 10);
 80006da:	6878      	ldr	r0, [r7, #4]
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80006e2:	b299      	uxth	r1, r3
 80006e4:	f107 020c 	add.w	r2, r7, #12
 80006e8:	230a      	movs	r3, #10
 80006ea:	9300      	str	r3, [sp, #0]
 80006ec:	2302      	movs	r3, #2
 80006ee:	f001 fab5 	bl	8001c5c <HAL_I2C_Master_Transmit>
			break;
 80006f2:	e003      	b.n	80006fc <I2C_Writebyte+0x8c>

		default:
			printf("Wrong TYPE");
 80006f4:	4803      	ldr	r0, [pc, #12]	; (8000704 <I2C_Writebyte+0x94>)
 80006f6:	f005 fcdd 	bl	80060b4 <iprintf>
			break;
 80006fa:	bf00      	nop
	}


}
 80006fc:	bf00      	nop
 80006fe:	3710      	adds	r7, #16
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	08007124 	.word	0x08007124

08000708 <HW579_init>:




void HW579_init(HW579 *I2C)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
	Gyro_init(I2C);
 8000710:	6878      	ldr	r0, [r7, #4]
 8000712:	f000 f80f 	bl	8000734 <Gyro_init>
}
 8000716:	bf00      	nop
 8000718:	3708      	adds	r7, #8
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
	...

08000720 <HW579_Read>:

void HW579_Read(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
	Gyro_Read(&hw579);
 8000724:	4802      	ldr	r0, [pc, #8]	; (8000730 <HW579_Read+0x10>)
 8000726:	f000 f83d 	bl	80007a4 <Gyro_Read>
}
 800072a:	bf00      	nop
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	2000008c 	.word	0x2000008c

08000734 <Gyro_init>:
	return Receive[0];
}


void Gyro_init(HW579 *I2C)	// struct -> i2c
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
//	Gyro_Writebyte(I2C, DLPF_FS, RANGE2000);
//	Gyro_Writebyte(I2C, DLPF_FS, BW256_SR8);
//	Gyro_Writebyte(I2C, INT_CFG, INTCFG_ITG_RDY_EN);
//	Gyro_Writebyte(I2C, INT_CFG, INTCFG_RAW_RDY_EN);

	I2C_Writebyte(I2C, PWR_MGM, 0x00, magneto);
 800073c:	2300      	movs	r3, #0
 800073e:	2200      	movs	r2, #0
 8000740:	213e      	movs	r1, #62	; 0x3e
 8000742:	6878      	ldr	r0, [r7, #4]
 8000744:	f7ff ff94 	bl	8000670 <I2C_Writebyte>
	HAL_Delay(100);
 8000748:	2064      	movs	r0, #100	; 0x64
 800074a:	f000 fda7 	bl	800129c <HAL_Delay>
	I2C_Writebyte(I2C, PWR_MGM, PLL_XGYRO_REF, magneto);
 800074e:	2300      	movs	r3, #0
 8000750:	2201      	movs	r2, #1
 8000752:	213e      	movs	r1, #62	; 0x3e
 8000754:	6878      	ldr	r0, [r7, #4]
 8000756:	f7ff ff8b 	bl	8000670 <I2C_Writebyte>
	I2C_Writebyte(I2C, SMPLRT_DIV, NOSRDIVIDER, magneto);
 800075a:	2300      	movs	r3, #0
 800075c:	2200      	movs	r2, #0
 800075e:	2115      	movs	r1, #21
 8000760:	6878      	ldr	r0, [r7, #4]
 8000762:	f7ff ff85 	bl	8000670 <I2C_Writebyte>
	I2C_Writebyte(I2C, DLPF_FS, RANGE2000, magneto);
 8000766:	2300      	movs	r3, #0
 8000768:	2203      	movs	r2, #3
 800076a:	2116      	movs	r1, #22
 800076c:	6878      	ldr	r0, [r7, #4]
 800076e:	f7ff ff7f 	bl	8000670 <I2C_Writebyte>
	I2C_Writebyte(I2C, DLPF_FS, BW256_SR8, magneto);
 8000772:	2300      	movs	r3, #0
 8000774:	2200      	movs	r2, #0
 8000776:	2116      	movs	r1, #22
 8000778:	6878      	ldr	r0, [r7, #4]
 800077a:	f7ff ff79 	bl	8000670 <I2C_Writebyte>
	I2C_Writebyte(I2C, INT_CFG, INTCFG_ITG_RDY_EN, magneto);
 800077e:	2300      	movs	r3, #0
 8000780:	2204      	movs	r2, #4
 8000782:	2117      	movs	r1, #23
 8000784:	6878      	ldr	r0, [r7, #4]
 8000786:	f7ff ff73 	bl	8000670 <I2C_Writebyte>
	I2C_Writebyte(I2C, INT_CFG, INTCFG_RAW_RDY_EN, magneto);
 800078a:	2300      	movs	r3, #0
 800078c:	2201      	movs	r2, #1
 800078e:	2117      	movs	r1, #23
 8000790:	6878      	ldr	r0, [r7, #4]
 8000792:	f7ff ff6d 	bl	8000670 <I2C_Writebyte>

	HAL_Delay(GYROSTART_UP_DELAY);
 8000796:	2046      	movs	r0, #70	; 0x46
 8000798:	f000 fd80 	bl	800129c <HAL_Delay>
}
 800079c:	bf00      	nop
 800079e:	3708      	adds	r7, #8
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}

080007a4 <Gyro_Read>:

void Gyro_Read(HW579 *hw579)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b08c      	sub	sp, #48	; 0x30
 80007a8:	af04      	add	r7, sp, #16
 80007aa:	6078      	str	r0, [r7, #4]
	uint8_t databuf[8];
	int16_t tempature, raw_x, raw_y, raw_z;
	HAL_I2C_Mem_Read(&(hw579->i2c), hw579->gyro_address , TEMP_OUT, I2C_MEMADD_SIZE_8BIT, databuf, sizeof(databuf), 10);
 80007ac:	6878      	ldr	r0, [r7, #4]
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80007b4:	b299      	uxth	r1, r3
 80007b6:	230a      	movs	r3, #10
 80007b8:	9302      	str	r3, [sp, #8]
 80007ba:	2308      	movs	r3, #8
 80007bc:	9301      	str	r3, [sp, #4]
 80007be:	f107 030c 	add.w	r3, r7, #12
 80007c2:	9300      	str	r3, [sp, #0]
 80007c4:	2301      	movs	r3, #1
 80007c6:	221b      	movs	r2, #27
 80007c8:	f001 fb46 	bl	8001e58 <HAL_I2C_Mem_Read>
	tempature = (databuf[0] << 8) | databuf[1];
 80007cc:	7b3b      	ldrb	r3, [r7, #12]
 80007ce:	021b      	lsls	r3, r3, #8
 80007d0:	b21a      	sxth	r2, r3
 80007d2:	7b7b      	ldrb	r3, [r7, #13]
 80007d4:	b21b      	sxth	r3, r3
 80007d6:	4313      	orrs	r3, r2
 80007d8:	837b      	strh	r3, [r7, #26]
	raw_x = (databuf[2] << 8) | databuf[3];
 80007da:	7bbb      	ldrb	r3, [r7, #14]
 80007dc:	021b      	lsls	r3, r3, #8
 80007de:	b21a      	sxth	r2, r3
 80007e0:	7bfb      	ldrb	r3, [r7, #15]
 80007e2:	b21b      	sxth	r3, r3
 80007e4:	4313      	orrs	r3, r2
 80007e6:	833b      	strh	r3, [r7, #24]
	raw_y = (databuf[4] << 8) | databuf[5];
 80007e8:	7c3b      	ldrb	r3, [r7, #16]
 80007ea:	021b      	lsls	r3, r3, #8
 80007ec:	b21a      	sxth	r2, r3
 80007ee:	7c7b      	ldrb	r3, [r7, #17]
 80007f0:	b21b      	sxth	r3, r3
 80007f2:	4313      	orrs	r3, r2
 80007f4:	82fb      	strh	r3, [r7, #22]
	raw_z = (databuf[6] << 8) | databuf[7];
 80007f6:	7cbb      	ldrb	r3, [r7, #18]
 80007f8:	021b      	lsls	r3, r3, #8
 80007fa:	b21a      	sxth	r2, r3
 80007fc:	7cfb      	ldrb	r3, [r7, #19]
 80007fe:	b21b      	sxth	r3, r3
 8000800:	4313      	orrs	r3, r2
 8000802:	82bb      	strh	r3, [r7, #20]

	for(int i=0; i < 6; i++)
 8000804:	2300      	movs	r3, #0
 8000806:	61fb      	str	r3, [r7, #28]
 8000808:	e00b      	b.n	8000822 <Gyro_Read+0x7e>
	{
		printf("%u\r\n", databuf[i]);
 800080a:	f107 020c 	add.w	r2, r7, #12
 800080e:	69fb      	ldr	r3, [r7, #28]
 8000810:	4413      	add	r3, r2
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	4619      	mov	r1, r3
 8000816:	480d      	ldr	r0, [pc, #52]	; (800084c <Gyro_Read+0xa8>)
 8000818:	f005 fc4c 	bl	80060b4 <iprintf>
	for(int i=0; i < 6; i++)
 800081c:	69fb      	ldr	r3, [r7, #28]
 800081e:	3301      	adds	r3, #1
 8000820:	61fb      	str	r3, [r7, #28]
 8000822:	69fb      	ldr	r3, [r7, #28]
 8000824:	2b05      	cmp	r3, #5
 8000826:	ddf0      	ble.n	800080a <Gyro_Read+0x66>
	}

	printf("%d %u %u %u\r\n", tempature, raw_x, raw_y, raw_z);
 8000828:	f9b7 101a 	ldrsh.w	r1, [r7, #26]
 800082c:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8000830:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 8000834:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000838:	9300      	str	r3, [sp, #0]
 800083a:	4603      	mov	r3, r0
 800083c:	4804      	ldr	r0, [pc, #16]	; (8000850 <Gyro_Read+0xac>)
 800083e:	f005 fc39 	bl	80060b4 <iprintf>
}
 8000842:	bf00      	nop
 8000844:	3720      	adds	r7, #32
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	08007130 	.word	0x08007130
 8000850:	08007138 	.word	0x08007138

08000854 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b08c      	sub	sp, #48	; 0x30
 8000858:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800085a:	f107 031c 	add.w	r3, r7, #28
 800085e:	2200      	movs	r2, #0
 8000860:	601a      	str	r2, [r3, #0]
 8000862:	605a      	str	r2, [r3, #4]
 8000864:	609a      	str	r2, [r3, #8]
 8000866:	60da      	str	r2, [r3, #12]
 8000868:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	61bb      	str	r3, [r7, #24]
 800086e:	4b7c      	ldr	r3, [pc, #496]	; (8000a60 <MX_GPIO_Init+0x20c>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	4a7b      	ldr	r2, [pc, #492]	; (8000a60 <MX_GPIO_Init+0x20c>)
 8000874:	f043 0304 	orr.w	r3, r3, #4
 8000878:	6313      	str	r3, [r2, #48]	; 0x30
 800087a:	4b79      	ldr	r3, [pc, #484]	; (8000a60 <MX_GPIO_Init+0x20c>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	f003 0304 	and.w	r3, r3, #4
 8000882:	61bb      	str	r3, [r7, #24]
 8000884:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	617b      	str	r3, [r7, #20]
 800088a:	4b75      	ldr	r3, [pc, #468]	; (8000a60 <MX_GPIO_Init+0x20c>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	4a74      	ldr	r2, [pc, #464]	; (8000a60 <MX_GPIO_Init+0x20c>)
 8000890:	f043 0320 	orr.w	r3, r3, #32
 8000894:	6313      	str	r3, [r2, #48]	; 0x30
 8000896:	4b72      	ldr	r3, [pc, #456]	; (8000a60 <MX_GPIO_Init+0x20c>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	f003 0320 	and.w	r3, r3, #32
 800089e:	617b      	str	r3, [r7, #20]
 80008a0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008a2:	2300      	movs	r3, #0
 80008a4:	613b      	str	r3, [r7, #16]
 80008a6:	4b6e      	ldr	r3, [pc, #440]	; (8000a60 <MX_GPIO_Init+0x20c>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	4a6d      	ldr	r2, [pc, #436]	; (8000a60 <MX_GPIO_Init+0x20c>)
 80008ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008b0:	6313      	str	r3, [r2, #48]	; 0x30
 80008b2:	4b6b      	ldr	r3, [pc, #428]	; (8000a60 <MX_GPIO_Init+0x20c>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008ba:	613b      	str	r3, [r7, #16]
 80008bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008be:	2300      	movs	r3, #0
 80008c0:	60fb      	str	r3, [r7, #12]
 80008c2:	4b67      	ldr	r3, [pc, #412]	; (8000a60 <MX_GPIO_Init+0x20c>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	4a66      	ldr	r2, [pc, #408]	; (8000a60 <MX_GPIO_Init+0x20c>)
 80008c8:	f043 0301 	orr.w	r3, r3, #1
 80008cc:	6313      	str	r3, [r2, #48]	; 0x30
 80008ce:	4b64      	ldr	r3, [pc, #400]	; (8000a60 <MX_GPIO_Init+0x20c>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	f003 0301 	and.w	r3, r3, #1
 80008d6:	60fb      	str	r3, [r7, #12]
 80008d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	60bb      	str	r3, [r7, #8]
 80008de:	4b60      	ldr	r3, [pc, #384]	; (8000a60 <MX_GPIO_Init+0x20c>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	4a5f      	ldr	r2, [pc, #380]	; (8000a60 <MX_GPIO_Init+0x20c>)
 80008e4:	f043 0302 	orr.w	r3, r3, #2
 80008e8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ea:	4b5d      	ldr	r3, [pc, #372]	; (8000a60 <MX_GPIO_Init+0x20c>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	f003 0302 	and.w	r3, r3, #2
 80008f2:	60bb      	str	r3, [r7, #8]
 80008f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008f6:	2300      	movs	r3, #0
 80008f8:	607b      	str	r3, [r7, #4]
 80008fa:	4b59      	ldr	r3, [pc, #356]	; (8000a60 <MX_GPIO_Init+0x20c>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	4a58      	ldr	r2, [pc, #352]	; (8000a60 <MX_GPIO_Init+0x20c>)
 8000900:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000904:	6313      	str	r3, [r2, #48]	; 0x30
 8000906:	4b56      	ldr	r3, [pc, #344]	; (8000a60 <MX_GPIO_Init+0x20c>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800090e:	607b      	str	r3, [r7, #4]
 8000910:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000912:	2200      	movs	r2, #0
 8000914:	f244 0181 	movw	r1, #16513	; 0x4081
 8000918:	4852      	ldr	r0, [pc, #328]	; (8000a64 <MX_GPIO_Init+0x210>)
 800091a:	f001 f841 	bl	80019a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800091e:	2200      	movs	r2, #0
 8000920:	2140      	movs	r1, #64	; 0x40
 8000922:	4851      	ldr	r0, [pc, #324]	; (8000a68 <MX_GPIO_Init+0x214>)
 8000924:	f001 f83c 	bl	80019a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000928:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800092c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800092e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000932:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000934:	2300      	movs	r3, #0
 8000936:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000938:	f107 031c 	add.w	r3, r7, #28
 800093c:	4619      	mov	r1, r3
 800093e:	484b      	ldr	r0, [pc, #300]	; (8000a6c <MX_GPIO_Init+0x218>)
 8000940:	f000 fe82 	bl	8001648 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000944:	2332      	movs	r3, #50	; 0x32
 8000946:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000948:	2302      	movs	r3, #2
 800094a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094c:	2300      	movs	r3, #0
 800094e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000950:	2303      	movs	r3, #3
 8000952:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000954:	230b      	movs	r3, #11
 8000956:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000958:	f107 031c 	add.w	r3, r7, #28
 800095c:	4619      	mov	r1, r3
 800095e:	4843      	ldr	r0, [pc, #268]	; (8000a6c <MX_GPIO_Init+0x218>)
 8000960:	f000 fe72 	bl	8001648 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000964:	2386      	movs	r3, #134	; 0x86
 8000966:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000968:	2302      	movs	r3, #2
 800096a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096c:	2300      	movs	r3, #0
 800096e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000970:	2303      	movs	r3, #3
 8000972:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000974:	230b      	movs	r3, #11
 8000976:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000978:	f107 031c 	add.w	r3, r7, #28
 800097c:	4619      	mov	r1, r3
 800097e:	483c      	ldr	r0, [pc, #240]	; (8000a70 <MX_GPIO_Init+0x21c>)
 8000980:	f000 fe62 	bl	8001648 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000984:	f244 0381 	movw	r3, #16513	; 0x4081
 8000988:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800098a:	2301      	movs	r3, #1
 800098c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	2300      	movs	r3, #0
 8000990:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000992:	2300      	movs	r3, #0
 8000994:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000996:	f107 031c 	add.w	r3, r7, #28
 800099a:	4619      	mov	r1, r3
 800099c:	4831      	ldr	r0, [pc, #196]	; (8000a64 <MX_GPIO_Init+0x210>)
 800099e:	f000 fe53 	bl	8001648 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80009a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a8:	2302      	movs	r3, #2
 80009aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ac:	2300      	movs	r3, #0
 80009ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009b0:	2303      	movs	r3, #3
 80009b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009b4:	230b      	movs	r3, #11
 80009b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80009b8:	f107 031c 	add.w	r3, r7, #28
 80009bc:	4619      	mov	r1, r3
 80009be:	4829      	ldr	r0, [pc, #164]	; (8000a64 <MX_GPIO_Init+0x210>)
 80009c0:	f000 fe42 	bl	8001648 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80009c4:	2340      	movs	r3, #64	; 0x40
 80009c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c8:	2301      	movs	r3, #1
 80009ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009cc:	2300      	movs	r3, #0
 80009ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d0:	2300      	movs	r3, #0
 80009d2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009d4:	f107 031c 	add.w	r3, r7, #28
 80009d8:	4619      	mov	r1, r3
 80009da:	4823      	ldr	r0, [pc, #140]	; (8000a68 <MX_GPIO_Init+0x214>)
 80009dc:	f000 fe34 	bl	8001648 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80009e0:	2380      	movs	r3, #128	; 0x80
 80009e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009e4:	2300      	movs	r3, #0
 80009e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e8:	2300      	movs	r3, #0
 80009ea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009ec:	f107 031c 	add.w	r3, r7, #28
 80009f0:	4619      	mov	r1, r3
 80009f2:	481d      	ldr	r0, [pc, #116]	; (8000a68 <MX_GPIO_Init+0x214>)
 80009f4:	f000 fe28 	bl	8001648 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80009f8:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80009fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fe:	2302      	movs	r3, #2
 8000a00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a02:	2300      	movs	r3, #0
 8000a04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a06:	2303      	movs	r3, #3
 8000a08:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a0a:	230a      	movs	r3, #10
 8000a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0e:	f107 031c 	add.w	r3, r7, #28
 8000a12:	4619      	mov	r1, r3
 8000a14:	4816      	ldr	r0, [pc, #88]	; (8000a70 <MX_GPIO_Init+0x21c>)
 8000a16:	f000 fe17 	bl	8001648 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000a1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a20:	2300      	movs	r3, #0
 8000a22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a24:	2300      	movs	r3, #0
 8000a26:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000a28:	f107 031c 	add.w	r3, r7, #28
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	4810      	ldr	r0, [pc, #64]	; (8000a70 <MX_GPIO_Init+0x21c>)
 8000a30:	f000 fe0a 	bl	8001648 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000a34:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000a38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3a:	2302      	movs	r3, #2
 8000a3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a42:	2303      	movs	r3, #3
 8000a44:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a46:	230b      	movs	r3, #11
 8000a48:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a4a:	f107 031c 	add.w	r3, r7, #28
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4805      	ldr	r0, [pc, #20]	; (8000a68 <MX_GPIO_Init+0x214>)
 8000a52:	f000 fdf9 	bl	8001648 <HAL_GPIO_Init>

}
 8000a56:	bf00      	nop
 8000a58:	3730      	adds	r7, #48	; 0x30
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	40023800 	.word	0x40023800
 8000a64:	40020400 	.word	0x40020400
 8000a68:	40021800 	.word	0x40021800
 8000a6c:	40020800 	.word	0x40020800
 8000a70:	40020000 	.word	0x40020000

08000a74 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a78:	4b1b      	ldr	r3, [pc, #108]	; (8000ae8 <MX_I2C1_Init+0x74>)
 8000a7a:	4a1c      	ldr	r2, [pc, #112]	; (8000aec <MX_I2C1_Init+0x78>)
 8000a7c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000a7e:	4b1a      	ldr	r3, [pc, #104]	; (8000ae8 <MX_I2C1_Init+0x74>)
 8000a80:	4a1b      	ldr	r2, [pc, #108]	; (8000af0 <MX_I2C1_Init+0x7c>)
 8000a82:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a84:	4b18      	ldr	r3, [pc, #96]	; (8000ae8 <MX_I2C1_Init+0x74>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a8a:	4b17      	ldr	r3, [pc, #92]	; (8000ae8 <MX_I2C1_Init+0x74>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a90:	4b15      	ldr	r3, [pc, #84]	; (8000ae8 <MX_I2C1_Init+0x74>)
 8000a92:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a96:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a98:	4b13      	ldr	r3, [pc, #76]	; (8000ae8 <MX_I2C1_Init+0x74>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a9e:	4b12      	ldr	r3, [pc, #72]	; (8000ae8 <MX_I2C1_Init+0x74>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000aa4:	4b10      	ldr	r3, [pc, #64]	; (8000ae8 <MX_I2C1_Init+0x74>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000aaa:	4b0f      	ldr	r3, [pc, #60]	; (8000ae8 <MX_I2C1_Init+0x74>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ab0:	480d      	ldr	r0, [pc, #52]	; (8000ae8 <MX_I2C1_Init+0x74>)
 8000ab2:	f000 ff8f 	bl	80019d4 <HAL_I2C_Init>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000abc:	f000 f9b4 	bl	8000e28 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	4809      	ldr	r0, [pc, #36]	; (8000ae8 <MX_I2C1_Init+0x74>)
 8000ac4:	f003 fd4c 	bl	8004560 <HAL_I2CEx_ConfigAnalogFilter>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000ace:	f000 f9ab 	bl	8000e28 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	4804      	ldr	r0, [pc, #16]	; (8000ae8 <MX_I2C1_Init+0x74>)
 8000ad6:	f003 fd7f 	bl	80045d8 <HAL_I2CEx_ConfigDigitalFilter>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000ae0:	f000 f9a2 	bl	8000e28 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ae4:	bf00      	nop
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	200000e8 	.word	0x200000e8
 8000aec:	40005400 	.word	0x40005400
 8000af0:	000186a0 	.word	0x000186a0

08000af4 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000af8:	4b1b      	ldr	r3, [pc, #108]	; (8000b68 <MX_I2C2_Init+0x74>)
 8000afa:	4a1c      	ldr	r2, [pc, #112]	; (8000b6c <MX_I2C2_Init+0x78>)
 8000afc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000afe:	4b1a      	ldr	r3, [pc, #104]	; (8000b68 <MX_I2C2_Init+0x74>)
 8000b00:	4a1b      	ldr	r2, [pc, #108]	; (8000b70 <MX_I2C2_Init+0x7c>)
 8000b02:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b04:	4b18      	ldr	r3, [pc, #96]	; (8000b68 <MX_I2C2_Init+0x74>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000b0a:	4b17      	ldr	r3, [pc, #92]	; (8000b68 <MX_I2C2_Init+0x74>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b10:	4b15      	ldr	r3, [pc, #84]	; (8000b68 <MX_I2C2_Init+0x74>)
 8000b12:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b16:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b18:	4b13      	ldr	r3, [pc, #76]	; (8000b68 <MX_I2C2_Init+0x74>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000b1e:	4b12      	ldr	r3, [pc, #72]	; (8000b68 <MX_I2C2_Init+0x74>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b24:	4b10      	ldr	r3, [pc, #64]	; (8000b68 <MX_I2C2_Init+0x74>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b2a:	4b0f      	ldr	r3, [pc, #60]	; (8000b68 <MX_I2C2_Init+0x74>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000b30:	480d      	ldr	r0, [pc, #52]	; (8000b68 <MX_I2C2_Init+0x74>)
 8000b32:	f000 ff4f 	bl	80019d4 <HAL_I2C_Init>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000b3c:	f000 f974 	bl	8000e28 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b40:	2100      	movs	r1, #0
 8000b42:	4809      	ldr	r0, [pc, #36]	; (8000b68 <MX_I2C2_Init+0x74>)
 8000b44:	f003 fd0c 	bl	8004560 <HAL_I2CEx_ConfigAnalogFilter>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8000b4e:	f000 f96b 	bl	8000e28 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000b52:	2100      	movs	r1, #0
 8000b54:	4804      	ldr	r0, [pc, #16]	; (8000b68 <MX_I2C2_Init+0x74>)
 8000b56:	f003 fd3f 	bl	80045d8 <HAL_I2CEx_ConfigDigitalFilter>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000b60:	f000 f962 	bl	8000e28 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000b64:	bf00      	nop
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	2000013c 	.word	0x2000013c
 8000b6c:	40005800 	.word	0x40005800
 8000b70:	000186a0 	.word	0x000186a0

08000b74 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b08c      	sub	sp, #48	; 0x30
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b7c:	f107 031c 	add.w	r3, r7, #28
 8000b80:	2200      	movs	r2, #0
 8000b82:	601a      	str	r2, [r3, #0]
 8000b84:	605a      	str	r2, [r3, #4]
 8000b86:	609a      	str	r2, [r3, #8]
 8000b88:	60da      	str	r2, [r3, #12]
 8000b8a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a42      	ldr	r2, [pc, #264]	; (8000c9c <HAL_I2C_MspInit+0x128>)
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d13d      	bne.n	8000c12 <HAL_I2C_MspInit+0x9e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b96:	2300      	movs	r3, #0
 8000b98:	61bb      	str	r3, [r7, #24]
 8000b9a:	4b41      	ldr	r3, [pc, #260]	; (8000ca0 <HAL_I2C_MspInit+0x12c>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	4a40      	ldr	r2, [pc, #256]	; (8000ca0 <HAL_I2C_MspInit+0x12c>)
 8000ba0:	f043 0302 	orr.w	r3, r3, #2
 8000ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba6:	4b3e      	ldr	r3, [pc, #248]	; (8000ca0 <HAL_I2C_MspInit+0x12c>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000baa:	f003 0302 	and.w	r3, r3, #2
 8000bae:	61bb      	str	r3, [r7, #24]
 8000bb0:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000bb2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000bb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bb8:	2312      	movs	r3, #18
 8000bba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bc0:	2303      	movs	r3, #3
 8000bc2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000bc4:	2304      	movs	r3, #4
 8000bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bc8:	f107 031c 	add.w	r3, r7, #28
 8000bcc:	4619      	mov	r1, r3
 8000bce:	4835      	ldr	r0, [pc, #212]	; (8000ca4 <HAL_I2C_MspInit+0x130>)
 8000bd0:	f000 fd3a 	bl	8001648 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	617b      	str	r3, [r7, #20]
 8000bd8:	4b31      	ldr	r3, [pc, #196]	; (8000ca0 <HAL_I2C_MspInit+0x12c>)
 8000bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bdc:	4a30      	ldr	r2, [pc, #192]	; (8000ca0 <HAL_I2C_MspInit+0x12c>)
 8000bde:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000be2:	6413      	str	r3, [r2, #64]	; 0x40
 8000be4:	4b2e      	ldr	r3, [pc, #184]	; (8000ca0 <HAL_I2C_MspInit+0x12c>)
 8000be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bec:	617b      	str	r3, [r7, #20]
 8000bee:	697b      	ldr	r3, [r7, #20]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	201f      	movs	r0, #31
 8000bf6:	f000 fc50 	bl	800149a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000bfa:	201f      	movs	r0, #31
 8000bfc:	f000 fc69 	bl	80014d2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000c00:	2200      	movs	r2, #0
 8000c02:	2100      	movs	r1, #0
 8000c04:	2020      	movs	r0, #32
 8000c06:	f000 fc48 	bl	800149a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000c0a:	2020      	movs	r0, #32
 8000c0c:	f000 fc61 	bl	80014d2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000c10:	e040      	b.n	8000c94 <HAL_I2C_MspInit+0x120>
  else if(i2cHandle->Instance==I2C2)
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	4a24      	ldr	r2, [pc, #144]	; (8000ca8 <HAL_I2C_MspInit+0x134>)
 8000c18:	4293      	cmp	r3, r2
 8000c1a:	d13b      	bne.n	8000c94 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	613b      	str	r3, [r7, #16]
 8000c20:	4b1f      	ldr	r3, [pc, #124]	; (8000ca0 <HAL_I2C_MspInit+0x12c>)
 8000c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c24:	4a1e      	ldr	r2, [pc, #120]	; (8000ca0 <HAL_I2C_MspInit+0x12c>)
 8000c26:	f043 0320 	orr.w	r3, r3, #32
 8000c2a:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2c:	4b1c      	ldr	r3, [pc, #112]	; (8000ca0 <HAL_I2C_MspInit+0x12c>)
 8000c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c30:	f003 0320 	and.w	r3, r3, #32
 8000c34:	613b      	str	r3, [r7, #16]
 8000c36:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000c38:	2303      	movs	r3, #3
 8000c3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c3c:	2312      	movs	r3, #18
 8000c3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c40:	2300      	movs	r3, #0
 8000c42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c44:	2303      	movs	r3, #3
 8000c46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000c48:	2304      	movs	r3, #4
 8000c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000c4c:	f107 031c 	add.w	r3, r7, #28
 8000c50:	4619      	mov	r1, r3
 8000c52:	4816      	ldr	r0, [pc, #88]	; (8000cac <HAL_I2C_MspInit+0x138>)
 8000c54:	f000 fcf8 	bl	8001648 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000c58:	2300      	movs	r3, #0
 8000c5a:	60fb      	str	r3, [r7, #12]
 8000c5c:	4b10      	ldr	r3, [pc, #64]	; (8000ca0 <HAL_I2C_MspInit+0x12c>)
 8000c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c60:	4a0f      	ldr	r2, [pc, #60]	; (8000ca0 <HAL_I2C_MspInit+0x12c>)
 8000c62:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c66:	6413      	str	r3, [r2, #64]	; 0x40
 8000c68:	4b0d      	ldr	r3, [pc, #52]	; (8000ca0 <HAL_I2C_MspInit+0x12c>)
 8000c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c6c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c70:	60fb      	str	r3, [r7, #12]
 8000c72:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8000c74:	2200      	movs	r2, #0
 8000c76:	2100      	movs	r1, #0
 8000c78:	2021      	movs	r0, #33	; 0x21
 8000c7a:	f000 fc0e 	bl	800149a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8000c7e:	2021      	movs	r0, #33	; 0x21
 8000c80:	f000 fc27 	bl	80014d2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8000c84:	2200      	movs	r2, #0
 8000c86:	2100      	movs	r1, #0
 8000c88:	2022      	movs	r0, #34	; 0x22
 8000c8a:	f000 fc06 	bl	800149a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8000c8e:	2022      	movs	r0, #34	; 0x22
 8000c90:	f000 fc1f 	bl	80014d2 <HAL_NVIC_EnableIRQ>
}
 8000c94:	bf00      	nop
 8000c96:	3730      	adds	r7, #48	; 0x30
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	40005400 	.word	0x40005400
 8000ca0:	40023800 	.word	0x40023800
 8000ca4:	40020400 	.word	0x40020400
 8000ca8:	40005800 	.word	0x40005800
 8000cac:	40021400 	.word	0x40021400

08000cb0 <_write>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
int _write(int file, char *p, int len)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b084      	sub	sp, #16
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	60f8      	str	r0, [r7, #12]
 8000cb8:	60b9      	str	r1, [r7, #8]
 8000cba:	607a      	str	r2, [r7, #4]
	if(HAL_UART_Transmit(&huart3, (uint8_t *)p, len, 10) == HAL_OK) return len;
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	b29a      	uxth	r2, r3
 8000cc0:	230a      	movs	r3, #10
 8000cc2:	68b9      	ldr	r1, [r7, #8]
 8000cc4:	4806      	ldr	r0, [pc, #24]	; (8000ce0 <_write+0x30>)
 8000cc6:	f004 f9fc 	bl	80050c2 <HAL_UART_Transmit>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d101      	bne.n	8000cd4 <_write+0x24>
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	e000      	b.n	8000cd6 <_write+0x26>
	else return 0;
 8000cd4:	2300      	movs	r3, #0
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	3710      	adds	r7, #16
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	20000194 	.word	0x20000194

08000ce4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ce8:	f000 fa66 	bl	80011b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cec:	f000 f82c 	bl	8000d48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cf0:	f7ff fdb0 	bl	8000854 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000cf4:	f7ff febe 	bl	8000a74 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8000cf8:	f000 f9ba 	bl	8001070 <MX_USART3_UART_Init>
  MX_I2C2_Init();
 8000cfc:	f7ff fefa 	bl	8000af4 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  HW579_init(&hi2c1);
 8000d00:	480d      	ldr	r0, [pc, #52]	; (8000d38 <main+0x54>)
 8000d02:	f7ff fd01 	bl	8000708 <HW579_init>

//  uint8_t state_buffer[128] = {0, };

//  uint8_t nDevices;

  HAL_Delay(1000);
 8000d06:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d0a:	f000 fac7 	bl	800129c <HAL_Delay>
  printf("I2C Scan Start\r\n");
 8000d0e:	480b      	ldr	r0, [pc, #44]	; (8000d3c <main+0x58>)
 8000d10:	f005 fa56 	bl	80061c0 <puts>
  printf("==================\r\n");
 8000d14:	480a      	ldr	r0, [pc, #40]	; (8000d40 <main+0x5c>)
 8000d16:	f005 fa53 	bl	80061c0 <puts>

  getI2C_Address(&hi2c1);
 8000d1a:	4807      	ldr	r0, [pc, #28]	; (8000d38 <main+0x54>)
 8000d1c:	f7ff fc3a 	bl	8000594 <getI2C_Address>

  printf("==================\r\n");
 8000d20:	4807      	ldr	r0, [pc, #28]	; (8000d40 <main+0x5c>)
 8000d22:	f005 fa4d 	bl	80061c0 <puts>
  printf("End Scanning\r\n");
 8000d26:	4807      	ldr	r0, [pc, #28]	; (8000d44 <main+0x60>)
 8000d28:	f005 fa4a 	bl	80061c0 <puts>
//  for(int i = 0; i < numSensors; i++)
//  {
//	  printf("result : [0x%X]\r\n", sensors[i]);
//  }

  HW579_Read();
 8000d2c:	f7ff fcf8 	bl	8000720 <HW579_Read>





	  HAL_Delay(100);
 8000d30:	2064      	movs	r0, #100	; 0x64
 8000d32:	f000 fab3 	bl	800129c <HAL_Delay>
 8000d36:	e7fb      	b.n	8000d30 <main+0x4c>
 8000d38:	200000e8 	.word	0x200000e8
 8000d3c:	08007148 	.word	0x08007148
 8000d40:	08007158 	.word	0x08007158
 8000d44:	0800716c 	.word	0x0800716c

08000d48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b094      	sub	sp, #80	; 0x50
 8000d4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d4e:	f107 0320 	add.w	r3, r7, #32
 8000d52:	2230      	movs	r2, #48	; 0x30
 8000d54:	2100      	movs	r1, #0
 8000d56:	4618      	mov	r0, r3
 8000d58:	f005 f9a4 	bl	80060a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d5c:	f107 030c 	add.w	r3, r7, #12
 8000d60:	2200      	movs	r2, #0
 8000d62:	601a      	str	r2, [r3, #0]
 8000d64:	605a      	str	r2, [r3, #4]
 8000d66:	609a      	str	r2, [r3, #8]
 8000d68:	60da      	str	r2, [r3, #12]
 8000d6a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	60bb      	str	r3, [r7, #8]
 8000d70:	4b2b      	ldr	r3, [pc, #172]	; (8000e20 <SystemClock_Config+0xd8>)
 8000d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d74:	4a2a      	ldr	r2, [pc, #168]	; (8000e20 <SystemClock_Config+0xd8>)
 8000d76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d7a:	6413      	str	r3, [r2, #64]	; 0x40
 8000d7c:	4b28      	ldr	r3, [pc, #160]	; (8000e20 <SystemClock_Config+0xd8>)
 8000d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d84:	60bb      	str	r3, [r7, #8]
 8000d86:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d88:	2300      	movs	r3, #0
 8000d8a:	607b      	str	r3, [r7, #4]
 8000d8c:	4b25      	ldr	r3, [pc, #148]	; (8000e24 <SystemClock_Config+0xdc>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a24      	ldr	r2, [pc, #144]	; (8000e24 <SystemClock_Config+0xdc>)
 8000d92:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d96:	6013      	str	r3, [r2, #0]
 8000d98:	4b22      	ldr	r3, [pc, #136]	; (8000e24 <SystemClock_Config+0xdc>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000da0:	607b      	str	r3, [r7, #4]
 8000da2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000da4:	2301      	movs	r3, #1
 8000da6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000da8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000dac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dae:	2302      	movs	r3, #2
 8000db0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000db2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000db6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000db8:	2304      	movs	r3, #4
 8000dba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000dbc:	23b4      	movs	r3, #180	; 0xb4
 8000dbe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000dc0:	2302      	movs	r3, #2
 8000dc2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000dc4:	2304      	movs	r3, #4
 8000dc6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dc8:	f107 0320 	add.w	r3, r7, #32
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f003 fc93 	bl	80046f8 <HAL_RCC_OscConfig>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000dd8:	f000 f826 	bl	8000e28 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000ddc:	f003 fc3c 	bl	8004658 <HAL_PWREx_EnableOverDrive>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000de6:	f000 f81f 	bl	8000e28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dea:	230f      	movs	r3, #15
 8000dec:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dee:	2302      	movs	r3, #2
 8000df0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000df2:	2300      	movs	r3, #0
 8000df4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000df6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000dfa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000dfc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e00:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000e02:	f107 030c 	add.w	r3, r7, #12
 8000e06:	2105      	movs	r1, #5
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f003 feed 	bl	8004be8 <HAL_RCC_ClockConfig>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000e14:	f000 f808 	bl	8000e28 <Error_Handler>
  }
}
 8000e18:	bf00      	nop
 8000e1a:	3750      	adds	r7, #80	; 0x50
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	40023800 	.word	0x40023800
 8000e24:	40007000 	.word	0x40007000

08000e28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e2c:	b672      	cpsid	i
}
 8000e2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e30:	e7fe      	b.n	8000e30 <Error_Handler+0x8>
	...

08000e34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b083      	sub	sp, #12
 8000e38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	607b      	str	r3, [r7, #4]
 8000e3e:	4b10      	ldr	r3, [pc, #64]	; (8000e80 <HAL_MspInit+0x4c>)
 8000e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e42:	4a0f      	ldr	r2, [pc, #60]	; (8000e80 <HAL_MspInit+0x4c>)
 8000e44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e48:	6453      	str	r3, [r2, #68]	; 0x44
 8000e4a:	4b0d      	ldr	r3, [pc, #52]	; (8000e80 <HAL_MspInit+0x4c>)
 8000e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e52:	607b      	str	r3, [r7, #4]
 8000e54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e56:	2300      	movs	r3, #0
 8000e58:	603b      	str	r3, [r7, #0]
 8000e5a:	4b09      	ldr	r3, [pc, #36]	; (8000e80 <HAL_MspInit+0x4c>)
 8000e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5e:	4a08      	ldr	r2, [pc, #32]	; (8000e80 <HAL_MspInit+0x4c>)
 8000e60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e64:	6413      	str	r3, [r2, #64]	; 0x40
 8000e66:	4b06      	ldr	r3, [pc, #24]	; (8000e80 <HAL_MspInit+0x4c>)
 8000e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e6e:	603b      	str	r3, [r7, #0]
 8000e70:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e72:	bf00      	nop
 8000e74:	370c      	adds	r7, #12
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	40023800 	.word	0x40023800

08000e84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e88:	e7fe      	b.n	8000e88 <NMI_Handler+0x4>

08000e8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e8a:	b480      	push	{r7}
 8000e8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e8e:	e7fe      	b.n	8000e8e <HardFault_Handler+0x4>

08000e90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e94:	e7fe      	b.n	8000e94 <MemManage_Handler+0x4>

08000e96 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e96:	b480      	push	{r7}
 8000e98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e9a:	e7fe      	b.n	8000e9a <BusFault_Handler+0x4>

08000e9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ea0:	e7fe      	b.n	8000ea0 <UsageFault_Handler+0x4>

08000ea2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ea2:	b480      	push	{r7}
 8000ea4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ea6:	bf00      	nop
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr

08000eb0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eb4:	bf00      	nop
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr

08000ebe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ebe:	b480      	push	{r7}
 8000ec0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ec2:	bf00      	nop
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr

08000ecc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ed0:	f000 f9c4 	bl	800125c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ed4:	bf00      	nop
 8000ed6:	bd80      	pop	{r7, pc}

08000ed8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000edc:	4802      	ldr	r0, [pc, #8]	; (8000ee8 <I2C1_EV_IRQHandler+0x10>)
 8000ede:	f001 fb0f 	bl	8002500 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000ee2:	bf00      	nop
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	200000e8 	.word	0x200000e8

08000eec <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000ef0:	4802      	ldr	r0, [pc, #8]	; (8000efc <I2C1_ER_IRQHandler+0x10>)
 8000ef2:	f001 fc76 	bl	80027e2 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000ef6:	bf00      	nop
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	200000e8 	.word	0x200000e8

08000f00 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8000f04:	4802      	ldr	r0, [pc, #8]	; (8000f10 <I2C2_EV_IRQHandler+0x10>)
 8000f06:	f001 fafb 	bl	8002500 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8000f0a:	bf00      	nop
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	2000013c 	.word	0x2000013c

08000f14 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8000f18:	4802      	ldr	r0, [pc, #8]	; (8000f24 <I2C2_ER_IRQHandler+0x10>)
 8000f1a:	f001 fc62 	bl	80027e2 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8000f1e:	bf00      	nop
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	2000013c 	.word	0x2000013c

08000f28 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000f2c:	4802      	ldr	r0, [pc, #8]	; (8000f38 <USART3_IRQHandler+0x10>)
 8000f2e:	f004 f95b 	bl	80051e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000f32:	bf00      	nop
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	20000194 	.word	0x20000194

08000f3c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b086      	sub	sp, #24
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	60f8      	str	r0, [r7, #12]
 8000f44:	60b9      	str	r1, [r7, #8]
 8000f46:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f48:	2300      	movs	r3, #0
 8000f4a:	617b      	str	r3, [r7, #20]
 8000f4c:	e00a      	b.n	8000f64 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000f4e:	f3af 8000 	nop.w
 8000f52:	4601      	mov	r1, r0
 8000f54:	68bb      	ldr	r3, [r7, #8]
 8000f56:	1c5a      	adds	r2, r3, #1
 8000f58:	60ba      	str	r2, [r7, #8]
 8000f5a:	b2ca      	uxtb	r2, r1
 8000f5c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	3301      	adds	r3, #1
 8000f62:	617b      	str	r3, [r7, #20]
 8000f64:	697a      	ldr	r2, [r7, #20]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	429a      	cmp	r2, r3
 8000f6a:	dbf0      	blt.n	8000f4e <_read+0x12>
	}

return len;
 8000f6c:	687b      	ldr	r3, [r7, #4]
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3718      	adds	r7, #24
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}

08000f76 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000f76:	b480      	push	{r7}
 8000f78:	b083      	sub	sp, #12
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	6078      	str	r0, [r7, #4]
	return -1;
 8000f7e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	370c      	adds	r7, #12
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr

08000f8e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f8e:	b480      	push	{r7}
 8000f90:	b083      	sub	sp, #12
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	6078      	str	r0, [r7, #4]
 8000f96:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f9e:	605a      	str	r2, [r3, #4]
	return 0;
 8000fa0:	2300      	movs	r3, #0
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	370c      	adds	r7, #12
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr

08000fae <_isatty>:

int _isatty(int file)
{
 8000fae:	b480      	push	{r7}
 8000fb0:	b083      	sub	sp, #12
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	6078      	str	r0, [r7, #4]
	return 1;
 8000fb6:	2301      	movs	r3, #1
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	370c      	adds	r7, #12
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr

08000fc4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b085      	sub	sp, #20
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	60f8      	str	r0, [r7, #12]
 8000fcc:	60b9      	str	r1, [r7, #8]
 8000fce:	607a      	str	r2, [r7, #4]
	return 0;
 8000fd0:	2300      	movs	r3, #0
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3714      	adds	r7, #20
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
	...

08000fe0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b086      	sub	sp, #24
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fe8:	4a14      	ldr	r2, [pc, #80]	; (800103c <_sbrk+0x5c>)
 8000fea:	4b15      	ldr	r3, [pc, #84]	; (8001040 <_sbrk+0x60>)
 8000fec:	1ad3      	subs	r3, r2, r3
 8000fee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ff4:	4b13      	ldr	r3, [pc, #76]	; (8001044 <_sbrk+0x64>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d102      	bne.n	8001002 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ffc:	4b11      	ldr	r3, [pc, #68]	; (8001044 <_sbrk+0x64>)
 8000ffe:	4a12      	ldr	r2, [pc, #72]	; (8001048 <_sbrk+0x68>)
 8001000:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001002:	4b10      	ldr	r3, [pc, #64]	; (8001044 <_sbrk+0x64>)
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4413      	add	r3, r2
 800100a:	693a      	ldr	r2, [r7, #16]
 800100c:	429a      	cmp	r2, r3
 800100e:	d207      	bcs.n	8001020 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001010:	f005 f81e 	bl	8006050 <__errno>
 8001014:	4603      	mov	r3, r0
 8001016:	220c      	movs	r2, #12
 8001018:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800101a:	f04f 33ff 	mov.w	r3, #4294967295
 800101e:	e009      	b.n	8001034 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001020:	4b08      	ldr	r3, [pc, #32]	; (8001044 <_sbrk+0x64>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001026:	4b07      	ldr	r3, [pc, #28]	; (8001044 <_sbrk+0x64>)
 8001028:	681a      	ldr	r2, [r3, #0]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4413      	add	r3, r2
 800102e:	4a05      	ldr	r2, [pc, #20]	; (8001044 <_sbrk+0x64>)
 8001030:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001032:	68fb      	ldr	r3, [r7, #12]
}
 8001034:	4618      	mov	r0, r3
 8001036:	3718      	adds	r7, #24
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	20030000 	.word	0x20030000
 8001040:	00000400 	.word	0x00000400
 8001044:	20000190 	.word	0x20000190
 8001048:	200001f0 	.word	0x200001f0

0800104c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001050:	4b06      	ldr	r3, [pc, #24]	; (800106c <SystemInit+0x20>)
 8001052:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001056:	4a05      	ldr	r2, [pc, #20]	; (800106c <SystemInit+0x20>)
 8001058:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800105c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001060:	bf00      	nop
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	e000ed00 	.word	0xe000ed00

08001070 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001074:	4b11      	ldr	r3, [pc, #68]	; (80010bc <MX_USART3_UART_Init+0x4c>)
 8001076:	4a12      	ldr	r2, [pc, #72]	; (80010c0 <MX_USART3_UART_Init+0x50>)
 8001078:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800107a:	4b10      	ldr	r3, [pc, #64]	; (80010bc <MX_USART3_UART_Init+0x4c>)
 800107c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001080:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001082:	4b0e      	ldr	r3, [pc, #56]	; (80010bc <MX_USART3_UART_Init+0x4c>)
 8001084:	2200      	movs	r2, #0
 8001086:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001088:	4b0c      	ldr	r3, [pc, #48]	; (80010bc <MX_USART3_UART_Init+0x4c>)
 800108a:	2200      	movs	r2, #0
 800108c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800108e:	4b0b      	ldr	r3, [pc, #44]	; (80010bc <MX_USART3_UART_Init+0x4c>)
 8001090:	2200      	movs	r2, #0
 8001092:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001094:	4b09      	ldr	r3, [pc, #36]	; (80010bc <MX_USART3_UART_Init+0x4c>)
 8001096:	220c      	movs	r2, #12
 8001098:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800109a:	4b08      	ldr	r3, [pc, #32]	; (80010bc <MX_USART3_UART_Init+0x4c>)
 800109c:	2200      	movs	r2, #0
 800109e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80010a0:	4b06      	ldr	r3, [pc, #24]	; (80010bc <MX_USART3_UART_Init+0x4c>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80010a6:	4805      	ldr	r0, [pc, #20]	; (80010bc <MX_USART3_UART_Init+0x4c>)
 80010a8:	f003 ffbe 	bl	8005028 <HAL_UART_Init>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80010b2:	f7ff feb9 	bl	8000e28 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80010b6:	bf00      	nop
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	20000194 	.word	0x20000194
 80010c0:	40004800 	.word	0x40004800

080010c4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b08a      	sub	sp, #40	; 0x28
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010cc:	f107 0314 	add.w	r3, r7, #20
 80010d0:	2200      	movs	r2, #0
 80010d2:	601a      	str	r2, [r3, #0]
 80010d4:	605a      	str	r2, [r3, #4]
 80010d6:	609a      	str	r2, [r3, #8]
 80010d8:	60da      	str	r2, [r3, #12]
 80010da:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a1d      	ldr	r2, [pc, #116]	; (8001158 <HAL_UART_MspInit+0x94>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d134      	bne.n	8001150 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80010e6:	2300      	movs	r3, #0
 80010e8:	613b      	str	r3, [r7, #16]
 80010ea:	4b1c      	ldr	r3, [pc, #112]	; (800115c <HAL_UART_MspInit+0x98>)
 80010ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ee:	4a1b      	ldr	r2, [pc, #108]	; (800115c <HAL_UART_MspInit+0x98>)
 80010f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010f4:	6413      	str	r3, [r2, #64]	; 0x40
 80010f6:	4b19      	ldr	r3, [pc, #100]	; (800115c <HAL_UART_MspInit+0x98>)
 80010f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010fe:	613b      	str	r3, [r7, #16]
 8001100:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001102:	2300      	movs	r3, #0
 8001104:	60fb      	str	r3, [r7, #12]
 8001106:	4b15      	ldr	r3, [pc, #84]	; (800115c <HAL_UART_MspInit+0x98>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110a:	4a14      	ldr	r2, [pc, #80]	; (800115c <HAL_UART_MspInit+0x98>)
 800110c:	f043 0302 	orr.w	r3, r3, #2
 8001110:	6313      	str	r3, [r2, #48]	; 0x30
 8001112:	4b12      	ldr	r3, [pc, #72]	; (800115c <HAL_UART_MspInit+0x98>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001116:	f003 0302 	and.w	r3, r3, #2
 800111a:	60fb      	str	r3, [r7, #12]
 800111c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800111e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001122:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001124:	2302      	movs	r3, #2
 8001126:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001128:	2300      	movs	r3, #0
 800112a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800112c:	2303      	movs	r3, #3
 800112e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001130:	2307      	movs	r3, #7
 8001132:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001134:	f107 0314 	add.w	r3, r7, #20
 8001138:	4619      	mov	r1, r3
 800113a:	4809      	ldr	r0, [pc, #36]	; (8001160 <HAL_UART_MspInit+0x9c>)
 800113c:	f000 fa84 	bl	8001648 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001140:	2200      	movs	r2, #0
 8001142:	2100      	movs	r1, #0
 8001144:	2027      	movs	r0, #39	; 0x27
 8001146:	f000 f9a8 	bl	800149a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800114a:	2027      	movs	r0, #39	; 0x27
 800114c:	f000 f9c1 	bl	80014d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001150:	bf00      	nop
 8001152:	3728      	adds	r7, #40	; 0x28
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	40004800 	.word	0x40004800
 800115c:	40023800 	.word	0x40023800
 8001160:	40020400 	.word	0x40020400

08001164 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001164:	f8df d034 	ldr.w	sp, [pc, #52]	; 800119c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001168:	480d      	ldr	r0, [pc, #52]	; (80011a0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800116a:	490e      	ldr	r1, [pc, #56]	; (80011a4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800116c:	4a0e      	ldr	r2, [pc, #56]	; (80011a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800116e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001170:	e002      	b.n	8001178 <LoopCopyDataInit>

08001172 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001172:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001174:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001176:	3304      	adds	r3, #4

08001178 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001178:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800117a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800117c:	d3f9      	bcc.n	8001172 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800117e:	4a0b      	ldr	r2, [pc, #44]	; (80011ac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001180:	4c0b      	ldr	r4, [pc, #44]	; (80011b0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001182:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001184:	e001      	b.n	800118a <LoopFillZerobss>

08001186 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001186:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001188:	3204      	adds	r2, #4

0800118a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800118a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800118c:	d3fb      	bcc.n	8001186 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800118e:	f7ff ff5d 	bl	800104c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001192:	f004 ff63 	bl	800605c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001196:	f7ff fda5 	bl	8000ce4 <main>
  bx  lr    
 800119a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800119c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80011a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011a4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80011a8:	0800723c 	.word	0x0800723c
  ldr r2, =_sbss
 80011ac:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80011b0:	200001ec 	.word	0x200001ec

080011b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011b4:	e7fe      	b.n	80011b4 <ADC_IRQHandler>
	...

080011b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011bc:	4b0e      	ldr	r3, [pc, #56]	; (80011f8 <HAL_Init+0x40>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a0d      	ldr	r2, [pc, #52]	; (80011f8 <HAL_Init+0x40>)
 80011c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011c8:	4b0b      	ldr	r3, [pc, #44]	; (80011f8 <HAL_Init+0x40>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a0a      	ldr	r2, [pc, #40]	; (80011f8 <HAL_Init+0x40>)
 80011ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011d4:	4b08      	ldr	r3, [pc, #32]	; (80011f8 <HAL_Init+0x40>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a07      	ldr	r2, [pc, #28]	; (80011f8 <HAL_Init+0x40>)
 80011da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011e0:	2003      	movs	r0, #3
 80011e2:	f000 f94f 	bl	8001484 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011e6:	2000      	movs	r0, #0
 80011e8:	f000 f808 	bl	80011fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011ec:	f7ff fe22 	bl	8000e34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011f0:	2300      	movs	r3, #0
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	40023c00 	.word	0x40023c00

080011fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001204:	4b12      	ldr	r3, [pc, #72]	; (8001250 <HAL_InitTick+0x54>)
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	4b12      	ldr	r3, [pc, #72]	; (8001254 <HAL_InitTick+0x58>)
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	4619      	mov	r1, r3
 800120e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001212:	fbb3 f3f1 	udiv	r3, r3, r1
 8001216:	fbb2 f3f3 	udiv	r3, r2, r3
 800121a:	4618      	mov	r0, r3
 800121c:	f000 f967 	bl	80014ee <HAL_SYSTICK_Config>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001226:	2301      	movs	r3, #1
 8001228:	e00e      	b.n	8001248 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2b0f      	cmp	r3, #15
 800122e:	d80a      	bhi.n	8001246 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001230:	2200      	movs	r2, #0
 8001232:	6879      	ldr	r1, [r7, #4]
 8001234:	f04f 30ff 	mov.w	r0, #4294967295
 8001238:	f000 f92f 	bl	800149a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800123c:	4a06      	ldr	r2, [pc, #24]	; (8001258 <HAL_InitTick+0x5c>)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001242:	2300      	movs	r3, #0
 8001244:	e000      	b.n	8001248 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001246:	2301      	movs	r3, #1
}
 8001248:	4618      	mov	r0, r3
 800124a:	3708      	adds	r7, #8
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	20000000 	.word	0x20000000
 8001254:	20000008 	.word	0x20000008
 8001258:	20000004 	.word	0x20000004

0800125c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001260:	4b06      	ldr	r3, [pc, #24]	; (800127c <HAL_IncTick+0x20>)
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	461a      	mov	r2, r3
 8001266:	4b06      	ldr	r3, [pc, #24]	; (8001280 <HAL_IncTick+0x24>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4413      	add	r3, r2
 800126c:	4a04      	ldr	r2, [pc, #16]	; (8001280 <HAL_IncTick+0x24>)
 800126e:	6013      	str	r3, [r2, #0]
}
 8001270:	bf00      	nop
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	20000008 	.word	0x20000008
 8001280:	200001d8 	.word	0x200001d8

08001284 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  return uwTick;
 8001288:	4b03      	ldr	r3, [pc, #12]	; (8001298 <HAL_GetTick+0x14>)
 800128a:	681b      	ldr	r3, [r3, #0]
}
 800128c:	4618      	mov	r0, r3
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	200001d8 	.word	0x200001d8

0800129c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012a4:	f7ff ffee 	bl	8001284 <HAL_GetTick>
 80012a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012b4:	d005      	beq.n	80012c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012b6:	4b0a      	ldr	r3, [pc, #40]	; (80012e0 <HAL_Delay+0x44>)
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	461a      	mov	r2, r3
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	4413      	add	r3, r2
 80012c0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80012c2:	bf00      	nop
 80012c4:	f7ff ffde 	bl	8001284 <HAL_GetTick>
 80012c8:	4602      	mov	r2, r0
 80012ca:	68bb      	ldr	r3, [r7, #8]
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	68fa      	ldr	r2, [r7, #12]
 80012d0:	429a      	cmp	r2, r3
 80012d2:	d8f7      	bhi.n	80012c4 <HAL_Delay+0x28>
  {
  }
}
 80012d4:	bf00      	nop
 80012d6:	bf00      	nop
 80012d8:	3710      	adds	r7, #16
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	20000008 	.word	0x20000008

080012e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b085      	sub	sp, #20
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	f003 0307 	and.w	r3, r3, #7
 80012f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012f4:	4b0c      	ldr	r3, [pc, #48]	; (8001328 <__NVIC_SetPriorityGrouping+0x44>)
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012fa:	68ba      	ldr	r2, [r7, #8]
 80012fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001300:	4013      	ands	r3, r2
 8001302:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800130c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001310:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001314:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001316:	4a04      	ldr	r2, [pc, #16]	; (8001328 <__NVIC_SetPriorityGrouping+0x44>)
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	60d3      	str	r3, [r2, #12]
}
 800131c:	bf00      	nop
 800131e:	3714      	adds	r7, #20
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr
 8001328:	e000ed00 	.word	0xe000ed00

0800132c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001330:	4b04      	ldr	r3, [pc, #16]	; (8001344 <__NVIC_GetPriorityGrouping+0x18>)
 8001332:	68db      	ldr	r3, [r3, #12]
 8001334:	0a1b      	lsrs	r3, r3, #8
 8001336:	f003 0307 	and.w	r3, r3, #7
}
 800133a:	4618      	mov	r0, r3
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr
 8001344:	e000ed00 	.word	0xe000ed00

08001348 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	4603      	mov	r3, r0
 8001350:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001356:	2b00      	cmp	r3, #0
 8001358:	db0b      	blt.n	8001372 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800135a:	79fb      	ldrb	r3, [r7, #7]
 800135c:	f003 021f 	and.w	r2, r3, #31
 8001360:	4907      	ldr	r1, [pc, #28]	; (8001380 <__NVIC_EnableIRQ+0x38>)
 8001362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001366:	095b      	lsrs	r3, r3, #5
 8001368:	2001      	movs	r0, #1
 800136a:	fa00 f202 	lsl.w	r2, r0, r2
 800136e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001372:	bf00      	nop
 8001374:	370c      	adds	r7, #12
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	e000e100 	.word	0xe000e100

08001384 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	4603      	mov	r3, r0
 800138c:	6039      	str	r1, [r7, #0]
 800138e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001390:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001394:	2b00      	cmp	r3, #0
 8001396:	db0a      	blt.n	80013ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	b2da      	uxtb	r2, r3
 800139c:	490c      	ldr	r1, [pc, #48]	; (80013d0 <__NVIC_SetPriority+0x4c>)
 800139e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a2:	0112      	lsls	r2, r2, #4
 80013a4:	b2d2      	uxtb	r2, r2
 80013a6:	440b      	add	r3, r1
 80013a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013ac:	e00a      	b.n	80013c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	b2da      	uxtb	r2, r3
 80013b2:	4908      	ldr	r1, [pc, #32]	; (80013d4 <__NVIC_SetPriority+0x50>)
 80013b4:	79fb      	ldrb	r3, [r7, #7]
 80013b6:	f003 030f 	and.w	r3, r3, #15
 80013ba:	3b04      	subs	r3, #4
 80013bc:	0112      	lsls	r2, r2, #4
 80013be:	b2d2      	uxtb	r2, r2
 80013c0:	440b      	add	r3, r1
 80013c2:	761a      	strb	r2, [r3, #24]
}
 80013c4:	bf00      	nop
 80013c6:	370c      	adds	r7, #12
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr
 80013d0:	e000e100 	.word	0xe000e100
 80013d4:	e000ed00 	.word	0xe000ed00

080013d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013d8:	b480      	push	{r7}
 80013da:	b089      	sub	sp, #36	; 0x24
 80013dc:	af00      	add	r7, sp, #0
 80013de:	60f8      	str	r0, [r7, #12]
 80013e0:	60b9      	str	r1, [r7, #8]
 80013e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	f003 0307 	and.w	r3, r3, #7
 80013ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013ec:	69fb      	ldr	r3, [r7, #28]
 80013ee:	f1c3 0307 	rsb	r3, r3, #7
 80013f2:	2b04      	cmp	r3, #4
 80013f4:	bf28      	it	cs
 80013f6:	2304      	movcs	r3, #4
 80013f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	3304      	adds	r3, #4
 80013fe:	2b06      	cmp	r3, #6
 8001400:	d902      	bls.n	8001408 <NVIC_EncodePriority+0x30>
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	3b03      	subs	r3, #3
 8001406:	e000      	b.n	800140a <NVIC_EncodePriority+0x32>
 8001408:	2300      	movs	r3, #0
 800140a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800140c:	f04f 32ff 	mov.w	r2, #4294967295
 8001410:	69bb      	ldr	r3, [r7, #24]
 8001412:	fa02 f303 	lsl.w	r3, r2, r3
 8001416:	43da      	mvns	r2, r3
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	401a      	ands	r2, r3
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001420:	f04f 31ff 	mov.w	r1, #4294967295
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	fa01 f303 	lsl.w	r3, r1, r3
 800142a:	43d9      	mvns	r1, r3
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001430:	4313      	orrs	r3, r2
         );
}
 8001432:	4618      	mov	r0, r3
 8001434:	3724      	adds	r7, #36	; 0x24
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
	...

08001440 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	3b01      	subs	r3, #1
 800144c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001450:	d301      	bcc.n	8001456 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001452:	2301      	movs	r3, #1
 8001454:	e00f      	b.n	8001476 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001456:	4a0a      	ldr	r2, [pc, #40]	; (8001480 <SysTick_Config+0x40>)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	3b01      	subs	r3, #1
 800145c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800145e:	210f      	movs	r1, #15
 8001460:	f04f 30ff 	mov.w	r0, #4294967295
 8001464:	f7ff ff8e 	bl	8001384 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001468:	4b05      	ldr	r3, [pc, #20]	; (8001480 <SysTick_Config+0x40>)
 800146a:	2200      	movs	r2, #0
 800146c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800146e:	4b04      	ldr	r3, [pc, #16]	; (8001480 <SysTick_Config+0x40>)
 8001470:	2207      	movs	r2, #7
 8001472:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001474:	2300      	movs	r3, #0
}
 8001476:	4618      	mov	r0, r3
 8001478:	3708      	adds	r7, #8
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	e000e010 	.word	0xe000e010

08001484 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800148c:	6878      	ldr	r0, [r7, #4]
 800148e:	f7ff ff29 	bl	80012e4 <__NVIC_SetPriorityGrouping>
}
 8001492:	bf00      	nop
 8001494:	3708      	adds	r7, #8
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}

0800149a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800149a:	b580      	push	{r7, lr}
 800149c:	b086      	sub	sp, #24
 800149e:	af00      	add	r7, sp, #0
 80014a0:	4603      	mov	r3, r0
 80014a2:	60b9      	str	r1, [r7, #8]
 80014a4:	607a      	str	r2, [r7, #4]
 80014a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014a8:	2300      	movs	r3, #0
 80014aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014ac:	f7ff ff3e 	bl	800132c <__NVIC_GetPriorityGrouping>
 80014b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014b2:	687a      	ldr	r2, [r7, #4]
 80014b4:	68b9      	ldr	r1, [r7, #8]
 80014b6:	6978      	ldr	r0, [r7, #20]
 80014b8:	f7ff ff8e 	bl	80013d8 <NVIC_EncodePriority>
 80014bc:	4602      	mov	r2, r0
 80014be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014c2:	4611      	mov	r1, r2
 80014c4:	4618      	mov	r0, r3
 80014c6:	f7ff ff5d 	bl	8001384 <__NVIC_SetPriority>
}
 80014ca:	bf00      	nop
 80014cc:	3718      	adds	r7, #24
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}

080014d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014d2:	b580      	push	{r7, lr}
 80014d4:	b082      	sub	sp, #8
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	4603      	mov	r3, r0
 80014da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7ff ff31 	bl	8001348 <__NVIC_EnableIRQ>
}
 80014e6:	bf00      	nop
 80014e8:	3708      	adds	r7, #8
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}

080014ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014ee:	b580      	push	{r7, lr}
 80014f0:	b082      	sub	sp, #8
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014f6:	6878      	ldr	r0, [r7, #4]
 80014f8:	f7ff ffa2 	bl	8001440 <SysTick_Config>
 80014fc:	4603      	mov	r3, r0
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}

08001506 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001506:	b580      	push	{r7, lr}
 8001508:	b084      	sub	sp, #16
 800150a:	af00      	add	r7, sp, #0
 800150c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001512:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001514:	f7ff feb6 	bl	8001284 <HAL_GetTick>
 8001518:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001520:	b2db      	uxtb	r3, r3
 8001522:	2b02      	cmp	r3, #2
 8001524:	d008      	beq.n	8001538 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2280      	movs	r2, #128	; 0x80
 800152a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2200      	movs	r2, #0
 8001530:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001534:	2301      	movs	r3, #1
 8001536:	e052      	b.n	80015de <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f022 0216 	bic.w	r2, r2, #22
 8001546:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	695a      	ldr	r2, [r3, #20]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001556:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155c:	2b00      	cmp	r3, #0
 800155e:	d103      	bne.n	8001568 <HAL_DMA_Abort+0x62>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001564:	2b00      	cmp	r3, #0
 8001566:	d007      	beq.n	8001578 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f022 0208 	bic.w	r2, r2, #8
 8001576:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	681a      	ldr	r2, [r3, #0]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f022 0201 	bic.w	r2, r2, #1
 8001586:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001588:	e013      	b.n	80015b2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800158a:	f7ff fe7b 	bl	8001284 <HAL_GetTick>
 800158e:	4602      	mov	r2, r0
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	1ad3      	subs	r3, r2, r3
 8001594:	2b05      	cmp	r3, #5
 8001596:	d90c      	bls.n	80015b2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2220      	movs	r2, #32
 800159c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2203      	movs	r2, #3
 80015a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2200      	movs	r2, #0
 80015aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80015ae:	2303      	movs	r3, #3
 80015b0:	e015      	b.n	80015de <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f003 0301 	and.w	r3, r3, #1
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d1e4      	bne.n	800158a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015c4:	223f      	movs	r2, #63	; 0x3f
 80015c6:	409a      	lsls	r2, r3
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2201      	movs	r2, #1
 80015d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2200      	movs	r2, #0
 80015d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80015dc:	2300      	movs	r3, #0
}
 80015de:	4618      	mov	r0, r3
 80015e0:	3710      	adds	r7, #16
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}

080015e6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80015e6:	b480      	push	{r7}
 80015e8:	b083      	sub	sp, #12
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	2b02      	cmp	r3, #2
 80015f8:	d004      	beq.n	8001604 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2280      	movs	r2, #128	; 0x80
 80015fe:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001600:	2301      	movs	r3, #1
 8001602:	e00c      	b.n	800161e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2205      	movs	r2, #5
 8001608:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f022 0201 	bic.w	r2, r2, #1
 800161a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800161c:	2300      	movs	r3, #0
}
 800161e:	4618      	mov	r0, r3
 8001620:	370c      	adds	r7, #12
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr

0800162a <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800162a:	b480      	push	{r7}
 800162c:	b083      	sub	sp, #12
 800162e:	af00      	add	r7, sp, #0
 8001630:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001638:	b2db      	uxtb	r3, r3
}
 800163a:	4618      	mov	r0, r3
 800163c:	370c      	adds	r7, #12
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
	...

08001648 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001648:	b480      	push	{r7}
 800164a:	b089      	sub	sp, #36	; 0x24
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
 8001650:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001652:	2300      	movs	r3, #0
 8001654:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001656:	2300      	movs	r3, #0
 8001658:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800165a:	2300      	movs	r3, #0
 800165c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800165e:	2300      	movs	r3, #0
 8001660:	61fb      	str	r3, [r7, #28]
 8001662:	e177      	b.n	8001954 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001664:	2201      	movs	r2, #1
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	fa02 f303 	lsl.w	r3, r2, r3
 800166c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	697a      	ldr	r2, [r7, #20]
 8001674:	4013      	ands	r3, r2
 8001676:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001678:	693a      	ldr	r2, [r7, #16]
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	429a      	cmp	r2, r3
 800167e:	f040 8166 	bne.w	800194e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	f003 0303 	and.w	r3, r3, #3
 800168a:	2b01      	cmp	r3, #1
 800168c:	d005      	beq.n	800169a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001696:	2b02      	cmp	r3, #2
 8001698:	d130      	bne.n	80016fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80016a0:	69fb      	ldr	r3, [r7, #28]
 80016a2:	005b      	lsls	r3, r3, #1
 80016a4:	2203      	movs	r2, #3
 80016a6:	fa02 f303 	lsl.w	r3, r2, r3
 80016aa:	43db      	mvns	r3, r3
 80016ac:	69ba      	ldr	r2, [r7, #24]
 80016ae:	4013      	ands	r3, r2
 80016b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	68da      	ldr	r2, [r3, #12]
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	005b      	lsls	r3, r3, #1
 80016ba:	fa02 f303 	lsl.w	r3, r2, r3
 80016be:	69ba      	ldr	r2, [r7, #24]
 80016c0:	4313      	orrs	r3, r2
 80016c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	69ba      	ldr	r2, [r7, #24]
 80016c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016d0:	2201      	movs	r2, #1
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	fa02 f303 	lsl.w	r3, r2, r3
 80016d8:	43db      	mvns	r3, r3
 80016da:	69ba      	ldr	r2, [r7, #24]
 80016dc:	4013      	ands	r3, r2
 80016de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	091b      	lsrs	r3, r3, #4
 80016e6:	f003 0201 	and.w	r2, r3, #1
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	fa02 f303 	lsl.w	r3, r2, r3
 80016f0:	69ba      	ldr	r2, [r7, #24]
 80016f2:	4313      	orrs	r3, r2
 80016f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	69ba      	ldr	r2, [r7, #24]
 80016fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	f003 0303 	and.w	r3, r3, #3
 8001704:	2b03      	cmp	r3, #3
 8001706:	d017      	beq.n	8001738 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	68db      	ldr	r3, [r3, #12]
 800170c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	005b      	lsls	r3, r3, #1
 8001712:	2203      	movs	r2, #3
 8001714:	fa02 f303 	lsl.w	r3, r2, r3
 8001718:	43db      	mvns	r3, r3
 800171a:	69ba      	ldr	r2, [r7, #24]
 800171c:	4013      	ands	r3, r2
 800171e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	689a      	ldr	r2, [r3, #8]
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	005b      	lsls	r3, r3, #1
 8001728:	fa02 f303 	lsl.w	r3, r2, r3
 800172c:	69ba      	ldr	r2, [r7, #24]
 800172e:	4313      	orrs	r3, r2
 8001730:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	69ba      	ldr	r2, [r7, #24]
 8001736:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f003 0303 	and.w	r3, r3, #3
 8001740:	2b02      	cmp	r3, #2
 8001742:	d123      	bne.n	800178c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001744:	69fb      	ldr	r3, [r7, #28]
 8001746:	08da      	lsrs	r2, r3, #3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	3208      	adds	r2, #8
 800174c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001750:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	f003 0307 	and.w	r3, r3, #7
 8001758:	009b      	lsls	r3, r3, #2
 800175a:	220f      	movs	r2, #15
 800175c:	fa02 f303 	lsl.w	r3, r2, r3
 8001760:	43db      	mvns	r3, r3
 8001762:	69ba      	ldr	r2, [r7, #24]
 8001764:	4013      	ands	r3, r2
 8001766:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	691a      	ldr	r2, [r3, #16]
 800176c:	69fb      	ldr	r3, [r7, #28]
 800176e:	f003 0307 	and.w	r3, r3, #7
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	fa02 f303 	lsl.w	r3, r2, r3
 8001778:	69ba      	ldr	r2, [r7, #24]
 800177a:	4313      	orrs	r3, r2
 800177c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	08da      	lsrs	r2, r3, #3
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	3208      	adds	r2, #8
 8001786:	69b9      	ldr	r1, [r7, #24]
 8001788:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	005b      	lsls	r3, r3, #1
 8001796:	2203      	movs	r2, #3
 8001798:	fa02 f303 	lsl.w	r3, r2, r3
 800179c:	43db      	mvns	r3, r3
 800179e:	69ba      	ldr	r2, [r7, #24]
 80017a0:	4013      	ands	r3, r2
 80017a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f003 0203 	and.w	r2, r3, #3
 80017ac:	69fb      	ldr	r3, [r7, #28]
 80017ae:	005b      	lsls	r3, r3, #1
 80017b0:	fa02 f303 	lsl.w	r3, r2, r3
 80017b4:	69ba      	ldr	r2, [r7, #24]
 80017b6:	4313      	orrs	r3, r2
 80017b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	69ba      	ldr	r2, [r7, #24]
 80017be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	f000 80c0 	beq.w	800194e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017ce:	2300      	movs	r3, #0
 80017d0:	60fb      	str	r3, [r7, #12]
 80017d2:	4b66      	ldr	r3, [pc, #408]	; (800196c <HAL_GPIO_Init+0x324>)
 80017d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017d6:	4a65      	ldr	r2, [pc, #404]	; (800196c <HAL_GPIO_Init+0x324>)
 80017d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017dc:	6453      	str	r3, [r2, #68]	; 0x44
 80017de:	4b63      	ldr	r3, [pc, #396]	; (800196c <HAL_GPIO_Init+0x324>)
 80017e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017e6:	60fb      	str	r3, [r7, #12]
 80017e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80017ea:	4a61      	ldr	r2, [pc, #388]	; (8001970 <HAL_GPIO_Init+0x328>)
 80017ec:	69fb      	ldr	r3, [r7, #28]
 80017ee:	089b      	lsrs	r3, r3, #2
 80017f0:	3302      	adds	r3, #2
 80017f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80017f8:	69fb      	ldr	r3, [r7, #28]
 80017fa:	f003 0303 	and.w	r3, r3, #3
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	220f      	movs	r2, #15
 8001802:	fa02 f303 	lsl.w	r3, r2, r3
 8001806:	43db      	mvns	r3, r3
 8001808:	69ba      	ldr	r2, [r7, #24]
 800180a:	4013      	ands	r3, r2
 800180c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4a58      	ldr	r2, [pc, #352]	; (8001974 <HAL_GPIO_Init+0x32c>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d037      	beq.n	8001886 <HAL_GPIO_Init+0x23e>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	4a57      	ldr	r2, [pc, #348]	; (8001978 <HAL_GPIO_Init+0x330>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d031      	beq.n	8001882 <HAL_GPIO_Init+0x23a>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4a56      	ldr	r2, [pc, #344]	; (800197c <HAL_GPIO_Init+0x334>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d02b      	beq.n	800187e <HAL_GPIO_Init+0x236>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4a55      	ldr	r2, [pc, #340]	; (8001980 <HAL_GPIO_Init+0x338>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d025      	beq.n	800187a <HAL_GPIO_Init+0x232>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	4a54      	ldr	r2, [pc, #336]	; (8001984 <HAL_GPIO_Init+0x33c>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d01f      	beq.n	8001876 <HAL_GPIO_Init+0x22e>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4a53      	ldr	r2, [pc, #332]	; (8001988 <HAL_GPIO_Init+0x340>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d019      	beq.n	8001872 <HAL_GPIO_Init+0x22a>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	4a52      	ldr	r2, [pc, #328]	; (800198c <HAL_GPIO_Init+0x344>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d013      	beq.n	800186e <HAL_GPIO_Init+0x226>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4a51      	ldr	r2, [pc, #324]	; (8001990 <HAL_GPIO_Init+0x348>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d00d      	beq.n	800186a <HAL_GPIO_Init+0x222>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	4a50      	ldr	r2, [pc, #320]	; (8001994 <HAL_GPIO_Init+0x34c>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d007      	beq.n	8001866 <HAL_GPIO_Init+0x21e>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	4a4f      	ldr	r2, [pc, #316]	; (8001998 <HAL_GPIO_Init+0x350>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d101      	bne.n	8001862 <HAL_GPIO_Init+0x21a>
 800185e:	2309      	movs	r3, #9
 8001860:	e012      	b.n	8001888 <HAL_GPIO_Init+0x240>
 8001862:	230a      	movs	r3, #10
 8001864:	e010      	b.n	8001888 <HAL_GPIO_Init+0x240>
 8001866:	2308      	movs	r3, #8
 8001868:	e00e      	b.n	8001888 <HAL_GPIO_Init+0x240>
 800186a:	2307      	movs	r3, #7
 800186c:	e00c      	b.n	8001888 <HAL_GPIO_Init+0x240>
 800186e:	2306      	movs	r3, #6
 8001870:	e00a      	b.n	8001888 <HAL_GPIO_Init+0x240>
 8001872:	2305      	movs	r3, #5
 8001874:	e008      	b.n	8001888 <HAL_GPIO_Init+0x240>
 8001876:	2304      	movs	r3, #4
 8001878:	e006      	b.n	8001888 <HAL_GPIO_Init+0x240>
 800187a:	2303      	movs	r3, #3
 800187c:	e004      	b.n	8001888 <HAL_GPIO_Init+0x240>
 800187e:	2302      	movs	r3, #2
 8001880:	e002      	b.n	8001888 <HAL_GPIO_Init+0x240>
 8001882:	2301      	movs	r3, #1
 8001884:	e000      	b.n	8001888 <HAL_GPIO_Init+0x240>
 8001886:	2300      	movs	r3, #0
 8001888:	69fa      	ldr	r2, [r7, #28]
 800188a:	f002 0203 	and.w	r2, r2, #3
 800188e:	0092      	lsls	r2, r2, #2
 8001890:	4093      	lsls	r3, r2
 8001892:	69ba      	ldr	r2, [r7, #24]
 8001894:	4313      	orrs	r3, r2
 8001896:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001898:	4935      	ldr	r1, [pc, #212]	; (8001970 <HAL_GPIO_Init+0x328>)
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	089b      	lsrs	r3, r3, #2
 800189e:	3302      	adds	r3, #2
 80018a0:	69ba      	ldr	r2, [r7, #24]
 80018a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018a6:	4b3d      	ldr	r3, [pc, #244]	; (800199c <HAL_GPIO_Init+0x354>)
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	43db      	mvns	r3, r3
 80018b0:	69ba      	ldr	r2, [r7, #24]
 80018b2:	4013      	ands	r3, r2
 80018b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d003      	beq.n	80018ca <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80018c2:	69ba      	ldr	r2, [r7, #24]
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	4313      	orrs	r3, r2
 80018c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80018ca:	4a34      	ldr	r2, [pc, #208]	; (800199c <HAL_GPIO_Init+0x354>)
 80018cc:	69bb      	ldr	r3, [r7, #24]
 80018ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018d0:	4b32      	ldr	r3, [pc, #200]	; (800199c <HAL_GPIO_Init+0x354>)
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	43db      	mvns	r3, r3
 80018da:	69ba      	ldr	r2, [r7, #24]
 80018dc:	4013      	ands	r3, r2
 80018de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d003      	beq.n	80018f4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80018ec:	69ba      	ldr	r2, [r7, #24]
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	4313      	orrs	r3, r2
 80018f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80018f4:	4a29      	ldr	r2, [pc, #164]	; (800199c <HAL_GPIO_Init+0x354>)
 80018f6:	69bb      	ldr	r3, [r7, #24]
 80018f8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80018fa:	4b28      	ldr	r3, [pc, #160]	; (800199c <HAL_GPIO_Init+0x354>)
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	43db      	mvns	r3, r3
 8001904:	69ba      	ldr	r2, [r7, #24]
 8001906:	4013      	ands	r3, r2
 8001908:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001912:	2b00      	cmp	r3, #0
 8001914:	d003      	beq.n	800191e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001916:	69ba      	ldr	r2, [r7, #24]
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	4313      	orrs	r3, r2
 800191c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800191e:	4a1f      	ldr	r2, [pc, #124]	; (800199c <HAL_GPIO_Init+0x354>)
 8001920:	69bb      	ldr	r3, [r7, #24]
 8001922:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001924:	4b1d      	ldr	r3, [pc, #116]	; (800199c <HAL_GPIO_Init+0x354>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	43db      	mvns	r3, r3
 800192e:	69ba      	ldr	r2, [r7, #24]
 8001930:	4013      	ands	r3, r2
 8001932:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800193c:	2b00      	cmp	r3, #0
 800193e:	d003      	beq.n	8001948 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001940:	69ba      	ldr	r2, [r7, #24]
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	4313      	orrs	r3, r2
 8001946:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001948:	4a14      	ldr	r2, [pc, #80]	; (800199c <HAL_GPIO_Init+0x354>)
 800194a:	69bb      	ldr	r3, [r7, #24]
 800194c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	3301      	adds	r3, #1
 8001952:	61fb      	str	r3, [r7, #28]
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	2b0f      	cmp	r3, #15
 8001958:	f67f ae84 	bls.w	8001664 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800195c:	bf00      	nop
 800195e:	bf00      	nop
 8001960:	3724      	adds	r7, #36	; 0x24
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	40023800 	.word	0x40023800
 8001970:	40013800 	.word	0x40013800
 8001974:	40020000 	.word	0x40020000
 8001978:	40020400 	.word	0x40020400
 800197c:	40020800 	.word	0x40020800
 8001980:	40020c00 	.word	0x40020c00
 8001984:	40021000 	.word	0x40021000
 8001988:	40021400 	.word	0x40021400
 800198c:	40021800 	.word	0x40021800
 8001990:	40021c00 	.word	0x40021c00
 8001994:	40022000 	.word	0x40022000
 8001998:	40022400 	.word	0x40022400
 800199c:	40013c00 	.word	0x40013c00

080019a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
 80019a8:	460b      	mov	r3, r1
 80019aa:	807b      	strh	r3, [r7, #2]
 80019ac:	4613      	mov	r3, r2
 80019ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019b0:	787b      	ldrb	r3, [r7, #1]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d003      	beq.n	80019be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019b6:	887a      	ldrh	r2, [r7, #2]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80019bc:	e003      	b.n	80019c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80019be:	887b      	ldrh	r3, [r7, #2]
 80019c0:	041a      	lsls	r2, r3, #16
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	619a      	str	r2, [r3, #24]
}
 80019c6:	bf00      	nop
 80019c8:	370c      	adds	r7, #12
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
	...

080019d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b084      	sub	sp, #16
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d101      	bne.n	80019e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e12b      	b.n	8001c3e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d106      	bne.n	8001a00 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2200      	movs	r2, #0
 80019f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f7ff f8ba 	bl	8000b74 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2224      	movs	r2, #36	; 0x24
 8001a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f022 0201 	bic.w	r2, r2, #1
 8001a16:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001a26:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001a36:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001a38:	f003 face 	bl	8004fd8 <HAL_RCC_GetPCLK1Freq>
 8001a3c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	4a81      	ldr	r2, [pc, #516]	; (8001c48 <HAL_I2C_Init+0x274>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d807      	bhi.n	8001a58 <HAL_I2C_Init+0x84>
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	4a80      	ldr	r2, [pc, #512]	; (8001c4c <HAL_I2C_Init+0x278>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	bf94      	ite	ls
 8001a50:	2301      	movls	r3, #1
 8001a52:	2300      	movhi	r3, #0
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	e006      	b.n	8001a66 <HAL_I2C_Init+0x92>
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	4a7d      	ldr	r2, [pc, #500]	; (8001c50 <HAL_I2C_Init+0x27c>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	bf94      	ite	ls
 8001a60:	2301      	movls	r3, #1
 8001a62:	2300      	movhi	r3, #0
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d001      	beq.n	8001a6e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e0e7      	b.n	8001c3e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	4a78      	ldr	r2, [pc, #480]	; (8001c54 <HAL_I2C_Init+0x280>)
 8001a72:	fba2 2303 	umull	r2, r3, r2, r3
 8001a76:	0c9b      	lsrs	r3, r3, #18
 8001a78:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	68ba      	ldr	r2, [r7, #8]
 8001a8a:	430a      	orrs	r2, r1
 8001a8c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	6a1b      	ldr	r3, [r3, #32]
 8001a94:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	4a6a      	ldr	r2, [pc, #424]	; (8001c48 <HAL_I2C_Init+0x274>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d802      	bhi.n	8001aa8 <HAL_I2C_Init+0xd4>
 8001aa2:	68bb      	ldr	r3, [r7, #8]
 8001aa4:	3301      	adds	r3, #1
 8001aa6:	e009      	b.n	8001abc <HAL_I2C_Init+0xe8>
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001aae:	fb02 f303 	mul.w	r3, r2, r3
 8001ab2:	4a69      	ldr	r2, [pc, #420]	; (8001c58 <HAL_I2C_Init+0x284>)
 8001ab4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ab8:	099b      	lsrs	r3, r3, #6
 8001aba:	3301      	adds	r3, #1
 8001abc:	687a      	ldr	r2, [r7, #4]
 8001abe:	6812      	ldr	r2, [r2, #0]
 8001ac0:	430b      	orrs	r3, r1
 8001ac2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	69db      	ldr	r3, [r3, #28]
 8001aca:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001ace:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	495c      	ldr	r1, [pc, #368]	; (8001c48 <HAL_I2C_Init+0x274>)
 8001ad8:	428b      	cmp	r3, r1
 8001ada:	d819      	bhi.n	8001b10 <HAL_I2C_Init+0x13c>
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	1e59      	subs	r1, r3, #1
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	005b      	lsls	r3, r3, #1
 8001ae6:	fbb1 f3f3 	udiv	r3, r1, r3
 8001aea:	1c59      	adds	r1, r3, #1
 8001aec:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001af0:	400b      	ands	r3, r1
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d00a      	beq.n	8001b0c <HAL_I2C_Init+0x138>
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	1e59      	subs	r1, r3, #1
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	005b      	lsls	r3, r3, #1
 8001b00:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b04:	3301      	adds	r3, #1
 8001b06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b0a:	e051      	b.n	8001bb0 <HAL_I2C_Init+0x1dc>
 8001b0c:	2304      	movs	r3, #4
 8001b0e:	e04f      	b.n	8001bb0 <HAL_I2C_Init+0x1dc>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d111      	bne.n	8001b3c <HAL_I2C_Init+0x168>
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	1e58      	subs	r0, r3, #1
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6859      	ldr	r1, [r3, #4]
 8001b20:	460b      	mov	r3, r1
 8001b22:	005b      	lsls	r3, r3, #1
 8001b24:	440b      	add	r3, r1
 8001b26:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	bf0c      	ite	eq
 8001b34:	2301      	moveq	r3, #1
 8001b36:	2300      	movne	r3, #0
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	e012      	b.n	8001b62 <HAL_I2C_Init+0x18e>
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	1e58      	subs	r0, r3, #1
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6859      	ldr	r1, [r3, #4]
 8001b44:	460b      	mov	r3, r1
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	440b      	add	r3, r1
 8001b4a:	0099      	lsls	r1, r3, #2
 8001b4c:	440b      	add	r3, r1
 8001b4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b52:	3301      	adds	r3, #1
 8001b54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	bf0c      	ite	eq
 8001b5c:	2301      	moveq	r3, #1
 8001b5e:	2300      	movne	r3, #0
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d001      	beq.n	8001b6a <HAL_I2C_Init+0x196>
 8001b66:	2301      	movs	r3, #1
 8001b68:	e022      	b.n	8001bb0 <HAL_I2C_Init+0x1dc>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d10e      	bne.n	8001b90 <HAL_I2C_Init+0x1bc>
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	1e58      	subs	r0, r3, #1
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6859      	ldr	r1, [r3, #4]
 8001b7a:	460b      	mov	r3, r1
 8001b7c:	005b      	lsls	r3, r3, #1
 8001b7e:	440b      	add	r3, r1
 8001b80:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b84:	3301      	adds	r3, #1
 8001b86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b8e:	e00f      	b.n	8001bb0 <HAL_I2C_Init+0x1dc>
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	1e58      	subs	r0, r3, #1
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6859      	ldr	r1, [r3, #4]
 8001b98:	460b      	mov	r3, r1
 8001b9a:	009b      	lsls	r3, r3, #2
 8001b9c:	440b      	add	r3, r1
 8001b9e:	0099      	lsls	r1, r3, #2
 8001ba0:	440b      	add	r3, r1
 8001ba2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ba6:	3301      	adds	r3, #1
 8001ba8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001bb0:	6879      	ldr	r1, [r7, #4]
 8001bb2:	6809      	ldr	r1, [r1, #0]
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	69da      	ldr	r2, [r3, #28]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6a1b      	ldr	r3, [r3, #32]
 8001bca:	431a      	orrs	r2, r3
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	430a      	orrs	r2, r1
 8001bd2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001bde:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001be2:	687a      	ldr	r2, [r7, #4]
 8001be4:	6911      	ldr	r1, [r2, #16]
 8001be6:	687a      	ldr	r2, [r7, #4]
 8001be8:	68d2      	ldr	r2, [r2, #12]
 8001bea:	4311      	orrs	r1, r2
 8001bec:	687a      	ldr	r2, [r7, #4]
 8001bee:	6812      	ldr	r2, [r2, #0]
 8001bf0:	430b      	orrs	r3, r1
 8001bf2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	68db      	ldr	r3, [r3, #12]
 8001bfa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	695a      	ldr	r2, [r3, #20]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	699b      	ldr	r3, [r3, #24]
 8001c06:	431a      	orrs	r2, r3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	430a      	orrs	r2, r1
 8001c0e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f042 0201 	orr.w	r2, r2, #1
 8001c1e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2200      	movs	r2, #0
 8001c24:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2220      	movs	r2, #32
 8001c2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2200      	movs	r2, #0
 8001c32:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2200      	movs	r2, #0
 8001c38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001c3c:	2300      	movs	r3, #0
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3710      	adds	r7, #16
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	000186a0 	.word	0x000186a0
 8001c4c:	001e847f 	.word	0x001e847f
 8001c50:	003d08ff 	.word	0x003d08ff
 8001c54:	431bde83 	.word	0x431bde83
 8001c58:	10624dd3 	.word	0x10624dd3

08001c5c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b088      	sub	sp, #32
 8001c60:	af02      	add	r7, sp, #8
 8001c62:	60f8      	str	r0, [r7, #12]
 8001c64:	607a      	str	r2, [r7, #4]
 8001c66:	461a      	mov	r2, r3
 8001c68:	460b      	mov	r3, r1
 8001c6a:	817b      	strh	r3, [r7, #10]
 8001c6c:	4613      	mov	r3, r2
 8001c6e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001c70:	f7ff fb08 	bl	8001284 <HAL_GetTick>
 8001c74:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	2b20      	cmp	r3, #32
 8001c80:	f040 80e0 	bne.w	8001e44 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	9300      	str	r3, [sp, #0]
 8001c88:	2319      	movs	r3, #25
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	4970      	ldr	r1, [pc, #448]	; (8001e50 <HAL_I2C_Master_Transmit+0x1f4>)
 8001c8e:	68f8      	ldr	r0, [r7, #12]
 8001c90:	f002 fa3c 	bl	800410c <I2C_WaitOnFlagUntilTimeout>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d001      	beq.n	8001c9e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001c9a:	2302      	movs	r3, #2
 8001c9c:	e0d3      	b.n	8001e46 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d101      	bne.n	8001cac <HAL_I2C_Master_Transmit+0x50>
 8001ca8:	2302      	movs	r3, #2
 8001caa:	e0cc      	b.n	8001e46 <HAL_I2C_Master_Transmit+0x1ea>
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	2201      	movs	r2, #1
 8001cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 0301 	and.w	r3, r3, #1
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d007      	beq.n	8001cd2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f042 0201 	orr.w	r2, r2, #1
 8001cd0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ce0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	2221      	movs	r2, #33	; 0x21
 8001ce6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	2210      	movs	r2, #16
 8001cee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	687a      	ldr	r2, [r7, #4]
 8001cfc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	893a      	ldrh	r2, [r7, #8]
 8001d02:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d08:	b29a      	uxth	r2, r3
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	4a50      	ldr	r2, [pc, #320]	; (8001e54 <HAL_I2C_Master_Transmit+0x1f8>)
 8001d12:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001d14:	8979      	ldrh	r1, [r7, #10]
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	6a3a      	ldr	r2, [r7, #32]
 8001d1a:	68f8      	ldr	r0, [r7, #12]
 8001d1c:	f001 ffe4 	bl	8003ce8 <I2C_MasterRequestWrite>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d001      	beq.n	8001d2a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e08d      	b.n	8001e46 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	613b      	str	r3, [r7, #16]
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	695b      	ldr	r3, [r3, #20]
 8001d34:	613b      	str	r3, [r7, #16]
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	699b      	ldr	r3, [r3, #24]
 8001d3c:	613b      	str	r3, [r7, #16]
 8001d3e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001d40:	e066      	b.n	8001e10 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d42:	697a      	ldr	r2, [r7, #20]
 8001d44:	6a39      	ldr	r1, [r7, #32]
 8001d46:	68f8      	ldr	r0, [r7, #12]
 8001d48:	f002 fab6 	bl	80042b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d00d      	beq.n	8001d6e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d56:	2b04      	cmp	r3, #4
 8001d58:	d107      	bne.n	8001d6a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d68:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e06b      	b.n	8001e46 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d72:	781a      	ldrb	r2, [r3, #0]
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d7e:	1c5a      	adds	r2, r3, #1
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d88:	b29b      	uxth	r3, r3
 8001d8a:	3b01      	subs	r3, #1
 8001d8c:	b29a      	uxth	r2, r3
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d96:	3b01      	subs	r3, #1
 8001d98:	b29a      	uxth	r2, r3
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	695b      	ldr	r3, [r3, #20]
 8001da4:	f003 0304 	and.w	r3, r3, #4
 8001da8:	2b04      	cmp	r3, #4
 8001daa:	d11b      	bne.n	8001de4 <HAL_I2C_Master_Transmit+0x188>
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d017      	beq.n	8001de4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db8:	781a      	ldrb	r2, [r3, #0]
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc4:	1c5a      	adds	r2, r3, #1
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dce:	b29b      	uxth	r3, r3
 8001dd0:	3b01      	subs	r3, #1
 8001dd2:	b29a      	uxth	r2, r3
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ddc:	3b01      	subs	r3, #1
 8001dde:	b29a      	uxth	r2, r3
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001de4:	697a      	ldr	r2, [r7, #20]
 8001de6:	6a39      	ldr	r1, [r7, #32]
 8001de8:	68f8      	ldr	r0, [r7, #12]
 8001dea:	f002 faa6 	bl	800433a <I2C_WaitOnBTFFlagUntilTimeout>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d00d      	beq.n	8001e10 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df8:	2b04      	cmp	r3, #4
 8001dfa:	d107      	bne.n	8001e0c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e0a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e01a      	b.n	8001e46 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d194      	bne.n	8001d42 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e26:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	2220      	movs	r2, #32
 8001e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	2200      	movs	r2, #0
 8001e34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001e40:	2300      	movs	r3, #0
 8001e42:	e000      	b.n	8001e46 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001e44:	2302      	movs	r3, #2
  }
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3718      	adds	r7, #24
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	00100002 	.word	0x00100002
 8001e54:	ffff0000 	.word	0xffff0000

08001e58 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b08c      	sub	sp, #48	; 0x30
 8001e5c:	af02      	add	r7, sp, #8
 8001e5e:	60f8      	str	r0, [r7, #12]
 8001e60:	4608      	mov	r0, r1
 8001e62:	4611      	mov	r1, r2
 8001e64:	461a      	mov	r2, r3
 8001e66:	4603      	mov	r3, r0
 8001e68:	817b      	strh	r3, [r7, #10]
 8001e6a:	460b      	mov	r3, r1
 8001e6c:	813b      	strh	r3, [r7, #8]
 8001e6e:	4613      	mov	r3, r2
 8001e70:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001e72:	f7ff fa07 	bl	8001284 <HAL_GetTick>
 8001e76:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e7e:	b2db      	uxtb	r3, r3
 8001e80:	2b20      	cmp	r3, #32
 8001e82:	f040 8208 	bne.w	8002296 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e88:	9300      	str	r3, [sp, #0]
 8001e8a:	2319      	movs	r3, #25
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	497b      	ldr	r1, [pc, #492]	; (800207c <HAL_I2C_Mem_Read+0x224>)
 8001e90:	68f8      	ldr	r0, [r7, #12]
 8001e92:	f002 f93b 	bl	800410c <I2C_WaitOnFlagUntilTimeout>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d001      	beq.n	8001ea0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8001e9c:	2302      	movs	r3, #2
 8001e9e:	e1fb      	b.n	8002298 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d101      	bne.n	8001eae <HAL_I2C_Mem_Read+0x56>
 8001eaa:	2302      	movs	r3, #2
 8001eac:	e1f4      	b.n	8002298 <HAL_I2C_Mem_Read+0x440>
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0301 	and.w	r3, r3, #1
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d007      	beq.n	8001ed4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f042 0201 	orr.w	r2, r2, #1
 8001ed2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ee2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	2222      	movs	r2, #34	; 0x22
 8001ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	2240      	movs	r2, #64	; 0x40
 8001ef0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001efe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001f04:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f0a:	b29a      	uxth	r2, r3
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	4a5b      	ldr	r2, [pc, #364]	; (8002080 <HAL_I2C_Mem_Read+0x228>)
 8001f14:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001f16:	88f8      	ldrh	r0, [r7, #6]
 8001f18:	893a      	ldrh	r2, [r7, #8]
 8001f1a:	8979      	ldrh	r1, [r7, #10]
 8001f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1e:	9301      	str	r3, [sp, #4]
 8001f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f22:	9300      	str	r3, [sp, #0]
 8001f24:	4603      	mov	r3, r0
 8001f26:	68f8      	ldr	r0, [r7, #12]
 8001f28:	f001 ff60 	bl	8003dec <I2C_RequestMemoryRead>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d001      	beq.n	8001f36 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e1b0      	b.n	8002298 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d113      	bne.n	8001f66 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f3e:	2300      	movs	r3, #0
 8001f40:	623b      	str	r3, [r7, #32]
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	695b      	ldr	r3, [r3, #20]
 8001f48:	623b      	str	r3, [r7, #32]
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	699b      	ldr	r3, [r3, #24]
 8001f50:	623b      	str	r3, [r7, #32]
 8001f52:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f62:	601a      	str	r2, [r3, #0]
 8001f64:	e184      	b.n	8002270 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d11b      	bne.n	8001fa6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f7c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f7e:	2300      	movs	r3, #0
 8001f80:	61fb      	str	r3, [r7, #28]
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	695b      	ldr	r3, [r3, #20]
 8001f88:	61fb      	str	r3, [r7, #28]
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	699b      	ldr	r3, [r3, #24]
 8001f90:	61fb      	str	r3, [r7, #28]
 8001f92:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fa2:	601a      	str	r2, [r3, #0]
 8001fa4:	e164      	b.n	8002270 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001faa:	2b02      	cmp	r3, #2
 8001fac:	d11b      	bne.n	8001fe6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001fbc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001fcc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fce:	2300      	movs	r3, #0
 8001fd0:	61bb      	str	r3, [r7, #24]
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	695b      	ldr	r3, [r3, #20]
 8001fd8:	61bb      	str	r3, [r7, #24]
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	699b      	ldr	r3, [r3, #24]
 8001fe0:	61bb      	str	r3, [r7, #24]
 8001fe2:	69bb      	ldr	r3, [r7, #24]
 8001fe4:	e144      	b.n	8002270 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	617b      	str	r3, [r7, #20]
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	695b      	ldr	r3, [r3, #20]
 8001ff0:	617b      	str	r3, [r7, #20]
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	699b      	ldr	r3, [r3, #24]
 8001ff8:	617b      	str	r3, [r7, #20]
 8001ffa:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001ffc:	e138      	b.n	8002270 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002002:	2b03      	cmp	r3, #3
 8002004:	f200 80f1 	bhi.w	80021ea <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800200c:	2b01      	cmp	r3, #1
 800200e:	d123      	bne.n	8002058 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002010:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002012:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002014:	68f8      	ldr	r0, [r7, #12]
 8002016:	f002 fa03 	bl	8004420 <I2C_WaitOnRXNEFlagUntilTimeout>
 800201a:	4603      	mov	r3, r0
 800201c:	2b00      	cmp	r3, #0
 800201e:	d001      	beq.n	8002024 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	e139      	b.n	8002298 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	691a      	ldr	r2, [r3, #16]
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800202e:	b2d2      	uxtb	r2, r2
 8002030:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002036:	1c5a      	adds	r2, r3, #1
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002040:	3b01      	subs	r3, #1
 8002042:	b29a      	uxth	r2, r3
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800204c:	b29b      	uxth	r3, r3
 800204e:	3b01      	subs	r3, #1
 8002050:	b29a      	uxth	r2, r3
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002056:	e10b      	b.n	8002270 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800205c:	2b02      	cmp	r3, #2
 800205e:	d14e      	bne.n	80020fe <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002062:	9300      	str	r3, [sp, #0]
 8002064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002066:	2200      	movs	r2, #0
 8002068:	4906      	ldr	r1, [pc, #24]	; (8002084 <HAL_I2C_Mem_Read+0x22c>)
 800206a:	68f8      	ldr	r0, [r7, #12]
 800206c:	f002 f84e 	bl	800410c <I2C_WaitOnFlagUntilTimeout>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d008      	beq.n	8002088 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e10e      	b.n	8002298 <HAL_I2C_Mem_Read+0x440>
 800207a:	bf00      	nop
 800207c:	00100002 	.word	0x00100002
 8002080:	ffff0000 	.word	0xffff0000
 8002084:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002096:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	691a      	ldr	r2, [r3, #16]
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a2:	b2d2      	uxtb	r2, r2
 80020a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020aa:	1c5a      	adds	r2, r3, #1
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020b4:	3b01      	subs	r3, #1
 80020b6:	b29a      	uxth	r2, r3
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020c0:	b29b      	uxth	r3, r3
 80020c2:	3b01      	subs	r3, #1
 80020c4:	b29a      	uxth	r2, r3
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	691a      	ldr	r2, [r3, #16]
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d4:	b2d2      	uxtb	r2, r2
 80020d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020dc:	1c5a      	adds	r2, r3, #1
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020e6:	3b01      	subs	r3, #1
 80020e8:	b29a      	uxth	r2, r3
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020f2:	b29b      	uxth	r3, r3
 80020f4:	3b01      	subs	r3, #1
 80020f6:	b29a      	uxth	r2, r3
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80020fc:	e0b8      	b.n	8002270 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80020fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002100:	9300      	str	r3, [sp, #0]
 8002102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002104:	2200      	movs	r2, #0
 8002106:	4966      	ldr	r1, [pc, #408]	; (80022a0 <HAL_I2C_Mem_Read+0x448>)
 8002108:	68f8      	ldr	r0, [r7, #12]
 800210a:	f001 ffff 	bl	800410c <I2C_WaitOnFlagUntilTimeout>
 800210e:	4603      	mov	r3, r0
 8002110:	2b00      	cmp	r3, #0
 8002112:	d001      	beq.n	8002118 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002114:	2301      	movs	r3, #1
 8002116:	e0bf      	b.n	8002298 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002126:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	691a      	ldr	r2, [r3, #16]
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002132:	b2d2      	uxtb	r2, r2
 8002134:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800213a:	1c5a      	adds	r2, r3, #1
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002144:	3b01      	subs	r3, #1
 8002146:	b29a      	uxth	r2, r3
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002150:	b29b      	uxth	r3, r3
 8002152:	3b01      	subs	r3, #1
 8002154:	b29a      	uxth	r2, r3
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800215a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215c:	9300      	str	r3, [sp, #0]
 800215e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002160:	2200      	movs	r2, #0
 8002162:	494f      	ldr	r1, [pc, #316]	; (80022a0 <HAL_I2C_Mem_Read+0x448>)
 8002164:	68f8      	ldr	r0, [r7, #12]
 8002166:	f001 ffd1 	bl	800410c <I2C_WaitOnFlagUntilTimeout>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d001      	beq.n	8002174 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	e091      	b.n	8002298 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002182:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	691a      	ldr	r2, [r3, #16]
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800218e:	b2d2      	uxtb	r2, r2
 8002190:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002196:	1c5a      	adds	r2, r3, #1
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021a0:	3b01      	subs	r3, #1
 80021a2:	b29a      	uxth	r2, r3
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021ac:	b29b      	uxth	r3, r3
 80021ae:	3b01      	subs	r3, #1
 80021b0:	b29a      	uxth	r2, r3
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	691a      	ldr	r2, [r3, #16]
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c0:	b2d2      	uxtb	r2, r2
 80021c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c8:	1c5a      	adds	r2, r3, #1
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021d2:	3b01      	subs	r3, #1
 80021d4:	b29a      	uxth	r2, r3
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021de:	b29b      	uxth	r3, r3
 80021e0:	3b01      	subs	r3, #1
 80021e2:	b29a      	uxth	r2, r3
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80021e8:	e042      	b.n	8002270 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021ec:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80021ee:	68f8      	ldr	r0, [r7, #12]
 80021f0:	f002 f916 	bl	8004420 <I2C_WaitOnRXNEFlagUntilTimeout>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d001      	beq.n	80021fe <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e04c      	b.n	8002298 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	691a      	ldr	r2, [r3, #16]
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002208:	b2d2      	uxtb	r2, r2
 800220a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002210:	1c5a      	adds	r2, r3, #1
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800221a:	3b01      	subs	r3, #1
 800221c:	b29a      	uxth	r2, r3
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002226:	b29b      	uxth	r3, r3
 8002228:	3b01      	subs	r3, #1
 800222a:	b29a      	uxth	r2, r3
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	695b      	ldr	r3, [r3, #20]
 8002236:	f003 0304 	and.w	r3, r3, #4
 800223a:	2b04      	cmp	r3, #4
 800223c:	d118      	bne.n	8002270 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	691a      	ldr	r2, [r3, #16]
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002248:	b2d2      	uxtb	r2, r2
 800224a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002250:	1c5a      	adds	r2, r3, #1
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800225a:	3b01      	subs	r3, #1
 800225c:	b29a      	uxth	r2, r3
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002266:	b29b      	uxth	r3, r3
 8002268:	3b01      	subs	r3, #1
 800226a:	b29a      	uxth	r2, r3
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002274:	2b00      	cmp	r3, #0
 8002276:	f47f aec2 	bne.w	8001ffe <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	2220      	movs	r2, #32
 800227e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	2200      	movs	r2, #0
 8002286:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	2200      	movs	r2, #0
 800228e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002292:	2300      	movs	r3, #0
 8002294:	e000      	b.n	8002298 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002296:	2302      	movs	r3, #2
  }
}
 8002298:	4618      	mov	r0, r3
 800229a:	3728      	adds	r7, #40	; 0x28
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	00010004 	.word	0x00010004

080022a4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b08a      	sub	sp, #40	; 0x28
 80022a8:	af02      	add	r7, sp, #8
 80022aa:	60f8      	str	r0, [r7, #12]
 80022ac:	607a      	str	r2, [r7, #4]
 80022ae:	603b      	str	r3, [r7, #0]
 80022b0:	460b      	mov	r3, r1
 80022b2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80022b4:	f7fe ffe6 	bl	8001284 <HAL_GetTick>
 80022b8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80022ba:	2300      	movs	r3, #0
 80022bc:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	2b20      	cmp	r3, #32
 80022c8:	f040 8111 	bne.w	80024ee <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80022cc:	69fb      	ldr	r3, [r7, #28]
 80022ce:	9300      	str	r3, [sp, #0]
 80022d0:	2319      	movs	r3, #25
 80022d2:	2201      	movs	r2, #1
 80022d4:	4988      	ldr	r1, [pc, #544]	; (80024f8 <HAL_I2C_IsDeviceReady+0x254>)
 80022d6:	68f8      	ldr	r0, [r7, #12]
 80022d8:	f001 ff18 	bl	800410c <I2C_WaitOnFlagUntilTimeout>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d001      	beq.n	80022e6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80022e2:	2302      	movs	r3, #2
 80022e4:	e104      	b.n	80024f0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d101      	bne.n	80022f4 <HAL_I2C_IsDeviceReady+0x50>
 80022f0:	2302      	movs	r3, #2
 80022f2:	e0fd      	b.n	80024f0 <HAL_I2C_IsDeviceReady+0x24c>
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2201      	movs	r2, #1
 80022f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 0301 	and.w	r3, r3, #1
 8002306:	2b01      	cmp	r3, #1
 8002308:	d007      	beq.n	800231a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f042 0201 	orr.w	r2, r2, #1
 8002318:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002328:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	2224      	movs	r2, #36	; 0x24
 800232e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	2200      	movs	r2, #0
 8002336:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	4a70      	ldr	r2, [pc, #448]	; (80024fc <HAL_I2C_IsDeviceReady+0x258>)
 800233c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800234c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	9300      	str	r3, [sp, #0]
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	2200      	movs	r2, #0
 8002356:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800235a:	68f8      	ldr	r0, [r7, #12]
 800235c:	f001 fed6 	bl	800410c <I2C_WaitOnFlagUntilTimeout>
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	d00d      	beq.n	8002382 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002370:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002374:	d103      	bne.n	800237e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	f44f 7200 	mov.w	r2, #512	; 0x200
 800237c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800237e:	2303      	movs	r3, #3
 8002380:	e0b6      	b.n	80024f0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002382:	897b      	ldrh	r3, [r7, #10]
 8002384:	b2db      	uxtb	r3, r3
 8002386:	461a      	mov	r2, r3
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002390:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002392:	f7fe ff77 	bl	8001284 <HAL_GetTick>
 8002396:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	695b      	ldr	r3, [r3, #20]
 800239e:	f003 0302 	and.w	r3, r3, #2
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	bf0c      	ite	eq
 80023a6:	2301      	moveq	r3, #1
 80023a8:	2300      	movne	r3, #0
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	695b      	ldr	r3, [r3, #20]
 80023b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023bc:	bf0c      	ite	eq
 80023be:	2301      	moveq	r3, #1
 80023c0:	2300      	movne	r3, #0
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80023c6:	e025      	b.n	8002414 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80023c8:	f7fe ff5c 	bl	8001284 <HAL_GetTick>
 80023cc:	4602      	mov	r2, r0
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	683a      	ldr	r2, [r7, #0]
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d302      	bcc.n	80023de <HAL_I2C_IsDeviceReady+0x13a>
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d103      	bne.n	80023e6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	22a0      	movs	r2, #160	; 0xa0
 80023e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	695b      	ldr	r3, [r3, #20]
 80023ec:	f003 0302 	and.w	r3, r3, #2
 80023f0:	2b02      	cmp	r3, #2
 80023f2:	bf0c      	ite	eq
 80023f4:	2301      	moveq	r3, #1
 80023f6:	2300      	movne	r3, #0
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	695b      	ldr	r3, [r3, #20]
 8002402:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002406:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800240a:	bf0c      	ite	eq
 800240c:	2301      	moveq	r3, #1
 800240e:	2300      	movne	r3, #0
 8002410:	b2db      	uxtb	r3, r3
 8002412:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800241a:	b2db      	uxtb	r3, r3
 800241c:	2ba0      	cmp	r3, #160	; 0xa0
 800241e:	d005      	beq.n	800242c <HAL_I2C_IsDeviceReady+0x188>
 8002420:	7dfb      	ldrb	r3, [r7, #23]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d102      	bne.n	800242c <HAL_I2C_IsDeviceReady+0x188>
 8002426:	7dbb      	ldrb	r3, [r7, #22]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d0cd      	beq.n	80023c8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	2220      	movs	r2, #32
 8002430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	695b      	ldr	r3, [r3, #20]
 800243a:	f003 0302 	and.w	r3, r3, #2
 800243e:	2b02      	cmp	r3, #2
 8002440:	d129      	bne.n	8002496 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002450:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002452:	2300      	movs	r3, #0
 8002454:	613b      	str	r3, [r7, #16]
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	695b      	ldr	r3, [r3, #20]
 800245c:	613b      	str	r3, [r7, #16]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	699b      	ldr	r3, [r3, #24]
 8002464:	613b      	str	r3, [r7, #16]
 8002466:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002468:	69fb      	ldr	r3, [r7, #28]
 800246a:	9300      	str	r3, [sp, #0]
 800246c:	2319      	movs	r3, #25
 800246e:	2201      	movs	r2, #1
 8002470:	4921      	ldr	r1, [pc, #132]	; (80024f8 <HAL_I2C_IsDeviceReady+0x254>)
 8002472:	68f8      	ldr	r0, [r7, #12]
 8002474:	f001 fe4a 	bl	800410c <I2C_WaitOnFlagUntilTimeout>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d001      	beq.n	8002482 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e036      	b.n	80024f0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	2220      	movs	r2, #32
 8002486:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	2200      	movs	r2, #0
 800248e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002492:	2300      	movs	r3, #0
 8002494:	e02c      	b.n	80024f0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024a4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80024ae:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80024b0:	69fb      	ldr	r3, [r7, #28]
 80024b2:	9300      	str	r3, [sp, #0]
 80024b4:	2319      	movs	r3, #25
 80024b6:	2201      	movs	r2, #1
 80024b8:	490f      	ldr	r1, [pc, #60]	; (80024f8 <HAL_I2C_IsDeviceReady+0x254>)
 80024ba:	68f8      	ldr	r0, [r7, #12]
 80024bc:	f001 fe26 	bl	800410c <I2C_WaitOnFlagUntilTimeout>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d001      	beq.n	80024ca <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e012      	b.n	80024f0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80024ca:	69bb      	ldr	r3, [r7, #24]
 80024cc:	3301      	adds	r3, #1
 80024ce:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80024d0:	69ba      	ldr	r2, [r7, #24]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	429a      	cmp	r2, r3
 80024d6:	f4ff af32 	bcc.w	800233e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	2220      	movs	r2, #32
 80024de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	2200      	movs	r2, #0
 80024e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e000      	b.n	80024f0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80024ee:	2302      	movs	r3, #2
  }
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3720      	adds	r7, #32
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	00100002 	.word	0x00100002
 80024fc:	ffff0000 	.word	0xffff0000

08002500 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b088      	sub	sp, #32
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002508:	2300      	movs	r3, #0
 800250a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002518:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002520:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002528:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800252a:	7bfb      	ldrb	r3, [r7, #15]
 800252c:	2b10      	cmp	r3, #16
 800252e:	d003      	beq.n	8002538 <HAL_I2C_EV_IRQHandler+0x38>
 8002530:	7bfb      	ldrb	r3, [r7, #15]
 8002532:	2b40      	cmp	r3, #64	; 0x40
 8002534:	f040 80c1 	bne.w	80026ba <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	699b      	ldr	r3, [r3, #24]
 800253e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	695b      	ldr	r3, [r3, #20]
 8002546:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	f003 0301 	and.w	r3, r3, #1
 800254e:	2b00      	cmp	r3, #0
 8002550:	d10d      	bne.n	800256e <HAL_I2C_EV_IRQHandler+0x6e>
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002558:	d003      	beq.n	8002562 <HAL_I2C_EV_IRQHandler+0x62>
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002560:	d101      	bne.n	8002566 <HAL_I2C_EV_IRQHandler+0x66>
 8002562:	2301      	movs	r3, #1
 8002564:	e000      	b.n	8002568 <HAL_I2C_EV_IRQHandler+0x68>
 8002566:	2300      	movs	r3, #0
 8002568:	2b01      	cmp	r3, #1
 800256a:	f000 8132 	beq.w	80027d2 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	f003 0301 	and.w	r3, r3, #1
 8002574:	2b00      	cmp	r3, #0
 8002576:	d00c      	beq.n	8002592 <HAL_I2C_EV_IRQHandler+0x92>
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	0a5b      	lsrs	r3, r3, #9
 800257c:	f003 0301 	and.w	r3, r3, #1
 8002580:	2b00      	cmp	r3, #0
 8002582:	d006      	beq.n	8002592 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002584:	6878      	ldr	r0, [r7, #4]
 8002586:	f001 ffd0 	bl	800452a <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f000 fd91 	bl	80030b2 <I2C_Master_SB>
 8002590:	e092      	b.n	80026b8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	08db      	lsrs	r3, r3, #3
 8002596:	f003 0301 	and.w	r3, r3, #1
 800259a:	2b00      	cmp	r3, #0
 800259c:	d009      	beq.n	80025b2 <HAL_I2C_EV_IRQHandler+0xb2>
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	0a5b      	lsrs	r3, r3, #9
 80025a2:	f003 0301 	and.w	r3, r3, #1
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d003      	beq.n	80025b2 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	f000 fe07 	bl	80031be <I2C_Master_ADD10>
 80025b0:	e082      	b.n	80026b8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	085b      	lsrs	r3, r3, #1
 80025b6:	f003 0301 	and.w	r3, r3, #1
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d009      	beq.n	80025d2 <HAL_I2C_EV_IRQHandler+0xd2>
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	0a5b      	lsrs	r3, r3, #9
 80025c2:	f003 0301 	and.w	r3, r3, #1
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d003      	beq.n	80025d2 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f000 fe21 	bl	8003212 <I2C_Master_ADDR>
 80025d0:	e072      	b.n	80026b8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80025d2:	69bb      	ldr	r3, [r7, #24]
 80025d4:	089b      	lsrs	r3, r3, #2
 80025d6:	f003 0301 	and.w	r3, r3, #1
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d03b      	beq.n	8002656 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80025ec:	f000 80f3 	beq.w	80027d6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80025f0:	69fb      	ldr	r3, [r7, #28]
 80025f2:	09db      	lsrs	r3, r3, #7
 80025f4:	f003 0301 	and.w	r3, r3, #1
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d00f      	beq.n	800261c <HAL_I2C_EV_IRQHandler+0x11c>
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	0a9b      	lsrs	r3, r3, #10
 8002600:	f003 0301 	and.w	r3, r3, #1
 8002604:	2b00      	cmp	r3, #0
 8002606:	d009      	beq.n	800261c <HAL_I2C_EV_IRQHandler+0x11c>
 8002608:	69fb      	ldr	r3, [r7, #28]
 800260a:	089b      	lsrs	r3, r3, #2
 800260c:	f003 0301 	and.w	r3, r3, #1
 8002610:	2b00      	cmp	r3, #0
 8002612:	d103      	bne.n	800261c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	f000 fa01 	bl	8002a1c <I2C_MasterTransmit_TXE>
 800261a:	e04d      	b.n	80026b8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	089b      	lsrs	r3, r3, #2
 8002620:	f003 0301 	and.w	r3, r3, #1
 8002624:	2b00      	cmp	r3, #0
 8002626:	f000 80d6 	beq.w	80027d6 <HAL_I2C_EV_IRQHandler+0x2d6>
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	0a5b      	lsrs	r3, r3, #9
 800262e:	f003 0301 	and.w	r3, r3, #1
 8002632:	2b00      	cmp	r3, #0
 8002634:	f000 80cf 	beq.w	80027d6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002638:	7bbb      	ldrb	r3, [r7, #14]
 800263a:	2b21      	cmp	r3, #33	; 0x21
 800263c:	d103      	bne.n	8002646 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f000 fa88 	bl	8002b54 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002644:	e0c7      	b.n	80027d6 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8002646:	7bfb      	ldrb	r3, [r7, #15]
 8002648:	2b40      	cmp	r3, #64	; 0x40
 800264a:	f040 80c4 	bne.w	80027d6 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f000 faf6 	bl	8002c40 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002654:	e0bf      	b.n	80027d6 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002660:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002664:	f000 80b7 	beq.w	80027d6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	099b      	lsrs	r3, r3, #6
 800266c:	f003 0301 	and.w	r3, r3, #1
 8002670:	2b00      	cmp	r3, #0
 8002672:	d00f      	beq.n	8002694 <HAL_I2C_EV_IRQHandler+0x194>
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	0a9b      	lsrs	r3, r3, #10
 8002678:	f003 0301 	and.w	r3, r3, #1
 800267c:	2b00      	cmp	r3, #0
 800267e:	d009      	beq.n	8002694 <HAL_I2C_EV_IRQHandler+0x194>
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	089b      	lsrs	r3, r3, #2
 8002684:	f003 0301 	and.w	r3, r3, #1
 8002688:	2b00      	cmp	r3, #0
 800268a:	d103      	bne.n	8002694 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800268c:	6878      	ldr	r0, [r7, #4]
 800268e:	f000 fb6b 	bl	8002d68 <I2C_MasterReceive_RXNE>
 8002692:	e011      	b.n	80026b8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002694:	69fb      	ldr	r3, [r7, #28]
 8002696:	089b      	lsrs	r3, r3, #2
 8002698:	f003 0301 	and.w	r3, r3, #1
 800269c:	2b00      	cmp	r3, #0
 800269e:	f000 809a 	beq.w	80027d6 <HAL_I2C_EV_IRQHandler+0x2d6>
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	0a5b      	lsrs	r3, r3, #9
 80026a6:	f003 0301 	and.w	r3, r3, #1
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	f000 8093 	beq.w	80027d6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	f000 fc14 	bl	8002ede <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80026b6:	e08e      	b.n	80027d6 <HAL_I2C_EV_IRQHandler+0x2d6>
 80026b8:	e08d      	b.n	80027d6 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d004      	beq.n	80026cc <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	695b      	ldr	r3, [r3, #20]
 80026c8:	61fb      	str	r3, [r7, #28]
 80026ca:	e007      	b.n	80026dc <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	699b      	ldr	r3, [r3, #24]
 80026d2:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	695b      	ldr	r3, [r3, #20]
 80026da:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	085b      	lsrs	r3, r3, #1
 80026e0:	f003 0301 	and.w	r3, r3, #1
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d012      	beq.n	800270e <HAL_I2C_EV_IRQHandler+0x20e>
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	0a5b      	lsrs	r3, r3, #9
 80026ec:	f003 0301 	and.w	r3, r3, #1
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d00c      	beq.n	800270e <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d003      	beq.n	8002704 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	699b      	ldr	r3, [r3, #24]
 8002702:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002704:	69b9      	ldr	r1, [r7, #24]
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	f000 ffd2 	bl	80036b0 <I2C_Slave_ADDR>
 800270c:	e066      	b.n	80027dc <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	091b      	lsrs	r3, r3, #4
 8002712:	f003 0301 	and.w	r3, r3, #1
 8002716:	2b00      	cmp	r3, #0
 8002718:	d009      	beq.n	800272e <HAL_I2C_EV_IRQHandler+0x22e>
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	0a5b      	lsrs	r3, r3, #9
 800271e:	f003 0301 	and.w	r3, r3, #1
 8002722:	2b00      	cmp	r3, #0
 8002724:	d003      	beq.n	800272e <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f001 f80c 	bl	8003744 <I2C_Slave_STOPF>
 800272c:	e056      	b.n	80027dc <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800272e:	7bbb      	ldrb	r3, [r7, #14]
 8002730:	2b21      	cmp	r3, #33	; 0x21
 8002732:	d002      	beq.n	800273a <HAL_I2C_EV_IRQHandler+0x23a>
 8002734:	7bbb      	ldrb	r3, [r7, #14]
 8002736:	2b29      	cmp	r3, #41	; 0x29
 8002738:	d125      	bne.n	8002786 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	09db      	lsrs	r3, r3, #7
 800273e:	f003 0301 	and.w	r3, r3, #1
 8002742:	2b00      	cmp	r3, #0
 8002744:	d00f      	beq.n	8002766 <HAL_I2C_EV_IRQHandler+0x266>
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	0a9b      	lsrs	r3, r3, #10
 800274a:	f003 0301 	and.w	r3, r3, #1
 800274e:	2b00      	cmp	r3, #0
 8002750:	d009      	beq.n	8002766 <HAL_I2C_EV_IRQHandler+0x266>
 8002752:	69fb      	ldr	r3, [r7, #28]
 8002754:	089b      	lsrs	r3, r3, #2
 8002756:	f003 0301 	and.w	r3, r3, #1
 800275a:	2b00      	cmp	r3, #0
 800275c:	d103      	bne.n	8002766 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f000 fee8 	bl	8003534 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002764:	e039      	b.n	80027da <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	089b      	lsrs	r3, r3, #2
 800276a:	f003 0301 	and.w	r3, r3, #1
 800276e:	2b00      	cmp	r3, #0
 8002770:	d033      	beq.n	80027da <HAL_I2C_EV_IRQHandler+0x2da>
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	0a5b      	lsrs	r3, r3, #9
 8002776:	f003 0301 	and.w	r3, r3, #1
 800277a:	2b00      	cmp	r3, #0
 800277c:	d02d      	beq.n	80027da <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f000 ff15 	bl	80035ae <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002784:	e029      	b.n	80027da <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	099b      	lsrs	r3, r3, #6
 800278a:	f003 0301 	and.w	r3, r3, #1
 800278e:	2b00      	cmp	r3, #0
 8002790:	d00f      	beq.n	80027b2 <HAL_I2C_EV_IRQHandler+0x2b2>
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	0a9b      	lsrs	r3, r3, #10
 8002796:	f003 0301 	and.w	r3, r3, #1
 800279a:	2b00      	cmp	r3, #0
 800279c:	d009      	beq.n	80027b2 <HAL_I2C_EV_IRQHandler+0x2b2>
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	089b      	lsrs	r3, r3, #2
 80027a2:	f003 0301 	and.w	r3, r3, #1
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d103      	bne.n	80027b2 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f000 ff20 	bl	80035f0 <I2C_SlaveReceive_RXNE>
 80027b0:	e014      	b.n	80027dc <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	089b      	lsrs	r3, r3, #2
 80027b6:	f003 0301 	and.w	r3, r3, #1
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d00e      	beq.n	80027dc <HAL_I2C_EV_IRQHandler+0x2dc>
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	0a5b      	lsrs	r3, r3, #9
 80027c2:	f003 0301 	and.w	r3, r3, #1
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d008      	beq.n	80027dc <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	f000 ff4e 	bl	800366c <I2C_SlaveReceive_BTF>
 80027d0:	e004      	b.n	80027dc <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80027d2:	bf00      	nop
 80027d4:	e002      	b.n	80027dc <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80027d6:	bf00      	nop
 80027d8:	e000      	b.n	80027dc <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80027da:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80027dc:	3720      	adds	r7, #32
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}

080027e2 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80027e2:	b580      	push	{r7, lr}
 80027e4:	b08a      	sub	sp, #40	; 0x28
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	695b      	ldr	r3, [r3, #20]
 80027f0:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80027fa:	2300      	movs	r3, #0
 80027fc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002804:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002806:	6a3b      	ldr	r3, [r7, #32]
 8002808:	0a1b      	lsrs	r3, r3, #8
 800280a:	f003 0301 	and.w	r3, r3, #1
 800280e:	2b00      	cmp	r3, #0
 8002810:	d00e      	beq.n	8002830 <HAL_I2C_ER_IRQHandler+0x4e>
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	0a1b      	lsrs	r3, r3, #8
 8002816:	f003 0301 	and.w	r3, r3, #1
 800281a:	2b00      	cmp	r3, #0
 800281c:	d008      	beq.n	8002830 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800281e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002820:	f043 0301 	orr.w	r3, r3, #1
 8002824:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800282e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002830:	6a3b      	ldr	r3, [r7, #32]
 8002832:	0a5b      	lsrs	r3, r3, #9
 8002834:	f003 0301 	and.w	r3, r3, #1
 8002838:	2b00      	cmp	r3, #0
 800283a:	d00e      	beq.n	800285a <HAL_I2C_ER_IRQHandler+0x78>
 800283c:	69fb      	ldr	r3, [r7, #28]
 800283e:	0a1b      	lsrs	r3, r3, #8
 8002840:	f003 0301 	and.w	r3, r3, #1
 8002844:	2b00      	cmp	r3, #0
 8002846:	d008      	beq.n	800285a <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8002848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284a:	f043 0302 	orr.w	r3, r3, #2
 800284e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8002858:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800285a:	6a3b      	ldr	r3, [r7, #32]
 800285c:	0a9b      	lsrs	r3, r3, #10
 800285e:	f003 0301 	and.w	r3, r3, #1
 8002862:	2b00      	cmp	r3, #0
 8002864:	d03f      	beq.n	80028e6 <HAL_I2C_ER_IRQHandler+0x104>
 8002866:	69fb      	ldr	r3, [r7, #28]
 8002868:	0a1b      	lsrs	r3, r3, #8
 800286a:	f003 0301 	and.w	r3, r3, #1
 800286e:	2b00      	cmp	r3, #0
 8002870:	d039      	beq.n	80028e6 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8002872:	7efb      	ldrb	r3, [r7, #27]
 8002874:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800287a:	b29b      	uxth	r3, r3
 800287c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002884:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800288a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800288c:	7ebb      	ldrb	r3, [r7, #26]
 800288e:	2b20      	cmp	r3, #32
 8002890:	d112      	bne.n	80028b8 <HAL_I2C_ER_IRQHandler+0xd6>
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d10f      	bne.n	80028b8 <HAL_I2C_ER_IRQHandler+0xd6>
 8002898:	7cfb      	ldrb	r3, [r7, #19]
 800289a:	2b21      	cmp	r3, #33	; 0x21
 800289c:	d008      	beq.n	80028b0 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800289e:	7cfb      	ldrb	r3, [r7, #19]
 80028a0:	2b29      	cmp	r3, #41	; 0x29
 80028a2:	d005      	beq.n	80028b0 <HAL_I2C_ER_IRQHandler+0xce>
 80028a4:	7cfb      	ldrb	r3, [r7, #19]
 80028a6:	2b28      	cmp	r3, #40	; 0x28
 80028a8:	d106      	bne.n	80028b8 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2b21      	cmp	r3, #33	; 0x21
 80028ae:	d103      	bne.n	80028b8 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	f001 f877 	bl	80039a4 <I2C_Slave_AF>
 80028b6:	e016      	b.n	80028e6 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80028c0:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80028c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c4:	f043 0304 	orr.w	r3, r3, #4
 80028c8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80028ca:	7efb      	ldrb	r3, [r7, #27]
 80028cc:	2b10      	cmp	r3, #16
 80028ce:	d002      	beq.n	80028d6 <HAL_I2C_ER_IRQHandler+0xf4>
 80028d0:	7efb      	ldrb	r3, [r7, #27]
 80028d2:	2b40      	cmp	r3, #64	; 0x40
 80028d4:	d107      	bne.n	80028e6 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028e4:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80028e6:	6a3b      	ldr	r3, [r7, #32]
 80028e8:	0adb      	lsrs	r3, r3, #11
 80028ea:	f003 0301 	and.w	r3, r3, #1
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d00e      	beq.n	8002910 <HAL_I2C_ER_IRQHandler+0x12e>
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	0a1b      	lsrs	r3, r3, #8
 80028f6:	f003 0301 	and.w	r3, r3, #1
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d008      	beq.n	8002910 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80028fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002900:	f043 0308 	orr.w	r3, r3, #8
 8002904:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800290e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8002910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002912:	2b00      	cmp	r3, #0
 8002914:	d008      	beq.n	8002928 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800291a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291c:	431a      	orrs	r2, r3
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f001 f8ae 	bl	8003a84 <I2C_ITError>
  }
}
 8002928:	bf00      	nop
 800292a:	3728      	adds	r7, #40	; 0x28
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}

08002930 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002930:	b480      	push	{r7}
 8002932:	b083      	sub	sp, #12
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002938:	bf00      	nop
 800293a:	370c      	adds	r7, #12
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr

08002944 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002944:	b480      	push	{r7}
 8002946:	b083      	sub	sp, #12
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800294c:	bf00      	nop
 800294e:	370c      	adds	r7, #12
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr

08002958 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002958:	b480      	push	{r7}
 800295a:	b083      	sub	sp, #12
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002960:	bf00      	nop
 8002962:	370c      	adds	r7, #12
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr

0800296c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800296c:	b480      	push	{r7}
 800296e:	b083      	sub	sp, #12
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002974:	bf00      	nop
 8002976:	370c      	adds	r7, #12
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr

08002980 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002980:	b480      	push	{r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
 8002988:	460b      	mov	r3, r1
 800298a:	70fb      	strb	r3, [r7, #3]
 800298c:	4613      	mov	r3, r2
 800298e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002990:	bf00      	nop
 8002992:	370c      	adds	r7, #12
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr

0800299c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800299c:	b480      	push	{r7}
 800299e:	b083      	sub	sp, #12
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80029a4:	bf00      	nop
 80029a6:	370c      	adds	r7, #12
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr

080029b0 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b083      	sub	sp, #12
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80029b8:	bf00      	nop
 80029ba:	370c      	adds	r7, #12
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr

080029c4 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b083      	sub	sp, #12
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80029cc:	bf00      	nop
 80029ce:	370c      	adds	r7, #12
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr

080029d8 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80029d8:	b480      	push	{r7}
 80029da:	b083      	sub	sp, #12
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80029e0:	bf00      	nop
 80029e2:	370c      	adds	r7, #12
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr

080029ec <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b083      	sub	sp, #12
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80029f4:	bf00      	nop
 80029f6:	370c      	adds	r7, #12
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr

08002a00 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a0e:	b2db      	uxtb	r3, r3
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	370c      	adds	r7, #12
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr

08002a1c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b084      	sub	sp, #16
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a2a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a32:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a38:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d150      	bne.n	8002ae4 <I2C_MasterTransmit_TXE+0xc8>
 8002a42:	7bfb      	ldrb	r3, [r7, #15]
 8002a44:	2b21      	cmp	r3, #33	; 0x21
 8002a46:	d14d      	bne.n	8002ae4 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	2b08      	cmp	r3, #8
 8002a4c:	d01d      	beq.n	8002a8a <I2C_MasterTransmit_TXE+0x6e>
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	2b20      	cmp	r3, #32
 8002a52:	d01a      	beq.n	8002a8a <I2C_MasterTransmit_TXE+0x6e>
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002a5a:	d016      	beq.n	8002a8a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	685a      	ldr	r2, [r3, #4]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002a6a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2211      	movs	r2, #17
 8002a70:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2200      	movs	r2, #0
 8002a76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2220      	movs	r2, #32
 8002a7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f7ff ff54 	bl	8002930 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002a88:	e060      	b.n	8002b4c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	685a      	ldr	r2, [r3, #4]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002a98:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002aa8:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2200      	movs	r2, #0
 8002aae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2220      	movs	r2, #32
 8002ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	2b40      	cmp	r3, #64	; 0x40
 8002ac2:	d107      	bne.n	8002ad4 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002acc:	6878      	ldr	r0, [r7, #4]
 8002ace:	f7ff ff6f 	bl	80029b0 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002ad2:	e03b      	b.n	8002b4c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	f7ff ff27 	bl	8002930 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002ae2:	e033      	b.n	8002b4c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002ae4:	7bfb      	ldrb	r3, [r7, #15]
 8002ae6:	2b21      	cmp	r3, #33	; 0x21
 8002ae8:	d005      	beq.n	8002af6 <I2C_MasterTransmit_TXE+0xda>
 8002aea:	7bbb      	ldrb	r3, [r7, #14]
 8002aec:	2b40      	cmp	r3, #64	; 0x40
 8002aee:	d12d      	bne.n	8002b4c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002af0:	7bfb      	ldrb	r3, [r7, #15]
 8002af2:	2b22      	cmp	r3, #34	; 0x22
 8002af4:	d12a      	bne.n	8002b4c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002afa:	b29b      	uxth	r3, r3
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d108      	bne.n	8002b12 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	685a      	ldr	r2, [r3, #4]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b0e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002b10:	e01c      	b.n	8002b4c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	2b40      	cmp	r3, #64	; 0x40
 8002b1c:	d103      	bne.n	8002b26 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f000 f88e 	bl	8002c40 <I2C_MemoryTransmit_TXE_BTF>
}
 8002b24:	e012      	b.n	8002b4c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b2a:	781a      	ldrb	r2, [r3, #0]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b36:	1c5a      	adds	r2, r3, #1
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b40:	b29b      	uxth	r3, r3
 8002b42:	3b01      	subs	r3, #1
 8002b44:	b29a      	uxth	r2, r3
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002b4a:	e7ff      	b.n	8002b4c <I2C_MasterTransmit_TXE+0x130>
 8002b4c:	bf00      	nop
 8002b4e:	3710      	adds	r7, #16
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}

08002b54 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b084      	sub	sp, #16
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b60:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	2b21      	cmp	r3, #33	; 0x21
 8002b6c:	d164      	bne.n	8002c38 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b72:	b29b      	uxth	r3, r3
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d012      	beq.n	8002b9e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b7c:	781a      	ldrb	r2, [r3, #0]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b88:	1c5a      	adds	r2, r3, #1
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b92:	b29b      	uxth	r3, r3
 8002b94:	3b01      	subs	r3, #1
 8002b96:	b29a      	uxth	r2, r3
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8002b9c:	e04c      	b.n	8002c38 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2b08      	cmp	r3, #8
 8002ba2:	d01d      	beq.n	8002be0 <I2C_MasterTransmit_BTF+0x8c>
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2b20      	cmp	r3, #32
 8002ba8:	d01a      	beq.n	8002be0 <I2C_MasterTransmit_BTF+0x8c>
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002bb0:	d016      	beq.n	8002be0 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	685a      	ldr	r2, [r3, #4]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002bc0:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2211      	movs	r2, #17
 8002bc6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2220      	movs	r2, #32
 8002bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002bd8:	6878      	ldr	r0, [r7, #4]
 8002bda:	f7ff fea9 	bl	8002930 <HAL_I2C_MasterTxCpltCallback>
}
 8002bde:	e02b      	b.n	8002c38 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	685a      	ldr	r2, [r3, #4]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002bee:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bfe:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2200      	movs	r2, #0
 8002c04:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2220      	movs	r2, #32
 8002c0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	2b40      	cmp	r3, #64	; 0x40
 8002c18:	d107      	bne.n	8002c2a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f7ff fec4 	bl	80029b0 <HAL_I2C_MemTxCpltCallback>
}
 8002c28:	e006      	b.n	8002c38 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f7ff fe7c 	bl	8002930 <HAL_I2C_MasterTxCpltCallback>
}
 8002c38:	bf00      	nop
 8002c3a:	3710      	adds	r7, #16
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}

08002c40 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b084      	sub	sp, #16
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c4e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d11d      	bne.n	8002c94 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d10b      	bne.n	8002c78 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c64:	b2da      	uxtb	r2, r3
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c70:	1c9a      	adds	r2, r3, #2
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8002c76:	e073      	b.n	8002d60 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c7c:	b29b      	uxth	r3, r3
 8002c7e:	121b      	asrs	r3, r3, #8
 8002c80:	b2da      	uxtb	r2, r3
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c8c:	1c5a      	adds	r2, r3, #1
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002c92:	e065      	b.n	8002d60 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d10b      	bne.n	8002cb4 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ca0:	b2da      	uxtb	r2, r3
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cac:	1c5a      	adds	r2, r3, #1
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002cb2:	e055      	b.n	8002d60 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cb8:	2b02      	cmp	r3, #2
 8002cba:	d151      	bne.n	8002d60 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8002cbc:	7bfb      	ldrb	r3, [r7, #15]
 8002cbe:	2b22      	cmp	r3, #34	; 0x22
 8002cc0:	d10d      	bne.n	8002cde <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002cd0:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cd6:	1c5a      	adds	r2, r3, #1
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002cdc:	e040      	b.n	8002d60 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ce2:	b29b      	uxth	r3, r3
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d015      	beq.n	8002d14 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8002ce8:	7bfb      	ldrb	r3, [r7, #15]
 8002cea:	2b21      	cmp	r3, #33	; 0x21
 8002cec:	d112      	bne.n	8002d14 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf2:	781a      	ldrb	r2, [r3, #0]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cfe:	1c5a      	adds	r2, r3, #1
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d08:	b29b      	uxth	r3, r3
 8002d0a:	3b01      	subs	r3, #1
 8002d0c:	b29a      	uxth	r2, r3
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002d12:	e025      	b.n	8002d60 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d18:	b29b      	uxth	r3, r3
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d120      	bne.n	8002d60 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8002d1e:	7bfb      	ldrb	r3, [r7, #15]
 8002d20:	2b21      	cmp	r3, #33	; 0x21
 8002d22:	d11d      	bne.n	8002d60 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	685a      	ldr	r2, [r3, #4]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002d32:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d42:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2200      	movs	r2, #0
 8002d48:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2220      	movs	r2, #32
 8002d4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2200      	movs	r2, #0
 8002d56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f7ff fe28 	bl	80029b0 <HAL_I2C_MemTxCpltCallback>
}
 8002d60:	bf00      	nop
 8002d62:	3710      	adds	r7, #16
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}

08002d68 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b084      	sub	sp, #16
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	2b22      	cmp	r3, #34	; 0x22
 8002d7a:	f040 80ac 	bne.w	8002ed6 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2b03      	cmp	r3, #3
 8002d8a:	d921      	bls.n	8002dd0 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	691a      	ldr	r2, [r3, #16]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d96:	b2d2      	uxtb	r2, r2
 8002d98:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d9e:	1c5a      	adds	r2, r3, #1
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002da8:	b29b      	uxth	r3, r3
 8002daa:	3b01      	subs	r3, #1
 8002dac:	b29a      	uxth	r2, r3
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002db6:	b29b      	uxth	r3, r3
 8002db8:	2b03      	cmp	r3, #3
 8002dba:	f040 808c 	bne.w	8002ed6 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	685a      	ldr	r2, [r3, #4]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dcc:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8002dce:	e082      	b.n	8002ed6 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dd4:	2b02      	cmp	r3, #2
 8002dd6:	d075      	beq.n	8002ec4 <I2C_MasterReceive_RXNE+0x15c>
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	d002      	beq.n	8002de4 <I2C_MasterReceive_RXNE+0x7c>
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d16f      	bne.n	8002ec4 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002de4:	6878      	ldr	r0, [r7, #4]
 8002de6:	f001 fae9 	bl	80043bc <I2C_WaitOnSTOPRequestThroughIT>
 8002dea:	4603      	mov	r3, r0
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d142      	bne.n	8002e76 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dfe:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	685a      	ldr	r2, [r3, #4]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002e0e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	691a      	ldr	r2, [r3, #16]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1a:	b2d2      	uxtb	r2, r2
 8002e1c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e22:	1c5a      	adds	r2, r3, #1
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	3b01      	subs	r3, #1
 8002e30:	b29a      	uxth	r2, r3
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2220      	movs	r2, #32
 8002e3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	2b40      	cmp	r3, #64	; 0x40
 8002e48:	d10a      	bne.n	8002e60 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2200      	movs	r2, #0
 8002e56:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	f7ff fdb3 	bl	80029c4 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002e5e:	e03a      	b.n	8002ed6 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2200      	movs	r2, #0
 8002e64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2212      	movs	r2, #18
 8002e6c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	f7ff fd68 	bl	8002944 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002e74:	e02f      	b.n	8002ed6 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	685a      	ldr	r2, [r3, #4]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002e84:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	691a      	ldr	r2, [r3, #16]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e90:	b2d2      	uxtb	r2, r2
 8002e92:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e98:	1c5a      	adds	r2, r3, #1
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ea2:	b29b      	uxth	r3, r3
 8002ea4:	3b01      	subs	r3, #1
 8002ea6:	b29a      	uxth	r2, r3
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2220      	movs	r2, #32
 8002eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8002ebc:	6878      	ldr	r0, [r7, #4]
 8002ebe:	f7ff fd8b 	bl	80029d8 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002ec2:	e008      	b.n	8002ed6 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	685a      	ldr	r2, [r3, #4]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ed2:	605a      	str	r2, [r3, #4]
}
 8002ed4:	e7ff      	b.n	8002ed6 <I2C_MasterReceive_RXNE+0x16e>
 8002ed6:	bf00      	nop
 8002ed8:	3710      	adds	r7, #16
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}

08002ede <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002ede:	b580      	push	{r7, lr}
 8002ee0:	b084      	sub	sp, #16
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eea:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ef0:	b29b      	uxth	r3, r3
 8002ef2:	2b04      	cmp	r3, #4
 8002ef4:	d11b      	bne.n	8002f2e <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	685a      	ldr	r2, [r3, #4]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f04:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	691a      	ldr	r2, [r3, #16]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f10:	b2d2      	uxtb	r2, r2
 8002f12:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f18:	1c5a      	adds	r2, r3, #1
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f22:	b29b      	uxth	r3, r3
 8002f24:	3b01      	subs	r3, #1
 8002f26:	b29a      	uxth	r2, r3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8002f2c:	e0bd      	b.n	80030aa <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f32:	b29b      	uxth	r3, r3
 8002f34:	2b03      	cmp	r3, #3
 8002f36:	d129      	bne.n	8002f8c <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	685a      	ldr	r2, [r3, #4]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f46:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2b04      	cmp	r3, #4
 8002f4c:	d00a      	beq.n	8002f64 <I2C_MasterReceive_BTF+0x86>
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2b02      	cmp	r3, #2
 8002f52:	d007      	beq.n	8002f64 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f62:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	691a      	ldr	r2, [r3, #16]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f6e:	b2d2      	uxtb	r2, r2
 8002f70:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f76:	1c5a      	adds	r2, r3, #1
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f80:	b29b      	uxth	r3, r3
 8002f82:	3b01      	subs	r3, #1
 8002f84:	b29a      	uxth	r2, r3
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002f8a:	e08e      	b.n	80030aa <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f90:	b29b      	uxth	r3, r3
 8002f92:	2b02      	cmp	r3, #2
 8002f94:	d176      	bne.n	8003084 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d002      	beq.n	8002fa2 <I2C_MasterReceive_BTF+0xc4>
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2b10      	cmp	r3, #16
 8002fa0:	d108      	bne.n	8002fb4 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fb0:	601a      	str	r2, [r3, #0]
 8002fb2:	e019      	b.n	8002fe8 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2b04      	cmp	r3, #4
 8002fb8:	d002      	beq.n	8002fc0 <I2C_MasterReceive_BTF+0xe2>
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2b02      	cmp	r3, #2
 8002fbe:	d108      	bne.n	8002fd2 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002fce:	601a      	str	r2, [r3, #0]
 8002fd0:	e00a      	b.n	8002fe8 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2b10      	cmp	r3, #16
 8002fd6:	d007      	beq.n	8002fe8 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fe6:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	691a      	ldr	r2, [r3, #16]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff2:	b2d2      	uxtb	r2, r2
 8002ff4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffa:	1c5a      	adds	r2, r3, #1
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003004:	b29b      	uxth	r3, r3
 8003006:	3b01      	subs	r3, #1
 8003008:	b29a      	uxth	r2, r3
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	691a      	ldr	r2, [r3, #16]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003018:	b2d2      	uxtb	r2, r2
 800301a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003020:	1c5a      	adds	r2, r3, #1
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800302a:	b29b      	uxth	r3, r3
 800302c:	3b01      	subs	r3, #1
 800302e:	b29a      	uxth	r2, r3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	685a      	ldr	r2, [r3, #4]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003042:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2220      	movs	r2, #32
 8003048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003052:	b2db      	uxtb	r3, r3
 8003054:	2b40      	cmp	r3, #64	; 0x40
 8003056:	d10a      	bne.n	800306e <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2200      	movs	r2, #0
 800305c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2200      	movs	r2, #0
 8003064:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f7ff fcac 	bl	80029c4 <HAL_I2C_MemRxCpltCallback>
}
 800306c:	e01d      	b.n	80030aa <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2200      	movs	r2, #0
 8003072:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2212      	movs	r2, #18
 800307a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800307c:	6878      	ldr	r0, [r7, #4]
 800307e:	f7ff fc61 	bl	8002944 <HAL_I2C_MasterRxCpltCallback>
}
 8003082:	e012      	b.n	80030aa <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	691a      	ldr	r2, [r3, #16]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800308e:	b2d2      	uxtb	r2, r2
 8003090:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003096:	1c5a      	adds	r2, r3, #1
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030a0:	b29b      	uxth	r3, r3
 80030a2:	3b01      	subs	r3, #1
 80030a4:	b29a      	uxth	r2, r3
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80030aa:	bf00      	nop
 80030ac:	3710      	adds	r7, #16
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}

080030b2 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80030b2:	b480      	push	{r7}
 80030b4:	b083      	sub	sp, #12
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	2b40      	cmp	r3, #64	; 0x40
 80030c4:	d117      	bne.n	80030f6 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d109      	bne.n	80030e2 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	461a      	mov	r2, r3
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80030de:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80030e0:	e067      	b.n	80031b2 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	f043 0301 	orr.w	r3, r3, #1
 80030ec:	b2da      	uxtb	r2, r3
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	611a      	str	r2, [r3, #16]
}
 80030f4:	e05d      	b.n	80031b2 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	691b      	ldr	r3, [r3, #16]
 80030fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80030fe:	d133      	bne.n	8003168 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003106:	b2db      	uxtb	r3, r3
 8003108:	2b21      	cmp	r3, #33	; 0x21
 800310a:	d109      	bne.n	8003120 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003110:	b2db      	uxtb	r3, r3
 8003112:	461a      	mov	r2, r3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800311c:	611a      	str	r2, [r3, #16]
 800311e:	e008      	b.n	8003132 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003124:	b2db      	uxtb	r3, r3
 8003126:	f043 0301 	orr.w	r3, r3, #1
 800312a:	b2da      	uxtb	r2, r3
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003136:	2b00      	cmp	r3, #0
 8003138:	d004      	beq.n	8003144 <I2C_Master_SB+0x92>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800313e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003140:	2b00      	cmp	r3, #0
 8003142:	d108      	bne.n	8003156 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003148:	2b00      	cmp	r3, #0
 800314a:	d032      	beq.n	80031b2 <I2C_Master_SB+0x100>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003150:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003152:	2b00      	cmp	r3, #0
 8003154:	d02d      	beq.n	80031b2 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	685a      	ldr	r2, [r3, #4]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003164:	605a      	str	r2, [r3, #4]
}
 8003166:	e024      	b.n	80031b2 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800316c:	2b00      	cmp	r3, #0
 800316e:	d10e      	bne.n	800318e <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003174:	b29b      	uxth	r3, r3
 8003176:	11db      	asrs	r3, r3, #7
 8003178:	b2db      	uxtb	r3, r3
 800317a:	f003 0306 	and.w	r3, r3, #6
 800317e:	b2db      	uxtb	r3, r3
 8003180:	f063 030f 	orn	r3, r3, #15
 8003184:	b2da      	uxtb	r2, r3
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	611a      	str	r2, [r3, #16]
}
 800318c:	e011      	b.n	80031b2 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003192:	2b01      	cmp	r3, #1
 8003194:	d10d      	bne.n	80031b2 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800319a:	b29b      	uxth	r3, r3
 800319c:	11db      	asrs	r3, r3, #7
 800319e:	b2db      	uxtb	r3, r3
 80031a0:	f003 0306 	and.w	r3, r3, #6
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	f063 030e 	orn	r3, r3, #14
 80031aa:	b2da      	uxtb	r2, r3
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	611a      	str	r2, [r3, #16]
}
 80031b2:	bf00      	nop
 80031b4:	370c      	adds	r7, #12
 80031b6:	46bd      	mov	sp, r7
 80031b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031bc:	4770      	bx	lr

080031be <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80031be:	b480      	push	{r7}
 80031c0:	b083      	sub	sp, #12
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ca:	b2da      	uxtb	r2, r3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d004      	beq.n	80031e4 <I2C_Master_ADD10+0x26>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d108      	bne.n	80031f6 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d00c      	beq.n	8003206 <I2C_Master_ADD10+0x48>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d007      	beq.n	8003206 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	685a      	ldr	r2, [r3, #4]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003204:	605a      	str	r2, [r3, #4]
  }
}
 8003206:	bf00      	nop
 8003208:	370c      	adds	r7, #12
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr

08003212 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003212:	b480      	push	{r7}
 8003214:	b091      	sub	sp, #68	; 0x44
 8003216:	af00      	add	r7, sp, #0
 8003218:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003220:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003228:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800322e:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003236:	b2db      	uxtb	r3, r3
 8003238:	2b22      	cmp	r3, #34	; 0x22
 800323a:	f040 8169 	bne.w	8003510 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003242:	2b00      	cmp	r3, #0
 8003244:	d10f      	bne.n	8003266 <I2C_Master_ADDR+0x54>
 8003246:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800324a:	2b40      	cmp	r3, #64	; 0x40
 800324c:	d10b      	bne.n	8003266 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800324e:	2300      	movs	r3, #0
 8003250:	633b      	str	r3, [r7, #48]	; 0x30
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	695b      	ldr	r3, [r3, #20]
 8003258:	633b      	str	r3, [r7, #48]	; 0x30
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	699b      	ldr	r3, [r3, #24]
 8003260:	633b      	str	r3, [r7, #48]	; 0x30
 8003262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003264:	e160      	b.n	8003528 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800326a:	2b00      	cmp	r3, #0
 800326c:	d11d      	bne.n	80032aa <I2C_Master_ADDR+0x98>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	691b      	ldr	r3, [r3, #16]
 8003272:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003276:	d118      	bne.n	80032aa <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003278:	2300      	movs	r3, #0
 800327a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	695b      	ldr	r3, [r3, #20]
 8003282:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	699b      	ldr	r3, [r3, #24]
 800328a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800328c:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	681a      	ldr	r2, [r3, #0]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800329c:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032a2:	1c5a      	adds	r2, r3, #1
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	651a      	str	r2, [r3, #80]	; 0x50
 80032a8:	e13e      	b.n	8003528 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032ae:	b29b      	uxth	r3, r3
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d113      	bne.n	80032dc <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032b4:	2300      	movs	r3, #0
 80032b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	695b      	ldr	r3, [r3, #20]
 80032be:	62bb      	str	r3, [r7, #40]	; 0x28
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	699b      	ldr	r3, [r3, #24]
 80032c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80032c8:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032d8:	601a      	str	r2, [r3, #0]
 80032da:	e115      	b.n	8003508 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032e0:	b29b      	uxth	r3, r3
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	f040 808a 	bne.w	80033fc <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80032e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032ea:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80032ee:	d137      	bne.n	8003360 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032fe:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800330a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800330e:	d113      	bne.n	8003338 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800331e:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003320:	2300      	movs	r3, #0
 8003322:	627b      	str	r3, [r7, #36]	; 0x24
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	695b      	ldr	r3, [r3, #20]
 800332a:	627b      	str	r3, [r7, #36]	; 0x24
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	699b      	ldr	r3, [r3, #24]
 8003332:	627b      	str	r3, [r7, #36]	; 0x24
 8003334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003336:	e0e7      	b.n	8003508 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003338:	2300      	movs	r3, #0
 800333a:	623b      	str	r3, [r7, #32]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	695b      	ldr	r3, [r3, #20]
 8003342:	623b      	str	r3, [r7, #32]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	699b      	ldr	r3, [r3, #24]
 800334a:	623b      	str	r3, [r7, #32]
 800334c:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800335c:	601a      	str	r2, [r3, #0]
 800335e:	e0d3      	b.n	8003508 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003362:	2b08      	cmp	r3, #8
 8003364:	d02e      	beq.n	80033c4 <I2C_Master_ADDR+0x1b2>
 8003366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003368:	2b20      	cmp	r3, #32
 800336a:	d02b      	beq.n	80033c4 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800336c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800336e:	2b12      	cmp	r3, #18
 8003370:	d102      	bne.n	8003378 <I2C_Master_ADDR+0x166>
 8003372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003374:	2b01      	cmp	r3, #1
 8003376:	d125      	bne.n	80033c4 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800337a:	2b04      	cmp	r3, #4
 800337c:	d00e      	beq.n	800339c <I2C_Master_ADDR+0x18a>
 800337e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003380:	2b02      	cmp	r3, #2
 8003382:	d00b      	beq.n	800339c <I2C_Master_ADDR+0x18a>
 8003384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003386:	2b10      	cmp	r3, #16
 8003388:	d008      	beq.n	800339c <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003398:	601a      	str	r2, [r3, #0]
 800339a:	e007      	b.n	80033ac <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80033aa:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033ac:	2300      	movs	r3, #0
 80033ae:	61fb      	str	r3, [r7, #28]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	695b      	ldr	r3, [r3, #20]
 80033b6:	61fb      	str	r3, [r7, #28]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	699b      	ldr	r3, [r3, #24]
 80033be:	61fb      	str	r3, [r7, #28]
 80033c0:	69fb      	ldr	r3, [r7, #28]
 80033c2:	e0a1      	b.n	8003508 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033d2:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033d4:	2300      	movs	r3, #0
 80033d6:	61bb      	str	r3, [r7, #24]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	695b      	ldr	r3, [r3, #20]
 80033de:	61bb      	str	r3, [r7, #24]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	699b      	ldr	r3, [r3, #24]
 80033e6:	61bb      	str	r3, [r7, #24]
 80033e8:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033f8:	601a      	str	r2, [r3, #0]
 80033fa:	e085      	b.n	8003508 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003400:	b29b      	uxth	r3, r3
 8003402:	2b02      	cmp	r3, #2
 8003404:	d14d      	bne.n	80034a2 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003408:	2b04      	cmp	r3, #4
 800340a:	d016      	beq.n	800343a <I2C_Master_ADDR+0x228>
 800340c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800340e:	2b02      	cmp	r3, #2
 8003410:	d013      	beq.n	800343a <I2C_Master_ADDR+0x228>
 8003412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003414:	2b10      	cmp	r3, #16
 8003416:	d010      	beq.n	800343a <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003426:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003436:	601a      	str	r2, [r3, #0]
 8003438:	e007      	b.n	800344a <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003448:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003454:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003458:	d117      	bne.n	800348a <I2C_Master_ADDR+0x278>
 800345a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800345c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003460:	d00b      	beq.n	800347a <I2C_Master_ADDR+0x268>
 8003462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003464:	2b01      	cmp	r3, #1
 8003466:	d008      	beq.n	800347a <I2C_Master_ADDR+0x268>
 8003468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800346a:	2b08      	cmp	r3, #8
 800346c:	d005      	beq.n	800347a <I2C_Master_ADDR+0x268>
 800346e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003470:	2b10      	cmp	r3, #16
 8003472:	d002      	beq.n	800347a <I2C_Master_ADDR+0x268>
 8003474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003476:	2b20      	cmp	r3, #32
 8003478:	d107      	bne.n	800348a <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	685a      	ldr	r2, [r3, #4]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003488:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800348a:	2300      	movs	r3, #0
 800348c:	617b      	str	r3, [r7, #20]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	695b      	ldr	r3, [r3, #20]
 8003494:	617b      	str	r3, [r7, #20]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	699b      	ldr	r3, [r3, #24]
 800349c:	617b      	str	r3, [r7, #20]
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	e032      	b.n	8003508 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80034b0:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034c0:	d117      	bne.n	80034f2 <I2C_Master_ADDR+0x2e0>
 80034c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034c4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80034c8:	d00b      	beq.n	80034e2 <I2C_Master_ADDR+0x2d0>
 80034ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d008      	beq.n	80034e2 <I2C_Master_ADDR+0x2d0>
 80034d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034d2:	2b08      	cmp	r3, #8
 80034d4:	d005      	beq.n	80034e2 <I2C_Master_ADDR+0x2d0>
 80034d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034d8:	2b10      	cmp	r3, #16
 80034da:	d002      	beq.n	80034e2 <I2C_Master_ADDR+0x2d0>
 80034dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034de:	2b20      	cmp	r3, #32
 80034e0:	d107      	bne.n	80034f2 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	685a      	ldr	r2, [r3, #4]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80034f0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034f2:	2300      	movs	r3, #0
 80034f4:	613b      	str	r3, [r7, #16]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	695b      	ldr	r3, [r3, #20]
 80034fc:	613b      	str	r3, [r7, #16]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	699b      	ldr	r3, [r3, #24]
 8003504:	613b      	str	r3, [r7, #16]
 8003506:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2200      	movs	r2, #0
 800350c:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800350e:	e00b      	b.n	8003528 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003510:	2300      	movs	r3, #0
 8003512:	60fb      	str	r3, [r7, #12]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	695b      	ldr	r3, [r3, #20]
 800351a:	60fb      	str	r3, [r7, #12]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	699b      	ldr	r3, [r3, #24]
 8003522:	60fb      	str	r3, [r7, #12]
 8003524:	68fb      	ldr	r3, [r7, #12]
}
 8003526:	e7ff      	b.n	8003528 <I2C_Master_ADDR+0x316>
 8003528:	bf00      	nop
 800352a:	3744      	adds	r7, #68	; 0x44
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr

08003534 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b084      	sub	sp, #16
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003542:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003548:	b29b      	uxth	r3, r3
 800354a:	2b00      	cmp	r3, #0
 800354c:	d02b      	beq.n	80035a6 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003552:	781a      	ldrb	r2, [r3, #0]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800355e:	1c5a      	adds	r2, r3, #1
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003568:	b29b      	uxth	r3, r3
 800356a:	3b01      	subs	r3, #1
 800356c:	b29a      	uxth	r2, r3
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003576:	b29b      	uxth	r3, r3
 8003578:	2b00      	cmp	r3, #0
 800357a:	d114      	bne.n	80035a6 <I2C_SlaveTransmit_TXE+0x72>
 800357c:	7bfb      	ldrb	r3, [r7, #15]
 800357e:	2b29      	cmp	r3, #41	; 0x29
 8003580:	d111      	bne.n	80035a6 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	685a      	ldr	r2, [r3, #4]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003590:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2221      	movs	r2, #33	; 0x21
 8003596:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2228      	movs	r2, #40	; 0x28
 800359c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80035a0:	6878      	ldr	r0, [r7, #4]
 80035a2:	f7ff f9d9 	bl	8002958 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80035a6:	bf00      	nop
 80035a8:	3710      	adds	r7, #16
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}

080035ae <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80035ae:	b480      	push	{r7}
 80035b0:	b083      	sub	sp, #12
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035ba:	b29b      	uxth	r3, r3
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d011      	beq.n	80035e4 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c4:	781a      	ldrb	r2, [r3, #0]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d0:	1c5a      	adds	r2, r3, #1
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035da:	b29b      	uxth	r3, r3
 80035dc:	3b01      	subs	r3, #1
 80035de:	b29a      	uxth	r2, r3
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80035e4:	bf00      	nop
 80035e6:	370c      	adds	r7, #12
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr

080035f0 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b084      	sub	sp, #16
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035fe:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003604:	b29b      	uxth	r3, r3
 8003606:	2b00      	cmp	r3, #0
 8003608:	d02c      	beq.n	8003664 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	691a      	ldr	r2, [r3, #16]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003614:	b2d2      	uxtb	r2, r2
 8003616:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800361c:	1c5a      	adds	r2, r3, #1
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003626:	b29b      	uxth	r3, r3
 8003628:	3b01      	subs	r3, #1
 800362a:	b29a      	uxth	r2, r3
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003634:	b29b      	uxth	r3, r3
 8003636:	2b00      	cmp	r3, #0
 8003638:	d114      	bne.n	8003664 <I2C_SlaveReceive_RXNE+0x74>
 800363a:	7bfb      	ldrb	r3, [r7, #15]
 800363c:	2b2a      	cmp	r3, #42	; 0x2a
 800363e:	d111      	bne.n	8003664 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	685a      	ldr	r2, [r3, #4]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800364e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2222      	movs	r2, #34	; 0x22
 8003654:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2228      	movs	r2, #40	; 0x28
 800365a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f7ff f984 	bl	800296c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003664:	bf00      	nop
 8003666:	3710      	adds	r7, #16
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}

0800366c <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800366c:	b480      	push	{r7}
 800366e:	b083      	sub	sp, #12
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003678:	b29b      	uxth	r3, r3
 800367a:	2b00      	cmp	r3, #0
 800367c:	d012      	beq.n	80036a4 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	691a      	ldr	r2, [r3, #16]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003688:	b2d2      	uxtb	r2, r2
 800368a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003690:	1c5a      	adds	r2, r3, #1
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800369a:	b29b      	uxth	r3, r3
 800369c:	3b01      	subs	r3, #1
 800369e:	b29a      	uxth	r2, r3
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80036a4:	bf00      	nop
 80036a6:	370c      	adds	r7, #12
 80036a8:	46bd      	mov	sp, r7
 80036aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ae:	4770      	bx	lr

080036b0 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b084      	sub	sp, #16
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
 80036b8:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80036ba:	2300      	movs	r3, #0
 80036bc:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80036ca:	2b28      	cmp	r3, #40	; 0x28
 80036cc:	d127      	bne.n	800371e <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	685a      	ldr	r2, [r3, #4]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036dc:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	089b      	lsrs	r3, r3, #2
 80036e2:	f003 0301 	and.w	r3, r3, #1
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d101      	bne.n	80036ee <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80036ea:	2301      	movs	r3, #1
 80036ec:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	09db      	lsrs	r3, r3, #7
 80036f2:	f003 0301 	and.w	r3, r3, #1
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d103      	bne.n	8003702 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	68db      	ldr	r3, [r3, #12]
 80036fe:	81bb      	strh	r3, [r7, #12]
 8003700:	e002      	b.n	8003708 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	699b      	ldr	r3, [r3, #24]
 8003706:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2200      	movs	r2, #0
 800370c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003710:	89ba      	ldrh	r2, [r7, #12]
 8003712:	7bfb      	ldrb	r3, [r7, #15]
 8003714:	4619      	mov	r1, r3
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f7ff f932 	bl	8002980 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800371c:	e00e      	b.n	800373c <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800371e:	2300      	movs	r3, #0
 8003720:	60bb      	str	r3, [r7, #8]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	695b      	ldr	r3, [r3, #20]
 8003728:	60bb      	str	r3, [r7, #8]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	699b      	ldr	r3, [r3, #24]
 8003730:	60bb      	str	r3, [r7, #8]
 8003732:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2200      	movs	r2, #0
 8003738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800373c:	bf00      	nop
 800373e:	3710      	adds	r7, #16
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}

08003744 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b084      	sub	sp, #16
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003752:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	685a      	ldr	r2, [r3, #4]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003762:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003764:	2300      	movs	r3, #0
 8003766:	60bb      	str	r3, [r7, #8]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	695b      	ldr	r3, [r3, #20]
 800376e:	60bb      	str	r3, [r7, #8]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f042 0201 	orr.w	r2, r2, #1
 800377e:	601a      	str	r2, [r3, #0]
 8003780:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	681a      	ldr	r2, [r3, #0]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003790:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800379c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037a0:	d172      	bne.n	8003888 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80037a2:	7bfb      	ldrb	r3, [r7, #15]
 80037a4:	2b22      	cmp	r3, #34	; 0x22
 80037a6:	d002      	beq.n	80037ae <I2C_Slave_STOPF+0x6a>
 80037a8:	7bfb      	ldrb	r3, [r7, #15]
 80037aa:	2b2a      	cmp	r3, #42	; 0x2a
 80037ac:	d135      	bne.n	800381a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	b29a      	uxth	r2, r3
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037c0:	b29b      	uxth	r3, r3
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d005      	beq.n	80037d2 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ca:	f043 0204 	orr.w	r2, r3, #4
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	685a      	ldr	r2, [r3, #4]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037e0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037e6:	4618      	mov	r0, r3
 80037e8:	f7fd ff1f 	bl	800162a <HAL_DMA_GetState>
 80037ec:	4603      	mov	r3, r0
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	d049      	beq.n	8003886 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037f6:	4a69      	ldr	r2, [pc, #420]	; (800399c <I2C_Slave_STOPF+0x258>)
 80037f8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037fe:	4618      	mov	r0, r3
 8003800:	f7fd fef1 	bl	80015e6 <HAL_DMA_Abort_IT>
 8003804:	4603      	mov	r3, r0
 8003806:	2b00      	cmp	r3, #0
 8003808:	d03d      	beq.n	8003886 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800380e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003810:	687a      	ldr	r2, [r7, #4]
 8003812:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003814:	4610      	mov	r0, r2
 8003816:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003818:	e035      	b.n	8003886 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	b29a      	uxth	r2, r3
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800382c:	b29b      	uxth	r3, r3
 800382e:	2b00      	cmp	r3, #0
 8003830:	d005      	beq.n	800383e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003836:	f043 0204 	orr.w	r2, r3, #4
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	685a      	ldr	r2, [r3, #4]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800384c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003852:	4618      	mov	r0, r3
 8003854:	f7fd fee9 	bl	800162a <HAL_DMA_GetState>
 8003858:	4603      	mov	r3, r0
 800385a:	2b01      	cmp	r3, #1
 800385c:	d014      	beq.n	8003888 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003862:	4a4e      	ldr	r2, [pc, #312]	; (800399c <I2C_Slave_STOPF+0x258>)
 8003864:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800386a:	4618      	mov	r0, r3
 800386c:	f7fd febb 	bl	80015e6 <HAL_DMA_Abort_IT>
 8003870:	4603      	mov	r3, r0
 8003872:	2b00      	cmp	r3, #0
 8003874:	d008      	beq.n	8003888 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800387a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800387c:	687a      	ldr	r2, [r7, #4]
 800387e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003880:	4610      	mov	r0, r2
 8003882:	4798      	blx	r3
 8003884:	e000      	b.n	8003888 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003886:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800388c:	b29b      	uxth	r3, r3
 800388e:	2b00      	cmp	r3, #0
 8003890:	d03e      	beq.n	8003910 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	695b      	ldr	r3, [r3, #20]
 8003898:	f003 0304 	and.w	r3, r3, #4
 800389c:	2b04      	cmp	r3, #4
 800389e:	d112      	bne.n	80038c6 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	691a      	ldr	r2, [r3, #16]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038aa:	b2d2      	uxtb	r2, r2
 80038ac:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b2:	1c5a      	adds	r2, r3, #1
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038bc:	b29b      	uxth	r3, r3
 80038be:	3b01      	subs	r3, #1
 80038c0:	b29a      	uxth	r2, r3
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	695b      	ldr	r3, [r3, #20]
 80038cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038d0:	2b40      	cmp	r3, #64	; 0x40
 80038d2:	d112      	bne.n	80038fa <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	691a      	ldr	r2, [r3, #16]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038de:	b2d2      	uxtb	r2, r2
 80038e0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e6:	1c5a      	adds	r2, r3, #1
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038f0:	b29b      	uxth	r3, r3
 80038f2:	3b01      	subs	r3, #1
 80038f4:	b29a      	uxth	r2, r3
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038fe:	b29b      	uxth	r3, r3
 8003900:	2b00      	cmp	r3, #0
 8003902:	d005      	beq.n	8003910 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003908:	f043 0204 	orr.w	r2, r3, #4
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003914:	2b00      	cmp	r3, #0
 8003916:	d003      	beq.n	8003920 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	f000 f8b3 	bl	8003a84 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800391e:	e039      	b.n	8003994 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003920:	7bfb      	ldrb	r3, [r7, #15]
 8003922:	2b2a      	cmp	r3, #42	; 0x2a
 8003924:	d109      	bne.n	800393a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2200      	movs	r2, #0
 800392a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2228      	movs	r2, #40	; 0x28
 8003930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003934:	6878      	ldr	r0, [r7, #4]
 8003936:	f7ff f819 	bl	800296c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003940:	b2db      	uxtb	r3, r3
 8003942:	2b28      	cmp	r3, #40	; 0x28
 8003944:	d111      	bne.n	800396a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	4a15      	ldr	r2, [pc, #84]	; (80039a0 <I2C_Slave_STOPF+0x25c>)
 800394a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2200      	movs	r2, #0
 8003950:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2220      	movs	r2, #32
 8003956:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2200      	movs	r2, #0
 800395e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f7ff f81a 	bl	800299c <HAL_I2C_ListenCpltCallback>
}
 8003968:	e014      	b.n	8003994 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800396e:	2b22      	cmp	r3, #34	; 0x22
 8003970:	d002      	beq.n	8003978 <I2C_Slave_STOPF+0x234>
 8003972:	7bfb      	ldrb	r3, [r7, #15]
 8003974:	2b22      	cmp	r3, #34	; 0x22
 8003976:	d10d      	bne.n	8003994 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2200      	movs	r2, #0
 800397c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2220      	movs	r2, #32
 8003982:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2200      	movs	r2, #0
 800398a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f7fe ffec 	bl	800296c <HAL_I2C_SlaveRxCpltCallback>
}
 8003994:	bf00      	nop
 8003996:	3710      	adds	r7, #16
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}
 800399c:	08003fbd 	.word	0x08003fbd
 80039a0:	ffff0000 	.word	0xffff0000

080039a4 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b084      	sub	sp, #16
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039b2:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b8:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	2b08      	cmp	r3, #8
 80039be:	d002      	beq.n	80039c6 <I2C_Slave_AF+0x22>
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	2b20      	cmp	r3, #32
 80039c4:	d129      	bne.n	8003a1a <I2C_Slave_AF+0x76>
 80039c6:	7bfb      	ldrb	r3, [r7, #15]
 80039c8:	2b28      	cmp	r3, #40	; 0x28
 80039ca:	d126      	bne.n	8003a1a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	4a2c      	ldr	r2, [pc, #176]	; (8003a80 <I2C_Slave_AF+0xdc>)
 80039d0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	685a      	ldr	r2, [r3, #4]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80039e0:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80039ea:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039fa:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2200      	movs	r2, #0
 8003a00:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2220      	movs	r2, #32
 8003a06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f7fe ffc2 	bl	800299c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8003a18:	e02e      	b.n	8003a78 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003a1a:	7bfb      	ldrb	r3, [r7, #15]
 8003a1c:	2b21      	cmp	r3, #33	; 0x21
 8003a1e:	d126      	bne.n	8003a6e <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	4a17      	ldr	r2, [pc, #92]	; (8003a80 <I2C_Slave_AF+0xdc>)
 8003a24:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2221      	movs	r2, #33	; 0x21
 8003a2a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2220      	movs	r2, #32
 8003a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2200      	movs	r2, #0
 8003a38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	685a      	ldr	r2, [r3, #4]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003a4a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003a54:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a64:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f7fe ff76 	bl	8002958 <HAL_I2C_SlaveTxCpltCallback>
}
 8003a6c:	e004      	b.n	8003a78 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003a76:	615a      	str	r2, [r3, #20]
}
 8003a78:	bf00      	nop
 8003a7a:	3710      	adds	r7, #16
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}
 8003a80:	ffff0000 	.word	0xffff0000

08003a84 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b084      	sub	sp, #16
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a92:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a9a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003a9c:	7bbb      	ldrb	r3, [r7, #14]
 8003a9e:	2b10      	cmp	r3, #16
 8003aa0:	d002      	beq.n	8003aa8 <I2C_ITError+0x24>
 8003aa2:	7bbb      	ldrb	r3, [r7, #14]
 8003aa4:	2b40      	cmp	r3, #64	; 0x40
 8003aa6:	d10a      	bne.n	8003abe <I2C_ITError+0x3a>
 8003aa8:	7bfb      	ldrb	r3, [r7, #15]
 8003aaa:	2b22      	cmp	r3, #34	; 0x22
 8003aac:	d107      	bne.n	8003abe <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003abc:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003abe:	7bfb      	ldrb	r3, [r7, #15]
 8003ac0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003ac4:	2b28      	cmp	r3, #40	; 0x28
 8003ac6:	d107      	bne.n	8003ad8 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2200      	movs	r2, #0
 8003acc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2228      	movs	r2, #40	; 0x28
 8003ad2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003ad6:	e015      	b.n	8003b04 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ae2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ae6:	d00a      	beq.n	8003afe <I2C_ITError+0x7a>
 8003ae8:	7bfb      	ldrb	r3, [r7, #15]
 8003aea:	2b60      	cmp	r3, #96	; 0x60
 8003aec:	d007      	beq.n	8003afe <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2220      	movs	r2, #32
 8003af2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2200      	movs	r2, #0
 8003afa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2200      	movs	r2, #0
 8003b02:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b12:	d162      	bne.n	8003bda <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	685a      	ldr	r2, [r3, #4]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b22:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b28:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	d020      	beq.n	8003b74 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b36:	4a6a      	ldr	r2, [pc, #424]	; (8003ce0 <I2C_ITError+0x25c>)
 8003b38:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f7fd fd51 	bl	80015e6 <HAL_DMA_Abort_IT>
 8003b44:	4603      	mov	r3, r0
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	f000 8089 	beq.w	8003c5e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f022 0201 	bic.w	r2, r2, #1
 8003b5a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2220      	movs	r2, #32
 8003b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b6a:	687a      	ldr	r2, [r7, #4]
 8003b6c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003b6e:	4610      	mov	r0, r2
 8003b70:	4798      	blx	r3
 8003b72:	e074      	b.n	8003c5e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b78:	4a59      	ldr	r2, [pc, #356]	; (8003ce0 <I2C_ITError+0x25c>)
 8003b7a:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b80:	4618      	mov	r0, r3
 8003b82:	f7fd fd30 	bl	80015e6 <HAL_DMA_Abort_IT>
 8003b86:	4603      	mov	r3, r0
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d068      	beq.n	8003c5e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	695b      	ldr	r3, [r3, #20]
 8003b92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b96:	2b40      	cmp	r3, #64	; 0x40
 8003b98:	d10b      	bne.n	8003bb2 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	691a      	ldr	r2, [r3, #16]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba4:	b2d2      	uxtb	r2, r2
 8003ba6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bac:	1c5a      	adds	r2, r3, #1
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f022 0201 	bic.w	r2, r2, #1
 8003bc0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2220      	movs	r2, #32
 8003bc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bd0:	687a      	ldr	r2, [r7, #4]
 8003bd2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003bd4:	4610      	mov	r0, r2
 8003bd6:	4798      	blx	r3
 8003bd8:	e041      	b.n	8003c5e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	2b60      	cmp	r3, #96	; 0x60
 8003be4:	d125      	bne.n	8003c32 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2220      	movs	r2, #32
 8003bea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	695b      	ldr	r3, [r3, #20]
 8003bfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bfe:	2b40      	cmp	r3, #64	; 0x40
 8003c00:	d10b      	bne.n	8003c1a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	691a      	ldr	r2, [r3, #16]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c0c:	b2d2      	uxtb	r2, r2
 8003c0e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c14:	1c5a      	adds	r2, r3, #1
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f022 0201 	bic.w	r2, r2, #1
 8003c28:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f7fe fede 	bl	80029ec <HAL_I2C_AbortCpltCallback>
 8003c30:	e015      	b.n	8003c5e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	695b      	ldr	r3, [r3, #20]
 8003c38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c3c:	2b40      	cmp	r3, #64	; 0x40
 8003c3e:	d10b      	bne.n	8003c58 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	691a      	ldr	r2, [r3, #16]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c4a:	b2d2      	uxtb	r2, r2
 8003c4c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c52:	1c5a      	adds	r2, r3, #1
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003c58:	6878      	ldr	r0, [r7, #4]
 8003c5a:	f7fe febd 	bl	80029d8 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c62:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	f003 0301 	and.w	r3, r3, #1
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d10e      	bne.n	8003c8c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d109      	bne.n	8003c8c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d104      	bne.n	8003c8c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d007      	beq.n	8003c9c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	685a      	ldr	r2, [r3, #4]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003c9a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ca2:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca8:	f003 0304 	and.w	r3, r3, #4
 8003cac:	2b04      	cmp	r3, #4
 8003cae:	d113      	bne.n	8003cd8 <I2C_ITError+0x254>
 8003cb0:	7bfb      	ldrb	r3, [r7, #15]
 8003cb2:	2b28      	cmp	r3, #40	; 0x28
 8003cb4:	d110      	bne.n	8003cd8 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	4a0a      	ldr	r2, [pc, #40]	; (8003ce4 <I2C_ITError+0x260>)
 8003cba:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2220      	movs	r2, #32
 8003cc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f7fe fe62 	bl	800299c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003cd8:	bf00      	nop
 8003cda:	3710      	adds	r7, #16
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}
 8003ce0:	08003fbd 	.word	0x08003fbd
 8003ce4:	ffff0000 	.word	0xffff0000

08003ce8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b088      	sub	sp, #32
 8003cec:	af02      	add	r7, sp, #8
 8003cee:	60f8      	str	r0, [r7, #12]
 8003cf0:	607a      	str	r2, [r7, #4]
 8003cf2:	603b      	str	r3, [r7, #0]
 8003cf4:	460b      	mov	r3, r1
 8003cf6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cfc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	2b08      	cmp	r3, #8
 8003d02:	d006      	beq.n	8003d12 <I2C_MasterRequestWrite+0x2a>
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	2b01      	cmp	r3, #1
 8003d08:	d003      	beq.n	8003d12 <I2C_MasterRequestWrite+0x2a>
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003d10:	d108      	bne.n	8003d24 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d20:	601a      	str	r2, [r3, #0]
 8003d22:	e00b      	b.n	8003d3c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d28:	2b12      	cmp	r3, #18
 8003d2a:	d107      	bne.n	8003d3c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	681a      	ldr	r2, [r3, #0]
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d3a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	9300      	str	r3, [sp, #0]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2200      	movs	r2, #0
 8003d44:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003d48:	68f8      	ldr	r0, [r7, #12]
 8003d4a:	f000 f9df 	bl	800410c <I2C_WaitOnFlagUntilTimeout>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d00d      	beq.n	8003d70 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d62:	d103      	bne.n	8003d6c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d6a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003d6c:	2303      	movs	r3, #3
 8003d6e:	e035      	b.n	8003ddc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	691b      	ldr	r3, [r3, #16]
 8003d74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d78:	d108      	bne.n	8003d8c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003d7a:	897b      	ldrh	r3, [r7, #10]
 8003d7c:	b2db      	uxtb	r3, r3
 8003d7e:	461a      	mov	r2, r3
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003d88:	611a      	str	r2, [r3, #16]
 8003d8a:	e01b      	b.n	8003dc4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003d8c:	897b      	ldrh	r3, [r7, #10]
 8003d8e:	11db      	asrs	r3, r3, #7
 8003d90:	b2db      	uxtb	r3, r3
 8003d92:	f003 0306 	and.w	r3, r3, #6
 8003d96:	b2db      	uxtb	r3, r3
 8003d98:	f063 030f 	orn	r3, r3, #15
 8003d9c:	b2da      	uxtb	r2, r3
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	687a      	ldr	r2, [r7, #4]
 8003da8:	490e      	ldr	r1, [pc, #56]	; (8003de4 <I2C_MasterRequestWrite+0xfc>)
 8003daa:	68f8      	ldr	r0, [r7, #12]
 8003dac:	f000 fa05 	bl	80041ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003db0:	4603      	mov	r3, r0
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d001      	beq.n	8003dba <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	e010      	b.n	8003ddc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003dba:	897b      	ldrh	r3, [r7, #10]
 8003dbc:	b2da      	uxtb	r2, r3
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	687a      	ldr	r2, [r7, #4]
 8003dc8:	4907      	ldr	r1, [pc, #28]	; (8003de8 <I2C_MasterRequestWrite+0x100>)
 8003dca:	68f8      	ldr	r0, [r7, #12]
 8003dcc:	f000 f9f5 	bl	80041ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d001      	beq.n	8003dda <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e000      	b.n	8003ddc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003dda:	2300      	movs	r3, #0
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	3718      	adds	r7, #24
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}
 8003de4:	00010008 	.word	0x00010008
 8003de8:	00010002 	.word	0x00010002

08003dec <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b088      	sub	sp, #32
 8003df0:	af02      	add	r7, sp, #8
 8003df2:	60f8      	str	r0, [r7, #12]
 8003df4:	4608      	mov	r0, r1
 8003df6:	4611      	mov	r1, r2
 8003df8:	461a      	mov	r2, r3
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	817b      	strh	r3, [r7, #10]
 8003dfe:	460b      	mov	r3, r1
 8003e00:	813b      	strh	r3, [r7, #8]
 8003e02:	4613      	mov	r3, r2
 8003e04:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003e14:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e24:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e28:	9300      	str	r3, [sp, #0]
 8003e2a:	6a3b      	ldr	r3, [r7, #32]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003e32:	68f8      	ldr	r0, [r7, #12]
 8003e34:	f000 f96a 	bl	800410c <I2C_WaitOnFlagUntilTimeout>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d00d      	beq.n	8003e5a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e4c:	d103      	bne.n	8003e56 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e54:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003e56:	2303      	movs	r3, #3
 8003e58:	e0aa      	b.n	8003fb0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003e5a:	897b      	ldrh	r3, [r7, #10]
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	461a      	mov	r2, r3
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003e68:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e6c:	6a3a      	ldr	r2, [r7, #32]
 8003e6e:	4952      	ldr	r1, [pc, #328]	; (8003fb8 <I2C_RequestMemoryRead+0x1cc>)
 8003e70:	68f8      	ldr	r0, [r7, #12]
 8003e72:	f000 f9a2 	bl	80041ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e76:	4603      	mov	r3, r0
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d001      	beq.n	8003e80 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	e097      	b.n	8003fb0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e80:	2300      	movs	r3, #0
 8003e82:	617b      	str	r3, [r7, #20]
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	695b      	ldr	r3, [r3, #20]
 8003e8a:	617b      	str	r3, [r7, #20]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	699b      	ldr	r3, [r3, #24]
 8003e92:	617b      	str	r3, [r7, #20]
 8003e94:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e98:	6a39      	ldr	r1, [r7, #32]
 8003e9a:	68f8      	ldr	r0, [r7, #12]
 8003e9c:	f000 fa0c 	bl	80042b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d00d      	beq.n	8003ec2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eaa:	2b04      	cmp	r3, #4
 8003eac:	d107      	bne.n	8003ebe <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	681a      	ldr	r2, [r3, #0]
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ebc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e076      	b.n	8003fb0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003ec2:	88fb      	ldrh	r3, [r7, #6]
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d105      	bne.n	8003ed4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003ec8:	893b      	ldrh	r3, [r7, #8]
 8003eca:	b2da      	uxtb	r2, r3
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	611a      	str	r2, [r3, #16]
 8003ed2:	e021      	b.n	8003f18 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003ed4:	893b      	ldrh	r3, [r7, #8]
 8003ed6:	0a1b      	lsrs	r3, r3, #8
 8003ed8:	b29b      	uxth	r3, r3
 8003eda:	b2da      	uxtb	r2, r3
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ee2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ee4:	6a39      	ldr	r1, [r7, #32]
 8003ee6:	68f8      	ldr	r0, [r7, #12]
 8003ee8:	f000 f9e6 	bl	80042b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003eec:	4603      	mov	r3, r0
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d00d      	beq.n	8003f0e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef6:	2b04      	cmp	r3, #4
 8003ef8:	d107      	bne.n	8003f0a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f08:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e050      	b.n	8003fb0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f0e:	893b      	ldrh	r3, [r7, #8]
 8003f10:	b2da      	uxtb	r2, r3
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f1a:	6a39      	ldr	r1, [r7, #32]
 8003f1c:	68f8      	ldr	r0, [r7, #12]
 8003f1e:	f000 f9cb 	bl	80042b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f22:	4603      	mov	r3, r0
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d00d      	beq.n	8003f44 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2c:	2b04      	cmp	r3, #4
 8003f2e:	d107      	bne.n	8003f40 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f3e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	e035      	b.n	8003fb0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f52:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f56:	9300      	str	r3, [sp, #0]
 8003f58:	6a3b      	ldr	r3, [r7, #32]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003f60:	68f8      	ldr	r0, [r7, #12]
 8003f62:	f000 f8d3 	bl	800410c <I2C_WaitOnFlagUntilTimeout>
 8003f66:	4603      	mov	r3, r0
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d00d      	beq.n	8003f88 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f7a:	d103      	bne.n	8003f84 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f82:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003f84:	2303      	movs	r3, #3
 8003f86:	e013      	b.n	8003fb0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003f88:	897b      	ldrh	r3, [r7, #10]
 8003f8a:	b2db      	uxtb	r3, r3
 8003f8c:	f043 0301 	orr.w	r3, r3, #1
 8003f90:	b2da      	uxtb	r2, r3
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f9a:	6a3a      	ldr	r2, [r7, #32]
 8003f9c:	4906      	ldr	r1, [pc, #24]	; (8003fb8 <I2C_RequestMemoryRead+0x1cc>)
 8003f9e:	68f8      	ldr	r0, [r7, #12]
 8003fa0:	f000 f90b 	bl	80041ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d001      	beq.n	8003fae <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	e000      	b.n	8003fb0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003fae:	2300      	movs	r3, #0
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	3718      	adds	r7, #24
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}
 8003fb8:	00010002 	.word	0x00010002

08003fbc <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b086      	sub	sp, #24
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fcc:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fd4:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003fd6:	4b4b      	ldr	r3, [pc, #300]	; (8004104 <I2C_DMAAbort+0x148>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	08db      	lsrs	r3, r3, #3
 8003fdc:	4a4a      	ldr	r2, [pc, #296]	; (8004108 <I2C_DMAAbort+0x14c>)
 8003fde:	fba2 2303 	umull	r2, r3, r2, r3
 8003fe2:	0a1a      	lsrs	r2, r3, #8
 8003fe4:	4613      	mov	r3, r2
 8003fe6:	009b      	lsls	r3, r3, #2
 8003fe8:	4413      	add	r3, r2
 8003fea:	00da      	lsls	r2, r3, #3
 8003fec:	1ad3      	subs	r3, r2, r3
 8003fee:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d106      	bne.n	8004004 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ffa:	f043 0220 	orr.w	r2, r3, #32
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8004002:	e00a      	b.n	800401a <I2C_DMAAbort+0x5e>
    }
    count--;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	3b01      	subs	r3, #1
 8004008:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004014:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004018:	d0ea      	beq.n	8003ff0 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800401e:	2b00      	cmp	r3, #0
 8004020:	d003      	beq.n	800402a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004026:	2200      	movs	r2, #0
 8004028:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800402e:	2b00      	cmp	r3, #0
 8004030:	d003      	beq.n	800403a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004036:	2200      	movs	r2, #0
 8004038:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004048:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	2200      	movs	r2, #0
 800404e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004054:	2b00      	cmp	r3, #0
 8004056:	d003      	beq.n	8004060 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800405c:	2200      	movs	r2, #0
 800405e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004064:	2b00      	cmp	r3, #0
 8004066:	d003      	beq.n	8004070 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800406c:	2200      	movs	r2, #0
 800406e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f022 0201 	bic.w	r2, r2, #1
 800407e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004086:	b2db      	uxtb	r3, r3
 8004088:	2b60      	cmp	r3, #96	; 0x60
 800408a:	d10e      	bne.n	80040aa <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	2220      	movs	r2, #32
 8004090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	2200      	movs	r2, #0
 8004098:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	2200      	movs	r2, #0
 80040a0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80040a2:	6978      	ldr	r0, [r7, #20]
 80040a4:	f7fe fca2 	bl	80029ec <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80040a8:	e027      	b.n	80040fa <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80040aa:	7cfb      	ldrb	r3, [r7, #19]
 80040ac:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80040b0:	2b28      	cmp	r3, #40	; 0x28
 80040b2:	d117      	bne.n	80040e4 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f042 0201 	orr.w	r2, r2, #1
 80040c2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80040d2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	2200      	movs	r2, #0
 80040d8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	2228      	movs	r2, #40	; 0x28
 80040de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80040e2:	e007      	b.n	80040f4 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	2220      	movs	r2, #32
 80040e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	2200      	movs	r2, #0
 80040f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80040f4:	6978      	ldr	r0, [r7, #20]
 80040f6:	f7fe fc6f 	bl	80029d8 <HAL_I2C_ErrorCallback>
}
 80040fa:	bf00      	nop
 80040fc:	3718      	adds	r7, #24
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}
 8004102:	bf00      	nop
 8004104:	20000000 	.word	0x20000000
 8004108:	14f8b589 	.word	0x14f8b589

0800410c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b084      	sub	sp, #16
 8004110:	af00      	add	r7, sp, #0
 8004112:	60f8      	str	r0, [r7, #12]
 8004114:	60b9      	str	r1, [r7, #8]
 8004116:	603b      	str	r3, [r7, #0]
 8004118:	4613      	mov	r3, r2
 800411a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800411c:	e025      	b.n	800416a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004124:	d021      	beq.n	800416a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004126:	f7fd f8ad 	bl	8001284 <HAL_GetTick>
 800412a:	4602      	mov	r2, r0
 800412c:	69bb      	ldr	r3, [r7, #24]
 800412e:	1ad3      	subs	r3, r2, r3
 8004130:	683a      	ldr	r2, [r7, #0]
 8004132:	429a      	cmp	r2, r3
 8004134:	d302      	bcc.n	800413c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d116      	bne.n	800416a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2200      	movs	r2, #0
 8004140:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2220      	movs	r2, #32
 8004146:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2200      	movs	r2, #0
 800414e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004156:	f043 0220 	orr.w	r2, r3, #32
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2200      	movs	r2, #0
 8004162:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	e023      	b.n	80041b2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	0c1b      	lsrs	r3, r3, #16
 800416e:	b2db      	uxtb	r3, r3
 8004170:	2b01      	cmp	r3, #1
 8004172:	d10d      	bne.n	8004190 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	695b      	ldr	r3, [r3, #20]
 800417a:	43da      	mvns	r2, r3
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	4013      	ands	r3, r2
 8004180:	b29b      	uxth	r3, r3
 8004182:	2b00      	cmp	r3, #0
 8004184:	bf0c      	ite	eq
 8004186:	2301      	moveq	r3, #1
 8004188:	2300      	movne	r3, #0
 800418a:	b2db      	uxtb	r3, r3
 800418c:	461a      	mov	r2, r3
 800418e:	e00c      	b.n	80041aa <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	699b      	ldr	r3, [r3, #24]
 8004196:	43da      	mvns	r2, r3
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	4013      	ands	r3, r2
 800419c:	b29b      	uxth	r3, r3
 800419e:	2b00      	cmp	r3, #0
 80041a0:	bf0c      	ite	eq
 80041a2:	2301      	moveq	r3, #1
 80041a4:	2300      	movne	r3, #0
 80041a6:	b2db      	uxtb	r3, r3
 80041a8:	461a      	mov	r2, r3
 80041aa:	79fb      	ldrb	r3, [r7, #7]
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d0b6      	beq.n	800411e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80041b0:	2300      	movs	r3, #0
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	3710      	adds	r7, #16
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}

080041ba <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80041ba:	b580      	push	{r7, lr}
 80041bc:	b084      	sub	sp, #16
 80041be:	af00      	add	r7, sp, #0
 80041c0:	60f8      	str	r0, [r7, #12]
 80041c2:	60b9      	str	r1, [r7, #8]
 80041c4:	607a      	str	r2, [r7, #4]
 80041c6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80041c8:	e051      	b.n	800426e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	695b      	ldr	r3, [r3, #20]
 80041d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041d8:	d123      	bne.n	8004222 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041e8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80041f2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2200      	movs	r2, #0
 80041f8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	2220      	movs	r2, #32
 80041fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2200      	movs	r2, #0
 8004206:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800420e:	f043 0204 	orr.w	r2, r3, #4
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2200      	movs	r2, #0
 800421a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	e046      	b.n	80042b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004228:	d021      	beq.n	800426e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800422a:	f7fd f82b 	bl	8001284 <HAL_GetTick>
 800422e:	4602      	mov	r2, r0
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	1ad3      	subs	r3, r2, r3
 8004234:	687a      	ldr	r2, [r7, #4]
 8004236:	429a      	cmp	r2, r3
 8004238:	d302      	bcc.n	8004240 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d116      	bne.n	800426e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2200      	movs	r2, #0
 8004244:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2220      	movs	r2, #32
 800424a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2200      	movs	r2, #0
 8004252:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800425a:	f043 0220 	orr.w	r2, r3, #32
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2200      	movs	r2, #0
 8004266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	e020      	b.n	80042b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	0c1b      	lsrs	r3, r3, #16
 8004272:	b2db      	uxtb	r3, r3
 8004274:	2b01      	cmp	r3, #1
 8004276:	d10c      	bne.n	8004292 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	695b      	ldr	r3, [r3, #20]
 800427e:	43da      	mvns	r2, r3
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	4013      	ands	r3, r2
 8004284:	b29b      	uxth	r3, r3
 8004286:	2b00      	cmp	r3, #0
 8004288:	bf14      	ite	ne
 800428a:	2301      	movne	r3, #1
 800428c:	2300      	moveq	r3, #0
 800428e:	b2db      	uxtb	r3, r3
 8004290:	e00b      	b.n	80042aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	699b      	ldr	r3, [r3, #24]
 8004298:	43da      	mvns	r2, r3
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	4013      	ands	r3, r2
 800429e:	b29b      	uxth	r3, r3
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	bf14      	ite	ne
 80042a4:	2301      	movne	r3, #1
 80042a6:	2300      	moveq	r3, #0
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d18d      	bne.n	80041ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80042ae:	2300      	movs	r3, #0
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	3710      	adds	r7, #16
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}

080042b8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b084      	sub	sp, #16
 80042bc:	af00      	add	r7, sp, #0
 80042be:	60f8      	str	r0, [r7, #12]
 80042c0:	60b9      	str	r1, [r7, #8]
 80042c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80042c4:	e02d      	b.n	8004322 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80042c6:	68f8      	ldr	r0, [r7, #12]
 80042c8:	f000 f900 	bl	80044cc <I2C_IsAcknowledgeFailed>
 80042cc:	4603      	mov	r3, r0
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d001      	beq.n	80042d6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e02d      	b.n	8004332 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042dc:	d021      	beq.n	8004322 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042de:	f7fc ffd1 	bl	8001284 <HAL_GetTick>
 80042e2:	4602      	mov	r2, r0
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	1ad3      	subs	r3, r2, r3
 80042e8:	68ba      	ldr	r2, [r7, #8]
 80042ea:	429a      	cmp	r2, r3
 80042ec:	d302      	bcc.n	80042f4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d116      	bne.n	8004322 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	2200      	movs	r2, #0
 80042f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2220      	movs	r2, #32
 80042fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2200      	movs	r2, #0
 8004306:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800430e:	f043 0220 	orr.w	r2, r3, #32
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2200      	movs	r2, #0
 800431a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	e007      	b.n	8004332 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	695b      	ldr	r3, [r3, #20]
 8004328:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800432c:	2b80      	cmp	r3, #128	; 0x80
 800432e:	d1ca      	bne.n	80042c6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004330:	2300      	movs	r3, #0
}
 8004332:	4618      	mov	r0, r3
 8004334:	3710      	adds	r7, #16
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}

0800433a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800433a:	b580      	push	{r7, lr}
 800433c:	b084      	sub	sp, #16
 800433e:	af00      	add	r7, sp, #0
 8004340:	60f8      	str	r0, [r7, #12]
 8004342:	60b9      	str	r1, [r7, #8]
 8004344:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004346:	e02d      	b.n	80043a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004348:	68f8      	ldr	r0, [r7, #12]
 800434a:	f000 f8bf 	bl	80044cc <I2C_IsAcknowledgeFailed>
 800434e:	4603      	mov	r3, r0
 8004350:	2b00      	cmp	r3, #0
 8004352:	d001      	beq.n	8004358 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004354:	2301      	movs	r3, #1
 8004356:	e02d      	b.n	80043b4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800435e:	d021      	beq.n	80043a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004360:	f7fc ff90 	bl	8001284 <HAL_GetTick>
 8004364:	4602      	mov	r2, r0
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	1ad3      	subs	r3, r2, r3
 800436a:	68ba      	ldr	r2, [r7, #8]
 800436c:	429a      	cmp	r2, r3
 800436e:	d302      	bcc.n	8004376 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d116      	bne.n	80043a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2200      	movs	r2, #0
 800437a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2220      	movs	r2, #32
 8004380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2200      	movs	r2, #0
 8004388:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004390:	f043 0220 	orr.w	r2, r3, #32
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2200      	movs	r2, #0
 800439c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	e007      	b.n	80043b4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	695b      	ldr	r3, [r3, #20]
 80043aa:	f003 0304 	and.w	r3, r3, #4
 80043ae:	2b04      	cmp	r3, #4
 80043b0:	d1ca      	bne.n	8004348 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80043b2:	2300      	movs	r3, #0
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	3710      	adds	r7, #16
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}

080043bc <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80043bc:	b480      	push	{r7}
 80043be:	b085      	sub	sp, #20
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80043c4:	2300      	movs	r3, #0
 80043c6:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80043c8:	4b13      	ldr	r3, [pc, #76]	; (8004418 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	08db      	lsrs	r3, r3, #3
 80043ce:	4a13      	ldr	r2, [pc, #76]	; (800441c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80043d0:	fba2 2303 	umull	r2, r3, r2, r3
 80043d4:	0a1a      	lsrs	r2, r3, #8
 80043d6:	4613      	mov	r3, r2
 80043d8:	009b      	lsls	r3, r3, #2
 80043da:	4413      	add	r3, r2
 80043dc:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	3b01      	subs	r3, #1
 80043e2:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d107      	bne.n	80043fa <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ee:	f043 0220 	orr.w	r2, r3, #32
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	e008      	b.n	800440c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004404:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004408:	d0e9      	beq.n	80043de <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800440a:	2300      	movs	r3, #0
}
 800440c:	4618      	mov	r0, r3
 800440e:	3714      	adds	r7, #20
 8004410:	46bd      	mov	sp, r7
 8004412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004416:	4770      	bx	lr
 8004418:	20000000 	.word	0x20000000
 800441c:	14f8b589 	.word	0x14f8b589

08004420 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b084      	sub	sp, #16
 8004424:	af00      	add	r7, sp, #0
 8004426:	60f8      	str	r0, [r7, #12]
 8004428:	60b9      	str	r1, [r7, #8]
 800442a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800442c:	e042      	b.n	80044b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	695b      	ldr	r3, [r3, #20]
 8004434:	f003 0310 	and.w	r3, r3, #16
 8004438:	2b10      	cmp	r3, #16
 800443a:	d119      	bne.n	8004470 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f06f 0210 	mvn.w	r2, #16
 8004444:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2200      	movs	r2, #0
 800444a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2220      	movs	r2, #32
 8004450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2200      	movs	r2, #0
 8004458:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2200      	movs	r2, #0
 8004468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800446c:	2301      	movs	r3, #1
 800446e:	e029      	b.n	80044c4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004470:	f7fc ff08 	bl	8001284 <HAL_GetTick>
 8004474:	4602      	mov	r2, r0
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	1ad3      	subs	r3, r2, r3
 800447a:	68ba      	ldr	r2, [r7, #8]
 800447c:	429a      	cmp	r2, r3
 800447e:	d302      	bcc.n	8004486 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d116      	bne.n	80044b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2200      	movs	r2, #0
 800448a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2220      	movs	r2, #32
 8004490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2200      	movs	r2, #0
 8004498:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a0:	f043 0220 	orr.w	r2, r3, #32
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2200      	movs	r2, #0
 80044ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	e007      	b.n	80044c4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	695b      	ldr	r3, [r3, #20]
 80044ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044be:	2b40      	cmp	r3, #64	; 0x40
 80044c0:	d1b5      	bne.n	800442e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80044c2:	2300      	movs	r3, #0
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	3710      	adds	r7, #16
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}

080044cc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b083      	sub	sp, #12
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	695b      	ldr	r3, [r3, #20]
 80044da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044e2:	d11b      	bne.n	800451c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80044ec:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2200      	movs	r2, #0
 80044f2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2220      	movs	r2, #32
 80044f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2200      	movs	r2, #0
 8004500:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004508:	f043 0204 	orr.w	r2, r3, #4
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2200      	movs	r2, #0
 8004514:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004518:	2301      	movs	r3, #1
 800451a:	e000      	b.n	800451e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800451c:	2300      	movs	r3, #0
}
 800451e:	4618      	mov	r0, r3
 8004520:	370c      	adds	r7, #12
 8004522:	46bd      	mov	sp, r7
 8004524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004528:	4770      	bx	lr

0800452a <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800452a:	b480      	push	{r7}
 800452c:	b083      	sub	sp, #12
 800452e:	af00      	add	r7, sp, #0
 8004530:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004536:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800453a:	d103      	bne.n	8004544 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2201      	movs	r2, #1
 8004540:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004542:	e007      	b.n	8004554 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004548:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800454c:	d102      	bne.n	8004554 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2208      	movs	r2, #8
 8004552:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004554:	bf00      	nop
 8004556:	370c      	adds	r7, #12
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr

08004560 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004560:	b480      	push	{r7}
 8004562:	b083      	sub	sp, #12
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
 8004568:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004570:	b2db      	uxtb	r3, r3
 8004572:	2b20      	cmp	r3, #32
 8004574:	d129      	bne.n	80045ca <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2224      	movs	r2, #36	; 0x24
 800457a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f022 0201 	bic.w	r2, r2, #1
 800458c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f022 0210 	bic.w	r2, r2, #16
 800459c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	683a      	ldr	r2, [r7, #0]
 80045aa:	430a      	orrs	r2, r1
 80045ac:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	681a      	ldr	r2, [r3, #0]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f042 0201 	orr.w	r2, r2, #1
 80045bc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2220      	movs	r2, #32
 80045c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80045c6:	2300      	movs	r3, #0
 80045c8:	e000      	b.n	80045cc <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80045ca:	2302      	movs	r3, #2
  }
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	370c      	adds	r7, #12
 80045d0:	46bd      	mov	sp, r7
 80045d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d6:	4770      	bx	lr

080045d8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80045d8:	b480      	push	{r7}
 80045da:	b085      	sub	sp, #20
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
 80045e0:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80045e2:	2300      	movs	r3, #0
 80045e4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	2b20      	cmp	r3, #32
 80045f0:	d12a      	bne.n	8004648 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2224      	movs	r2, #36	; 0x24
 80045f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f022 0201 	bic.w	r2, r2, #1
 8004608:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004610:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8004612:	89fb      	ldrh	r3, [r7, #14]
 8004614:	f023 030f 	bic.w	r3, r3, #15
 8004618:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	b29a      	uxth	r2, r3
 800461e:	89fb      	ldrh	r3, [r7, #14]
 8004620:	4313      	orrs	r3, r2
 8004622:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	89fa      	ldrh	r2, [r7, #14]
 800462a:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	681a      	ldr	r2, [r3, #0]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f042 0201 	orr.w	r2, r2, #1
 800463a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2220      	movs	r2, #32
 8004640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004644:	2300      	movs	r3, #0
 8004646:	e000      	b.n	800464a <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8004648:	2302      	movs	r3, #2
  }
}
 800464a:	4618      	mov	r0, r3
 800464c:	3714      	adds	r7, #20
 800464e:	46bd      	mov	sp, r7
 8004650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004654:	4770      	bx	lr
	...

08004658 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b082      	sub	sp, #8
 800465c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800465e:	2300      	movs	r3, #0
 8004660:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004662:	2300      	movs	r3, #0
 8004664:	603b      	str	r3, [r7, #0]
 8004666:	4b20      	ldr	r3, [pc, #128]	; (80046e8 <HAL_PWREx_EnableOverDrive+0x90>)
 8004668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800466a:	4a1f      	ldr	r2, [pc, #124]	; (80046e8 <HAL_PWREx_EnableOverDrive+0x90>)
 800466c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004670:	6413      	str	r3, [r2, #64]	; 0x40
 8004672:	4b1d      	ldr	r3, [pc, #116]	; (80046e8 <HAL_PWREx_EnableOverDrive+0x90>)
 8004674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004676:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800467a:	603b      	str	r3, [r7, #0]
 800467c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800467e:	4b1b      	ldr	r3, [pc, #108]	; (80046ec <HAL_PWREx_EnableOverDrive+0x94>)
 8004680:	2201      	movs	r2, #1
 8004682:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004684:	f7fc fdfe 	bl	8001284 <HAL_GetTick>
 8004688:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800468a:	e009      	b.n	80046a0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800468c:	f7fc fdfa 	bl	8001284 <HAL_GetTick>
 8004690:	4602      	mov	r2, r0
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	1ad3      	subs	r3, r2, r3
 8004696:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800469a:	d901      	bls.n	80046a0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800469c:	2303      	movs	r3, #3
 800469e:	e01f      	b.n	80046e0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80046a0:	4b13      	ldr	r3, [pc, #76]	; (80046f0 <HAL_PWREx_EnableOverDrive+0x98>)
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046ac:	d1ee      	bne.n	800468c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80046ae:	4b11      	ldr	r3, [pc, #68]	; (80046f4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80046b0:	2201      	movs	r2, #1
 80046b2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80046b4:	f7fc fde6 	bl	8001284 <HAL_GetTick>
 80046b8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80046ba:	e009      	b.n	80046d0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80046bc:	f7fc fde2 	bl	8001284 <HAL_GetTick>
 80046c0:	4602      	mov	r2, r0
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	1ad3      	subs	r3, r2, r3
 80046c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80046ca:	d901      	bls.n	80046d0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80046cc:	2303      	movs	r3, #3
 80046ce:	e007      	b.n	80046e0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80046d0:	4b07      	ldr	r3, [pc, #28]	; (80046f0 <HAL_PWREx_EnableOverDrive+0x98>)
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80046dc:	d1ee      	bne.n	80046bc <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80046de:	2300      	movs	r3, #0
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	3708      	adds	r7, #8
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}
 80046e8:	40023800 	.word	0x40023800
 80046ec:	420e0040 	.word	0x420e0040
 80046f0:	40007000 	.word	0x40007000
 80046f4:	420e0044 	.word	0x420e0044

080046f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b086      	sub	sp, #24
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d101      	bne.n	800470a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	e267      	b.n	8004bda <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f003 0301 	and.w	r3, r3, #1
 8004712:	2b00      	cmp	r3, #0
 8004714:	d075      	beq.n	8004802 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004716:	4b88      	ldr	r3, [pc, #544]	; (8004938 <HAL_RCC_OscConfig+0x240>)
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	f003 030c 	and.w	r3, r3, #12
 800471e:	2b04      	cmp	r3, #4
 8004720:	d00c      	beq.n	800473c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004722:	4b85      	ldr	r3, [pc, #532]	; (8004938 <HAL_RCC_OscConfig+0x240>)
 8004724:	689b      	ldr	r3, [r3, #8]
 8004726:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800472a:	2b08      	cmp	r3, #8
 800472c:	d112      	bne.n	8004754 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800472e:	4b82      	ldr	r3, [pc, #520]	; (8004938 <HAL_RCC_OscConfig+0x240>)
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004736:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800473a:	d10b      	bne.n	8004754 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800473c:	4b7e      	ldr	r3, [pc, #504]	; (8004938 <HAL_RCC_OscConfig+0x240>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004744:	2b00      	cmp	r3, #0
 8004746:	d05b      	beq.n	8004800 <HAL_RCC_OscConfig+0x108>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d157      	bne.n	8004800 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	e242      	b.n	8004bda <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800475c:	d106      	bne.n	800476c <HAL_RCC_OscConfig+0x74>
 800475e:	4b76      	ldr	r3, [pc, #472]	; (8004938 <HAL_RCC_OscConfig+0x240>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a75      	ldr	r2, [pc, #468]	; (8004938 <HAL_RCC_OscConfig+0x240>)
 8004764:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004768:	6013      	str	r3, [r2, #0]
 800476a:	e01d      	b.n	80047a8 <HAL_RCC_OscConfig+0xb0>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004774:	d10c      	bne.n	8004790 <HAL_RCC_OscConfig+0x98>
 8004776:	4b70      	ldr	r3, [pc, #448]	; (8004938 <HAL_RCC_OscConfig+0x240>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a6f      	ldr	r2, [pc, #444]	; (8004938 <HAL_RCC_OscConfig+0x240>)
 800477c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004780:	6013      	str	r3, [r2, #0]
 8004782:	4b6d      	ldr	r3, [pc, #436]	; (8004938 <HAL_RCC_OscConfig+0x240>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a6c      	ldr	r2, [pc, #432]	; (8004938 <HAL_RCC_OscConfig+0x240>)
 8004788:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800478c:	6013      	str	r3, [r2, #0]
 800478e:	e00b      	b.n	80047a8 <HAL_RCC_OscConfig+0xb0>
 8004790:	4b69      	ldr	r3, [pc, #420]	; (8004938 <HAL_RCC_OscConfig+0x240>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a68      	ldr	r2, [pc, #416]	; (8004938 <HAL_RCC_OscConfig+0x240>)
 8004796:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800479a:	6013      	str	r3, [r2, #0]
 800479c:	4b66      	ldr	r3, [pc, #408]	; (8004938 <HAL_RCC_OscConfig+0x240>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a65      	ldr	r2, [pc, #404]	; (8004938 <HAL_RCC_OscConfig+0x240>)
 80047a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d013      	beq.n	80047d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047b0:	f7fc fd68 	bl	8001284 <HAL_GetTick>
 80047b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047b6:	e008      	b.n	80047ca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80047b8:	f7fc fd64 	bl	8001284 <HAL_GetTick>
 80047bc:	4602      	mov	r2, r0
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	1ad3      	subs	r3, r2, r3
 80047c2:	2b64      	cmp	r3, #100	; 0x64
 80047c4:	d901      	bls.n	80047ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80047c6:	2303      	movs	r3, #3
 80047c8:	e207      	b.n	8004bda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047ca:	4b5b      	ldr	r3, [pc, #364]	; (8004938 <HAL_RCC_OscConfig+0x240>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d0f0      	beq.n	80047b8 <HAL_RCC_OscConfig+0xc0>
 80047d6:	e014      	b.n	8004802 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047d8:	f7fc fd54 	bl	8001284 <HAL_GetTick>
 80047dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047de:	e008      	b.n	80047f2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80047e0:	f7fc fd50 	bl	8001284 <HAL_GetTick>
 80047e4:	4602      	mov	r2, r0
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	1ad3      	subs	r3, r2, r3
 80047ea:	2b64      	cmp	r3, #100	; 0x64
 80047ec:	d901      	bls.n	80047f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80047ee:	2303      	movs	r3, #3
 80047f0:	e1f3      	b.n	8004bda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047f2:	4b51      	ldr	r3, [pc, #324]	; (8004938 <HAL_RCC_OscConfig+0x240>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d1f0      	bne.n	80047e0 <HAL_RCC_OscConfig+0xe8>
 80047fe:	e000      	b.n	8004802 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004800:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f003 0302 	and.w	r3, r3, #2
 800480a:	2b00      	cmp	r3, #0
 800480c:	d063      	beq.n	80048d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800480e:	4b4a      	ldr	r3, [pc, #296]	; (8004938 <HAL_RCC_OscConfig+0x240>)
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	f003 030c 	and.w	r3, r3, #12
 8004816:	2b00      	cmp	r3, #0
 8004818:	d00b      	beq.n	8004832 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800481a:	4b47      	ldr	r3, [pc, #284]	; (8004938 <HAL_RCC_OscConfig+0x240>)
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004822:	2b08      	cmp	r3, #8
 8004824:	d11c      	bne.n	8004860 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004826:	4b44      	ldr	r3, [pc, #272]	; (8004938 <HAL_RCC_OscConfig+0x240>)
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800482e:	2b00      	cmp	r3, #0
 8004830:	d116      	bne.n	8004860 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004832:	4b41      	ldr	r3, [pc, #260]	; (8004938 <HAL_RCC_OscConfig+0x240>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f003 0302 	and.w	r3, r3, #2
 800483a:	2b00      	cmp	r3, #0
 800483c:	d005      	beq.n	800484a <HAL_RCC_OscConfig+0x152>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	68db      	ldr	r3, [r3, #12]
 8004842:	2b01      	cmp	r3, #1
 8004844:	d001      	beq.n	800484a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	e1c7      	b.n	8004bda <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800484a:	4b3b      	ldr	r3, [pc, #236]	; (8004938 <HAL_RCC_OscConfig+0x240>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	691b      	ldr	r3, [r3, #16]
 8004856:	00db      	lsls	r3, r3, #3
 8004858:	4937      	ldr	r1, [pc, #220]	; (8004938 <HAL_RCC_OscConfig+0x240>)
 800485a:	4313      	orrs	r3, r2
 800485c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800485e:	e03a      	b.n	80048d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	68db      	ldr	r3, [r3, #12]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d020      	beq.n	80048aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004868:	4b34      	ldr	r3, [pc, #208]	; (800493c <HAL_RCC_OscConfig+0x244>)
 800486a:	2201      	movs	r2, #1
 800486c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800486e:	f7fc fd09 	bl	8001284 <HAL_GetTick>
 8004872:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004874:	e008      	b.n	8004888 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004876:	f7fc fd05 	bl	8001284 <HAL_GetTick>
 800487a:	4602      	mov	r2, r0
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	1ad3      	subs	r3, r2, r3
 8004880:	2b02      	cmp	r3, #2
 8004882:	d901      	bls.n	8004888 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004884:	2303      	movs	r3, #3
 8004886:	e1a8      	b.n	8004bda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004888:	4b2b      	ldr	r3, [pc, #172]	; (8004938 <HAL_RCC_OscConfig+0x240>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f003 0302 	and.w	r3, r3, #2
 8004890:	2b00      	cmp	r3, #0
 8004892:	d0f0      	beq.n	8004876 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004894:	4b28      	ldr	r3, [pc, #160]	; (8004938 <HAL_RCC_OscConfig+0x240>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	691b      	ldr	r3, [r3, #16]
 80048a0:	00db      	lsls	r3, r3, #3
 80048a2:	4925      	ldr	r1, [pc, #148]	; (8004938 <HAL_RCC_OscConfig+0x240>)
 80048a4:	4313      	orrs	r3, r2
 80048a6:	600b      	str	r3, [r1, #0]
 80048a8:	e015      	b.n	80048d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80048aa:	4b24      	ldr	r3, [pc, #144]	; (800493c <HAL_RCC_OscConfig+0x244>)
 80048ac:	2200      	movs	r2, #0
 80048ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048b0:	f7fc fce8 	bl	8001284 <HAL_GetTick>
 80048b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048b6:	e008      	b.n	80048ca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80048b8:	f7fc fce4 	bl	8001284 <HAL_GetTick>
 80048bc:	4602      	mov	r2, r0
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	1ad3      	subs	r3, r2, r3
 80048c2:	2b02      	cmp	r3, #2
 80048c4:	d901      	bls.n	80048ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80048c6:	2303      	movs	r3, #3
 80048c8:	e187      	b.n	8004bda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048ca:	4b1b      	ldr	r3, [pc, #108]	; (8004938 <HAL_RCC_OscConfig+0x240>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f003 0302 	and.w	r3, r3, #2
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d1f0      	bne.n	80048b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f003 0308 	and.w	r3, r3, #8
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d036      	beq.n	8004950 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	695b      	ldr	r3, [r3, #20]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d016      	beq.n	8004918 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048ea:	4b15      	ldr	r3, [pc, #84]	; (8004940 <HAL_RCC_OscConfig+0x248>)
 80048ec:	2201      	movs	r2, #1
 80048ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048f0:	f7fc fcc8 	bl	8001284 <HAL_GetTick>
 80048f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048f6:	e008      	b.n	800490a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80048f8:	f7fc fcc4 	bl	8001284 <HAL_GetTick>
 80048fc:	4602      	mov	r2, r0
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	1ad3      	subs	r3, r2, r3
 8004902:	2b02      	cmp	r3, #2
 8004904:	d901      	bls.n	800490a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004906:	2303      	movs	r3, #3
 8004908:	e167      	b.n	8004bda <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800490a:	4b0b      	ldr	r3, [pc, #44]	; (8004938 <HAL_RCC_OscConfig+0x240>)
 800490c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800490e:	f003 0302 	and.w	r3, r3, #2
 8004912:	2b00      	cmp	r3, #0
 8004914:	d0f0      	beq.n	80048f8 <HAL_RCC_OscConfig+0x200>
 8004916:	e01b      	b.n	8004950 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004918:	4b09      	ldr	r3, [pc, #36]	; (8004940 <HAL_RCC_OscConfig+0x248>)
 800491a:	2200      	movs	r2, #0
 800491c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800491e:	f7fc fcb1 	bl	8001284 <HAL_GetTick>
 8004922:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004924:	e00e      	b.n	8004944 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004926:	f7fc fcad 	bl	8001284 <HAL_GetTick>
 800492a:	4602      	mov	r2, r0
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	1ad3      	subs	r3, r2, r3
 8004930:	2b02      	cmp	r3, #2
 8004932:	d907      	bls.n	8004944 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004934:	2303      	movs	r3, #3
 8004936:	e150      	b.n	8004bda <HAL_RCC_OscConfig+0x4e2>
 8004938:	40023800 	.word	0x40023800
 800493c:	42470000 	.word	0x42470000
 8004940:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004944:	4b88      	ldr	r3, [pc, #544]	; (8004b68 <HAL_RCC_OscConfig+0x470>)
 8004946:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004948:	f003 0302 	and.w	r3, r3, #2
 800494c:	2b00      	cmp	r3, #0
 800494e:	d1ea      	bne.n	8004926 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f003 0304 	and.w	r3, r3, #4
 8004958:	2b00      	cmp	r3, #0
 800495a:	f000 8097 	beq.w	8004a8c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800495e:	2300      	movs	r3, #0
 8004960:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004962:	4b81      	ldr	r3, [pc, #516]	; (8004b68 <HAL_RCC_OscConfig+0x470>)
 8004964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004966:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800496a:	2b00      	cmp	r3, #0
 800496c:	d10f      	bne.n	800498e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800496e:	2300      	movs	r3, #0
 8004970:	60bb      	str	r3, [r7, #8]
 8004972:	4b7d      	ldr	r3, [pc, #500]	; (8004b68 <HAL_RCC_OscConfig+0x470>)
 8004974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004976:	4a7c      	ldr	r2, [pc, #496]	; (8004b68 <HAL_RCC_OscConfig+0x470>)
 8004978:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800497c:	6413      	str	r3, [r2, #64]	; 0x40
 800497e:	4b7a      	ldr	r3, [pc, #488]	; (8004b68 <HAL_RCC_OscConfig+0x470>)
 8004980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004982:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004986:	60bb      	str	r3, [r7, #8]
 8004988:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800498a:	2301      	movs	r3, #1
 800498c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800498e:	4b77      	ldr	r3, [pc, #476]	; (8004b6c <HAL_RCC_OscConfig+0x474>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004996:	2b00      	cmp	r3, #0
 8004998:	d118      	bne.n	80049cc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800499a:	4b74      	ldr	r3, [pc, #464]	; (8004b6c <HAL_RCC_OscConfig+0x474>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a73      	ldr	r2, [pc, #460]	; (8004b6c <HAL_RCC_OscConfig+0x474>)
 80049a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049a6:	f7fc fc6d 	bl	8001284 <HAL_GetTick>
 80049aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049ac:	e008      	b.n	80049c0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049ae:	f7fc fc69 	bl	8001284 <HAL_GetTick>
 80049b2:	4602      	mov	r2, r0
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	1ad3      	subs	r3, r2, r3
 80049b8:	2b02      	cmp	r3, #2
 80049ba:	d901      	bls.n	80049c0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80049bc:	2303      	movs	r3, #3
 80049be:	e10c      	b.n	8004bda <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049c0:	4b6a      	ldr	r3, [pc, #424]	; (8004b6c <HAL_RCC_OscConfig+0x474>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d0f0      	beq.n	80049ae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	689b      	ldr	r3, [r3, #8]
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d106      	bne.n	80049e2 <HAL_RCC_OscConfig+0x2ea>
 80049d4:	4b64      	ldr	r3, [pc, #400]	; (8004b68 <HAL_RCC_OscConfig+0x470>)
 80049d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049d8:	4a63      	ldr	r2, [pc, #396]	; (8004b68 <HAL_RCC_OscConfig+0x470>)
 80049da:	f043 0301 	orr.w	r3, r3, #1
 80049de:	6713      	str	r3, [r2, #112]	; 0x70
 80049e0:	e01c      	b.n	8004a1c <HAL_RCC_OscConfig+0x324>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	2b05      	cmp	r3, #5
 80049e8:	d10c      	bne.n	8004a04 <HAL_RCC_OscConfig+0x30c>
 80049ea:	4b5f      	ldr	r3, [pc, #380]	; (8004b68 <HAL_RCC_OscConfig+0x470>)
 80049ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049ee:	4a5e      	ldr	r2, [pc, #376]	; (8004b68 <HAL_RCC_OscConfig+0x470>)
 80049f0:	f043 0304 	orr.w	r3, r3, #4
 80049f4:	6713      	str	r3, [r2, #112]	; 0x70
 80049f6:	4b5c      	ldr	r3, [pc, #368]	; (8004b68 <HAL_RCC_OscConfig+0x470>)
 80049f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049fa:	4a5b      	ldr	r2, [pc, #364]	; (8004b68 <HAL_RCC_OscConfig+0x470>)
 80049fc:	f043 0301 	orr.w	r3, r3, #1
 8004a00:	6713      	str	r3, [r2, #112]	; 0x70
 8004a02:	e00b      	b.n	8004a1c <HAL_RCC_OscConfig+0x324>
 8004a04:	4b58      	ldr	r3, [pc, #352]	; (8004b68 <HAL_RCC_OscConfig+0x470>)
 8004a06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a08:	4a57      	ldr	r2, [pc, #348]	; (8004b68 <HAL_RCC_OscConfig+0x470>)
 8004a0a:	f023 0301 	bic.w	r3, r3, #1
 8004a0e:	6713      	str	r3, [r2, #112]	; 0x70
 8004a10:	4b55      	ldr	r3, [pc, #340]	; (8004b68 <HAL_RCC_OscConfig+0x470>)
 8004a12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a14:	4a54      	ldr	r2, [pc, #336]	; (8004b68 <HAL_RCC_OscConfig+0x470>)
 8004a16:	f023 0304 	bic.w	r3, r3, #4
 8004a1a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d015      	beq.n	8004a50 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a24:	f7fc fc2e 	bl	8001284 <HAL_GetTick>
 8004a28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a2a:	e00a      	b.n	8004a42 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a2c:	f7fc fc2a 	bl	8001284 <HAL_GetTick>
 8004a30:	4602      	mov	r2, r0
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	1ad3      	subs	r3, r2, r3
 8004a36:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d901      	bls.n	8004a42 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004a3e:	2303      	movs	r3, #3
 8004a40:	e0cb      	b.n	8004bda <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a42:	4b49      	ldr	r3, [pc, #292]	; (8004b68 <HAL_RCC_OscConfig+0x470>)
 8004a44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a46:	f003 0302 	and.w	r3, r3, #2
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d0ee      	beq.n	8004a2c <HAL_RCC_OscConfig+0x334>
 8004a4e:	e014      	b.n	8004a7a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a50:	f7fc fc18 	bl	8001284 <HAL_GetTick>
 8004a54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a56:	e00a      	b.n	8004a6e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a58:	f7fc fc14 	bl	8001284 <HAL_GetTick>
 8004a5c:	4602      	mov	r2, r0
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	1ad3      	subs	r3, r2, r3
 8004a62:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d901      	bls.n	8004a6e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004a6a:	2303      	movs	r3, #3
 8004a6c:	e0b5      	b.n	8004bda <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a6e:	4b3e      	ldr	r3, [pc, #248]	; (8004b68 <HAL_RCC_OscConfig+0x470>)
 8004a70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a72:	f003 0302 	and.w	r3, r3, #2
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d1ee      	bne.n	8004a58 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a7a:	7dfb      	ldrb	r3, [r7, #23]
 8004a7c:	2b01      	cmp	r3, #1
 8004a7e:	d105      	bne.n	8004a8c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a80:	4b39      	ldr	r3, [pc, #228]	; (8004b68 <HAL_RCC_OscConfig+0x470>)
 8004a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a84:	4a38      	ldr	r2, [pc, #224]	; (8004b68 <HAL_RCC_OscConfig+0x470>)
 8004a86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a8a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	699b      	ldr	r3, [r3, #24]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	f000 80a1 	beq.w	8004bd8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004a96:	4b34      	ldr	r3, [pc, #208]	; (8004b68 <HAL_RCC_OscConfig+0x470>)
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	f003 030c 	and.w	r3, r3, #12
 8004a9e:	2b08      	cmp	r3, #8
 8004aa0:	d05c      	beq.n	8004b5c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	699b      	ldr	r3, [r3, #24]
 8004aa6:	2b02      	cmp	r3, #2
 8004aa8:	d141      	bne.n	8004b2e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004aaa:	4b31      	ldr	r3, [pc, #196]	; (8004b70 <HAL_RCC_OscConfig+0x478>)
 8004aac:	2200      	movs	r2, #0
 8004aae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ab0:	f7fc fbe8 	bl	8001284 <HAL_GetTick>
 8004ab4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ab6:	e008      	b.n	8004aca <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ab8:	f7fc fbe4 	bl	8001284 <HAL_GetTick>
 8004abc:	4602      	mov	r2, r0
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	1ad3      	subs	r3, r2, r3
 8004ac2:	2b02      	cmp	r3, #2
 8004ac4:	d901      	bls.n	8004aca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004ac6:	2303      	movs	r3, #3
 8004ac8:	e087      	b.n	8004bda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004aca:	4b27      	ldr	r3, [pc, #156]	; (8004b68 <HAL_RCC_OscConfig+0x470>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d1f0      	bne.n	8004ab8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	69da      	ldr	r2, [r3, #28]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6a1b      	ldr	r3, [r3, #32]
 8004ade:	431a      	orrs	r2, r3
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae4:	019b      	lsls	r3, r3, #6
 8004ae6:	431a      	orrs	r2, r3
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aec:	085b      	lsrs	r3, r3, #1
 8004aee:	3b01      	subs	r3, #1
 8004af0:	041b      	lsls	r3, r3, #16
 8004af2:	431a      	orrs	r2, r3
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004af8:	061b      	lsls	r3, r3, #24
 8004afa:	491b      	ldr	r1, [pc, #108]	; (8004b68 <HAL_RCC_OscConfig+0x470>)
 8004afc:	4313      	orrs	r3, r2
 8004afe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b00:	4b1b      	ldr	r3, [pc, #108]	; (8004b70 <HAL_RCC_OscConfig+0x478>)
 8004b02:	2201      	movs	r2, #1
 8004b04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b06:	f7fc fbbd 	bl	8001284 <HAL_GetTick>
 8004b0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b0c:	e008      	b.n	8004b20 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b0e:	f7fc fbb9 	bl	8001284 <HAL_GetTick>
 8004b12:	4602      	mov	r2, r0
 8004b14:	693b      	ldr	r3, [r7, #16]
 8004b16:	1ad3      	subs	r3, r2, r3
 8004b18:	2b02      	cmp	r3, #2
 8004b1a:	d901      	bls.n	8004b20 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004b1c:	2303      	movs	r3, #3
 8004b1e:	e05c      	b.n	8004bda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b20:	4b11      	ldr	r3, [pc, #68]	; (8004b68 <HAL_RCC_OscConfig+0x470>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d0f0      	beq.n	8004b0e <HAL_RCC_OscConfig+0x416>
 8004b2c:	e054      	b.n	8004bd8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b2e:	4b10      	ldr	r3, [pc, #64]	; (8004b70 <HAL_RCC_OscConfig+0x478>)
 8004b30:	2200      	movs	r2, #0
 8004b32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b34:	f7fc fba6 	bl	8001284 <HAL_GetTick>
 8004b38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b3a:	e008      	b.n	8004b4e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b3c:	f7fc fba2 	bl	8001284 <HAL_GetTick>
 8004b40:	4602      	mov	r2, r0
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	1ad3      	subs	r3, r2, r3
 8004b46:	2b02      	cmp	r3, #2
 8004b48:	d901      	bls.n	8004b4e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004b4a:	2303      	movs	r3, #3
 8004b4c:	e045      	b.n	8004bda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b4e:	4b06      	ldr	r3, [pc, #24]	; (8004b68 <HAL_RCC_OscConfig+0x470>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d1f0      	bne.n	8004b3c <HAL_RCC_OscConfig+0x444>
 8004b5a:	e03d      	b.n	8004bd8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	699b      	ldr	r3, [r3, #24]
 8004b60:	2b01      	cmp	r3, #1
 8004b62:	d107      	bne.n	8004b74 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004b64:	2301      	movs	r3, #1
 8004b66:	e038      	b.n	8004bda <HAL_RCC_OscConfig+0x4e2>
 8004b68:	40023800 	.word	0x40023800
 8004b6c:	40007000 	.word	0x40007000
 8004b70:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004b74:	4b1b      	ldr	r3, [pc, #108]	; (8004be4 <HAL_RCC_OscConfig+0x4ec>)
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	699b      	ldr	r3, [r3, #24]
 8004b7e:	2b01      	cmp	r3, #1
 8004b80:	d028      	beq.n	8004bd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b8c:	429a      	cmp	r2, r3
 8004b8e:	d121      	bne.n	8004bd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b9a:	429a      	cmp	r2, r3
 8004b9c:	d11a      	bne.n	8004bd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b9e:	68fa      	ldr	r2, [r7, #12]
 8004ba0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004ba4:	4013      	ands	r3, r2
 8004ba6:	687a      	ldr	r2, [r7, #4]
 8004ba8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004baa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d111      	bne.n	8004bd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bba:	085b      	lsrs	r3, r3, #1
 8004bbc:	3b01      	subs	r3, #1
 8004bbe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004bc0:	429a      	cmp	r2, r3
 8004bc2:	d107      	bne.n	8004bd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	d001      	beq.n	8004bd8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	e000      	b.n	8004bda <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004bd8:	2300      	movs	r3, #0
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3718      	adds	r7, #24
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}
 8004be2:	bf00      	nop
 8004be4:	40023800 	.word	0x40023800

08004be8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b084      	sub	sp, #16
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
 8004bf0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d101      	bne.n	8004bfc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e0cc      	b.n	8004d96 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004bfc:	4b68      	ldr	r3, [pc, #416]	; (8004da0 <HAL_RCC_ClockConfig+0x1b8>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f003 030f 	and.w	r3, r3, #15
 8004c04:	683a      	ldr	r2, [r7, #0]
 8004c06:	429a      	cmp	r2, r3
 8004c08:	d90c      	bls.n	8004c24 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c0a:	4b65      	ldr	r3, [pc, #404]	; (8004da0 <HAL_RCC_ClockConfig+0x1b8>)
 8004c0c:	683a      	ldr	r2, [r7, #0]
 8004c0e:	b2d2      	uxtb	r2, r2
 8004c10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c12:	4b63      	ldr	r3, [pc, #396]	; (8004da0 <HAL_RCC_ClockConfig+0x1b8>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f003 030f 	and.w	r3, r3, #15
 8004c1a:	683a      	ldr	r2, [r7, #0]
 8004c1c:	429a      	cmp	r2, r3
 8004c1e:	d001      	beq.n	8004c24 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004c20:	2301      	movs	r3, #1
 8004c22:	e0b8      	b.n	8004d96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f003 0302 	and.w	r3, r3, #2
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d020      	beq.n	8004c72 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f003 0304 	and.w	r3, r3, #4
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d005      	beq.n	8004c48 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c3c:	4b59      	ldr	r3, [pc, #356]	; (8004da4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	4a58      	ldr	r2, [pc, #352]	; (8004da4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c42:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004c46:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f003 0308 	and.w	r3, r3, #8
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d005      	beq.n	8004c60 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c54:	4b53      	ldr	r3, [pc, #332]	; (8004da4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c56:	689b      	ldr	r3, [r3, #8]
 8004c58:	4a52      	ldr	r2, [pc, #328]	; (8004da4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c5a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004c5e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c60:	4b50      	ldr	r3, [pc, #320]	; (8004da4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c62:	689b      	ldr	r3, [r3, #8]
 8004c64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	689b      	ldr	r3, [r3, #8]
 8004c6c:	494d      	ldr	r1, [pc, #308]	; (8004da4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f003 0301 	and.w	r3, r3, #1
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d044      	beq.n	8004d08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	2b01      	cmp	r3, #1
 8004c84:	d107      	bne.n	8004c96 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c86:	4b47      	ldr	r3, [pc, #284]	; (8004da4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d119      	bne.n	8004cc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c92:	2301      	movs	r3, #1
 8004c94:	e07f      	b.n	8004d96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	2b02      	cmp	r3, #2
 8004c9c:	d003      	beq.n	8004ca6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ca2:	2b03      	cmp	r3, #3
 8004ca4:	d107      	bne.n	8004cb6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ca6:	4b3f      	ldr	r3, [pc, #252]	; (8004da4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d109      	bne.n	8004cc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	e06f      	b.n	8004d96 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cb6:	4b3b      	ldr	r3, [pc, #236]	; (8004da4 <HAL_RCC_ClockConfig+0x1bc>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f003 0302 	and.w	r3, r3, #2
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d101      	bne.n	8004cc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	e067      	b.n	8004d96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004cc6:	4b37      	ldr	r3, [pc, #220]	; (8004da4 <HAL_RCC_ClockConfig+0x1bc>)
 8004cc8:	689b      	ldr	r3, [r3, #8]
 8004cca:	f023 0203 	bic.w	r2, r3, #3
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	4934      	ldr	r1, [pc, #208]	; (8004da4 <HAL_RCC_ClockConfig+0x1bc>)
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004cd8:	f7fc fad4 	bl	8001284 <HAL_GetTick>
 8004cdc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cde:	e00a      	b.n	8004cf6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ce0:	f7fc fad0 	bl	8001284 <HAL_GetTick>
 8004ce4:	4602      	mov	r2, r0
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	1ad3      	subs	r3, r2, r3
 8004cea:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d901      	bls.n	8004cf6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004cf2:	2303      	movs	r3, #3
 8004cf4:	e04f      	b.n	8004d96 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cf6:	4b2b      	ldr	r3, [pc, #172]	; (8004da4 <HAL_RCC_ClockConfig+0x1bc>)
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	f003 020c 	and.w	r2, r3, #12
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	009b      	lsls	r3, r3, #2
 8004d04:	429a      	cmp	r2, r3
 8004d06:	d1eb      	bne.n	8004ce0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004d08:	4b25      	ldr	r3, [pc, #148]	; (8004da0 <HAL_RCC_ClockConfig+0x1b8>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f003 030f 	and.w	r3, r3, #15
 8004d10:	683a      	ldr	r2, [r7, #0]
 8004d12:	429a      	cmp	r2, r3
 8004d14:	d20c      	bcs.n	8004d30 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d16:	4b22      	ldr	r3, [pc, #136]	; (8004da0 <HAL_RCC_ClockConfig+0x1b8>)
 8004d18:	683a      	ldr	r2, [r7, #0]
 8004d1a:	b2d2      	uxtb	r2, r2
 8004d1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d1e:	4b20      	ldr	r3, [pc, #128]	; (8004da0 <HAL_RCC_ClockConfig+0x1b8>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f003 030f 	and.w	r3, r3, #15
 8004d26:	683a      	ldr	r2, [r7, #0]
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	d001      	beq.n	8004d30 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	e032      	b.n	8004d96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f003 0304 	and.w	r3, r3, #4
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d008      	beq.n	8004d4e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d3c:	4b19      	ldr	r3, [pc, #100]	; (8004da4 <HAL_RCC_ClockConfig+0x1bc>)
 8004d3e:	689b      	ldr	r3, [r3, #8]
 8004d40:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	68db      	ldr	r3, [r3, #12]
 8004d48:	4916      	ldr	r1, [pc, #88]	; (8004da4 <HAL_RCC_ClockConfig+0x1bc>)
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f003 0308 	and.w	r3, r3, #8
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d009      	beq.n	8004d6e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d5a:	4b12      	ldr	r3, [pc, #72]	; (8004da4 <HAL_RCC_ClockConfig+0x1bc>)
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	691b      	ldr	r3, [r3, #16]
 8004d66:	00db      	lsls	r3, r3, #3
 8004d68:	490e      	ldr	r1, [pc, #56]	; (8004da4 <HAL_RCC_ClockConfig+0x1bc>)
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004d6e:	f000 f821 	bl	8004db4 <HAL_RCC_GetSysClockFreq>
 8004d72:	4602      	mov	r2, r0
 8004d74:	4b0b      	ldr	r3, [pc, #44]	; (8004da4 <HAL_RCC_ClockConfig+0x1bc>)
 8004d76:	689b      	ldr	r3, [r3, #8]
 8004d78:	091b      	lsrs	r3, r3, #4
 8004d7a:	f003 030f 	and.w	r3, r3, #15
 8004d7e:	490a      	ldr	r1, [pc, #40]	; (8004da8 <HAL_RCC_ClockConfig+0x1c0>)
 8004d80:	5ccb      	ldrb	r3, [r1, r3]
 8004d82:	fa22 f303 	lsr.w	r3, r2, r3
 8004d86:	4a09      	ldr	r2, [pc, #36]	; (8004dac <HAL_RCC_ClockConfig+0x1c4>)
 8004d88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004d8a:	4b09      	ldr	r3, [pc, #36]	; (8004db0 <HAL_RCC_ClockConfig+0x1c8>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4618      	mov	r0, r3
 8004d90:	f7fc fa34 	bl	80011fc <HAL_InitTick>

  return HAL_OK;
 8004d94:	2300      	movs	r3, #0
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	3710      	adds	r7, #16
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}
 8004d9e:	bf00      	nop
 8004da0:	40023c00 	.word	0x40023c00
 8004da4:	40023800 	.word	0x40023800
 8004da8:	0800717c 	.word	0x0800717c
 8004dac:	20000000 	.word	0x20000000
 8004db0:	20000004 	.word	0x20000004

08004db4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004db4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004db8:	b094      	sub	sp, #80	; 0x50
 8004dba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	647b      	str	r3, [r7, #68]	; 0x44
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004dc8:	2300      	movs	r3, #0
 8004dca:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004dcc:	4b79      	ldr	r3, [pc, #484]	; (8004fb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004dce:	689b      	ldr	r3, [r3, #8]
 8004dd0:	f003 030c 	and.w	r3, r3, #12
 8004dd4:	2b08      	cmp	r3, #8
 8004dd6:	d00d      	beq.n	8004df4 <HAL_RCC_GetSysClockFreq+0x40>
 8004dd8:	2b08      	cmp	r3, #8
 8004dda:	f200 80e1 	bhi.w	8004fa0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d002      	beq.n	8004de8 <HAL_RCC_GetSysClockFreq+0x34>
 8004de2:	2b04      	cmp	r3, #4
 8004de4:	d003      	beq.n	8004dee <HAL_RCC_GetSysClockFreq+0x3a>
 8004de6:	e0db      	b.n	8004fa0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004de8:	4b73      	ldr	r3, [pc, #460]	; (8004fb8 <HAL_RCC_GetSysClockFreq+0x204>)
 8004dea:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004dec:	e0db      	b.n	8004fa6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004dee:	4b73      	ldr	r3, [pc, #460]	; (8004fbc <HAL_RCC_GetSysClockFreq+0x208>)
 8004df0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004df2:	e0d8      	b.n	8004fa6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004df4:	4b6f      	ldr	r3, [pc, #444]	; (8004fb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004dfc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004dfe:	4b6d      	ldr	r3, [pc, #436]	; (8004fb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d063      	beq.n	8004ed2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e0a:	4b6a      	ldr	r3, [pc, #424]	; (8004fb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	099b      	lsrs	r3, r3, #6
 8004e10:	2200      	movs	r2, #0
 8004e12:	63bb      	str	r3, [r7, #56]	; 0x38
 8004e14:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004e16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e1c:	633b      	str	r3, [r7, #48]	; 0x30
 8004e1e:	2300      	movs	r3, #0
 8004e20:	637b      	str	r3, [r7, #52]	; 0x34
 8004e22:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004e26:	4622      	mov	r2, r4
 8004e28:	462b      	mov	r3, r5
 8004e2a:	f04f 0000 	mov.w	r0, #0
 8004e2e:	f04f 0100 	mov.w	r1, #0
 8004e32:	0159      	lsls	r1, r3, #5
 8004e34:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e38:	0150      	lsls	r0, r2, #5
 8004e3a:	4602      	mov	r2, r0
 8004e3c:	460b      	mov	r3, r1
 8004e3e:	4621      	mov	r1, r4
 8004e40:	1a51      	subs	r1, r2, r1
 8004e42:	6139      	str	r1, [r7, #16]
 8004e44:	4629      	mov	r1, r5
 8004e46:	eb63 0301 	sbc.w	r3, r3, r1
 8004e4a:	617b      	str	r3, [r7, #20]
 8004e4c:	f04f 0200 	mov.w	r2, #0
 8004e50:	f04f 0300 	mov.w	r3, #0
 8004e54:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004e58:	4659      	mov	r1, fp
 8004e5a:	018b      	lsls	r3, r1, #6
 8004e5c:	4651      	mov	r1, sl
 8004e5e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004e62:	4651      	mov	r1, sl
 8004e64:	018a      	lsls	r2, r1, #6
 8004e66:	4651      	mov	r1, sl
 8004e68:	ebb2 0801 	subs.w	r8, r2, r1
 8004e6c:	4659      	mov	r1, fp
 8004e6e:	eb63 0901 	sbc.w	r9, r3, r1
 8004e72:	f04f 0200 	mov.w	r2, #0
 8004e76:	f04f 0300 	mov.w	r3, #0
 8004e7a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e7e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004e82:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004e86:	4690      	mov	r8, r2
 8004e88:	4699      	mov	r9, r3
 8004e8a:	4623      	mov	r3, r4
 8004e8c:	eb18 0303 	adds.w	r3, r8, r3
 8004e90:	60bb      	str	r3, [r7, #8]
 8004e92:	462b      	mov	r3, r5
 8004e94:	eb49 0303 	adc.w	r3, r9, r3
 8004e98:	60fb      	str	r3, [r7, #12]
 8004e9a:	f04f 0200 	mov.w	r2, #0
 8004e9e:	f04f 0300 	mov.w	r3, #0
 8004ea2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004ea6:	4629      	mov	r1, r5
 8004ea8:	024b      	lsls	r3, r1, #9
 8004eaa:	4621      	mov	r1, r4
 8004eac:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004eb0:	4621      	mov	r1, r4
 8004eb2:	024a      	lsls	r2, r1, #9
 8004eb4:	4610      	mov	r0, r2
 8004eb6:	4619      	mov	r1, r3
 8004eb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004eba:	2200      	movs	r2, #0
 8004ebc:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ebe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004ec0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004ec4:	f7fb f9e4 	bl	8000290 <__aeabi_uldivmod>
 8004ec8:	4602      	mov	r2, r0
 8004eca:	460b      	mov	r3, r1
 8004ecc:	4613      	mov	r3, r2
 8004ece:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ed0:	e058      	b.n	8004f84 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ed2:	4b38      	ldr	r3, [pc, #224]	; (8004fb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	099b      	lsrs	r3, r3, #6
 8004ed8:	2200      	movs	r2, #0
 8004eda:	4618      	mov	r0, r3
 8004edc:	4611      	mov	r1, r2
 8004ede:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004ee2:	623b      	str	r3, [r7, #32]
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	627b      	str	r3, [r7, #36]	; 0x24
 8004ee8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004eec:	4642      	mov	r2, r8
 8004eee:	464b      	mov	r3, r9
 8004ef0:	f04f 0000 	mov.w	r0, #0
 8004ef4:	f04f 0100 	mov.w	r1, #0
 8004ef8:	0159      	lsls	r1, r3, #5
 8004efa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004efe:	0150      	lsls	r0, r2, #5
 8004f00:	4602      	mov	r2, r0
 8004f02:	460b      	mov	r3, r1
 8004f04:	4641      	mov	r1, r8
 8004f06:	ebb2 0a01 	subs.w	sl, r2, r1
 8004f0a:	4649      	mov	r1, r9
 8004f0c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004f10:	f04f 0200 	mov.w	r2, #0
 8004f14:	f04f 0300 	mov.w	r3, #0
 8004f18:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004f1c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004f20:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004f24:	ebb2 040a 	subs.w	r4, r2, sl
 8004f28:	eb63 050b 	sbc.w	r5, r3, fp
 8004f2c:	f04f 0200 	mov.w	r2, #0
 8004f30:	f04f 0300 	mov.w	r3, #0
 8004f34:	00eb      	lsls	r3, r5, #3
 8004f36:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f3a:	00e2      	lsls	r2, r4, #3
 8004f3c:	4614      	mov	r4, r2
 8004f3e:	461d      	mov	r5, r3
 8004f40:	4643      	mov	r3, r8
 8004f42:	18e3      	adds	r3, r4, r3
 8004f44:	603b      	str	r3, [r7, #0]
 8004f46:	464b      	mov	r3, r9
 8004f48:	eb45 0303 	adc.w	r3, r5, r3
 8004f4c:	607b      	str	r3, [r7, #4]
 8004f4e:	f04f 0200 	mov.w	r2, #0
 8004f52:	f04f 0300 	mov.w	r3, #0
 8004f56:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004f5a:	4629      	mov	r1, r5
 8004f5c:	028b      	lsls	r3, r1, #10
 8004f5e:	4621      	mov	r1, r4
 8004f60:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004f64:	4621      	mov	r1, r4
 8004f66:	028a      	lsls	r2, r1, #10
 8004f68:	4610      	mov	r0, r2
 8004f6a:	4619      	mov	r1, r3
 8004f6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f6e:	2200      	movs	r2, #0
 8004f70:	61bb      	str	r3, [r7, #24]
 8004f72:	61fa      	str	r2, [r7, #28]
 8004f74:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f78:	f7fb f98a 	bl	8000290 <__aeabi_uldivmod>
 8004f7c:	4602      	mov	r2, r0
 8004f7e:	460b      	mov	r3, r1
 8004f80:	4613      	mov	r3, r2
 8004f82:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004f84:	4b0b      	ldr	r3, [pc, #44]	; (8004fb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	0c1b      	lsrs	r3, r3, #16
 8004f8a:	f003 0303 	and.w	r3, r3, #3
 8004f8e:	3301      	adds	r3, #1
 8004f90:	005b      	lsls	r3, r3, #1
 8004f92:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004f94:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004f96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f98:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f9c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004f9e:	e002      	b.n	8004fa6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004fa0:	4b05      	ldr	r3, [pc, #20]	; (8004fb8 <HAL_RCC_GetSysClockFreq+0x204>)
 8004fa2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004fa4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004fa6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	3750      	adds	r7, #80	; 0x50
 8004fac:	46bd      	mov	sp, r7
 8004fae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004fb2:	bf00      	nop
 8004fb4:	40023800 	.word	0x40023800
 8004fb8:	00f42400 	.word	0x00f42400
 8004fbc:	007a1200 	.word	0x007a1200

08004fc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004fc4:	4b03      	ldr	r3, [pc, #12]	; (8004fd4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd0:	4770      	bx	lr
 8004fd2:	bf00      	nop
 8004fd4:	20000000 	.word	0x20000000

08004fd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004fdc:	f7ff fff0 	bl	8004fc0 <HAL_RCC_GetHCLKFreq>
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	4b05      	ldr	r3, [pc, #20]	; (8004ff8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004fe4:	689b      	ldr	r3, [r3, #8]
 8004fe6:	0a9b      	lsrs	r3, r3, #10
 8004fe8:	f003 0307 	and.w	r3, r3, #7
 8004fec:	4903      	ldr	r1, [pc, #12]	; (8004ffc <HAL_RCC_GetPCLK1Freq+0x24>)
 8004fee:	5ccb      	ldrb	r3, [r1, r3]
 8004ff0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	bd80      	pop	{r7, pc}
 8004ff8:	40023800 	.word	0x40023800
 8004ffc:	0800718c 	.word	0x0800718c

08005000 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005004:	f7ff ffdc 	bl	8004fc0 <HAL_RCC_GetHCLKFreq>
 8005008:	4602      	mov	r2, r0
 800500a:	4b05      	ldr	r3, [pc, #20]	; (8005020 <HAL_RCC_GetPCLK2Freq+0x20>)
 800500c:	689b      	ldr	r3, [r3, #8]
 800500e:	0b5b      	lsrs	r3, r3, #13
 8005010:	f003 0307 	and.w	r3, r3, #7
 8005014:	4903      	ldr	r1, [pc, #12]	; (8005024 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005016:	5ccb      	ldrb	r3, [r1, r3]
 8005018:	fa22 f303 	lsr.w	r3, r2, r3
}
 800501c:	4618      	mov	r0, r3
 800501e:	bd80      	pop	{r7, pc}
 8005020:	40023800 	.word	0x40023800
 8005024:	0800718c 	.word	0x0800718c

08005028 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b082      	sub	sp, #8
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d101      	bne.n	800503a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005036:	2301      	movs	r3, #1
 8005038:	e03f      	b.n	80050ba <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005040:	b2db      	uxtb	r3, r3
 8005042:	2b00      	cmp	r3, #0
 8005044:	d106      	bne.n	8005054 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2200      	movs	r2, #0
 800504a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	f7fc f838 	bl	80010c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2224      	movs	r2, #36	; 0x24
 8005058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	68da      	ldr	r2, [r3, #12]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800506a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800506c:	6878      	ldr	r0, [r7, #4]
 800506e:	f000 fd7b 	bl	8005b68 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	691a      	ldr	r2, [r3, #16]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005080:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	695a      	ldr	r2, [r3, #20]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005090:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	68da      	ldr	r2, [r3, #12]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80050a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2200      	movs	r2, #0
 80050a6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2220      	movs	r2, #32
 80050ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2220      	movs	r2, #32
 80050b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80050b8:	2300      	movs	r3, #0
}
 80050ba:	4618      	mov	r0, r3
 80050bc:	3708      	adds	r7, #8
 80050be:	46bd      	mov	sp, r7
 80050c0:	bd80      	pop	{r7, pc}

080050c2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050c2:	b580      	push	{r7, lr}
 80050c4:	b08a      	sub	sp, #40	; 0x28
 80050c6:	af02      	add	r7, sp, #8
 80050c8:	60f8      	str	r0, [r7, #12]
 80050ca:	60b9      	str	r1, [r7, #8]
 80050cc:	603b      	str	r3, [r7, #0]
 80050ce:	4613      	mov	r3, r2
 80050d0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80050d2:	2300      	movs	r3, #0
 80050d4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050dc:	b2db      	uxtb	r3, r3
 80050de:	2b20      	cmp	r3, #32
 80050e0:	d17c      	bne.n	80051dc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d002      	beq.n	80050ee <HAL_UART_Transmit+0x2c>
 80050e8:	88fb      	ldrh	r3, [r7, #6]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d101      	bne.n	80050f2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80050ee:	2301      	movs	r3, #1
 80050f0:	e075      	b.n	80051de <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050f8:	2b01      	cmp	r3, #1
 80050fa:	d101      	bne.n	8005100 <HAL_UART_Transmit+0x3e>
 80050fc:	2302      	movs	r3, #2
 80050fe:	e06e      	b.n	80051de <HAL_UART_Transmit+0x11c>
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	2201      	movs	r2, #1
 8005104:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	2200      	movs	r2, #0
 800510c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2221      	movs	r2, #33	; 0x21
 8005112:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005116:	f7fc f8b5 	bl	8001284 <HAL_GetTick>
 800511a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	88fa      	ldrh	r2, [r7, #6]
 8005120:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	88fa      	ldrh	r2, [r7, #6]
 8005126:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	689b      	ldr	r3, [r3, #8]
 800512c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005130:	d108      	bne.n	8005144 <HAL_UART_Transmit+0x82>
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	691b      	ldr	r3, [r3, #16]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d104      	bne.n	8005144 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800513a:	2300      	movs	r3, #0
 800513c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	61bb      	str	r3, [r7, #24]
 8005142:	e003      	b.n	800514c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005148:	2300      	movs	r3, #0
 800514a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2200      	movs	r2, #0
 8005150:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005154:	e02a      	b.n	80051ac <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	9300      	str	r3, [sp, #0]
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	2200      	movs	r2, #0
 800515e:	2180      	movs	r1, #128	; 0x80
 8005160:	68f8      	ldr	r0, [r7, #12]
 8005162:	f000 faf9 	bl	8005758 <UART_WaitOnFlagUntilTimeout>
 8005166:	4603      	mov	r3, r0
 8005168:	2b00      	cmp	r3, #0
 800516a:	d001      	beq.n	8005170 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800516c:	2303      	movs	r3, #3
 800516e:	e036      	b.n	80051de <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005170:	69fb      	ldr	r3, [r7, #28]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d10b      	bne.n	800518e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005176:	69bb      	ldr	r3, [r7, #24]
 8005178:	881b      	ldrh	r3, [r3, #0]
 800517a:	461a      	mov	r2, r3
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005184:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005186:	69bb      	ldr	r3, [r7, #24]
 8005188:	3302      	adds	r3, #2
 800518a:	61bb      	str	r3, [r7, #24]
 800518c:	e007      	b.n	800519e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800518e:	69fb      	ldr	r3, [r7, #28]
 8005190:	781a      	ldrb	r2, [r3, #0]
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005198:	69fb      	ldr	r3, [r7, #28]
 800519a:	3301      	adds	r3, #1
 800519c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80051a2:	b29b      	uxth	r3, r3
 80051a4:	3b01      	subs	r3, #1
 80051a6:	b29a      	uxth	r2, r3
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80051b0:	b29b      	uxth	r3, r3
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d1cf      	bne.n	8005156 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	9300      	str	r3, [sp, #0]
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	2200      	movs	r2, #0
 80051be:	2140      	movs	r1, #64	; 0x40
 80051c0:	68f8      	ldr	r0, [r7, #12]
 80051c2:	f000 fac9 	bl	8005758 <UART_WaitOnFlagUntilTimeout>
 80051c6:	4603      	mov	r3, r0
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d001      	beq.n	80051d0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80051cc:	2303      	movs	r3, #3
 80051ce:	e006      	b.n	80051de <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2220      	movs	r2, #32
 80051d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80051d8:	2300      	movs	r3, #0
 80051da:	e000      	b.n	80051de <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80051dc:	2302      	movs	r3, #2
  }
}
 80051de:	4618      	mov	r0, r3
 80051e0:	3720      	adds	r7, #32
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd80      	pop	{r7, pc}
	...

080051e8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b0ba      	sub	sp, #232	; 0xe8
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	68db      	ldr	r3, [r3, #12]
 8005200:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	695b      	ldr	r3, [r3, #20]
 800520a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800520e:	2300      	movs	r3, #0
 8005210:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005214:	2300      	movs	r3, #0
 8005216:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800521a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800521e:	f003 030f 	and.w	r3, r3, #15
 8005222:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005226:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800522a:	2b00      	cmp	r3, #0
 800522c:	d10f      	bne.n	800524e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800522e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005232:	f003 0320 	and.w	r3, r3, #32
 8005236:	2b00      	cmp	r3, #0
 8005238:	d009      	beq.n	800524e <HAL_UART_IRQHandler+0x66>
 800523a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800523e:	f003 0320 	and.w	r3, r3, #32
 8005242:	2b00      	cmp	r3, #0
 8005244:	d003      	beq.n	800524e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f000 fbd3 	bl	80059f2 <UART_Receive_IT>
      return;
 800524c:	e256      	b.n	80056fc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800524e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005252:	2b00      	cmp	r3, #0
 8005254:	f000 80de 	beq.w	8005414 <HAL_UART_IRQHandler+0x22c>
 8005258:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800525c:	f003 0301 	and.w	r3, r3, #1
 8005260:	2b00      	cmp	r3, #0
 8005262:	d106      	bne.n	8005272 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005264:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005268:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800526c:	2b00      	cmp	r3, #0
 800526e:	f000 80d1 	beq.w	8005414 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005272:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005276:	f003 0301 	and.w	r3, r3, #1
 800527a:	2b00      	cmp	r3, #0
 800527c:	d00b      	beq.n	8005296 <HAL_UART_IRQHandler+0xae>
 800527e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005282:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005286:	2b00      	cmp	r3, #0
 8005288:	d005      	beq.n	8005296 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800528e:	f043 0201 	orr.w	r2, r3, #1
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005296:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800529a:	f003 0304 	and.w	r3, r3, #4
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d00b      	beq.n	80052ba <HAL_UART_IRQHandler+0xd2>
 80052a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80052a6:	f003 0301 	and.w	r3, r3, #1
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d005      	beq.n	80052ba <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052b2:	f043 0202 	orr.w	r2, r3, #2
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80052ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052be:	f003 0302 	and.w	r3, r3, #2
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d00b      	beq.n	80052de <HAL_UART_IRQHandler+0xf6>
 80052c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80052ca:	f003 0301 	and.w	r3, r3, #1
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d005      	beq.n	80052de <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052d6:	f043 0204 	orr.w	r2, r3, #4
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80052de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052e2:	f003 0308 	and.w	r3, r3, #8
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d011      	beq.n	800530e <HAL_UART_IRQHandler+0x126>
 80052ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052ee:	f003 0320 	and.w	r3, r3, #32
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d105      	bne.n	8005302 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80052f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80052fa:	f003 0301 	and.w	r3, r3, #1
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d005      	beq.n	800530e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005306:	f043 0208 	orr.w	r2, r3, #8
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005312:	2b00      	cmp	r3, #0
 8005314:	f000 81ed 	beq.w	80056f2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005318:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800531c:	f003 0320 	and.w	r3, r3, #32
 8005320:	2b00      	cmp	r3, #0
 8005322:	d008      	beq.n	8005336 <HAL_UART_IRQHandler+0x14e>
 8005324:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005328:	f003 0320 	and.w	r3, r3, #32
 800532c:	2b00      	cmp	r3, #0
 800532e:	d002      	beq.n	8005336 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005330:	6878      	ldr	r0, [r7, #4]
 8005332:	f000 fb5e 	bl	80059f2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	695b      	ldr	r3, [r3, #20]
 800533c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005340:	2b40      	cmp	r3, #64	; 0x40
 8005342:	bf0c      	ite	eq
 8005344:	2301      	moveq	r3, #1
 8005346:	2300      	movne	r3, #0
 8005348:	b2db      	uxtb	r3, r3
 800534a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005352:	f003 0308 	and.w	r3, r3, #8
 8005356:	2b00      	cmp	r3, #0
 8005358:	d103      	bne.n	8005362 <HAL_UART_IRQHandler+0x17a>
 800535a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800535e:	2b00      	cmp	r3, #0
 8005360:	d04f      	beq.n	8005402 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	f000 fa66 	bl	8005834 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	695b      	ldr	r3, [r3, #20]
 800536e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005372:	2b40      	cmp	r3, #64	; 0x40
 8005374:	d141      	bne.n	80053fa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	3314      	adds	r3, #20
 800537c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005380:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005384:	e853 3f00 	ldrex	r3, [r3]
 8005388:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800538c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005390:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005394:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	3314      	adds	r3, #20
 800539e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80053a2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80053a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053aa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80053ae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80053b2:	e841 2300 	strex	r3, r2, [r1]
 80053b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80053ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d1d9      	bne.n	8005376 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d013      	beq.n	80053f2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ce:	4a7d      	ldr	r2, [pc, #500]	; (80055c4 <HAL_UART_IRQHandler+0x3dc>)
 80053d0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053d6:	4618      	mov	r0, r3
 80053d8:	f7fc f905 	bl	80015e6 <HAL_DMA_Abort_IT>
 80053dc:	4603      	mov	r3, r0
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d016      	beq.n	8005410 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053e8:	687a      	ldr	r2, [r7, #4]
 80053ea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80053ec:	4610      	mov	r0, r2
 80053ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053f0:	e00e      	b.n	8005410 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	f000 f99a 	bl	800572c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053f8:	e00a      	b.n	8005410 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	f000 f996 	bl	800572c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005400:	e006      	b.n	8005410 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005402:	6878      	ldr	r0, [r7, #4]
 8005404:	f000 f992 	bl	800572c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2200      	movs	r2, #0
 800540c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800540e:	e170      	b.n	80056f2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005410:	bf00      	nop
    return;
 8005412:	e16e      	b.n	80056f2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005418:	2b01      	cmp	r3, #1
 800541a:	f040 814a 	bne.w	80056b2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800541e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005422:	f003 0310 	and.w	r3, r3, #16
 8005426:	2b00      	cmp	r3, #0
 8005428:	f000 8143 	beq.w	80056b2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800542c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005430:	f003 0310 	and.w	r3, r3, #16
 8005434:	2b00      	cmp	r3, #0
 8005436:	f000 813c 	beq.w	80056b2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800543a:	2300      	movs	r3, #0
 800543c:	60bb      	str	r3, [r7, #8]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	60bb      	str	r3, [r7, #8]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	60bb      	str	r3, [r7, #8]
 800544e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	695b      	ldr	r3, [r3, #20]
 8005456:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800545a:	2b40      	cmp	r3, #64	; 0x40
 800545c:	f040 80b4 	bne.w	80055c8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800546c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005470:	2b00      	cmp	r3, #0
 8005472:	f000 8140 	beq.w	80056f6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800547a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800547e:	429a      	cmp	r2, r3
 8005480:	f080 8139 	bcs.w	80056f6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800548a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005490:	69db      	ldr	r3, [r3, #28]
 8005492:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005496:	f000 8088 	beq.w	80055aa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	330c      	adds	r3, #12
 80054a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80054a8:	e853 3f00 	ldrex	r3, [r3]
 80054ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80054b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80054b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80054b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	330c      	adds	r3, #12
 80054c2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80054c6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80054ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ce:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80054d2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80054d6:	e841 2300 	strex	r3, r2, [r1]
 80054da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80054de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d1d9      	bne.n	800549a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	3314      	adds	r3, #20
 80054ec:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80054f0:	e853 3f00 	ldrex	r3, [r3]
 80054f4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80054f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80054f8:	f023 0301 	bic.w	r3, r3, #1
 80054fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	3314      	adds	r3, #20
 8005506:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800550a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800550e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005510:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005512:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005516:	e841 2300 	strex	r3, r2, [r1]
 800551a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800551c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800551e:	2b00      	cmp	r3, #0
 8005520:	d1e1      	bne.n	80054e6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	3314      	adds	r3, #20
 8005528:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800552a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800552c:	e853 3f00 	ldrex	r3, [r3]
 8005530:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005532:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005534:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005538:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	3314      	adds	r3, #20
 8005542:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005546:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005548:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800554a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800554c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800554e:	e841 2300 	strex	r3, r2, [r1]
 8005552:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005554:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005556:	2b00      	cmp	r3, #0
 8005558:	d1e3      	bne.n	8005522 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2220      	movs	r2, #32
 800555e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2200      	movs	r2, #0
 8005566:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	330c      	adds	r3, #12
 800556e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005570:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005572:	e853 3f00 	ldrex	r3, [r3]
 8005576:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005578:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800557a:	f023 0310 	bic.w	r3, r3, #16
 800557e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	330c      	adds	r3, #12
 8005588:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800558c:	65ba      	str	r2, [r7, #88]	; 0x58
 800558e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005590:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005592:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005594:	e841 2300 	strex	r3, r2, [r1]
 8005598:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800559a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800559c:	2b00      	cmp	r3, #0
 800559e:	d1e3      	bne.n	8005568 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055a4:	4618      	mov	r0, r3
 80055a6:	f7fb ffae 	bl	8001506 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80055b2:	b29b      	uxth	r3, r3
 80055b4:	1ad3      	subs	r3, r2, r3
 80055b6:	b29b      	uxth	r3, r3
 80055b8:	4619      	mov	r1, r3
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	f000 f8c0 	bl	8005740 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80055c0:	e099      	b.n	80056f6 <HAL_UART_IRQHandler+0x50e>
 80055c2:	bf00      	nop
 80055c4:	080058fb 	.word	0x080058fb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80055d0:	b29b      	uxth	r3, r3
 80055d2:	1ad3      	subs	r3, r2, r3
 80055d4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80055dc:	b29b      	uxth	r3, r3
 80055de:	2b00      	cmp	r3, #0
 80055e0:	f000 808b 	beq.w	80056fa <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80055e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	f000 8086 	beq.w	80056fa <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	330c      	adds	r3, #12
 80055f4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055f8:	e853 3f00 	ldrex	r3, [r3]
 80055fc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80055fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005600:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005604:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	330c      	adds	r3, #12
 800560e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005612:	647a      	str	r2, [r7, #68]	; 0x44
 8005614:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005616:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005618:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800561a:	e841 2300 	strex	r3, r2, [r1]
 800561e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005620:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005622:	2b00      	cmp	r3, #0
 8005624:	d1e3      	bne.n	80055ee <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	3314      	adds	r3, #20
 800562c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800562e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005630:	e853 3f00 	ldrex	r3, [r3]
 8005634:	623b      	str	r3, [r7, #32]
   return(result);
 8005636:	6a3b      	ldr	r3, [r7, #32]
 8005638:	f023 0301 	bic.w	r3, r3, #1
 800563c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	3314      	adds	r3, #20
 8005646:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800564a:	633a      	str	r2, [r7, #48]	; 0x30
 800564c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800564e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005650:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005652:	e841 2300 	strex	r3, r2, [r1]
 8005656:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800565a:	2b00      	cmp	r3, #0
 800565c:	d1e3      	bne.n	8005626 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2220      	movs	r2, #32
 8005662:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2200      	movs	r2, #0
 800566a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	330c      	adds	r3, #12
 8005672:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	e853 3f00 	ldrex	r3, [r3]
 800567a:	60fb      	str	r3, [r7, #12]
   return(result);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	f023 0310 	bic.w	r3, r3, #16
 8005682:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	330c      	adds	r3, #12
 800568c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005690:	61fa      	str	r2, [r7, #28]
 8005692:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005694:	69b9      	ldr	r1, [r7, #24]
 8005696:	69fa      	ldr	r2, [r7, #28]
 8005698:	e841 2300 	strex	r3, r2, [r1]
 800569c:	617b      	str	r3, [r7, #20]
   return(result);
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d1e3      	bne.n	800566c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80056a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80056a8:	4619      	mov	r1, r3
 80056aa:	6878      	ldr	r0, [r7, #4]
 80056ac:	f000 f848 	bl	8005740 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80056b0:	e023      	b.n	80056fa <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80056b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d009      	beq.n	80056d2 <HAL_UART_IRQHandler+0x4ea>
 80056be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d003      	beq.n	80056d2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	f000 f929 	bl	8005922 <UART_Transmit_IT>
    return;
 80056d0:	e014      	b.n	80056fc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80056d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d00e      	beq.n	80056fc <HAL_UART_IRQHandler+0x514>
 80056de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d008      	beq.n	80056fc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f000 f969 	bl	80059c2 <UART_EndTransmit_IT>
    return;
 80056f0:	e004      	b.n	80056fc <HAL_UART_IRQHandler+0x514>
    return;
 80056f2:	bf00      	nop
 80056f4:	e002      	b.n	80056fc <HAL_UART_IRQHandler+0x514>
      return;
 80056f6:	bf00      	nop
 80056f8:	e000      	b.n	80056fc <HAL_UART_IRQHandler+0x514>
      return;
 80056fa:	bf00      	nop
  }
}
 80056fc:	37e8      	adds	r7, #232	; 0xe8
 80056fe:	46bd      	mov	sp, r7
 8005700:	bd80      	pop	{r7, pc}
 8005702:	bf00      	nop

08005704 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005704:	b480      	push	{r7}
 8005706:	b083      	sub	sp, #12
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800570c:	bf00      	nop
 800570e:	370c      	adds	r7, #12
 8005710:	46bd      	mov	sp, r7
 8005712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005716:	4770      	bx	lr

08005718 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005718:	b480      	push	{r7}
 800571a:	b083      	sub	sp, #12
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005720:	bf00      	nop
 8005722:	370c      	adds	r7, #12
 8005724:	46bd      	mov	sp, r7
 8005726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572a:	4770      	bx	lr

0800572c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800572c:	b480      	push	{r7}
 800572e:	b083      	sub	sp, #12
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005734:	bf00      	nop
 8005736:	370c      	adds	r7, #12
 8005738:	46bd      	mov	sp, r7
 800573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573e:	4770      	bx	lr

08005740 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005740:	b480      	push	{r7}
 8005742:	b083      	sub	sp, #12
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
 8005748:	460b      	mov	r3, r1
 800574a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800574c:	bf00      	nop
 800574e:	370c      	adds	r7, #12
 8005750:	46bd      	mov	sp, r7
 8005752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005756:	4770      	bx	lr

08005758 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b090      	sub	sp, #64	; 0x40
 800575c:	af00      	add	r7, sp, #0
 800575e:	60f8      	str	r0, [r7, #12]
 8005760:	60b9      	str	r1, [r7, #8]
 8005762:	603b      	str	r3, [r7, #0]
 8005764:	4613      	mov	r3, r2
 8005766:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005768:	e050      	b.n	800580c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800576a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800576c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005770:	d04c      	beq.n	800580c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005772:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005774:	2b00      	cmp	r3, #0
 8005776:	d007      	beq.n	8005788 <UART_WaitOnFlagUntilTimeout+0x30>
 8005778:	f7fb fd84 	bl	8001284 <HAL_GetTick>
 800577c:	4602      	mov	r2, r0
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	1ad3      	subs	r3, r2, r3
 8005782:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005784:	429a      	cmp	r2, r3
 8005786:	d241      	bcs.n	800580c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	330c      	adds	r3, #12
 800578e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005792:	e853 3f00 	ldrex	r3, [r3]
 8005796:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800579a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800579e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	330c      	adds	r3, #12
 80057a6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80057a8:	637a      	str	r2, [r7, #52]	; 0x34
 80057aa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80057ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80057b0:	e841 2300 	strex	r3, r2, [r1]
 80057b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80057b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d1e5      	bne.n	8005788 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	3314      	adds	r3, #20
 80057c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	e853 3f00 	ldrex	r3, [r3]
 80057ca:	613b      	str	r3, [r7, #16]
   return(result);
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	f023 0301 	bic.w	r3, r3, #1
 80057d2:	63bb      	str	r3, [r7, #56]	; 0x38
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	3314      	adds	r3, #20
 80057da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80057dc:	623a      	str	r2, [r7, #32]
 80057de:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057e0:	69f9      	ldr	r1, [r7, #28]
 80057e2:	6a3a      	ldr	r2, [r7, #32]
 80057e4:	e841 2300 	strex	r3, r2, [r1]
 80057e8:	61bb      	str	r3, [r7, #24]
   return(result);
 80057ea:	69bb      	ldr	r3, [r7, #24]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d1e5      	bne.n	80057bc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	2220      	movs	r2, #32
 80057f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	2220      	movs	r2, #32
 80057fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	2200      	movs	r2, #0
 8005804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005808:	2303      	movs	r3, #3
 800580a:	e00f      	b.n	800582c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	681a      	ldr	r2, [r3, #0]
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	4013      	ands	r3, r2
 8005816:	68ba      	ldr	r2, [r7, #8]
 8005818:	429a      	cmp	r2, r3
 800581a:	bf0c      	ite	eq
 800581c:	2301      	moveq	r3, #1
 800581e:	2300      	movne	r3, #0
 8005820:	b2db      	uxtb	r3, r3
 8005822:	461a      	mov	r2, r3
 8005824:	79fb      	ldrb	r3, [r7, #7]
 8005826:	429a      	cmp	r2, r3
 8005828:	d09f      	beq.n	800576a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800582a:	2300      	movs	r3, #0
}
 800582c:	4618      	mov	r0, r3
 800582e:	3740      	adds	r7, #64	; 0x40
 8005830:	46bd      	mov	sp, r7
 8005832:	bd80      	pop	{r7, pc}

08005834 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005834:	b480      	push	{r7}
 8005836:	b095      	sub	sp, #84	; 0x54
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	330c      	adds	r3, #12
 8005842:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005844:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005846:	e853 3f00 	ldrex	r3, [r3]
 800584a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800584c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800584e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005852:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	330c      	adds	r3, #12
 800585a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800585c:	643a      	str	r2, [r7, #64]	; 0x40
 800585e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005860:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005862:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005864:	e841 2300 	strex	r3, r2, [r1]
 8005868:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800586a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800586c:	2b00      	cmp	r3, #0
 800586e:	d1e5      	bne.n	800583c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	3314      	adds	r3, #20
 8005876:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005878:	6a3b      	ldr	r3, [r7, #32]
 800587a:	e853 3f00 	ldrex	r3, [r3]
 800587e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005880:	69fb      	ldr	r3, [r7, #28]
 8005882:	f023 0301 	bic.w	r3, r3, #1
 8005886:	64bb      	str	r3, [r7, #72]	; 0x48
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	3314      	adds	r3, #20
 800588e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005890:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005892:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005894:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005896:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005898:	e841 2300 	strex	r3, r2, [r1]
 800589c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800589e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d1e5      	bne.n	8005870 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058a8:	2b01      	cmp	r3, #1
 80058aa:	d119      	bne.n	80058e0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	330c      	adds	r3, #12
 80058b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	e853 3f00 	ldrex	r3, [r3]
 80058ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	f023 0310 	bic.w	r3, r3, #16
 80058c2:	647b      	str	r3, [r7, #68]	; 0x44
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	330c      	adds	r3, #12
 80058ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80058cc:	61ba      	str	r2, [r7, #24]
 80058ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058d0:	6979      	ldr	r1, [r7, #20]
 80058d2:	69ba      	ldr	r2, [r7, #24]
 80058d4:	e841 2300 	strex	r3, r2, [r1]
 80058d8:	613b      	str	r3, [r7, #16]
   return(result);
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d1e5      	bne.n	80058ac <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2220      	movs	r2, #32
 80058e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2200      	movs	r2, #0
 80058ec:	631a      	str	r2, [r3, #48]	; 0x30
}
 80058ee:	bf00      	nop
 80058f0:	3754      	adds	r7, #84	; 0x54
 80058f2:	46bd      	mov	sp, r7
 80058f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f8:	4770      	bx	lr

080058fa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80058fa:	b580      	push	{r7, lr}
 80058fc:	b084      	sub	sp, #16
 80058fe:	af00      	add	r7, sp, #0
 8005900:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005906:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	2200      	movs	r2, #0
 800590c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2200      	movs	r2, #0
 8005912:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005914:	68f8      	ldr	r0, [r7, #12]
 8005916:	f7ff ff09 	bl	800572c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800591a:	bf00      	nop
 800591c:	3710      	adds	r7, #16
 800591e:	46bd      	mov	sp, r7
 8005920:	bd80      	pop	{r7, pc}

08005922 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005922:	b480      	push	{r7}
 8005924:	b085      	sub	sp, #20
 8005926:	af00      	add	r7, sp, #0
 8005928:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005930:	b2db      	uxtb	r3, r3
 8005932:	2b21      	cmp	r3, #33	; 0x21
 8005934:	d13e      	bne.n	80059b4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	689b      	ldr	r3, [r3, #8]
 800593a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800593e:	d114      	bne.n	800596a <UART_Transmit_IT+0x48>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	691b      	ldr	r3, [r3, #16]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d110      	bne.n	800596a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6a1b      	ldr	r3, [r3, #32]
 800594c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	881b      	ldrh	r3, [r3, #0]
 8005952:	461a      	mov	r2, r3
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800595c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6a1b      	ldr	r3, [r3, #32]
 8005962:	1c9a      	adds	r2, r3, #2
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	621a      	str	r2, [r3, #32]
 8005968:	e008      	b.n	800597c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6a1b      	ldr	r3, [r3, #32]
 800596e:	1c59      	adds	r1, r3, #1
 8005970:	687a      	ldr	r2, [r7, #4]
 8005972:	6211      	str	r1, [r2, #32]
 8005974:	781a      	ldrb	r2, [r3, #0]
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005980:	b29b      	uxth	r3, r3
 8005982:	3b01      	subs	r3, #1
 8005984:	b29b      	uxth	r3, r3
 8005986:	687a      	ldr	r2, [r7, #4]
 8005988:	4619      	mov	r1, r3
 800598a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800598c:	2b00      	cmp	r3, #0
 800598e:	d10f      	bne.n	80059b0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	68da      	ldr	r2, [r3, #12]
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800599e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	68da      	ldr	r2, [r3, #12]
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80059ae:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80059b0:	2300      	movs	r3, #0
 80059b2:	e000      	b.n	80059b6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80059b4:	2302      	movs	r3, #2
  }
}
 80059b6:	4618      	mov	r0, r3
 80059b8:	3714      	adds	r7, #20
 80059ba:	46bd      	mov	sp, r7
 80059bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c0:	4770      	bx	lr

080059c2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80059c2:	b580      	push	{r7, lr}
 80059c4:	b082      	sub	sp, #8
 80059c6:	af00      	add	r7, sp, #0
 80059c8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	68da      	ldr	r2, [r3, #12]
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059d8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2220      	movs	r2, #32
 80059de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f7ff fe8e 	bl	8005704 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80059e8:	2300      	movs	r3, #0
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	3708      	adds	r7, #8
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}

080059f2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80059f2:	b580      	push	{r7, lr}
 80059f4:	b08c      	sub	sp, #48	; 0x30
 80059f6:	af00      	add	r7, sp, #0
 80059f8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a00:	b2db      	uxtb	r3, r3
 8005a02:	2b22      	cmp	r3, #34	; 0x22
 8005a04:	f040 80ab 	bne.w	8005b5e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	689b      	ldr	r3, [r3, #8]
 8005a0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a10:	d117      	bne.n	8005a42 <UART_Receive_IT+0x50>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	691b      	ldr	r3, [r3, #16]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d113      	bne.n	8005a42 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a22:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	b29b      	uxth	r3, r3
 8005a2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a30:	b29a      	uxth	r2, r3
 8005a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a34:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a3a:	1c9a      	adds	r2, r3, #2
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	629a      	str	r2, [r3, #40]	; 0x28
 8005a40:	e026      	b.n	8005a90 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a46:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005a48:	2300      	movs	r3, #0
 8005a4a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	689b      	ldr	r3, [r3, #8]
 8005a50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a54:	d007      	beq.n	8005a66 <UART_Receive_IT+0x74>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	689b      	ldr	r3, [r3, #8]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d10a      	bne.n	8005a74 <UART_Receive_IT+0x82>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	691b      	ldr	r3, [r3, #16]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d106      	bne.n	8005a74 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	b2da      	uxtb	r2, r3
 8005a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a70:	701a      	strb	r2, [r3, #0]
 8005a72:	e008      	b.n	8005a86 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	b2db      	uxtb	r3, r3
 8005a7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a80:	b2da      	uxtb	r2, r3
 8005a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a84:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a8a:	1c5a      	adds	r2, r3, #1
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005a94:	b29b      	uxth	r3, r3
 8005a96:	3b01      	subs	r3, #1
 8005a98:	b29b      	uxth	r3, r3
 8005a9a:	687a      	ldr	r2, [r7, #4]
 8005a9c:	4619      	mov	r1, r3
 8005a9e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d15a      	bne.n	8005b5a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	68da      	ldr	r2, [r3, #12]
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f022 0220 	bic.w	r2, r2, #32
 8005ab2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	68da      	ldr	r2, [r3, #12]
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005ac2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	695a      	ldr	r2, [r3, #20]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f022 0201 	bic.w	r2, r2, #1
 8005ad2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2220      	movs	r2, #32
 8005ad8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ae0:	2b01      	cmp	r3, #1
 8005ae2:	d135      	bne.n	8005b50 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	330c      	adds	r3, #12
 8005af0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005af2:	697b      	ldr	r3, [r7, #20]
 8005af4:	e853 3f00 	ldrex	r3, [r3]
 8005af8:	613b      	str	r3, [r7, #16]
   return(result);
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	f023 0310 	bic.w	r3, r3, #16
 8005b00:	627b      	str	r3, [r7, #36]	; 0x24
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	330c      	adds	r3, #12
 8005b08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b0a:	623a      	str	r2, [r7, #32]
 8005b0c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b0e:	69f9      	ldr	r1, [r7, #28]
 8005b10:	6a3a      	ldr	r2, [r7, #32]
 8005b12:	e841 2300 	strex	r3, r2, [r1]
 8005b16:	61bb      	str	r3, [r7, #24]
   return(result);
 8005b18:	69bb      	ldr	r3, [r7, #24]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d1e5      	bne.n	8005aea <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f003 0310 	and.w	r3, r3, #16
 8005b28:	2b10      	cmp	r3, #16
 8005b2a:	d10a      	bne.n	8005b42 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	60fb      	str	r3, [r7, #12]
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	60fb      	str	r3, [r7, #12]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	685b      	ldr	r3, [r3, #4]
 8005b3e:	60fb      	str	r3, [r7, #12]
 8005b40:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005b46:	4619      	mov	r1, r3
 8005b48:	6878      	ldr	r0, [r7, #4]
 8005b4a:	f7ff fdf9 	bl	8005740 <HAL_UARTEx_RxEventCallback>
 8005b4e:	e002      	b.n	8005b56 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	f7ff fde1 	bl	8005718 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005b56:	2300      	movs	r3, #0
 8005b58:	e002      	b.n	8005b60 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	e000      	b.n	8005b60 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005b5e:	2302      	movs	r3, #2
  }
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	3730      	adds	r7, #48	; 0x30
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bd80      	pop	{r7, pc}

08005b68 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b6c:	b0c0      	sub	sp, #256	; 0x100
 8005b6e:	af00      	add	r7, sp, #0
 8005b70:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	691b      	ldr	r3, [r3, #16]
 8005b7c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005b80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b84:	68d9      	ldr	r1, [r3, #12]
 8005b86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b8a:	681a      	ldr	r2, [r3, #0]
 8005b8c:	ea40 0301 	orr.w	r3, r0, r1
 8005b90:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005b92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b96:	689a      	ldr	r2, [r3, #8]
 8005b98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b9c:	691b      	ldr	r3, [r3, #16]
 8005b9e:	431a      	orrs	r2, r3
 8005ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ba4:	695b      	ldr	r3, [r3, #20]
 8005ba6:	431a      	orrs	r2, r3
 8005ba8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bac:	69db      	ldr	r3, [r3, #28]
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005bb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	68db      	ldr	r3, [r3, #12]
 8005bbc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005bc0:	f021 010c 	bic.w	r1, r1, #12
 8005bc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bc8:	681a      	ldr	r2, [r3, #0]
 8005bca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005bce:	430b      	orrs	r3, r1
 8005bd0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005bd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	695b      	ldr	r3, [r3, #20]
 8005bda:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005bde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005be2:	6999      	ldr	r1, [r3, #24]
 8005be4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005be8:	681a      	ldr	r2, [r3, #0]
 8005bea:	ea40 0301 	orr.w	r3, r0, r1
 8005bee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005bf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bf4:	681a      	ldr	r2, [r3, #0]
 8005bf6:	4b8f      	ldr	r3, [pc, #572]	; (8005e34 <UART_SetConfig+0x2cc>)
 8005bf8:	429a      	cmp	r2, r3
 8005bfa:	d005      	beq.n	8005c08 <UART_SetConfig+0xa0>
 8005bfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c00:	681a      	ldr	r2, [r3, #0]
 8005c02:	4b8d      	ldr	r3, [pc, #564]	; (8005e38 <UART_SetConfig+0x2d0>)
 8005c04:	429a      	cmp	r2, r3
 8005c06:	d104      	bne.n	8005c12 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005c08:	f7ff f9fa 	bl	8005000 <HAL_RCC_GetPCLK2Freq>
 8005c0c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005c10:	e003      	b.n	8005c1a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005c12:	f7ff f9e1 	bl	8004fd8 <HAL_RCC_GetPCLK1Freq>
 8005c16:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c1e:	69db      	ldr	r3, [r3, #28]
 8005c20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c24:	f040 810c 	bne.w	8005e40 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005c28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005c32:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005c36:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005c3a:	4622      	mov	r2, r4
 8005c3c:	462b      	mov	r3, r5
 8005c3e:	1891      	adds	r1, r2, r2
 8005c40:	65b9      	str	r1, [r7, #88]	; 0x58
 8005c42:	415b      	adcs	r3, r3
 8005c44:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005c46:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005c4a:	4621      	mov	r1, r4
 8005c4c:	eb12 0801 	adds.w	r8, r2, r1
 8005c50:	4629      	mov	r1, r5
 8005c52:	eb43 0901 	adc.w	r9, r3, r1
 8005c56:	f04f 0200 	mov.w	r2, #0
 8005c5a:	f04f 0300 	mov.w	r3, #0
 8005c5e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005c62:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005c66:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005c6a:	4690      	mov	r8, r2
 8005c6c:	4699      	mov	r9, r3
 8005c6e:	4623      	mov	r3, r4
 8005c70:	eb18 0303 	adds.w	r3, r8, r3
 8005c74:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005c78:	462b      	mov	r3, r5
 8005c7a:	eb49 0303 	adc.w	r3, r9, r3
 8005c7e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005c82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c86:	685b      	ldr	r3, [r3, #4]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005c8e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005c92:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005c96:	460b      	mov	r3, r1
 8005c98:	18db      	adds	r3, r3, r3
 8005c9a:	653b      	str	r3, [r7, #80]	; 0x50
 8005c9c:	4613      	mov	r3, r2
 8005c9e:	eb42 0303 	adc.w	r3, r2, r3
 8005ca2:	657b      	str	r3, [r7, #84]	; 0x54
 8005ca4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005ca8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005cac:	f7fa faf0 	bl	8000290 <__aeabi_uldivmod>
 8005cb0:	4602      	mov	r2, r0
 8005cb2:	460b      	mov	r3, r1
 8005cb4:	4b61      	ldr	r3, [pc, #388]	; (8005e3c <UART_SetConfig+0x2d4>)
 8005cb6:	fba3 2302 	umull	r2, r3, r3, r2
 8005cba:	095b      	lsrs	r3, r3, #5
 8005cbc:	011c      	lsls	r4, r3, #4
 8005cbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005cc8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005ccc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005cd0:	4642      	mov	r2, r8
 8005cd2:	464b      	mov	r3, r9
 8005cd4:	1891      	adds	r1, r2, r2
 8005cd6:	64b9      	str	r1, [r7, #72]	; 0x48
 8005cd8:	415b      	adcs	r3, r3
 8005cda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005cdc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005ce0:	4641      	mov	r1, r8
 8005ce2:	eb12 0a01 	adds.w	sl, r2, r1
 8005ce6:	4649      	mov	r1, r9
 8005ce8:	eb43 0b01 	adc.w	fp, r3, r1
 8005cec:	f04f 0200 	mov.w	r2, #0
 8005cf0:	f04f 0300 	mov.w	r3, #0
 8005cf4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005cf8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005cfc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005d00:	4692      	mov	sl, r2
 8005d02:	469b      	mov	fp, r3
 8005d04:	4643      	mov	r3, r8
 8005d06:	eb1a 0303 	adds.w	r3, sl, r3
 8005d0a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005d0e:	464b      	mov	r3, r9
 8005d10:	eb4b 0303 	adc.w	r3, fp, r3
 8005d14:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005d18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d1c:	685b      	ldr	r3, [r3, #4]
 8005d1e:	2200      	movs	r2, #0
 8005d20:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005d24:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005d28:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005d2c:	460b      	mov	r3, r1
 8005d2e:	18db      	adds	r3, r3, r3
 8005d30:	643b      	str	r3, [r7, #64]	; 0x40
 8005d32:	4613      	mov	r3, r2
 8005d34:	eb42 0303 	adc.w	r3, r2, r3
 8005d38:	647b      	str	r3, [r7, #68]	; 0x44
 8005d3a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005d3e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005d42:	f7fa faa5 	bl	8000290 <__aeabi_uldivmod>
 8005d46:	4602      	mov	r2, r0
 8005d48:	460b      	mov	r3, r1
 8005d4a:	4611      	mov	r1, r2
 8005d4c:	4b3b      	ldr	r3, [pc, #236]	; (8005e3c <UART_SetConfig+0x2d4>)
 8005d4e:	fba3 2301 	umull	r2, r3, r3, r1
 8005d52:	095b      	lsrs	r3, r3, #5
 8005d54:	2264      	movs	r2, #100	; 0x64
 8005d56:	fb02 f303 	mul.w	r3, r2, r3
 8005d5a:	1acb      	subs	r3, r1, r3
 8005d5c:	00db      	lsls	r3, r3, #3
 8005d5e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005d62:	4b36      	ldr	r3, [pc, #216]	; (8005e3c <UART_SetConfig+0x2d4>)
 8005d64:	fba3 2302 	umull	r2, r3, r3, r2
 8005d68:	095b      	lsrs	r3, r3, #5
 8005d6a:	005b      	lsls	r3, r3, #1
 8005d6c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005d70:	441c      	add	r4, r3
 8005d72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d76:	2200      	movs	r2, #0
 8005d78:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005d7c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005d80:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005d84:	4642      	mov	r2, r8
 8005d86:	464b      	mov	r3, r9
 8005d88:	1891      	adds	r1, r2, r2
 8005d8a:	63b9      	str	r1, [r7, #56]	; 0x38
 8005d8c:	415b      	adcs	r3, r3
 8005d8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d90:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005d94:	4641      	mov	r1, r8
 8005d96:	1851      	adds	r1, r2, r1
 8005d98:	6339      	str	r1, [r7, #48]	; 0x30
 8005d9a:	4649      	mov	r1, r9
 8005d9c:	414b      	adcs	r3, r1
 8005d9e:	637b      	str	r3, [r7, #52]	; 0x34
 8005da0:	f04f 0200 	mov.w	r2, #0
 8005da4:	f04f 0300 	mov.w	r3, #0
 8005da8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005dac:	4659      	mov	r1, fp
 8005dae:	00cb      	lsls	r3, r1, #3
 8005db0:	4651      	mov	r1, sl
 8005db2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005db6:	4651      	mov	r1, sl
 8005db8:	00ca      	lsls	r2, r1, #3
 8005dba:	4610      	mov	r0, r2
 8005dbc:	4619      	mov	r1, r3
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	4642      	mov	r2, r8
 8005dc2:	189b      	adds	r3, r3, r2
 8005dc4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005dc8:	464b      	mov	r3, r9
 8005dca:	460a      	mov	r2, r1
 8005dcc:	eb42 0303 	adc.w	r3, r2, r3
 8005dd0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005dd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dd8:	685b      	ldr	r3, [r3, #4]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005de0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005de4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005de8:	460b      	mov	r3, r1
 8005dea:	18db      	adds	r3, r3, r3
 8005dec:	62bb      	str	r3, [r7, #40]	; 0x28
 8005dee:	4613      	mov	r3, r2
 8005df0:	eb42 0303 	adc.w	r3, r2, r3
 8005df4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005df6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005dfa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005dfe:	f7fa fa47 	bl	8000290 <__aeabi_uldivmod>
 8005e02:	4602      	mov	r2, r0
 8005e04:	460b      	mov	r3, r1
 8005e06:	4b0d      	ldr	r3, [pc, #52]	; (8005e3c <UART_SetConfig+0x2d4>)
 8005e08:	fba3 1302 	umull	r1, r3, r3, r2
 8005e0c:	095b      	lsrs	r3, r3, #5
 8005e0e:	2164      	movs	r1, #100	; 0x64
 8005e10:	fb01 f303 	mul.w	r3, r1, r3
 8005e14:	1ad3      	subs	r3, r2, r3
 8005e16:	00db      	lsls	r3, r3, #3
 8005e18:	3332      	adds	r3, #50	; 0x32
 8005e1a:	4a08      	ldr	r2, [pc, #32]	; (8005e3c <UART_SetConfig+0x2d4>)
 8005e1c:	fba2 2303 	umull	r2, r3, r2, r3
 8005e20:	095b      	lsrs	r3, r3, #5
 8005e22:	f003 0207 	and.w	r2, r3, #7
 8005e26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4422      	add	r2, r4
 8005e2e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005e30:	e105      	b.n	800603e <UART_SetConfig+0x4d6>
 8005e32:	bf00      	nop
 8005e34:	40011000 	.word	0x40011000
 8005e38:	40011400 	.word	0x40011400
 8005e3c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005e40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e44:	2200      	movs	r2, #0
 8005e46:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005e4a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005e4e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005e52:	4642      	mov	r2, r8
 8005e54:	464b      	mov	r3, r9
 8005e56:	1891      	adds	r1, r2, r2
 8005e58:	6239      	str	r1, [r7, #32]
 8005e5a:	415b      	adcs	r3, r3
 8005e5c:	627b      	str	r3, [r7, #36]	; 0x24
 8005e5e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005e62:	4641      	mov	r1, r8
 8005e64:	1854      	adds	r4, r2, r1
 8005e66:	4649      	mov	r1, r9
 8005e68:	eb43 0501 	adc.w	r5, r3, r1
 8005e6c:	f04f 0200 	mov.w	r2, #0
 8005e70:	f04f 0300 	mov.w	r3, #0
 8005e74:	00eb      	lsls	r3, r5, #3
 8005e76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005e7a:	00e2      	lsls	r2, r4, #3
 8005e7c:	4614      	mov	r4, r2
 8005e7e:	461d      	mov	r5, r3
 8005e80:	4643      	mov	r3, r8
 8005e82:	18e3      	adds	r3, r4, r3
 8005e84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005e88:	464b      	mov	r3, r9
 8005e8a:	eb45 0303 	adc.w	r3, r5, r3
 8005e8e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005e92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e96:	685b      	ldr	r3, [r3, #4]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005e9e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005ea2:	f04f 0200 	mov.w	r2, #0
 8005ea6:	f04f 0300 	mov.w	r3, #0
 8005eaa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005eae:	4629      	mov	r1, r5
 8005eb0:	008b      	lsls	r3, r1, #2
 8005eb2:	4621      	mov	r1, r4
 8005eb4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005eb8:	4621      	mov	r1, r4
 8005eba:	008a      	lsls	r2, r1, #2
 8005ebc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005ec0:	f7fa f9e6 	bl	8000290 <__aeabi_uldivmod>
 8005ec4:	4602      	mov	r2, r0
 8005ec6:	460b      	mov	r3, r1
 8005ec8:	4b60      	ldr	r3, [pc, #384]	; (800604c <UART_SetConfig+0x4e4>)
 8005eca:	fba3 2302 	umull	r2, r3, r3, r2
 8005ece:	095b      	lsrs	r3, r3, #5
 8005ed0:	011c      	lsls	r4, r3, #4
 8005ed2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005edc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005ee0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005ee4:	4642      	mov	r2, r8
 8005ee6:	464b      	mov	r3, r9
 8005ee8:	1891      	adds	r1, r2, r2
 8005eea:	61b9      	str	r1, [r7, #24]
 8005eec:	415b      	adcs	r3, r3
 8005eee:	61fb      	str	r3, [r7, #28]
 8005ef0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005ef4:	4641      	mov	r1, r8
 8005ef6:	1851      	adds	r1, r2, r1
 8005ef8:	6139      	str	r1, [r7, #16]
 8005efa:	4649      	mov	r1, r9
 8005efc:	414b      	adcs	r3, r1
 8005efe:	617b      	str	r3, [r7, #20]
 8005f00:	f04f 0200 	mov.w	r2, #0
 8005f04:	f04f 0300 	mov.w	r3, #0
 8005f08:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005f0c:	4659      	mov	r1, fp
 8005f0e:	00cb      	lsls	r3, r1, #3
 8005f10:	4651      	mov	r1, sl
 8005f12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f16:	4651      	mov	r1, sl
 8005f18:	00ca      	lsls	r2, r1, #3
 8005f1a:	4610      	mov	r0, r2
 8005f1c:	4619      	mov	r1, r3
 8005f1e:	4603      	mov	r3, r0
 8005f20:	4642      	mov	r2, r8
 8005f22:	189b      	adds	r3, r3, r2
 8005f24:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005f28:	464b      	mov	r3, r9
 8005f2a:	460a      	mov	r2, r1
 8005f2c:	eb42 0303 	adc.w	r3, r2, r3
 8005f30:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005f34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f38:	685b      	ldr	r3, [r3, #4]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	67bb      	str	r3, [r7, #120]	; 0x78
 8005f3e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005f40:	f04f 0200 	mov.w	r2, #0
 8005f44:	f04f 0300 	mov.w	r3, #0
 8005f48:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005f4c:	4649      	mov	r1, r9
 8005f4e:	008b      	lsls	r3, r1, #2
 8005f50:	4641      	mov	r1, r8
 8005f52:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f56:	4641      	mov	r1, r8
 8005f58:	008a      	lsls	r2, r1, #2
 8005f5a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005f5e:	f7fa f997 	bl	8000290 <__aeabi_uldivmod>
 8005f62:	4602      	mov	r2, r0
 8005f64:	460b      	mov	r3, r1
 8005f66:	4b39      	ldr	r3, [pc, #228]	; (800604c <UART_SetConfig+0x4e4>)
 8005f68:	fba3 1302 	umull	r1, r3, r3, r2
 8005f6c:	095b      	lsrs	r3, r3, #5
 8005f6e:	2164      	movs	r1, #100	; 0x64
 8005f70:	fb01 f303 	mul.w	r3, r1, r3
 8005f74:	1ad3      	subs	r3, r2, r3
 8005f76:	011b      	lsls	r3, r3, #4
 8005f78:	3332      	adds	r3, #50	; 0x32
 8005f7a:	4a34      	ldr	r2, [pc, #208]	; (800604c <UART_SetConfig+0x4e4>)
 8005f7c:	fba2 2303 	umull	r2, r3, r2, r3
 8005f80:	095b      	lsrs	r3, r3, #5
 8005f82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005f86:	441c      	add	r4, r3
 8005f88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	673b      	str	r3, [r7, #112]	; 0x70
 8005f90:	677a      	str	r2, [r7, #116]	; 0x74
 8005f92:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005f96:	4642      	mov	r2, r8
 8005f98:	464b      	mov	r3, r9
 8005f9a:	1891      	adds	r1, r2, r2
 8005f9c:	60b9      	str	r1, [r7, #8]
 8005f9e:	415b      	adcs	r3, r3
 8005fa0:	60fb      	str	r3, [r7, #12]
 8005fa2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005fa6:	4641      	mov	r1, r8
 8005fa8:	1851      	adds	r1, r2, r1
 8005faa:	6039      	str	r1, [r7, #0]
 8005fac:	4649      	mov	r1, r9
 8005fae:	414b      	adcs	r3, r1
 8005fb0:	607b      	str	r3, [r7, #4]
 8005fb2:	f04f 0200 	mov.w	r2, #0
 8005fb6:	f04f 0300 	mov.w	r3, #0
 8005fba:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005fbe:	4659      	mov	r1, fp
 8005fc0:	00cb      	lsls	r3, r1, #3
 8005fc2:	4651      	mov	r1, sl
 8005fc4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005fc8:	4651      	mov	r1, sl
 8005fca:	00ca      	lsls	r2, r1, #3
 8005fcc:	4610      	mov	r0, r2
 8005fce:	4619      	mov	r1, r3
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	4642      	mov	r2, r8
 8005fd4:	189b      	adds	r3, r3, r2
 8005fd6:	66bb      	str	r3, [r7, #104]	; 0x68
 8005fd8:	464b      	mov	r3, r9
 8005fda:	460a      	mov	r2, r1
 8005fdc:	eb42 0303 	adc.w	r3, r2, r3
 8005fe0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005fe2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fe6:	685b      	ldr	r3, [r3, #4]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	663b      	str	r3, [r7, #96]	; 0x60
 8005fec:	667a      	str	r2, [r7, #100]	; 0x64
 8005fee:	f04f 0200 	mov.w	r2, #0
 8005ff2:	f04f 0300 	mov.w	r3, #0
 8005ff6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005ffa:	4649      	mov	r1, r9
 8005ffc:	008b      	lsls	r3, r1, #2
 8005ffe:	4641      	mov	r1, r8
 8006000:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006004:	4641      	mov	r1, r8
 8006006:	008a      	lsls	r2, r1, #2
 8006008:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800600c:	f7fa f940 	bl	8000290 <__aeabi_uldivmod>
 8006010:	4602      	mov	r2, r0
 8006012:	460b      	mov	r3, r1
 8006014:	4b0d      	ldr	r3, [pc, #52]	; (800604c <UART_SetConfig+0x4e4>)
 8006016:	fba3 1302 	umull	r1, r3, r3, r2
 800601a:	095b      	lsrs	r3, r3, #5
 800601c:	2164      	movs	r1, #100	; 0x64
 800601e:	fb01 f303 	mul.w	r3, r1, r3
 8006022:	1ad3      	subs	r3, r2, r3
 8006024:	011b      	lsls	r3, r3, #4
 8006026:	3332      	adds	r3, #50	; 0x32
 8006028:	4a08      	ldr	r2, [pc, #32]	; (800604c <UART_SetConfig+0x4e4>)
 800602a:	fba2 2303 	umull	r2, r3, r2, r3
 800602e:	095b      	lsrs	r3, r3, #5
 8006030:	f003 020f 	and.w	r2, r3, #15
 8006034:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4422      	add	r2, r4
 800603c:	609a      	str	r2, [r3, #8]
}
 800603e:	bf00      	nop
 8006040:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006044:	46bd      	mov	sp, r7
 8006046:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800604a:	bf00      	nop
 800604c:	51eb851f 	.word	0x51eb851f

08006050 <__errno>:
 8006050:	4b01      	ldr	r3, [pc, #4]	; (8006058 <__errno+0x8>)
 8006052:	6818      	ldr	r0, [r3, #0]
 8006054:	4770      	bx	lr
 8006056:	bf00      	nop
 8006058:	2000000c 	.word	0x2000000c

0800605c <__libc_init_array>:
 800605c:	b570      	push	{r4, r5, r6, lr}
 800605e:	4d0d      	ldr	r5, [pc, #52]	; (8006094 <__libc_init_array+0x38>)
 8006060:	4c0d      	ldr	r4, [pc, #52]	; (8006098 <__libc_init_array+0x3c>)
 8006062:	1b64      	subs	r4, r4, r5
 8006064:	10a4      	asrs	r4, r4, #2
 8006066:	2600      	movs	r6, #0
 8006068:	42a6      	cmp	r6, r4
 800606a:	d109      	bne.n	8006080 <__libc_init_array+0x24>
 800606c:	4d0b      	ldr	r5, [pc, #44]	; (800609c <__libc_init_array+0x40>)
 800606e:	4c0c      	ldr	r4, [pc, #48]	; (80060a0 <__libc_init_array+0x44>)
 8006070:	f001 f824 	bl	80070bc <_init>
 8006074:	1b64      	subs	r4, r4, r5
 8006076:	10a4      	asrs	r4, r4, #2
 8006078:	2600      	movs	r6, #0
 800607a:	42a6      	cmp	r6, r4
 800607c:	d105      	bne.n	800608a <__libc_init_array+0x2e>
 800607e:	bd70      	pop	{r4, r5, r6, pc}
 8006080:	f855 3b04 	ldr.w	r3, [r5], #4
 8006084:	4798      	blx	r3
 8006086:	3601      	adds	r6, #1
 8006088:	e7ee      	b.n	8006068 <__libc_init_array+0xc>
 800608a:	f855 3b04 	ldr.w	r3, [r5], #4
 800608e:	4798      	blx	r3
 8006090:	3601      	adds	r6, #1
 8006092:	e7f2      	b.n	800607a <__libc_init_array+0x1e>
 8006094:	08007234 	.word	0x08007234
 8006098:	08007234 	.word	0x08007234
 800609c:	08007234 	.word	0x08007234
 80060a0:	08007238 	.word	0x08007238

080060a4 <memset>:
 80060a4:	4402      	add	r2, r0
 80060a6:	4603      	mov	r3, r0
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d100      	bne.n	80060ae <memset+0xa>
 80060ac:	4770      	bx	lr
 80060ae:	f803 1b01 	strb.w	r1, [r3], #1
 80060b2:	e7f9      	b.n	80060a8 <memset+0x4>

080060b4 <iprintf>:
 80060b4:	b40f      	push	{r0, r1, r2, r3}
 80060b6:	4b0a      	ldr	r3, [pc, #40]	; (80060e0 <iprintf+0x2c>)
 80060b8:	b513      	push	{r0, r1, r4, lr}
 80060ba:	681c      	ldr	r4, [r3, #0]
 80060bc:	b124      	cbz	r4, 80060c8 <iprintf+0x14>
 80060be:	69a3      	ldr	r3, [r4, #24]
 80060c0:	b913      	cbnz	r3, 80060c8 <iprintf+0x14>
 80060c2:	4620      	mov	r0, r4
 80060c4:	f000 fa5e 	bl	8006584 <__sinit>
 80060c8:	ab05      	add	r3, sp, #20
 80060ca:	9a04      	ldr	r2, [sp, #16]
 80060cc:	68a1      	ldr	r1, [r4, #8]
 80060ce:	9301      	str	r3, [sp, #4]
 80060d0:	4620      	mov	r0, r4
 80060d2:	f000 fc67 	bl	80069a4 <_vfiprintf_r>
 80060d6:	b002      	add	sp, #8
 80060d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060dc:	b004      	add	sp, #16
 80060de:	4770      	bx	lr
 80060e0:	2000000c 	.word	0x2000000c

080060e4 <_puts_r>:
 80060e4:	b570      	push	{r4, r5, r6, lr}
 80060e6:	460e      	mov	r6, r1
 80060e8:	4605      	mov	r5, r0
 80060ea:	b118      	cbz	r0, 80060f4 <_puts_r+0x10>
 80060ec:	6983      	ldr	r3, [r0, #24]
 80060ee:	b90b      	cbnz	r3, 80060f4 <_puts_r+0x10>
 80060f0:	f000 fa48 	bl	8006584 <__sinit>
 80060f4:	69ab      	ldr	r3, [r5, #24]
 80060f6:	68ac      	ldr	r4, [r5, #8]
 80060f8:	b913      	cbnz	r3, 8006100 <_puts_r+0x1c>
 80060fa:	4628      	mov	r0, r5
 80060fc:	f000 fa42 	bl	8006584 <__sinit>
 8006100:	4b2c      	ldr	r3, [pc, #176]	; (80061b4 <_puts_r+0xd0>)
 8006102:	429c      	cmp	r4, r3
 8006104:	d120      	bne.n	8006148 <_puts_r+0x64>
 8006106:	686c      	ldr	r4, [r5, #4]
 8006108:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800610a:	07db      	lsls	r3, r3, #31
 800610c:	d405      	bmi.n	800611a <_puts_r+0x36>
 800610e:	89a3      	ldrh	r3, [r4, #12]
 8006110:	0598      	lsls	r0, r3, #22
 8006112:	d402      	bmi.n	800611a <_puts_r+0x36>
 8006114:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006116:	f000 fad3 	bl	80066c0 <__retarget_lock_acquire_recursive>
 800611a:	89a3      	ldrh	r3, [r4, #12]
 800611c:	0719      	lsls	r1, r3, #28
 800611e:	d51d      	bpl.n	800615c <_puts_r+0x78>
 8006120:	6923      	ldr	r3, [r4, #16]
 8006122:	b1db      	cbz	r3, 800615c <_puts_r+0x78>
 8006124:	3e01      	subs	r6, #1
 8006126:	68a3      	ldr	r3, [r4, #8]
 8006128:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800612c:	3b01      	subs	r3, #1
 800612e:	60a3      	str	r3, [r4, #8]
 8006130:	bb39      	cbnz	r1, 8006182 <_puts_r+0x9e>
 8006132:	2b00      	cmp	r3, #0
 8006134:	da38      	bge.n	80061a8 <_puts_r+0xc4>
 8006136:	4622      	mov	r2, r4
 8006138:	210a      	movs	r1, #10
 800613a:	4628      	mov	r0, r5
 800613c:	f000 f848 	bl	80061d0 <__swbuf_r>
 8006140:	3001      	adds	r0, #1
 8006142:	d011      	beq.n	8006168 <_puts_r+0x84>
 8006144:	250a      	movs	r5, #10
 8006146:	e011      	b.n	800616c <_puts_r+0x88>
 8006148:	4b1b      	ldr	r3, [pc, #108]	; (80061b8 <_puts_r+0xd4>)
 800614a:	429c      	cmp	r4, r3
 800614c:	d101      	bne.n	8006152 <_puts_r+0x6e>
 800614e:	68ac      	ldr	r4, [r5, #8]
 8006150:	e7da      	b.n	8006108 <_puts_r+0x24>
 8006152:	4b1a      	ldr	r3, [pc, #104]	; (80061bc <_puts_r+0xd8>)
 8006154:	429c      	cmp	r4, r3
 8006156:	bf08      	it	eq
 8006158:	68ec      	ldreq	r4, [r5, #12]
 800615a:	e7d5      	b.n	8006108 <_puts_r+0x24>
 800615c:	4621      	mov	r1, r4
 800615e:	4628      	mov	r0, r5
 8006160:	f000 f888 	bl	8006274 <__swsetup_r>
 8006164:	2800      	cmp	r0, #0
 8006166:	d0dd      	beq.n	8006124 <_puts_r+0x40>
 8006168:	f04f 35ff 	mov.w	r5, #4294967295
 800616c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800616e:	07da      	lsls	r2, r3, #31
 8006170:	d405      	bmi.n	800617e <_puts_r+0x9a>
 8006172:	89a3      	ldrh	r3, [r4, #12]
 8006174:	059b      	lsls	r3, r3, #22
 8006176:	d402      	bmi.n	800617e <_puts_r+0x9a>
 8006178:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800617a:	f000 faa2 	bl	80066c2 <__retarget_lock_release_recursive>
 800617e:	4628      	mov	r0, r5
 8006180:	bd70      	pop	{r4, r5, r6, pc}
 8006182:	2b00      	cmp	r3, #0
 8006184:	da04      	bge.n	8006190 <_puts_r+0xac>
 8006186:	69a2      	ldr	r2, [r4, #24]
 8006188:	429a      	cmp	r2, r3
 800618a:	dc06      	bgt.n	800619a <_puts_r+0xb6>
 800618c:	290a      	cmp	r1, #10
 800618e:	d004      	beq.n	800619a <_puts_r+0xb6>
 8006190:	6823      	ldr	r3, [r4, #0]
 8006192:	1c5a      	adds	r2, r3, #1
 8006194:	6022      	str	r2, [r4, #0]
 8006196:	7019      	strb	r1, [r3, #0]
 8006198:	e7c5      	b.n	8006126 <_puts_r+0x42>
 800619a:	4622      	mov	r2, r4
 800619c:	4628      	mov	r0, r5
 800619e:	f000 f817 	bl	80061d0 <__swbuf_r>
 80061a2:	3001      	adds	r0, #1
 80061a4:	d1bf      	bne.n	8006126 <_puts_r+0x42>
 80061a6:	e7df      	b.n	8006168 <_puts_r+0x84>
 80061a8:	6823      	ldr	r3, [r4, #0]
 80061aa:	250a      	movs	r5, #10
 80061ac:	1c5a      	adds	r2, r3, #1
 80061ae:	6022      	str	r2, [r4, #0]
 80061b0:	701d      	strb	r5, [r3, #0]
 80061b2:	e7db      	b.n	800616c <_puts_r+0x88>
 80061b4:	080071b8 	.word	0x080071b8
 80061b8:	080071d8 	.word	0x080071d8
 80061bc:	08007198 	.word	0x08007198

080061c0 <puts>:
 80061c0:	4b02      	ldr	r3, [pc, #8]	; (80061cc <puts+0xc>)
 80061c2:	4601      	mov	r1, r0
 80061c4:	6818      	ldr	r0, [r3, #0]
 80061c6:	f7ff bf8d 	b.w	80060e4 <_puts_r>
 80061ca:	bf00      	nop
 80061cc:	2000000c 	.word	0x2000000c

080061d0 <__swbuf_r>:
 80061d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061d2:	460e      	mov	r6, r1
 80061d4:	4614      	mov	r4, r2
 80061d6:	4605      	mov	r5, r0
 80061d8:	b118      	cbz	r0, 80061e2 <__swbuf_r+0x12>
 80061da:	6983      	ldr	r3, [r0, #24]
 80061dc:	b90b      	cbnz	r3, 80061e2 <__swbuf_r+0x12>
 80061de:	f000 f9d1 	bl	8006584 <__sinit>
 80061e2:	4b21      	ldr	r3, [pc, #132]	; (8006268 <__swbuf_r+0x98>)
 80061e4:	429c      	cmp	r4, r3
 80061e6:	d12b      	bne.n	8006240 <__swbuf_r+0x70>
 80061e8:	686c      	ldr	r4, [r5, #4]
 80061ea:	69a3      	ldr	r3, [r4, #24]
 80061ec:	60a3      	str	r3, [r4, #8]
 80061ee:	89a3      	ldrh	r3, [r4, #12]
 80061f0:	071a      	lsls	r2, r3, #28
 80061f2:	d52f      	bpl.n	8006254 <__swbuf_r+0x84>
 80061f4:	6923      	ldr	r3, [r4, #16]
 80061f6:	b36b      	cbz	r3, 8006254 <__swbuf_r+0x84>
 80061f8:	6923      	ldr	r3, [r4, #16]
 80061fa:	6820      	ldr	r0, [r4, #0]
 80061fc:	1ac0      	subs	r0, r0, r3
 80061fe:	6963      	ldr	r3, [r4, #20]
 8006200:	b2f6      	uxtb	r6, r6
 8006202:	4283      	cmp	r3, r0
 8006204:	4637      	mov	r7, r6
 8006206:	dc04      	bgt.n	8006212 <__swbuf_r+0x42>
 8006208:	4621      	mov	r1, r4
 800620a:	4628      	mov	r0, r5
 800620c:	f000 f926 	bl	800645c <_fflush_r>
 8006210:	bb30      	cbnz	r0, 8006260 <__swbuf_r+0x90>
 8006212:	68a3      	ldr	r3, [r4, #8]
 8006214:	3b01      	subs	r3, #1
 8006216:	60a3      	str	r3, [r4, #8]
 8006218:	6823      	ldr	r3, [r4, #0]
 800621a:	1c5a      	adds	r2, r3, #1
 800621c:	6022      	str	r2, [r4, #0]
 800621e:	701e      	strb	r6, [r3, #0]
 8006220:	6963      	ldr	r3, [r4, #20]
 8006222:	3001      	adds	r0, #1
 8006224:	4283      	cmp	r3, r0
 8006226:	d004      	beq.n	8006232 <__swbuf_r+0x62>
 8006228:	89a3      	ldrh	r3, [r4, #12]
 800622a:	07db      	lsls	r3, r3, #31
 800622c:	d506      	bpl.n	800623c <__swbuf_r+0x6c>
 800622e:	2e0a      	cmp	r6, #10
 8006230:	d104      	bne.n	800623c <__swbuf_r+0x6c>
 8006232:	4621      	mov	r1, r4
 8006234:	4628      	mov	r0, r5
 8006236:	f000 f911 	bl	800645c <_fflush_r>
 800623a:	b988      	cbnz	r0, 8006260 <__swbuf_r+0x90>
 800623c:	4638      	mov	r0, r7
 800623e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006240:	4b0a      	ldr	r3, [pc, #40]	; (800626c <__swbuf_r+0x9c>)
 8006242:	429c      	cmp	r4, r3
 8006244:	d101      	bne.n	800624a <__swbuf_r+0x7a>
 8006246:	68ac      	ldr	r4, [r5, #8]
 8006248:	e7cf      	b.n	80061ea <__swbuf_r+0x1a>
 800624a:	4b09      	ldr	r3, [pc, #36]	; (8006270 <__swbuf_r+0xa0>)
 800624c:	429c      	cmp	r4, r3
 800624e:	bf08      	it	eq
 8006250:	68ec      	ldreq	r4, [r5, #12]
 8006252:	e7ca      	b.n	80061ea <__swbuf_r+0x1a>
 8006254:	4621      	mov	r1, r4
 8006256:	4628      	mov	r0, r5
 8006258:	f000 f80c 	bl	8006274 <__swsetup_r>
 800625c:	2800      	cmp	r0, #0
 800625e:	d0cb      	beq.n	80061f8 <__swbuf_r+0x28>
 8006260:	f04f 37ff 	mov.w	r7, #4294967295
 8006264:	e7ea      	b.n	800623c <__swbuf_r+0x6c>
 8006266:	bf00      	nop
 8006268:	080071b8 	.word	0x080071b8
 800626c:	080071d8 	.word	0x080071d8
 8006270:	08007198 	.word	0x08007198

08006274 <__swsetup_r>:
 8006274:	4b32      	ldr	r3, [pc, #200]	; (8006340 <__swsetup_r+0xcc>)
 8006276:	b570      	push	{r4, r5, r6, lr}
 8006278:	681d      	ldr	r5, [r3, #0]
 800627a:	4606      	mov	r6, r0
 800627c:	460c      	mov	r4, r1
 800627e:	b125      	cbz	r5, 800628a <__swsetup_r+0x16>
 8006280:	69ab      	ldr	r3, [r5, #24]
 8006282:	b913      	cbnz	r3, 800628a <__swsetup_r+0x16>
 8006284:	4628      	mov	r0, r5
 8006286:	f000 f97d 	bl	8006584 <__sinit>
 800628a:	4b2e      	ldr	r3, [pc, #184]	; (8006344 <__swsetup_r+0xd0>)
 800628c:	429c      	cmp	r4, r3
 800628e:	d10f      	bne.n	80062b0 <__swsetup_r+0x3c>
 8006290:	686c      	ldr	r4, [r5, #4]
 8006292:	89a3      	ldrh	r3, [r4, #12]
 8006294:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006298:	0719      	lsls	r1, r3, #28
 800629a:	d42c      	bmi.n	80062f6 <__swsetup_r+0x82>
 800629c:	06dd      	lsls	r5, r3, #27
 800629e:	d411      	bmi.n	80062c4 <__swsetup_r+0x50>
 80062a0:	2309      	movs	r3, #9
 80062a2:	6033      	str	r3, [r6, #0]
 80062a4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80062a8:	81a3      	strh	r3, [r4, #12]
 80062aa:	f04f 30ff 	mov.w	r0, #4294967295
 80062ae:	e03e      	b.n	800632e <__swsetup_r+0xba>
 80062b0:	4b25      	ldr	r3, [pc, #148]	; (8006348 <__swsetup_r+0xd4>)
 80062b2:	429c      	cmp	r4, r3
 80062b4:	d101      	bne.n	80062ba <__swsetup_r+0x46>
 80062b6:	68ac      	ldr	r4, [r5, #8]
 80062b8:	e7eb      	b.n	8006292 <__swsetup_r+0x1e>
 80062ba:	4b24      	ldr	r3, [pc, #144]	; (800634c <__swsetup_r+0xd8>)
 80062bc:	429c      	cmp	r4, r3
 80062be:	bf08      	it	eq
 80062c0:	68ec      	ldreq	r4, [r5, #12]
 80062c2:	e7e6      	b.n	8006292 <__swsetup_r+0x1e>
 80062c4:	0758      	lsls	r0, r3, #29
 80062c6:	d512      	bpl.n	80062ee <__swsetup_r+0x7a>
 80062c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80062ca:	b141      	cbz	r1, 80062de <__swsetup_r+0x6a>
 80062cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80062d0:	4299      	cmp	r1, r3
 80062d2:	d002      	beq.n	80062da <__swsetup_r+0x66>
 80062d4:	4630      	mov	r0, r6
 80062d6:	f000 fa5b 	bl	8006790 <_free_r>
 80062da:	2300      	movs	r3, #0
 80062dc:	6363      	str	r3, [r4, #52]	; 0x34
 80062de:	89a3      	ldrh	r3, [r4, #12]
 80062e0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80062e4:	81a3      	strh	r3, [r4, #12]
 80062e6:	2300      	movs	r3, #0
 80062e8:	6063      	str	r3, [r4, #4]
 80062ea:	6923      	ldr	r3, [r4, #16]
 80062ec:	6023      	str	r3, [r4, #0]
 80062ee:	89a3      	ldrh	r3, [r4, #12]
 80062f0:	f043 0308 	orr.w	r3, r3, #8
 80062f4:	81a3      	strh	r3, [r4, #12]
 80062f6:	6923      	ldr	r3, [r4, #16]
 80062f8:	b94b      	cbnz	r3, 800630e <__swsetup_r+0x9a>
 80062fa:	89a3      	ldrh	r3, [r4, #12]
 80062fc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006300:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006304:	d003      	beq.n	800630e <__swsetup_r+0x9a>
 8006306:	4621      	mov	r1, r4
 8006308:	4630      	mov	r0, r6
 800630a:	f000 fa01 	bl	8006710 <__smakebuf_r>
 800630e:	89a0      	ldrh	r0, [r4, #12]
 8006310:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006314:	f010 0301 	ands.w	r3, r0, #1
 8006318:	d00a      	beq.n	8006330 <__swsetup_r+0xbc>
 800631a:	2300      	movs	r3, #0
 800631c:	60a3      	str	r3, [r4, #8]
 800631e:	6963      	ldr	r3, [r4, #20]
 8006320:	425b      	negs	r3, r3
 8006322:	61a3      	str	r3, [r4, #24]
 8006324:	6923      	ldr	r3, [r4, #16]
 8006326:	b943      	cbnz	r3, 800633a <__swsetup_r+0xc6>
 8006328:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800632c:	d1ba      	bne.n	80062a4 <__swsetup_r+0x30>
 800632e:	bd70      	pop	{r4, r5, r6, pc}
 8006330:	0781      	lsls	r1, r0, #30
 8006332:	bf58      	it	pl
 8006334:	6963      	ldrpl	r3, [r4, #20]
 8006336:	60a3      	str	r3, [r4, #8]
 8006338:	e7f4      	b.n	8006324 <__swsetup_r+0xb0>
 800633a:	2000      	movs	r0, #0
 800633c:	e7f7      	b.n	800632e <__swsetup_r+0xba>
 800633e:	bf00      	nop
 8006340:	2000000c 	.word	0x2000000c
 8006344:	080071b8 	.word	0x080071b8
 8006348:	080071d8 	.word	0x080071d8
 800634c:	08007198 	.word	0x08007198

08006350 <__sflush_r>:
 8006350:	898a      	ldrh	r2, [r1, #12]
 8006352:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006356:	4605      	mov	r5, r0
 8006358:	0710      	lsls	r0, r2, #28
 800635a:	460c      	mov	r4, r1
 800635c:	d458      	bmi.n	8006410 <__sflush_r+0xc0>
 800635e:	684b      	ldr	r3, [r1, #4]
 8006360:	2b00      	cmp	r3, #0
 8006362:	dc05      	bgt.n	8006370 <__sflush_r+0x20>
 8006364:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006366:	2b00      	cmp	r3, #0
 8006368:	dc02      	bgt.n	8006370 <__sflush_r+0x20>
 800636a:	2000      	movs	r0, #0
 800636c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006370:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006372:	2e00      	cmp	r6, #0
 8006374:	d0f9      	beq.n	800636a <__sflush_r+0x1a>
 8006376:	2300      	movs	r3, #0
 8006378:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800637c:	682f      	ldr	r7, [r5, #0]
 800637e:	602b      	str	r3, [r5, #0]
 8006380:	d032      	beq.n	80063e8 <__sflush_r+0x98>
 8006382:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006384:	89a3      	ldrh	r3, [r4, #12]
 8006386:	075a      	lsls	r2, r3, #29
 8006388:	d505      	bpl.n	8006396 <__sflush_r+0x46>
 800638a:	6863      	ldr	r3, [r4, #4]
 800638c:	1ac0      	subs	r0, r0, r3
 800638e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006390:	b10b      	cbz	r3, 8006396 <__sflush_r+0x46>
 8006392:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006394:	1ac0      	subs	r0, r0, r3
 8006396:	2300      	movs	r3, #0
 8006398:	4602      	mov	r2, r0
 800639a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800639c:	6a21      	ldr	r1, [r4, #32]
 800639e:	4628      	mov	r0, r5
 80063a0:	47b0      	blx	r6
 80063a2:	1c43      	adds	r3, r0, #1
 80063a4:	89a3      	ldrh	r3, [r4, #12]
 80063a6:	d106      	bne.n	80063b6 <__sflush_r+0x66>
 80063a8:	6829      	ldr	r1, [r5, #0]
 80063aa:	291d      	cmp	r1, #29
 80063ac:	d82c      	bhi.n	8006408 <__sflush_r+0xb8>
 80063ae:	4a2a      	ldr	r2, [pc, #168]	; (8006458 <__sflush_r+0x108>)
 80063b0:	40ca      	lsrs	r2, r1
 80063b2:	07d6      	lsls	r6, r2, #31
 80063b4:	d528      	bpl.n	8006408 <__sflush_r+0xb8>
 80063b6:	2200      	movs	r2, #0
 80063b8:	6062      	str	r2, [r4, #4]
 80063ba:	04d9      	lsls	r1, r3, #19
 80063bc:	6922      	ldr	r2, [r4, #16]
 80063be:	6022      	str	r2, [r4, #0]
 80063c0:	d504      	bpl.n	80063cc <__sflush_r+0x7c>
 80063c2:	1c42      	adds	r2, r0, #1
 80063c4:	d101      	bne.n	80063ca <__sflush_r+0x7a>
 80063c6:	682b      	ldr	r3, [r5, #0]
 80063c8:	b903      	cbnz	r3, 80063cc <__sflush_r+0x7c>
 80063ca:	6560      	str	r0, [r4, #84]	; 0x54
 80063cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80063ce:	602f      	str	r7, [r5, #0]
 80063d0:	2900      	cmp	r1, #0
 80063d2:	d0ca      	beq.n	800636a <__sflush_r+0x1a>
 80063d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80063d8:	4299      	cmp	r1, r3
 80063da:	d002      	beq.n	80063e2 <__sflush_r+0x92>
 80063dc:	4628      	mov	r0, r5
 80063de:	f000 f9d7 	bl	8006790 <_free_r>
 80063e2:	2000      	movs	r0, #0
 80063e4:	6360      	str	r0, [r4, #52]	; 0x34
 80063e6:	e7c1      	b.n	800636c <__sflush_r+0x1c>
 80063e8:	6a21      	ldr	r1, [r4, #32]
 80063ea:	2301      	movs	r3, #1
 80063ec:	4628      	mov	r0, r5
 80063ee:	47b0      	blx	r6
 80063f0:	1c41      	adds	r1, r0, #1
 80063f2:	d1c7      	bne.n	8006384 <__sflush_r+0x34>
 80063f4:	682b      	ldr	r3, [r5, #0]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d0c4      	beq.n	8006384 <__sflush_r+0x34>
 80063fa:	2b1d      	cmp	r3, #29
 80063fc:	d001      	beq.n	8006402 <__sflush_r+0xb2>
 80063fe:	2b16      	cmp	r3, #22
 8006400:	d101      	bne.n	8006406 <__sflush_r+0xb6>
 8006402:	602f      	str	r7, [r5, #0]
 8006404:	e7b1      	b.n	800636a <__sflush_r+0x1a>
 8006406:	89a3      	ldrh	r3, [r4, #12]
 8006408:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800640c:	81a3      	strh	r3, [r4, #12]
 800640e:	e7ad      	b.n	800636c <__sflush_r+0x1c>
 8006410:	690f      	ldr	r7, [r1, #16]
 8006412:	2f00      	cmp	r7, #0
 8006414:	d0a9      	beq.n	800636a <__sflush_r+0x1a>
 8006416:	0793      	lsls	r3, r2, #30
 8006418:	680e      	ldr	r6, [r1, #0]
 800641a:	bf08      	it	eq
 800641c:	694b      	ldreq	r3, [r1, #20]
 800641e:	600f      	str	r7, [r1, #0]
 8006420:	bf18      	it	ne
 8006422:	2300      	movne	r3, #0
 8006424:	eba6 0807 	sub.w	r8, r6, r7
 8006428:	608b      	str	r3, [r1, #8]
 800642a:	f1b8 0f00 	cmp.w	r8, #0
 800642e:	dd9c      	ble.n	800636a <__sflush_r+0x1a>
 8006430:	6a21      	ldr	r1, [r4, #32]
 8006432:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006434:	4643      	mov	r3, r8
 8006436:	463a      	mov	r2, r7
 8006438:	4628      	mov	r0, r5
 800643a:	47b0      	blx	r6
 800643c:	2800      	cmp	r0, #0
 800643e:	dc06      	bgt.n	800644e <__sflush_r+0xfe>
 8006440:	89a3      	ldrh	r3, [r4, #12]
 8006442:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006446:	81a3      	strh	r3, [r4, #12]
 8006448:	f04f 30ff 	mov.w	r0, #4294967295
 800644c:	e78e      	b.n	800636c <__sflush_r+0x1c>
 800644e:	4407      	add	r7, r0
 8006450:	eba8 0800 	sub.w	r8, r8, r0
 8006454:	e7e9      	b.n	800642a <__sflush_r+0xda>
 8006456:	bf00      	nop
 8006458:	20400001 	.word	0x20400001

0800645c <_fflush_r>:
 800645c:	b538      	push	{r3, r4, r5, lr}
 800645e:	690b      	ldr	r3, [r1, #16]
 8006460:	4605      	mov	r5, r0
 8006462:	460c      	mov	r4, r1
 8006464:	b913      	cbnz	r3, 800646c <_fflush_r+0x10>
 8006466:	2500      	movs	r5, #0
 8006468:	4628      	mov	r0, r5
 800646a:	bd38      	pop	{r3, r4, r5, pc}
 800646c:	b118      	cbz	r0, 8006476 <_fflush_r+0x1a>
 800646e:	6983      	ldr	r3, [r0, #24]
 8006470:	b90b      	cbnz	r3, 8006476 <_fflush_r+0x1a>
 8006472:	f000 f887 	bl	8006584 <__sinit>
 8006476:	4b14      	ldr	r3, [pc, #80]	; (80064c8 <_fflush_r+0x6c>)
 8006478:	429c      	cmp	r4, r3
 800647a:	d11b      	bne.n	80064b4 <_fflush_r+0x58>
 800647c:	686c      	ldr	r4, [r5, #4]
 800647e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d0ef      	beq.n	8006466 <_fflush_r+0xa>
 8006486:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006488:	07d0      	lsls	r0, r2, #31
 800648a:	d404      	bmi.n	8006496 <_fflush_r+0x3a>
 800648c:	0599      	lsls	r1, r3, #22
 800648e:	d402      	bmi.n	8006496 <_fflush_r+0x3a>
 8006490:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006492:	f000 f915 	bl	80066c0 <__retarget_lock_acquire_recursive>
 8006496:	4628      	mov	r0, r5
 8006498:	4621      	mov	r1, r4
 800649a:	f7ff ff59 	bl	8006350 <__sflush_r>
 800649e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80064a0:	07da      	lsls	r2, r3, #31
 80064a2:	4605      	mov	r5, r0
 80064a4:	d4e0      	bmi.n	8006468 <_fflush_r+0xc>
 80064a6:	89a3      	ldrh	r3, [r4, #12]
 80064a8:	059b      	lsls	r3, r3, #22
 80064aa:	d4dd      	bmi.n	8006468 <_fflush_r+0xc>
 80064ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80064ae:	f000 f908 	bl	80066c2 <__retarget_lock_release_recursive>
 80064b2:	e7d9      	b.n	8006468 <_fflush_r+0xc>
 80064b4:	4b05      	ldr	r3, [pc, #20]	; (80064cc <_fflush_r+0x70>)
 80064b6:	429c      	cmp	r4, r3
 80064b8:	d101      	bne.n	80064be <_fflush_r+0x62>
 80064ba:	68ac      	ldr	r4, [r5, #8]
 80064bc:	e7df      	b.n	800647e <_fflush_r+0x22>
 80064be:	4b04      	ldr	r3, [pc, #16]	; (80064d0 <_fflush_r+0x74>)
 80064c0:	429c      	cmp	r4, r3
 80064c2:	bf08      	it	eq
 80064c4:	68ec      	ldreq	r4, [r5, #12]
 80064c6:	e7da      	b.n	800647e <_fflush_r+0x22>
 80064c8:	080071b8 	.word	0x080071b8
 80064cc:	080071d8 	.word	0x080071d8
 80064d0:	08007198 	.word	0x08007198

080064d4 <std>:
 80064d4:	2300      	movs	r3, #0
 80064d6:	b510      	push	{r4, lr}
 80064d8:	4604      	mov	r4, r0
 80064da:	e9c0 3300 	strd	r3, r3, [r0]
 80064de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80064e2:	6083      	str	r3, [r0, #8]
 80064e4:	8181      	strh	r1, [r0, #12]
 80064e6:	6643      	str	r3, [r0, #100]	; 0x64
 80064e8:	81c2      	strh	r2, [r0, #14]
 80064ea:	6183      	str	r3, [r0, #24]
 80064ec:	4619      	mov	r1, r3
 80064ee:	2208      	movs	r2, #8
 80064f0:	305c      	adds	r0, #92	; 0x5c
 80064f2:	f7ff fdd7 	bl	80060a4 <memset>
 80064f6:	4b05      	ldr	r3, [pc, #20]	; (800650c <std+0x38>)
 80064f8:	6263      	str	r3, [r4, #36]	; 0x24
 80064fa:	4b05      	ldr	r3, [pc, #20]	; (8006510 <std+0x3c>)
 80064fc:	62a3      	str	r3, [r4, #40]	; 0x28
 80064fe:	4b05      	ldr	r3, [pc, #20]	; (8006514 <std+0x40>)
 8006500:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006502:	4b05      	ldr	r3, [pc, #20]	; (8006518 <std+0x44>)
 8006504:	6224      	str	r4, [r4, #32]
 8006506:	6323      	str	r3, [r4, #48]	; 0x30
 8006508:	bd10      	pop	{r4, pc}
 800650a:	bf00      	nop
 800650c:	08006f4d 	.word	0x08006f4d
 8006510:	08006f6f 	.word	0x08006f6f
 8006514:	08006fa7 	.word	0x08006fa7
 8006518:	08006fcb 	.word	0x08006fcb

0800651c <_cleanup_r>:
 800651c:	4901      	ldr	r1, [pc, #4]	; (8006524 <_cleanup_r+0x8>)
 800651e:	f000 b8af 	b.w	8006680 <_fwalk_reent>
 8006522:	bf00      	nop
 8006524:	0800645d 	.word	0x0800645d

08006528 <__sfmoreglue>:
 8006528:	b570      	push	{r4, r5, r6, lr}
 800652a:	2268      	movs	r2, #104	; 0x68
 800652c:	1e4d      	subs	r5, r1, #1
 800652e:	4355      	muls	r5, r2
 8006530:	460e      	mov	r6, r1
 8006532:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006536:	f000 f997 	bl	8006868 <_malloc_r>
 800653a:	4604      	mov	r4, r0
 800653c:	b140      	cbz	r0, 8006550 <__sfmoreglue+0x28>
 800653e:	2100      	movs	r1, #0
 8006540:	e9c0 1600 	strd	r1, r6, [r0]
 8006544:	300c      	adds	r0, #12
 8006546:	60a0      	str	r0, [r4, #8]
 8006548:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800654c:	f7ff fdaa 	bl	80060a4 <memset>
 8006550:	4620      	mov	r0, r4
 8006552:	bd70      	pop	{r4, r5, r6, pc}

08006554 <__sfp_lock_acquire>:
 8006554:	4801      	ldr	r0, [pc, #4]	; (800655c <__sfp_lock_acquire+0x8>)
 8006556:	f000 b8b3 	b.w	80066c0 <__retarget_lock_acquire_recursive>
 800655a:	bf00      	nop
 800655c:	200001dd 	.word	0x200001dd

08006560 <__sfp_lock_release>:
 8006560:	4801      	ldr	r0, [pc, #4]	; (8006568 <__sfp_lock_release+0x8>)
 8006562:	f000 b8ae 	b.w	80066c2 <__retarget_lock_release_recursive>
 8006566:	bf00      	nop
 8006568:	200001dd 	.word	0x200001dd

0800656c <__sinit_lock_acquire>:
 800656c:	4801      	ldr	r0, [pc, #4]	; (8006574 <__sinit_lock_acquire+0x8>)
 800656e:	f000 b8a7 	b.w	80066c0 <__retarget_lock_acquire_recursive>
 8006572:	bf00      	nop
 8006574:	200001de 	.word	0x200001de

08006578 <__sinit_lock_release>:
 8006578:	4801      	ldr	r0, [pc, #4]	; (8006580 <__sinit_lock_release+0x8>)
 800657a:	f000 b8a2 	b.w	80066c2 <__retarget_lock_release_recursive>
 800657e:	bf00      	nop
 8006580:	200001de 	.word	0x200001de

08006584 <__sinit>:
 8006584:	b510      	push	{r4, lr}
 8006586:	4604      	mov	r4, r0
 8006588:	f7ff fff0 	bl	800656c <__sinit_lock_acquire>
 800658c:	69a3      	ldr	r3, [r4, #24]
 800658e:	b11b      	cbz	r3, 8006598 <__sinit+0x14>
 8006590:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006594:	f7ff bff0 	b.w	8006578 <__sinit_lock_release>
 8006598:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800659c:	6523      	str	r3, [r4, #80]	; 0x50
 800659e:	4b13      	ldr	r3, [pc, #76]	; (80065ec <__sinit+0x68>)
 80065a0:	4a13      	ldr	r2, [pc, #76]	; (80065f0 <__sinit+0x6c>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	62a2      	str	r2, [r4, #40]	; 0x28
 80065a6:	42a3      	cmp	r3, r4
 80065a8:	bf04      	itt	eq
 80065aa:	2301      	moveq	r3, #1
 80065ac:	61a3      	streq	r3, [r4, #24]
 80065ae:	4620      	mov	r0, r4
 80065b0:	f000 f820 	bl	80065f4 <__sfp>
 80065b4:	6060      	str	r0, [r4, #4]
 80065b6:	4620      	mov	r0, r4
 80065b8:	f000 f81c 	bl	80065f4 <__sfp>
 80065bc:	60a0      	str	r0, [r4, #8]
 80065be:	4620      	mov	r0, r4
 80065c0:	f000 f818 	bl	80065f4 <__sfp>
 80065c4:	2200      	movs	r2, #0
 80065c6:	60e0      	str	r0, [r4, #12]
 80065c8:	2104      	movs	r1, #4
 80065ca:	6860      	ldr	r0, [r4, #4]
 80065cc:	f7ff ff82 	bl	80064d4 <std>
 80065d0:	68a0      	ldr	r0, [r4, #8]
 80065d2:	2201      	movs	r2, #1
 80065d4:	2109      	movs	r1, #9
 80065d6:	f7ff ff7d 	bl	80064d4 <std>
 80065da:	68e0      	ldr	r0, [r4, #12]
 80065dc:	2202      	movs	r2, #2
 80065de:	2112      	movs	r1, #18
 80065e0:	f7ff ff78 	bl	80064d4 <std>
 80065e4:	2301      	movs	r3, #1
 80065e6:	61a3      	str	r3, [r4, #24]
 80065e8:	e7d2      	b.n	8006590 <__sinit+0xc>
 80065ea:	bf00      	nop
 80065ec:	08007194 	.word	0x08007194
 80065f0:	0800651d 	.word	0x0800651d

080065f4 <__sfp>:
 80065f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065f6:	4607      	mov	r7, r0
 80065f8:	f7ff ffac 	bl	8006554 <__sfp_lock_acquire>
 80065fc:	4b1e      	ldr	r3, [pc, #120]	; (8006678 <__sfp+0x84>)
 80065fe:	681e      	ldr	r6, [r3, #0]
 8006600:	69b3      	ldr	r3, [r6, #24]
 8006602:	b913      	cbnz	r3, 800660a <__sfp+0x16>
 8006604:	4630      	mov	r0, r6
 8006606:	f7ff ffbd 	bl	8006584 <__sinit>
 800660a:	3648      	adds	r6, #72	; 0x48
 800660c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006610:	3b01      	subs	r3, #1
 8006612:	d503      	bpl.n	800661c <__sfp+0x28>
 8006614:	6833      	ldr	r3, [r6, #0]
 8006616:	b30b      	cbz	r3, 800665c <__sfp+0x68>
 8006618:	6836      	ldr	r6, [r6, #0]
 800661a:	e7f7      	b.n	800660c <__sfp+0x18>
 800661c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006620:	b9d5      	cbnz	r5, 8006658 <__sfp+0x64>
 8006622:	4b16      	ldr	r3, [pc, #88]	; (800667c <__sfp+0x88>)
 8006624:	60e3      	str	r3, [r4, #12]
 8006626:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800662a:	6665      	str	r5, [r4, #100]	; 0x64
 800662c:	f000 f847 	bl	80066be <__retarget_lock_init_recursive>
 8006630:	f7ff ff96 	bl	8006560 <__sfp_lock_release>
 8006634:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006638:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800663c:	6025      	str	r5, [r4, #0]
 800663e:	61a5      	str	r5, [r4, #24]
 8006640:	2208      	movs	r2, #8
 8006642:	4629      	mov	r1, r5
 8006644:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006648:	f7ff fd2c 	bl	80060a4 <memset>
 800664c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006650:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006654:	4620      	mov	r0, r4
 8006656:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006658:	3468      	adds	r4, #104	; 0x68
 800665a:	e7d9      	b.n	8006610 <__sfp+0x1c>
 800665c:	2104      	movs	r1, #4
 800665e:	4638      	mov	r0, r7
 8006660:	f7ff ff62 	bl	8006528 <__sfmoreglue>
 8006664:	4604      	mov	r4, r0
 8006666:	6030      	str	r0, [r6, #0]
 8006668:	2800      	cmp	r0, #0
 800666a:	d1d5      	bne.n	8006618 <__sfp+0x24>
 800666c:	f7ff ff78 	bl	8006560 <__sfp_lock_release>
 8006670:	230c      	movs	r3, #12
 8006672:	603b      	str	r3, [r7, #0]
 8006674:	e7ee      	b.n	8006654 <__sfp+0x60>
 8006676:	bf00      	nop
 8006678:	08007194 	.word	0x08007194
 800667c:	ffff0001 	.word	0xffff0001

08006680 <_fwalk_reent>:
 8006680:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006684:	4606      	mov	r6, r0
 8006686:	4688      	mov	r8, r1
 8006688:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800668c:	2700      	movs	r7, #0
 800668e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006692:	f1b9 0901 	subs.w	r9, r9, #1
 8006696:	d505      	bpl.n	80066a4 <_fwalk_reent+0x24>
 8006698:	6824      	ldr	r4, [r4, #0]
 800669a:	2c00      	cmp	r4, #0
 800669c:	d1f7      	bne.n	800668e <_fwalk_reent+0xe>
 800669e:	4638      	mov	r0, r7
 80066a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80066a4:	89ab      	ldrh	r3, [r5, #12]
 80066a6:	2b01      	cmp	r3, #1
 80066a8:	d907      	bls.n	80066ba <_fwalk_reent+0x3a>
 80066aa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80066ae:	3301      	adds	r3, #1
 80066b0:	d003      	beq.n	80066ba <_fwalk_reent+0x3a>
 80066b2:	4629      	mov	r1, r5
 80066b4:	4630      	mov	r0, r6
 80066b6:	47c0      	blx	r8
 80066b8:	4307      	orrs	r7, r0
 80066ba:	3568      	adds	r5, #104	; 0x68
 80066bc:	e7e9      	b.n	8006692 <_fwalk_reent+0x12>

080066be <__retarget_lock_init_recursive>:
 80066be:	4770      	bx	lr

080066c0 <__retarget_lock_acquire_recursive>:
 80066c0:	4770      	bx	lr

080066c2 <__retarget_lock_release_recursive>:
 80066c2:	4770      	bx	lr

080066c4 <__swhatbuf_r>:
 80066c4:	b570      	push	{r4, r5, r6, lr}
 80066c6:	460e      	mov	r6, r1
 80066c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066cc:	2900      	cmp	r1, #0
 80066ce:	b096      	sub	sp, #88	; 0x58
 80066d0:	4614      	mov	r4, r2
 80066d2:	461d      	mov	r5, r3
 80066d4:	da08      	bge.n	80066e8 <__swhatbuf_r+0x24>
 80066d6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80066da:	2200      	movs	r2, #0
 80066dc:	602a      	str	r2, [r5, #0]
 80066de:	061a      	lsls	r2, r3, #24
 80066e0:	d410      	bmi.n	8006704 <__swhatbuf_r+0x40>
 80066e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80066e6:	e00e      	b.n	8006706 <__swhatbuf_r+0x42>
 80066e8:	466a      	mov	r2, sp
 80066ea:	f000 fc95 	bl	8007018 <_fstat_r>
 80066ee:	2800      	cmp	r0, #0
 80066f0:	dbf1      	blt.n	80066d6 <__swhatbuf_r+0x12>
 80066f2:	9a01      	ldr	r2, [sp, #4]
 80066f4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80066f8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80066fc:	425a      	negs	r2, r3
 80066fe:	415a      	adcs	r2, r3
 8006700:	602a      	str	r2, [r5, #0]
 8006702:	e7ee      	b.n	80066e2 <__swhatbuf_r+0x1e>
 8006704:	2340      	movs	r3, #64	; 0x40
 8006706:	2000      	movs	r0, #0
 8006708:	6023      	str	r3, [r4, #0]
 800670a:	b016      	add	sp, #88	; 0x58
 800670c:	bd70      	pop	{r4, r5, r6, pc}
	...

08006710 <__smakebuf_r>:
 8006710:	898b      	ldrh	r3, [r1, #12]
 8006712:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006714:	079d      	lsls	r5, r3, #30
 8006716:	4606      	mov	r6, r0
 8006718:	460c      	mov	r4, r1
 800671a:	d507      	bpl.n	800672c <__smakebuf_r+0x1c>
 800671c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006720:	6023      	str	r3, [r4, #0]
 8006722:	6123      	str	r3, [r4, #16]
 8006724:	2301      	movs	r3, #1
 8006726:	6163      	str	r3, [r4, #20]
 8006728:	b002      	add	sp, #8
 800672a:	bd70      	pop	{r4, r5, r6, pc}
 800672c:	ab01      	add	r3, sp, #4
 800672e:	466a      	mov	r2, sp
 8006730:	f7ff ffc8 	bl	80066c4 <__swhatbuf_r>
 8006734:	9900      	ldr	r1, [sp, #0]
 8006736:	4605      	mov	r5, r0
 8006738:	4630      	mov	r0, r6
 800673a:	f000 f895 	bl	8006868 <_malloc_r>
 800673e:	b948      	cbnz	r0, 8006754 <__smakebuf_r+0x44>
 8006740:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006744:	059a      	lsls	r2, r3, #22
 8006746:	d4ef      	bmi.n	8006728 <__smakebuf_r+0x18>
 8006748:	f023 0303 	bic.w	r3, r3, #3
 800674c:	f043 0302 	orr.w	r3, r3, #2
 8006750:	81a3      	strh	r3, [r4, #12]
 8006752:	e7e3      	b.n	800671c <__smakebuf_r+0xc>
 8006754:	4b0d      	ldr	r3, [pc, #52]	; (800678c <__smakebuf_r+0x7c>)
 8006756:	62b3      	str	r3, [r6, #40]	; 0x28
 8006758:	89a3      	ldrh	r3, [r4, #12]
 800675a:	6020      	str	r0, [r4, #0]
 800675c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006760:	81a3      	strh	r3, [r4, #12]
 8006762:	9b00      	ldr	r3, [sp, #0]
 8006764:	6163      	str	r3, [r4, #20]
 8006766:	9b01      	ldr	r3, [sp, #4]
 8006768:	6120      	str	r0, [r4, #16]
 800676a:	b15b      	cbz	r3, 8006784 <__smakebuf_r+0x74>
 800676c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006770:	4630      	mov	r0, r6
 8006772:	f000 fc63 	bl	800703c <_isatty_r>
 8006776:	b128      	cbz	r0, 8006784 <__smakebuf_r+0x74>
 8006778:	89a3      	ldrh	r3, [r4, #12]
 800677a:	f023 0303 	bic.w	r3, r3, #3
 800677e:	f043 0301 	orr.w	r3, r3, #1
 8006782:	81a3      	strh	r3, [r4, #12]
 8006784:	89a0      	ldrh	r0, [r4, #12]
 8006786:	4305      	orrs	r5, r0
 8006788:	81a5      	strh	r5, [r4, #12]
 800678a:	e7cd      	b.n	8006728 <__smakebuf_r+0x18>
 800678c:	0800651d 	.word	0x0800651d

08006790 <_free_r>:
 8006790:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006792:	2900      	cmp	r1, #0
 8006794:	d044      	beq.n	8006820 <_free_r+0x90>
 8006796:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800679a:	9001      	str	r0, [sp, #4]
 800679c:	2b00      	cmp	r3, #0
 800679e:	f1a1 0404 	sub.w	r4, r1, #4
 80067a2:	bfb8      	it	lt
 80067a4:	18e4      	addlt	r4, r4, r3
 80067a6:	f000 fc6b 	bl	8007080 <__malloc_lock>
 80067aa:	4a1e      	ldr	r2, [pc, #120]	; (8006824 <_free_r+0x94>)
 80067ac:	9801      	ldr	r0, [sp, #4]
 80067ae:	6813      	ldr	r3, [r2, #0]
 80067b0:	b933      	cbnz	r3, 80067c0 <_free_r+0x30>
 80067b2:	6063      	str	r3, [r4, #4]
 80067b4:	6014      	str	r4, [r2, #0]
 80067b6:	b003      	add	sp, #12
 80067b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80067bc:	f000 bc66 	b.w	800708c <__malloc_unlock>
 80067c0:	42a3      	cmp	r3, r4
 80067c2:	d908      	bls.n	80067d6 <_free_r+0x46>
 80067c4:	6825      	ldr	r5, [r4, #0]
 80067c6:	1961      	adds	r1, r4, r5
 80067c8:	428b      	cmp	r3, r1
 80067ca:	bf01      	itttt	eq
 80067cc:	6819      	ldreq	r1, [r3, #0]
 80067ce:	685b      	ldreq	r3, [r3, #4]
 80067d0:	1949      	addeq	r1, r1, r5
 80067d2:	6021      	streq	r1, [r4, #0]
 80067d4:	e7ed      	b.n	80067b2 <_free_r+0x22>
 80067d6:	461a      	mov	r2, r3
 80067d8:	685b      	ldr	r3, [r3, #4]
 80067da:	b10b      	cbz	r3, 80067e0 <_free_r+0x50>
 80067dc:	42a3      	cmp	r3, r4
 80067de:	d9fa      	bls.n	80067d6 <_free_r+0x46>
 80067e0:	6811      	ldr	r1, [r2, #0]
 80067e2:	1855      	adds	r5, r2, r1
 80067e4:	42a5      	cmp	r5, r4
 80067e6:	d10b      	bne.n	8006800 <_free_r+0x70>
 80067e8:	6824      	ldr	r4, [r4, #0]
 80067ea:	4421      	add	r1, r4
 80067ec:	1854      	adds	r4, r2, r1
 80067ee:	42a3      	cmp	r3, r4
 80067f0:	6011      	str	r1, [r2, #0]
 80067f2:	d1e0      	bne.n	80067b6 <_free_r+0x26>
 80067f4:	681c      	ldr	r4, [r3, #0]
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	6053      	str	r3, [r2, #4]
 80067fa:	4421      	add	r1, r4
 80067fc:	6011      	str	r1, [r2, #0]
 80067fe:	e7da      	b.n	80067b6 <_free_r+0x26>
 8006800:	d902      	bls.n	8006808 <_free_r+0x78>
 8006802:	230c      	movs	r3, #12
 8006804:	6003      	str	r3, [r0, #0]
 8006806:	e7d6      	b.n	80067b6 <_free_r+0x26>
 8006808:	6825      	ldr	r5, [r4, #0]
 800680a:	1961      	adds	r1, r4, r5
 800680c:	428b      	cmp	r3, r1
 800680e:	bf04      	itt	eq
 8006810:	6819      	ldreq	r1, [r3, #0]
 8006812:	685b      	ldreq	r3, [r3, #4]
 8006814:	6063      	str	r3, [r4, #4]
 8006816:	bf04      	itt	eq
 8006818:	1949      	addeq	r1, r1, r5
 800681a:	6021      	streq	r1, [r4, #0]
 800681c:	6054      	str	r4, [r2, #4]
 800681e:	e7ca      	b.n	80067b6 <_free_r+0x26>
 8006820:	b003      	add	sp, #12
 8006822:	bd30      	pop	{r4, r5, pc}
 8006824:	200001e0 	.word	0x200001e0

08006828 <sbrk_aligned>:
 8006828:	b570      	push	{r4, r5, r6, lr}
 800682a:	4e0e      	ldr	r6, [pc, #56]	; (8006864 <sbrk_aligned+0x3c>)
 800682c:	460c      	mov	r4, r1
 800682e:	6831      	ldr	r1, [r6, #0]
 8006830:	4605      	mov	r5, r0
 8006832:	b911      	cbnz	r1, 800683a <sbrk_aligned+0x12>
 8006834:	f000 fb7a 	bl	8006f2c <_sbrk_r>
 8006838:	6030      	str	r0, [r6, #0]
 800683a:	4621      	mov	r1, r4
 800683c:	4628      	mov	r0, r5
 800683e:	f000 fb75 	bl	8006f2c <_sbrk_r>
 8006842:	1c43      	adds	r3, r0, #1
 8006844:	d00a      	beq.n	800685c <sbrk_aligned+0x34>
 8006846:	1cc4      	adds	r4, r0, #3
 8006848:	f024 0403 	bic.w	r4, r4, #3
 800684c:	42a0      	cmp	r0, r4
 800684e:	d007      	beq.n	8006860 <sbrk_aligned+0x38>
 8006850:	1a21      	subs	r1, r4, r0
 8006852:	4628      	mov	r0, r5
 8006854:	f000 fb6a 	bl	8006f2c <_sbrk_r>
 8006858:	3001      	adds	r0, #1
 800685a:	d101      	bne.n	8006860 <sbrk_aligned+0x38>
 800685c:	f04f 34ff 	mov.w	r4, #4294967295
 8006860:	4620      	mov	r0, r4
 8006862:	bd70      	pop	{r4, r5, r6, pc}
 8006864:	200001e4 	.word	0x200001e4

08006868 <_malloc_r>:
 8006868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800686c:	1ccd      	adds	r5, r1, #3
 800686e:	f025 0503 	bic.w	r5, r5, #3
 8006872:	3508      	adds	r5, #8
 8006874:	2d0c      	cmp	r5, #12
 8006876:	bf38      	it	cc
 8006878:	250c      	movcc	r5, #12
 800687a:	2d00      	cmp	r5, #0
 800687c:	4607      	mov	r7, r0
 800687e:	db01      	blt.n	8006884 <_malloc_r+0x1c>
 8006880:	42a9      	cmp	r1, r5
 8006882:	d905      	bls.n	8006890 <_malloc_r+0x28>
 8006884:	230c      	movs	r3, #12
 8006886:	603b      	str	r3, [r7, #0]
 8006888:	2600      	movs	r6, #0
 800688a:	4630      	mov	r0, r6
 800688c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006890:	4e2e      	ldr	r6, [pc, #184]	; (800694c <_malloc_r+0xe4>)
 8006892:	f000 fbf5 	bl	8007080 <__malloc_lock>
 8006896:	6833      	ldr	r3, [r6, #0]
 8006898:	461c      	mov	r4, r3
 800689a:	bb34      	cbnz	r4, 80068ea <_malloc_r+0x82>
 800689c:	4629      	mov	r1, r5
 800689e:	4638      	mov	r0, r7
 80068a0:	f7ff ffc2 	bl	8006828 <sbrk_aligned>
 80068a4:	1c43      	adds	r3, r0, #1
 80068a6:	4604      	mov	r4, r0
 80068a8:	d14d      	bne.n	8006946 <_malloc_r+0xde>
 80068aa:	6834      	ldr	r4, [r6, #0]
 80068ac:	4626      	mov	r6, r4
 80068ae:	2e00      	cmp	r6, #0
 80068b0:	d140      	bne.n	8006934 <_malloc_r+0xcc>
 80068b2:	6823      	ldr	r3, [r4, #0]
 80068b4:	4631      	mov	r1, r6
 80068b6:	4638      	mov	r0, r7
 80068b8:	eb04 0803 	add.w	r8, r4, r3
 80068bc:	f000 fb36 	bl	8006f2c <_sbrk_r>
 80068c0:	4580      	cmp	r8, r0
 80068c2:	d13a      	bne.n	800693a <_malloc_r+0xd2>
 80068c4:	6821      	ldr	r1, [r4, #0]
 80068c6:	3503      	adds	r5, #3
 80068c8:	1a6d      	subs	r5, r5, r1
 80068ca:	f025 0503 	bic.w	r5, r5, #3
 80068ce:	3508      	adds	r5, #8
 80068d0:	2d0c      	cmp	r5, #12
 80068d2:	bf38      	it	cc
 80068d4:	250c      	movcc	r5, #12
 80068d6:	4629      	mov	r1, r5
 80068d8:	4638      	mov	r0, r7
 80068da:	f7ff ffa5 	bl	8006828 <sbrk_aligned>
 80068de:	3001      	adds	r0, #1
 80068e0:	d02b      	beq.n	800693a <_malloc_r+0xd2>
 80068e2:	6823      	ldr	r3, [r4, #0]
 80068e4:	442b      	add	r3, r5
 80068e6:	6023      	str	r3, [r4, #0]
 80068e8:	e00e      	b.n	8006908 <_malloc_r+0xa0>
 80068ea:	6822      	ldr	r2, [r4, #0]
 80068ec:	1b52      	subs	r2, r2, r5
 80068ee:	d41e      	bmi.n	800692e <_malloc_r+0xc6>
 80068f0:	2a0b      	cmp	r2, #11
 80068f2:	d916      	bls.n	8006922 <_malloc_r+0xba>
 80068f4:	1961      	adds	r1, r4, r5
 80068f6:	42a3      	cmp	r3, r4
 80068f8:	6025      	str	r5, [r4, #0]
 80068fa:	bf18      	it	ne
 80068fc:	6059      	strne	r1, [r3, #4]
 80068fe:	6863      	ldr	r3, [r4, #4]
 8006900:	bf08      	it	eq
 8006902:	6031      	streq	r1, [r6, #0]
 8006904:	5162      	str	r2, [r4, r5]
 8006906:	604b      	str	r3, [r1, #4]
 8006908:	4638      	mov	r0, r7
 800690a:	f104 060b 	add.w	r6, r4, #11
 800690e:	f000 fbbd 	bl	800708c <__malloc_unlock>
 8006912:	f026 0607 	bic.w	r6, r6, #7
 8006916:	1d23      	adds	r3, r4, #4
 8006918:	1af2      	subs	r2, r6, r3
 800691a:	d0b6      	beq.n	800688a <_malloc_r+0x22>
 800691c:	1b9b      	subs	r3, r3, r6
 800691e:	50a3      	str	r3, [r4, r2]
 8006920:	e7b3      	b.n	800688a <_malloc_r+0x22>
 8006922:	6862      	ldr	r2, [r4, #4]
 8006924:	42a3      	cmp	r3, r4
 8006926:	bf0c      	ite	eq
 8006928:	6032      	streq	r2, [r6, #0]
 800692a:	605a      	strne	r2, [r3, #4]
 800692c:	e7ec      	b.n	8006908 <_malloc_r+0xa0>
 800692e:	4623      	mov	r3, r4
 8006930:	6864      	ldr	r4, [r4, #4]
 8006932:	e7b2      	b.n	800689a <_malloc_r+0x32>
 8006934:	4634      	mov	r4, r6
 8006936:	6876      	ldr	r6, [r6, #4]
 8006938:	e7b9      	b.n	80068ae <_malloc_r+0x46>
 800693a:	230c      	movs	r3, #12
 800693c:	603b      	str	r3, [r7, #0]
 800693e:	4638      	mov	r0, r7
 8006940:	f000 fba4 	bl	800708c <__malloc_unlock>
 8006944:	e7a1      	b.n	800688a <_malloc_r+0x22>
 8006946:	6025      	str	r5, [r4, #0]
 8006948:	e7de      	b.n	8006908 <_malloc_r+0xa0>
 800694a:	bf00      	nop
 800694c:	200001e0 	.word	0x200001e0

08006950 <__sfputc_r>:
 8006950:	6893      	ldr	r3, [r2, #8]
 8006952:	3b01      	subs	r3, #1
 8006954:	2b00      	cmp	r3, #0
 8006956:	b410      	push	{r4}
 8006958:	6093      	str	r3, [r2, #8]
 800695a:	da08      	bge.n	800696e <__sfputc_r+0x1e>
 800695c:	6994      	ldr	r4, [r2, #24]
 800695e:	42a3      	cmp	r3, r4
 8006960:	db01      	blt.n	8006966 <__sfputc_r+0x16>
 8006962:	290a      	cmp	r1, #10
 8006964:	d103      	bne.n	800696e <__sfputc_r+0x1e>
 8006966:	f85d 4b04 	ldr.w	r4, [sp], #4
 800696a:	f7ff bc31 	b.w	80061d0 <__swbuf_r>
 800696e:	6813      	ldr	r3, [r2, #0]
 8006970:	1c58      	adds	r0, r3, #1
 8006972:	6010      	str	r0, [r2, #0]
 8006974:	7019      	strb	r1, [r3, #0]
 8006976:	4608      	mov	r0, r1
 8006978:	f85d 4b04 	ldr.w	r4, [sp], #4
 800697c:	4770      	bx	lr

0800697e <__sfputs_r>:
 800697e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006980:	4606      	mov	r6, r0
 8006982:	460f      	mov	r7, r1
 8006984:	4614      	mov	r4, r2
 8006986:	18d5      	adds	r5, r2, r3
 8006988:	42ac      	cmp	r4, r5
 800698a:	d101      	bne.n	8006990 <__sfputs_r+0x12>
 800698c:	2000      	movs	r0, #0
 800698e:	e007      	b.n	80069a0 <__sfputs_r+0x22>
 8006990:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006994:	463a      	mov	r2, r7
 8006996:	4630      	mov	r0, r6
 8006998:	f7ff ffda 	bl	8006950 <__sfputc_r>
 800699c:	1c43      	adds	r3, r0, #1
 800699e:	d1f3      	bne.n	8006988 <__sfputs_r+0xa>
 80069a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080069a4 <_vfiprintf_r>:
 80069a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069a8:	460d      	mov	r5, r1
 80069aa:	b09d      	sub	sp, #116	; 0x74
 80069ac:	4614      	mov	r4, r2
 80069ae:	4698      	mov	r8, r3
 80069b0:	4606      	mov	r6, r0
 80069b2:	b118      	cbz	r0, 80069bc <_vfiprintf_r+0x18>
 80069b4:	6983      	ldr	r3, [r0, #24]
 80069b6:	b90b      	cbnz	r3, 80069bc <_vfiprintf_r+0x18>
 80069b8:	f7ff fde4 	bl	8006584 <__sinit>
 80069bc:	4b89      	ldr	r3, [pc, #548]	; (8006be4 <_vfiprintf_r+0x240>)
 80069be:	429d      	cmp	r5, r3
 80069c0:	d11b      	bne.n	80069fa <_vfiprintf_r+0x56>
 80069c2:	6875      	ldr	r5, [r6, #4]
 80069c4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80069c6:	07d9      	lsls	r1, r3, #31
 80069c8:	d405      	bmi.n	80069d6 <_vfiprintf_r+0x32>
 80069ca:	89ab      	ldrh	r3, [r5, #12]
 80069cc:	059a      	lsls	r2, r3, #22
 80069ce:	d402      	bmi.n	80069d6 <_vfiprintf_r+0x32>
 80069d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80069d2:	f7ff fe75 	bl	80066c0 <__retarget_lock_acquire_recursive>
 80069d6:	89ab      	ldrh	r3, [r5, #12]
 80069d8:	071b      	lsls	r3, r3, #28
 80069da:	d501      	bpl.n	80069e0 <_vfiprintf_r+0x3c>
 80069dc:	692b      	ldr	r3, [r5, #16]
 80069de:	b9eb      	cbnz	r3, 8006a1c <_vfiprintf_r+0x78>
 80069e0:	4629      	mov	r1, r5
 80069e2:	4630      	mov	r0, r6
 80069e4:	f7ff fc46 	bl	8006274 <__swsetup_r>
 80069e8:	b1c0      	cbz	r0, 8006a1c <_vfiprintf_r+0x78>
 80069ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80069ec:	07dc      	lsls	r4, r3, #31
 80069ee:	d50e      	bpl.n	8006a0e <_vfiprintf_r+0x6a>
 80069f0:	f04f 30ff 	mov.w	r0, #4294967295
 80069f4:	b01d      	add	sp, #116	; 0x74
 80069f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069fa:	4b7b      	ldr	r3, [pc, #492]	; (8006be8 <_vfiprintf_r+0x244>)
 80069fc:	429d      	cmp	r5, r3
 80069fe:	d101      	bne.n	8006a04 <_vfiprintf_r+0x60>
 8006a00:	68b5      	ldr	r5, [r6, #8]
 8006a02:	e7df      	b.n	80069c4 <_vfiprintf_r+0x20>
 8006a04:	4b79      	ldr	r3, [pc, #484]	; (8006bec <_vfiprintf_r+0x248>)
 8006a06:	429d      	cmp	r5, r3
 8006a08:	bf08      	it	eq
 8006a0a:	68f5      	ldreq	r5, [r6, #12]
 8006a0c:	e7da      	b.n	80069c4 <_vfiprintf_r+0x20>
 8006a0e:	89ab      	ldrh	r3, [r5, #12]
 8006a10:	0598      	lsls	r0, r3, #22
 8006a12:	d4ed      	bmi.n	80069f0 <_vfiprintf_r+0x4c>
 8006a14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006a16:	f7ff fe54 	bl	80066c2 <__retarget_lock_release_recursive>
 8006a1a:	e7e9      	b.n	80069f0 <_vfiprintf_r+0x4c>
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	9309      	str	r3, [sp, #36]	; 0x24
 8006a20:	2320      	movs	r3, #32
 8006a22:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006a26:	f8cd 800c 	str.w	r8, [sp, #12]
 8006a2a:	2330      	movs	r3, #48	; 0x30
 8006a2c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006bf0 <_vfiprintf_r+0x24c>
 8006a30:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006a34:	f04f 0901 	mov.w	r9, #1
 8006a38:	4623      	mov	r3, r4
 8006a3a:	469a      	mov	sl, r3
 8006a3c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006a40:	b10a      	cbz	r2, 8006a46 <_vfiprintf_r+0xa2>
 8006a42:	2a25      	cmp	r2, #37	; 0x25
 8006a44:	d1f9      	bne.n	8006a3a <_vfiprintf_r+0x96>
 8006a46:	ebba 0b04 	subs.w	fp, sl, r4
 8006a4a:	d00b      	beq.n	8006a64 <_vfiprintf_r+0xc0>
 8006a4c:	465b      	mov	r3, fp
 8006a4e:	4622      	mov	r2, r4
 8006a50:	4629      	mov	r1, r5
 8006a52:	4630      	mov	r0, r6
 8006a54:	f7ff ff93 	bl	800697e <__sfputs_r>
 8006a58:	3001      	adds	r0, #1
 8006a5a:	f000 80aa 	beq.w	8006bb2 <_vfiprintf_r+0x20e>
 8006a5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a60:	445a      	add	r2, fp
 8006a62:	9209      	str	r2, [sp, #36]	; 0x24
 8006a64:	f89a 3000 	ldrb.w	r3, [sl]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	f000 80a2 	beq.w	8006bb2 <_vfiprintf_r+0x20e>
 8006a6e:	2300      	movs	r3, #0
 8006a70:	f04f 32ff 	mov.w	r2, #4294967295
 8006a74:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006a78:	f10a 0a01 	add.w	sl, sl, #1
 8006a7c:	9304      	str	r3, [sp, #16]
 8006a7e:	9307      	str	r3, [sp, #28]
 8006a80:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006a84:	931a      	str	r3, [sp, #104]	; 0x68
 8006a86:	4654      	mov	r4, sl
 8006a88:	2205      	movs	r2, #5
 8006a8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a8e:	4858      	ldr	r0, [pc, #352]	; (8006bf0 <_vfiprintf_r+0x24c>)
 8006a90:	f7f9 fbae 	bl	80001f0 <memchr>
 8006a94:	9a04      	ldr	r2, [sp, #16]
 8006a96:	b9d8      	cbnz	r0, 8006ad0 <_vfiprintf_r+0x12c>
 8006a98:	06d1      	lsls	r1, r2, #27
 8006a9a:	bf44      	itt	mi
 8006a9c:	2320      	movmi	r3, #32
 8006a9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006aa2:	0713      	lsls	r3, r2, #28
 8006aa4:	bf44      	itt	mi
 8006aa6:	232b      	movmi	r3, #43	; 0x2b
 8006aa8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006aac:	f89a 3000 	ldrb.w	r3, [sl]
 8006ab0:	2b2a      	cmp	r3, #42	; 0x2a
 8006ab2:	d015      	beq.n	8006ae0 <_vfiprintf_r+0x13c>
 8006ab4:	9a07      	ldr	r2, [sp, #28]
 8006ab6:	4654      	mov	r4, sl
 8006ab8:	2000      	movs	r0, #0
 8006aba:	f04f 0c0a 	mov.w	ip, #10
 8006abe:	4621      	mov	r1, r4
 8006ac0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006ac4:	3b30      	subs	r3, #48	; 0x30
 8006ac6:	2b09      	cmp	r3, #9
 8006ac8:	d94e      	bls.n	8006b68 <_vfiprintf_r+0x1c4>
 8006aca:	b1b0      	cbz	r0, 8006afa <_vfiprintf_r+0x156>
 8006acc:	9207      	str	r2, [sp, #28]
 8006ace:	e014      	b.n	8006afa <_vfiprintf_r+0x156>
 8006ad0:	eba0 0308 	sub.w	r3, r0, r8
 8006ad4:	fa09 f303 	lsl.w	r3, r9, r3
 8006ad8:	4313      	orrs	r3, r2
 8006ada:	9304      	str	r3, [sp, #16]
 8006adc:	46a2      	mov	sl, r4
 8006ade:	e7d2      	b.n	8006a86 <_vfiprintf_r+0xe2>
 8006ae0:	9b03      	ldr	r3, [sp, #12]
 8006ae2:	1d19      	adds	r1, r3, #4
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	9103      	str	r1, [sp, #12]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	bfbb      	ittet	lt
 8006aec:	425b      	neglt	r3, r3
 8006aee:	f042 0202 	orrlt.w	r2, r2, #2
 8006af2:	9307      	strge	r3, [sp, #28]
 8006af4:	9307      	strlt	r3, [sp, #28]
 8006af6:	bfb8      	it	lt
 8006af8:	9204      	strlt	r2, [sp, #16]
 8006afa:	7823      	ldrb	r3, [r4, #0]
 8006afc:	2b2e      	cmp	r3, #46	; 0x2e
 8006afe:	d10c      	bne.n	8006b1a <_vfiprintf_r+0x176>
 8006b00:	7863      	ldrb	r3, [r4, #1]
 8006b02:	2b2a      	cmp	r3, #42	; 0x2a
 8006b04:	d135      	bne.n	8006b72 <_vfiprintf_r+0x1ce>
 8006b06:	9b03      	ldr	r3, [sp, #12]
 8006b08:	1d1a      	adds	r2, r3, #4
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	9203      	str	r2, [sp, #12]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	bfb8      	it	lt
 8006b12:	f04f 33ff 	movlt.w	r3, #4294967295
 8006b16:	3402      	adds	r4, #2
 8006b18:	9305      	str	r3, [sp, #20]
 8006b1a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006c00 <_vfiprintf_r+0x25c>
 8006b1e:	7821      	ldrb	r1, [r4, #0]
 8006b20:	2203      	movs	r2, #3
 8006b22:	4650      	mov	r0, sl
 8006b24:	f7f9 fb64 	bl	80001f0 <memchr>
 8006b28:	b140      	cbz	r0, 8006b3c <_vfiprintf_r+0x198>
 8006b2a:	2340      	movs	r3, #64	; 0x40
 8006b2c:	eba0 000a 	sub.w	r0, r0, sl
 8006b30:	fa03 f000 	lsl.w	r0, r3, r0
 8006b34:	9b04      	ldr	r3, [sp, #16]
 8006b36:	4303      	orrs	r3, r0
 8006b38:	3401      	adds	r4, #1
 8006b3a:	9304      	str	r3, [sp, #16]
 8006b3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b40:	482c      	ldr	r0, [pc, #176]	; (8006bf4 <_vfiprintf_r+0x250>)
 8006b42:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006b46:	2206      	movs	r2, #6
 8006b48:	f7f9 fb52 	bl	80001f0 <memchr>
 8006b4c:	2800      	cmp	r0, #0
 8006b4e:	d03f      	beq.n	8006bd0 <_vfiprintf_r+0x22c>
 8006b50:	4b29      	ldr	r3, [pc, #164]	; (8006bf8 <_vfiprintf_r+0x254>)
 8006b52:	bb1b      	cbnz	r3, 8006b9c <_vfiprintf_r+0x1f8>
 8006b54:	9b03      	ldr	r3, [sp, #12]
 8006b56:	3307      	adds	r3, #7
 8006b58:	f023 0307 	bic.w	r3, r3, #7
 8006b5c:	3308      	adds	r3, #8
 8006b5e:	9303      	str	r3, [sp, #12]
 8006b60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b62:	443b      	add	r3, r7
 8006b64:	9309      	str	r3, [sp, #36]	; 0x24
 8006b66:	e767      	b.n	8006a38 <_vfiprintf_r+0x94>
 8006b68:	fb0c 3202 	mla	r2, ip, r2, r3
 8006b6c:	460c      	mov	r4, r1
 8006b6e:	2001      	movs	r0, #1
 8006b70:	e7a5      	b.n	8006abe <_vfiprintf_r+0x11a>
 8006b72:	2300      	movs	r3, #0
 8006b74:	3401      	adds	r4, #1
 8006b76:	9305      	str	r3, [sp, #20]
 8006b78:	4619      	mov	r1, r3
 8006b7a:	f04f 0c0a 	mov.w	ip, #10
 8006b7e:	4620      	mov	r0, r4
 8006b80:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006b84:	3a30      	subs	r2, #48	; 0x30
 8006b86:	2a09      	cmp	r2, #9
 8006b88:	d903      	bls.n	8006b92 <_vfiprintf_r+0x1ee>
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d0c5      	beq.n	8006b1a <_vfiprintf_r+0x176>
 8006b8e:	9105      	str	r1, [sp, #20]
 8006b90:	e7c3      	b.n	8006b1a <_vfiprintf_r+0x176>
 8006b92:	fb0c 2101 	mla	r1, ip, r1, r2
 8006b96:	4604      	mov	r4, r0
 8006b98:	2301      	movs	r3, #1
 8006b9a:	e7f0      	b.n	8006b7e <_vfiprintf_r+0x1da>
 8006b9c:	ab03      	add	r3, sp, #12
 8006b9e:	9300      	str	r3, [sp, #0]
 8006ba0:	462a      	mov	r2, r5
 8006ba2:	4b16      	ldr	r3, [pc, #88]	; (8006bfc <_vfiprintf_r+0x258>)
 8006ba4:	a904      	add	r1, sp, #16
 8006ba6:	4630      	mov	r0, r6
 8006ba8:	f3af 8000 	nop.w
 8006bac:	4607      	mov	r7, r0
 8006bae:	1c78      	adds	r0, r7, #1
 8006bb0:	d1d6      	bne.n	8006b60 <_vfiprintf_r+0x1bc>
 8006bb2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006bb4:	07d9      	lsls	r1, r3, #31
 8006bb6:	d405      	bmi.n	8006bc4 <_vfiprintf_r+0x220>
 8006bb8:	89ab      	ldrh	r3, [r5, #12]
 8006bba:	059a      	lsls	r2, r3, #22
 8006bbc:	d402      	bmi.n	8006bc4 <_vfiprintf_r+0x220>
 8006bbe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006bc0:	f7ff fd7f 	bl	80066c2 <__retarget_lock_release_recursive>
 8006bc4:	89ab      	ldrh	r3, [r5, #12]
 8006bc6:	065b      	lsls	r3, r3, #25
 8006bc8:	f53f af12 	bmi.w	80069f0 <_vfiprintf_r+0x4c>
 8006bcc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006bce:	e711      	b.n	80069f4 <_vfiprintf_r+0x50>
 8006bd0:	ab03      	add	r3, sp, #12
 8006bd2:	9300      	str	r3, [sp, #0]
 8006bd4:	462a      	mov	r2, r5
 8006bd6:	4b09      	ldr	r3, [pc, #36]	; (8006bfc <_vfiprintf_r+0x258>)
 8006bd8:	a904      	add	r1, sp, #16
 8006bda:	4630      	mov	r0, r6
 8006bdc:	f000 f880 	bl	8006ce0 <_printf_i>
 8006be0:	e7e4      	b.n	8006bac <_vfiprintf_r+0x208>
 8006be2:	bf00      	nop
 8006be4:	080071b8 	.word	0x080071b8
 8006be8:	080071d8 	.word	0x080071d8
 8006bec:	08007198 	.word	0x08007198
 8006bf0:	080071f8 	.word	0x080071f8
 8006bf4:	08007202 	.word	0x08007202
 8006bf8:	00000000 	.word	0x00000000
 8006bfc:	0800697f 	.word	0x0800697f
 8006c00:	080071fe 	.word	0x080071fe

08006c04 <_printf_common>:
 8006c04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c08:	4616      	mov	r6, r2
 8006c0a:	4699      	mov	r9, r3
 8006c0c:	688a      	ldr	r2, [r1, #8]
 8006c0e:	690b      	ldr	r3, [r1, #16]
 8006c10:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006c14:	4293      	cmp	r3, r2
 8006c16:	bfb8      	it	lt
 8006c18:	4613      	movlt	r3, r2
 8006c1a:	6033      	str	r3, [r6, #0]
 8006c1c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006c20:	4607      	mov	r7, r0
 8006c22:	460c      	mov	r4, r1
 8006c24:	b10a      	cbz	r2, 8006c2a <_printf_common+0x26>
 8006c26:	3301      	adds	r3, #1
 8006c28:	6033      	str	r3, [r6, #0]
 8006c2a:	6823      	ldr	r3, [r4, #0]
 8006c2c:	0699      	lsls	r1, r3, #26
 8006c2e:	bf42      	ittt	mi
 8006c30:	6833      	ldrmi	r3, [r6, #0]
 8006c32:	3302      	addmi	r3, #2
 8006c34:	6033      	strmi	r3, [r6, #0]
 8006c36:	6825      	ldr	r5, [r4, #0]
 8006c38:	f015 0506 	ands.w	r5, r5, #6
 8006c3c:	d106      	bne.n	8006c4c <_printf_common+0x48>
 8006c3e:	f104 0a19 	add.w	sl, r4, #25
 8006c42:	68e3      	ldr	r3, [r4, #12]
 8006c44:	6832      	ldr	r2, [r6, #0]
 8006c46:	1a9b      	subs	r3, r3, r2
 8006c48:	42ab      	cmp	r3, r5
 8006c4a:	dc26      	bgt.n	8006c9a <_printf_common+0x96>
 8006c4c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006c50:	1e13      	subs	r3, r2, #0
 8006c52:	6822      	ldr	r2, [r4, #0]
 8006c54:	bf18      	it	ne
 8006c56:	2301      	movne	r3, #1
 8006c58:	0692      	lsls	r2, r2, #26
 8006c5a:	d42b      	bmi.n	8006cb4 <_printf_common+0xb0>
 8006c5c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006c60:	4649      	mov	r1, r9
 8006c62:	4638      	mov	r0, r7
 8006c64:	47c0      	blx	r8
 8006c66:	3001      	adds	r0, #1
 8006c68:	d01e      	beq.n	8006ca8 <_printf_common+0xa4>
 8006c6a:	6823      	ldr	r3, [r4, #0]
 8006c6c:	68e5      	ldr	r5, [r4, #12]
 8006c6e:	6832      	ldr	r2, [r6, #0]
 8006c70:	f003 0306 	and.w	r3, r3, #6
 8006c74:	2b04      	cmp	r3, #4
 8006c76:	bf08      	it	eq
 8006c78:	1aad      	subeq	r5, r5, r2
 8006c7a:	68a3      	ldr	r3, [r4, #8]
 8006c7c:	6922      	ldr	r2, [r4, #16]
 8006c7e:	bf0c      	ite	eq
 8006c80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006c84:	2500      	movne	r5, #0
 8006c86:	4293      	cmp	r3, r2
 8006c88:	bfc4      	itt	gt
 8006c8a:	1a9b      	subgt	r3, r3, r2
 8006c8c:	18ed      	addgt	r5, r5, r3
 8006c8e:	2600      	movs	r6, #0
 8006c90:	341a      	adds	r4, #26
 8006c92:	42b5      	cmp	r5, r6
 8006c94:	d11a      	bne.n	8006ccc <_printf_common+0xc8>
 8006c96:	2000      	movs	r0, #0
 8006c98:	e008      	b.n	8006cac <_printf_common+0xa8>
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	4652      	mov	r2, sl
 8006c9e:	4649      	mov	r1, r9
 8006ca0:	4638      	mov	r0, r7
 8006ca2:	47c0      	blx	r8
 8006ca4:	3001      	adds	r0, #1
 8006ca6:	d103      	bne.n	8006cb0 <_printf_common+0xac>
 8006ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8006cac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cb0:	3501      	adds	r5, #1
 8006cb2:	e7c6      	b.n	8006c42 <_printf_common+0x3e>
 8006cb4:	18e1      	adds	r1, r4, r3
 8006cb6:	1c5a      	adds	r2, r3, #1
 8006cb8:	2030      	movs	r0, #48	; 0x30
 8006cba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006cbe:	4422      	add	r2, r4
 8006cc0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006cc4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006cc8:	3302      	adds	r3, #2
 8006cca:	e7c7      	b.n	8006c5c <_printf_common+0x58>
 8006ccc:	2301      	movs	r3, #1
 8006cce:	4622      	mov	r2, r4
 8006cd0:	4649      	mov	r1, r9
 8006cd2:	4638      	mov	r0, r7
 8006cd4:	47c0      	blx	r8
 8006cd6:	3001      	adds	r0, #1
 8006cd8:	d0e6      	beq.n	8006ca8 <_printf_common+0xa4>
 8006cda:	3601      	adds	r6, #1
 8006cdc:	e7d9      	b.n	8006c92 <_printf_common+0x8e>
	...

08006ce0 <_printf_i>:
 8006ce0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006ce4:	7e0f      	ldrb	r7, [r1, #24]
 8006ce6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006ce8:	2f78      	cmp	r7, #120	; 0x78
 8006cea:	4691      	mov	r9, r2
 8006cec:	4680      	mov	r8, r0
 8006cee:	460c      	mov	r4, r1
 8006cf0:	469a      	mov	sl, r3
 8006cf2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006cf6:	d807      	bhi.n	8006d08 <_printf_i+0x28>
 8006cf8:	2f62      	cmp	r7, #98	; 0x62
 8006cfa:	d80a      	bhi.n	8006d12 <_printf_i+0x32>
 8006cfc:	2f00      	cmp	r7, #0
 8006cfe:	f000 80d8 	beq.w	8006eb2 <_printf_i+0x1d2>
 8006d02:	2f58      	cmp	r7, #88	; 0x58
 8006d04:	f000 80a3 	beq.w	8006e4e <_printf_i+0x16e>
 8006d08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006d0c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006d10:	e03a      	b.n	8006d88 <_printf_i+0xa8>
 8006d12:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006d16:	2b15      	cmp	r3, #21
 8006d18:	d8f6      	bhi.n	8006d08 <_printf_i+0x28>
 8006d1a:	a101      	add	r1, pc, #4	; (adr r1, 8006d20 <_printf_i+0x40>)
 8006d1c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006d20:	08006d79 	.word	0x08006d79
 8006d24:	08006d8d 	.word	0x08006d8d
 8006d28:	08006d09 	.word	0x08006d09
 8006d2c:	08006d09 	.word	0x08006d09
 8006d30:	08006d09 	.word	0x08006d09
 8006d34:	08006d09 	.word	0x08006d09
 8006d38:	08006d8d 	.word	0x08006d8d
 8006d3c:	08006d09 	.word	0x08006d09
 8006d40:	08006d09 	.word	0x08006d09
 8006d44:	08006d09 	.word	0x08006d09
 8006d48:	08006d09 	.word	0x08006d09
 8006d4c:	08006e99 	.word	0x08006e99
 8006d50:	08006dbd 	.word	0x08006dbd
 8006d54:	08006e7b 	.word	0x08006e7b
 8006d58:	08006d09 	.word	0x08006d09
 8006d5c:	08006d09 	.word	0x08006d09
 8006d60:	08006ebb 	.word	0x08006ebb
 8006d64:	08006d09 	.word	0x08006d09
 8006d68:	08006dbd 	.word	0x08006dbd
 8006d6c:	08006d09 	.word	0x08006d09
 8006d70:	08006d09 	.word	0x08006d09
 8006d74:	08006e83 	.word	0x08006e83
 8006d78:	682b      	ldr	r3, [r5, #0]
 8006d7a:	1d1a      	adds	r2, r3, #4
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	602a      	str	r2, [r5, #0]
 8006d80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006d84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006d88:	2301      	movs	r3, #1
 8006d8a:	e0a3      	b.n	8006ed4 <_printf_i+0x1f4>
 8006d8c:	6820      	ldr	r0, [r4, #0]
 8006d8e:	6829      	ldr	r1, [r5, #0]
 8006d90:	0606      	lsls	r6, r0, #24
 8006d92:	f101 0304 	add.w	r3, r1, #4
 8006d96:	d50a      	bpl.n	8006dae <_printf_i+0xce>
 8006d98:	680e      	ldr	r6, [r1, #0]
 8006d9a:	602b      	str	r3, [r5, #0]
 8006d9c:	2e00      	cmp	r6, #0
 8006d9e:	da03      	bge.n	8006da8 <_printf_i+0xc8>
 8006da0:	232d      	movs	r3, #45	; 0x2d
 8006da2:	4276      	negs	r6, r6
 8006da4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006da8:	485e      	ldr	r0, [pc, #376]	; (8006f24 <_printf_i+0x244>)
 8006daa:	230a      	movs	r3, #10
 8006dac:	e019      	b.n	8006de2 <_printf_i+0x102>
 8006dae:	680e      	ldr	r6, [r1, #0]
 8006db0:	602b      	str	r3, [r5, #0]
 8006db2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006db6:	bf18      	it	ne
 8006db8:	b236      	sxthne	r6, r6
 8006dba:	e7ef      	b.n	8006d9c <_printf_i+0xbc>
 8006dbc:	682b      	ldr	r3, [r5, #0]
 8006dbe:	6820      	ldr	r0, [r4, #0]
 8006dc0:	1d19      	adds	r1, r3, #4
 8006dc2:	6029      	str	r1, [r5, #0]
 8006dc4:	0601      	lsls	r1, r0, #24
 8006dc6:	d501      	bpl.n	8006dcc <_printf_i+0xec>
 8006dc8:	681e      	ldr	r6, [r3, #0]
 8006dca:	e002      	b.n	8006dd2 <_printf_i+0xf2>
 8006dcc:	0646      	lsls	r6, r0, #25
 8006dce:	d5fb      	bpl.n	8006dc8 <_printf_i+0xe8>
 8006dd0:	881e      	ldrh	r6, [r3, #0]
 8006dd2:	4854      	ldr	r0, [pc, #336]	; (8006f24 <_printf_i+0x244>)
 8006dd4:	2f6f      	cmp	r7, #111	; 0x6f
 8006dd6:	bf0c      	ite	eq
 8006dd8:	2308      	moveq	r3, #8
 8006dda:	230a      	movne	r3, #10
 8006ddc:	2100      	movs	r1, #0
 8006dde:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006de2:	6865      	ldr	r5, [r4, #4]
 8006de4:	60a5      	str	r5, [r4, #8]
 8006de6:	2d00      	cmp	r5, #0
 8006de8:	bfa2      	ittt	ge
 8006dea:	6821      	ldrge	r1, [r4, #0]
 8006dec:	f021 0104 	bicge.w	r1, r1, #4
 8006df0:	6021      	strge	r1, [r4, #0]
 8006df2:	b90e      	cbnz	r6, 8006df8 <_printf_i+0x118>
 8006df4:	2d00      	cmp	r5, #0
 8006df6:	d04d      	beq.n	8006e94 <_printf_i+0x1b4>
 8006df8:	4615      	mov	r5, r2
 8006dfa:	fbb6 f1f3 	udiv	r1, r6, r3
 8006dfe:	fb03 6711 	mls	r7, r3, r1, r6
 8006e02:	5dc7      	ldrb	r7, [r0, r7]
 8006e04:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006e08:	4637      	mov	r7, r6
 8006e0a:	42bb      	cmp	r3, r7
 8006e0c:	460e      	mov	r6, r1
 8006e0e:	d9f4      	bls.n	8006dfa <_printf_i+0x11a>
 8006e10:	2b08      	cmp	r3, #8
 8006e12:	d10b      	bne.n	8006e2c <_printf_i+0x14c>
 8006e14:	6823      	ldr	r3, [r4, #0]
 8006e16:	07de      	lsls	r6, r3, #31
 8006e18:	d508      	bpl.n	8006e2c <_printf_i+0x14c>
 8006e1a:	6923      	ldr	r3, [r4, #16]
 8006e1c:	6861      	ldr	r1, [r4, #4]
 8006e1e:	4299      	cmp	r1, r3
 8006e20:	bfde      	ittt	le
 8006e22:	2330      	movle	r3, #48	; 0x30
 8006e24:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006e28:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006e2c:	1b52      	subs	r2, r2, r5
 8006e2e:	6122      	str	r2, [r4, #16]
 8006e30:	f8cd a000 	str.w	sl, [sp]
 8006e34:	464b      	mov	r3, r9
 8006e36:	aa03      	add	r2, sp, #12
 8006e38:	4621      	mov	r1, r4
 8006e3a:	4640      	mov	r0, r8
 8006e3c:	f7ff fee2 	bl	8006c04 <_printf_common>
 8006e40:	3001      	adds	r0, #1
 8006e42:	d14c      	bne.n	8006ede <_printf_i+0x1fe>
 8006e44:	f04f 30ff 	mov.w	r0, #4294967295
 8006e48:	b004      	add	sp, #16
 8006e4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e4e:	4835      	ldr	r0, [pc, #212]	; (8006f24 <_printf_i+0x244>)
 8006e50:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006e54:	6829      	ldr	r1, [r5, #0]
 8006e56:	6823      	ldr	r3, [r4, #0]
 8006e58:	f851 6b04 	ldr.w	r6, [r1], #4
 8006e5c:	6029      	str	r1, [r5, #0]
 8006e5e:	061d      	lsls	r5, r3, #24
 8006e60:	d514      	bpl.n	8006e8c <_printf_i+0x1ac>
 8006e62:	07df      	lsls	r7, r3, #31
 8006e64:	bf44      	itt	mi
 8006e66:	f043 0320 	orrmi.w	r3, r3, #32
 8006e6a:	6023      	strmi	r3, [r4, #0]
 8006e6c:	b91e      	cbnz	r6, 8006e76 <_printf_i+0x196>
 8006e6e:	6823      	ldr	r3, [r4, #0]
 8006e70:	f023 0320 	bic.w	r3, r3, #32
 8006e74:	6023      	str	r3, [r4, #0]
 8006e76:	2310      	movs	r3, #16
 8006e78:	e7b0      	b.n	8006ddc <_printf_i+0xfc>
 8006e7a:	6823      	ldr	r3, [r4, #0]
 8006e7c:	f043 0320 	orr.w	r3, r3, #32
 8006e80:	6023      	str	r3, [r4, #0]
 8006e82:	2378      	movs	r3, #120	; 0x78
 8006e84:	4828      	ldr	r0, [pc, #160]	; (8006f28 <_printf_i+0x248>)
 8006e86:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006e8a:	e7e3      	b.n	8006e54 <_printf_i+0x174>
 8006e8c:	0659      	lsls	r1, r3, #25
 8006e8e:	bf48      	it	mi
 8006e90:	b2b6      	uxthmi	r6, r6
 8006e92:	e7e6      	b.n	8006e62 <_printf_i+0x182>
 8006e94:	4615      	mov	r5, r2
 8006e96:	e7bb      	b.n	8006e10 <_printf_i+0x130>
 8006e98:	682b      	ldr	r3, [r5, #0]
 8006e9a:	6826      	ldr	r6, [r4, #0]
 8006e9c:	6961      	ldr	r1, [r4, #20]
 8006e9e:	1d18      	adds	r0, r3, #4
 8006ea0:	6028      	str	r0, [r5, #0]
 8006ea2:	0635      	lsls	r5, r6, #24
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	d501      	bpl.n	8006eac <_printf_i+0x1cc>
 8006ea8:	6019      	str	r1, [r3, #0]
 8006eaa:	e002      	b.n	8006eb2 <_printf_i+0x1d2>
 8006eac:	0670      	lsls	r0, r6, #25
 8006eae:	d5fb      	bpl.n	8006ea8 <_printf_i+0x1c8>
 8006eb0:	8019      	strh	r1, [r3, #0]
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	6123      	str	r3, [r4, #16]
 8006eb6:	4615      	mov	r5, r2
 8006eb8:	e7ba      	b.n	8006e30 <_printf_i+0x150>
 8006eba:	682b      	ldr	r3, [r5, #0]
 8006ebc:	1d1a      	adds	r2, r3, #4
 8006ebe:	602a      	str	r2, [r5, #0]
 8006ec0:	681d      	ldr	r5, [r3, #0]
 8006ec2:	6862      	ldr	r2, [r4, #4]
 8006ec4:	2100      	movs	r1, #0
 8006ec6:	4628      	mov	r0, r5
 8006ec8:	f7f9 f992 	bl	80001f0 <memchr>
 8006ecc:	b108      	cbz	r0, 8006ed2 <_printf_i+0x1f2>
 8006ece:	1b40      	subs	r0, r0, r5
 8006ed0:	6060      	str	r0, [r4, #4]
 8006ed2:	6863      	ldr	r3, [r4, #4]
 8006ed4:	6123      	str	r3, [r4, #16]
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006edc:	e7a8      	b.n	8006e30 <_printf_i+0x150>
 8006ede:	6923      	ldr	r3, [r4, #16]
 8006ee0:	462a      	mov	r2, r5
 8006ee2:	4649      	mov	r1, r9
 8006ee4:	4640      	mov	r0, r8
 8006ee6:	47d0      	blx	sl
 8006ee8:	3001      	adds	r0, #1
 8006eea:	d0ab      	beq.n	8006e44 <_printf_i+0x164>
 8006eec:	6823      	ldr	r3, [r4, #0]
 8006eee:	079b      	lsls	r3, r3, #30
 8006ef0:	d413      	bmi.n	8006f1a <_printf_i+0x23a>
 8006ef2:	68e0      	ldr	r0, [r4, #12]
 8006ef4:	9b03      	ldr	r3, [sp, #12]
 8006ef6:	4298      	cmp	r0, r3
 8006ef8:	bfb8      	it	lt
 8006efa:	4618      	movlt	r0, r3
 8006efc:	e7a4      	b.n	8006e48 <_printf_i+0x168>
 8006efe:	2301      	movs	r3, #1
 8006f00:	4632      	mov	r2, r6
 8006f02:	4649      	mov	r1, r9
 8006f04:	4640      	mov	r0, r8
 8006f06:	47d0      	blx	sl
 8006f08:	3001      	adds	r0, #1
 8006f0a:	d09b      	beq.n	8006e44 <_printf_i+0x164>
 8006f0c:	3501      	adds	r5, #1
 8006f0e:	68e3      	ldr	r3, [r4, #12]
 8006f10:	9903      	ldr	r1, [sp, #12]
 8006f12:	1a5b      	subs	r3, r3, r1
 8006f14:	42ab      	cmp	r3, r5
 8006f16:	dcf2      	bgt.n	8006efe <_printf_i+0x21e>
 8006f18:	e7eb      	b.n	8006ef2 <_printf_i+0x212>
 8006f1a:	2500      	movs	r5, #0
 8006f1c:	f104 0619 	add.w	r6, r4, #25
 8006f20:	e7f5      	b.n	8006f0e <_printf_i+0x22e>
 8006f22:	bf00      	nop
 8006f24:	08007209 	.word	0x08007209
 8006f28:	0800721a 	.word	0x0800721a

08006f2c <_sbrk_r>:
 8006f2c:	b538      	push	{r3, r4, r5, lr}
 8006f2e:	4d06      	ldr	r5, [pc, #24]	; (8006f48 <_sbrk_r+0x1c>)
 8006f30:	2300      	movs	r3, #0
 8006f32:	4604      	mov	r4, r0
 8006f34:	4608      	mov	r0, r1
 8006f36:	602b      	str	r3, [r5, #0]
 8006f38:	f7fa f852 	bl	8000fe0 <_sbrk>
 8006f3c:	1c43      	adds	r3, r0, #1
 8006f3e:	d102      	bne.n	8006f46 <_sbrk_r+0x1a>
 8006f40:	682b      	ldr	r3, [r5, #0]
 8006f42:	b103      	cbz	r3, 8006f46 <_sbrk_r+0x1a>
 8006f44:	6023      	str	r3, [r4, #0]
 8006f46:	bd38      	pop	{r3, r4, r5, pc}
 8006f48:	200001e8 	.word	0x200001e8

08006f4c <__sread>:
 8006f4c:	b510      	push	{r4, lr}
 8006f4e:	460c      	mov	r4, r1
 8006f50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f54:	f000 f8a0 	bl	8007098 <_read_r>
 8006f58:	2800      	cmp	r0, #0
 8006f5a:	bfab      	itete	ge
 8006f5c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006f5e:	89a3      	ldrhlt	r3, [r4, #12]
 8006f60:	181b      	addge	r3, r3, r0
 8006f62:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006f66:	bfac      	ite	ge
 8006f68:	6563      	strge	r3, [r4, #84]	; 0x54
 8006f6a:	81a3      	strhlt	r3, [r4, #12]
 8006f6c:	bd10      	pop	{r4, pc}

08006f6e <__swrite>:
 8006f6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f72:	461f      	mov	r7, r3
 8006f74:	898b      	ldrh	r3, [r1, #12]
 8006f76:	05db      	lsls	r3, r3, #23
 8006f78:	4605      	mov	r5, r0
 8006f7a:	460c      	mov	r4, r1
 8006f7c:	4616      	mov	r6, r2
 8006f7e:	d505      	bpl.n	8006f8c <__swrite+0x1e>
 8006f80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f84:	2302      	movs	r3, #2
 8006f86:	2200      	movs	r2, #0
 8006f88:	f000 f868 	bl	800705c <_lseek_r>
 8006f8c:	89a3      	ldrh	r3, [r4, #12]
 8006f8e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f92:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006f96:	81a3      	strh	r3, [r4, #12]
 8006f98:	4632      	mov	r2, r6
 8006f9a:	463b      	mov	r3, r7
 8006f9c:	4628      	mov	r0, r5
 8006f9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006fa2:	f000 b817 	b.w	8006fd4 <_write_r>

08006fa6 <__sseek>:
 8006fa6:	b510      	push	{r4, lr}
 8006fa8:	460c      	mov	r4, r1
 8006faa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fae:	f000 f855 	bl	800705c <_lseek_r>
 8006fb2:	1c43      	adds	r3, r0, #1
 8006fb4:	89a3      	ldrh	r3, [r4, #12]
 8006fb6:	bf15      	itete	ne
 8006fb8:	6560      	strne	r0, [r4, #84]	; 0x54
 8006fba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006fbe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006fc2:	81a3      	strheq	r3, [r4, #12]
 8006fc4:	bf18      	it	ne
 8006fc6:	81a3      	strhne	r3, [r4, #12]
 8006fc8:	bd10      	pop	{r4, pc}

08006fca <__sclose>:
 8006fca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fce:	f000 b813 	b.w	8006ff8 <_close_r>
	...

08006fd4 <_write_r>:
 8006fd4:	b538      	push	{r3, r4, r5, lr}
 8006fd6:	4d07      	ldr	r5, [pc, #28]	; (8006ff4 <_write_r+0x20>)
 8006fd8:	4604      	mov	r4, r0
 8006fda:	4608      	mov	r0, r1
 8006fdc:	4611      	mov	r1, r2
 8006fde:	2200      	movs	r2, #0
 8006fe0:	602a      	str	r2, [r5, #0]
 8006fe2:	461a      	mov	r2, r3
 8006fe4:	f7f9 fe64 	bl	8000cb0 <_write>
 8006fe8:	1c43      	adds	r3, r0, #1
 8006fea:	d102      	bne.n	8006ff2 <_write_r+0x1e>
 8006fec:	682b      	ldr	r3, [r5, #0]
 8006fee:	b103      	cbz	r3, 8006ff2 <_write_r+0x1e>
 8006ff0:	6023      	str	r3, [r4, #0]
 8006ff2:	bd38      	pop	{r3, r4, r5, pc}
 8006ff4:	200001e8 	.word	0x200001e8

08006ff8 <_close_r>:
 8006ff8:	b538      	push	{r3, r4, r5, lr}
 8006ffa:	4d06      	ldr	r5, [pc, #24]	; (8007014 <_close_r+0x1c>)
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	4604      	mov	r4, r0
 8007000:	4608      	mov	r0, r1
 8007002:	602b      	str	r3, [r5, #0]
 8007004:	f7f9 ffb7 	bl	8000f76 <_close>
 8007008:	1c43      	adds	r3, r0, #1
 800700a:	d102      	bne.n	8007012 <_close_r+0x1a>
 800700c:	682b      	ldr	r3, [r5, #0]
 800700e:	b103      	cbz	r3, 8007012 <_close_r+0x1a>
 8007010:	6023      	str	r3, [r4, #0]
 8007012:	bd38      	pop	{r3, r4, r5, pc}
 8007014:	200001e8 	.word	0x200001e8

08007018 <_fstat_r>:
 8007018:	b538      	push	{r3, r4, r5, lr}
 800701a:	4d07      	ldr	r5, [pc, #28]	; (8007038 <_fstat_r+0x20>)
 800701c:	2300      	movs	r3, #0
 800701e:	4604      	mov	r4, r0
 8007020:	4608      	mov	r0, r1
 8007022:	4611      	mov	r1, r2
 8007024:	602b      	str	r3, [r5, #0]
 8007026:	f7f9 ffb2 	bl	8000f8e <_fstat>
 800702a:	1c43      	adds	r3, r0, #1
 800702c:	d102      	bne.n	8007034 <_fstat_r+0x1c>
 800702e:	682b      	ldr	r3, [r5, #0]
 8007030:	b103      	cbz	r3, 8007034 <_fstat_r+0x1c>
 8007032:	6023      	str	r3, [r4, #0]
 8007034:	bd38      	pop	{r3, r4, r5, pc}
 8007036:	bf00      	nop
 8007038:	200001e8 	.word	0x200001e8

0800703c <_isatty_r>:
 800703c:	b538      	push	{r3, r4, r5, lr}
 800703e:	4d06      	ldr	r5, [pc, #24]	; (8007058 <_isatty_r+0x1c>)
 8007040:	2300      	movs	r3, #0
 8007042:	4604      	mov	r4, r0
 8007044:	4608      	mov	r0, r1
 8007046:	602b      	str	r3, [r5, #0]
 8007048:	f7f9 ffb1 	bl	8000fae <_isatty>
 800704c:	1c43      	adds	r3, r0, #1
 800704e:	d102      	bne.n	8007056 <_isatty_r+0x1a>
 8007050:	682b      	ldr	r3, [r5, #0]
 8007052:	b103      	cbz	r3, 8007056 <_isatty_r+0x1a>
 8007054:	6023      	str	r3, [r4, #0]
 8007056:	bd38      	pop	{r3, r4, r5, pc}
 8007058:	200001e8 	.word	0x200001e8

0800705c <_lseek_r>:
 800705c:	b538      	push	{r3, r4, r5, lr}
 800705e:	4d07      	ldr	r5, [pc, #28]	; (800707c <_lseek_r+0x20>)
 8007060:	4604      	mov	r4, r0
 8007062:	4608      	mov	r0, r1
 8007064:	4611      	mov	r1, r2
 8007066:	2200      	movs	r2, #0
 8007068:	602a      	str	r2, [r5, #0]
 800706a:	461a      	mov	r2, r3
 800706c:	f7f9 ffaa 	bl	8000fc4 <_lseek>
 8007070:	1c43      	adds	r3, r0, #1
 8007072:	d102      	bne.n	800707a <_lseek_r+0x1e>
 8007074:	682b      	ldr	r3, [r5, #0]
 8007076:	b103      	cbz	r3, 800707a <_lseek_r+0x1e>
 8007078:	6023      	str	r3, [r4, #0]
 800707a:	bd38      	pop	{r3, r4, r5, pc}
 800707c:	200001e8 	.word	0x200001e8

08007080 <__malloc_lock>:
 8007080:	4801      	ldr	r0, [pc, #4]	; (8007088 <__malloc_lock+0x8>)
 8007082:	f7ff bb1d 	b.w	80066c0 <__retarget_lock_acquire_recursive>
 8007086:	bf00      	nop
 8007088:	200001dc 	.word	0x200001dc

0800708c <__malloc_unlock>:
 800708c:	4801      	ldr	r0, [pc, #4]	; (8007094 <__malloc_unlock+0x8>)
 800708e:	f7ff bb18 	b.w	80066c2 <__retarget_lock_release_recursive>
 8007092:	bf00      	nop
 8007094:	200001dc 	.word	0x200001dc

08007098 <_read_r>:
 8007098:	b538      	push	{r3, r4, r5, lr}
 800709a:	4d07      	ldr	r5, [pc, #28]	; (80070b8 <_read_r+0x20>)
 800709c:	4604      	mov	r4, r0
 800709e:	4608      	mov	r0, r1
 80070a0:	4611      	mov	r1, r2
 80070a2:	2200      	movs	r2, #0
 80070a4:	602a      	str	r2, [r5, #0]
 80070a6:	461a      	mov	r2, r3
 80070a8:	f7f9 ff48 	bl	8000f3c <_read>
 80070ac:	1c43      	adds	r3, r0, #1
 80070ae:	d102      	bne.n	80070b6 <_read_r+0x1e>
 80070b0:	682b      	ldr	r3, [r5, #0]
 80070b2:	b103      	cbz	r3, 80070b6 <_read_r+0x1e>
 80070b4:	6023      	str	r3, [r4, #0]
 80070b6:	bd38      	pop	{r3, r4, r5, pc}
 80070b8:	200001e8 	.word	0x200001e8

080070bc <_init>:
 80070bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070be:	bf00      	nop
 80070c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070c2:	bc08      	pop	{r3}
 80070c4:	469e      	mov	lr, r3
 80070c6:	4770      	bx	lr

080070c8 <_fini>:
 80070c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070ca:	bf00      	nop
 80070cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070ce:	bc08      	pop	{r3}
 80070d0:	469e      	mov	lr, r3
 80070d2:	4770      	bx	lr
