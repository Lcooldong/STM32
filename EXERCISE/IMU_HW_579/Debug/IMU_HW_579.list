
IMU_HW_579.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b52c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000584  0800b6e0  0800b6e0  0001b6e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bc64  0800bc64  0002024c  2**0
                  CONTENTS
  4 .ARM          00000008  0800bc64  0800bc64  0001bc64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bc6c  0800bc6c  0002024c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bc6c  0800bc6c  0001bc6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bc70  0800bc70  0001bc70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000024c  20000000  0800bc74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002024c  2**0
                  CONTENTS
 10 .bss          0000029c  20000250  20000250  00020250  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  200004ec  200004ec  00020250  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002024c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000109b8  00000000  00000000  0002027c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ab2  00000000  00000000  00030c34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ca8  00000000  00000000  000336e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000b88  00000000  00000000  00034390  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025a91  00000000  00000000  00034f18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011dfd  00000000  00000000  0005a9a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d6b7c  00000000  00000000  0006c7a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00143322  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004814  00000000  00000000  00143374  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000250 	.word	0x20000250
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800b6c4 	.word	0x0800b6c4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000254 	.word	0x20000254
 80001ec:	0800b6c4 	.word	0x0800b6c4

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9aa 	b.w	8001014 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468e      	mov	lr, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d14d      	bne.n	8000dee <__udivmoddi4+0xaa>
 8000d52:	428a      	cmp	r2, r1
 8000d54:	4694      	mov	ip, r2
 8000d56:	d969      	bls.n	8000e2c <__udivmoddi4+0xe8>
 8000d58:	fab2 f282 	clz	r2, r2
 8000d5c:	b152      	cbz	r2, 8000d74 <__udivmoddi4+0x30>
 8000d5e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d62:	f1c2 0120 	rsb	r1, r2, #32
 8000d66:	fa20 f101 	lsr.w	r1, r0, r1
 8000d6a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d72:	4094      	lsls	r4, r2
 8000d74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d78:	0c21      	lsrs	r1, r4, #16
 8000d7a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d7e:	fa1f f78c 	uxth.w	r7, ip
 8000d82:	fb08 e316 	mls	r3, r8, r6, lr
 8000d86:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d8a:	fb06 f107 	mul.w	r1, r6, r7
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	d90a      	bls.n	8000da8 <__udivmoddi4+0x64>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d9a:	f080 811f 	bcs.w	8000fdc <__udivmoddi4+0x298>
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	f240 811c 	bls.w	8000fdc <__udivmoddi4+0x298>
 8000da4:	3e02      	subs	r6, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1a5b      	subs	r3, r3, r1
 8000daa:	b2a4      	uxth	r4, r4
 8000dac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000db0:	fb08 3310 	mls	r3, r8, r0, r3
 8000db4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db8:	fb00 f707 	mul.w	r7, r0, r7
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	d90a      	bls.n	8000dd6 <__udivmoddi4+0x92>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc8:	f080 810a 	bcs.w	8000fe0 <__udivmoddi4+0x29c>
 8000dcc:	42a7      	cmp	r7, r4
 8000dce:	f240 8107 	bls.w	8000fe0 <__udivmoddi4+0x29c>
 8000dd2:	4464      	add	r4, ip
 8000dd4:	3802      	subs	r0, #2
 8000dd6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dda:	1be4      	subs	r4, r4, r7
 8000ddc:	2600      	movs	r6, #0
 8000dde:	b11d      	cbz	r5, 8000de8 <__udivmoddi4+0xa4>
 8000de0:	40d4      	lsrs	r4, r2
 8000de2:	2300      	movs	r3, #0
 8000de4:	e9c5 4300 	strd	r4, r3, [r5]
 8000de8:	4631      	mov	r1, r6
 8000dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d909      	bls.n	8000e06 <__udivmoddi4+0xc2>
 8000df2:	2d00      	cmp	r5, #0
 8000df4:	f000 80ef 	beq.w	8000fd6 <__udivmoddi4+0x292>
 8000df8:	2600      	movs	r6, #0
 8000dfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dfe:	4630      	mov	r0, r6
 8000e00:	4631      	mov	r1, r6
 8000e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e06:	fab3 f683 	clz	r6, r3
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	d14a      	bne.n	8000ea4 <__udivmoddi4+0x160>
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d302      	bcc.n	8000e18 <__udivmoddi4+0xd4>
 8000e12:	4282      	cmp	r2, r0
 8000e14:	f200 80f9 	bhi.w	800100a <__udivmoddi4+0x2c6>
 8000e18:	1a84      	subs	r4, r0, r2
 8000e1a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e1e:	2001      	movs	r0, #1
 8000e20:	469e      	mov	lr, r3
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	d0e0      	beq.n	8000de8 <__udivmoddi4+0xa4>
 8000e26:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e2a:	e7dd      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000e2c:	b902      	cbnz	r2, 8000e30 <__udivmoddi4+0xec>
 8000e2e:	deff      	udf	#255	; 0xff
 8000e30:	fab2 f282 	clz	r2, r2
 8000e34:	2a00      	cmp	r2, #0
 8000e36:	f040 8092 	bne.w	8000f5e <__udivmoddi4+0x21a>
 8000e3a:	eba1 010c 	sub.w	r1, r1, ip
 8000e3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e42:	fa1f fe8c 	uxth.w	lr, ip
 8000e46:	2601      	movs	r6, #1
 8000e48:	0c20      	lsrs	r0, r4, #16
 8000e4a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e4e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e52:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e56:	fb0e f003 	mul.w	r0, lr, r3
 8000e5a:	4288      	cmp	r0, r1
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x12c>
 8000e5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e62:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x12a>
 8000e68:	4288      	cmp	r0, r1
 8000e6a:	f200 80cb 	bhi.w	8001004 <__udivmoddi4+0x2c0>
 8000e6e:	4643      	mov	r3, r8
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e78:	fb07 1110 	mls	r1, r7, r0, r1
 8000e7c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e80:	fb0e fe00 	mul.w	lr, lr, r0
 8000e84:	45a6      	cmp	lr, r4
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x156>
 8000e88:	eb1c 0404 	adds.w	r4, ip, r4
 8000e8c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e90:	d202      	bcs.n	8000e98 <__udivmoddi4+0x154>
 8000e92:	45a6      	cmp	lr, r4
 8000e94:	f200 80bb 	bhi.w	800100e <__udivmoddi4+0x2ca>
 8000e98:	4608      	mov	r0, r1
 8000e9a:	eba4 040e 	sub.w	r4, r4, lr
 8000e9e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ea2:	e79c      	b.n	8000dde <__udivmoddi4+0x9a>
 8000ea4:	f1c6 0720 	rsb	r7, r6, #32
 8000ea8:	40b3      	lsls	r3, r6
 8000eaa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eae:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eb2:	fa20 f407 	lsr.w	r4, r0, r7
 8000eb6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eba:	431c      	orrs	r4, r3
 8000ebc:	40f9      	lsrs	r1, r7
 8000ebe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ec2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ec6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eca:	0c20      	lsrs	r0, r4, #16
 8000ecc:	fa1f fe8c 	uxth.w	lr, ip
 8000ed0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ed4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ed8:	fb08 f00e 	mul.w	r0, r8, lr
 8000edc:	4288      	cmp	r0, r1
 8000ede:	fa02 f206 	lsl.w	r2, r2, r6
 8000ee2:	d90b      	bls.n	8000efc <__udivmoddi4+0x1b8>
 8000ee4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000eec:	f080 8088 	bcs.w	8001000 <__udivmoddi4+0x2bc>
 8000ef0:	4288      	cmp	r0, r1
 8000ef2:	f240 8085 	bls.w	8001000 <__udivmoddi4+0x2bc>
 8000ef6:	f1a8 0802 	sub.w	r8, r8, #2
 8000efa:	4461      	add	r1, ip
 8000efc:	1a09      	subs	r1, r1, r0
 8000efe:	b2a4      	uxth	r4, r4
 8000f00:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f04:	fb09 1110 	mls	r1, r9, r0, r1
 8000f08:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f10:	458e      	cmp	lr, r1
 8000f12:	d908      	bls.n	8000f26 <__udivmoddi4+0x1e2>
 8000f14:	eb1c 0101 	adds.w	r1, ip, r1
 8000f18:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f1c:	d26c      	bcs.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f1e:	458e      	cmp	lr, r1
 8000f20:	d96a      	bls.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f22:	3802      	subs	r0, #2
 8000f24:	4461      	add	r1, ip
 8000f26:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f2a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f2e:	eba1 010e 	sub.w	r1, r1, lr
 8000f32:	42a1      	cmp	r1, r4
 8000f34:	46c8      	mov	r8, r9
 8000f36:	46a6      	mov	lr, r4
 8000f38:	d356      	bcc.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f3a:	d053      	beq.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f3c:	b15d      	cbz	r5, 8000f56 <__udivmoddi4+0x212>
 8000f3e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f42:	eb61 010e 	sbc.w	r1, r1, lr
 8000f46:	fa01 f707 	lsl.w	r7, r1, r7
 8000f4a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f4e:	40f1      	lsrs	r1, r6
 8000f50:	431f      	orrs	r7, r3
 8000f52:	e9c5 7100 	strd	r7, r1, [r5]
 8000f56:	2600      	movs	r6, #0
 8000f58:	4631      	mov	r1, r6
 8000f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f5e:	f1c2 0320 	rsb	r3, r2, #32
 8000f62:	40d8      	lsrs	r0, r3
 8000f64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f68:	fa21 f303 	lsr.w	r3, r1, r3
 8000f6c:	4091      	lsls	r1, r2
 8000f6e:	4301      	orrs	r1, r0
 8000f70:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f74:	fa1f fe8c 	uxth.w	lr, ip
 8000f78:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f7c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f80:	0c0b      	lsrs	r3, r1, #16
 8000f82:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f86:	fb00 f60e 	mul.w	r6, r0, lr
 8000f8a:	429e      	cmp	r6, r3
 8000f8c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f90:	d908      	bls.n	8000fa4 <__udivmoddi4+0x260>
 8000f92:	eb1c 0303 	adds.w	r3, ip, r3
 8000f96:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f9a:	d22f      	bcs.n	8000ffc <__udivmoddi4+0x2b8>
 8000f9c:	429e      	cmp	r6, r3
 8000f9e:	d92d      	bls.n	8000ffc <__udivmoddi4+0x2b8>
 8000fa0:	3802      	subs	r0, #2
 8000fa2:	4463      	add	r3, ip
 8000fa4:	1b9b      	subs	r3, r3, r6
 8000fa6:	b289      	uxth	r1, r1
 8000fa8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fac:	fb07 3316 	mls	r3, r7, r6, r3
 8000fb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fb4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fb8:	428b      	cmp	r3, r1
 8000fba:	d908      	bls.n	8000fce <__udivmoddi4+0x28a>
 8000fbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fc0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fc4:	d216      	bcs.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fc6:	428b      	cmp	r3, r1
 8000fc8:	d914      	bls.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fca:	3e02      	subs	r6, #2
 8000fcc:	4461      	add	r1, ip
 8000fce:	1ac9      	subs	r1, r1, r3
 8000fd0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fd4:	e738      	b.n	8000e48 <__udivmoddi4+0x104>
 8000fd6:	462e      	mov	r6, r5
 8000fd8:	4628      	mov	r0, r5
 8000fda:	e705      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000fdc:	4606      	mov	r6, r0
 8000fde:	e6e3      	b.n	8000da8 <__udivmoddi4+0x64>
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	e6f8      	b.n	8000dd6 <__udivmoddi4+0x92>
 8000fe4:	454b      	cmp	r3, r9
 8000fe6:	d2a9      	bcs.n	8000f3c <__udivmoddi4+0x1f8>
 8000fe8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fec:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ff0:	3801      	subs	r0, #1
 8000ff2:	e7a3      	b.n	8000f3c <__udivmoddi4+0x1f8>
 8000ff4:	4646      	mov	r6, r8
 8000ff6:	e7ea      	b.n	8000fce <__udivmoddi4+0x28a>
 8000ff8:	4620      	mov	r0, r4
 8000ffa:	e794      	b.n	8000f26 <__udivmoddi4+0x1e2>
 8000ffc:	4640      	mov	r0, r8
 8000ffe:	e7d1      	b.n	8000fa4 <__udivmoddi4+0x260>
 8001000:	46d0      	mov	r8, sl
 8001002:	e77b      	b.n	8000efc <__udivmoddi4+0x1b8>
 8001004:	3b02      	subs	r3, #2
 8001006:	4461      	add	r1, ip
 8001008:	e732      	b.n	8000e70 <__udivmoddi4+0x12c>
 800100a:	4630      	mov	r0, r6
 800100c:	e709      	b.n	8000e22 <__udivmoddi4+0xde>
 800100e:	4464      	add	r4, ip
 8001010:	3802      	subs	r0, #2
 8001012:	e742      	b.n	8000e9a <__udivmoddi4+0x156>

08001014 <__aeabi_idiv0>:
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop

08001018 <Accel_init>:
uint8_t accel_buf[6] ;
ADXL345 ACCEL;
extern HW579 hw579;

void Accel_init(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
	//printf("0x%X\r\n", ACCEL.accel_address);

	I2C_Writebyte(&ACCEL, ADXL345_POWER_CTL, 0, accel);
 800101c:	2301      	movs	r3, #1
 800101e:	2200      	movs	r2, #0
 8001020:	212d      	movs	r1, #45	; 0x2d
 8001022:	4808      	ldr	r0, [pc, #32]	; (8001044 <Accel_init+0x2c>)
 8001024:	f000 f8a8 	bl	8001178 <I2C_Writebyte>
	I2C_Writebyte(&ACCEL, ADXL345_POWER_CTL, 16, accel);
 8001028:	2301      	movs	r3, #1
 800102a:	2210      	movs	r2, #16
 800102c:	212d      	movs	r1, #45	; 0x2d
 800102e:	4805      	ldr	r0, [pc, #20]	; (8001044 <Accel_init+0x2c>)
 8001030:	f000 f8a2 	bl	8001178 <I2C_Writebyte>
	I2C_Writebyte(&ACCEL, ADXL345_POWER_CTL, 8, accel);
 8001034:	2301      	movs	r3, #1
 8001036:	2208      	movs	r2, #8
 8001038:	212d      	movs	r1, #45	; 0x2d
 800103a:	4802      	ldr	r0, [pc, #8]	; (8001044 <Accel_init+0x2c>)
 800103c:	f000 f89c 	bl	8001178 <I2C_Writebyte>

}
 8001040:	bf00      	nop
 8001042:	bd80      	pop	{r7, pc}
 8001044:	20000270 	.word	0x20000270

08001048 <Magneto_init>:

HMC5883L MAGNETO = {.m_Scale = 1};


void Magneto_init()
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
	//printf("0x%X\r\n", MAGNETO.magneto_address);
}
 800104c:	bf00      	nop
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
	...

08001058 <getI2C_Address>:


SENSOR_ENUM sensor_enum;

uint8_t* getI2C_Address(I2C_HandleTypeDef *hi2c)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef state;
	uint8_t slave_address;
	uint8_t numSensors = 0;
 8001060:	2300      	movs	r3, #0
 8001062:	73bb      	strb	r3, [r7, #14]
	static uint8_t sensors[3] = {0, };

	hw579.MAGNETO_HW579 = &MAGNETO;
 8001064:	4b3b      	ldr	r3, [pc, #236]	; (8001154 <getI2C_Address+0xfc>)
 8001066:	4a3c      	ldr	r2, [pc, #240]	; (8001158 <getI2C_Address+0x100>)
 8001068:	655a      	str	r2, [r3, #84]	; 0x54
	hw579.ACCEL_HW579 = &ACCEL;
 800106a:	4b3a      	ldr	r3, [pc, #232]	; (8001154 <getI2C_Address+0xfc>)
 800106c:	4a3b      	ldr	r2, [pc, #236]	; (800115c <getI2C_Address+0x104>)
 800106e:	659a      	str	r2, [r3, #88]	; 0x58
	hw579.GYRO_HW579 = &GYRO;
 8001070:	4b38      	ldr	r3, [pc, #224]	; (8001154 <getI2C_Address+0xfc>)
 8001072:	4a3b      	ldr	r2, [pc, #236]	; (8001160 <getI2C_Address+0x108>)
 8001074:	65da      	str	r2, [r3, #92]	; 0x5c


	for(slave_address = 1; slave_address < 128; slave_address++)
 8001076:	2301      	movs	r3, #1
 8001078:	73fb      	strb	r3, [r7, #15]
 800107a:	e01f      	b.n	80010bc <getI2C_Address+0x64>
	{
		state = HAL_I2C_IsDeviceReady(hi2c, (uint16_t)(slave_address << 1), 3, 10);
 800107c:	7bfb      	ldrb	r3, [r7, #15]
 800107e:	b29b      	uxth	r3, r3
 8001080:	005b      	lsls	r3, r3, #1
 8001082:	b299      	uxth	r1, r3
 8001084:	230a      	movs	r3, #10
 8001086:	2203      	movs	r2, #3
 8001088:	6878      	ldr	r0, [r7, #4]
 800108a:	f001 ff17 	bl	8002ebc <HAL_I2C_IsDeviceReady>
 800108e:	4603      	mov	r3, r0
 8001090:	737b      	strb	r3, [r7, #13]
	    if (state == HAL_OK)
 8001092:	7b7b      	ldrb	r3, [r7, #13]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d107      	bne.n	80010a8 <getI2C_Address+0x50>
		{
		  sensors[numSensors] = slave_address;
 8001098:	7bbb      	ldrb	r3, [r7, #14]
 800109a:	4932      	ldr	r1, [pc, #200]	; (8001164 <getI2C_Address+0x10c>)
 800109c:	7bfa      	ldrb	r2, [r7, #15]
 800109e:	54ca      	strb	r2, [r1, r3]
		  numSensors++;
 80010a0:	7bbb      	ldrb	r3, [r7, #14]
 80010a2:	3301      	adds	r3, #1
 80010a4:	73bb      	strb	r3, [r7, #14]
 80010a6:	e006      	b.n	80010b6 <getI2C_Address+0x5e>
		  printf("Address : 0x%X\r\n", slave_address);	// !HAL_OK = 1
#endif
	    }
	    else
	    {
		  while(HAL_I2C_GetState(hi2c) != HAL_I2C_STATE_READY);
 80010a8:	bf00      	nop
 80010aa:	6878      	ldr	r0, [r7, #4]
 80010ac:	f002 fab4 	bl	8003618 <HAL_I2C_GetState>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b20      	cmp	r3, #32
 80010b4:	d1f9      	bne.n	80010aa <getI2C_Address+0x52>
	for(slave_address = 1; slave_address < 128; slave_address++)
 80010b6:	7bfb      	ldrb	r3, [r7, #15]
 80010b8:	3301      	adds	r3, #1
 80010ba:	73fb      	strb	r3, [r7, #15]
 80010bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	dadb      	bge.n	800107c <getI2C_Address+0x24>
	    }
	}


	hw579.MAGNETO_HW579->magneto_address   = sensors[0] << 1;
 80010c4:	4b27      	ldr	r3, [pc, #156]	; (8001164 <getI2C_Address+0x10c>)
 80010c6:	781a      	ldrb	r2, [r3, #0]
 80010c8:	4b22      	ldr	r3, [pc, #136]	; (8001154 <getI2C_Address+0xfc>)
 80010ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010cc:	0052      	lsls	r2, r2, #1
 80010ce:	b2d2      	uxtb	r2, r2
 80010d0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	hw579.ACCEL_HW579->accel_address	   = sensors[1] << 1;
 80010d4:	4b23      	ldr	r3, [pc, #140]	; (8001164 <getI2C_Address+0x10c>)
 80010d6:	785a      	ldrb	r2, [r3, #1]
 80010d8:	4b1e      	ldr	r3, [pc, #120]	; (8001154 <getI2C_Address+0xfc>)
 80010da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010dc:	0052      	lsls	r2, r2, #1
 80010de:	b2d2      	uxtb	r2, r2
 80010e0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	hw579.GYRO_HW579->gyro_address   	   = sensors[2] << 1;
 80010e4:	4b1f      	ldr	r3, [pc, #124]	; (8001164 <getI2C_Address+0x10c>)
 80010e6:	789a      	ldrb	r2, [r3, #2]
 80010e8:	4b1a      	ldr	r3, [pc, #104]	; (8001154 <getI2C_Address+0xfc>)
 80010ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010ec:	0052      	lsls	r2, r2, #1
 80010ee:	b2d2      	uxtb	r2, r2
 80010f0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54


	printf("enum : %d %d %d\r\n", magneto, accel ,gyro);
 80010f4:	2302      	movs	r3, #2
 80010f6:	2201      	movs	r2, #1
 80010f8:	2100      	movs	r1, #0
 80010fa:	481b      	ldr	r0, [pc, #108]	; (8001168 <getI2C_Address+0x110>)
 80010fc:	f006 fc6e 	bl	80079dc <iprintf>
	printf("MAGNETO : 0x%X  = 0x%X\r\n", hw579.MAGNETO_HW579->magneto_address, sensors[0]<< 1);
 8001100:	4b14      	ldr	r3, [pc, #80]	; (8001154 <getI2C_Address+0xfc>)
 8001102:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001104:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001108:	4619      	mov	r1, r3
 800110a:	4b16      	ldr	r3, [pc, #88]	; (8001164 <getI2C_Address+0x10c>)
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	005b      	lsls	r3, r3, #1
 8001110:	461a      	mov	r2, r3
 8001112:	4816      	ldr	r0, [pc, #88]	; (800116c <getI2C_Address+0x114>)
 8001114:	f006 fc62 	bl	80079dc <iprintf>
	printf("ACCEL   : 0x%X  = 0x%X\r\n", hw579.ACCEL_HW579->accel_address, sensors[1]<< 1);
 8001118:	4b0e      	ldr	r3, [pc, #56]	; (8001154 <getI2C_Address+0xfc>)
 800111a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800111c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001120:	4619      	mov	r1, r3
 8001122:	4b10      	ldr	r3, [pc, #64]	; (8001164 <getI2C_Address+0x10c>)
 8001124:	785b      	ldrb	r3, [r3, #1]
 8001126:	005b      	lsls	r3, r3, #1
 8001128:	461a      	mov	r2, r3
 800112a:	4811      	ldr	r0, [pc, #68]	; (8001170 <getI2C_Address+0x118>)
 800112c:	f006 fc56 	bl	80079dc <iprintf>
	printf("GYRO    : 0x%X  = 0x%X\r\n", hw579.GYRO_HW579->gyro_address, sensors[2]<< 1);
 8001130:	4b08      	ldr	r3, [pc, #32]	; (8001154 <getI2C_Address+0xfc>)
 8001132:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001134:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001138:	4619      	mov	r1, r3
 800113a:	4b0a      	ldr	r3, [pc, #40]	; (8001164 <getI2C_Address+0x10c>)
 800113c:	789b      	ldrb	r3, [r3, #2]
 800113e:	005b      	lsls	r3, r3, #1
 8001140:	461a      	mov	r2, r3
 8001142:	480c      	ldr	r0, [pc, #48]	; (8001174 <getI2C_Address+0x11c>)
 8001144:	f006 fc4a 	bl	80079dc <iprintf>
	printf("MAGNETO : 0x%X\r\n", sensors[0] << 1);
	printf("ACCEL   : 0x%X\r\n", sensors[1] << 1);
	printf("GYRO    : 0x%X\r\n", sensors[2] << 1);
#endif

	return sensors;
 8001148:	4b06      	ldr	r3, [pc, #24]	; (8001164 <getI2C_Address+0x10c>)
}
 800114a:	4618      	mov	r0, r3
 800114c:	3710      	adds	r7, #16
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	20000300 	.word	0x20000300
 8001158:	20000000 	.word	0x20000000
 800115c:	20000270 	.word	0x20000270
 8001160:	20000368 	.word	0x20000368
 8001164:	20000364 	.word	0x20000364
 8001168:	0800b6e0 	.word	0x0800b6e0
 800116c:	0800b6f4 	.word	0x0800b6f4
 8001170:	0800b710 	.word	0x0800b710
 8001174:	0800b72c 	.word	0x0800b72c

08001178 <I2C_Writebyte>:

void I2C_Writebyte(void * SENSOR, uint8_t register_address, uint8_t data, uint8_t TYPE)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b086      	sub	sp, #24
 800117c:	af02      	add	r7, sp, #8
 800117e:	6078      	str	r0, [r7, #4]
 8001180:	4608      	mov	r0, r1
 8001182:	4611      	mov	r1, r2
 8001184:	461a      	mov	r2, r3
 8001186:	4603      	mov	r3, r0
 8001188:	70fb      	strb	r3, [r7, #3]
 800118a:	460b      	mov	r3, r1
 800118c:	70bb      	strb	r3, [r7, #2]
 800118e:	4613      	mov	r3, r2
 8001190:	707b      	strb	r3, [r7, #1]
	uint8_t Trans[2] = {register_address, data};
 8001192:	78fb      	ldrb	r3, [r7, #3]
 8001194:	733b      	strb	r3, [r7, #12]
 8001196:	78bb      	ldrb	r3, [r7, #2]
 8001198:	737b      	strb	r3, [r7, #13]

	switch(TYPE)
 800119a:	787b      	ldrb	r3, [r7, #1]
 800119c:	2b02      	cmp	r3, #2
 800119e:	d021      	beq.n	80011e4 <I2C_Writebyte+0x6c>
 80011a0:	2b02      	cmp	r3, #2
 80011a2:	dc2c      	bgt.n	80011fe <I2C_Writebyte+0x86>
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d002      	beq.n	80011ae <I2C_Writebyte+0x36>
 80011a8:	2b01      	cmp	r3, #1
 80011aa:	d00d      	beq.n	80011c8 <I2C_Writebyte+0x50>
 80011ac:	e027      	b.n	80011fe <I2C_Writebyte+0x86>
	{
		case magneto:
			HAL_I2C_Master_Transmit(&(((HMC5883L *)SENSOR)->i2c), ((HMC5883L *)SENSOR)->magneto_address, Trans, 2, 10);
 80011ae:	6878      	ldr	r0, [r7, #4]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80011b6:	b299      	uxth	r1, r3
 80011b8:	f107 020c 	add.w	r2, r7, #12
 80011bc:	230a      	movs	r3, #10
 80011be:	9300      	str	r3, [sp, #0]
 80011c0:	2302      	movs	r3, #2
 80011c2:	f001 fb57 	bl	8002874 <HAL_I2C_Master_Transmit>
			break;
 80011c6:	e01e      	b.n	8001206 <I2C_Writebyte+0x8e>

		case accel:
			HAL_I2C_Master_Transmit(&(((ADXL345 *)SENSOR)->i2c), hw579.ACCEL_HW579->accel_address, Trans, 2, 10);
 80011c8:	6878      	ldr	r0, [r7, #4]
 80011ca:	4b11      	ldr	r3, [pc, #68]	; (8001210 <I2C_Writebyte+0x98>)
 80011cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ce:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80011d2:	b299      	uxth	r1, r3
 80011d4:	f107 020c 	add.w	r2, r7, #12
 80011d8:	230a      	movs	r3, #10
 80011da:	9300      	str	r3, [sp, #0]
 80011dc:	2302      	movs	r3, #2
 80011de:	f001 fb49 	bl	8002874 <HAL_I2C_Master_Transmit>
			break;
 80011e2:	e010      	b.n	8001206 <I2C_Writebyte+0x8e>

		case gyro:
			HAL_I2C_Master_Transmit(&(((ITG3205 *)SENSOR)->i2c), ((ITG3205 *)SENSOR)->gyro_address, Trans, 2, 10);
 80011e4:	6878      	ldr	r0, [r7, #4]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80011ec:	b299      	uxth	r1, r3
 80011ee:	f107 020c 	add.w	r2, r7, #12
 80011f2:	230a      	movs	r3, #10
 80011f4:	9300      	str	r3, [sp, #0]
 80011f6:	2302      	movs	r3, #2
 80011f8:	f001 fb3c 	bl	8002874 <HAL_I2C_Master_Transmit>
			break;
 80011fc:	e003      	b.n	8001206 <I2C_Writebyte+0x8e>

		default:
			printf("Wrong TYPE");
 80011fe:	4805      	ldr	r0, [pc, #20]	; (8001214 <I2C_Writebyte+0x9c>)
 8001200:	f006 fbec 	bl	80079dc <iprintf>
			break;
 8001204:	bf00      	nop
	}


}
 8001206:	bf00      	nop
 8001208:	3710      	adds	r7, #16
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	20000300 	.word	0x20000300
 8001214:	0800b748 	.word	0x0800b748

08001218 <HW579_init>:




void HW579_init(I2C_HandleTypeDef *hi2c)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
	hw579.i2c = *hi2c;
 8001220:	4a0a      	ldr	r2, [pc, #40]	; (800124c <HW579_init+0x34>)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4610      	mov	r0, r2
 8001226:	4619      	mov	r1, r3
 8001228:	2354      	movs	r3, #84	; 0x54
 800122a:	461a      	mov	r2, r3
 800122c:	f005 fd46 	bl	8006cbc <memcpy>

	getI2C_Address(hi2c);
 8001230:	6878      	ldr	r0, [r7, #4]
 8001232:	f7ff ff11 	bl	8001058 <getI2C_Address>

	Magneto_init();
 8001236:	f7ff ff07 	bl	8001048 <Magneto_init>
	Accel_init();
 800123a:	f7ff feed 	bl	8001018 <Accel_init>
	Gyro_init();
 800123e:	f000 f80d 	bl	800125c <Gyro_init>

}
 8001242:	bf00      	nop
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	20000300 	.word	0x20000300

08001250 <HW579_Read>:

void HW579_Read(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
//	uint16_t hw579_buf[14];
	Gyro_Read();
 8001254:	f000 f838 	bl	80012c8 <Gyro_Read>
}
 8001258:	bf00      	nop
 800125a:	bd80      	pop	{r7, pc}

0800125c <Gyro_init>:
	return Receive[0];
}


void Gyro_init(void)	// struct -> i2c
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0

	//printf("0x%X\r\n", GYRO.gyro_address);

	I2C_Writebyte(&GYRO, PWR_MGM, 0x00, gyro);
 8001260:	2302      	movs	r3, #2
 8001262:	2200      	movs	r2, #0
 8001264:	213e      	movs	r1, #62	; 0x3e
 8001266:	4817      	ldr	r0, [pc, #92]	; (80012c4 <Gyro_init+0x68>)
 8001268:	f7ff ff86 	bl	8001178 <I2C_Writebyte>
	HAL_Delay(100);
 800126c:	2064      	movs	r0, #100	; 0x64
 800126e:	f000 fe21 	bl	8001eb4 <HAL_Delay>
	I2C_Writebyte(&GYRO, PWR_MGM, PLL_XGYRO_REF, gyro);
 8001272:	2302      	movs	r3, #2
 8001274:	2201      	movs	r2, #1
 8001276:	213e      	movs	r1, #62	; 0x3e
 8001278:	4812      	ldr	r0, [pc, #72]	; (80012c4 <Gyro_init+0x68>)
 800127a:	f7ff ff7d 	bl	8001178 <I2C_Writebyte>
	I2C_Writebyte(&GYRO, SMPLRT_DIV, NOSRDIVIDER, gyro);
 800127e:	2302      	movs	r3, #2
 8001280:	2200      	movs	r2, #0
 8001282:	2115      	movs	r1, #21
 8001284:	480f      	ldr	r0, [pc, #60]	; (80012c4 <Gyro_init+0x68>)
 8001286:	f7ff ff77 	bl	8001178 <I2C_Writebyte>
	I2C_Writebyte(&GYRO, DLPF_FS, RANGE2000, gyro);
 800128a:	2302      	movs	r3, #2
 800128c:	2203      	movs	r2, #3
 800128e:	2116      	movs	r1, #22
 8001290:	480c      	ldr	r0, [pc, #48]	; (80012c4 <Gyro_init+0x68>)
 8001292:	f7ff ff71 	bl	8001178 <I2C_Writebyte>
	I2C_Writebyte(&GYRO, DLPF_FS, BW256_SR8, gyro);
 8001296:	2302      	movs	r3, #2
 8001298:	2200      	movs	r2, #0
 800129a:	2116      	movs	r1, #22
 800129c:	4809      	ldr	r0, [pc, #36]	; (80012c4 <Gyro_init+0x68>)
 800129e:	f7ff ff6b 	bl	8001178 <I2C_Writebyte>
	I2C_Writebyte(&GYRO, INT_CFG, INTCFG_ITG_RDY_EN, gyro);
 80012a2:	2302      	movs	r3, #2
 80012a4:	2204      	movs	r2, #4
 80012a6:	2117      	movs	r1, #23
 80012a8:	4806      	ldr	r0, [pc, #24]	; (80012c4 <Gyro_init+0x68>)
 80012aa:	f7ff ff65 	bl	8001178 <I2C_Writebyte>
	I2C_Writebyte(&GYRO, INT_CFG, INTCFG_RAW_RDY_EN, gyro);
 80012ae:	2302      	movs	r3, #2
 80012b0:	2201      	movs	r2, #1
 80012b2:	2117      	movs	r1, #23
 80012b4:	4803      	ldr	r0, [pc, #12]	; (80012c4 <Gyro_init+0x68>)
 80012b6:	f7ff ff5f 	bl	8001178 <I2C_Writebyte>

	HAL_Delay(GYROSTART_UP_DELAY);
 80012ba:	2046      	movs	r0, #70	; 0x46
 80012bc:	f000 fdfa 	bl	8001eb4 <HAL_Delay>
}
 80012c0:	bf00      	nop
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	20000368 	.word	0x20000368

080012c8 <Gyro_Read>:

uint8_t* Gyro_Read(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b088      	sub	sp, #32
 80012cc:	af04      	add	r7, sp, #16
	readGyroRaw();
 80012ce:	f000 f85f 	bl	8001390 <readGyroRaw>
	uint8_t gyro_buf[8];
	HAL_I2C_Mem_Read(&(GYRO.i2c), GYRO.gyro_address , TEMP_OUT, I2C_MEMADD_SIZE_8BIT, gyro_buf, sizeof(gyro_buf), 10);
 80012d2:	4b2d      	ldr	r3, [pc, #180]	; (8001388 <Gyro_Read+0xc0>)
 80012d4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80012d8:	b299      	uxth	r1, r3
 80012da:	230a      	movs	r3, #10
 80012dc:	9302      	str	r3, [sp, #8]
 80012de:	2308      	movs	r3, #8
 80012e0:	9301      	str	r3, [sp, #4]
 80012e2:	1d3b      	adds	r3, r7, #4
 80012e4:	9300      	str	r3, [sp, #0]
 80012e6:	2301      	movs	r3, #1
 80012e8:	221b      	movs	r2, #27
 80012ea:	4827      	ldr	r0, [pc, #156]	; (8001388 <Gyro_Read+0xc0>)
 80012ec:	f001 fbc0 	bl	8002a70 <HAL_I2C_Mem_Read>
	GYRO.scaled_gyro_temp = (gyro_buf[0] << 8) | gyro_buf[1];
 80012f0:	793b      	ldrb	r3, [r7, #4]
 80012f2:	021b      	lsls	r3, r3, #8
 80012f4:	797a      	ldrb	r2, [r7, #5]
 80012f6:	4313      	orrs	r3, r2
 80012f8:	ee07 3a90 	vmov	s15, r3
 80012fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001300:	4b21      	ldr	r3, [pc, #132]	; (8001388 <Gyro_Read+0xc0>)
 8001302:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
	GYRO.scaled_gyro_X = (gyro_buf[2] << 8) | gyro_buf[3];
 8001306:	79bb      	ldrb	r3, [r7, #6]
 8001308:	021b      	lsls	r3, r3, #8
 800130a:	79fa      	ldrb	r2, [r7, #7]
 800130c:	4313      	orrs	r3, r2
 800130e:	ee07 3a90 	vmov	s15, r3
 8001312:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001316:	4b1c      	ldr	r3, [pc, #112]	; (8001388 <Gyro_Read+0xc0>)
 8001318:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
	GYRO.scaled_gyro_Y = (gyro_buf[4] << 8) | gyro_buf[5];
 800131c:	7a3b      	ldrb	r3, [r7, #8]
 800131e:	021b      	lsls	r3, r3, #8
 8001320:	7a7a      	ldrb	r2, [r7, #9]
 8001322:	4313      	orrs	r3, r2
 8001324:	ee07 3a90 	vmov	s15, r3
 8001328:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800132c:	4b16      	ldr	r3, [pc, #88]	; (8001388 <Gyro_Read+0xc0>)
 800132e:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
	GYRO.scaled_gyro_Z = (gyro_buf[6] << 8) | gyro_buf[7];
 8001332:	7abb      	ldrb	r3, [r7, #10]
 8001334:	021b      	lsls	r3, r3, #8
 8001336:	7afa      	ldrb	r2, [r7, #11]
 8001338:	4313      	orrs	r3, r2
 800133a:	ee07 3a90 	vmov	s15, r3
 800133e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001342:	4b11      	ldr	r3, [pc, #68]	; (8001388 <Gyro_Read+0xc0>)
 8001344:	edc3 7a1f 	vstr	s15, [r3, #124]	; 0x7c

	for(int i=0; i < 8; i++)
 8001348:	2300      	movs	r3, #0
 800134a:	60fb      	str	r3, [r7, #12]
 800134c:	e013      	b.n	8001376 <Gyro_Read+0xae>
	{
		printf("%f\r\n", (float)gyro_buf[i]);
 800134e:	1d3a      	adds	r2, r7, #4
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	4413      	add	r3, r2
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	ee07 3a90 	vmov	s15, r3
 800135a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800135e:	ee17 0a90 	vmov	r0, s15
 8001362:	f7ff f901 	bl	8000568 <__aeabi_f2d>
 8001366:	4602      	mov	r2, r0
 8001368:	460b      	mov	r3, r1
 800136a:	4808      	ldr	r0, [pc, #32]	; (800138c <Gyro_Read+0xc4>)
 800136c:	f006 fb36 	bl	80079dc <iprintf>
	for(int i=0; i < 8; i++)
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	3301      	adds	r3, #1
 8001374:	60fb      	str	r3, [r7, #12]
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	2b07      	cmp	r3, #7
 800137a:	dde8      	ble.n	800134e <Gyro_Read+0x86>
	}



	return gyro_buf;
 800137c:	2300      	movs	r3, #0
}
 800137e:	4618      	mov	r0, r3
 8001380:	3710      	adds	r7, #16
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	20000368 	.word	0x20000368
 800138c:	0800b754 	.word	0x0800b754

08001390 <readGyroRaw>:


void readGyroRaw(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b088      	sub	sp, #32
 8001394:	af04      	add	r7, sp, #16
	uint8_t databuf[6];
	HAL_I2C_Mem_Read(&(GYRO.i2c), GYRO.gyro_address , GYRO_XOUT, I2C_MEMADD_SIZE_8BIT, databuf, sizeof(databuf), 10);
 8001396:	4b23      	ldr	r3, [pc, #140]	; (8001424 <readGyroRaw+0x94>)
 8001398:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800139c:	b299      	uxth	r1, r3
 800139e:	230a      	movs	r3, #10
 80013a0:	9302      	str	r3, [sp, #8]
 80013a2:	2306      	movs	r3, #6
 80013a4:	9301      	str	r3, [sp, #4]
 80013a6:	1d3b      	adds	r3, r7, #4
 80013a8:	9300      	str	r3, [sp, #0]
 80013aa:	2301      	movs	r3, #1
 80013ac:	221d      	movs	r2, #29
 80013ae:	481d      	ldr	r0, [pc, #116]	; (8001424 <readGyroRaw+0x94>)
 80013b0:	f001 fb5e 	bl	8002a70 <HAL_I2C_Mem_Read>
	GYRO.gyro_X = databuf[0] << 8 | databuf[1];
 80013b4:	793b      	ldrb	r3, [r7, #4]
 80013b6:	021b      	lsls	r3, r3, #8
 80013b8:	b21a      	sxth	r2, r3
 80013ba:	797b      	ldrb	r3, [r7, #5]
 80013bc:	b21b      	sxth	r3, r3
 80013be:	4313      	orrs	r3, r2
 80013c0:	b21b      	sxth	r3, r3
 80013c2:	b29a      	uxth	r2, r3
 80013c4:	4b17      	ldr	r3, [pc, #92]	; (8001424 <readGyroRaw+0x94>)
 80013c6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
	GYRO.gyro_Y = databuf[2] << 8 | databuf[3];
 80013ca:	79bb      	ldrb	r3, [r7, #6]
 80013cc:	021b      	lsls	r3, r3, #8
 80013ce:	b21a      	sxth	r2, r3
 80013d0:	79fb      	ldrb	r3, [r7, #7]
 80013d2:	b21b      	sxth	r3, r3
 80013d4:	4313      	orrs	r3, r2
 80013d6:	b21b      	sxth	r3, r3
 80013d8:	b29a      	uxth	r2, r3
 80013da:	4b12      	ldr	r3, [pc, #72]	; (8001424 <readGyroRaw+0x94>)
 80013dc:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
	GYRO.gyro_Z = databuf[4] << 8 | databuf[5];
 80013e0:	7a3b      	ldrb	r3, [r7, #8]
 80013e2:	021b      	lsls	r3, r3, #8
 80013e4:	b21a      	sxth	r2, r3
 80013e6:	7a7b      	ldrb	r3, [r7, #9]
 80013e8:	b21b      	sxth	r3, r3
 80013ea:	4313      	orrs	r3, r2
 80013ec:	b21b      	sxth	r3, r3
 80013ee:	b29a      	uxth	r2, r3
 80013f0:	4b0c      	ldr	r3, [pc, #48]	; (8001424 <readGyroRaw+0x94>)
 80013f2:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e

	for(int i=0; i< 6; i++)
 80013f6:	2300      	movs	r3, #0
 80013f8:	60fb      	str	r3, [r7, #12]
 80013fa:	e00a      	b.n	8001412 <readGyroRaw+0x82>
	{
		printf("raw : %u\r\n", databuf[i]);
 80013fc:	1d3a      	adds	r2, r7, #4
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	4413      	add	r3, r2
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	4619      	mov	r1, r3
 8001406:	4808      	ldr	r0, [pc, #32]	; (8001428 <readGyroRaw+0x98>)
 8001408:	f006 fae8 	bl	80079dc <iprintf>
	for(int i=0; i< 6; i++)
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	3301      	adds	r3, #1
 8001410:	60fb      	str	r3, [r7, #12]
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	2b05      	cmp	r3, #5
 8001416:	ddf1      	ble.n	80013fc <readGyroRaw+0x6c>
	}
}
 8001418:	bf00      	nop
 800141a:	bf00      	nop
 800141c:	3710      	adds	r7, #16
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	20000368 	.word	0x20000368
 8001428:	0800b75c 	.word	0x0800b75c

0800142c <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b08c      	sub	sp, #48	; 0x30
 8001430:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001432:	f107 031c 	add.w	r3, r7, #28
 8001436:	2200      	movs	r2, #0
 8001438:	601a      	str	r2, [r3, #0]
 800143a:	605a      	str	r2, [r3, #4]
 800143c:	609a      	str	r2, [r3, #8]
 800143e:	60da      	str	r2, [r3, #12]
 8001440:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001442:	2300      	movs	r3, #0
 8001444:	61bb      	str	r3, [r7, #24]
 8001446:	4b7c      	ldr	r3, [pc, #496]	; (8001638 <MX_GPIO_Init+0x20c>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144a:	4a7b      	ldr	r2, [pc, #492]	; (8001638 <MX_GPIO_Init+0x20c>)
 800144c:	f043 0304 	orr.w	r3, r3, #4
 8001450:	6313      	str	r3, [r2, #48]	; 0x30
 8001452:	4b79      	ldr	r3, [pc, #484]	; (8001638 <MX_GPIO_Init+0x20c>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001456:	f003 0304 	and.w	r3, r3, #4
 800145a:	61bb      	str	r3, [r7, #24]
 800145c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800145e:	2300      	movs	r3, #0
 8001460:	617b      	str	r3, [r7, #20]
 8001462:	4b75      	ldr	r3, [pc, #468]	; (8001638 <MX_GPIO_Init+0x20c>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001466:	4a74      	ldr	r2, [pc, #464]	; (8001638 <MX_GPIO_Init+0x20c>)
 8001468:	f043 0320 	orr.w	r3, r3, #32
 800146c:	6313      	str	r3, [r2, #48]	; 0x30
 800146e:	4b72      	ldr	r3, [pc, #456]	; (8001638 <MX_GPIO_Init+0x20c>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001472:	f003 0320 	and.w	r3, r3, #32
 8001476:	617b      	str	r3, [r7, #20]
 8001478:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800147a:	2300      	movs	r3, #0
 800147c:	613b      	str	r3, [r7, #16]
 800147e:	4b6e      	ldr	r3, [pc, #440]	; (8001638 <MX_GPIO_Init+0x20c>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001482:	4a6d      	ldr	r2, [pc, #436]	; (8001638 <MX_GPIO_Init+0x20c>)
 8001484:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001488:	6313      	str	r3, [r2, #48]	; 0x30
 800148a:	4b6b      	ldr	r3, [pc, #428]	; (8001638 <MX_GPIO_Init+0x20c>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001492:	613b      	str	r3, [r7, #16]
 8001494:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001496:	2300      	movs	r3, #0
 8001498:	60fb      	str	r3, [r7, #12]
 800149a:	4b67      	ldr	r3, [pc, #412]	; (8001638 <MX_GPIO_Init+0x20c>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	4a66      	ldr	r2, [pc, #408]	; (8001638 <MX_GPIO_Init+0x20c>)
 80014a0:	f043 0301 	orr.w	r3, r3, #1
 80014a4:	6313      	str	r3, [r2, #48]	; 0x30
 80014a6:	4b64      	ldr	r3, [pc, #400]	; (8001638 <MX_GPIO_Init+0x20c>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	f003 0301 	and.w	r3, r3, #1
 80014ae:	60fb      	str	r3, [r7, #12]
 80014b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014b2:	2300      	movs	r3, #0
 80014b4:	60bb      	str	r3, [r7, #8]
 80014b6:	4b60      	ldr	r3, [pc, #384]	; (8001638 <MX_GPIO_Init+0x20c>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ba:	4a5f      	ldr	r2, [pc, #380]	; (8001638 <MX_GPIO_Init+0x20c>)
 80014bc:	f043 0302 	orr.w	r3, r3, #2
 80014c0:	6313      	str	r3, [r2, #48]	; 0x30
 80014c2:	4b5d      	ldr	r3, [pc, #372]	; (8001638 <MX_GPIO_Init+0x20c>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c6:	f003 0302 	and.w	r3, r3, #2
 80014ca:	60bb      	str	r3, [r7, #8]
 80014cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80014ce:	2300      	movs	r3, #0
 80014d0:	607b      	str	r3, [r7, #4]
 80014d2:	4b59      	ldr	r3, [pc, #356]	; (8001638 <MX_GPIO_Init+0x20c>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d6:	4a58      	ldr	r2, [pc, #352]	; (8001638 <MX_GPIO_Init+0x20c>)
 80014d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014dc:	6313      	str	r3, [r2, #48]	; 0x30
 80014de:	4b56      	ldr	r3, [pc, #344]	; (8001638 <MX_GPIO_Init+0x20c>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014e6:	607b      	str	r3, [r7, #4]
 80014e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80014ea:	2200      	movs	r2, #0
 80014ec:	f244 0181 	movw	r1, #16513	; 0x4081
 80014f0:	4852      	ldr	r0, [pc, #328]	; (800163c <MX_GPIO_Init+0x210>)
 80014f2:	f001 f861 	bl	80025b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80014f6:	2200      	movs	r2, #0
 80014f8:	2140      	movs	r1, #64	; 0x40
 80014fa:	4851      	ldr	r0, [pc, #324]	; (8001640 <MX_GPIO_Init+0x214>)
 80014fc:	f001 f85c 	bl	80025b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001500:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001504:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001506:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800150a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150c:	2300      	movs	r3, #0
 800150e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001510:	f107 031c 	add.w	r3, r7, #28
 8001514:	4619      	mov	r1, r3
 8001516:	484b      	ldr	r0, [pc, #300]	; (8001644 <MX_GPIO_Init+0x218>)
 8001518:	f000 fea2 	bl	8002260 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800151c:	2332      	movs	r3, #50	; 0x32
 800151e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001520:	2302      	movs	r3, #2
 8001522:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001524:	2300      	movs	r3, #0
 8001526:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001528:	2303      	movs	r3, #3
 800152a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800152c:	230b      	movs	r3, #11
 800152e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001530:	f107 031c 	add.w	r3, r7, #28
 8001534:	4619      	mov	r1, r3
 8001536:	4843      	ldr	r0, [pc, #268]	; (8001644 <MX_GPIO_Init+0x218>)
 8001538:	f000 fe92 	bl	8002260 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800153c:	2386      	movs	r3, #134	; 0x86
 800153e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001540:	2302      	movs	r3, #2
 8001542:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001544:	2300      	movs	r3, #0
 8001546:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001548:	2303      	movs	r3, #3
 800154a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800154c:	230b      	movs	r3, #11
 800154e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001550:	f107 031c 	add.w	r3, r7, #28
 8001554:	4619      	mov	r1, r3
 8001556:	483c      	ldr	r0, [pc, #240]	; (8001648 <MX_GPIO_Init+0x21c>)
 8001558:	f000 fe82 	bl	8002260 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800155c:	f244 0381 	movw	r3, #16513	; 0x4081
 8001560:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001562:	2301      	movs	r3, #1
 8001564:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001566:	2300      	movs	r3, #0
 8001568:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800156a:	2300      	movs	r3, #0
 800156c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800156e:	f107 031c 	add.w	r3, r7, #28
 8001572:	4619      	mov	r1, r3
 8001574:	4831      	ldr	r0, [pc, #196]	; (800163c <MX_GPIO_Init+0x210>)
 8001576:	f000 fe73 	bl	8002260 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800157a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800157e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001580:	2302      	movs	r3, #2
 8001582:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001584:	2300      	movs	r3, #0
 8001586:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001588:	2303      	movs	r3, #3
 800158a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800158c:	230b      	movs	r3, #11
 800158e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001590:	f107 031c 	add.w	r3, r7, #28
 8001594:	4619      	mov	r1, r3
 8001596:	4829      	ldr	r0, [pc, #164]	; (800163c <MX_GPIO_Init+0x210>)
 8001598:	f000 fe62 	bl	8002260 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800159c:	2340      	movs	r3, #64	; 0x40
 800159e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015a0:	2301      	movs	r3, #1
 80015a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a4:	2300      	movs	r3, #0
 80015a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a8:	2300      	movs	r3, #0
 80015aa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80015ac:	f107 031c 	add.w	r3, r7, #28
 80015b0:	4619      	mov	r1, r3
 80015b2:	4823      	ldr	r0, [pc, #140]	; (8001640 <MX_GPIO_Init+0x214>)
 80015b4:	f000 fe54 	bl	8002260 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80015b8:	2380      	movs	r3, #128	; 0x80
 80015ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015bc:	2300      	movs	r3, #0
 80015be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c0:	2300      	movs	r3, #0
 80015c2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80015c4:	f107 031c 	add.w	r3, r7, #28
 80015c8:	4619      	mov	r1, r3
 80015ca:	481d      	ldr	r0, [pc, #116]	; (8001640 <MX_GPIO_Init+0x214>)
 80015cc:	f000 fe48 	bl	8002260 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80015d0:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80015d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d6:	2302      	movs	r3, #2
 80015d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015da:	2300      	movs	r3, #0
 80015dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015de:	2303      	movs	r3, #3
 80015e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80015e2:	230a      	movs	r3, #10
 80015e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e6:	f107 031c 	add.w	r3, r7, #28
 80015ea:	4619      	mov	r1, r3
 80015ec:	4816      	ldr	r0, [pc, #88]	; (8001648 <MX_GPIO_Init+0x21c>)
 80015ee:	f000 fe37 	bl	8002260 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80015f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015f8:	2300      	movs	r3, #0
 80015fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fc:	2300      	movs	r3, #0
 80015fe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001600:	f107 031c 	add.w	r3, r7, #28
 8001604:	4619      	mov	r1, r3
 8001606:	4810      	ldr	r0, [pc, #64]	; (8001648 <MX_GPIO_Init+0x21c>)
 8001608:	f000 fe2a 	bl	8002260 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800160c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001610:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001612:	2302      	movs	r3, #2
 8001614:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001616:	2300      	movs	r3, #0
 8001618:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800161a:	2303      	movs	r3, #3
 800161c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800161e:	230b      	movs	r3, #11
 8001620:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001622:	f107 031c 	add.w	r3, r7, #28
 8001626:	4619      	mov	r1, r3
 8001628:	4805      	ldr	r0, [pc, #20]	; (8001640 <MX_GPIO_Init+0x214>)
 800162a:	f000 fe19 	bl	8002260 <HAL_GPIO_Init>

}
 800162e:	bf00      	nop
 8001630:	3730      	adds	r7, #48	; 0x30
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	40023800 	.word	0x40023800
 800163c:	40020400 	.word	0x40020400
 8001640:	40021800 	.word	0x40021800
 8001644:	40020800 	.word	0x40020800
 8001648:	40020000 	.word	0x40020000

0800164c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001650:	4b1b      	ldr	r3, [pc, #108]	; (80016c0 <MX_I2C1_Init+0x74>)
 8001652:	4a1c      	ldr	r2, [pc, #112]	; (80016c4 <MX_I2C1_Init+0x78>)
 8001654:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001656:	4b1a      	ldr	r3, [pc, #104]	; (80016c0 <MX_I2C1_Init+0x74>)
 8001658:	4a1b      	ldr	r2, [pc, #108]	; (80016c8 <MX_I2C1_Init+0x7c>)
 800165a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800165c:	4b18      	ldr	r3, [pc, #96]	; (80016c0 <MX_I2C1_Init+0x74>)
 800165e:	2200      	movs	r2, #0
 8001660:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001662:	4b17      	ldr	r3, [pc, #92]	; (80016c0 <MX_I2C1_Init+0x74>)
 8001664:	2200      	movs	r2, #0
 8001666:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001668:	4b15      	ldr	r3, [pc, #84]	; (80016c0 <MX_I2C1_Init+0x74>)
 800166a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800166e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001670:	4b13      	ldr	r3, [pc, #76]	; (80016c0 <MX_I2C1_Init+0x74>)
 8001672:	2200      	movs	r2, #0
 8001674:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001676:	4b12      	ldr	r3, [pc, #72]	; (80016c0 <MX_I2C1_Init+0x74>)
 8001678:	2200      	movs	r2, #0
 800167a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800167c:	4b10      	ldr	r3, [pc, #64]	; (80016c0 <MX_I2C1_Init+0x74>)
 800167e:	2200      	movs	r2, #0
 8001680:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001682:	4b0f      	ldr	r3, [pc, #60]	; (80016c0 <MX_I2C1_Init+0x74>)
 8001684:	2200      	movs	r2, #0
 8001686:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001688:	480d      	ldr	r0, [pc, #52]	; (80016c0 <MX_I2C1_Init+0x74>)
 800168a:	f000 ffaf 	bl	80025ec <HAL_I2C_Init>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001694:	f000 f9b2 	bl	80019fc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001698:	2100      	movs	r1, #0
 800169a:	4809      	ldr	r0, [pc, #36]	; (80016c0 <MX_I2C1_Init+0x74>)
 800169c:	f003 fd6c 	bl	8005178 <HAL_I2CEx_ConfigAnalogFilter>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80016a6:	f000 f9a9 	bl	80019fc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80016aa:	2100      	movs	r1, #0
 80016ac:	4804      	ldr	r0, [pc, #16]	; (80016c0 <MX_I2C1_Init+0x74>)
 80016ae:	f003 fd9f 	bl	80051f0 <HAL_I2CEx_ConfigDigitalFilter>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80016b8:	f000 f9a0 	bl	80019fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80016bc:	bf00      	nop
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	200003e8 	.word	0x200003e8
 80016c4:	40005400 	.word	0x40005400
 80016c8:	000186a0 	.word	0x000186a0

080016cc <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80016d0:	4b1b      	ldr	r3, [pc, #108]	; (8001740 <MX_I2C2_Init+0x74>)
 80016d2:	4a1c      	ldr	r2, [pc, #112]	; (8001744 <MX_I2C2_Init+0x78>)
 80016d4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80016d6:	4b1a      	ldr	r3, [pc, #104]	; (8001740 <MX_I2C2_Init+0x74>)
 80016d8:	4a1b      	ldr	r2, [pc, #108]	; (8001748 <MX_I2C2_Init+0x7c>)
 80016da:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80016dc:	4b18      	ldr	r3, [pc, #96]	; (8001740 <MX_I2C2_Init+0x74>)
 80016de:	2200      	movs	r2, #0
 80016e0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80016e2:	4b17      	ldr	r3, [pc, #92]	; (8001740 <MX_I2C2_Init+0x74>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016e8:	4b15      	ldr	r3, [pc, #84]	; (8001740 <MX_I2C2_Init+0x74>)
 80016ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80016ee:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016f0:	4b13      	ldr	r3, [pc, #76]	; (8001740 <MX_I2C2_Init+0x74>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80016f6:	4b12      	ldr	r3, [pc, #72]	; (8001740 <MX_I2C2_Init+0x74>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016fc:	4b10      	ldr	r3, [pc, #64]	; (8001740 <MX_I2C2_Init+0x74>)
 80016fe:	2200      	movs	r2, #0
 8001700:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001702:	4b0f      	ldr	r3, [pc, #60]	; (8001740 <MX_I2C2_Init+0x74>)
 8001704:	2200      	movs	r2, #0
 8001706:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001708:	480d      	ldr	r0, [pc, #52]	; (8001740 <MX_I2C2_Init+0x74>)
 800170a:	f000 ff6f 	bl	80025ec <HAL_I2C_Init>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d001      	beq.n	8001718 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001714:	f000 f972 	bl	80019fc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001718:	2100      	movs	r1, #0
 800171a:	4809      	ldr	r0, [pc, #36]	; (8001740 <MX_I2C2_Init+0x74>)
 800171c:	f003 fd2c 	bl	8005178 <HAL_I2CEx_ConfigAnalogFilter>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8001726:	f000 f969 	bl	80019fc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800172a:	2100      	movs	r1, #0
 800172c:	4804      	ldr	r0, [pc, #16]	; (8001740 <MX_I2C2_Init+0x74>)
 800172e:	f003 fd5f 	bl	80051f0 <HAL_I2CEx_ConfigDigitalFilter>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8001738:	f000 f960 	bl	80019fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800173c:	bf00      	nop
 800173e:	bd80      	pop	{r7, pc}
 8001740:	2000043c 	.word	0x2000043c
 8001744:	40005800 	.word	0x40005800
 8001748:	000186a0 	.word	0x000186a0

0800174c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b08c      	sub	sp, #48	; 0x30
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001754:	f107 031c 	add.w	r3, r7, #28
 8001758:	2200      	movs	r2, #0
 800175a:	601a      	str	r2, [r3, #0]
 800175c:	605a      	str	r2, [r3, #4]
 800175e:	609a      	str	r2, [r3, #8]
 8001760:	60da      	str	r2, [r3, #12]
 8001762:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a42      	ldr	r2, [pc, #264]	; (8001874 <HAL_I2C_MspInit+0x128>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d13d      	bne.n	80017ea <HAL_I2C_MspInit+0x9e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800176e:	2300      	movs	r3, #0
 8001770:	61bb      	str	r3, [r7, #24]
 8001772:	4b41      	ldr	r3, [pc, #260]	; (8001878 <HAL_I2C_MspInit+0x12c>)
 8001774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001776:	4a40      	ldr	r2, [pc, #256]	; (8001878 <HAL_I2C_MspInit+0x12c>)
 8001778:	f043 0302 	orr.w	r3, r3, #2
 800177c:	6313      	str	r3, [r2, #48]	; 0x30
 800177e:	4b3e      	ldr	r3, [pc, #248]	; (8001878 <HAL_I2C_MspInit+0x12c>)
 8001780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001782:	f003 0302 	and.w	r3, r3, #2
 8001786:	61bb      	str	r3, [r7, #24]
 8001788:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800178a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800178e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001790:	2312      	movs	r3, #18
 8001792:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001794:	2300      	movs	r3, #0
 8001796:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001798:	2303      	movs	r3, #3
 800179a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800179c:	2304      	movs	r3, #4
 800179e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017a0:	f107 031c 	add.w	r3, r7, #28
 80017a4:	4619      	mov	r1, r3
 80017a6:	4835      	ldr	r0, [pc, #212]	; (800187c <HAL_I2C_MspInit+0x130>)
 80017a8:	f000 fd5a 	bl	8002260 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80017ac:	2300      	movs	r3, #0
 80017ae:	617b      	str	r3, [r7, #20]
 80017b0:	4b31      	ldr	r3, [pc, #196]	; (8001878 <HAL_I2C_MspInit+0x12c>)
 80017b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b4:	4a30      	ldr	r2, [pc, #192]	; (8001878 <HAL_I2C_MspInit+0x12c>)
 80017b6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80017ba:	6413      	str	r3, [r2, #64]	; 0x40
 80017bc:	4b2e      	ldr	r3, [pc, #184]	; (8001878 <HAL_I2C_MspInit+0x12c>)
 80017be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017c4:	617b      	str	r3, [r7, #20]
 80017c6:	697b      	ldr	r3, [r7, #20]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80017c8:	2200      	movs	r2, #0
 80017ca:	2100      	movs	r1, #0
 80017cc:	201f      	movs	r0, #31
 80017ce:	f000 fc70 	bl	80020b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80017d2:	201f      	movs	r0, #31
 80017d4:	f000 fc89 	bl	80020ea <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80017d8:	2200      	movs	r2, #0
 80017da:	2100      	movs	r1, #0
 80017dc:	2020      	movs	r0, #32
 80017de:	f000 fc68 	bl	80020b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80017e2:	2020      	movs	r0, #32
 80017e4:	f000 fc81 	bl	80020ea <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80017e8:	e040      	b.n	800186c <HAL_I2C_MspInit+0x120>
  else if(i2cHandle->Instance==I2C2)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a24      	ldr	r2, [pc, #144]	; (8001880 <HAL_I2C_MspInit+0x134>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d13b      	bne.n	800186c <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80017f4:	2300      	movs	r3, #0
 80017f6:	613b      	str	r3, [r7, #16]
 80017f8:	4b1f      	ldr	r3, [pc, #124]	; (8001878 <HAL_I2C_MspInit+0x12c>)
 80017fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fc:	4a1e      	ldr	r2, [pc, #120]	; (8001878 <HAL_I2C_MspInit+0x12c>)
 80017fe:	f043 0320 	orr.w	r3, r3, #32
 8001802:	6313      	str	r3, [r2, #48]	; 0x30
 8001804:	4b1c      	ldr	r3, [pc, #112]	; (8001878 <HAL_I2C_MspInit+0x12c>)
 8001806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001808:	f003 0320 	and.w	r3, r3, #32
 800180c:	613b      	str	r3, [r7, #16]
 800180e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001810:	2303      	movs	r3, #3
 8001812:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001814:	2312      	movs	r3, #18
 8001816:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001818:	2300      	movs	r3, #0
 800181a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800181c:	2303      	movs	r3, #3
 800181e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001820:	2304      	movs	r3, #4
 8001822:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001824:	f107 031c 	add.w	r3, r7, #28
 8001828:	4619      	mov	r1, r3
 800182a:	4816      	ldr	r0, [pc, #88]	; (8001884 <HAL_I2C_MspInit+0x138>)
 800182c:	f000 fd18 	bl	8002260 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001830:	2300      	movs	r3, #0
 8001832:	60fb      	str	r3, [r7, #12]
 8001834:	4b10      	ldr	r3, [pc, #64]	; (8001878 <HAL_I2C_MspInit+0x12c>)
 8001836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001838:	4a0f      	ldr	r2, [pc, #60]	; (8001878 <HAL_I2C_MspInit+0x12c>)
 800183a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800183e:	6413      	str	r3, [r2, #64]	; 0x40
 8001840:	4b0d      	ldr	r3, [pc, #52]	; (8001878 <HAL_I2C_MspInit+0x12c>)
 8001842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001844:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001848:	60fb      	str	r3, [r7, #12]
 800184a:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 800184c:	2200      	movs	r2, #0
 800184e:	2100      	movs	r1, #0
 8001850:	2021      	movs	r0, #33	; 0x21
 8001852:	f000 fc2e 	bl	80020b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001856:	2021      	movs	r0, #33	; 0x21
 8001858:	f000 fc47 	bl	80020ea <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 800185c:	2200      	movs	r2, #0
 800185e:	2100      	movs	r1, #0
 8001860:	2022      	movs	r0, #34	; 0x22
 8001862:	f000 fc26 	bl	80020b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8001866:	2022      	movs	r0, #34	; 0x22
 8001868:	f000 fc3f 	bl	80020ea <HAL_NVIC_EnableIRQ>
}
 800186c:	bf00      	nop
 800186e:	3730      	adds	r7, #48	; 0x30
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	40005400 	.word	0x40005400
 8001878:	40023800 	.word	0x40023800
 800187c:	40020400 	.word	0x40020400
 8001880:	40005800 	.word	0x40005800
 8001884:	40021400 	.word	0x40021400

08001888 <_write>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
int _write(int file, char *p, int len)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b084      	sub	sp, #16
 800188c:	af00      	add	r7, sp, #0
 800188e:	60f8      	str	r0, [r7, #12]
 8001890:	60b9      	str	r1, [r7, #8]
 8001892:	607a      	str	r2, [r7, #4]
	if(HAL_UART_Transmit(&huart3, (uint8_t *)p, len, 10) == HAL_OK) return len;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	b29a      	uxth	r2, r3
 8001898:	230a      	movs	r3, #10
 800189a:	68b9      	ldr	r1, [r7, #8]
 800189c:	4806      	ldr	r0, [pc, #24]	; (80018b8 <_write+0x30>)
 800189e:	f004 fa1c 	bl	8005cda <HAL_UART_Transmit>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d101      	bne.n	80018ac <_write+0x24>
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	e000      	b.n	80018ae <_write+0x26>
	else return 0;
 80018ac:	2300      	movs	r3, #0
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3710      	adds	r7, #16
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	20000494 	.word	0x20000494

080018bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018c0:	f000 fa86 	bl	8001dd0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018c4:	f000 f82a 	bl	800191c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018c8:	f7ff fdb0 	bl	800142c <MX_GPIO_Init>
  MX_I2C1_Init();
 80018cc:	f7ff febe 	bl	800164c <MX_I2C1_Init>
  MX_USART3_UART_Init();
 80018d0:	f000 f9da 	bl	8001c88 <MX_USART3_UART_Init>
  MX_I2C2_Init();
 80018d4:	f7ff fefa 	bl	80016cc <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  HW579_init(&hi2c1);
 80018d8:	480c      	ldr	r0, [pc, #48]	; (800190c <main+0x50>)
 80018da:	f7ff fc9d 	bl	8001218 <HW579_init>

//  uint8_t state_buffer[128] = {0, };

//  uint8_t nDevices;

  HAL_Delay(1000);
 80018de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80018e2:	f000 fae7 	bl	8001eb4 <HAL_Delay>
  printf("I2C Scan Start\r\n");
 80018e6:	480a      	ldr	r0, [pc, #40]	; (8001910 <main+0x54>)
 80018e8:	f006 f8fe 	bl	8007ae8 <puts>
  printf("==================\r\n");
 80018ec:	4809      	ldr	r0, [pc, #36]	; (8001914 <main+0x58>)
 80018ee:	f006 f8fb 	bl	8007ae8 <puts>

  //getI2C_Address(&hi2c1);

  printf("==================\r\n");
 80018f2:	4808      	ldr	r0, [pc, #32]	; (8001914 <main+0x58>)
 80018f4:	f006 f8f8 	bl	8007ae8 <puts>
  printf("End Scanning\r\n");
 80018f8:	4807      	ldr	r0, [pc, #28]	; (8001918 <main+0x5c>)
 80018fa:	f006 f8f5 	bl	8007ae8 <puts>
//  for(int i = 0; i < numSensors; i++)
//  {
//	  printf("result : [0x%X]\r\n", sensors[i]);
//  }

  HW579_Read();
 80018fe:	f7ff fca7 	bl	8001250 <HW579_Read>





	  HAL_Delay(100);
 8001902:	2064      	movs	r0, #100	; 0x64
 8001904:	f000 fad6 	bl	8001eb4 <HAL_Delay>
 8001908:	e7fb      	b.n	8001902 <main+0x46>
 800190a:	bf00      	nop
 800190c:	200003e8 	.word	0x200003e8
 8001910:	0800b768 	.word	0x0800b768
 8001914:	0800b778 	.word	0x0800b778
 8001918:	0800b78c 	.word	0x0800b78c

0800191c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b094      	sub	sp, #80	; 0x50
 8001920:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001922:	f107 0320 	add.w	r3, r7, #32
 8001926:	2230      	movs	r2, #48	; 0x30
 8001928:	2100      	movs	r1, #0
 800192a:	4618      	mov	r0, r3
 800192c:	f005 f9d4 	bl	8006cd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001930:	f107 030c 	add.w	r3, r7, #12
 8001934:	2200      	movs	r2, #0
 8001936:	601a      	str	r2, [r3, #0]
 8001938:	605a      	str	r2, [r3, #4]
 800193a:	609a      	str	r2, [r3, #8]
 800193c:	60da      	str	r2, [r3, #12]
 800193e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001940:	2300      	movs	r3, #0
 8001942:	60bb      	str	r3, [r7, #8]
 8001944:	4b2b      	ldr	r3, [pc, #172]	; (80019f4 <SystemClock_Config+0xd8>)
 8001946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001948:	4a2a      	ldr	r2, [pc, #168]	; (80019f4 <SystemClock_Config+0xd8>)
 800194a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800194e:	6413      	str	r3, [r2, #64]	; 0x40
 8001950:	4b28      	ldr	r3, [pc, #160]	; (80019f4 <SystemClock_Config+0xd8>)
 8001952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001954:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001958:	60bb      	str	r3, [r7, #8]
 800195a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800195c:	2300      	movs	r3, #0
 800195e:	607b      	str	r3, [r7, #4]
 8001960:	4b25      	ldr	r3, [pc, #148]	; (80019f8 <SystemClock_Config+0xdc>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a24      	ldr	r2, [pc, #144]	; (80019f8 <SystemClock_Config+0xdc>)
 8001966:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800196a:	6013      	str	r3, [r2, #0]
 800196c:	4b22      	ldr	r3, [pc, #136]	; (80019f8 <SystemClock_Config+0xdc>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001974:	607b      	str	r3, [r7, #4]
 8001976:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001978:	2301      	movs	r3, #1
 800197a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800197c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001980:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001982:	2302      	movs	r3, #2
 8001984:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001986:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800198a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800198c:	2304      	movs	r3, #4
 800198e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001990:	23b4      	movs	r3, #180	; 0xb4
 8001992:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001994:	2302      	movs	r3, #2
 8001996:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001998:	2304      	movs	r3, #4
 800199a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800199c:	f107 0320 	add.w	r3, r7, #32
 80019a0:	4618      	mov	r0, r3
 80019a2:	f003 fcb5 	bl	8005310 <HAL_RCC_OscConfig>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d001      	beq.n	80019b0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80019ac:	f000 f826 	bl	80019fc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80019b0:	f003 fc5e 	bl	8005270 <HAL_PWREx_EnableOverDrive>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d001      	beq.n	80019be <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80019ba:	f000 f81f 	bl	80019fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019be:	230f      	movs	r3, #15
 80019c0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019c2:	2302      	movs	r3, #2
 80019c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019c6:	2300      	movs	r3, #0
 80019c8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80019ca:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80019ce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80019d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019d4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80019d6:	f107 030c 	add.w	r3, r7, #12
 80019da:	2105      	movs	r1, #5
 80019dc:	4618      	mov	r0, r3
 80019de:	f003 ff0f 	bl	8005800 <HAL_RCC_ClockConfig>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d001      	beq.n	80019ec <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80019e8:	f000 f808 	bl	80019fc <Error_Handler>
  }
}
 80019ec:	bf00      	nop
 80019ee:	3750      	adds	r7, #80	; 0x50
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	40023800 	.word	0x40023800
 80019f8:	40007000 	.word	0x40007000

080019fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a00:	b672      	cpsid	i
}
 8001a02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a04:	e7fe      	b.n	8001a04 <Error_Handler+0x8>
	...

08001a08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a0e:	2300      	movs	r3, #0
 8001a10:	607b      	str	r3, [r7, #4]
 8001a12:	4b10      	ldr	r3, [pc, #64]	; (8001a54 <HAL_MspInit+0x4c>)
 8001a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a16:	4a0f      	ldr	r2, [pc, #60]	; (8001a54 <HAL_MspInit+0x4c>)
 8001a18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a1c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a1e:	4b0d      	ldr	r3, [pc, #52]	; (8001a54 <HAL_MspInit+0x4c>)
 8001a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a26:	607b      	str	r3, [r7, #4]
 8001a28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	603b      	str	r3, [r7, #0]
 8001a2e:	4b09      	ldr	r3, [pc, #36]	; (8001a54 <HAL_MspInit+0x4c>)
 8001a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a32:	4a08      	ldr	r2, [pc, #32]	; (8001a54 <HAL_MspInit+0x4c>)
 8001a34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a38:	6413      	str	r3, [r2, #64]	; 0x40
 8001a3a:	4b06      	ldr	r3, [pc, #24]	; (8001a54 <HAL_MspInit+0x4c>)
 8001a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a42:	603b      	str	r3, [r7, #0]
 8001a44:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a46:	bf00      	nop
 8001a48:	370c      	adds	r7, #12
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	40023800 	.word	0x40023800

08001a58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a5c:	e7fe      	b.n	8001a5c <NMI_Handler+0x4>

08001a5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a5e:	b480      	push	{r7}
 8001a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a62:	e7fe      	b.n	8001a62 <HardFault_Handler+0x4>

08001a64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a68:	e7fe      	b.n	8001a68 <MemManage_Handler+0x4>

08001a6a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a6a:	b480      	push	{r7}
 8001a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a6e:	e7fe      	b.n	8001a6e <BusFault_Handler+0x4>

08001a70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a74:	e7fe      	b.n	8001a74 <UsageFault_Handler+0x4>

08001a76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a76:	b480      	push	{r7}
 8001a78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a7a:	bf00      	nop
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr

08001a84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a88:	bf00      	nop
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr

08001a92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a92:	b480      	push	{r7}
 8001a94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a96:	bf00      	nop
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr

08001aa0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001aa4:	f000 f9e6 	bl	8001e74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001aa8:	bf00      	nop
 8001aaa:	bd80      	pop	{r7, pc}

08001aac <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001ab0:	4802      	ldr	r0, [pc, #8]	; (8001abc <I2C1_EV_IRQHandler+0x10>)
 8001ab2:	f001 fb31 	bl	8003118 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001ab6:	bf00      	nop
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	200003e8 	.word	0x200003e8

08001ac0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001ac4:	4802      	ldr	r0, [pc, #8]	; (8001ad0 <I2C1_ER_IRQHandler+0x10>)
 8001ac6:	f001 fc98 	bl	80033fa <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001aca:	bf00      	nop
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	200003e8 	.word	0x200003e8

08001ad4 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8001ad8:	4802      	ldr	r0, [pc, #8]	; (8001ae4 <I2C2_EV_IRQHandler+0x10>)
 8001ada:	f001 fb1d 	bl	8003118 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8001ade:	bf00      	nop
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	2000043c 	.word	0x2000043c

08001ae8 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8001aec:	4802      	ldr	r0, [pc, #8]	; (8001af8 <I2C2_ER_IRQHandler+0x10>)
 8001aee:	f001 fc84 	bl	80033fa <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8001af2:	bf00      	nop
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	2000043c 	.word	0x2000043c

08001afc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001b00:	4802      	ldr	r0, [pc, #8]	; (8001b0c <USART3_IRQHandler+0x10>)
 8001b02:	f004 f97d 	bl	8005e00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001b06:	bf00      	nop
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	20000494 	.word	0x20000494

08001b10 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
	return 1;
 8001b14:	2301      	movs	r3, #1
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr

08001b20 <_kill>:

int _kill(int pid, int sig)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
 8001b28:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001b2a:	f005 f89d 	bl	8006c68 <__errno>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2216      	movs	r2, #22
 8001b32:	601a      	str	r2, [r3, #0]
	return -1;
 8001b34:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	3708      	adds	r7, #8
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}

08001b40 <_exit>:

void _exit (int status)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001b48:	f04f 31ff 	mov.w	r1, #4294967295
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	f7ff ffe7 	bl	8001b20 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001b52:	e7fe      	b.n	8001b52 <_exit+0x12>

08001b54 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b086      	sub	sp, #24
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	60f8      	str	r0, [r7, #12]
 8001b5c:	60b9      	str	r1, [r7, #8]
 8001b5e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b60:	2300      	movs	r3, #0
 8001b62:	617b      	str	r3, [r7, #20]
 8001b64:	e00a      	b.n	8001b7c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001b66:	f3af 8000 	nop.w
 8001b6a:	4601      	mov	r1, r0
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	1c5a      	adds	r2, r3, #1
 8001b70:	60ba      	str	r2, [r7, #8]
 8001b72:	b2ca      	uxtb	r2, r1
 8001b74:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	3301      	adds	r3, #1
 8001b7a:	617b      	str	r3, [r7, #20]
 8001b7c:	697a      	ldr	r2, [r7, #20]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	429a      	cmp	r2, r3
 8001b82:	dbf0      	blt.n	8001b66 <_read+0x12>
	}

return len;
 8001b84:	687b      	ldr	r3, [r7, #4]
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3718      	adds	r7, #24
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}

08001b8e <_close>:
	}
	return len;
}

int _close(int file)
{
 8001b8e:	b480      	push	{r7}
 8001b90:	b083      	sub	sp, #12
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	6078      	str	r0, [r7, #4]
	return -1;
 8001b96:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	370c      	adds	r7, #12
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr

08001ba6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ba6:	b480      	push	{r7}
 8001ba8:	b083      	sub	sp, #12
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	6078      	str	r0, [r7, #4]
 8001bae:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001bb6:	605a      	str	r2, [r3, #4]
	return 0;
 8001bb8:	2300      	movs	r3, #0
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	370c      	adds	r7, #12
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr

08001bc6 <_isatty>:

int _isatty(int file)
{
 8001bc6:	b480      	push	{r7}
 8001bc8:	b083      	sub	sp, #12
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	6078      	str	r0, [r7, #4]
	return 1;
 8001bce:	2301      	movs	r3, #1
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	370c      	adds	r7, #12
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr

08001bdc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b085      	sub	sp, #20
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	60f8      	str	r0, [r7, #12]
 8001be4:	60b9      	str	r1, [r7, #8]
 8001be6:	607a      	str	r2, [r7, #4]
	return 0;
 8001be8:	2300      	movs	r3, #0
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3714      	adds	r7, #20
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
	...

08001bf8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b086      	sub	sp, #24
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c00:	4a14      	ldr	r2, [pc, #80]	; (8001c54 <_sbrk+0x5c>)
 8001c02:	4b15      	ldr	r3, [pc, #84]	; (8001c58 <_sbrk+0x60>)
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c0c:	4b13      	ldr	r3, [pc, #76]	; (8001c5c <_sbrk+0x64>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d102      	bne.n	8001c1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c14:	4b11      	ldr	r3, [pc, #68]	; (8001c5c <_sbrk+0x64>)
 8001c16:	4a12      	ldr	r2, [pc, #72]	; (8001c60 <_sbrk+0x68>)
 8001c18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c1a:	4b10      	ldr	r3, [pc, #64]	; (8001c5c <_sbrk+0x64>)
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4413      	add	r3, r2
 8001c22:	693a      	ldr	r2, [r7, #16]
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d207      	bcs.n	8001c38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c28:	f005 f81e 	bl	8006c68 <__errno>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	220c      	movs	r2, #12
 8001c30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c32:	f04f 33ff 	mov.w	r3, #4294967295
 8001c36:	e009      	b.n	8001c4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c38:	4b08      	ldr	r3, [pc, #32]	; (8001c5c <_sbrk+0x64>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c3e:	4b07      	ldr	r3, [pc, #28]	; (8001c5c <_sbrk+0x64>)
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4413      	add	r3, r2
 8001c46:	4a05      	ldr	r2, [pc, #20]	; (8001c5c <_sbrk+0x64>)
 8001c48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	3718      	adds	r7, #24
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	20030000 	.word	0x20030000
 8001c58:	00000400 	.word	0x00000400
 8001c5c:	20000490 	.word	0x20000490
 8001c60:	200004f0 	.word	0x200004f0

08001c64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c68:	4b06      	ldr	r3, [pc, #24]	; (8001c84 <SystemInit+0x20>)
 8001c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c6e:	4a05      	ldr	r2, [pc, #20]	; (8001c84 <SystemInit+0x20>)
 8001c70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c78:	bf00      	nop
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	e000ed00 	.word	0xe000ed00

08001c88 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001c8c:	4b11      	ldr	r3, [pc, #68]	; (8001cd4 <MX_USART3_UART_Init+0x4c>)
 8001c8e:	4a12      	ldr	r2, [pc, #72]	; (8001cd8 <MX_USART3_UART_Init+0x50>)
 8001c90:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001c92:	4b10      	ldr	r3, [pc, #64]	; (8001cd4 <MX_USART3_UART_Init+0x4c>)
 8001c94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c98:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001c9a:	4b0e      	ldr	r3, [pc, #56]	; (8001cd4 <MX_USART3_UART_Init+0x4c>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001ca0:	4b0c      	ldr	r3, [pc, #48]	; (8001cd4 <MX_USART3_UART_Init+0x4c>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001ca6:	4b0b      	ldr	r3, [pc, #44]	; (8001cd4 <MX_USART3_UART_Init+0x4c>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001cac:	4b09      	ldr	r3, [pc, #36]	; (8001cd4 <MX_USART3_UART_Init+0x4c>)
 8001cae:	220c      	movs	r2, #12
 8001cb0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cb2:	4b08      	ldr	r3, [pc, #32]	; (8001cd4 <MX_USART3_UART_Init+0x4c>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cb8:	4b06      	ldr	r3, [pc, #24]	; (8001cd4 <MX_USART3_UART_Init+0x4c>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001cbe:	4805      	ldr	r0, [pc, #20]	; (8001cd4 <MX_USART3_UART_Init+0x4c>)
 8001cc0:	f003 ffbe 	bl	8005c40 <HAL_UART_Init>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001cca:	f7ff fe97 	bl	80019fc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001cce:	bf00      	nop
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	20000494 	.word	0x20000494
 8001cd8:	40004800 	.word	0x40004800

08001cdc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b08a      	sub	sp, #40	; 0x28
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce4:	f107 0314 	add.w	r3, r7, #20
 8001ce8:	2200      	movs	r2, #0
 8001cea:	601a      	str	r2, [r3, #0]
 8001cec:	605a      	str	r2, [r3, #4]
 8001cee:	609a      	str	r2, [r3, #8]
 8001cf0:	60da      	str	r2, [r3, #12]
 8001cf2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a1d      	ldr	r2, [pc, #116]	; (8001d70 <HAL_UART_MspInit+0x94>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d134      	bne.n	8001d68 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001cfe:	2300      	movs	r3, #0
 8001d00:	613b      	str	r3, [r7, #16]
 8001d02:	4b1c      	ldr	r3, [pc, #112]	; (8001d74 <HAL_UART_MspInit+0x98>)
 8001d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d06:	4a1b      	ldr	r2, [pc, #108]	; (8001d74 <HAL_UART_MspInit+0x98>)
 8001d08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d0c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d0e:	4b19      	ldr	r3, [pc, #100]	; (8001d74 <HAL_UART_MspInit+0x98>)
 8001d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d16:	613b      	str	r3, [r7, #16]
 8001d18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	60fb      	str	r3, [r7, #12]
 8001d1e:	4b15      	ldr	r3, [pc, #84]	; (8001d74 <HAL_UART_MspInit+0x98>)
 8001d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d22:	4a14      	ldr	r2, [pc, #80]	; (8001d74 <HAL_UART_MspInit+0x98>)
 8001d24:	f043 0302 	orr.w	r3, r3, #2
 8001d28:	6313      	str	r3, [r2, #48]	; 0x30
 8001d2a:	4b12      	ldr	r3, [pc, #72]	; (8001d74 <HAL_UART_MspInit+0x98>)
 8001d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2e:	f003 0302 	and.w	r3, r3, #2
 8001d32:	60fb      	str	r3, [r7, #12]
 8001d34:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001d36:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001d3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d3c:	2302      	movs	r3, #2
 8001d3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d40:	2300      	movs	r3, #0
 8001d42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d44:	2303      	movs	r3, #3
 8001d46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001d48:	2307      	movs	r3, #7
 8001d4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d4c:	f107 0314 	add.w	r3, r7, #20
 8001d50:	4619      	mov	r1, r3
 8001d52:	4809      	ldr	r0, [pc, #36]	; (8001d78 <HAL_UART_MspInit+0x9c>)
 8001d54:	f000 fa84 	bl	8002260 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001d58:	2200      	movs	r2, #0
 8001d5a:	2100      	movs	r1, #0
 8001d5c:	2027      	movs	r0, #39	; 0x27
 8001d5e:	f000 f9a8 	bl	80020b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001d62:	2027      	movs	r0, #39	; 0x27
 8001d64:	f000 f9c1 	bl	80020ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001d68:	bf00      	nop
 8001d6a:	3728      	adds	r7, #40	; 0x28
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	40004800 	.word	0x40004800
 8001d74:	40023800 	.word	0x40023800
 8001d78:	40020400 	.word	0x40020400

08001d7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001d7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001db4 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d80:	480d      	ldr	r0, [pc, #52]	; (8001db8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001d82:	490e      	ldr	r1, [pc, #56]	; (8001dbc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001d84:	4a0e      	ldr	r2, [pc, #56]	; (8001dc0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d88:	e002      	b.n	8001d90 <LoopCopyDataInit>

08001d8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d8e:	3304      	adds	r3, #4

08001d90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d94:	d3f9      	bcc.n	8001d8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d96:	4a0b      	ldr	r2, [pc, #44]	; (8001dc4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001d98:	4c0b      	ldr	r4, [pc, #44]	; (8001dc8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001d9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d9c:	e001      	b.n	8001da2 <LoopFillZerobss>

08001d9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001da0:	3204      	adds	r2, #4

08001da2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001da2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001da4:	d3fb      	bcc.n	8001d9e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001da6:	f7ff ff5d 	bl	8001c64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001daa:	f004 ff63 	bl	8006c74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001dae:	f7ff fd85 	bl	80018bc <main>
  bx  lr    
 8001db2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001db4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001db8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001dbc:	2000024c 	.word	0x2000024c
  ldr r2, =_sidata
 8001dc0:	0800bc74 	.word	0x0800bc74
  ldr r2, =_sbss
 8001dc4:	20000250 	.word	0x20000250
  ldr r4, =_ebss
 8001dc8:	200004ec 	.word	0x200004ec

08001dcc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001dcc:	e7fe      	b.n	8001dcc <ADC_IRQHandler>
	...

08001dd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001dd4:	4b0e      	ldr	r3, [pc, #56]	; (8001e10 <HAL_Init+0x40>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a0d      	ldr	r2, [pc, #52]	; (8001e10 <HAL_Init+0x40>)
 8001dda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001dde:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001de0:	4b0b      	ldr	r3, [pc, #44]	; (8001e10 <HAL_Init+0x40>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a0a      	ldr	r2, [pc, #40]	; (8001e10 <HAL_Init+0x40>)
 8001de6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001dea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001dec:	4b08      	ldr	r3, [pc, #32]	; (8001e10 <HAL_Init+0x40>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a07      	ldr	r2, [pc, #28]	; (8001e10 <HAL_Init+0x40>)
 8001df2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001df6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001df8:	2003      	movs	r0, #3
 8001dfa:	f000 f94f 	bl	800209c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001dfe:	2000      	movs	r0, #0
 8001e00:	f000 f808 	bl	8001e14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e04:	f7ff fe00 	bl	8001a08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e08:	2300      	movs	r3, #0
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	40023c00 	.word	0x40023c00

08001e14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e1c:	4b12      	ldr	r3, [pc, #72]	; (8001e68 <HAL_InitTick+0x54>)
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	4b12      	ldr	r3, [pc, #72]	; (8001e6c <HAL_InitTick+0x58>)
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	4619      	mov	r1, r3
 8001e26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e32:	4618      	mov	r0, r3
 8001e34:	f000 f967 	bl	8002106 <HAL_SYSTICK_Config>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d001      	beq.n	8001e42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e00e      	b.n	8001e60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2b0f      	cmp	r3, #15
 8001e46:	d80a      	bhi.n	8001e5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e48:	2200      	movs	r2, #0
 8001e4a:	6879      	ldr	r1, [r7, #4]
 8001e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e50:	f000 f92f 	bl	80020b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e54:	4a06      	ldr	r2, [pc, #24]	; (8001e70 <HAL_InitTick+0x5c>)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	e000      	b.n	8001e60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	3708      	adds	r7, #8
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	2000006c 	.word	0x2000006c
 8001e6c:	20000074 	.word	0x20000074
 8001e70:	20000070 	.word	0x20000070

08001e74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e74:	b480      	push	{r7}
 8001e76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e78:	4b06      	ldr	r3, [pc, #24]	; (8001e94 <HAL_IncTick+0x20>)
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	4b06      	ldr	r3, [pc, #24]	; (8001e98 <HAL_IncTick+0x24>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4413      	add	r3, r2
 8001e84:	4a04      	ldr	r2, [pc, #16]	; (8001e98 <HAL_IncTick+0x24>)
 8001e86:	6013      	str	r3, [r2, #0]
}
 8001e88:	bf00      	nop
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr
 8001e92:	bf00      	nop
 8001e94:	20000074 	.word	0x20000074
 8001e98:	200004d8 	.word	0x200004d8

08001e9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0
  return uwTick;
 8001ea0:	4b03      	ldr	r3, [pc, #12]	; (8001eb0 <HAL_GetTick+0x14>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	200004d8 	.word	0x200004d8

08001eb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b084      	sub	sp, #16
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ebc:	f7ff ffee 	bl	8001e9c <HAL_GetTick>
 8001ec0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ecc:	d005      	beq.n	8001eda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ece:	4b0a      	ldr	r3, [pc, #40]	; (8001ef8 <HAL_Delay+0x44>)
 8001ed0:	781b      	ldrb	r3, [r3, #0]
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	4413      	add	r3, r2
 8001ed8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001eda:	bf00      	nop
 8001edc:	f7ff ffde 	bl	8001e9c <HAL_GetTick>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	68fa      	ldr	r2, [r7, #12]
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d8f7      	bhi.n	8001edc <HAL_Delay+0x28>
  {
  }
}
 8001eec:	bf00      	nop
 8001eee:	bf00      	nop
 8001ef0:	3710      	adds	r7, #16
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	20000074 	.word	0x20000074

08001efc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b085      	sub	sp, #20
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	f003 0307 	and.w	r3, r3, #7
 8001f0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f0c:	4b0c      	ldr	r3, [pc, #48]	; (8001f40 <__NVIC_SetPriorityGrouping+0x44>)
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f12:	68ba      	ldr	r2, [r7, #8]
 8001f14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f18:	4013      	ands	r3, r2
 8001f1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f2e:	4a04      	ldr	r2, [pc, #16]	; (8001f40 <__NVIC_SetPriorityGrouping+0x44>)
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	60d3      	str	r3, [r2, #12]
}
 8001f34:	bf00      	nop
 8001f36:	3714      	adds	r7, #20
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr
 8001f40:	e000ed00 	.word	0xe000ed00

08001f44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f48:	4b04      	ldr	r3, [pc, #16]	; (8001f5c <__NVIC_GetPriorityGrouping+0x18>)
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	0a1b      	lsrs	r3, r3, #8
 8001f4e:	f003 0307 	and.w	r3, r3, #7
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr
 8001f5c:	e000ed00 	.word	0xe000ed00

08001f60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	4603      	mov	r3, r0
 8001f68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	db0b      	blt.n	8001f8a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f72:	79fb      	ldrb	r3, [r7, #7]
 8001f74:	f003 021f 	and.w	r2, r3, #31
 8001f78:	4907      	ldr	r1, [pc, #28]	; (8001f98 <__NVIC_EnableIRQ+0x38>)
 8001f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f7e:	095b      	lsrs	r3, r3, #5
 8001f80:	2001      	movs	r0, #1
 8001f82:	fa00 f202 	lsl.w	r2, r0, r2
 8001f86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f8a:	bf00      	nop
 8001f8c:	370c      	adds	r7, #12
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr
 8001f96:	bf00      	nop
 8001f98:	e000e100 	.word	0xe000e100

08001f9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	6039      	str	r1, [r7, #0]
 8001fa6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	db0a      	blt.n	8001fc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	b2da      	uxtb	r2, r3
 8001fb4:	490c      	ldr	r1, [pc, #48]	; (8001fe8 <__NVIC_SetPriority+0x4c>)
 8001fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fba:	0112      	lsls	r2, r2, #4
 8001fbc:	b2d2      	uxtb	r2, r2
 8001fbe:	440b      	add	r3, r1
 8001fc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fc4:	e00a      	b.n	8001fdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	b2da      	uxtb	r2, r3
 8001fca:	4908      	ldr	r1, [pc, #32]	; (8001fec <__NVIC_SetPriority+0x50>)
 8001fcc:	79fb      	ldrb	r3, [r7, #7]
 8001fce:	f003 030f 	and.w	r3, r3, #15
 8001fd2:	3b04      	subs	r3, #4
 8001fd4:	0112      	lsls	r2, r2, #4
 8001fd6:	b2d2      	uxtb	r2, r2
 8001fd8:	440b      	add	r3, r1
 8001fda:	761a      	strb	r2, [r3, #24]
}
 8001fdc:	bf00      	nop
 8001fde:	370c      	adds	r7, #12
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr
 8001fe8:	e000e100 	.word	0xe000e100
 8001fec:	e000ed00 	.word	0xe000ed00

08001ff0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b089      	sub	sp, #36	; 0x24
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	60f8      	str	r0, [r7, #12]
 8001ff8:	60b9      	str	r1, [r7, #8]
 8001ffa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	f003 0307 	and.w	r3, r3, #7
 8002002:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002004:	69fb      	ldr	r3, [r7, #28]
 8002006:	f1c3 0307 	rsb	r3, r3, #7
 800200a:	2b04      	cmp	r3, #4
 800200c:	bf28      	it	cs
 800200e:	2304      	movcs	r3, #4
 8002010:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	3304      	adds	r3, #4
 8002016:	2b06      	cmp	r3, #6
 8002018:	d902      	bls.n	8002020 <NVIC_EncodePriority+0x30>
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	3b03      	subs	r3, #3
 800201e:	e000      	b.n	8002022 <NVIC_EncodePriority+0x32>
 8002020:	2300      	movs	r3, #0
 8002022:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002024:	f04f 32ff 	mov.w	r2, #4294967295
 8002028:	69bb      	ldr	r3, [r7, #24]
 800202a:	fa02 f303 	lsl.w	r3, r2, r3
 800202e:	43da      	mvns	r2, r3
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	401a      	ands	r2, r3
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002038:	f04f 31ff 	mov.w	r1, #4294967295
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	fa01 f303 	lsl.w	r3, r1, r3
 8002042:	43d9      	mvns	r1, r3
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002048:	4313      	orrs	r3, r2
         );
}
 800204a:	4618      	mov	r0, r3
 800204c:	3724      	adds	r7, #36	; 0x24
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr
	...

08002058 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	3b01      	subs	r3, #1
 8002064:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002068:	d301      	bcc.n	800206e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800206a:	2301      	movs	r3, #1
 800206c:	e00f      	b.n	800208e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800206e:	4a0a      	ldr	r2, [pc, #40]	; (8002098 <SysTick_Config+0x40>)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	3b01      	subs	r3, #1
 8002074:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002076:	210f      	movs	r1, #15
 8002078:	f04f 30ff 	mov.w	r0, #4294967295
 800207c:	f7ff ff8e 	bl	8001f9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002080:	4b05      	ldr	r3, [pc, #20]	; (8002098 <SysTick_Config+0x40>)
 8002082:	2200      	movs	r2, #0
 8002084:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002086:	4b04      	ldr	r3, [pc, #16]	; (8002098 <SysTick_Config+0x40>)
 8002088:	2207      	movs	r2, #7
 800208a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800208c:	2300      	movs	r3, #0
}
 800208e:	4618      	mov	r0, r3
 8002090:	3708      	adds	r7, #8
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	e000e010 	.word	0xe000e010

0800209c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020a4:	6878      	ldr	r0, [r7, #4]
 80020a6:	f7ff ff29 	bl	8001efc <__NVIC_SetPriorityGrouping>
}
 80020aa:	bf00      	nop
 80020ac:	3708      	adds	r7, #8
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}

080020b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020b2:	b580      	push	{r7, lr}
 80020b4:	b086      	sub	sp, #24
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	4603      	mov	r3, r0
 80020ba:	60b9      	str	r1, [r7, #8]
 80020bc:	607a      	str	r2, [r7, #4]
 80020be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020c0:	2300      	movs	r3, #0
 80020c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020c4:	f7ff ff3e 	bl	8001f44 <__NVIC_GetPriorityGrouping>
 80020c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020ca:	687a      	ldr	r2, [r7, #4]
 80020cc:	68b9      	ldr	r1, [r7, #8]
 80020ce:	6978      	ldr	r0, [r7, #20]
 80020d0:	f7ff ff8e 	bl	8001ff0 <NVIC_EncodePriority>
 80020d4:	4602      	mov	r2, r0
 80020d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020da:	4611      	mov	r1, r2
 80020dc:	4618      	mov	r0, r3
 80020de:	f7ff ff5d 	bl	8001f9c <__NVIC_SetPriority>
}
 80020e2:	bf00      	nop
 80020e4:	3718      	adds	r7, #24
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}

080020ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020ea:	b580      	push	{r7, lr}
 80020ec:	b082      	sub	sp, #8
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	4603      	mov	r3, r0
 80020f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020f8:	4618      	mov	r0, r3
 80020fa:	f7ff ff31 	bl	8001f60 <__NVIC_EnableIRQ>
}
 80020fe:	bf00      	nop
 8002100:	3708      	adds	r7, #8
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}

08002106 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002106:	b580      	push	{r7, lr}
 8002108:	b082      	sub	sp, #8
 800210a:	af00      	add	r7, sp, #0
 800210c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f7ff ffa2 	bl	8002058 <SysTick_Config>
 8002114:	4603      	mov	r3, r0
}
 8002116:	4618      	mov	r0, r3
 8002118:	3708      	adds	r7, #8
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}

0800211e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800211e:	b580      	push	{r7, lr}
 8002120:	b084      	sub	sp, #16
 8002122:	af00      	add	r7, sp, #0
 8002124:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800212a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800212c:	f7ff feb6 	bl	8001e9c <HAL_GetTick>
 8002130:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002138:	b2db      	uxtb	r3, r3
 800213a:	2b02      	cmp	r3, #2
 800213c:	d008      	beq.n	8002150 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2280      	movs	r2, #128	; 0x80
 8002142:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2200      	movs	r2, #0
 8002148:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	e052      	b.n	80021f6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f022 0216 	bic.w	r2, r2, #22
 800215e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	695a      	ldr	r2, [r3, #20]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800216e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002174:	2b00      	cmp	r3, #0
 8002176:	d103      	bne.n	8002180 <HAL_DMA_Abort+0x62>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800217c:	2b00      	cmp	r3, #0
 800217e:	d007      	beq.n	8002190 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f022 0208 	bic.w	r2, r2, #8
 800218e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f022 0201 	bic.w	r2, r2, #1
 800219e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021a0:	e013      	b.n	80021ca <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80021a2:	f7ff fe7b 	bl	8001e9c <HAL_GetTick>
 80021a6:	4602      	mov	r2, r0
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	1ad3      	subs	r3, r2, r3
 80021ac:	2b05      	cmp	r3, #5
 80021ae:	d90c      	bls.n	80021ca <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2220      	movs	r2, #32
 80021b4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2203      	movs	r2, #3
 80021ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2200      	movs	r2, #0
 80021c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80021c6:	2303      	movs	r3, #3
 80021c8:	e015      	b.n	80021f6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 0301 	and.w	r3, r3, #1
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d1e4      	bne.n	80021a2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021dc:	223f      	movs	r2, #63	; 0x3f
 80021de:	409a      	lsls	r2, r3
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2201      	movs	r2, #1
 80021e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2200      	movs	r2, #0
 80021f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80021f4:	2300      	movs	r3, #0
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3710      	adds	r7, #16
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}

080021fe <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80021fe:	b480      	push	{r7}
 8002200:	b083      	sub	sp, #12
 8002202:	af00      	add	r7, sp, #0
 8002204:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800220c:	b2db      	uxtb	r3, r3
 800220e:	2b02      	cmp	r3, #2
 8002210:	d004      	beq.n	800221c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2280      	movs	r2, #128	; 0x80
 8002216:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	e00c      	b.n	8002236 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2205      	movs	r2, #5
 8002220:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f022 0201 	bic.w	r2, r2, #1
 8002232:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002234:	2300      	movs	r3, #0
}
 8002236:	4618      	mov	r0, r3
 8002238:	370c      	adds	r7, #12
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr

08002242 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002242:	b480      	push	{r7}
 8002244:	b083      	sub	sp, #12
 8002246:	af00      	add	r7, sp, #0
 8002248:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002250:	b2db      	uxtb	r3, r3
}
 8002252:	4618      	mov	r0, r3
 8002254:	370c      	adds	r7, #12
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr
	...

08002260 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002260:	b480      	push	{r7}
 8002262:	b089      	sub	sp, #36	; 0x24
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800226a:	2300      	movs	r3, #0
 800226c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800226e:	2300      	movs	r3, #0
 8002270:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002272:	2300      	movs	r3, #0
 8002274:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002276:	2300      	movs	r3, #0
 8002278:	61fb      	str	r3, [r7, #28]
 800227a:	e177      	b.n	800256c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800227c:	2201      	movs	r2, #1
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	fa02 f303 	lsl.w	r3, r2, r3
 8002284:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	697a      	ldr	r2, [r7, #20]
 800228c:	4013      	ands	r3, r2
 800228e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002290:	693a      	ldr	r2, [r7, #16]
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	429a      	cmp	r2, r3
 8002296:	f040 8166 	bne.w	8002566 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	f003 0303 	and.w	r3, r3, #3
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d005      	beq.n	80022b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022ae:	2b02      	cmp	r3, #2
 80022b0:	d130      	bne.n	8002314 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022b8:	69fb      	ldr	r3, [r7, #28]
 80022ba:	005b      	lsls	r3, r3, #1
 80022bc:	2203      	movs	r2, #3
 80022be:	fa02 f303 	lsl.w	r3, r2, r3
 80022c2:	43db      	mvns	r3, r3
 80022c4:	69ba      	ldr	r2, [r7, #24]
 80022c6:	4013      	ands	r3, r2
 80022c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	68da      	ldr	r2, [r3, #12]
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	005b      	lsls	r3, r3, #1
 80022d2:	fa02 f303 	lsl.w	r3, r2, r3
 80022d6:	69ba      	ldr	r2, [r7, #24]
 80022d8:	4313      	orrs	r3, r2
 80022da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	69ba      	ldr	r2, [r7, #24]
 80022e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022e8:	2201      	movs	r2, #1
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	fa02 f303 	lsl.w	r3, r2, r3
 80022f0:	43db      	mvns	r3, r3
 80022f2:	69ba      	ldr	r2, [r7, #24]
 80022f4:	4013      	ands	r3, r2
 80022f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	091b      	lsrs	r3, r3, #4
 80022fe:	f003 0201 	and.w	r2, r3, #1
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	fa02 f303 	lsl.w	r3, r2, r3
 8002308:	69ba      	ldr	r2, [r7, #24]
 800230a:	4313      	orrs	r3, r2
 800230c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	69ba      	ldr	r2, [r7, #24]
 8002312:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	f003 0303 	and.w	r3, r3, #3
 800231c:	2b03      	cmp	r3, #3
 800231e:	d017      	beq.n	8002350 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	005b      	lsls	r3, r3, #1
 800232a:	2203      	movs	r2, #3
 800232c:	fa02 f303 	lsl.w	r3, r2, r3
 8002330:	43db      	mvns	r3, r3
 8002332:	69ba      	ldr	r2, [r7, #24]
 8002334:	4013      	ands	r3, r2
 8002336:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	689a      	ldr	r2, [r3, #8]
 800233c:	69fb      	ldr	r3, [r7, #28]
 800233e:	005b      	lsls	r3, r3, #1
 8002340:	fa02 f303 	lsl.w	r3, r2, r3
 8002344:	69ba      	ldr	r2, [r7, #24]
 8002346:	4313      	orrs	r3, r2
 8002348:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	69ba      	ldr	r2, [r7, #24]
 800234e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f003 0303 	and.w	r3, r3, #3
 8002358:	2b02      	cmp	r3, #2
 800235a:	d123      	bne.n	80023a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800235c:	69fb      	ldr	r3, [r7, #28]
 800235e:	08da      	lsrs	r2, r3, #3
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	3208      	adds	r2, #8
 8002364:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002368:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	f003 0307 	and.w	r3, r3, #7
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	220f      	movs	r2, #15
 8002374:	fa02 f303 	lsl.w	r3, r2, r3
 8002378:	43db      	mvns	r3, r3
 800237a:	69ba      	ldr	r2, [r7, #24]
 800237c:	4013      	ands	r3, r2
 800237e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	691a      	ldr	r2, [r3, #16]
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	f003 0307 	and.w	r3, r3, #7
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	fa02 f303 	lsl.w	r3, r2, r3
 8002390:	69ba      	ldr	r2, [r7, #24]
 8002392:	4313      	orrs	r3, r2
 8002394:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	08da      	lsrs	r2, r3, #3
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	3208      	adds	r2, #8
 800239e:	69b9      	ldr	r1, [r7, #24]
 80023a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	005b      	lsls	r3, r3, #1
 80023ae:	2203      	movs	r2, #3
 80023b0:	fa02 f303 	lsl.w	r3, r2, r3
 80023b4:	43db      	mvns	r3, r3
 80023b6:	69ba      	ldr	r2, [r7, #24]
 80023b8:	4013      	ands	r3, r2
 80023ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f003 0203 	and.w	r2, r3, #3
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	005b      	lsls	r3, r3, #1
 80023c8:	fa02 f303 	lsl.w	r3, r2, r3
 80023cc:	69ba      	ldr	r2, [r7, #24]
 80023ce:	4313      	orrs	r3, r2
 80023d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	69ba      	ldr	r2, [r7, #24]
 80023d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	f000 80c0 	beq.w	8002566 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023e6:	2300      	movs	r3, #0
 80023e8:	60fb      	str	r3, [r7, #12]
 80023ea:	4b66      	ldr	r3, [pc, #408]	; (8002584 <HAL_GPIO_Init+0x324>)
 80023ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ee:	4a65      	ldr	r2, [pc, #404]	; (8002584 <HAL_GPIO_Init+0x324>)
 80023f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023f4:	6453      	str	r3, [r2, #68]	; 0x44
 80023f6:	4b63      	ldr	r3, [pc, #396]	; (8002584 <HAL_GPIO_Init+0x324>)
 80023f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023fe:	60fb      	str	r3, [r7, #12]
 8002400:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002402:	4a61      	ldr	r2, [pc, #388]	; (8002588 <HAL_GPIO_Init+0x328>)
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	089b      	lsrs	r3, r3, #2
 8002408:	3302      	adds	r3, #2
 800240a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800240e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002410:	69fb      	ldr	r3, [r7, #28]
 8002412:	f003 0303 	and.w	r3, r3, #3
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	220f      	movs	r2, #15
 800241a:	fa02 f303 	lsl.w	r3, r2, r3
 800241e:	43db      	mvns	r3, r3
 8002420:	69ba      	ldr	r2, [r7, #24]
 8002422:	4013      	ands	r3, r2
 8002424:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4a58      	ldr	r2, [pc, #352]	; (800258c <HAL_GPIO_Init+0x32c>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d037      	beq.n	800249e <HAL_GPIO_Init+0x23e>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4a57      	ldr	r2, [pc, #348]	; (8002590 <HAL_GPIO_Init+0x330>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d031      	beq.n	800249a <HAL_GPIO_Init+0x23a>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	4a56      	ldr	r2, [pc, #344]	; (8002594 <HAL_GPIO_Init+0x334>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d02b      	beq.n	8002496 <HAL_GPIO_Init+0x236>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	4a55      	ldr	r2, [pc, #340]	; (8002598 <HAL_GPIO_Init+0x338>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d025      	beq.n	8002492 <HAL_GPIO_Init+0x232>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	4a54      	ldr	r2, [pc, #336]	; (800259c <HAL_GPIO_Init+0x33c>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d01f      	beq.n	800248e <HAL_GPIO_Init+0x22e>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4a53      	ldr	r2, [pc, #332]	; (80025a0 <HAL_GPIO_Init+0x340>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d019      	beq.n	800248a <HAL_GPIO_Init+0x22a>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4a52      	ldr	r2, [pc, #328]	; (80025a4 <HAL_GPIO_Init+0x344>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d013      	beq.n	8002486 <HAL_GPIO_Init+0x226>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4a51      	ldr	r2, [pc, #324]	; (80025a8 <HAL_GPIO_Init+0x348>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d00d      	beq.n	8002482 <HAL_GPIO_Init+0x222>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4a50      	ldr	r2, [pc, #320]	; (80025ac <HAL_GPIO_Init+0x34c>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d007      	beq.n	800247e <HAL_GPIO_Init+0x21e>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	4a4f      	ldr	r2, [pc, #316]	; (80025b0 <HAL_GPIO_Init+0x350>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d101      	bne.n	800247a <HAL_GPIO_Init+0x21a>
 8002476:	2309      	movs	r3, #9
 8002478:	e012      	b.n	80024a0 <HAL_GPIO_Init+0x240>
 800247a:	230a      	movs	r3, #10
 800247c:	e010      	b.n	80024a0 <HAL_GPIO_Init+0x240>
 800247e:	2308      	movs	r3, #8
 8002480:	e00e      	b.n	80024a0 <HAL_GPIO_Init+0x240>
 8002482:	2307      	movs	r3, #7
 8002484:	e00c      	b.n	80024a0 <HAL_GPIO_Init+0x240>
 8002486:	2306      	movs	r3, #6
 8002488:	e00a      	b.n	80024a0 <HAL_GPIO_Init+0x240>
 800248a:	2305      	movs	r3, #5
 800248c:	e008      	b.n	80024a0 <HAL_GPIO_Init+0x240>
 800248e:	2304      	movs	r3, #4
 8002490:	e006      	b.n	80024a0 <HAL_GPIO_Init+0x240>
 8002492:	2303      	movs	r3, #3
 8002494:	e004      	b.n	80024a0 <HAL_GPIO_Init+0x240>
 8002496:	2302      	movs	r3, #2
 8002498:	e002      	b.n	80024a0 <HAL_GPIO_Init+0x240>
 800249a:	2301      	movs	r3, #1
 800249c:	e000      	b.n	80024a0 <HAL_GPIO_Init+0x240>
 800249e:	2300      	movs	r3, #0
 80024a0:	69fa      	ldr	r2, [r7, #28]
 80024a2:	f002 0203 	and.w	r2, r2, #3
 80024a6:	0092      	lsls	r2, r2, #2
 80024a8:	4093      	lsls	r3, r2
 80024aa:	69ba      	ldr	r2, [r7, #24]
 80024ac:	4313      	orrs	r3, r2
 80024ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024b0:	4935      	ldr	r1, [pc, #212]	; (8002588 <HAL_GPIO_Init+0x328>)
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	089b      	lsrs	r3, r3, #2
 80024b6:	3302      	adds	r3, #2
 80024b8:	69ba      	ldr	r2, [r7, #24]
 80024ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024be:	4b3d      	ldr	r3, [pc, #244]	; (80025b4 <HAL_GPIO_Init+0x354>)
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	43db      	mvns	r3, r3
 80024c8:	69ba      	ldr	r2, [r7, #24]
 80024ca:	4013      	ands	r3, r2
 80024cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d003      	beq.n	80024e2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80024da:	69ba      	ldr	r2, [r7, #24]
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	4313      	orrs	r3, r2
 80024e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024e2:	4a34      	ldr	r2, [pc, #208]	; (80025b4 <HAL_GPIO_Init+0x354>)
 80024e4:	69bb      	ldr	r3, [r7, #24]
 80024e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024e8:	4b32      	ldr	r3, [pc, #200]	; (80025b4 <HAL_GPIO_Init+0x354>)
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	43db      	mvns	r3, r3
 80024f2:	69ba      	ldr	r2, [r7, #24]
 80024f4:	4013      	ands	r3, r2
 80024f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002500:	2b00      	cmp	r3, #0
 8002502:	d003      	beq.n	800250c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002504:	69ba      	ldr	r2, [r7, #24]
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	4313      	orrs	r3, r2
 800250a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800250c:	4a29      	ldr	r2, [pc, #164]	; (80025b4 <HAL_GPIO_Init+0x354>)
 800250e:	69bb      	ldr	r3, [r7, #24]
 8002510:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002512:	4b28      	ldr	r3, [pc, #160]	; (80025b4 <HAL_GPIO_Init+0x354>)
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	43db      	mvns	r3, r3
 800251c:	69ba      	ldr	r2, [r7, #24]
 800251e:	4013      	ands	r3, r2
 8002520:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d003      	beq.n	8002536 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800252e:	69ba      	ldr	r2, [r7, #24]
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	4313      	orrs	r3, r2
 8002534:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002536:	4a1f      	ldr	r2, [pc, #124]	; (80025b4 <HAL_GPIO_Init+0x354>)
 8002538:	69bb      	ldr	r3, [r7, #24]
 800253a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800253c:	4b1d      	ldr	r3, [pc, #116]	; (80025b4 <HAL_GPIO_Init+0x354>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	43db      	mvns	r3, r3
 8002546:	69ba      	ldr	r2, [r7, #24]
 8002548:	4013      	ands	r3, r2
 800254a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002554:	2b00      	cmp	r3, #0
 8002556:	d003      	beq.n	8002560 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002558:	69ba      	ldr	r2, [r7, #24]
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	4313      	orrs	r3, r2
 800255e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002560:	4a14      	ldr	r2, [pc, #80]	; (80025b4 <HAL_GPIO_Init+0x354>)
 8002562:	69bb      	ldr	r3, [r7, #24]
 8002564:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	3301      	adds	r3, #1
 800256a:	61fb      	str	r3, [r7, #28]
 800256c:	69fb      	ldr	r3, [r7, #28]
 800256e:	2b0f      	cmp	r3, #15
 8002570:	f67f ae84 	bls.w	800227c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002574:	bf00      	nop
 8002576:	bf00      	nop
 8002578:	3724      	adds	r7, #36	; 0x24
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr
 8002582:	bf00      	nop
 8002584:	40023800 	.word	0x40023800
 8002588:	40013800 	.word	0x40013800
 800258c:	40020000 	.word	0x40020000
 8002590:	40020400 	.word	0x40020400
 8002594:	40020800 	.word	0x40020800
 8002598:	40020c00 	.word	0x40020c00
 800259c:	40021000 	.word	0x40021000
 80025a0:	40021400 	.word	0x40021400
 80025a4:	40021800 	.word	0x40021800
 80025a8:	40021c00 	.word	0x40021c00
 80025ac:	40022000 	.word	0x40022000
 80025b0:	40022400 	.word	0x40022400
 80025b4:	40013c00 	.word	0x40013c00

080025b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b083      	sub	sp, #12
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
 80025c0:	460b      	mov	r3, r1
 80025c2:	807b      	strh	r3, [r7, #2]
 80025c4:	4613      	mov	r3, r2
 80025c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025c8:	787b      	ldrb	r3, [r7, #1]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d003      	beq.n	80025d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025ce:	887a      	ldrh	r2, [r7, #2]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80025d4:	e003      	b.n	80025de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80025d6:	887b      	ldrh	r3, [r7, #2]
 80025d8:	041a      	lsls	r2, r3, #16
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	619a      	str	r2, [r3, #24]
}
 80025de:	bf00      	nop
 80025e0:	370c      	adds	r7, #12
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr
	...

080025ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b084      	sub	sp, #16
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d101      	bne.n	80025fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e12b      	b.n	8002856 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002604:	b2db      	uxtb	r3, r3
 8002606:	2b00      	cmp	r3, #0
 8002608:	d106      	bne.n	8002618 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2200      	movs	r2, #0
 800260e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	f7ff f89a 	bl	800174c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2224      	movs	r2, #36	; 0x24
 800261c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f022 0201 	bic.w	r2, r2, #1
 800262e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800263e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800264e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002650:	f003 face 	bl	8005bf0 <HAL_RCC_GetPCLK1Freq>
 8002654:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	4a81      	ldr	r2, [pc, #516]	; (8002860 <HAL_I2C_Init+0x274>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d807      	bhi.n	8002670 <HAL_I2C_Init+0x84>
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	4a80      	ldr	r2, [pc, #512]	; (8002864 <HAL_I2C_Init+0x278>)
 8002664:	4293      	cmp	r3, r2
 8002666:	bf94      	ite	ls
 8002668:	2301      	movls	r3, #1
 800266a:	2300      	movhi	r3, #0
 800266c:	b2db      	uxtb	r3, r3
 800266e:	e006      	b.n	800267e <HAL_I2C_Init+0x92>
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	4a7d      	ldr	r2, [pc, #500]	; (8002868 <HAL_I2C_Init+0x27c>)
 8002674:	4293      	cmp	r3, r2
 8002676:	bf94      	ite	ls
 8002678:	2301      	movls	r3, #1
 800267a:	2300      	movhi	r3, #0
 800267c:	b2db      	uxtb	r3, r3
 800267e:	2b00      	cmp	r3, #0
 8002680:	d001      	beq.n	8002686 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e0e7      	b.n	8002856 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	4a78      	ldr	r2, [pc, #480]	; (800286c <HAL_I2C_Init+0x280>)
 800268a:	fba2 2303 	umull	r2, r3, r2, r3
 800268e:	0c9b      	lsrs	r3, r3, #18
 8002690:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	68ba      	ldr	r2, [r7, #8]
 80026a2:	430a      	orrs	r2, r1
 80026a4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	6a1b      	ldr	r3, [r3, #32]
 80026ac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	4a6a      	ldr	r2, [pc, #424]	; (8002860 <HAL_I2C_Init+0x274>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d802      	bhi.n	80026c0 <HAL_I2C_Init+0xd4>
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	3301      	adds	r3, #1
 80026be:	e009      	b.n	80026d4 <HAL_I2C_Init+0xe8>
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80026c6:	fb02 f303 	mul.w	r3, r2, r3
 80026ca:	4a69      	ldr	r2, [pc, #420]	; (8002870 <HAL_I2C_Init+0x284>)
 80026cc:	fba2 2303 	umull	r2, r3, r2, r3
 80026d0:	099b      	lsrs	r3, r3, #6
 80026d2:	3301      	adds	r3, #1
 80026d4:	687a      	ldr	r2, [r7, #4]
 80026d6:	6812      	ldr	r2, [r2, #0]
 80026d8:	430b      	orrs	r3, r1
 80026da:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	69db      	ldr	r3, [r3, #28]
 80026e2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80026e6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	495c      	ldr	r1, [pc, #368]	; (8002860 <HAL_I2C_Init+0x274>)
 80026f0:	428b      	cmp	r3, r1
 80026f2:	d819      	bhi.n	8002728 <HAL_I2C_Init+0x13c>
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	1e59      	subs	r1, r3, #1
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	005b      	lsls	r3, r3, #1
 80026fe:	fbb1 f3f3 	udiv	r3, r1, r3
 8002702:	1c59      	adds	r1, r3, #1
 8002704:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002708:	400b      	ands	r3, r1
 800270a:	2b00      	cmp	r3, #0
 800270c:	d00a      	beq.n	8002724 <HAL_I2C_Init+0x138>
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	1e59      	subs	r1, r3, #1
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	005b      	lsls	r3, r3, #1
 8002718:	fbb1 f3f3 	udiv	r3, r1, r3
 800271c:	3301      	adds	r3, #1
 800271e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002722:	e051      	b.n	80027c8 <HAL_I2C_Init+0x1dc>
 8002724:	2304      	movs	r3, #4
 8002726:	e04f      	b.n	80027c8 <HAL_I2C_Init+0x1dc>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d111      	bne.n	8002754 <HAL_I2C_Init+0x168>
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	1e58      	subs	r0, r3, #1
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6859      	ldr	r1, [r3, #4]
 8002738:	460b      	mov	r3, r1
 800273a:	005b      	lsls	r3, r3, #1
 800273c:	440b      	add	r3, r1
 800273e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002742:	3301      	adds	r3, #1
 8002744:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002748:	2b00      	cmp	r3, #0
 800274a:	bf0c      	ite	eq
 800274c:	2301      	moveq	r3, #1
 800274e:	2300      	movne	r3, #0
 8002750:	b2db      	uxtb	r3, r3
 8002752:	e012      	b.n	800277a <HAL_I2C_Init+0x18e>
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	1e58      	subs	r0, r3, #1
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6859      	ldr	r1, [r3, #4]
 800275c:	460b      	mov	r3, r1
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	440b      	add	r3, r1
 8002762:	0099      	lsls	r1, r3, #2
 8002764:	440b      	add	r3, r1
 8002766:	fbb0 f3f3 	udiv	r3, r0, r3
 800276a:	3301      	adds	r3, #1
 800276c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002770:	2b00      	cmp	r3, #0
 8002772:	bf0c      	ite	eq
 8002774:	2301      	moveq	r3, #1
 8002776:	2300      	movne	r3, #0
 8002778:	b2db      	uxtb	r3, r3
 800277a:	2b00      	cmp	r3, #0
 800277c:	d001      	beq.n	8002782 <HAL_I2C_Init+0x196>
 800277e:	2301      	movs	r3, #1
 8002780:	e022      	b.n	80027c8 <HAL_I2C_Init+0x1dc>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d10e      	bne.n	80027a8 <HAL_I2C_Init+0x1bc>
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	1e58      	subs	r0, r3, #1
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6859      	ldr	r1, [r3, #4]
 8002792:	460b      	mov	r3, r1
 8002794:	005b      	lsls	r3, r3, #1
 8002796:	440b      	add	r3, r1
 8002798:	fbb0 f3f3 	udiv	r3, r0, r3
 800279c:	3301      	adds	r3, #1
 800279e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027a6:	e00f      	b.n	80027c8 <HAL_I2C_Init+0x1dc>
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	1e58      	subs	r0, r3, #1
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6859      	ldr	r1, [r3, #4]
 80027b0:	460b      	mov	r3, r1
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	440b      	add	r3, r1
 80027b6:	0099      	lsls	r1, r3, #2
 80027b8:	440b      	add	r3, r1
 80027ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80027be:	3301      	adds	r3, #1
 80027c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80027c8:	6879      	ldr	r1, [r7, #4]
 80027ca:	6809      	ldr	r1, [r1, #0]
 80027cc:	4313      	orrs	r3, r2
 80027ce:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	69da      	ldr	r2, [r3, #28]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6a1b      	ldr	r3, [r3, #32]
 80027e2:	431a      	orrs	r2, r3
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	430a      	orrs	r2, r1
 80027ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80027f6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80027fa:	687a      	ldr	r2, [r7, #4]
 80027fc:	6911      	ldr	r1, [r2, #16]
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	68d2      	ldr	r2, [r2, #12]
 8002802:	4311      	orrs	r1, r2
 8002804:	687a      	ldr	r2, [r7, #4]
 8002806:	6812      	ldr	r2, [r2, #0]
 8002808:	430b      	orrs	r3, r1
 800280a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	68db      	ldr	r3, [r3, #12]
 8002812:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	695a      	ldr	r2, [r3, #20]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	699b      	ldr	r3, [r3, #24]
 800281e:	431a      	orrs	r2, r3
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	430a      	orrs	r2, r1
 8002826:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f042 0201 	orr.w	r2, r2, #1
 8002836:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2200      	movs	r2, #0
 800283c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2220      	movs	r2, #32
 8002842:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2200      	movs	r2, #0
 800284a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2200      	movs	r2, #0
 8002850:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002854:	2300      	movs	r3, #0
}
 8002856:	4618      	mov	r0, r3
 8002858:	3710      	adds	r7, #16
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	000186a0 	.word	0x000186a0
 8002864:	001e847f 	.word	0x001e847f
 8002868:	003d08ff 	.word	0x003d08ff
 800286c:	431bde83 	.word	0x431bde83
 8002870:	10624dd3 	.word	0x10624dd3

08002874 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b088      	sub	sp, #32
 8002878:	af02      	add	r7, sp, #8
 800287a:	60f8      	str	r0, [r7, #12]
 800287c:	607a      	str	r2, [r7, #4]
 800287e:	461a      	mov	r2, r3
 8002880:	460b      	mov	r3, r1
 8002882:	817b      	strh	r3, [r7, #10]
 8002884:	4613      	mov	r3, r2
 8002886:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002888:	f7ff fb08 	bl	8001e9c <HAL_GetTick>
 800288c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002894:	b2db      	uxtb	r3, r3
 8002896:	2b20      	cmp	r3, #32
 8002898:	f040 80e0 	bne.w	8002a5c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	9300      	str	r3, [sp, #0]
 80028a0:	2319      	movs	r3, #25
 80028a2:	2201      	movs	r2, #1
 80028a4:	4970      	ldr	r1, [pc, #448]	; (8002a68 <HAL_I2C_Master_Transmit+0x1f4>)
 80028a6:	68f8      	ldr	r0, [r7, #12]
 80028a8:	f002 fa3c 	bl	8004d24 <I2C_WaitOnFlagUntilTimeout>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d001      	beq.n	80028b6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80028b2:	2302      	movs	r3, #2
 80028b4:	e0d3      	b.n	8002a5e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d101      	bne.n	80028c4 <HAL_I2C_Master_Transmit+0x50>
 80028c0:	2302      	movs	r3, #2
 80028c2:	e0cc      	b.n	8002a5e <HAL_I2C_Master_Transmit+0x1ea>
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2201      	movs	r2, #1
 80028c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 0301 	and.w	r3, r3, #1
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d007      	beq.n	80028ea <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f042 0201 	orr.w	r2, r2, #1
 80028e8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028f8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2221      	movs	r2, #33	; 0x21
 80028fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2210      	movs	r2, #16
 8002906:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	2200      	movs	r2, #0
 800290e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	893a      	ldrh	r2, [r7, #8]
 800291a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002920:	b29a      	uxth	r2, r3
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	4a50      	ldr	r2, [pc, #320]	; (8002a6c <HAL_I2C_Master_Transmit+0x1f8>)
 800292a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800292c:	8979      	ldrh	r1, [r7, #10]
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	6a3a      	ldr	r2, [r7, #32]
 8002932:	68f8      	ldr	r0, [r7, #12]
 8002934:	f001 ffe4 	bl	8004900 <I2C_MasterRequestWrite>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d001      	beq.n	8002942 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e08d      	b.n	8002a5e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002942:	2300      	movs	r3, #0
 8002944:	613b      	str	r3, [r7, #16]
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	695b      	ldr	r3, [r3, #20]
 800294c:	613b      	str	r3, [r7, #16]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	699b      	ldr	r3, [r3, #24]
 8002954:	613b      	str	r3, [r7, #16]
 8002956:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002958:	e066      	b.n	8002a28 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800295a:	697a      	ldr	r2, [r7, #20]
 800295c:	6a39      	ldr	r1, [r7, #32]
 800295e:	68f8      	ldr	r0, [r7, #12]
 8002960:	f002 fab6 	bl	8004ed0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002964:	4603      	mov	r3, r0
 8002966:	2b00      	cmp	r3, #0
 8002968:	d00d      	beq.n	8002986 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296e:	2b04      	cmp	r3, #4
 8002970:	d107      	bne.n	8002982 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002980:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e06b      	b.n	8002a5e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800298a:	781a      	ldrb	r2, [r3, #0]
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002996:	1c5a      	adds	r2, r3, #1
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029a0:	b29b      	uxth	r3, r3
 80029a2:	3b01      	subs	r3, #1
 80029a4:	b29a      	uxth	r2, r3
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029ae:	3b01      	subs	r3, #1
 80029b0:	b29a      	uxth	r2, r3
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	695b      	ldr	r3, [r3, #20]
 80029bc:	f003 0304 	and.w	r3, r3, #4
 80029c0:	2b04      	cmp	r3, #4
 80029c2:	d11b      	bne.n	80029fc <HAL_I2C_Master_Transmit+0x188>
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d017      	beq.n	80029fc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d0:	781a      	ldrb	r2, [r3, #0]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029dc:	1c5a      	adds	r2, r3, #1
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029e6:	b29b      	uxth	r3, r3
 80029e8:	3b01      	subs	r3, #1
 80029ea:	b29a      	uxth	r2, r3
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029f4:	3b01      	subs	r3, #1
 80029f6:	b29a      	uxth	r2, r3
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029fc:	697a      	ldr	r2, [r7, #20]
 80029fe:	6a39      	ldr	r1, [r7, #32]
 8002a00:	68f8      	ldr	r0, [r7, #12]
 8002a02:	f002 faa6 	bl	8004f52 <I2C_WaitOnBTFFlagUntilTimeout>
 8002a06:	4603      	mov	r3, r0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d00d      	beq.n	8002a28 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a10:	2b04      	cmp	r3, #4
 8002a12:	d107      	bne.n	8002a24 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a22:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	e01a      	b.n	8002a5e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d194      	bne.n	800295a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2220      	movs	r2, #32
 8002a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2200      	movs	r2, #0
 8002a54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	e000      	b.n	8002a5e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002a5c:	2302      	movs	r3, #2
  }
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3718      	adds	r7, #24
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	00100002 	.word	0x00100002
 8002a6c:	ffff0000 	.word	0xffff0000

08002a70 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b08c      	sub	sp, #48	; 0x30
 8002a74:	af02      	add	r7, sp, #8
 8002a76:	60f8      	str	r0, [r7, #12]
 8002a78:	4608      	mov	r0, r1
 8002a7a:	4611      	mov	r1, r2
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	4603      	mov	r3, r0
 8002a80:	817b      	strh	r3, [r7, #10]
 8002a82:	460b      	mov	r3, r1
 8002a84:	813b      	strh	r3, [r7, #8]
 8002a86:	4613      	mov	r3, r2
 8002a88:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002a8a:	f7ff fa07 	bl	8001e9c <HAL_GetTick>
 8002a8e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	2b20      	cmp	r3, #32
 8002a9a:	f040 8208 	bne.w	8002eae <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa0:	9300      	str	r3, [sp, #0]
 8002aa2:	2319      	movs	r3, #25
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	497b      	ldr	r1, [pc, #492]	; (8002c94 <HAL_I2C_Mem_Read+0x224>)
 8002aa8:	68f8      	ldr	r0, [r7, #12]
 8002aaa:	f002 f93b 	bl	8004d24 <I2C_WaitOnFlagUntilTimeout>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d001      	beq.n	8002ab8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002ab4:	2302      	movs	r3, #2
 8002ab6:	e1fb      	b.n	8002eb0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	d101      	bne.n	8002ac6 <HAL_I2C_Mem_Read+0x56>
 8002ac2:	2302      	movs	r3, #2
 8002ac4:	e1f4      	b.n	8002eb0 <HAL_I2C_Mem_Read+0x440>
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2201      	movs	r2, #1
 8002aca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 0301 	and.w	r3, r3, #1
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d007      	beq.n	8002aec <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f042 0201 	orr.w	r2, r2, #1
 8002aea:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002afa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2222      	movs	r2, #34	; 0x22
 8002b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2240      	movs	r2, #64	; 0x40
 8002b08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b16:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002b1c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b22:	b29a      	uxth	r2, r3
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	4a5b      	ldr	r2, [pc, #364]	; (8002c98 <HAL_I2C_Mem_Read+0x228>)
 8002b2c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002b2e:	88f8      	ldrh	r0, [r7, #6]
 8002b30:	893a      	ldrh	r2, [r7, #8]
 8002b32:	8979      	ldrh	r1, [r7, #10]
 8002b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b36:	9301      	str	r3, [sp, #4]
 8002b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b3a:	9300      	str	r3, [sp, #0]
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	68f8      	ldr	r0, [r7, #12]
 8002b40:	f001 ff60 	bl	8004a04 <I2C_RequestMemoryRead>
 8002b44:	4603      	mov	r3, r0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d001      	beq.n	8002b4e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e1b0      	b.n	8002eb0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d113      	bne.n	8002b7e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b56:	2300      	movs	r3, #0
 8002b58:	623b      	str	r3, [r7, #32]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	695b      	ldr	r3, [r3, #20]
 8002b60:	623b      	str	r3, [r7, #32]
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	699b      	ldr	r3, [r3, #24]
 8002b68:	623b      	str	r3, [r7, #32]
 8002b6a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b7a:	601a      	str	r2, [r3, #0]
 8002b7c:	e184      	b.n	8002e88 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d11b      	bne.n	8002bbe <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b94:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b96:	2300      	movs	r3, #0
 8002b98:	61fb      	str	r3, [r7, #28]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	695b      	ldr	r3, [r3, #20]
 8002ba0:	61fb      	str	r3, [r7, #28]
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	699b      	ldr	r3, [r3, #24]
 8002ba8:	61fb      	str	r3, [r7, #28]
 8002baa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bba:	601a      	str	r2, [r3, #0]
 8002bbc:	e164      	b.n	8002e88 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bc2:	2b02      	cmp	r3, #2
 8002bc4:	d11b      	bne.n	8002bfe <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bd4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002be4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002be6:	2300      	movs	r3, #0
 8002be8:	61bb      	str	r3, [r7, #24]
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	695b      	ldr	r3, [r3, #20]
 8002bf0:	61bb      	str	r3, [r7, #24]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	699b      	ldr	r3, [r3, #24]
 8002bf8:	61bb      	str	r3, [r7, #24]
 8002bfa:	69bb      	ldr	r3, [r7, #24]
 8002bfc:	e144      	b.n	8002e88 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bfe:	2300      	movs	r3, #0
 8002c00:	617b      	str	r3, [r7, #20]
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	695b      	ldr	r3, [r3, #20]
 8002c08:	617b      	str	r3, [r7, #20]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	699b      	ldr	r3, [r3, #24]
 8002c10:	617b      	str	r3, [r7, #20]
 8002c12:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002c14:	e138      	b.n	8002e88 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c1a:	2b03      	cmp	r3, #3
 8002c1c:	f200 80f1 	bhi.w	8002e02 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d123      	bne.n	8002c70 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c2a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002c2c:	68f8      	ldr	r0, [r7, #12]
 8002c2e:	f002 fa03 	bl	8005038 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d001      	beq.n	8002c3c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e139      	b.n	8002eb0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	691a      	ldr	r2, [r3, #16]
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c46:	b2d2      	uxtb	r2, r2
 8002c48:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c4e:	1c5a      	adds	r2, r3, #1
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c58:	3b01      	subs	r3, #1
 8002c5a:	b29a      	uxth	r2, r3
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c64:	b29b      	uxth	r3, r3
 8002c66:	3b01      	subs	r3, #1
 8002c68:	b29a      	uxth	r2, r3
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002c6e:	e10b      	b.n	8002e88 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c74:	2b02      	cmp	r3, #2
 8002c76:	d14e      	bne.n	8002d16 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7a:	9300      	str	r3, [sp, #0]
 8002c7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c7e:	2200      	movs	r2, #0
 8002c80:	4906      	ldr	r1, [pc, #24]	; (8002c9c <HAL_I2C_Mem_Read+0x22c>)
 8002c82:	68f8      	ldr	r0, [r7, #12]
 8002c84:	f002 f84e 	bl	8004d24 <I2C_WaitOnFlagUntilTimeout>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d008      	beq.n	8002ca0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e10e      	b.n	8002eb0 <HAL_I2C_Mem_Read+0x440>
 8002c92:	bf00      	nop
 8002c94:	00100002 	.word	0x00100002
 8002c98:	ffff0000 	.word	0xffff0000
 8002c9c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	691a      	ldr	r2, [r3, #16]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cba:	b2d2      	uxtb	r2, r2
 8002cbc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc2:	1c5a      	adds	r2, r3, #1
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ccc:	3b01      	subs	r3, #1
 8002cce:	b29a      	uxth	r2, r3
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cd8:	b29b      	uxth	r3, r3
 8002cda:	3b01      	subs	r3, #1
 8002cdc:	b29a      	uxth	r2, r3
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	691a      	ldr	r2, [r3, #16]
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cec:	b2d2      	uxtb	r2, r2
 8002cee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf4:	1c5a      	adds	r2, r3, #1
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cfe:	3b01      	subs	r3, #1
 8002d00:	b29a      	uxth	r2, r3
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d0a:	b29b      	uxth	r3, r3
 8002d0c:	3b01      	subs	r3, #1
 8002d0e:	b29a      	uxth	r2, r3
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002d14:	e0b8      	b.n	8002e88 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d18:	9300      	str	r3, [sp, #0]
 8002d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	4966      	ldr	r1, [pc, #408]	; (8002eb8 <HAL_I2C_Mem_Read+0x448>)
 8002d20:	68f8      	ldr	r0, [r7, #12]
 8002d22:	f001 ffff 	bl	8004d24 <I2C_WaitOnFlagUntilTimeout>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d001      	beq.n	8002d30 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e0bf      	b.n	8002eb0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d3e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	691a      	ldr	r2, [r3, #16]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d4a:	b2d2      	uxtb	r2, r2
 8002d4c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d52:	1c5a      	adds	r2, r3, #1
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d5c:	3b01      	subs	r3, #1
 8002d5e:	b29a      	uxth	r2, r3
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d68:	b29b      	uxth	r3, r3
 8002d6a:	3b01      	subs	r3, #1
 8002d6c:	b29a      	uxth	r2, r3
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d74:	9300      	str	r3, [sp, #0]
 8002d76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d78:	2200      	movs	r2, #0
 8002d7a:	494f      	ldr	r1, [pc, #316]	; (8002eb8 <HAL_I2C_Mem_Read+0x448>)
 8002d7c:	68f8      	ldr	r0, [r7, #12]
 8002d7e:	f001 ffd1 	bl	8004d24 <I2C_WaitOnFlagUntilTimeout>
 8002d82:	4603      	mov	r3, r0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d001      	beq.n	8002d8c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e091      	b.n	8002eb0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d9a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	691a      	ldr	r2, [r3, #16]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da6:	b2d2      	uxtb	r2, r2
 8002da8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dae:	1c5a      	adds	r2, r3, #1
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002db8:	3b01      	subs	r3, #1
 8002dba:	b29a      	uxth	r2, r3
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dc4:	b29b      	uxth	r3, r3
 8002dc6:	3b01      	subs	r3, #1
 8002dc8:	b29a      	uxth	r2, r3
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	691a      	ldr	r2, [r3, #16]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd8:	b2d2      	uxtb	r2, r2
 8002dda:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de0:	1c5a      	adds	r2, r3, #1
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dea:	3b01      	subs	r3, #1
 8002dec:	b29a      	uxth	r2, r3
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002df6:	b29b      	uxth	r3, r3
 8002df8:	3b01      	subs	r3, #1
 8002dfa:	b29a      	uxth	r2, r3
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002e00:	e042      	b.n	8002e88 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e04:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002e06:	68f8      	ldr	r0, [r7, #12]
 8002e08:	f002 f916 	bl	8005038 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d001      	beq.n	8002e16 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e04c      	b.n	8002eb0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	691a      	ldr	r2, [r3, #16]
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e20:	b2d2      	uxtb	r2, r2
 8002e22:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e28:	1c5a      	adds	r2, r3, #1
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e32:	3b01      	subs	r3, #1
 8002e34:	b29a      	uxth	r2, r3
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e3e:	b29b      	uxth	r3, r3
 8002e40:	3b01      	subs	r3, #1
 8002e42:	b29a      	uxth	r2, r3
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	695b      	ldr	r3, [r3, #20]
 8002e4e:	f003 0304 	and.w	r3, r3, #4
 8002e52:	2b04      	cmp	r3, #4
 8002e54:	d118      	bne.n	8002e88 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	691a      	ldr	r2, [r3, #16]
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e60:	b2d2      	uxtb	r2, r2
 8002e62:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e68:	1c5a      	adds	r2, r3, #1
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e72:	3b01      	subs	r3, #1
 8002e74:	b29a      	uxth	r2, r3
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e7e:	b29b      	uxth	r3, r3
 8002e80:	3b01      	subs	r3, #1
 8002e82:	b29a      	uxth	r2, r3
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	f47f aec2 	bne.w	8002c16 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2220      	movs	r2, #32
 8002e96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	e000      	b.n	8002eb0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002eae:	2302      	movs	r3, #2
  }
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	3728      	adds	r7, #40	; 0x28
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}
 8002eb8:	00010004 	.word	0x00010004

08002ebc <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b08a      	sub	sp, #40	; 0x28
 8002ec0:	af02      	add	r7, sp, #8
 8002ec2:	60f8      	str	r0, [r7, #12]
 8002ec4:	607a      	str	r2, [r7, #4]
 8002ec6:	603b      	str	r3, [r7, #0]
 8002ec8:	460b      	mov	r3, r1
 8002eca:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002ecc:	f7fe ffe6 	bl	8001e9c <HAL_GetTick>
 8002ed0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	2b20      	cmp	r3, #32
 8002ee0:	f040 8111 	bne.w	8003106 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ee4:	69fb      	ldr	r3, [r7, #28]
 8002ee6:	9300      	str	r3, [sp, #0]
 8002ee8:	2319      	movs	r3, #25
 8002eea:	2201      	movs	r2, #1
 8002eec:	4988      	ldr	r1, [pc, #544]	; (8003110 <HAL_I2C_IsDeviceReady+0x254>)
 8002eee:	68f8      	ldr	r0, [r7, #12]
 8002ef0:	f001 ff18 	bl	8004d24 <I2C_WaitOnFlagUntilTimeout>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d001      	beq.n	8002efe <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002efa:	2302      	movs	r3, #2
 8002efc:	e104      	b.n	8003108 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d101      	bne.n	8002f0c <HAL_I2C_IsDeviceReady+0x50>
 8002f08:	2302      	movs	r3, #2
 8002f0a:	e0fd      	b.n	8003108 <HAL_I2C_IsDeviceReady+0x24c>
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0301 	and.w	r3, r3, #1
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d007      	beq.n	8002f32 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f042 0201 	orr.w	r2, r2, #1
 8002f30:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f40:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2224      	movs	r2, #36	; 0x24
 8002f46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	4a70      	ldr	r2, [pc, #448]	; (8003114 <HAL_I2C_IsDeviceReady+0x258>)
 8002f54:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f64:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	9300      	str	r3, [sp, #0]
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002f72:	68f8      	ldr	r0, [r7, #12]
 8002f74:	f001 fed6 	bl	8004d24 <I2C_WaitOnFlagUntilTimeout>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d00d      	beq.n	8002f9a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f8c:	d103      	bne.n	8002f96 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f94:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002f96:	2303      	movs	r3, #3
 8002f98:	e0b6      	b.n	8003108 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002f9a:	897b      	ldrh	r3, [r7, #10]
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	461a      	mov	r2, r3
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002fa8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002faa:	f7fe ff77 	bl	8001e9c <HAL_GetTick>
 8002fae:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	695b      	ldr	r3, [r3, #20]
 8002fb6:	f003 0302 	and.w	r3, r3, #2
 8002fba:	2b02      	cmp	r3, #2
 8002fbc:	bf0c      	ite	eq
 8002fbe:	2301      	moveq	r3, #1
 8002fc0:	2300      	movne	r3, #0
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	695b      	ldr	r3, [r3, #20]
 8002fcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fd4:	bf0c      	ite	eq
 8002fd6:	2301      	moveq	r3, #1
 8002fd8:	2300      	movne	r3, #0
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002fde:	e025      	b.n	800302c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002fe0:	f7fe ff5c 	bl	8001e9c <HAL_GetTick>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	69fb      	ldr	r3, [r7, #28]
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	683a      	ldr	r2, [r7, #0]
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d302      	bcc.n	8002ff6 <HAL_I2C_IsDeviceReady+0x13a>
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d103      	bne.n	8002ffe <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	22a0      	movs	r2, #160	; 0xa0
 8002ffa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	695b      	ldr	r3, [r3, #20]
 8003004:	f003 0302 	and.w	r3, r3, #2
 8003008:	2b02      	cmp	r3, #2
 800300a:	bf0c      	ite	eq
 800300c:	2301      	moveq	r3, #1
 800300e:	2300      	movne	r3, #0
 8003010:	b2db      	uxtb	r3, r3
 8003012:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	695b      	ldr	r3, [r3, #20]
 800301a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800301e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003022:	bf0c      	ite	eq
 8003024:	2301      	moveq	r3, #1
 8003026:	2300      	movne	r3, #0
 8003028:	b2db      	uxtb	r3, r3
 800302a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003032:	b2db      	uxtb	r3, r3
 8003034:	2ba0      	cmp	r3, #160	; 0xa0
 8003036:	d005      	beq.n	8003044 <HAL_I2C_IsDeviceReady+0x188>
 8003038:	7dfb      	ldrb	r3, [r7, #23]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d102      	bne.n	8003044 <HAL_I2C_IsDeviceReady+0x188>
 800303e:	7dbb      	ldrb	r3, [r7, #22]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d0cd      	beq.n	8002fe0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2220      	movs	r2, #32
 8003048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	695b      	ldr	r3, [r3, #20]
 8003052:	f003 0302 	and.w	r3, r3, #2
 8003056:	2b02      	cmp	r3, #2
 8003058:	d129      	bne.n	80030ae <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003068:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800306a:	2300      	movs	r3, #0
 800306c:	613b      	str	r3, [r7, #16]
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	695b      	ldr	r3, [r3, #20]
 8003074:	613b      	str	r3, [r7, #16]
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	699b      	ldr	r3, [r3, #24]
 800307c:	613b      	str	r3, [r7, #16]
 800307e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003080:	69fb      	ldr	r3, [r7, #28]
 8003082:	9300      	str	r3, [sp, #0]
 8003084:	2319      	movs	r3, #25
 8003086:	2201      	movs	r2, #1
 8003088:	4921      	ldr	r1, [pc, #132]	; (8003110 <HAL_I2C_IsDeviceReady+0x254>)
 800308a:	68f8      	ldr	r0, [r7, #12]
 800308c:	f001 fe4a 	bl	8004d24 <I2C_WaitOnFlagUntilTimeout>
 8003090:	4603      	mov	r3, r0
 8003092:	2b00      	cmp	r3, #0
 8003094:	d001      	beq.n	800309a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e036      	b.n	8003108 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2220      	movs	r2, #32
 800309e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2200      	movs	r2, #0
 80030a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80030aa:	2300      	movs	r3, #0
 80030ac:	e02c      	b.n	8003108 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030bc:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80030c6:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80030c8:	69fb      	ldr	r3, [r7, #28]
 80030ca:	9300      	str	r3, [sp, #0]
 80030cc:	2319      	movs	r3, #25
 80030ce:	2201      	movs	r2, #1
 80030d0:	490f      	ldr	r1, [pc, #60]	; (8003110 <HAL_I2C_IsDeviceReady+0x254>)
 80030d2:	68f8      	ldr	r0, [r7, #12]
 80030d4:	f001 fe26 	bl	8004d24 <I2C_WaitOnFlagUntilTimeout>
 80030d8:	4603      	mov	r3, r0
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d001      	beq.n	80030e2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e012      	b.n	8003108 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80030e2:	69bb      	ldr	r3, [r7, #24]
 80030e4:	3301      	adds	r3, #1
 80030e6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80030e8:	69ba      	ldr	r2, [r7, #24]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	429a      	cmp	r2, r3
 80030ee:	f4ff af32 	bcc.w	8002f56 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2220      	movs	r2, #32
 80030f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2200      	movs	r2, #0
 80030fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e000      	b.n	8003108 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003106:	2302      	movs	r3, #2
  }
}
 8003108:	4618      	mov	r0, r3
 800310a:	3720      	adds	r7, #32
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}
 8003110:	00100002 	.word	0x00100002
 8003114:	ffff0000 	.word	0xffff0000

08003118 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b088      	sub	sp, #32
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003120:	2300      	movs	r3, #0
 8003122:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003130:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003138:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003140:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003142:	7bfb      	ldrb	r3, [r7, #15]
 8003144:	2b10      	cmp	r3, #16
 8003146:	d003      	beq.n	8003150 <HAL_I2C_EV_IRQHandler+0x38>
 8003148:	7bfb      	ldrb	r3, [r7, #15]
 800314a:	2b40      	cmp	r3, #64	; 0x40
 800314c:	f040 80c1 	bne.w	80032d2 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	699b      	ldr	r3, [r3, #24]
 8003156:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	695b      	ldr	r3, [r3, #20]
 800315e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003160:	69fb      	ldr	r3, [r7, #28]
 8003162:	f003 0301 	and.w	r3, r3, #1
 8003166:	2b00      	cmp	r3, #0
 8003168:	d10d      	bne.n	8003186 <HAL_I2C_EV_IRQHandler+0x6e>
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003170:	d003      	beq.n	800317a <HAL_I2C_EV_IRQHandler+0x62>
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003178:	d101      	bne.n	800317e <HAL_I2C_EV_IRQHandler+0x66>
 800317a:	2301      	movs	r3, #1
 800317c:	e000      	b.n	8003180 <HAL_I2C_EV_IRQHandler+0x68>
 800317e:	2300      	movs	r3, #0
 8003180:	2b01      	cmp	r3, #1
 8003182:	f000 8132 	beq.w	80033ea <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	f003 0301 	and.w	r3, r3, #1
 800318c:	2b00      	cmp	r3, #0
 800318e:	d00c      	beq.n	80031aa <HAL_I2C_EV_IRQHandler+0x92>
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	0a5b      	lsrs	r3, r3, #9
 8003194:	f003 0301 	and.w	r3, r3, #1
 8003198:	2b00      	cmp	r3, #0
 800319a:	d006      	beq.n	80031aa <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	f001 ffd0 	bl	8005142 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f000 fd91 	bl	8003cca <I2C_Master_SB>
 80031a8:	e092      	b.n	80032d0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	08db      	lsrs	r3, r3, #3
 80031ae:	f003 0301 	and.w	r3, r3, #1
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d009      	beq.n	80031ca <HAL_I2C_EV_IRQHandler+0xb2>
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	0a5b      	lsrs	r3, r3, #9
 80031ba:	f003 0301 	and.w	r3, r3, #1
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d003      	beq.n	80031ca <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f000 fe07 	bl	8003dd6 <I2C_Master_ADD10>
 80031c8:	e082      	b.n	80032d0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80031ca:	69fb      	ldr	r3, [r7, #28]
 80031cc:	085b      	lsrs	r3, r3, #1
 80031ce:	f003 0301 	and.w	r3, r3, #1
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d009      	beq.n	80031ea <HAL_I2C_EV_IRQHandler+0xd2>
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	0a5b      	lsrs	r3, r3, #9
 80031da:	f003 0301 	and.w	r3, r3, #1
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d003      	beq.n	80031ea <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f000 fe21 	bl	8003e2a <I2C_Master_ADDR>
 80031e8:	e072      	b.n	80032d0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80031ea:	69bb      	ldr	r3, [r7, #24]
 80031ec:	089b      	lsrs	r3, r3, #2
 80031ee:	f003 0301 	and.w	r3, r3, #1
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d03b      	beq.n	800326e <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003200:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003204:	f000 80f3 	beq.w	80033ee <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003208:	69fb      	ldr	r3, [r7, #28]
 800320a:	09db      	lsrs	r3, r3, #7
 800320c:	f003 0301 	and.w	r3, r3, #1
 8003210:	2b00      	cmp	r3, #0
 8003212:	d00f      	beq.n	8003234 <HAL_I2C_EV_IRQHandler+0x11c>
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	0a9b      	lsrs	r3, r3, #10
 8003218:	f003 0301 	and.w	r3, r3, #1
 800321c:	2b00      	cmp	r3, #0
 800321e:	d009      	beq.n	8003234 <HAL_I2C_EV_IRQHandler+0x11c>
 8003220:	69fb      	ldr	r3, [r7, #28]
 8003222:	089b      	lsrs	r3, r3, #2
 8003224:	f003 0301 	and.w	r3, r3, #1
 8003228:	2b00      	cmp	r3, #0
 800322a:	d103      	bne.n	8003234 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800322c:	6878      	ldr	r0, [r7, #4]
 800322e:	f000 fa01 	bl	8003634 <I2C_MasterTransmit_TXE>
 8003232:	e04d      	b.n	80032d0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003234:	69fb      	ldr	r3, [r7, #28]
 8003236:	089b      	lsrs	r3, r3, #2
 8003238:	f003 0301 	and.w	r3, r3, #1
 800323c:	2b00      	cmp	r3, #0
 800323e:	f000 80d6 	beq.w	80033ee <HAL_I2C_EV_IRQHandler+0x2d6>
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	0a5b      	lsrs	r3, r3, #9
 8003246:	f003 0301 	and.w	r3, r3, #1
 800324a:	2b00      	cmp	r3, #0
 800324c:	f000 80cf 	beq.w	80033ee <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003250:	7bbb      	ldrb	r3, [r7, #14]
 8003252:	2b21      	cmp	r3, #33	; 0x21
 8003254:	d103      	bne.n	800325e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f000 fa88 	bl	800376c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800325c:	e0c7      	b.n	80033ee <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800325e:	7bfb      	ldrb	r3, [r7, #15]
 8003260:	2b40      	cmp	r3, #64	; 0x40
 8003262:	f040 80c4 	bne.w	80033ee <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f000 faf6 	bl	8003858 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800326c:	e0bf      	b.n	80033ee <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003278:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800327c:	f000 80b7 	beq.w	80033ee <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003280:	69fb      	ldr	r3, [r7, #28]
 8003282:	099b      	lsrs	r3, r3, #6
 8003284:	f003 0301 	and.w	r3, r3, #1
 8003288:	2b00      	cmp	r3, #0
 800328a:	d00f      	beq.n	80032ac <HAL_I2C_EV_IRQHandler+0x194>
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	0a9b      	lsrs	r3, r3, #10
 8003290:	f003 0301 	and.w	r3, r3, #1
 8003294:	2b00      	cmp	r3, #0
 8003296:	d009      	beq.n	80032ac <HAL_I2C_EV_IRQHandler+0x194>
 8003298:	69fb      	ldr	r3, [r7, #28]
 800329a:	089b      	lsrs	r3, r3, #2
 800329c:	f003 0301 	and.w	r3, r3, #1
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d103      	bne.n	80032ac <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80032a4:	6878      	ldr	r0, [r7, #4]
 80032a6:	f000 fb6b 	bl	8003980 <I2C_MasterReceive_RXNE>
 80032aa:	e011      	b.n	80032d0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80032ac:	69fb      	ldr	r3, [r7, #28]
 80032ae:	089b      	lsrs	r3, r3, #2
 80032b0:	f003 0301 	and.w	r3, r3, #1
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	f000 809a 	beq.w	80033ee <HAL_I2C_EV_IRQHandler+0x2d6>
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	0a5b      	lsrs	r3, r3, #9
 80032be:	f003 0301 	and.w	r3, r3, #1
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	f000 8093 	beq.w	80033ee <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80032c8:	6878      	ldr	r0, [r7, #4]
 80032ca:	f000 fc14 	bl	8003af6 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80032ce:	e08e      	b.n	80033ee <HAL_I2C_EV_IRQHandler+0x2d6>
 80032d0:	e08d      	b.n	80033ee <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d004      	beq.n	80032e4 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	695b      	ldr	r3, [r3, #20]
 80032e0:	61fb      	str	r3, [r7, #28]
 80032e2:	e007      	b.n	80032f4 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	699b      	ldr	r3, [r3, #24]
 80032ea:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	695b      	ldr	r3, [r3, #20]
 80032f2:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80032f4:	69fb      	ldr	r3, [r7, #28]
 80032f6:	085b      	lsrs	r3, r3, #1
 80032f8:	f003 0301 	and.w	r3, r3, #1
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d012      	beq.n	8003326 <HAL_I2C_EV_IRQHandler+0x20e>
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	0a5b      	lsrs	r3, r3, #9
 8003304:	f003 0301 	and.w	r3, r3, #1
 8003308:	2b00      	cmp	r3, #0
 800330a:	d00c      	beq.n	8003326 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003310:	2b00      	cmp	r3, #0
 8003312:	d003      	beq.n	800331c <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	699b      	ldr	r3, [r3, #24]
 800331a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800331c:	69b9      	ldr	r1, [r7, #24]
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f000 ffd2 	bl	80042c8 <I2C_Slave_ADDR>
 8003324:	e066      	b.n	80033f4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003326:	69fb      	ldr	r3, [r7, #28]
 8003328:	091b      	lsrs	r3, r3, #4
 800332a:	f003 0301 	and.w	r3, r3, #1
 800332e:	2b00      	cmp	r3, #0
 8003330:	d009      	beq.n	8003346 <HAL_I2C_EV_IRQHandler+0x22e>
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	0a5b      	lsrs	r3, r3, #9
 8003336:	f003 0301 	and.w	r3, r3, #1
 800333a:	2b00      	cmp	r3, #0
 800333c:	d003      	beq.n	8003346 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f001 f80c 	bl	800435c <I2C_Slave_STOPF>
 8003344:	e056      	b.n	80033f4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003346:	7bbb      	ldrb	r3, [r7, #14]
 8003348:	2b21      	cmp	r3, #33	; 0x21
 800334a:	d002      	beq.n	8003352 <HAL_I2C_EV_IRQHandler+0x23a>
 800334c:	7bbb      	ldrb	r3, [r7, #14]
 800334e:	2b29      	cmp	r3, #41	; 0x29
 8003350:	d125      	bne.n	800339e <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003352:	69fb      	ldr	r3, [r7, #28]
 8003354:	09db      	lsrs	r3, r3, #7
 8003356:	f003 0301 	and.w	r3, r3, #1
 800335a:	2b00      	cmp	r3, #0
 800335c:	d00f      	beq.n	800337e <HAL_I2C_EV_IRQHandler+0x266>
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	0a9b      	lsrs	r3, r3, #10
 8003362:	f003 0301 	and.w	r3, r3, #1
 8003366:	2b00      	cmp	r3, #0
 8003368:	d009      	beq.n	800337e <HAL_I2C_EV_IRQHandler+0x266>
 800336a:	69fb      	ldr	r3, [r7, #28]
 800336c:	089b      	lsrs	r3, r3, #2
 800336e:	f003 0301 	and.w	r3, r3, #1
 8003372:	2b00      	cmp	r3, #0
 8003374:	d103      	bne.n	800337e <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f000 fee8 	bl	800414c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800337c:	e039      	b.n	80033f2 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800337e:	69fb      	ldr	r3, [r7, #28]
 8003380:	089b      	lsrs	r3, r3, #2
 8003382:	f003 0301 	and.w	r3, r3, #1
 8003386:	2b00      	cmp	r3, #0
 8003388:	d033      	beq.n	80033f2 <HAL_I2C_EV_IRQHandler+0x2da>
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	0a5b      	lsrs	r3, r3, #9
 800338e:	f003 0301 	and.w	r3, r3, #1
 8003392:	2b00      	cmp	r3, #0
 8003394:	d02d      	beq.n	80033f2 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f000 ff15 	bl	80041c6 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800339c:	e029      	b.n	80033f2 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800339e:	69fb      	ldr	r3, [r7, #28]
 80033a0:	099b      	lsrs	r3, r3, #6
 80033a2:	f003 0301 	and.w	r3, r3, #1
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d00f      	beq.n	80033ca <HAL_I2C_EV_IRQHandler+0x2b2>
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	0a9b      	lsrs	r3, r3, #10
 80033ae:	f003 0301 	and.w	r3, r3, #1
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d009      	beq.n	80033ca <HAL_I2C_EV_IRQHandler+0x2b2>
 80033b6:	69fb      	ldr	r3, [r7, #28]
 80033b8:	089b      	lsrs	r3, r3, #2
 80033ba:	f003 0301 	and.w	r3, r3, #1
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d103      	bne.n	80033ca <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f000 ff20 	bl	8004208 <I2C_SlaveReceive_RXNE>
 80033c8:	e014      	b.n	80033f4 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80033ca:	69fb      	ldr	r3, [r7, #28]
 80033cc:	089b      	lsrs	r3, r3, #2
 80033ce:	f003 0301 	and.w	r3, r3, #1
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d00e      	beq.n	80033f4 <HAL_I2C_EV_IRQHandler+0x2dc>
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	0a5b      	lsrs	r3, r3, #9
 80033da:	f003 0301 	and.w	r3, r3, #1
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d008      	beq.n	80033f4 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f000 ff4e 	bl	8004284 <I2C_SlaveReceive_BTF>
 80033e8:	e004      	b.n	80033f4 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80033ea:	bf00      	nop
 80033ec:	e002      	b.n	80033f4 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80033ee:	bf00      	nop
 80033f0:	e000      	b.n	80033f4 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80033f2:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80033f4:	3720      	adds	r7, #32
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}

080033fa <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80033fa:	b580      	push	{r7, lr}
 80033fc:	b08a      	sub	sp, #40	; 0x28
 80033fe:	af00      	add	r7, sp, #0
 8003400:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	695b      	ldr	r3, [r3, #20]
 8003408:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8003412:	2300      	movs	r3, #0
 8003414:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800341c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800341e:	6a3b      	ldr	r3, [r7, #32]
 8003420:	0a1b      	lsrs	r3, r3, #8
 8003422:	f003 0301 	and.w	r3, r3, #1
 8003426:	2b00      	cmp	r3, #0
 8003428:	d00e      	beq.n	8003448 <HAL_I2C_ER_IRQHandler+0x4e>
 800342a:	69fb      	ldr	r3, [r7, #28]
 800342c:	0a1b      	lsrs	r3, r3, #8
 800342e:	f003 0301 	and.w	r3, r3, #1
 8003432:	2b00      	cmp	r3, #0
 8003434:	d008      	beq.n	8003448 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8003436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003438:	f043 0301 	orr.w	r3, r3, #1
 800343c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003446:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003448:	6a3b      	ldr	r3, [r7, #32]
 800344a:	0a5b      	lsrs	r3, r3, #9
 800344c:	f003 0301 	and.w	r3, r3, #1
 8003450:	2b00      	cmp	r3, #0
 8003452:	d00e      	beq.n	8003472 <HAL_I2C_ER_IRQHandler+0x78>
 8003454:	69fb      	ldr	r3, [r7, #28]
 8003456:	0a1b      	lsrs	r3, r3, #8
 8003458:	f003 0301 	and.w	r3, r3, #1
 800345c:	2b00      	cmp	r3, #0
 800345e:	d008      	beq.n	8003472 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003462:	f043 0302 	orr.w	r3, r3, #2
 8003466:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8003470:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003472:	6a3b      	ldr	r3, [r7, #32]
 8003474:	0a9b      	lsrs	r3, r3, #10
 8003476:	f003 0301 	and.w	r3, r3, #1
 800347a:	2b00      	cmp	r3, #0
 800347c:	d03f      	beq.n	80034fe <HAL_I2C_ER_IRQHandler+0x104>
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	0a1b      	lsrs	r3, r3, #8
 8003482:	f003 0301 	and.w	r3, r3, #1
 8003486:	2b00      	cmp	r3, #0
 8003488:	d039      	beq.n	80034fe <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800348a:	7efb      	ldrb	r3, [r7, #27]
 800348c:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003492:	b29b      	uxth	r3, r3
 8003494:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800349c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a2:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80034a4:	7ebb      	ldrb	r3, [r7, #26]
 80034a6:	2b20      	cmp	r3, #32
 80034a8:	d112      	bne.n	80034d0 <HAL_I2C_ER_IRQHandler+0xd6>
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d10f      	bne.n	80034d0 <HAL_I2C_ER_IRQHandler+0xd6>
 80034b0:	7cfb      	ldrb	r3, [r7, #19]
 80034b2:	2b21      	cmp	r3, #33	; 0x21
 80034b4:	d008      	beq.n	80034c8 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80034b6:	7cfb      	ldrb	r3, [r7, #19]
 80034b8:	2b29      	cmp	r3, #41	; 0x29
 80034ba:	d005      	beq.n	80034c8 <HAL_I2C_ER_IRQHandler+0xce>
 80034bc:	7cfb      	ldrb	r3, [r7, #19]
 80034be:	2b28      	cmp	r3, #40	; 0x28
 80034c0:	d106      	bne.n	80034d0 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2b21      	cmp	r3, #33	; 0x21
 80034c6:	d103      	bne.n	80034d0 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	f001 f877 	bl	80045bc <I2C_Slave_AF>
 80034ce:	e016      	b.n	80034fe <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80034d8:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80034da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034dc:	f043 0304 	orr.w	r3, r3, #4
 80034e0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80034e2:	7efb      	ldrb	r3, [r7, #27]
 80034e4:	2b10      	cmp	r3, #16
 80034e6:	d002      	beq.n	80034ee <HAL_I2C_ER_IRQHandler+0xf4>
 80034e8:	7efb      	ldrb	r3, [r7, #27]
 80034ea:	2b40      	cmp	r3, #64	; 0x40
 80034ec:	d107      	bne.n	80034fe <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034fc:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80034fe:	6a3b      	ldr	r3, [r7, #32]
 8003500:	0adb      	lsrs	r3, r3, #11
 8003502:	f003 0301 	and.w	r3, r3, #1
 8003506:	2b00      	cmp	r3, #0
 8003508:	d00e      	beq.n	8003528 <HAL_I2C_ER_IRQHandler+0x12e>
 800350a:	69fb      	ldr	r3, [r7, #28]
 800350c:	0a1b      	lsrs	r3, r3, #8
 800350e:	f003 0301 	and.w	r3, r3, #1
 8003512:	2b00      	cmp	r3, #0
 8003514:	d008      	beq.n	8003528 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8003516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003518:	f043 0308 	orr.w	r3, r3, #8
 800351c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8003526:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352a:	2b00      	cmp	r3, #0
 800352c:	d008      	beq.n	8003540 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003534:	431a      	orrs	r2, r3
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f001 f8ae 	bl	800469c <I2C_ITError>
  }
}
 8003540:	bf00      	nop
 8003542:	3728      	adds	r7, #40	; 0x28
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}

08003548 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003548:	b480      	push	{r7}
 800354a:	b083      	sub	sp, #12
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003550:	bf00      	nop
 8003552:	370c      	adds	r7, #12
 8003554:	46bd      	mov	sp, r7
 8003556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355a:	4770      	bx	lr

0800355c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800355c:	b480      	push	{r7}
 800355e:	b083      	sub	sp, #12
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003564:	bf00      	nop
 8003566:	370c      	adds	r7, #12
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr

08003570 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003570:	b480      	push	{r7}
 8003572:	b083      	sub	sp, #12
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003578:	bf00      	nop
 800357a:	370c      	adds	r7, #12
 800357c:	46bd      	mov	sp, r7
 800357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003582:	4770      	bx	lr

08003584 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003584:	b480      	push	{r7}
 8003586:	b083      	sub	sp, #12
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800358c:	bf00      	nop
 800358e:	370c      	adds	r7, #12
 8003590:	46bd      	mov	sp, r7
 8003592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003596:	4770      	bx	lr

08003598 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003598:	b480      	push	{r7}
 800359a:	b083      	sub	sp, #12
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
 80035a0:	460b      	mov	r3, r1
 80035a2:	70fb      	strb	r3, [r7, #3]
 80035a4:	4613      	mov	r3, r2
 80035a6:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80035a8:	bf00      	nop
 80035aa:	370c      	adds	r7, #12
 80035ac:	46bd      	mov	sp, r7
 80035ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b2:	4770      	bx	lr

080035b4 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b083      	sub	sp, #12
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80035bc:	bf00      	nop
 80035be:	370c      	adds	r7, #12
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr

080035c8 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b083      	sub	sp, #12
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80035d0:	bf00      	nop
 80035d2:	370c      	adds	r7, #12
 80035d4:	46bd      	mov	sp, r7
 80035d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035da:	4770      	bx	lr

080035dc <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80035dc:	b480      	push	{r7}
 80035de:	b083      	sub	sp, #12
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80035e4:	bf00      	nop
 80035e6:	370c      	adds	r7, #12
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr

080035f0 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b083      	sub	sp, #12
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80035f8:	bf00      	nop
 80035fa:	370c      	adds	r7, #12
 80035fc:	46bd      	mov	sp, r7
 80035fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003602:	4770      	bx	lr

08003604 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003604:	b480      	push	{r7}
 8003606:	b083      	sub	sp, #12
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800360c:	bf00      	nop
 800360e:	370c      	adds	r7, #12
 8003610:	46bd      	mov	sp, r7
 8003612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003616:	4770      	bx	lr

08003618 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8003618:	b480      	push	{r7}
 800361a:	b083      	sub	sp, #12
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003626:	b2db      	uxtb	r3, r3
}
 8003628:	4618      	mov	r0, r3
 800362a:	370c      	adds	r7, #12
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr

08003634 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b084      	sub	sp, #16
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003642:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800364a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003650:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003656:	2b00      	cmp	r3, #0
 8003658:	d150      	bne.n	80036fc <I2C_MasterTransmit_TXE+0xc8>
 800365a:	7bfb      	ldrb	r3, [r7, #15]
 800365c:	2b21      	cmp	r3, #33	; 0x21
 800365e:	d14d      	bne.n	80036fc <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	2b08      	cmp	r3, #8
 8003664:	d01d      	beq.n	80036a2 <I2C_MasterTransmit_TXE+0x6e>
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	2b20      	cmp	r3, #32
 800366a:	d01a      	beq.n	80036a2 <I2C_MasterTransmit_TXE+0x6e>
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003672:	d016      	beq.n	80036a2 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	685a      	ldr	r2, [r3, #4]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003682:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2211      	movs	r2, #17
 8003688:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2200      	movs	r2, #0
 800368e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2220      	movs	r2, #32
 8003696:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f7ff ff54 	bl	8003548 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80036a0:	e060      	b.n	8003764 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	685a      	ldr	r2, [r3, #4]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80036b0:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036c0:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2200      	movs	r2, #0
 80036c6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2220      	movs	r2, #32
 80036cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	2b40      	cmp	r3, #64	; 0x40
 80036da:	d107      	bne.n	80036ec <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2200      	movs	r2, #0
 80036e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80036e4:	6878      	ldr	r0, [r7, #4]
 80036e6:	f7ff ff6f 	bl	80035c8 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80036ea:	e03b      	b.n	8003764 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2200      	movs	r2, #0
 80036f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	f7ff ff27 	bl	8003548 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80036fa:	e033      	b.n	8003764 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80036fc:	7bfb      	ldrb	r3, [r7, #15]
 80036fe:	2b21      	cmp	r3, #33	; 0x21
 8003700:	d005      	beq.n	800370e <I2C_MasterTransmit_TXE+0xda>
 8003702:	7bbb      	ldrb	r3, [r7, #14]
 8003704:	2b40      	cmp	r3, #64	; 0x40
 8003706:	d12d      	bne.n	8003764 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003708:	7bfb      	ldrb	r3, [r7, #15]
 800370a:	2b22      	cmp	r3, #34	; 0x22
 800370c:	d12a      	bne.n	8003764 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003712:	b29b      	uxth	r3, r3
 8003714:	2b00      	cmp	r3, #0
 8003716:	d108      	bne.n	800372a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	685a      	ldr	r2, [r3, #4]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003726:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003728:	e01c      	b.n	8003764 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003730:	b2db      	uxtb	r3, r3
 8003732:	2b40      	cmp	r3, #64	; 0x40
 8003734:	d103      	bne.n	800373e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f000 f88e 	bl	8003858 <I2C_MemoryTransmit_TXE_BTF>
}
 800373c:	e012      	b.n	8003764 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003742:	781a      	ldrb	r2, [r3, #0]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800374e:	1c5a      	adds	r2, r3, #1
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003758:	b29b      	uxth	r3, r3
 800375a:	3b01      	subs	r3, #1
 800375c:	b29a      	uxth	r2, r3
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003762:	e7ff      	b.n	8003764 <I2C_MasterTransmit_TXE+0x130>
 8003764:	bf00      	nop
 8003766:	3710      	adds	r7, #16
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}

0800376c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b084      	sub	sp, #16
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003778:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003780:	b2db      	uxtb	r3, r3
 8003782:	2b21      	cmp	r3, #33	; 0x21
 8003784:	d164      	bne.n	8003850 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800378a:	b29b      	uxth	r3, r3
 800378c:	2b00      	cmp	r3, #0
 800378e:	d012      	beq.n	80037b6 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003794:	781a      	ldrb	r2, [r3, #0]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a0:	1c5a      	adds	r2, r3, #1
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037aa:	b29b      	uxth	r3, r3
 80037ac:	3b01      	subs	r3, #1
 80037ae:	b29a      	uxth	r2, r3
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80037b4:	e04c      	b.n	8003850 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2b08      	cmp	r3, #8
 80037ba:	d01d      	beq.n	80037f8 <I2C_MasterTransmit_BTF+0x8c>
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2b20      	cmp	r3, #32
 80037c0:	d01a      	beq.n	80037f8 <I2C_MasterTransmit_BTF+0x8c>
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80037c8:	d016      	beq.n	80037f8 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	685a      	ldr	r2, [r3, #4]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80037d8:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2211      	movs	r2, #17
 80037de:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2200      	movs	r2, #0
 80037e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2220      	movs	r2, #32
 80037ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	f7ff fea9 	bl	8003548 <HAL_I2C_MasterTxCpltCallback>
}
 80037f6:	e02b      	b.n	8003850 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	685a      	ldr	r2, [r3, #4]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003806:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003816:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2200      	movs	r2, #0
 800381c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2220      	movs	r2, #32
 8003822:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800382c:	b2db      	uxtb	r3, r3
 800382e:	2b40      	cmp	r3, #64	; 0x40
 8003830:	d107      	bne.n	8003842 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2200      	movs	r2, #0
 8003836:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	f7ff fec4 	bl	80035c8 <HAL_I2C_MemTxCpltCallback>
}
 8003840:	e006      	b.n	8003850 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2200      	movs	r2, #0
 8003846:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f7ff fe7c 	bl	8003548 <HAL_I2C_MasterTxCpltCallback>
}
 8003850:	bf00      	nop
 8003852:	3710      	adds	r7, #16
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}

08003858 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b084      	sub	sp, #16
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003866:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800386c:	2b00      	cmp	r3, #0
 800386e:	d11d      	bne.n	80038ac <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003874:	2b01      	cmp	r3, #1
 8003876:	d10b      	bne.n	8003890 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800387c:	b2da      	uxtb	r2, r3
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003888:	1c9a      	adds	r2, r3, #2
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800388e:	e073      	b.n	8003978 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003894:	b29b      	uxth	r3, r3
 8003896:	121b      	asrs	r3, r3, #8
 8003898:	b2da      	uxtb	r2, r3
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038a4:	1c5a      	adds	r2, r3, #1
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80038aa:	e065      	b.n	8003978 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038b0:	2b01      	cmp	r3, #1
 80038b2:	d10b      	bne.n	80038cc <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038b8:	b2da      	uxtb	r2, r3
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038c4:	1c5a      	adds	r2, r3, #1
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80038ca:	e055      	b.n	8003978 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038d0:	2b02      	cmp	r3, #2
 80038d2:	d151      	bne.n	8003978 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80038d4:	7bfb      	ldrb	r3, [r7, #15]
 80038d6:	2b22      	cmp	r3, #34	; 0x22
 80038d8:	d10d      	bne.n	80038f6 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038e8:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038ee:	1c5a      	adds	r2, r3, #1
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	651a      	str	r2, [r3, #80]	; 0x50
}
 80038f4:	e040      	b.n	8003978 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038fa:	b29b      	uxth	r3, r3
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d015      	beq.n	800392c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003900:	7bfb      	ldrb	r3, [r7, #15]
 8003902:	2b21      	cmp	r3, #33	; 0x21
 8003904:	d112      	bne.n	800392c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390a:	781a      	ldrb	r2, [r3, #0]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003916:	1c5a      	adds	r2, r3, #1
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003920:	b29b      	uxth	r3, r3
 8003922:	3b01      	subs	r3, #1
 8003924:	b29a      	uxth	r2, r3
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800392a:	e025      	b.n	8003978 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003930:	b29b      	uxth	r3, r3
 8003932:	2b00      	cmp	r3, #0
 8003934:	d120      	bne.n	8003978 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8003936:	7bfb      	ldrb	r3, [r7, #15]
 8003938:	2b21      	cmp	r3, #33	; 0x21
 800393a:	d11d      	bne.n	8003978 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	685a      	ldr	r2, [r3, #4]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800394a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800395a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2200      	movs	r2, #0
 8003960:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2220      	movs	r2, #32
 8003966:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2200      	movs	r2, #0
 800396e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f7ff fe28 	bl	80035c8 <HAL_I2C_MemTxCpltCallback>
}
 8003978:	bf00      	nop
 800397a:	3710      	adds	r7, #16
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}

08003980 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b084      	sub	sp, #16
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800398e:	b2db      	uxtb	r3, r3
 8003990:	2b22      	cmp	r3, #34	; 0x22
 8003992:	f040 80ac 	bne.w	8003aee <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800399a:	b29b      	uxth	r3, r3
 800399c:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2b03      	cmp	r3, #3
 80039a2:	d921      	bls.n	80039e8 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	691a      	ldr	r2, [r3, #16]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ae:	b2d2      	uxtb	r2, r2
 80039b0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b6:	1c5a      	adds	r2, r3, #1
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039c0:	b29b      	uxth	r3, r3
 80039c2:	3b01      	subs	r3, #1
 80039c4:	b29a      	uxth	r2, r3
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ce:	b29b      	uxth	r3, r3
 80039d0:	2b03      	cmp	r3, #3
 80039d2:	f040 808c 	bne.w	8003aee <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	685a      	ldr	r2, [r3, #4]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039e4:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80039e6:	e082      	b.n	8003aee <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ec:	2b02      	cmp	r3, #2
 80039ee:	d075      	beq.n	8003adc <I2C_MasterReceive_RXNE+0x15c>
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d002      	beq.n	80039fc <I2C_MasterReceive_RXNE+0x7c>
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d16f      	bne.n	8003adc <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f001 fae9 	bl	8004fd4 <I2C_WaitOnSTOPRequestThroughIT>
 8003a02:	4603      	mov	r3, r0
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d142      	bne.n	8003a8e <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a16:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	685a      	ldr	r2, [r3, #4]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003a26:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	691a      	ldr	r2, [r3, #16]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a32:	b2d2      	uxtb	r2, r2
 8003a34:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a3a:	1c5a      	adds	r2, r3, #1
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a44:	b29b      	uxth	r3, r3
 8003a46:	3b01      	subs	r3, #1
 8003a48:	b29a      	uxth	r2, r3
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2220      	movs	r2, #32
 8003a52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	2b40      	cmp	r3, #64	; 0x40
 8003a60:	d10a      	bne.n	8003a78 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2200      	movs	r2, #0
 8003a66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003a70:	6878      	ldr	r0, [r7, #4]
 8003a72:	f7ff fdb3 	bl	80035dc <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003a76:	e03a      	b.n	8003aee <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2212      	movs	r2, #18
 8003a84:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f7ff fd68 	bl	800355c <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003a8c:	e02f      	b.n	8003aee <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	685a      	ldr	r2, [r3, #4]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003a9c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	691a      	ldr	r2, [r3, #16]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa8:	b2d2      	uxtb	r2, r2
 8003aaa:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab0:	1c5a      	adds	r2, r3, #1
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aba:	b29b      	uxth	r3, r3
 8003abc:	3b01      	subs	r3, #1
 8003abe:	b29a      	uxth	r2, r3
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2220      	movs	r2, #32
 8003ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	f7ff fd8b 	bl	80035f0 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003ada:	e008      	b.n	8003aee <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	685a      	ldr	r2, [r3, #4]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003aea:	605a      	str	r2, [r3, #4]
}
 8003aec:	e7ff      	b.n	8003aee <I2C_MasterReceive_RXNE+0x16e>
 8003aee:	bf00      	nop
 8003af0:	3710      	adds	r7, #16
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}

08003af6 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003af6:	b580      	push	{r7, lr}
 8003af8:	b084      	sub	sp, #16
 8003afa:	af00      	add	r7, sp, #0
 8003afc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b02:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b08:	b29b      	uxth	r3, r3
 8003b0a:	2b04      	cmp	r3, #4
 8003b0c:	d11b      	bne.n	8003b46 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	685a      	ldr	r2, [r3, #4]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b1c:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	691a      	ldr	r2, [r3, #16]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b28:	b2d2      	uxtb	r2, r2
 8003b2a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b30:	1c5a      	adds	r2, r3, #1
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b3a:	b29b      	uxth	r3, r3
 8003b3c:	3b01      	subs	r3, #1
 8003b3e:	b29a      	uxth	r2, r3
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003b44:	e0bd      	b.n	8003cc2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b4a:	b29b      	uxth	r3, r3
 8003b4c:	2b03      	cmp	r3, #3
 8003b4e:	d129      	bne.n	8003ba4 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	685a      	ldr	r2, [r3, #4]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b5e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2b04      	cmp	r3, #4
 8003b64:	d00a      	beq.n	8003b7c <I2C_MasterReceive_BTF+0x86>
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2b02      	cmp	r3, #2
 8003b6a:	d007      	beq.n	8003b7c <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b7a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	691a      	ldr	r2, [r3, #16]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b86:	b2d2      	uxtb	r2, r2
 8003b88:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b8e:	1c5a      	adds	r2, r3, #1
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b98:	b29b      	uxth	r3, r3
 8003b9a:	3b01      	subs	r3, #1
 8003b9c:	b29a      	uxth	r2, r3
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003ba2:	e08e      	b.n	8003cc2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ba8:	b29b      	uxth	r3, r3
 8003baa:	2b02      	cmp	r3, #2
 8003bac:	d176      	bne.n	8003c9c <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d002      	beq.n	8003bba <I2C_MasterReceive_BTF+0xc4>
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2b10      	cmp	r3, #16
 8003bb8:	d108      	bne.n	8003bcc <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bc8:	601a      	str	r2, [r3, #0]
 8003bca:	e019      	b.n	8003c00 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2b04      	cmp	r3, #4
 8003bd0:	d002      	beq.n	8003bd8 <I2C_MasterReceive_BTF+0xe2>
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2b02      	cmp	r3, #2
 8003bd6:	d108      	bne.n	8003bea <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003be6:	601a      	str	r2, [r3, #0]
 8003be8:	e00a      	b.n	8003c00 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2b10      	cmp	r3, #16
 8003bee:	d007      	beq.n	8003c00 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bfe:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	691a      	ldr	r2, [r3, #16]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c0a:	b2d2      	uxtb	r2, r2
 8003c0c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c12:	1c5a      	adds	r2, r3, #1
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c1c:	b29b      	uxth	r3, r3
 8003c1e:	3b01      	subs	r3, #1
 8003c20:	b29a      	uxth	r2, r3
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	691a      	ldr	r2, [r3, #16]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c30:	b2d2      	uxtb	r2, r2
 8003c32:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c38:	1c5a      	adds	r2, r3, #1
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c42:	b29b      	uxth	r3, r3
 8003c44:	3b01      	subs	r3, #1
 8003c46:	b29a      	uxth	r2, r3
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	685a      	ldr	r2, [r3, #4]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003c5a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2220      	movs	r2, #32
 8003c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c6a:	b2db      	uxtb	r3, r3
 8003c6c:	2b40      	cmp	r3, #64	; 0x40
 8003c6e:	d10a      	bne.n	8003c86 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2200      	movs	r2, #0
 8003c74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f7ff fcac 	bl	80035dc <HAL_I2C_MemRxCpltCallback>
}
 8003c84:	e01d      	b.n	8003cc2 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2212      	movs	r2, #18
 8003c92:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	f7ff fc61 	bl	800355c <HAL_I2C_MasterRxCpltCallback>
}
 8003c9a:	e012      	b.n	8003cc2 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	691a      	ldr	r2, [r3, #16]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca6:	b2d2      	uxtb	r2, r2
 8003ca8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cae:	1c5a      	adds	r2, r3, #1
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cb8:	b29b      	uxth	r3, r3
 8003cba:	3b01      	subs	r3, #1
 8003cbc:	b29a      	uxth	r2, r3
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003cc2:	bf00      	nop
 8003cc4:	3710      	adds	r7, #16
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}

08003cca <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003cca:	b480      	push	{r7}
 8003ccc:	b083      	sub	sp, #12
 8003cce:	af00      	add	r7, sp, #0
 8003cd0:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003cd8:	b2db      	uxtb	r3, r3
 8003cda:	2b40      	cmp	r3, #64	; 0x40
 8003cdc:	d117      	bne.n	8003d0e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d109      	bne.n	8003cfa <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cea:	b2db      	uxtb	r3, r3
 8003cec:	461a      	mov	r2, r3
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003cf6:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003cf8:	e067      	b.n	8003dca <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cfe:	b2db      	uxtb	r3, r3
 8003d00:	f043 0301 	orr.w	r3, r3, #1
 8003d04:	b2da      	uxtb	r2, r3
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	611a      	str	r2, [r3, #16]
}
 8003d0c:	e05d      	b.n	8003dca <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	691b      	ldr	r3, [r3, #16]
 8003d12:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d16:	d133      	bne.n	8003d80 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d1e:	b2db      	uxtb	r3, r3
 8003d20:	2b21      	cmp	r3, #33	; 0x21
 8003d22:	d109      	bne.n	8003d38 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	461a      	mov	r2, r3
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003d34:	611a      	str	r2, [r3, #16]
 8003d36:	e008      	b.n	8003d4a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	f043 0301 	orr.w	r3, r3, #1
 8003d42:	b2da      	uxtb	r2, r3
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d004      	beq.n	8003d5c <I2C_Master_SB+0x92>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d108      	bne.n	8003d6e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d032      	beq.n	8003dca <I2C_Master_SB+0x100>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d02d      	beq.n	8003dca <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	685a      	ldr	r2, [r3, #4]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d7c:	605a      	str	r2, [r3, #4]
}
 8003d7e:	e024      	b.n	8003dca <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d10e      	bne.n	8003da6 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d8c:	b29b      	uxth	r3, r3
 8003d8e:	11db      	asrs	r3, r3, #7
 8003d90:	b2db      	uxtb	r3, r3
 8003d92:	f003 0306 	and.w	r3, r3, #6
 8003d96:	b2db      	uxtb	r3, r3
 8003d98:	f063 030f 	orn	r3, r3, #15
 8003d9c:	b2da      	uxtb	r2, r3
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	611a      	str	r2, [r3, #16]
}
 8003da4:	e011      	b.n	8003dca <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	d10d      	bne.n	8003dca <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003db2:	b29b      	uxth	r3, r3
 8003db4:	11db      	asrs	r3, r3, #7
 8003db6:	b2db      	uxtb	r3, r3
 8003db8:	f003 0306 	and.w	r3, r3, #6
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	f063 030e 	orn	r3, r3, #14
 8003dc2:	b2da      	uxtb	r2, r3
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	611a      	str	r2, [r3, #16]
}
 8003dca:	bf00      	nop
 8003dcc:	370c      	adds	r7, #12
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd4:	4770      	bx	lr

08003dd6 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003dd6:	b480      	push	{r7}
 8003dd8:	b083      	sub	sp, #12
 8003dda:	af00      	add	r7, sp, #0
 8003ddc:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003de2:	b2da      	uxtb	r2, r3
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d004      	beq.n	8003dfc <I2C_Master_ADD10+0x26>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003df6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d108      	bne.n	8003e0e <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d00c      	beq.n	8003e1e <I2C_Master_ADD10+0x48>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d007      	beq.n	8003e1e <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	685a      	ldr	r2, [r3, #4]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e1c:	605a      	str	r2, [r3, #4]
  }
}
 8003e1e:	bf00      	nop
 8003e20:	370c      	adds	r7, #12
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr

08003e2a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003e2a:	b480      	push	{r7}
 8003e2c:	b091      	sub	sp, #68	; 0x44
 8003e2e:	af00      	add	r7, sp, #0
 8003e30:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e38:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e40:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e46:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e4e:	b2db      	uxtb	r3, r3
 8003e50:	2b22      	cmp	r3, #34	; 0x22
 8003e52:	f040 8169 	bne.w	8004128 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d10f      	bne.n	8003e7e <I2C_Master_ADDR+0x54>
 8003e5e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003e62:	2b40      	cmp	r3, #64	; 0x40
 8003e64:	d10b      	bne.n	8003e7e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e66:	2300      	movs	r3, #0
 8003e68:	633b      	str	r3, [r7, #48]	; 0x30
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	695b      	ldr	r3, [r3, #20]
 8003e70:	633b      	str	r3, [r7, #48]	; 0x30
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	699b      	ldr	r3, [r3, #24]
 8003e78:	633b      	str	r3, [r7, #48]	; 0x30
 8003e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e7c:	e160      	b.n	8004140 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d11d      	bne.n	8003ec2 <I2C_Master_ADDR+0x98>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	691b      	ldr	r3, [r3, #16]
 8003e8a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003e8e:	d118      	bne.n	8003ec2 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e90:	2300      	movs	r3, #0
 8003e92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	695b      	ldr	r3, [r3, #20]
 8003e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	699b      	ldr	r3, [r3, #24]
 8003ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003eb4:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003eba:	1c5a      	adds	r2, r3, #1
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	651a      	str	r2, [r3, #80]	; 0x50
 8003ec0:	e13e      	b.n	8004140 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ec6:	b29b      	uxth	r3, r3
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d113      	bne.n	8003ef4 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ecc:	2300      	movs	r3, #0
 8003ece:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	695b      	ldr	r3, [r3, #20]
 8003ed6:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	699b      	ldr	r3, [r3, #24]
 8003ede:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ef0:	601a      	str	r2, [r3, #0]
 8003ef2:	e115      	b.n	8004120 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ef8:	b29b      	uxth	r3, r3
 8003efa:	2b01      	cmp	r3, #1
 8003efc:	f040 808a 	bne.w	8004014 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f02:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003f06:	d137      	bne.n	8003f78 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f16:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f26:	d113      	bne.n	8003f50 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	681a      	ldr	r2, [r3, #0]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f36:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f38:	2300      	movs	r3, #0
 8003f3a:	627b      	str	r3, [r7, #36]	; 0x24
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	695b      	ldr	r3, [r3, #20]
 8003f42:	627b      	str	r3, [r7, #36]	; 0x24
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	699b      	ldr	r3, [r3, #24]
 8003f4a:	627b      	str	r3, [r7, #36]	; 0x24
 8003f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f4e:	e0e7      	b.n	8004120 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f50:	2300      	movs	r3, #0
 8003f52:	623b      	str	r3, [r7, #32]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	695b      	ldr	r3, [r3, #20]
 8003f5a:	623b      	str	r3, [r7, #32]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	699b      	ldr	r3, [r3, #24]
 8003f62:	623b      	str	r3, [r7, #32]
 8003f64:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f74:	601a      	str	r2, [r3, #0]
 8003f76:	e0d3      	b.n	8004120 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f7a:	2b08      	cmp	r3, #8
 8003f7c:	d02e      	beq.n	8003fdc <I2C_Master_ADDR+0x1b2>
 8003f7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f80:	2b20      	cmp	r3, #32
 8003f82:	d02b      	beq.n	8003fdc <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003f84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f86:	2b12      	cmp	r3, #18
 8003f88:	d102      	bne.n	8003f90 <I2C_Master_ADDR+0x166>
 8003f8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d125      	bne.n	8003fdc <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003f90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f92:	2b04      	cmp	r3, #4
 8003f94:	d00e      	beq.n	8003fb4 <I2C_Master_ADDR+0x18a>
 8003f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f98:	2b02      	cmp	r3, #2
 8003f9a:	d00b      	beq.n	8003fb4 <I2C_Master_ADDR+0x18a>
 8003f9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f9e:	2b10      	cmp	r3, #16
 8003fa0:	d008      	beq.n	8003fb4 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fb0:	601a      	str	r2, [r3, #0]
 8003fb2:	e007      	b.n	8003fc4 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003fc2:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	61fb      	str	r3, [r7, #28]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	695b      	ldr	r3, [r3, #20]
 8003fce:	61fb      	str	r3, [r7, #28]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	699b      	ldr	r3, [r3, #24]
 8003fd6:	61fb      	str	r3, [r7, #28]
 8003fd8:	69fb      	ldr	r3, [r7, #28]
 8003fda:	e0a1      	b.n	8004120 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fea:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fec:	2300      	movs	r3, #0
 8003fee:	61bb      	str	r3, [r7, #24]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	695b      	ldr	r3, [r3, #20]
 8003ff6:	61bb      	str	r3, [r7, #24]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	699b      	ldr	r3, [r3, #24]
 8003ffe:	61bb      	str	r3, [r7, #24]
 8004000:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004010:	601a      	str	r2, [r3, #0]
 8004012:	e085      	b.n	8004120 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004018:	b29b      	uxth	r3, r3
 800401a:	2b02      	cmp	r3, #2
 800401c:	d14d      	bne.n	80040ba <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800401e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004020:	2b04      	cmp	r3, #4
 8004022:	d016      	beq.n	8004052 <I2C_Master_ADDR+0x228>
 8004024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004026:	2b02      	cmp	r3, #2
 8004028:	d013      	beq.n	8004052 <I2C_Master_ADDR+0x228>
 800402a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800402c:	2b10      	cmp	r3, #16
 800402e:	d010      	beq.n	8004052 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800403e:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800404e:	601a      	str	r2, [r3, #0]
 8004050:	e007      	b.n	8004062 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004060:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800406c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004070:	d117      	bne.n	80040a2 <I2C_Master_ADDR+0x278>
 8004072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004074:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004078:	d00b      	beq.n	8004092 <I2C_Master_ADDR+0x268>
 800407a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800407c:	2b01      	cmp	r3, #1
 800407e:	d008      	beq.n	8004092 <I2C_Master_ADDR+0x268>
 8004080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004082:	2b08      	cmp	r3, #8
 8004084:	d005      	beq.n	8004092 <I2C_Master_ADDR+0x268>
 8004086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004088:	2b10      	cmp	r3, #16
 800408a:	d002      	beq.n	8004092 <I2C_Master_ADDR+0x268>
 800408c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800408e:	2b20      	cmp	r3, #32
 8004090:	d107      	bne.n	80040a2 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	685a      	ldr	r2, [r3, #4]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80040a0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040a2:	2300      	movs	r3, #0
 80040a4:	617b      	str	r3, [r7, #20]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	695b      	ldr	r3, [r3, #20]
 80040ac:	617b      	str	r3, [r7, #20]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	699b      	ldr	r3, [r3, #24]
 80040b4:	617b      	str	r3, [r7, #20]
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	e032      	b.n	8004120 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	681a      	ldr	r2, [r3, #0]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80040c8:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040d8:	d117      	bne.n	800410a <I2C_Master_ADDR+0x2e0>
 80040da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040dc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80040e0:	d00b      	beq.n	80040fa <I2C_Master_ADDR+0x2d0>
 80040e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d008      	beq.n	80040fa <I2C_Master_ADDR+0x2d0>
 80040e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040ea:	2b08      	cmp	r3, #8
 80040ec:	d005      	beq.n	80040fa <I2C_Master_ADDR+0x2d0>
 80040ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040f0:	2b10      	cmp	r3, #16
 80040f2:	d002      	beq.n	80040fa <I2C_Master_ADDR+0x2d0>
 80040f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040f6:	2b20      	cmp	r3, #32
 80040f8:	d107      	bne.n	800410a <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	685a      	ldr	r2, [r3, #4]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004108:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800410a:	2300      	movs	r3, #0
 800410c:	613b      	str	r3, [r7, #16]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	695b      	ldr	r3, [r3, #20]
 8004114:	613b      	str	r3, [r7, #16]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	699b      	ldr	r3, [r3, #24]
 800411c:	613b      	str	r3, [r7, #16]
 800411e:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2200      	movs	r2, #0
 8004124:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004126:	e00b      	b.n	8004140 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004128:	2300      	movs	r3, #0
 800412a:	60fb      	str	r3, [r7, #12]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	695b      	ldr	r3, [r3, #20]
 8004132:	60fb      	str	r3, [r7, #12]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	699b      	ldr	r3, [r3, #24]
 800413a:	60fb      	str	r3, [r7, #12]
 800413c:	68fb      	ldr	r3, [r7, #12]
}
 800413e:	e7ff      	b.n	8004140 <I2C_Master_ADDR+0x316>
 8004140:	bf00      	nop
 8004142:	3744      	adds	r7, #68	; 0x44
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr

0800414c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b084      	sub	sp, #16
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800415a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004160:	b29b      	uxth	r3, r3
 8004162:	2b00      	cmp	r3, #0
 8004164:	d02b      	beq.n	80041be <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800416a:	781a      	ldrb	r2, [r3, #0]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004176:	1c5a      	adds	r2, r3, #1
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004180:	b29b      	uxth	r3, r3
 8004182:	3b01      	subs	r3, #1
 8004184:	b29a      	uxth	r2, r3
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800418e:	b29b      	uxth	r3, r3
 8004190:	2b00      	cmp	r3, #0
 8004192:	d114      	bne.n	80041be <I2C_SlaveTransmit_TXE+0x72>
 8004194:	7bfb      	ldrb	r3, [r7, #15]
 8004196:	2b29      	cmp	r3, #41	; 0x29
 8004198:	d111      	bne.n	80041be <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	685a      	ldr	r2, [r3, #4]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041a8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2221      	movs	r2, #33	; 0x21
 80041ae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2228      	movs	r2, #40	; 0x28
 80041b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80041b8:	6878      	ldr	r0, [r7, #4]
 80041ba:	f7ff f9d9 	bl	8003570 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80041be:	bf00      	nop
 80041c0:	3710      	adds	r7, #16
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}

080041c6 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80041c6:	b480      	push	{r7}
 80041c8:	b083      	sub	sp, #12
 80041ca:	af00      	add	r7, sp, #0
 80041cc:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041d2:	b29b      	uxth	r3, r3
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d011      	beq.n	80041fc <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041dc:	781a      	ldrb	r2, [r3, #0]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e8:	1c5a      	adds	r2, r3, #1
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041f2:	b29b      	uxth	r3, r3
 80041f4:	3b01      	subs	r3, #1
 80041f6:	b29a      	uxth	r2, r3
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80041fc:	bf00      	nop
 80041fe:	370c      	adds	r7, #12
 8004200:	46bd      	mov	sp, r7
 8004202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004206:	4770      	bx	lr

08004208 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b084      	sub	sp, #16
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004216:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800421c:	b29b      	uxth	r3, r3
 800421e:	2b00      	cmp	r3, #0
 8004220:	d02c      	beq.n	800427c <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	691a      	ldr	r2, [r3, #16]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800422c:	b2d2      	uxtb	r2, r2
 800422e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004234:	1c5a      	adds	r2, r3, #1
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800423e:	b29b      	uxth	r3, r3
 8004240:	3b01      	subs	r3, #1
 8004242:	b29a      	uxth	r2, r3
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800424c:	b29b      	uxth	r3, r3
 800424e:	2b00      	cmp	r3, #0
 8004250:	d114      	bne.n	800427c <I2C_SlaveReceive_RXNE+0x74>
 8004252:	7bfb      	ldrb	r3, [r7, #15]
 8004254:	2b2a      	cmp	r3, #42	; 0x2a
 8004256:	d111      	bne.n	800427c <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	685a      	ldr	r2, [r3, #4]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004266:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2222      	movs	r2, #34	; 0x22
 800426c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2228      	movs	r2, #40	; 0x28
 8004272:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f7ff f984 	bl	8003584 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800427c:	bf00      	nop
 800427e:	3710      	adds	r7, #16
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}

08004284 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004284:	b480      	push	{r7}
 8004286:	b083      	sub	sp, #12
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004290:	b29b      	uxth	r3, r3
 8004292:	2b00      	cmp	r3, #0
 8004294:	d012      	beq.n	80042bc <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	691a      	ldr	r2, [r3, #16]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a0:	b2d2      	uxtb	r2, r2
 80042a2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a8:	1c5a      	adds	r2, r3, #1
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042b2:	b29b      	uxth	r3, r3
 80042b4:	3b01      	subs	r3, #1
 80042b6:	b29a      	uxth	r2, r3
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80042bc:	bf00      	nop
 80042be:	370c      	adds	r7, #12
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr

080042c8 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b084      	sub	sp, #16
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
 80042d0:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80042d2:	2300      	movs	r3, #0
 80042d4:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80042e2:	2b28      	cmp	r3, #40	; 0x28
 80042e4:	d127      	bne.n	8004336 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	685a      	ldr	r2, [r3, #4]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042f4:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	089b      	lsrs	r3, r3, #2
 80042fa:	f003 0301 	and.w	r3, r3, #1
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d101      	bne.n	8004306 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004302:	2301      	movs	r3, #1
 8004304:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	09db      	lsrs	r3, r3, #7
 800430a:	f003 0301 	and.w	r3, r3, #1
 800430e:	2b00      	cmp	r3, #0
 8004310:	d103      	bne.n	800431a <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	68db      	ldr	r3, [r3, #12]
 8004316:	81bb      	strh	r3, [r7, #12]
 8004318:	e002      	b.n	8004320 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	699b      	ldr	r3, [r3, #24]
 800431e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2200      	movs	r2, #0
 8004324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004328:	89ba      	ldrh	r2, [r7, #12]
 800432a:	7bfb      	ldrb	r3, [r7, #15]
 800432c:	4619      	mov	r1, r3
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	f7ff f932 	bl	8003598 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004334:	e00e      	b.n	8004354 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004336:	2300      	movs	r3, #0
 8004338:	60bb      	str	r3, [r7, #8]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	695b      	ldr	r3, [r3, #20]
 8004340:	60bb      	str	r3, [r7, #8]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	699b      	ldr	r3, [r3, #24]
 8004348:	60bb      	str	r3, [r7, #8]
 800434a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2200      	movs	r2, #0
 8004350:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004354:	bf00      	nop
 8004356:	3710      	adds	r7, #16
 8004358:	46bd      	mov	sp, r7
 800435a:	bd80      	pop	{r7, pc}

0800435c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b084      	sub	sp, #16
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800436a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	685a      	ldr	r2, [r3, #4]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800437a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800437c:	2300      	movs	r3, #0
 800437e:	60bb      	str	r3, [r7, #8]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	695b      	ldr	r3, [r3, #20]
 8004386:	60bb      	str	r3, [r7, #8]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f042 0201 	orr.w	r2, r2, #1
 8004396:	601a      	str	r2, [r3, #0]
 8004398:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043a8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043b8:	d172      	bne.n	80044a0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80043ba:	7bfb      	ldrb	r3, [r7, #15]
 80043bc:	2b22      	cmp	r3, #34	; 0x22
 80043be:	d002      	beq.n	80043c6 <I2C_Slave_STOPF+0x6a>
 80043c0:	7bfb      	ldrb	r3, [r7, #15]
 80043c2:	2b2a      	cmp	r3, #42	; 0x2a
 80043c4:	d135      	bne.n	8004432 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	b29a      	uxth	r2, r3
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043d8:	b29b      	uxth	r3, r3
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d005      	beq.n	80043ea <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e2:	f043 0204 	orr.w	r2, r3, #4
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	685a      	ldr	r2, [r3, #4]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043f8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043fe:	4618      	mov	r0, r3
 8004400:	f7fd ff1f 	bl	8002242 <HAL_DMA_GetState>
 8004404:	4603      	mov	r3, r0
 8004406:	2b01      	cmp	r3, #1
 8004408:	d049      	beq.n	800449e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800440e:	4a69      	ldr	r2, [pc, #420]	; (80045b4 <I2C_Slave_STOPF+0x258>)
 8004410:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004416:	4618      	mov	r0, r3
 8004418:	f7fd fef1 	bl	80021fe <HAL_DMA_Abort_IT>
 800441c:	4603      	mov	r3, r0
 800441e:	2b00      	cmp	r3, #0
 8004420:	d03d      	beq.n	800449e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004426:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004428:	687a      	ldr	r2, [r7, #4]
 800442a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800442c:	4610      	mov	r0, r2
 800442e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004430:	e035      	b.n	800449e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	b29a      	uxth	r2, r3
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004444:	b29b      	uxth	r3, r3
 8004446:	2b00      	cmp	r3, #0
 8004448:	d005      	beq.n	8004456 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800444e:	f043 0204 	orr.w	r2, r3, #4
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	685a      	ldr	r2, [r3, #4]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004464:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800446a:	4618      	mov	r0, r3
 800446c:	f7fd fee9 	bl	8002242 <HAL_DMA_GetState>
 8004470:	4603      	mov	r3, r0
 8004472:	2b01      	cmp	r3, #1
 8004474:	d014      	beq.n	80044a0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800447a:	4a4e      	ldr	r2, [pc, #312]	; (80045b4 <I2C_Slave_STOPF+0x258>)
 800447c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004482:	4618      	mov	r0, r3
 8004484:	f7fd febb 	bl	80021fe <HAL_DMA_Abort_IT>
 8004488:	4603      	mov	r3, r0
 800448a:	2b00      	cmp	r3, #0
 800448c:	d008      	beq.n	80044a0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004492:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004494:	687a      	ldr	r2, [r7, #4]
 8004496:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004498:	4610      	mov	r0, r2
 800449a:	4798      	blx	r3
 800449c:	e000      	b.n	80044a0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800449e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044a4:	b29b      	uxth	r3, r3
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d03e      	beq.n	8004528 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	695b      	ldr	r3, [r3, #20]
 80044b0:	f003 0304 	and.w	r3, r3, #4
 80044b4:	2b04      	cmp	r3, #4
 80044b6:	d112      	bne.n	80044de <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	691a      	ldr	r2, [r3, #16]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c2:	b2d2      	uxtb	r2, r2
 80044c4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ca:	1c5a      	adds	r2, r3, #1
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044d4:	b29b      	uxth	r3, r3
 80044d6:	3b01      	subs	r3, #1
 80044d8:	b29a      	uxth	r2, r3
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	695b      	ldr	r3, [r3, #20]
 80044e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044e8:	2b40      	cmp	r3, #64	; 0x40
 80044ea:	d112      	bne.n	8004512 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	691a      	ldr	r2, [r3, #16]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f6:	b2d2      	uxtb	r2, r2
 80044f8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044fe:	1c5a      	adds	r2, r3, #1
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004508:	b29b      	uxth	r3, r3
 800450a:	3b01      	subs	r3, #1
 800450c:	b29a      	uxth	r2, r3
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004516:	b29b      	uxth	r3, r3
 8004518:	2b00      	cmp	r3, #0
 800451a:	d005      	beq.n	8004528 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004520:	f043 0204 	orr.w	r2, r3, #4
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800452c:	2b00      	cmp	r3, #0
 800452e:	d003      	beq.n	8004538 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	f000 f8b3 	bl	800469c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004536:	e039      	b.n	80045ac <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004538:	7bfb      	ldrb	r3, [r7, #15]
 800453a:	2b2a      	cmp	r3, #42	; 0x2a
 800453c:	d109      	bne.n	8004552 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2200      	movs	r2, #0
 8004542:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2228      	movs	r2, #40	; 0x28
 8004548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	f7ff f819 	bl	8003584 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004558:	b2db      	uxtb	r3, r3
 800455a:	2b28      	cmp	r3, #40	; 0x28
 800455c:	d111      	bne.n	8004582 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	4a15      	ldr	r2, [pc, #84]	; (80045b8 <I2C_Slave_STOPF+0x25c>)
 8004562:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2200      	movs	r2, #0
 8004568:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2220      	movs	r2, #32
 800456e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2200      	movs	r2, #0
 8004576:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f7ff f81a 	bl	80035b4 <HAL_I2C_ListenCpltCallback>
}
 8004580:	e014      	b.n	80045ac <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004586:	2b22      	cmp	r3, #34	; 0x22
 8004588:	d002      	beq.n	8004590 <I2C_Slave_STOPF+0x234>
 800458a:	7bfb      	ldrb	r3, [r7, #15]
 800458c:	2b22      	cmp	r3, #34	; 0x22
 800458e:	d10d      	bne.n	80045ac <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2200      	movs	r2, #0
 8004594:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2220      	movs	r2, #32
 800459a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2200      	movs	r2, #0
 80045a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f7fe ffec 	bl	8003584 <HAL_I2C_SlaveRxCpltCallback>
}
 80045ac:	bf00      	nop
 80045ae:	3710      	adds	r7, #16
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}
 80045b4:	08004bd5 	.word	0x08004bd5
 80045b8:	ffff0000 	.word	0xffff0000

080045bc <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b084      	sub	sp, #16
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045ca:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045d0:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	2b08      	cmp	r3, #8
 80045d6:	d002      	beq.n	80045de <I2C_Slave_AF+0x22>
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	2b20      	cmp	r3, #32
 80045dc:	d129      	bne.n	8004632 <I2C_Slave_AF+0x76>
 80045de:	7bfb      	ldrb	r3, [r7, #15]
 80045e0:	2b28      	cmp	r3, #40	; 0x28
 80045e2:	d126      	bne.n	8004632 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	4a2c      	ldr	r2, [pc, #176]	; (8004698 <I2C_Slave_AF+0xdc>)
 80045e8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	685a      	ldr	r2, [r3, #4]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80045f8:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004602:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004612:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2200      	movs	r2, #0
 8004618:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2220      	movs	r2, #32
 800461e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2200      	movs	r2, #0
 8004626:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f7fe ffc2 	bl	80035b4 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004630:	e02e      	b.n	8004690 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004632:	7bfb      	ldrb	r3, [r7, #15]
 8004634:	2b21      	cmp	r3, #33	; 0x21
 8004636:	d126      	bne.n	8004686 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	4a17      	ldr	r2, [pc, #92]	; (8004698 <I2C_Slave_AF+0xdc>)
 800463c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2221      	movs	r2, #33	; 0x21
 8004642:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2220      	movs	r2, #32
 8004648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2200      	movs	r2, #0
 8004650:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	685a      	ldr	r2, [r3, #4]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004662:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800466c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800467c:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	f7fe ff76 	bl	8003570 <HAL_I2C_SlaveTxCpltCallback>
}
 8004684:	e004      	b.n	8004690 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800468e:	615a      	str	r2, [r3, #20]
}
 8004690:	bf00      	nop
 8004692:	3710      	adds	r7, #16
 8004694:	46bd      	mov	sp, r7
 8004696:	bd80      	pop	{r7, pc}
 8004698:	ffff0000 	.word	0xffff0000

0800469c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b084      	sub	sp, #16
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046aa:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046b2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80046b4:	7bbb      	ldrb	r3, [r7, #14]
 80046b6:	2b10      	cmp	r3, #16
 80046b8:	d002      	beq.n	80046c0 <I2C_ITError+0x24>
 80046ba:	7bbb      	ldrb	r3, [r7, #14]
 80046bc:	2b40      	cmp	r3, #64	; 0x40
 80046be:	d10a      	bne.n	80046d6 <I2C_ITError+0x3a>
 80046c0:	7bfb      	ldrb	r3, [r7, #15]
 80046c2:	2b22      	cmp	r3, #34	; 0x22
 80046c4:	d107      	bne.n	80046d6 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80046d4:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80046d6:	7bfb      	ldrb	r3, [r7, #15]
 80046d8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80046dc:	2b28      	cmp	r3, #40	; 0x28
 80046de:	d107      	bne.n	80046f0 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2200      	movs	r2, #0
 80046e4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2228      	movs	r2, #40	; 0x28
 80046ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80046ee:	e015      	b.n	800471c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046fe:	d00a      	beq.n	8004716 <I2C_ITError+0x7a>
 8004700:	7bfb      	ldrb	r3, [r7, #15]
 8004702:	2b60      	cmp	r3, #96	; 0x60
 8004704:	d007      	beq.n	8004716 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2220      	movs	r2, #32
 800470a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2200      	movs	r2, #0
 8004712:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2200      	movs	r2, #0
 800471a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004726:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800472a:	d162      	bne.n	80047f2 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	685a      	ldr	r2, [r3, #4]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800473a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004740:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004744:	b2db      	uxtb	r3, r3
 8004746:	2b01      	cmp	r3, #1
 8004748:	d020      	beq.n	800478c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800474e:	4a6a      	ldr	r2, [pc, #424]	; (80048f8 <I2C_ITError+0x25c>)
 8004750:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004756:	4618      	mov	r0, r3
 8004758:	f7fd fd51 	bl	80021fe <HAL_DMA_Abort_IT>
 800475c:	4603      	mov	r3, r0
 800475e:	2b00      	cmp	r3, #0
 8004760:	f000 8089 	beq.w	8004876 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f022 0201 	bic.w	r2, r2, #1
 8004772:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2220      	movs	r2, #32
 8004778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004780:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004782:	687a      	ldr	r2, [r7, #4]
 8004784:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004786:	4610      	mov	r0, r2
 8004788:	4798      	blx	r3
 800478a:	e074      	b.n	8004876 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004790:	4a59      	ldr	r2, [pc, #356]	; (80048f8 <I2C_ITError+0x25c>)
 8004792:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004798:	4618      	mov	r0, r3
 800479a:	f7fd fd30 	bl	80021fe <HAL_DMA_Abort_IT>
 800479e:	4603      	mov	r3, r0
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d068      	beq.n	8004876 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	695b      	ldr	r3, [r3, #20]
 80047aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047ae:	2b40      	cmp	r3, #64	; 0x40
 80047b0:	d10b      	bne.n	80047ca <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	691a      	ldr	r2, [r3, #16]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047bc:	b2d2      	uxtb	r2, r2
 80047be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c4:	1c5a      	adds	r2, r3, #1
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	681a      	ldr	r2, [r3, #0]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f022 0201 	bic.w	r2, r2, #1
 80047d8:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2220      	movs	r2, #32
 80047de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047e8:	687a      	ldr	r2, [r7, #4]
 80047ea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80047ec:	4610      	mov	r0, r2
 80047ee:	4798      	blx	r3
 80047f0:	e041      	b.n	8004876 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047f8:	b2db      	uxtb	r3, r3
 80047fa:	2b60      	cmp	r3, #96	; 0x60
 80047fc:	d125      	bne.n	800484a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2220      	movs	r2, #32
 8004802:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2200      	movs	r2, #0
 800480a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	695b      	ldr	r3, [r3, #20]
 8004812:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004816:	2b40      	cmp	r3, #64	; 0x40
 8004818:	d10b      	bne.n	8004832 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	691a      	ldr	r2, [r3, #16]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004824:	b2d2      	uxtb	r2, r2
 8004826:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800482c:	1c5a      	adds	r2, r3, #1
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f022 0201 	bic.w	r2, r2, #1
 8004840:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f7fe fede 	bl	8003604 <HAL_I2C_AbortCpltCallback>
 8004848:	e015      	b.n	8004876 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	695b      	ldr	r3, [r3, #20]
 8004850:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004854:	2b40      	cmp	r3, #64	; 0x40
 8004856:	d10b      	bne.n	8004870 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	691a      	ldr	r2, [r3, #16]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004862:	b2d2      	uxtb	r2, r2
 8004864:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800486a:	1c5a      	adds	r2, r3, #1
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004870:	6878      	ldr	r0, [r7, #4]
 8004872:	f7fe febd 	bl	80035f0 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800487a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	f003 0301 	and.w	r3, r3, #1
 8004882:	2b00      	cmp	r3, #0
 8004884:	d10e      	bne.n	80048a4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800488c:	2b00      	cmp	r3, #0
 800488e:	d109      	bne.n	80048a4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004896:	2b00      	cmp	r3, #0
 8004898:	d104      	bne.n	80048a4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d007      	beq.n	80048b4 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	685a      	ldr	r2, [r3, #4]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80048b2:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048ba:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c0:	f003 0304 	and.w	r3, r3, #4
 80048c4:	2b04      	cmp	r3, #4
 80048c6:	d113      	bne.n	80048f0 <I2C_ITError+0x254>
 80048c8:	7bfb      	ldrb	r3, [r7, #15]
 80048ca:	2b28      	cmp	r3, #40	; 0x28
 80048cc:	d110      	bne.n	80048f0 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	4a0a      	ldr	r2, [pc, #40]	; (80048fc <I2C_ITError+0x260>)
 80048d2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2200      	movs	r2, #0
 80048d8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2220      	movs	r2, #32
 80048de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2200      	movs	r2, #0
 80048e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	f7fe fe62 	bl	80035b4 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80048f0:	bf00      	nop
 80048f2:	3710      	adds	r7, #16
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}
 80048f8:	08004bd5 	.word	0x08004bd5
 80048fc:	ffff0000 	.word	0xffff0000

08004900 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b088      	sub	sp, #32
 8004904:	af02      	add	r7, sp, #8
 8004906:	60f8      	str	r0, [r7, #12]
 8004908:	607a      	str	r2, [r7, #4]
 800490a:	603b      	str	r3, [r7, #0]
 800490c:	460b      	mov	r3, r1
 800490e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004914:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	2b08      	cmp	r3, #8
 800491a:	d006      	beq.n	800492a <I2C_MasterRequestWrite+0x2a>
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	2b01      	cmp	r3, #1
 8004920:	d003      	beq.n	800492a <I2C_MasterRequestWrite+0x2a>
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004928:	d108      	bne.n	800493c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004938:	601a      	str	r2, [r3, #0]
 800493a:	e00b      	b.n	8004954 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004940:	2b12      	cmp	r3, #18
 8004942:	d107      	bne.n	8004954 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004952:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	9300      	str	r3, [sp, #0]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2200      	movs	r2, #0
 800495c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004960:	68f8      	ldr	r0, [r7, #12]
 8004962:	f000 f9df 	bl	8004d24 <I2C_WaitOnFlagUntilTimeout>
 8004966:	4603      	mov	r3, r0
 8004968:	2b00      	cmp	r3, #0
 800496a:	d00d      	beq.n	8004988 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004976:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800497a:	d103      	bne.n	8004984 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004982:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004984:	2303      	movs	r3, #3
 8004986:	e035      	b.n	80049f4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	691b      	ldr	r3, [r3, #16]
 800498c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004990:	d108      	bne.n	80049a4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004992:	897b      	ldrh	r3, [r7, #10]
 8004994:	b2db      	uxtb	r3, r3
 8004996:	461a      	mov	r2, r3
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80049a0:	611a      	str	r2, [r3, #16]
 80049a2:	e01b      	b.n	80049dc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80049a4:	897b      	ldrh	r3, [r7, #10]
 80049a6:	11db      	asrs	r3, r3, #7
 80049a8:	b2db      	uxtb	r3, r3
 80049aa:	f003 0306 	and.w	r3, r3, #6
 80049ae:	b2db      	uxtb	r3, r3
 80049b0:	f063 030f 	orn	r3, r3, #15
 80049b4:	b2da      	uxtb	r2, r3
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	687a      	ldr	r2, [r7, #4]
 80049c0:	490e      	ldr	r1, [pc, #56]	; (80049fc <I2C_MasterRequestWrite+0xfc>)
 80049c2:	68f8      	ldr	r0, [r7, #12]
 80049c4:	f000 fa05 	bl	8004dd2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80049c8:	4603      	mov	r3, r0
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d001      	beq.n	80049d2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	e010      	b.n	80049f4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80049d2:	897b      	ldrh	r3, [r7, #10]
 80049d4:	b2da      	uxtb	r2, r3
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	687a      	ldr	r2, [r7, #4]
 80049e0:	4907      	ldr	r1, [pc, #28]	; (8004a00 <I2C_MasterRequestWrite+0x100>)
 80049e2:	68f8      	ldr	r0, [r7, #12]
 80049e4:	f000 f9f5 	bl	8004dd2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80049e8:	4603      	mov	r3, r0
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d001      	beq.n	80049f2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	e000      	b.n	80049f4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80049f2:	2300      	movs	r3, #0
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	3718      	adds	r7, #24
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}
 80049fc:	00010008 	.word	0x00010008
 8004a00:	00010002 	.word	0x00010002

08004a04 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b088      	sub	sp, #32
 8004a08:	af02      	add	r7, sp, #8
 8004a0a:	60f8      	str	r0, [r7, #12]
 8004a0c:	4608      	mov	r0, r1
 8004a0e:	4611      	mov	r1, r2
 8004a10:	461a      	mov	r2, r3
 8004a12:	4603      	mov	r3, r0
 8004a14:	817b      	strh	r3, [r7, #10]
 8004a16:	460b      	mov	r3, r1
 8004a18:	813b      	strh	r3, [r7, #8]
 8004a1a:	4613      	mov	r3, r2
 8004a1c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004a2c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	681a      	ldr	r2, [r3, #0]
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a3c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a40:	9300      	str	r3, [sp, #0]
 8004a42:	6a3b      	ldr	r3, [r7, #32]
 8004a44:	2200      	movs	r2, #0
 8004a46:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004a4a:	68f8      	ldr	r0, [r7, #12]
 8004a4c:	f000 f96a 	bl	8004d24 <I2C_WaitOnFlagUntilTimeout>
 8004a50:	4603      	mov	r3, r0
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d00d      	beq.n	8004a72 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a64:	d103      	bne.n	8004a6e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a6c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004a6e:	2303      	movs	r3, #3
 8004a70:	e0aa      	b.n	8004bc8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004a72:	897b      	ldrh	r3, [r7, #10]
 8004a74:	b2db      	uxtb	r3, r3
 8004a76:	461a      	mov	r2, r3
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004a80:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a84:	6a3a      	ldr	r2, [r7, #32]
 8004a86:	4952      	ldr	r1, [pc, #328]	; (8004bd0 <I2C_RequestMemoryRead+0x1cc>)
 8004a88:	68f8      	ldr	r0, [r7, #12]
 8004a8a:	f000 f9a2 	bl	8004dd2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a8e:	4603      	mov	r3, r0
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d001      	beq.n	8004a98 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004a94:	2301      	movs	r3, #1
 8004a96:	e097      	b.n	8004bc8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a98:	2300      	movs	r3, #0
 8004a9a:	617b      	str	r3, [r7, #20]
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	695b      	ldr	r3, [r3, #20]
 8004aa2:	617b      	str	r3, [r7, #20]
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	699b      	ldr	r3, [r3, #24]
 8004aaa:	617b      	str	r3, [r7, #20]
 8004aac:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004aae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ab0:	6a39      	ldr	r1, [r7, #32]
 8004ab2:	68f8      	ldr	r0, [r7, #12]
 8004ab4:	f000 fa0c 	bl	8004ed0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d00d      	beq.n	8004ada <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac2:	2b04      	cmp	r3, #4
 8004ac4:	d107      	bne.n	8004ad6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ad4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e076      	b.n	8004bc8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004ada:	88fb      	ldrh	r3, [r7, #6]
 8004adc:	2b01      	cmp	r3, #1
 8004ade:	d105      	bne.n	8004aec <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004ae0:	893b      	ldrh	r3, [r7, #8]
 8004ae2:	b2da      	uxtb	r2, r3
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	611a      	str	r2, [r3, #16]
 8004aea:	e021      	b.n	8004b30 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004aec:	893b      	ldrh	r3, [r7, #8]
 8004aee:	0a1b      	lsrs	r3, r3, #8
 8004af0:	b29b      	uxth	r3, r3
 8004af2:	b2da      	uxtb	r2, r3
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004afa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004afc:	6a39      	ldr	r1, [r7, #32]
 8004afe:	68f8      	ldr	r0, [r7, #12]
 8004b00:	f000 f9e6 	bl	8004ed0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b04:	4603      	mov	r3, r0
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d00d      	beq.n	8004b26 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b0e:	2b04      	cmp	r3, #4
 8004b10:	d107      	bne.n	8004b22 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	681a      	ldr	r2, [r3, #0]
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b20:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	e050      	b.n	8004bc8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004b26:	893b      	ldrh	r3, [r7, #8]
 8004b28:	b2da      	uxtb	r2, r3
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b32:	6a39      	ldr	r1, [r7, #32]
 8004b34:	68f8      	ldr	r0, [r7, #12]
 8004b36:	f000 f9cb 	bl	8004ed0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d00d      	beq.n	8004b5c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b44:	2b04      	cmp	r3, #4
 8004b46:	d107      	bne.n	8004b58 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	681a      	ldr	r2, [r3, #0]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b56:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	e035      	b.n	8004bc8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b6a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b6e:	9300      	str	r3, [sp, #0]
 8004b70:	6a3b      	ldr	r3, [r7, #32]
 8004b72:	2200      	movs	r2, #0
 8004b74:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004b78:	68f8      	ldr	r0, [r7, #12]
 8004b7a:	f000 f8d3 	bl	8004d24 <I2C_WaitOnFlagUntilTimeout>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d00d      	beq.n	8004ba0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b92:	d103      	bne.n	8004b9c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b9a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004b9c:	2303      	movs	r3, #3
 8004b9e:	e013      	b.n	8004bc8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004ba0:	897b      	ldrh	r3, [r7, #10]
 8004ba2:	b2db      	uxtb	r3, r3
 8004ba4:	f043 0301 	orr.w	r3, r3, #1
 8004ba8:	b2da      	uxtb	r2, r3
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb2:	6a3a      	ldr	r2, [r7, #32]
 8004bb4:	4906      	ldr	r1, [pc, #24]	; (8004bd0 <I2C_RequestMemoryRead+0x1cc>)
 8004bb6:	68f8      	ldr	r0, [r7, #12]
 8004bb8:	f000 f90b 	bl	8004dd2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d001      	beq.n	8004bc6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e000      	b.n	8004bc8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004bc6:	2300      	movs	r3, #0
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	3718      	adds	r7, #24
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bd80      	pop	{r7, pc}
 8004bd0:	00010002 	.word	0x00010002

08004bd4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b086      	sub	sp, #24
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004bdc:	2300      	movs	r3, #0
 8004bde:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004be4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bec:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004bee:	4b4b      	ldr	r3, [pc, #300]	; (8004d1c <I2C_DMAAbort+0x148>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	08db      	lsrs	r3, r3, #3
 8004bf4:	4a4a      	ldr	r2, [pc, #296]	; (8004d20 <I2C_DMAAbort+0x14c>)
 8004bf6:	fba2 2303 	umull	r2, r3, r2, r3
 8004bfa:	0a1a      	lsrs	r2, r3, #8
 8004bfc:	4613      	mov	r3, r2
 8004bfe:	009b      	lsls	r3, r3, #2
 8004c00:	4413      	add	r3, r2
 8004c02:	00da      	lsls	r2, r3, #3
 8004c04:	1ad3      	subs	r3, r2, r3
 8004c06:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d106      	bne.n	8004c1c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c12:	f043 0220 	orr.w	r2, r3, #32
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8004c1a:	e00a      	b.n	8004c32 <I2C_DMAAbort+0x5e>
    }
    count--;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	3b01      	subs	r3, #1
 8004c20:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c30:	d0ea      	beq.n	8004c08 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004c32:	697b      	ldr	r3, [r7, #20]
 8004c34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d003      	beq.n	8004c42 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c3e:	2200      	movs	r2, #0
 8004c40:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d003      	beq.n	8004c52 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c4e:	2200      	movs	r2, #0
 8004c50:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	681a      	ldr	r2, [r3, #0]
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c60:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	2200      	movs	r2, #0
 8004c66:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d003      	beq.n	8004c78 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c74:	2200      	movs	r2, #0
 8004c76:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d003      	beq.n	8004c88 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c84:	2200      	movs	r2, #0
 8004c86:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	681a      	ldr	r2, [r3, #0]
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f022 0201 	bic.w	r2, r2, #1
 8004c96:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c9e:	b2db      	uxtb	r3, r3
 8004ca0:	2b60      	cmp	r3, #96	; 0x60
 8004ca2:	d10e      	bne.n	8004cc2 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	2220      	movs	r2, #32
 8004ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004cba:	6978      	ldr	r0, [r7, #20]
 8004cbc:	f7fe fca2 	bl	8003604 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004cc0:	e027      	b.n	8004d12 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004cc2:	7cfb      	ldrb	r3, [r7, #19]
 8004cc4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004cc8:	2b28      	cmp	r3, #40	; 0x28
 8004cca:	d117      	bne.n	8004cfc <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	681a      	ldr	r2, [r3, #0]
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f042 0201 	orr.w	r2, r2, #1
 8004cda:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	681a      	ldr	r2, [r3, #0]
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004cea:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	2228      	movs	r2, #40	; 0x28
 8004cf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004cfa:	e007      	b.n	8004d0c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	2220      	movs	r2, #32
 8004d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	2200      	movs	r2, #0
 8004d08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004d0c:	6978      	ldr	r0, [r7, #20]
 8004d0e:	f7fe fc6f 	bl	80035f0 <HAL_I2C_ErrorCallback>
}
 8004d12:	bf00      	nop
 8004d14:	3718      	adds	r7, #24
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}
 8004d1a:	bf00      	nop
 8004d1c:	2000006c 	.word	0x2000006c
 8004d20:	14f8b589 	.word	0x14f8b589

08004d24 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b084      	sub	sp, #16
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	60f8      	str	r0, [r7, #12]
 8004d2c:	60b9      	str	r1, [r7, #8]
 8004d2e:	603b      	str	r3, [r7, #0]
 8004d30:	4613      	mov	r3, r2
 8004d32:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d34:	e025      	b.n	8004d82 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d3c:	d021      	beq.n	8004d82 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d3e:	f7fd f8ad 	bl	8001e9c <HAL_GetTick>
 8004d42:	4602      	mov	r2, r0
 8004d44:	69bb      	ldr	r3, [r7, #24]
 8004d46:	1ad3      	subs	r3, r2, r3
 8004d48:	683a      	ldr	r2, [r7, #0]
 8004d4a:	429a      	cmp	r2, r3
 8004d4c:	d302      	bcc.n	8004d54 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d116      	bne.n	8004d82 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2200      	movs	r2, #0
 8004d58:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	2220      	movs	r2, #32
 8004d5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	2200      	movs	r2, #0
 8004d66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d6e:	f043 0220 	orr.w	r2, r3, #32
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e023      	b.n	8004dca <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	0c1b      	lsrs	r3, r3, #16
 8004d86:	b2db      	uxtb	r3, r3
 8004d88:	2b01      	cmp	r3, #1
 8004d8a:	d10d      	bne.n	8004da8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	695b      	ldr	r3, [r3, #20]
 8004d92:	43da      	mvns	r2, r3
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	4013      	ands	r3, r2
 8004d98:	b29b      	uxth	r3, r3
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	bf0c      	ite	eq
 8004d9e:	2301      	moveq	r3, #1
 8004da0:	2300      	movne	r3, #0
 8004da2:	b2db      	uxtb	r3, r3
 8004da4:	461a      	mov	r2, r3
 8004da6:	e00c      	b.n	8004dc2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	699b      	ldr	r3, [r3, #24]
 8004dae:	43da      	mvns	r2, r3
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	4013      	ands	r3, r2
 8004db4:	b29b      	uxth	r3, r3
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	bf0c      	ite	eq
 8004dba:	2301      	moveq	r3, #1
 8004dbc:	2300      	movne	r3, #0
 8004dbe:	b2db      	uxtb	r3, r3
 8004dc0:	461a      	mov	r2, r3
 8004dc2:	79fb      	ldrb	r3, [r7, #7]
 8004dc4:	429a      	cmp	r2, r3
 8004dc6:	d0b6      	beq.n	8004d36 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004dc8:	2300      	movs	r3, #0
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	3710      	adds	r7, #16
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}

08004dd2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004dd2:	b580      	push	{r7, lr}
 8004dd4:	b084      	sub	sp, #16
 8004dd6:	af00      	add	r7, sp, #0
 8004dd8:	60f8      	str	r0, [r7, #12]
 8004dda:	60b9      	str	r1, [r7, #8]
 8004ddc:	607a      	str	r2, [r7, #4]
 8004dde:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004de0:	e051      	b.n	8004e86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	695b      	ldr	r3, [r3, #20]
 8004de8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004df0:	d123      	bne.n	8004e3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	681a      	ldr	r2, [r3, #0]
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e00:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004e0a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2220      	movs	r2, #32
 8004e16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e26:	f043 0204 	orr.w	r2, r3, #4
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	2200      	movs	r2, #0
 8004e32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	e046      	b.n	8004ec8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e40:	d021      	beq.n	8004e86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e42:	f7fd f82b 	bl	8001e9c <HAL_GetTick>
 8004e46:	4602      	mov	r2, r0
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	1ad3      	subs	r3, r2, r3
 8004e4c:	687a      	ldr	r2, [r7, #4]
 8004e4e:	429a      	cmp	r2, r3
 8004e50:	d302      	bcc.n	8004e58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d116      	bne.n	8004e86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2220      	movs	r2, #32
 8004e62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e72:	f043 0220 	orr.w	r2, r3, #32
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004e82:	2301      	movs	r3, #1
 8004e84:	e020      	b.n	8004ec8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	0c1b      	lsrs	r3, r3, #16
 8004e8a:	b2db      	uxtb	r3, r3
 8004e8c:	2b01      	cmp	r3, #1
 8004e8e:	d10c      	bne.n	8004eaa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	695b      	ldr	r3, [r3, #20]
 8004e96:	43da      	mvns	r2, r3
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	4013      	ands	r3, r2
 8004e9c:	b29b      	uxth	r3, r3
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	bf14      	ite	ne
 8004ea2:	2301      	movne	r3, #1
 8004ea4:	2300      	moveq	r3, #0
 8004ea6:	b2db      	uxtb	r3, r3
 8004ea8:	e00b      	b.n	8004ec2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	699b      	ldr	r3, [r3, #24]
 8004eb0:	43da      	mvns	r2, r3
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	4013      	ands	r3, r2
 8004eb6:	b29b      	uxth	r3, r3
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	bf14      	ite	ne
 8004ebc:	2301      	movne	r3, #1
 8004ebe:	2300      	moveq	r3, #0
 8004ec0:	b2db      	uxtb	r3, r3
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d18d      	bne.n	8004de2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004ec6:	2300      	movs	r3, #0
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	3710      	adds	r7, #16
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}

08004ed0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b084      	sub	sp, #16
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	60f8      	str	r0, [r7, #12]
 8004ed8:	60b9      	str	r1, [r7, #8]
 8004eda:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004edc:	e02d      	b.n	8004f3a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004ede:	68f8      	ldr	r0, [r7, #12]
 8004ee0:	f000 f900 	bl	80050e4 <I2C_IsAcknowledgeFailed>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d001      	beq.n	8004eee <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004eea:	2301      	movs	r3, #1
 8004eec:	e02d      	b.n	8004f4a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ef4:	d021      	beq.n	8004f3a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ef6:	f7fc ffd1 	bl	8001e9c <HAL_GetTick>
 8004efa:	4602      	mov	r2, r0
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	1ad3      	subs	r3, r2, r3
 8004f00:	68ba      	ldr	r2, [r7, #8]
 8004f02:	429a      	cmp	r2, r3
 8004f04:	d302      	bcc.n	8004f0c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d116      	bne.n	8004f3a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2220      	movs	r2, #32
 8004f16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f26:	f043 0220 	orr.w	r2, r3, #32
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	2200      	movs	r2, #0
 8004f32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004f36:	2301      	movs	r3, #1
 8004f38:	e007      	b.n	8004f4a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	695b      	ldr	r3, [r3, #20]
 8004f40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f44:	2b80      	cmp	r3, #128	; 0x80
 8004f46:	d1ca      	bne.n	8004ede <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004f48:	2300      	movs	r3, #0
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	3710      	adds	r7, #16
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}

08004f52 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f52:	b580      	push	{r7, lr}
 8004f54:	b084      	sub	sp, #16
 8004f56:	af00      	add	r7, sp, #0
 8004f58:	60f8      	str	r0, [r7, #12]
 8004f5a:	60b9      	str	r1, [r7, #8]
 8004f5c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004f5e:	e02d      	b.n	8004fbc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004f60:	68f8      	ldr	r0, [r7, #12]
 8004f62:	f000 f8bf 	bl	80050e4 <I2C_IsAcknowledgeFailed>
 8004f66:	4603      	mov	r3, r0
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d001      	beq.n	8004f70 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	e02d      	b.n	8004fcc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f76:	d021      	beq.n	8004fbc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f78:	f7fc ff90 	bl	8001e9c <HAL_GetTick>
 8004f7c:	4602      	mov	r2, r0
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	1ad3      	subs	r3, r2, r3
 8004f82:	68ba      	ldr	r2, [r7, #8]
 8004f84:	429a      	cmp	r2, r3
 8004f86:	d302      	bcc.n	8004f8e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d116      	bne.n	8004fbc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	2200      	movs	r2, #0
 8004f92:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2220      	movs	r2, #32
 8004f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fa8:	f043 0220 	orr.w	r2, r3, #32
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004fb8:	2301      	movs	r3, #1
 8004fba:	e007      	b.n	8004fcc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	695b      	ldr	r3, [r3, #20]
 8004fc2:	f003 0304 	and.w	r3, r3, #4
 8004fc6:	2b04      	cmp	r3, #4
 8004fc8:	d1ca      	bne.n	8004f60 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004fca:	2300      	movs	r3, #0
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	3710      	adds	r7, #16
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}

08004fd4 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b085      	sub	sp, #20
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004fdc:	2300      	movs	r3, #0
 8004fde:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004fe0:	4b13      	ldr	r3, [pc, #76]	; (8005030 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	08db      	lsrs	r3, r3, #3
 8004fe6:	4a13      	ldr	r2, [pc, #76]	; (8005034 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004fe8:	fba2 2303 	umull	r2, r3, r2, r3
 8004fec:	0a1a      	lsrs	r2, r3, #8
 8004fee:	4613      	mov	r3, r2
 8004ff0:	009b      	lsls	r3, r3, #2
 8004ff2:	4413      	add	r3, r2
 8004ff4:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	3b01      	subs	r3, #1
 8004ffa:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d107      	bne.n	8005012 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005006:	f043 0220 	orr.w	r2, r3, #32
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800500e:	2301      	movs	r3, #1
 8005010:	e008      	b.n	8005024 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800501c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005020:	d0e9      	beq.n	8004ff6 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005022:	2300      	movs	r3, #0
}
 8005024:	4618      	mov	r0, r3
 8005026:	3714      	adds	r7, #20
 8005028:	46bd      	mov	sp, r7
 800502a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502e:	4770      	bx	lr
 8005030:	2000006c 	.word	0x2000006c
 8005034:	14f8b589 	.word	0x14f8b589

08005038 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b084      	sub	sp, #16
 800503c:	af00      	add	r7, sp, #0
 800503e:	60f8      	str	r0, [r7, #12]
 8005040:	60b9      	str	r1, [r7, #8]
 8005042:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005044:	e042      	b.n	80050cc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	695b      	ldr	r3, [r3, #20]
 800504c:	f003 0310 	and.w	r3, r3, #16
 8005050:	2b10      	cmp	r3, #16
 8005052:	d119      	bne.n	8005088 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f06f 0210 	mvn.w	r2, #16
 800505c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	2200      	movs	r2, #0
 8005062:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	2220      	movs	r2, #32
 8005068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	2200      	movs	r2, #0
 8005070:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	2200      	movs	r2, #0
 8005080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005084:	2301      	movs	r3, #1
 8005086:	e029      	b.n	80050dc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005088:	f7fc ff08 	bl	8001e9c <HAL_GetTick>
 800508c:	4602      	mov	r2, r0
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	1ad3      	subs	r3, r2, r3
 8005092:	68ba      	ldr	r2, [r7, #8]
 8005094:	429a      	cmp	r2, r3
 8005096:	d302      	bcc.n	800509e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d116      	bne.n	80050cc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2200      	movs	r2, #0
 80050a2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	2220      	movs	r2, #32
 80050a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2200      	movs	r2, #0
 80050b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050b8:	f043 0220 	orr.w	r2, r3, #32
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2200      	movs	r2, #0
 80050c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80050c8:	2301      	movs	r3, #1
 80050ca:	e007      	b.n	80050dc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	695b      	ldr	r3, [r3, #20]
 80050d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050d6:	2b40      	cmp	r3, #64	; 0x40
 80050d8:	d1b5      	bne.n	8005046 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80050da:	2300      	movs	r3, #0
}
 80050dc:	4618      	mov	r0, r3
 80050de:	3710      	adds	r7, #16
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}

080050e4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b083      	sub	sp, #12
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	695b      	ldr	r3, [r3, #20]
 80050f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050fa:	d11b      	bne.n	8005134 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005104:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2200      	movs	r2, #0
 800510a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2220      	movs	r2, #32
 8005110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2200      	movs	r2, #0
 8005118:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005120:	f043 0204 	orr.w	r2, r3, #4
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2200      	movs	r2, #0
 800512c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005130:	2301      	movs	r3, #1
 8005132:	e000      	b.n	8005136 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005134:	2300      	movs	r3, #0
}
 8005136:	4618      	mov	r0, r3
 8005138:	370c      	adds	r7, #12
 800513a:	46bd      	mov	sp, r7
 800513c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005140:	4770      	bx	lr

08005142 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005142:	b480      	push	{r7}
 8005144:	b083      	sub	sp, #12
 8005146:	af00      	add	r7, sp, #0
 8005148:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800514e:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005152:	d103      	bne.n	800515c <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2201      	movs	r2, #1
 8005158:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800515a:	e007      	b.n	800516c <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005160:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005164:	d102      	bne.n	800516c <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2208      	movs	r2, #8
 800516a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800516c:	bf00      	nop
 800516e:	370c      	adds	r7, #12
 8005170:	46bd      	mov	sp, r7
 8005172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005176:	4770      	bx	lr

08005178 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005178:	b480      	push	{r7}
 800517a:	b083      	sub	sp, #12
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
 8005180:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005188:	b2db      	uxtb	r3, r3
 800518a:	2b20      	cmp	r3, #32
 800518c:	d129      	bne.n	80051e2 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2224      	movs	r2, #36	; 0x24
 8005192:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	681a      	ldr	r2, [r3, #0]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f022 0201 	bic.w	r2, r2, #1
 80051a4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f022 0210 	bic.w	r2, r2, #16
 80051b4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	683a      	ldr	r2, [r7, #0]
 80051c2:	430a      	orrs	r2, r1
 80051c4:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	681a      	ldr	r2, [r3, #0]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f042 0201 	orr.w	r2, r2, #1
 80051d4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2220      	movs	r2, #32
 80051da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80051de:	2300      	movs	r3, #0
 80051e0:	e000      	b.n	80051e4 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80051e2:	2302      	movs	r3, #2
  }
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	370c      	adds	r7, #12
 80051e8:	46bd      	mov	sp, r7
 80051ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ee:	4770      	bx	lr

080051f0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b085      	sub	sp, #20
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
 80051f8:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80051fa:	2300      	movs	r3, #0
 80051fc:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005204:	b2db      	uxtb	r3, r3
 8005206:	2b20      	cmp	r3, #32
 8005208:	d12a      	bne.n	8005260 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2224      	movs	r2, #36	; 0x24
 800520e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	681a      	ldr	r2, [r3, #0]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f022 0201 	bic.w	r2, r2, #1
 8005220:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005228:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800522a:	89fb      	ldrh	r3, [r7, #14]
 800522c:	f023 030f 	bic.w	r3, r3, #15
 8005230:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	b29a      	uxth	r2, r3
 8005236:	89fb      	ldrh	r3, [r7, #14]
 8005238:	4313      	orrs	r3, r2
 800523a:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	89fa      	ldrh	r2, [r7, #14]
 8005242:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	681a      	ldr	r2, [r3, #0]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f042 0201 	orr.w	r2, r2, #1
 8005252:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2220      	movs	r2, #32
 8005258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800525c:	2300      	movs	r3, #0
 800525e:	e000      	b.n	8005262 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8005260:	2302      	movs	r3, #2
  }
}
 8005262:	4618      	mov	r0, r3
 8005264:	3714      	adds	r7, #20
 8005266:	46bd      	mov	sp, r7
 8005268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526c:	4770      	bx	lr
	...

08005270 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b082      	sub	sp, #8
 8005274:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8005276:	2300      	movs	r3, #0
 8005278:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800527a:	2300      	movs	r3, #0
 800527c:	603b      	str	r3, [r7, #0]
 800527e:	4b20      	ldr	r3, [pc, #128]	; (8005300 <HAL_PWREx_EnableOverDrive+0x90>)
 8005280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005282:	4a1f      	ldr	r2, [pc, #124]	; (8005300 <HAL_PWREx_EnableOverDrive+0x90>)
 8005284:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005288:	6413      	str	r3, [r2, #64]	; 0x40
 800528a:	4b1d      	ldr	r3, [pc, #116]	; (8005300 <HAL_PWREx_EnableOverDrive+0x90>)
 800528c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800528e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005292:	603b      	str	r3, [r7, #0]
 8005294:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005296:	4b1b      	ldr	r3, [pc, #108]	; (8005304 <HAL_PWREx_EnableOverDrive+0x94>)
 8005298:	2201      	movs	r2, #1
 800529a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800529c:	f7fc fdfe 	bl	8001e9c <HAL_GetTick>
 80052a0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80052a2:	e009      	b.n	80052b8 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80052a4:	f7fc fdfa 	bl	8001e9c <HAL_GetTick>
 80052a8:	4602      	mov	r2, r0
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	1ad3      	subs	r3, r2, r3
 80052ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80052b2:	d901      	bls.n	80052b8 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80052b4:	2303      	movs	r3, #3
 80052b6:	e01f      	b.n	80052f8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80052b8:	4b13      	ldr	r3, [pc, #76]	; (8005308 <HAL_PWREx_EnableOverDrive+0x98>)
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052c4:	d1ee      	bne.n	80052a4 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80052c6:	4b11      	ldr	r3, [pc, #68]	; (800530c <HAL_PWREx_EnableOverDrive+0x9c>)
 80052c8:	2201      	movs	r2, #1
 80052ca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80052cc:	f7fc fde6 	bl	8001e9c <HAL_GetTick>
 80052d0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80052d2:	e009      	b.n	80052e8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80052d4:	f7fc fde2 	bl	8001e9c <HAL_GetTick>
 80052d8:	4602      	mov	r2, r0
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	1ad3      	subs	r3, r2, r3
 80052de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80052e2:	d901      	bls.n	80052e8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80052e4:	2303      	movs	r3, #3
 80052e6:	e007      	b.n	80052f8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80052e8:	4b07      	ldr	r3, [pc, #28]	; (8005308 <HAL_PWREx_EnableOverDrive+0x98>)
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80052f4:	d1ee      	bne.n	80052d4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80052f6:	2300      	movs	r3, #0
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	3708      	adds	r7, #8
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}
 8005300:	40023800 	.word	0x40023800
 8005304:	420e0040 	.word	0x420e0040
 8005308:	40007000 	.word	0x40007000
 800530c:	420e0044 	.word	0x420e0044

08005310 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b086      	sub	sp, #24
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d101      	bne.n	8005322 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800531e:	2301      	movs	r3, #1
 8005320:	e267      	b.n	80057f2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f003 0301 	and.w	r3, r3, #1
 800532a:	2b00      	cmp	r3, #0
 800532c:	d075      	beq.n	800541a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800532e:	4b88      	ldr	r3, [pc, #544]	; (8005550 <HAL_RCC_OscConfig+0x240>)
 8005330:	689b      	ldr	r3, [r3, #8]
 8005332:	f003 030c 	and.w	r3, r3, #12
 8005336:	2b04      	cmp	r3, #4
 8005338:	d00c      	beq.n	8005354 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800533a:	4b85      	ldr	r3, [pc, #532]	; (8005550 <HAL_RCC_OscConfig+0x240>)
 800533c:	689b      	ldr	r3, [r3, #8]
 800533e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005342:	2b08      	cmp	r3, #8
 8005344:	d112      	bne.n	800536c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005346:	4b82      	ldr	r3, [pc, #520]	; (8005550 <HAL_RCC_OscConfig+0x240>)
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800534e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005352:	d10b      	bne.n	800536c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005354:	4b7e      	ldr	r3, [pc, #504]	; (8005550 <HAL_RCC_OscConfig+0x240>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800535c:	2b00      	cmp	r3, #0
 800535e:	d05b      	beq.n	8005418 <HAL_RCC_OscConfig+0x108>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d157      	bne.n	8005418 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005368:	2301      	movs	r3, #1
 800536a:	e242      	b.n	80057f2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005374:	d106      	bne.n	8005384 <HAL_RCC_OscConfig+0x74>
 8005376:	4b76      	ldr	r3, [pc, #472]	; (8005550 <HAL_RCC_OscConfig+0x240>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a75      	ldr	r2, [pc, #468]	; (8005550 <HAL_RCC_OscConfig+0x240>)
 800537c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005380:	6013      	str	r3, [r2, #0]
 8005382:	e01d      	b.n	80053c0 <HAL_RCC_OscConfig+0xb0>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800538c:	d10c      	bne.n	80053a8 <HAL_RCC_OscConfig+0x98>
 800538e:	4b70      	ldr	r3, [pc, #448]	; (8005550 <HAL_RCC_OscConfig+0x240>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a6f      	ldr	r2, [pc, #444]	; (8005550 <HAL_RCC_OscConfig+0x240>)
 8005394:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005398:	6013      	str	r3, [r2, #0]
 800539a:	4b6d      	ldr	r3, [pc, #436]	; (8005550 <HAL_RCC_OscConfig+0x240>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4a6c      	ldr	r2, [pc, #432]	; (8005550 <HAL_RCC_OscConfig+0x240>)
 80053a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053a4:	6013      	str	r3, [r2, #0]
 80053a6:	e00b      	b.n	80053c0 <HAL_RCC_OscConfig+0xb0>
 80053a8:	4b69      	ldr	r3, [pc, #420]	; (8005550 <HAL_RCC_OscConfig+0x240>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a68      	ldr	r2, [pc, #416]	; (8005550 <HAL_RCC_OscConfig+0x240>)
 80053ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053b2:	6013      	str	r3, [r2, #0]
 80053b4:	4b66      	ldr	r3, [pc, #408]	; (8005550 <HAL_RCC_OscConfig+0x240>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a65      	ldr	r2, [pc, #404]	; (8005550 <HAL_RCC_OscConfig+0x240>)
 80053ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80053be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d013      	beq.n	80053f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053c8:	f7fc fd68 	bl	8001e9c <HAL_GetTick>
 80053cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053ce:	e008      	b.n	80053e2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80053d0:	f7fc fd64 	bl	8001e9c <HAL_GetTick>
 80053d4:	4602      	mov	r2, r0
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	1ad3      	subs	r3, r2, r3
 80053da:	2b64      	cmp	r3, #100	; 0x64
 80053dc:	d901      	bls.n	80053e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80053de:	2303      	movs	r3, #3
 80053e0:	e207      	b.n	80057f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053e2:	4b5b      	ldr	r3, [pc, #364]	; (8005550 <HAL_RCC_OscConfig+0x240>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d0f0      	beq.n	80053d0 <HAL_RCC_OscConfig+0xc0>
 80053ee:	e014      	b.n	800541a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053f0:	f7fc fd54 	bl	8001e9c <HAL_GetTick>
 80053f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80053f6:	e008      	b.n	800540a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80053f8:	f7fc fd50 	bl	8001e9c <HAL_GetTick>
 80053fc:	4602      	mov	r2, r0
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	1ad3      	subs	r3, r2, r3
 8005402:	2b64      	cmp	r3, #100	; 0x64
 8005404:	d901      	bls.n	800540a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005406:	2303      	movs	r3, #3
 8005408:	e1f3      	b.n	80057f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800540a:	4b51      	ldr	r3, [pc, #324]	; (8005550 <HAL_RCC_OscConfig+0x240>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005412:	2b00      	cmp	r3, #0
 8005414:	d1f0      	bne.n	80053f8 <HAL_RCC_OscConfig+0xe8>
 8005416:	e000      	b.n	800541a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005418:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f003 0302 	and.w	r3, r3, #2
 8005422:	2b00      	cmp	r3, #0
 8005424:	d063      	beq.n	80054ee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005426:	4b4a      	ldr	r3, [pc, #296]	; (8005550 <HAL_RCC_OscConfig+0x240>)
 8005428:	689b      	ldr	r3, [r3, #8]
 800542a:	f003 030c 	and.w	r3, r3, #12
 800542e:	2b00      	cmp	r3, #0
 8005430:	d00b      	beq.n	800544a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005432:	4b47      	ldr	r3, [pc, #284]	; (8005550 <HAL_RCC_OscConfig+0x240>)
 8005434:	689b      	ldr	r3, [r3, #8]
 8005436:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800543a:	2b08      	cmp	r3, #8
 800543c:	d11c      	bne.n	8005478 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800543e:	4b44      	ldr	r3, [pc, #272]	; (8005550 <HAL_RCC_OscConfig+0x240>)
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005446:	2b00      	cmp	r3, #0
 8005448:	d116      	bne.n	8005478 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800544a:	4b41      	ldr	r3, [pc, #260]	; (8005550 <HAL_RCC_OscConfig+0x240>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f003 0302 	and.w	r3, r3, #2
 8005452:	2b00      	cmp	r3, #0
 8005454:	d005      	beq.n	8005462 <HAL_RCC_OscConfig+0x152>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	68db      	ldr	r3, [r3, #12]
 800545a:	2b01      	cmp	r3, #1
 800545c:	d001      	beq.n	8005462 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800545e:	2301      	movs	r3, #1
 8005460:	e1c7      	b.n	80057f2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005462:	4b3b      	ldr	r3, [pc, #236]	; (8005550 <HAL_RCC_OscConfig+0x240>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	691b      	ldr	r3, [r3, #16]
 800546e:	00db      	lsls	r3, r3, #3
 8005470:	4937      	ldr	r1, [pc, #220]	; (8005550 <HAL_RCC_OscConfig+0x240>)
 8005472:	4313      	orrs	r3, r2
 8005474:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005476:	e03a      	b.n	80054ee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	68db      	ldr	r3, [r3, #12]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d020      	beq.n	80054c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005480:	4b34      	ldr	r3, [pc, #208]	; (8005554 <HAL_RCC_OscConfig+0x244>)
 8005482:	2201      	movs	r2, #1
 8005484:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005486:	f7fc fd09 	bl	8001e9c <HAL_GetTick>
 800548a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800548c:	e008      	b.n	80054a0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800548e:	f7fc fd05 	bl	8001e9c <HAL_GetTick>
 8005492:	4602      	mov	r2, r0
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	1ad3      	subs	r3, r2, r3
 8005498:	2b02      	cmp	r3, #2
 800549a:	d901      	bls.n	80054a0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800549c:	2303      	movs	r3, #3
 800549e:	e1a8      	b.n	80057f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054a0:	4b2b      	ldr	r3, [pc, #172]	; (8005550 <HAL_RCC_OscConfig+0x240>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f003 0302 	and.w	r3, r3, #2
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d0f0      	beq.n	800548e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054ac:	4b28      	ldr	r3, [pc, #160]	; (8005550 <HAL_RCC_OscConfig+0x240>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	691b      	ldr	r3, [r3, #16]
 80054b8:	00db      	lsls	r3, r3, #3
 80054ba:	4925      	ldr	r1, [pc, #148]	; (8005550 <HAL_RCC_OscConfig+0x240>)
 80054bc:	4313      	orrs	r3, r2
 80054be:	600b      	str	r3, [r1, #0]
 80054c0:	e015      	b.n	80054ee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80054c2:	4b24      	ldr	r3, [pc, #144]	; (8005554 <HAL_RCC_OscConfig+0x244>)
 80054c4:	2200      	movs	r2, #0
 80054c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054c8:	f7fc fce8 	bl	8001e9c <HAL_GetTick>
 80054cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80054ce:	e008      	b.n	80054e2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80054d0:	f7fc fce4 	bl	8001e9c <HAL_GetTick>
 80054d4:	4602      	mov	r2, r0
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	1ad3      	subs	r3, r2, r3
 80054da:	2b02      	cmp	r3, #2
 80054dc:	d901      	bls.n	80054e2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80054de:	2303      	movs	r3, #3
 80054e0:	e187      	b.n	80057f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80054e2:	4b1b      	ldr	r3, [pc, #108]	; (8005550 <HAL_RCC_OscConfig+0x240>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f003 0302 	and.w	r3, r3, #2
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d1f0      	bne.n	80054d0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f003 0308 	and.w	r3, r3, #8
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d036      	beq.n	8005568 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	695b      	ldr	r3, [r3, #20]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d016      	beq.n	8005530 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005502:	4b15      	ldr	r3, [pc, #84]	; (8005558 <HAL_RCC_OscConfig+0x248>)
 8005504:	2201      	movs	r2, #1
 8005506:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005508:	f7fc fcc8 	bl	8001e9c <HAL_GetTick>
 800550c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800550e:	e008      	b.n	8005522 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005510:	f7fc fcc4 	bl	8001e9c <HAL_GetTick>
 8005514:	4602      	mov	r2, r0
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	1ad3      	subs	r3, r2, r3
 800551a:	2b02      	cmp	r3, #2
 800551c:	d901      	bls.n	8005522 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800551e:	2303      	movs	r3, #3
 8005520:	e167      	b.n	80057f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005522:	4b0b      	ldr	r3, [pc, #44]	; (8005550 <HAL_RCC_OscConfig+0x240>)
 8005524:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005526:	f003 0302 	and.w	r3, r3, #2
 800552a:	2b00      	cmp	r3, #0
 800552c:	d0f0      	beq.n	8005510 <HAL_RCC_OscConfig+0x200>
 800552e:	e01b      	b.n	8005568 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005530:	4b09      	ldr	r3, [pc, #36]	; (8005558 <HAL_RCC_OscConfig+0x248>)
 8005532:	2200      	movs	r2, #0
 8005534:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005536:	f7fc fcb1 	bl	8001e9c <HAL_GetTick>
 800553a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800553c:	e00e      	b.n	800555c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800553e:	f7fc fcad 	bl	8001e9c <HAL_GetTick>
 8005542:	4602      	mov	r2, r0
 8005544:	693b      	ldr	r3, [r7, #16]
 8005546:	1ad3      	subs	r3, r2, r3
 8005548:	2b02      	cmp	r3, #2
 800554a:	d907      	bls.n	800555c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800554c:	2303      	movs	r3, #3
 800554e:	e150      	b.n	80057f2 <HAL_RCC_OscConfig+0x4e2>
 8005550:	40023800 	.word	0x40023800
 8005554:	42470000 	.word	0x42470000
 8005558:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800555c:	4b88      	ldr	r3, [pc, #544]	; (8005780 <HAL_RCC_OscConfig+0x470>)
 800555e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005560:	f003 0302 	and.w	r3, r3, #2
 8005564:	2b00      	cmp	r3, #0
 8005566:	d1ea      	bne.n	800553e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f003 0304 	and.w	r3, r3, #4
 8005570:	2b00      	cmp	r3, #0
 8005572:	f000 8097 	beq.w	80056a4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005576:	2300      	movs	r3, #0
 8005578:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800557a:	4b81      	ldr	r3, [pc, #516]	; (8005780 <HAL_RCC_OscConfig+0x470>)
 800557c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800557e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005582:	2b00      	cmp	r3, #0
 8005584:	d10f      	bne.n	80055a6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005586:	2300      	movs	r3, #0
 8005588:	60bb      	str	r3, [r7, #8]
 800558a:	4b7d      	ldr	r3, [pc, #500]	; (8005780 <HAL_RCC_OscConfig+0x470>)
 800558c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800558e:	4a7c      	ldr	r2, [pc, #496]	; (8005780 <HAL_RCC_OscConfig+0x470>)
 8005590:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005594:	6413      	str	r3, [r2, #64]	; 0x40
 8005596:	4b7a      	ldr	r3, [pc, #488]	; (8005780 <HAL_RCC_OscConfig+0x470>)
 8005598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800559a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800559e:	60bb      	str	r3, [r7, #8]
 80055a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80055a2:	2301      	movs	r3, #1
 80055a4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055a6:	4b77      	ldr	r3, [pc, #476]	; (8005784 <HAL_RCC_OscConfig+0x474>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d118      	bne.n	80055e4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80055b2:	4b74      	ldr	r3, [pc, #464]	; (8005784 <HAL_RCC_OscConfig+0x474>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4a73      	ldr	r2, [pc, #460]	; (8005784 <HAL_RCC_OscConfig+0x474>)
 80055b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80055be:	f7fc fc6d 	bl	8001e9c <HAL_GetTick>
 80055c2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055c4:	e008      	b.n	80055d8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055c6:	f7fc fc69 	bl	8001e9c <HAL_GetTick>
 80055ca:	4602      	mov	r2, r0
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	1ad3      	subs	r3, r2, r3
 80055d0:	2b02      	cmp	r3, #2
 80055d2:	d901      	bls.n	80055d8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80055d4:	2303      	movs	r3, #3
 80055d6:	e10c      	b.n	80057f2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055d8:	4b6a      	ldr	r3, [pc, #424]	; (8005784 <HAL_RCC_OscConfig+0x474>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d0f0      	beq.n	80055c6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	689b      	ldr	r3, [r3, #8]
 80055e8:	2b01      	cmp	r3, #1
 80055ea:	d106      	bne.n	80055fa <HAL_RCC_OscConfig+0x2ea>
 80055ec:	4b64      	ldr	r3, [pc, #400]	; (8005780 <HAL_RCC_OscConfig+0x470>)
 80055ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055f0:	4a63      	ldr	r2, [pc, #396]	; (8005780 <HAL_RCC_OscConfig+0x470>)
 80055f2:	f043 0301 	orr.w	r3, r3, #1
 80055f6:	6713      	str	r3, [r2, #112]	; 0x70
 80055f8:	e01c      	b.n	8005634 <HAL_RCC_OscConfig+0x324>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	689b      	ldr	r3, [r3, #8]
 80055fe:	2b05      	cmp	r3, #5
 8005600:	d10c      	bne.n	800561c <HAL_RCC_OscConfig+0x30c>
 8005602:	4b5f      	ldr	r3, [pc, #380]	; (8005780 <HAL_RCC_OscConfig+0x470>)
 8005604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005606:	4a5e      	ldr	r2, [pc, #376]	; (8005780 <HAL_RCC_OscConfig+0x470>)
 8005608:	f043 0304 	orr.w	r3, r3, #4
 800560c:	6713      	str	r3, [r2, #112]	; 0x70
 800560e:	4b5c      	ldr	r3, [pc, #368]	; (8005780 <HAL_RCC_OscConfig+0x470>)
 8005610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005612:	4a5b      	ldr	r2, [pc, #364]	; (8005780 <HAL_RCC_OscConfig+0x470>)
 8005614:	f043 0301 	orr.w	r3, r3, #1
 8005618:	6713      	str	r3, [r2, #112]	; 0x70
 800561a:	e00b      	b.n	8005634 <HAL_RCC_OscConfig+0x324>
 800561c:	4b58      	ldr	r3, [pc, #352]	; (8005780 <HAL_RCC_OscConfig+0x470>)
 800561e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005620:	4a57      	ldr	r2, [pc, #348]	; (8005780 <HAL_RCC_OscConfig+0x470>)
 8005622:	f023 0301 	bic.w	r3, r3, #1
 8005626:	6713      	str	r3, [r2, #112]	; 0x70
 8005628:	4b55      	ldr	r3, [pc, #340]	; (8005780 <HAL_RCC_OscConfig+0x470>)
 800562a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800562c:	4a54      	ldr	r2, [pc, #336]	; (8005780 <HAL_RCC_OscConfig+0x470>)
 800562e:	f023 0304 	bic.w	r3, r3, #4
 8005632:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	689b      	ldr	r3, [r3, #8]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d015      	beq.n	8005668 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800563c:	f7fc fc2e 	bl	8001e9c <HAL_GetTick>
 8005640:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005642:	e00a      	b.n	800565a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005644:	f7fc fc2a 	bl	8001e9c <HAL_GetTick>
 8005648:	4602      	mov	r2, r0
 800564a:	693b      	ldr	r3, [r7, #16]
 800564c:	1ad3      	subs	r3, r2, r3
 800564e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005652:	4293      	cmp	r3, r2
 8005654:	d901      	bls.n	800565a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005656:	2303      	movs	r3, #3
 8005658:	e0cb      	b.n	80057f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800565a:	4b49      	ldr	r3, [pc, #292]	; (8005780 <HAL_RCC_OscConfig+0x470>)
 800565c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800565e:	f003 0302 	and.w	r3, r3, #2
 8005662:	2b00      	cmp	r3, #0
 8005664:	d0ee      	beq.n	8005644 <HAL_RCC_OscConfig+0x334>
 8005666:	e014      	b.n	8005692 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005668:	f7fc fc18 	bl	8001e9c <HAL_GetTick>
 800566c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800566e:	e00a      	b.n	8005686 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005670:	f7fc fc14 	bl	8001e9c <HAL_GetTick>
 8005674:	4602      	mov	r2, r0
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	1ad3      	subs	r3, r2, r3
 800567a:	f241 3288 	movw	r2, #5000	; 0x1388
 800567e:	4293      	cmp	r3, r2
 8005680:	d901      	bls.n	8005686 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005682:	2303      	movs	r3, #3
 8005684:	e0b5      	b.n	80057f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005686:	4b3e      	ldr	r3, [pc, #248]	; (8005780 <HAL_RCC_OscConfig+0x470>)
 8005688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800568a:	f003 0302 	and.w	r3, r3, #2
 800568e:	2b00      	cmp	r3, #0
 8005690:	d1ee      	bne.n	8005670 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005692:	7dfb      	ldrb	r3, [r7, #23]
 8005694:	2b01      	cmp	r3, #1
 8005696:	d105      	bne.n	80056a4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005698:	4b39      	ldr	r3, [pc, #228]	; (8005780 <HAL_RCC_OscConfig+0x470>)
 800569a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800569c:	4a38      	ldr	r2, [pc, #224]	; (8005780 <HAL_RCC_OscConfig+0x470>)
 800569e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056a2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	699b      	ldr	r3, [r3, #24]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	f000 80a1 	beq.w	80057f0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80056ae:	4b34      	ldr	r3, [pc, #208]	; (8005780 <HAL_RCC_OscConfig+0x470>)
 80056b0:	689b      	ldr	r3, [r3, #8]
 80056b2:	f003 030c 	and.w	r3, r3, #12
 80056b6:	2b08      	cmp	r3, #8
 80056b8:	d05c      	beq.n	8005774 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	699b      	ldr	r3, [r3, #24]
 80056be:	2b02      	cmp	r3, #2
 80056c0:	d141      	bne.n	8005746 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056c2:	4b31      	ldr	r3, [pc, #196]	; (8005788 <HAL_RCC_OscConfig+0x478>)
 80056c4:	2200      	movs	r2, #0
 80056c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056c8:	f7fc fbe8 	bl	8001e9c <HAL_GetTick>
 80056cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056ce:	e008      	b.n	80056e2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056d0:	f7fc fbe4 	bl	8001e9c <HAL_GetTick>
 80056d4:	4602      	mov	r2, r0
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	1ad3      	subs	r3, r2, r3
 80056da:	2b02      	cmp	r3, #2
 80056dc:	d901      	bls.n	80056e2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80056de:	2303      	movs	r3, #3
 80056e0:	e087      	b.n	80057f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056e2:	4b27      	ldr	r3, [pc, #156]	; (8005780 <HAL_RCC_OscConfig+0x470>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d1f0      	bne.n	80056d0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	69da      	ldr	r2, [r3, #28]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6a1b      	ldr	r3, [r3, #32]
 80056f6:	431a      	orrs	r2, r3
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056fc:	019b      	lsls	r3, r3, #6
 80056fe:	431a      	orrs	r2, r3
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005704:	085b      	lsrs	r3, r3, #1
 8005706:	3b01      	subs	r3, #1
 8005708:	041b      	lsls	r3, r3, #16
 800570a:	431a      	orrs	r2, r3
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005710:	061b      	lsls	r3, r3, #24
 8005712:	491b      	ldr	r1, [pc, #108]	; (8005780 <HAL_RCC_OscConfig+0x470>)
 8005714:	4313      	orrs	r3, r2
 8005716:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005718:	4b1b      	ldr	r3, [pc, #108]	; (8005788 <HAL_RCC_OscConfig+0x478>)
 800571a:	2201      	movs	r2, #1
 800571c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800571e:	f7fc fbbd 	bl	8001e9c <HAL_GetTick>
 8005722:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005724:	e008      	b.n	8005738 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005726:	f7fc fbb9 	bl	8001e9c <HAL_GetTick>
 800572a:	4602      	mov	r2, r0
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	1ad3      	subs	r3, r2, r3
 8005730:	2b02      	cmp	r3, #2
 8005732:	d901      	bls.n	8005738 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005734:	2303      	movs	r3, #3
 8005736:	e05c      	b.n	80057f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005738:	4b11      	ldr	r3, [pc, #68]	; (8005780 <HAL_RCC_OscConfig+0x470>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005740:	2b00      	cmp	r3, #0
 8005742:	d0f0      	beq.n	8005726 <HAL_RCC_OscConfig+0x416>
 8005744:	e054      	b.n	80057f0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005746:	4b10      	ldr	r3, [pc, #64]	; (8005788 <HAL_RCC_OscConfig+0x478>)
 8005748:	2200      	movs	r2, #0
 800574a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800574c:	f7fc fba6 	bl	8001e9c <HAL_GetTick>
 8005750:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005752:	e008      	b.n	8005766 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005754:	f7fc fba2 	bl	8001e9c <HAL_GetTick>
 8005758:	4602      	mov	r2, r0
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	1ad3      	subs	r3, r2, r3
 800575e:	2b02      	cmp	r3, #2
 8005760:	d901      	bls.n	8005766 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005762:	2303      	movs	r3, #3
 8005764:	e045      	b.n	80057f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005766:	4b06      	ldr	r3, [pc, #24]	; (8005780 <HAL_RCC_OscConfig+0x470>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800576e:	2b00      	cmp	r3, #0
 8005770:	d1f0      	bne.n	8005754 <HAL_RCC_OscConfig+0x444>
 8005772:	e03d      	b.n	80057f0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	699b      	ldr	r3, [r3, #24]
 8005778:	2b01      	cmp	r3, #1
 800577a:	d107      	bne.n	800578c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800577c:	2301      	movs	r3, #1
 800577e:	e038      	b.n	80057f2 <HAL_RCC_OscConfig+0x4e2>
 8005780:	40023800 	.word	0x40023800
 8005784:	40007000 	.word	0x40007000
 8005788:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800578c:	4b1b      	ldr	r3, [pc, #108]	; (80057fc <HAL_RCC_OscConfig+0x4ec>)
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	699b      	ldr	r3, [r3, #24]
 8005796:	2b01      	cmp	r3, #1
 8005798:	d028      	beq.n	80057ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80057a4:	429a      	cmp	r2, r3
 80057a6:	d121      	bne.n	80057ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057b2:	429a      	cmp	r2, r3
 80057b4:	d11a      	bne.n	80057ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80057b6:	68fa      	ldr	r2, [r7, #12]
 80057b8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80057bc:	4013      	ands	r3, r2
 80057be:	687a      	ldr	r2, [r7, #4]
 80057c0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80057c2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d111      	bne.n	80057ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057d2:	085b      	lsrs	r3, r3, #1
 80057d4:	3b01      	subs	r3, #1
 80057d6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80057d8:	429a      	cmp	r2, r3
 80057da:	d107      	bne.n	80057ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057e6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80057e8:	429a      	cmp	r2, r3
 80057ea:	d001      	beq.n	80057f0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80057ec:	2301      	movs	r3, #1
 80057ee:	e000      	b.n	80057f2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80057f0:	2300      	movs	r3, #0
}
 80057f2:	4618      	mov	r0, r3
 80057f4:	3718      	adds	r7, #24
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}
 80057fa:	bf00      	nop
 80057fc:	40023800 	.word	0x40023800

08005800 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b084      	sub	sp, #16
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
 8005808:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d101      	bne.n	8005814 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005810:	2301      	movs	r3, #1
 8005812:	e0cc      	b.n	80059ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005814:	4b68      	ldr	r3, [pc, #416]	; (80059b8 <HAL_RCC_ClockConfig+0x1b8>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f003 030f 	and.w	r3, r3, #15
 800581c:	683a      	ldr	r2, [r7, #0]
 800581e:	429a      	cmp	r2, r3
 8005820:	d90c      	bls.n	800583c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005822:	4b65      	ldr	r3, [pc, #404]	; (80059b8 <HAL_RCC_ClockConfig+0x1b8>)
 8005824:	683a      	ldr	r2, [r7, #0]
 8005826:	b2d2      	uxtb	r2, r2
 8005828:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800582a:	4b63      	ldr	r3, [pc, #396]	; (80059b8 <HAL_RCC_ClockConfig+0x1b8>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f003 030f 	and.w	r3, r3, #15
 8005832:	683a      	ldr	r2, [r7, #0]
 8005834:	429a      	cmp	r2, r3
 8005836:	d001      	beq.n	800583c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005838:	2301      	movs	r3, #1
 800583a:	e0b8      	b.n	80059ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f003 0302 	and.w	r3, r3, #2
 8005844:	2b00      	cmp	r3, #0
 8005846:	d020      	beq.n	800588a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f003 0304 	and.w	r3, r3, #4
 8005850:	2b00      	cmp	r3, #0
 8005852:	d005      	beq.n	8005860 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005854:	4b59      	ldr	r3, [pc, #356]	; (80059bc <HAL_RCC_ClockConfig+0x1bc>)
 8005856:	689b      	ldr	r3, [r3, #8]
 8005858:	4a58      	ldr	r2, [pc, #352]	; (80059bc <HAL_RCC_ClockConfig+0x1bc>)
 800585a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800585e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f003 0308 	and.w	r3, r3, #8
 8005868:	2b00      	cmp	r3, #0
 800586a:	d005      	beq.n	8005878 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800586c:	4b53      	ldr	r3, [pc, #332]	; (80059bc <HAL_RCC_ClockConfig+0x1bc>)
 800586e:	689b      	ldr	r3, [r3, #8]
 8005870:	4a52      	ldr	r2, [pc, #328]	; (80059bc <HAL_RCC_ClockConfig+0x1bc>)
 8005872:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005876:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005878:	4b50      	ldr	r3, [pc, #320]	; (80059bc <HAL_RCC_ClockConfig+0x1bc>)
 800587a:	689b      	ldr	r3, [r3, #8]
 800587c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	689b      	ldr	r3, [r3, #8]
 8005884:	494d      	ldr	r1, [pc, #308]	; (80059bc <HAL_RCC_ClockConfig+0x1bc>)
 8005886:	4313      	orrs	r3, r2
 8005888:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f003 0301 	and.w	r3, r3, #1
 8005892:	2b00      	cmp	r3, #0
 8005894:	d044      	beq.n	8005920 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	2b01      	cmp	r3, #1
 800589c:	d107      	bne.n	80058ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800589e:	4b47      	ldr	r3, [pc, #284]	; (80059bc <HAL_RCC_ClockConfig+0x1bc>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d119      	bne.n	80058de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80058aa:	2301      	movs	r3, #1
 80058ac:	e07f      	b.n	80059ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	2b02      	cmp	r3, #2
 80058b4:	d003      	beq.n	80058be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80058ba:	2b03      	cmp	r3, #3
 80058bc:	d107      	bne.n	80058ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058be:	4b3f      	ldr	r3, [pc, #252]	; (80059bc <HAL_RCC_ClockConfig+0x1bc>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d109      	bne.n	80058de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80058ca:	2301      	movs	r3, #1
 80058cc:	e06f      	b.n	80059ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058ce:	4b3b      	ldr	r3, [pc, #236]	; (80059bc <HAL_RCC_ClockConfig+0x1bc>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f003 0302 	and.w	r3, r3, #2
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d101      	bne.n	80058de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80058da:	2301      	movs	r3, #1
 80058dc:	e067      	b.n	80059ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80058de:	4b37      	ldr	r3, [pc, #220]	; (80059bc <HAL_RCC_ClockConfig+0x1bc>)
 80058e0:	689b      	ldr	r3, [r3, #8]
 80058e2:	f023 0203 	bic.w	r2, r3, #3
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	685b      	ldr	r3, [r3, #4]
 80058ea:	4934      	ldr	r1, [pc, #208]	; (80059bc <HAL_RCC_ClockConfig+0x1bc>)
 80058ec:	4313      	orrs	r3, r2
 80058ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80058f0:	f7fc fad4 	bl	8001e9c <HAL_GetTick>
 80058f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058f6:	e00a      	b.n	800590e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058f8:	f7fc fad0 	bl	8001e9c <HAL_GetTick>
 80058fc:	4602      	mov	r2, r0
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	1ad3      	subs	r3, r2, r3
 8005902:	f241 3288 	movw	r2, #5000	; 0x1388
 8005906:	4293      	cmp	r3, r2
 8005908:	d901      	bls.n	800590e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800590a:	2303      	movs	r3, #3
 800590c:	e04f      	b.n	80059ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800590e:	4b2b      	ldr	r3, [pc, #172]	; (80059bc <HAL_RCC_ClockConfig+0x1bc>)
 8005910:	689b      	ldr	r3, [r3, #8]
 8005912:	f003 020c 	and.w	r2, r3, #12
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	009b      	lsls	r3, r3, #2
 800591c:	429a      	cmp	r2, r3
 800591e:	d1eb      	bne.n	80058f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005920:	4b25      	ldr	r3, [pc, #148]	; (80059b8 <HAL_RCC_ClockConfig+0x1b8>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f003 030f 	and.w	r3, r3, #15
 8005928:	683a      	ldr	r2, [r7, #0]
 800592a:	429a      	cmp	r2, r3
 800592c:	d20c      	bcs.n	8005948 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800592e:	4b22      	ldr	r3, [pc, #136]	; (80059b8 <HAL_RCC_ClockConfig+0x1b8>)
 8005930:	683a      	ldr	r2, [r7, #0]
 8005932:	b2d2      	uxtb	r2, r2
 8005934:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005936:	4b20      	ldr	r3, [pc, #128]	; (80059b8 <HAL_RCC_ClockConfig+0x1b8>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f003 030f 	and.w	r3, r3, #15
 800593e:	683a      	ldr	r2, [r7, #0]
 8005940:	429a      	cmp	r2, r3
 8005942:	d001      	beq.n	8005948 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005944:	2301      	movs	r3, #1
 8005946:	e032      	b.n	80059ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f003 0304 	and.w	r3, r3, #4
 8005950:	2b00      	cmp	r3, #0
 8005952:	d008      	beq.n	8005966 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005954:	4b19      	ldr	r3, [pc, #100]	; (80059bc <HAL_RCC_ClockConfig+0x1bc>)
 8005956:	689b      	ldr	r3, [r3, #8]
 8005958:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	68db      	ldr	r3, [r3, #12]
 8005960:	4916      	ldr	r1, [pc, #88]	; (80059bc <HAL_RCC_ClockConfig+0x1bc>)
 8005962:	4313      	orrs	r3, r2
 8005964:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f003 0308 	and.w	r3, r3, #8
 800596e:	2b00      	cmp	r3, #0
 8005970:	d009      	beq.n	8005986 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005972:	4b12      	ldr	r3, [pc, #72]	; (80059bc <HAL_RCC_ClockConfig+0x1bc>)
 8005974:	689b      	ldr	r3, [r3, #8]
 8005976:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	691b      	ldr	r3, [r3, #16]
 800597e:	00db      	lsls	r3, r3, #3
 8005980:	490e      	ldr	r1, [pc, #56]	; (80059bc <HAL_RCC_ClockConfig+0x1bc>)
 8005982:	4313      	orrs	r3, r2
 8005984:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005986:	f000 f821 	bl	80059cc <HAL_RCC_GetSysClockFreq>
 800598a:	4602      	mov	r2, r0
 800598c:	4b0b      	ldr	r3, [pc, #44]	; (80059bc <HAL_RCC_ClockConfig+0x1bc>)
 800598e:	689b      	ldr	r3, [r3, #8]
 8005990:	091b      	lsrs	r3, r3, #4
 8005992:	f003 030f 	and.w	r3, r3, #15
 8005996:	490a      	ldr	r1, [pc, #40]	; (80059c0 <HAL_RCC_ClockConfig+0x1c0>)
 8005998:	5ccb      	ldrb	r3, [r1, r3]
 800599a:	fa22 f303 	lsr.w	r3, r2, r3
 800599e:	4a09      	ldr	r2, [pc, #36]	; (80059c4 <HAL_RCC_ClockConfig+0x1c4>)
 80059a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80059a2:	4b09      	ldr	r3, [pc, #36]	; (80059c8 <HAL_RCC_ClockConfig+0x1c8>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4618      	mov	r0, r3
 80059a8:	f7fc fa34 	bl	8001e14 <HAL_InitTick>

  return HAL_OK;
 80059ac:	2300      	movs	r3, #0
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	3710      	adds	r7, #16
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bd80      	pop	{r7, pc}
 80059b6:	bf00      	nop
 80059b8:	40023c00 	.word	0x40023c00
 80059bc:	40023800 	.word	0x40023800
 80059c0:	0800b79c 	.word	0x0800b79c
 80059c4:	2000006c 	.word	0x2000006c
 80059c8:	20000070 	.word	0x20000070

080059cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80059cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80059d0:	b094      	sub	sp, #80	; 0x50
 80059d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80059d4:	2300      	movs	r3, #0
 80059d6:	647b      	str	r3, [r7, #68]	; 0x44
 80059d8:	2300      	movs	r3, #0
 80059da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059dc:	2300      	movs	r3, #0
 80059de:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80059e0:	2300      	movs	r3, #0
 80059e2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80059e4:	4b79      	ldr	r3, [pc, #484]	; (8005bcc <HAL_RCC_GetSysClockFreq+0x200>)
 80059e6:	689b      	ldr	r3, [r3, #8]
 80059e8:	f003 030c 	and.w	r3, r3, #12
 80059ec:	2b08      	cmp	r3, #8
 80059ee:	d00d      	beq.n	8005a0c <HAL_RCC_GetSysClockFreq+0x40>
 80059f0:	2b08      	cmp	r3, #8
 80059f2:	f200 80e1 	bhi.w	8005bb8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d002      	beq.n	8005a00 <HAL_RCC_GetSysClockFreq+0x34>
 80059fa:	2b04      	cmp	r3, #4
 80059fc:	d003      	beq.n	8005a06 <HAL_RCC_GetSysClockFreq+0x3a>
 80059fe:	e0db      	b.n	8005bb8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005a00:	4b73      	ldr	r3, [pc, #460]	; (8005bd0 <HAL_RCC_GetSysClockFreq+0x204>)
 8005a02:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005a04:	e0db      	b.n	8005bbe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005a06:	4b73      	ldr	r3, [pc, #460]	; (8005bd4 <HAL_RCC_GetSysClockFreq+0x208>)
 8005a08:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005a0a:	e0d8      	b.n	8005bbe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005a0c:	4b6f      	ldr	r3, [pc, #444]	; (8005bcc <HAL_RCC_GetSysClockFreq+0x200>)
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a14:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005a16:	4b6d      	ldr	r3, [pc, #436]	; (8005bcc <HAL_RCC_GetSysClockFreq+0x200>)
 8005a18:	685b      	ldr	r3, [r3, #4]
 8005a1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d063      	beq.n	8005aea <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a22:	4b6a      	ldr	r3, [pc, #424]	; (8005bcc <HAL_RCC_GetSysClockFreq+0x200>)
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	099b      	lsrs	r3, r3, #6
 8005a28:	2200      	movs	r2, #0
 8005a2a:	63bb      	str	r3, [r7, #56]	; 0x38
 8005a2c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a34:	633b      	str	r3, [r7, #48]	; 0x30
 8005a36:	2300      	movs	r3, #0
 8005a38:	637b      	str	r3, [r7, #52]	; 0x34
 8005a3a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005a3e:	4622      	mov	r2, r4
 8005a40:	462b      	mov	r3, r5
 8005a42:	f04f 0000 	mov.w	r0, #0
 8005a46:	f04f 0100 	mov.w	r1, #0
 8005a4a:	0159      	lsls	r1, r3, #5
 8005a4c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005a50:	0150      	lsls	r0, r2, #5
 8005a52:	4602      	mov	r2, r0
 8005a54:	460b      	mov	r3, r1
 8005a56:	4621      	mov	r1, r4
 8005a58:	1a51      	subs	r1, r2, r1
 8005a5a:	6139      	str	r1, [r7, #16]
 8005a5c:	4629      	mov	r1, r5
 8005a5e:	eb63 0301 	sbc.w	r3, r3, r1
 8005a62:	617b      	str	r3, [r7, #20]
 8005a64:	f04f 0200 	mov.w	r2, #0
 8005a68:	f04f 0300 	mov.w	r3, #0
 8005a6c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005a70:	4659      	mov	r1, fp
 8005a72:	018b      	lsls	r3, r1, #6
 8005a74:	4651      	mov	r1, sl
 8005a76:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005a7a:	4651      	mov	r1, sl
 8005a7c:	018a      	lsls	r2, r1, #6
 8005a7e:	4651      	mov	r1, sl
 8005a80:	ebb2 0801 	subs.w	r8, r2, r1
 8005a84:	4659      	mov	r1, fp
 8005a86:	eb63 0901 	sbc.w	r9, r3, r1
 8005a8a:	f04f 0200 	mov.w	r2, #0
 8005a8e:	f04f 0300 	mov.w	r3, #0
 8005a92:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005a96:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005a9a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005a9e:	4690      	mov	r8, r2
 8005aa0:	4699      	mov	r9, r3
 8005aa2:	4623      	mov	r3, r4
 8005aa4:	eb18 0303 	adds.w	r3, r8, r3
 8005aa8:	60bb      	str	r3, [r7, #8]
 8005aaa:	462b      	mov	r3, r5
 8005aac:	eb49 0303 	adc.w	r3, r9, r3
 8005ab0:	60fb      	str	r3, [r7, #12]
 8005ab2:	f04f 0200 	mov.w	r2, #0
 8005ab6:	f04f 0300 	mov.w	r3, #0
 8005aba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005abe:	4629      	mov	r1, r5
 8005ac0:	024b      	lsls	r3, r1, #9
 8005ac2:	4621      	mov	r1, r4
 8005ac4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005ac8:	4621      	mov	r1, r4
 8005aca:	024a      	lsls	r2, r1, #9
 8005acc:	4610      	mov	r0, r2
 8005ace:	4619      	mov	r1, r3
 8005ad0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ad6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005ad8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005adc:	f7fb f8e4 	bl	8000ca8 <__aeabi_uldivmod>
 8005ae0:	4602      	mov	r2, r0
 8005ae2:	460b      	mov	r3, r1
 8005ae4:	4613      	mov	r3, r2
 8005ae6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ae8:	e058      	b.n	8005b9c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005aea:	4b38      	ldr	r3, [pc, #224]	; (8005bcc <HAL_RCC_GetSysClockFreq+0x200>)
 8005aec:	685b      	ldr	r3, [r3, #4]
 8005aee:	099b      	lsrs	r3, r3, #6
 8005af0:	2200      	movs	r2, #0
 8005af2:	4618      	mov	r0, r3
 8005af4:	4611      	mov	r1, r2
 8005af6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005afa:	623b      	str	r3, [r7, #32]
 8005afc:	2300      	movs	r3, #0
 8005afe:	627b      	str	r3, [r7, #36]	; 0x24
 8005b00:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005b04:	4642      	mov	r2, r8
 8005b06:	464b      	mov	r3, r9
 8005b08:	f04f 0000 	mov.w	r0, #0
 8005b0c:	f04f 0100 	mov.w	r1, #0
 8005b10:	0159      	lsls	r1, r3, #5
 8005b12:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005b16:	0150      	lsls	r0, r2, #5
 8005b18:	4602      	mov	r2, r0
 8005b1a:	460b      	mov	r3, r1
 8005b1c:	4641      	mov	r1, r8
 8005b1e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005b22:	4649      	mov	r1, r9
 8005b24:	eb63 0b01 	sbc.w	fp, r3, r1
 8005b28:	f04f 0200 	mov.w	r2, #0
 8005b2c:	f04f 0300 	mov.w	r3, #0
 8005b30:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005b34:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005b38:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005b3c:	ebb2 040a 	subs.w	r4, r2, sl
 8005b40:	eb63 050b 	sbc.w	r5, r3, fp
 8005b44:	f04f 0200 	mov.w	r2, #0
 8005b48:	f04f 0300 	mov.w	r3, #0
 8005b4c:	00eb      	lsls	r3, r5, #3
 8005b4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005b52:	00e2      	lsls	r2, r4, #3
 8005b54:	4614      	mov	r4, r2
 8005b56:	461d      	mov	r5, r3
 8005b58:	4643      	mov	r3, r8
 8005b5a:	18e3      	adds	r3, r4, r3
 8005b5c:	603b      	str	r3, [r7, #0]
 8005b5e:	464b      	mov	r3, r9
 8005b60:	eb45 0303 	adc.w	r3, r5, r3
 8005b64:	607b      	str	r3, [r7, #4]
 8005b66:	f04f 0200 	mov.w	r2, #0
 8005b6a:	f04f 0300 	mov.w	r3, #0
 8005b6e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005b72:	4629      	mov	r1, r5
 8005b74:	028b      	lsls	r3, r1, #10
 8005b76:	4621      	mov	r1, r4
 8005b78:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005b7c:	4621      	mov	r1, r4
 8005b7e:	028a      	lsls	r2, r1, #10
 8005b80:	4610      	mov	r0, r2
 8005b82:	4619      	mov	r1, r3
 8005b84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b86:	2200      	movs	r2, #0
 8005b88:	61bb      	str	r3, [r7, #24]
 8005b8a:	61fa      	str	r2, [r7, #28]
 8005b8c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005b90:	f7fb f88a 	bl	8000ca8 <__aeabi_uldivmod>
 8005b94:	4602      	mov	r2, r0
 8005b96:	460b      	mov	r3, r1
 8005b98:	4613      	mov	r3, r2
 8005b9a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005b9c:	4b0b      	ldr	r3, [pc, #44]	; (8005bcc <HAL_RCC_GetSysClockFreq+0x200>)
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	0c1b      	lsrs	r3, r3, #16
 8005ba2:	f003 0303 	and.w	r3, r3, #3
 8005ba6:	3301      	adds	r3, #1
 8005ba8:	005b      	lsls	r3, r3, #1
 8005baa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005bac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005bae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bb4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005bb6:	e002      	b.n	8005bbe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005bb8:	4b05      	ldr	r3, [pc, #20]	; (8005bd0 <HAL_RCC_GetSysClockFreq+0x204>)
 8005bba:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005bbc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005bbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	3750      	adds	r7, #80	; 0x50
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005bca:	bf00      	nop
 8005bcc:	40023800 	.word	0x40023800
 8005bd0:	00f42400 	.word	0x00f42400
 8005bd4:	007a1200 	.word	0x007a1200

08005bd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005bdc:	4b03      	ldr	r3, [pc, #12]	; (8005bec <HAL_RCC_GetHCLKFreq+0x14>)
 8005bde:	681b      	ldr	r3, [r3, #0]
}
 8005be0:	4618      	mov	r0, r3
 8005be2:	46bd      	mov	sp, r7
 8005be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be8:	4770      	bx	lr
 8005bea:	bf00      	nop
 8005bec:	2000006c 	.word	0x2000006c

08005bf0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005bf4:	f7ff fff0 	bl	8005bd8 <HAL_RCC_GetHCLKFreq>
 8005bf8:	4602      	mov	r2, r0
 8005bfa:	4b05      	ldr	r3, [pc, #20]	; (8005c10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005bfc:	689b      	ldr	r3, [r3, #8]
 8005bfe:	0a9b      	lsrs	r3, r3, #10
 8005c00:	f003 0307 	and.w	r3, r3, #7
 8005c04:	4903      	ldr	r1, [pc, #12]	; (8005c14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c06:	5ccb      	ldrb	r3, [r1, r3]
 8005c08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	bd80      	pop	{r7, pc}
 8005c10:	40023800 	.word	0x40023800
 8005c14:	0800b7ac 	.word	0x0800b7ac

08005c18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005c1c:	f7ff ffdc 	bl	8005bd8 <HAL_RCC_GetHCLKFreq>
 8005c20:	4602      	mov	r2, r0
 8005c22:	4b05      	ldr	r3, [pc, #20]	; (8005c38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005c24:	689b      	ldr	r3, [r3, #8]
 8005c26:	0b5b      	lsrs	r3, r3, #13
 8005c28:	f003 0307 	and.w	r3, r3, #7
 8005c2c:	4903      	ldr	r1, [pc, #12]	; (8005c3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005c2e:	5ccb      	ldrb	r3, [r1, r3]
 8005c30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c34:	4618      	mov	r0, r3
 8005c36:	bd80      	pop	{r7, pc}
 8005c38:	40023800 	.word	0x40023800
 8005c3c:	0800b7ac 	.word	0x0800b7ac

08005c40 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b082      	sub	sp, #8
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d101      	bne.n	8005c52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	e03f      	b.n	8005cd2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c58:	b2db      	uxtb	r3, r3
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d106      	bne.n	8005c6c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2200      	movs	r2, #0
 8005c62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	f7fc f838 	bl	8001cdc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2224      	movs	r2, #36	; 0x24
 8005c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	68da      	ldr	r2, [r3, #12]
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005c82:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005c84:	6878      	ldr	r0, [r7, #4]
 8005c86:	f000 fd7b 	bl	8006780 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	691a      	ldr	r2, [r3, #16]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005c98:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	695a      	ldr	r2, [r3, #20]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005ca8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	68da      	ldr	r2, [r3, #12]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005cb8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2220      	movs	r2, #32
 8005cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2220      	movs	r2, #32
 8005ccc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005cd0:	2300      	movs	r3, #0
}
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	3708      	adds	r7, #8
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}

08005cda <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005cda:	b580      	push	{r7, lr}
 8005cdc:	b08a      	sub	sp, #40	; 0x28
 8005cde:	af02      	add	r7, sp, #8
 8005ce0:	60f8      	str	r0, [r7, #12]
 8005ce2:	60b9      	str	r1, [r7, #8]
 8005ce4:	603b      	str	r3, [r7, #0]
 8005ce6:	4613      	mov	r3, r2
 8005ce8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005cea:	2300      	movs	r3, #0
 8005cec:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cf4:	b2db      	uxtb	r3, r3
 8005cf6:	2b20      	cmp	r3, #32
 8005cf8:	d17c      	bne.n	8005df4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d002      	beq.n	8005d06 <HAL_UART_Transmit+0x2c>
 8005d00:	88fb      	ldrh	r3, [r7, #6]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d101      	bne.n	8005d0a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005d06:	2301      	movs	r3, #1
 8005d08:	e075      	b.n	8005df6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d10:	2b01      	cmp	r3, #1
 8005d12:	d101      	bne.n	8005d18 <HAL_UART_Transmit+0x3e>
 8005d14:	2302      	movs	r3, #2
 8005d16:	e06e      	b.n	8005df6 <HAL_UART_Transmit+0x11c>
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	2201      	movs	r2, #1
 8005d1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	2200      	movs	r2, #0
 8005d24:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	2221      	movs	r2, #33	; 0x21
 8005d2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005d2e:	f7fc f8b5 	bl	8001e9c <HAL_GetTick>
 8005d32:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	88fa      	ldrh	r2, [r7, #6]
 8005d38:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	88fa      	ldrh	r2, [r7, #6]
 8005d3e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	689b      	ldr	r3, [r3, #8]
 8005d44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d48:	d108      	bne.n	8005d5c <HAL_UART_Transmit+0x82>
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	691b      	ldr	r3, [r3, #16]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d104      	bne.n	8005d5c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005d52:	2300      	movs	r3, #0
 8005d54:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	61bb      	str	r3, [r7, #24]
 8005d5a:	e003      	b.n	8005d64 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005d60:	2300      	movs	r3, #0
 8005d62:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	2200      	movs	r2, #0
 8005d68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005d6c:	e02a      	b.n	8005dc4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	9300      	str	r3, [sp, #0]
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	2200      	movs	r2, #0
 8005d76:	2180      	movs	r1, #128	; 0x80
 8005d78:	68f8      	ldr	r0, [r7, #12]
 8005d7a:	f000 faf9 	bl	8006370 <UART_WaitOnFlagUntilTimeout>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d001      	beq.n	8005d88 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005d84:	2303      	movs	r3, #3
 8005d86:	e036      	b.n	8005df6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005d88:	69fb      	ldr	r3, [r7, #28]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d10b      	bne.n	8005da6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005d8e:	69bb      	ldr	r3, [r7, #24]
 8005d90:	881b      	ldrh	r3, [r3, #0]
 8005d92:	461a      	mov	r2, r3
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d9c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005d9e:	69bb      	ldr	r3, [r7, #24]
 8005da0:	3302      	adds	r3, #2
 8005da2:	61bb      	str	r3, [r7, #24]
 8005da4:	e007      	b.n	8005db6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005da6:	69fb      	ldr	r3, [r7, #28]
 8005da8:	781a      	ldrb	r2, [r3, #0]
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005db0:	69fb      	ldr	r3, [r7, #28]
 8005db2:	3301      	adds	r3, #1
 8005db4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005dba:	b29b      	uxth	r3, r3
 8005dbc:	3b01      	subs	r3, #1
 8005dbe:	b29a      	uxth	r2, r3
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005dc8:	b29b      	uxth	r3, r3
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d1cf      	bne.n	8005d6e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	9300      	str	r3, [sp, #0]
 8005dd2:	697b      	ldr	r3, [r7, #20]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	2140      	movs	r1, #64	; 0x40
 8005dd8:	68f8      	ldr	r0, [r7, #12]
 8005dda:	f000 fac9 	bl	8006370 <UART_WaitOnFlagUntilTimeout>
 8005dde:	4603      	mov	r3, r0
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d001      	beq.n	8005de8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005de4:	2303      	movs	r3, #3
 8005de6:	e006      	b.n	8005df6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	2220      	movs	r2, #32
 8005dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005df0:	2300      	movs	r3, #0
 8005df2:	e000      	b.n	8005df6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005df4:	2302      	movs	r3, #2
  }
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3720      	adds	r7, #32
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}
	...

08005e00 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b0ba      	sub	sp, #232	; 0xe8
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	68db      	ldr	r3, [r3, #12]
 8005e18:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	695b      	ldr	r3, [r3, #20]
 8005e22:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005e26:	2300      	movs	r3, #0
 8005e28:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005e32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e36:	f003 030f 	and.w	r3, r3, #15
 8005e3a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005e3e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d10f      	bne.n	8005e66 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005e46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e4a:	f003 0320 	and.w	r3, r3, #32
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d009      	beq.n	8005e66 <HAL_UART_IRQHandler+0x66>
 8005e52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e56:	f003 0320 	and.w	r3, r3, #32
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d003      	beq.n	8005e66 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f000 fbd3 	bl	800660a <UART_Receive_IT>
      return;
 8005e64:	e256      	b.n	8006314 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005e66:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	f000 80de 	beq.w	800602c <HAL_UART_IRQHandler+0x22c>
 8005e70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e74:	f003 0301 	and.w	r3, r3, #1
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d106      	bne.n	8005e8a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005e7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e80:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	f000 80d1 	beq.w	800602c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005e8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e8e:	f003 0301 	and.w	r3, r3, #1
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d00b      	beq.n	8005eae <HAL_UART_IRQHandler+0xae>
 8005e96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d005      	beq.n	8005eae <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ea6:	f043 0201 	orr.w	r2, r3, #1
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005eae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005eb2:	f003 0304 	and.w	r3, r3, #4
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d00b      	beq.n	8005ed2 <HAL_UART_IRQHandler+0xd2>
 8005eba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ebe:	f003 0301 	and.w	r3, r3, #1
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d005      	beq.n	8005ed2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eca:	f043 0202 	orr.w	r2, r3, #2
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005ed2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ed6:	f003 0302 	and.w	r3, r3, #2
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d00b      	beq.n	8005ef6 <HAL_UART_IRQHandler+0xf6>
 8005ede:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ee2:	f003 0301 	and.w	r3, r3, #1
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d005      	beq.n	8005ef6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eee:	f043 0204 	orr.w	r2, r3, #4
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005ef6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005efa:	f003 0308 	and.w	r3, r3, #8
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d011      	beq.n	8005f26 <HAL_UART_IRQHandler+0x126>
 8005f02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f06:	f003 0320 	and.w	r3, r3, #32
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d105      	bne.n	8005f1a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005f0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f12:	f003 0301 	and.w	r3, r3, #1
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d005      	beq.n	8005f26 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f1e:	f043 0208 	orr.w	r2, r3, #8
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	f000 81ed 	beq.w	800630a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005f30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f34:	f003 0320 	and.w	r3, r3, #32
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d008      	beq.n	8005f4e <HAL_UART_IRQHandler+0x14e>
 8005f3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f40:	f003 0320 	and.w	r3, r3, #32
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d002      	beq.n	8005f4e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005f48:	6878      	ldr	r0, [r7, #4]
 8005f4a:	f000 fb5e 	bl	800660a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	695b      	ldr	r3, [r3, #20]
 8005f54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f58:	2b40      	cmp	r3, #64	; 0x40
 8005f5a:	bf0c      	ite	eq
 8005f5c:	2301      	moveq	r3, #1
 8005f5e:	2300      	movne	r3, #0
 8005f60:	b2db      	uxtb	r3, r3
 8005f62:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f6a:	f003 0308 	and.w	r3, r3, #8
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d103      	bne.n	8005f7a <HAL_UART_IRQHandler+0x17a>
 8005f72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d04f      	beq.n	800601a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	f000 fa66 	bl	800644c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	695b      	ldr	r3, [r3, #20]
 8005f86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f8a:	2b40      	cmp	r3, #64	; 0x40
 8005f8c:	d141      	bne.n	8006012 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	3314      	adds	r3, #20
 8005f94:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f98:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005f9c:	e853 3f00 	ldrex	r3, [r3]
 8005fa0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005fa4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005fa8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	3314      	adds	r3, #20
 8005fb6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005fba:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005fbe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fc2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005fc6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005fca:	e841 2300 	strex	r3, r2, [r1]
 8005fce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005fd2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d1d9      	bne.n	8005f8e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d013      	beq.n	800600a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fe6:	4a7d      	ldr	r2, [pc, #500]	; (80061dc <HAL_UART_IRQHandler+0x3dc>)
 8005fe8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fee:	4618      	mov	r0, r3
 8005ff0:	f7fc f905 	bl	80021fe <HAL_DMA_Abort_IT>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d016      	beq.n	8006028 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ffe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006000:	687a      	ldr	r2, [r7, #4]
 8006002:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006004:	4610      	mov	r0, r2
 8006006:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006008:	e00e      	b.n	8006028 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f000 f99a 	bl	8006344 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006010:	e00a      	b.n	8006028 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f000 f996 	bl	8006344 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006018:	e006      	b.n	8006028 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f000 f992 	bl	8006344 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2200      	movs	r2, #0
 8006024:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006026:	e170      	b.n	800630a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006028:	bf00      	nop
    return;
 800602a:	e16e      	b.n	800630a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006030:	2b01      	cmp	r3, #1
 8006032:	f040 814a 	bne.w	80062ca <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006036:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800603a:	f003 0310 	and.w	r3, r3, #16
 800603e:	2b00      	cmp	r3, #0
 8006040:	f000 8143 	beq.w	80062ca <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006044:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006048:	f003 0310 	and.w	r3, r3, #16
 800604c:	2b00      	cmp	r3, #0
 800604e:	f000 813c 	beq.w	80062ca <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006052:	2300      	movs	r3, #0
 8006054:	60bb      	str	r3, [r7, #8]
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	60bb      	str	r3, [r7, #8]
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	685b      	ldr	r3, [r3, #4]
 8006064:	60bb      	str	r3, [r7, #8]
 8006066:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	695b      	ldr	r3, [r3, #20]
 800606e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006072:	2b40      	cmp	r3, #64	; 0x40
 8006074:	f040 80b4 	bne.w	80061e0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006084:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006088:	2b00      	cmp	r3, #0
 800608a:	f000 8140 	beq.w	800630e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006092:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006096:	429a      	cmp	r2, r3
 8006098:	f080 8139 	bcs.w	800630e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80060a2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060a8:	69db      	ldr	r3, [r3, #28]
 80060aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060ae:	f000 8088 	beq.w	80061c2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	330c      	adds	r3, #12
 80060b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80060c0:	e853 3f00 	ldrex	r3, [r3]
 80060c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80060c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80060cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80060d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	330c      	adds	r3, #12
 80060da:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80060de:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80060e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060e6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80060ea:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80060ee:	e841 2300 	strex	r3, r2, [r1]
 80060f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80060f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d1d9      	bne.n	80060b2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	3314      	adds	r3, #20
 8006104:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006106:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006108:	e853 3f00 	ldrex	r3, [r3]
 800610c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800610e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006110:	f023 0301 	bic.w	r3, r3, #1
 8006114:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	3314      	adds	r3, #20
 800611e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006122:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006126:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006128:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800612a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800612e:	e841 2300 	strex	r3, r2, [r1]
 8006132:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006134:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006136:	2b00      	cmp	r3, #0
 8006138:	d1e1      	bne.n	80060fe <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	3314      	adds	r3, #20
 8006140:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006142:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006144:	e853 3f00 	ldrex	r3, [r3]
 8006148:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800614a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800614c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006150:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	3314      	adds	r3, #20
 800615a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800615e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006160:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006162:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006164:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006166:	e841 2300 	strex	r3, r2, [r1]
 800616a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800616c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800616e:	2b00      	cmp	r3, #0
 8006170:	d1e3      	bne.n	800613a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2220      	movs	r2, #32
 8006176:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2200      	movs	r2, #0
 800617e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	330c      	adds	r3, #12
 8006186:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006188:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800618a:	e853 3f00 	ldrex	r3, [r3]
 800618e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006190:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006192:	f023 0310 	bic.w	r3, r3, #16
 8006196:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	330c      	adds	r3, #12
 80061a0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80061a4:	65ba      	str	r2, [r7, #88]	; 0x58
 80061a6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061a8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80061aa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80061ac:	e841 2300 	strex	r3, r2, [r1]
 80061b0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80061b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d1e3      	bne.n	8006180 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061bc:	4618      	mov	r0, r3
 80061be:	f7fb ffae 	bl	800211e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80061ca:	b29b      	uxth	r3, r3
 80061cc:	1ad3      	subs	r3, r2, r3
 80061ce:	b29b      	uxth	r3, r3
 80061d0:	4619      	mov	r1, r3
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	f000 f8c0 	bl	8006358 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80061d8:	e099      	b.n	800630e <HAL_UART_IRQHandler+0x50e>
 80061da:	bf00      	nop
 80061dc:	08006513 	.word	0x08006513
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80061e8:	b29b      	uxth	r3, r3
 80061ea:	1ad3      	subs	r3, r2, r3
 80061ec:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80061f4:	b29b      	uxth	r3, r3
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	f000 808b 	beq.w	8006312 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80061fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006200:	2b00      	cmp	r3, #0
 8006202:	f000 8086 	beq.w	8006312 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	330c      	adds	r3, #12
 800620c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800620e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006210:	e853 3f00 	ldrex	r3, [r3]
 8006214:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006216:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006218:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800621c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	330c      	adds	r3, #12
 8006226:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800622a:	647a      	str	r2, [r7, #68]	; 0x44
 800622c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800622e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006230:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006232:	e841 2300 	strex	r3, r2, [r1]
 8006236:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006238:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800623a:	2b00      	cmp	r3, #0
 800623c:	d1e3      	bne.n	8006206 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	3314      	adds	r3, #20
 8006244:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006248:	e853 3f00 	ldrex	r3, [r3]
 800624c:	623b      	str	r3, [r7, #32]
   return(result);
 800624e:	6a3b      	ldr	r3, [r7, #32]
 8006250:	f023 0301 	bic.w	r3, r3, #1
 8006254:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	3314      	adds	r3, #20
 800625e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006262:	633a      	str	r2, [r7, #48]	; 0x30
 8006264:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006266:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006268:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800626a:	e841 2300 	strex	r3, r2, [r1]
 800626e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006272:	2b00      	cmp	r3, #0
 8006274:	d1e3      	bne.n	800623e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2220      	movs	r2, #32
 800627a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2200      	movs	r2, #0
 8006282:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	330c      	adds	r3, #12
 800628a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800628c:	693b      	ldr	r3, [r7, #16]
 800628e:	e853 3f00 	ldrex	r3, [r3]
 8006292:	60fb      	str	r3, [r7, #12]
   return(result);
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	f023 0310 	bic.w	r3, r3, #16
 800629a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	330c      	adds	r3, #12
 80062a4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80062a8:	61fa      	str	r2, [r7, #28]
 80062aa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ac:	69b9      	ldr	r1, [r7, #24]
 80062ae:	69fa      	ldr	r2, [r7, #28]
 80062b0:	e841 2300 	strex	r3, r2, [r1]
 80062b4:	617b      	str	r3, [r7, #20]
   return(result);
 80062b6:	697b      	ldr	r3, [r7, #20]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d1e3      	bne.n	8006284 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80062bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80062c0:	4619      	mov	r1, r3
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	f000 f848 	bl	8006358 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80062c8:	e023      	b.n	8006312 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80062ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d009      	beq.n	80062ea <HAL_UART_IRQHandler+0x4ea>
 80062d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d003      	beq.n	80062ea <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f000 f929 	bl	800653a <UART_Transmit_IT>
    return;
 80062e8:	e014      	b.n	8006314 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80062ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d00e      	beq.n	8006314 <HAL_UART_IRQHandler+0x514>
 80062f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d008      	beq.n	8006314 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006302:	6878      	ldr	r0, [r7, #4]
 8006304:	f000 f969 	bl	80065da <UART_EndTransmit_IT>
    return;
 8006308:	e004      	b.n	8006314 <HAL_UART_IRQHandler+0x514>
    return;
 800630a:	bf00      	nop
 800630c:	e002      	b.n	8006314 <HAL_UART_IRQHandler+0x514>
      return;
 800630e:	bf00      	nop
 8006310:	e000      	b.n	8006314 <HAL_UART_IRQHandler+0x514>
      return;
 8006312:	bf00      	nop
  }
}
 8006314:	37e8      	adds	r7, #232	; 0xe8
 8006316:	46bd      	mov	sp, r7
 8006318:	bd80      	pop	{r7, pc}
 800631a:	bf00      	nop

0800631c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800631c:	b480      	push	{r7}
 800631e:	b083      	sub	sp, #12
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006324:	bf00      	nop
 8006326:	370c      	adds	r7, #12
 8006328:	46bd      	mov	sp, r7
 800632a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632e:	4770      	bx	lr

08006330 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006330:	b480      	push	{r7}
 8006332:	b083      	sub	sp, #12
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006338:	bf00      	nop
 800633a:	370c      	adds	r7, #12
 800633c:	46bd      	mov	sp, r7
 800633e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006342:	4770      	bx	lr

08006344 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006344:	b480      	push	{r7}
 8006346:	b083      	sub	sp, #12
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800634c:	bf00      	nop
 800634e:	370c      	adds	r7, #12
 8006350:	46bd      	mov	sp, r7
 8006352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006356:	4770      	bx	lr

08006358 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006358:	b480      	push	{r7}
 800635a:	b083      	sub	sp, #12
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
 8006360:	460b      	mov	r3, r1
 8006362:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006364:	bf00      	nop
 8006366:	370c      	adds	r7, #12
 8006368:	46bd      	mov	sp, r7
 800636a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636e:	4770      	bx	lr

08006370 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b090      	sub	sp, #64	; 0x40
 8006374:	af00      	add	r7, sp, #0
 8006376:	60f8      	str	r0, [r7, #12]
 8006378:	60b9      	str	r1, [r7, #8]
 800637a:	603b      	str	r3, [r7, #0]
 800637c:	4613      	mov	r3, r2
 800637e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006380:	e050      	b.n	8006424 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006382:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006384:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006388:	d04c      	beq.n	8006424 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800638a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800638c:	2b00      	cmp	r3, #0
 800638e:	d007      	beq.n	80063a0 <UART_WaitOnFlagUntilTimeout+0x30>
 8006390:	f7fb fd84 	bl	8001e9c <HAL_GetTick>
 8006394:	4602      	mov	r2, r0
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	1ad3      	subs	r3, r2, r3
 800639a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800639c:	429a      	cmp	r2, r3
 800639e:	d241      	bcs.n	8006424 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	330c      	adds	r3, #12
 80063a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063aa:	e853 3f00 	ldrex	r3, [r3]
 80063ae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80063b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80063b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	330c      	adds	r3, #12
 80063be:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80063c0:	637a      	str	r2, [r7, #52]	; 0x34
 80063c2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063c4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80063c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80063c8:	e841 2300 	strex	r3, r2, [r1]
 80063cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80063ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d1e5      	bne.n	80063a0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	3314      	adds	r3, #20
 80063da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	e853 3f00 	ldrex	r3, [r3]
 80063e2:	613b      	str	r3, [r7, #16]
   return(result);
 80063e4:	693b      	ldr	r3, [r7, #16]
 80063e6:	f023 0301 	bic.w	r3, r3, #1
 80063ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	3314      	adds	r3, #20
 80063f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80063f4:	623a      	str	r2, [r7, #32]
 80063f6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063f8:	69f9      	ldr	r1, [r7, #28]
 80063fa:	6a3a      	ldr	r2, [r7, #32]
 80063fc:	e841 2300 	strex	r3, r2, [r1]
 8006400:	61bb      	str	r3, [r7, #24]
   return(result);
 8006402:	69bb      	ldr	r3, [r7, #24]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d1e5      	bne.n	80063d4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	2220      	movs	r2, #32
 800640c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	2220      	movs	r2, #32
 8006414:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	2200      	movs	r2, #0
 800641c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006420:	2303      	movs	r3, #3
 8006422:	e00f      	b.n	8006444 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	681a      	ldr	r2, [r3, #0]
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	4013      	ands	r3, r2
 800642e:	68ba      	ldr	r2, [r7, #8]
 8006430:	429a      	cmp	r2, r3
 8006432:	bf0c      	ite	eq
 8006434:	2301      	moveq	r3, #1
 8006436:	2300      	movne	r3, #0
 8006438:	b2db      	uxtb	r3, r3
 800643a:	461a      	mov	r2, r3
 800643c:	79fb      	ldrb	r3, [r7, #7]
 800643e:	429a      	cmp	r2, r3
 8006440:	d09f      	beq.n	8006382 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006442:	2300      	movs	r3, #0
}
 8006444:	4618      	mov	r0, r3
 8006446:	3740      	adds	r7, #64	; 0x40
 8006448:	46bd      	mov	sp, r7
 800644a:	bd80      	pop	{r7, pc}

0800644c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800644c:	b480      	push	{r7}
 800644e:	b095      	sub	sp, #84	; 0x54
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	330c      	adds	r3, #12
 800645a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800645c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800645e:	e853 3f00 	ldrex	r3, [r3]
 8006462:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006466:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800646a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	330c      	adds	r3, #12
 8006472:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006474:	643a      	str	r2, [r7, #64]	; 0x40
 8006476:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006478:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800647a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800647c:	e841 2300 	strex	r3, r2, [r1]
 8006480:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006484:	2b00      	cmp	r3, #0
 8006486:	d1e5      	bne.n	8006454 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	3314      	adds	r3, #20
 800648e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006490:	6a3b      	ldr	r3, [r7, #32]
 8006492:	e853 3f00 	ldrex	r3, [r3]
 8006496:	61fb      	str	r3, [r7, #28]
   return(result);
 8006498:	69fb      	ldr	r3, [r7, #28]
 800649a:	f023 0301 	bic.w	r3, r3, #1
 800649e:	64bb      	str	r3, [r7, #72]	; 0x48
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	3314      	adds	r3, #20
 80064a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80064a8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80064aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80064ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80064b0:	e841 2300 	strex	r3, r2, [r1]
 80064b4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80064b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d1e5      	bne.n	8006488 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064c0:	2b01      	cmp	r3, #1
 80064c2:	d119      	bne.n	80064f8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	330c      	adds	r3, #12
 80064ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	e853 3f00 	ldrex	r3, [r3]
 80064d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	f023 0310 	bic.w	r3, r3, #16
 80064da:	647b      	str	r3, [r7, #68]	; 0x44
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	330c      	adds	r3, #12
 80064e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80064e4:	61ba      	str	r2, [r7, #24]
 80064e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064e8:	6979      	ldr	r1, [r7, #20]
 80064ea:	69ba      	ldr	r2, [r7, #24]
 80064ec:	e841 2300 	strex	r3, r2, [r1]
 80064f0:	613b      	str	r3, [r7, #16]
   return(result);
 80064f2:	693b      	ldr	r3, [r7, #16]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d1e5      	bne.n	80064c4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2220      	movs	r2, #32
 80064fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2200      	movs	r2, #0
 8006504:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006506:	bf00      	nop
 8006508:	3754      	adds	r7, #84	; 0x54
 800650a:	46bd      	mov	sp, r7
 800650c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006510:	4770      	bx	lr

08006512 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006512:	b580      	push	{r7, lr}
 8006514:	b084      	sub	sp, #16
 8006516:	af00      	add	r7, sp, #0
 8006518:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800651e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	2200      	movs	r2, #0
 8006524:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	2200      	movs	r2, #0
 800652a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800652c:	68f8      	ldr	r0, [r7, #12]
 800652e:	f7ff ff09 	bl	8006344 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006532:	bf00      	nop
 8006534:	3710      	adds	r7, #16
 8006536:	46bd      	mov	sp, r7
 8006538:	bd80      	pop	{r7, pc}

0800653a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800653a:	b480      	push	{r7}
 800653c:	b085      	sub	sp, #20
 800653e:	af00      	add	r7, sp, #0
 8006540:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006548:	b2db      	uxtb	r3, r3
 800654a:	2b21      	cmp	r3, #33	; 0x21
 800654c:	d13e      	bne.n	80065cc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	689b      	ldr	r3, [r3, #8]
 8006552:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006556:	d114      	bne.n	8006582 <UART_Transmit_IT+0x48>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	691b      	ldr	r3, [r3, #16]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d110      	bne.n	8006582 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6a1b      	ldr	r3, [r3, #32]
 8006564:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	881b      	ldrh	r3, [r3, #0]
 800656a:	461a      	mov	r2, r3
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006574:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6a1b      	ldr	r3, [r3, #32]
 800657a:	1c9a      	adds	r2, r3, #2
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	621a      	str	r2, [r3, #32]
 8006580:	e008      	b.n	8006594 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6a1b      	ldr	r3, [r3, #32]
 8006586:	1c59      	adds	r1, r3, #1
 8006588:	687a      	ldr	r2, [r7, #4]
 800658a:	6211      	str	r1, [r2, #32]
 800658c:	781a      	ldrb	r2, [r3, #0]
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006598:	b29b      	uxth	r3, r3
 800659a:	3b01      	subs	r3, #1
 800659c:	b29b      	uxth	r3, r3
 800659e:	687a      	ldr	r2, [r7, #4]
 80065a0:	4619      	mov	r1, r3
 80065a2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d10f      	bne.n	80065c8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	68da      	ldr	r2, [r3, #12]
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80065b6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	68da      	ldr	r2, [r3, #12]
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80065c6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80065c8:	2300      	movs	r3, #0
 80065ca:	e000      	b.n	80065ce <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80065cc:	2302      	movs	r3, #2
  }
}
 80065ce:	4618      	mov	r0, r3
 80065d0:	3714      	adds	r7, #20
 80065d2:	46bd      	mov	sp, r7
 80065d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d8:	4770      	bx	lr

080065da <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80065da:	b580      	push	{r7, lr}
 80065dc:	b082      	sub	sp, #8
 80065de:	af00      	add	r7, sp, #0
 80065e0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	68da      	ldr	r2, [r3, #12]
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80065f0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2220      	movs	r2, #32
 80065f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f7ff fe8e 	bl	800631c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006600:	2300      	movs	r3, #0
}
 8006602:	4618      	mov	r0, r3
 8006604:	3708      	adds	r7, #8
 8006606:	46bd      	mov	sp, r7
 8006608:	bd80      	pop	{r7, pc}

0800660a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800660a:	b580      	push	{r7, lr}
 800660c:	b08c      	sub	sp, #48	; 0x30
 800660e:	af00      	add	r7, sp, #0
 8006610:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006618:	b2db      	uxtb	r3, r3
 800661a:	2b22      	cmp	r3, #34	; 0x22
 800661c:	f040 80ab 	bne.w	8006776 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	689b      	ldr	r3, [r3, #8]
 8006624:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006628:	d117      	bne.n	800665a <UART_Receive_IT+0x50>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	691b      	ldr	r3, [r3, #16]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d113      	bne.n	800665a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006632:	2300      	movs	r3, #0
 8006634:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800663a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	685b      	ldr	r3, [r3, #4]
 8006642:	b29b      	uxth	r3, r3
 8006644:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006648:	b29a      	uxth	r2, r3
 800664a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800664c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006652:	1c9a      	adds	r2, r3, #2
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	629a      	str	r2, [r3, #40]	; 0x28
 8006658:	e026      	b.n	80066a8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800665e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006660:	2300      	movs	r3, #0
 8006662:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	689b      	ldr	r3, [r3, #8]
 8006668:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800666c:	d007      	beq.n	800667e <UART_Receive_IT+0x74>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	689b      	ldr	r3, [r3, #8]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d10a      	bne.n	800668c <UART_Receive_IT+0x82>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	691b      	ldr	r3, [r3, #16]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d106      	bne.n	800668c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	685b      	ldr	r3, [r3, #4]
 8006684:	b2da      	uxtb	r2, r3
 8006686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006688:	701a      	strb	r2, [r3, #0]
 800668a:	e008      	b.n	800669e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	685b      	ldr	r3, [r3, #4]
 8006692:	b2db      	uxtb	r3, r3
 8006694:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006698:	b2da      	uxtb	r2, r3
 800669a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800669c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066a2:	1c5a      	adds	r2, r3, #1
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80066ac:	b29b      	uxth	r3, r3
 80066ae:	3b01      	subs	r3, #1
 80066b0:	b29b      	uxth	r3, r3
 80066b2:	687a      	ldr	r2, [r7, #4]
 80066b4:	4619      	mov	r1, r3
 80066b6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d15a      	bne.n	8006772 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	68da      	ldr	r2, [r3, #12]
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f022 0220 	bic.w	r2, r2, #32
 80066ca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	68da      	ldr	r2, [r3, #12]
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80066da:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	695a      	ldr	r2, [r3, #20]
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f022 0201 	bic.w	r2, r2, #1
 80066ea:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2220      	movs	r2, #32
 80066f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066f8:	2b01      	cmp	r3, #1
 80066fa:	d135      	bne.n	8006768 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2200      	movs	r2, #0
 8006700:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	330c      	adds	r3, #12
 8006708:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800670a:	697b      	ldr	r3, [r7, #20]
 800670c:	e853 3f00 	ldrex	r3, [r3]
 8006710:	613b      	str	r3, [r7, #16]
   return(result);
 8006712:	693b      	ldr	r3, [r7, #16]
 8006714:	f023 0310 	bic.w	r3, r3, #16
 8006718:	627b      	str	r3, [r7, #36]	; 0x24
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	330c      	adds	r3, #12
 8006720:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006722:	623a      	str	r2, [r7, #32]
 8006724:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006726:	69f9      	ldr	r1, [r7, #28]
 8006728:	6a3a      	ldr	r2, [r7, #32]
 800672a:	e841 2300 	strex	r3, r2, [r1]
 800672e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006730:	69bb      	ldr	r3, [r7, #24]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d1e5      	bne.n	8006702 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f003 0310 	and.w	r3, r3, #16
 8006740:	2b10      	cmp	r3, #16
 8006742:	d10a      	bne.n	800675a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006744:	2300      	movs	r3, #0
 8006746:	60fb      	str	r3, [r7, #12]
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	60fb      	str	r3, [r7, #12]
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	685b      	ldr	r3, [r3, #4]
 8006756:	60fb      	str	r3, [r7, #12]
 8006758:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800675e:	4619      	mov	r1, r3
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	f7ff fdf9 	bl	8006358 <HAL_UARTEx_RxEventCallback>
 8006766:	e002      	b.n	800676e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006768:	6878      	ldr	r0, [r7, #4]
 800676a:	f7ff fde1 	bl	8006330 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800676e:	2300      	movs	r3, #0
 8006770:	e002      	b.n	8006778 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006772:	2300      	movs	r3, #0
 8006774:	e000      	b.n	8006778 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006776:	2302      	movs	r3, #2
  }
}
 8006778:	4618      	mov	r0, r3
 800677a:	3730      	adds	r7, #48	; 0x30
 800677c:	46bd      	mov	sp, r7
 800677e:	bd80      	pop	{r7, pc}

08006780 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006780:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006784:	b0c0      	sub	sp, #256	; 0x100
 8006786:	af00      	add	r7, sp, #0
 8006788:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800678c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	691b      	ldr	r3, [r3, #16]
 8006794:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006798:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800679c:	68d9      	ldr	r1, [r3, #12]
 800679e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067a2:	681a      	ldr	r2, [r3, #0]
 80067a4:	ea40 0301 	orr.w	r3, r0, r1
 80067a8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80067aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067ae:	689a      	ldr	r2, [r3, #8]
 80067b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067b4:	691b      	ldr	r3, [r3, #16]
 80067b6:	431a      	orrs	r2, r3
 80067b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067bc:	695b      	ldr	r3, [r3, #20]
 80067be:	431a      	orrs	r2, r3
 80067c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067c4:	69db      	ldr	r3, [r3, #28]
 80067c6:	4313      	orrs	r3, r2
 80067c8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80067cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	68db      	ldr	r3, [r3, #12]
 80067d4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80067d8:	f021 010c 	bic.w	r1, r1, #12
 80067dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067e0:	681a      	ldr	r2, [r3, #0]
 80067e2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80067e6:	430b      	orrs	r3, r1
 80067e8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80067ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	695b      	ldr	r3, [r3, #20]
 80067f2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80067f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067fa:	6999      	ldr	r1, [r3, #24]
 80067fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006800:	681a      	ldr	r2, [r3, #0]
 8006802:	ea40 0301 	orr.w	r3, r0, r1
 8006806:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006808:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800680c:	681a      	ldr	r2, [r3, #0]
 800680e:	4b8f      	ldr	r3, [pc, #572]	; (8006a4c <UART_SetConfig+0x2cc>)
 8006810:	429a      	cmp	r2, r3
 8006812:	d005      	beq.n	8006820 <UART_SetConfig+0xa0>
 8006814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006818:	681a      	ldr	r2, [r3, #0]
 800681a:	4b8d      	ldr	r3, [pc, #564]	; (8006a50 <UART_SetConfig+0x2d0>)
 800681c:	429a      	cmp	r2, r3
 800681e:	d104      	bne.n	800682a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006820:	f7ff f9fa 	bl	8005c18 <HAL_RCC_GetPCLK2Freq>
 8006824:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006828:	e003      	b.n	8006832 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800682a:	f7ff f9e1 	bl	8005bf0 <HAL_RCC_GetPCLK1Freq>
 800682e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006832:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006836:	69db      	ldr	r3, [r3, #28]
 8006838:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800683c:	f040 810c 	bne.w	8006a58 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006840:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006844:	2200      	movs	r2, #0
 8006846:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800684a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800684e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006852:	4622      	mov	r2, r4
 8006854:	462b      	mov	r3, r5
 8006856:	1891      	adds	r1, r2, r2
 8006858:	65b9      	str	r1, [r7, #88]	; 0x58
 800685a:	415b      	adcs	r3, r3
 800685c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800685e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006862:	4621      	mov	r1, r4
 8006864:	eb12 0801 	adds.w	r8, r2, r1
 8006868:	4629      	mov	r1, r5
 800686a:	eb43 0901 	adc.w	r9, r3, r1
 800686e:	f04f 0200 	mov.w	r2, #0
 8006872:	f04f 0300 	mov.w	r3, #0
 8006876:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800687a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800687e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006882:	4690      	mov	r8, r2
 8006884:	4699      	mov	r9, r3
 8006886:	4623      	mov	r3, r4
 8006888:	eb18 0303 	adds.w	r3, r8, r3
 800688c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006890:	462b      	mov	r3, r5
 8006892:	eb49 0303 	adc.w	r3, r9, r3
 8006896:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800689a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800689e:	685b      	ldr	r3, [r3, #4]
 80068a0:	2200      	movs	r2, #0
 80068a2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80068a6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80068aa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80068ae:	460b      	mov	r3, r1
 80068b0:	18db      	adds	r3, r3, r3
 80068b2:	653b      	str	r3, [r7, #80]	; 0x50
 80068b4:	4613      	mov	r3, r2
 80068b6:	eb42 0303 	adc.w	r3, r2, r3
 80068ba:	657b      	str	r3, [r7, #84]	; 0x54
 80068bc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80068c0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80068c4:	f7fa f9f0 	bl	8000ca8 <__aeabi_uldivmod>
 80068c8:	4602      	mov	r2, r0
 80068ca:	460b      	mov	r3, r1
 80068cc:	4b61      	ldr	r3, [pc, #388]	; (8006a54 <UART_SetConfig+0x2d4>)
 80068ce:	fba3 2302 	umull	r2, r3, r3, r2
 80068d2:	095b      	lsrs	r3, r3, #5
 80068d4:	011c      	lsls	r4, r3, #4
 80068d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80068da:	2200      	movs	r2, #0
 80068dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80068e0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80068e4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80068e8:	4642      	mov	r2, r8
 80068ea:	464b      	mov	r3, r9
 80068ec:	1891      	adds	r1, r2, r2
 80068ee:	64b9      	str	r1, [r7, #72]	; 0x48
 80068f0:	415b      	adcs	r3, r3
 80068f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80068f4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80068f8:	4641      	mov	r1, r8
 80068fa:	eb12 0a01 	adds.w	sl, r2, r1
 80068fe:	4649      	mov	r1, r9
 8006900:	eb43 0b01 	adc.w	fp, r3, r1
 8006904:	f04f 0200 	mov.w	r2, #0
 8006908:	f04f 0300 	mov.w	r3, #0
 800690c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006910:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006914:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006918:	4692      	mov	sl, r2
 800691a:	469b      	mov	fp, r3
 800691c:	4643      	mov	r3, r8
 800691e:	eb1a 0303 	adds.w	r3, sl, r3
 8006922:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006926:	464b      	mov	r3, r9
 8006928:	eb4b 0303 	adc.w	r3, fp, r3
 800692c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006930:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006934:	685b      	ldr	r3, [r3, #4]
 8006936:	2200      	movs	r2, #0
 8006938:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800693c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006940:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006944:	460b      	mov	r3, r1
 8006946:	18db      	adds	r3, r3, r3
 8006948:	643b      	str	r3, [r7, #64]	; 0x40
 800694a:	4613      	mov	r3, r2
 800694c:	eb42 0303 	adc.w	r3, r2, r3
 8006950:	647b      	str	r3, [r7, #68]	; 0x44
 8006952:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006956:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800695a:	f7fa f9a5 	bl	8000ca8 <__aeabi_uldivmod>
 800695e:	4602      	mov	r2, r0
 8006960:	460b      	mov	r3, r1
 8006962:	4611      	mov	r1, r2
 8006964:	4b3b      	ldr	r3, [pc, #236]	; (8006a54 <UART_SetConfig+0x2d4>)
 8006966:	fba3 2301 	umull	r2, r3, r3, r1
 800696a:	095b      	lsrs	r3, r3, #5
 800696c:	2264      	movs	r2, #100	; 0x64
 800696e:	fb02 f303 	mul.w	r3, r2, r3
 8006972:	1acb      	subs	r3, r1, r3
 8006974:	00db      	lsls	r3, r3, #3
 8006976:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800697a:	4b36      	ldr	r3, [pc, #216]	; (8006a54 <UART_SetConfig+0x2d4>)
 800697c:	fba3 2302 	umull	r2, r3, r3, r2
 8006980:	095b      	lsrs	r3, r3, #5
 8006982:	005b      	lsls	r3, r3, #1
 8006984:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006988:	441c      	add	r4, r3
 800698a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800698e:	2200      	movs	r2, #0
 8006990:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006994:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006998:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800699c:	4642      	mov	r2, r8
 800699e:	464b      	mov	r3, r9
 80069a0:	1891      	adds	r1, r2, r2
 80069a2:	63b9      	str	r1, [r7, #56]	; 0x38
 80069a4:	415b      	adcs	r3, r3
 80069a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80069a8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80069ac:	4641      	mov	r1, r8
 80069ae:	1851      	adds	r1, r2, r1
 80069b0:	6339      	str	r1, [r7, #48]	; 0x30
 80069b2:	4649      	mov	r1, r9
 80069b4:	414b      	adcs	r3, r1
 80069b6:	637b      	str	r3, [r7, #52]	; 0x34
 80069b8:	f04f 0200 	mov.w	r2, #0
 80069bc:	f04f 0300 	mov.w	r3, #0
 80069c0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80069c4:	4659      	mov	r1, fp
 80069c6:	00cb      	lsls	r3, r1, #3
 80069c8:	4651      	mov	r1, sl
 80069ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80069ce:	4651      	mov	r1, sl
 80069d0:	00ca      	lsls	r2, r1, #3
 80069d2:	4610      	mov	r0, r2
 80069d4:	4619      	mov	r1, r3
 80069d6:	4603      	mov	r3, r0
 80069d8:	4642      	mov	r2, r8
 80069da:	189b      	adds	r3, r3, r2
 80069dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80069e0:	464b      	mov	r3, r9
 80069e2:	460a      	mov	r2, r1
 80069e4:	eb42 0303 	adc.w	r3, r2, r3
 80069e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80069ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069f0:	685b      	ldr	r3, [r3, #4]
 80069f2:	2200      	movs	r2, #0
 80069f4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80069f8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80069fc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006a00:	460b      	mov	r3, r1
 8006a02:	18db      	adds	r3, r3, r3
 8006a04:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a06:	4613      	mov	r3, r2
 8006a08:	eb42 0303 	adc.w	r3, r2, r3
 8006a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a0e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006a12:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006a16:	f7fa f947 	bl	8000ca8 <__aeabi_uldivmod>
 8006a1a:	4602      	mov	r2, r0
 8006a1c:	460b      	mov	r3, r1
 8006a1e:	4b0d      	ldr	r3, [pc, #52]	; (8006a54 <UART_SetConfig+0x2d4>)
 8006a20:	fba3 1302 	umull	r1, r3, r3, r2
 8006a24:	095b      	lsrs	r3, r3, #5
 8006a26:	2164      	movs	r1, #100	; 0x64
 8006a28:	fb01 f303 	mul.w	r3, r1, r3
 8006a2c:	1ad3      	subs	r3, r2, r3
 8006a2e:	00db      	lsls	r3, r3, #3
 8006a30:	3332      	adds	r3, #50	; 0x32
 8006a32:	4a08      	ldr	r2, [pc, #32]	; (8006a54 <UART_SetConfig+0x2d4>)
 8006a34:	fba2 2303 	umull	r2, r3, r2, r3
 8006a38:	095b      	lsrs	r3, r3, #5
 8006a3a:	f003 0207 	and.w	r2, r3, #7
 8006a3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4422      	add	r2, r4
 8006a46:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006a48:	e105      	b.n	8006c56 <UART_SetConfig+0x4d6>
 8006a4a:	bf00      	nop
 8006a4c:	40011000 	.word	0x40011000
 8006a50:	40011400 	.word	0x40011400
 8006a54:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006a58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006a62:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006a66:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006a6a:	4642      	mov	r2, r8
 8006a6c:	464b      	mov	r3, r9
 8006a6e:	1891      	adds	r1, r2, r2
 8006a70:	6239      	str	r1, [r7, #32]
 8006a72:	415b      	adcs	r3, r3
 8006a74:	627b      	str	r3, [r7, #36]	; 0x24
 8006a76:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006a7a:	4641      	mov	r1, r8
 8006a7c:	1854      	adds	r4, r2, r1
 8006a7e:	4649      	mov	r1, r9
 8006a80:	eb43 0501 	adc.w	r5, r3, r1
 8006a84:	f04f 0200 	mov.w	r2, #0
 8006a88:	f04f 0300 	mov.w	r3, #0
 8006a8c:	00eb      	lsls	r3, r5, #3
 8006a8e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006a92:	00e2      	lsls	r2, r4, #3
 8006a94:	4614      	mov	r4, r2
 8006a96:	461d      	mov	r5, r3
 8006a98:	4643      	mov	r3, r8
 8006a9a:	18e3      	adds	r3, r4, r3
 8006a9c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006aa0:	464b      	mov	r3, r9
 8006aa2:	eb45 0303 	adc.w	r3, r5, r3
 8006aa6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006aaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006aae:	685b      	ldr	r3, [r3, #4]
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006ab6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006aba:	f04f 0200 	mov.w	r2, #0
 8006abe:	f04f 0300 	mov.w	r3, #0
 8006ac2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006ac6:	4629      	mov	r1, r5
 8006ac8:	008b      	lsls	r3, r1, #2
 8006aca:	4621      	mov	r1, r4
 8006acc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006ad0:	4621      	mov	r1, r4
 8006ad2:	008a      	lsls	r2, r1, #2
 8006ad4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006ad8:	f7fa f8e6 	bl	8000ca8 <__aeabi_uldivmod>
 8006adc:	4602      	mov	r2, r0
 8006ade:	460b      	mov	r3, r1
 8006ae0:	4b60      	ldr	r3, [pc, #384]	; (8006c64 <UART_SetConfig+0x4e4>)
 8006ae2:	fba3 2302 	umull	r2, r3, r3, r2
 8006ae6:	095b      	lsrs	r3, r3, #5
 8006ae8:	011c      	lsls	r4, r3, #4
 8006aea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006aee:	2200      	movs	r2, #0
 8006af0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006af4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006af8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006afc:	4642      	mov	r2, r8
 8006afe:	464b      	mov	r3, r9
 8006b00:	1891      	adds	r1, r2, r2
 8006b02:	61b9      	str	r1, [r7, #24]
 8006b04:	415b      	adcs	r3, r3
 8006b06:	61fb      	str	r3, [r7, #28]
 8006b08:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006b0c:	4641      	mov	r1, r8
 8006b0e:	1851      	adds	r1, r2, r1
 8006b10:	6139      	str	r1, [r7, #16]
 8006b12:	4649      	mov	r1, r9
 8006b14:	414b      	adcs	r3, r1
 8006b16:	617b      	str	r3, [r7, #20]
 8006b18:	f04f 0200 	mov.w	r2, #0
 8006b1c:	f04f 0300 	mov.w	r3, #0
 8006b20:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006b24:	4659      	mov	r1, fp
 8006b26:	00cb      	lsls	r3, r1, #3
 8006b28:	4651      	mov	r1, sl
 8006b2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006b2e:	4651      	mov	r1, sl
 8006b30:	00ca      	lsls	r2, r1, #3
 8006b32:	4610      	mov	r0, r2
 8006b34:	4619      	mov	r1, r3
 8006b36:	4603      	mov	r3, r0
 8006b38:	4642      	mov	r2, r8
 8006b3a:	189b      	adds	r3, r3, r2
 8006b3c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006b40:	464b      	mov	r3, r9
 8006b42:	460a      	mov	r2, r1
 8006b44:	eb42 0303 	adc.w	r3, r2, r3
 8006b48:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006b4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b50:	685b      	ldr	r3, [r3, #4]
 8006b52:	2200      	movs	r2, #0
 8006b54:	67bb      	str	r3, [r7, #120]	; 0x78
 8006b56:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006b58:	f04f 0200 	mov.w	r2, #0
 8006b5c:	f04f 0300 	mov.w	r3, #0
 8006b60:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006b64:	4649      	mov	r1, r9
 8006b66:	008b      	lsls	r3, r1, #2
 8006b68:	4641      	mov	r1, r8
 8006b6a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006b6e:	4641      	mov	r1, r8
 8006b70:	008a      	lsls	r2, r1, #2
 8006b72:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006b76:	f7fa f897 	bl	8000ca8 <__aeabi_uldivmod>
 8006b7a:	4602      	mov	r2, r0
 8006b7c:	460b      	mov	r3, r1
 8006b7e:	4b39      	ldr	r3, [pc, #228]	; (8006c64 <UART_SetConfig+0x4e4>)
 8006b80:	fba3 1302 	umull	r1, r3, r3, r2
 8006b84:	095b      	lsrs	r3, r3, #5
 8006b86:	2164      	movs	r1, #100	; 0x64
 8006b88:	fb01 f303 	mul.w	r3, r1, r3
 8006b8c:	1ad3      	subs	r3, r2, r3
 8006b8e:	011b      	lsls	r3, r3, #4
 8006b90:	3332      	adds	r3, #50	; 0x32
 8006b92:	4a34      	ldr	r2, [pc, #208]	; (8006c64 <UART_SetConfig+0x4e4>)
 8006b94:	fba2 2303 	umull	r2, r3, r2, r3
 8006b98:	095b      	lsrs	r3, r3, #5
 8006b9a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006b9e:	441c      	add	r4, r3
 8006ba0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	673b      	str	r3, [r7, #112]	; 0x70
 8006ba8:	677a      	str	r2, [r7, #116]	; 0x74
 8006baa:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006bae:	4642      	mov	r2, r8
 8006bb0:	464b      	mov	r3, r9
 8006bb2:	1891      	adds	r1, r2, r2
 8006bb4:	60b9      	str	r1, [r7, #8]
 8006bb6:	415b      	adcs	r3, r3
 8006bb8:	60fb      	str	r3, [r7, #12]
 8006bba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006bbe:	4641      	mov	r1, r8
 8006bc0:	1851      	adds	r1, r2, r1
 8006bc2:	6039      	str	r1, [r7, #0]
 8006bc4:	4649      	mov	r1, r9
 8006bc6:	414b      	adcs	r3, r1
 8006bc8:	607b      	str	r3, [r7, #4]
 8006bca:	f04f 0200 	mov.w	r2, #0
 8006bce:	f04f 0300 	mov.w	r3, #0
 8006bd2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006bd6:	4659      	mov	r1, fp
 8006bd8:	00cb      	lsls	r3, r1, #3
 8006bda:	4651      	mov	r1, sl
 8006bdc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006be0:	4651      	mov	r1, sl
 8006be2:	00ca      	lsls	r2, r1, #3
 8006be4:	4610      	mov	r0, r2
 8006be6:	4619      	mov	r1, r3
 8006be8:	4603      	mov	r3, r0
 8006bea:	4642      	mov	r2, r8
 8006bec:	189b      	adds	r3, r3, r2
 8006bee:	66bb      	str	r3, [r7, #104]	; 0x68
 8006bf0:	464b      	mov	r3, r9
 8006bf2:	460a      	mov	r2, r1
 8006bf4:	eb42 0303 	adc.w	r3, r2, r3
 8006bf8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006bfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bfe:	685b      	ldr	r3, [r3, #4]
 8006c00:	2200      	movs	r2, #0
 8006c02:	663b      	str	r3, [r7, #96]	; 0x60
 8006c04:	667a      	str	r2, [r7, #100]	; 0x64
 8006c06:	f04f 0200 	mov.w	r2, #0
 8006c0a:	f04f 0300 	mov.w	r3, #0
 8006c0e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006c12:	4649      	mov	r1, r9
 8006c14:	008b      	lsls	r3, r1, #2
 8006c16:	4641      	mov	r1, r8
 8006c18:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006c1c:	4641      	mov	r1, r8
 8006c1e:	008a      	lsls	r2, r1, #2
 8006c20:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006c24:	f7fa f840 	bl	8000ca8 <__aeabi_uldivmod>
 8006c28:	4602      	mov	r2, r0
 8006c2a:	460b      	mov	r3, r1
 8006c2c:	4b0d      	ldr	r3, [pc, #52]	; (8006c64 <UART_SetConfig+0x4e4>)
 8006c2e:	fba3 1302 	umull	r1, r3, r3, r2
 8006c32:	095b      	lsrs	r3, r3, #5
 8006c34:	2164      	movs	r1, #100	; 0x64
 8006c36:	fb01 f303 	mul.w	r3, r1, r3
 8006c3a:	1ad3      	subs	r3, r2, r3
 8006c3c:	011b      	lsls	r3, r3, #4
 8006c3e:	3332      	adds	r3, #50	; 0x32
 8006c40:	4a08      	ldr	r2, [pc, #32]	; (8006c64 <UART_SetConfig+0x4e4>)
 8006c42:	fba2 2303 	umull	r2, r3, r2, r3
 8006c46:	095b      	lsrs	r3, r3, #5
 8006c48:	f003 020f 	and.w	r2, r3, #15
 8006c4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	4422      	add	r2, r4
 8006c54:	609a      	str	r2, [r3, #8]
}
 8006c56:	bf00      	nop
 8006c58:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006c62:	bf00      	nop
 8006c64:	51eb851f 	.word	0x51eb851f

08006c68 <__errno>:
 8006c68:	4b01      	ldr	r3, [pc, #4]	; (8006c70 <__errno+0x8>)
 8006c6a:	6818      	ldr	r0, [r3, #0]
 8006c6c:	4770      	bx	lr
 8006c6e:	bf00      	nop
 8006c70:	20000078 	.word	0x20000078

08006c74 <__libc_init_array>:
 8006c74:	b570      	push	{r4, r5, r6, lr}
 8006c76:	4d0d      	ldr	r5, [pc, #52]	; (8006cac <__libc_init_array+0x38>)
 8006c78:	4c0d      	ldr	r4, [pc, #52]	; (8006cb0 <__libc_init_array+0x3c>)
 8006c7a:	1b64      	subs	r4, r4, r5
 8006c7c:	10a4      	asrs	r4, r4, #2
 8006c7e:	2600      	movs	r6, #0
 8006c80:	42a6      	cmp	r6, r4
 8006c82:	d109      	bne.n	8006c98 <__libc_init_array+0x24>
 8006c84:	4d0b      	ldr	r5, [pc, #44]	; (8006cb4 <__libc_init_array+0x40>)
 8006c86:	4c0c      	ldr	r4, [pc, #48]	; (8006cb8 <__libc_init_array+0x44>)
 8006c88:	f004 fd1c 	bl	800b6c4 <_init>
 8006c8c:	1b64      	subs	r4, r4, r5
 8006c8e:	10a4      	asrs	r4, r4, #2
 8006c90:	2600      	movs	r6, #0
 8006c92:	42a6      	cmp	r6, r4
 8006c94:	d105      	bne.n	8006ca2 <__libc_init_array+0x2e>
 8006c96:	bd70      	pop	{r4, r5, r6, pc}
 8006c98:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c9c:	4798      	blx	r3
 8006c9e:	3601      	adds	r6, #1
 8006ca0:	e7ee      	b.n	8006c80 <__libc_init_array+0xc>
 8006ca2:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ca6:	4798      	blx	r3
 8006ca8:	3601      	adds	r6, #1
 8006caa:	e7f2      	b.n	8006c92 <__libc_init_array+0x1e>
 8006cac:	0800bc6c 	.word	0x0800bc6c
 8006cb0:	0800bc6c 	.word	0x0800bc6c
 8006cb4:	0800bc6c 	.word	0x0800bc6c
 8006cb8:	0800bc70 	.word	0x0800bc70

08006cbc <memcpy>:
 8006cbc:	440a      	add	r2, r1
 8006cbe:	4291      	cmp	r1, r2
 8006cc0:	f100 33ff 	add.w	r3, r0, #4294967295
 8006cc4:	d100      	bne.n	8006cc8 <memcpy+0xc>
 8006cc6:	4770      	bx	lr
 8006cc8:	b510      	push	{r4, lr}
 8006cca:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006cce:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006cd2:	4291      	cmp	r1, r2
 8006cd4:	d1f9      	bne.n	8006cca <memcpy+0xe>
 8006cd6:	bd10      	pop	{r4, pc}

08006cd8 <memset>:
 8006cd8:	4402      	add	r2, r0
 8006cda:	4603      	mov	r3, r0
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d100      	bne.n	8006ce2 <memset+0xa>
 8006ce0:	4770      	bx	lr
 8006ce2:	f803 1b01 	strb.w	r1, [r3], #1
 8006ce6:	e7f9      	b.n	8006cdc <memset+0x4>

08006ce8 <__cvt>:
 8006ce8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006cec:	ec55 4b10 	vmov	r4, r5, d0
 8006cf0:	2d00      	cmp	r5, #0
 8006cf2:	460e      	mov	r6, r1
 8006cf4:	4619      	mov	r1, r3
 8006cf6:	462b      	mov	r3, r5
 8006cf8:	bfbb      	ittet	lt
 8006cfa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006cfe:	461d      	movlt	r5, r3
 8006d00:	2300      	movge	r3, #0
 8006d02:	232d      	movlt	r3, #45	; 0x2d
 8006d04:	700b      	strb	r3, [r1, #0]
 8006d06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006d08:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006d0c:	4691      	mov	r9, r2
 8006d0e:	f023 0820 	bic.w	r8, r3, #32
 8006d12:	bfbc      	itt	lt
 8006d14:	4622      	movlt	r2, r4
 8006d16:	4614      	movlt	r4, r2
 8006d18:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006d1c:	d005      	beq.n	8006d2a <__cvt+0x42>
 8006d1e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006d22:	d100      	bne.n	8006d26 <__cvt+0x3e>
 8006d24:	3601      	adds	r6, #1
 8006d26:	2102      	movs	r1, #2
 8006d28:	e000      	b.n	8006d2c <__cvt+0x44>
 8006d2a:	2103      	movs	r1, #3
 8006d2c:	ab03      	add	r3, sp, #12
 8006d2e:	9301      	str	r3, [sp, #4]
 8006d30:	ab02      	add	r3, sp, #8
 8006d32:	9300      	str	r3, [sp, #0]
 8006d34:	ec45 4b10 	vmov	d0, r4, r5
 8006d38:	4653      	mov	r3, sl
 8006d3a:	4632      	mov	r2, r6
 8006d3c:	f001 fefc 	bl	8008b38 <_dtoa_r>
 8006d40:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006d44:	4607      	mov	r7, r0
 8006d46:	d102      	bne.n	8006d4e <__cvt+0x66>
 8006d48:	f019 0f01 	tst.w	r9, #1
 8006d4c:	d022      	beq.n	8006d94 <__cvt+0xac>
 8006d4e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006d52:	eb07 0906 	add.w	r9, r7, r6
 8006d56:	d110      	bne.n	8006d7a <__cvt+0x92>
 8006d58:	783b      	ldrb	r3, [r7, #0]
 8006d5a:	2b30      	cmp	r3, #48	; 0x30
 8006d5c:	d10a      	bne.n	8006d74 <__cvt+0x8c>
 8006d5e:	2200      	movs	r2, #0
 8006d60:	2300      	movs	r3, #0
 8006d62:	4620      	mov	r0, r4
 8006d64:	4629      	mov	r1, r5
 8006d66:	f7f9 febf 	bl	8000ae8 <__aeabi_dcmpeq>
 8006d6a:	b918      	cbnz	r0, 8006d74 <__cvt+0x8c>
 8006d6c:	f1c6 0601 	rsb	r6, r6, #1
 8006d70:	f8ca 6000 	str.w	r6, [sl]
 8006d74:	f8da 3000 	ldr.w	r3, [sl]
 8006d78:	4499      	add	r9, r3
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	4620      	mov	r0, r4
 8006d80:	4629      	mov	r1, r5
 8006d82:	f7f9 feb1 	bl	8000ae8 <__aeabi_dcmpeq>
 8006d86:	b108      	cbz	r0, 8006d8c <__cvt+0xa4>
 8006d88:	f8cd 900c 	str.w	r9, [sp, #12]
 8006d8c:	2230      	movs	r2, #48	; 0x30
 8006d8e:	9b03      	ldr	r3, [sp, #12]
 8006d90:	454b      	cmp	r3, r9
 8006d92:	d307      	bcc.n	8006da4 <__cvt+0xbc>
 8006d94:	9b03      	ldr	r3, [sp, #12]
 8006d96:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006d98:	1bdb      	subs	r3, r3, r7
 8006d9a:	4638      	mov	r0, r7
 8006d9c:	6013      	str	r3, [r2, #0]
 8006d9e:	b004      	add	sp, #16
 8006da0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006da4:	1c59      	adds	r1, r3, #1
 8006da6:	9103      	str	r1, [sp, #12]
 8006da8:	701a      	strb	r2, [r3, #0]
 8006daa:	e7f0      	b.n	8006d8e <__cvt+0xa6>

08006dac <__exponent>:
 8006dac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006dae:	4603      	mov	r3, r0
 8006db0:	2900      	cmp	r1, #0
 8006db2:	bfb8      	it	lt
 8006db4:	4249      	neglt	r1, r1
 8006db6:	f803 2b02 	strb.w	r2, [r3], #2
 8006dba:	bfb4      	ite	lt
 8006dbc:	222d      	movlt	r2, #45	; 0x2d
 8006dbe:	222b      	movge	r2, #43	; 0x2b
 8006dc0:	2909      	cmp	r1, #9
 8006dc2:	7042      	strb	r2, [r0, #1]
 8006dc4:	dd2a      	ble.n	8006e1c <__exponent+0x70>
 8006dc6:	f10d 0407 	add.w	r4, sp, #7
 8006dca:	46a4      	mov	ip, r4
 8006dcc:	270a      	movs	r7, #10
 8006dce:	46a6      	mov	lr, r4
 8006dd0:	460a      	mov	r2, r1
 8006dd2:	fb91 f6f7 	sdiv	r6, r1, r7
 8006dd6:	fb07 1516 	mls	r5, r7, r6, r1
 8006dda:	3530      	adds	r5, #48	; 0x30
 8006ddc:	2a63      	cmp	r2, #99	; 0x63
 8006dde:	f104 34ff 	add.w	r4, r4, #4294967295
 8006de2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006de6:	4631      	mov	r1, r6
 8006de8:	dcf1      	bgt.n	8006dce <__exponent+0x22>
 8006dea:	3130      	adds	r1, #48	; 0x30
 8006dec:	f1ae 0502 	sub.w	r5, lr, #2
 8006df0:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006df4:	1c44      	adds	r4, r0, #1
 8006df6:	4629      	mov	r1, r5
 8006df8:	4561      	cmp	r1, ip
 8006dfa:	d30a      	bcc.n	8006e12 <__exponent+0x66>
 8006dfc:	f10d 0209 	add.w	r2, sp, #9
 8006e00:	eba2 020e 	sub.w	r2, r2, lr
 8006e04:	4565      	cmp	r5, ip
 8006e06:	bf88      	it	hi
 8006e08:	2200      	movhi	r2, #0
 8006e0a:	4413      	add	r3, r2
 8006e0c:	1a18      	subs	r0, r3, r0
 8006e0e:	b003      	add	sp, #12
 8006e10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e12:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006e16:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006e1a:	e7ed      	b.n	8006df8 <__exponent+0x4c>
 8006e1c:	2330      	movs	r3, #48	; 0x30
 8006e1e:	3130      	adds	r1, #48	; 0x30
 8006e20:	7083      	strb	r3, [r0, #2]
 8006e22:	70c1      	strb	r1, [r0, #3]
 8006e24:	1d03      	adds	r3, r0, #4
 8006e26:	e7f1      	b.n	8006e0c <__exponent+0x60>

08006e28 <_printf_float>:
 8006e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e2c:	ed2d 8b02 	vpush	{d8}
 8006e30:	b08d      	sub	sp, #52	; 0x34
 8006e32:	460c      	mov	r4, r1
 8006e34:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006e38:	4616      	mov	r6, r2
 8006e3a:	461f      	mov	r7, r3
 8006e3c:	4605      	mov	r5, r0
 8006e3e:	f003 f98f 	bl	800a160 <_localeconv_r>
 8006e42:	f8d0 a000 	ldr.w	sl, [r0]
 8006e46:	4650      	mov	r0, sl
 8006e48:	f7f9 f9d2 	bl	80001f0 <strlen>
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	930a      	str	r3, [sp, #40]	; 0x28
 8006e50:	6823      	ldr	r3, [r4, #0]
 8006e52:	9305      	str	r3, [sp, #20]
 8006e54:	f8d8 3000 	ldr.w	r3, [r8]
 8006e58:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006e5c:	3307      	adds	r3, #7
 8006e5e:	f023 0307 	bic.w	r3, r3, #7
 8006e62:	f103 0208 	add.w	r2, r3, #8
 8006e66:	f8c8 2000 	str.w	r2, [r8]
 8006e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e6e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006e72:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006e76:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006e7a:	9307      	str	r3, [sp, #28]
 8006e7c:	f8cd 8018 	str.w	r8, [sp, #24]
 8006e80:	ee08 0a10 	vmov	s16, r0
 8006e84:	4b9f      	ldr	r3, [pc, #636]	; (8007104 <_printf_float+0x2dc>)
 8006e86:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006e8a:	f04f 32ff 	mov.w	r2, #4294967295
 8006e8e:	f7f9 fe5d 	bl	8000b4c <__aeabi_dcmpun>
 8006e92:	bb88      	cbnz	r0, 8006ef8 <_printf_float+0xd0>
 8006e94:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006e98:	4b9a      	ldr	r3, [pc, #616]	; (8007104 <_printf_float+0x2dc>)
 8006e9a:	f04f 32ff 	mov.w	r2, #4294967295
 8006e9e:	f7f9 fe37 	bl	8000b10 <__aeabi_dcmple>
 8006ea2:	bb48      	cbnz	r0, 8006ef8 <_printf_float+0xd0>
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	4640      	mov	r0, r8
 8006eaa:	4649      	mov	r1, r9
 8006eac:	f7f9 fe26 	bl	8000afc <__aeabi_dcmplt>
 8006eb0:	b110      	cbz	r0, 8006eb8 <_printf_float+0x90>
 8006eb2:	232d      	movs	r3, #45	; 0x2d
 8006eb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006eb8:	4b93      	ldr	r3, [pc, #588]	; (8007108 <_printf_float+0x2e0>)
 8006eba:	4894      	ldr	r0, [pc, #592]	; (800710c <_printf_float+0x2e4>)
 8006ebc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006ec0:	bf94      	ite	ls
 8006ec2:	4698      	movls	r8, r3
 8006ec4:	4680      	movhi	r8, r0
 8006ec6:	2303      	movs	r3, #3
 8006ec8:	6123      	str	r3, [r4, #16]
 8006eca:	9b05      	ldr	r3, [sp, #20]
 8006ecc:	f023 0204 	bic.w	r2, r3, #4
 8006ed0:	6022      	str	r2, [r4, #0]
 8006ed2:	f04f 0900 	mov.w	r9, #0
 8006ed6:	9700      	str	r7, [sp, #0]
 8006ed8:	4633      	mov	r3, r6
 8006eda:	aa0b      	add	r2, sp, #44	; 0x2c
 8006edc:	4621      	mov	r1, r4
 8006ede:	4628      	mov	r0, r5
 8006ee0:	f000 f9d8 	bl	8007294 <_printf_common>
 8006ee4:	3001      	adds	r0, #1
 8006ee6:	f040 8090 	bne.w	800700a <_printf_float+0x1e2>
 8006eea:	f04f 30ff 	mov.w	r0, #4294967295
 8006eee:	b00d      	add	sp, #52	; 0x34
 8006ef0:	ecbd 8b02 	vpop	{d8}
 8006ef4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ef8:	4642      	mov	r2, r8
 8006efa:	464b      	mov	r3, r9
 8006efc:	4640      	mov	r0, r8
 8006efe:	4649      	mov	r1, r9
 8006f00:	f7f9 fe24 	bl	8000b4c <__aeabi_dcmpun>
 8006f04:	b140      	cbz	r0, 8006f18 <_printf_float+0xf0>
 8006f06:	464b      	mov	r3, r9
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	bfbc      	itt	lt
 8006f0c:	232d      	movlt	r3, #45	; 0x2d
 8006f0e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006f12:	487f      	ldr	r0, [pc, #508]	; (8007110 <_printf_float+0x2e8>)
 8006f14:	4b7f      	ldr	r3, [pc, #508]	; (8007114 <_printf_float+0x2ec>)
 8006f16:	e7d1      	b.n	8006ebc <_printf_float+0x94>
 8006f18:	6863      	ldr	r3, [r4, #4]
 8006f1a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006f1e:	9206      	str	r2, [sp, #24]
 8006f20:	1c5a      	adds	r2, r3, #1
 8006f22:	d13f      	bne.n	8006fa4 <_printf_float+0x17c>
 8006f24:	2306      	movs	r3, #6
 8006f26:	6063      	str	r3, [r4, #4]
 8006f28:	9b05      	ldr	r3, [sp, #20]
 8006f2a:	6861      	ldr	r1, [r4, #4]
 8006f2c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006f30:	2300      	movs	r3, #0
 8006f32:	9303      	str	r3, [sp, #12]
 8006f34:	ab0a      	add	r3, sp, #40	; 0x28
 8006f36:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006f3a:	ab09      	add	r3, sp, #36	; 0x24
 8006f3c:	ec49 8b10 	vmov	d0, r8, r9
 8006f40:	9300      	str	r3, [sp, #0]
 8006f42:	6022      	str	r2, [r4, #0]
 8006f44:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006f48:	4628      	mov	r0, r5
 8006f4a:	f7ff fecd 	bl	8006ce8 <__cvt>
 8006f4e:	9b06      	ldr	r3, [sp, #24]
 8006f50:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006f52:	2b47      	cmp	r3, #71	; 0x47
 8006f54:	4680      	mov	r8, r0
 8006f56:	d108      	bne.n	8006f6a <_printf_float+0x142>
 8006f58:	1cc8      	adds	r0, r1, #3
 8006f5a:	db02      	blt.n	8006f62 <_printf_float+0x13a>
 8006f5c:	6863      	ldr	r3, [r4, #4]
 8006f5e:	4299      	cmp	r1, r3
 8006f60:	dd41      	ble.n	8006fe6 <_printf_float+0x1be>
 8006f62:	f1ab 0b02 	sub.w	fp, fp, #2
 8006f66:	fa5f fb8b 	uxtb.w	fp, fp
 8006f6a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006f6e:	d820      	bhi.n	8006fb2 <_printf_float+0x18a>
 8006f70:	3901      	subs	r1, #1
 8006f72:	465a      	mov	r2, fp
 8006f74:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006f78:	9109      	str	r1, [sp, #36]	; 0x24
 8006f7a:	f7ff ff17 	bl	8006dac <__exponent>
 8006f7e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006f80:	1813      	adds	r3, r2, r0
 8006f82:	2a01      	cmp	r2, #1
 8006f84:	4681      	mov	r9, r0
 8006f86:	6123      	str	r3, [r4, #16]
 8006f88:	dc02      	bgt.n	8006f90 <_printf_float+0x168>
 8006f8a:	6822      	ldr	r2, [r4, #0]
 8006f8c:	07d2      	lsls	r2, r2, #31
 8006f8e:	d501      	bpl.n	8006f94 <_printf_float+0x16c>
 8006f90:	3301      	adds	r3, #1
 8006f92:	6123      	str	r3, [r4, #16]
 8006f94:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d09c      	beq.n	8006ed6 <_printf_float+0xae>
 8006f9c:	232d      	movs	r3, #45	; 0x2d
 8006f9e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006fa2:	e798      	b.n	8006ed6 <_printf_float+0xae>
 8006fa4:	9a06      	ldr	r2, [sp, #24]
 8006fa6:	2a47      	cmp	r2, #71	; 0x47
 8006fa8:	d1be      	bne.n	8006f28 <_printf_float+0x100>
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d1bc      	bne.n	8006f28 <_printf_float+0x100>
 8006fae:	2301      	movs	r3, #1
 8006fb0:	e7b9      	b.n	8006f26 <_printf_float+0xfe>
 8006fb2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006fb6:	d118      	bne.n	8006fea <_printf_float+0x1c2>
 8006fb8:	2900      	cmp	r1, #0
 8006fba:	6863      	ldr	r3, [r4, #4]
 8006fbc:	dd0b      	ble.n	8006fd6 <_printf_float+0x1ae>
 8006fbe:	6121      	str	r1, [r4, #16]
 8006fc0:	b913      	cbnz	r3, 8006fc8 <_printf_float+0x1a0>
 8006fc2:	6822      	ldr	r2, [r4, #0]
 8006fc4:	07d0      	lsls	r0, r2, #31
 8006fc6:	d502      	bpl.n	8006fce <_printf_float+0x1a6>
 8006fc8:	3301      	adds	r3, #1
 8006fca:	440b      	add	r3, r1
 8006fcc:	6123      	str	r3, [r4, #16]
 8006fce:	65a1      	str	r1, [r4, #88]	; 0x58
 8006fd0:	f04f 0900 	mov.w	r9, #0
 8006fd4:	e7de      	b.n	8006f94 <_printf_float+0x16c>
 8006fd6:	b913      	cbnz	r3, 8006fde <_printf_float+0x1b6>
 8006fd8:	6822      	ldr	r2, [r4, #0]
 8006fda:	07d2      	lsls	r2, r2, #31
 8006fdc:	d501      	bpl.n	8006fe2 <_printf_float+0x1ba>
 8006fde:	3302      	adds	r3, #2
 8006fe0:	e7f4      	b.n	8006fcc <_printf_float+0x1a4>
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	e7f2      	b.n	8006fcc <_printf_float+0x1a4>
 8006fe6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006fea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006fec:	4299      	cmp	r1, r3
 8006fee:	db05      	blt.n	8006ffc <_printf_float+0x1d4>
 8006ff0:	6823      	ldr	r3, [r4, #0]
 8006ff2:	6121      	str	r1, [r4, #16]
 8006ff4:	07d8      	lsls	r0, r3, #31
 8006ff6:	d5ea      	bpl.n	8006fce <_printf_float+0x1a6>
 8006ff8:	1c4b      	adds	r3, r1, #1
 8006ffa:	e7e7      	b.n	8006fcc <_printf_float+0x1a4>
 8006ffc:	2900      	cmp	r1, #0
 8006ffe:	bfd4      	ite	le
 8007000:	f1c1 0202 	rsble	r2, r1, #2
 8007004:	2201      	movgt	r2, #1
 8007006:	4413      	add	r3, r2
 8007008:	e7e0      	b.n	8006fcc <_printf_float+0x1a4>
 800700a:	6823      	ldr	r3, [r4, #0]
 800700c:	055a      	lsls	r2, r3, #21
 800700e:	d407      	bmi.n	8007020 <_printf_float+0x1f8>
 8007010:	6923      	ldr	r3, [r4, #16]
 8007012:	4642      	mov	r2, r8
 8007014:	4631      	mov	r1, r6
 8007016:	4628      	mov	r0, r5
 8007018:	47b8      	blx	r7
 800701a:	3001      	adds	r0, #1
 800701c:	d12c      	bne.n	8007078 <_printf_float+0x250>
 800701e:	e764      	b.n	8006eea <_printf_float+0xc2>
 8007020:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007024:	f240 80e0 	bls.w	80071e8 <_printf_float+0x3c0>
 8007028:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800702c:	2200      	movs	r2, #0
 800702e:	2300      	movs	r3, #0
 8007030:	f7f9 fd5a 	bl	8000ae8 <__aeabi_dcmpeq>
 8007034:	2800      	cmp	r0, #0
 8007036:	d034      	beq.n	80070a2 <_printf_float+0x27a>
 8007038:	4a37      	ldr	r2, [pc, #220]	; (8007118 <_printf_float+0x2f0>)
 800703a:	2301      	movs	r3, #1
 800703c:	4631      	mov	r1, r6
 800703e:	4628      	mov	r0, r5
 8007040:	47b8      	blx	r7
 8007042:	3001      	adds	r0, #1
 8007044:	f43f af51 	beq.w	8006eea <_printf_float+0xc2>
 8007048:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800704c:	429a      	cmp	r2, r3
 800704e:	db02      	blt.n	8007056 <_printf_float+0x22e>
 8007050:	6823      	ldr	r3, [r4, #0]
 8007052:	07d8      	lsls	r0, r3, #31
 8007054:	d510      	bpl.n	8007078 <_printf_float+0x250>
 8007056:	ee18 3a10 	vmov	r3, s16
 800705a:	4652      	mov	r2, sl
 800705c:	4631      	mov	r1, r6
 800705e:	4628      	mov	r0, r5
 8007060:	47b8      	blx	r7
 8007062:	3001      	adds	r0, #1
 8007064:	f43f af41 	beq.w	8006eea <_printf_float+0xc2>
 8007068:	f04f 0800 	mov.w	r8, #0
 800706c:	f104 091a 	add.w	r9, r4, #26
 8007070:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007072:	3b01      	subs	r3, #1
 8007074:	4543      	cmp	r3, r8
 8007076:	dc09      	bgt.n	800708c <_printf_float+0x264>
 8007078:	6823      	ldr	r3, [r4, #0]
 800707a:	079b      	lsls	r3, r3, #30
 800707c:	f100 8105 	bmi.w	800728a <_printf_float+0x462>
 8007080:	68e0      	ldr	r0, [r4, #12]
 8007082:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007084:	4298      	cmp	r0, r3
 8007086:	bfb8      	it	lt
 8007088:	4618      	movlt	r0, r3
 800708a:	e730      	b.n	8006eee <_printf_float+0xc6>
 800708c:	2301      	movs	r3, #1
 800708e:	464a      	mov	r2, r9
 8007090:	4631      	mov	r1, r6
 8007092:	4628      	mov	r0, r5
 8007094:	47b8      	blx	r7
 8007096:	3001      	adds	r0, #1
 8007098:	f43f af27 	beq.w	8006eea <_printf_float+0xc2>
 800709c:	f108 0801 	add.w	r8, r8, #1
 80070a0:	e7e6      	b.n	8007070 <_printf_float+0x248>
 80070a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	dc39      	bgt.n	800711c <_printf_float+0x2f4>
 80070a8:	4a1b      	ldr	r2, [pc, #108]	; (8007118 <_printf_float+0x2f0>)
 80070aa:	2301      	movs	r3, #1
 80070ac:	4631      	mov	r1, r6
 80070ae:	4628      	mov	r0, r5
 80070b0:	47b8      	blx	r7
 80070b2:	3001      	adds	r0, #1
 80070b4:	f43f af19 	beq.w	8006eea <_printf_float+0xc2>
 80070b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80070bc:	4313      	orrs	r3, r2
 80070be:	d102      	bne.n	80070c6 <_printf_float+0x29e>
 80070c0:	6823      	ldr	r3, [r4, #0]
 80070c2:	07d9      	lsls	r1, r3, #31
 80070c4:	d5d8      	bpl.n	8007078 <_printf_float+0x250>
 80070c6:	ee18 3a10 	vmov	r3, s16
 80070ca:	4652      	mov	r2, sl
 80070cc:	4631      	mov	r1, r6
 80070ce:	4628      	mov	r0, r5
 80070d0:	47b8      	blx	r7
 80070d2:	3001      	adds	r0, #1
 80070d4:	f43f af09 	beq.w	8006eea <_printf_float+0xc2>
 80070d8:	f04f 0900 	mov.w	r9, #0
 80070dc:	f104 0a1a 	add.w	sl, r4, #26
 80070e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070e2:	425b      	negs	r3, r3
 80070e4:	454b      	cmp	r3, r9
 80070e6:	dc01      	bgt.n	80070ec <_printf_float+0x2c4>
 80070e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070ea:	e792      	b.n	8007012 <_printf_float+0x1ea>
 80070ec:	2301      	movs	r3, #1
 80070ee:	4652      	mov	r2, sl
 80070f0:	4631      	mov	r1, r6
 80070f2:	4628      	mov	r0, r5
 80070f4:	47b8      	blx	r7
 80070f6:	3001      	adds	r0, #1
 80070f8:	f43f aef7 	beq.w	8006eea <_printf_float+0xc2>
 80070fc:	f109 0901 	add.w	r9, r9, #1
 8007100:	e7ee      	b.n	80070e0 <_printf_float+0x2b8>
 8007102:	bf00      	nop
 8007104:	7fefffff 	.word	0x7fefffff
 8007108:	0800b7b8 	.word	0x0800b7b8
 800710c:	0800b7bc 	.word	0x0800b7bc
 8007110:	0800b7c4 	.word	0x0800b7c4
 8007114:	0800b7c0 	.word	0x0800b7c0
 8007118:	0800b7c8 	.word	0x0800b7c8
 800711c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800711e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007120:	429a      	cmp	r2, r3
 8007122:	bfa8      	it	ge
 8007124:	461a      	movge	r2, r3
 8007126:	2a00      	cmp	r2, #0
 8007128:	4691      	mov	r9, r2
 800712a:	dc37      	bgt.n	800719c <_printf_float+0x374>
 800712c:	f04f 0b00 	mov.w	fp, #0
 8007130:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007134:	f104 021a 	add.w	r2, r4, #26
 8007138:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800713a:	9305      	str	r3, [sp, #20]
 800713c:	eba3 0309 	sub.w	r3, r3, r9
 8007140:	455b      	cmp	r3, fp
 8007142:	dc33      	bgt.n	80071ac <_printf_float+0x384>
 8007144:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007148:	429a      	cmp	r2, r3
 800714a:	db3b      	blt.n	80071c4 <_printf_float+0x39c>
 800714c:	6823      	ldr	r3, [r4, #0]
 800714e:	07da      	lsls	r2, r3, #31
 8007150:	d438      	bmi.n	80071c4 <_printf_float+0x39c>
 8007152:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007154:	9a05      	ldr	r2, [sp, #20]
 8007156:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007158:	1a9a      	subs	r2, r3, r2
 800715a:	eba3 0901 	sub.w	r9, r3, r1
 800715e:	4591      	cmp	r9, r2
 8007160:	bfa8      	it	ge
 8007162:	4691      	movge	r9, r2
 8007164:	f1b9 0f00 	cmp.w	r9, #0
 8007168:	dc35      	bgt.n	80071d6 <_printf_float+0x3ae>
 800716a:	f04f 0800 	mov.w	r8, #0
 800716e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007172:	f104 0a1a 	add.w	sl, r4, #26
 8007176:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800717a:	1a9b      	subs	r3, r3, r2
 800717c:	eba3 0309 	sub.w	r3, r3, r9
 8007180:	4543      	cmp	r3, r8
 8007182:	f77f af79 	ble.w	8007078 <_printf_float+0x250>
 8007186:	2301      	movs	r3, #1
 8007188:	4652      	mov	r2, sl
 800718a:	4631      	mov	r1, r6
 800718c:	4628      	mov	r0, r5
 800718e:	47b8      	blx	r7
 8007190:	3001      	adds	r0, #1
 8007192:	f43f aeaa 	beq.w	8006eea <_printf_float+0xc2>
 8007196:	f108 0801 	add.w	r8, r8, #1
 800719a:	e7ec      	b.n	8007176 <_printf_float+0x34e>
 800719c:	4613      	mov	r3, r2
 800719e:	4631      	mov	r1, r6
 80071a0:	4642      	mov	r2, r8
 80071a2:	4628      	mov	r0, r5
 80071a4:	47b8      	blx	r7
 80071a6:	3001      	adds	r0, #1
 80071a8:	d1c0      	bne.n	800712c <_printf_float+0x304>
 80071aa:	e69e      	b.n	8006eea <_printf_float+0xc2>
 80071ac:	2301      	movs	r3, #1
 80071ae:	4631      	mov	r1, r6
 80071b0:	4628      	mov	r0, r5
 80071b2:	9205      	str	r2, [sp, #20]
 80071b4:	47b8      	blx	r7
 80071b6:	3001      	adds	r0, #1
 80071b8:	f43f ae97 	beq.w	8006eea <_printf_float+0xc2>
 80071bc:	9a05      	ldr	r2, [sp, #20]
 80071be:	f10b 0b01 	add.w	fp, fp, #1
 80071c2:	e7b9      	b.n	8007138 <_printf_float+0x310>
 80071c4:	ee18 3a10 	vmov	r3, s16
 80071c8:	4652      	mov	r2, sl
 80071ca:	4631      	mov	r1, r6
 80071cc:	4628      	mov	r0, r5
 80071ce:	47b8      	blx	r7
 80071d0:	3001      	adds	r0, #1
 80071d2:	d1be      	bne.n	8007152 <_printf_float+0x32a>
 80071d4:	e689      	b.n	8006eea <_printf_float+0xc2>
 80071d6:	9a05      	ldr	r2, [sp, #20]
 80071d8:	464b      	mov	r3, r9
 80071da:	4442      	add	r2, r8
 80071dc:	4631      	mov	r1, r6
 80071de:	4628      	mov	r0, r5
 80071e0:	47b8      	blx	r7
 80071e2:	3001      	adds	r0, #1
 80071e4:	d1c1      	bne.n	800716a <_printf_float+0x342>
 80071e6:	e680      	b.n	8006eea <_printf_float+0xc2>
 80071e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80071ea:	2a01      	cmp	r2, #1
 80071ec:	dc01      	bgt.n	80071f2 <_printf_float+0x3ca>
 80071ee:	07db      	lsls	r3, r3, #31
 80071f0:	d538      	bpl.n	8007264 <_printf_float+0x43c>
 80071f2:	2301      	movs	r3, #1
 80071f4:	4642      	mov	r2, r8
 80071f6:	4631      	mov	r1, r6
 80071f8:	4628      	mov	r0, r5
 80071fa:	47b8      	blx	r7
 80071fc:	3001      	adds	r0, #1
 80071fe:	f43f ae74 	beq.w	8006eea <_printf_float+0xc2>
 8007202:	ee18 3a10 	vmov	r3, s16
 8007206:	4652      	mov	r2, sl
 8007208:	4631      	mov	r1, r6
 800720a:	4628      	mov	r0, r5
 800720c:	47b8      	blx	r7
 800720e:	3001      	adds	r0, #1
 8007210:	f43f ae6b 	beq.w	8006eea <_printf_float+0xc2>
 8007214:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007218:	2200      	movs	r2, #0
 800721a:	2300      	movs	r3, #0
 800721c:	f7f9 fc64 	bl	8000ae8 <__aeabi_dcmpeq>
 8007220:	b9d8      	cbnz	r0, 800725a <_printf_float+0x432>
 8007222:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007224:	f108 0201 	add.w	r2, r8, #1
 8007228:	3b01      	subs	r3, #1
 800722a:	4631      	mov	r1, r6
 800722c:	4628      	mov	r0, r5
 800722e:	47b8      	blx	r7
 8007230:	3001      	adds	r0, #1
 8007232:	d10e      	bne.n	8007252 <_printf_float+0x42a>
 8007234:	e659      	b.n	8006eea <_printf_float+0xc2>
 8007236:	2301      	movs	r3, #1
 8007238:	4652      	mov	r2, sl
 800723a:	4631      	mov	r1, r6
 800723c:	4628      	mov	r0, r5
 800723e:	47b8      	blx	r7
 8007240:	3001      	adds	r0, #1
 8007242:	f43f ae52 	beq.w	8006eea <_printf_float+0xc2>
 8007246:	f108 0801 	add.w	r8, r8, #1
 800724a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800724c:	3b01      	subs	r3, #1
 800724e:	4543      	cmp	r3, r8
 8007250:	dcf1      	bgt.n	8007236 <_printf_float+0x40e>
 8007252:	464b      	mov	r3, r9
 8007254:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007258:	e6dc      	b.n	8007014 <_printf_float+0x1ec>
 800725a:	f04f 0800 	mov.w	r8, #0
 800725e:	f104 0a1a 	add.w	sl, r4, #26
 8007262:	e7f2      	b.n	800724a <_printf_float+0x422>
 8007264:	2301      	movs	r3, #1
 8007266:	4642      	mov	r2, r8
 8007268:	e7df      	b.n	800722a <_printf_float+0x402>
 800726a:	2301      	movs	r3, #1
 800726c:	464a      	mov	r2, r9
 800726e:	4631      	mov	r1, r6
 8007270:	4628      	mov	r0, r5
 8007272:	47b8      	blx	r7
 8007274:	3001      	adds	r0, #1
 8007276:	f43f ae38 	beq.w	8006eea <_printf_float+0xc2>
 800727a:	f108 0801 	add.w	r8, r8, #1
 800727e:	68e3      	ldr	r3, [r4, #12]
 8007280:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007282:	1a5b      	subs	r3, r3, r1
 8007284:	4543      	cmp	r3, r8
 8007286:	dcf0      	bgt.n	800726a <_printf_float+0x442>
 8007288:	e6fa      	b.n	8007080 <_printf_float+0x258>
 800728a:	f04f 0800 	mov.w	r8, #0
 800728e:	f104 0919 	add.w	r9, r4, #25
 8007292:	e7f4      	b.n	800727e <_printf_float+0x456>

08007294 <_printf_common>:
 8007294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007298:	4616      	mov	r6, r2
 800729a:	4699      	mov	r9, r3
 800729c:	688a      	ldr	r2, [r1, #8]
 800729e:	690b      	ldr	r3, [r1, #16]
 80072a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80072a4:	4293      	cmp	r3, r2
 80072a6:	bfb8      	it	lt
 80072a8:	4613      	movlt	r3, r2
 80072aa:	6033      	str	r3, [r6, #0]
 80072ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80072b0:	4607      	mov	r7, r0
 80072b2:	460c      	mov	r4, r1
 80072b4:	b10a      	cbz	r2, 80072ba <_printf_common+0x26>
 80072b6:	3301      	adds	r3, #1
 80072b8:	6033      	str	r3, [r6, #0]
 80072ba:	6823      	ldr	r3, [r4, #0]
 80072bc:	0699      	lsls	r1, r3, #26
 80072be:	bf42      	ittt	mi
 80072c0:	6833      	ldrmi	r3, [r6, #0]
 80072c2:	3302      	addmi	r3, #2
 80072c4:	6033      	strmi	r3, [r6, #0]
 80072c6:	6825      	ldr	r5, [r4, #0]
 80072c8:	f015 0506 	ands.w	r5, r5, #6
 80072cc:	d106      	bne.n	80072dc <_printf_common+0x48>
 80072ce:	f104 0a19 	add.w	sl, r4, #25
 80072d2:	68e3      	ldr	r3, [r4, #12]
 80072d4:	6832      	ldr	r2, [r6, #0]
 80072d6:	1a9b      	subs	r3, r3, r2
 80072d8:	42ab      	cmp	r3, r5
 80072da:	dc26      	bgt.n	800732a <_printf_common+0x96>
 80072dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80072e0:	1e13      	subs	r3, r2, #0
 80072e2:	6822      	ldr	r2, [r4, #0]
 80072e4:	bf18      	it	ne
 80072e6:	2301      	movne	r3, #1
 80072e8:	0692      	lsls	r2, r2, #26
 80072ea:	d42b      	bmi.n	8007344 <_printf_common+0xb0>
 80072ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80072f0:	4649      	mov	r1, r9
 80072f2:	4638      	mov	r0, r7
 80072f4:	47c0      	blx	r8
 80072f6:	3001      	adds	r0, #1
 80072f8:	d01e      	beq.n	8007338 <_printf_common+0xa4>
 80072fa:	6823      	ldr	r3, [r4, #0]
 80072fc:	68e5      	ldr	r5, [r4, #12]
 80072fe:	6832      	ldr	r2, [r6, #0]
 8007300:	f003 0306 	and.w	r3, r3, #6
 8007304:	2b04      	cmp	r3, #4
 8007306:	bf08      	it	eq
 8007308:	1aad      	subeq	r5, r5, r2
 800730a:	68a3      	ldr	r3, [r4, #8]
 800730c:	6922      	ldr	r2, [r4, #16]
 800730e:	bf0c      	ite	eq
 8007310:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007314:	2500      	movne	r5, #0
 8007316:	4293      	cmp	r3, r2
 8007318:	bfc4      	itt	gt
 800731a:	1a9b      	subgt	r3, r3, r2
 800731c:	18ed      	addgt	r5, r5, r3
 800731e:	2600      	movs	r6, #0
 8007320:	341a      	adds	r4, #26
 8007322:	42b5      	cmp	r5, r6
 8007324:	d11a      	bne.n	800735c <_printf_common+0xc8>
 8007326:	2000      	movs	r0, #0
 8007328:	e008      	b.n	800733c <_printf_common+0xa8>
 800732a:	2301      	movs	r3, #1
 800732c:	4652      	mov	r2, sl
 800732e:	4649      	mov	r1, r9
 8007330:	4638      	mov	r0, r7
 8007332:	47c0      	blx	r8
 8007334:	3001      	adds	r0, #1
 8007336:	d103      	bne.n	8007340 <_printf_common+0xac>
 8007338:	f04f 30ff 	mov.w	r0, #4294967295
 800733c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007340:	3501      	adds	r5, #1
 8007342:	e7c6      	b.n	80072d2 <_printf_common+0x3e>
 8007344:	18e1      	adds	r1, r4, r3
 8007346:	1c5a      	adds	r2, r3, #1
 8007348:	2030      	movs	r0, #48	; 0x30
 800734a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800734e:	4422      	add	r2, r4
 8007350:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007354:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007358:	3302      	adds	r3, #2
 800735a:	e7c7      	b.n	80072ec <_printf_common+0x58>
 800735c:	2301      	movs	r3, #1
 800735e:	4622      	mov	r2, r4
 8007360:	4649      	mov	r1, r9
 8007362:	4638      	mov	r0, r7
 8007364:	47c0      	blx	r8
 8007366:	3001      	adds	r0, #1
 8007368:	d0e6      	beq.n	8007338 <_printf_common+0xa4>
 800736a:	3601      	adds	r6, #1
 800736c:	e7d9      	b.n	8007322 <_printf_common+0x8e>
	...

08007370 <_printf_i>:
 8007370:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007374:	7e0f      	ldrb	r7, [r1, #24]
 8007376:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007378:	2f78      	cmp	r7, #120	; 0x78
 800737a:	4691      	mov	r9, r2
 800737c:	4680      	mov	r8, r0
 800737e:	460c      	mov	r4, r1
 8007380:	469a      	mov	sl, r3
 8007382:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007386:	d807      	bhi.n	8007398 <_printf_i+0x28>
 8007388:	2f62      	cmp	r7, #98	; 0x62
 800738a:	d80a      	bhi.n	80073a2 <_printf_i+0x32>
 800738c:	2f00      	cmp	r7, #0
 800738e:	f000 80d8 	beq.w	8007542 <_printf_i+0x1d2>
 8007392:	2f58      	cmp	r7, #88	; 0x58
 8007394:	f000 80a3 	beq.w	80074de <_printf_i+0x16e>
 8007398:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800739c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80073a0:	e03a      	b.n	8007418 <_printf_i+0xa8>
 80073a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80073a6:	2b15      	cmp	r3, #21
 80073a8:	d8f6      	bhi.n	8007398 <_printf_i+0x28>
 80073aa:	a101      	add	r1, pc, #4	; (adr r1, 80073b0 <_printf_i+0x40>)
 80073ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80073b0:	08007409 	.word	0x08007409
 80073b4:	0800741d 	.word	0x0800741d
 80073b8:	08007399 	.word	0x08007399
 80073bc:	08007399 	.word	0x08007399
 80073c0:	08007399 	.word	0x08007399
 80073c4:	08007399 	.word	0x08007399
 80073c8:	0800741d 	.word	0x0800741d
 80073cc:	08007399 	.word	0x08007399
 80073d0:	08007399 	.word	0x08007399
 80073d4:	08007399 	.word	0x08007399
 80073d8:	08007399 	.word	0x08007399
 80073dc:	08007529 	.word	0x08007529
 80073e0:	0800744d 	.word	0x0800744d
 80073e4:	0800750b 	.word	0x0800750b
 80073e8:	08007399 	.word	0x08007399
 80073ec:	08007399 	.word	0x08007399
 80073f0:	0800754b 	.word	0x0800754b
 80073f4:	08007399 	.word	0x08007399
 80073f8:	0800744d 	.word	0x0800744d
 80073fc:	08007399 	.word	0x08007399
 8007400:	08007399 	.word	0x08007399
 8007404:	08007513 	.word	0x08007513
 8007408:	682b      	ldr	r3, [r5, #0]
 800740a:	1d1a      	adds	r2, r3, #4
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	602a      	str	r2, [r5, #0]
 8007410:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007414:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007418:	2301      	movs	r3, #1
 800741a:	e0a3      	b.n	8007564 <_printf_i+0x1f4>
 800741c:	6820      	ldr	r0, [r4, #0]
 800741e:	6829      	ldr	r1, [r5, #0]
 8007420:	0606      	lsls	r6, r0, #24
 8007422:	f101 0304 	add.w	r3, r1, #4
 8007426:	d50a      	bpl.n	800743e <_printf_i+0xce>
 8007428:	680e      	ldr	r6, [r1, #0]
 800742a:	602b      	str	r3, [r5, #0]
 800742c:	2e00      	cmp	r6, #0
 800742e:	da03      	bge.n	8007438 <_printf_i+0xc8>
 8007430:	232d      	movs	r3, #45	; 0x2d
 8007432:	4276      	negs	r6, r6
 8007434:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007438:	485e      	ldr	r0, [pc, #376]	; (80075b4 <_printf_i+0x244>)
 800743a:	230a      	movs	r3, #10
 800743c:	e019      	b.n	8007472 <_printf_i+0x102>
 800743e:	680e      	ldr	r6, [r1, #0]
 8007440:	602b      	str	r3, [r5, #0]
 8007442:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007446:	bf18      	it	ne
 8007448:	b236      	sxthne	r6, r6
 800744a:	e7ef      	b.n	800742c <_printf_i+0xbc>
 800744c:	682b      	ldr	r3, [r5, #0]
 800744e:	6820      	ldr	r0, [r4, #0]
 8007450:	1d19      	adds	r1, r3, #4
 8007452:	6029      	str	r1, [r5, #0]
 8007454:	0601      	lsls	r1, r0, #24
 8007456:	d501      	bpl.n	800745c <_printf_i+0xec>
 8007458:	681e      	ldr	r6, [r3, #0]
 800745a:	e002      	b.n	8007462 <_printf_i+0xf2>
 800745c:	0646      	lsls	r6, r0, #25
 800745e:	d5fb      	bpl.n	8007458 <_printf_i+0xe8>
 8007460:	881e      	ldrh	r6, [r3, #0]
 8007462:	4854      	ldr	r0, [pc, #336]	; (80075b4 <_printf_i+0x244>)
 8007464:	2f6f      	cmp	r7, #111	; 0x6f
 8007466:	bf0c      	ite	eq
 8007468:	2308      	moveq	r3, #8
 800746a:	230a      	movne	r3, #10
 800746c:	2100      	movs	r1, #0
 800746e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007472:	6865      	ldr	r5, [r4, #4]
 8007474:	60a5      	str	r5, [r4, #8]
 8007476:	2d00      	cmp	r5, #0
 8007478:	bfa2      	ittt	ge
 800747a:	6821      	ldrge	r1, [r4, #0]
 800747c:	f021 0104 	bicge.w	r1, r1, #4
 8007480:	6021      	strge	r1, [r4, #0]
 8007482:	b90e      	cbnz	r6, 8007488 <_printf_i+0x118>
 8007484:	2d00      	cmp	r5, #0
 8007486:	d04d      	beq.n	8007524 <_printf_i+0x1b4>
 8007488:	4615      	mov	r5, r2
 800748a:	fbb6 f1f3 	udiv	r1, r6, r3
 800748e:	fb03 6711 	mls	r7, r3, r1, r6
 8007492:	5dc7      	ldrb	r7, [r0, r7]
 8007494:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007498:	4637      	mov	r7, r6
 800749a:	42bb      	cmp	r3, r7
 800749c:	460e      	mov	r6, r1
 800749e:	d9f4      	bls.n	800748a <_printf_i+0x11a>
 80074a0:	2b08      	cmp	r3, #8
 80074a2:	d10b      	bne.n	80074bc <_printf_i+0x14c>
 80074a4:	6823      	ldr	r3, [r4, #0]
 80074a6:	07de      	lsls	r6, r3, #31
 80074a8:	d508      	bpl.n	80074bc <_printf_i+0x14c>
 80074aa:	6923      	ldr	r3, [r4, #16]
 80074ac:	6861      	ldr	r1, [r4, #4]
 80074ae:	4299      	cmp	r1, r3
 80074b0:	bfde      	ittt	le
 80074b2:	2330      	movle	r3, #48	; 0x30
 80074b4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80074b8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80074bc:	1b52      	subs	r2, r2, r5
 80074be:	6122      	str	r2, [r4, #16]
 80074c0:	f8cd a000 	str.w	sl, [sp]
 80074c4:	464b      	mov	r3, r9
 80074c6:	aa03      	add	r2, sp, #12
 80074c8:	4621      	mov	r1, r4
 80074ca:	4640      	mov	r0, r8
 80074cc:	f7ff fee2 	bl	8007294 <_printf_common>
 80074d0:	3001      	adds	r0, #1
 80074d2:	d14c      	bne.n	800756e <_printf_i+0x1fe>
 80074d4:	f04f 30ff 	mov.w	r0, #4294967295
 80074d8:	b004      	add	sp, #16
 80074da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074de:	4835      	ldr	r0, [pc, #212]	; (80075b4 <_printf_i+0x244>)
 80074e0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80074e4:	6829      	ldr	r1, [r5, #0]
 80074e6:	6823      	ldr	r3, [r4, #0]
 80074e8:	f851 6b04 	ldr.w	r6, [r1], #4
 80074ec:	6029      	str	r1, [r5, #0]
 80074ee:	061d      	lsls	r5, r3, #24
 80074f0:	d514      	bpl.n	800751c <_printf_i+0x1ac>
 80074f2:	07df      	lsls	r7, r3, #31
 80074f4:	bf44      	itt	mi
 80074f6:	f043 0320 	orrmi.w	r3, r3, #32
 80074fa:	6023      	strmi	r3, [r4, #0]
 80074fc:	b91e      	cbnz	r6, 8007506 <_printf_i+0x196>
 80074fe:	6823      	ldr	r3, [r4, #0]
 8007500:	f023 0320 	bic.w	r3, r3, #32
 8007504:	6023      	str	r3, [r4, #0]
 8007506:	2310      	movs	r3, #16
 8007508:	e7b0      	b.n	800746c <_printf_i+0xfc>
 800750a:	6823      	ldr	r3, [r4, #0]
 800750c:	f043 0320 	orr.w	r3, r3, #32
 8007510:	6023      	str	r3, [r4, #0]
 8007512:	2378      	movs	r3, #120	; 0x78
 8007514:	4828      	ldr	r0, [pc, #160]	; (80075b8 <_printf_i+0x248>)
 8007516:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800751a:	e7e3      	b.n	80074e4 <_printf_i+0x174>
 800751c:	0659      	lsls	r1, r3, #25
 800751e:	bf48      	it	mi
 8007520:	b2b6      	uxthmi	r6, r6
 8007522:	e7e6      	b.n	80074f2 <_printf_i+0x182>
 8007524:	4615      	mov	r5, r2
 8007526:	e7bb      	b.n	80074a0 <_printf_i+0x130>
 8007528:	682b      	ldr	r3, [r5, #0]
 800752a:	6826      	ldr	r6, [r4, #0]
 800752c:	6961      	ldr	r1, [r4, #20]
 800752e:	1d18      	adds	r0, r3, #4
 8007530:	6028      	str	r0, [r5, #0]
 8007532:	0635      	lsls	r5, r6, #24
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	d501      	bpl.n	800753c <_printf_i+0x1cc>
 8007538:	6019      	str	r1, [r3, #0]
 800753a:	e002      	b.n	8007542 <_printf_i+0x1d2>
 800753c:	0670      	lsls	r0, r6, #25
 800753e:	d5fb      	bpl.n	8007538 <_printf_i+0x1c8>
 8007540:	8019      	strh	r1, [r3, #0]
 8007542:	2300      	movs	r3, #0
 8007544:	6123      	str	r3, [r4, #16]
 8007546:	4615      	mov	r5, r2
 8007548:	e7ba      	b.n	80074c0 <_printf_i+0x150>
 800754a:	682b      	ldr	r3, [r5, #0]
 800754c:	1d1a      	adds	r2, r3, #4
 800754e:	602a      	str	r2, [r5, #0]
 8007550:	681d      	ldr	r5, [r3, #0]
 8007552:	6862      	ldr	r2, [r4, #4]
 8007554:	2100      	movs	r1, #0
 8007556:	4628      	mov	r0, r5
 8007558:	f7f8 fe52 	bl	8000200 <memchr>
 800755c:	b108      	cbz	r0, 8007562 <_printf_i+0x1f2>
 800755e:	1b40      	subs	r0, r0, r5
 8007560:	6060      	str	r0, [r4, #4]
 8007562:	6863      	ldr	r3, [r4, #4]
 8007564:	6123      	str	r3, [r4, #16]
 8007566:	2300      	movs	r3, #0
 8007568:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800756c:	e7a8      	b.n	80074c0 <_printf_i+0x150>
 800756e:	6923      	ldr	r3, [r4, #16]
 8007570:	462a      	mov	r2, r5
 8007572:	4649      	mov	r1, r9
 8007574:	4640      	mov	r0, r8
 8007576:	47d0      	blx	sl
 8007578:	3001      	adds	r0, #1
 800757a:	d0ab      	beq.n	80074d4 <_printf_i+0x164>
 800757c:	6823      	ldr	r3, [r4, #0]
 800757e:	079b      	lsls	r3, r3, #30
 8007580:	d413      	bmi.n	80075aa <_printf_i+0x23a>
 8007582:	68e0      	ldr	r0, [r4, #12]
 8007584:	9b03      	ldr	r3, [sp, #12]
 8007586:	4298      	cmp	r0, r3
 8007588:	bfb8      	it	lt
 800758a:	4618      	movlt	r0, r3
 800758c:	e7a4      	b.n	80074d8 <_printf_i+0x168>
 800758e:	2301      	movs	r3, #1
 8007590:	4632      	mov	r2, r6
 8007592:	4649      	mov	r1, r9
 8007594:	4640      	mov	r0, r8
 8007596:	47d0      	blx	sl
 8007598:	3001      	adds	r0, #1
 800759a:	d09b      	beq.n	80074d4 <_printf_i+0x164>
 800759c:	3501      	adds	r5, #1
 800759e:	68e3      	ldr	r3, [r4, #12]
 80075a0:	9903      	ldr	r1, [sp, #12]
 80075a2:	1a5b      	subs	r3, r3, r1
 80075a4:	42ab      	cmp	r3, r5
 80075a6:	dcf2      	bgt.n	800758e <_printf_i+0x21e>
 80075a8:	e7eb      	b.n	8007582 <_printf_i+0x212>
 80075aa:	2500      	movs	r5, #0
 80075ac:	f104 0619 	add.w	r6, r4, #25
 80075b0:	e7f5      	b.n	800759e <_printf_i+0x22e>
 80075b2:	bf00      	nop
 80075b4:	0800b7ca 	.word	0x0800b7ca
 80075b8:	0800b7db 	.word	0x0800b7db

080075bc <_scanf_float>:
 80075bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075c0:	b087      	sub	sp, #28
 80075c2:	4617      	mov	r7, r2
 80075c4:	9303      	str	r3, [sp, #12]
 80075c6:	688b      	ldr	r3, [r1, #8]
 80075c8:	1e5a      	subs	r2, r3, #1
 80075ca:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80075ce:	bf83      	ittte	hi
 80075d0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80075d4:	195b      	addhi	r3, r3, r5
 80075d6:	9302      	strhi	r3, [sp, #8]
 80075d8:	2300      	movls	r3, #0
 80075da:	bf86      	itte	hi
 80075dc:	f240 135d 	movwhi	r3, #349	; 0x15d
 80075e0:	608b      	strhi	r3, [r1, #8]
 80075e2:	9302      	strls	r3, [sp, #8]
 80075e4:	680b      	ldr	r3, [r1, #0]
 80075e6:	468b      	mov	fp, r1
 80075e8:	2500      	movs	r5, #0
 80075ea:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80075ee:	f84b 3b1c 	str.w	r3, [fp], #28
 80075f2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80075f6:	4680      	mov	r8, r0
 80075f8:	460c      	mov	r4, r1
 80075fa:	465e      	mov	r6, fp
 80075fc:	46aa      	mov	sl, r5
 80075fe:	46a9      	mov	r9, r5
 8007600:	9501      	str	r5, [sp, #4]
 8007602:	68a2      	ldr	r2, [r4, #8]
 8007604:	b152      	cbz	r2, 800761c <_scanf_float+0x60>
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	781b      	ldrb	r3, [r3, #0]
 800760a:	2b4e      	cmp	r3, #78	; 0x4e
 800760c:	d864      	bhi.n	80076d8 <_scanf_float+0x11c>
 800760e:	2b40      	cmp	r3, #64	; 0x40
 8007610:	d83c      	bhi.n	800768c <_scanf_float+0xd0>
 8007612:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8007616:	b2c8      	uxtb	r0, r1
 8007618:	280e      	cmp	r0, #14
 800761a:	d93a      	bls.n	8007692 <_scanf_float+0xd6>
 800761c:	f1b9 0f00 	cmp.w	r9, #0
 8007620:	d003      	beq.n	800762a <_scanf_float+0x6e>
 8007622:	6823      	ldr	r3, [r4, #0]
 8007624:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007628:	6023      	str	r3, [r4, #0]
 800762a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800762e:	f1ba 0f01 	cmp.w	sl, #1
 8007632:	f200 8113 	bhi.w	800785c <_scanf_float+0x2a0>
 8007636:	455e      	cmp	r6, fp
 8007638:	f200 8105 	bhi.w	8007846 <_scanf_float+0x28a>
 800763c:	2501      	movs	r5, #1
 800763e:	4628      	mov	r0, r5
 8007640:	b007      	add	sp, #28
 8007642:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007646:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800764a:	2a0d      	cmp	r2, #13
 800764c:	d8e6      	bhi.n	800761c <_scanf_float+0x60>
 800764e:	a101      	add	r1, pc, #4	; (adr r1, 8007654 <_scanf_float+0x98>)
 8007650:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007654:	08007793 	.word	0x08007793
 8007658:	0800761d 	.word	0x0800761d
 800765c:	0800761d 	.word	0x0800761d
 8007660:	0800761d 	.word	0x0800761d
 8007664:	080077f3 	.word	0x080077f3
 8007668:	080077cb 	.word	0x080077cb
 800766c:	0800761d 	.word	0x0800761d
 8007670:	0800761d 	.word	0x0800761d
 8007674:	080077a1 	.word	0x080077a1
 8007678:	0800761d 	.word	0x0800761d
 800767c:	0800761d 	.word	0x0800761d
 8007680:	0800761d 	.word	0x0800761d
 8007684:	0800761d 	.word	0x0800761d
 8007688:	08007759 	.word	0x08007759
 800768c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8007690:	e7db      	b.n	800764a <_scanf_float+0x8e>
 8007692:	290e      	cmp	r1, #14
 8007694:	d8c2      	bhi.n	800761c <_scanf_float+0x60>
 8007696:	a001      	add	r0, pc, #4	; (adr r0, 800769c <_scanf_float+0xe0>)
 8007698:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800769c:	0800774b 	.word	0x0800774b
 80076a0:	0800761d 	.word	0x0800761d
 80076a4:	0800774b 	.word	0x0800774b
 80076a8:	080077df 	.word	0x080077df
 80076ac:	0800761d 	.word	0x0800761d
 80076b0:	080076f9 	.word	0x080076f9
 80076b4:	08007735 	.word	0x08007735
 80076b8:	08007735 	.word	0x08007735
 80076bc:	08007735 	.word	0x08007735
 80076c0:	08007735 	.word	0x08007735
 80076c4:	08007735 	.word	0x08007735
 80076c8:	08007735 	.word	0x08007735
 80076cc:	08007735 	.word	0x08007735
 80076d0:	08007735 	.word	0x08007735
 80076d4:	08007735 	.word	0x08007735
 80076d8:	2b6e      	cmp	r3, #110	; 0x6e
 80076da:	d809      	bhi.n	80076f0 <_scanf_float+0x134>
 80076dc:	2b60      	cmp	r3, #96	; 0x60
 80076de:	d8b2      	bhi.n	8007646 <_scanf_float+0x8a>
 80076e0:	2b54      	cmp	r3, #84	; 0x54
 80076e2:	d077      	beq.n	80077d4 <_scanf_float+0x218>
 80076e4:	2b59      	cmp	r3, #89	; 0x59
 80076e6:	d199      	bne.n	800761c <_scanf_float+0x60>
 80076e8:	2d07      	cmp	r5, #7
 80076ea:	d197      	bne.n	800761c <_scanf_float+0x60>
 80076ec:	2508      	movs	r5, #8
 80076ee:	e029      	b.n	8007744 <_scanf_float+0x188>
 80076f0:	2b74      	cmp	r3, #116	; 0x74
 80076f2:	d06f      	beq.n	80077d4 <_scanf_float+0x218>
 80076f4:	2b79      	cmp	r3, #121	; 0x79
 80076f6:	e7f6      	b.n	80076e6 <_scanf_float+0x12a>
 80076f8:	6821      	ldr	r1, [r4, #0]
 80076fa:	05c8      	lsls	r0, r1, #23
 80076fc:	d51a      	bpl.n	8007734 <_scanf_float+0x178>
 80076fe:	9b02      	ldr	r3, [sp, #8]
 8007700:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8007704:	6021      	str	r1, [r4, #0]
 8007706:	f109 0901 	add.w	r9, r9, #1
 800770a:	b11b      	cbz	r3, 8007714 <_scanf_float+0x158>
 800770c:	3b01      	subs	r3, #1
 800770e:	3201      	adds	r2, #1
 8007710:	9302      	str	r3, [sp, #8]
 8007712:	60a2      	str	r2, [r4, #8]
 8007714:	68a3      	ldr	r3, [r4, #8]
 8007716:	3b01      	subs	r3, #1
 8007718:	60a3      	str	r3, [r4, #8]
 800771a:	6923      	ldr	r3, [r4, #16]
 800771c:	3301      	adds	r3, #1
 800771e:	6123      	str	r3, [r4, #16]
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	3b01      	subs	r3, #1
 8007724:	2b00      	cmp	r3, #0
 8007726:	607b      	str	r3, [r7, #4]
 8007728:	f340 8084 	ble.w	8007834 <_scanf_float+0x278>
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	3301      	adds	r3, #1
 8007730:	603b      	str	r3, [r7, #0]
 8007732:	e766      	b.n	8007602 <_scanf_float+0x46>
 8007734:	eb1a 0f05 	cmn.w	sl, r5
 8007738:	f47f af70 	bne.w	800761c <_scanf_float+0x60>
 800773c:	6822      	ldr	r2, [r4, #0]
 800773e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8007742:	6022      	str	r2, [r4, #0]
 8007744:	f806 3b01 	strb.w	r3, [r6], #1
 8007748:	e7e4      	b.n	8007714 <_scanf_float+0x158>
 800774a:	6822      	ldr	r2, [r4, #0]
 800774c:	0610      	lsls	r0, r2, #24
 800774e:	f57f af65 	bpl.w	800761c <_scanf_float+0x60>
 8007752:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007756:	e7f4      	b.n	8007742 <_scanf_float+0x186>
 8007758:	f1ba 0f00 	cmp.w	sl, #0
 800775c:	d10e      	bne.n	800777c <_scanf_float+0x1c0>
 800775e:	f1b9 0f00 	cmp.w	r9, #0
 8007762:	d10e      	bne.n	8007782 <_scanf_float+0x1c6>
 8007764:	6822      	ldr	r2, [r4, #0]
 8007766:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800776a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800776e:	d108      	bne.n	8007782 <_scanf_float+0x1c6>
 8007770:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007774:	6022      	str	r2, [r4, #0]
 8007776:	f04f 0a01 	mov.w	sl, #1
 800777a:	e7e3      	b.n	8007744 <_scanf_float+0x188>
 800777c:	f1ba 0f02 	cmp.w	sl, #2
 8007780:	d055      	beq.n	800782e <_scanf_float+0x272>
 8007782:	2d01      	cmp	r5, #1
 8007784:	d002      	beq.n	800778c <_scanf_float+0x1d0>
 8007786:	2d04      	cmp	r5, #4
 8007788:	f47f af48 	bne.w	800761c <_scanf_float+0x60>
 800778c:	3501      	adds	r5, #1
 800778e:	b2ed      	uxtb	r5, r5
 8007790:	e7d8      	b.n	8007744 <_scanf_float+0x188>
 8007792:	f1ba 0f01 	cmp.w	sl, #1
 8007796:	f47f af41 	bne.w	800761c <_scanf_float+0x60>
 800779a:	f04f 0a02 	mov.w	sl, #2
 800779e:	e7d1      	b.n	8007744 <_scanf_float+0x188>
 80077a0:	b97d      	cbnz	r5, 80077c2 <_scanf_float+0x206>
 80077a2:	f1b9 0f00 	cmp.w	r9, #0
 80077a6:	f47f af3c 	bne.w	8007622 <_scanf_float+0x66>
 80077aa:	6822      	ldr	r2, [r4, #0]
 80077ac:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80077b0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80077b4:	f47f af39 	bne.w	800762a <_scanf_float+0x6e>
 80077b8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80077bc:	6022      	str	r2, [r4, #0]
 80077be:	2501      	movs	r5, #1
 80077c0:	e7c0      	b.n	8007744 <_scanf_float+0x188>
 80077c2:	2d03      	cmp	r5, #3
 80077c4:	d0e2      	beq.n	800778c <_scanf_float+0x1d0>
 80077c6:	2d05      	cmp	r5, #5
 80077c8:	e7de      	b.n	8007788 <_scanf_float+0x1cc>
 80077ca:	2d02      	cmp	r5, #2
 80077cc:	f47f af26 	bne.w	800761c <_scanf_float+0x60>
 80077d0:	2503      	movs	r5, #3
 80077d2:	e7b7      	b.n	8007744 <_scanf_float+0x188>
 80077d4:	2d06      	cmp	r5, #6
 80077d6:	f47f af21 	bne.w	800761c <_scanf_float+0x60>
 80077da:	2507      	movs	r5, #7
 80077dc:	e7b2      	b.n	8007744 <_scanf_float+0x188>
 80077de:	6822      	ldr	r2, [r4, #0]
 80077e0:	0591      	lsls	r1, r2, #22
 80077e2:	f57f af1b 	bpl.w	800761c <_scanf_float+0x60>
 80077e6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80077ea:	6022      	str	r2, [r4, #0]
 80077ec:	f8cd 9004 	str.w	r9, [sp, #4]
 80077f0:	e7a8      	b.n	8007744 <_scanf_float+0x188>
 80077f2:	6822      	ldr	r2, [r4, #0]
 80077f4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80077f8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80077fc:	d006      	beq.n	800780c <_scanf_float+0x250>
 80077fe:	0550      	lsls	r0, r2, #21
 8007800:	f57f af0c 	bpl.w	800761c <_scanf_float+0x60>
 8007804:	f1b9 0f00 	cmp.w	r9, #0
 8007808:	f43f af0f 	beq.w	800762a <_scanf_float+0x6e>
 800780c:	0591      	lsls	r1, r2, #22
 800780e:	bf58      	it	pl
 8007810:	9901      	ldrpl	r1, [sp, #4]
 8007812:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007816:	bf58      	it	pl
 8007818:	eba9 0101 	subpl.w	r1, r9, r1
 800781c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8007820:	bf58      	it	pl
 8007822:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007826:	6022      	str	r2, [r4, #0]
 8007828:	f04f 0900 	mov.w	r9, #0
 800782c:	e78a      	b.n	8007744 <_scanf_float+0x188>
 800782e:	f04f 0a03 	mov.w	sl, #3
 8007832:	e787      	b.n	8007744 <_scanf_float+0x188>
 8007834:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007838:	4639      	mov	r1, r7
 800783a:	4640      	mov	r0, r8
 800783c:	4798      	blx	r3
 800783e:	2800      	cmp	r0, #0
 8007840:	f43f aedf 	beq.w	8007602 <_scanf_float+0x46>
 8007844:	e6ea      	b.n	800761c <_scanf_float+0x60>
 8007846:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800784a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800784e:	463a      	mov	r2, r7
 8007850:	4640      	mov	r0, r8
 8007852:	4798      	blx	r3
 8007854:	6923      	ldr	r3, [r4, #16]
 8007856:	3b01      	subs	r3, #1
 8007858:	6123      	str	r3, [r4, #16]
 800785a:	e6ec      	b.n	8007636 <_scanf_float+0x7a>
 800785c:	1e6b      	subs	r3, r5, #1
 800785e:	2b06      	cmp	r3, #6
 8007860:	d825      	bhi.n	80078ae <_scanf_float+0x2f2>
 8007862:	2d02      	cmp	r5, #2
 8007864:	d836      	bhi.n	80078d4 <_scanf_float+0x318>
 8007866:	455e      	cmp	r6, fp
 8007868:	f67f aee8 	bls.w	800763c <_scanf_float+0x80>
 800786c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007870:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007874:	463a      	mov	r2, r7
 8007876:	4640      	mov	r0, r8
 8007878:	4798      	blx	r3
 800787a:	6923      	ldr	r3, [r4, #16]
 800787c:	3b01      	subs	r3, #1
 800787e:	6123      	str	r3, [r4, #16]
 8007880:	e7f1      	b.n	8007866 <_scanf_float+0x2aa>
 8007882:	9802      	ldr	r0, [sp, #8]
 8007884:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007888:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800788c:	9002      	str	r0, [sp, #8]
 800788e:	463a      	mov	r2, r7
 8007890:	4640      	mov	r0, r8
 8007892:	4798      	blx	r3
 8007894:	6923      	ldr	r3, [r4, #16]
 8007896:	3b01      	subs	r3, #1
 8007898:	6123      	str	r3, [r4, #16]
 800789a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800789e:	fa5f fa8a 	uxtb.w	sl, sl
 80078a2:	f1ba 0f02 	cmp.w	sl, #2
 80078a6:	d1ec      	bne.n	8007882 <_scanf_float+0x2c6>
 80078a8:	3d03      	subs	r5, #3
 80078aa:	b2ed      	uxtb	r5, r5
 80078ac:	1b76      	subs	r6, r6, r5
 80078ae:	6823      	ldr	r3, [r4, #0]
 80078b0:	05da      	lsls	r2, r3, #23
 80078b2:	d52f      	bpl.n	8007914 <_scanf_float+0x358>
 80078b4:	055b      	lsls	r3, r3, #21
 80078b6:	d510      	bpl.n	80078da <_scanf_float+0x31e>
 80078b8:	455e      	cmp	r6, fp
 80078ba:	f67f aebf 	bls.w	800763c <_scanf_float+0x80>
 80078be:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80078c2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80078c6:	463a      	mov	r2, r7
 80078c8:	4640      	mov	r0, r8
 80078ca:	4798      	blx	r3
 80078cc:	6923      	ldr	r3, [r4, #16]
 80078ce:	3b01      	subs	r3, #1
 80078d0:	6123      	str	r3, [r4, #16]
 80078d2:	e7f1      	b.n	80078b8 <_scanf_float+0x2fc>
 80078d4:	46aa      	mov	sl, r5
 80078d6:	9602      	str	r6, [sp, #8]
 80078d8:	e7df      	b.n	800789a <_scanf_float+0x2de>
 80078da:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80078de:	6923      	ldr	r3, [r4, #16]
 80078e0:	2965      	cmp	r1, #101	; 0x65
 80078e2:	f103 33ff 	add.w	r3, r3, #4294967295
 80078e6:	f106 35ff 	add.w	r5, r6, #4294967295
 80078ea:	6123      	str	r3, [r4, #16]
 80078ec:	d00c      	beq.n	8007908 <_scanf_float+0x34c>
 80078ee:	2945      	cmp	r1, #69	; 0x45
 80078f0:	d00a      	beq.n	8007908 <_scanf_float+0x34c>
 80078f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80078f6:	463a      	mov	r2, r7
 80078f8:	4640      	mov	r0, r8
 80078fa:	4798      	blx	r3
 80078fc:	6923      	ldr	r3, [r4, #16]
 80078fe:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007902:	3b01      	subs	r3, #1
 8007904:	1eb5      	subs	r5, r6, #2
 8007906:	6123      	str	r3, [r4, #16]
 8007908:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800790c:	463a      	mov	r2, r7
 800790e:	4640      	mov	r0, r8
 8007910:	4798      	blx	r3
 8007912:	462e      	mov	r6, r5
 8007914:	6825      	ldr	r5, [r4, #0]
 8007916:	f015 0510 	ands.w	r5, r5, #16
 800791a:	d159      	bne.n	80079d0 <_scanf_float+0x414>
 800791c:	7035      	strb	r5, [r6, #0]
 800791e:	6823      	ldr	r3, [r4, #0]
 8007920:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007924:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007928:	d11b      	bne.n	8007962 <_scanf_float+0x3a6>
 800792a:	9b01      	ldr	r3, [sp, #4]
 800792c:	454b      	cmp	r3, r9
 800792e:	eba3 0209 	sub.w	r2, r3, r9
 8007932:	d123      	bne.n	800797c <_scanf_float+0x3c0>
 8007934:	2200      	movs	r2, #0
 8007936:	4659      	mov	r1, fp
 8007938:	4640      	mov	r0, r8
 800793a:	f000 ff27 	bl	800878c <_strtod_r>
 800793e:	6822      	ldr	r2, [r4, #0]
 8007940:	9b03      	ldr	r3, [sp, #12]
 8007942:	f012 0f02 	tst.w	r2, #2
 8007946:	ec57 6b10 	vmov	r6, r7, d0
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	d021      	beq.n	8007992 <_scanf_float+0x3d6>
 800794e:	9903      	ldr	r1, [sp, #12]
 8007950:	1d1a      	adds	r2, r3, #4
 8007952:	600a      	str	r2, [r1, #0]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	e9c3 6700 	strd	r6, r7, [r3]
 800795a:	68e3      	ldr	r3, [r4, #12]
 800795c:	3301      	adds	r3, #1
 800795e:	60e3      	str	r3, [r4, #12]
 8007960:	e66d      	b.n	800763e <_scanf_float+0x82>
 8007962:	9b04      	ldr	r3, [sp, #16]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d0e5      	beq.n	8007934 <_scanf_float+0x378>
 8007968:	9905      	ldr	r1, [sp, #20]
 800796a:	230a      	movs	r3, #10
 800796c:	462a      	mov	r2, r5
 800796e:	3101      	adds	r1, #1
 8007970:	4640      	mov	r0, r8
 8007972:	f000 ff93 	bl	800889c <_strtol_r>
 8007976:	9b04      	ldr	r3, [sp, #16]
 8007978:	9e05      	ldr	r6, [sp, #20]
 800797a:	1ac2      	subs	r2, r0, r3
 800797c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8007980:	429e      	cmp	r6, r3
 8007982:	bf28      	it	cs
 8007984:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8007988:	4912      	ldr	r1, [pc, #72]	; (80079d4 <_scanf_float+0x418>)
 800798a:	4630      	mov	r0, r6
 800798c:	f000 f8ba 	bl	8007b04 <siprintf>
 8007990:	e7d0      	b.n	8007934 <_scanf_float+0x378>
 8007992:	9903      	ldr	r1, [sp, #12]
 8007994:	f012 0f04 	tst.w	r2, #4
 8007998:	f103 0204 	add.w	r2, r3, #4
 800799c:	600a      	str	r2, [r1, #0]
 800799e:	d1d9      	bne.n	8007954 <_scanf_float+0x398>
 80079a0:	f8d3 8000 	ldr.w	r8, [r3]
 80079a4:	ee10 2a10 	vmov	r2, s0
 80079a8:	ee10 0a10 	vmov	r0, s0
 80079ac:	463b      	mov	r3, r7
 80079ae:	4639      	mov	r1, r7
 80079b0:	f7f9 f8cc 	bl	8000b4c <__aeabi_dcmpun>
 80079b4:	b128      	cbz	r0, 80079c2 <_scanf_float+0x406>
 80079b6:	4808      	ldr	r0, [pc, #32]	; (80079d8 <_scanf_float+0x41c>)
 80079b8:	f000 f89e 	bl	8007af8 <nanf>
 80079bc:	ed88 0a00 	vstr	s0, [r8]
 80079c0:	e7cb      	b.n	800795a <_scanf_float+0x39e>
 80079c2:	4630      	mov	r0, r6
 80079c4:	4639      	mov	r1, r7
 80079c6:	f7f9 f91f 	bl	8000c08 <__aeabi_d2f>
 80079ca:	f8c8 0000 	str.w	r0, [r8]
 80079ce:	e7c4      	b.n	800795a <_scanf_float+0x39e>
 80079d0:	2500      	movs	r5, #0
 80079d2:	e634      	b.n	800763e <_scanf_float+0x82>
 80079d4:	0800b7ec 	.word	0x0800b7ec
 80079d8:	0800bc60 	.word	0x0800bc60

080079dc <iprintf>:
 80079dc:	b40f      	push	{r0, r1, r2, r3}
 80079de:	4b0a      	ldr	r3, [pc, #40]	; (8007a08 <iprintf+0x2c>)
 80079e0:	b513      	push	{r0, r1, r4, lr}
 80079e2:	681c      	ldr	r4, [r3, #0]
 80079e4:	b124      	cbz	r4, 80079f0 <iprintf+0x14>
 80079e6:	69a3      	ldr	r3, [r4, #24]
 80079e8:	b913      	cbnz	r3, 80079f0 <iprintf+0x14>
 80079ea:	4620      	mov	r0, r4
 80079ec:	f001 ffac 	bl	8009948 <__sinit>
 80079f0:	ab05      	add	r3, sp, #20
 80079f2:	9a04      	ldr	r2, [sp, #16]
 80079f4:	68a1      	ldr	r1, [r4, #8]
 80079f6:	9301      	str	r3, [sp, #4]
 80079f8:	4620      	mov	r0, r4
 80079fa:	f003 fb75 	bl	800b0e8 <_vfiprintf_r>
 80079fe:	b002      	add	sp, #8
 8007a00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a04:	b004      	add	sp, #16
 8007a06:	4770      	bx	lr
 8007a08:	20000078 	.word	0x20000078

08007a0c <_puts_r>:
 8007a0c:	b570      	push	{r4, r5, r6, lr}
 8007a0e:	460e      	mov	r6, r1
 8007a10:	4605      	mov	r5, r0
 8007a12:	b118      	cbz	r0, 8007a1c <_puts_r+0x10>
 8007a14:	6983      	ldr	r3, [r0, #24]
 8007a16:	b90b      	cbnz	r3, 8007a1c <_puts_r+0x10>
 8007a18:	f001 ff96 	bl	8009948 <__sinit>
 8007a1c:	69ab      	ldr	r3, [r5, #24]
 8007a1e:	68ac      	ldr	r4, [r5, #8]
 8007a20:	b913      	cbnz	r3, 8007a28 <_puts_r+0x1c>
 8007a22:	4628      	mov	r0, r5
 8007a24:	f001 ff90 	bl	8009948 <__sinit>
 8007a28:	4b2c      	ldr	r3, [pc, #176]	; (8007adc <_puts_r+0xd0>)
 8007a2a:	429c      	cmp	r4, r3
 8007a2c:	d120      	bne.n	8007a70 <_puts_r+0x64>
 8007a2e:	686c      	ldr	r4, [r5, #4]
 8007a30:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007a32:	07db      	lsls	r3, r3, #31
 8007a34:	d405      	bmi.n	8007a42 <_puts_r+0x36>
 8007a36:	89a3      	ldrh	r3, [r4, #12]
 8007a38:	0598      	lsls	r0, r3, #22
 8007a3a:	d402      	bmi.n	8007a42 <_puts_r+0x36>
 8007a3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007a3e:	f002 fb94 	bl	800a16a <__retarget_lock_acquire_recursive>
 8007a42:	89a3      	ldrh	r3, [r4, #12]
 8007a44:	0719      	lsls	r1, r3, #28
 8007a46:	d51d      	bpl.n	8007a84 <_puts_r+0x78>
 8007a48:	6923      	ldr	r3, [r4, #16]
 8007a4a:	b1db      	cbz	r3, 8007a84 <_puts_r+0x78>
 8007a4c:	3e01      	subs	r6, #1
 8007a4e:	68a3      	ldr	r3, [r4, #8]
 8007a50:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007a54:	3b01      	subs	r3, #1
 8007a56:	60a3      	str	r3, [r4, #8]
 8007a58:	bb39      	cbnz	r1, 8007aaa <_puts_r+0x9e>
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	da38      	bge.n	8007ad0 <_puts_r+0xc4>
 8007a5e:	4622      	mov	r2, r4
 8007a60:	210a      	movs	r1, #10
 8007a62:	4628      	mov	r0, r5
 8007a64:	f000 ff1c 	bl	80088a0 <__swbuf_r>
 8007a68:	3001      	adds	r0, #1
 8007a6a:	d011      	beq.n	8007a90 <_puts_r+0x84>
 8007a6c:	250a      	movs	r5, #10
 8007a6e:	e011      	b.n	8007a94 <_puts_r+0x88>
 8007a70:	4b1b      	ldr	r3, [pc, #108]	; (8007ae0 <_puts_r+0xd4>)
 8007a72:	429c      	cmp	r4, r3
 8007a74:	d101      	bne.n	8007a7a <_puts_r+0x6e>
 8007a76:	68ac      	ldr	r4, [r5, #8]
 8007a78:	e7da      	b.n	8007a30 <_puts_r+0x24>
 8007a7a:	4b1a      	ldr	r3, [pc, #104]	; (8007ae4 <_puts_r+0xd8>)
 8007a7c:	429c      	cmp	r4, r3
 8007a7e:	bf08      	it	eq
 8007a80:	68ec      	ldreq	r4, [r5, #12]
 8007a82:	e7d5      	b.n	8007a30 <_puts_r+0x24>
 8007a84:	4621      	mov	r1, r4
 8007a86:	4628      	mov	r0, r5
 8007a88:	f000 ff5c 	bl	8008944 <__swsetup_r>
 8007a8c:	2800      	cmp	r0, #0
 8007a8e:	d0dd      	beq.n	8007a4c <_puts_r+0x40>
 8007a90:	f04f 35ff 	mov.w	r5, #4294967295
 8007a94:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007a96:	07da      	lsls	r2, r3, #31
 8007a98:	d405      	bmi.n	8007aa6 <_puts_r+0x9a>
 8007a9a:	89a3      	ldrh	r3, [r4, #12]
 8007a9c:	059b      	lsls	r3, r3, #22
 8007a9e:	d402      	bmi.n	8007aa6 <_puts_r+0x9a>
 8007aa0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007aa2:	f002 fb63 	bl	800a16c <__retarget_lock_release_recursive>
 8007aa6:	4628      	mov	r0, r5
 8007aa8:	bd70      	pop	{r4, r5, r6, pc}
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	da04      	bge.n	8007ab8 <_puts_r+0xac>
 8007aae:	69a2      	ldr	r2, [r4, #24]
 8007ab0:	429a      	cmp	r2, r3
 8007ab2:	dc06      	bgt.n	8007ac2 <_puts_r+0xb6>
 8007ab4:	290a      	cmp	r1, #10
 8007ab6:	d004      	beq.n	8007ac2 <_puts_r+0xb6>
 8007ab8:	6823      	ldr	r3, [r4, #0]
 8007aba:	1c5a      	adds	r2, r3, #1
 8007abc:	6022      	str	r2, [r4, #0]
 8007abe:	7019      	strb	r1, [r3, #0]
 8007ac0:	e7c5      	b.n	8007a4e <_puts_r+0x42>
 8007ac2:	4622      	mov	r2, r4
 8007ac4:	4628      	mov	r0, r5
 8007ac6:	f000 feeb 	bl	80088a0 <__swbuf_r>
 8007aca:	3001      	adds	r0, #1
 8007acc:	d1bf      	bne.n	8007a4e <_puts_r+0x42>
 8007ace:	e7df      	b.n	8007a90 <_puts_r+0x84>
 8007ad0:	6823      	ldr	r3, [r4, #0]
 8007ad2:	250a      	movs	r5, #10
 8007ad4:	1c5a      	adds	r2, r3, #1
 8007ad6:	6022      	str	r2, [r4, #0]
 8007ad8:	701d      	strb	r5, [r3, #0]
 8007ada:	e7db      	b.n	8007a94 <_puts_r+0x88>
 8007adc:	0800b9fc 	.word	0x0800b9fc
 8007ae0:	0800ba1c 	.word	0x0800ba1c
 8007ae4:	0800b9dc 	.word	0x0800b9dc

08007ae8 <puts>:
 8007ae8:	4b02      	ldr	r3, [pc, #8]	; (8007af4 <puts+0xc>)
 8007aea:	4601      	mov	r1, r0
 8007aec:	6818      	ldr	r0, [r3, #0]
 8007aee:	f7ff bf8d 	b.w	8007a0c <_puts_r>
 8007af2:	bf00      	nop
 8007af4:	20000078 	.word	0x20000078

08007af8 <nanf>:
 8007af8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007b00 <nanf+0x8>
 8007afc:	4770      	bx	lr
 8007afe:	bf00      	nop
 8007b00:	7fc00000 	.word	0x7fc00000

08007b04 <siprintf>:
 8007b04:	b40e      	push	{r1, r2, r3}
 8007b06:	b500      	push	{lr}
 8007b08:	b09c      	sub	sp, #112	; 0x70
 8007b0a:	ab1d      	add	r3, sp, #116	; 0x74
 8007b0c:	9002      	str	r0, [sp, #8]
 8007b0e:	9006      	str	r0, [sp, #24]
 8007b10:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007b14:	4809      	ldr	r0, [pc, #36]	; (8007b3c <siprintf+0x38>)
 8007b16:	9107      	str	r1, [sp, #28]
 8007b18:	9104      	str	r1, [sp, #16]
 8007b1a:	4909      	ldr	r1, [pc, #36]	; (8007b40 <siprintf+0x3c>)
 8007b1c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b20:	9105      	str	r1, [sp, #20]
 8007b22:	6800      	ldr	r0, [r0, #0]
 8007b24:	9301      	str	r3, [sp, #4]
 8007b26:	a902      	add	r1, sp, #8
 8007b28:	f003 f9b4 	bl	800ae94 <_svfiprintf_r>
 8007b2c:	9b02      	ldr	r3, [sp, #8]
 8007b2e:	2200      	movs	r2, #0
 8007b30:	701a      	strb	r2, [r3, #0]
 8007b32:	b01c      	add	sp, #112	; 0x70
 8007b34:	f85d eb04 	ldr.w	lr, [sp], #4
 8007b38:	b003      	add	sp, #12
 8007b3a:	4770      	bx	lr
 8007b3c:	20000078 	.word	0x20000078
 8007b40:	ffff0208 	.word	0xffff0208

08007b44 <sulp>:
 8007b44:	b570      	push	{r4, r5, r6, lr}
 8007b46:	4604      	mov	r4, r0
 8007b48:	460d      	mov	r5, r1
 8007b4a:	ec45 4b10 	vmov	d0, r4, r5
 8007b4e:	4616      	mov	r6, r2
 8007b50:	f002 fefe 	bl	800a950 <__ulp>
 8007b54:	ec51 0b10 	vmov	r0, r1, d0
 8007b58:	b17e      	cbz	r6, 8007b7a <sulp+0x36>
 8007b5a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007b5e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	dd09      	ble.n	8007b7a <sulp+0x36>
 8007b66:	051b      	lsls	r3, r3, #20
 8007b68:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007b6c:	2400      	movs	r4, #0
 8007b6e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007b72:	4622      	mov	r2, r4
 8007b74:	462b      	mov	r3, r5
 8007b76:	f7f8 fd4f 	bl	8000618 <__aeabi_dmul>
 8007b7a:	bd70      	pop	{r4, r5, r6, pc}
 8007b7c:	0000      	movs	r0, r0
	...

08007b80 <_strtod_l>:
 8007b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b84:	ed2d 8b02 	vpush	{d8}
 8007b88:	b09d      	sub	sp, #116	; 0x74
 8007b8a:	461f      	mov	r7, r3
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	9318      	str	r3, [sp, #96]	; 0x60
 8007b90:	4ba2      	ldr	r3, [pc, #648]	; (8007e1c <_strtod_l+0x29c>)
 8007b92:	9213      	str	r2, [sp, #76]	; 0x4c
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	9305      	str	r3, [sp, #20]
 8007b98:	4604      	mov	r4, r0
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	4688      	mov	r8, r1
 8007b9e:	f7f8 fb27 	bl	80001f0 <strlen>
 8007ba2:	f04f 0a00 	mov.w	sl, #0
 8007ba6:	4605      	mov	r5, r0
 8007ba8:	f04f 0b00 	mov.w	fp, #0
 8007bac:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007bb0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007bb2:	781a      	ldrb	r2, [r3, #0]
 8007bb4:	2a2b      	cmp	r2, #43	; 0x2b
 8007bb6:	d04e      	beq.n	8007c56 <_strtod_l+0xd6>
 8007bb8:	d83b      	bhi.n	8007c32 <_strtod_l+0xb2>
 8007bba:	2a0d      	cmp	r2, #13
 8007bbc:	d834      	bhi.n	8007c28 <_strtod_l+0xa8>
 8007bbe:	2a08      	cmp	r2, #8
 8007bc0:	d834      	bhi.n	8007c2c <_strtod_l+0xac>
 8007bc2:	2a00      	cmp	r2, #0
 8007bc4:	d03e      	beq.n	8007c44 <_strtod_l+0xc4>
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	930a      	str	r3, [sp, #40]	; 0x28
 8007bca:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8007bcc:	7833      	ldrb	r3, [r6, #0]
 8007bce:	2b30      	cmp	r3, #48	; 0x30
 8007bd0:	f040 80b0 	bne.w	8007d34 <_strtod_l+0x1b4>
 8007bd4:	7873      	ldrb	r3, [r6, #1]
 8007bd6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007bda:	2b58      	cmp	r3, #88	; 0x58
 8007bdc:	d168      	bne.n	8007cb0 <_strtod_l+0x130>
 8007bde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007be0:	9301      	str	r3, [sp, #4]
 8007be2:	ab18      	add	r3, sp, #96	; 0x60
 8007be4:	9702      	str	r7, [sp, #8]
 8007be6:	9300      	str	r3, [sp, #0]
 8007be8:	4a8d      	ldr	r2, [pc, #564]	; (8007e20 <_strtod_l+0x2a0>)
 8007bea:	ab19      	add	r3, sp, #100	; 0x64
 8007bec:	a917      	add	r1, sp, #92	; 0x5c
 8007bee:	4620      	mov	r0, r4
 8007bf0:	f001 ffae 	bl	8009b50 <__gethex>
 8007bf4:	f010 0707 	ands.w	r7, r0, #7
 8007bf8:	4605      	mov	r5, r0
 8007bfa:	d005      	beq.n	8007c08 <_strtod_l+0x88>
 8007bfc:	2f06      	cmp	r7, #6
 8007bfe:	d12c      	bne.n	8007c5a <_strtod_l+0xda>
 8007c00:	3601      	adds	r6, #1
 8007c02:	2300      	movs	r3, #0
 8007c04:	9617      	str	r6, [sp, #92]	; 0x5c
 8007c06:	930a      	str	r3, [sp, #40]	; 0x28
 8007c08:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	f040 8590 	bne.w	8008730 <_strtod_l+0xbb0>
 8007c10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c12:	b1eb      	cbz	r3, 8007c50 <_strtod_l+0xd0>
 8007c14:	4652      	mov	r2, sl
 8007c16:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007c1a:	ec43 2b10 	vmov	d0, r2, r3
 8007c1e:	b01d      	add	sp, #116	; 0x74
 8007c20:	ecbd 8b02 	vpop	{d8}
 8007c24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c28:	2a20      	cmp	r2, #32
 8007c2a:	d1cc      	bne.n	8007bc6 <_strtod_l+0x46>
 8007c2c:	3301      	adds	r3, #1
 8007c2e:	9317      	str	r3, [sp, #92]	; 0x5c
 8007c30:	e7be      	b.n	8007bb0 <_strtod_l+0x30>
 8007c32:	2a2d      	cmp	r2, #45	; 0x2d
 8007c34:	d1c7      	bne.n	8007bc6 <_strtod_l+0x46>
 8007c36:	2201      	movs	r2, #1
 8007c38:	920a      	str	r2, [sp, #40]	; 0x28
 8007c3a:	1c5a      	adds	r2, r3, #1
 8007c3c:	9217      	str	r2, [sp, #92]	; 0x5c
 8007c3e:	785b      	ldrb	r3, [r3, #1]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d1c2      	bne.n	8007bca <_strtod_l+0x4a>
 8007c44:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007c46:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	f040 856e 	bne.w	800872c <_strtod_l+0xbac>
 8007c50:	4652      	mov	r2, sl
 8007c52:	465b      	mov	r3, fp
 8007c54:	e7e1      	b.n	8007c1a <_strtod_l+0x9a>
 8007c56:	2200      	movs	r2, #0
 8007c58:	e7ee      	b.n	8007c38 <_strtod_l+0xb8>
 8007c5a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007c5c:	b13a      	cbz	r2, 8007c6e <_strtod_l+0xee>
 8007c5e:	2135      	movs	r1, #53	; 0x35
 8007c60:	a81a      	add	r0, sp, #104	; 0x68
 8007c62:	f002 ff80 	bl	800ab66 <__copybits>
 8007c66:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007c68:	4620      	mov	r0, r4
 8007c6a:	f002 fb3f 	bl	800a2ec <_Bfree>
 8007c6e:	3f01      	subs	r7, #1
 8007c70:	2f04      	cmp	r7, #4
 8007c72:	d806      	bhi.n	8007c82 <_strtod_l+0x102>
 8007c74:	e8df f007 	tbb	[pc, r7]
 8007c78:	1714030a 	.word	0x1714030a
 8007c7c:	0a          	.byte	0x0a
 8007c7d:	00          	.byte	0x00
 8007c7e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8007c82:	0728      	lsls	r0, r5, #28
 8007c84:	d5c0      	bpl.n	8007c08 <_strtod_l+0x88>
 8007c86:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8007c8a:	e7bd      	b.n	8007c08 <_strtod_l+0x88>
 8007c8c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8007c90:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007c92:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007c96:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007c9a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007c9e:	e7f0      	b.n	8007c82 <_strtod_l+0x102>
 8007ca0:	f8df b180 	ldr.w	fp, [pc, #384]	; 8007e24 <_strtod_l+0x2a4>
 8007ca4:	e7ed      	b.n	8007c82 <_strtod_l+0x102>
 8007ca6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8007caa:	f04f 3aff 	mov.w	sl, #4294967295
 8007cae:	e7e8      	b.n	8007c82 <_strtod_l+0x102>
 8007cb0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007cb2:	1c5a      	adds	r2, r3, #1
 8007cb4:	9217      	str	r2, [sp, #92]	; 0x5c
 8007cb6:	785b      	ldrb	r3, [r3, #1]
 8007cb8:	2b30      	cmp	r3, #48	; 0x30
 8007cba:	d0f9      	beq.n	8007cb0 <_strtod_l+0x130>
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d0a3      	beq.n	8007c08 <_strtod_l+0x88>
 8007cc0:	2301      	movs	r3, #1
 8007cc2:	f04f 0900 	mov.w	r9, #0
 8007cc6:	9304      	str	r3, [sp, #16]
 8007cc8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007cca:	9308      	str	r3, [sp, #32]
 8007ccc:	f8cd 901c 	str.w	r9, [sp, #28]
 8007cd0:	464f      	mov	r7, r9
 8007cd2:	220a      	movs	r2, #10
 8007cd4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8007cd6:	7806      	ldrb	r6, [r0, #0]
 8007cd8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8007cdc:	b2d9      	uxtb	r1, r3
 8007cde:	2909      	cmp	r1, #9
 8007ce0:	d92a      	bls.n	8007d38 <_strtod_l+0x1b8>
 8007ce2:	9905      	ldr	r1, [sp, #20]
 8007ce4:	462a      	mov	r2, r5
 8007ce6:	f003 fb8a 	bl	800b3fe <strncmp>
 8007cea:	b398      	cbz	r0, 8007d54 <_strtod_l+0x1d4>
 8007cec:	2000      	movs	r0, #0
 8007cee:	4632      	mov	r2, r6
 8007cf0:	463d      	mov	r5, r7
 8007cf2:	9005      	str	r0, [sp, #20]
 8007cf4:	4603      	mov	r3, r0
 8007cf6:	2a65      	cmp	r2, #101	; 0x65
 8007cf8:	d001      	beq.n	8007cfe <_strtod_l+0x17e>
 8007cfa:	2a45      	cmp	r2, #69	; 0x45
 8007cfc:	d118      	bne.n	8007d30 <_strtod_l+0x1b0>
 8007cfe:	b91d      	cbnz	r5, 8007d08 <_strtod_l+0x188>
 8007d00:	9a04      	ldr	r2, [sp, #16]
 8007d02:	4302      	orrs	r2, r0
 8007d04:	d09e      	beq.n	8007c44 <_strtod_l+0xc4>
 8007d06:	2500      	movs	r5, #0
 8007d08:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8007d0c:	f108 0201 	add.w	r2, r8, #1
 8007d10:	9217      	str	r2, [sp, #92]	; 0x5c
 8007d12:	f898 2001 	ldrb.w	r2, [r8, #1]
 8007d16:	2a2b      	cmp	r2, #43	; 0x2b
 8007d18:	d075      	beq.n	8007e06 <_strtod_l+0x286>
 8007d1a:	2a2d      	cmp	r2, #45	; 0x2d
 8007d1c:	d07b      	beq.n	8007e16 <_strtod_l+0x296>
 8007d1e:	f04f 0c00 	mov.w	ip, #0
 8007d22:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007d26:	2909      	cmp	r1, #9
 8007d28:	f240 8082 	bls.w	8007e30 <_strtod_l+0x2b0>
 8007d2c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007d30:	2600      	movs	r6, #0
 8007d32:	e09d      	b.n	8007e70 <_strtod_l+0x2f0>
 8007d34:	2300      	movs	r3, #0
 8007d36:	e7c4      	b.n	8007cc2 <_strtod_l+0x142>
 8007d38:	2f08      	cmp	r7, #8
 8007d3a:	bfd8      	it	le
 8007d3c:	9907      	ldrle	r1, [sp, #28]
 8007d3e:	f100 0001 	add.w	r0, r0, #1
 8007d42:	bfda      	itte	le
 8007d44:	fb02 3301 	mlale	r3, r2, r1, r3
 8007d48:	9307      	strle	r3, [sp, #28]
 8007d4a:	fb02 3909 	mlagt	r9, r2, r9, r3
 8007d4e:	3701      	adds	r7, #1
 8007d50:	9017      	str	r0, [sp, #92]	; 0x5c
 8007d52:	e7bf      	b.n	8007cd4 <_strtod_l+0x154>
 8007d54:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007d56:	195a      	adds	r2, r3, r5
 8007d58:	9217      	str	r2, [sp, #92]	; 0x5c
 8007d5a:	5d5a      	ldrb	r2, [r3, r5]
 8007d5c:	2f00      	cmp	r7, #0
 8007d5e:	d037      	beq.n	8007dd0 <_strtod_l+0x250>
 8007d60:	9005      	str	r0, [sp, #20]
 8007d62:	463d      	mov	r5, r7
 8007d64:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8007d68:	2b09      	cmp	r3, #9
 8007d6a:	d912      	bls.n	8007d92 <_strtod_l+0x212>
 8007d6c:	2301      	movs	r3, #1
 8007d6e:	e7c2      	b.n	8007cf6 <_strtod_l+0x176>
 8007d70:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007d72:	1c5a      	adds	r2, r3, #1
 8007d74:	9217      	str	r2, [sp, #92]	; 0x5c
 8007d76:	785a      	ldrb	r2, [r3, #1]
 8007d78:	3001      	adds	r0, #1
 8007d7a:	2a30      	cmp	r2, #48	; 0x30
 8007d7c:	d0f8      	beq.n	8007d70 <_strtod_l+0x1f0>
 8007d7e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8007d82:	2b08      	cmp	r3, #8
 8007d84:	f200 84d9 	bhi.w	800873a <_strtod_l+0xbba>
 8007d88:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007d8a:	9005      	str	r0, [sp, #20]
 8007d8c:	2000      	movs	r0, #0
 8007d8e:	9308      	str	r3, [sp, #32]
 8007d90:	4605      	mov	r5, r0
 8007d92:	3a30      	subs	r2, #48	; 0x30
 8007d94:	f100 0301 	add.w	r3, r0, #1
 8007d98:	d014      	beq.n	8007dc4 <_strtod_l+0x244>
 8007d9a:	9905      	ldr	r1, [sp, #20]
 8007d9c:	4419      	add	r1, r3
 8007d9e:	9105      	str	r1, [sp, #20]
 8007da0:	462b      	mov	r3, r5
 8007da2:	eb00 0e05 	add.w	lr, r0, r5
 8007da6:	210a      	movs	r1, #10
 8007da8:	4573      	cmp	r3, lr
 8007daa:	d113      	bne.n	8007dd4 <_strtod_l+0x254>
 8007dac:	182b      	adds	r3, r5, r0
 8007dae:	2b08      	cmp	r3, #8
 8007db0:	f105 0501 	add.w	r5, r5, #1
 8007db4:	4405      	add	r5, r0
 8007db6:	dc1c      	bgt.n	8007df2 <_strtod_l+0x272>
 8007db8:	9907      	ldr	r1, [sp, #28]
 8007dba:	230a      	movs	r3, #10
 8007dbc:	fb03 2301 	mla	r3, r3, r1, r2
 8007dc0:	9307      	str	r3, [sp, #28]
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007dc6:	1c51      	adds	r1, r2, #1
 8007dc8:	9117      	str	r1, [sp, #92]	; 0x5c
 8007dca:	7852      	ldrb	r2, [r2, #1]
 8007dcc:	4618      	mov	r0, r3
 8007dce:	e7c9      	b.n	8007d64 <_strtod_l+0x1e4>
 8007dd0:	4638      	mov	r0, r7
 8007dd2:	e7d2      	b.n	8007d7a <_strtod_l+0x1fa>
 8007dd4:	2b08      	cmp	r3, #8
 8007dd6:	dc04      	bgt.n	8007de2 <_strtod_l+0x262>
 8007dd8:	9e07      	ldr	r6, [sp, #28]
 8007dda:	434e      	muls	r6, r1
 8007ddc:	9607      	str	r6, [sp, #28]
 8007dde:	3301      	adds	r3, #1
 8007de0:	e7e2      	b.n	8007da8 <_strtod_l+0x228>
 8007de2:	f103 0c01 	add.w	ip, r3, #1
 8007de6:	f1bc 0f10 	cmp.w	ip, #16
 8007dea:	bfd8      	it	le
 8007dec:	fb01 f909 	mulle.w	r9, r1, r9
 8007df0:	e7f5      	b.n	8007dde <_strtod_l+0x25e>
 8007df2:	2d10      	cmp	r5, #16
 8007df4:	bfdc      	itt	le
 8007df6:	230a      	movle	r3, #10
 8007df8:	fb03 2909 	mlale	r9, r3, r9, r2
 8007dfc:	e7e1      	b.n	8007dc2 <_strtod_l+0x242>
 8007dfe:	2300      	movs	r3, #0
 8007e00:	9305      	str	r3, [sp, #20]
 8007e02:	2301      	movs	r3, #1
 8007e04:	e77c      	b.n	8007d00 <_strtod_l+0x180>
 8007e06:	f04f 0c00 	mov.w	ip, #0
 8007e0a:	f108 0202 	add.w	r2, r8, #2
 8007e0e:	9217      	str	r2, [sp, #92]	; 0x5c
 8007e10:	f898 2002 	ldrb.w	r2, [r8, #2]
 8007e14:	e785      	b.n	8007d22 <_strtod_l+0x1a2>
 8007e16:	f04f 0c01 	mov.w	ip, #1
 8007e1a:	e7f6      	b.n	8007e0a <_strtod_l+0x28a>
 8007e1c:	0800baa4 	.word	0x0800baa4
 8007e20:	0800b7f4 	.word	0x0800b7f4
 8007e24:	7ff00000 	.word	0x7ff00000
 8007e28:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007e2a:	1c51      	adds	r1, r2, #1
 8007e2c:	9117      	str	r1, [sp, #92]	; 0x5c
 8007e2e:	7852      	ldrb	r2, [r2, #1]
 8007e30:	2a30      	cmp	r2, #48	; 0x30
 8007e32:	d0f9      	beq.n	8007e28 <_strtod_l+0x2a8>
 8007e34:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007e38:	2908      	cmp	r1, #8
 8007e3a:	f63f af79 	bhi.w	8007d30 <_strtod_l+0x1b0>
 8007e3e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8007e42:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007e44:	9206      	str	r2, [sp, #24]
 8007e46:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007e48:	1c51      	adds	r1, r2, #1
 8007e4a:	9117      	str	r1, [sp, #92]	; 0x5c
 8007e4c:	7852      	ldrb	r2, [r2, #1]
 8007e4e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8007e52:	2e09      	cmp	r6, #9
 8007e54:	d937      	bls.n	8007ec6 <_strtod_l+0x346>
 8007e56:	9e06      	ldr	r6, [sp, #24]
 8007e58:	1b89      	subs	r1, r1, r6
 8007e5a:	2908      	cmp	r1, #8
 8007e5c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8007e60:	dc02      	bgt.n	8007e68 <_strtod_l+0x2e8>
 8007e62:	4576      	cmp	r6, lr
 8007e64:	bfa8      	it	ge
 8007e66:	4676      	movge	r6, lr
 8007e68:	f1bc 0f00 	cmp.w	ip, #0
 8007e6c:	d000      	beq.n	8007e70 <_strtod_l+0x2f0>
 8007e6e:	4276      	negs	r6, r6
 8007e70:	2d00      	cmp	r5, #0
 8007e72:	d14d      	bne.n	8007f10 <_strtod_l+0x390>
 8007e74:	9904      	ldr	r1, [sp, #16]
 8007e76:	4301      	orrs	r1, r0
 8007e78:	f47f aec6 	bne.w	8007c08 <_strtod_l+0x88>
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	f47f aee1 	bne.w	8007c44 <_strtod_l+0xc4>
 8007e82:	2a69      	cmp	r2, #105	; 0x69
 8007e84:	d027      	beq.n	8007ed6 <_strtod_l+0x356>
 8007e86:	dc24      	bgt.n	8007ed2 <_strtod_l+0x352>
 8007e88:	2a49      	cmp	r2, #73	; 0x49
 8007e8a:	d024      	beq.n	8007ed6 <_strtod_l+0x356>
 8007e8c:	2a4e      	cmp	r2, #78	; 0x4e
 8007e8e:	f47f aed9 	bne.w	8007c44 <_strtod_l+0xc4>
 8007e92:	499f      	ldr	r1, [pc, #636]	; (8008110 <_strtod_l+0x590>)
 8007e94:	a817      	add	r0, sp, #92	; 0x5c
 8007e96:	f002 f8b3 	bl	800a000 <__match>
 8007e9a:	2800      	cmp	r0, #0
 8007e9c:	f43f aed2 	beq.w	8007c44 <_strtod_l+0xc4>
 8007ea0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007ea2:	781b      	ldrb	r3, [r3, #0]
 8007ea4:	2b28      	cmp	r3, #40	; 0x28
 8007ea6:	d12d      	bne.n	8007f04 <_strtod_l+0x384>
 8007ea8:	499a      	ldr	r1, [pc, #616]	; (8008114 <_strtod_l+0x594>)
 8007eaa:	aa1a      	add	r2, sp, #104	; 0x68
 8007eac:	a817      	add	r0, sp, #92	; 0x5c
 8007eae:	f002 f8bb 	bl	800a028 <__hexnan>
 8007eb2:	2805      	cmp	r0, #5
 8007eb4:	d126      	bne.n	8007f04 <_strtod_l+0x384>
 8007eb6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007eb8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8007ebc:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8007ec0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8007ec4:	e6a0      	b.n	8007c08 <_strtod_l+0x88>
 8007ec6:	210a      	movs	r1, #10
 8007ec8:	fb01 2e0e 	mla	lr, r1, lr, r2
 8007ecc:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8007ed0:	e7b9      	b.n	8007e46 <_strtod_l+0x2c6>
 8007ed2:	2a6e      	cmp	r2, #110	; 0x6e
 8007ed4:	e7db      	b.n	8007e8e <_strtod_l+0x30e>
 8007ed6:	4990      	ldr	r1, [pc, #576]	; (8008118 <_strtod_l+0x598>)
 8007ed8:	a817      	add	r0, sp, #92	; 0x5c
 8007eda:	f002 f891 	bl	800a000 <__match>
 8007ede:	2800      	cmp	r0, #0
 8007ee0:	f43f aeb0 	beq.w	8007c44 <_strtod_l+0xc4>
 8007ee4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007ee6:	498d      	ldr	r1, [pc, #564]	; (800811c <_strtod_l+0x59c>)
 8007ee8:	3b01      	subs	r3, #1
 8007eea:	a817      	add	r0, sp, #92	; 0x5c
 8007eec:	9317      	str	r3, [sp, #92]	; 0x5c
 8007eee:	f002 f887 	bl	800a000 <__match>
 8007ef2:	b910      	cbnz	r0, 8007efa <_strtod_l+0x37a>
 8007ef4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007ef6:	3301      	adds	r3, #1
 8007ef8:	9317      	str	r3, [sp, #92]	; 0x5c
 8007efa:	f8df b230 	ldr.w	fp, [pc, #560]	; 800812c <_strtod_l+0x5ac>
 8007efe:	f04f 0a00 	mov.w	sl, #0
 8007f02:	e681      	b.n	8007c08 <_strtod_l+0x88>
 8007f04:	4886      	ldr	r0, [pc, #536]	; (8008120 <_strtod_l+0x5a0>)
 8007f06:	f003 fa1f 	bl	800b348 <nan>
 8007f0a:	ec5b ab10 	vmov	sl, fp, d0
 8007f0e:	e67b      	b.n	8007c08 <_strtod_l+0x88>
 8007f10:	9b05      	ldr	r3, [sp, #20]
 8007f12:	9807      	ldr	r0, [sp, #28]
 8007f14:	1af3      	subs	r3, r6, r3
 8007f16:	2f00      	cmp	r7, #0
 8007f18:	bf08      	it	eq
 8007f1a:	462f      	moveq	r7, r5
 8007f1c:	2d10      	cmp	r5, #16
 8007f1e:	9306      	str	r3, [sp, #24]
 8007f20:	46a8      	mov	r8, r5
 8007f22:	bfa8      	it	ge
 8007f24:	f04f 0810 	movge.w	r8, #16
 8007f28:	f7f8 fafc 	bl	8000524 <__aeabi_ui2d>
 8007f2c:	2d09      	cmp	r5, #9
 8007f2e:	4682      	mov	sl, r0
 8007f30:	468b      	mov	fp, r1
 8007f32:	dd13      	ble.n	8007f5c <_strtod_l+0x3dc>
 8007f34:	4b7b      	ldr	r3, [pc, #492]	; (8008124 <_strtod_l+0x5a4>)
 8007f36:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8007f3a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007f3e:	f7f8 fb6b 	bl	8000618 <__aeabi_dmul>
 8007f42:	4682      	mov	sl, r0
 8007f44:	4648      	mov	r0, r9
 8007f46:	468b      	mov	fp, r1
 8007f48:	f7f8 faec 	bl	8000524 <__aeabi_ui2d>
 8007f4c:	4602      	mov	r2, r0
 8007f4e:	460b      	mov	r3, r1
 8007f50:	4650      	mov	r0, sl
 8007f52:	4659      	mov	r1, fp
 8007f54:	f7f8 f9aa 	bl	80002ac <__adddf3>
 8007f58:	4682      	mov	sl, r0
 8007f5a:	468b      	mov	fp, r1
 8007f5c:	2d0f      	cmp	r5, #15
 8007f5e:	dc38      	bgt.n	8007fd2 <_strtod_l+0x452>
 8007f60:	9b06      	ldr	r3, [sp, #24]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	f43f ae50 	beq.w	8007c08 <_strtod_l+0x88>
 8007f68:	dd24      	ble.n	8007fb4 <_strtod_l+0x434>
 8007f6a:	2b16      	cmp	r3, #22
 8007f6c:	dc0b      	bgt.n	8007f86 <_strtod_l+0x406>
 8007f6e:	496d      	ldr	r1, [pc, #436]	; (8008124 <_strtod_l+0x5a4>)
 8007f70:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007f74:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f78:	4652      	mov	r2, sl
 8007f7a:	465b      	mov	r3, fp
 8007f7c:	f7f8 fb4c 	bl	8000618 <__aeabi_dmul>
 8007f80:	4682      	mov	sl, r0
 8007f82:	468b      	mov	fp, r1
 8007f84:	e640      	b.n	8007c08 <_strtod_l+0x88>
 8007f86:	9a06      	ldr	r2, [sp, #24]
 8007f88:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8007f8c:	4293      	cmp	r3, r2
 8007f8e:	db20      	blt.n	8007fd2 <_strtod_l+0x452>
 8007f90:	4c64      	ldr	r4, [pc, #400]	; (8008124 <_strtod_l+0x5a4>)
 8007f92:	f1c5 050f 	rsb	r5, r5, #15
 8007f96:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007f9a:	4652      	mov	r2, sl
 8007f9c:	465b      	mov	r3, fp
 8007f9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007fa2:	f7f8 fb39 	bl	8000618 <__aeabi_dmul>
 8007fa6:	9b06      	ldr	r3, [sp, #24]
 8007fa8:	1b5d      	subs	r5, r3, r5
 8007faa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007fae:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007fb2:	e7e3      	b.n	8007f7c <_strtod_l+0x3fc>
 8007fb4:	9b06      	ldr	r3, [sp, #24]
 8007fb6:	3316      	adds	r3, #22
 8007fb8:	db0b      	blt.n	8007fd2 <_strtod_l+0x452>
 8007fba:	9b05      	ldr	r3, [sp, #20]
 8007fbc:	1b9e      	subs	r6, r3, r6
 8007fbe:	4b59      	ldr	r3, [pc, #356]	; (8008124 <_strtod_l+0x5a4>)
 8007fc0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8007fc4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007fc8:	4650      	mov	r0, sl
 8007fca:	4659      	mov	r1, fp
 8007fcc:	f7f8 fc4e 	bl	800086c <__aeabi_ddiv>
 8007fd0:	e7d6      	b.n	8007f80 <_strtod_l+0x400>
 8007fd2:	9b06      	ldr	r3, [sp, #24]
 8007fd4:	eba5 0808 	sub.w	r8, r5, r8
 8007fd8:	4498      	add	r8, r3
 8007fda:	f1b8 0f00 	cmp.w	r8, #0
 8007fde:	dd74      	ble.n	80080ca <_strtod_l+0x54a>
 8007fe0:	f018 030f 	ands.w	r3, r8, #15
 8007fe4:	d00a      	beq.n	8007ffc <_strtod_l+0x47c>
 8007fe6:	494f      	ldr	r1, [pc, #316]	; (8008124 <_strtod_l+0x5a4>)
 8007fe8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007fec:	4652      	mov	r2, sl
 8007fee:	465b      	mov	r3, fp
 8007ff0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007ff4:	f7f8 fb10 	bl	8000618 <__aeabi_dmul>
 8007ff8:	4682      	mov	sl, r0
 8007ffa:	468b      	mov	fp, r1
 8007ffc:	f038 080f 	bics.w	r8, r8, #15
 8008000:	d04f      	beq.n	80080a2 <_strtod_l+0x522>
 8008002:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8008006:	dd22      	ble.n	800804e <_strtod_l+0x4ce>
 8008008:	2500      	movs	r5, #0
 800800a:	462e      	mov	r6, r5
 800800c:	9507      	str	r5, [sp, #28]
 800800e:	9505      	str	r5, [sp, #20]
 8008010:	2322      	movs	r3, #34	; 0x22
 8008012:	f8df b118 	ldr.w	fp, [pc, #280]	; 800812c <_strtod_l+0x5ac>
 8008016:	6023      	str	r3, [r4, #0]
 8008018:	f04f 0a00 	mov.w	sl, #0
 800801c:	9b07      	ldr	r3, [sp, #28]
 800801e:	2b00      	cmp	r3, #0
 8008020:	f43f adf2 	beq.w	8007c08 <_strtod_l+0x88>
 8008024:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008026:	4620      	mov	r0, r4
 8008028:	f002 f960 	bl	800a2ec <_Bfree>
 800802c:	9905      	ldr	r1, [sp, #20]
 800802e:	4620      	mov	r0, r4
 8008030:	f002 f95c 	bl	800a2ec <_Bfree>
 8008034:	4631      	mov	r1, r6
 8008036:	4620      	mov	r0, r4
 8008038:	f002 f958 	bl	800a2ec <_Bfree>
 800803c:	9907      	ldr	r1, [sp, #28]
 800803e:	4620      	mov	r0, r4
 8008040:	f002 f954 	bl	800a2ec <_Bfree>
 8008044:	4629      	mov	r1, r5
 8008046:	4620      	mov	r0, r4
 8008048:	f002 f950 	bl	800a2ec <_Bfree>
 800804c:	e5dc      	b.n	8007c08 <_strtod_l+0x88>
 800804e:	4b36      	ldr	r3, [pc, #216]	; (8008128 <_strtod_l+0x5a8>)
 8008050:	9304      	str	r3, [sp, #16]
 8008052:	2300      	movs	r3, #0
 8008054:	ea4f 1828 	mov.w	r8, r8, asr #4
 8008058:	4650      	mov	r0, sl
 800805a:	4659      	mov	r1, fp
 800805c:	4699      	mov	r9, r3
 800805e:	f1b8 0f01 	cmp.w	r8, #1
 8008062:	dc21      	bgt.n	80080a8 <_strtod_l+0x528>
 8008064:	b10b      	cbz	r3, 800806a <_strtod_l+0x4ea>
 8008066:	4682      	mov	sl, r0
 8008068:	468b      	mov	fp, r1
 800806a:	4b2f      	ldr	r3, [pc, #188]	; (8008128 <_strtod_l+0x5a8>)
 800806c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8008070:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8008074:	4652      	mov	r2, sl
 8008076:	465b      	mov	r3, fp
 8008078:	e9d9 0100 	ldrd	r0, r1, [r9]
 800807c:	f7f8 facc 	bl	8000618 <__aeabi_dmul>
 8008080:	4b2a      	ldr	r3, [pc, #168]	; (800812c <_strtod_l+0x5ac>)
 8008082:	460a      	mov	r2, r1
 8008084:	400b      	ands	r3, r1
 8008086:	492a      	ldr	r1, [pc, #168]	; (8008130 <_strtod_l+0x5b0>)
 8008088:	428b      	cmp	r3, r1
 800808a:	4682      	mov	sl, r0
 800808c:	d8bc      	bhi.n	8008008 <_strtod_l+0x488>
 800808e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008092:	428b      	cmp	r3, r1
 8008094:	bf86      	itte	hi
 8008096:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8008134 <_strtod_l+0x5b4>
 800809a:	f04f 3aff 	movhi.w	sl, #4294967295
 800809e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80080a2:	2300      	movs	r3, #0
 80080a4:	9304      	str	r3, [sp, #16]
 80080a6:	e084      	b.n	80081b2 <_strtod_l+0x632>
 80080a8:	f018 0f01 	tst.w	r8, #1
 80080ac:	d005      	beq.n	80080ba <_strtod_l+0x53a>
 80080ae:	9b04      	ldr	r3, [sp, #16]
 80080b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080b4:	f7f8 fab0 	bl	8000618 <__aeabi_dmul>
 80080b8:	2301      	movs	r3, #1
 80080ba:	9a04      	ldr	r2, [sp, #16]
 80080bc:	3208      	adds	r2, #8
 80080be:	f109 0901 	add.w	r9, r9, #1
 80080c2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80080c6:	9204      	str	r2, [sp, #16]
 80080c8:	e7c9      	b.n	800805e <_strtod_l+0x4de>
 80080ca:	d0ea      	beq.n	80080a2 <_strtod_l+0x522>
 80080cc:	f1c8 0800 	rsb	r8, r8, #0
 80080d0:	f018 020f 	ands.w	r2, r8, #15
 80080d4:	d00a      	beq.n	80080ec <_strtod_l+0x56c>
 80080d6:	4b13      	ldr	r3, [pc, #76]	; (8008124 <_strtod_l+0x5a4>)
 80080d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80080dc:	4650      	mov	r0, sl
 80080de:	4659      	mov	r1, fp
 80080e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080e4:	f7f8 fbc2 	bl	800086c <__aeabi_ddiv>
 80080e8:	4682      	mov	sl, r0
 80080ea:	468b      	mov	fp, r1
 80080ec:	ea5f 1828 	movs.w	r8, r8, asr #4
 80080f0:	d0d7      	beq.n	80080a2 <_strtod_l+0x522>
 80080f2:	f1b8 0f1f 	cmp.w	r8, #31
 80080f6:	dd1f      	ble.n	8008138 <_strtod_l+0x5b8>
 80080f8:	2500      	movs	r5, #0
 80080fa:	462e      	mov	r6, r5
 80080fc:	9507      	str	r5, [sp, #28]
 80080fe:	9505      	str	r5, [sp, #20]
 8008100:	2322      	movs	r3, #34	; 0x22
 8008102:	f04f 0a00 	mov.w	sl, #0
 8008106:	f04f 0b00 	mov.w	fp, #0
 800810a:	6023      	str	r3, [r4, #0]
 800810c:	e786      	b.n	800801c <_strtod_l+0x49c>
 800810e:	bf00      	nop
 8008110:	0800b7c5 	.word	0x0800b7c5
 8008114:	0800b808 	.word	0x0800b808
 8008118:	0800b7bd 	.word	0x0800b7bd
 800811c:	0800b94c 	.word	0x0800b94c
 8008120:	0800bc60 	.word	0x0800bc60
 8008124:	0800bb40 	.word	0x0800bb40
 8008128:	0800bb18 	.word	0x0800bb18
 800812c:	7ff00000 	.word	0x7ff00000
 8008130:	7ca00000 	.word	0x7ca00000
 8008134:	7fefffff 	.word	0x7fefffff
 8008138:	f018 0310 	ands.w	r3, r8, #16
 800813c:	bf18      	it	ne
 800813e:	236a      	movne	r3, #106	; 0x6a
 8008140:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 80084f0 <_strtod_l+0x970>
 8008144:	9304      	str	r3, [sp, #16]
 8008146:	4650      	mov	r0, sl
 8008148:	4659      	mov	r1, fp
 800814a:	2300      	movs	r3, #0
 800814c:	f018 0f01 	tst.w	r8, #1
 8008150:	d004      	beq.n	800815c <_strtod_l+0x5dc>
 8008152:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008156:	f7f8 fa5f 	bl	8000618 <__aeabi_dmul>
 800815a:	2301      	movs	r3, #1
 800815c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8008160:	f109 0908 	add.w	r9, r9, #8
 8008164:	d1f2      	bne.n	800814c <_strtod_l+0x5cc>
 8008166:	b10b      	cbz	r3, 800816c <_strtod_l+0x5ec>
 8008168:	4682      	mov	sl, r0
 800816a:	468b      	mov	fp, r1
 800816c:	9b04      	ldr	r3, [sp, #16]
 800816e:	b1c3      	cbz	r3, 80081a2 <_strtod_l+0x622>
 8008170:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8008174:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008178:	2b00      	cmp	r3, #0
 800817a:	4659      	mov	r1, fp
 800817c:	dd11      	ble.n	80081a2 <_strtod_l+0x622>
 800817e:	2b1f      	cmp	r3, #31
 8008180:	f340 8124 	ble.w	80083cc <_strtod_l+0x84c>
 8008184:	2b34      	cmp	r3, #52	; 0x34
 8008186:	bfde      	ittt	le
 8008188:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800818c:	f04f 33ff 	movle.w	r3, #4294967295
 8008190:	fa03 f202 	lslle.w	r2, r3, r2
 8008194:	f04f 0a00 	mov.w	sl, #0
 8008198:	bfcc      	ite	gt
 800819a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800819e:	ea02 0b01 	andle.w	fp, r2, r1
 80081a2:	2200      	movs	r2, #0
 80081a4:	2300      	movs	r3, #0
 80081a6:	4650      	mov	r0, sl
 80081a8:	4659      	mov	r1, fp
 80081aa:	f7f8 fc9d 	bl	8000ae8 <__aeabi_dcmpeq>
 80081ae:	2800      	cmp	r0, #0
 80081b0:	d1a2      	bne.n	80080f8 <_strtod_l+0x578>
 80081b2:	9b07      	ldr	r3, [sp, #28]
 80081b4:	9300      	str	r3, [sp, #0]
 80081b6:	9908      	ldr	r1, [sp, #32]
 80081b8:	462b      	mov	r3, r5
 80081ba:	463a      	mov	r2, r7
 80081bc:	4620      	mov	r0, r4
 80081be:	f002 f8fd 	bl	800a3bc <__s2b>
 80081c2:	9007      	str	r0, [sp, #28]
 80081c4:	2800      	cmp	r0, #0
 80081c6:	f43f af1f 	beq.w	8008008 <_strtod_l+0x488>
 80081ca:	9b05      	ldr	r3, [sp, #20]
 80081cc:	1b9e      	subs	r6, r3, r6
 80081ce:	9b06      	ldr	r3, [sp, #24]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	bfb4      	ite	lt
 80081d4:	4633      	movlt	r3, r6
 80081d6:	2300      	movge	r3, #0
 80081d8:	930c      	str	r3, [sp, #48]	; 0x30
 80081da:	9b06      	ldr	r3, [sp, #24]
 80081dc:	2500      	movs	r5, #0
 80081de:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80081e2:	9312      	str	r3, [sp, #72]	; 0x48
 80081e4:	462e      	mov	r6, r5
 80081e6:	9b07      	ldr	r3, [sp, #28]
 80081e8:	4620      	mov	r0, r4
 80081ea:	6859      	ldr	r1, [r3, #4]
 80081ec:	f002 f83e 	bl	800a26c <_Balloc>
 80081f0:	9005      	str	r0, [sp, #20]
 80081f2:	2800      	cmp	r0, #0
 80081f4:	f43f af0c 	beq.w	8008010 <_strtod_l+0x490>
 80081f8:	9b07      	ldr	r3, [sp, #28]
 80081fa:	691a      	ldr	r2, [r3, #16]
 80081fc:	3202      	adds	r2, #2
 80081fe:	f103 010c 	add.w	r1, r3, #12
 8008202:	0092      	lsls	r2, r2, #2
 8008204:	300c      	adds	r0, #12
 8008206:	f7fe fd59 	bl	8006cbc <memcpy>
 800820a:	ec4b ab10 	vmov	d0, sl, fp
 800820e:	aa1a      	add	r2, sp, #104	; 0x68
 8008210:	a919      	add	r1, sp, #100	; 0x64
 8008212:	4620      	mov	r0, r4
 8008214:	f002 fc18 	bl	800aa48 <__d2b>
 8008218:	ec4b ab18 	vmov	d8, sl, fp
 800821c:	9018      	str	r0, [sp, #96]	; 0x60
 800821e:	2800      	cmp	r0, #0
 8008220:	f43f aef6 	beq.w	8008010 <_strtod_l+0x490>
 8008224:	2101      	movs	r1, #1
 8008226:	4620      	mov	r0, r4
 8008228:	f002 f962 	bl	800a4f0 <__i2b>
 800822c:	4606      	mov	r6, r0
 800822e:	2800      	cmp	r0, #0
 8008230:	f43f aeee 	beq.w	8008010 <_strtod_l+0x490>
 8008234:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008236:	9904      	ldr	r1, [sp, #16]
 8008238:	2b00      	cmp	r3, #0
 800823a:	bfab      	itete	ge
 800823c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800823e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8008240:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8008242:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8008246:	bfac      	ite	ge
 8008248:	eb03 0902 	addge.w	r9, r3, r2
 800824c:	1ad7      	sublt	r7, r2, r3
 800824e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008250:	eba3 0801 	sub.w	r8, r3, r1
 8008254:	4490      	add	r8, r2
 8008256:	4ba1      	ldr	r3, [pc, #644]	; (80084dc <_strtod_l+0x95c>)
 8008258:	f108 38ff 	add.w	r8, r8, #4294967295
 800825c:	4598      	cmp	r8, r3
 800825e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008262:	f280 80c7 	bge.w	80083f4 <_strtod_l+0x874>
 8008266:	eba3 0308 	sub.w	r3, r3, r8
 800826a:	2b1f      	cmp	r3, #31
 800826c:	eba2 0203 	sub.w	r2, r2, r3
 8008270:	f04f 0101 	mov.w	r1, #1
 8008274:	f300 80b1 	bgt.w	80083da <_strtod_l+0x85a>
 8008278:	fa01 f303 	lsl.w	r3, r1, r3
 800827c:	930d      	str	r3, [sp, #52]	; 0x34
 800827e:	2300      	movs	r3, #0
 8008280:	9308      	str	r3, [sp, #32]
 8008282:	eb09 0802 	add.w	r8, r9, r2
 8008286:	9b04      	ldr	r3, [sp, #16]
 8008288:	45c1      	cmp	r9, r8
 800828a:	4417      	add	r7, r2
 800828c:	441f      	add	r7, r3
 800828e:	464b      	mov	r3, r9
 8008290:	bfa8      	it	ge
 8008292:	4643      	movge	r3, r8
 8008294:	42bb      	cmp	r3, r7
 8008296:	bfa8      	it	ge
 8008298:	463b      	movge	r3, r7
 800829a:	2b00      	cmp	r3, #0
 800829c:	bfc2      	ittt	gt
 800829e:	eba8 0803 	subgt.w	r8, r8, r3
 80082a2:	1aff      	subgt	r7, r7, r3
 80082a4:	eba9 0903 	subgt.w	r9, r9, r3
 80082a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	dd17      	ble.n	80082de <_strtod_l+0x75e>
 80082ae:	4631      	mov	r1, r6
 80082b0:	461a      	mov	r2, r3
 80082b2:	4620      	mov	r0, r4
 80082b4:	f002 f9dc 	bl	800a670 <__pow5mult>
 80082b8:	4606      	mov	r6, r0
 80082ba:	2800      	cmp	r0, #0
 80082bc:	f43f aea8 	beq.w	8008010 <_strtod_l+0x490>
 80082c0:	4601      	mov	r1, r0
 80082c2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80082c4:	4620      	mov	r0, r4
 80082c6:	f002 f929 	bl	800a51c <__multiply>
 80082ca:	900b      	str	r0, [sp, #44]	; 0x2c
 80082cc:	2800      	cmp	r0, #0
 80082ce:	f43f ae9f 	beq.w	8008010 <_strtod_l+0x490>
 80082d2:	9918      	ldr	r1, [sp, #96]	; 0x60
 80082d4:	4620      	mov	r0, r4
 80082d6:	f002 f809 	bl	800a2ec <_Bfree>
 80082da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80082dc:	9318      	str	r3, [sp, #96]	; 0x60
 80082de:	f1b8 0f00 	cmp.w	r8, #0
 80082e2:	f300 808c 	bgt.w	80083fe <_strtod_l+0x87e>
 80082e6:	9b06      	ldr	r3, [sp, #24]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	dd08      	ble.n	80082fe <_strtod_l+0x77e>
 80082ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80082ee:	9905      	ldr	r1, [sp, #20]
 80082f0:	4620      	mov	r0, r4
 80082f2:	f002 f9bd 	bl	800a670 <__pow5mult>
 80082f6:	9005      	str	r0, [sp, #20]
 80082f8:	2800      	cmp	r0, #0
 80082fa:	f43f ae89 	beq.w	8008010 <_strtod_l+0x490>
 80082fe:	2f00      	cmp	r7, #0
 8008300:	dd08      	ble.n	8008314 <_strtod_l+0x794>
 8008302:	9905      	ldr	r1, [sp, #20]
 8008304:	463a      	mov	r2, r7
 8008306:	4620      	mov	r0, r4
 8008308:	f002 fa0c 	bl	800a724 <__lshift>
 800830c:	9005      	str	r0, [sp, #20]
 800830e:	2800      	cmp	r0, #0
 8008310:	f43f ae7e 	beq.w	8008010 <_strtod_l+0x490>
 8008314:	f1b9 0f00 	cmp.w	r9, #0
 8008318:	dd08      	ble.n	800832c <_strtod_l+0x7ac>
 800831a:	4631      	mov	r1, r6
 800831c:	464a      	mov	r2, r9
 800831e:	4620      	mov	r0, r4
 8008320:	f002 fa00 	bl	800a724 <__lshift>
 8008324:	4606      	mov	r6, r0
 8008326:	2800      	cmp	r0, #0
 8008328:	f43f ae72 	beq.w	8008010 <_strtod_l+0x490>
 800832c:	9a05      	ldr	r2, [sp, #20]
 800832e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008330:	4620      	mov	r0, r4
 8008332:	f002 fa83 	bl	800a83c <__mdiff>
 8008336:	4605      	mov	r5, r0
 8008338:	2800      	cmp	r0, #0
 800833a:	f43f ae69 	beq.w	8008010 <_strtod_l+0x490>
 800833e:	68c3      	ldr	r3, [r0, #12]
 8008340:	930b      	str	r3, [sp, #44]	; 0x2c
 8008342:	2300      	movs	r3, #0
 8008344:	60c3      	str	r3, [r0, #12]
 8008346:	4631      	mov	r1, r6
 8008348:	f002 fa5c 	bl	800a804 <__mcmp>
 800834c:	2800      	cmp	r0, #0
 800834e:	da60      	bge.n	8008412 <_strtod_l+0x892>
 8008350:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008352:	ea53 030a 	orrs.w	r3, r3, sl
 8008356:	f040 8082 	bne.w	800845e <_strtod_l+0x8de>
 800835a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800835e:	2b00      	cmp	r3, #0
 8008360:	d17d      	bne.n	800845e <_strtod_l+0x8de>
 8008362:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008366:	0d1b      	lsrs	r3, r3, #20
 8008368:	051b      	lsls	r3, r3, #20
 800836a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800836e:	d976      	bls.n	800845e <_strtod_l+0x8de>
 8008370:	696b      	ldr	r3, [r5, #20]
 8008372:	b913      	cbnz	r3, 800837a <_strtod_l+0x7fa>
 8008374:	692b      	ldr	r3, [r5, #16]
 8008376:	2b01      	cmp	r3, #1
 8008378:	dd71      	ble.n	800845e <_strtod_l+0x8de>
 800837a:	4629      	mov	r1, r5
 800837c:	2201      	movs	r2, #1
 800837e:	4620      	mov	r0, r4
 8008380:	f002 f9d0 	bl	800a724 <__lshift>
 8008384:	4631      	mov	r1, r6
 8008386:	4605      	mov	r5, r0
 8008388:	f002 fa3c 	bl	800a804 <__mcmp>
 800838c:	2800      	cmp	r0, #0
 800838e:	dd66      	ble.n	800845e <_strtod_l+0x8de>
 8008390:	9904      	ldr	r1, [sp, #16]
 8008392:	4a53      	ldr	r2, [pc, #332]	; (80084e0 <_strtod_l+0x960>)
 8008394:	465b      	mov	r3, fp
 8008396:	2900      	cmp	r1, #0
 8008398:	f000 8081 	beq.w	800849e <_strtod_l+0x91e>
 800839c:	ea02 010b 	and.w	r1, r2, fp
 80083a0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80083a4:	dc7b      	bgt.n	800849e <_strtod_l+0x91e>
 80083a6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80083aa:	f77f aea9 	ble.w	8008100 <_strtod_l+0x580>
 80083ae:	4b4d      	ldr	r3, [pc, #308]	; (80084e4 <_strtod_l+0x964>)
 80083b0:	4650      	mov	r0, sl
 80083b2:	4659      	mov	r1, fp
 80083b4:	2200      	movs	r2, #0
 80083b6:	f7f8 f92f 	bl	8000618 <__aeabi_dmul>
 80083ba:	460b      	mov	r3, r1
 80083bc:	4303      	orrs	r3, r0
 80083be:	bf08      	it	eq
 80083c0:	2322      	moveq	r3, #34	; 0x22
 80083c2:	4682      	mov	sl, r0
 80083c4:	468b      	mov	fp, r1
 80083c6:	bf08      	it	eq
 80083c8:	6023      	streq	r3, [r4, #0]
 80083ca:	e62b      	b.n	8008024 <_strtod_l+0x4a4>
 80083cc:	f04f 32ff 	mov.w	r2, #4294967295
 80083d0:	fa02 f303 	lsl.w	r3, r2, r3
 80083d4:	ea03 0a0a 	and.w	sl, r3, sl
 80083d8:	e6e3      	b.n	80081a2 <_strtod_l+0x622>
 80083da:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80083de:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80083e2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80083e6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80083ea:	fa01 f308 	lsl.w	r3, r1, r8
 80083ee:	9308      	str	r3, [sp, #32]
 80083f0:	910d      	str	r1, [sp, #52]	; 0x34
 80083f2:	e746      	b.n	8008282 <_strtod_l+0x702>
 80083f4:	2300      	movs	r3, #0
 80083f6:	9308      	str	r3, [sp, #32]
 80083f8:	2301      	movs	r3, #1
 80083fa:	930d      	str	r3, [sp, #52]	; 0x34
 80083fc:	e741      	b.n	8008282 <_strtod_l+0x702>
 80083fe:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008400:	4642      	mov	r2, r8
 8008402:	4620      	mov	r0, r4
 8008404:	f002 f98e 	bl	800a724 <__lshift>
 8008408:	9018      	str	r0, [sp, #96]	; 0x60
 800840a:	2800      	cmp	r0, #0
 800840c:	f47f af6b 	bne.w	80082e6 <_strtod_l+0x766>
 8008410:	e5fe      	b.n	8008010 <_strtod_l+0x490>
 8008412:	465f      	mov	r7, fp
 8008414:	d16e      	bne.n	80084f4 <_strtod_l+0x974>
 8008416:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008418:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800841c:	b342      	cbz	r2, 8008470 <_strtod_l+0x8f0>
 800841e:	4a32      	ldr	r2, [pc, #200]	; (80084e8 <_strtod_l+0x968>)
 8008420:	4293      	cmp	r3, r2
 8008422:	d128      	bne.n	8008476 <_strtod_l+0x8f6>
 8008424:	9b04      	ldr	r3, [sp, #16]
 8008426:	4651      	mov	r1, sl
 8008428:	b1eb      	cbz	r3, 8008466 <_strtod_l+0x8e6>
 800842a:	4b2d      	ldr	r3, [pc, #180]	; (80084e0 <_strtod_l+0x960>)
 800842c:	403b      	ands	r3, r7
 800842e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008432:	f04f 32ff 	mov.w	r2, #4294967295
 8008436:	d819      	bhi.n	800846c <_strtod_l+0x8ec>
 8008438:	0d1b      	lsrs	r3, r3, #20
 800843a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800843e:	fa02 f303 	lsl.w	r3, r2, r3
 8008442:	4299      	cmp	r1, r3
 8008444:	d117      	bne.n	8008476 <_strtod_l+0x8f6>
 8008446:	4b29      	ldr	r3, [pc, #164]	; (80084ec <_strtod_l+0x96c>)
 8008448:	429f      	cmp	r7, r3
 800844a:	d102      	bne.n	8008452 <_strtod_l+0x8d2>
 800844c:	3101      	adds	r1, #1
 800844e:	f43f addf 	beq.w	8008010 <_strtod_l+0x490>
 8008452:	4b23      	ldr	r3, [pc, #140]	; (80084e0 <_strtod_l+0x960>)
 8008454:	403b      	ands	r3, r7
 8008456:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800845a:	f04f 0a00 	mov.w	sl, #0
 800845e:	9b04      	ldr	r3, [sp, #16]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d1a4      	bne.n	80083ae <_strtod_l+0x82e>
 8008464:	e5de      	b.n	8008024 <_strtod_l+0x4a4>
 8008466:	f04f 33ff 	mov.w	r3, #4294967295
 800846a:	e7ea      	b.n	8008442 <_strtod_l+0x8c2>
 800846c:	4613      	mov	r3, r2
 800846e:	e7e8      	b.n	8008442 <_strtod_l+0x8c2>
 8008470:	ea53 030a 	orrs.w	r3, r3, sl
 8008474:	d08c      	beq.n	8008390 <_strtod_l+0x810>
 8008476:	9b08      	ldr	r3, [sp, #32]
 8008478:	b1db      	cbz	r3, 80084b2 <_strtod_l+0x932>
 800847a:	423b      	tst	r3, r7
 800847c:	d0ef      	beq.n	800845e <_strtod_l+0x8de>
 800847e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008480:	9a04      	ldr	r2, [sp, #16]
 8008482:	4650      	mov	r0, sl
 8008484:	4659      	mov	r1, fp
 8008486:	b1c3      	cbz	r3, 80084ba <_strtod_l+0x93a>
 8008488:	f7ff fb5c 	bl	8007b44 <sulp>
 800848c:	4602      	mov	r2, r0
 800848e:	460b      	mov	r3, r1
 8008490:	ec51 0b18 	vmov	r0, r1, d8
 8008494:	f7f7 ff0a 	bl	80002ac <__adddf3>
 8008498:	4682      	mov	sl, r0
 800849a:	468b      	mov	fp, r1
 800849c:	e7df      	b.n	800845e <_strtod_l+0x8de>
 800849e:	4013      	ands	r3, r2
 80084a0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80084a4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80084a8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80084ac:	f04f 3aff 	mov.w	sl, #4294967295
 80084b0:	e7d5      	b.n	800845e <_strtod_l+0x8de>
 80084b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80084b4:	ea13 0f0a 	tst.w	r3, sl
 80084b8:	e7e0      	b.n	800847c <_strtod_l+0x8fc>
 80084ba:	f7ff fb43 	bl	8007b44 <sulp>
 80084be:	4602      	mov	r2, r0
 80084c0:	460b      	mov	r3, r1
 80084c2:	ec51 0b18 	vmov	r0, r1, d8
 80084c6:	f7f7 feef 	bl	80002a8 <__aeabi_dsub>
 80084ca:	2200      	movs	r2, #0
 80084cc:	2300      	movs	r3, #0
 80084ce:	4682      	mov	sl, r0
 80084d0:	468b      	mov	fp, r1
 80084d2:	f7f8 fb09 	bl	8000ae8 <__aeabi_dcmpeq>
 80084d6:	2800      	cmp	r0, #0
 80084d8:	d0c1      	beq.n	800845e <_strtod_l+0x8de>
 80084da:	e611      	b.n	8008100 <_strtod_l+0x580>
 80084dc:	fffffc02 	.word	0xfffffc02
 80084e0:	7ff00000 	.word	0x7ff00000
 80084e4:	39500000 	.word	0x39500000
 80084e8:	000fffff 	.word	0x000fffff
 80084ec:	7fefffff 	.word	0x7fefffff
 80084f0:	0800b820 	.word	0x0800b820
 80084f4:	4631      	mov	r1, r6
 80084f6:	4628      	mov	r0, r5
 80084f8:	f002 fb02 	bl	800ab00 <__ratio>
 80084fc:	ec59 8b10 	vmov	r8, r9, d0
 8008500:	ee10 0a10 	vmov	r0, s0
 8008504:	2200      	movs	r2, #0
 8008506:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800850a:	4649      	mov	r1, r9
 800850c:	f7f8 fb00 	bl	8000b10 <__aeabi_dcmple>
 8008510:	2800      	cmp	r0, #0
 8008512:	d07a      	beq.n	800860a <_strtod_l+0xa8a>
 8008514:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008516:	2b00      	cmp	r3, #0
 8008518:	d04a      	beq.n	80085b0 <_strtod_l+0xa30>
 800851a:	4b95      	ldr	r3, [pc, #596]	; (8008770 <_strtod_l+0xbf0>)
 800851c:	2200      	movs	r2, #0
 800851e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008522:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8008770 <_strtod_l+0xbf0>
 8008526:	f04f 0800 	mov.w	r8, #0
 800852a:	4b92      	ldr	r3, [pc, #584]	; (8008774 <_strtod_l+0xbf4>)
 800852c:	403b      	ands	r3, r7
 800852e:	930d      	str	r3, [sp, #52]	; 0x34
 8008530:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008532:	4b91      	ldr	r3, [pc, #580]	; (8008778 <_strtod_l+0xbf8>)
 8008534:	429a      	cmp	r2, r3
 8008536:	f040 80b0 	bne.w	800869a <_strtod_l+0xb1a>
 800853a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800853e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8008542:	ec4b ab10 	vmov	d0, sl, fp
 8008546:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800854a:	f002 fa01 	bl	800a950 <__ulp>
 800854e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008552:	ec53 2b10 	vmov	r2, r3, d0
 8008556:	f7f8 f85f 	bl	8000618 <__aeabi_dmul>
 800855a:	4652      	mov	r2, sl
 800855c:	465b      	mov	r3, fp
 800855e:	f7f7 fea5 	bl	80002ac <__adddf3>
 8008562:	460b      	mov	r3, r1
 8008564:	4983      	ldr	r1, [pc, #524]	; (8008774 <_strtod_l+0xbf4>)
 8008566:	4a85      	ldr	r2, [pc, #532]	; (800877c <_strtod_l+0xbfc>)
 8008568:	4019      	ands	r1, r3
 800856a:	4291      	cmp	r1, r2
 800856c:	4682      	mov	sl, r0
 800856e:	d960      	bls.n	8008632 <_strtod_l+0xab2>
 8008570:	ee18 3a90 	vmov	r3, s17
 8008574:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8008578:	4293      	cmp	r3, r2
 800857a:	d104      	bne.n	8008586 <_strtod_l+0xa06>
 800857c:	ee18 3a10 	vmov	r3, s16
 8008580:	3301      	adds	r3, #1
 8008582:	f43f ad45 	beq.w	8008010 <_strtod_l+0x490>
 8008586:	f8df b200 	ldr.w	fp, [pc, #512]	; 8008788 <_strtod_l+0xc08>
 800858a:	f04f 3aff 	mov.w	sl, #4294967295
 800858e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008590:	4620      	mov	r0, r4
 8008592:	f001 feab 	bl	800a2ec <_Bfree>
 8008596:	9905      	ldr	r1, [sp, #20]
 8008598:	4620      	mov	r0, r4
 800859a:	f001 fea7 	bl	800a2ec <_Bfree>
 800859e:	4631      	mov	r1, r6
 80085a0:	4620      	mov	r0, r4
 80085a2:	f001 fea3 	bl	800a2ec <_Bfree>
 80085a6:	4629      	mov	r1, r5
 80085a8:	4620      	mov	r0, r4
 80085aa:	f001 fe9f 	bl	800a2ec <_Bfree>
 80085ae:	e61a      	b.n	80081e6 <_strtod_l+0x666>
 80085b0:	f1ba 0f00 	cmp.w	sl, #0
 80085b4:	d11b      	bne.n	80085ee <_strtod_l+0xa6e>
 80085b6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80085ba:	b9f3      	cbnz	r3, 80085fa <_strtod_l+0xa7a>
 80085bc:	4b6c      	ldr	r3, [pc, #432]	; (8008770 <_strtod_l+0xbf0>)
 80085be:	2200      	movs	r2, #0
 80085c0:	4640      	mov	r0, r8
 80085c2:	4649      	mov	r1, r9
 80085c4:	f7f8 fa9a 	bl	8000afc <__aeabi_dcmplt>
 80085c8:	b9d0      	cbnz	r0, 8008600 <_strtod_l+0xa80>
 80085ca:	4640      	mov	r0, r8
 80085cc:	4649      	mov	r1, r9
 80085ce:	4b6c      	ldr	r3, [pc, #432]	; (8008780 <_strtod_l+0xc00>)
 80085d0:	2200      	movs	r2, #0
 80085d2:	f7f8 f821 	bl	8000618 <__aeabi_dmul>
 80085d6:	4680      	mov	r8, r0
 80085d8:	4689      	mov	r9, r1
 80085da:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80085de:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 80085e2:	9315      	str	r3, [sp, #84]	; 0x54
 80085e4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80085e8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80085ec:	e79d      	b.n	800852a <_strtod_l+0x9aa>
 80085ee:	f1ba 0f01 	cmp.w	sl, #1
 80085f2:	d102      	bne.n	80085fa <_strtod_l+0xa7a>
 80085f4:	2f00      	cmp	r7, #0
 80085f6:	f43f ad83 	beq.w	8008100 <_strtod_l+0x580>
 80085fa:	4b62      	ldr	r3, [pc, #392]	; (8008784 <_strtod_l+0xc04>)
 80085fc:	2200      	movs	r2, #0
 80085fe:	e78e      	b.n	800851e <_strtod_l+0x99e>
 8008600:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8008780 <_strtod_l+0xc00>
 8008604:	f04f 0800 	mov.w	r8, #0
 8008608:	e7e7      	b.n	80085da <_strtod_l+0xa5a>
 800860a:	4b5d      	ldr	r3, [pc, #372]	; (8008780 <_strtod_l+0xc00>)
 800860c:	4640      	mov	r0, r8
 800860e:	4649      	mov	r1, r9
 8008610:	2200      	movs	r2, #0
 8008612:	f7f8 f801 	bl	8000618 <__aeabi_dmul>
 8008616:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008618:	4680      	mov	r8, r0
 800861a:	4689      	mov	r9, r1
 800861c:	b933      	cbnz	r3, 800862c <_strtod_l+0xaac>
 800861e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008622:	900e      	str	r0, [sp, #56]	; 0x38
 8008624:	930f      	str	r3, [sp, #60]	; 0x3c
 8008626:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800862a:	e7dd      	b.n	80085e8 <_strtod_l+0xa68>
 800862c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8008630:	e7f9      	b.n	8008626 <_strtod_l+0xaa6>
 8008632:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8008636:	9b04      	ldr	r3, [sp, #16]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d1a8      	bne.n	800858e <_strtod_l+0xa0e>
 800863c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008640:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008642:	0d1b      	lsrs	r3, r3, #20
 8008644:	051b      	lsls	r3, r3, #20
 8008646:	429a      	cmp	r2, r3
 8008648:	d1a1      	bne.n	800858e <_strtod_l+0xa0e>
 800864a:	4640      	mov	r0, r8
 800864c:	4649      	mov	r1, r9
 800864e:	f7f8 fb43 	bl	8000cd8 <__aeabi_d2lz>
 8008652:	f7f7 ffb3 	bl	80005bc <__aeabi_l2d>
 8008656:	4602      	mov	r2, r0
 8008658:	460b      	mov	r3, r1
 800865a:	4640      	mov	r0, r8
 800865c:	4649      	mov	r1, r9
 800865e:	f7f7 fe23 	bl	80002a8 <__aeabi_dsub>
 8008662:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008664:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008668:	ea43 030a 	orr.w	r3, r3, sl
 800866c:	4313      	orrs	r3, r2
 800866e:	4680      	mov	r8, r0
 8008670:	4689      	mov	r9, r1
 8008672:	d055      	beq.n	8008720 <_strtod_l+0xba0>
 8008674:	a336      	add	r3, pc, #216	; (adr r3, 8008750 <_strtod_l+0xbd0>)
 8008676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800867a:	f7f8 fa3f 	bl	8000afc <__aeabi_dcmplt>
 800867e:	2800      	cmp	r0, #0
 8008680:	f47f acd0 	bne.w	8008024 <_strtod_l+0x4a4>
 8008684:	a334      	add	r3, pc, #208	; (adr r3, 8008758 <_strtod_l+0xbd8>)
 8008686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800868a:	4640      	mov	r0, r8
 800868c:	4649      	mov	r1, r9
 800868e:	f7f8 fa53 	bl	8000b38 <__aeabi_dcmpgt>
 8008692:	2800      	cmp	r0, #0
 8008694:	f43f af7b 	beq.w	800858e <_strtod_l+0xa0e>
 8008698:	e4c4      	b.n	8008024 <_strtod_l+0x4a4>
 800869a:	9b04      	ldr	r3, [sp, #16]
 800869c:	b333      	cbz	r3, 80086ec <_strtod_l+0xb6c>
 800869e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80086a0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80086a4:	d822      	bhi.n	80086ec <_strtod_l+0xb6c>
 80086a6:	a32e      	add	r3, pc, #184	; (adr r3, 8008760 <_strtod_l+0xbe0>)
 80086a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086ac:	4640      	mov	r0, r8
 80086ae:	4649      	mov	r1, r9
 80086b0:	f7f8 fa2e 	bl	8000b10 <__aeabi_dcmple>
 80086b4:	b1a0      	cbz	r0, 80086e0 <_strtod_l+0xb60>
 80086b6:	4649      	mov	r1, r9
 80086b8:	4640      	mov	r0, r8
 80086ba:	f7f8 fa85 	bl	8000bc8 <__aeabi_d2uiz>
 80086be:	2801      	cmp	r0, #1
 80086c0:	bf38      	it	cc
 80086c2:	2001      	movcc	r0, #1
 80086c4:	f7f7 ff2e 	bl	8000524 <__aeabi_ui2d>
 80086c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80086ca:	4680      	mov	r8, r0
 80086cc:	4689      	mov	r9, r1
 80086ce:	bb23      	cbnz	r3, 800871a <_strtod_l+0xb9a>
 80086d0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80086d4:	9010      	str	r0, [sp, #64]	; 0x40
 80086d6:	9311      	str	r3, [sp, #68]	; 0x44
 80086d8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80086dc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80086e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086e2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80086e4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80086e8:	1a9b      	subs	r3, r3, r2
 80086ea:	9309      	str	r3, [sp, #36]	; 0x24
 80086ec:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80086f0:	eeb0 0a48 	vmov.f32	s0, s16
 80086f4:	eef0 0a68 	vmov.f32	s1, s17
 80086f8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80086fc:	f002 f928 	bl	800a950 <__ulp>
 8008700:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008704:	ec53 2b10 	vmov	r2, r3, d0
 8008708:	f7f7 ff86 	bl	8000618 <__aeabi_dmul>
 800870c:	ec53 2b18 	vmov	r2, r3, d8
 8008710:	f7f7 fdcc 	bl	80002ac <__adddf3>
 8008714:	4682      	mov	sl, r0
 8008716:	468b      	mov	fp, r1
 8008718:	e78d      	b.n	8008636 <_strtod_l+0xab6>
 800871a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800871e:	e7db      	b.n	80086d8 <_strtod_l+0xb58>
 8008720:	a311      	add	r3, pc, #68	; (adr r3, 8008768 <_strtod_l+0xbe8>)
 8008722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008726:	f7f8 f9e9 	bl	8000afc <__aeabi_dcmplt>
 800872a:	e7b2      	b.n	8008692 <_strtod_l+0xb12>
 800872c:	2300      	movs	r3, #0
 800872e:	930a      	str	r3, [sp, #40]	; 0x28
 8008730:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008732:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008734:	6013      	str	r3, [r2, #0]
 8008736:	f7ff ba6b 	b.w	8007c10 <_strtod_l+0x90>
 800873a:	2a65      	cmp	r2, #101	; 0x65
 800873c:	f43f ab5f 	beq.w	8007dfe <_strtod_l+0x27e>
 8008740:	2a45      	cmp	r2, #69	; 0x45
 8008742:	f43f ab5c 	beq.w	8007dfe <_strtod_l+0x27e>
 8008746:	2301      	movs	r3, #1
 8008748:	f7ff bb94 	b.w	8007e74 <_strtod_l+0x2f4>
 800874c:	f3af 8000 	nop.w
 8008750:	94a03595 	.word	0x94a03595
 8008754:	3fdfffff 	.word	0x3fdfffff
 8008758:	35afe535 	.word	0x35afe535
 800875c:	3fe00000 	.word	0x3fe00000
 8008760:	ffc00000 	.word	0xffc00000
 8008764:	41dfffff 	.word	0x41dfffff
 8008768:	94a03595 	.word	0x94a03595
 800876c:	3fcfffff 	.word	0x3fcfffff
 8008770:	3ff00000 	.word	0x3ff00000
 8008774:	7ff00000 	.word	0x7ff00000
 8008778:	7fe00000 	.word	0x7fe00000
 800877c:	7c9fffff 	.word	0x7c9fffff
 8008780:	3fe00000 	.word	0x3fe00000
 8008784:	bff00000 	.word	0xbff00000
 8008788:	7fefffff 	.word	0x7fefffff

0800878c <_strtod_r>:
 800878c:	4b01      	ldr	r3, [pc, #4]	; (8008794 <_strtod_r+0x8>)
 800878e:	f7ff b9f7 	b.w	8007b80 <_strtod_l>
 8008792:	bf00      	nop
 8008794:	200000e0 	.word	0x200000e0

08008798 <_strtol_l.constprop.0>:
 8008798:	2b01      	cmp	r3, #1
 800879a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800879e:	d001      	beq.n	80087a4 <_strtol_l.constprop.0+0xc>
 80087a0:	2b24      	cmp	r3, #36	; 0x24
 80087a2:	d906      	bls.n	80087b2 <_strtol_l.constprop.0+0x1a>
 80087a4:	f7fe fa60 	bl	8006c68 <__errno>
 80087a8:	2316      	movs	r3, #22
 80087aa:	6003      	str	r3, [r0, #0]
 80087ac:	2000      	movs	r0, #0
 80087ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087b2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008898 <_strtol_l.constprop.0+0x100>
 80087b6:	460d      	mov	r5, r1
 80087b8:	462e      	mov	r6, r5
 80087ba:	f815 4b01 	ldrb.w	r4, [r5], #1
 80087be:	f814 700c 	ldrb.w	r7, [r4, ip]
 80087c2:	f017 0708 	ands.w	r7, r7, #8
 80087c6:	d1f7      	bne.n	80087b8 <_strtol_l.constprop.0+0x20>
 80087c8:	2c2d      	cmp	r4, #45	; 0x2d
 80087ca:	d132      	bne.n	8008832 <_strtol_l.constprop.0+0x9a>
 80087cc:	782c      	ldrb	r4, [r5, #0]
 80087ce:	2701      	movs	r7, #1
 80087d0:	1cb5      	adds	r5, r6, #2
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d05b      	beq.n	800888e <_strtol_l.constprop.0+0xf6>
 80087d6:	2b10      	cmp	r3, #16
 80087d8:	d109      	bne.n	80087ee <_strtol_l.constprop.0+0x56>
 80087da:	2c30      	cmp	r4, #48	; 0x30
 80087dc:	d107      	bne.n	80087ee <_strtol_l.constprop.0+0x56>
 80087de:	782c      	ldrb	r4, [r5, #0]
 80087e0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80087e4:	2c58      	cmp	r4, #88	; 0x58
 80087e6:	d14d      	bne.n	8008884 <_strtol_l.constprop.0+0xec>
 80087e8:	786c      	ldrb	r4, [r5, #1]
 80087ea:	2310      	movs	r3, #16
 80087ec:	3502      	adds	r5, #2
 80087ee:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80087f2:	f108 38ff 	add.w	r8, r8, #4294967295
 80087f6:	f04f 0c00 	mov.w	ip, #0
 80087fa:	fbb8 f9f3 	udiv	r9, r8, r3
 80087fe:	4666      	mov	r6, ip
 8008800:	fb03 8a19 	mls	sl, r3, r9, r8
 8008804:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8008808:	f1be 0f09 	cmp.w	lr, #9
 800880c:	d816      	bhi.n	800883c <_strtol_l.constprop.0+0xa4>
 800880e:	4674      	mov	r4, lr
 8008810:	42a3      	cmp	r3, r4
 8008812:	dd24      	ble.n	800885e <_strtol_l.constprop.0+0xc6>
 8008814:	f1bc 0f00 	cmp.w	ip, #0
 8008818:	db1e      	blt.n	8008858 <_strtol_l.constprop.0+0xc0>
 800881a:	45b1      	cmp	r9, r6
 800881c:	d31c      	bcc.n	8008858 <_strtol_l.constprop.0+0xc0>
 800881e:	d101      	bne.n	8008824 <_strtol_l.constprop.0+0x8c>
 8008820:	45a2      	cmp	sl, r4
 8008822:	db19      	blt.n	8008858 <_strtol_l.constprop.0+0xc0>
 8008824:	fb06 4603 	mla	r6, r6, r3, r4
 8008828:	f04f 0c01 	mov.w	ip, #1
 800882c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008830:	e7e8      	b.n	8008804 <_strtol_l.constprop.0+0x6c>
 8008832:	2c2b      	cmp	r4, #43	; 0x2b
 8008834:	bf04      	itt	eq
 8008836:	782c      	ldrbeq	r4, [r5, #0]
 8008838:	1cb5      	addeq	r5, r6, #2
 800883a:	e7ca      	b.n	80087d2 <_strtol_l.constprop.0+0x3a>
 800883c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8008840:	f1be 0f19 	cmp.w	lr, #25
 8008844:	d801      	bhi.n	800884a <_strtol_l.constprop.0+0xb2>
 8008846:	3c37      	subs	r4, #55	; 0x37
 8008848:	e7e2      	b.n	8008810 <_strtol_l.constprop.0+0x78>
 800884a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800884e:	f1be 0f19 	cmp.w	lr, #25
 8008852:	d804      	bhi.n	800885e <_strtol_l.constprop.0+0xc6>
 8008854:	3c57      	subs	r4, #87	; 0x57
 8008856:	e7db      	b.n	8008810 <_strtol_l.constprop.0+0x78>
 8008858:	f04f 3cff 	mov.w	ip, #4294967295
 800885c:	e7e6      	b.n	800882c <_strtol_l.constprop.0+0x94>
 800885e:	f1bc 0f00 	cmp.w	ip, #0
 8008862:	da05      	bge.n	8008870 <_strtol_l.constprop.0+0xd8>
 8008864:	2322      	movs	r3, #34	; 0x22
 8008866:	6003      	str	r3, [r0, #0]
 8008868:	4646      	mov	r6, r8
 800886a:	b942      	cbnz	r2, 800887e <_strtol_l.constprop.0+0xe6>
 800886c:	4630      	mov	r0, r6
 800886e:	e79e      	b.n	80087ae <_strtol_l.constprop.0+0x16>
 8008870:	b107      	cbz	r7, 8008874 <_strtol_l.constprop.0+0xdc>
 8008872:	4276      	negs	r6, r6
 8008874:	2a00      	cmp	r2, #0
 8008876:	d0f9      	beq.n	800886c <_strtol_l.constprop.0+0xd4>
 8008878:	f1bc 0f00 	cmp.w	ip, #0
 800887c:	d000      	beq.n	8008880 <_strtol_l.constprop.0+0xe8>
 800887e:	1e69      	subs	r1, r5, #1
 8008880:	6011      	str	r1, [r2, #0]
 8008882:	e7f3      	b.n	800886c <_strtol_l.constprop.0+0xd4>
 8008884:	2430      	movs	r4, #48	; 0x30
 8008886:	2b00      	cmp	r3, #0
 8008888:	d1b1      	bne.n	80087ee <_strtol_l.constprop.0+0x56>
 800888a:	2308      	movs	r3, #8
 800888c:	e7af      	b.n	80087ee <_strtol_l.constprop.0+0x56>
 800888e:	2c30      	cmp	r4, #48	; 0x30
 8008890:	d0a5      	beq.n	80087de <_strtol_l.constprop.0+0x46>
 8008892:	230a      	movs	r3, #10
 8008894:	e7ab      	b.n	80087ee <_strtol_l.constprop.0+0x56>
 8008896:	bf00      	nop
 8008898:	0800b849 	.word	0x0800b849

0800889c <_strtol_r>:
 800889c:	f7ff bf7c 	b.w	8008798 <_strtol_l.constprop.0>

080088a0 <__swbuf_r>:
 80088a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088a2:	460e      	mov	r6, r1
 80088a4:	4614      	mov	r4, r2
 80088a6:	4605      	mov	r5, r0
 80088a8:	b118      	cbz	r0, 80088b2 <__swbuf_r+0x12>
 80088aa:	6983      	ldr	r3, [r0, #24]
 80088ac:	b90b      	cbnz	r3, 80088b2 <__swbuf_r+0x12>
 80088ae:	f001 f84b 	bl	8009948 <__sinit>
 80088b2:	4b21      	ldr	r3, [pc, #132]	; (8008938 <__swbuf_r+0x98>)
 80088b4:	429c      	cmp	r4, r3
 80088b6:	d12b      	bne.n	8008910 <__swbuf_r+0x70>
 80088b8:	686c      	ldr	r4, [r5, #4]
 80088ba:	69a3      	ldr	r3, [r4, #24]
 80088bc:	60a3      	str	r3, [r4, #8]
 80088be:	89a3      	ldrh	r3, [r4, #12]
 80088c0:	071a      	lsls	r2, r3, #28
 80088c2:	d52f      	bpl.n	8008924 <__swbuf_r+0x84>
 80088c4:	6923      	ldr	r3, [r4, #16]
 80088c6:	b36b      	cbz	r3, 8008924 <__swbuf_r+0x84>
 80088c8:	6923      	ldr	r3, [r4, #16]
 80088ca:	6820      	ldr	r0, [r4, #0]
 80088cc:	1ac0      	subs	r0, r0, r3
 80088ce:	6963      	ldr	r3, [r4, #20]
 80088d0:	b2f6      	uxtb	r6, r6
 80088d2:	4283      	cmp	r3, r0
 80088d4:	4637      	mov	r7, r6
 80088d6:	dc04      	bgt.n	80088e2 <__swbuf_r+0x42>
 80088d8:	4621      	mov	r1, r4
 80088da:	4628      	mov	r0, r5
 80088dc:	f000 ffa0 	bl	8009820 <_fflush_r>
 80088e0:	bb30      	cbnz	r0, 8008930 <__swbuf_r+0x90>
 80088e2:	68a3      	ldr	r3, [r4, #8]
 80088e4:	3b01      	subs	r3, #1
 80088e6:	60a3      	str	r3, [r4, #8]
 80088e8:	6823      	ldr	r3, [r4, #0]
 80088ea:	1c5a      	adds	r2, r3, #1
 80088ec:	6022      	str	r2, [r4, #0]
 80088ee:	701e      	strb	r6, [r3, #0]
 80088f0:	6963      	ldr	r3, [r4, #20]
 80088f2:	3001      	adds	r0, #1
 80088f4:	4283      	cmp	r3, r0
 80088f6:	d004      	beq.n	8008902 <__swbuf_r+0x62>
 80088f8:	89a3      	ldrh	r3, [r4, #12]
 80088fa:	07db      	lsls	r3, r3, #31
 80088fc:	d506      	bpl.n	800890c <__swbuf_r+0x6c>
 80088fe:	2e0a      	cmp	r6, #10
 8008900:	d104      	bne.n	800890c <__swbuf_r+0x6c>
 8008902:	4621      	mov	r1, r4
 8008904:	4628      	mov	r0, r5
 8008906:	f000 ff8b 	bl	8009820 <_fflush_r>
 800890a:	b988      	cbnz	r0, 8008930 <__swbuf_r+0x90>
 800890c:	4638      	mov	r0, r7
 800890e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008910:	4b0a      	ldr	r3, [pc, #40]	; (800893c <__swbuf_r+0x9c>)
 8008912:	429c      	cmp	r4, r3
 8008914:	d101      	bne.n	800891a <__swbuf_r+0x7a>
 8008916:	68ac      	ldr	r4, [r5, #8]
 8008918:	e7cf      	b.n	80088ba <__swbuf_r+0x1a>
 800891a:	4b09      	ldr	r3, [pc, #36]	; (8008940 <__swbuf_r+0xa0>)
 800891c:	429c      	cmp	r4, r3
 800891e:	bf08      	it	eq
 8008920:	68ec      	ldreq	r4, [r5, #12]
 8008922:	e7ca      	b.n	80088ba <__swbuf_r+0x1a>
 8008924:	4621      	mov	r1, r4
 8008926:	4628      	mov	r0, r5
 8008928:	f000 f80c 	bl	8008944 <__swsetup_r>
 800892c:	2800      	cmp	r0, #0
 800892e:	d0cb      	beq.n	80088c8 <__swbuf_r+0x28>
 8008930:	f04f 37ff 	mov.w	r7, #4294967295
 8008934:	e7ea      	b.n	800890c <__swbuf_r+0x6c>
 8008936:	bf00      	nop
 8008938:	0800b9fc 	.word	0x0800b9fc
 800893c:	0800ba1c 	.word	0x0800ba1c
 8008940:	0800b9dc 	.word	0x0800b9dc

08008944 <__swsetup_r>:
 8008944:	4b32      	ldr	r3, [pc, #200]	; (8008a10 <__swsetup_r+0xcc>)
 8008946:	b570      	push	{r4, r5, r6, lr}
 8008948:	681d      	ldr	r5, [r3, #0]
 800894a:	4606      	mov	r6, r0
 800894c:	460c      	mov	r4, r1
 800894e:	b125      	cbz	r5, 800895a <__swsetup_r+0x16>
 8008950:	69ab      	ldr	r3, [r5, #24]
 8008952:	b913      	cbnz	r3, 800895a <__swsetup_r+0x16>
 8008954:	4628      	mov	r0, r5
 8008956:	f000 fff7 	bl	8009948 <__sinit>
 800895a:	4b2e      	ldr	r3, [pc, #184]	; (8008a14 <__swsetup_r+0xd0>)
 800895c:	429c      	cmp	r4, r3
 800895e:	d10f      	bne.n	8008980 <__swsetup_r+0x3c>
 8008960:	686c      	ldr	r4, [r5, #4]
 8008962:	89a3      	ldrh	r3, [r4, #12]
 8008964:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008968:	0719      	lsls	r1, r3, #28
 800896a:	d42c      	bmi.n	80089c6 <__swsetup_r+0x82>
 800896c:	06dd      	lsls	r5, r3, #27
 800896e:	d411      	bmi.n	8008994 <__swsetup_r+0x50>
 8008970:	2309      	movs	r3, #9
 8008972:	6033      	str	r3, [r6, #0]
 8008974:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008978:	81a3      	strh	r3, [r4, #12]
 800897a:	f04f 30ff 	mov.w	r0, #4294967295
 800897e:	e03e      	b.n	80089fe <__swsetup_r+0xba>
 8008980:	4b25      	ldr	r3, [pc, #148]	; (8008a18 <__swsetup_r+0xd4>)
 8008982:	429c      	cmp	r4, r3
 8008984:	d101      	bne.n	800898a <__swsetup_r+0x46>
 8008986:	68ac      	ldr	r4, [r5, #8]
 8008988:	e7eb      	b.n	8008962 <__swsetup_r+0x1e>
 800898a:	4b24      	ldr	r3, [pc, #144]	; (8008a1c <__swsetup_r+0xd8>)
 800898c:	429c      	cmp	r4, r3
 800898e:	bf08      	it	eq
 8008990:	68ec      	ldreq	r4, [r5, #12]
 8008992:	e7e6      	b.n	8008962 <__swsetup_r+0x1e>
 8008994:	0758      	lsls	r0, r3, #29
 8008996:	d512      	bpl.n	80089be <__swsetup_r+0x7a>
 8008998:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800899a:	b141      	cbz	r1, 80089ae <__swsetup_r+0x6a>
 800899c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80089a0:	4299      	cmp	r1, r3
 80089a2:	d002      	beq.n	80089aa <__swsetup_r+0x66>
 80089a4:	4630      	mov	r0, r6
 80089a6:	f002 f939 	bl	800ac1c <_free_r>
 80089aa:	2300      	movs	r3, #0
 80089ac:	6363      	str	r3, [r4, #52]	; 0x34
 80089ae:	89a3      	ldrh	r3, [r4, #12]
 80089b0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80089b4:	81a3      	strh	r3, [r4, #12]
 80089b6:	2300      	movs	r3, #0
 80089b8:	6063      	str	r3, [r4, #4]
 80089ba:	6923      	ldr	r3, [r4, #16]
 80089bc:	6023      	str	r3, [r4, #0]
 80089be:	89a3      	ldrh	r3, [r4, #12]
 80089c0:	f043 0308 	orr.w	r3, r3, #8
 80089c4:	81a3      	strh	r3, [r4, #12]
 80089c6:	6923      	ldr	r3, [r4, #16]
 80089c8:	b94b      	cbnz	r3, 80089de <__swsetup_r+0x9a>
 80089ca:	89a3      	ldrh	r3, [r4, #12]
 80089cc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80089d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80089d4:	d003      	beq.n	80089de <__swsetup_r+0x9a>
 80089d6:	4621      	mov	r1, r4
 80089d8:	4630      	mov	r0, r6
 80089da:	f001 fbed 	bl	800a1b8 <__smakebuf_r>
 80089de:	89a0      	ldrh	r0, [r4, #12]
 80089e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80089e4:	f010 0301 	ands.w	r3, r0, #1
 80089e8:	d00a      	beq.n	8008a00 <__swsetup_r+0xbc>
 80089ea:	2300      	movs	r3, #0
 80089ec:	60a3      	str	r3, [r4, #8]
 80089ee:	6963      	ldr	r3, [r4, #20]
 80089f0:	425b      	negs	r3, r3
 80089f2:	61a3      	str	r3, [r4, #24]
 80089f4:	6923      	ldr	r3, [r4, #16]
 80089f6:	b943      	cbnz	r3, 8008a0a <__swsetup_r+0xc6>
 80089f8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80089fc:	d1ba      	bne.n	8008974 <__swsetup_r+0x30>
 80089fe:	bd70      	pop	{r4, r5, r6, pc}
 8008a00:	0781      	lsls	r1, r0, #30
 8008a02:	bf58      	it	pl
 8008a04:	6963      	ldrpl	r3, [r4, #20]
 8008a06:	60a3      	str	r3, [r4, #8]
 8008a08:	e7f4      	b.n	80089f4 <__swsetup_r+0xb0>
 8008a0a:	2000      	movs	r0, #0
 8008a0c:	e7f7      	b.n	80089fe <__swsetup_r+0xba>
 8008a0e:	bf00      	nop
 8008a10:	20000078 	.word	0x20000078
 8008a14:	0800b9fc 	.word	0x0800b9fc
 8008a18:	0800ba1c 	.word	0x0800ba1c
 8008a1c:	0800b9dc 	.word	0x0800b9dc

08008a20 <quorem>:
 8008a20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a24:	6903      	ldr	r3, [r0, #16]
 8008a26:	690c      	ldr	r4, [r1, #16]
 8008a28:	42a3      	cmp	r3, r4
 8008a2a:	4607      	mov	r7, r0
 8008a2c:	f2c0 8081 	blt.w	8008b32 <quorem+0x112>
 8008a30:	3c01      	subs	r4, #1
 8008a32:	f101 0814 	add.w	r8, r1, #20
 8008a36:	f100 0514 	add.w	r5, r0, #20
 8008a3a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008a3e:	9301      	str	r3, [sp, #4]
 8008a40:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008a44:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008a48:	3301      	adds	r3, #1
 8008a4a:	429a      	cmp	r2, r3
 8008a4c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008a50:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008a54:	fbb2 f6f3 	udiv	r6, r2, r3
 8008a58:	d331      	bcc.n	8008abe <quorem+0x9e>
 8008a5a:	f04f 0e00 	mov.w	lr, #0
 8008a5e:	4640      	mov	r0, r8
 8008a60:	46ac      	mov	ip, r5
 8008a62:	46f2      	mov	sl, lr
 8008a64:	f850 2b04 	ldr.w	r2, [r0], #4
 8008a68:	b293      	uxth	r3, r2
 8008a6a:	fb06 e303 	mla	r3, r6, r3, lr
 8008a6e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008a72:	b29b      	uxth	r3, r3
 8008a74:	ebaa 0303 	sub.w	r3, sl, r3
 8008a78:	f8dc a000 	ldr.w	sl, [ip]
 8008a7c:	0c12      	lsrs	r2, r2, #16
 8008a7e:	fa13 f38a 	uxtah	r3, r3, sl
 8008a82:	fb06 e202 	mla	r2, r6, r2, lr
 8008a86:	9300      	str	r3, [sp, #0]
 8008a88:	9b00      	ldr	r3, [sp, #0]
 8008a8a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008a8e:	b292      	uxth	r2, r2
 8008a90:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008a94:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008a98:	f8bd 3000 	ldrh.w	r3, [sp]
 8008a9c:	4581      	cmp	r9, r0
 8008a9e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008aa2:	f84c 3b04 	str.w	r3, [ip], #4
 8008aa6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008aaa:	d2db      	bcs.n	8008a64 <quorem+0x44>
 8008aac:	f855 300b 	ldr.w	r3, [r5, fp]
 8008ab0:	b92b      	cbnz	r3, 8008abe <quorem+0x9e>
 8008ab2:	9b01      	ldr	r3, [sp, #4]
 8008ab4:	3b04      	subs	r3, #4
 8008ab6:	429d      	cmp	r5, r3
 8008ab8:	461a      	mov	r2, r3
 8008aba:	d32e      	bcc.n	8008b1a <quorem+0xfa>
 8008abc:	613c      	str	r4, [r7, #16]
 8008abe:	4638      	mov	r0, r7
 8008ac0:	f001 fea0 	bl	800a804 <__mcmp>
 8008ac4:	2800      	cmp	r0, #0
 8008ac6:	db24      	blt.n	8008b12 <quorem+0xf2>
 8008ac8:	3601      	adds	r6, #1
 8008aca:	4628      	mov	r0, r5
 8008acc:	f04f 0c00 	mov.w	ip, #0
 8008ad0:	f858 2b04 	ldr.w	r2, [r8], #4
 8008ad4:	f8d0 e000 	ldr.w	lr, [r0]
 8008ad8:	b293      	uxth	r3, r2
 8008ada:	ebac 0303 	sub.w	r3, ip, r3
 8008ade:	0c12      	lsrs	r2, r2, #16
 8008ae0:	fa13 f38e 	uxtah	r3, r3, lr
 8008ae4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008ae8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008aec:	b29b      	uxth	r3, r3
 8008aee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008af2:	45c1      	cmp	r9, r8
 8008af4:	f840 3b04 	str.w	r3, [r0], #4
 8008af8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008afc:	d2e8      	bcs.n	8008ad0 <quorem+0xb0>
 8008afe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008b02:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008b06:	b922      	cbnz	r2, 8008b12 <quorem+0xf2>
 8008b08:	3b04      	subs	r3, #4
 8008b0a:	429d      	cmp	r5, r3
 8008b0c:	461a      	mov	r2, r3
 8008b0e:	d30a      	bcc.n	8008b26 <quorem+0x106>
 8008b10:	613c      	str	r4, [r7, #16]
 8008b12:	4630      	mov	r0, r6
 8008b14:	b003      	add	sp, #12
 8008b16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b1a:	6812      	ldr	r2, [r2, #0]
 8008b1c:	3b04      	subs	r3, #4
 8008b1e:	2a00      	cmp	r2, #0
 8008b20:	d1cc      	bne.n	8008abc <quorem+0x9c>
 8008b22:	3c01      	subs	r4, #1
 8008b24:	e7c7      	b.n	8008ab6 <quorem+0x96>
 8008b26:	6812      	ldr	r2, [r2, #0]
 8008b28:	3b04      	subs	r3, #4
 8008b2a:	2a00      	cmp	r2, #0
 8008b2c:	d1f0      	bne.n	8008b10 <quorem+0xf0>
 8008b2e:	3c01      	subs	r4, #1
 8008b30:	e7eb      	b.n	8008b0a <quorem+0xea>
 8008b32:	2000      	movs	r0, #0
 8008b34:	e7ee      	b.n	8008b14 <quorem+0xf4>
	...

08008b38 <_dtoa_r>:
 8008b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b3c:	ed2d 8b04 	vpush	{d8-d9}
 8008b40:	ec57 6b10 	vmov	r6, r7, d0
 8008b44:	b093      	sub	sp, #76	; 0x4c
 8008b46:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008b48:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008b4c:	9106      	str	r1, [sp, #24]
 8008b4e:	ee10 aa10 	vmov	sl, s0
 8008b52:	4604      	mov	r4, r0
 8008b54:	9209      	str	r2, [sp, #36]	; 0x24
 8008b56:	930c      	str	r3, [sp, #48]	; 0x30
 8008b58:	46bb      	mov	fp, r7
 8008b5a:	b975      	cbnz	r5, 8008b7a <_dtoa_r+0x42>
 8008b5c:	2010      	movs	r0, #16
 8008b5e:	f001 fb6b 	bl	800a238 <malloc>
 8008b62:	4602      	mov	r2, r0
 8008b64:	6260      	str	r0, [r4, #36]	; 0x24
 8008b66:	b920      	cbnz	r0, 8008b72 <_dtoa_r+0x3a>
 8008b68:	4ba7      	ldr	r3, [pc, #668]	; (8008e08 <_dtoa_r+0x2d0>)
 8008b6a:	21ea      	movs	r1, #234	; 0xea
 8008b6c:	48a7      	ldr	r0, [pc, #668]	; (8008e0c <_dtoa_r+0x2d4>)
 8008b6e:	f002 fc79 	bl	800b464 <__assert_func>
 8008b72:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008b76:	6005      	str	r5, [r0, #0]
 8008b78:	60c5      	str	r5, [r0, #12]
 8008b7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008b7c:	6819      	ldr	r1, [r3, #0]
 8008b7e:	b151      	cbz	r1, 8008b96 <_dtoa_r+0x5e>
 8008b80:	685a      	ldr	r2, [r3, #4]
 8008b82:	604a      	str	r2, [r1, #4]
 8008b84:	2301      	movs	r3, #1
 8008b86:	4093      	lsls	r3, r2
 8008b88:	608b      	str	r3, [r1, #8]
 8008b8a:	4620      	mov	r0, r4
 8008b8c:	f001 fbae 	bl	800a2ec <_Bfree>
 8008b90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008b92:	2200      	movs	r2, #0
 8008b94:	601a      	str	r2, [r3, #0]
 8008b96:	1e3b      	subs	r3, r7, #0
 8008b98:	bfaa      	itet	ge
 8008b9a:	2300      	movge	r3, #0
 8008b9c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008ba0:	f8c8 3000 	strge.w	r3, [r8]
 8008ba4:	4b9a      	ldr	r3, [pc, #616]	; (8008e10 <_dtoa_r+0x2d8>)
 8008ba6:	bfbc      	itt	lt
 8008ba8:	2201      	movlt	r2, #1
 8008baa:	f8c8 2000 	strlt.w	r2, [r8]
 8008bae:	ea33 030b 	bics.w	r3, r3, fp
 8008bb2:	d11b      	bne.n	8008bec <_dtoa_r+0xb4>
 8008bb4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008bb6:	f242 730f 	movw	r3, #9999	; 0x270f
 8008bba:	6013      	str	r3, [r2, #0]
 8008bbc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008bc0:	4333      	orrs	r3, r6
 8008bc2:	f000 8592 	beq.w	80096ea <_dtoa_r+0xbb2>
 8008bc6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008bc8:	b963      	cbnz	r3, 8008be4 <_dtoa_r+0xac>
 8008bca:	4b92      	ldr	r3, [pc, #584]	; (8008e14 <_dtoa_r+0x2dc>)
 8008bcc:	e022      	b.n	8008c14 <_dtoa_r+0xdc>
 8008bce:	4b92      	ldr	r3, [pc, #584]	; (8008e18 <_dtoa_r+0x2e0>)
 8008bd0:	9301      	str	r3, [sp, #4]
 8008bd2:	3308      	adds	r3, #8
 8008bd4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008bd6:	6013      	str	r3, [r2, #0]
 8008bd8:	9801      	ldr	r0, [sp, #4]
 8008bda:	b013      	add	sp, #76	; 0x4c
 8008bdc:	ecbd 8b04 	vpop	{d8-d9}
 8008be0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008be4:	4b8b      	ldr	r3, [pc, #556]	; (8008e14 <_dtoa_r+0x2dc>)
 8008be6:	9301      	str	r3, [sp, #4]
 8008be8:	3303      	adds	r3, #3
 8008bea:	e7f3      	b.n	8008bd4 <_dtoa_r+0x9c>
 8008bec:	2200      	movs	r2, #0
 8008bee:	2300      	movs	r3, #0
 8008bf0:	4650      	mov	r0, sl
 8008bf2:	4659      	mov	r1, fp
 8008bf4:	f7f7 ff78 	bl	8000ae8 <__aeabi_dcmpeq>
 8008bf8:	ec4b ab19 	vmov	d9, sl, fp
 8008bfc:	4680      	mov	r8, r0
 8008bfe:	b158      	cbz	r0, 8008c18 <_dtoa_r+0xe0>
 8008c00:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008c02:	2301      	movs	r3, #1
 8008c04:	6013      	str	r3, [r2, #0]
 8008c06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	f000 856b 	beq.w	80096e4 <_dtoa_r+0xbac>
 8008c0e:	4883      	ldr	r0, [pc, #524]	; (8008e1c <_dtoa_r+0x2e4>)
 8008c10:	6018      	str	r0, [r3, #0]
 8008c12:	1e43      	subs	r3, r0, #1
 8008c14:	9301      	str	r3, [sp, #4]
 8008c16:	e7df      	b.n	8008bd8 <_dtoa_r+0xa0>
 8008c18:	ec4b ab10 	vmov	d0, sl, fp
 8008c1c:	aa10      	add	r2, sp, #64	; 0x40
 8008c1e:	a911      	add	r1, sp, #68	; 0x44
 8008c20:	4620      	mov	r0, r4
 8008c22:	f001 ff11 	bl	800aa48 <__d2b>
 8008c26:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8008c2a:	ee08 0a10 	vmov	s16, r0
 8008c2e:	2d00      	cmp	r5, #0
 8008c30:	f000 8084 	beq.w	8008d3c <_dtoa_r+0x204>
 8008c34:	ee19 3a90 	vmov	r3, s19
 8008c38:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008c3c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008c40:	4656      	mov	r6, sl
 8008c42:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008c46:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008c4a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8008c4e:	4b74      	ldr	r3, [pc, #464]	; (8008e20 <_dtoa_r+0x2e8>)
 8008c50:	2200      	movs	r2, #0
 8008c52:	4630      	mov	r0, r6
 8008c54:	4639      	mov	r1, r7
 8008c56:	f7f7 fb27 	bl	80002a8 <__aeabi_dsub>
 8008c5a:	a365      	add	r3, pc, #404	; (adr r3, 8008df0 <_dtoa_r+0x2b8>)
 8008c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c60:	f7f7 fcda 	bl	8000618 <__aeabi_dmul>
 8008c64:	a364      	add	r3, pc, #400	; (adr r3, 8008df8 <_dtoa_r+0x2c0>)
 8008c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c6a:	f7f7 fb1f 	bl	80002ac <__adddf3>
 8008c6e:	4606      	mov	r6, r0
 8008c70:	4628      	mov	r0, r5
 8008c72:	460f      	mov	r7, r1
 8008c74:	f7f7 fc66 	bl	8000544 <__aeabi_i2d>
 8008c78:	a361      	add	r3, pc, #388	; (adr r3, 8008e00 <_dtoa_r+0x2c8>)
 8008c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c7e:	f7f7 fccb 	bl	8000618 <__aeabi_dmul>
 8008c82:	4602      	mov	r2, r0
 8008c84:	460b      	mov	r3, r1
 8008c86:	4630      	mov	r0, r6
 8008c88:	4639      	mov	r1, r7
 8008c8a:	f7f7 fb0f 	bl	80002ac <__adddf3>
 8008c8e:	4606      	mov	r6, r0
 8008c90:	460f      	mov	r7, r1
 8008c92:	f7f7 ff71 	bl	8000b78 <__aeabi_d2iz>
 8008c96:	2200      	movs	r2, #0
 8008c98:	9000      	str	r0, [sp, #0]
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	4630      	mov	r0, r6
 8008c9e:	4639      	mov	r1, r7
 8008ca0:	f7f7 ff2c 	bl	8000afc <__aeabi_dcmplt>
 8008ca4:	b150      	cbz	r0, 8008cbc <_dtoa_r+0x184>
 8008ca6:	9800      	ldr	r0, [sp, #0]
 8008ca8:	f7f7 fc4c 	bl	8000544 <__aeabi_i2d>
 8008cac:	4632      	mov	r2, r6
 8008cae:	463b      	mov	r3, r7
 8008cb0:	f7f7 ff1a 	bl	8000ae8 <__aeabi_dcmpeq>
 8008cb4:	b910      	cbnz	r0, 8008cbc <_dtoa_r+0x184>
 8008cb6:	9b00      	ldr	r3, [sp, #0]
 8008cb8:	3b01      	subs	r3, #1
 8008cba:	9300      	str	r3, [sp, #0]
 8008cbc:	9b00      	ldr	r3, [sp, #0]
 8008cbe:	2b16      	cmp	r3, #22
 8008cc0:	d85a      	bhi.n	8008d78 <_dtoa_r+0x240>
 8008cc2:	9a00      	ldr	r2, [sp, #0]
 8008cc4:	4b57      	ldr	r3, [pc, #348]	; (8008e24 <_dtoa_r+0x2ec>)
 8008cc6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cce:	ec51 0b19 	vmov	r0, r1, d9
 8008cd2:	f7f7 ff13 	bl	8000afc <__aeabi_dcmplt>
 8008cd6:	2800      	cmp	r0, #0
 8008cd8:	d050      	beq.n	8008d7c <_dtoa_r+0x244>
 8008cda:	9b00      	ldr	r3, [sp, #0]
 8008cdc:	3b01      	subs	r3, #1
 8008cde:	9300      	str	r3, [sp, #0]
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	930b      	str	r3, [sp, #44]	; 0x2c
 8008ce4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008ce6:	1b5d      	subs	r5, r3, r5
 8008ce8:	1e6b      	subs	r3, r5, #1
 8008cea:	9305      	str	r3, [sp, #20]
 8008cec:	bf45      	ittet	mi
 8008cee:	f1c5 0301 	rsbmi	r3, r5, #1
 8008cf2:	9304      	strmi	r3, [sp, #16]
 8008cf4:	2300      	movpl	r3, #0
 8008cf6:	2300      	movmi	r3, #0
 8008cf8:	bf4c      	ite	mi
 8008cfa:	9305      	strmi	r3, [sp, #20]
 8008cfc:	9304      	strpl	r3, [sp, #16]
 8008cfe:	9b00      	ldr	r3, [sp, #0]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	db3d      	blt.n	8008d80 <_dtoa_r+0x248>
 8008d04:	9b05      	ldr	r3, [sp, #20]
 8008d06:	9a00      	ldr	r2, [sp, #0]
 8008d08:	920a      	str	r2, [sp, #40]	; 0x28
 8008d0a:	4413      	add	r3, r2
 8008d0c:	9305      	str	r3, [sp, #20]
 8008d0e:	2300      	movs	r3, #0
 8008d10:	9307      	str	r3, [sp, #28]
 8008d12:	9b06      	ldr	r3, [sp, #24]
 8008d14:	2b09      	cmp	r3, #9
 8008d16:	f200 8089 	bhi.w	8008e2c <_dtoa_r+0x2f4>
 8008d1a:	2b05      	cmp	r3, #5
 8008d1c:	bfc4      	itt	gt
 8008d1e:	3b04      	subgt	r3, #4
 8008d20:	9306      	strgt	r3, [sp, #24]
 8008d22:	9b06      	ldr	r3, [sp, #24]
 8008d24:	f1a3 0302 	sub.w	r3, r3, #2
 8008d28:	bfcc      	ite	gt
 8008d2a:	2500      	movgt	r5, #0
 8008d2c:	2501      	movle	r5, #1
 8008d2e:	2b03      	cmp	r3, #3
 8008d30:	f200 8087 	bhi.w	8008e42 <_dtoa_r+0x30a>
 8008d34:	e8df f003 	tbb	[pc, r3]
 8008d38:	59383a2d 	.word	0x59383a2d
 8008d3c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008d40:	441d      	add	r5, r3
 8008d42:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008d46:	2b20      	cmp	r3, #32
 8008d48:	bfc1      	itttt	gt
 8008d4a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008d4e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008d52:	fa0b f303 	lslgt.w	r3, fp, r3
 8008d56:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008d5a:	bfda      	itte	le
 8008d5c:	f1c3 0320 	rsble	r3, r3, #32
 8008d60:	fa06 f003 	lslle.w	r0, r6, r3
 8008d64:	4318      	orrgt	r0, r3
 8008d66:	f7f7 fbdd 	bl	8000524 <__aeabi_ui2d>
 8008d6a:	2301      	movs	r3, #1
 8008d6c:	4606      	mov	r6, r0
 8008d6e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008d72:	3d01      	subs	r5, #1
 8008d74:	930e      	str	r3, [sp, #56]	; 0x38
 8008d76:	e76a      	b.n	8008c4e <_dtoa_r+0x116>
 8008d78:	2301      	movs	r3, #1
 8008d7a:	e7b2      	b.n	8008ce2 <_dtoa_r+0x1aa>
 8008d7c:	900b      	str	r0, [sp, #44]	; 0x2c
 8008d7e:	e7b1      	b.n	8008ce4 <_dtoa_r+0x1ac>
 8008d80:	9b04      	ldr	r3, [sp, #16]
 8008d82:	9a00      	ldr	r2, [sp, #0]
 8008d84:	1a9b      	subs	r3, r3, r2
 8008d86:	9304      	str	r3, [sp, #16]
 8008d88:	4253      	negs	r3, r2
 8008d8a:	9307      	str	r3, [sp, #28]
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	930a      	str	r3, [sp, #40]	; 0x28
 8008d90:	e7bf      	b.n	8008d12 <_dtoa_r+0x1da>
 8008d92:	2300      	movs	r3, #0
 8008d94:	9308      	str	r3, [sp, #32]
 8008d96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	dc55      	bgt.n	8008e48 <_dtoa_r+0x310>
 8008d9c:	2301      	movs	r3, #1
 8008d9e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008da2:	461a      	mov	r2, r3
 8008da4:	9209      	str	r2, [sp, #36]	; 0x24
 8008da6:	e00c      	b.n	8008dc2 <_dtoa_r+0x28a>
 8008da8:	2301      	movs	r3, #1
 8008daa:	e7f3      	b.n	8008d94 <_dtoa_r+0x25c>
 8008dac:	2300      	movs	r3, #0
 8008dae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008db0:	9308      	str	r3, [sp, #32]
 8008db2:	9b00      	ldr	r3, [sp, #0]
 8008db4:	4413      	add	r3, r2
 8008db6:	9302      	str	r3, [sp, #8]
 8008db8:	3301      	adds	r3, #1
 8008dba:	2b01      	cmp	r3, #1
 8008dbc:	9303      	str	r3, [sp, #12]
 8008dbe:	bfb8      	it	lt
 8008dc0:	2301      	movlt	r3, #1
 8008dc2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	6042      	str	r2, [r0, #4]
 8008dc8:	2204      	movs	r2, #4
 8008dca:	f102 0614 	add.w	r6, r2, #20
 8008dce:	429e      	cmp	r6, r3
 8008dd0:	6841      	ldr	r1, [r0, #4]
 8008dd2:	d93d      	bls.n	8008e50 <_dtoa_r+0x318>
 8008dd4:	4620      	mov	r0, r4
 8008dd6:	f001 fa49 	bl	800a26c <_Balloc>
 8008dda:	9001      	str	r0, [sp, #4]
 8008ddc:	2800      	cmp	r0, #0
 8008dde:	d13b      	bne.n	8008e58 <_dtoa_r+0x320>
 8008de0:	4b11      	ldr	r3, [pc, #68]	; (8008e28 <_dtoa_r+0x2f0>)
 8008de2:	4602      	mov	r2, r0
 8008de4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008de8:	e6c0      	b.n	8008b6c <_dtoa_r+0x34>
 8008dea:	2301      	movs	r3, #1
 8008dec:	e7df      	b.n	8008dae <_dtoa_r+0x276>
 8008dee:	bf00      	nop
 8008df0:	636f4361 	.word	0x636f4361
 8008df4:	3fd287a7 	.word	0x3fd287a7
 8008df8:	8b60c8b3 	.word	0x8b60c8b3
 8008dfc:	3fc68a28 	.word	0x3fc68a28
 8008e00:	509f79fb 	.word	0x509f79fb
 8008e04:	3fd34413 	.word	0x3fd34413
 8008e08:	0800b956 	.word	0x0800b956
 8008e0c:	0800b96d 	.word	0x0800b96d
 8008e10:	7ff00000 	.word	0x7ff00000
 8008e14:	0800b952 	.word	0x0800b952
 8008e18:	0800b949 	.word	0x0800b949
 8008e1c:	0800b7c9 	.word	0x0800b7c9
 8008e20:	3ff80000 	.word	0x3ff80000
 8008e24:	0800bb40 	.word	0x0800bb40
 8008e28:	0800b9c8 	.word	0x0800b9c8
 8008e2c:	2501      	movs	r5, #1
 8008e2e:	2300      	movs	r3, #0
 8008e30:	9306      	str	r3, [sp, #24]
 8008e32:	9508      	str	r5, [sp, #32]
 8008e34:	f04f 33ff 	mov.w	r3, #4294967295
 8008e38:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	2312      	movs	r3, #18
 8008e40:	e7b0      	b.n	8008da4 <_dtoa_r+0x26c>
 8008e42:	2301      	movs	r3, #1
 8008e44:	9308      	str	r3, [sp, #32]
 8008e46:	e7f5      	b.n	8008e34 <_dtoa_r+0x2fc>
 8008e48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e4a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008e4e:	e7b8      	b.n	8008dc2 <_dtoa_r+0x28a>
 8008e50:	3101      	adds	r1, #1
 8008e52:	6041      	str	r1, [r0, #4]
 8008e54:	0052      	lsls	r2, r2, #1
 8008e56:	e7b8      	b.n	8008dca <_dtoa_r+0x292>
 8008e58:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e5a:	9a01      	ldr	r2, [sp, #4]
 8008e5c:	601a      	str	r2, [r3, #0]
 8008e5e:	9b03      	ldr	r3, [sp, #12]
 8008e60:	2b0e      	cmp	r3, #14
 8008e62:	f200 809d 	bhi.w	8008fa0 <_dtoa_r+0x468>
 8008e66:	2d00      	cmp	r5, #0
 8008e68:	f000 809a 	beq.w	8008fa0 <_dtoa_r+0x468>
 8008e6c:	9b00      	ldr	r3, [sp, #0]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	dd32      	ble.n	8008ed8 <_dtoa_r+0x3a0>
 8008e72:	4ab7      	ldr	r2, [pc, #732]	; (8009150 <_dtoa_r+0x618>)
 8008e74:	f003 030f 	and.w	r3, r3, #15
 8008e78:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008e7c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008e80:	9b00      	ldr	r3, [sp, #0]
 8008e82:	05d8      	lsls	r0, r3, #23
 8008e84:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008e88:	d516      	bpl.n	8008eb8 <_dtoa_r+0x380>
 8008e8a:	4bb2      	ldr	r3, [pc, #712]	; (8009154 <_dtoa_r+0x61c>)
 8008e8c:	ec51 0b19 	vmov	r0, r1, d9
 8008e90:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008e94:	f7f7 fcea 	bl	800086c <__aeabi_ddiv>
 8008e98:	f007 070f 	and.w	r7, r7, #15
 8008e9c:	4682      	mov	sl, r0
 8008e9e:	468b      	mov	fp, r1
 8008ea0:	2503      	movs	r5, #3
 8008ea2:	4eac      	ldr	r6, [pc, #688]	; (8009154 <_dtoa_r+0x61c>)
 8008ea4:	b957      	cbnz	r7, 8008ebc <_dtoa_r+0x384>
 8008ea6:	4642      	mov	r2, r8
 8008ea8:	464b      	mov	r3, r9
 8008eaa:	4650      	mov	r0, sl
 8008eac:	4659      	mov	r1, fp
 8008eae:	f7f7 fcdd 	bl	800086c <__aeabi_ddiv>
 8008eb2:	4682      	mov	sl, r0
 8008eb4:	468b      	mov	fp, r1
 8008eb6:	e028      	b.n	8008f0a <_dtoa_r+0x3d2>
 8008eb8:	2502      	movs	r5, #2
 8008eba:	e7f2      	b.n	8008ea2 <_dtoa_r+0x36a>
 8008ebc:	07f9      	lsls	r1, r7, #31
 8008ebe:	d508      	bpl.n	8008ed2 <_dtoa_r+0x39a>
 8008ec0:	4640      	mov	r0, r8
 8008ec2:	4649      	mov	r1, r9
 8008ec4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008ec8:	f7f7 fba6 	bl	8000618 <__aeabi_dmul>
 8008ecc:	3501      	adds	r5, #1
 8008ece:	4680      	mov	r8, r0
 8008ed0:	4689      	mov	r9, r1
 8008ed2:	107f      	asrs	r7, r7, #1
 8008ed4:	3608      	adds	r6, #8
 8008ed6:	e7e5      	b.n	8008ea4 <_dtoa_r+0x36c>
 8008ed8:	f000 809b 	beq.w	8009012 <_dtoa_r+0x4da>
 8008edc:	9b00      	ldr	r3, [sp, #0]
 8008ede:	4f9d      	ldr	r7, [pc, #628]	; (8009154 <_dtoa_r+0x61c>)
 8008ee0:	425e      	negs	r6, r3
 8008ee2:	4b9b      	ldr	r3, [pc, #620]	; (8009150 <_dtoa_r+0x618>)
 8008ee4:	f006 020f 	and.w	r2, r6, #15
 8008ee8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ef0:	ec51 0b19 	vmov	r0, r1, d9
 8008ef4:	f7f7 fb90 	bl	8000618 <__aeabi_dmul>
 8008ef8:	1136      	asrs	r6, r6, #4
 8008efa:	4682      	mov	sl, r0
 8008efc:	468b      	mov	fp, r1
 8008efe:	2300      	movs	r3, #0
 8008f00:	2502      	movs	r5, #2
 8008f02:	2e00      	cmp	r6, #0
 8008f04:	d17a      	bne.n	8008ffc <_dtoa_r+0x4c4>
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d1d3      	bne.n	8008eb2 <_dtoa_r+0x37a>
 8008f0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	f000 8082 	beq.w	8009016 <_dtoa_r+0x4de>
 8008f12:	4b91      	ldr	r3, [pc, #580]	; (8009158 <_dtoa_r+0x620>)
 8008f14:	2200      	movs	r2, #0
 8008f16:	4650      	mov	r0, sl
 8008f18:	4659      	mov	r1, fp
 8008f1a:	f7f7 fdef 	bl	8000afc <__aeabi_dcmplt>
 8008f1e:	2800      	cmp	r0, #0
 8008f20:	d079      	beq.n	8009016 <_dtoa_r+0x4de>
 8008f22:	9b03      	ldr	r3, [sp, #12]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d076      	beq.n	8009016 <_dtoa_r+0x4de>
 8008f28:	9b02      	ldr	r3, [sp, #8]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	dd36      	ble.n	8008f9c <_dtoa_r+0x464>
 8008f2e:	9b00      	ldr	r3, [sp, #0]
 8008f30:	4650      	mov	r0, sl
 8008f32:	4659      	mov	r1, fp
 8008f34:	1e5f      	subs	r7, r3, #1
 8008f36:	2200      	movs	r2, #0
 8008f38:	4b88      	ldr	r3, [pc, #544]	; (800915c <_dtoa_r+0x624>)
 8008f3a:	f7f7 fb6d 	bl	8000618 <__aeabi_dmul>
 8008f3e:	9e02      	ldr	r6, [sp, #8]
 8008f40:	4682      	mov	sl, r0
 8008f42:	468b      	mov	fp, r1
 8008f44:	3501      	adds	r5, #1
 8008f46:	4628      	mov	r0, r5
 8008f48:	f7f7 fafc 	bl	8000544 <__aeabi_i2d>
 8008f4c:	4652      	mov	r2, sl
 8008f4e:	465b      	mov	r3, fp
 8008f50:	f7f7 fb62 	bl	8000618 <__aeabi_dmul>
 8008f54:	4b82      	ldr	r3, [pc, #520]	; (8009160 <_dtoa_r+0x628>)
 8008f56:	2200      	movs	r2, #0
 8008f58:	f7f7 f9a8 	bl	80002ac <__adddf3>
 8008f5c:	46d0      	mov	r8, sl
 8008f5e:	46d9      	mov	r9, fp
 8008f60:	4682      	mov	sl, r0
 8008f62:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8008f66:	2e00      	cmp	r6, #0
 8008f68:	d158      	bne.n	800901c <_dtoa_r+0x4e4>
 8008f6a:	4b7e      	ldr	r3, [pc, #504]	; (8009164 <_dtoa_r+0x62c>)
 8008f6c:	2200      	movs	r2, #0
 8008f6e:	4640      	mov	r0, r8
 8008f70:	4649      	mov	r1, r9
 8008f72:	f7f7 f999 	bl	80002a8 <__aeabi_dsub>
 8008f76:	4652      	mov	r2, sl
 8008f78:	465b      	mov	r3, fp
 8008f7a:	4680      	mov	r8, r0
 8008f7c:	4689      	mov	r9, r1
 8008f7e:	f7f7 fddb 	bl	8000b38 <__aeabi_dcmpgt>
 8008f82:	2800      	cmp	r0, #0
 8008f84:	f040 8295 	bne.w	80094b2 <_dtoa_r+0x97a>
 8008f88:	4652      	mov	r2, sl
 8008f8a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008f8e:	4640      	mov	r0, r8
 8008f90:	4649      	mov	r1, r9
 8008f92:	f7f7 fdb3 	bl	8000afc <__aeabi_dcmplt>
 8008f96:	2800      	cmp	r0, #0
 8008f98:	f040 8289 	bne.w	80094ae <_dtoa_r+0x976>
 8008f9c:	ec5b ab19 	vmov	sl, fp, d9
 8008fa0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	f2c0 8148 	blt.w	8009238 <_dtoa_r+0x700>
 8008fa8:	9a00      	ldr	r2, [sp, #0]
 8008faa:	2a0e      	cmp	r2, #14
 8008fac:	f300 8144 	bgt.w	8009238 <_dtoa_r+0x700>
 8008fb0:	4b67      	ldr	r3, [pc, #412]	; (8009150 <_dtoa_r+0x618>)
 8008fb2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008fb6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008fba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	f280 80d5 	bge.w	800916c <_dtoa_r+0x634>
 8008fc2:	9b03      	ldr	r3, [sp, #12]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	f300 80d1 	bgt.w	800916c <_dtoa_r+0x634>
 8008fca:	f040 826f 	bne.w	80094ac <_dtoa_r+0x974>
 8008fce:	4b65      	ldr	r3, [pc, #404]	; (8009164 <_dtoa_r+0x62c>)
 8008fd0:	2200      	movs	r2, #0
 8008fd2:	4640      	mov	r0, r8
 8008fd4:	4649      	mov	r1, r9
 8008fd6:	f7f7 fb1f 	bl	8000618 <__aeabi_dmul>
 8008fda:	4652      	mov	r2, sl
 8008fdc:	465b      	mov	r3, fp
 8008fde:	f7f7 fda1 	bl	8000b24 <__aeabi_dcmpge>
 8008fe2:	9e03      	ldr	r6, [sp, #12]
 8008fe4:	4637      	mov	r7, r6
 8008fe6:	2800      	cmp	r0, #0
 8008fe8:	f040 8245 	bne.w	8009476 <_dtoa_r+0x93e>
 8008fec:	9d01      	ldr	r5, [sp, #4]
 8008fee:	2331      	movs	r3, #49	; 0x31
 8008ff0:	f805 3b01 	strb.w	r3, [r5], #1
 8008ff4:	9b00      	ldr	r3, [sp, #0]
 8008ff6:	3301      	adds	r3, #1
 8008ff8:	9300      	str	r3, [sp, #0]
 8008ffa:	e240      	b.n	800947e <_dtoa_r+0x946>
 8008ffc:	07f2      	lsls	r2, r6, #31
 8008ffe:	d505      	bpl.n	800900c <_dtoa_r+0x4d4>
 8009000:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009004:	f7f7 fb08 	bl	8000618 <__aeabi_dmul>
 8009008:	3501      	adds	r5, #1
 800900a:	2301      	movs	r3, #1
 800900c:	1076      	asrs	r6, r6, #1
 800900e:	3708      	adds	r7, #8
 8009010:	e777      	b.n	8008f02 <_dtoa_r+0x3ca>
 8009012:	2502      	movs	r5, #2
 8009014:	e779      	b.n	8008f0a <_dtoa_r+0x3d2>
 8009016:	9f00      	ldr	r7, [sp, #0]
 8009018:	9e03      	ldr	r6, [sp, #12]
 800901a:	e794      	b.n	8008f46 <_dtoa_r+0x40e>
 800901c:	9901      	ldr	r1, [sp, #4]
 800901e:	4b4c      	ldr	r3, [pc, #304]	; (8009150 <_dtoa_r+0x618>)
 8009020:	4431      	add	r1, r6
 8009022:	910d      	str	r1, [sp, #52]	; 0x34
 8009024:	9908      	ldr	r1, [sp, #32]
 8009026:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800902a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800902e:	2900      	cmp	r1, #0
 8009030:	d043      	beq.n	80090ba <_dtoa_r+0x582>
 8009032:	494d      	ldr	r1, [pc, #308]	; (8009168 <_dtoa_r+0x630>)
 8009034:	2000      	movs	r0, #0
 8009036:	f7f7 fc19 	bl	800086c <__aeabi_ddiv>
 800903a:	4652      	mov	r2, sl
 800903c:	465b      	mov	r3, fp
 800903e:	f7f7 f933 	bl	80002a8 <__aeabi_dsub>
 8009042:	9d01      	ldr	r5, [sp, #4]
 8009044:	4682      	mov	sl, r0
 8009046:	468b      	mov	fp, r1
 8009048:	4649      	mov	r1, r9
 800904a:	4640      	mov	r0, r8
 800904c:	f7f7 fd94 	bl	8000b78 <__aeabi_d2iz>
 8009050:	4606      	mov	r6, r0
 8009052:	f7f7 fa77 	bl	8000544 <__aeabi_i2d>
 8009056:	4602      	mov	r2, r0
 8009058:	460b      	mov	r3, r1
 800905a:	4640      	mov	r0, r8
 800905c:	4649      	mov	r1, r9
 800905e:	f7f7 f923 	bl	80002a8 <__aeabi_dsub>
 8009062:	3630      	adds	r6, #48	; 0x30
 8009064:	f805 6b01 	strb.w	r6, [r5], #1
 8009068:	4652      	mov	r2, sl
 800906a:	465b      	mov	r3, fp
 800906c:	4680      	mov	r8, r0
 800906e:	4689      	mov	r9, r1
 8009070:	f7f7 fd44 	bl	8000afc <__aeabi_dcmplt>
 8009074:	2800      	cmp	r0, #0
 8009076:	d163      	bne.n	8009140 <_dtoa_r+0x608>
 8009078:	4642      	mov	r2, r8
 800907a:	464b      	mov	r3, r9
 800907c:	4936      	ldr	r1, [pc, #216]	; (8009158 <_dtoa_r+0x620>)
 800907e:	2000      	movs	r0, #0
 8009080:	f7f7 f912 	bl	80002a8 <__aeabi_dsub>
 8009084:	4652      	mov	r2, sl
 8009086:	465b      	mov	r3, fp
 8009088:	f7f7 fd38 	bl	8000afc <__aeabi_dcmplt>
 800908c:	2800      	cmp	r0, #0
 800908e:	f040 80b5 	bne.w	80091fc <_dtoa_r+0x6c4>
 8009092:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009094:	429d      	cmp	r5, r3
 8009096:	d081      	beq.n	8008f9c <_dtoa_r+0x464>
 8009098:	4b30      	ldr	r3, [pc, #192]	; (800915c <_dtoa_r+0x624>)
 800909a:	2200      	movs	r2, #0
 800909c:	4650      	mov	r0, sl
 800909e:	4659      	mov	r1, fp
 80090a0:	f7f7 faba 	bl	8000618 <__aeabi_dmul>
 80090a4:	4b2d      	ldr	r3, [pc, #180]	; (800915c <_dtoa_r+0x624>)
 80090a6:	4682      	mov	sl, r0
 80090a8:	468b      	mov	fp, r1
 80090aa:	4640      	mov	r0, r8
 80090ac:	4649      	mov	r1, r9
 80090ae:	2200      	movs	r2, #0
 80090b0:	f7f7 fab2 	bl	8000618 <__aeabi_dmul>
 80090b4:	4680      	mov	r8, r0
 80090b6:	4689      	mov	r9, r1
 80090b8:	e7c6      	b.n	8009048 <_dtoa_r+0x510>
 80090ba:	4650      	mov	r0, sl
 80090bc:	4659      	mov	r1, fp
 80090be:	f7f7 faab 	bl	8000618 <__aeabi_dmul>
 80090c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80090c4:	9d01      	ldr	r5, [sp, #4]
 80090c6:	930f      	str	r3, [sp, #60]	; 0x3c
 80090c8:	4682      	mov	sl, r0
 80090ca:	468b      	mov	fp, r1
 80090cc:	4649      	mov	r1, r9
 80090ce:	4640      	mov	r0, r8
 80090d0:	f7f7 fd52 	bl	8000b78 <__aeabi_d2iz>
 80090d4:	4606      	mov	r6, r0
 80090d6:	f7f7 fa35 	bl	8000544 <__aeabi_i2d>
 80090da:	3630      	adds	r6, #48	; 0x30
 80090dc:	4602      	mov	r2, r0
 80090de:	460b      	mov	r3, r1
 80090e0:	4640      	mov	r0, r8
 80090e2:	4649      	mov	r1, r9
 80090e4:	f7f7 f8e0 	bl	80002a8 <__aeabi_dsub>
 80090e8:	f805 6b01 	strb.w	r6, [r5], #1
 80090ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80090ee:	429d      	cmp	r5, r3
 80090f0:	4680      	mov	r8, r0
 80090f2:	4689      	mov	r9, r1
 80090f4:	f04f 0200 	mov.w	r2, #0
 80090f8:	d124      	bne.n	8009144 <_dtoa_r+0x60c>
 80090fa:	4b1b      	ldr	r3, [pc, #108]	; (8009168 <_dtoa_r+0x630>)
 80090fc:	4650      	mov	r0, sl
 80090fe:	4659      	mov	r1, fp
 8009100:	f7f7 f8d4 	bl	80002ac <__adddf3>
 8009104:	4602      	mov	r2, r0
 8009106:	460b      	mov	r3, r1
 8009108:	4640      	mov	r0, r8
 800910a:	4649      	mov	r1, r9
 800910c:	f7f7 fd14 	bl	8000b38 <__aeabi_dcmpgt>
 8009110:	2800      	cmp	r0, #0
 8009112:	d173      	bne.n	80091fc <_dtoa_r+0x6c4>
 8009114:	4652      	mov	r2, sl
 8009116:	465b      	mov	r3, fp
 8009118:	4913      	ldr	r1, [pc, #76]	; (8009168 <_dtoa_r+0x630>)
 800911a:	2000      	movs	r0, #0
 800911c:	f7f7 f8c4 	bl	80002a8 <__aeabi_dsub>
 8009120:	4602      	mov	r2, r0
 8009122:	460b      	mov	r3, r1
 8009124:	4640      	mov	r0, r8
 8009126:	4649      	mov	r1, r9
 8009128:	f7f7 fce8 	bl	8000afc <__aeabi_dcmplt>
 800912c:	2800      	cmp	r0, #0
 800912e:	f43f af35 	beq.w	8008f9c <_dtoa_r+0x464>
 8009132:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009134:	1e6b      	subs	r3, r5, #1
 8009136:	930f      	str	r3, [sp, #60]	; 0x3c
 8009138:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800913c:	2b30      	cmp	r3, #48	; 0x30
 800913e:	d0f8      	beq.n	8009132 <_dtoa_r+0x5fa>
 8009140:	9700      	str	r7, [sp, #0]
 8009142:	e049      	b.n	80091d8 <_dtoa_r+0x6a0>
 8009144:	4b05      	ldr	r3, [pc, #20]	; (800915c <_dtoa_r+0x624>)
 8009146:	f7f7 fa67 	bl	8000618 <__aeabi_dmul>
 800914a:	4680      	mov	r8, r0
 800914c:	4689      	mov	r9, r1
 800914e:	e7bd      	b.n	80090cc <_dtoa_r+0x594>
 8009150:	0800bb40 	.word	0x0800bb40
 8009154:	0800bb18 	.word	0x0800bb18
 8009158:	3ff00000 	.word	0x3ff00000
 800915c:	40240000 	.word	0x40240000
 8009160:	401c0000 	.word	0x401c0000
 8009164:	40140000 	.word	0x40140000
 8009168:	3fe00000 	.word	0x3fe00000
 800916c:	9d01      	ldr	r5, [sp, #4]
 800916e:	4656      	mov	r6, sl
 8009170:	465f      	mov	r7, fp
 8009172:	4642      	mov	r2, r8
 8009174:	464b      	mov	r3, r9
 8009176:	4630      	mov	r0, r6
 8009178:	4639      	mov	r1, r7
 800917a:	f7f7 fb77 	bl	800086c <__aeabi_ddiv>
 800917e:	f7f7 fcfb 	bl	8000b78 <__aeabi_d2iz>
 8009182:	4682      	mov	sl, r0
 8009184:	f7f7 f9de 	bl	8000544 <__aeabi_i2d>
 8009188:	4642      	mov	r2, r8
 800918a:	464b      	mov	r3, r9
 800918c:	f7f7 fa44 	bl	8000618 <__aeabi_dmul>
 8009190:	4602      	mov	r2, r0
 8009192:	460b      	mov	r3, r1
 8009194:	4630      	mov	r0, r6
 8009196:	4639      	mov	r1, r7
 8009198:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800919c:	f7f7 f884 	bl	80002a8 <__aeabi_dsub>
 80091a0:	f805 6b01 	strb.w	r6, [r5], #1
 80091a4:	9e01      	ldr	r6, [sp, #4]
 80091a6:	9f03      	ldr	r7, [sp, #12]
 80091a8:	1bae      	subs	r6, r5, r6
 80091aa:	42b7      	cmp	r7, r6
 80091ac:	4602      	mov	r2, r0
 80091ae:	460b      	mov	r3, r1
 80091b0:	d135      	bne.n	800921e <_dtoa_r+0x6e6>
 80091b2:	f7f7 f87b 	bl	80002ac <__adddf3>
 80091b6:	4642      	mov	r2, r8
 80091b8:	464b      	mov	r3, r9
 80091ba:	4606      	mov	r6, r0
 80091bc:	460f      	mov	r7, r1
 80091be:	f7f7 fcbb 	bl	8000b38 <__aeabi_dcmpgt>
 80091c2:	b9d0      	cbnz	r0, 80091fa <_dtoa_r+0x6c2>
 80091c4:	4642      	mov	r2, r8
 80091c6:	464b      	mov	r3, r9
 80091c8:	4630      	mov	r0, r6
 80091ca:	4639      	mov	r1, r7
 80091cc:	f7f7 fc8c 	bl	8000ae8 <__aeabi_dcmpeq>
 80091d0:	b110      	cbz	r0, 80091d8 <_dtoa_r+0x6a0>
 80091d2:	f01a 0f01 	tst.w	sl, #1
 80091d6:	d110      	bne.n	80091fa <_dtoa_r+0x6c2>
 80091d8:	4620      	mov	r0, r4
 80091da:	ee18 1a10 	vmov	r1, s16
 80091de:	f001 f885 	bl	800a2ec <_Bfree>
 80091e2:	2300      	movs	r3, #0
 80091e4:	9800      	ldr	r0, [sp, #0]
 80091e6:	702b      	strb	r3, [r5, #0]
 80091e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80091ea:	3001      	adds	r0, #1
 80091ec:	6018      	str	r0, [r3, #0]
 80091ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	f43f acf1 	beq.w	8008bd8 <_dtoa_r+0xa0>
 80091f6:	601d      	str	r5, [r3, #0]
 80091f8:	e4ee      	b.n	8008bd8 <_dtoa_r+0xa0>
 80091fa:	9f00      	ldr	r7, [sp, #0]
 80091fc:	462b      	mov	r3, r5
 80091fe:	461d      	mov	r5, r3
 8009200:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009204:	2a39      	cmp	r2, #57	; 0x39
 8009206:	d106      	bne.n	8009216 <_dtoa_r+0x6de>
 8009208:	9a01      	ldr	r2, [sp, #4]
 800920a:	429a      	cmp	r2, r3
 800920c:	d1f7      	bne.n	80091fe <_dtoa_r+0x6c6>
 800920e:	9901      	ldr	r1, [sp, #4]
 8009210:	2230      	movs	r2, #48	; 0x30
 8009212:	3701      	adds	r7, #1
 8009214:	700a      	strb	r2, [r1, #0]
 8009216:	781a      	ldrb	r2, [r3, #0]
 8009218:	3201      	adds	r2, #1
 800921a:	701a      	strb	r2, [r3, #0]
 800921c:	e790      	b.n	8009140 <_dtoa_r+0x608>
 800921e:	4ba6      	ldr	r3, [pc, #664]	; (80094b8 <_dtoa_r+0x980>)
 8009220:	2200      	movs	r2, #0
 8009222:	f7f7 f9f9 	bl	8000618 <__aeabi_dmul>
 8009226:	2200      	movs	r2, #0
 8009228:	2300      	movs	r3, #0
 800922a:	4606      	mov	r6, r0
 800922c:	460f      	mov	r7, r1
 800922e:	f7f7 fc5b 	bl	8000ae8 <__aeabi_dcmpeq>
 8009232:	2800      	cmp	r0, #0
 8009234:	d09d      	beq.n	8009172 <_dtoa_r+0x63a>
 8009236:	e7cf      	b.n	80091d8 <_dtoa_r+0x6a0>
 8009238:	9a08      	ldr	r2, [sp, #32]
 800923a:	2a00      	cmp	r2, #0
 800923c:	f000 80d7 	beq.w	80093ee <_dtoa_r+0x8b6>
 8009240:	9a06      	ldr	r2, [sp, #24]
 8009242:	2a01      	cmp	r2, #1
 8009244:	f300 80ba 	bgt.w	80093bc <_dtoa_r+0x884>
 8009248:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800924a:	2a00      	cmp	r2, #0
 800924c:	f000 80b2 	beq.w	80093b4 <_dtoa_r+0x87c>
 8009250:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009254:	9e07      	ldr	r6, [sp, #28]
 8009256:	9d04      	ldr	r5, [sp, #16]
 8009258:	9a04      	ldr	r2, [sp, #16]
 800925a:	441a      	add	r2, r3
 800925c:	9204      	str	r2, [sp, #16]
 800925e:	9a05      	ldr	r2, [sp, #20]
 8009260:	2101      	movs	r1, #1
 8009262:	441a      	add	r2, r3
 8009264:	4620      	mov	r0, r4
 8009266:	9205      	str	r2, [sp, #20]
 8009268:	f001 f942 	bl	800a4f0 <__i2b>
 800926c:	4607      	mov	r7, r0
 800926e:	2d00      	cmp	r5, #0
 8009270:	dd0c      	ble.n	800928c <_dtoa_r+0x754>
 8009272:	9b05      	ldr	r3, [sp, #20]
 8009274:	2b00      	cmp	r3, #0
 8009276:	dd09      	ble.n	800928c <_dtoa_r+0x754>
 8009278:	42ab      	cmp	r3, r5
 800927a:	9a04      	ldr	r2, [sp, #16]
 800927c:	bfa8      	it	ge
 800927e:	462b      	movge	r3, r5
 8009280:	1ad2      	subs	r2, r2, r3
 8009282:	9204      	str	r2, [sp, #16]
 8009284:	9a05      	ldr	r2, [sp, #20]
 8009286:	1aed      	subs	r5, r5, r3
 8009288:	1ad3      	subs	r3, r2, r3
 800928a:	9305      	str	r3, [sp, #20]
 800928c:	9b07      	ldr	r3, [sp, #28]
 800928e:	b31b      	cbz	r3, 80092d8 <_dtoa_r+0x7a0>
 8009290:	9b08      	ldr	r3, [sp, #32]
 8009292:	2b00      	cmp	r3, #0
 8009294:	f000 80af 	beq.w	80093f6 <_dtoa_r+0x8be>
 8009298:	2e00      	cmp	r6, #0
 800929a:	dd13      	ble.n	80092c4 <_dtoa_r+0x78c>
 800929c:	4639      	mov	r1, r7
 800929e:	4632      	mov	r2, r6
 80092a0:	4620      	mov	r0, r4
 80092a2:	f001 f9e5 	bl	800a670 <__pow5mult>
 80092a6:	ee18 2a10 	vmov	r2, s16
 80092aa:	4601      	mov	r1, r0
 80092ac:	4607      	mov	r7, r0
 80092ae:	4620      	mov	r0, r4
 80092b0:	f001 f934 	bl	800a51c <__multiply>
 80092b4:	ee18 1a10 	vmov	r1, s16
 80092b8:	4680      	mov	r8, r0
 80092ba:	4620      	mov	r0, r4
 80092bc:	f001 f816 	bl	800a2ec <_Bfree>
 80092c0:	ee08 8a10 	vmov	s16, r8
 80092c4:	9b07      	ldr	r3, [sp, #28]
 80092c6:	1b9a      	subs	r2, r3, r6
 80092c8:	d006      	beq.n	80092d8 <_dtoa_r+0x7a0>
 80092ca:	ee18 1a10 	vmov	r1, s16
 80092ce:	4620      	mov	r0, r4
 80092d0:	f001 f9ce 	bl	800a670 <__pow5mult>
 80092d4:	ee08 0a10 	vmov	s16, r0
 80092d8:	2101      	movs	r1, #1
 80092da:	4620      	mov	r0, r4
 80092dc:	f001 f908 	bl	800a4f0 <__i2b>
 80092e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	4606      	mov	r6, r0
 80092e6:	f340 8088 	ble.w	80093fa <_dtoa_r+0x8c2>
 80092ea:	461a      	mov	r2, r3
 80092ec:	4601      	mov	r1, r0
 80092ee:	4620      	mov	r0, r4
 80092f0:	f001 f9be 	bl	800a670 <__pow5mult>
 80092f4:	9b06      	ldr	r3, [sp, #24]
 80092f6:	2b01      	cmp	r3, #1
 80092f8:	4606      	mov	r6, r0
 80092fa:	f340 8081 	ble.w	8009400 <_dtoa_r+0x8c8>
 80092fe:	f04f 0800 	mov.w	r8, #0
 8009302:	6933      	ldr	r3, [r6, #16]
 8009304:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009308:	6918      	ldr	r0, [r3, #16]
 800930a:	f001 f8a1 	bl	800a450 <__hi0bits>
 800930e:	f1c0 0020 	rsb	r0, r0, #32
 8009312:	9b05      	ldr	r3, [sp, #20]
 8009314:	4418      	add	r0, r3
 8009316:	f010 001f 	ands.w	r0, r0, #31
 800931a:	f000 8092 	beq.w	8009442 <_dtoa_r+0x90a>
 800931e:	f1c0 0320 	rsb	r3, r0, #32
 8009322:	2b04      	cmp	r3, #4
 8009324:	f340 808a 	ble.w	800943c <_dtoa_r+0x904>
 8009328:	f1c0 001c 	rsb	r0, r0, #28
 800932c:	9b04      	ldr	r3, [sp, #16]
 800932e:	4403      	add	r3, r0
 8009330:	9304      	str	r3, [sp, #16]
 8009332:	9b05      	ldr	r3, [sp, #20]
 8009334:	4403      	add	r3, r0
 8009336:	4405      	add	r5, r0
 8009338:	9305      	str	r3, [sp, #20]
 800933a:	9b04      	ldr	r3, [sp, #16]
 800933c:	2b00      	cmp	r3, #0
 800933e:	dd07      	ble.n	8009350 <_dtoa_r+0x818>
 8009340:	ee18 1a10 	vmov	r1, s16
 8009344:	461a      	mov	r2, r3
 8009346:	4620      	mov	r0, r4
 8009348:	f001 f9ec 	bl	800a724 <__lshift>
 800934c:	ee08 0a10 	vmov	s16, r0
 8009350:	9b05      	ldr	r3, [sp, #20]
 8009352:	2b00      	cmp	r3, #0
 8009354:	dd05      	ble.n	8009362 <_dtoa_r+0x82a>
 8009356:	4631      	mov	r1, r6
 8009358:	461a      	mov	r2, r3
 800935a:	4620      	mov	r0, r4
 800935c:	f001 f9e2 	bl	800a724 <__lshift>
 8009360:	4606      	mov	r6, r0
 8009362:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009364:	2b00      	cmp	r3, #0
 8009366:	d06e      	beq.n	8009446 <_dtoa_r+0x90e>
 8009368:	ee18 0a10 	vmov	r0, s16
 800936c:	4631      	mov	r1, r6
 800936e:	f001 fa49 	bl	800a804 <__mcmp>
 8009372:	2800      	cmp	r0, #0
 8009374:	da67      	bge.n	8009446 <_dtoa_r+0x90e>
 8009376:	9b00      	ldr	r3, [sp, #0]
 8009378:	3b01      	subs	r3, #1
 800937a:	ee18 1a10 	vmov	r1, s16
 800937e:	9300      	str	r3, [sp, #0]
 8009380:	220a      	movs	r2, #10
 8009382:	2300      	movs	r3, #0
 8009384:	4620      	mov	r0, r4
 8009386:	f000 ffd3 	bl	800a330 <__multadd>
 800938a:	9b08      	ldr	r3, [sp, #32]
 800938c:	ee08 0a10 	vmov	s16, r0
 8009390:	2b00      	cmp	r3, #0
 8009392:	f000 81b1 	beq.w	80096f8 <_dtoa_r+0xbc0>
 8009396:	2300      	movs	r3, #0
 8009398:	4639      	mov	r1, r7
 800939a:	220a      	movs	r2, #10
 800939c:	4620      	mov	r0, r4
 800939e:	f000 ffc7 	bl	800a330 <__multadd>
 80093a2:	9b02      	ldr	r3, [sp, #8]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	4607      	mov	r7, r0
 80093a8:	f300 808e 	bgt.w	80094c8 <_dtoa_r+0x990>
 80093ac:	9b06      	ldr	r3, [sp, #24]
 80093ae:	2b02      	cmp	r3, #2
 80093b0:	dc51      	bgt.n	8009456 <_dtoa_r+0x91e>
 80093b2:	e089      	b.n	80094c8 <_dtoa_r+0x990>
 80093b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80093b6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80093ba:	e74b      	b.n	8009254 <_dtoa_r+0x71c>
 80093bc:	9b03      	ldr	r3, [sp, #12]
 80093be:	1e5e      	subs	r6, r3, #1
 80093c0:	9b07      	ldr	r3, [sp, #28]
 80093c2:	42b3      	cmp	r3, r6
 80093c4:	bfbf      	itttt	lt
 80093c6:	9b07      	ldrlt	r3, [sp, #28]
 80093c8:	9607      	strlt	r6, [sp, #28]
 80093ca:	1af2      	sublt	r2, r6, r3
 80093cc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80093ce:	bfb6      	itet	lt
 80093d0:	189b      	addlt	r3, r3, r2
 80093d2:	1b9e      	subge	r6, r3, r6
 80093d4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80093d6:	9b03      	ldr	r3, [sp, #12]
 80093d8:	bfb8      	it	lt
 80093da:	2600      	movlt	r6, #0
 80093dc:	2b00      	cmp	r3, #0
 80093de:	bfb7      	itett	lt
 80093e0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80093e4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80093e8:	1a9d      	sublt	r5, r3, r2
 80093ea:	2300      	movlt	r3, #0
 80093ec:	e734      	b.n	8009258 <_dtoa_r+0x720>
 80093ee:	9e07      	ldr	r6, [sp, #28]
 80093f0:	9d04      	ldr	r5, [sp, #16]
 80093f2:	9f08      	ldr	r7, [sp, #32]
 80093f4:	e73b      	b.n	800926e <_dtoa_r+0x736>
 80093f6:	9a07      	ldr	r2, [sp, #28]
 80093f8:	e767      	b.n	80092ca <_dtoa_r+0x792>
 80093fa:	9b06      	ldr	r3, [sp, #24]
 80093fc:	2b01      	cmp	r3, #1
 80093fe:	dc18      	bgt.n	8009432 <_dtoa_r+0x8fa>
 8009400:	f1ba 0f00 	cmp.w	sl, #0
 8009404:	d115      	bne.n	8009432 <_dtoa_r+0x8fa>
 8009406:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800940a:	b993      	cbnz	r3, 8009432 <_dtoa_r+0x8fa>
 800940c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009410:	0d1b      	lsrs	r3, r3, #20
 8009412:	051b      	lsls	r3, r3, #20
 8009414:	b183      	cbz	r3, 8009438 <_dtoa_r+0x900>
 8009416:	9b04      	ldr	r3, [sp, #16]
 8009418:	3301      	adds	r3, #1
 800941a:	9304      	str	r3, [sp, #16]
 800941c:	9b05      	ldr	r3, [sp, #20]
 800941e:	3301      	adds	r3, #1
 8009420:	9305      	str	r3, [sp, #20]
 8009422:	f04f 0801 	mov.w	r8, #1
 8009426:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009428:	2b00      	cmp	r3, #0
 800942a:	f47f af6a 	bne.w	8009302 <_dtoa_r+0x7ca>
 800942e:	2001      	movs	r0, #1
 8009430:	e76f      	b.n	8009312 <_dtoa_r+0x7da>
 8009432:	f04f 0800 	mov.w	r8, #0
 8009436:	e7f6      	b.n	8009426 <_dtoa_r+0x8ee>
 8009438:	4698      	mov	r8, r3
 800943a:	e7f4      	b.n	8009426 <_dtoa_r+0x8ee>
 800943c:	f43f af7d 	beq.w	800933a <_dtoa_r+0x802>
 8009440:	4618      	mov	r0, r3
 8009442:	301c      	adds	r0, #28
 8009444:	e772      	b.n	800932c <_dtoa_r+0x7f4>
 8009446:	9b03      	ldr	r3, [sp, #12]
 8009448:	2b00      	cmp	r3, #0
 800944a:	dc37      	bgt.n	80094bc <_dtoa_r+0x984>
 800944c:	9b06      	ldr	r3, [sp, #24]
 800944e:	2b02      	cmp	r3, #2
 8009450:	dd34      	ble.n	80094bc <_dtoa_r+0x984>
 8009452:	9b03      	ldr	r3, [sp, #12]
 8009454:	9302      	str	r3, [sp, #8]
 8009456:	9b02      	ldr	r3, [sp, #8]
 8009458:	b96b      	cbnz	r3, 8009476 <_dtoa_r+0x93e>
 800945a:	4631      	mov	r1, r6
 800945c:	2205      	movs	r2, #5
 800945e:	4620      	mov	r0, r4
 8009460:	f000 ff66 	bl	800a330 <__multadd>
 8009464:	4601      	mov	r1, r0
 8009466:	4606      	mov	r6, r0
 8009468:	ee18 0a10 	vmov	r0, s16
 800946c:	f001 f9ca 	bl	800a804 <__mcmp>
 8009470:	2800      	cmp	r0, #0
 8009472:	f73f adbb 	bgt.w	8008fec <_dtoa_r+0x4b4>
 8009476:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009478:	9d01      	ldr	r5, [sp, #4]
 800947a:	43db      	mvns	r3, r3
 800947c:	9300      	str	r3, [sp, #0]
 800947e:	f04f 0800 	mov.w	r8, #0
 8009482:	4631      	mov	r1, r6
 8009484:	4620      	mov	r0, r4
 8009486:	f000 ff31 	bl	800a2ec <_Bfree>
 800948a:	2f00      	cmp	r7, #0
 800948c:	f43f aea4 	beq.w	80091d8 <_dtoa_r+0x6a0>
 8009490:	f1b8 0f00 	cmp.w	r8, #0
 8009494:	d005      	beq.n	80094a2 <_dtoa_r+0x96a>
 8009496:	45b8      	cmp	r8, r7
 8009498:	d003      	beq.n	80094a2 <_dtoa_r+0x96a>
 800949a:	4641      	mov	r1, r8
 800949c:	4620      	mov	r0, r4
 800949e:	f000 ff25 	bl	800a2ec <_Bfree>
 80094a2:	4639      	mov	r1, r7
 80094a4:	4620      	mov	r0, r4
 80094a6:	f000 ff21 	bl	800a2ec <_Bfree>
 80094aa:	e695      	b.n	80091d8 <_dtoa_r+0x6a0>
 80094ac:	2600      	movs	r6, #0
 80094ae:	4637      	mov	r7, r6
 80094b0:	e7e1      	b.n	8009476 <_dtoa_r+0x93e>
 80094b2:	9700      	str	r7, [sp, #0]
 80094b4:	4637      	mov	r7, r6
 80094b6:	e599      	b.n	8008fec <_dtoa_r+0x4b4>
 80094b8:	40240000 	.word	0x40240000
 80094bc:	9b08      	ldr	r3, [sp, #32]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	f000 80ca 	beq.w	8009658 <_dtoa_r+0xb20>
 80094c4:	9b03      	ldr	r3, [sp, #12]
 80094c6:	9302      	str	r3, [sp, #8]
 80094c8:	2d00      	cmp	r5, #0
 80094ca:	dd05      	ble.n	80094d8 <_dtoa_r+0x9a0>
 80094cc:	4639      	mov	r1, r7
 80094ce:	462a      	mov	r2, r5
 80094d0:	4620      	mov	r0, r4
 80094d2:	f001 f927 	bl	800a724 <__lshift>
 80094d6:	4607      	mov	r7, r0
 80094d8:	f1b8 0f00 	cmp.w	r8, #0
 80094dc:	d05b      	beq.n	8009596 <_dtoa_r+0xa5e>
 80094de:	6879      	ldr	r1, [r7, #4]
 80094e0:	4620      	mov	r0, r4
 80094e2:	f000 fec3 	bl	800a26c <_Balloc>
 80094e6:	4605      	mov	r5, r0
 80094e8:	b928      	cbnz	r0, 80094f6 <_dtoa_r+0x9be>
 80094ea:	4b87      	ldr	r3, [pc, #540]	; (8009708 <_dtoa_r+0xbd0>)
 80094ec:	4602      	mov	r2, r0
 80094ee:	f240 21ea 	movw	r1, #746	; 0x2ea
 80094f2:	f7ff bb3b 	b.w	8008b6c <_dtoa_r+0x34>
 80094f6:	693a      	ldr	r2, [r7, #16]
 80094f8:	3202      	adds	r2, #2
 80094fa:	0092      	lsls	r2, r2, #2
 80094fc:	f107 010c 	add.w	r1, r7, #12
 8009500:	300c      	adds	r0, #12
 8009502:	f7fd fbdb 	bl	8006cbc <memcpy>
 8009506:	2201      	movs	r2, #1
 8009508:	4629      	mov	r1, r5
 800950a:	4620      	mov	r0, r4
 800950c:	f001 f90a 	bl	800a724 <__lshift>
 8009510:	9b01      	ldr	r3, [sp, #4]
 8009512:	f103 0901 	add.w	r9, r3, #1
 8009516:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800951a:	4413      	add	r3, r2
 800951c:	9305      	str	r3, [sp, #20]
 800951e:	f00a 0301 	and.w	r3, sl, #1
 8009522:	46b8      	mov	r8, r7
 8009524:	9304      	str	r3, [sp, #16]
 8009526:	4607      	mov	r7, r0
 8009528:	4631      	mov	r1, r6
 800952a:	ee18 0a10 	vmov	r0, s16
 800952e:	f7ff fa77 	bl	8008a20 <quorem>
 8009532:	4641      	mov	r1, r8
 8009534:	9002      	str	r0, [sp, #8]
 8009536:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800953a:	ee18 0a10 	vmov	r0, s16
 800953e:	f001 f961 	bl	800a804 <__mcmp>
 8009542:	463a      	mov	r2, r7
 8009544:	9003      	str	r0, [sp, #12]
 8009546:	4631      	mov	r1, r6
 8009548:	4620      	mov	r0, r4
 800954a:	f001 f977 	bl	800a83c <__mdiff>
 800954e:	68c2      	ldr	r2, [r0, #12]
 8009550:	f109 3bff 	add.w	fp, r9, #4294967295
 8009554:	4605      	mov	r5, r0
 8009556:	bb02      	cbnz	r2, 800959a <_dtoa_r+0xa62>
 8009558:	4601      	mov	r1, r0
 800955a:	ee18 0a10 	vmov	r0, s16
 800955e:	f001 f951 	bl	800a804 <__mcmp>
 8009562:	4602      	mov	r2, r0
 8009564:	4629      	mov	r1, r5
 8009566:	4620      	mov	r0, r4
 8009568:	9207      	str	r2, [sp, #28]
 800956a:	f000 febf 	bl	800a2ec <_Bfree>
 800956e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8009572:	ea43 0102 	orr.w	r1, r3, r2
 8009576:	9b04      	ldr	r3, [sp, #16]
 8009578:	430b      	orrs	r3, r1
 800957a:	464d      	mov	r5, r9
 800957c:	d10f      	bne.n	800959e <_dtoa_r+0xa66>
 800957e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009582:	d02a      	beq.n	80095da <_dtoa_r+0xaa2>
 8009584:	9b03      	ldr	r3, [sp, #12]
 8009586:	2b00      	cmp	r3, #0
 8009588:	dd02      	ble.n	8009590 <_dtoa_r+0xa58>
 800958a:	9b02      	ldr	r3, [sp, #8]
 800958c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009590:	f88b a000 	strb.w	sl, [fp]
 8009594:	e775      	b.n	8009482 <_dtoa_r+0x94a>
 8009596:	4638      	mov	r0, r7
 8009598:	e7ba      	b.n	8009510 <_dtoa_r+0x9d8>
 800959a:	2201      	movs	r2, #1
 800959c:	e7e2      	b.n	8009564 <_dtoa_r+0xa2c>
 800959e:	9b03      	ldr	r3, [sp, #12]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	db04      	blt.n	80095ae <_dtoa_r+0xa76>
 80095a4:	9906      	ldr	r1, [sp, #24]
 80095a6:	430b      	orrs	r3, r1
 80095a8:	9904      	ldr	r1, [sp, #16]
 80095aa:	430b      	orrs	r3, r1
 80095ac:	d122      	bne.n	80095f4 <_dtoa_r+0xabc>
 80095ae:	2a00      	cmp	r2, #0
 80095b0:	ddee      	ble.n	8009590 <_dtoa_r+0xa58>
 80095b2:	ee18 1a10 	vmov	r1, s16
 80095b6:	2201      	movs	r2, #1
 80095b8:	4620      	mov	r0, r4
 80095ba:	f001 f8b3 	bl	800a724 <__lshift>
 80095be:	4631      	mov	r1, r6
 80095c0:	ee08 0a10 	vmov	s16, r0
 80095c4:	f001 f91e 	bl	800a804 <__mcmp>
 80095c8:	2800      	cmp	r0, #0
 80095ca:	dc03      	bgt.n	80095d4 <_dtoa_r+0xa9c>
 80095cc:	d1e0      	bne.n	8009590 <_dtoa_r+0xa58>
 80095ce:	f01a 0f01 	tst.w	sl, #1
 80095d2:	d0dd      	beq.n	8009590 <_dtoa_r+0xa58>
 80095d4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80095d8:	d1d7      	bne.n	800958a <_dtoa_r+0xa52>
 80095da:	2339      	movs	r3, #57	; 0x39
 80095dc:	f88b 3000 	strb.w	r3, [fp]
 80095e0:	462b      	mov	r3, r5
 80095e2:	461d      	mov	r5, r3
 80095e4:	3b01      	subs	r3, #1
 80095e6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80095ea:	2a39      	cmp	r2, #57	; 0x39
 80095ec:	d071      	beq.n	80096d2 <_dtoa_r+0xb9a>
 80095ee:	3201      	adds	r2, #1
 80095f0:	701a      	strb	r2, [r3, #0]
 80095f2:	e746      	b.n	8009482 <_dtoa_r+0x94a>
 80095f4:	2a00      	cmp	r2, #0
 80095f6:	dd07      	ble.n	8009608 <_dtoa_r+0xad0>
 80095f8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80095fc:	d0ed      	beq.n	80095da <_dtoa_r+0xaa2>
 80095fe:	f10a 0301 	add.w	r3, sl, #1
 8009602:	f88b 3000 	strb.w	r3, [fp]
 8009606:	e73c      	b.n	8009482 <_dtoa_r+0x94a>
 8009608:	9b05      	ldr	r3, [sp, #20]
 800960a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800960e:	4599      	cmp	r9, r3
 8009610:	d047      	beq.n	80096a2 <_dtoa_r+0xb6a>
 8009612:	ee18 1a10 	vmov	r1, s16
 8009616:	2300      	movs	r3, #0
 8009618:	220a      	movs	r2, #10
 800961a:	4620      	mov	r0, r4
 800961c:	f000 fe88 	bl	800a330 <__multadd>
 8009620:	45b8      	cmp	r8, r7
 8009622:	ee08 0a10 	vmov	s16, r0
 8009626:	f04f 0300 	mov.w	r3, #0
 800962a:	f04f 020a 	mov.w	r2, #10
 800962e:	4641      	mov	r1, r8
 8009630:	4620      	mov	r0, r4
 8009632:	d106      	bne.n	8009642 <_dtoa_r+0xb0a>
 8009634:	f000 fe7c 	bl	800a330 <__multadd>
 8009638:	4680      	mov	r8, r0
 800963a:	4607      	mov	r7, r0
 800963c:	f109 0901 	add.w	r9, r9, #1
 8009640:	e772      	b.n	8009528 <_dtoa_r+0x9f0>
 8009642:	f000 fe75 	bl	800a330 <__multadd>
 8009646:	4639      	mov	r1, r7
 8009648:	4680      	mov	r8, r0
 800964a:	2300      	movs	r3, #0
 800964c:	220a      	movs	r2, #10
 800964e:	4620      	mov	r0, r4
 8009650:	f000 fe6e 	bl	800a330 <__multadd>
 8009654:	4607      	mov	r7, r0
 8009656:	e7f1      	b.n	800963c <_dtoa_r+0xb04>
 8009658:	9b03      	ldr	r3, [sp, #12]
 800965a:	9302      	str	r3, [sp, #8]
 800965c:	9d01      	ldr	r5, [sp, #4]
 800965e:	ee18 0a10 	vmov	r0, s16
 8009662:	4631      	mov	r1, r6
 8009664:	f7ff f9dc 	bl	8008a20 <quorem>
 8009668:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800966c:	9b01      	ldr	r3, [sp, #4]
 800966e:	f805 ab01 	strb.w	sl, [r5], #1
 8009672:	1aea      	subs	r2, r5, r3
 8009674:	9b02      	ldr	r3, [sp, #8]
 8009676:	4293      	cmp	r3, r2
 8009678:	dd09      	ble.n	800968e <_dtoa_r+0xb56>
 800967a:	ee18 1a10 	vmov	r1, s16
 800967e:	2300      	movs	r3, #0
 8009680:	220a      	movs	r2, #10
 8009682:	4620      	mov	r0, r4
 8009684:	f000 fe54 	bl	800a330 <__multadd>
 8009688:	ee08 0a10 	vmov	s16, r0
 800968c:	e7e7      	b.n	800965e <_dtoa_r+0xb26>
 800968e:	9b02      	ldr	r3, [sp, #8]
 8009690:	2b00      	cmp	r3, #0
 8009692:	bfc8      	it	gt
 8009694:	461d      	movgt	r5, r3
 8009696:	9b01      	ldr	r3, [sp, #4]
 8009698:	bfd8      	it	le
 800969a:	2501      	movle	r5, #1
 800969c:	441d      	add	r5, r3
 800969e:	f04f 0800 	mov.w	r8, #0
 80096a2:	ee18 1a10 	vmov	r1, s16
 80096a6:	2201      	movs	r2, #1
 80096a8:	4620      	mov	r0, r4
 80096aa:	f001 f83b 	bl	800a724 <__lshift>
 80096ae:	4631      	mov	r1, r6
 80096b0:	ee08 0a10 	vmov	s16, r0
 80096b4:	f001 f8a6 	bl	800a804 <__mcmp>
 80096b8:	2800      	cmp	r0, #0
 80096ba:	dc91      	bgt.n	80095e0 <_dtoa_r+0xaa8>
 80096bc:	d102      	bne.n	80096c4 <_dtoa_r+0xb8c>
 80096be:	f01a 0f01 	tst.w	sl, #1
 80096c2:	d18d      	bne.n	80095e0 <_dtoa_r+0xaa8>
 80096c4:	462b      	mov	r3, r5
 80096c6:	461d      	mov	r5, r3
 80096c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80096cc:	2a30      	cmp	r2, #48	; 0x30
 80096ce:	d0fa      	beq.n	80096c6 <_dtoa_r+0xb8e>
 80096d0:	e6d7      	b.n	8009482 <_dtoa_r+0x94a>
 80096d2:	9a01      	ldr	r2, [sp, #4]
 80096d4:	429a      	cmp	r2, r3
 80096d6:	d184      	bne.n	80095e2 <_dtoa_r+0xaaa>
 80096d8:	9b00      	ldr	r3, [sp, #0]
 80096da:	3301      	adds	r3, #1
 80096dc:	9300      	str	r3, [sp, #0]
 80096de:	2331      	movs	r3, #49	; 0x31
 80096e0:	7013      	strb	r3, [r2, #0]
 80096e2:	e6ce      	b.n	8009482 <_dtoa_r+0x94a>
 80096e4:	4b09      	ldr	r3, [pc, #36]	; (800970c <_dtoa_r+0xbd4>)
 80096e6:	f7ff ba95 	b.w	8008c14 <_dtoa_r+0xdc>
 80096ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	f47f aa6e 	bne.w	8008bce <_dtoa_r+0x96>
 80096f2:	4b07      	ldr	r3, [pc, #28]	; (8009710 <_dtoa_r+0xbd8>)
 80096f4:	f7ff ba8e 	b.w	8008c14 <_dtoa_r+0xdc>
 80096f8:	9b02      	ldr	r3, [sp, #8]
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	dcae      	bgt.n	800965c <_dtoa_r+0xb24>
 80096fe:	9b06      	ldr	r3, [sp, #24]
 8009700:	2b02      	cmp	r3, #2
 8009702:	f73f aea8 	bgt.w	8009456 <_dtoa_r+0x91e>
 8009706:	e7a9      	b.n	800965c <_dtoa_r+0xb24>
 8009708:	0800b9c8 	.word	0x0800b9c8
 800970c:	0800b7c8 	.word	0x0800b7c8
 8009710:	0800b949 	.word	0x0800b949

08009714 <__sflush_r>:
 8009714:	898a      	ldrh	r2, [r1, #12]
 8009716:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800971a:	4605      	mov	r5, r0
 800971c:	0710      	lsls	r0, r2, #28
 800971e:	460c      	mov	r4, r1
 8009720:	d458      	bmi.n	80097d4 <__sflush_r+0xc0>
 8009722:	684b      	ldr	r3, [r1, #4]
 8009724:	2b00      	cmp	r3, #0
 8009726:	dc05      	bgt.n	8009734 <__sflush_r+0x20>
 8009728:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800972a:	2b00      	cmp	r3, #0
 800972c:	dc02      	bgt.n	8009734 <__sflush_r+0x20>
 800972e:	2000      	movs	r0, #0
 8009730:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009734:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009736:	2e00      	cmp	r6, #0
 8009738:	d0f9      	beq.n	800972e <__sflush_r+0x1a>
 800973a:	2300      	movs	r3, #0
 800973c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009740:	682f      	ldr	r7, [r5, #0]
 8009742:	602b      	str	r3, [r5, #0]
 8009744:	d032      	beq.n	80097ac <__sflush_r+0x98>
 8009746:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009748:	89a3      	ldrh	r3, [r4, #12]
 800974a:	075a      	lsls	r2, r3, #29
 800974c:	d505      	bpl.n	800975a <__sflush_r+0x46>
 800974e:	6863      	ldr	r3, [r4, #4]
 8009750:	1ac0      	subs	r0, r0, r3
 8009752:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009754:	b10b      	cbz	r3, 800975a <__sflush_r+0x46>
 8009756:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009758:	1ac0      	subs	r0, r0, r3
 800975a:	2300      	movs	r3, #0
 800975c:	4602      	mov	r2, r0
 800975e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009760:	6a21      	ldr	r1, [r4, #32]
 8009762:	4628      	mov	r0, r5
 8009764:	47b0      	blx	r6
 8009766:	1c43      	adds	r3, r0, #1
 8009768:	89a3      	ldrh	r3, [r4, #12]
 800976a:	d106      	bne.n	800977a <__sflush_r+0x66>
 800976c:	6829      	ldr	r1, [r5, #0]
 800976e:	291d      	cmp	r1, #29
 8009770:	d82c      	bhi.n	80097cc <__sflush_r+0xb8>
 8009772:	4a2a      	ldr	r2, [pc, #168]	; (800981c <__sflush_r+0x108>)
 8009774:	40ca      	lsrs	r2, r1
 8009776:	07d6      	lsls	r6, r2, #31
 8009778:	d528      	bpl.n	80097cc <__sflush_r+0xb8>
 800977a:	2200      	movs	r2, #0
 800977c:	6062      	str	r2, [r4, #4]
 800977e:	04d9      	lsls	r1, r3, #19
 8009780:	6922      	ldr	r2, [r4, #16]
 8009782:	6022      	str	r2, [r4, #0]
 8009784:	d504      	bpl.n	8009790 <__sflush_r+0x7c>
 8009786:	1c42      	adds	r2, r0, #1
 8009788:	d101      	bne.n	800978e <__sflush_r+0x7a>
 800978a:	682b      	ldr	r3, [r5, #0]
 800978c:	b903      	cbnz	r3, 8009790 <__sflush_r+0x7c>
 800978e:	6560      	str	r0, [r4, #84]	; 0x54
 8009790:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009792:	602f      	str	r7, [r5, #0]
 8009794:	2900      	cmp	r1, #0
 8009796:	d0ca      	beq.n	800972e <__sflush_r+0x1a>
 8009798:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800979c:	4299      	cmp	r1, r3
 800979e:	d002      	beq.n	80097a6 <__sflush_r+0x92>
 80097a0:	4628      	mov	r0, r5
 80097a2:	f001 fa3b 	bl	800ac1c <_free_r>
 80097a6:	2000      	movs	r0, #0
 80097a8:	6360      	str	r0, [r4, #52]	; 0x34
 80097aa:	e7c1      	b.n	8009730 <__sflush_r+0x1c>
 80097ac:	6a21      	ldr	r1, [r4, #32]
 80097ae:	2301      	movs	r3, #1
 80097b0:	4628      	mov	r0, r5
 80097b2:	47b0      	blx	r6
 80097b4:	1c41      	adds	r1, r0, #1
 80097b6:	d1c7      	bne.n	8009748 <__sflush_r+0x34>
 80097b8:	682b      	ldr	r3, [r5, #0]
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d0c4      	beq.n	8009748 <__sflush_r+0x34>
 80097be:	2b1d      	cmp	r3, #29
 80097c0:	d001      	beq.n	80097c6 <__sflush_r+0xb2>
 80097c2:	2b16      	cmp	r3, #22
 80097c4:	d101      	bne.n	80097ca <__sflush_r+0xb6>
 80097c6:	602f      	str	r7, [r5, #0]
 80097c8:	e7b1      	b.n	800972e <__sflush_r+0x1a>
 80097ca:	89a3      	ldrh	r3, [r4, #12]
 80097cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80097d0:	81a3      	strh	r3, [r4, #12]
 80097d2:	e7ad      	b.n	8009730 <__sflush_r+0x1c>
 80097d4:	690f      	ldr	r7, [r1, #16]
 80097d6:	2f00      	cmp	r7, #0
 80097d8:	d0a9      	beq.n	800972e <__sflush_r+0x1a>
 80097da:	0793      	lsls	r3, r2, #30
 80097dc:	680e      	ldr	r6, [r1, #0]
 80097de:	bf08      	it	eq
 80097e0:	694b      	ldreq	r3, [r1, #20]
 80097e2:	600f      	str	r7, [r1, #0]
 80097e4:	bf18      	it	ne
 80097e6:	2300      	movne	r3, #0
 80097e8:	eba6 0807 	sub.w	r8, r6, r7
 80097ec:	608b      	str	r3, [r1, #8]
 80097ee:	f1b8 0f00 	cmp.w	r8, #0
 80097f2:	dd9c      	ble.n	800972e <__sflush_r+0x1a>
 80097f4:	6a21      	ldr	r1, [r4, #32]
 80097f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80097f8:	4643      	mov	r3, r8
 80097fa:	463a      	mov	r2, r7
 80097fc:	4628      	mov	r0, r5
 80097fe:	47b0      	blx	r6
 8009800:	2800      	cmp	r0, #0
 8009802:	dc06      	bgt.n	8009812 <__sflush_r+0xfe>
 8009804:	89a3      	ldrh	r3, [r4, #12]
 8009806:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800980a:	81a3      	strh	r3, [r4, #12]
 800980c:	f04f 30ff 	mov.w	r0, #4294967295
 8009810:	e78e      	b.n	8009730 <__sflush_r+0x1c>
 8009812:	4407      	add	r7, r0
 8009814:	eba8 0800 	sub.w	r8, r8, r0
 8009818:	e7e9      	b.n	80097ee <__sflush_r+0xda>
 800981a:	bf00      	nop
 800981c:	20400001 	.word	0x20400001

08009820 <_fflush_r>:
 8009820:	b538      	push	{r3, r4, r5, lr}
 8009822:	690b      	ldr	r3, [r1, #16]
 8009824:	4605      	mov	r5, r0
 8009826:	460c      	mov	r4, r1
 8009828:	b913      	cbnz	r3, 8009830 <_fflush_r+0x10>
 800982a:	2500      	movs	r5, #0
 800982c:	4628      	mov	r0, r5
 800982e:	bd38      	pop	{r3, r4, r5, pc}
 8009830:	b118      	cbz	r0, 800983a <_fflush_r+0x1a>
 8009832:	6983      	ldr	r3, [r0, #24]
 8009834:	b90b      	cbnz	r3, 800983a <_fflush_r+0x1a>
 8009836:	f000 f887 	bl	8009948 <__sinit>
 800983a:	4b14      	ldr	r3, [pc, #80]	; (800988c <_fflush_r+0x6c>)
 800983c:	429c      	cmp	r4, r3
 800983e:	d11b      	bne.n	8009878 <_fflush_r+0x58>
 8009840:	686c      	ldr	r4, [r5, #4]
 8009842:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009846:	2b00      	cmp	r3, #0
 8009848:	d0ef      	beq.n	800982a <_fflush_r+0xa>
 800984a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800984c:	07d0      	lsls	r0, r2, #31
 800984e:	d404      	bmi.n	800985a <_fflush_r+0x3a>
 8009850:	0599      	lsls	r1, r3, #22
 8009852:	d402      	bmi.n	800985a <_fflush_r+0x3a>
 8009854:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009856:	f000 fc88 	bl	800a16a <__retarget_lock_acquire_recursive>
 800985a:	4628      	mov	r0, r5
 800985c:	4621      	mov	r1, r4
 800985e:	f7ff ff59 	bl	8009714 <__sflush_r>
 8009862:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009864:	07da      	lsls	r2, r3, #31
 8009866:	4605      	mov	r5, r0
 8009868:	d4e0      	bmi.n	800982c <_fflush_r+0xc>
 800986a:	89a3      	ldrh	r3, [r4, #12]
 800986c:	059b      	lsls	r3, r3, #22
 800986e:	d4dd      	bmi.n	800982c <_fflush_r+0xc>
 8009870:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009872:	f000 fc7b 	bl	800a16c <__retarget_lock_release_recursive>
 8009876:	e7d9      	b.n	800982c <_fflush_r+0xc>
 8009878:	4b05      	ldr	r3, [pc, #20]	; (8009890 <_fflush_r+0x70>)
 800987a:	429c      	cmp	r4, r3
 800987c:	d101      	bne.n	8009882 <_fflush_r+0x62>
 800987e:	68ac      	ldr	r4, [r5, #8]
 8009880:	e7df      	b.n	8009842 <_fflush_r+0x22>
 8009882:	4b04      	ldr	r3, [pc, #16]	; (8009894 <_fflush_r+0x74>)
 8009884:	429c      	cmp	r4, r3
 8009886:	bf08      	it	eq
 8009888:	68ec      	ldreq	r4, [r5, #12]
 800988a:	e7da      	b.n	8009842 <_fflush_r+0x22>
 800988c:	0800b9fc 	.word	0x0800b9fc
 8009890:	0800ba1c 	.word	0x0800ba1c
 8009894:	0800b9dc 	.word	0x0800b9dc

08009898 <std>:
 8009898:	2300      	movs	r3, #0
 800989a:	b510      	push	{r4, lr}
 800989c:	4604      	mov	r4, r0
 800989e:	e9c0 3300 	strd	r3, r3, [r0]
 80098a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80098a6:	6083      	str	r3, [r0, #8]
 80098a8:	8181      	strh	r1, [r0, #12]
 80098aa:	6643      	str	r3, [r0, #100]	; 0x64
 80098ac:	81c2      	strh	r2, [r0, #14]
 80098ae:	6183      	str	r3, [r0, #24]
 80098b0:	4619      	mov	r1, r3
 80098b2:	2208      	movs	r2, #8
 80098b4:	305c      	adds	r0, #92	; 0x5c
 80098b6:	f7fd fa0f 	bl	8006cd8 <memset>
 80098ba:	4b05      	ldr	r3, [pc, #20]	; (80098d0 <std+0x38>)
 80098bc:	6263      	str	r3, [r4, #36]	; 0x24
 80098be:	4b05      	ldr	r3, [pc, #20]	; (80098d4 <std+0x3c>)
 80098c0:	62a3      	str	r3, [r4, #40]	; 0x28
 80098c2:	4b05      	ldr	r3, [pc, #20]	; (80098d8 <std+0x40>)
 80098c4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80098c6:	4b05      	ldr	r3, [pc, #20]	; (80098dc <std+0x44>)
 80098c8:	6224      	str	r4, [r4, #32]
 80098ca:	6323      	str	r3, [r4, #48]	; 0x30
 80098cc:	bd10      	pop	{r4, pc}
 80098ce:	bf00      	nop
 80098d0:	0800b379 	.word	0x0800b379
 80098d4:	0800b39b 	.word	0x0800b39b
 80098d8:	0800b3d3 	.word	0x0800b3d3
 80098dc:	0800b3f7 	.word	0x0800b3f7

080098e0 <_cleanup_r>:
 80098e0:	4901      	ldr	r1, [pc, #4]	; (80098e8 <_cleanup_r+0x8>)
 80098e2:	f000 b8af 	b.w	8009a44 <_fwalk_reent>
 80098e6:	bf00      	nop
 80098e8:	08009821 	.word	0x08009821

080098ec <__sfmoreglue>:
 80098ec:	b570      	push	{r4, r5, r6, lr}
 80098ee:	2268      	movs	r2, #104	; 0x68
 80098f0:	1e4d      	subs	r5, r1, #1
 80098f2:	4355      	muls	r5, r2
 80098f4:	460e      	mov	r6, r1
 80098f6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80098fa:	f001 f9fb 	bl	800acf4 <_malloc_r>
 80098fe:	4604      	mov	r4, r0
 8009900:	b140      	cbz	r0, 8009914 <__sfmoreglue+0x28>
 8009902:	2100      	movs	r1, #0
 8009904:	e9c0 1600 	strd	r1, r6, [r0]
 8009908:	300c      	adds	r0, #12
 800990a:	60a0      	str	r0, [r4, #8]
 800990c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009910:	f7fd f9e2 	bl	8006cd8 <memset>
 8009914:	4620      	mov	r0, r4
 8009916:	bd70      	pop	{r4, r5, r6, pc}

08009918 <__sfp_lock_acquire>:
 8009918:	4801      	ldr	r0, [pc, #4]	; (8009920 <__sfp_lock_acquire+0x8>)
 800991a:	f000 bc26 	b.w	800a16a <__retarget_lock_acquire_recursive>
 800991e:	bf00      	nop
 8009920:	200004dd 	.word	0x200004dd

08009924 <__sfp_lock_release>:
 8009924:	4801      	ldr	r0, [pc, #4]	; (800992c <__sfp_lock_release+0x8>)
 8009926:	f000 bc21 	b.w	800a16c <__retarget_lock_release_recursive>
 800992a:	bf00      	nop
 800992c:	200004dd 	.word	0x200004dd

08009930 <__sinit_lock_acquire>:
 8009930:	4801      	ldr	r0, [pc, #4]	; (8009938 <__sinit_lock_acquire+0x8>)
 8009932:	f000 bc1a 	b.w	800a16a <__retarget_lock_acquire_recursive>
 8009936:	bf00      	nop
 8009938:	200004de 	.word	0x200004de

0800993c <__sinit_lock_release>:
 800993c:	4801      	ldr	r0, [pc, #4]	; (8009944 <__sinit_lock_release+0x8>)
 800993e:	f000 bc15 	b.w	800a16c <__retarget_lock_release_recursive>
 8009942:	bf00      	nop
 8009944:	200004de 	.word	0x200004de

08009948 <__sinit>:
 8009948:	b510      	push	{r4, lr}
 800994a:	4604      	mov	r4, r0
 800994c:	f7ff fff0 	bl	8009930 <__sinit_lock_acquire>
 8009950:	69a3      	ldr	r3, [r4, #24]
 8009952:	b11b      	cbz	r3, 800995c <__sinit+0x14>
 8009954:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009958:	f7ff bff0 	b.w	800993c <__sinit_lock_release>
 800995c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009960:	6523      	str	r3, [r4, #80]	; 0x50
 8009962:	4b13      	ldr	r3, [pc, #76]	; (80099b0 <__sinit+0x68>)
 8009964:	4a13      	ldr	r2, [pc, #76]	; (80099b4 <__sinit+0x6c>)
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	62a2      	str	r2, [r4, #40]	; 0x28
 800996a:	42a3      	cmp	r3, r4
 800996c:	bf04      	itt	eq
 800996e:	2301      	moveq	r3, #1
 8009970:	61a3      	streq	r3, [r4, #24]
 8009972:	4620      	mov	r0, r4
 8009974:	f000 f820 	bl	80099b8 <__sfp>
 8009978:	6060      	str	r0, [r4, #4]
 800997a:	4620      	mov	r0, r4
 800997c:	f000 f81c 	bl	80099b8 <__sfp>
 8009980:	60a0      	str	r0, [r4, #8]
 8009982:	4620      	mov	r0, r4
 8009984:	f000 f818 	bl	80099b8 <__sfp>
 8009988:	2200      	movs	r2, #0
 800998a:	60e0      	str	r0, [r4, #12]
 800998c:	2104      	movs	r1, #4
 800998e:	6860      	ldr	r0, [r4, #4]
 8009990:	f7ff ff82 	bl	8009898 <std>
 8009994:	68a0      	ldr	r0, [r4, #8]
 8009996:	2201      	movs	r2, #1
 8009998:	2109      	movs	r1, #9
 800999a:	f7ff ff7d 	bl	8009898 <std>
 800999e:	68e0      	ldr	r0, [r4, #12]
 80099a0:	2202      	movs	r2, #2
 80099a2:	2112      	movs	r1, #18
 80099a4:	f7ff ff78 	bl	8009898 <std>
 80099a8:	2301      	movs	r3, #1
 80099aa:	61a3      	str	r3, [r4, #24]
 80099ac:	e7d2      	b.n	8009954 <__sinit+0xc>
 80099ae:	bf00      	nop
 80099b0:	0800b7b4 	.word	0x0800b7b4
 80099b4:	080098e1 	.word	0x080098e1

080099b8 <__sfp>:
 80099b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099ba:	4607      	mov	r7, r0
 80099bc:	f7ff ffac 	bl	8009918 <__sfp_lock_acquire>
 80099c0:	4b1e      	ldr	r3, [pc, #120]	; (8009a3c <__sfp+0x84>)
 80099c2:	681e      	ldr	r6, [r3, #0]
 80099c4:	69b3      	ldr	r3, [r6, #24]
 80099c6:	b913      	cbnz	r3, 80099ce <__sfp+0x16>
 80099c8:	4630      	mov	r0, r6
 80099ca:	f7ff ffbd 	bl	8009948 <__sinit>
 80099ce:	3648      	adds	r6, #72	; 0x48
 80099d0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80099d4:	3b01      	subs	r3, #1
 80099d6:	d503      	bpl.n	80099e0 <__sfp+0x28>
 80099d8:	6833      	ldr	r3, [r6, #0]
 80099da:	b30b      	cbz	r3, 8009a20 <__sfp+0x68>
 80099dc:	6836      	ldr	r6, [r6, #0]
 80099de:	e7f7      	b.n	80099d0 <__sfp+0x18>
 80099e0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80099e4:	b9d5      	cbnz	r5, 8009a1c <__sfp+0x64>
 80099e6:	4b16      	ldr	r3, [pc, #88]	; (8009a40 <__sfp+0x88>)
 80099e8:	60e3      	str	r3, [r4, #12]
 80099ea:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80099ee:	6665      	str	r5, [r4, #100]	; 0x64
 80099f0:	f000 fbba 	bl	800a168 <__retarget_lock_init_recursive>
 80099f4:	f7ff ff96 	bl	8009924 <__sfp_lock_release>
 80099f8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80099fc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009a00:	6025      	str	r5, [r4, #0]
 8009a02:	61a5      	str	r5, [r4, #24]
 8009a04:	2208      	movs	r2, #8
 8009a06:	4629      	mov	r1, r5
 8009a08:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009a0c:	f7fd f964 	bl	8006cd8 <memset>
 8009a10:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009a14:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009a18:	4620      	mov	r0, r4
 8009a1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a1c:	3468      	adds	r4, #104	; 0x68
 8009a1e:	e7d9      	b.n	80099d4 <__sfp+0x1c>
 8009a20:	2104      	movs	r1, #4
 8009a22:	4638      	mov	r0, r7
 8009a24:	f7ff ff62 	bl	80098ec <__sfmoreglue>
 8009a28:	4604      	mov	r4, r0
 8009a2a:	6030      	str	r0, [r6, #0]
 8009a2c:	2800      	cmp	r0, #0
 8009a2e:	d1d5      	bne.n	80099dc <__sfp+0x24>
 8009a30:	f7ff ff78 	bl	8009924 <__sfp_lock_release>
 8009a34:	230c      	movs	r3, #12
 8009a36:	603b      	str	r3, [r7, #0]
 8009a38:	e7ee      	b.n	8009a18 <__sfp+0x60>
 8009a3a:	bf00      	nop
 8009a3c:	0800b7b4 	.word	0x0800b7b4
 8009a40:	ffff0001 	.word	0xffff0001

08009a44 <_fwalk_reent>:
 8009a44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a48:	4606      	mov	r6, r0
 8009a4a:	4688      	mov	r8, r1
 8009a4c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009a50:	2700      	movs	r7, #0
 8009a52:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009a56:	f1b9 0901 	subs.w	r9, r9, #1
 8009a5a:	d505      	bpl.n	8009a68 <_fwalk_reent+0x24>
 8009a5c:	6824      	ldr	r4, [r4, #0]
 8009a5e:	2c00      	cmp	r4, #0
 8009a60:	d1f7      	bne.n	8009a52 <_fwalk_reent+0xe>
 8009a62:	4638      	mov	r0, r7
 8009a64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a68:	89ab      	ldrh	r3, [r5, #12]
 8009a6a:	2b01      	cmp	r3, #1
 8009a6c:	d907      	bls.n	8009a7e <_fwalk_reent+0x3a>
 8009a6e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009a72:	3301      	adds	r3, #1
 8009a74:	d003      	beq.n	8009a7e <_fwalk_reent+0x3a>
 8009a76:	4629      	mov	r1, r5
 8009a78:	4630      	mov	r0, r6
 8009a7a:	47c0      	blx	r8
 8009a7c:	4307      	orrs	r7, r0
 8009a7e:	3568      	adds	r5, #104	; 0x68
 8009a80:	e7e9      	b.n	8009a56 <_fwalk_reent+0x12>

08009a82 <rshift>:
 8009a82:	6903      	ldr	r3, [r0, #16]
 8009a84:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009a88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009a8c:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009a90:	f100 0414 	add.w	r4, r0, #20
 8009a94:	dd45      	ble.n	8009b22 <rshift+0xa0>
 8009a96:	f011 011f 	ands.w	r1, r1, #31
 8009a9a:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009a9e:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009aa2:	d10c      	bne.n	8009abe <rshift+0x3c>
 8009aa4:	f100 0710 	add.w	r7, r0, #16
 8009aa8:	4629      	mov	r1, r5
 8009aaa:	42b1      	cmp	r1, r6
 8009aac:	d334      	bcc.n	8009b18 <rshift+0x96>
 8009aae:	1a9b      	subs	r3, r3, r2
 8009ab0:	009b      	lsls	r3, r3, #2
 8009ab2:	1eea      	subs	r2, r5, #3
 8009ab4:	4296      	cmp	r6, r2
 8009ab6:	bf38      	it	cc
 8009ab8:	2300      	movcc	r3, #0
 8009aba:	4423      	add	r3, r4
 8009abc:	e015      	b.n	8009aea <rshift+0x68>
 8009abe:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009ac2:	f1c1 0820 	rsb	r8, r1, #32
 8009ac6:	40cf      	lsrs	r7, r1
 8009ac8:	f105 0e04 	add.w	lr, r5, #4
 8009acc:	46a1      	mov	r9, r4
 8009ace:	4576      	cmp	r6, lr
 8009ad0:	46f4      	mov	ip, lr
 8009ad2:	d815      	bhi.n	8009b00 <rshift+0x7e>
 8009ad4:	1a9a      	subs	r2, r3, r2
 8009ad6:	0092      	lsls	r2, r2, #2
 8009ad8:	3a04      	subs	r2, #4
 8009ada:	3501      	adds	r5, #1
 8009adc:	42ae      	cmp	r6, r5
 8009ade:	bf38      	it	cc
 8009ae0:	2200      	movcc	r2, #0
 8009ae2:	18a3      	adds	r3, r4, r2
 8009ae4:	50a7      	str	r7, [r4, r2]
 8009ae6:	b107      	cbz	r7, 8009aea <rshift+0x68>
 8009ae8:	3304      	adds	r3, #4
 8009aea:	1b1a      	subs	r2, r3, r4
 8009aec:	42a3      	cmp	r3, r4
 8009aee:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009af2:	bf08      	it	eq
 8009af4:	2300      	moveq	r3, #0
 8009af6:	6102      	str	r2, [r0, #16]
 8009af8:	bf08      	it	eq
 8009afa:	6143      	streq	r3, [r0, #20]
 8009afc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009b00:	f8dc c000 	ldr.w	ip, [ip]
 8009b04:	fa0c fc08 	lsl.w	ip, ip, r8
 8009b08:	ea4c 0707 	orr.w	r7, ip, r7
 8009b0c:	f849 7b04 	str.w	r7, [r9], #4
 8009b10:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009b14:	40cf      	lsrs	r7, r1
 8009b16:	e7da      	b.n	8009ace <rshift+0x4c>
 8009b18:	f851 cb04 	ldr.w	ip, [r1], #4
 8009b1c:	f847 cf04 	str.w	ip, [r7, #4]!
 8009b20:	e7c3      	b.n	8009aaa <rshift+0x28>
 8009b22:	4623      	mov	r3, r4
 8009b24:	e7e1      	b.n	8009aea <rshift+0x68>

08009b26 <__hexdig_fun>:
 8009b26:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009b2a:	2b09      	cmp	r3, #9
 8009b2c:	d802      	bhi.n	8009b34 <__hexdig_fun+0xe>
 8009b2e:	3820      	subs	r0, #32
 8009b30:	b2c0      	uxtb	r0, r0
 8009b32:	4770      	bx	lr
 8009b34:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009b38:	2b05      	cmp	r3, #5
 8009b3a:	d801      	bhi.n	8009b40 <__hexdig_fun+0x1a>
 8009b3c:	3847      	subs	r0, #71	; 0x47
 8009b3e:	e7f7      	b.n	8009b30 <__hexdig_fun+0xa>
 8009b40:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009b44:	2b05      	cmp	r3, #5
 8009b46:	d801      	bhi.n	8009b4c <__hexdig_fun+0x26>
 8009b48:	3827      	subs	r0, #39	; 0x27
 8009b4a:	e7f1      	b.n	8009b30 <__hexdig_fun+0xa>
 8009b4c:	2000      	movs	r0, #0
 8009b4e:	4770      	bx	lr

08009b50 <__gethex>:
 8009b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b54:	ed2d 8b02 	vpush	{d8}
 8009b58:	b089      	sub	sp, #36	; 0x24
 8009b5a:	ee08 0a10 	vmov	s16, r0
 8009b5e:	9304      	str	r3, [sp, #16]
 8009b60:	4bb4      	ldr	r3, [pc, #720]	; (8009e34 <__gethex+0x2e4>)
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	9301      	str	r3, [sp, #4]
 8009b66:	4618      	mov	r0, r3
 8009b68:	468b      	mov	fp, r1
 8009b6a:	4690      	mov	r8, r2
 8009b6c:	f7f6 fb40 	bl	80001f0 <strlen>
 8009b70:	9b01      	ldr	r3, [sp, #4]
 8009b72:	f8db 2000 	ldr.w	r2, [fp]
 8009b76:	4403      	add	r3, r0
 8009b78:	4682      	mov	sl, r0
 8009b7a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8009b7e:	9305      	str	r3, [sp, #20]
 8009b80:	1c93      	adds	r3, r2, #2
 8009b82:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009b86:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009b8a:	32fe      	adds	r2, #254	; 0xfe
 8009b8c:	18d1      	adds	r1, r2, r3
 8009b8e:	461f      	mov	r7, r3
 8009b90:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009b94:	9100      	str	r1, [sp, #0]
 8009b96:	2830      	cmp	r0, #48	; 0x30
 8009b98:	d0f8      	beq.n	8009b8c <__gethex+0x3c>
 8009b9a:	f7ff ffc4 	bl	8009b26 <__hexdig_fun>
 8009b9e:	4604      	mov	r4, r0
 8009ba0:	2800      	cmp	r0, #0
 8009ba2:	d13a      	bne.n	8009c1a <__gethex+0xca>
 8009ba4:	9901      	ldr	r1, [sp, #4]
 8009ba6:	4652      	mov	r2, sl
 8009ba8:	4638      	mov	r0, r7
 8009baa:	f001 fc28 	bl	800b3fe <strncmp>
 8009bae:	4605      	mov	r5, r0
 8009bb0:	2800      	cmp	r0, #0
 8009bb2:	d168      	bne.n	8009c86 <__gethex+0x136>
 8009bb4:	f817 000a 	ldrb.w	r0, [r7, sl]
 8009bb8:	eb07 060a 	add.w	r6, r7, sl
 8009bbc:	f7ff ffb3 	bl	8009b26 <__hexdig_fun>
 8009bc0:	2800      	cmp	r0, #0
 8009bc2:	d062      	beq.n	8009c8a <__gethex+0x13a>
 8009bc4:	4633      	mov	r3, r6
 8009bc6:	7818      	ldrb	r0, [r3, #0]
 8009bc8:	2830      	cmp	r0, #48	; 0x30
 8009bca:	461f      	mov	r7, r3
 8009bcc:	f103 0301 	add.w	r3, r3, #1
 8009bd0:	d0f9      	beq.n	8009bc6 <__gethex+0x76>
 8009bd2:	f7ff ffa8 	bl	8009b26 <__hexdig_fun>
 8009bd6:	2301      	movs	r3, #1
 8009bd8:	fab0 f480 	clz	r4, r0
 8009bdc:	0964      	lsrs	r4, r4, #5
 8009bde:	4635      	mov	r5, r6
 8009be0:	9300      	str	r3, [sp, #0]
 8009be2:	463a      	mov	r2, r7
 8009be4:	4616      	mov	r6, r2
 8009be6:	3201      	adds	r2, #1
 8009be8:	7830      	ldrb	r0, [r6, #0]
 8009bea:	f7ff ff9c 	bl	8009b26 <__hexdig_fun>
 8009bee:	2800      	cmp	r0, #0
 8009bf0:	d1f8      	bne.n	8009be4 <__gethex+0x94>
 8009bf2:	9901      	ldr	r1, [sp, #4]
 8009bf4:	4652      	mov	r2, sl
 8009bf6:	4630      	mov	r0, r6
 8009bf8:	f001 fc01 	bl	800b3fe <strncmp>
 8009bfc:	b980      	cbnz	r0, 8009c20 <__gethex+0xd0>
 8009bfe:	b94d      	cbnz	r5, 8009c14 <__gethex+0xc4>
 8009c00:	eb06 050a 	add.w	r5, r6, sl
 8009c04:	462a      	mov	r2, r5
 8009c06:	4616      	mov	r6, r2
 8009c08:	3201      	adds	r2, #1
 8009c0a:	7830      	ldrb	r0, [r6, #0]
 8009c0c:	f7ff ff8b 	bl	8009b26 <__hexdig_fun>
 8009c10:	2800      	cmp	r0, #0
 8009c12:	d1f8      	bne.n	8009c06 <__gethex+0xb6>
 8009c14:	1bad      	subs	r5, r5, r6
 8009c16:	00ad      	lsls	r5, r5, #2
 8009c18:	e004      	b.n	8009c24 <__gethex+0xd4>
 8009c1a:	2400      	movs	r4, #0
 8009c1c:	4625      	mov	r5, r4
 8009c1e:	e7e0      	b.n	8009be2 <__gethex+0x92>
 8009c20:	2d00      	cmp	r5, #0
 8009c22:	d1f7      	bne.n	8009c14 <__gethex+0xc4>
 8009c24:	7833      	ldrb	r3, [r6, #0]
 8009c26:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009c2a:	2b50      	cmp	r3, #80	; 0x50
 8009c2c:	d13b      	bne.n	8009ca6 <__gethex+0x156>
 8009c2e:	7873      	ldrb	r3, [r6, #1]
 8009c30:	2b2b      	cmp	r3, #43	; 0x2b
 8009c32:	d02c      	beq.n	8009c8e <__gethex+0x13e>
 8009c34:	2b2d      	cmp	r3, #45	; 0x2d
 8009c36:	d02e      	beq.n	8009c96 <__gethex+0x146>
 8009c38:	1c71      	adds	r1, r6, #1
 8009c3a:	f04f 0900 	mov.w	r9, #0
 8009c3e:	7808      	ldrb	r0, [r1, #0]
 8009c40:	f7ff ff71 	bl	8009b26 <__hexdig_fun>
 8009c44:	1e43      	subs	r3, r0, #1
 8009c46:	b2db      	uxtb	r3, r3
 8009c48:	2b18      	cmp	r3, #24
 8009c4a:	d82c      	bhi.n	8009ca6 <__gethex+0x156>
 8009c4c:	f1a0 0210 	sub.w	r2, r0, #16
 8009c50:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009c54:	f7ff ff67 	bl	8009b26 <__hexdig_fun>
 8009c58:	1e43      	subs	r3, r0, #1
 8009c5a:	b2db      	uxtb	r3, r3
 8009c5c:	2b18      	cmp	r3, #24
 8009c5e:	d91d      	bls.n	8009c9c <__gethex+0x14c>
 8009c60:	f1b9 0f00 	cmp.w	r9, #0
 8009c64:	d000      	beq.n	8009c68 <__gethex+0x118>
 8009c66:	4252      	negs	r2, r2
 8009c68:	4415      	add	r5, r2
 8009c6a:	f8cb 1000 	str.w	r1, [fp]
 8009c6e:	b1e4      	cbz	r4, 8009caa <__gethex+0x15a>
 8009c70:	9b00      	ldr	r3, [sp, #0]
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	bf14      	ite	ne
 8009c76:	2700      	movne	r7, #0
 8009c78:	2706      	moveq	r7, #6
 8009c7a:	4638      	mov	r0, r7
 8009c7c:	b009      	add	sp, #36	; 0x24
 8009c7e:	ecbd 8b02 	vpop	{d8}
 8009c82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c86:	463e      	mov	r6, r7
 8009c88:	4625      	mov	r5, r4
 8009c8a:	2401      	movs	r4, #1
 8009c8c:	e7ca      	b.n	8009c24 <__gethex+0xd4>
 8009c8e:	f04f 0900 	mov.w	r9, #0
 8009c92:	1cb1      	adds	r1, r6, #2
 8009c94:	e7d3      	b.n	8009c3e <__gethex+0xee>
 8009c96:	f04f 0901 	mov.w	r9, #1
 8009c9a:	e7fa      	b.n	8009c92 <__gethex+0x142>
 8009c9c:	230a      	movs	r3, #10
 8009c9e:	fb03 0202 	mla	r2, r3, r2, r0
 8009ca2:	3a10      	subs	r2, #16
 8009ca4:	e7d4      	b.n	8009c50 <__gethex+0x100>
 8009ca6:	4631      	mov	r1, r6
 8009ca8:	e7df      	b.n	8009c6a <__gethex+0x11a>
 8009caa:	1bf3      	subs	r3, r6, r7
 8009cac:	3b01      	subs	r3, #1
 8009cae:	4621      	mov	r1, r4
 8009cb0:	2b07      	cmp	r3, #7
 8009cb2:	dc0b      	bgt.n	8009ccc <__gethex+0x17c>
 8009cb4:	ee18 0a10 	vmov	r0, s16
 8009cb8:	f000 fad8 	bl	800a26c <_Balloc>
 8009cbc:	4604      	mov	r4, r0
 8009cbe:	b940      	cbnz	r0, 8009cd2 <__gethex+0x182>
 8009cc0:	4b5d      	ldr	r3, [pc, #372]	; (8009e38 <__gethex+0x2e8>)
 8009cc2:	4602      	mov	r2, r0
 8009cc4:	21de      	movs	r1, #222	; 0xde
 8009cc6:	485d      	ldr	r0, [pc, #372]	; (8009e3c <__gethex+0x2ec>)
 8009cc8:	f001 fbcc 	bl	800b464 <__assert_func>
 8009ccc:	3101      	adds	r1, #1
 8009cce:	105b      	asrs	r3, r3, #1
 8009cd0:	e7ee      	b.n	8009cb0 <__gethex+0x160>
 8009cd2:	f100 0914 	add.w	r9, r0, #20
 8009cd6:	f04f 0b00 	mov.w	fp, #0
 8009cda:	f1ca 0301 	rsb	r3, sl, #1
 8009cde:	f8cd 9008 	str.w	r9, [sp, #8]
 8009ce2:	f8cd b000 	str.w	fp, [sp]
 8009ce6:	9306      	str	r3, [sp, #24]
 8009ce8:	42b7      	cmp	r7, r6
 8009cea:	d340      	bcc.n	8009d6e <__gethex+0x21e>
 8009cec:	9802      	ldr	r0, [sp, #8]
 8009cee:	9b00      	ldr	r3, [sp, #0]
 8009cf0:	f840 3b04 	str.w	r3, [r0], #4
 8009cf4:	eba0 0009 	sub.w	r0, r0, r9
 8009cf8:	1080      	asrs	r0, r0, #2
 8009cfa:	0146      	lsls	r6, r0, #5
 8009cfc:	6120      	str	r0, [r4, #16]
 8009cfe:	4618      	mov	r0, r3
 8009d00:	f000 fba6 	bl	800a450 <__hi0bits>
 8009d04:	1a30      	subs	r0, r6, r0
 8009d06:	f8d8 6000 	ldr.w	r6, [r8]
 8009d0a:	42b0      	cmp	r0, r6
 8009d0c:	dd63      	ble.n	8009dd6 <__gethex+0x286>
 8009d0e:	1b87      	subs	r7, r0, r6
 8009d10:	4639      	mov	r1, r7
 8009d12:	4620      	mov	r0, r4
 8009d14:	f000 ff4a 	bl	800abac <__any_on>
 8009d18:	4682      	mov	sl, r0
 8009d1a:	b1a8      	cbz	r0, 8009d48 <__gethex+0x1f8>
 8009d1c:	1e7b      	subs	r3, r7, #1
 8009d1e:	1159      	asrs	r1, r3, #5
 8009d20:	f003 021f 	and.w	r2, r3, #31
 8009d24:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009d28:	f04f 0a01 	mov.w	sl, #1
 8009d2c:	fa0a f202 	lsl.w	r2, sl, r2
 8009d30:	420a      	tst	r2, r1
 8009d32:	d009      	beq.n	8009d48 <__gethex+0x1f8>
 8009d34:	4553      	cmp	r3, sl
 8009d36:	dd05      	ble.n	8009d44 <__gethex+0x1f4>
 8009d38:	1eb9      	subs	r1, r7, #2
 8009d3a:	4620      	mov	r0, r4
 8009d3c:	f000 ff36 	bl	800abac <__any_on>
 8009d40:	2800      	cmp	r0, #0
 8009d42:	d145      	bne.n	8009dd0 <__gethex+0x280>
 8009d44:	f04f 0a02 	mov.w	sl, #2
 8009d48:	4639      	mov	r1, r7
 8009d4a:	4620      	mov	r0, r4
 8009d4c:	f7ff fe99 	bl	8009a82 <rshift>
 8009d50:	443d      	add	r5, r7
 8009d52:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009d56:	42ab      	cmp	r3, r5
 8009d58:	da4c      	bge.n	8009df4 <__gethex+0x2a4>
 8009d5a:	ee18 0a10 	vmov	r0, s16
 8009d5e:	4621      	mov	r1, r4
 8009d60:	f000 fac4 	bl	800a2ec <_Bfree>
 8009d64:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009d66:	2300      	movs	r3, #0
 8009d68:	6013      	str	r3, [r2, #0]
 8009d6a:	27a3      	movs	r7, #163	; 0xa3
 8009d6c:	e785      	b.n	8009c7a <__gethex+0x12a>
 8009d6e:	1e73      	subs	r3, r6, #1
 8009d70:	9a05      	ldr	r2, [sp, #20]
 8009d72:	9303      	str	r3, [sp, #12]
 8009d74:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009d78:	4293      	cmp	r3, r2
 8009d7a:	d019      	beq.n	8009db0 <__gethex+0x260>
 8009d7c:	f1bb 0f20 	cmp.w	fp, #32
 8009d80:	d107      	bne.n	8009d92 <__gethex+0x242>
 8009d82:	9b02      	ldr	r3, [sp, #8]
 8009d84:	9a00      	ldr	r2, [sp, #0]
 8009d86:	f843 2b04 	str.w	r2, [r3], #4
 8009d8a:	9302      	str	r3, [sp, #8]
 8009d8c:	2300      	movs	r3, #0
 8009d8e:	9300      	str	r3, [sp, #0]
 8009d90:	469b      	mov	fp, r3
 8009d92:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8009d96:	f7ff fec6 	bl	8009b26 <__hexdig_fun>
 8009d9a:	9b00      	ldr	r3, [sp, #0]
 8009d9c:	f000 000f 	and.w	r0, r0, #15
 8009da0:	fa00 f00b 	lsl.w	r0, r0, fp
 8009da4:	4303      	orrs	r3, r0
 8009da6:	9300      	str	r3, [sp, #0]
 8009da8:	f10b 0b04 	add.w	fp, fp, #4
 8009dac:	9b03      	ldr	r3, [sp, #12]
 8009dae:	e00d      	b.n	8009dcc <__gethex+0x27c>
 8009db0:	9b03      	ldr	r3, [sp, #12]
 8009db2:	9a06      	ldr	r2, [sp, #24]
 8009db4:	4413      	add	r3, r2
 8009db6:	42bb      	cmp	r3, r7
 8009db8:	d3e0      	bcc.n	8009d7c <__gethex+0x22c>
 8009dba:	4618      	mov	r0, r3
 8009dbc:	9901      	ldr	r1, [sp, #4]
 8009dbe:	9307      	str	r3, [sp, #28]
 8009dc0:	4652      	mov	r2, sl
 8009dc2:	f001 fb1c 	bl	800b3fe <strncmp>
 8009dc6:	9b07      	ldr	r3, [sp, #28]
 8009dc8:	2800      	cmp	r0, #0
 8009dca:	d1d7      	bne.n	8009d7c <__gethex+0x22c>
 8009dcc:	461e      	mov	r6, r3
 8009dce:	e78b      	b.n	8009ce8 <__gethex+0x198>
 8009dd0:	f04f 0a03 	mov.w	sl, #3
 8009dd4:	e7b8      	b.n	8009d48 <__gethex+0x1f8>
 8009dd6:	da0a      	bge.n	8009dee <__gethex+0x29e>
 8009dd8:	1a37      	subs	r7, r6, r0
 8009dda:	4621      	mov	r1, r4
 8009ddc:	ee18 0a10 	vmov	r0, s16
 8009de0:	463a      	mov	r2, r7
 8009de2:	f000 fc9f 	bl	800a724 <__lshift>
 8009de6:	1bed      	subs	r5, r5, r7
 8009de8:	4604      	mov	r4, r0
 8009dea:	f100 0914 	add.w	r9, r0, #20
 8009dee:	f04f 0a00 	mov.w	sl, #0
 8009df2:	e7ae      	b.n	8009d52 <__gethex+0x202>
 8009df4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009df8:	42a8      	cmp	r0, r5
 8009dfa:	dd72      	ble.n	8009ee2 <__gethex+0x392>
 8009dfc:	1b45      	subs	r5, r0, r5
 8009dfe:	42ae      	cmp	r6, r5
 8009e00:	dc36      	bgt.n	8009e70 <__gethex+0x320>
 8009e02:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009e06:	2b02      	cmp	r3, #2
 8009e08:	d02a      	beq.n	8009e60 <__gethex+0x310>
 8009e0a:	2b03      	cmp	r3, #3
 8009e0c:	d02c      	beq.n	8009e68 <__gethex+0x318>
 8009e0e:	2b01      	cmp	r3, #1
 8009e10:	d11c      	bne.n	8009e4c <__gethex+0x2fc>
 8009e12:	42ae      	cmp	r6, r5
 8009e14:	d11a      	bne.n	8009e4c <__gethex+0x2fc>
 8009e16:	2e01      	cmp	r6, #1
 8009e18:	d112      	bne.n	8009e40 <__gethex+0x2f0>
 8009e1a:	9a04      	ldr	r2, [sp, #16]
 8009e1c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009e20:	6013      	str	r3, [r2, #0]
 8009e22:	2301      	movs	r3, #1
 8009e24:	6123      	str	r3, [r4, #16]
 8009e26:	f8c9 3000 	str.w	r3, [r9]
 8009e2a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009e2c:	2762      	movs	r7, #98	; 0x62
 8009e2e:	601c      	str	r4, [r3, #0]
 8009e30:	e723      	b.n	8009c7a <__gethex+0x12a>
 8009e32:	bf00      	nop
 8009e34:	0800baa4 	.word	0x0800baa4
 8009e38:	0800b9c8 	.word	0x0800b9c8
 8009e3c:	0800ba3c 	.word	0x0800ba3c
 8009e40:	1e71      	subs	r1, r6, #1
 8009e42:	4620      	mov	r0, r4
 8009e44:	f000 feb2 	bl	800abac <__any_on>
 8009e48:	2800      	cmp	r0, #0
 8009e4a:	d1e6      	bne.n	8009e1a <__gethex+0x2ca>
 8009e4c:	ee18 0a10 	vmov	r0, s16
 8009e50:	4621      	mov	r1, r4
 8009e52:	f000 fa4b 	bl	800a2ec <_Bfree>
 8009e56:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009e58:	2300      	movs	r3, #0
 8009e5a:	6013      	str	r3, [r2, #0]
 8009e5c:	2750      	movs	r7, #80	; 0x50
 8009e5e:	e70c      	b.n	8009c7a <__gethex+0x12a>
 8009e60:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d1f2      	bne.n	8009e4c <__gethex+0x2fc>
 8009e66:	e7d8      	b.n	8009e1a <__gethex+0x2ca>
 8009e68:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d1d5      	bne.n	8009e1a <__gethex+0x2ca>
 8009e6e:	e7ed      	b.n	8009e4c <__gethex+0x2fc>
 8009e70:	1e6f      	subs	r7, r5, #1
 8009e72:	f1ba 0f00 	cmp.w	sl, #0
 8009e76:	d131      	bne.n	8009edc <__gethex+0x38c>
 8009e78:	b127      	cbz	r7, 8009e84 <__gethex+0x334>
 8009e7a:	4639      	mov	r1, r7
 8009e7c:	4620      	mov	r0, r4
 8009e7e:	f000 fe95 	bl	800abac <__any_on>
 8009e82:	4682      	mov	sl, r0
 8009e84:	117b      	asrs	r3, r7, #5
 8009e86:	2101      	movs	r1, #1
 8009e88:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009e8c:	f007 071f 	and.w	r7, r7, #31
 8009e90:	fa01 f707 	lsl.w	r7, r1, r7
 8009e94:	421f      	tst	r7, r3
 8009e96:	4629      	mov	r1, r5
 8009e98:	4620      	mov	r0, r4
 8009e9a:	bf18      	it	ne
 8009e9c:	f04a 0a02 	orrne.w	sl, sl, #2
 8009ea0:	1b76      	subs	r6, r6, r5
 8009ea2:	f7ff fdee 	bl	8009a82 <rshift>
 8009ea6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009eaa:	2702      	movs	r7, #2
 8009eac:	f1ba 0f00 	cmp.w	sl, #0
 8009eb0:	d048      	beq.n	8009f44 <__gethex+0x3f4>
 8009eb2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009eb6:	2b02      	cmp	r3, #2
 8009eb8:	d015      	beq.n	8009ee6 <__gethex+0x396>
 8009eba:	2b03      	cmp	r3, #3
 8009ebc:	d017      	beq.n	8009eee <__gethex+0x39e>
 8009ebe:	2b01      	cmp	r3, #1
 8009ec0:	d109      	bne.n	8009ed6 <__gethex+0x386>
 8009ec2:	f01a 0f02 	tst.w	sl, #2
 8009ec6:	d006      	beq.n	8009ed6 <__gethex+0x386>
 8009ec8:	f8d9 0000 	ldr.w	r0, [r9]
 8009ecc:	ea4a 0a00 	orr.w	sl, sl, r0
 8009ed0:	f01a 0f01 	tst.w	sl, #1
 8009ed4:	d10e      	bne.n	8009ef4 <__gethex+0x3a4>
 8009ed6:	f047 0710 	orr.w	r7, r7, #16
 8009eda:	e033      	b.n	8009f44 <__gethex+0x3f4>
 8009edc:	f04f 0a01 	mov.w	sl, #1
 8009ee0:	e7d0      	b.n	8009e84 <__gethex+0x334>
 8009ee2:	2701      	movs	r7, #1
 8009ee4:	e7e2      	b.n	8009eac <__gethex+0x35c>
 8009ee6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009ee8:	f1c3 0301 	rsb	r3, r3, #1
 8009eec:	9315      	str	r3, [sp, #84]	; 0x54
 8009eee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d0f0      	beq.n	8009ed6 <__gethex+0x386>
 8009ef4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009ef8:	f104 0314 	add.w	r3, r4, #20
 8009efc:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009f00:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009f04:	f04f 0c00 	mov.w	ip, #0
 8009f08:	4618      	mov	r0, r3
 8009f0a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f0e:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009f12:	d01c      	beq.n	8009f4e <__gethex+0x3fe>
 8009f14:	3201      	adds	r2, #1
 8009f16:	6002      	str	r2, [r0, #0]
 8009f18:	2f02      	cmp	r7, #2
 8009f1a:	f104 0314 	add.w	r3, r4, #20
 8009f1e:	d13f      	bne.n	8009fa0 <__gethex+0x450>
 8009f20:	f8d8 2000 	ldr.w	r2, [r8]
 8009f24:	3a01      	subs	r2, #1
 8009f26:	42b2      	cmp	r2, r6
 8009f28:	d10a      	bne.n	8009f40 <__gethex+0x3f0>
 8009f2a:	1171      	asrs	r1, r6, #5
 8009f2c:	2201      	movs	r2, #1
 8009f2e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009f32:	f006 061f 	and.w	r6, r6, #31
 8009f36:	fa02 f606 	lsl.w	r6, r2, r6
 8009f3a:	421e      	tst	r6, r3
 8009f3c:	bf18      	it	ne
 8009f3e:	4617      	movne	r7, r2
 8009f40:	f047 0720 	orr.w	r7, r7, #32
 8009f44:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009f46:	601c      	str	r4, [r3, #0]
 8009f48:	9b04      	ldr	r3, [sp, #16]
 8009f4a:	601d      	str	r5, [r3, #0]
 8009f4c:	e695      	b.n	8009c7a <__gethex+0x12a>
 8009f4e:	4299      	cmp	r1, r3
 8009f50:	f843 cc04 	str.w	ip, [r3, #-4]
 8009f54:	d8d8      	bhi.n	8009f08 <__gethex+0x3b8>
 8009f56:	68a3      	ldr	r3, [r4, #8]
 8009f58:	459b      	cmp	fp, r3
 8009f5a:	db19      	blt.n	8009f90 <__gethex+0x440>
 8009f5c:	6861      	ldr	r1, [r4, #4]
 8009f5e:	ee18 0a10 	vmov	r0, s16
 8009f62:	3101      	adds	r1, #1
 8009f64:	f000 f982 	bl	800a26c <_Balloc>
 8009f68:	4681      	mov	r9, r0
 8009f6a:	b918      	cbnz	r0, 8009f74 <__gethex+0x424>
 8009f6c:	4b1a      	ldr	r3, [pc, #104]	; (8009fd8 <__gethex+0x488>)
 8009f6e:	4602      	mov	r2, r0
 8009f70:	2184      	movs	r1, #132	; 0x84
 8009f72:	e6a8      	b.n	8009cc6 <__gethex+0x176>
 8009f74:	6922      	ldr	r2, [r4, #16]
 8009f76:	3202      	adds	r2, #2
 8009f78:	f104 010c 	add.w	r1, r4, #12
 8009f7c:	0092      	lsls	r2, r2, #2
 8009f7e:	300c      	adds	r0, #12
 8009f80:	f7fc fe9c 	bl	8006cbc <memcpy>
 8009f84:	4621      	mov	r1, r4
 8009f86:	ee18 0a10 	vmov	r0, s16
 8009f8a:	f000 f9af 	bl	800a2ec <_Bfree>
 8009f8e:	464c      	mov	r4, r9
 8009f90:	6923      	ldr	r3, [r4, #16]
 8009f92:	1c5a      	adds	r2, r3, #1
 8009f94:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009f98:	6122      	str	r2, [r4, #16]
 8009f9a:	2201      	movs	r2, #1
 8009f9c:	615a      	str	r2, [r3, #20]
 8009f9e:	e7bb      	b.n	8009f18 <__gethex+0x3c8>
 8009fa0:	6922      	ldr	r2, [r4, #16]
 8009fa2:	455a      	cmp	r2, fp
 8009fa4:	dd0b      	ble.n	8009fbe <__gethex+0x46e>
 8009fa6:	2101      	movs	r1, #1
 8009fa8:	4620      	mov	r0, r4
 8009faa:	f7ff fd6a 	bl	8009a82 <rshift>
 8009fae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009fb2:	3501      	adds	r5, #1
 8009fb4:	42ab      	cmp	r3, r5
 8009fb6:	f6ff aed0 	blt.w	8009d5a <__gethex+0x20a>
 8009fba:	2701      	movs	r7, #1
 8009fbc:	e7c0      	b.n	8009f40 <__gethex+0x3f0>
 8009fbe:	f016 061f 	ands.w	r6, r6, #31
 8009fc2:	d0fa      	beq.n	8009fba <__gethex+0x46a>
 8009fc4:	4453      	add	r3, sl
 8009fc6:	f1c6 0620 	rsb	r6, r6, #32
 8009fca:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009fce:	f000 fa3f 	bl	800a450 <__hi0bits>
 8009fd2:	42b0      	cmp	r0, r6
 8009fd4:	dbe7      	blt.n	8009fa6 <__gethex+0x456>
 8009fd6:	e7f0      	b.n	8009fba <__gethex+0x46a>
 8009fd8:	0800b9c8 	.word	0x0800b9c8

08009fdc <L_shift>:
 8009fdc:	f1c2 0208 	rsb	r2, r2, #8
 8009fe0:	0092      	lsls	r2, r2, #2
 8009fe2:	b570      	push	{r4, r5, r6, lr}
 8009fe4:	f1c2 0620 	rsb	r6, r2, #32
 8009fe8:	6843      	ldr	r3, [r0, #4]
 8009fea:	6804      	ldr	r4, [r0, #0]
 8009fec:	fa03 f506 	lsl.w	r5, r3, r6
 8009ff0:	432c      	orrs	r4, r5
 8009ff2:	40d3      	lsrs	r3, r2
 8009ff4:	6004      	str	r4, [r0, #0]
 8009ff6:	f840 3f04 	str.w	r3, [r0, #4]!
 8009ffa:	4288      	cmp	r0, r1
 8009ffc:	d3f4      	bcc.n	8009fe8 <L_shift+0xc>
 8009ffe:	bd70      	pop	{r4, r5, r6, pc}

0800a000 <__match>:
 800a000:	b530      	push	{r4, r5, lr}
 800a002:	6803      	ldr	r3, [r0, #0]
 800a004:	3301      	adds	r3, #1
 800a006:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a00a:	b914      	cbnz	r4, 800a012 <__match+0x12>
 800a00c:	6003      	str	r3, [r0, #0]
 800a00e:	2001      	movs	r0, #1
 800a010:	bd30      	pop	{r4, r5, pc}
 800a012:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a016:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a01a:	2d19      	cmp	r5, #25
 800a01c:	bf98      	it	ls
 800a01e:	3220      	addls	r2, #32
 800a020:	42a2      	cmp	r2, r4
 800a022:	d0f0      	beq.n	800a006 <__match+0x6>
 800a024:	2000      	movs	r0, #0
 800a026:	e7f3      	b.n	800a010 <__match+0x10>

0800a028 <__hexnan>:
 800a028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a02c:	680b      	ldr	r3, [r1, #0]
 800a02e:	115e      	asrs	r6, r3, #5
 800a030:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a034:	f013 031f 	ands.w	r3, r3, #31
 800a038:	b087      	sub	sp, #28
 800a03a:	bf18      	it	ne
 800a03c:	3604      	addne	r6, #4
 800a03e:	2500      	movs	r5, #0
 800a040:	1f37      	subs	r7, r6, #4
 800a042:	4690      	mov	r8, r2
 800a044:	6802      	ldr	r2, [r0, #0]
 800a046:	9301      	str	r3, [sp, #4]
 800a048:	4682      	mov	sl, r0
 800a04a:	f846 5c04 	str.w	r5, [r6, #-4]
 800a04e:	46b9      	mov	r9, r7
 800a050:	463c      	mov	r4, r7
 800a052:	9502      	str	r5, [sp, #8]
 800a054:	46ab      	mov	fp, r5
 800a056:	7851      	ldrb	r1, [r2, #1]
 800a058:	1c53      	adds	r3, r2, #1
 800a05a:	9303      	str	r3, [sp, #12]
 800a05c:	b341      	cbz	r1, 800a0b0 <__hexnan+0x88>
 800a05e:	4608      	mov	r0, r1
 800a060:	9205      	str	r2, [sp, #20]
 800a062:	9104      	str	r1, [sp, #16]
 800a064:	f7ff fd5f 	bl	8009b26 <__hexdig_fun>
 800a068:	2800      	cmp	r0, #0
 800a06a:	d14f      	bne.n	800a10c <__hexnan+0xe4>
 800a06c:	9904      	ldr	r1, [sp, #16]
 800a06e:	9a05      	ldr	r2, [sp, #20]
 800a070:	2920      	cmp	r1, #32
 800a072:	d818      	bhi.n	800a0a6 <__hexnan+0x7e>
 800a074:	9b02      	ldr	r3, [sp, #8]
 800a076:	459b      	cmp	fp, r3
 800a078:	dd13      	ble.n	800a0a2 <__hexnan+0x7a>
 800a07a:	454c      	cmp	r4, r9
 800a07c:	d206      	bcs.n	800a08c <__hexnan+0x64>
 800a07e:	2d07      	cmp	r5, #7
 800a080:	dc04      	bgt.n	800a08c <__hexnan+0x64>
 800a082:	462a      	mov	r2, r5
 800a084:	4649      	mov	r1, r9
 800a086:	4620      	mov	r0, r4
 800a088:	f7ff ffa8 	bl	8009fdc <L_shift>
 800a08c:	4544      	cmp	r4, r8
 800a08e:	d950      	bls.n	800a132 <__hexnan+0x10a>
 800a090:	2300      	movs	r3, #0
 800a092:	f1a4 0904 	sub.w	r9, r4, #4
 800a096:	f844 3c04 	str.w	r3, [r4, #-4]
 800a09a:	f8cd b008 	str.w	fp, [sp, #8]
 800a09e:	464c      	mov	r4, r9
 800a0a0:	461d      	mov	r5, r3
 800a0a2:	9a03      	ldr	r2, [sp, #12]
 800a0a4:	e7d7      	b.n	800a056 <__hexnan+0x2e>
 800a0a6:	2929      	cmp	r1, #41	; 0x29
 800a0a8:	d156      	bne.n	800a158 <__hexnan+0x130>
 800a0aa:	3202      	adds	r2, #2
 800a0ac:	f8ca 2000 	str.w	r2, [sl]
 800a0b0:	f1bb 0f00 	cmp.w	fp, #0
 800a0b4:	d050      	beq.n	800a158 <__hexnan+0x130>
 800a0b6:	454c      	cmp	r4, r9
 800a0b8:	d206      	bcs.n	800a0c8 <__hexnan+0xa0>
 800a0ba:	2d07      	cmp	r5, #7
 800a0bc:	dc04      	bgt.n	800a0c8 <__hexnan+0xa0>
 800a0be:	462a      	mov	r2, r5
 800a0c0:	4649      	mov	r1, r9
 800a0c2:	4620      	mov	r0, r4
 800a0c4:	f7ff ff8a 	bl	8009fdc <L_shift>
 800a0c8:	4544      	cmp	r4, r8
 800a0ca:	d934      	bls.n	800a136 <__hexnan+0x10e>
 800a0cc:	f1a8 0204 	sub.w	r2, r8, #4
 800a0d0:	4623      	mov	r3, r4
 800a0d2:	f853 1b04 	ldr.w	r1, [r3], #4
 800a0d6:	f842 1f04 	str.w	r1, [r2, #4]!
 800a0da:	429f      	cmp	r7, r3
 800a0dc:	d2f9      	bcs.n	800a0d2 <__hexnan+0xaa>
 800a0de:	1b3b      	subs	r3, r7, r4
 800a0e0:	f023 0303 	bic.w	r3, r3, #3
 800a0e4:	3304      	adds	r3, #4
 800a0e6:	3401      	adds	r4, #1
 800a0e8:	3e03      	subs	r6, #3
 800a0ea:	42b4      	cmp	r4, r6
 800a0ec:	bf88      	it	hi
 800a0ee:	2304      	movhi	r3, #4
 800a0f0:	4443      	add	r3, r8
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	f843 2b04 	str.w	r2, [r3], #4
 800a0f8:	429f      	cmp	r7, r3
 800a0fa:	d2fb      	bcs.n	800a0f4 <__hexnan+0xcc>
 800a0fc:	683b      	ldr	r3, [r7, #0]
 800a0fe:	b91b      	cbnz	r3, 800a108 <__hexnan+0xe0>
 800a100:	4547      	cmp	r7, r8
 800a102:	d127      	bne.n	800a154 <__hexnan+0x12c>
 800a104:	2301      	movs	r3, #1
 800a106:	603b      	str	r3, [r7, #0]
 800a108:	2005      	movs	r0, #5
 800a10a:	e026      	b.n	800a15a <__hexnan+0x132>
 800a10c:	3501      	adds	r5, #1
 800a10e:	2d08      	cmp	r5, #8
 800a110:	f10b 0b01 	add.w	fp, fp, #1
 800a114:	dd06      	ble.n	800a124 <__hexnan+0xfc>
 800a116:	4544      	cmp	r4, r8
 800a118:	d9c3      	bls.n	800a0a2 <__hexnan+0x7a>
 800a11a:	2300      	movs	r3, #0
 800a11c:	f844 3c04 	str.w	r3, [r4, #-4]
 800a120:	2501      	movs	r5, #1
 800a122:	3c04      	subs	r4, #4
 800a124:	6822      	ldr	r2, [r4, #0]
 800a126:	f000 000f 	and.w	r0, r0, #15
 800a12a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800a12e:	6022      	str	r2, [r4, #0]
 800a130:	e7b7      	b.n	800a0a2 <__hexnan+0x7a>
 800a132:	2508      	movs	r5, #8
 800a134:	e7b5      	b.n	800a0a2 <__hexnan+0x7a>
 800a136:	9b01      	ldr	r3, [sp, #4]
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d0df      	beq.n	800a0fc <__hexnan+0xd4>
 800a13c:	f04f 32ff 	mov.w	r2, #4294967295
 800a140:	f1c3 0320 	rsb	r3, r3, #32
 800a144:	fa22 f303 	lsr.w	r3, r2, r3
 800a148:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a14c:	401a      	ands	r2, r3
 800a14e:	f846 2c04 	str.w	r2, [r6, #-4]
 800a152:	e7d3      	b.n	800a0fc <__hexnan+0xd4>
 800a154:	3f04      	subs	r7, #4
 800a156:	e7d1      	b.n	800a0fc <__hexnan+0xd4>
 800a158:	2004      	movs	r0, #4
 800a15a:	b007      	add	sp, #28
 800a15c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a160 <_localeconv_r>:
 800a160:	4800      	ldr	r0, [pc, #0]	; (800a164 <_localeconv_r+0x4>)
 800a162:	4770      	bx	lr
 800a164:	200001d0 	.word	0x200001d0

0800a168 <__retarget_lock_init_recursive>:
 800a168:	4770      	bx	lr

0800a16a <__retarget_lock_acquire_recursive>:
 800a16a:	4770      	bx	lr

0800a16c <__retarget_lock_release_recursive>:
 800a16c:	4770      	bx	lr

0800a16e <__swhatbuf_r>:
 800a16e:	b570      	push	{r4, r5, r6, lr}
 800a170:	460e      	mov	r6, r1
 800a172:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a176:	2900      	cmp	r1, #0
 800a178:	b096      	sub	sp, #88	; 0x58
 800a17a:	4614      	mov	r4, r2
 800a17c:	461d      	mov	r5, r3
 800a17e:	da08      	bge.n	800a192 <__swhatbuf_r+0x24>
 800a180:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a184:	2200      	movs	r2, #0
 800a186:	602a      	str	r2, [r5, #0]
 800a188:	061a      	lsls	r2, r3, #24
 800a18a:	d410      	bmi.n	800a1ae <__swhatbuf_r+0x40>
 800a18c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a190:	e00e      	b.n	800a1b0 <__swhatbuf_r+0x42>
 800a192:	466a      	mov	r2, sp
 800a194:	f001 f9a6 	bl	800b4e4 <_fstat_r>
 800a198:	2800      	cmp	r0, #0
 800a19a:	dbf1      	blt.n	800a180 <__swhatbuf_r+0x12>
 800a19c:	9a01      	ldr	r2, [sp, #4]
 800a19e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a1a2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a1a6:	425a      	negs	r2, r3
 800a1a8:	415a      	adcs	r2, r3
 800a1aa:	602a      	str	r2, [r5, #0]
 800a1ac:	e7ee      	b.n	800a18c <__swhatbuf_r+0x1e>
 800a1ae:	2340      	movs	r3, #64	; 0x40
 800a1b0:	2000      	movs	r0, #0
 800a1b2:	6023      	str	r3, [r4, #0]
 800a1b4:	b016      	add	sp, #88	; 0x58
 800a1b6:	bd70      	pop	{r4, r5, r6, pc}

0800a1b8 <__smakebuf_r>:
 800a1b8:	898b      	ldrh	r3, [r1, #12]
 800a1ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a1bc:	079d      	lsls	r5, r3, #30
 800a1be:	4606      	mov	r6, r0
 800a1c0:	460c      	mov	r4, r1
 800a1c2:	d507      	bpl.n	800a1d4 <__smakebuf_r+0x1c>
 800a1c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a1c8:	6023      	str	r3, [r4, #0]
 800a1ca:	6123      	str	r3, [r4, #16]
 800a1cc:	2301      	movs	r3, #1
 800a1ce:	6163      	str	r3, [r4, #20]
 800a1d0:	b002      	add	sp, #8
 800a1d2:	bd70      	pop	{r4, r5, r6, pc}
 800a1d4:	ab01      	add	r3, sp, #4
 800a1d6:	466a      	mov	r2, sp
 800a1d8:	f7ff ffc9 	bl	800a16e <__swhatbuf_r>
 800a1dc:	9900      	ldr	r1, [sp, #0]
 800a1de:	4605      	mov	r5, r0
 800a1e0:	4630      	mov	r0, r6
 800a1e2:	f000 fd87 	bl	800acf4 <_malloc_r>
 800a1e6:	b948      	cbnz	r0, 800a1fc <__smakebuf_r+0x44>
 800a1e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a1ec:	059a      	lsls	r2, r3, #22
 800a1ee:	d4ef      	bmi.n	800a1d0 <__smakebuf_r+0x18>
 800a1f0:	f023 0303 	bic.w	r3, r3, #3
 800a1f4:	f043 0302 	orr.w	r3, r3, #2
 800a1f8:	81a3      	strh	r3, [r4, #12]
 800a1fa:	e7e3      	b.n	800a1c4 <__smakebuf_r+0xc>
 800a1fc:	4b0d      	ldr	r3, [pc, #52]	; (800a234 <__smakebuf_r+0x7c>)
 800a1fe:	62b3      	str	r3, [r6, #40]	; 0x28
 800a200:	89a3      	ldrh	r3, [r4, #12]
 800a202:	6020      	str	r0, [r4, #0]
 800a204:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a208:	81a3      	strh	r3, [r4, #12]
 800a20a:	9b00      	ldr	r3, [sp, #0]
 800a20c:	6163      	str	r3, [r4, #20]
 800a20e:	9b01      	ldr	r3, [sp, #4]
 800a210:	6120      	str	r0, [r4, #16]
 800a212:	b15b      	cbz	r3, 800a22c <__smakebuf_r+0x74>
 800a214:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a218:	4630      	mov	r0, r6
 800a21a:	f001 f975 	bl	800b508 <_isatty_r>
 800a21e:	b128      	cbz	r0, 800a22c <__smakebuf_r+0x74>
 800a220:	89a3      	ldrh	r3, [r4, #12]
 800a222:	f023 0303 	bic.w	r3, r3, #3
 800a226:	f043 0301 	orr.w	r3, r3, #1
 800a22a:	81a3      	strh	r3, [r4, #12]
 800a22c:	89a0      	ldrh	r0, [r4, #12]
 800a22e:	4305      	orrs	r5, r0
 800a230:	81a5      	strh	r5, [r4, #12]
 800a232:	e7cd      	b.n	800a1d0 <__smakebuf_r+0x18>
 800a234:	080098e1 	.word	0x080098e1

0800a238 <malloc>:
 800a238:	4b02      	ldr	r3, [pc, #8]	; (800a244 <malloc+0xc>)
 800a23a:	4601      	mov	r1, r0
 800a23c:	6818      	ldr	r0, [r3, #0]
 800a23e:	f000 bd59 	b.w	800acf4 <_malloc_r>
 800a242:	bf00      	nop
 800a244:	20000078 	.word	0x20000078

0800a248 <__ascii_mbtowc>:
 800a248:	b082      	sub	sp, #8
 800a24a:	b901      	cbnz	r1, 800a24e <__ascii_mbtowc+0x6>
 800a24c:	a901      	add	r1, sp, #4
 800a24e:	b142      	cbz	r2, 800a262 <__ascii_mbtowc+0x1a>
 800a250:	b14b      	cbz	r3, 800a266 <__ascii_mbtowc+0x1e>
 800a252:	7813      	ldrb	r3, [r2, #0]
 800a254:	600b      	str	r3, [r1, #0]
 800a256:	7812      	ldrb	r2, [r2, #0]
 800a258:	1e10      	subs	r0, r2, #0
 800a25a:	bf18      	it	ne
 800a25c:	2001      	movne	r0, #1
 800a25e:	b002      	add	sp, #8
 800a260:	4770      	bx	lr
 800a262:	4610      	mov	r0, r2
 800a264:	e7fb      	b.n	800a25e <__ascii_mbtowc+0x16>
 800a266:	f06f 0001 	mvn.w	r0, #1
 800a26a:	e7f8      	b.n	800a25e <__ascii_mbtowc+0x16>

0800a26c <_Balloc>:
 800a26c:	b570      	push	{r4, r5, r6, lr}
 800a26e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a270:	4604      	mov	r4, r0
 800a272:	460d      	mov	r5, r1
 800a274:	b976      	cbnz	r6, 800a294 <_Balloc+0x28>
 800a276:	2010      	movs	r0, #16
 800a278:	f7ff ffde 	bl	800a238 <malloc>
 800a27c:	4602      	mov	r2, r0
 800a27e:	6260      	str	r0, [r4, #36]	; 0x24
 800a280:	b920      	cbnz	r0, 800a28c <_Balloc+0x20>
 800a282:	4b18      	ldr	r3, [pc, #96]	; (800a2e4 <_Balloc+0x78>)
 800a284:	4818      	ldr	r0, [pc, #96]	; (800a2e8 <_Balloc+0x7c>)
 800a286:	2166      	movs	r1, #102	; 0x66
 800a288:	f001 f8ec 	bl	800b464 <__assert_func>
 800a28c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a290:	6006      	str	r6, [r0, #0]
 800a292:	60c6      	str	r6, [r0, #12]
 800a294:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a296:	68f3      	ldr	r3, [r6, #12]
 800a298:	b183      	cbz	r3, 800a2bc <_Balloc+0x50>
 800a29a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a29c:	68db      	ldr	r3, [r3, #12]
 800a29e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a2a2:	b9b8      	cbnz	r0, 800a2d4 <_Balloc+0x68>
 800a2a4:	2101      	movs	r1, #1
 800a2a6:	fa01 f605 	lsl.w	r6, r1, r5
 800a2aa:	1d72      	adds	r2, r6, #5
 800a2ac:	0092      	lsls	r2, r2, #2
 800a2ae:	4620      	mov	r0, r4
 800a2b0:	f000 fc9d 	bl	800abee <_calloc_r>
 800a2b4:	b160      	cbz	r0, 800a2d0 <_Balloc+0x64>
 800a2b6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a2ba:	e00e      	b.n	800a2da <_Balloc+0x6e>
 800a2bc:	2221      	movs	r2, #33	; 0x21
 800a2be:	2104      	movs	r1, #4
 800a2c0:	4620      	mov	r0, r4
 800a2c2:	f000 fc94 	bl	800abee <_calloc_r>
 800a2c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a2c8:	60f0      	str	r0, [r6, #12]
 800a2ca:	68db      	ldr	r3, [r3, #12]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d1e4      	bne.n	800a29a <_Balloc+0x2e>
 800a2d0:	2000      	movs	r0, #0
 800a2d2:	bd70      	pop	{r4, r5, r6, pc}
 800a2d4:	6802      	ldr	r2, [r0, #0]
 800a2d6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a2da:	2300      	movs	r3, #0
 800a2dc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a2e0:	e7f7      	b.n	800a2d2 <_Balloc+0x66>
 800a2e2:	bf00      	nop
 800a2e4:	0800b956 	.word	0x0800b956
 800a2e8:	0800bab8 	.word	0x0800bab8

0800a2ec <_Bfree>:
 800a2ec:	b570      	push	{r4, r5, r6, lr}
 800a2ee:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a2f0:	4605      	mov	r5, r0
 800a2f2:	460c      	mov	r4, r1
 800a2f4:	b976      	cbnz	r6, 800a314 <_Bfree+0x28>
 800a2f6:	2010      	movs	r0, #16
 800a2f8:	f7ff ff9e 	bl	800a238 <malloc>
 800a2fc:	4602      	mov	r2, r0
 800a2fe:	6268      	str	r0, [r5, #36]	; 0x24
 800a300:	b920      	cbnz	r0, 800a30c <_Bfree+0x20>
 800a302:	4b09      	ldr	r3, [pc, #36]	; (800a328 <_Bfree+0x3c>)
 800a304:	4809      	ldr	r0, [pc, #36]	; (800a32c <_Bfree+0x40>)
 800a306:	218a      	movs	r1, #138	; 0x8a
 800a308:	f001 f8ac 	bl	800b464 <__assert_func>
 800a30c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a310:	6006      	str	r6, [r0, #0]
 800a312:	60c6      	str	r6, [r0, #12]
 800a314:	b13c      	cbz	r4, 800a326 <_Bfree+0x3a>
 800a316:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a318:	6862      	ldr	r2, [r4, #4]
 800a31a:	68db      	ldr	r3, [r3, #12]
 800a31c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a320:	6021      	str	r1, [r4, #0]
 800a322:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a326:	bd70      	pop	{r4, r5, r6, pc}
 800a328:	0800b956 	.word	0x0800b956
 800a32c:	0800bab8 	.word	0x0800bab8

0800a330 <__multadd>:
 800a330:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a334:	690d      	ldr	r5, [r1, #16]
 800a336:	4607      	mov	r7, r0
 800a338:	460c      	mov	r4, r1
 800a33a:	461e      	mov	r6, r3
 800a33c:	f101 0c14 	add.w	ip, r1, #20
 800a340:	2000      	movs	r0, #0
 800a342:	f8dc 3000 	ldr.w	r3, [ip]
 800a346:	b299      	uxth	r1, r3
 800a348:	fb02 6101 	mla	r1, r2, r1, r6
 800a34c:	0c1e      	lsrs	r6, r3, #16
 800a34e:	0c0b      	lsrs	r3, r1, #16
 800a350:	fb02 3306 	mla	r3, r2, r6, r3
 800a354:	b289      	uxth	r1, r1
 800a356:	3001      	adds	r0, #1
 800a358:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a35c:	4285      	cmp	r5, r0
 800a35e:	f84c 1b04 	str.w	r1, [ip], #4
 800a362:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a366:	dcec      	bgt.n	800a342 <__multadd+0x12>
 800a368:	b30e      	cbz	r6, 800a3ae <__multadd+0x7e>
 800a36a:	68a3      	ldr	r3, [r4, #8]
 800a36c:	42ab      	cmp	r3, r5
 800a36e:	dc19      	bgt.n	800a3a4 <__multadd+0x74>
 800a370:	6861      	ldr	r1, [r4, #4]
 800a372:	4638      	mov	r0, r7
 800a374:	3101      	adds	r1, #1
 800a376:	f7ff ff79 	bl	800a26c <_Balloc>
 800a37a:	4680      	mov	r8, r0
 800a37c:	b928      	cbnz	r0, 800a38a <__multadd+0x5a>
 800a37e:	4602      	mov	r2, r0
 800a380:	4b0c      	ldr	r3, [pc, #48]	; (800a3b4 <__multadd+0x84>)
 800a382:	480d      	ldr	r0, [pc, #52]	; (800a3b8 <__multadd+0x88>)
 800a384:	21b5      	movs	r1, #181	; 0xb5
 800a386:	f001 f86d 	bl	800b464 <__assert_func>
 800a38a:	6922      	ldr	r2, [r4, #16]
 800a38c:	3202      	adds	r2, #2
 800a38e:	f104 010c 	add.w	r1, r4, #12
 800a392:	0092      	lsls	r2, r2, #2
 800a394:	300c      	adds	r0, #12
 800a396:	f7fc fc91 	bl	8006cbc <memcpy>
 800a39a:	4621      	mov	r1, r4
 800a39c:	4638      	mov	r0, r7
 800a39e:	f7ff ffa5 	bl	800a2ec <_Bfree>
 800a3a2:	4644      	mov	r4, r8
 800a3a4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a3a8:	3501      	adds	r5, #1
 800a3aa:	615e      	str	r6, [r3, #20]
 800a3ac:	6125      	str	r5, [r4, #16]
 800a3ae:	4620      	mov	r0, r4
 800a3b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a3b4:	0800b9c8 	.word	0x0800b9c8
 800a3b8:	0800bab8 	.word	0x0800bab8

0800a3bc <__s2b>:
 800a3bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a3c0:	460c      	mov	r4, r1
 800a3c2:	4615      	mov	r5, r2
 800a3c4:	461f      	mov	r7, r3
 800a3c6:	2209      	movs	r2, #9
 800a3c8:	3308      	adds	r3, #8
 800a3ca:	4606      	mov	r6, r0
 800a3cc:	fb93 f3f2 	sdiv	r3, r3, r2
 800a3d0:	2100      	movs	r1, #0
 800a3d2:	2201      	movs	r2, #1
 800a3d4:	429a      	cmp	r2, r3
 800a3d6:	db09      	blt.n	800a3ec <__s2b+0x30>
 800a3d8:	4630      	mov	r0, r6
 800a3da:	f7ff ff47 	bl	800a26c <_Balloc>
 800a3de:	b940      	cbnz	r0, 800a3f2 <__s2b+0x36>
 800a3e0:	4602      	mov	r2, r0
 800a3e2:	4b19      	ldr	r3, [pc, #100]	; (800a448 <__s2b+0x8c>)
 800a3e4:	4819      	ldr	r0, [pc, #100]	; (800a44c <__s2b+0x90>)
 800a3e6:	21ce      	movs	r1, #206	; 0xce
 800a3e8:	f001 f83c 	bl	800b464 <__assert_func>
 800a3ec:	0052      	lsls	r2, r2, #1
 800a3ee:	3101      	adds	r1, #1
 800a3f0:	e7f0      	b.n	800a3d4 <__s2b+0x18>
 800a3f2:	9b08      	ldr	r3, [sp, #32]
 800a3f4:	6143      	str	r3, [r0, #20]
 800a3f6:	2d09      	cmp	r5, #9
 800a3f8:	f04f 0301 	mov.w	r3, #1
 800a3fc:	6103      	str	r3, [r0, #16]
 800a3fe:	dd16      	ble.n	800a42e <__s2b+0x72>
 800a400:	f104 0909 	add.w	r9, r4, #9
 800a404:	46c8      	mov	r8, r9
 800a406:	442c      	add	r4, r5
 800a408:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a40c:	4601      	mov	r1, r0
 800a40e:	3b30      	subs	r3, #48	; 0x30
 800a410:	220a      	movs	r2, #10
 800a412:	4630      	mov	r0, r6
 800a414:	f7ff ff8c 	bl	800a330 <__multadd>
 800a418:	45a0      	cmp	r8, r4
 800a41a:	d1f5      	bne.n	800a408 <__s2b+0x4c>
 800a41c:	f1a5 0408 	sub.w	r4, r5, #8
 800a420:	444c      	add	r4, r9
 800a422:	1b2d      	subs	r5, r5, r4
 800a424:	1963      	adds	r3, r4, r5
 800a426:	42bb      	cmp	r3, r7
 800a428:	db04      	blt.n	800a434 <__s2b+0x78>
 800a42a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a42e:	340a      	adds	r4, #10
 800a430:	2509      	movs	r5, #9
 800a432:	e7f6      	b.n	800a422 <__s2b+0x66>
 800a434:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a438:	4601      	mov	r1, r0
 800a43a:	3b30      	subs	r3, #48	; 0x30
 800a43c:	220a      	movs	r2, #10
 800a43e:	4630      	mov	r0, r6
 800a440:	f7ff ff76 	bl	800a330 <__multadd>
 800a444:	e7ee      	b.n	800a424 <__s2b+0x68>
 800a446:	bf00      	nop
 800a448:	0800b9c8 	.word	0x0800b9c8
 800a44c:	0800bab8 	.word	0x0800bab8

0800a450 <__hi0bits>:
 800a450:	0c03      	lsrs	r3, r0, #16
 800a452:	041b      	lsls	r3, r3, #16
 800a454:	b9d3      	cbnz	r3, 800a48c <__hi0bits+0x3c>
 800a456:	0400      	lsls	r0, r0, #16
 800a458:	2310      	movs	r3, #16
 800a45a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a45e:	bf04      	itt	eq
 800a460:	0200      	lsleq	r0, r0, #8
 800a462:	3308      	addeq	r3, #8
 800a464:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a468:	bf04      	itt	eq
 800a46a:	0100      	lsleq	r0, r0, #4
 800a46c:	3304      	addeq	r3, #4
 800a46e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a472:	bf04      	itt	eq
 800a474:	0080      	lsleq	r0, r0, #2
 800a476:	3302      	addeq	r3, #2
 800a478:	2800      	cmp	r0, #0
 800a47a:	db05      	blt.n	800a488 <__hi0bits+0x38>
 800a47c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a480:	f103 0301 	add.w	r3, r3, #1
 800a484:	bf08      	it	eq
 800a486:	2320      	moveq	r3, #32
 800a488:	4618      	mov	r0, r3
 800a48a:	4770      	bx	lr
 800a48c:	2300      	movs	r3, #0
 800a48e:	e7e4      	b.n	800a45a <__hi0bits+0xa>

0800a490 <__lo0bits>:
 800a490:	6803      	ldr	r3, [r0, #0]
 800a492:	f013 0207 	ands.w	r2, r3, #7
 800a496:	4601      	mov	r1, r0
 800a498:	d00b      	beq.n	800a4b2 <__lo0bits+0x22>
 800a49a:	07da      	lsls	r2, r3, #31
 800a49c:	d423      	bmi.n	800a4e6 <__lo0bits+0x56>
 800a49e:	0798      	lsls	r0, r3, #30
 800a4a0:	bf49      	itett	mi
 800a4a2:	085b      	lsrmi	r3, r3, #1
 800a4a4:	089b      	lsrpl	r3, r3, #2
 800a4a6:	2001      	movmi	r0, #1
 800a4a8:	600b      	strmi	r3, [r1, #0]
 800a4aa:	bf5c      	itt	pl
 800a4ac:	600b      	strpl	r3, [r1, #0]
 800a4ae:	2002      	movpl	r0, #2
 800a4b0:	4770      	bx	lr
 800a4b2:	b298      	uxth	r0, r3
 800a4b4:	b9a8      	cbnz	r0, 800a4e2 <__lo0bits+0x52>
 800a4b6:	0c1b      	lsrs	r3, r3, #16
 800a4b8:	2010      	movs	r0, #16
 800a4ba:	b2da      	uxtb	r2, r3
 800a4bc:	b90a      	cbnz	r2, 800a4c2 <__lo0bits+0x32>
 800a4be:	3008      	adds	r0, #8
 800a4c0:	0a1b      	lsrs	r3, r3, #8
 800a4c2:	071a      	lsls	r2, r3, #28
 800a4c4:	bf04      	itt	eq
 800a4c6:	091b      	lsreq	r3, r3, #4
 800a4c8:	3004      	addeq	r0, #4
 800a4ca:	079a      	lsls	r2, r3, #30
 800a4cc:	bf04      	itt	eq
 800a4ce:	089b      	lsreq	r3, r3, #2
 800a4d0:	3002      	addeq	r0, #2
 800a4d2:	07da      	lsls	r2, r3, #31
 800a4d4:	d403      	bmi.n	800a4de <__lo0bits+0x4e>
 800a4d6:	085b      	lsrs	r3, r3, #1
 800a4d8:	f100 0001 	add.w	r0, r0, #1
 800a4dc:	d005      	beq.n	800a4ea <__lo0bits+0x5a>
 800a4de:	600b      	str	r3, [r1, #0]
 800a4e0:	4770      	bx	lr
 800a4e2:	4610      	mov	r0, r2
 800a4e4:	e7e9      	b.n	800a4ba <__lo0bits+0x2a>
 800a4e6:	2000      	movs	r0, #0
 800a4e8:	4770      	bx	lr
 800a4ea:	2020      	movs	r0, #32
 800a4ec:	4770      	bx	lr
	...

0800a4f0 <__i2b>:
 800a4f0:	b510      	push	{r4, lr}
 800a4f2:	460c      	mov	r4, r1
 800a4f4:	2101      	movs	r1, #1
 800a4f6:	f7ff feb9 	bl	800a26c <_Balloc>
 800a4fa:	4602      	mov	r2, r0
 800a4fc:	b928      	cbnz	r0, 800a50a <__i2b+0x1a>
 800a4fe:	4b05      	ldr	r3, [pc, #20]	; (800a514 <__i2b+0x24>)
 800a500:	4805      	ldr	r0, [pc, #20]	; (800a518 <__i2b+0x28>)
 800a502:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a506:	f000 ffad 	bl	800b464 <__assert_func>
 800a50a:	2301      	movs	r3, #1
 800a50c:	6144      	str	r4, [r0, #20]
 800a50e:	6103      	str	r3, [r0, #16]
 800a510:	bd10      	pop	{r4, pc}
 800a512:	bf00      	nop
 800a514:	0800b9c8 	.word	0x0800b9c8
 800a518:	0800bab8 	.word	0x0800bab8

0800a51c <__multiply>:
 800a51c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a520:	4691      	mov	r9, r2
 800a522:	690a      	ldr	r2, [r1, #16]
 800a524:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a528:	429a      	cmp	r2, r3
 800a52a:	bfb8      	it	lt
 800a52c:	460b      	movlt	r3, r1
 800a52e:	460c      	mov	r4, r1
 800a530:	bfbc      	itt	lt
 800a532:	464c      	movlt	r4, r9
 800a534:	4699      	movlt	r9, r3
 800a536:	6927      	ldr	r7, [r4, #16]
 800a538:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a53c:	68a3      	ldr	r3, [r4, #8]
 800a53e:	6861      	ldr	r1, [r4, #4]
 800a540:	eb07 060a 	add.w	r6, r7, sl
 800a544:	42b3      	cmp	r3, r6
 800a546:	b085      	sub	sp, #20
 800a548:	bfb8      	it	lt
 800a54a:	3101      	addlt	r1, #1
 800a54c:	f7ff fe8e 	bl	800a26c <_Balloc>
 800a550:	b930      	cbnz	r0, 800a560 <__multiply+0x44>
 800a552:	4602      	mov	r2, r0
 800a554:	4b44      	ldr	r3, [pc, #272]	; (800a668 <__multiply+0x14c>)
 800a556:	4845      	ldr	r0, [pc, #276]	; (800a66c <__multiply+0x150>)
 800a558:	f240 115d 	movw	r1, #349	; 0x15d
 800a55c:	f000 ff82 	bl	800b464 <__assert_func>
 800a560:	f100 0514 	add.w	r5, r0, #20
 800a564:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a568:	462b      	mov	r3, r5
 800a56a:	2200      	movs	r2, #0
 800a56c:	4543      	cmp	r3, r8
 800a56e:	d321      	bcc.n	800a5b4 <__multiply+0x98>
 800a570:	f104 0314 	add.w	r3, r4, #20
 800a574:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a578:	f109 0314 	add.w	r3, r9, #20
 800a57c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a580:	9202      	str	r2, [sp, #8]
 800a582:	1b3a      	subs	r2, r7, r4
 800a584:	3a15      	subs	r2, #21
 800a586:	f022 0203 	bic.w	r2, r2, #3
 800a58a:	3204      	adds	r2, #4
 800a58c:	f104 0115 	add.w	r1, r4, #21
 800a590:	428f      	cmp	r7, r1
 800a592:	bf38      	it	cc
 800a594:	2204      	movcc	r2, #4
 800a596:	9201      	str	r2, [sp, #4]
 800a598:	9a02      	ldr	r2, [sp, #8]
 800a59a:	9303      	str	r3, [sp, #12]
 800a59c:	429a      	cmp	r2, r3
 800a59e:	d80c      	bhi.n	800a5ba <__multiply+0x9e>
 800a5a0:	2e00      	cmp	r6, #0
 800a5a2:	dd03      	ble.n	800a5ac <__multiply+0x90>
 800a5a4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d05a      	beq.n	800a662 <__multiply+0x146>
 800a5ac:	6106      	str	r6, [r0, #16]
 800a5ae:	b005      	add	sp, #20
 800a5b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5b4:	f843 2b04 	str.w	r2, [r3], #4
 800a5b8:	e7d8      	b.n	800a56c <__multiply+0x50>
 800a5ba:	f8b3 a000 	ldrh.w	sl, [r3]
 800a5be:	f1ba 0f00 	cmp.w	sl, #0
 800a5c2:	d024      	beq.n	800a60e <__multiply+0xf2>
 800a5c4:	f104 0e14 	add.w	lr, r4, #20
 800a5c8:	46a9      	mov	r9, r5
 800a5ca:	f04f 0c00 	mov.w	ip, #0
 800a5ce:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a5d2:	f8d9 1000 	ldr.w	r1, [r9]
 800a5d6:	fa1f fb82 	uxth.w	fp, r2
 800a5da:	b289      	uxth	r1, r1
 800a5dc:	fb0a 110b 	mla	r1, sl, fp, r1
 800a5e0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a5e4:	f8d9 2000 	ldr.w	r2, [r9]
 800a5e8:	4461      	add	r1, ip
 800a5ea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a5ee:	fb0a c20b 	mla	r2, sl, fp, ip
 800a5f2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a5f6:	b289      	uxth	r1, r1
 800a5f8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a5fc:	4577      	cmp	r7, lr
 800a5fe:	f849 1b04 	str.w	r1, [r9], #4
 800a602:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a606:	d8e2      	bhi.n	800a5ce <__multiply+0xb2>
 800a608:	9a01      	ldr	r2, [sp, #4]
 800a60a:	f845 c002 	str.w	ip, [r5, r2]
 800a60e:	9a03      	ldr	r2, [sp, #12]
 800a610:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a614:	3304      	adds	r3, #4
 800a616:	f1b9 0f00 	cmp.w	r9, #0
 800a61a:	d020      	beq.n	800a65e <__multiply+0x142>
 800a61c:	6829      	ldr	r1, [r5, #0]
 800a61e:	f104 0c14 	add.w	ip, r4, #20
 800a622:	46ae      	mov	lr, r5
 800a624:	f04f 0a00 	mov.w	sl, #0
 800a628:	f8bc b000 	ldrh.w	fp, [ip]
 800a62c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a630:	fb09 220b 	mla	r2, r9, fp, r2
 800a634:	4492      	add	sl, r2
 800a636:	b289      	uxth	r1, r1
 800a638:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a63c:	f84e 1b04 	str.w	r1, [lr], #4
 800a640:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a644:	f8be 1000 	ldrh.w	r1, [lr]
 800a648:	0c12      	lsrs	r2, r2, #16
 800a64a:	fb09 1102 	mla	r1, r9, r2, r1
 800a64e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a652:	4567      	cmp	r7, ip
 800a654:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a658:	d8e6      	bhi.n	800a628 <__multiply+0x10c>
 800a65a:	9a01      	ldr	r2, [sp, #4]
 800a65c:	50a9      	str	r1, [r5, r2]
 800a65e:	3504      	adds	r5, #4
 800a660:	e79a      	b.n	800a598 <__multiply+0x7c>
 800a662:	3e01      	subs	r6, #1
 800a664:	e79c      	b.n	800a5a0 <__multiply+0x84>
 800a666:	bf00      	nop
 800a668:	0800b9c8 	.word	0x0800b9c8
 800a66c:	0800bab8 	.word	0x0800bab8

0800a670 <__pow5mult>:
 800a670:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a674:	4615      	mov	r5, r2
 800a676:	f012 0203 	ands.w	r2, r2, #3
 800a67a:	4606      	mov	r6, r0
 800a67c:	460f      	mov	r7, r1
 800a67e:	d007      	beq.n	800a690 <__pow5mult+0x20>
 800a680:	4c25      	ldr	r4, [pc, #148]	; (800a718 <__pow5mult+0xa8>)
 800a682:	3a01      	subs	r2, #1
 800a684:	2300      	movs	r3, #0
 800a686:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a68a:	f7ff fe51 	bl	800a330 <__multadd>
 800a68e:	4607      	mov	r7, r0
 800a690:	10ad      	asrs	r5, r5, #2
 800a692:	d03d      	beq.n	800a710 <__pow5mult+0xa0>
 800a694:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a696:	b97c      	cbnz	r4, 800a6b8 <__pow5mult+0x48>
 800a698:	2010      	movs	r0, #16
 800a69a:	f7ff fdcd 	bl	800a238 <malloc>
 800a69e:	4602      	mov	r2, r0
 800a6a0:	6270      	str	r0, [r6, #36]	; 0x24
 800a6a2:	b928      	cbnz	r0, 800a6b0 <__pow5mult+0x40>
 800a6a4:	4b1d      	ldr	r3, [pc, #116]	; (800a71c <__pow5mult+0xac>)
 800a6a6:	481e      	ldr	r0, [pc, #120]	; (800a720 <__pow5mult+0xb0>)
 800a6a8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a6ac:	f000 feda 	bl	800b464 <__assert_func>
 800a6b0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a6b4:	6004      	str	r4, [r0, #0]
 800a6b6:	60c4      	str	r4, [r0, #12]
 800a6b8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a6bc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a6c0:	b94c      	cbnz	r4, 800a6d6 <__pow5mult+0x66>
 800a6c2:	f240 2171 	movw	r1, #625	; 0x271
 800a6c6:	4630      	mov	r0, r6
 800a6c8:	f7ff ff12 	bl	800a4f0 <__i2b>
 800a6cc:	2300      	movs	r3, #0
 800a6ce:	f8c8 0008 	str.w	r0, [r8, #8]
 800a6d2:	4604      	mov	r4, r0
 800a6d4:	6003      	str	r3, [r0, #0]
 800a6d6:	f04f 0900 	mov.w	r9, #0
 800a6da:	07eb      	lsls	r3, r5, #31
 800a6dc:	d50a      	bpl.n	800a6f4 <__pow5mult+0x84>
 800a6de:	4639      	mov	r1, r7
 800a6e0:	4622      	mov	r2, r4
 800a6e2:	4630      	mov	r0, r6
 800a6e4:	f7ff ff1a 	bl	800a51c <__multiply>
 800a6e8:	4639      	mov	r1, r7
 800a6ea:	4680      	mov	r8, r0
 800a6ec:	4630      	mov	r0, r6
 800a6ee:	f7ff fdfd 	bl	800a2ec <_Bfree>
 800a6f2:	4647      	mov	r7, r8
 800a6f4:	106d      	asrs	r5, r5, #1
 800a6f6:	d00b      	beq.n	800a710 <__pow5mult+0xa0>
 800a6f8:	6820      	ldr	r0, [r4, #0]
 800a6fa:	b938      	cbnz	r0, 800a70c <__pow5mult+0x9c>
 800a6fc:	4622      	mov	r2, r4
 800a6fe:	4621      	mov	r1, r4
 800a700:	4630      	mov	r0, r6
 800a702:	f7ff ff0b 	bl	800a51c <__multiply>
 800a706:	6020      	str	r0, [r4, #0]
 800a708:	f8c0 9000 	str.w	r9, [r0]
 800a70c:	4604      	mov	r4, r0
 800a70e:	e7e4      	b.n	800a6da <__pow5mult+0x6a>
 800a710:	4638      	mov	r0, r7
 800a712:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a716:	bf00      	nop
 800a718:	0800bc08 	.word	0x0800bc08
 800a71c:	0800b956 	.word	0x0800b956
 800a720:	0800bab8 	.word	0x0800bab8

0800a724 <__lshift>:
 800a724:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a728:	460c      	mov	r4, r1
 800a72a:	6849      	ldr	r1, [r1, #4]
 800a72c:	6923      	ldr	r3, [r4, #16]
 800a72e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a732:	68a3      	ldr	r3, [r4, #8]
 800a734:	4607      	mov	r7, r0
 800a736:	4691      	mov	r9, r2
 800a738:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a73c:	f108 0601 	add.w	r6, r8, #1
 800a740:	42b3      	cmp	r3, r6
 800a742:	db0b      	blt.n	800a75c <__lshift+0x38>
 800a744:	4638      	mov	r0, r7
 800a746:	f7ff fd91 	bl	800a26c <_Balloc>
 800a74a:	4605      	mov	r5, r0
 800a74c:	b948      	cbnz	r0, 800a762 <__lshift+0x3e>
 800a74e:	4602      	mov	r2, r0
 800a750:	4b2a      	ldr	r3, [pc, #168]	; (800a7fc <__lshift+0xd8>)
 800a752:	482b      	ldr	r0, [pc, #172]	; (800a800 <__lshift+0xdc>)
 800a754:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a758:	f000 fe84 	bl	800b464 <__assert_func>
 800a75c:	3101      	adds	r1, #1
 800a75e:	005b      	lsls	r3, r3, #1
 800a760:	e7ee      	b.n	800a740 <__lshift+0x1c>
 800a762:	2300      	movs	r3, #0
 800a764:	f100 0114 	add.w	r1, r0, #20
 800a768:	f100 0210 	add.w	r2, r0, #16
 800a76c:	4618      	mov	r0, r3
 800a76e:	4553      	cmp	r3, sl
 800a770:	db37      	blt.n	800a7e2 <__lshift+0xbe>
 800a772:	6920      	ldr	r0, [r4, #16]
 800a774:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a778:	f104 0314 	add.w	r3, r4, #20
 800a77c:	f019 091f 	ands.w	r9, r9, #31
 800a780:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a784:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a788:	d02f      	beq.n	800a7ea <__lshift+0xc6>
 800a78a:	f1c9 0e20 	rsb	lr, r9, #32
 800a78e:	468a      	mov	sl, r1
 800a790:	f04f 0c00 	mov.w	ip, #0
 800a794:	681a      	ldr	r2, [r3, #0]
 800a796:	fa02 f209 	lsl.w	r2, r2, r9
 800a79a:	ea42 020c 	orr.w	r2, r2, ip
 800a79e:	f84a 2b04 	str.w	r2, [sl], #4
 800a7a2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a7a6:	4298      	cmp	r0, r3
 800a7a8:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a7ac:	d8f2      	bhi.n	800a794 <__lshift+0x70>
 800a7ae:	1b03      	subs	r3, r0, r4
 800a7b0:	3b15      	subs	r3, #21
 800a7b2:	f023 0303 	bic.w	r3, r3, #3
 800a7b6:	3304      	adds	r3, #4
 800a7b8:	f104 0215 	add.w	r2, r4, #21
 800a7bc:	4290      	cmp	r0, r2
 800a7be:	bf38      	it	cc
 800a7c0:	2304      	movcc	r3, #4
 800a7c2:	f841 c003 	str.w	ip, [r1, r3]
 800a7c6:	f1bc 0f00 	cmp.w	ip, #0
 800a7ca:	d001      	beq.n	800a7d0 <__lshift+0xac>
 800a7cc:	f108 0602 	add.w	r6, r8, #2
 800a7d0:	3e01      	subs	r6, #1
 800a7d2:	4638      	mov	r0, r7
 800a7d4:	612e      	str	r6, [r5, #16]
 800a7d6:	4621      	mov	r1, r4
 800a7d8:	f7ff fd88 	bl	800a2ec <_Bfree>
 800a7dc:	4628      	mov	r0, r5
 800a7de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7e2:	f842 0f04 	str.w	r0, [r2, #4]!
 800a7e6:	3301      	adds	r3, #1
 800a7e8:	e7c1      	b.n	800a76e <__lshift+0x4a>
 800a7ea:	3904      	subs	r1, #4
 800a7ec:	f853 2b04 	ldr.w	r2, [r3], #4
 800a7f0:	f841 2f04 	str.w	r2, [r1, #4]!
 800a7f4:	4298      	cmp	r0, r3
 800a7f6:	d8f9      	bhi.n	800a7ec <__lshift+0xc8>
 800a7f8:	e7ea      	b.n	800a7d0 <__lshift+0xac>
 800a7fa:	bf00      	nop
 800a7fc:	0800b9c8 	.word	0x0800b9c8
 800a800:	0800bab8 	.word	0x0800bab8

0800a804 <__mcmp>:
 800a804:	b530      	push	{r4, r5, lr}
 800a806:	6902      	ldr	r2, [r0, #16]
 800a808:	690c      	ldr	r4, [r1, #16]
 800a80a:	1b12      	subs	r2, r2, r4
 800a80c:	d10e      	bne.n	800a82c <__mcmp+0x28>
 800a80e:	f100 0314 	add.w	r3, r0, #20
 800a812:	3114      	adds	r1, #20
 800a814:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a818:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a81c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a820:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a824:	42a5      	cmp	r5, r4
 800a826:	d003      	beq.n	800a830 <__mcmp+0x2c>
 800a828:	d305      	bcc.n	800a836 <__mcmp+0x32>
 800a82a:	2201      	movs	r2, #1
 800a82c:	4610      	mov	r0, r2
 800a82e:	bd30      	pop	{r4, r5, pc}
 800a830:	4283      	cmp	r3, r0
 800a832:	d3f3      	bcc.n	800a81c <__mcmp+0x18>
 800a834:	e7fa      	b.n	800a82c <__mcmp+0x28>
 800a836:	f04f 32ff 	mov.w	r2, #4294967295
 800a83a:	e7f7      	b.n	800a82c <__mcmp+0x28>

0800a83c <__mdiff>:
 800a83c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a840:	460c      	mov	r4, r1
 800a842:	4606      	mov	r6, r0
 800a844:	4611      	mov	r1, r2
 800a846:	4620      	mov	r0, r4
 800a848:	4690      	mov	r8, r2
 800a84a:	f7ff ffdb 	bl	800a804 <__mcmp>
 800a84e:	1e05      	subs	r5, r0, #0
 800a850:	d110      	bne.n	800a874 <__mdiff+0x38>
 800a852:	4629      	mov	r1, r5
 800a854:	4630      	mov	r0, r6
 800a856:	f7ff fd09 	bl	800a26c <_Balloc>
 800a85a:	b930      	cbnz	r0, 800a86a <__mdiff+0x2e>
 800a85c:	4b3a      	ldr	r3, [pc, #232]	; (800a948 <__mdiff+0x10c>)
 800a85e:	4602      	mov	r2, r0
 800a860:	f240 2132 	movw	r1, #562	; 0x232
 800a864:	4839      	ldr	r0, [pc, #228]	; (800a94c <__mdiff+0x110>)
 800a866:	f000 fdfd 	bl	800b464 <__assert_func>
 800a86a:	2301      	movs	r3, #1
 800a86c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a870:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a874:	bfa4      	itt	ge
 800a876:	4643      	movge	r3, r8
 800a878:	46a0      	movge	r8, r4
 800a87a:	4630      	mov	r0, r6
 800a87c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a880:	bfa6      	itte	ge
 800a882:	461c      	movge	r4, r3
 800a884:	2500      	movge	r5, #0
 800a886:	2501      	movlt	r5, #1
 800a888:	f7ff fcf0 	bl	800a26c <_Balloc>
 800a88c:	b920      	cbnz	r0, 800a898 <__mdiff+0x5c>
 800a88e:	4b2e      	ldr	r3, [pc, #184]	; (800a948 <__mdiff+0x10c>)
 800a890:	4602      	mov	r2, r0
 800a892:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a896:	e7e5      	b.n	800a864 <__mdiff+0x28>
 800a898:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a89c:	6926      	ldr	r6, [r4, #16]
 800a89e:	60c5      	str	r5, [r0, #12]
 800a8a0:	f104 0914 	add.w	r9, r4, #20
 800a8a4:	f108 0514 	add.w	r5, r8, #20
 800a8a8:	f100 0e14 	add.w	lr, r0, #20
 800a8ac:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a8b0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a8b4:	f108 0210 	add.w	r2, r8, #16
 800a8b8:	46f2      	mov	sl, lr
 800a8ba:	2100      	movs	r1, #0
 800a8bc:	f859 3b04 	ldr.w	r3, [r9], #4
 800a8c0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a8c4:	fa1f f883 	uxth.w	r8, r3
 800a8c8:	fa11 f18b 	uxtah	r1, r1, fp
 800a8cc:	0c1b      	lsrs	r3, r3, #16
 800a8ce:	eba1 0808 	sub.w	r8, r1, r8
 800a8d2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a8d6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a8da:	fa1f f888 	uxth.w	r8, r8
 800a8de:	1419      	asrs	r1, r3, #16
 800a8e0:	454e      	cmp	r6, r9
 800a8e2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a8e6:	f84a 3b04 	str.w	r3, [sl], #4
 800a8ea:	d8e7      	bhi.n	800a8bc <__mdiff+0x80>
 800a8ec:	1b33      	subs	r3, r6, r4
 800a8ee:	3b15      	subs	r3, #21
 800a8f0:	f023 0303 	bic.w	r3, r3, #3
 800a8f4:	3304      	adds	r3, #4
 800a8f6:	3415      	adds	r4, #21
 800a8f8:	42a6      	cmp	r6, r4
 800a8fa:	bf38      	it	cc
 800a8fc:	2304      	movcc	r3, #4
 800a8fe:	441d      	add	r5, r3
 800a900:	4473      	add	r3, lr
 800a902:	469e      	mov	lr, r3
 800a904:	462e      	mov	r6, r5
 800a906:	4566      	cmp	r6, ip
 800a908:	d30e      	bcc.n	800a928 <__mdiff+0xec>
 800a90a:	f10c 0203 	add.w	r2, ip, #3
 800a90e:	1b52      	subs	r2, r2, r5
 800a910:	f022 0203 	bic.w	r2, r2, #3
 800a914:	3d03      	subs	r5, #3
 800a916:	45ac      	cmp	ip, r5
 800a918:	bf38      	it	cc
 800a91a:	2200      	movcc	r2, #0
 800a91c:	441a      	add	r2, r3
 800a91e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a922:	b17b      	cbz	r3, 800a944 <__mdiff+0x108>
 800a924:	6107      	str	r7, [r0, #16]
 800a926:	e7a3      	b.n	800a870 <__mdiff+0x34>
 800a928:	f856 8b04 	ldr.w	r8, [r6], #4
 800a92c:	fa11 f288 	uxtah	r2, r1, r8
 800a930:	1414      	asrs	r4, r2, #16
 800a932:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a936:	b292      	uxth	r2, r2
 800a938:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a93c:	f84e 2b04 	str.w	r2, [lr], #4
 800a940:	1421      	asrs	r1, r4, #16
 800a942:	e7e0      	b.n	800a906 <__mdiff+0xca>
 800a944:	3f01      	subs	r7, #1
 800a946:	e7ea      	b.n	800a91e <__mdiff+0xe2>
 800a948:	0800b9c8 	.word	0x0800b9c8
 800a94c:	0800bab8 	.word	0x0800bab8

0800a950 <__ulp>:
 800a950:	b082      	sub	sp, #8
 800a952:	ed8d 0b00 	vstr	d0, [sp]
 800a956:	9b01      	ldr	r3, [sp, #4]
 800a958:	4912      	ldr	r1, [pc, #72]	; (800a9a4 <__ulp+0x54>)
 800a95a:	4019      	ands	r1, r3
 800a95c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800a960:	2900      	cmp	r1, #0
 800a962:	dd05      	ble.n	800a970 <__ulp+0x20>
 800a964:	2200      	movs	r2, #0
 800a966:	460b      	mov	r3, r1
 800a968:	ec43 2b10 	vmov	d0, r2, r3
 800a96c:	b002      	add	sp, #8
 800a96e:	4770      	bx	lr
 800a970:	4249      	negs	r1, r1
 800a972:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800a976:	ea4f 5021 	mov.w	r0, r1, asr #20
 800a97a:	f04f 0200 	mov.w	r2, #0
 800a97e:	f04f 0300 	mov.w	r3, #0
 800a982:	da04      	bge.n	800a98e <__ulp+0x3e>
 800a984:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800a988:	fa41 f300 	asr.w	r3, r1, r0
 800a98c:	e7ec      	b.n	800a968 <__ulp+0x18>
 800a98e:	f1a0 0114 	sub.w	r1, r0, #20
 800a992:	291e      	cmp	r1, #30
 800a994:	bfda      	itte	le
 800a996:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800a99a:	fa20 f101 	lsrle.w	r1, r0, r1
 800a99e:	2101      	movgt	r1, #1
 800a9a0:	460a      	mov	r2, r1
 800a9a2:	e7e1      	b.n	800a968 <__ulp+0x18>
 800a9a4:	7ff00000 	.word	0x7ff00000

0800a9a8 <__b2d>:
 800a9a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9aa:	6905      	ldr	r5, [r0, #16]
 800a9ac:	f100 0714 	add.w	r7, r0, #20
 800a9b0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800a9b4:	1f2e      	subs	r6, r5, #4
 800a9b6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800a9ba:	4620      	mov	r0, r4
 800a9bc:	f7ff fd48 	bl	800a450 <__hi0bits>
 800a9c0:	f1c0 0320 	rsb	r3, r0, #32
 800a9c4:	280a      	cmp	r0, #10
 800a9c6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800aa44 <__b2d+0x9c>
 800a9ca:	600b      	str	r3, [r1, #0]
 800a9cc:	dc14      	bgt.n	800a9f8 <__b2d+0x50>
 800a9ce:	f1c0 0e0b 	rsb	lr, r0, #11
 800a9d2:	fa24 f10e 	lsr.w	r1, r4, lr
 800a9d6:	42b7      	cmp	r7, r6
 800a9d8:	ea41 030c 	orr.w	r3, r1, ip
 800a9dc:	bf34      	ite	cc
 800a9de:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a9e2:	2100      	movcs	r1, #0
 800a9e4:	3015      	adds	r0, #21
 800a9e6:	fa04 f000 	lsl.w	r0, r4, r0
 800a9ea:	fa21 f10e 	lsr.w	r1, r1, lr
 800a9ee:	ea40 0201 	orr.w	r2, r0, r1
 800a9f2:	ec43 2b10 	vmov	d0, r2, r3
 800a9f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a9f8:	42b7      	cmp	r7, r6
 800a9fa:	bf3a      	itte	cc
 800a9fc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800aa00:	f1a5 0608 	subcc.w	r6, r5, #8
 800aa04:	2100      	movcs	r1, #0
 800aa06:	380b      	subs	r0, #11
 800aa08:	d017      	beq.n	800aa3a <__b2d+0x92>
 800aa0a:	f1c0 0c20 	rsb	ip, r0, #32
 800aa0e:	fa04 f500 	lsl.w	r5, r4, r0
 800aa12:	42be      	cmp	r6, r7
 800aa14:	fa21 f40c 	lsr.w	r4, r1, ip
 800aa18:	ea45 0504 	orr.w	r5, r5, r4
 800aa1c:	bf8c      	ite	hi
 800aa1e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800aa22:	2400      	movls	r4, #0
 800aa24:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800aa28:	fa01 f000 	lsl.w	r0, r1, r0
 800aa2c:	fa24 f40c 	lsr.w	r4, r4, ip
 800aa30:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800aa34:	ea40 0204 	orr.w	r2, r0, r4
 800aa38:	e7db      	b.n	800a9f2 <__b2d+0x4a>
 800aa3a:	ea44 030c 	orr.w	r3, r4, ip
 800aa3e:	460a      	mov	r2, r1
 800aa40:	e7d7      	b.n	800a9f2 <__b2d+0x4a>
 800aa42:	bf00      	nop
 800aa44:	3ff00000 	.word	0x3ff00000

0800aa48 <__d2b>:
 800aa48:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800aa4c:	4689      	mov	r9, r1
 800aa4e:	2101      	movs	r1, #1
 800aa50:	ec57 6b10 	vmov	r6, r7, d0
 800aa54:	4690      	mov	r8, r2
 800aa56:	f7ff fc09 	bl	800a26c <_Balloc>
 800aa5a:	4604      	mov	r4, r0
 800aa5c:	b930      	cbnz	r0, 800aa6c <__d2b+0x24>
 800aa5e:	4602      	mov	r2, r0
 800aa60:	4b25      	ldr	r3, [pc, #148]	; (800aaf8 <__d2b+0xb0>)
 800aa62:	4826      	ldr	r0, [pc, #152]	; (800aafc <__d2b+0xb4>)
 800aa64:	f240 310a 	movw	r1, #778	; 0x30a
 800aa68:	f000 fcfc 	bl	800b464 <__assert_func>
 800aa6c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800aa70:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800aa74:	bb35      	cbnz	r5, 800aac4 <__d2b+0x7c>
 800aa76:	2e00      	cmp	r6, #0
 800aa78:	9301      	str	r3, [sp, #4]
 800aa7a:	d028      	beq.n	800aace <__d2b+0x86>
 800aa7c:	4668      	mov	r0, sp
 800aa7e:	9600      	str	r6, [sp, #0]
 800aa80:	f7ff fd06 	bl	800a490 <__lo0bits>
 800aa84:	9900      	ldr	r1, [sp, #0]
 800aa86:	b300      	cbz	r0, 800aaca <__d2b+0x82>
 800aa88:	9a01      	ldr	r2, [sp, #4]
 800aa8a:	f1c0 0320 	rsb	r3, r0, #32
 800aa8e:	fa02 f303 	lsl.w	r3, r2, r3
 800aa92:	430b      	orrs	r3, r1
 800aa94:	40c2      	lsrs	r2, r0
 800aa96:	6163      	str	r3, [r4, #20]
 800aa98:	9201      	str	r2, [sp, #4]
 800aa9a:	9b01      	ldr	r3, [sp, #4]
 800aa9c:	61a3      	str	r3, [r4, #24]
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	bf14      	ite	ne
 800aaa2:	2202      	movne	r2, #2
 800aaa4:	2201      	moveq	r2, #1
 800aaa6:	6122      	str	r2, [r4, #16]
 800aaa8:	b1d5      	cbz	r5, 800aae0 <__d2b+0x98>
 800aaaa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800aaae:	4405      	add	r5, r0
 800aab0:	f8c9 5000 	str.w	r5, [r9]
 800aab4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800aab8:	f8c8 0000 	str.w	r0, [r8]
 800aabc:	4620      	mov	r0, r4
 800aabe:	b003      	add	sp, #12
 800aac0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aac4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800aac8:	e7d5      	b.n	800aa76 <__d2b+0x2e>
 800aaca:	6161      	str	r1, [r4, #20]
 800aacc:	e7e5      	b.n	800aa9a <__d2b+0x52>
 800aace:	a801      	add	r0, sp, #4
 800aad0:	f7ff fcde 	bl	800a490 <__lo0bits>
 800aad4:	9b01      	ldr	r3, [sp, #4]
 800aad6:	6163      	str	r3, [r4, #20]
 800aad8:	2201      	movs	r2, #1
 800aada:	6122      	str	r2, [r4, #16]
 800aadc:	3020      	adds	r0, #32
 800aade:	e7e3      	b.n	800aaa8 <__d2b+0x60>
 800aae0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800aae4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800aae8:	f8c9 0000 	str.w	r0, [r9]
 800aaec:	6918      	ldr	r0, [r3, #16]
 800aaee:	f7ff fcaf 	bl	800a450 <__hi0bits>
 800aaf2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800aaf6:	e7df      	b.n	800aab8 <__d2b+0x70>
 800aaf8:	0800b9c8 	.word	0x0800b9c8
 800aafc:	0800bab8 	.word	0x0800bab8

0800ab00 <__ratio>:
 800ab00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab04:	4688      	mov	r8, r1
 800ab06:	4669      	mov	r1, sp
 800ab08:	4681      	mov	r9, r0
 800ab0a:	f7ff ff4d 	bl	800a9a8 <__b2d>
 800ab0e:	a901      	add	r1, sp, #4
 800ab10:	4640      	mov	r0, r8
 800ab12:	ec55 4b10 	vmov	r4, r5, d0
 800ab16:	f7ff ff47 	bl	800a9a8 <__b2d>
 800ab1a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ab1e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800ab22:	eba3 0c02 	sub.w	ip, r3, r2
 800ab26:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ab2a:	1a9b      	subs	r3, r3, r2
 800ab2c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800ab30:	ec51 0b10 	vmov	r0, r1, d0
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	bfd6      	itet	le
 800ab38:	460a      	movle	r2, r1
 800ab3a:	462a      	movgt	r2, r5
 800ab3c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ab40:	468b      	mov	fp, r1
 800ab42:	462f      	mov	r7, r5
 800ab44:	bfd4      	ite	le
 800ab46:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800ab4a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800ab4e:	4620      	mov	r0, r4
 800ab50:	ee10 2a10 	vmov	r2, s0
 800ab54:	465b      	mov	r3, fp
 800ab56:	4639      	mov	r1, r7
 800ab58:	f7f5 fe88 	bl	800086c <__aeabi_ddiv>
 800ab5c:	ec41 0b10 	vmov	d0, r0, r1
 800ab60:	b003      	add	sp, #12
 800ab62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ab66 <__copybits>:
 800ab66:	3901      	subs	r1, #1
 800ab68:	b570      	push	{r4, r5, r6, lr}
 800ab6a:	1149      	asrs	r1, r1, #5
 800ab6c:	6914      	ldr	r4, [r2, #16]
 800ab6e:	3101      	adds	r1, #1
 800ab70:	f102 0314 	add.w	r3, r2, #20
 800ab74:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ab78:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ab7c:	1f05      	subs	r5, r0, #4
 800ab7e:	42a3      	cmp	r3, r4
 800ab80:	d30c      	bcc.n	800ab9c <__copybits+0x36>
 800ab82:	1aa3      	subs	r3, r4, r2
 800ab84:	3b11      	subs	r3, #17
 800ab86:	f023 0303 	bic.w	r3, r3, #3
 800ab8a:	3211      	adds	r2, #17
 800ab8c:	42a2      	cmp	r2, r4
 800ab8e:	bf88      	it	hi
 800ab90:	2300      	movhi	r3, #0
 800ab92:	4418      	add	r0, r3
 800ab94:	2300      	movs	r3, #0
 800ab96:	4288      	cmp	r0, r1
 800ab98:	d305      	bcc.n	800aba6 <__copybits+0x40>
 800ab9a:	bd70      	pop	{r4, r5, r6, pc}
 800ab9c:	f853 6b04 	ldr.w	r6, [r3], #4
 800aba0:	f845 6f04 	str.w	r6, [r5, #4]!
 800aba4:	e7eb      	b.n	800ab7e <__copybits+0x18>
 800aba6:	f840 3b04 	str.w	r3, [r0], #4
 800abaa:	e7f4      	b.n	800ab96 <__copybits+0x30>

0800abac <__any_on>:
 800abac:	f100 0214 	add.w	r2, r0, #20
 800abb0:	6900      	ldr	r0, [r0, #16]
 800abb2:	114b      	asrs	r3, r1, #5
 800abb4:	4298      	cmp	r0, r3
 800abb6:	b510      	push	{r4, lr}
 800abb8:	db11      	blt.n	800abde <__any_on+0x32>
 800abba:	dd0a      	ble.n	800abd2 <__any_on+0x26>
 800abbc:	f011 011f 	ands.w	r1, r1, #31
 800abc0:	d007      	beq.n	800abd2 <__any_on+0x26>
 800abc2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800abc6:	fa24 f001 	lsr.w	r0, r4, r1
 800abca:	fa00 f101 	lsl.w	r1, r0, r1
 800abce:	428c      	cmp	r4, r1
 800abd0:	d10b      	bne.n	800abea <__any_on+0x3e>
 800abd2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800abd6:	4293      	cmp	r3, r2
 800abd8:	d803      	bhi.n	800abe2 <__any_on+0x36>
 800abda:	2000      	movs	r0, #0
 800abdc:	bd10      	pop	{r4, pc}
 800abde:	4603      	mov	r3, r0
 800abe0:	e7f7      	b.n	800abd2 <__any_on+0x26>
 800abe2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800abe6:	2900      	cmp	r1, #0
 800abe8:	d0f5      	beq.n	800abd6 <__any_on+0x2a>
 800abea:	2001      	movs	r0, #1
 800abec:	e7f6      	b.n	800abdc <__any_on+0x30>

0800abee <_calloc_r>:
 800abee:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800abf0:	fba1 2402 	umull	r2, r4, r1, r2
 800abf4:	b94c      	cbnz	r4, 800ac0a <_calloc_r+0x1c>
 800abf6:	4611      	mov	r1, r2
 800abf8:	9201      	str	r2, [sp, #4]
 800abfa:	f000 f87b 	bl	800acf4 <_malloc_r>
 800abfe:	9a01      	ldr	r2, [sp, #4]
 800ac00:	4605      	mov	r5, r0
 800ac02:	b930      	cbnz	r0, 800ac12 <_calloc_r+0x24>
 800ac04:	4628      	mov	r0, r5
 800ac06:	b003      	add	sp, #12
 800ac08:	bd30      	pop	{r4, r5, pc}
 800ac0a:	220c      	movs	r2, #12
 800ac0c:	6002      	str	r2, [r0, #0]
 800ac0e:	2500      	movs	r5, #0
 800ac10:	e7f8      	b.n	800ac04 <_calloc_r+0x16>
 800ac12:	4621      	mov	r1, r4
 800ac14:	f7fc f860 	bl	8006cd8 <memset>
 800ac18:	e7f4      	b.n	800ac04 <_calloc_r+0x16>
	...

0800ac1c <_free_r>:
 800ac1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ac1e:	2900      	cmp	r1, #0
 800ac20:	d044      	beq.n	800acac <_free_r+0x90>
 800ac22:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ac26:	9001      	str	r0, [sp, #4]
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	f1a1 0404 	sub.w	r4, r1, #4
 800ac2e:	bfb8      	it	lt
 800ac30:	18e4      	addlt	r4, r4, r3
 800ac32:	f000 fca5 	bl	800b580 <__malloc_lock>
 800ac36:	4a1e      	ldr	r2, [pc, #120]	; (800acb0 <_free_r+0x94>)
 800ac38:	9801      	ldr	r0, [sp, #4]
 800ac3a:	6813      	ldr	r3, [r2, #0]
 800ac3c:	b933      	cbnz	r3, 800ac4c <_free_r+0x30>
 800ac3e:	6063      	str	r3, [r4, #4]
 800ac40:	6014      	str	r4, [r2, #0]
 800ac42:	b003      	add	sp, #12
 800ac44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ac48:	f000 bca0 	b.w	800b58c <__malloc_unlock>
 800ac4c:	42a3      	cmp	r3, r4
 800ac4e:	d908      	bls.n	800ac62 <_free_r+0x46>
 800ac50:	6825      	ldr	r5, [r4, #0]
 800ac52:	1961      	adds	r1, r4, r5
 800ac54:	428b      	cmp	r3, r1
 800ac56:	bf01      	itttt	eq
 800ac58:	6819      	ldreq	r1, [r3, #0]
 800ac5a:	685b      	ldreq	r3, [r3, #4]
 800ac5c:	1949      	addeq	r1, r1, r5
 800ac5e:	6021      	streq	r1, [r4, #0]
 800ac60:	e7ed      	b.n	800ac3e <_free_r+0x22>
 800ac62:	461a      	mov	r2, r3
 800ac64:	685b      	ldr	r3, [r3, #4]
 800ac66:	b10b      	cbz	r3, 800ac6c <_free_r+0x50>
 800ac68:	42a3      	cmp	r3, r4
 800ac6a:	d9fa      	bls.n	800ac62 <_free_r+0x46>
 800ac6c:	6811      	ldr	r1, [r2, #0]
 800ac6e:	1855      	adds	r5, r2, r1
 800ac70:	42a5      	cmp	r5, r4
 800ac72:	d10b      	bne.n	800ac8c <_free_r+0x70>
 800ac74:	6824      	ldr	r4, [r4, #0]
 800ac76:	4421      	add	r1, r4
 800ac78:	1854      	adds	r4, r2, r1
 800ac7a:	42a3      	cmp	r3, r4
 800ac7c:	6011      	str	r1, [r2, #0]
 800ac7e:	d1e0      	bne.n	800ac42 <_free_r+0x26>
 800ac80:	681c      	ldr	r4, [r3, #0]
 800ac82:	685b      	ldr	r3, [r3, #4]
 800ac84:	6053      	str	r3, [r2, #4]
 800ac86:	4421      	add	r1, r4
 800ac88:	6011      	str	r1, [r2, #0]
 800ac8a:	e7da      	b.n	800ac42 <_free_r+0x26>
 800ac8c:	d902      	bls.n	800ac94 <_free_r+0x78>
 800ac8e:	230c      	movs	r3, #12
 800ac90:	6003      	str	r3, [r0, #0]
 800ac92:	e7d6      	b.n	800ac42 <_free_r+0x26>
 800ac94:	6825      	ldr	r5, [r4, #0]
 800ac96:	1961      	adds	r1, r4, r5
 800ac98:	428b      	cmp	r3, r1
 800ac9a:	bf04      	itt	eq
 800ac9c:	6819      	ldreq	r1, [r3, #0]
 800ac9e:	685b      	ldreq	r3, [r3, #4]
 800aca0:	6063      	str	r3, [r4, #4]
 800aca2:	bf04      	itt	eq
 800aca4:	1949      	addeq	r1, r1, r5
 800aca6:	6021      	streq	r1, [r4, #0]
 800aca8:	6054      	str	r4, [r2, #4]
 800acaa:	e7ca      	b.n	800ac42 <_free_r+0x26>
 800acac:	b003      	add	sp, #12
 800acae:	bd30      	pop	{r4, r5, pc}
 800acb0:	200004e0 	.word	0x200004e0

0800acb4 <sbrk_aligned>:
 800acb4:	b570      	push	{r4, r5, r6, lr}
 800acb6:	4e0e      	ldr	r6, [pc, #56]	; (800acf0 <sbrk_aligned+0x3c>)
 800acb8:	460c      	mov	r4, r1
 800acba:	6831      	ldr	r1, [r6, #0]
 800acbc:	4605      	mov	r5, r0
 800acbe:	b911      	cbnz	r1, 800acc6 <sbrk_aligned+0x12>
 800acc0:	f000 fb4a 	bl	800b358 <_sbrk_r>
 800acc4:	6030      	str	r0, [r6, #0]
 800acc6:	4621      	mov	r1, r4
 800acc8:	4628      	mov	r0, r5
 800acca:	f000 fb45 	bl	800b358 <_sbrk_r>
 800acce:	1c43      	adds	r3, r0, #1
 800acd0:	d00a      	beq.n	800ace8 <sbrk_aligned+0x34>
 800acd2:	1cc4      	adds	r4, r0, #3
 800acd4:	f024 0403 	bic.w	r4, r4, #3
 800acd8:	42a0      	cmp	r0, r4
 800acda:	d007      	beq.n	800acec <sbrk_aligned+0x38>
 800acdc:	1a21      	subs	r1, r4, r0
 800acde:	4628      	mov	r0, r5
 800ace0:	f000 fb3a 	bl	800b358 <_sbrk_r>
 800ace4:	3001      	adds	r0, #1
 800ace6:	d101      	bne.n	800acec <sbrk_aligned+0x38>
 800ace8:	f04f 34ff 	mov.w	r4, #4294967295
 800acec:	4620      	mov	r0, r4
 800acee:	bd70      	pop	{r4, r5, r6, pc}
 800acf0:	200004e4 	.word	0x200004e4

0800acf4 <_malloc_r>:
 800acf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800acf8:	1ccd      	adds	r5, r1, #3
 800acfa:	f025 0503 	bic.w	r5, r5, #3
 800acfe:	3508      	adds	r5, #8
 800ad00:	2d0c      	cmp	r5, #12
 800ad02:	bf38      	it	cc
 800ad04:	250c      	movcc	r5, #12
 800ad06:	2d00      	cmp	r5, #0
 800ad08:	4607      	mov	r7, r0
 800ad0a:	db01      	blt.n	800ad10 <_malloc_r+0x1c>
 800ad0c:	42a9      	cmp	r1, r5
 800ad0e:	d905      	bls.n	800ad1c <_malloc_r+0x28>
 800ad10:	230c      	movs	r3, #12
 800ad12:	603b      	str	r3, [r7, #0]
 800ad14:	2600      	movs	r6, #0
 800ad16:	4630      	mov	r0, r6
 800ad18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad1c:	4e2e      	ldr	r6, [pc, #184]	; (800add8 <_malloc_r+0xe4>)
 800ad1e:	f000 fc2f 	bl	800b580 <__malloc_lock>
 800ad22:	6833      	ldr	r3, [r6, #0]
 800ad24:	461c      	mov	r4, r3
 800ad26:	bb34      	cbnz	r4, 800ad76 <_malloc_r+0x82>
 800ad28:	4629      	mov	r1, r5
 800ad2a:	4638      	mov	r0, r7
 800ad2c:	f7ff ffc2 	bl	800acb4 <sbrk_aligned>
 800ad30:	1c43      	adds	r3, r0, #1
 800ad32:	4604      	mov	r4, r0
 800ad34:	d14d      	bne.n	800add2 <_malloc_r+0xde>
 800ad36:	6834      	ldr	r4, [r6, #0]
 800ad38:	4626      	mov	r6, r4
 800ad3a:	2e00      	cmp	r6, #0
 800ad3c:	d140      	bne.n	800adc0 <_malloc_r+0xcc>
 800ad3e:	6823      	ldr	r3, [r4, #0]
 800ad40:	4631      	mov	r1, r6
 800ad42:	4638      	mov	r0, r7
 800ad44:	eb04 0803 	add.w	r8, r4, r3
 800ad48:	f000 fb06 	bl	800b358 <_sbrk_r>
 800ad4c:	4580      	cmp	r8, r0
 800ad4e:	d13a      	bne.n	800adc6 <_malloc_r+0xd2>
 800ad50:	6821      	ldr	r1, [r4, #0]
 800ad52:	3503      	adds	r5, #3
 800ad54:	1a6d      	subs	r5, r5, r1
 800ad56:	f025 0503 	bic.w	r5, r5, #3
 800ad5a:	3508      	adds	r5, #8
 800ad5c:	2d0c      	cmp	r5, #12
 800ad5e:	bf38      	it	cc
 800ad60:	250c      	movcc	r5, #12
 800ad62:	4629      	mov	r1, r5
 800ad64:	4638      	mov	r0, r7
 800ad66:	f7ff ffa5 	bl	800acb4 <sbrk_aligned>
 800ad6a:	3001      	adds	r0, #1
 800ad6c:	d02b      	beq.n	800adc6 <_malloc_r+0xd2>
 800ad6e:	6823      	ldr	r3, [r4, #0]
 800ad70:	442b      	add	r3, r5
 800ad72:	6023      	str	r3, [r4, #0]
 800ad74:	e00e      	b.n	800ad94 <_malloc_r+0xa0>
 800ad76:	6822      	ldr	r2, [r4, #0]
 800ad78:	1b52      	subs	r2, r2, r5
 800ad7a:	d41e      	bmi.n	800adba <_malloc_r+0xc6>
 800ad7c:	2a0b      	cmp	r2, #11
 800ad7e:	d916      	bls.n	800adae <_malloc_r+0xba>
 800ad80:	1961      	adds	r1, r4, r5
 800ad82:	42a3      	cmp	r3, r4
 800ad84:	6025      	str	r5, [r4, #0]
 800ad86:	bf18      	it	ne
 800ad88:	6059      	strne	r1, [r3, #4]
 800ad8a:	6863      	ldr	r3, [r4, #4]
 800ad8c:	bf08      	it	eq
 800ad8e:	6031      	streq	r1, [r6, #0]
 800ad90:	5162      	str	r2, [r4, r5]
 800ad92:	604b      	str	r3, [r1, #4]
 800ad94:	4638      	mov	r0, r7
 800ad96:	f104 060b 	add.w	r6, r4, #11
 800ad9a:	f000 fbf7 	bl	800b58c <__malloc_unlock>
 800ad9e:	f026 0607 	bic.w	r6, r6, #7
 800ada2:	1d23      	adds	r3, r4, #4
 800ada4:	1af2      	subs	r2, r6, r3
 800ada6:	d0b6      	beq.n	800ad16 <_malloc_r+0x22>
 800ada8:	1b9b      	subs	r3, r3, r6
 800adaa:	50a3      	str	r3, [r4, r2]
 800adac:	e7b3      	b.n	800ad16 <_malloc_r+0x22>
 800adae:	6862      	ldr	r2, [r4, #4]
 800adb0:	42a3      	cmp	r3, r4
 800adb2:	bf0c      	ite	eq
 800adb4:	6032      	streq	r2, [r6, #0]
 800adb6:	605a      	strne	r2, [r3, #4]
 800adb8:	e7ec      	b.n	800ad94 <_malloc_r+0xa0>
 800adba:	4623      	mov	r3, r4
 800adbc:	6864      	ldr	r4, [r4, #4]
 800adbe:	e7b2      	b.n	800ad26 <_malloc_r+0x32>
 800adc0:	4634      	mov	r4, r6
 800adc2:	6876      	ldr	r6, [r6, #4]
 800adc4:	e7b9      	b.n	800ad3a <_malloc_r+0x46>
 800adc6:	230c      	movs	r3, #12
 800adc8:	603b      	str	r3, [r7, #0]
 800adca:	4638      	mov	r0, r7
 800adcc:	f000 fbde 	bl	800b58c <__malloc_unlock>
 800add0:	e7a1      	b.n	800ad16 <_malloc_r+0x22>
 800add2:	6025      	str	r5, [r4, #0]
 800add4:	e7de      	b.n	800ad94 <_malloc_r+0xa0>
 800add6:	bf00      	nop
 800add8:	200004e0 	.word	0x200004e0

0800addc <__ssputs_r>:
 800addc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ade0:	688e      	ldr	r6, [r1, #8]
 800ade2:	429e      	cmp	r6, r3
 800ade4:	4682      	mov	sl, r0
 800ade6:	460c      	mov	r4, r1
 800ade8:	4690      	mov	r8, r2
 800adea:	461f      	mov	r7, r3
 800adec:	d838      	bhi.n	800ae60 <__ssputs_r+0x84>
 800adee:	898a      	ldrh	r2, [r1, #12]
 800adf0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800adf4:	d032      	beq.n	800ae5c <__ssputs_r+0x80>
 800adf6:	6825      	ldr	r5, [r4, #0]
 800adf8:	6909      	ldr	r1, [r1, #16]
 800adfa:	eba5 0901 	sub.w	r9, r5, r1
 800adfe:	6965      	ldr	r5, [r4, #20]
 800ae00:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ae04:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ae08:	3301      	adds	r3, #1
 800ae0a:	444b      	add	r3, r9
 800ae0c:	106d      	asrs	r5, r5, #1
 800ae0e:	429d      	cmp	r5, r3
 800ae10:	bf38      	it	cc
 800ae12:	461d      	movcc	r5, r3
 800ae14:	0553      	lsls	r3, r2, #21
 800ae16:	d531      	bpl.n	800ae7c <__ssputs_r+0xa0>
 800ae18:	4629      	mov	r1, r5
 800ae1a:	f7ff ff6b 	bl	800acf4 <_malloc_r>
 800ae1e:	4606      	mov	r6, r0
 800ae20:	b950      	cbnz	r0, 800ae38 <__ssputs_r+0x5c>
 800ae22:	230c      	movs	r3, #12
 800ae24:	f8ca 3000 	str.w	r3, [sl]
 800ae28:	89a3      	ldrh	r3, [r4, #12]
 800ae2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae2e:	81a3      	strh	r3, [r4, #12]
 800ae30:	f04f 30ff 	mov.w	r0, #4294967295
 800ae34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae38:	6921      	ldr	r1, [r4, #16]
 800ae3a:	464a      	mov	r2, r9
 800ae3c:	f7fb ff3e 	bl	8006cbc <memcpy>
 800ae40:	89a3      	ldrh	r3, [r4, #12]
 800ae42:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ae46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae4a:	81a3      	strh	r3, [r4, #12]
 800ae4c:	6126      	str	r6, [r4, #16]
 800ae4e:	6165      	str	r5, [r4, #20]
 800ae50:	444e      	add	r6, r9
 800ae52:	eba5 0509 	sub.w	r5, r5, r9
 800ae56:	6026      	str	r6, [r4, #0]
 800ae58:	60a5      	str	r5, [r4, #8]
 800ae5a:	463e      	mov	r6, r7
 800ae5c:	42be      	cmp	r6, r7
 800ae5e:	d900      	bls.n	800ae62 <__ssputs_r+0x86>
 800ae60:	463e      	mov	r6, r7
 800ae62:	6820      	ldr	r0, [r4, #0]
 800ae64:	4632      	mov	r2, r6
 800ae66:	4641      	mov	r1, r8
 800ae68:	f000 fb70 	bl	800b54c <memmove>
 800ae6c:	68a3      	ldr	r3, [r4, #8]
 800ae6e:	1b9b      	subs	r3, r3, r6
 800ae70:	60a3      	str	r3, [r4, #8]
 800ae72:	6823      	ldr	r3, [r4, #0]
 800ae74:	4433      	add	r3, r6
 800ae76:	6023      	str	r3, [r4, #0]
 800ae78:	2000      	movs	r0, #0
 800ae7a:	e7db      	b.n	800ae34 <__ssputs_r+0x58>
 800ae7c:	462a      	mov	r2, r5
 800ae7e:	f000 fb8b 	bl	800b598 <_realloc_r>
 800ae82:	4606      	mov	r6, r0
 800ae84:	2800      	cmp	r0, #0
 800ae86:	d1e1      	bne.n	800ae4c <__ssputs_r+0x70>
 800ae88:	6921      	ldr	r1, [r4, #16]
 800ae8a:	4650      	mov	r0, sl
 800ae8c:	f7ff fec6 	bl	800ac1c <_free_r>
 800ae90:	e7c7      	b.n	800ae22 <__ssputs_r+0x46>
	...

0800ae94 <_svfiprintf_r>:
 800ae94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae98:	4698      	mov	r8, r3
 800ae9a:	898b      	ldrh	r3, [r1, #12]
 800ae9c:	061b      	lsls	r3, r3, #24
 800ae9e:	b09d      	sub	sp, #116	; 0x74
 800aea0:	4607      	mov	r7, r0
 800aea2:	460d      	mov	r5, r1
 800aea4:	4614      	mov	r4, r2
 800aea6:	d50e      	bpl.n	800aec6 <_svfiprintf_r+0x32>
 800aea8:	690b      	ldr	r3, [r1, #16]
 800aeaa:	b963      	cbnz	r3, 800aec6 <_svfiprintf_r+0x32>
 800aeac:	2140      	movs	r1, #64	; 0x40
 800aeae:	f7ff ff21 	bl	800acf4 <_malloc_r>
 800aeb2:	6028      	str	r0, [r5, #0]
 800aeb4:	6128      	str	r0, [r5, #16]
 800aeb6:	b920      	cbnz	r0, 800aec2 <_svfiprintf_r+0x2e>
 800aeb8:	230c      	movs	r3, #12
 800aeba:	603b      	str	r3, [r7, #0]
 800aebc:	f04f 30ff 	mov.w	r0, #4294967295
 800aec0:	e0d1      	b.n	800b066 <_svfiprintf_r+0x1d2>
 800aec2:	2340      	movs	r3, #64	; 0x40
 800aec4:	616b      	str	r3, [r5, #20]
 800aec6:	2300      	movs	r3, #0
 800aec8:	9309      	str	r3, [sp, #36]	; 0x24
 800aeca:	2320      	movs	r3, #32
 800aecc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aed0:	f8cd 800c 	str.w	r8, [sp, #12]
 800aed4:	2330      	movs	r3, #48	; 0x30
 800aed6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b080 <_svfiprintf_r+0x1ec>
 800aeda:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aede:	f04f 0901 	mov.w	r9, #1
 800aee2:	4623      	mov	r3, r4
 800aee4:	469a      	mov	sl, r3
 800aee6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aeea:	b10a      	cbz	r2, 800aef0 <_svfiprintf_r+0x5c>
 800aeec:	2a25      	cmp	r2, #37	; 0x25
 800aeee:	d1f9      	bne.n	800aee4 <_svfiprintf_r+0x50>
 800aef0:	ebba 0b04 	subs.w	fp, sl, r4
 800aef4:	d00b      	beq.n	800af0e <_svfiprintf_r+0x7a>
 800aef6:	465b      	mov	r3, fp
 800aef8:	4622      	mov	r2, r4
 800aefa:	4629      	mov	r1, r5
 800aefc:	4638      	mov	r0, r7
 800aefe:	f7ff ff6d 	bl	800addc <__ssputs_r>
 800af02:	3001      	adds	r0, #1
 800af04:	f000 80aa 	beq.w	800b05c <_svfiprintf_r+0x1c8>
 800af08:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800af0a:	445a      	add	r2, fp
 800af0c:	9209      	str	r2, [sp, #36]	; 0x24
 800af0e:	f89a 3000 	ldrb.w	r3, [sl]
 800af12:	2b00      	cmp	r3, #0
 800af14:	f000 80a2 	beq.w	800b05c <_svfiprintf_r+0x1c8>
 800af18:	2300      	movs	r3, #0
 800af1a:	f04f 32ff 	mov.w	r2, #4294967295
 800af1e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800af22:	f10a 0a01 	add.w	sl, sl, #1
 800af26:	9304      	str	r3, [sp, #16]
 800af28:	9307      	str	r3, [sp, #28]
 800af2a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800af2e:	931a      	str	r3, [sp, #104]	; 0x68
 800af30:	4654      	mov	r4, sl
 800af32:	2205      	movs	r2, #5
 800af34:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af38:	4851      	ldr	r0, [pc, #324]	; (800b080 <_svfiprintf_r+0x1ec>)
 800af3a:	f7f5 f961 	bl	8000200 <memchr>
 800af3e:	9a04      	ldr	r2, [sp, #16]
 800af40:	b9d8      	cbnz	r0, 800af7a <_svfiprintf_r+0xe6>
 800af42:	06d0      	lsls	r0, r2, #27
 800af44:	bf44      	itt	mi
 800af46:	2320      	movmi	r3, #32
 800af48:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800af4c:	0711      	lsls	r1, r2, #28
 800af4e:	bf44      	itt	mi
 800af50:	232b      	movmi	r3, #43	; 0x2b
 800af52:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800af56:	f89a 3000 	ldrb.w	r3, [sl]
 800af5a:	2b2a      	cmp	r3, #42	; 0x2a
 800af5c:	d015      	beq.n	800af8a <_svfiprintf_r+0xf6>
 800af5e:	9a07      	ldr	r2, [sp, #28]
 800af60:	4654      	mov	r4, sl
 800af62:	2000      	movs	r0, #0
 800af64:	f04f 0c0a 	mov.w	ip, #10
 800af68:	4621      	mov	r1, r4
 800af6a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800af6e:	3b30      	subs	r3, #48	; 0x30
 800af70:	2b09      	cmp	r3, #9
 800af72:	d94e      	bls.n	800b012 <_svfiprintf_r+0x17e>
 800af74:	b1b0      	cbz	r0, 800afa4 <_svfiprintf_r+0x110>
 800af76:	9207      	str	r2, [sp, #28]
 800af78:	e014      	b.n	800afa4 <_svfiprintf_r+0x110>
 800af7a:	eba0 0308 	sub.w	r3, r0, r8
 800af7e:	fa09 f303 	lsl.w	r3, r9, r3
 800af82:	4313      	orrs	r3, r2
 800af84:	9304      	str	r3, [sp, #16]
 800af86:	46a2      	mov	sl, r4
 800af88:	e7d2      	b.n	800af30 <_svfiprintf_r+0x9c>
 800af8a:	9b03      	ldr	r3, [sp, #12]
 800af8c:	1d19      	adds	r1, r3, #4
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	9103      	str	r1, [sp, #12]
 800af92:	2b00      	cmp	r3, #0
 800af94:	bfbb      	ittet	lt
 800af96:	425b      	neglt	r3, r3
 800af98:	f042 0202 	orrlt.w	r2, r2, #2
 800af9c:	9307      	strge	r3, [sp, #28]
 800af9e:	9307      	strlt	r3, [sp, #28]
 800afa0:	bfb8      	it	lt
 800afa2:	9204      	strlt	r2, [sp, #16]
 800afa4:	7823      	ldrb	r3, [r4, #0]
 800afa6:	2b2e      	cmp	r3, #46	; 0x2e
 800afa8:	d10c      	bne.n	800afc4 <_svfiprintf_r+0x130>
 800afaa:	7863      	ldrb	r3, [r4, #1]
 800afac:	2b2a      	cmp	r3, #42	; 0x2a
 800afae:	d135      	bne.n	800b01c <_svfiprintf_r+0x188>
 800afb0:	9b03      	ldr	r3, [sp, #12]
 800afb2:	1d1a      	adds	r2, r3, #4
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	9203      	str	r2, [sp, #12]
 800afb8:	2b00      	cmp	r3, #0
 800afba:	bfb8      	it	lt
 800afbc:	f04f 33ff 	movlt.w	r3, #4294967295
 800afc0:	3402      	adds	r4, #2
 800afc2:	9305      	str	r3, [sp, #20]
 800afc4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b090 <_svfiprintf_r+0x1fc>
 800afc8:	7821      	ldrb	r1, [r4, #0]
 800afca:	2203      	movs	r2, #3
 800afcc:	4650      	mov	r0, sl
 800afce:	f7f5 f917 	bl	8000200 <memchr>
 800afd2:	b140      	cbz	r0, 800afe6 <_svfiprintf_r+0x152>
 800afd4:	2340      	movs	r3, #64	; 0x40
 800afd6:	eba0 000a 	sub.w	r0, r0, sl
 800afda:	fa03 f000 	lsl.w	r0, r3, r0
 800afde:	9b04      	ldr	r3, [sp, #16]
 800afe0:	4303      	orrs	r3, r0
 800afe2:	3401      	adds	r4, #1
 800afe4:	9304      	str	r3, [sp, #16]
 800afe6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800afea:	4826      	ldr	r0, [pc, #152]	; (800b084 <_svfiprintf_r+0x1f0>)
 800afec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aff0:	2206      	movs	r2, #6
 800aff2:	f7f5 f905 	bl	8000200 <memchr>
 800aff6:	2800      	cmp	r0, #0
 800aff8:	d038      	beq.n	800b06c <_svfiprintf_r+0x1d8>
 800affa:	4b23      	ldr	r3, [pc, #140]	; (800b088 <_svfiprintf_r+0x1f4>)
 800affc:	bb1b      	cbnz	r3, 800b046 <_svfiprintf_r+0x1b2>
 800affe:	9b03      	ldr	r3, [sp, #12]
 800b000:	3307      	adds	r3, #7
 800b002:	f023 0307 	bic.w	r3, r3, #7
 800b006:	3308      	adds	r3, #8
 800b008:	9303      	str	r3, [sp, #12]
 800b00a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b00c:	4433      	add	r3, r6
 800b00e:	9309      	str	r3, [sp, #36]	; 0x24
 800b010:	e767      	b.n	800aee2 <_svfiprintf_r+0x4e>
 800b012:	fb0c 3202 	mla	r2, ip, r2, r3
 800b016:	460c      	mov	r4, r1
 800b018:	2001      	movs	r0, #1
 800b01a:	e7a5      	b.n	800af68 <_svfiprintf_r+0xd4>
 800b01c:	2300      	movs	r3, #0
 800b01e:	3401      	adds	r4, #1
 800b020:	9305      	str	r3, [sp, #20]
 800b022:	4619      	mov	r1, r3
 800b024:	f04f 0c0a 	mov.w	ip, #10
 800b028:	4620      	mov	r0, r4
 800b02a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b02e:	3a30      	subs	r2, #48	; 0x30
 800b030:	2a09      	cmp	r2, #9
 800b032:	d903      	bls.n	800b03c <_svfiprintf_r+0x1a8>
 800b034:	2b00      	cmp	r3, #0
 800b036:	d0c5      	beq.n	800afc4 <_svfiprintf_r+0x130>
 800b038:	9105      	str	r1, [sp, #20]
 800b03a:	e7c3      	b.n	800afc4 <_svfiprintf_r+0x130>
 800b03c:	fb0c 2101 	mla	r1, ip, r1, r2
 800b040:	4604      	mov	r4, r0
 800b042:	2301      	movs	r3, #1
 800b044:	e7f0      	b.n	800b028 <_svfiprintf_r+0x194>
 800b046:	ab03      	add	r3, sp, #12
 800b048:	9300      	str	r3, [sp, #0]
 800b04a:	462a      	mov	r2, r5
 800b04c:	4b0f      	ldr	r3, [pc, #60]	; (800b08c <_svfiprintf_r+0x1f8>)
 800b04e:	a904      	add	r1, sp, #16
 800b050:	4638      	mov	r0, r7
 800b052:	f7fb fee9 	bl	8006e28 <_printf_float>
 800b056:	1c42      	adds	r2, r0, #1
 800b058:	4606      	mov	r6, r0
 800b05a:	d1d6      	bne.n	800b00a <_svfiprintf_r+0x176>
 800b05c:	89ab      	ldrh	r3, [r5, #12]
 800b05e:	065b      	lsls	r3, r3, #25
 800b060:	f53f af2c 	bmi.w	800aebc <_svfiprintf_r+0x28>
 800b064:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b066:	b01d      	add	sp, #116	; 0x74
 800b068:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b06c:	ab03      	add	r3, sp, #12
 800b06e:	9300      	str	r3, [sp, #0]
 800b070:	462a      	mov	r2, r5
 800b072:	4b06      	ldr	r3, [pc, #24]	; (800b08c <_svfiprintf_r+0x1f8>)
 800b074:	a904      	add	r1, sp, #16
 800b076:	4638      	mov	r0, r7
 800b078:	f7fc f97a 	bl	8007370 <_printf_i>
 800b07c:	e7eb      	b.n	800b056 <_svfiprintf_r+0x1c2>
 800b07e:	bf00      	nop
 800b080:	0800bc14 	.word	0x0800bc14
 800b084:	0800bc1e 	.word	0x0800bc1e
 800b088:	08006e29 	.word	0x08006e29
 800b08c:	0800addd 	.word	0x0800addd
 800b090:	0800bc1a 	.word	0x0800bc1a

0800b094 <__sfputc_r>:
 800b094:	6893      	ldr	r3, [r2, #8]
 800b096:	3b01      	subs	r3, #1
 800b098:	2b00      	cmp	r3, #0
 800b09a:	b410      	push	{r4}
 800b09c:	6093      	str	r3, [r2, #8]
 800b09e:	da08      	bge.n	800b0b2 <__sfputc_r+0x1e>
 800b0a0:	6994      	ldr	r4, [r2, #24]
 800b0a2:	42a3      	cmp	r3, r4
 800b0a4:	db01      	blt.n	800b0aa <__sfputc_r+0x16>
 800b0a6:	290a      	cmp	r1, #10
 800b0a8:	d103      	bne.n	800b0b2 <__sfputc_r+0x1e>
 800b0aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b0ae:	f7fd bbf7 	b.w	80088a0 <__swbuf_r>
 800b0b2:	6813      	ldr	r3, [r2, #0]
 800b0b4:	1c58      	adds	r0, r3, #1
 800b0b6:	6010      	str	r0, [r2, #0]
 800b0b8:	7019      	strb	r1, [r3, #0]
 800b0ba:	4608      	mov	r0, r1
 800b0bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b0c0:	4770      	bx	lr

0800b0c2 <__sfputs_r>:
 800b0c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0c4:	4606      	mov	r6, r0
 800b0c6:	460f      	mov	r7, r1
 800b0c8:	4614      	mov	r4, r2
 800b0ca:	18d5      	adds	r5, r2, r3
 800b0cc:	42ac      	cmp	r4, r5
 800b0ce:	d101      	bne.n	800b0d4 <__sfputs_r+0x12>
 800b0d0:	2000      	movs	r0, #0
 800b0d2:	e007      	b.n	800b0e4 <__sfputs_r+0x22>
 800b0d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0d8:	463a      	mov	r2, r7
 800b0da:	4630      	mov	r0, r6
 800b0dc:	f7ff ffda 	bl	800b094 <__sfputc_r>
 800b0e0:	1c43      	adds	r3, r0, #1
 800b0e2:	d1f3      	bne.n	800b0cc <__sfputs_r+0xa>
 800b0e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b0e8 <_vfiprintf_r>:
 800b0e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0ec:	460d      	mov	r5, r1
 800b0ee:	b09d      	sub	sp, #116	; 0x74
 800b0f0:	4614      	mov	r4, r2
 800b0f2:	4698      	mov	r8, r3
 800b0f4:	4606      	mov	r6, r0
 800b0f6:	b118      	cbz	r0, 800b100 <_vfiprintf_r+0x18>
 800b0f8:	6983      	ldr	r3, [r0, #24]
 800b0fa:	b90b      	cbnz	r3, 800b100 <_vfiprintf_r+0x18>
 800b0fc:	f7fe fc24 	bl	8009948 <__sinit>
 800b100:	4b89      	ldr	r3, [pc, #548]	; (800b328 <_vfiprintf_r+0x240>)
 800b102:	429d      	cmp	r5, r3
 800b104:	d11b      	bne.n	800b13e <_vfiprintf_r+0x56>
 800b106:	6875      	ldr	r5, [r6, #4]
 800b108:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b10a:	07d9      	lsls	r1, r3, #31
 800b10c:	d405      	bmi.n	800b11a <_vfiprintf_r+0x32>
 800b10e:	89ab      	ldrh	r3, [r5, #12]
 800b110:	059a      	lsls	r2, r3, #22
 800b112:	d402      	bmi.n	800b11a <_vfiprintf_r+0x32>
 800b114:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b116:	f7ff f828 	bl	800a16a <__retarget_lock_acquire_recursive>
 800b11a:	89ab      	ldrh	r3, [r5, #12]
 800b11c:	071b      	lsls	r3, r3, #28
 800b11e:	d501      	bpl.n	800b124 <_vfiprintf_r+0x3c>
 800b120:	692b      	ldr	r3, [r5, #16]
 800b122:	b9eb      	cbnz	r3, 800b160 <_vfiprintf_r+0x78>
 800b124:	4629      	mov	r1, r5
 800b126:	4630      	mov	r0, r6
 800b128:	f7fd fc0c 	bl	8008944 <__swsetup_r>
 800b12c:	b1c0      	cbz	r0, 800b160 <_vfiprintf_r+0x78>
 800b12e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b130:	07dc      	lsls	r4, r3, #31
 800b132:	d50e      	bpl.n	800b152 <_vfiprintf_r+0x6a>
 800b134:	f04f 30ff 	mov.w	r0, #4294967295
 800b138:	b01d      	add	sp, #116	; 0x74
 800b13a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b13e:	4b7b      	ldr	r3, [pc, #492]	; (800b32c <_vfiprintf_r+0x244>)
 800b140:	429d      	cmp	r5, r3
 800b142:	d101      	bne.n	800b148 <_vfiprintf_r+0x60>
 800b144:	68b5      	ldr	r5, [r6, #8]
 800b146:	e7df      	b.n	800b108 <_vfiprintf_r+0x20>
 800b148:	4b79      	ldr	r3, [pc, #484]	; (800b330 <_vfiprintf_r+0x248>)
 800b14a:	429d      	cmp	r5, r3
 800b14c:	bf08      	it	eq
 800b14e:	68f5      	ldreq	r5, [r6, #12]
 800b150:	e7da      	b.n	800b108 <_vfiprintf_r+0x20>
 800b152:	89ab      	ldrh	r3, [r5, #12]
 800b154:	0598      	lsls	r0, r3, #22
 800b156:	d4ed      	bmi.n	800b134 <_vfiprintf_r+0x4c>
 800b158:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b15a:	f7ff f807 	bl	800a16c <__retarget_lock_release_recursive>
 800b15e:	e7e9      	b.n	800b134 <_vfiprintf_r+0x4c>
 800b160:	2300      	movs	r3, #0
 800b162:	9309      	str	r3, [sp, #36]	; 0x24
 800b164:	2320      	movs	r3, #32
 800b166:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b16a:	f8cd 800c 	str.w	r8, [sp, #12]
 800b16e:	2330      	movs	r3, #48	; 0x30
 800b170:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b334 <_vfiprintf_r+0x24c>
 800b174:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b178:	f04f 0901 	mov.w	r9, #1
 800b17c:	4623      	mov	r3, r4
 800b17e:	469a      	mov	sl, r3
 800b180:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b184:	b10a      	cbz	r2, 800b18a <_vfiprintf_r+0xa2>
 800b186:	2a25      	cmp	r2, #37	; 0x25
 800b188:	d1f9      	bne.n	800b17e <_vfiprintf_r+0x96>
 800b18a:	ebba 0b04 	subs.w	fp, sl, r4
 800b18e:	d00b      	beq.n	800b1a8 <_vfiprintf_r+0xc0>
 800b190:	465b      	mov	r3, fp
 800b192:	4622      	mov	r2, r4
 800b194:	4629      	mov	r1, r5
 800b196:	4630      	mov	r0, r6
 800b198:	f7ff ff93 	bl	800b0c2 <__sfputs_r>
 800b19c:	3001      	adds	r0, #1
 800b19e:	f000 80aa 	beq.w	800b2f6 <_vfiprintf_r+0x20e>
 800b1a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b1a4:	445a      	add	r2, fp
 800b1a6:	9209      	str	r2, [sp, #36]	; 0x24
 800b1a8:	f89a 3000 	ldrb.w	r3, [sl]
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	f000 80a2 	beq.w	800b2f6 <_vfiprintf_r+0x20e>
 800b1b2:	2300      	movs	r3, #0
 800b1b4:	f04f 32ff 	mov.w	r2, #4294967295
 800b1b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b1bc:	f10a 0a01 	add.w	sl, sl, #1
 800b1c0:	9304      	str	r3, [sp, #16]
 800b1c2:	9307      	str	r3, [sp, #28]
 800b1c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b1c8:	931a      	str	r3, [sp, #104]	; 0x68
 800b1ca:	4654      	mov	r4, sl
 800b1cc:	2205      	movs	r2, #5
 800b1ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b1d2:	4858      	ldr	r0, [pc, #352]	; (800b334 <_vfiprintf_r+0x24c>)
 800b1d4:	f7f5 f814 	bl	8000200 <memchr>
 800b1d8:	9a04      	ldr	r2, [sp, #16]
 800b1da:	b9d8      	cbnz	r0, 800b214 <_vfiprintf_r+0x12c>
 800b1dc:	06d1      	lsls	r1, r2, #27
 800b1de:	bf44      	itt	mi
 800b1e0:	2320      	movmi	r3, #32
 800b1e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b1e6:	0713      	lsls	r3, r2, #28
 800b1e8:	bf44      	itt	mi
 800b1ea:	232b      	movmi	r3, #43	; 0x2b
 800b1ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b1f0:	f89a 3000 	ldrb.w	r3, [sl]
 800b1f4:	2b2a      	cmp	r3, #42	; 0x2a
 800b1f6:	d015      	beq.n	800b224 <_vfiprintf_r+0x13c>
 800b1f8:	9a07      	ldr	r2, [sp, #28]
 800b1fa:	4654      	mov	r4, sl
 800b1fc:	2000      	movs	r0, #0
 800b1fe:	f04f 0c0a 	mov.w	ip, #10
 800b202:	4621      	mov	r1, r4
 800b204:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b208:	3b30      	subs	r3, #48	; 0x30
 800b20a:	2b09      	cmp	r3, #9
 800b20c:	d94e      	bls.n	800b2ac <_vfiprintf_r+0x1c4>
 800b20e:	b1b0      	cbz	r0, 800b23e <_vfiprintf_r+0x156>
 800b210:	9207      	str	r2, [sp, #28]
 800b212:	e014      	b.n	800b23e <_vfiprintf_r+0x156>
 800b214:	eba0 0308 	sub.w	r3, r0, r8
 800b218:	fa09 f303 	lsl.w	r3, r9, r3
 800b21c:	4313      	orrs	r3, r2
 800b21e:	9304      	str	r3, [sp, #16]
 800b220:	46a2      	mov	sl, r4
 800b222:	e7d2      	b.n	800b1ca <_vfiprintf_r+0xe2>
 800b224:	9b03      	ldr	r3, [sp, #12]
 800b226:	1d19      	adds	r1, r3, #4
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	9103      	str	r1, [sp, #12]
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	bfbb      	ittet	lt
 800b230:	425b      	neglt	r3, r3
 800b232:	f042 0202 	orrlt.w	r2, r2, #2
 800b236:	9307      	strge	r3, [sp, #28]
 800b238:	9307      	strlt	r3, [sp, #28]
 800b23a:	bfb8      	it	lt
 800b23c:	9204      	strlt	r2, [sp, #16]
 800b23e:	7823      	ldrb	r3, [r4, #0]
 800b240:	2b2e      	cmp	r3, #46	; 0x2e
 800b242:	d10c      	bne.n	800b25e <_vfiprintf_r+0x176>
 800b244:	7863      	ldrb	r3, [r4, #1]
 800b246:	2b2a      	cmp	r3, #42	; 0x2a
 800b248:	d135      	bne.n	800b2b6 <_vfiprintf_r+0x1ce>
 800b24a:	9b03      	ldr	r3, [sp, #12]
 800b24c:	1d1a      	adds	r2, r3, #4
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	9203      	str	r2, [sp, #12]
 800b252:	2b00      	cmp	r3, #0
 800b254:	bfb8      	it	lt
 800b256:	f04f 33ff 	movlt.w	r3, #4294967295
 800b25a:	3402      	adds	r4, #2
 800b25c:	9305      	str	r3, [sp, #20]
 800b25e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b344 <_vfiprintf_r+0x25c>
 800b262:	7821      	ldrb	r1, [r4, #0]
 800b264:	2203      	movs	r2, #3
 800b266:	4650      	mov	r0, sl
 800b268:	f7f4 ffca 	bl	8000200 <memchr>
 800b26c:	b140      	cbz	r0, 800b280 <_vfiprintf_r+0x198>
 800b26e:	2340      	movs	r3, #64	; 0x40
 800b270:	eba0 000a 	sub.w	r0, r0, sl
 800b274:	fa03 f000 	lsl.w	r0, r3, r0
 800b278:	9b04      	ldr	r3, [sp, #16]
 800b27a:	4303      	orrs	r3, r0
 800b27c:	3401      	adds	r4, #1
 800b27e:	9304      	str	r3, [sp, #16]
 800b280:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b284:	482c      	ldr	r0, [pc, #176]	; (800b338 <_vfiprintf_r+0x250>)
 800b286:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b28a:	2206      	movs	r2, #6
 800b28c:	f7f4 ffb8 	bl	8000200 <memchr>
 800b290:	2800      	cmp	r0, #0
 800b292:	d03f      	beq.n	800b314 <_vfiprintf_r+0x22c>
 800b294:	4b29      	ldr	r3, [pc, #164]	; (800b33c <_vfiprintf_r+0x254>)
 800b296:	bb1b      	cbnz	r3, 800b2e0 <_vfiprintf_r+0x1f8>
 800b298:	9b03      	ldr	r3, [sp, #12]
 800b29a:	3307      	adds	r3, #7
 800b29c:	f023 0307 	bic.w	r3, r3, #7
 800b2a0:	3308      	adds	r3, #8
 800b2a2:	9303      	str	r3, [sp, #12]
 800b2a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2a6:	443b      	add	r3, r7
 800b2a8:	9309      	str	r3, [sp, #36]	; 0x24
 800b2aa:	e767      	b.n	800b17c <_vfiprintf_r+0x94>
 800b2ac:	fb0c 3202 	mla	r2, ip, r2, r3
 800b2b0:	460c      	mov	r4, r1
 800b2b2:	2001      	movs	r0, #1
 800b2b4:	e7a5      	b.n	800b202 <_vfiprintf_r+0x11a>
 800b2b6:	2300      	movs	r3, #0
 800b2b8:	3401      	adds	r4, #1
 800b2ba:	9305      	str	r3, [sp, #20]
 800b2bc:	4619      	mov	r1, r3
 800b2be:	f04f 0c0a 	mov.w	ip, #10
 800b2c2:	4620      	mov	r0, r4
 800b2c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b2c8:	3a30      	subs	r2, #48	; 0x30
 800b2ca:	2a09      	cmp	r2, #9
 800b2cc:	d903      	bls.n	800b2d6 <_vfiprintf_r+0x1ee>
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d0c5      	beq.n	800b25e <_vfiprintf_r+0x176>
 800b2d2:	9105      	str	r1, [sp, #20]
 800b2d4:	e7c3      	b.n	800b25e <_vfiprintf_r+0x176>
 800b2d6:	fb0c 2101 	mla	r1, ip, r1, r2
 800b2da:	4604      	mov	r4, r0
 800b2dc:	2301      	movs	r3, #1
 800b2de:	e7f0      	b.n	800b2c2 <_vfiprintf_r+0x1da>
 800b2e0:	ab03      	add	r3, sp, #12
 800b2e2:	9300      	str	r3, [sp, #0]
 800b2e4:	462a      	mov	r2, r5
 800b2e6:	4b16      	ldr	r3, [pc, #88]	; (800b340 <_vfiprintf_r+0x258>)
 800b2e8:	a904      	add	r1, sp, #16
 800b2ea:	4630      	mov	r0, r6
 800b2ec:	f7fb fd9c 	bl	8006e28 <_printf_float>
 800b2f0:	4607      	mov	r7, r0
 800b2f2:	1c78      	adds	r0, r7, #1
 800b2f4:	d1d6      	bne.n	800b2a4 <_vfiprintf_r+0x1bc>
 800b2f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b2f8:	07d9      	lsls	r1, r3, #31
 800b2fa:	d405      	bmi.n	800b308 <_vfiprintf_r+0x220>
 800b2fc:	89ab      	ldrh	r3, [r5, #12]
 800b2fe:	059a      	lsls	r2, r3, #22
 800b300:	d402      	bmi.n	800b308 <_vfiprintf_r+0x220>
 800b302:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b304:	f7fe ff32 	bl	800a16c <__retarget_lock_release_recursive>
 800b308:	89ab      	ldrh	r3, [r5, #12]
 800b30a:	065b      	lsls	r3, r3, #25
 800b30c:	f53f af12 	bmi.w	800b134 <_vfiprintf_r+0x4c>
 800b310:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b312:	e711      	b.n	800b138 <_vfiprintf_r+0x50>
 800b314:	ab03      	add	r3, sp, #12
 800b316:	9300      	str	r3, [sp, #0]
 800b318:	462a      	mov	r2, r5
 800b31a:	4b09      	ldr	r3, [pc, #36]	; (800b340 <_vfiprintf_r+0x258>)
 800b31c:	a904      	add	r1, sp, #16
 800b31e:	4630      	mov	r0, r6
 800b320:	f7fc f826 	bl	8007370 <_printf_i>
 800b324:	e7e4      	b.n	800b2f0 <_vfiprintf_r+0x208>
 800b326:	bf00      	nop
 800b328:	0800b9fc 	.word	0x0800b9fc
 800b32c:	0800ba1c 	.word	0x0800ba1c
 800b330:	0800b9dc 	.word	0x0800b9dc
 800b334:	0800bc14 	.word	0x0800bc14
 800b338:	0800bc1e 	.word	0x0800bc1e
 800b33c:	08006e29 	.word	0x08006e29
 800b340:	0800b0c3 	.word	0x0800b0c3
 800b344:	0800bc1a 	.word	0x0800bc1a

0800b348 <nan>:
 800b348:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b350 <nan+0x8>
 800b34c:	4770      	bx	lr
 800b34e:	bf00      	nop
 800b350:	00000000 	.word	0x00000000
 800b354:	7ff80000 	.word	0x7ff80000

0800b358 <_sbrk_r>:
 800b358:	b538      	push	{r3, r4, r5, lr}
 800b35a:	4d06      	ldr	r5, [pc, #24]	; (800b374 <_sbrk_r+0x1c>)
 800b35c:	2300      	movs	r3, #0
 800b35e:	4604      	mov	r4, r0
 800b360:	4608      	mov	r0, r1
 800b362:	602b      	str	r3, [r5, #0]
 800b364:	f7f6 fc48 	bl	8001bf8 <_sbrk>
 800b368:	1c43      	adds	r3, r0, #1
 800b36a:	d102      	bne.n	800b372 <_sbrk_r+0x1a>
 800b36c:	682b      	ldr	r3, [r5, #0]
 800b36e:	b103      	cbz	r3, 800b372 <_sbrk_r+0x1a>
 800b370:	6023      	str	r3, [r4, #0]
 800b372:	bd38      	pop	{r3, r4, r5, pc}
 800b374:	200004e8 	.word	0x200004e8

0800b378 <__sread>:
 800b378:	b510      	push	{r4, lr}
 800b37a:	460c      	mov	r4, r1
 800b37c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b380:	f000 f93a 	bl	800b5f8 <_read_r>
 800b384:	2800      	cmp	r0, #0
 800b386:	bfab      	itete	ge
 800b388:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b38a:	89a3      	ldrhlt	r3, [r4, #12]
 800b38c:	181b      	addge	r3, r3, r0
 800b38e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b392:	bfac      	ite	ge
 800b394:	6563      	strge	r3, [r4, #84]	; 0x54
 800b396:	81a3      	strhlt	r3, [r4, #12]
 800b398:	bd10      	pop	{r4, pc}

0800b39a <__swrite>:
 800b39a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b39e:	461f      	mov	r7, r3
 800b3a0:	898b      	ldrh	r3, [r1, #12]
 800b3a2:	05db      	lsls	r3, r3, #23
 800b3a4:	4605      	mov	r5, r0
 800b3a6:	460c      	mov	r4, r1
 800b3a8:	4616      	mov	r6, r2
 800b3aa:	d505      	bpl.n	800b3b8 <__swrite+0x1e>
 800b3ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3b0:	2302      	movs	r3, #2
 800b3b2:	2200      	movs	r2, #0
 800b3b4:	f000 f8b8 	bl	800b528 <_lseek_r>
 800b3b8:	89a3      	ldrh	r3, [r4, #12]
 800b3ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b3be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b3c2:	81a3      	strh	r3, [r4, #12]
 800b3c4:	4632      	mov	r2, r6
 800b3c6:	463b      	mov	r3, r7
 800b3c8:	4628      	mov	r0, r5
 800b3ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b3ce:	f000 b837 	b.w	800b440 <_write_r>

0800b3d2 <__sseek>:
 800b3d2:	b510      	push	{r4, lr}
 800b3d4:	460c      	mov	r4, r1
 800b3d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3da:	f000 f8a5 	bl	800b528 <_lseek_r>
 800b3de:	1c43      	adds	r3, r0, #1
 800b3e0:	89a3      	ldrh	r3, [r4, #12]
 800b3e2:	bf15      	itete	ne
 800b3e4:	6560      	strne	r0, [r4, #84]	; 0x54
 800b3e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b3ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b3ee:	81a3      	strheq	r3, [r4, #12]
 800b3f0:	bf18      	it	ne
 800b3f2:	81a3      	strhne	r3, [r4, #12]
 800b3f4:	bd10      	pop	{r4, pc}

0800b3f6 <__sclose>:
 800b3f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3fa:	f000 b851 	b.w	800b4a0 <_close_r>

0800b3fe <strncmp>:
 800b3fe:	b510      	push	{r4, lr}
 800b400:	b17a      	cbz	r2, 800b422 <strncmp+0x24>
 800b402:	4603      	mov	r3, r0
 800b404:	3901      	subs	r1, #1
 800b406:	1884      	adds	r4, r0, r2
 800b408:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b40c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b410:	4290      	cmp	r0, r2
 800b412:	d101      	bne.n	800b418 <strncmp+0x1a>
 800b414:	42a3      	cmp	r3, r4
 800b416:	d101      	bne.n	800b41c <strncmp+0x1e>
 800b418:	1a80      	subs	r0, r0, r2
 800b41a:	bd10      	pop	{r4, pc}
 800b41c:	2800      	cmp	r0, #0
 800b41e:	d1f3      	bne.n	800b408 <strncmp+0xa>
 800b420:	e7fa      	b.n	800b418 <strncmp+0x1a>
 800b422:	4610      	mov	r0, r2
 800b424:	e7f9      	b.n	800b41a <strncmp+0x1c>

0800b426 <__ascii_wctomb>:
 800b426:	b149      	cbz	r1, 800b43c <__ascii_wctomb+0x16>
 800b428:	2aff      	cmp	r2, #255	; 0xff
 800b42a:	bf85      	ittet	hi
 800b42c:	238a      	movhi	r3, #138	; 0x8a
 800b42e:	6003      	strhi	r3, [r0, #0]
 800b430:	700a      	strbls	r2, [r1, #0]
 800b432:	f04f 30ff 	movhi.w	r0, #4294967295
 800b436:	bf98      	it	ls
 800b438:	2001      	movls	r0, #1
 800b43a:	4770      	bx	lr
 800b43c:	4608      	mov	r0, r1
 800b43e:	4770      	bx	lr

0800b440 <_write_r>:
 800b440:	b538      	push	{r3, r4, r5, lr}
 800b442:	4d07      	ldr	r5, [pc, #28]	; (800b460 <_write_r+0x20>)
 800b444:	4604      	mov	r4, r0
 800b446:	4608      	mov	r0, r1
 800b448:	4611      	mov	r1, r2
 800b44a:	2200      	movs	r2, #0
 800b44c:	602a      	str	r2, [r5, #0]
 800b44e:	461a      	mov	r2, r3
 800b450:	f7f6 fa1a 	bl	8001888 <_write>
 800b454:	1c43      	adds	r3, r0, #1
 800b456:	d102      	bne.n	800b45e <_write_r+0x1e>
 800b458:	682b      	ldr	r3, [r5, #0]
 800b45a:	b103      	cbz	r3, 800b45e <_write_r+0x1e>
 800b45c:	6023      	str	r3, [r4, #0]
 800b45e:	bd38      	pop	{r3, r4, r5, pc}
 800b460:	200004e8 	.word	0x200004e8

0800b464 <__assert_func>:
 800b464:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b466:	4614      	mov	r4, r2
 800b468:	461a      	mov	r2, r3
 800b46a:	4b09      	ldr	r3, [pc, #36]	; (800b490 <__assert_func+0x2c>)
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	4605      	mov	r5, r0
 800b470:	68d8      	ldr	r0, [r3, #12]
 800b472:	b14c      	cbz	r4, 800b488 <__assert_func+0x24>
 800b474:	4b07      	ldr	r3, [pc, #28]	; (800b494 <__assert_func+0x30>)
 800b476:	9100      	str	r1, [sp, #0]
 800b478:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b47c:	4906      	ldr	r1, [pc, #24]	; (800b498 <__assert_func+0x34>)
 800b47e:	462b      	mov	r3, r5
 800b480:	f000 f81e 	bl	800b4c0 <fiprintf>
 800b484:	f000 f8ca 	bl	800b61c <abort>
 800b488:	4b04      	ldr	r3, [pc, #16]	; (800b49c <__assert_func+0x38>)
 800b48a:	461c      	mov	r4, r3
 800b48c:	e7f3      	b.n	800b476 <__assert_func+0x12>
 800b48e:	bf00      	nop
 800b490:	20000078 	.word	0x20000078
 800b494:	0800bc25 	.word	0x0800bc25
 800b498:	0800bc32 	.word	0x0800bc32
 800b49c:	0800bc60 	.word	0x0800bc60

0800b4a0 <_close_r>:
 800b4a0:	b538      	push	{r3, r4, r5, lr}
 800b4a2:	4d06      	ldr	r5, [pc, #24]	; (800b4bc <_close_r+0x1c>)
 800b4a4:	2300      	movs	r3, #0
 800b4a6:	4604      	mov	r4, r0
 800b4a8:	4608      	mov	r0, r1
 800b4aa:	602b      	str	r3, [r5, #0]
 800b4ac:	f7f6 fb6f 	bl	8001b8e <_close>
 800b4b0:	1c43      	adds	r3, r0, #1
 800b4b2:	d102      	bne.n	800b4ba <_close_r+0x1a>
 800b4b4:	682b      	ldr	r3, [r5, #0]
 800b4b6:	b103      	cbz	r3, 800b4ba <_close_r+0x1a>
 800b4b8:	6023      	str	r3, [r4, #0]
 800b4ba:	bd38      	pop	{r3, r4, r5, pc}
 800b4bc:	200004e8 	.word	0x200004e8

0800b4c0 <fiprintf>:
 800b4c0:	b40e      	push	{r1, r2, r3}
 800b4c2:	b503      	push	{r0, r1, lr}
 800b4c4:	4601      	mov	r1, r0
 800b4c6:	ab03      	add	r3, sp, #12
 800b4c8:	4805      	ldr	r0, [pc, #20]	; (800b4e0 <fiprintf+0x20>)
 800b4ca:	f853 2b04 	ldr.w	r2, [r3], #4
 800b4ce:	6800      	ldr	r0, [r0, #0]
 800b4d0:	9301      	str	r3, [sp, #4]
 800b4d2:	f7ff fe09 	bl	800b0e8 <_vfiprintf_r>
 800b4d6:	b002      	add	sp, #8
 800b4d8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b4dc:	b003      	add	sp, #12
 800b4de:	4770      	bx	lr
 800b4e0:	20000078 	.word	0x20000078

0800b4e4 <_fstat_r>:
 800b4e4:	b538      	push	{r3, r4, r5, lr}
 800b4e6:	4d07      	ldr	r5, [pc, #28]	; (800b504 <_fstat_r+0x20>)
 800b4e8:	2300      	movs	r3, #0
 800b4ea:	4604      	mov	r4, r0
 800b4ec:	4608      	mov	r0, r1
 800b4ee:	4611      	mov	r1, r2
 800b4f0:	602b      	str	r3, [r5, #0]
 800b4f2:	f7f6 fb58 	bl	8001ba6 <_fstat>
 800b4f6:	1c43      	adds	r3, r0, #1
 800b4f8:	d102      	bne.n	800b500 <_fstat_r+0x1c>
 800b4fa:	682b      	ldr	r3, [r5, #0]
 800b4fc:	b103      	cbz	r3, 800b500 <_fstat_r+0x1c>
 800b4fe:	6023      	str	r3, [r4, #0]
 800b500:	bd38      	pop	{r3, r4, r5, pc}
 800b502:	bf00      	nop
 800b504:	200004e8 	.word	0x200004e8

0800b508 <_isatty_r>:
 800b508:	b538      	push	{r3, r4, r5, lr}
 800b50a:	4d06      	ldr	r5, [pc, #24]	; (800b524 <_isatty_r+0x1c>)
 800b50c:	2300      	movs	r3, #0
 800b50e:	4604      	mov	r4, r0
 800b510:	4608      	mov	r0, r1
 800b512:	602b      	str	r3, [r5, #0]
 800b514:	f7f6 fb57 	bl	8001bc6 <_isatty>
 800b518:	1c43      	adds	r3, r0, #1
 800b51a:	d102      	bne.n	800b522 <_isatty_r+0x1a>
 800b51c:	682b      	ldr	r3, [r5, #0]
 800b51e:	b103      	cbz	r3, 800b522 <_isatty_r+0x1a>
 800b520:	6023      	str	r3, [r4, #0]
 800b522:	bd38      	pop	{r3, r4, r5, pc}
 800b524:	200004e8 	.word	0x200004e8

0800b528 <_lseek_r>:
 800b528:	b538      	push	{r3, r4, r5, lr}
 800b52a:	4d07      	ldr	r5, [pc, #28]	; (800b548 <_lseek_r+0x20>)
 800b52c:	4604      	mov	r4, r0
 800b52e:	4608      	mov	r0, r1
 800b530:	4611      	mov	r1, r2
 800b532:	2200      	movs	r2, #0
 800b534:	602a      	str	r2, [r5, #0]
 800b536:	461a      	mov	r2, r3
 800b538:	f7f6 fb50 	bl	8001bdc <_lseek>
 800b53c:	1c43      	adds	r3, r0, #1
 800b53e:	d102      	bne.n	800b546 <_lseek_r+0x1e>
 800b540:	682b      	ldr	r3, [r5, #0]
 800b542:	b103      	cbz	r3, 800b546 <_lseek_r+0x1e>
 800b544:	6023      	str	r3, [r4, #0]
 800b546:	bd38      	pop	{r3, r4, r5, pc}
 800b548:	200004e8 	.word	0x200004e8

0800b54c <memmove>:
 800b54c:	4288      	cmp	r0, r1
 800b54e:	b510      	push	{r4, lr}
 800b550:	eb01 0402 	add.w	r4, r1, r2
 800b554:	d902      	bls.n	800b55c <memmove+0x10>
 800b556:	4284      	cmp	r4, r0
 800b558:	4623      	mov	r3, r4
 800b55a:	d807      	bhi.n	800b56c <memmove+0x20>
 800b55c:	1e43      	subs	r3, r0, #1
 800b55e:	42a1      	cmp	r1, r4
 800b560:	d008      	beq.n	800b574 <memmove+0x28>
 800b562:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b566:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b56a:	e7f8      	b.n	800b55e <memmove+0x12>
 800b56c:	4402      	add	r2, r0
 800b56e:	4601      	mov	r1, r0
 800b570:	428a      	cmp	r2, r1
 800b572:	d100      	bne.n	800b576 <memmove+0x2a>
 800b574:	bd10      	pop	{r4, pc}
 800b576:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b57a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b57e:	e7f7      	b.n	800b570 <memmove+0x24>

0800b580 <__malloc_lock>:
 800b580:	4801      	ldr	r0, [pc, #4]	; (800b588 <__malloc_lock+0x8>)
 800b582:	f7fe bdf2 	b.w	800a16a <__retarget_lock_acquire_recursive>
 800b586:	bf00      	nop
 800b588:	200004dc 	.word	0x200004dc

0800b58c <__malloc_unlock>:
 800b58c:	4801      	ldr	r0, [pc, #4]	; (800b594 <__malloc_unlock+0x8>)
 800b58e:	f7fe bded 	b.w	800a16c <__retarget_lock_release_recursive>
 800b592:	bf00      	nop
 800b594:	200004dc 	.word	0x200004dc

0800b598 <_realloc_r>:
 800b598:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b59c:	4680      	mov	r8, r0
 800b59e:	4614      	mov	r4, r2
 800b5a0:	460e      	mov	r6, r1
 800b5a2:	b921      	cbnz	r1, 800b5ae <_realloc_r+0x16>
 800b5a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b5a8:	4611      	mov	r1, r2
 800b5aa:	f7ff bba3 	b.w	800acf4 <_malloc_r>
 800b5ae:	b92a      	cbnz	r2, 800b5bc <_realloc_r+0x24>
 800b5b0:	f7ff fb34 	bl	800ac1c <_free_r>
 800b5b4:	4625      	mov	r5, r4
 800b5b6:	4628      	mov	r0, r5
 800b5b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5bc:	f000 f835 	bl	800b62a <_malloc_usable_size_r>
 800b5c0:	4284      	cmp	r4, r0
 800b5c2:	4607      	mov	r7, r0
 800b5c4:	d802      	bhi.n	800b5cc <_realloc_r+0x34>
 800b5c6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b5ca:	d812      	bhi.n	800b5f2 <_realloc_r+0x5a>
 800b5cc:	4621      	mov	r1, r4
 800b5ce:	4640      	mov	r0, r8
 800b5d0:	f7ff fb90 	bl	800acf4 <_malloc_r>
 800b5d4:	4605      	mov	r5, r0
 800b5d6:	2800      	cmp	r0, #0
 800b5d8:	d0ed      	beq.n	800b5b6 <_realloc_r+0x1e>
 800b5da:	42bc      	cmp	r4, r7
 800b5dc:	4622      	mov	r2, r4
 800b5de:	4631      	mov	r1, r6
 800b5e0:	bf28      	it	cs
 800b5e2:	463a      	movcs	r2, r7
 800b5e4:	f7fb fb6a 	bl	8006cbc <memcpy>
 800b5e8:	4631      	mov	r1, r6
 800b5ea:	4640      	mov	r0, r8
 800b5ec:	f7ff fb16 	bl	800ac1c <_free_r>
 800b5f0:	e7e1      	b.n	800b5b6 <_realloc_r+0x1e>
 800b5f2:	4635      	mov	r5, r6
 800b5f4:	e7df      	b.n	800b5b6 <_realloc_r+0x1e>
	...

0800b5f8 <_read_r>:
 800b5f8:	b538      	push	{r3, r4, r5, lr}
 800b5fa:	4d07      	ldr	r5, [pc, #28]	; (800b618 <_read_r+0x20>)
 800b5fc:	4604      	mov	r4, r0
 800b5fe:	4608      	mov	r0, r1
 800b600:	4611      	mov	r1, r2
 800b602:	2200      	movs	r2, #0
 800b604:	602a      	str	r2, [r5, #0]
 800b606:	461a      	mov	r2, r3
 800b608:	f7f6 faa4 	bl	8001b54 <_read>
 800b60c:	1c43      	adds	r3, r0, #1
 800b60e:	d102      	bne.n	800b616 <_read_r+0x1e>
 800b610:	682b      	ldr	r3, [r5, #0]
 800b612:	b103      	cbz	r3, 800b616 <_read_r+0x1e>
 800b614:	6023      	str	r3, [r4, #0]
 800b616:	bd38      	pop	{r3, r4, r5, pc}
 800b618:	200004e8 	.word	0x200004e8

0800b61c <abort>:
 800b61c:	b508      	push	{r3, lr}
 800b61e:	2006      	movs	r0, #6
 800b620:	f000 f834 	bl	800b68c <raise>
 800b624:	2001      	movs	r0, #1
 800b626:	f7f6 fa8b 	bl	8001b40 <_exit>

0800b62a <_malloc_usable_size_r>:
 800b62a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b62e:	1f18      	subs	r0, r3, #4
 800b630:	2b00      	cmp	r3, #0
 800b632:	bfbc      	itt	lt
 800b634:	580b      	ldrlt	r3, [r1, r0]
 800b636:	18c0      	addlt	r0, r0, r3
 800b638:	4770      	bx	lr

0800b63a <_raise_r>:
 800b63a:	291f      	cmp	r1, #31
 800b63c:	b538      	push	{r3, r4, r5, lr}
 800b63e:	4604      	mov	r4, r0
 800b640:	460d      	mov	r5, r1
 800b642:	d904      	bls.n	800b64e <_raise_r+0x14>
 800b644:	2316      	movs	r3, #22
 800b646:	6003      	str	r3, [r0, #0]
 800b648:	f04f 30ff 	mov.w	r0, #4294967295
 800b64c:	bd38      	pop	{r3, r4, r5, pc}
 800b64e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b650:	b112      	cbz	r2, 800b658 <_raise_r+0x1e>
 800b652:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b656:	b94b      	cbnz	r3, 800b66c <_raise_r+0x32>
 800b658:	4620      	mov	r0, r4
 800b65a:	f000 f831 	bl	800b6c0 <_getpid_r>
 800b65e:	462a      	mov	r2, r5
 800b660:	4601      	mov	r1, r0
 800b662:	4620      	mov	r0, r4
 800b664:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b668:	f000 b818 	b.w	800b69c <_kill_r>
 800b66c:	2b01      	cmp	r3, #1
 800b66e:	d00a      	beq.n	800b686 <_raise_r+0x4c>
 800b670:	1c59      	adds	r1, r3, #1
 800b672:	d103      	bne.n	800b67c <_raise_r+0x42>
 800b674:	2316      	movs	r3, #22
 800b676:	6003      	str	r3, [r0, #0]
 800b678:	2001      	movs	r0, #1
 800b67a:	e7e7      	b.n	800b64c <_raise_r+0x12>
 800b67c:	2400      	movs	r4, #0
 800b67e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b682:	4628      	mov	r0, r5
 800b684:	4798      	blx	r3
 800b686:	2000      	movs	r0, #0
 800b688:	e7e0      	b.n	800b64c <_raise_r+0x12>
	...

0800b68c <raise>:
 800b68c:	4b02      	ldr	r3, [pc, #8]	; (800b698 <raise+0xc>)
 800b68e:	4601      	mov	r1, r0
 800b690:	6818      	ldr	r0, [r3, #0]
 800b692:	f7ff bfd2 	b.w	800b63a <_raise_r>
 800b696:	bf00      	nop
 800b698:	20000078 	.word	0x20000078

0800b69c <_kill_r>:
 800b69c:	b538      	push	{r3, r4, r5, lr}
 800b69e:	4d07      	ldr	r5, [pc, #28]	; (800b6bc <_kill_r+0x20>)
 800b6a0:	2300      	movs	r3, #0
 800b6a2:	4604      	mov	r4, r0
 800b6a4:	4608      	mov	r0, r1
 800b6a6:	4611      	mov	r1, r2
 800b6a8:	602b      	str	r3, [r5, #0]
 800b6aa:	f7f6 fa39 	bl	8001b20 <_kill>
 800b6ae:	1c43      	adds	r3, r0, #1
 800b6b0:	d102      	bne.n	800b6b8 <_kill_r+0x1c>
 800b6b2:	682b      	ldr	r3, [r5, #0]
 800b6b4:	b103      	cbz	r3, 800b6b8 <_kill_r+0x1c>
 800b6b6:	6023      	str	r3, [r4, #0]
 800b6b8:	bd38      	pop	{r3, r4, r5, pc}
 800b6ba:	bf00      	nop
 800b6bc:	200004e8 	.word	0x200004e8

0800b6c0 <_getpid_r>:
 800b6c0:	f7f6 ba26 	b.w	8001b10 <_getpid>

0800b6c4 <_init>:
 800b6c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6c6:	bf00      	nop
 800b6c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b6ca:	bc08      	pop	{r3}
 800b6cc:	469e      	mov	lr, r3
 800b6ce:	4770      	bx	lr

0800b6d0 <_fini>:
 800b6d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6d2:	bf00      	nop
 800b6d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b6d6:	bc08      	pop	{r3}
 800b6d8:	469e      	mov	lr, r3
 800b6da:	4770      	bx	lr
