
IMU_HW_579.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f64  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  08007114  08007114  00017114  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800726c  0800726c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800726c  0800726c  0001726c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007274  08007274  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007274  08007274  00017274  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007278  08007278  00017278  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800727c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000001e4  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000254  20000254  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f6f2  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000026b4  00000000  00000000  0002f792  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c20  00000000  00000000  00031e48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000b20  00000000  00000000  00032a68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000036f5  00000000  00000000  00033588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010a04  00000000  00000000  00036c7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d6a07  00000000  00000000  00047681  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0011e088  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003830  00000000  00000000  0011e0d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080070fc 	.word	0x080070fc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	080070fc 	.word	0x080070fc

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <getI2C_Address>:
HW579 hw579;
SENSOR_ENUM sensor_enum;


uint8_t* getI2C_Address(I2C_HandleTypeDef *hi2c)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b084      	sub	sp, #16
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef state;
	uint8_t slave_address;
	uint8_t numSensors = 0;
 800059c:	2300      	movs	r3, #0
 800059e:	73bb      	strb	r3, [r7, #14]
	static uint8_t sensors[3] = {0, };

	for(slave_address = 1; slave_address < 128; slave_address++)
 80005a0:	2301      	movs	r3, #1
 80005a2:	73fb      	strb	r3, [r7, #15]
 80005a4:	e024      	b.n	80005f0 <getI2C_Address+0x5c>
	{
		state = HAL_I2C_IsDeviceReady(hi2c, (uint16_t)(slave_address << 1), 3, 10);
 80005a6:	7bfb      	ldrb	r3, [r7, #15]
 80005a8:	b29b      	uxth	r3, r3
 80005aa:	005b      	lsls	r3, r3, #1
 80005ac:	b299      	uxth	r1, r3
 80005ae:	230a      	movs	r3, #10
 80005b0:	2203      	movs	r2, #3
 80005b2:	6878      	ldr	r0, [r7, #4]
 80005b4:	f001 fe88 	bl	80022c8 <HAL_I2C_IsDeviceReady>
 80005b8:	4603      	mov	r3, r0
 80005ba:	737b      	strb	r3, [r7, #13]
	    if (state == HAL_OK)
 80005bc:	7b7b      	ldrb	r3, [r7, #13]
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d10c      	bne.n	80005dc <getI2C_Address+0x48>
		{
		  sensors[numSensors] = slave_address;
 80005c2:	7bbb      	ldrb	r3, [r7, #14]
 80005c4:	4925      	ldr	r1, [pc, #148]	; (800065c <getI2C_Address+0xc8>)
 80005c6:	7bfa      	ldrb	r2, [r7, #15]
 80005c8:	54ca      	strb	r2, [r1, r3]
		  numSensors++;
 80005ca:	7bbb      	ldrb	r3, [r7, #14]
 80005cc:	3301      	adds	r3, #1
 80005ce:	73bb      	strb	r3, [r7, #14]

#ifdef DEBUG_PRINT
		  printf("Address : 0x%X\r\n", slave_address);	// !HAL_OK = 1
 80005d0:	7bfb      	ldrb	r3, [r7, #15]
 80005d2:	4619      	mov	r1, r3
 80005d4:	4822      	ldr	r0, [pc, #136]	; (8000660 <getI2C_Address+0xcc>)
 80005d6:	f005 fd8d 	bl	80060f4 <iprintf>
 80005da:	e006      	b.n	80005ea <getI2C_Address+0x56>
#endif
	    }
	    else
	    {
		  while(HAL_I2C_GetState(hi2c) != HAL_I2C_STATE_READY);
 80005dc:	bf00      	nop
 80005de:	6878      	ldr	r0, [r7, #4]
 80005e0:	f002 fa20 	bl	8002a24 <HAL_I2C_GetState>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b20      	cmp	r3, #32
 80005e8:	d1f9      	bne.n	80005de <getI2C_Address+0x4a>
	for(slave_address = 1; slave_address < 128; slave_address++)
 80005ea:	7bfb      	ldrb	r3, [r7, #15]
 80005ec:	3301      	adds	r3, #1
 80005ee:	73fb      	strb	r3, [r7, #15]
 80005f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	dad6      	bge.n	80005a6 <getI2C_Address+0x12>
	}

//	hw579.magneto_address = sensors[0] << 1;
//	hw579.accel_address   = sensors[1] << 1;
//	hw579.gyro_address    = sensors[2] << 1;
	hw579.MAGNETO->magneto_address = sensors[0] << 1;
 80005f8:	4b18      	ldr	r3, [pc, #96]	; (800065c <getI2C_Address+0xc8>)
 80005fa:	781a      	ldrb	r2, [r3, #0]
 80005fc:	4b19      	ldr	r3, [pc, #100]	; (8000664 <getI2C_Address+0xd0>)
 80005fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000600:	0052      	lsls	r2, r2, #1
 8000602:	b2d2      	uxtb	r2, r2
 8000604:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	hw579.ACCEL->accel_address	   = sensors[1] << 1;
 8000608:	4b14      	ldr	r3, [pc, #80]	; (800065c <getI2C_Address+0xc8>)
 800060a:	785a      	ldrb	r2, [r3, #1]
 800060c:	4b15      	ldr	r3, [pc, #84]	; (8000664 <getI2C_Address+0xd0>)
 800060e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000610:	0052      	lsls	r2, r2, #1
 8000612:	b2d2      	uxtb	r2, r2
 8000614:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	hw579.GYRO->gyro_address   	   = sensors[2] << 1;
 8000618:	4b10      	ldr	r3, [pc, #64]	; (800065c <getI2C_Address+0xc8>)
 800061a:	789a      	ldrb	r2, [r3, #2]
 800061c:	4b11      	ldr	r3, [pc, #68]	; (8000664 <getI2C_Address+0xd0>)
 800061e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000620:	0052      	lsls	r2, r2, #1
 8000622:	b2d2      	uxtb	r2, r2
 8000624:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54


#ifdef DEBUG_PRINT
	printf("MAGNETO : 0x%X\r\n", sensors[0] << 1);
 8000628:	4b0c      	ldr	r3, [pc, #48]	; (800065c <getI2C_Address+0xc8>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	005b      	lsls	r3, r3, #1
 800062e:	4619      	mov	r1, r3
 8000630:	480d      	ldr	r0, [pc, #52]	; (8000668 <getI2C_Address+0xd4>)
 8000632:	f005 fd5f 	bl	80060f4 <iprintf>
	printf("ACCEL   : 0x%X\r\n", sensors[1] << 1);
 8000636:	4b09      	ldr	r3, [pc, #36]	; (800065c <getI2C_Address+0xc8>)
 8000638:	785b      	ldrb	r3, [r3, #1]
 800063a:	005b      	lsls	r3, r3, #1
 800063c:	4619      	mov	r1, r3
 800063e:	480b      	ldr	r0, [pc, #44]	; (800066c <getI2C_Address+0xd8>)
 8000640:	f005 fd58 	bl	80060f4 <iprintf>
	printf("GYRO    : 0x%X\r\n", sensors[2] << 1);
 8000644:	4b05      	ldr	r3, [pc, #20]	; (800065c <getI2C_Address+0xc8>)
 8000646:	789b      	ldrb	r3, [r3, #2]
 8000648:	005b      	lsls	r3, r3, #1
 800064a:	4619      	mov	r1, r3
 800064c:	4808      	ldr	r0, [pc, #32]	; (8000670 <getI2C_Address+0xdc>)
 800064e:	f005 fd51 	bl	80060f4 <iprintf>
#endif

	return sensors;
 8000652:	4b02      	ldr	r3, [pc, #8]	; (800065c <getI2C_Address+0xc8>)
}
 8000654:	4618      	mov	r0, r3
 8000656:	3710      	adds	r7, #16
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	200000f0 	.word	0x200000f0
 8000660:	08007114 	.word	0x08007114
 8000664:	2000008c 	.word	0x2000008c
 8000668:	08007128 	.word	0x08007128
 800066c:	0800713c 	.word	0x0800713c
 8000670:	08007150 	.word	0x08007150

08000674 <I2C_Writebyte>:

void I2C_Writebyte(void * SENSOR, uint8_t register_address, uint8_t data, uint8_t TYPE)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b086      	sub	sp, #24
 8000678:	af02      	add	r7, sp, #8
 800067a:	6078      	str	r0, [r7, #4]
 800067c:	4608      	mov	r0, r1
 800067e:	4611      	mov	r1, r2
 8000680:	461a      	mov	r2, r3
 8000682:	4603      	mov	r3, r0
 8000684:	70fb      	strb	r3, [r7, #3]
 8000686:	460b      	mov	r3, r1
 8000688:	70bb      	strb	r3, [r7, #2]
 800068a:	4613      	mov	r3, r2
 800068c:	707b      	strb	r3, [r7, #1]
	uint8_t Trans[2] = {register_address, data};
 800068e:	78fb      	ldrb	r3, [r7, #3]
 8000690:	733b      	strb	r3, [r7, #12]
 8000692:	78bb      	ldrb	r3, [r7, #2]
 8000694:	737b      	strb	r3, [r7, #13]

	switch(TYPE)
 8000696:	787b      	ldrb	r3, [r7, #1]
 8000698:	2b02      	cmp	r3, #2
 800069a:	d021      	beq.n	80006e0 <I2C_Writebyte+0x6c>
 800069c:	2b02      	cmp	r3, #2
 800069e:	dc2c      	bgt.n	80006fa <I2C_Writebyte+0x86>
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d002      	beq.n	80006aa <I2C_Writebyte+0x36>
 80006a4:	2b01      	cmp	r3, #1
 80006a6:	d00d      	beq.n	80006c4 <I2C_Writebyte+0x50>
 80006a8:	e027      	b.n	80006fa <I2C_Writebyte+0x86>
	{
		case magneto:
			HAL_I2C_Master_Transmit(&(((HMC5883L *)SENSOR)->i2c), ((HMC5883L *)SENSOR)->magneto_address, Trans, 2, 10);
 80006aa:	6878      	ldr	r0, [r7, #4]
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80006b2:	b299      	uxth	r1, r3
 80006b4:	f107 020c 	add.w	r2, r7, #12
 80006b8:	230a      	movs	r3, #10
 80006ba:	9300      	str	r3, [sp, #0]
 80006bc:	2302      	movs	r3, #2
 80006be:	f001 fadf 	bl	8001c80 <HAL_I2C_Master_Transmit>
			break;
 80006c2:	e01e      	b.n	8000702 <I2C_Writebyte+0x8e>

		case accel:
			HAL_I2C_Master_Transmit(&(((ADXL345 *)SENSOR)->i2c), hw579.ACCEL->accel_address, Trans, 2, 10);
 80006c4:	6878      	ldr	r0, [r7, #4]
 80006c6:	4b11      	ldr	r3, [pc, #68]	; (800070c <I2C_Writebyte+0x98>)
 80006c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006ca:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80006ce:	b299      	uxth	r1, r3
 80006d0:	f107 020c 	add.w	r2, r7, #12
 80006d4:	230a      	movs	r3, #10
 80006d6:	9300      	str	r3, [sp, #0]
 80006d8:	2302      	movs	r3, #2
 80006da:	f001 fad1 	bl	8001c80 <HAL_I2C_Master_Transmit>
			break;
 80006de:	e010      	b.n	8000702 <I2C_Writebyte+0x8e>

		case gyro:
			HAL_I2C_Master_Transmit(&(((ITG3205 *)SENSOR)->i2c), ((ITG3205 *)SENSOR)->gyro_address, Trans, 2, 10);
 80006e0:	6878      	ldr	r0, [r7, #4]
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80006e8:	b299      	uxth	r1, r3
 80006ea:	f107 020c 	add.w	r2, r7, #12
 80006ee:	230a      	movs	r3, #10
 80006f0:	9300      	str	r3, [sp, #0]
 80006f2:	2302      	movs	r3, #2
 80006f4:	f001 fac4 	bl	8001c80 <HAL_I2C_Master_Transmit>
			break;
 80006f8:	e003      	b.n	8000702 <I2C_Writebyte+0x8e>

		default:
			printf("Wrong TYPE");
 80006fa:	4805      	ldr	r0, [pc, #20]	; (8000710 <I2C_Writebyte+0x9c>)
 80006fc:	f005 fcfa 	bl	80060f4 <iprintf>
			break;
 8000700:	bf00      	nop
	}


}
 8000702:	bf00      	nop
 8000704:	3710      	adds	r7, #16
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	2000008c 	.word	0x2000008c
 8000710:	08007164 	.word	0x08007164

08000714 <HW579_init>:




void HW579_init(I2C_HandleTypeDef *hi2c)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
	hw579.i2c = *hi2c;
 800071c:	4a08      	ldr	r2, [pc, #32]	; (8000740 <HW579_init+0x2c>)
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	4610      	mov	r0, r2
 8000722:	4619      	mov	r1, r3
 8000724:	2354      	movs	r3, #84	; 0x54
 8000726:	461a      	mov	r2, r3
 8000728:	f005 fcce 	bl	80060c8 <memcpy>
	Gyro_init(hw579.GYRO);
 800072c:	4b04      	ldr	r3, [pc, #16]	; (8000740 <HW579_init+0x2c>)
 800072e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000730:	4618      	mov	r0, r3
 8000732:	f000 f813 	bl	800075c <Gyro_init>
}
 8000736:	bf00      	nop
 8000738:	3708      	adds	r7, #8
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	2000008c 	.word	0x2000008c

08000744 <HW579_Read>:

void HW579_Read(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
	Gyro_Read(hw579.GYRO);
 8000748:	4b03      	ldr	r3, [pc, #12]	; (8000758 <HW579_Read+0x14>)
 800074a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800074c:	4618      	mov	r0, r3
 800074e:	f000 f83d 	bl	80007cc <Gyro_Read>
}
 8000752:	bf00      	nop
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	2000008c 	.word	0x2000008c

0800075c <Gyro_init>:
	return Receive[0];
}


void Gyro_init(ITG3205 *GYRO)	// struct -> i2c
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
//	Gyro_Writebyte(I2C, DLPF_FS, RANGE2000);
//	Gyro_Writebyte(I2C, DLPF_FS, BW256_SR8);
//	Gyro_Writebyte(I2C, INT_CFG, INTCFG_ITG_RDY_EN);
//	Gyro_Writebyte(I2C, INT_CFG, INTCFG_RAW_RDY_EN);

	I2C_Writebyte(GYRO, PWR_MGM, 0x00, magneto);
 8000764:	2300      	movs	r3, #0
 8000766:	2200      	movs	r2, #0
 8000768:	213e      	movs	r1, #62	; 0x3e
 800076a:	6878      	ldr	r0, [r7, #4]
 800076c:	f7ff ff82 	bl	8000674 <I2C_Writebyte>
	HAL_Delay(100);
 8000770:	2064      	movs	r0, #100	; 0x64
 8000772:	f000 fda5 	bl	80012c0 <HAL_Delay>
	I2C_Writebyte(GYRO, PWR_MGM, PLL_XGYRO_REF, magneto);
 8000776:	2300      	movs	r3, #0
 8000778:	2201      	movs	r2, #1
 800077a:	213e      	movs	r1, #62	; 0x3e
 800077c:	6878      	ldr	r0, [r7, #4]
 800077e:	f7ff ff79 	bl	8000674 <I2C_Writebyte>
	I2C_Writebyte(GYRO, SMPLRT_DIV, NOSRDIVIDER, magneto);
 8000782:	2300      	movs	r3, #0
 8000784:	2200      	movs	r2, #0
 8000786:	2115      	movs	r1, #21
 8000788:	6878      	ldr	r0, [r7, #4]
 800078a:	f7ff ff73 	bl	8000674 <I2C_Writebyte>
	I2C_Writebyte(GYRO, DLPF_FS, RANGE2000, magneto);
 800078e:	2300      	movs	r3, #0
 8000790:	2203      	movs	r2, #3
 8000792:	2116      	movs	r1, #22
 8000794:	6878      	ldr	r0, [r7, #4]
 8000796:	f7ff ff6d 	bl	8000674 <I2C_Writebyte>
	I2C_Writebyte(GYRO, DLPF_FS, BW256_SR8, magneto);
 800079a:	2300      	movs	r3, #0
 800079c:	2200      	movs	r2, #0
 800079e:	2116      	movs	r1, #22
 80007a0:	6878      	ldr	r0, [r7, #4]
 80007a2:	f7ff ff67 	bl	8000674 <I2C_Writebyte>
	I2C_Writebyte(GYRO, INT_CFG, INTCFG_ITG_RDY_EN, magneto);
 80007a6:	2300      	movs	r3, #0
 80007a8:	2204      	movs	r2, #4
 80007aa:	2117      	movs	r1, #23
 80007ac:	6878      	ldr	r0, [r7, #4]
 80007ae:	f7ff ff61 	bl	8000674 <I2C_Writebyte>
	I2C_Writebyte(GYRO, INT_CFG, INTCFG_RAW_RDY_EN, magneto);
 80007b2:	2300      	movs	r3, #0
 80007b4:	2201      	movs	r2, #1
 80007b6:	2117      	movs	r1, #23
 80007b8:	6878      	ldr	r0, [r7, #4]
 80007ba:	f7ff ff5b 	bl	8000674 <I2C_Writebyte>

	HAL_Delay(GYROSTART_UP_DELAY);
 80007be:	2046      	movs	r0, #70	; 0x46
 80007c0:	f000 fd7e 	bl	80012c0 <HAL_Delay>
}
 80007c4:	bf00      	nop
 80007c6:	3708      	adds	r7, #8
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}

080007cc <Gyro_Read>:

void Gyro_Read()
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b08a      	sub	sp, #40	; 0x28
 80007d0:	af04      	add	r7, sp, #16
	uint8_t databuf[8];
	int16_t tempature, raw_x, raw_y, raw_z;
	HAL_I2C_Mem_Read(&(GYRO.i2c), GYRO.gyro_address , TEMP_OUT, I2C_MEMADD_SIZE_8BIT, databuf, sizeof(databuf), 10);
 80007d2:	4b26      	ldr	r3, [pc, #152]	; (800086c <Gyro_Read+0xa0>)
 80007d4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80007d8:	b299      	uxth	r1, r3
 80007da:	230a      	movs	r3, #10
 80007dc:	9302      	str	r3, [sp, #8]
 80007de:	2308      	movs	r3, #8
 80007e0:	9301      	str	r3, [sp, #4]
 80007e2:	1d3b      	adds	r3, r7, #4
 80007e4:	9300      	str	r3, [sp, #0]
 80007e6:	2301      	movs	r3, #1
 80007e8:	221b      	movs	r2, #27
 80007ea:	4820      	ldr	r0, [pc, #128]	; (800086c <Gyro_Read+0xa0>)
 80007ec:	f001 fb46 	bl	8001e7c <HAL_I2C_Mem_Read>
	tempature = (databuf[0] << 8) | databuf[1];
 80007f0:	793b      	ldrb	r3, [r7, #4]
 80007f2:	021b      	lsls	r3, r3, #8
 80007f4:	b21a      	sxth	r2, r3
 80007f6:	797b      	ldrb	r3, [r7, #5]
 80007f8:	b21b      	sxth	r3, r3
 80007fa:	4313      	orrs	r3, r2
 80007fc:	827b      	strh	r3, [r7, #18]
	raw_x = (databuf[2] << 8) | databuf[3];
 80007fe:	79bb      	ldrb	r3, [r7, #6]
 8000800:	021b      	lsls	r3, r3, #8
 8000802:	b21a      	sxth	r2, r3
 8000804:	79fb      	ldrb	r3, [r7, #7]
 8000806:	b21b      	sxth	r3, r3
 8000808:	4313      	orrs	r3, r2
 800080a:	823b      	strh	r3, [r7, #16]
	raw_y = (databuf[4] << 8) | databuf[5];
 800080c:	7a3b      	ldrb	r3, [r7, #8]
 800080e:	021b      	lsls	r3, r3, #8
 8000810:	b21a      	sxth	r2, r3
 8000812:	7a7b      	ldrb	r3, [r7, #9]
 8000814:	b21b      	sxth	r3, r3
 8000816:	4313      	orrs	r3, r2
 8000818:	81fb      	strh	r3, [r7, #14]
	raw_z = (databuf[6] << 8) | databuf[7];
 800081a:	7abb      	ldrb	r3, [r7, #10]
 800081c:	021b      	lsls	r3, r3, #8
 800081e:	b21a      	sxth	r2, r3
 8000820:	7afb      	ldrb	r3, [r7, #11]
 8000822:	b21b      	sxth	r3, r3
 8000824:	4313      	orrs	r3, r2
 8000826:	81bb      	strh	r3, [r7, #12]

	for(int i=0; i < 6; i++)
 8000828:	2300      	movs	r3, #0
 800082a:	617b      	str	r3, [r7, #20]
 800082c:	e00a      	b.n	8000844 <Gyro_Read+0x78>
	{
		printf("%u\r\n", databuf[i]);
 800082e:	1d3a      	adds	r2, r7, #4
 8000830:	697b      	ldr	r3, [r7, #20]
 8000832:	4413      	add	r3, r2
 8000834:	781b      	ldrb	r3, [r3, #0]
 8000836:	4619      	mov	r1, r3
 8000838:	480d      	ldr	r0, [pc, #52]	; (8000870 <Gyro_Read+0xa4>)
 800083a:	f005 fc5b 	bl	80060f4 <iprintf>
	for(int i=0; i < 6; i++)
 800083e:	697b      	ldr	r3, [r7, #20]
 8000840:	3301      	adds	r3, #1
 8000842:	617b      	str	r3, [r7, #20]
 8000844:	697b      	ldr	r3, [r7, #20]
 8000846:	2b05      	cmp	r3, #5
 8000848:	ddf1      	ble.n	800082e <Gyro_Read+0x62>
	}

	printf("%d %u %u %u\r\n", tempature, raw_x, raw_y, raw_z);
 800084a:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 800084e:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8000852:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8000856:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800085a:	9300      	str	r3, [sp, #0]
 800085c:	4603      	mov	r3, r0
 800085e:	4805      	ldr	r0, [pc, #20]	; (8000874 <Gyro_Read+0xa8>)
 8000860:	f005 fc48 	bl	80060f4 <iprintf>
}
 8000864:	bf00      	nop
 8000866:	3718      	adds	r7, #24
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	200000f4 	.word	0x200000f4
 8000870:	08007170 	.word	0x08007170
 8000874:	08007178 	.word	0x08007178

08000878 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b08c      	sub	sp, #48	; 0x30
 800087c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800087e:	f107 031c 	add.w	r3, r7, #28
 8000882:	2200      	movs	r2, #0
 8000884:	601a      	str	r2, [r3, #0]
 8000886:	605a      	str	r2, [r3, #4]
 8000888:	609a      	str	r2, [r3, #8]
 800088a:	60da      	str	r2, [r3, #12]
 800088c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800088e:	2300      	movs	r3, #0
 8000890:	61bb      	str	r3, [r7, #24]
 8000892:	4b7c      	ldr	r3, [pc, #496]	; (8000a84 <MX_GPIO_Init+0x20c>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	4a7b      	ldr	r2, [pc, #492]	; (8000a84 <MX_GPIO_Init+0x20c>)
 8000898:	f043 0304 	orr.w	r3, r3, #4
 800089c:	6313      	str	r3, [r2, #48]	; 0x30
 800089e:	4b79      	ldr	r3, [pc, #484]	; (8000a84 <MX_GPIO_Init+0x20c>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	f003 0304 	and.w	r3, r3, #4
 80008a6:	61bb      	str	r3, [r7, #24]
 80008a8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008aa:	2300      	movs	r3, #0
 80008ac:	617b      	str	r3, [r7, #20]
 80008ae:	4b75      	ldr	r3, [pc, #468]	; (8000a84 <MX_GPIO_Init+0x20c>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	4a74      	ldr	r2, [pc, #464]	; (8000a84 <MX_GPIO_Init+0x20c>)
 80008b4:	f043 0320 	orr.w	r3, r3, #32
 80008b8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ba:	4b72      	ldr	r3, [pc, #456]	; (8000a84 <MX_GPIO_Init+0x20c>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	f003 0320 	and.w	r3, r3, #32
 80008c2:	617b      	str	r3, [r7, #20]
 80008c4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008c6:	2300      	movs	r3, #0
 80008c8:	613b      	str	r3, [r7, #16]
 80008ca:	4b6e      	ldr	r3, [pc, #440]	; (8000a84 <MX_GPIO_Init+0x20c>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	4a6d      	ldr	r2, [pc, #436]	; (8000a84 <MX_GPIO_Init+0x20c>)
 80008d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008d4:	6313      	str	r3, [r2, #48]	; 0x30
 80008d6:	4b6b      	ldr	r3, [pc, #428]	; (8000a84 <MX_GPIO_Init+0x20c>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008de:	613b      	str	r3, [r7, #16]
 80008e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e2:	2300      	movs	r3, #0
 80008e4:	60fb      	str	r3, [r7, #12]
 80008e6:	4b67      	ldr	r3, [pc, #412]	; (8000a84 <MX_GPIO_Init+0x20c>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	4a66      	ldr	r2, [pc, #408]	; (8000a84 <MX_GPIO_Init+0x20c>)
 80008ec:	f043 0301 	orr.w	r3, r3, #1
 80008f0:	6313      	str	r3, [r2, #48]	; 0x30
 80008f2:	4b64      	ldr	r3, [pc, #400]	; (8000a84 <MX_GPIO_Init+0x20c>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	f003 0301 	and.w	r3, r3, #1
 80008fa:	60fb      	str	r3, [r7, #12]
 80008fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008fe:	2300      	movs	r3, #0
 8000900:	60bb      	str	r3, [r7, #8]
 8000902:	4b60      	ldr	r3, [pc, #384]	; (8000a84 <MX_GPIO_Init+0x20c>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	4a5f      	ldr	r2, [pc, #380]	; (8000a84 <MX_GPIO_Init+0x20c>)
 8000908:	f043 0302 	orr.w	r3, r3, #2
 800090c:	6313      	str	r3, [r2, #48]	; 0x30
 800090e:	4b5d      	ldr	r3, [pc, #372]	; (8000a84 <MX_GPIO_Init+0x20c>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	f003 0302 	and.w	r3, r3, #2
 8000916:	60bb      	str	r3, [r7, #8]
 8000918:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	607b      	str	r3, [r7, #4]
 800091e:	4b59      	ldr	r3, [pc, #356]	; (8000a84 <MX_GPIO_Init+0x20c>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	4a58      	ldr	r2, [pc, #352]	; (8000a84 <MX_GPIO_Init+0x20c>)
 8000924:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000928:	6313      	str	r3, [r2, #48]	; 0x30
 800092a:	4b56      	ldr	r3, [pc, #344]	; (8000a84 <MX_GPIO_Init+0x20c>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000932:	607b      	str	r3, [r7, #4]
 8000934:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000936:	2200      	movs	r2, #0
 8000938:	f244 0181 	movw	r1, #16513	; 0x4081
 800093c:	4852      	ldr	r0, [pc, #328]	; (8000a88 <MX_GPIO_Init+0x210>)
 800093e:	f001 f841 	bl	80019c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000942:	2200      	movs	r2, #0
 8000944:	2140      	movs	r1, #64	; 0x40
 8000946:	4851      	ldr	r0, [pc, #324]	; (8000a8c <MX_GPIO_Init+0x214>)
 8000948:	f001 f83c 	bl	80019c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800094c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000950:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000952:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000956:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000958:	2300      	movs	r3, #0
 800095a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800095c:	f107 031c 	add.w	r3, r7, #28
 8000960:	4619      	mov	r1, r3
 8000962:	484b      	ldr	r0, [pc, #300]	; (8000a90 <MX_GPIO_Init+0x218>)
 8000964:	f000 fe82 	bl	800166c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000968:	2332      	movs	r3, #50	; 0x32
 800096a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800096c:	2302      	movs	r3, #2
 800096e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000970:	2300      	movs	r3, #0
 8000972:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000974:	2303      	movs	r3, #3
 8000976:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000978:	230b      	movs	r3, #11
 800097a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800097c:	f107 031c 	add.w	r3, r7, #28
 8000980:	4619      	mov	r1, r3
 8000982:	4843      	ldr	r0, [pc, #268]	; (8000a90 <MX_GPIO_Init+0x218>)
 8000984:	f000 fe72 	bl	800166c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000988:	2386      	movs	r3, #134	; 0x86
 800098a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098c:	2302      	movs	r3, #2
 800098e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000990:	2300      	movs	r3, #0
 8000992:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000994:	2303      	movs	r3, #3
 8000996:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000998:	230b      	movs	r3, #11
 800099a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800099c:	f107 031c 	add.w	r3, r7, #28
 80009a0:	4619      	mov	r1, r3
 80009a2:	483c      	ldr	r0, [pc, #240]	; (8000a94 <MX_GPIO_Init+0x21c>)
 80009a4:	f000 fe62 	bl	800166c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80009a8:	f244 0381 	movw	r3, #16513	; 0x4081
 80009ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ae:	2301      	movs	r3, #1
 80009b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b2:	2300      	movs	r3, #0
 80009b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b6:	2300      	movs	r3, #0
 80009b8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ba:	f107 031c 	add.w	r3, r7, #28
 80009be:	4619      	mov	r1, r3
 80009c0:	4831      	ldr	r0, [pc, #196]	; (8000a88 <MX_GPIO_Init+0x210>)
 80009c2:	f000 fe53 	bl	800166c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80009c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009cc:	2302      	movs	r3, #2
 80009ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d0:	2300      	movs	r3, #0
 80009d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009d4:	2303      	movs	r3, #3
 80009d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009d8:	230b      	movs	r3, #11
 80009da:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80009dc:	f107 031c 	add.w	r3, r7, #28
 80009e0:	4619      	mov	r1, r3
 80009e2:	4829      	ldr	r0, [pc, #164]	; (8000a88 <MX_GPIO_Init+0x210>)
 80009e4:	f000 fe42 	bl	800166c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80009e8:	2340      	movs	r3, #64	; 0x40
 80009ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ec:	2301      	movs	r3, #1
 80009ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f4:	2300      	movs	r3, #0
 80009f6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009f8:	f107 031c 	add.w	r3, r7, #28
 80009fc:	4619      	mov	r1, r3
 80009fe:	4823      	ldr	r0, [pc, #140]	; (8000a8c <MX_GPIO_Init+0x214>)
 8000a00:	f000 fe34 	bl	800166c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000a04:	2380      	movs	r3, #128	; 0x80
 8000a06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a10:	f107 031c 	add.w	r3, r7, #28
 8000a14:	4619      	mov	r1, r3
 8000a16:	481d      	ldr	r0, [pc, #116]	; (8000a8c <MX_GPIO_Init+0x214>)
 8000a18:	f000 fe28 	bl	800166c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000a1c:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000a20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a22:	2302      	movs	r3, #2
 8000a24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a26:	2300      	movs	r3, #0
 8000a28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a2a:	2303      	movs	r3, #3
 8000a2c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a2e:	230a      	movs	r3, #10
 8000a30:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a32:	f107 031c 	add.w	r3, r7, #28
 8000a36:	4619      	mov	r1, r3
 8000a38:	4816      	ldr	r0, [pc, #88]	; (8000a94 <MX_GPIO_Init+0x21c>)
 8000a3a:	f000 fe17 	bl	800166c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000a3e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a44:	2300      	movs	r3, #0
 8000a46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000a4c:	f107 031c 	add.w	r3, r7, #28
 8000a50:	4619      	mov	r1, r3
 8000a52:	4810      	ldr	r0, [pc, #64]	; (8000a94 <MX_GPIO_Init+0x21c>)
 8000a54:	f000 fe0a 	bl	800166c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000a58:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000a5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a5e:	2302      	movs	r3, #2
 8000a60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a62:	2300      	movs	r3, #0
 8000a64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a66:	2303      	movs	r3, #3
 8000a68:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a6a:	230b      	movs	r3, #11
 8000a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a6e:	f107 031c 	add.w	r3, r7, #28
 8000a72:	4619      	mov	r1, r3
 8000a74:	4805      	ldr	r0, [pc, #20]	; (8000a8c <MX_GPIO_Init+0x214>)
 8000a76:	f000 fdf9 	bl	800166c <HAL_GPIO_Init>

}
 8000a7a:	bf00      	nop
 8000a7c:	3730      	adds	r7, #48	; 0x30
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	40023800 	.word	0x40023800
 8000a88:	40020400 	.word	0x40020400
 8000a8c:	40021800 	.word	0x40021800
 8000a90:	40020800 	.word	0x40020800
 8000a94:	40020000 	.word	0x40020000

08000a98 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a9c:	4b1b      	ldr	r3, [pc, #108]	; (8000b0c <MX_I2C1_Init+0x74>)
 8000a9e:	4a1c      	ldr	r2, [pc, #112]	; (8000b10 <MX_I2C1_Init+0x78>)
 8000aa0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000aa2:	4b1a      	ldr	r3, [pc, #104]	; (8000b0c <MX_I2C1_Init+0x74>)
 8000aa4:	4a1b      	ldr	r2, [pc, #108]	; (8000b14 <MX_I2C1_Init+0x7c>)
 8000aa6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000aa8:	4b18      	ldr	r3, [pc, #96]	; (8000b0c <MX_I2C1_Init+0x74>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000aae:	4b17      	ldr	r3, [pc, #92]	; (8000b0c <MX_I2C1_Init+0x74>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ab4:	4b15      	ldr	r3, [pc, #84]	; (8000b0c <MX_I2C1_Init+0x74>)
 8000ab6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000aba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000abc:	4b13      	ldr	r3, [pc, #76]	; (8000b0c <MX_I2C1_Init+0x74>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000ac2:	4b12      	ldr	r3, [pc, #72]	; (8000b0c <MX_I2C1_Init+0x74>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ac8:	4b10      	ldr	r3, [pc, #64]	; (8000b0c <MX_I2C1_Init+0x74>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ace:	4b0f      	ldr	r3, [pc, #60]	; (8000b0c <MX_I2C1_Init+0x74>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ad4:	480d      	ldr	r0, [pc, #52]	; (8000b0c <MX_I2C1_Init+0x74>)
 8000ad6:	f000 ff8f 	bl	80019f8 <HAL_I2C_Init>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ae0:	f000 f9b4 	bl	8000e4c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	4809      	ldr	r0, [pc, #36]	; (8000b0c <MX_I2C1_Init+0x74>)
 8000ae8:	f003 fd4c 	bl	8004584 <HAL_I2CEx_ConfigAnalogFilter>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000af2:	f000 f9ab 	bl	8000e4c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000af6:	2100      	movs	r1, #0
 8000af8:	4804      	ldr	r0, [pc, #16]	; (8000b0c <MX_I2C1_Init+0x74>)
 8000afa:	f003 fd7f 	bl	80045fc <HAL_I2CEx_ConfigDigitalFilter>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000b04:	f000 f9a2 	bl	8000e4c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b08:	bf00      	nop
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	20000150 	.word	0x20000150
 8000b10:	40005400 	.word	0x40005400
 8000b14:	000186a0 	.word	0x000186a0

08000b18 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000b1c:	4b1b      	ldr	r3, [pc, #108]	; (8000b8c <MX_I2C2_Init+0x74>)
 8000b1e:	4a1c      	ldr	r2, [pc, #112]	; (8000b90 <MX_I2C2_Init+0x78>)
 8000b20:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000b22:	4b1a      	ldr	r3, [pc, #104]	; (8000b8c <MX_I2C2_Init+0x74>)
 8000b24:	4a1b      	ldr	r2, [pc, #108]	; (8000b94 <MX_I2C2_Init+0x7c>)
 8000b26:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b28:	4b18      	ldr	r3, [pc, #96]	; (8000b8c <MX_I2C2_Init+0x74>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000b2e:	4b17      	ldr	r3, [pc, #92]	; (8000b8c <MX_I2C2_Init+0x74>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b34:	4b15      	ldr	r3, [pc, #84]	; (8000b8c <MX_I2C2_Init+0x74>)
 8000b36:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b3a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b3c:	4b13      	ldr	r3, [pc, #76]	; (8000b8c <MX_I2C2_Init+0x74>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000b42:	4b12      	ldr	r3, [pc, #72]	; (8000b8c <MX_I2C2_Init+0x74>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b48:	4b10      	ldr	r3, [pc, #64]	; (8000b8c <MX_I2C2_Init+0x74>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b4e:	4b0f      	ldr	r3, [pc, #60]	; (8000b8c <MX_I2C2_Init+0x74>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000b54:	480d      	ldr	r0, [pc, #52]	; (8000b8c <MX_I2C2_Init+0x74>)
 8000b56:	f000 ff4f 	bl	80019f8 <HAL_I2C_Init>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000b60:	f000 f974 	bl	8000e4c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b64:	2100      	movs	r1, #0
 8000b66:	4809      	ldr	r0, [pc, #36]	; (8000b8c <MX_I2C2_Init+0x74>)
 8000b68:	f003 fd0c 	bl	8004584 <HAL_I2CEx_ConfigAnalogFilter>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8000b72:	f000 f96b 	bl	8000e4c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000b76:	2100      	movs	r1, #0
 8000b78:	4804      	ldr	r0, [pc, #16]	; (8000b8c <MX_I2C2_Init+0x74>)
 8000b7a:	f003 fd3f 	bl	80045fc <HAL_I2CEx_ConfigDigitalFilter>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000b84:	f000 f962 	bl	8000e4c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000b88:	bf00      	nop
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	200001a4 	.word	0x200001a4
 8000b90:	40005800 	.word	0x40005800
 8000b94:	000186a0 	.word	0x000186a0

08000b98 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b08c      	sub	sp, #48	; 0x30
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba0:	f107 031c 	add.w	r3, r7, #28
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	601a      	str	r2, [r3, #0]
 8000ba8:	605a      	str	r2, [r3, #4]
 8000baa:	609a      	str	r2, [r3, #8]
 8000bac:	60da      	str	r2, [r3, #12]
 8000bae:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a42      	ldr	r2, [pc, #264]	; (8000cc0 <HAL_I2C_MspInit+0x128>)
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	d13d      	bne.n	8000c36 <HAL_I2C_MspInit+0x9e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bba:	2300      	movs	r3, #0
 8000bbc:	61bb      	str	r3, [r7, #24]
 8000bbe:	4b41      	ldr	r3, [pc, #260]	; (8000cc4 <HAL_I2C_MspInit+0x12c>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc2:	4a40      	ldr	r2, [pc, #256]	; (8000cc4 <HAL_I2C_MspInit+0x12c>)
 8000bc4:	f043 0302 	orr.w	r3, r3, #2
 8000bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bca:	4b3e      	ldr	r3, [pc, #248]	; (8000cc4 <HAL_I2C_MspInit+0x12c>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bce:	f003 0302 	and.w	r3, r3, #2
 8000bd2:	61bb      	str	r3, [r7, #24]
 8000bd4:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000bd6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000bda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bdc:	2312      	movs	r3, #18
 8000bde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be0:	2300      	movs	r3, #0
 8000be2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be4:	2303      	movs	r3, #3
 8000be6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000be8:	2304      	movs	r3, #4
 8000bea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bec:	f107 031c 	add.w	r3, r7, #28
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	4835      	ldr	r0, [pc, #212]	; (8000cc8 <HAL_I2C_MspInit+0x130>)
 8000bf4:	f000 fd3a 	bl	800166c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	617b      	str	r3, [r7, #20]
 8000bfc:	4b31      	ldr	r3, [pc, #196]	; (8000cc4 <HAL_I2C_MspInit+0x12c>)
 8000bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c00:	4a30      	ldr	r2, [pc, #192]	; (8000cc4 <HAL_I2C_MspInit+0x12c>)
 8000c02:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c06:	6413      	str	r3, [r2, #64]	; 0x40
 8000c08:	4b2e      	ldr	r3, [pc, #184]	; (8000cc4 <HAL_I2C_MspInit+0x12c>)
 8000c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c10:	617b      	str	r3, [r7, #20]
 8000c12:	697b      	ldr	r3, [r7, #20]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000c14:	2200      	movs	r2, #0
 8000c16:	2100      	movs	r1, #0
 8000c18:	201f      	movs	r0, #31
 8000c1a:	f000 fc50 	bl	80014be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000c1e:	201f      	movs	r0, #31
 8000c20:	f000 fc69 	bl	80014f6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000c24:	2200      	movs	r2, #0
 8000c26:	2100      	movs	r1, #0
 8000c28:	2020      	movs	r0, #32
 8000c2a:	f000 fc48 	bl	80014be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000c2e:	2020      	movs	r0, #32
 8000c30:	f000 fc61 	bl	80014f6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000c34:	e040      	b.n	8000cb8 <HAL_I2C_MspInit+0x120>
  else if(i2cHandle->Instance==I2C2)
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4a24      	ldr	r2, [pc, #144]	; (8000ccc <HAL_I2C_MspInit+0x134>)
 8000c3c:	4293      	cmp	r3, r2
 8000c3e:	d13b      	bne.n	8000cb8 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c40:	2300      	movs	r3, #0
 8000c42:	613b      	str	r3, [r7, #16]
 8000c44:	4b1f      	ldr	r3, [pc, #124]	; (8000cc4 <HAL_I2C_MspInit+0x12c>)
 8000c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c48:	4a1e      	ldr	r2, [pc, #120]	; (8000cc4 <HAL_I2C_MspInit+0x12c>)
 8000c4a:	f043 0320 	orr.w	r3, r3, #32
 8000c4e:	6313      	str	r3, [r2, #48]	; 0x30
 8000c50:	4b1c      	ldr	r3, [pc, #112]	; (8000cc4 <HAL_I2C_MspInit+0x12c>)
 8000c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c54:	f003 0320 	and.w	r3, r3, #32
 8000c58:	613b      	str	r3, [r7, #16]
 8000c5a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000c5c:	2303      	movs	r3, #3
 8000c5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c60:	2312      	movs	r3, #18
 8000c62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c64:	2300      	movs	r3, #0
 8000c66:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c68:	2303      	movs	r3, #3
 8000c6a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000c6c:	2304      	movs	r3, #4
 8000c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000c70:	f107 031c 	add.w	r3, r7, #28
 8000c74:	4619      	mov	r1, r3
 8000c76:	4816      	ldr	r0, [pc, #88]	; (8000cd0 <HAL_I2C_MspInit+0x138>)
 8000c78:	f000 fcf8 	bl	800166c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	60fb      	str	r3, [r7, #12]
 8000c80:	4b10      	ldr	r3, [pc, #64]	; (8000cc4 <HAL_I2C_MspInit+0x12c>)
 8000c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c84:	4a0f      	ldr	r2, [pc, #60]	; (8000cc4 <HAL_I2C_MspInit+0x12c>)
 8000c86:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c8a:	6413      	str	r3, [r2, #64]	; 0x40
 8000c8c:	4b0d      	ldr	r3, [pc, #52]	; (8000cc4 <HAL_I2C_MspInit+0x12c>)
 8000c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c94:	60fb      	str	r3, [r7, #12]
 8000c96:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8000c98:	2200      	movs	r2, #0
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	2021      	movs	r0, #33	; 0x21
 8000c9e:	f000 fc0e 	bl	80014be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8000ca2:	2021      	movs	r0, #33	; 0x21
 8000ca4:	f000 fc27 	bl	80014f6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8000ca8:	2200      	movs	r2, #0
 8000caa:	2100      	movs	r1, #0
 8000cac:	2022      	movs	r0, #34	; 0x22
 8000cae:	f000 fc06 	bl	80014be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8000cb2:	2022      	movs	r0, #34	; 0x22
 8000cb4:	f000 fc1f 	bl	80014f6 <HAL_NVIC_EnableIRQ>
}
 8000cb8:	bf00      	nop
 8000cba:	3730      	adds	r7, #48	; 0x30
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	40005400 	.word	0x40005400
 8000cc4:	40023800 	.word	0x40023800
 8000cc8:	40020400 	.word	0x40020400
 8000ccc:	40005800 	.word	0x40005800
 8000cd0:	40021400 	.word	0x40021400

08000cd4 <_write>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
int _write(int file, char *p, int len)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b084      	sub	sp, #16
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	60f8      	str	r0, [r7, #12]
 8000cdc:	60b9      	str	r1, [r7, #8]
 8000cde:	607a      	str	r2, [r7, #4]
	if(HAL_UART_Transmit(&huart3, (uint8_t *)p, len, 10) == HAL_OK) return len;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	b29a      	uxth	r2, r3
 8000ce4:	230a      	movs	r3, #10
 8000ce6:	68b9      	ldr	r1, [r7, #8]
 8000ce8:	4806      	ldr	r0, [pc, #24]	; (8000d04 <_write+0x30>)
 8000cea:	f004 f9fc 	bl	80050e6 <HAL_UART_Transmit>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d101      	bne.n	8000cf8 <_write+0x24>
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	e000      	b.n	8000cfa <_write+0x26>
	else return 0;
 8000cf8:	2300      	movs	r3, #0
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	3710      	adds	r7, #16
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	200001fc 	.word	0x200001fc

08000d08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d0c:	f000 fa66 	bl	80011dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d10:	f000 f82c 	bl	8000d6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d14:	f7ff fdb0 	bl	8000878 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000d18:	f7ff febe 	bl	8000a98 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8000d1c:	f000 f9ba 	bl	8001094 <MX_USART3_UART_Init>
  MX_I2C2_Init();
 8000d20:	f7ff fefa 	bl	8000b18 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  HW579_init(&hi2c1);
 8000d24:	480d      	ldr	r0, [pc, #52]	; (8000d5c <main+0x54>)
 8000d26:	f7ff fcf5 	bl	8000714 <HW579_init>

//  uint8_t state_buffer[128] = {0, };

//  uint8_t nDevices;

  HAL_Delay(1000);
 8000d2a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d2e:	f000 fac7 	bl	80012c0 <HAL_Delay>
  printf("I2C Scan Start\r\n");
 8000d32:	480b      	ldr	r0, [pc, #44]	; (8000d60 <main+0x58>)
 8000d34:	f005 fa64 	bl	8006200 <puts>
  printf("==================\r\n");
 8000d38:	480a      	ldr	r0, [pc, #40]	; (8000d64 <main+0x5c>)
 8000d3a:	f005 fa61 	bl	8006200 <puts>

  getI2C_Address(&hi2c1);
 8000d3e:	4807      	ldr	r0, [pc, #28]	; (8000d5c <main+0x54>)
 8000d40:	f7ff fc28 	bl	8000594 <getI2C_Address>

  printf("==================\r\n");
 8000d44:	4807      	ldr	r0, [pc, #28]	; (8000d64 <main+0x5c>)
 8000d46:	f005 fa5b 	bl	8006200 <puts>
  printf("End Scanning\r\n");
 8000d4a:	4807      	ldr	r0, [pc, #28]	; (8000d68 <main+0x60>)
 8000d4c:	f005 fa58 	bl	8006200 <puts>
//  for(int i = 0; i < numSensors; i++)
//  {
//	  printf("result : [0x%X]\r\n", sensors[i]);
//  }

  HW579_Read();
 8000d50:	f7ff fcf8 	bl	8000744 <HW579_Read>





	  HAL_Delay(100);
 8000d54:	2064      	movs	r0, #100	; 0x64
 8000d56:	f000 fab3 	bl	80012c0 <HAL_Delay>
 8000d5a:	e7fb      	b.n	8000d54 <main+0x4c>
 8000d5c:	20000150 	.word	0x20000150
 8000d60:	08007188 	.word	0x08007188
 8000d64:	08007198 	.word	0x08007198
 8000d68:	080071ac 	.word	0x080071ac

08000d6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b094      	sub	sp, #80	; 0x50
 8000d70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d72:	f107 0320 	add.w	r3, r7, #32
 8000d76:	2230      	movs	r2, #48	; 0x30
 8000d78:	2100      	movs	r1, #0
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f005 f9b2 	bl	80060e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d80:	f107 030c 	add.w	r3, r7, #12
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]
 8000d88:	605a      	str	r2, [r3, #4]
 8000d8a:	609a      	str	r2, [r3, #8]
 8000d8c:	60da      	str	r2, [r3, #12]
 8000d8e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d90:	2300      	movs	r3, #0
 8000d92:	60bb      	str	r3, [r7, #8]
 8000d94:	4b2b      	ldr	r3, [pc, #172]	; (8000e44 <SystemClock_Config+0xd8>)
 8000d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d98:	4a2a      	ldr	r2, [pc, #168]	; (8000e44 <SystemClock_Config+0xd8>)
 8000d9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d9e:	6413      	str	r3, [r2, #64]	; 0x40
 8000da0:	4b28      	ldr	r3, [pc, #160]	; (8000e44 <SystemClock_Config+0xd8>)
 8000da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000da8:	60bb      	str	r3, [r7, #8]
 8000daa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000dac:	2300      	movs	r3, #0
 8000dae:	607b      	str	r3, [r7, #4]
 8000db0:	4b25      	ldr	r3, [pc, #148]	; (8000e48 <SystemClock_Config+0xdc>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a24      	ldr	r2, [pc, #144]	; (8000e48 <SystemClock_Config+0xdc>)
 8000db6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000dba:	6013      	str	r3, [r2, #0]
 8000dbc:	4b22      	ldr	r3, [pc, #136]	; (8000e48 <SystemClock_Config+0xdc>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000dc4:	607b      	str	r3, [r7, #4]
 8000dc6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000dc8:	2301      	movs	r3, #1
 8000dca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000dcc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000dd0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dd2:	2302      	movs	r3, #2
 8000dd4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dd6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000dda:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ddc:	2304      	movs	r3, #4
 8000dde:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000de0:	23b4      	movs	r3, #180	; 0xb4
 8000de2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000de4:	2302      	movs	r3, #2
 8000de6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000de8:	2304      	movs	r3, #4
 8000dea:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dec:	f107 0320 	add.w	r3, r7, #32
 8000df0:	4618      	mov	r0, r3
 8000df2:	f003 fc93 	bl	800471c <HAL_RCC_OscConfig>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000dfc:	f000 f826 	bl	8000e4c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000e00:	f003 fc3c 	bl	800467c <HAL_PWREx_EnableOverDrive>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000e0a:	f000 f81f 	bl	8000e4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e0e:	230f      	movs	r3, #15
 8000e10:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e12:	2302      	movs	r3, #2
 8000e14:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e16:	2300      	movs	r3, #0
 8000e18:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e1a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e1e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e24:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000e26:	f107 030c 	add.w	r3, r7, #12
 8000e2a:	2105      	movs	r1, #5
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f003 feed 	bl	8004c0c <HAL_RCC_ClockConfig>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000e38:	f000 f808 	bl	8000e4c <Error_Handler>
  }
}
 8000e3c:	bf00      	nop
 8000e3e:	3750      	adds	r7, #80	; 0x50
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	40023800 	.word	0x40023800
 8000e48:	40007000 	.word	0x40007000

08000e4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e50:	b672      	cpsid	i
}
 8000e52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e54:	e7fe      	b.n	8000e54 <Error_Handler+0x8>
	...

08000e58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b083      	sub	sp, #12
 8000e5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e5e:	2300      	movs	r3, #0
 8000e60:	607b      	str	r3, [r7, #4]
 8000e62:	4b10      	ldr	r3, [pc, #64]	; (8000ea4 <HAL_MspInit+0x4c>)
 8000e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e66:	4a0f      	ldr	r2, [pc, #60]	; (8000ea4 <HAL_MspInit+0x4c>)
 8000e68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e6c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e6e:	4b0d      	ldr	r3, [pc, #52]	; (8000ea4 <HAL_MspInit+0x4c>)
 8000e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e76:	607b      	str	r3, [r7, #4]
 8000e78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	603b      	str	r3, [r7, #0]
 8000e7e:	4b09      	ldr	r3, [pc, #36]	; (8000ea4 <HAL_MspInit+0x4c>)
 8000e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e82:	4a08      	ldr	r2, [pc, #32]	; (8000ea4 <HAL_MspInit+0x4c>)
 8000e84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e88:	6413      	str	r3, [r2, #64]	; 0x40
 8000e8a:	4b06      	ldr	r3, [pc, #24]	; (8000ea4 <HAL_MspInit+0x4c>)
 8000e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e92:	603b      	str	r3, [r7, #0]
 8000e94:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e96:	bf00      	nop
 8000e98:	370c      	adds	r7, #12
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	40023800 	.word	0x40023800

08000ea8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000eac:	e7fe      	b.n	8000eac <NMI_Handler+0x4>

08000eae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eb2:	e7fe      	b.n	8000eb2 <HardFault_Handler+0x4>

08000eb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000eb8:	e7fe      	b.n	8000eb8 <MemManage_Handler+0x4>

08000eba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eba:	b480      	push	{r7}
 8000ebc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ebe:	e7fe      	b.n	8000ebe <BusFault_Handler+0x4>

08000ec0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ec4:	e7fe      	b.n	8000ec4 <UsageFault_Handler+0x4>

08000ec6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ec6:	b480      	push	{r7}
 8000ec8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eca:	bf00      	nop
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr

08000ed4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ed8:	bf00      	nop
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr

08000ee2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ee2:	b480      	push	{r7}
 8000ee4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ee6:	bf00      	nop
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr

08000ef0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ef4:	f000 f9c4 	bl	8001280 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ef8:	bf00      	nop
 8000efa:	bd80      	pop	{r7, pc}

08000efc <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000f00:	4802      	ldr	r0, [pc, #8]	; (8000f0c <I2C1_EV_IRQHandler+0x10>)
 8000f02:	f001 fb0f 	bl	8002524 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000f06:	bf00      	nop
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	20000150 	.word	0x20000150

08000f10 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000f14:	4802      	ldr	r0, [pc, #8]	; (8000f20 <I2C1_ER_IRQHandler+0x10>)
 8000f16:	f001 fc76 	bl	8002806 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000f1a:	bf00      	nop
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	20000150 	.word	0x20000150

08000f24 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8000f28:	4802      	ldr	r0, [pc, #8]	; (8000f34 <I2C2_EV_IRQHandler+0x10>)
 8000f2a:	f001 fafb 	bl	8002524 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8000f2e:	bf00      	nop
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	200001a4 	.word	0x200001a4

08000f38 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8000f3c:	4802      	ldr	r0, [pc, #8]	; (8000f48 <I2C2_ER_IRQHandler+0x10>)
 8000f3e:	f001 fc62 	bl	8002806 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8000f42:	bf00      	nop
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	200001a4 	.word	0x200001a4

08000f4c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000f50:	4802      	ldr	r0, [pc, #8]	; (8000f5c <USART3_IRQHandler+0x10>)
 8000f52:	f004 f95b 	bl	800520c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000f56:	bf00      	nop
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	200001fc 	.word	0x200001fc

08000f60 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b086      	sub	sp, #24
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	60f8      	str	r0, [r7, #12]
 8000f68:	60b9      	str	r1, [r7, #8]
 8000f6a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	617b      	str	r3, [r7, #20]
 8000f70:	e00a      	b.n	8000f88 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000f72:	f3af 8000 	nop.w
 8000f76:	4601      	mov	r1, r0
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	1c5a      	adds	r2, r3, #1
 8000f7c:	60ba      	str	r2, [r7, #8]
 8000f7e:	b2ca      	uxtb	r2, r1
 8000f80:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	3301      	adds	r3, #1
 8000f86:	617b      	str	r3, [r7, #20]
 8000f88:	697a      	ldr	r2, [r7, #20]
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	dbf0      	blt.n	8000f72 <_read+0x12>
	}

return len;
 8000f90:	687b      	ldr	r3, [r7, #4]
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	3718      	adds	r7, #24
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}

08000f9a <_close>:
	}
	return len;
}

int _close(int file)
{
 8000f9a:	b480      	push	{r7}
 8000f9c:	b083      	sub	sp, #12
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	6078      	str	r0, [r7, #4]
	return -1;
 8000fa2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	370c      	adds	r7, #12
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr

08000fb2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000fb2:	b480      	push	{r7}
 8000fb4:	b083      	sub	sp, #12
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	6078      	str	r0, [r7, #4]
 8000fba:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fc2:	605a      	str	r2, [r3, #4]
	return 0;
 8000fc4:	2300      	movs	r3, #0
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	370c      	adds	r7, #12
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr

08000fd2 <_isatty>:

int _isatty(int file)
{
 8000fd2:	b480      	push	{r7}
 8000fd4:	b083      	sub	sp, #12
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	6078      	str	r0, [r7, #4]
	return 1;
 8000fda:	2301      	movs	r3, #1
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	370c      	adds	r7, #12
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr

08000fe8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b085      	sub	sp, #20
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	60f8      	str	r0, [r7, #12]
 8000ff0:	60b9      	str	r1, [r7, #8]
 8000ff2:	607a      	str	r2, [r7, #4]
	return 0;
 8000ff4:	2300      	movs	r3, #0
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3714      	adds	r7, #20
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
	...

08001004 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b086      	sub	sp, #24
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800100c:	4a14      	ldr	r2, [pc, #80]	; (8001060 <_sbrk+0x5c>)
 800100e:	4b15      	ldr	r3, [pc, #84]	; (8001064 <_sbrk+0x60>)
 8001010:	1ad3      	subs	r3, r2, r3
 8001012:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001018:	4b13      	ldr	r3, [pc, #76]	; (8001068 <_sbrk+0x64>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d102      	bne.n	8001026 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001020:	4b11      	ldr	r3, [pc, #68]	; (8001068 <_sbrk+0x64>)
 8001022:	4a12      	ldr	r2, [pc, #72]	; (800106c <_sbrk+0x68>)
 8001024:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001026:	4b10      	ldr	r3, [pc, #64]	; (8001068 <_sbrk+0x64>)
 8001028:	681a      	ldr	r2, [r3, #0]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4413      	add	r3, r2
 800102e:	693a      	ldr	r2, [r7, #16]
 8001030:	429a      	cmp	r2, r3
 8001032:	d207      	bcs.n	8001044 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001034:	f005 f81e 	bl	8006074 <__errno>
 8001038:	4603      	mov	r3, r0
 800103a:	220c      	movs	r2, #12
 800103c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800103e:	f04f 33ff 	mov.w	r3, #4294967295
 8001042:	e009      	b.n	8001058 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001044:	4b08      	ldr	r3, [pc, #32]	; (8001068 <_sbrk+0x64>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800104a:	4b07      	ldr	r3, [pc, #28]	; (8001068 <_sbrk+0x64>)
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4413      	add	r3, r2
 8001052:	4a05      	ldr	r2, [pc, #20]	; (8001068 <_sbrk+0x64>)
 8001054:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001056:	68fb      	ldr	r3, [r7, #12]
}
 8001058:	4618      	mov	r0, r3
 800105a:	3718      	adds	r7, #24
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	20030000 	.word	0x20030000
 8001064:	00000400 	.word	0x00000400
 8001068:	200001f8 	.word	0x200001f8
 800106c:	20000258 	.word	0x20000258

08001070 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001074:	4b06      	ldr	r3, [pc, #24]	; (8001090 <SystemInit+0x20>)
 8001076:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800107a:	4a05      	ldr	r2, [pc, #20]	; (8001090 <SystemInit+0x20>)
 800107c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001080:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001084:	bf00      	nop
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	e000ed00 	.word	0xe000ed00

08001094 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001098:	4b11      	ldr	r3, [pc, #68]	; (80010e0 <MX_USART3_UART_Init+0x4c>)
 800109a:	4a12      	ldr	r2, [pc, #72]	; (80010e4 <MX_USART3_UART_Init+0x50>)
 800109c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800109e:	4b10      	ldr	r3, [pc, #64]	; (80010e0 <MX_USART3_UART_Init+0x4c>)
 80010a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010a4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80010a6:	4b0e      	ldr	r3, [pc, #56]	; (80010e0 <MX_USART3_UART_Init+0x4c>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80010ac:	4b0c      	ldr	r3, [pc, #48]	; (80010e0 <MX_USART3_UART_Init+0x4c>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80010b2:	4b0b      	ldr	r3, [pc, #44]	; (80010e0 <MX_USART3_UART_Init+0x4c>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80010b8:	4b09      	ldr	r3, [pc, #36]	; (80010e0 <MX_USART3_UART_Init+0x4c>)
 80010ba:	220c      	movs	r2, #12
 80010bc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010be:	4b08      	ldr	r3, [pc, #32]	; (80010e0 <MX_USART3_UART_Init+0x4c>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80010c4:	4b06      	ldr	r3, [pc, #24]	; (80010e0 <MX_USART3_UART_Init+0x4c>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80010ca:	4805      	ldr	r0, [pc, #20]	; (80010e0 <MX_USART3_UART_Init+0x4c>)
 80010cc:	f003 ffbe 	bl	800504c <HAL_UART_Init>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80010d6:	f7ff feb9 	bl	8000e4c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80010da:	bf00      	nop
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	200001fc 	.word	0x200001fc
 80010e4:	40004800 	.word	0x40004800

080010e8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b08a      	sub	sp, #40	; 0x28
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f0:	f107 0314 	add.w	r3, r7, #20
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	605a      	str	r2, [r3, #4]
 80010fa:	609a      	str	r2, [r3, #8]
 80010fc:	60da      	str	r2, [r3, #12]
 80010fe:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a1d      	ldr	r2, [pc, #116]	; (800117c <HAL_UART_MspInit+0x94>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d134      	bne.n	8001174 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800110a:	2300      	movs	r3, #0
 800110c:	613b      	str	r3, [r7, #16]
 800110e:	4b1c      	ldr	r3, [pc, #112]	; (8001180 <HAL_UART_MspInit+0x98>)
 8001110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001112:	4a1b      	ldr	r2, [pc, #108]	; (8001180 <HAL_UART_MspInit+0x98>)
 8001114:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001118:	6413      	str	r3, [r2, #64]	; 0x40
 800111a:	4b19      	ldr	r3, [pc, #100]	; (8001180 <HAL_UART_MspInit+0x98>)
 800111c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001122:	613b      	str	r3, [r7, #16]
 8001124:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001126:	2300      	movs	r3, #0
 8001128:	60fb      	str	r3, [r7, #12]
 800112a:	4b15      	ldr	r3, [pc, #84]	; (8001180 <HAL_UART_MspInit+0x98>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112e:	4a14      	ldr	r2, [pc, #80]	; (8001180 <HAL_UART_MspInit+0x98>)
 8001130:	f043 0302 	orr.w	r3, r3, #2
 8001134:	6313      	str	r3, [r2, #48]	; 0x30
 8001136:	4b12      	ldr	r3, [pc, #72]	; (8001180 <HAL_UART_MspInit+0x98>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113a:	f003 0302 	and.w	r3, r3, #2
 800113e:	60fb      	str	r3, [r7, #12]
 8001140:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001142:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001146:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001148:	2302      	movs	r3, #2
 800114a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114c:	2300      	movs	r3, #0
 800114e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001150:	2303      	movs	r3, #3
 8001152:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001154:	2307      	movs	r3, #7
 8001156:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001158:	f107 0314 	add.w	r3, r7, #20
 800115c:	4619      	mov	r1, r3
 800115e:	4809      	ldr	r0, [pc, #36]	; (8001184 <HAL_UART_MspInit+0x9c>)
 8001160:	f000 fa84 	bl	800166c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001164:	2200      	movs	r2, #0
 8001166:	2100      	movs	r1, #0
 8001168:	2027      	movs	r0, #39	; 0x27
 800116a:	f000 f9a8 	bl	80014be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800116e:	2027      	movs	r0, #39	; 0x27
 8001170:	f000 f9c1 	bl	80014f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001174:	bf00      	nop
 8001176:	3728      	adds	r7, #40	; 0x28
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	40004800 	.word	0x40004800
 8001180:	40023800 	.word	0x40023800
 8001184:	40020400 	.word	0x40020400

08001188 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001188:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011c0 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800118c:	480d      	ldr	r0, [pc, #52]	; (80011c4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800118e:	490e      	ldr	r1, [pc, #56]	; (80011c8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001190:	4a0e      	ldr	r2, [pc, #56]	; (80011cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001192:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001194:	e002      	b.n	800119c <LoopCopyDataInit>

08001196 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001196:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001198:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800119a:	3304      	adds	r3, #4

0800119c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800119c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800119e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011a0:	d3f9      	bcc.n	8001196 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011a2:	4a0b      	ldr	r2, [pc, #44]	; (80011d0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80011a4:	4c0b      	ldr	r4, [pc, #44]	; (80011d4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80011a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011a8:	e001      	b.n	80011ae <LoopFillZerobss>

080011aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011ac:	3204      	adds	r2, #4

080011ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011b0:	d3fb      	bcc.n	80011aa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80011b2:	f7ff ff5d 	bl	8001070 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011b6:	f004 ff63 	bl	8006080 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011ba:	f7ff fda5 	bl	8000d08 <main>
  bx  lr    
 80011be:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80011c0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80011c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011c8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80011cc:	0800727c 	.word	0x0800727c
  ldr r2, =_sbss
 80011d0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80011d4:	20000254 	.word	0x20000254

080011d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011d8:	e7fe      	b.n	80011d8 <ADC_IRQHandler>
	...

080011dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011e0:	4b0e      	ldr	r3, [pc, #56]	; (800121c <HAL_Init+0x40>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a0d      	ldr	r2, [pc, #52]	; (800121c <HAL_Init+0x40>)
 80011e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011ec:	4b0b      	ldr	r3, [pc, #44]	; (800121c <HAL_Init+0x40>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a0a      	ldr	r2, [pc, #40]	; (800121c <HAL_Init+0x40>)
 80011f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011f8:	4b08      	ldr	r3, [pc, #32]	; (800121c <HAL_Init+0x40>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a07      	ldr	r2, [pc, #28]	; (800121c <HAL_Init+0x40>)
 80011fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001202:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001204:	2003      	movs	r0, #3
 8001206:	f000 f94f 	bl	80014a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800120a:	2000      	movs	r0, #0
 800120c:	f000 f808 	bl	8001220 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001210:	f7ff fe22 	bl	8000e58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001214:	2300      	movs	r3, #0
}
 8001216:	4618      	mov	r0, r3
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	40023c00 	.word	0x40023c00

08001220 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001228:	4b12      	ldr	r3, [pc, #72]	; (8001274 <HAL_InitTick+0x54>)
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	4b12      	ldr	r3, [pc, #72]	; (8001278 <HAL_InitTick+0x58>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	4619      	mov	r1, r3
 8001232:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001236:	fbb3 f3f1 	udiv	r3, r3, r1
 800123a:	fbb2 f3f3 	udiv	r3, r2, r3
 800123e:	4618      	mov	r0, r3
 8001240:	f000 f967 	bl	8001512 <HAL_SYSTICK_Config>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	e00e      	b.n	800126c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	2b0f      	cmp	r3, #15
 8001252:	d80a      	bhi.n	800126a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001254:	2200      	movs	r2, #0
 8001256:	6879      	ldr	r1, [r7, #4]
 8001258:	f04f 30ff 	mov.w	r0, #4294967295
 800125c:	f000 f92f 	bl	80014be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001260:	4a06      	ldr	r2, [pc, #24]	; (800127c <HAL_InitTick+0x5c>)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001266:	2300      	movs	r3, #0
 8001268:	e000      	b.n	800126c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800126a:	2301      	movs	r3, #1
}
 800126c:	4618      	mov	r0, r3
 800126e:	3708      	adds	r7, #8
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	20000000 	.word	0x20000000
 8001278:	20000008 	.word	0x20000008
 800127c:	20000004 	.word	0x20000004

08001280 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001284:	4b06      	ldr	r3, [pc, #24]	; (80012a0 <HAL_IncTick+0x20>)
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	461a      	mov	r2, r3
 800128a:	4b06      	ldr	r3, [pc, #24]	; (80012a4 <HAL_IncTick+0x24>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4413      	add	r3, r2
 8001290:	4a04      	ldr	r2, [pc, #16]	; (80012a4 <HAL_IncTick+0x24>)
 8001292:	6013      	str	r3, [r2, #0]
}
 8001294:	bf00      	nop
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	20000008 	.word	0x20000008
 80012a4:	20000240 	.word	0x20000240

080012a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  return uwTick;
 80012ac:	4b03      	ldr	r3, [pc, #12]	; (80012bc <HAL_GetTick+0x14>)
 80012ae:	681b      	ldr	r3, [r3, #0]
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	20000240 	.word	0x20000240

080012c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b084      	sub	sp, #16
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012c8:	f7ff ffee 	bl	80012a8 <HAL_GetTick>
 80012cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012d8:	d005      	beq.n	80012e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012da:	4b0a      	ldr	r3, [pc, #40]	; (8001304 <HAL_Delay+0x44>)
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	461a      	mov	r2, r3
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	4413      	add	r3, r2
 80012e4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80012e6:	bf00      	nop
 80012e8:	f7ff ffde 	bl	80012a8 <HAL_GetTick>
 80012ec:	4602      	mov	r2, r0
 80012ee:	68bb      	ldr	r3, [r7, #8]
 80012f0:	1ad3      	subs	r3, r2, r3
 80012f2:	68fa      	ldr	r2, [r7, #12]
 80012f4:	429a      	cmp	r2, r3
 80012f6:	d8f7      	bhi.n	80012e8 <HAL_Delay+0x28>
  {
  }
}
 80012f8:	bf00      	nop
 80012fa:	bf00      	nop
 80012fc:	3710      	adds	r7, #16
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	20000008 	.word	0x20000008

08001308 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001308:	b480      	push	{r7}
 800130a:	b085      	sub	sp, #20
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	f003 0307 	and.w	r3, r3, #7
 8001316:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001318:	4b0c      	ldr	r3, [pc, #48]	; (800134c <__NVIC_SetPriorityGrouping+0x44>)
 800131a:	68db      	ldr	r3, [r3, #12]
 800131c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800131e:	68ba      	ldr	r2, [r7, #8]
 8001320:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001324:	4013      	ands	r3, r2
 8001326:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001330:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001334:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001338:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800133a:	4a04      	ldr	r2, [pc, #16]	; (800134c <__NVIC_SetPriorityGrouping+0x44>)
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	60d3      	str	r3, [r2, #12]
}
 8001340:	bf00      	nop
 8001342:	3714      	adds	r7, #20
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr
 800134c:	e000ed00 	.word	0xe000ed00

08001350 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001354:	4b04      	ldr	r3, [pc, #16]	; (8001368 <__NVIC_GetPriorityGrouping+0x18>)
 8001356:	68db      	ldr	r3, [r3, #12]
 8001358:	0a1b      	lsrs	r3, r3, #8
 800135a:	f003 0307 	and.w	r3, r3, #7
}
 800135e:	4618      	mov	r0, r3
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr
 8001368:	e000ed00 	.word	0xe000ed00

0800136c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	4603      	mov	r3, r0
 8001374:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800137a:	2b00      	cmp	r3, #0
 800137c:	db0b      	blt.n	8001396 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800137e:	79fb      	ldrb	r3, [r7, #7]
 8001380:	f003 021f 	and.w	r2, r3, #31
 8001384:	4907      	ldr	r1, [pc, #28]	; (80013a4 <__NVIC_EnableIRQ+0x38>)
 8001386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138a:	095b      	lsrs	r3, r3, #5
 800138c:	2001      	movs	r0, #1
 800138e:	fa00 f202 	lsl.w	r2, r0, r2
 8001392:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001396:	bf00      	nop
 8001398:	370c      	adds	r7, #12
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	e000e100 	.word	0xe000e100

080013a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	4603      	mov	r3, r0
 80013b0:	6039      	str	r1, [r7, #0]
 80013b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	db0a      	blt.n	80013d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	b2da      	uxtb	r2, r3
 80013c0:	490c      	ldr	r1, [pc, #48]	; (80013f4 <__NVIC_SetPriority+0x4c>)
 80013c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c6:	0112      	lsls	r2, r2, #4
 80013c8:	b2d2      	uxtb	r2, r2
 80013ca:	440b      	add	r3, r1
 80013cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013d0:	e00a      	b.n	80013e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	b2da      	uxtb	r2, r3
 80013d6:	4908      	ldr	r1, [pc, #32]	; (80013f8 <__NVIC_SetPriority+0x50>)
 80013d8:	79fb      	ldrb	r3, [r7, #7]
 80013da:	f003 030f 	and.w	r3, r3, #15
 80013de:	3b04      	subs	r3, #4
 80013e0:	0112      	lsls	r2, r2, #4
 80013e2:	b2d2      	uxtb	r2, r2
 80013e4:	440b      	add	r3, r1
 80013e6:	761a      	strb	r2, [r3, #24]
}
 80013e8:	bf00      	nop
 80013ea:	370c      	adds	r7, #12
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr
 80013f4:	e000e100 	.word	0xe000e100
 80013f8:	e000ed00 	.word	0xe000ed00

080013fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b089      	sub	sp, #36	; 0x24
 8001400:	af00      	add	r7, sp, #0
 8001402:	60f8      	str	r0, [r7, #12]
 8001404:	60b9      	str	r1, [r7, #8]
 8001406:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	f003 0307 	and.w	r3, r3, #7
 800140e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	f1c3 0307 	rsb	r3, r3, #7
 8001416:	2b04      	cmp	r3, #4
 8001418:	bf28      	it	cs
 800141a:	2304      	movcs	r3, #4
 800141c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	3304      	adds	r3, #4
 8001422:	2b06      	cmp	r3, #6
 8001424:	d902      	bls.n	800142c <NVIC_EncodePriority+0x30>
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	3b03      	subs	r3, #3
 800142a:	e000      	b.n	800142e <NVIC_EncodePriority+0x32>
 800142c:	2300      	movs	r3, #0
 800142e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001430:	f04f 32ff 	mov.w	r2, #4294967295
 8001434:	69bb      	ldr	r3, [r7, #24]
 8001436:	fa02 f303 	lsl.w	r3, r2, r3
 800143a:	43da      	mvns	r2, r3
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	401a      	ands	r2, r3
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001444:	f04f 31ff 	mov.w	r1, #4294967295
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	fa01 f303 	lsl.w	r3, r1, r3
 800144e:	43d9      	mvns	r1, r3
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001454:	4313      	orrs	r3, r2
         );
}
 8001456:	4618      	mov	r0, r3
 8001458:	3724      	adds	r7, #36	; 0x24
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
	...

08001464 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	3b01      	subs	r3, #1
 8001470:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001474:	d301      	bcc.n	800147a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001476:	2301      	movs	r3, #1
 8001478:	e00f      	b.n	800149a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800147a:	4a0a      	ldr	r2, [pc, #40]	; (80014a4 <SysTick_Config+0x40>)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	3b01      	subs	r3, #1
 8001480:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001482:	210f      	movs	r1, #15
 8001484:	f04f 30ff 	mov.w	r0, #4294967295
 8001488:	f7ff ff8e 	bl	80013a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800148c:	4b05      	ldr	r3, [pc, #20]	; (80014a4 <SysTick_Config+0x40>)
 800148e:	2200      	movs	r2, #0
 8001490:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001492:	4b04      	ldr	r3, [pc, #16]	; (80014a4 <SysTick_Config+0x40>)
 8001494:	2207      	movs	r2, #7
 8001496:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001498:	2300      	movs	r3, #0
}
 800149a:	4618      	mov	r0, r3
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	e000e010 	.word	0xe000e010

080014a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014b0:	6878      	ldr	r0, [r7, #4]
 80014b2:	f7ff ff29 	bl	8001308 <__NVIC_SetPriorityGrouping>
}
 80014b6:	bf00      	nop
 80014b8:	3708      	adds	r7, #8
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}

080014be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014be:	b580      	push	{r7, lr}
 80014c0:	b086      	sub	sp, #24
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	4603      	mov	r3, r0
 80014c6:	60b9      	str	r1, [r7, #8]
 80014c8:	607a      	str	r2, [r7, #4]
 80014ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014cc:	2300      	movs	r3, #0
 80014ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014d0:	f7ff ff3e 	bl	8001350 <__NVIC_GetPriorityGrouping>
 80014d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014d6:	687a      	ldr	r2, [r7, #4]
 80014d8:	68b9      	ldr	r1, [r7, #8]
 80014da:	6978      	ldr	r0, [r7, #20]
 80014dc:	f7ff ff8e 	bl	80013fc <NVIC_EncodePriority>
 80014e0:	4602      	mov	r2, r0
 80014e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014e6:	4611      	mov	r1, r2
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7ff ff5d 	bl	80013a8 <__NVIC_SetPriority>
}
 80014ee:	bf00      	nop
 80014f0:	3718      	adds	r7, #24
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}

080014f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014f6:	b580      	push	{r7, lr}
 80014f8:	b082      	sub	sp, #8
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	4603      	mov	r3, r0
 80014fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001500:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001504:	4618      	mov	r0, r3
 8001506:	f7ff ff31 	bl	800136c <__NVIC_EnableIRQ>
}
 800150a:	bf00      	nop
 800150c:	3708      	adds	r7, #8
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}

08001512 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001512:	b580      	push	{r7, lr}
 8001514:	b082      	sub	sp, #8
 8001516:	af00      	add	r7, sp, #0
 8001518:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800151a:	6878      	ldr	r0, [r7, #4]
 800151c:	f7ff ffa2 	bl	8001464 <SysTick_Config>
 8001520:	4603      	mov	r3, r0
}
 8001522:	4618      	mov	r0, r3
 8001524:	3708      	adds	r7, #8
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}

0800152a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800152a:	b580      	push	{r7, lr}
 800152c:	b084      	sub	sp, #16
 800152e:	af00      	add	r7, sp, #0
 8001530:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001536:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001538:	f7ff feb6 	bl	80012a8 <HAL_GetTick>
 800153c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001544:	b2db      	uxtb	r3, r3
 8001546:	2b02      	cmp	r3, #2
 8001548:	d008      	beq.n	800155c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2280      	movs	r2, #128	; 0x80
 800154e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2200      	movs	r2, #0
 8001554:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001558:	2301      	movs	r3, #1
 800155a:	e052      	b.n	8001602 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f022 0216 	bic.w	r2, r2, #22
 800156a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	695a      	ldr	r2, [r3, #20]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800157a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001580:	2b00      	cmp	r3, #0
 8001582:	d103      	bne.n	800158c <HAL_DMA_Abort+0x62>
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001588:	2b00      	cmp	r3, #0
 800158a:	d007      	beq.n	800159c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f022 0208 	bic.w	r2, r2, #8
 800159a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f022 0201 	bic.w	r2, r2, #1
 80015aa:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015ac:	e013      	b.n	80015d6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80015ae:	f7ff fe7b 	bl	80012a8 <HAL_GetTick>
 80015b2:	4602      	mov	r2, r0
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	1ad3      	subs	r3, r2, r3
 80015b8:	2b05      	cmp	r3, #5
 80015ba:	d90c      	bls.n	80015d6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2220      	movs	r2, #32
 80015c0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2203      	movs	r2, #3
 80015c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2200      	movs	r2, #0
 80015ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80015d2:	2303      	movs	r3, #3
 80015d4:	e015      	b.n	8001602 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f003 0301 	and.w	r3, r3, #1
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d1e4      	bne.n	80015ae <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015e8:	223f      	movs	r2, #63	; 0x3f
 80015ea:	409a      	lsls	r2, r3
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2201      	movs	r2, #1
 80015f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2200      	movs	r2, #0
 80015fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001600:	2300      	movs	r3, #0
}
 8001602:	4618      	mov	r0, r3
 8001604:	3710      	adds	r7, #16
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}

0800160a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800160a:	b480      	push	{r7}
 800160c:	b083      	sub	sp, #12
 800160e:	af00      	add	r7, sp, #0
 8001610:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001618:	b2db      	uxtb	r3, r3
 800161a:	2b02      	cmp	r3, #2
 800161c:	d004      	beq.n	8001628 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2280      	movs	r2, #128	; 0x80
 8001622:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001624:	2301      	movs	r3, #1
 8001626:	e00c      	b.n	8001642 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2205      	movs	r2, #5
 800162c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f022 0201 	bic.w	r2, r2, #1
 800163e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001640:	2300      	movs	r3, #0
}
 8001642:	4618      	mov	r0, r3
 8001644:	370c      	adds	r7, #12
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr

0800164e <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800164e:	b480      	push	{r7}
 8001650:	b083      	sub	sp, #12
 8001652:	af00      	add	r7, sp, #0
 8001654:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800165c:	b2db      	uxtb	r3, r3
}
 800165e:	4618      	mov	r0, r3
 8001660:	370c      	adds	r7, #12
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
	...

0800166c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800166c:	b480      	push	{r7}
 800166e:	b089      	sub	sp, #36	; 0x24
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
 8001674:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001676:	2300      	movs	r3, #0
 8001678:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800167a:	2300      	movs	r3, #0
 800167c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800167e:	2300      	movs	r3, #0
 8001680:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001682:	2300      	movs	r3, #0
 8001684:	61fb      	str	r3, [r7, #28]
 8001686:	e177      	b.n	8001978 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001688:	2201      	movs	r2, #1
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	fa02 f303 	lsl.w	r3, r2, r3
 8001690:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	697a      	ldr	r2, [r7, #20]
 8001698:	4013      	ands	r3, r2
 800169a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800169c:	693a      	ldr	r2, [r7, #16]
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	429a      	cmp	r2, r3
 80016a2:	f040 8166 	bne.w	8001972 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	f003 0303 	and.w	r3, r3, #3
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d005      	beq.n	80016be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016ba:	2b02      	cmp	r3, #2
 80016bc:	d130      	bne.n	8001720 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80016c4:	69fb      	ldr	r3, [r7, #28]
 80016c6:	005b      	lsls	r3, r3, #1
 80016c8:	2203      	movs	r2, #3
 80016ca:	fa02 f303 	lsl.w	r3, r2, r3
 80016ce:	43db      	mvns	r3, r3
 80016d0:	69ba      	ldr	r2, [r7, #24]
 80016d2:	4013      	ands	r3, r2
 80016d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	68da      	ldr	r2, [r3, #12]
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	005b      	lsls	r3, r3, #1
 80016de:	fa02 f303 	lsl.w	r3, r2, r3
 80016e2:	69ba      	ldr	r2, [r7, #24]
 80016e4:	4313      	orrs	r3, r2
 80016e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	69ba      	ldr	r2, [r7, #24]
 80016ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016f4:	2201      	movs	r2, #1
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	fa02 f303 	lsl.w	r3, r2, r3
 80016fc:	43db      	mvns	r3, r3
 80016fe:	69ba      	ldr	r2, [r7, #24]
 8001700:	4013      	ands	r3, r2
 8001702:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	091b      	lsrs	r3, r3, #4
 800170a:	f003 0201 	and.w	r2, r3, #1
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	fa02 f303 	lsl.w	r3, r2, r3
 8001714:	69ba      	ldr	r2, [r7, #24]
 8001716:	4313      	orrs	r3, r2
 8001718:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	69ba      	ldr	r2, [r7, #24]
 800171e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f003 0303 	and.w	r3, r3, #3
 8001728:	2b03      	cmp	r3, #3
 800172a:	d017      	beq.n	800175c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	68db      	ldr	r3, [r3, #12]
 8001730:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	005b      	lsls	r3, r3, #1
 8001736:	2203      	movs	r2, #3
 8001738:	fa02 f303 	lsl.w	r3, r2, r3
 800173c:	43db      	mvns	r3, r3
 800173e:	69ba      	ldr	r2, [r7, #24]
 8001740:	4013      	ands	r3, r2
 8001742:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	689a      	ldr	r2, [r3, #8]
 8001748:	69fb      	ldr	r3, [r7, #28]
 800174a:	005b      	lsls	r3, r3, #1
 800174c:	fa02 f303 	lsl.w	r3, r2, r3
 8001750:	69ba      	ldr	r2, [r7, #24]
 8001752:	4313      	orrs	r3, r2
 8001754:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	69ba      	ldr	r2, [r7, #24]
 800175a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f003 0303 	and.w	r3, r3, #3
 8001764:	2b02      	cmp	r3, #2
 8001766:	d123      	bne.n	80017b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001768:	69fb      	ldr	r3, [r7, #28]
 800176a:	08da      	lsrs	r2, r3, #3
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	3208      	adds	r2, #8
 8001770:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001774:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001776:	69fb      	ldr	r3, [r7, #28]
 8001778:	f003 0307 	and.w	r3, r3, #7
 800177c:	009b      	lsls	r3, r3, #2
 800177e:	220f      	movs	r2, #15
 8001780:	fa02 f303 	lsl.w	r3, r2, r3
 8001784:	43db      	mvns	r3, r3
 8001786:	69ba      	ldr	r2, [r7, #24]
 8001788:	4013      	ands	r3, r2
 800178a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	691a      	ldr	r2, [r3, #16]
 8001790:	69fb      	ldr	r3, [r7, #28]
 8001792:	f003 0307 	and.w	r3, r3, #7
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	fa02 f303 	lsl.w	r3, r2, r3
 800179c:	69ba      	ldr	r2, [r7, #24]
 800179e:	4313      	orrs	r3, r2
 80017a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	08da      	lsrs	r2, r3, #3
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	3208      	adds	r2, #8
 80017aa:	69b9      	ldr	r1, [r7, #24]
 80017ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	005b      	lsls	r3, r3, #1
 80017ba:	2203      	movs	r2, #3
 80017bc:	fa02 f303 	lsl.w	r3, r2, r3
 80017c0:	43db      	mvns	r3, r3
 80017c2:	69ba      	ldr	r2, [r7, #24]
 80017c4:	4013      	ands	r3, r2
 80017c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	f003 0203 	and.w	r2, r3, #3
 80017d0:	69fb      	ldr	r3, [r7, #28]
 80017d2:	005b      	lsls	r3, r3, #1
 80017d4:	fa02 f303 	lsl.w	r3, r2, r3
 80017d8:	69ba      	ldr	r2, [r7, #24]
 80017da:	4313      	orrs	r3, r2
 80017dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	69ba      	ldr	r2, [r7, #24]
 80017e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	f000 80c0 	beq.w	8001972 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017f2:	2300      	movs	r3, #0
 80017f4:	60fb      	str	r3, [r7, #12]
 80017f6:	4b66      	ldr	r3, [pc, #408]	; (8001990 <HAL_GPIO_Init+0x324>)
 80017f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017fa:	4a65      	ldr	r2, [pc, #404]	; (8001990 <HAL_GPIO_Init+0x324>)
 80017fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001800:	6453      	str	r3, [r2, #68]	; 0x44
 8001802:	4b63      	ldr	r3, [pc, #396]	; (8001990 <HAL_GPIO_Init+0x324>)
 8001804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001806:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800180a:	60fb      	str	r3, [r7, #12]
 800180c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800180e:	4a61      	ldr	r2, [pc, #388]	; (8001994 <HAL_GPIO_Init+0x328>)
 8001810:	69fb      	ldr	r3, [r7, #28]
 8001812:	089b      	lsrs	r3, r3, #2
 8001814:	3302      	adds	r3, #2
 8001816:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800181a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800181c:	69fb      	ldr	r3, [r7, #28]
 800181e:	f003 0303 	and.w	r3, r3, #3
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	220f      	movs	r2, #15
 8001826:	fa02 f303 	lsl.w	r3, r2, r3
 800182a:	43db      	mvns	r3, r3
 800182c:	69ba      	ldr	r2, [r7, #24]
 800182e:	4013      	ands	r3, r2
 8001830:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	4a58      	ldr	r2, [pc, #352]	; (8001998 <HAL_GPIO_Init+0x32c>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d037      	beq.n	80018aa <HAL_GPIO_Init+0x23e>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	4a57      	ldr	r2, [pc, #348]	; (800199c <HAL_GPIO_Init+0x330>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d031      	beq.n	80018a6 <HAL_GPIO_Init+0x23a>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	4a56      	ldr	r2, [pc, #344]	; (80019a0 <HAL_GPIO_Init+0x334>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d02b      	beq.n	80018a2 <HAL_GPIO_Init+0x236>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	4a55      	ldr	r2, [pc, #340]	; (80019a4 <HAL_GPIO_Init+0x338>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d025      	beq.n	800189e <HAL_GPIO_Init+0x232>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	4a54      	ldr	r2, [pc, #336]	; (80019a8 <HAL_GPIO_Init+0x33c>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d01f      	beq.n	800189a <HAL_GPIO_Init+0x22e>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	4a53      	ldr	r2, [pc, #332]	; (80019ac <HAL_GPIO_Init+0x340>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d019      	beq.n	8001896 <HAL_GPIO_Init+0x22a>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	4a52      	ldr	r2, [pc, #328]	; (80019b0 <HAL_GPIO_Init+0x344>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d013      	beq.n	8001892 <HAL_GPIO_Init+0x226>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4a51      	ldr	r2, [pc, #324]	; (80019b4 <HAL_GPIO_Init+0x348>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d00d      	beq.n	800188e <HAL_GPIO_Init+0x222>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4a50      	ldr	r2, [pc, #320]	; (80019b8 <HAL_GPIO_Init+0x34c>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d007      	beq.n	800188a <HAL_GPIO_Init+0x21e>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4a4f      	ldr	r2, [pc, #316]	; (80019bc <HAL_GPIO_Init+0x350>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d101      	bne.n	8001886 <HAL_GPIO_Init+0x21a>
 8001882:	2309      	movs	r3, #9
 8001884:	e012      	b.n	80018ac <HAL_GPIO_Init+0x240>
 8001886:	230a      	movs	r3, #10
 8001888:	e010      	b.n	80018ac <HAL_GPIO_Init+0x240>
 800188a:	2308      	movs	r3, #8
 800188c:	e00e      	b.n	80018ac <HAL_GPIO_Init+0x240>
 800188e:	2307      	movs	r3, #7
 8001890:	e00c      	b.n	80018ac <HAL_GPIO_Init+0x240>
 8001892:	2306      	movs	r3, #6
 8001894:	e00a      	b.n	80018ac <HAL_GPIO_Init+0x240>
 8001896:	2305      	movs	r3, #5
 8001898:	e008      	b.n	80018ac <HAL_GPIO_Init+0x240>
 800189a:	2304      	movs	r3, #4
 800189c:	e006      	b.n	80018ac <HAL_GPIO_Init+0x240>
 800189e:	2303      	movs	r3, #3
 80018a0:	e004      	b.n	80018ac <HAL_GPIO_Init+0x240>
 80018a2:	2302      	movs	r3, #2
 80018a4:	e002      	b.n	80018ac <HAL_GPIO_Init+0x240>
 80018a6:	2301      	movs	r3, #1
 80018a8:	e000      	b.n	80018ac <HAL_GPIO_Init+0x240>
 80018aa:	2300      	movs	r3, #0
 80018ac:	69fa      	ldr	r2, [r7, #28]
 80018ae:	f002 0203 	and.w	r2, r2, #3
 80018b2:	0092      	lsls	r2, r2, #2
 80018b4:	4093      	lsls	r3, r2
 80018b6:	69ba      	ldr	r2, [r7, #24]
 80018b8:	4313      	orrs	r3, r2
 80018ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018bc:	4935      	ldr	r1, [pc, #212]	; (8001994 <HAL_GPIO_Init+0x328>)
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	089b      	lsrs	r3, r3, #2
 80018c2:	3302      	adds	r3, #2
 80018c4:	69ba      	ldr	r2, [r7, #24]
 80018c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018ca:	4b3d      	ldr	r3, [pc, #244]	; (80019c0 <HAL_GPIO_Init+0x354>)
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	43db      	mvns	r3, r3
 80018d4:	69ba      	ldr	r2, [r7, #24]
 80018d6:	4013      	ands	r3, r2
 80018d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d003      	beq.n	80018ee <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80018e6:	69ba      	ldr	r2, [r7, #24]
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	4313      	orrs	r3, r2
 80018ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80018ee:	4a34      	ldr	r2, [pc, #208]	; (80019c0 <HAL_GPIO_Init+0x354>)
 80018f0:	69bb      	ldr	r3, [r7, #24]
 80018f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018f4:	4b32      	ldr	r3, [pc, #200]	; (80019c0 <HAL_GPIO_Init+0x354>)
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	43db      	mvns	r3, r3
 80018fe:	69ba      	ldr	r2, [r7, #24]
 8001900:	4013      	ands	r3, r2
 8001902:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800190c:	2b00      	cmp	r3, #0
 800190e:	d003      	beq.n	8001918 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001910:	69ba      	ldr	r2, [r7, #24]
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	4313      	orrs	r3, r2
 8001916:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001918:	4a29      	ldr	r2, [pc, #164]	; (80019c0 <HAL_GPIO_Init+0x354>)
 800191a:	69bb      	ldr	r3, [r7, #24]
 800191c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800191e:	4b28      	ldr	r3, [pc, #160]	; (80019c0 <HAL_GPIO_Init+0x354>)
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	43db      	mvns	r3, r3
 8001928:	69ba      	ldr	r2, [r7, #24]
 800192a:	4013      	ands	r3, r2
 800192c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001936:	2b00      	cmp	r3, #0
 8001938:	d003      	beq.n	8001942 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800193a:	69ba      	ldr	r2, [r7, #24]
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	4313      	orrs	r3, r2
 8001940:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001942:	4a1f      	ldr	r2, [pc, #124]	; (80019c0 <HAL_GPIO_Init+0x354>)
 8001944:	69bb      	ldr	r3, [r7, #24]
 8001946:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001948:	4b1d      	ldr	r3, [pc, #116]	; (80019c0 <HAL_GPIO_Init+0x354>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	43db      	mvns	r3, r3
 8001952:	69ba      	ldr	r2, [r7, #24]
 8001954:	4013      	ands	r3, r2
 8001956:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001960:	2b00      	cmp	r3, #0
 8001962:	d003      	beq.n	800196c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001964:	69ba      	ldr	r2, [r7, #24]
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	4313      	orrs	r3, r2
 800196a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800196c:	4a14      	ldr	r2, [pc, #80]	; (80019c0 <HAL_GPIO_Init+0x354>)
 800196e:	69bb      	ldr	r3, [r7, #24]
 8001970:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	3301      	adds	r3, #1
 8001976:	61fb      	str	r3, [r7, #28]
 8001978:	69fb      	ldr	r3, [r7, #28]
 800197a:	2b0f      	cmp	r3, #15
 800197c:	f67f ae84 	bls.w	8001688 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001980:	bf00      	nop
 8001982:	bf00      	nop
 8001984:	3724      	adds	r7, #36	; 0x24
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	40023800 	.word	0x40023800
 8001994:	40013800 	.word	0x40013800
 8001998:	40020000 	.word	0x40020000
 800199c:	40020400 	.word	0x40020400
 80019a0:	40020800 	.word	0x40020800
 80019a4:	40020c00 	.word	0x40020c00
 80019a8:	40021000 	.word	0x40021000
 80019ac:	40021400 	.word	0x40021400
 80019b0:	40021800 	.word	0x40021800
 80019b4:	40021c00 	.word	0x40021c00
 80019b8:	40022000 	.word	0x40022000
 80019bc:	40022400 	.word	0x40022400
 80019c0:	40013c00 	.word	0x40013c00

080019c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b083      	sub	sp, #12
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
 80019cc:	460b      	mov	r3, r1
 80019ce:	807b      	strh	r3, [r7, #2]
 80019d0:	4613      	mov	r3, r2
 80019d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019d4:	787b      	ldrb	r3, [r7, #1]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d003      	beq.n	80019e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019da:	887a      	ldrh	r2, [r7, #2]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80019e0:	e003      	b.n	80019ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80019e2:	887b      	ldrh	r3, [r7, #2]
 80019e4:	041a      	lsls	r2, r3, #16
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	619a      	str	r2, [r3, #24]
}
 80019ea:	bf00      	nop
 80019ec:	370c      	adds	r7, #12
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr
	...

080019f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b084      	sub	sp, #16
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d101      	bne.n	8001a0a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e12b      	b.n	8001c62 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d106      	bne.n	8001a24 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2200      	movs	r2, #0
 8001a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	f7ff f8ba 	bl	8000b98 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2224      	movs	r2, #36	; 0x24
 8001a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f022 0201 	bic.w	r2, r2, #1
 8001a3a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001a4a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001a5a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001a5c:	f003 face 	bl	8004ffc <HAL_RCC_GetPCLK1Freq>
 8001a60:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	4a81      	ldr	r2, [pc, #516]	; (8001c6c <HAL_I2C_Init+0x274>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d807      	bhi.n	8001a7c <HAL_I2C_Init+0x84>
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	4a80      	ldr	r2, [pc, #512]	; (8001c70 <HAL_I2C_Init+0x278>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	bf94      	ite	ls
 8001a74:	2301      	movls	r3, #1
 8001a76:	2300      	movhi	r3, #0
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	e006      	b.n	8001a8a <HAL_I2C_Init+0x92>
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	4a7d      	ldr	r2, [pc, #500]	; (8001c74 <HAL_I2C_Init+0x27c>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	bf94      	ite	ls
 8001a84:	2301      	movls	r3, #1
 8001a86:	2300      	movhi	r3, #0
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e0e7      	b.n	8001c62 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	4a78      	ldr	r2, [pc, #480]	; (8001c78 <HAL_I2C_Init+0x280>)
 8001a96:	fba2 2303 	umull	r2, r3, r2, r3
 8001a9a:	0c9b      	lsrs	r3, r3, #18
 8001a9c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	68ba      	ldr	r2, [r7, #8]
 8001aae:	430a      	orrs	r2, r1
 8001ab0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	6a1b      	ldr	r3, [r3, #32]
 8001ab8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	4a6a      	ldr	r2, [pc, #424]	; (8001c6c <HAL_I2C_Init+0x274>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d802      	bhi.n	8001acc <HAL_I2C_Init+0xd4>
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	3301      	adds	r3, #1
 8001aca:	e009      	b.n	8001ae0 <HAL_I2C_Init+0xe8>
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001ad2:	fb02 f303 	mul.w	r3, r2, r3
 8001ad6:	4a69      	ldr	r2, [pc, #420]	; (8001c7c <HAL_I2C_Init+0x284>)
 8001ad8:	fba2 2303 	umull	r2, r3, r2, r3
 8001adc:	099b      	lsrs	r3, r3, #6
 8001ade:	3301      	adds	r3, #1
 8001ae0:	687a      	ldr	r2, [r7, #4]
 8001ae2:	6812      	ldr	r2, [r2, #0]
 8001ae4:	430b      	orrs	r3, r1
 8001ae6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	69db      	ldr	r3, [r3, #28]
 8001aee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001af2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	495c      	ldr	r1, [pc, #368]	; (8001c6c <HAL_I2C_Init+0x274>)
 8001afc:	428b      	cmp	r3, r1
 8001afe:	d819      	bhi.n	8001b34 <HAL_I2C_Init+0x13c>
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	1e59      	subs	r1, r3, #1
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	005b      	lsls	r3, r3, #1
 8001b0a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b0e:	1c59      	adds	r1, r3, #1
 8001b10:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001b14:	400b      	ands	r3, r1
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d00a      	beq.n	8001b30 <HAL_I2C_Init+0x138>
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	1e59      	subs	r1, r3, #1
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	005b      	lsls	r3, r3, #1
 8001b24:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b28:	3301      	adds	r3, #1
 8001b2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b2e:	e051      	b.n	8001bd4 <HAL_I2C_Init+0x1dc>
 8001b30:	2304      	movs	r3, #4
 8001b32:	e04f      	b.n	8001bd4 <HAL_I2C_Init+0x1dc>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d111      	bne.n	8001b60 <HAL_I2C_Init+0x168>
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	1e58      	subs	r0, r3, #1
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6859      	ldr	r1, [r3, #4]
 8001b44:	460b      	mov	r3, r1
 8001b46:	005b      	lsls	r3, r3, #1
 8001b48:	440b      	add	r3, r1
 8001b4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b4e:	3301      	adds	r3, #1
 8001b50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	bf0c      	ite	eq
 8001b58:	2301      	moveq	r3, #1
 8001b5a:	2300      	movne	r3, #0
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	e012      	b.n	8001b86 <HAL_I2C_Init+0x18e>
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	1e58      	subs	r0, r3, #1
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6859      	ldr	r1, [r3, #4]
 8001b68:	460b      	mov	r3, r1
 8001b6a:	009b      	lsls	r3, r3, #2
 8001b6c:	440b      	add	r3, r1
 8001b6e:	0099      	lsls	r1, r3, #2
 8001b70:	440b      	add	r3, r1
 8001b72:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b76:	3301      	adds	r3, #1
 8001b78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	bf0c      	ite	eq
 8001b80:	2301      	moveq	r3, #1
 8001b82:	2300      	movne	r3, #0
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <HAL_I2C_Init+0x196>
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e022      	b.n	8001bd4 <HAL_I2C_Init+0x1dc>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d10e      	bne.n	8001bb4 <HAL_I2C_Init+0x1bc>
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	1e58      	subs	r0, r3, #1
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6859      	ldr	r1, [r3, #4]
 8001b9e:	460b      	mov	r3, r1
 8001ba0:	005b      	lsls	r3, r3, #1
 8001ba2:	440b      	add	r3, r1
 8001ba4:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ba8:	3301      	adds	r3, #1
 8001baa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001bb2:	e00f      	b.n	8001bd4 <HAL_I2C_Init+0x1dc>
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	1e58      	subs	r0, r3, #1
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6859      	ldr	r1, [r3, #4]
 8001bbc:	460b      	mov	r3, r1
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	440b      	add	r3, r1
 8001bc2:	0099      	lsls	r1, r3, #2
 8001bc4:	440b      	add	r3, r1
 8001bc6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bca:	3301      	adds	r3, #1
 8001bcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bd0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001bd4:	6879      	ldr	r1, [r7, #4]
 8001bd6:	6809      	ldr	r1, [r1, #0]
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	69da      	ldr	r2, [r3, #28]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6a1b      	ldr	r3, [r3, #32]
 8001bee:	431a      	orrs	r2, r3
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	430a      	orrs	r2, r1
 8001bf6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001c02:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001c06:	687a      	ldr	r2, [r7, #4]
 8001c08:	6911      	ldr	r1, [r2, #16]
 8001c0a:	687a      	ldr	r2, [r7, #4]
 8001c0c:	68d2      	ldr	r2, [r2, #12]
 8001c0e:	4311      	orrs	r1, r2
 8001c10:	687a      	ldr	r2, [r7, #4]
 8001c12:	6812      	ldr	r2, [r2, #0]
 8001c14:	430b      	orrs	r3, r1
 8001c16:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	68db      	ldr	r3, [r3, #12]
 8001c1e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	695a      	ldr	r2, [r3, #20]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	699b      	ldr	r3, [r3, #24]
 8001c2a:	431a      	orrs	r2, r3
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	430a      	orrs	r2, r1
 8001c32:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f042 0201 	orr.w	r2, r2, #1
 8001c42:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2200      	movs	r2, #0
 8001c48:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2220      	movs	r2, #32
 8001c4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2200      	movs	r2, #0
 8001c56:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001c60:	2300      	movs	r3, #0
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3710      	adds	r7, #16
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	000186a0 	.word	0x000186a0
 8001c70:	001e847f 	.word	0x001e847f
 8001c74:	003d08ff 	.word	0x003d08ff
 8001c78:	431bde83 	.word	0x431bde83
 8001c7c:	10624dd3 	.word	0x10624dd3

08001c80 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b088      	sub	sp, #32
 8001c84:	af02      	add	r7, sp, #8
 8001c86:	60f8      	str	r0, [r7, #12]
 8001c88:	607a      	str	r2, [r7, #4]
 8001c8a:	461a      	mov	r2, r3
 8001c8c:	460b      	mov	r3, r1
 8001c8e:	817b      	strh	r3, [r7, #10]
 8001c90:	4613      	mov	r3, r2
 8001c92:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001c94:	f7ff fb08 	bl	80012a8 <HAL_GetTick>
 8001c98:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	2b20      	cmp	r3, #32
 8001ca4:	f040 80e0 	bne.w	8001e68 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	9300      	str	r3, [sp, #0]
 8001cac:	2319      	movs	r3, #25
 8001cae:	2201      	movs	r2, #1
 8001cb0:	4970      	ldr	r1, [pc, #448]	; (8001e74 <HAL_I2C_Master_Transmit+0x1f4>)
 8001cb2:	68f8      	ldr	r0, [r7, #12]
 8001cb4:	f002 fa3c 	bl	8004130 <I2C_WaitOnFlagUntilTimeout>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d001      	beq.n	8001cc2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001cbe:	2302      	movs	r3, #2
 8001cc0:	e0d3      	b.n	8001e6a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d101      	bne.n	8001cd0 <HAL_I2C_Master_Transmit+0x50>
 8001ccc:	2302      	movs	r3, #2
 8001cce:	e0cc      	b.n	8001e6a <HAL_I2C_Master_Transmit+0x1ea>
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 0301 	and.w	r3, r3, #1
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d007      	beq.n	8001cf6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f042 0201 	orr.w	r2, r2, #1
 8001cf4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d04:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	2221      	movs	r2, #33	; 0x21
 8001d0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	2210      	movs	r2, #16
 8001d12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	687a      	ldr	r2, [r7, #4]
 8001d20:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	893a      	ldrh	r2, [r7, #8]
 8001d26:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d2c:	b29a      	uxth	r2, r3
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	4a50      	ldr	r2, [pc, #320]	; (8001e78 <HAL_I2C_Master_Transmit+0x1f8>)
 8001d36:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001d38:	8979      	ldrh	r1, [r7, #10]
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	6a3a      	ldr	r2, [r7, #32]
 8001d3e:	68f8      	ldr	r0, [r7, #12]
 8001d40:	f001 ffe4 	bl	8003d0c <I2C_MasterRequestWrite>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d001      	beq.n	8001d4e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e08d      	b.n	8001e6a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d4e:	2300      	movs	r3, #0
 8001d50:	613b      	str	r3, [r7, #16]
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	695b      	ldr	r3, [r3, #20]
 8001d58:	613b      	str	r3, [r7, #16]
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	699b      	ldr	r3, [r3, #24]
 8001d60:	613b      	str	r3, [r7, #16]
 8001d62:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001d64:	e066      	b.n	8001e34 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d66:	697a      	ldr	r2, [r7, #20]
 8001d68:	6a39      	ldr	r1, [r7, #32]
 8001d6a:	68f8      	ldr	r0, [r7, #12]
 8001d6c:	f002 fab6 	bl	80042dc <I2C_WaitOnTXEFlagUntilTimeout>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d00d      	beq.n	8001d92 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7a:	2b04      	cmp	r3, #4
 8001d7c:	d107      	bne.n	8001d8e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d8c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e06b      	b.n	8001e6a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d96:	781a      	ldrb	r2, [r3, #0]
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da2:	1c5a      	adds	r2, r3, #1
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dac:	b29b      	uxth	r3, r3
 8001dae:	3b01      	subs	r3, #1
 8001db0:	b29a      	uxth	r2, r3
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dba:	3b01      	subs	r3, #1
 8001dbc:	b29a      	uxth	r2, r3
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	695b      	ldr	r3, [r3, #20]
 8001dc8:	f003 0304 	and.w	r3, r3, #4
 8001dcc:	2b04      	cmp	r3, #4
 8001dce:	d11b      	bne.n	8001e08 <HAL_I2C_Master_Transmit+0x188>
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d017      	beq.n	8001e08 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ddc:	781a      	ldrb	r2, [r3, #0]
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de8:	1c5a      	adds	r2, r3, #1
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001df2:	b29b      	uxth	r3, r3
 8001df4:	3b01      	subs	r3, #1
 8001df6:	b29a      	uxth	r2, r3
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e00:	3b01      	subs	r3, #1
 8001e02:	b29a      	uxth	r2, r3
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e08:	697a      	ldr	r2, [r7, #20]
 8001e0a:	6a39      	ldr	r1, [r7, #32]
 8001e0c:	68f8      	ldr	r0, [r7, #12]
 8001e0e:	f002 faa6 	bl	800435e <I2C_WaitOnBTFFlagUntilTimeout>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d00d      	beq.n	8001e34 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1c:	2b04      	cmp	r3, #4
 8001e1e:	d107      	bne.n	8001e30 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e2e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	e01a      	b.n	8001e6a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d194      	bne.n	8001d66 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	2220      	movs	r2, #32
 8001e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	2200      	movs	r2, #0
 8001e58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001e64:	2300      	movs	r3, #0
 8001e66:	e000      	b.n	8001e6a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001e68:	2302      	movs	r3, #2
  }
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3718      	adds	r7, #24
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	00100002 	.word	0x00100002
 8001e78:	ffff0000 	.word	0xffff0000

08001e7c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b08c      	sub	sp, #48	; 0x30
 8001e80:	af02      	add	r7, sp, #8
 8001e82:	60f8      	str	r0, [r7, #12]
 8001e84:	4608      	mov	r0, r1
 8001e86:	4611      	mov	r1, r2
 8001e88:	461a      	mov	r2, r3
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	817b      	strh	r3, [r7, #10]
 8001e8e:	460b      	mov	r3, r1
 8001e90:	813b      	strh	r3, [r7, #8]
 8001e92:	4613      	mov	r3, r2
 8001e94:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001e96:	f7ff fa07 	bl	80012a8 <HAL_GetTick>
 8001e9a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ea2:	b2db      	uxtb	r3, r3
 8001ea4:	2b20      	cmp	r3, #32
 8001ea6:	f040 8208 	bne.w	80022ba <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eac:	9300      	str	r3, [sp, #0]
 8001eae:	2319      	movs	r3, #25
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	497b      	ldr	r1, [pc, #492]	; (80020a0 <HAL_I2C_Mem_Read+0x224>)
 8001eb4:	68f8      	ldr	r0, [r7, #12]
 8001eb6:	f002 f93b 	bl	8004130 <I2C_WaitOnFlagUntilTimeout>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d001      	beq.n	8001ec4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8001ec0:	2302      	movs	r3, #2
 8001ec2:	e1fb      	b.n	80022bc <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d101      	bne.n	8001ed2 <HAL_I2C_Mem_Read+0x56>
 8001ece:	2302      	movs	r3, #2
 8001ed0:	e1f4      	b.n	80022bc <HAL_I2C_Mem_Read+0x440>
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 0301 	and.w	r3, r3, #1
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d007      	beq.n	8001ef8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f042 0201 	orr.w	r2, r2, #1
 8001ef6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f06:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	2222      	movs	r2, #34	; 0x22
 8001f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	2240      	movs	r2, #64	; 0x40
 8001f14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001f22:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001f28:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f2e:	b29a      	uxth	r2, r3
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	4a5b      	ldr	r2, [pc, #364]	; (80020a4 <HAL_I2C_Mem_Read+0x228>)
 8001f38:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001f3a:	88f8      	ldrh	r0, [r7, #6]
 8001f3c:	893a      	ldrh	r2, [r7, #8]
 8001f3e:	8979      	ldrh	r1, [r7, #10]
 8001f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f42:	9301      	str	r3, [sp, #4]
 8001f44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f46:	9300      	str	r3, [sp, #0]
 8001f48:	4603      	mov	r3, r0
 8001f4a:	68f8      	ldr	r0, [r7, #12]
 8001f4c:	f001 ff60 	bl	8003e10 <I2C_RequestMemoryRead>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d001      	beq.n	8001f5a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e1b0      	b.n	80022bc <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d113      	bne.n	8001f8a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f62:	2300      	movs	r3, #0
 8001f64:	623b      	str	r3, [r7, #32]
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	695b      	ldr	r3, [r3, #20]
 8001f6c:	623b      	str	r3, [r7, #32]
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	699b      	ldr	r3, [r3, #24]
 8001f74:	623b      	str	r3, [r7, #32]
 8001f76:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f86:	601a      	str	r2, [r3, #0]
 8001f88:	e184      	b.n	8002294 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d11b      	bne.n	8001fca <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001fa0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	61fb      	str	r3, [r7, #28]
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	695b      	ldr	r3, [r3, #20]
 8001fac:	61fb      	str	r3, [r7, #28]
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	699b      	ldr	r3, [r3, #24]
 8001fb4:	61fb      	str	r3, [r7, #28]
 8001fb6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fc6:	601a      	str	r2, [r3, #0]
 8001fc8:	e164      	b.n	8002294 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fce:	2b02      	cmp	r3, #2
 8001fd0:	d11b      	bne.n	800200a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001fe0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ff0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	61bb      	str	r3, [r7, #24]
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	695b      	ldr	r3, [r3, #20]
 8001ffc:	61bb      	str	r3, [r7, #24]
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	699b      	ldr	r3, [r3, #24]
 8002004:	61bb      	str	r3, [r7, #24]
 8002006:	69bb      	ldr	r3, [r7, #24]
 8002008:	e144      	b.n	8002294 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800200a:	2300      	movs	r3, #0
 800200c:	617b      	str	r3, [r7, #20]
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	695b      	ldr	r3, [r3, #20]
 8002014:	617b      	str	r3, [r7, #20]
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	699b      	ldr	r3, [r3, #24]
 800201c:	617b      	str	r3, [r7, #20]
 800201e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002020:	e138      	b.n	8002294 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002026:	2b03      	cmp	r3, #3
 8002028:	f200 80f1 	bhi.w	800220e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002030:	2b01      	cmp	r3, #1
 8002032:	d123      	bne.n	800207c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002034:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002036:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002038:	68f8      	ldr	r0, [r7, #12]
 800203a:	f002 fa03 	bl	8004444 <I2C_WaitOnRXNEFlagUntilTimeout>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d001      	beq.n	8002048 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e139      	b.n	80022bc <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	691a      	ldr	r2, [r3, #16]
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002052:	b2d2      	uxtb	r2, r2
 8002054:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800205a:	1c5a      	adds	r2, r3, #1
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002064:	3b01      	subs	r3, #1
 8002066:	b29a      	uxth	r2, r3
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002070:	b29b      	uxth	r3, r3
 8002072:	3b01      	subs	r3, #1
 8002074:	b29a      	uxth	r2, r3
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	855a      	strh	r2, [r3, #42]	; 0x2a
 800207a:	e10b      	b.n	8002294 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002080:	2b02      	cmp	r3, #2
 8002082:	d14e      	bne.n	8002122 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002086:	9300      	str	r3, [sp, #0]
 8002088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800208a:	2200      	movs	r2, #0
 800208c:	4906      	ldr	r1, [pc, #24]	; (80020a8 <HAL_I2C_Mem_Read+0x22c>)
 800208e:	68f8      	ldr	r0, [r7, #12]
 8002090:	f002 f84e 	bl	8004130 <I2C_WaitOnFlagUntilTimeout>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d008      	beq.n	80020ac <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e10e      	b.n	80022bc <HAL_I2C_Mem_Read+0x440>
 800209e:	bf00      	nop
 80020a0:	00100002 	.word	0x00100002
 80020a4:	ffff0000 	.word	0xffff0000
 80020a8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	691a      	ldr	r2, [r3, #16]
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c6:	b2d2      	uxtb	r2, r2
 80020c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ce:	1c5a      	adds	r2, r3, #1
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020d8:	3b01      	subs	r3, #1
 80020da:	b29a      	uxth	r2, r3
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020e4:	b29b      	uxth	r3, r3
 80020e6:	3b01      	subs	r3, #1
 80020e8:	b29a      	uxth	r2, r3
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	691a      	ldr	r2, [r3, #16]
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f8:	b2d2      	uxtb	r2, r2
 80020fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002100:	1c5a      	adds	r2, r3, #1
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800210a:	3b01      	subs	r3, #1
 800210c:	b29a      	uxth	r2, r3
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002116:	b29b      	uxth	r3, r3
 8002118:	3b01      	subs	r3, #1
 800211a:	b29a      	uxth	r2, r3
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002120:	e0b8      	b.n	8002294 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002124:	9300      	str	r3, [sp, #0]
 8002126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002128:	2200      	movs	r2, #0
 800212a:	4966      	ldr	r1, [pc, #408]	; (80022c4 <HAL_I2C_Mem_Read+0x448>)
 800212c:	68f8      	ldr	r0, [r7, #12]
 800212e:	f001 ffff 	bl	8004130 <I2C_WaitOnFlagUntilTimeout>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d001      	beq.n	800213c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	e0bf      	b.n	80022bc <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800214a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	691a      	ldr	r2, [r3, #16]
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002156:	b2d2      	uxtb	r2, r2
 8002158:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800215e:	1c5a      	adds	r2, r3, #1
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002168:	3b01      	subs	r3, #1
 800216a:	b29a      	uxth	r2, r3
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002174:	b29b      	uxth	r3, r3
 8002176:	3b01      	subs	r3, #1
 8002178:	b29a      	uxth	r2, r3
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800217e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002180:	9300      	str	r3, [sp, #0]
 8002182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002184:	2200      	movs	r2, #0
 8002186:	494f      	ldr	r1, [pc, #316]	; (80022c4 <HAL_I2C_Mem_Read+0x448>)
 8002188:	68f8      	ldr	r0, [r7, #12]
 800218a:	f001 ffd1 	bl	8004130 <I2C_WaitOnFlagUntilTimeout>
 800218e:	4603      	mov	r3, r0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d001      	beq.n	8002198 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	e091      	b.n	80022bc <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	691a      	ldr	r2, [r3, #16]
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b2:	b2d2      	uxtb	r2, r2
 80021b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ba:	1c5a      	adds	r2, r3, #1
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021c4:	3b01      	subs	r3, #1
 80021c6:	b29a      	uxth	r2, r3
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021d0:	b29b      	uxth	r3, r3
 80021d2:	3b01      	subs	r3, #1
 80021d4:	b29a      	uxth	r2, r3
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	691a      	ldr	r2, [r3, #16]
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e4:	b2d2      	uxtb	r2, r2
 80021e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ec:	1c5a      	adds	r2, r3, #1
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021f6:	3b01      	subs	r3, #1
 80021f8:	b29a      	uxth	r2, r3
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002202:	b29b      	uxth	r3, r3
 8002204:	3b01      	subs	r3, #1
 8002206:	b29a      	uxth	r2, r3
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800220c:	e042      	b.n	8002294 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800220e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002210:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002212:	68f8      	ldr	r0, [r7, #12]
 8002214:	f002 f916 	bl	8004444 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d001      	beq.n	8002222 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e04c      	b.n	80022bc <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	691a      	ldr	r2, [r3, #16]
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800222c:	b2d2      	uxtb	r2, r2
 800222e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002234:	1c5a      	adds	r2, r3, #1
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800223e:	3b01      	subs	r3, #1
 8002240:	b29a      	uxth	r2, r3
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800224a:	b29b      	uxth	r3, r3
 800224c:	3b01      	subs	r3, #1
 800224e:	b29a      	uxth	r2, r3
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	695b      	ldr	r3, [r3, #20]
 800225a:	f003 0304 	and.w	r3, r3, #4
 800225e:	2b04      	cmp	r3, #4
 8002260:	d118      	bne.n	8002294 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	691a      	ldr	r2, [r3, #16]
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800226c:	b2d2      	uxtb	r2, r2
 800226e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002274:	1c5a      	adds	r2, r3, #1
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800227e:	3b01      	subs	r3, #1
 8002280:	b29a      	uxth	r2, r3
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800228a:	b29b      	uxth	r3, r3
 800228c:	3b01      	subs	r3, #1
 800228e:	b29a      	uxth	r2, r3
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002298:	2b00      	cmp	r3, #0
 800229a:	f47f aec2 	bne.w	8002022 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	2220      	movs	r2, #32
 80022a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	2200      	movs	r2, #0
 80022aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	2200      	movs	r2, #0
 80022b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80022b6:	2300      	movs	r3, #0
 80022b8:	e000      	b.n	80022bc <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80022ba:	2302      	movs	r3, #2
  }
}
 80022bc:	4618      	mov	r0, r3
 80022be:	3728      	adds	r7, #40	; 0x28
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	00010004 	.word	0x00010004

080022c8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b08a      	sub	sp, #40	; 0x28
 80022cc:	af02      	add	r7, sp, #8
 80022ce:	60f8      	str	r0, [r7, #12]
 80022d0:	607a      	str	r2, [r7, #4]
 80022d2:	603b      	str	r3, [r7, #0]
 80022d4:	460b      	mov	r3, r1
 80022d6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80022d8:	f7fe ffe6 	bl	80012a8 <HAL_GetTick>
 80022dc:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80022de:	2300      	movs	r3, #0
 80022e0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	2b20      	cmp	r3, #32
 80022ec:	f040 8111 	bne.w	8002512 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80022f0:	69fb      	ldr	r3, [r7, #28]
 80022f2:	9300      	str	r3, [sp, #0]
 80022f4:	2319      	movs	r3, #25
 80022f6:	2201      	movs	r2, #1
 80022f8:	4988      	ldr	r1, [pc, #544]	; (800251c <HAL_I2C_IsDeviceReady+0x254>)
 80022fa:	68f8      	ldr	r0, [r7, #12]
 80022fc:	f001 ff18 	bl	8004130 <I2C_WaitOnFlagUntilTimeout>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d001      	beq.n	800230a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002306:	2302      	movs	r3, #2
 8002308:	e104      	b.n	8002514 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002310:	2b01      	cmp	r3, #1
 8002312:	d101      	bne.n	8002318 <HAL_I2C_IsDeviceReady+0x50>
 8002314:	2302      	movs	r3, #2
 8002316:	e0fd      	b.n	8002514 <HAL_I2C_IsDeviceReady+0x24c>
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	2201      	movs	r2, #1
 800231c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 0301 	and.w	r3, r3, #1
 800232a:	2b01      	cmp	r3, #1
 800232c:	d007      	beq.n	800233e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f042 0201 	orr.w	r2, r2, #1
 800233c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800234c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	2224      	movs	r2, #36	; 0x24
 8002352:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	2200      	movs	r2, #0
 800235a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	4a70      	ldr	r2, [pc, #448]	; (8002520 <HAL_I2C_IsDeviceReady+0x258>)
 8002360:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002370:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	9300      	str	r3, [sp, #0]
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	2200      	movs	r2, #0
 800237a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800237e:	68f8      	ldr	r0, [r7, #12]
 8002380:	f001 fed6 	bl	8004130 <I2C_WaitOnFlagUntilTimeout>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	d00d      	beq.n	80023a6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002394:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002398:	d103      	bne.n	80023a2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023a0:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80023a2:	2303      	movs	r3, #3
 80023a4:	e0b6      	b.n	8002514 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80023a6:	897b      	ldrh	r3, [r7, #10]
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	461a      	mov	r2, r3
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80023b4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80023b6:	f7fe ff77 	bl	80012a8 <HAL_GetTick>
 80023ba:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	695b      	ldr	r3, [r3, #20]
 80023c2:	f003 0302 	and.w	r3, r3, #2
 80023c6:	2b02      	cmp	r3, #2
 80023c8:	bf0c      	ite	eq
 80023ca:	2301      	moveq	r3, #1
 80023cc:	2300      	movne	r3, #0
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	695b      	ldr	r3, [r3, #20]
 80023d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023e0:	bf0c      	ite	eq
 80023e2:	2301      	moveq	r3, #1
 80023e4:	2300      	movne	r3, #0
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80023ea:	e025      	b.n	8002438 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80023ec:	f7fe ff5c 	bl	80012a8 <HAL_GetTick>
 80023f0:	4602      	mov	r2, r0
 80023f2:	69fb      	ldr	r3, [r7, #28]
 80023f4:	1ad3      	subs	r3, r2, r3
 80023f6:	683a      	ldr	r2, [r7, #0]
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d302      	bcc.n	8002402 <HAL_I2C_IsDeviceReady+0x13a>
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d103      	bne.n	800240a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	22a0      	movs	r2, #160	; 0xa0
 8002406:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	695b      	ldr	r3, [r3, #20]
 8002410:	f003 0302 	and.w	r3, r3, #2
 8002414:	2b02      	cmp	r3, #2
 8002416:	bf0c      	ite	eq
 8002418:	2301      	moveq	r3, #1
 800241a:	2300      	movne	r3, #0
 800241c:	b2db      	uxtb	r3, r3
 800241e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	695b      	ldr	r3, [r3, #20]
 8002426:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800242a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800242e:	bf0c      	ite	eq
 8002430:	2301      	moveq	r3, #1
 8002432:	2300      	movne	r3, #0
 8002434:	b2db      	uxtb	r3, r3
 8002436:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800243e:	b2db      	uxtb	r3, r3
 8002440:	2ba0      	cmp	r3, #160	; 0xa0
 8002442:	d005      	beq.n	8002450 <HAL_I2C_IsDeviceReady+0x188>
 8002444:	7dfb      	ldrb	r3, [r7, #23]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d102      	bne.n	8002450 <HAL_I2C_IsDeviceReady+0x188>
 800244a:	7dbb      	ldrb	r3, [r7, #22]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d0cd      	beq.n	80023ec <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	2220      	movs	r2, #32
 8002454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	695b      	ldr	r3, [r3, #20]
 800245e:	f003 0302 	and.w	r3, r3, #2
 8002462:	2b02      	cmp	r3, #2
 8002464:	d129      	bne.n	80024ba <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002474:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002476:	2300      	movs	r3, #0
 8002478:	613b      	str	r3, [r7, #16]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	695b      	ldr	r3, [r3, #20]
 8002480:	613b      	str	r3, [r7, #16]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	699b      	ldr	r3, [r3, #24]
 8002488:	613b      	str	r3, [r7, #16]
 800248a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800248c:	69fb      	ldr	r3, [r7, #28]
 800248e:	9300      	str	r3, [sp, #0]
 8002490:	2319      	movs	r3, #25
 8002492:	2201      	movs	r2, #1
 8002494:	4921      	ldr	r1, [pc, #132]	; (800251c <HAL_I2C_IsDeviceReady+0x254>)
 8002496:	68f8      	ldr	r0, [r7, #12]
 8002498:	f001 fe4a 	bl	8004130 <I2C_WaitOnFlagUntilTimeout>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d001      	beq.n	80024a6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e036      	b.n	8002514 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2220      	movs	r2, #32
 80024aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2200      	movs	r2, #0
 80024b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80024b6:	2300      	movs	r3, #0
 80024b8:	e02c      	b.n	8002514 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024c8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80024d2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80024d4:	69fb      	ldr	r3, [r7, #28]
 80024d6:	9300      	str	r3, [sp, #0]
 80024d8:	2319      	movs	r3, #25
 80024da:	2201      	movs	r2, #1
 80024dc:	490f      	ldr	r1, [pc, #60]	; (800251c <HAL_I2C_IsDeviceReady+0x254>)
 80024de:	68f8      	ldr	r0, [r7, #12]
 80024e0:	f001 fe26 	bl	8004130 <I2C_WaitOnFlagUntilTimeout>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d001      	beq.n	80024ee <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e012      	b.n	8002514 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80024ee:	69bb      	ldr	r3, [r7, #24]
 80024f0:	3301      	adds	r3, #1
 80024f2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80024f4:	69ba      	ldr	r2, [r7, #24]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	429a      	cmp	r2, r3
 80024fa:	f4ff af32 	bcc.w	8002362 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	2220      	movs	r2, #32
 8002502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	2200      	movs	r2, #0
 800250a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e000      	b.n	8002514 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002512:	2302      	movs	r3, #2
  }
}
 8002514:	4618      	mov	r0, r3
 8002516:	3720      	adds	r7, #32
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}
 800251c:	00100002 	.word	0x00100002
 8002520:	ffff0000 	.word	0xffff0000

08002524 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b088      	sub	sp, #32
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800252c:	2300      	movs	r3, #0
 800252e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800253c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002544:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800254c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800254e:	7bfb      	ldrb	r3, [r7, #15]
 8002550:	2b10      	cmp	r3, #16
 8002552:	d003      	beq.n	800255c <HAL_I2C_EV_IRQHandler+0x38>
 8002554:	7bfb      	ldrb	r3, [r7, #15]
 8002556:	2b40      	cmp	r3, #64	; 0x40
 8002558:	f040 80c1 	bne.w	80026de <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	699b      	ldr	r3, [r3, #24]
 8002562:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	695b      	ldr	r3, [r3, #20]
 800256a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800256c:	69fb      	ldr	r3, [r7, #28]
 800256e:	f003 0301 	and.w	r3, r3, #1
 8002572:	2b00      	cmp	r3, #0
 8002574:	d10d      	bne.n	8002592 <HAL_I2C_EV_IRQHandler+0x6e>
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800257c:	d003      	beq.n	8002586 <HAL_I2C_EV_IRQHandler+0x62>
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002584:	d101      	bne.n	800258a <HAL_I2C_EV_IRQHandler+0x66>
 8002586:	2301      	movs	r3, #1
 8002588:	e000      	b.n	800258c <HAL_I2C_EV_IRQHandler+0x68>
 800258a:	2300      	movs	r3, #0
 800258c:	2b01      	cmp	r3, #1
 800258e:	f000 8132 	beq.w	80027f6 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	f003 0301 	and.w	r3, r3, #1
 8002598:	2b00      	cmp	r3, #0
 800259a:	d00c      	beq.n	80025b6 <HAL_I2C_EV_IRQHandler+0x92>
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	0a5b      	lsrs	r3, r3, #9
 80025a0:	f003 0301 	and.w	r3, r3, #1
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d006      	beq.n	80025b6 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80025a8:	6878      	ldr	r0, [r7, #4]
 80025aa:	f001 ffd0 	bl	800454e <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f000 fd91 	bl	80030d6 <I2C_Master_SB>
 80025b4:	e092      	b.n	80026dc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80025b6:	69fb      	ldr	r3, [r7, #28]
 80025b8:	08db      	lsrs	r3, r3, #3
 80025ba:	f003 0301 	and.w	r3, r3, #1
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d009      	beq.n	80025d6 <HAL_I2C_EV_IRQHandler+0xb2>
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	0a5b      	lsrs	r3, r3, #9
 80025c6:	f003 0301 	and.w	r3, r3, #1
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d003      	beq.n	80025d6 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f000 fe07 	bl	80031e2 <I2C_Master_ADD10>
 80025d4:	e082      	b.n	80026dc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	085b      	lsrs	r3, r3, #1
 80025da:	f003 0301 	and.w	r3, r3, #1
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d009      	beq.n	80025f6 <HAL_I2C_EV_IRQHandler+0xd2>
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	0a5b      	lsrs	r3, r3, #9
 80025e6:	f003 0301 	and.w	r3, r3, #1
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d003      	beq.n	80025f6 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f000 fe21 	bl	8003236 <I2C_Master_ADDR>
 80025f4:	e072      	b.n	80026dc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80025f6:	69bb      	ldr	r3, [r7, #24]
 80025f8:	089b      	lsrs	r3, r3, #2
 80025fa:	f003 0301 	and.w	r3, r3, #1
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d03b      	beq.n	800267a <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800260c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002610:	f000 80f3 	beq.w	80027fa <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002614:	69fb      	ldr	r3, [r7, #28]
 8002616:	09db      	lsrs	r3, r3, #7
 8002618:	f003 0301 	and.w	r3, r3, #1
 800261c:	2b00      	cmp	r3, #0
 800261e:	d00f      	beq.n	8002640 <HAL_I2C_EV_IRQHandler+0x11c>
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	0a9b      	lsrs	r3, r3, #10
 8002624:	f003 0301 	and.w	r3, r3, #1
 8002628:	2b00      	cmp	r3, #0
 800262a:	d009      	beq.n	8002640 <HAL_I2C_EV_IRQHandler+0x11c>
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	089b      	lsrs	r3, r3, #2
 8002630:	f003 0301 	and.w	r3, r3, #1
 8002634:	2b00      	cmp	r3, #0
 8002636:	d103      	bne.n	8002640 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002638:	6878      	ldr	r0, [r7, #4]
 800263a:	f000 fa01 	bl	8002a40 <I2C_MasterTransmit_TXE>
 800263e:	e04d      	b.n	80026dc <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	089b      	lsrs	r3, r3, #2
 8002644:	f003 0301 	and.w	r3, r3, #1
 8002648:	2b00      	cmp	r3, #0
 800264a:	f000 80d6 	beq.w	80027fa <HAL_I2C_EV_IRQHandler+0x2d6>
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	0a5b      	lsrs	r3, r3, #9
 8002652:	f003 0301 	and.w	r3, r3, #1
 8002656:	2b00      	cmp	r3, #0
 8002658:	f000 80cf 	beq.w	80027fa <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800265c:	7bbb      	ldrb	r3, [r7, #14]
 800265e:	2b21      	cmp	r3, #33	; 0x21
 8002660:	d103      	bne.n	800266a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f000 fa88 	bl	8002b78 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002668:	e0c7      	b.n	80027fa <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800266a:	7bfb      	ldrb	r3, [r7, #15]
 800266c:	2b40      	cmp	r3, #64	; 0x40
 800266e:	f040 80c4 	bne.w	80027fa <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f000 faf6 	bl	8002c64 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002678:	e0bf      	b.n	80027fa <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002684:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002688:	f000 80b7 	beq.w	80027fa <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800268c:	69fb      	ldr	r3, [r7, #28]
 800268e:	099b      	lsrs	r3, r3, #6
 8002690:	f003 0301 	and.w	r3, r3, #1
 8002694:	2b00      	cmp	r3, #0
 8002696:	d00f      	beq.n	80026b8 <HAL_I2C_EV_IRQHandler+0x194>
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	0a9b      	lsrs	r3, r3, #10
 800269c:	f003 0301 	and.w	r3, r3, #1
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d009      	beq.n	80026b8 <HAL_I2C_EV_IRQHandler+0x194>
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	089b      	lsrs	r3, r3, #2
 80026a8:	f003 0301 	and.w	r3, r3, #1
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d103      	bne.n	80026b8 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	f000 fb6b 	bl	8002d8c <I2C_MasterReceive_RXNE>
 80026b6:	e011      	b.n	80026dc <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	089b      	lsrs	r3, r3, #2
 80026bc:	f003 0301 	and.w	r3, r3, #1
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	f000 809a 	beq.w	80027fa <HAL_I2C_EV_IRQHandler+0x2d6>
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	0a5b      	lsrs	r3, r3, #9
 80026ca:	f003 0301 	and.w	r3, r3, #1
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	f000 8093 	beq.w	80027fa <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80026d4:	6878      	ldr	r0, [r7, #4]
 80026d6:	f000 fc14 	bl	8002f02 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80026da:	e08e      	b.n	80027fa <HAL_I2C_EV_IRQHandler+0x2d6>
 80026dc:	e08d      	b.n	80027fa <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d004      	beq.n	80026f0 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	695b      	ldr	r3, [r3, #20]
 80026ec:	61fb      	str	r3, [r7, #28]
 80026ee:	e007      	b.n	8002700 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	699b      	ldr	r3, [r3, #24]
 80026f6:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	695b      	ldr	r3, [r3, #20]
 80026fe:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002700:	69fb      	ldr	r3, [r7, #28]
 8002702:	085b      	lsrs	r3, r3, #1
 8002704:	f003 0301 	and.w	r3, r3, #1
 8002708:	2b00      	cmp	r3, #0
 800270a:	d012      	beq.n	8002732 <HAL_I2C_EV_IRQHandler+0x20e>
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	0a5b      	lsrs	r3, r3, #9
 8002710:	f003 0301 	and.w	r3, r3, #1
 8002714:	2b00      	cmp	r3, #0
 8002716:	d00c      	beq.n	8002732 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271c:	2b00      	cmp	r3, #0
 800271e:	d003      	beq.n	8002728 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	699b      	ldr	r3, [r3, #24]
 8002726:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002728:	69b9      	ldr	r1, [r7, #24]
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f000 ffd2 	bl	80036d4 <I2C_Slave_ADDR>
 8002730:	e066      	b.n	8002800 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	091b      	lsrs	r3, r3, #4
 8002736:	f003 0301 	and.w	r3, r3, #1
 800273a:	2b00      	cmp	r3, #0
 800273c:	d009      	beq.n	8002752 <HAL_I2C_EV_IRQHandler+0x22e>
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	0a5b      	lsrs	r3, r3, #9
 8002742:	f003 0301 	and.w	r3, r3, #1
 8002746:	2b00      	cmp	r3, #0
 8002748:	d003      	beq.n	8002752 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f001 f80c 	bl	8003768 <I2C_Slave_STOPF>
 8002750:	e056      	b.n	8002800 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002752:	7bbb      	ldrb	r3, [r7, #14]
 8002754:	2b21      	cmp	r3, #33	; 0x21
 8002756:	d002      	beq.n	800275e <HAL_I2C_EV_IRQHandler+0x23a>
 8002758:	7bbb      	ldrb	r3, [r7, #14]
 800275a:	2b29      	cmp	r3, #41	; 0x29
 800275c:	d125      	bne.n	80027aa <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800275e:	69fb      	ldr	r3, [r7, #28]
 8002760:	09db      	lsrs	r3, r3, #7
 8002762:	f003 0301 	and.w	r3, r3, #1
 8002766:	2b00      	cmp	r3, #0
 8002768:	d00f      	beq.n	800278a <HAL_I2C_EV_IRQHandler+0x266>
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	0a9b      	lsrs	r3, r3, #10
 800276e:	f003 0301 	and.w	r3, r3, #1
 8002772:	2b00      	cmp	r3, #0
 8002774:	d009      	beq.n	800278a <HAL_I2C_EV_IRQHandler+0x266>
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	089b      	lsrs	r3, r3, #2
 800277a:	f003 0301 	and.w	r3, r3, #1
 800277e:	2b00      	cmp	r3, #0
 8002780:	d103      	bne.n	800278a <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f000 fee8 	bl	8003558 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002788:	e039      	b.n	80027fe <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	089b      	lsrs	r3, r3, #2
 800278e:	f003 0301 	and.w	r3, r3, #1
 8002792:	2b00      	cmp	r3, #0
 8002794:	d033      	beq.n	80027fe <HAL_I2C_EV_IRQHandler+0x2da>
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	0a5b      	lsrs	r3, r3, #9
 800279a:	f003 0301 	and.w	r3, r3, #1
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d02d      	beq.n	80027fe <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f000 ff15 	bl	80035d2 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80027a8:	e029      	b.n	80027fe <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	099b      	lsrs	r3, r3, #6
 80027ae:	f003 0301 	and.w	r3, r3, #1
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d00f      	beq.n	80027d6 <HAL_I2C_EV_IRQHandler+0x2b2>
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	0a9b      	lsrs	r3, r3, #10
 80027ba:	f003 0301 	and.w	r3, r3, #1
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d009      	beq.n	80027d6 <HAL_I2C_EV_IRQHandler+0x2b2>
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	089b      	lsrs	r3, r3, #2
 80027c6:	f003 0301 	and.w	r3, r3, #1
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d103      	bne.n	80027d6 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f000 ff20 	bl	8003614 <I2C_SlaveReceive_RXNE>
 80027d4:	e014      	b.n	8002800 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	089b      	lsrs	r3, r3, #2
 80027da:	f003 0301 	and.w	r3, r3, #1
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d00e      	beq.n	8002800 <HAL_I2C_EV_IRQHandler+0x2dc>
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	0a5b      	lsrs	r3, r3, #9
 80027e6:	f003 0301 	and.w	r3, r3, #1
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d008      	beq.n	8002800 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f000 ff4e 	bl	8003690 <I2C_SlaveReceive_BTF>
 80027f4:	e004      	b.n	8002800 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80027f6:	bf00      	nop
 80027f8:	e002      	b.n	8002800 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80027fa:	bf00      	nop
 80027fc:	e000      	b.n	8002800 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80027fe:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002800:	3720      	adds	r7, #32
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}

08002806 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002806:	b580      	push	{r7, lr}
 8002808:	b08a      	sub	sp, #40	; 0x28
 800280a:	af00      	add	r7, sp, #0
 800280c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	695b      	ldr	r3, [r3, #20]
 8002814:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800281e:	2300      	movs	r3, #0
 8002820:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002828:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800282a:	6a3b      	ldr	r3, [r7, #32]
 800282c:	0a1b      	lsrs	r3, r3, #8
 800282e:	f003 0301 	and.w	r3, r3, #1
 8002832:	2b00      	cmp	r3, #0
 8002834:	d00e      	beq.n	8002854 <HAL_I2C_ER_IRQHandler+0x4e>
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	0a1b      	lsrs	r3, r3, #8
 800283a:	f003 0301 	and.w	r3, r3, #1
 800283e:	2b00      	cmp	r3, #0
 8002840:	d008      	beq.n	8002854 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8002842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002844:	f043 0301 	orr.w	r3, r3, #1
 8002848:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002852:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002854:	6a3b      	ldr	r3, [r7, #32]
 8002856:	0a5b      	lsrs	r3, r3, #9
 8002858:	f003 0301 	and.w	r3, r3, #1
 800285c:	2b00      	cmp	r3, #0
 800285e:	d00e      	beq.n	800287e <HAL_I2C_ER_IRQHandler+0x78>
 8002860:	69fb      	ldr	r3, [r7, #28]
 8002862:	0a1b      	lsrs	r3, r3, #8
 8002864:	f003 0301 	and.w	r3, r3, #1
 8002868:	2b00      	cmp	r3, #0
 800286a:	d008      	beq.n	800287e <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800286c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286e:	f043 0302 	orr.w	r3, r3, #2
 8002872:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f46f 7200 	mvn.w	r2, #512	; 0x200
 800287c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800287e:	6a3b      	ldr	r3, [r7, #32]
 8002880:	0a9b      	lsrs	r3, r3, #10
 8002882:	f003 0301 	and.w	r3, r3, #1
 8002886:	2b00      	cmp	r3, #0
 8002888:	d03f      	beq.n	800290a <HAL_I2C_ER_IRQHandler+0x104>
 800288a:	69fb      	ldr	r3, [r7, #28]
 800288c:	0a1b      	lsrs	r3, r3, #8
 800288e:	f003 0301 	and.w	r3, r3, #1
 8002892:	2b00      	cmp	r3, #0
 8002894:	d039      	beq.n	800290a <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8002896:	7efb      	ldrb	r3, [r7, #27]
 8002898:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800289e:	b29b      	uxth	r3, r3
 80028a0:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028a8:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ae:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80028b0:	7ebb      	ldrb	r3, [r7, #26]
 80028b2:	2b20      	cmp	r3, #32
 80028b4:	d112      	bne.n	80028dc <HAL_I2C_ER_IRQHandler+0xd6>
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d10f      	bne.n	80028dc <HAL_I2C_ER_IRQHandler+0xd6>
 80028bc:	7cfb      	ldrb	r3, [r7, #19]
 80028be:	2b21      	cmp	r3, #33	; 0x21
 80028c0:	d008      	beq.n	80028d4 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80028c2:	7cfb      	ldrb	r3, [r7, #19]
 80028c4:	2b29      	cmp	r3, #41	; 0x29
 80028c6:	d005      	beq.n	80028d4 <HAL_I2C_ER_IRQHandler+0xce>
 80028c8:	7cfb      	ldrb	r3, [r7, #19]
 80028ca:	2b28      	cmp	r3, #40	; 0x28
 80028cc:	d106      	bne.n	80028dc <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2b21      	cmp	r3, #33	; 0x21
 80028d2:	d103      	bne.n	80028dc <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	f001 f877 	bl	80039c8 <I2C_Slave_AF>
 80028da:	e016      	b.n	800290a <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80028e4:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80028e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e8:	f043 0304 	orr.w	r3, r3, #4
 80028ec:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80028ee:	7efb      	ldrb	r3, [r7, #27]
 80028f0:	2b10      	cmp	r3, #16
 80028f2:	d002      	beq.n	80028fa <HAL_I2C_ER_IRQHandler+0xf4>
 80028f4:	7efb      	ldrb	r3, [r7, #27]
 80028f6:	2b40      	cmp	r3, #64	; 0x40
 80028f8:	d107      	bne.n	800290a <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002908:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800290a:	6a3b      	ldr	r3, [r7, #32]
 800290c:	0adb      	lsrs	r3, r3, #11
 800290e:	f003 0301 	and.w	r3, r3, #1
 8002912:	2b00      	cmp	r3, #0
 8002914:	d00e      	beq.n	8002934 <HAL_I2C_ER_IRQHandler+0x12e>
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	0a1b      	lsrs	r3, r3, #8
 800291a:	f003 0301 	and.w	r3, r3, #1
 800291e:	2b00      	cmp	r3, #0
 8002920:	d008      	beq.n	8002934 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8002922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002924:	f043 0308 	orr.w	r3, r3, #8
 8002928:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8002932:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8002934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002936:	2b00      	cmp	r3, #0
 8002938:	d008      	beq.n	800294c <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800293e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002940:	431a      	orrs	r2, r3
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f001 f8ae 	bl	8003aa8 <I2C_ITError>
  }
}
 800294c:	bf00      	nop
 800294e:	3728      	adds	r7, #40	; 0x28
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}

08002954 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800295c:	bf00      	nop
 800295e:	370c      	adds	r7, #12
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr

08002968 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002970:	bf00      	nop
 8002972:	370c      	adds	r7, #12
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr

0800297c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800297c:	b480      	push	{r7}
 800297e:	b083      	sub	sp, #12
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002984:	bf00      	nop
 8002986:	370c      	adds	r7, #12
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr

08002990 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002990:	b480      	push	{r7}
 8002992:	b083      	sub	sp, #12
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002998:	bf00      	nop
 800299a:	370c      	adds	r7, #12
 800299c:	46bd      	mov	sp, r7
 800299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a2:	4770      	bx	lr

080029a4 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
 80029ac:	460b      	mov	r3, r1
 80029ae:	70fb      	strb	r3, [r7, #3]
 80029b0:	4613      	mov	r3, r2
 80029b2:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80029b4:	bf00      	nop
 80029b6:	370c      	adds	r7, #12
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr

080029c0 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b083      	sub	sp, #12
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80029c8:	bf00      	nop
 80029ca:	370c      	adds	r7, #12
 80029cc:	46bd      	mov	sp, r7
 80029ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d2:	4770      	bx	lr

080029d4 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b083      	sub	sp, #12
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80029dc:	bf00      	nop
 80029de:	370c      	adds	r7, #12
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr

080029e8 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b083      	sub	sp, #12
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80029f0:	bf00      	nop
 80029f2:	370c      	adds	r7, #12
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr

080029fc <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002a04:	bf00      	nop
 8002a06:	370c      	adds	r7, #12
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr

08002a10 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b083      	sub	sp, #12
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002a18:	bf00      	nop
 8002a1a:	370c      	adds	r7, #12
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a22:	4770      	bx	lr

08002a24 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b083      	sub	sp, #12
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a32:	b2db      	uxtb	r3, r3
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	370c      	adds	r7, #12
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr

08002a40 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b084      	sub	sp, #16
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a4e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a56:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a5c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d150      	bne.n	8002b08 <I2C_MasterTransmit_TXE+0xc8>
 8002a66:	7bfb      	ldrb	r3, [r7, #15]
 8002a68:	2b21      	cmp	r3, #33	; 0x21
 8002a6a:	d14d      	bne.n	8002b08 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	2b08      	cmp	r3, #8
 8002a70:	d01d      	beq.n	8002aae <I2C_MasterTransmit_TXE+0x6e>
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	2b20      	cmp	r3, #32
 8002a76:	d01a      	beq.n	8002aae <I2C_MasterTransmit_TXE+0x6e>
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002a7e:	d016      	beq.n	8002aae <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	685a      	ldr	r2, [r3, #4]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002a8e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2211      	movs	r2, #17
 8002a94:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2220      	movs	r2, #32
 8002aa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f7ff ff54 	bl	8002954 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002aac:	e060      	b.n	8002b70 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	685a      	ldr	r2, [r3, #4]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002abc:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002acc:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2220      	movs	r2, #32
 8002ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	2b40      	cmp	r3, #64	; 0x40
 8002ae6:	d107      	bne.n	8002af8 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2200      	movs	r2, #0
 8002aec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002af0:	6878      	ldr	r0, [r7, #4]
 8002af2:	f7ff ff6f 	bl	80029d4 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002af6:	e03b      	b.n	8002b70 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2200      	movs	r2, #0
 8002afc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002b00:	6878      	ldr	r0, [r7, #4]
 8002b02:	f7ff ff27 	bl	8002954 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002b06:	e033      	b.n	8002b70 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002b08:	7bfb      	ldrb	r3, [r7, #15]
 8002b0a:	2b21      	cmp	r3, #33	; 0x21
 8002b0c:	d005      	beq.n	8002b1a <I2C_MasterTransmit_TXE+0xda>
 8002b0e:	7bbb      	ldrb	r3, [r7, #14]
 8002b10:	2b40      	cmp	r3, #64	; 0x40
 8002b12:	d12d      	bne.n	8002b70 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002b14:	7bfb      	ldrb	r3, [r7, #15]
 8002b16:	2b22      	cmp	r3, #34	; 0x22
 8002b18:	d12a      	bne.n	8002b70 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b1e:	b29b      	uxth	r3, r3
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d108      	bne.n	8002b36 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	685a      	ldr	r2, [r3, #4]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b32:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002b34:	e01c      	b.n	8002b70 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	2b40      	cmp	r3, #64	; 0x40
 8002b40:	d103      	bne.n	8002b4a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f000 f88e 	bl	8002c64 <I2C_MemoryTransmit_TXE_BTF>
}
 8002b48:	e012      	b.n	8002b70 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4e:	781a      	ldrb	r2, [r3, #0]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b5a:	1c5a      	adds	r2, r3, #1
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b64:	b29b      	uxth	r3, r3
 8002b66:	3b01      	subs	r3, #1
 8002b68:	b29a      	uxth	r2, r3
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002b6e:	e7ff      	b.n	8002b70 <I2C_MasterTransmit_TXE+0x130>
 8002b70:	bf00      	nop
 8002b72:	3710      	adds	r7, #16
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}

08002b78 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b084      	sub	sp, #16
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b84:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	2b21      	cmp	r3, #33	; 0x21
 8002b90:	d164      	bne.n	8002c5c <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b96:	b29b      	uxth	r3, r3
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d012      	beq.n	8002bc2 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba0:	781a      	ldrb	r2, [r3, #0]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bac:	1c5a      	adds	r2, r3, #1
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bb6:	b29b      	uxth	r3, r3
 8002bb8:	3b01      	subs	r3, #1
 8002bba:	b29a      	uxth	r2, r3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8002bc0:	e04c      	b.n	8002c5c <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2b08      	cmp	r3, #8
 8002bc6:	d01d      	beq.n	8002c04 <I2C_MasterTransmit_BTF+0x8c>
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2b20      	cmp	r3, #32
 8002bcc:	d01a      	beq.n	8002c04 <I2C_MasterTransmit_BTF+0x8c>
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002bd4:	d016      	beq.n	8002c04 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	685a      	ldr	r2, [r3, #4]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002be4:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2211      	movs	r2, #17
 8002bea:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2220      	movs	r2, #32
 8002bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	f7ff fea9 	bl	8002954 <HAL_I2C_MasterTxCpltCallback>
}
 8002c02:	e02b      	b.n	8002c5c <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	685a      	ldr	r2, [r3, #4]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002c12:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c22:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2200      	movs	r2, #0
 8002c28:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2220      	movs	r2, #32
 8002c2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	2b40      	cmp	r3, #64	; 0x40
 8002c3c:	d107      	bne.n	8002c4e <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2200      	movs	r2, #0
 8002c42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f7ff fec4 	bl	80029d4 <HAL_I2C_MemTxCpltCallback>
}
 8002c4c:	e006      	b.n	8002c5c <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2200      	movs	r2, #0
 8002c52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f7ff fe7c 	bl	8002954 <HAL_I2C_MasterTxCpltCallback>
}
 8002c5c:	bf00      	nop
 8002c5e:	3710      	adds	r7, #16
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}

08002c64 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b084      	sub	sp, #16
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c72:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d11d      	bne.n	8002cb8 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d10b      	bne.n	8002c9c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c88:	b2da      	uxtb	r2, r3
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c94:	1c9a      	adds	r2, r3, #2
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8002c9a:	e073      	b.n	8002d84 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ca0:	b29b      	uxth	r3, r3
 8002ca2:	121b      	asrs	r3, r3, #8
 8002ca4:	b2da      	uxtb	r2, r3
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cb0:	1c5a      	adds	r2, r3, #1
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002cb6:	e065      	b.n	8002d84 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d10b      	bne.n	8002cd8 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cc4:	b2da      	uxtb	r2, r3
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cd0:	1c5a      	adds	r2, r3, #1
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002cd6:	e055      	b.n	8002d84 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cdc:	2b02      	cmp	r3, #2
 8002cde:	d151      	bne.n	8002d84 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8002ce0:	7bfb      	ldrb	r3, [r7, #15]
 8002ce2:	2b22      	cmp	r3, #34	; 0x22
 8002ce4:	d10d      	bne.n	8002d02 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002cf4:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cfa:	1c5a      	adds	r2, r3, #1
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002d00:	e040      	b.n	8002d84 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d06:	b29b      	uxth	r3, r3
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d015      	beq.n	8002d38 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8002d0c:	7bfb      	ldrb	r3, [r7, #15]
 8002d0e:	2b21      	cmp	r3, #33	; 0x21
 8002d10:	d112      	bne.n	8002d38 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d16:	781a      	ldrb	r2, [r3, #0]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d22:	1c5a      	adds	r2, r3, #1
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	3b01      	subs	r3, #1
 8002d30:	b29a      	uxth	r2, r3
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002d36:	e025      	b.n	8002d84 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d3c:	b29b      	uxth	r3, r3
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d120      	bne.n	8002d84 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8002d42:	7bfb      	ldrb	r3, [r7, #15]
 8002d44:	2b21      	cmp	r3, #33	; 0x21
 8002d46:	d11d      	bne.n	8002d84 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	685a      	ldr	r2, [r3, #4]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002d56:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d66:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2220      	movs	r2, #32
 8002d72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	f7ff fe28 	bl	80029d4 <HAL_I2C_MemTxCpltCallback>
}
 8002d84:	bf00      	nop
 8002d86:	3710      	adds	r7, #16
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}

08002d8c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b084      	sub	sp, #16
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	2b22      	cmp	r3, #34	; 0x22
 8002d9e:	f040 80ac 	bne.w	8002efa <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002da6:	b29b      	uxth	r3, r3
 8002da8:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2b03      	cmp	r3, #3
 8002dae:	d921      	bls.n	8002df4 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	691a      	ldr	r2, [r3, #16]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dba:	b2d2      	uxtb	r2, r2
 8002dbc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc2:	1c5a      	adds	r2, r3, #1
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dcc:	b29b      	uxth	r3, r3
 8002dce:	3b01      	subs	r3, #1
 8002dd0:	b29a      	uxth	r2, r3
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dda:	b29b      	uxth	r3, r3
 8002ddc:	2b03      	cmp	r3, #3
 8002dde:	f040 808c 	bne.w	8002efa <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	685a      	ldr	r2, [r3, #4]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002df0:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8002df2:	e082      	b.n	8002efa <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002df8:	2b02      	cmp	r3, #2
 8002dfa:	d075      	beq.n	8002ee8 <I2C_MasterReceive_RXNE+0x15c>
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d002      	beq.n	8002e08 <I2C_MasterReceive_RXNE+0x7c>
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d16f      	bne.n	8002ee8 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002e08:	6878      	ldr	r0, [r7, #4]
 8002e0a:	f001 fae9 	bl	80043e0 <I2C_WaitOnSTOPRequestThroughIT>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d142      	bne.n	8002e9a <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e22:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	685a      	ldr	r2, [r3, #4]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002e32:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	691a      	ldr	r2, [r3, #16]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e3e:	b2d2      	uxtb	r2, r2
 8002e40:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e46:	1c5a      	adds	r2, r3, #1
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e50:	b29b      	uxth	r3, r3
 8002e52:	3b01      	subs	r3, #1
 8002e54:	b29a      	uxth	r2, r3
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2220      	movs	r2, #32
 8002e5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	2b40      	cmp	r3, #64	; 0x40
 8002e6c:	d10a      	bne.n	8002e84 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2200      	movs	r2, #0
 8002e72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	f7ff fdb3 	bl	80029e8 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002e82:	e03a      	b.n	8002efa <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2200      	movs	r2, #0
 8002e88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2212      	movs	r2, #18
 8002e90:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f7ff fd68 	bl	8002968 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002e98:	e02f      	b.n	8002efa <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	685a      	ldr	r2, [r3, #4]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002ea8:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	691a      	ldr	r2, [r3, #16]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb4:	b2d2      	uxtb	r2, r2
 8002eb6:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ebc:	1c5a      	adds	r2, r3, #1
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ec6:	b29b      	uxth	r3, r3
 8002ec8:	3b01      	subs	r3, #1
 8002eca:	b29a      	uxth	r2, r3
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2220      	movs	r2, #32
 8002ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2200      	movs	r2, #0
 8002edc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8002ee0:	6878      	ldr	r0, [r7, #4]
 8002ee2:	f7ff fd8b 	bl	80029fc <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002ee6:	e008      	b.n	8002efa <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	685a      	ldr	r2, [r3, #4]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ef6:	605a      	str	r2, [r3, #4]
}
 8002ef8:	e7ff      	b.n	8002efa <I2C_MasterReceive_RXNE+0x16e>
 8002efa:	bf00      	nop
 8002efc:	3710      	adds	r7, #16
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}

08002f02 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002f02:	b580      	push	{r7, lr}
 8002f04:	b084      	sub	sp, #16
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f0e:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f14:	b29b      	uxth	r3, r3
 8002f16:	2b04      	cmp	r3, #4
 8002f18:	d11b      	bne.n	8002f52 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	685a      	ldr	r2, [r3, #4]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f28:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	691a      	ldr	r2, [r3, #16]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f34:	b2d2      	uxtb	r2, r2
 8002f36:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3c:	1c5a      	adds	r2, r3, #1
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f46:	b29b      	uxth	r3, r3
 8002f48:	3b01      	subs	r3, #1
 8002f4a:	b29a      	uxth	r2, r3
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8002f50:	e0bd      	b.n	80030ce <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f56:	b29b      	uxth	r3, r3
 8002f58:	2b03      	cmp	r3, #3
 8002f5a:	d129      	bne.n	8002fb0 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	685a      	ldr	r2, [r3, #4]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f6a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2b04      	cmp	r3, #4
 8002f70:	d00a      	beq.n	8002f88 <I2C_MasterReceive_BTF+0x86>
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2b02      	cmp	r3, #2
 8002f76:	d007      	beq.n	8002f88 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f86:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	691a      	ldr	r2, [r3, #16]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f92:	b2d2      	uxtb	r2, r2
 8002f94:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9a:	1c5a      	adds	r2, r3, #1
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fa4:	b29b      	uxth	r3, r3
 8002fa6:	3b01      	subs	r3, #1
 8002fa8:	b29a      	uxth	r2, r3
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002fae:	e08e      	b.n	80030ce <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fb4:	b29b      	uxth	r3, r3
 8002fb6:	2b02      	cmp	r3, #2
 8002fb8:	d176      	bne.n	80030a8 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d002      	beq.n	8002fc6 <I2C_MasterReceive_BTF+0xc4>
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2b10      	cmp	r3, #16
 8002fc4:	d108      	bne.n	8002fd8 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fd4:	601a      	str	r2, [r3, #0]
 8002fd6:	e019      	b.n	800300c <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2b04      	cmp	r3, #4
 8002fdc:	d002      	beq.n	8002fe4 <I2C_MasterReceive_BTF+0xe2>
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2b02      	cmp	r3, #2
 8002fe2:	d108      	bne.n	8002ff6 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002ff2:	601a      	str	r2, [r3, #0]
 8002ff4:	e00a      	b.n	800300c <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2b10      	cmp	r3, #16
 8002ffa:	d007      	beq.n	800300c <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800300a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	691a      	ldr	r2, [r3, #16]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003016:	b2d2      	uxtb	r2, r2
 8003018:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800301e:	1c5a      	adds	r2, r3, #1
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003028:	b29b      	uxth	r3, r3
 800302a:	3b01      	subs	r3, #1
 800302c:	b29a      	uxth	r2, r3
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	691a      	ldr	r2, [r3, #16]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303c:	b2d2      	uxtb	r2, r2
 800303e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003044:	1c5a      	adds	r2, r3, #1
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800304e:	b29b      	uxth	r3, r3
 8003050:	3b01      	subs	r3, #1
 8003052:	b29a      	uxth	r2, r3
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	685a      	ldr	r2, [r3, #4]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003066:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2220      	movs	r2, #32
 800306c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003076:	b2db      	uxtb	r3, r3
 8003078:	2b40      	cmp	r3, #64	; 0x40
 800307a:	d10a      	bne.n	8003092 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2200      	movs	r2, #0
 8003080:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2200      	movs	r2, #0
 8003088:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f7ff fcac 	bl	80029e8 <HAL_I2C_MemRxCpltCallback>
}
 8003090:	e01d      	b.n	80030ce <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2200      	movs	r2, #0
 8003096:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2212      	movs	r2, #18
 800309e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	f7ff fc61 	bl	8002968 <HAL_I2C_MasterRxCpltCallback>
}
 80030a6:	e012      	b.n	80030ce <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	691a      	ldr	r2, [r3, #16]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b2:	b2d2      	uxtb	r2, r2
 80030b4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ba:	1c5a      	adds	r2, r3, #1
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030c4:	b29b      	uxth	r3, r3
 80030c6:	3b01      	subs	r3, #1
 80030c8:	b29a      	uxth	r2, r3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80030ce:	bf00      	nop
 80030d0:	3710      	adds	r7, #16
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}

080030d6 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80030d6:	b480      	push	{r7}
 80030d8:	b083      	sub	sp, #12
 80030da:	af00      	add	r7, sp, #0
 80030dc:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	2b40      	cmp	r3, #64	; 0x40
 80030e8:	d117      	bne.n	800311a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d109      	bne.n	8003106 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	461a      	mov	r2, r3
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003102:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003104:	e067      	b.n	80031d6 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800310a:	b2db      	uxtb	r3, r3
 800310c:	f043 0301 	orr.w	r3, r3, #1
 8003110:	b2da      	uxtb	r2, r3
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	611a      	str	r2, [r3, #16]
}
 8003118:	e05d      	b.n	80031d6 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	691b      	ldr	r3, [r3, #16]
 800311e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003122:	d133      	bne.n	800318c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800312a:	b2db      	uxtb	r3, r3
 800312c:	2b21      	cmp	r3, #33	; 0x21
 800312e:	d109      	bne.n	8003144 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003134:	b2db      	uxtb	r3, r3
 8003136:	461a      	mov	r2, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003140:	611a      	str	r2, [r3, #16]
 8003142:	e008      	b.n	8003156 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003148:	b2db      	uxtb	r3, r3
 800314a:	f043 0301 	orr.w	r3, r3, #1
 800314e:	b2da      	uxtb	r2, r3
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800315a:	2b00      	cmp	r3, #0
 800315c:	d004      	beq.n	8003168 <I2C_Master_SB+0x92>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003162:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003164:	2b00      	cmp	r3, #0
 8003166:	d108      	bne.n	800317a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800316c:	2b00      	cmp	r3, #0
 800316e:	d032      	beq.n	80031d6 <I2C_Master_SB+0x100>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003174:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003176:	2b00      	cmp	r3, #0
 8003178:	d02d      	beq.n	80031d6 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	685a      	ldr	r2, [r3, #4]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003188:	605a      	str	r2, [r3, #4]
}
 800318a:	e024      	b.n	80031d6 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003190:	2b00      	cmp	r3, #0
 8003192:	d10e      	bne.n	80031b2 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003198:	b29b      	uxth	r3, r3
 800319a:	11db      	asrs	r3, r3, #7
 800319c:	b2db      	uxtb	r3, r3
 800319e:	f003 0306 	and.w	r3, r3, #6
 80031a2:	b2db      	uxtb	r3, r3
 80031a4:	f063 030f 	orn	r3, r3, #15
 80031a8:	b2da      	uxtb	r2, r3
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	611a      	str	r2, [r3, #16]
}
 80031b0:	e011      	b.n	80031d6 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d10d      	bne.n	80031d6 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031be:	b29b      	uxth	r3, r3
 80031c0:	11db      	asrs	r3, r3, #7
 80031c2:	b2db      	uxtb	r3, r3
 80031c4:	f003 0306 	and.w	r3, r3, #6
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	f063 030e 	orn	r3, r3, #14
 80031ce:	b2da      	uxtb	r2, r3
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	611a      	str	r2, [r3, #16]
}
 80031d6:	bf00      	nop
 80031d8:	370c      	adds	r7, #12
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr

080031e2 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80031e2:	b480      	push	{r7}
 80031e4:	b083      	sub	sp, #12
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ee:	b2da      	uxtb	r2, r3
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d004      	beq.n	8003208 <I2C_Master_ADD10+0x26>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003202:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003204:	2b00      	cmp	r3, #0
 8003206:	d108      	bne.n	800321a <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800320c:	2b00      	cmp	r3, #0
 800320e:	d00c      	beq.n	800322a <I2C_Master_ADD10+0x48>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003214:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003216:	2b00      	cmp	r3, #0
 8003218:	d007      	beq.n	800322a <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	685a      	ldr	r2, [r3, #4]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003228:	605a      	str	r2, [r3, #4]
  }
}
 800322a:	bf00      	nop
 800322c:	370c      	adds	r7, #12
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr

08003236 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003236:	b480      	push	{r7}
 8003238:	b091      	sub	sp, #68	; 0x44
 800323a:	af00      	add	r7, sp, #0
 800323c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003244:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800324c:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003252:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800325a:	b2db      	uxtb	r3, r3
 800325c:	2b22      	cmp	r3, #34	; 0x22
 800325e:	f040 8169 	bne.w	8003534 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003266:	2b00      	cmp	r3, #0
 8003268:	d10f      	bne.n	800328a <I2C_Master_ADDR+0x54>
 800326a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800326e:	2b40      	cmp	r3, #64	; 0x40
 8003270:	d10b      	bne.n	800328a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003272:	2300      	movs	r3, #0
 8003274:	633b      	str	r3, [r7, #48]	; 0x30
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	695b      	ldr	r3, [r3, #20]
 800327c:	633b      	str	r3, [r7, #48]	; 0x30
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	699b      	ldr	r3, [r3, #24]
 8003284:	633b      	str	r3, [r7, #48]	; 0x30
 8003286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003288:	e160      	b.n	800354c <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800328e:	2b00      	cmp	r3, #0
 8003290:	d11d      	bne.n	80032ce <I2C_Master_ADDR+0x98>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	691b      	ldr	r3, [r3, #16]
 8003296:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800329a:	d118      	bne.n	80032ce <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800329c:	2300      	movs	r3, #0
 800329e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	695b      	ldr	r3, [r3, #20]
 80032a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	699b      	ldr	r3, [r3, #24]
 80032ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032c0:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032c6:	1c5a      	adds	r2, r3, #1
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	651a      	str	r2, [r3, #80]	; 0x50
 80032cc:	e13e      	b.n	800354c <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032d2:	b29b      	uxth	r3, r3
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d113      	bne.n	8003300 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032d8:	2300      	movs	r3, #0
 80032da:	62bb      	str	r3, [r7, #40]	; 0x28
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	695b      	ldr	r3, [r3, #20]
 80032e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	699b      	ldr	r3, [r3, #24]
 80032ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80032ec:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032fc:	601a      	str	r2, [r3, #0]
 80032fe:	e115      	b.n	800352c <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003304:	b29b      	uxth	r3, r3
 8003306:	2b01      	cmp	r3, #1
 8003308:	f040 808a 	bne.w	8003420 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800330c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800330e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003312:	d137      	bne.n	8003384 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003322:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800332e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003332:	d113      	bne.n	800335c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003342:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003344:	2300      	movs	r3, #0
 8003346:	627b      	str	r3, [r7, #36]	; 0x24
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	695b      	ldr	r3, [r3, #20]
 800334e:	627b      	str	r3, [r7, #36]	; 0x24
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	699b      	ldr	r3, [r3, #24]
 8003356:	627b      	str	r3, [r7, #36]	; 0x24
 8003358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800335a:	e0e7      	b.n	800352c <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800335c:	2300      	movs	r3, #0
 800335e:	623b      	str	r3, [r7, #32]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	695b      	ldr	r3, [r3, #20]
 8003366:	623b      	str	r3, [r7, #32]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	699b      	ldr	r3, [r3, #24]
 800336e:	623b      	str	r3, [r7, #32]
 8003370:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003380:	601a      	str	r2, [r3, #0]
 8003382:	e0d3      	b.n	800352c <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003386:	2b08      	cmp	r3, #8
 8003388:	d02e      	beq.n	80033e8 <I2C_Master_ADDR+0x1b2>
 800338a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800338c:	2b20      	cmp	r3, #32
 800338e:	d02b      	beq.n	80033e8 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003390:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003392:	2b12      	cmp	r3, #18
 8003394:	d102      	bne.n	800339c <I2C_Master_ADDR+0x166>
 8003396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003398:	2b01      	cmp	r3, #1
 800339a:	d125      	bne.n	80033e8 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800339c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800339e:	2b04      	cmp	r3, #4
 80033a0:	d00e      	beq.n	80033c0 <I2C_Master_ADDR+0x18a>
 80033a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033a4:	2b02      	cmp	r3, #2
 80033a6:	d00b      	beq.n	80033c0 <I2C_Master_ADDR+0x18a>
 80033a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033aa:	2b10      	cmp	r3, #16
 80033ac:	d008      	beq.n	80033c0 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033bc:	601a      	str	r2, [r3, #0]
 80033be:	e007      	b.n	80033d0 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80033ce:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033d0:	2300      	movs	r3, #0
 80033d2:	61fb      	str	r3, [r7, #28]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	695b      	ldr	r3, [r3, #20]
 80033da:	61fb      	str	r3, [r7, #28]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	699b      	ldr	r3, [r3, #24]
 80033e2:	61fb      	str	r3, [r7, #28]
 80033e4:	69fb      	ldr	r3, [r7, #28]
 80033e6:	e0a1      	b.n	800352c <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033f6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033f8:	2300      	movs	r3, #0
 80033fa:	61bb      	str	r3, [r7, #24]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	695b      	ldr	r3, [r3, #20]
 8003402:	61bb      	str	r3, [r7, #24]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	699b      	ldr	r3, [r3, #24]
 800340a:	61bb      	str	r3, [r7, #24]
 800340c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800341c:	601a      	str	r2, [r3, #0]
 800341e:	e085      	b.n	800352c <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003424:	b29b      	uxth	r3, r3
 8003426:	2b02      	cmp	r3, #2
 8003428:	d14d      	bne.n	80034c6 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800342a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800342c:	2b04      	cmp	r3, #4
 800342e:	d016      	beq.n	800345e <I2C_Master_ADDR+0x228>
 8003430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003432:	2b02      	cmp	r3, #2
 8003434:	d013      	beq.n	800345e <I2C_Master_ADDR+0x228>
 8003436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003438:	2b10      	cmp	r3, #16
 800343a:	d010      	beq.n	800345e <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800344a:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800345a:	601a      	str	r2, [r3, #0]
 800345c:	e007      	b.n	800346e <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800346c:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003478:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800347c:	d117      	bne.n	80034ae <I2C_Master_ADDR+0x278>
 800347e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003480:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003484:	d00b      	beq.n	800349e <I2C_Master_ADDR+0x268>
 8003486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003488:	2b01      	cmp	r3, #1
 800348a:	d008      	beq.n	800349e <I2C_Master_ADDR+0x268>
 800348c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800348e:	2b08      	cmp	r3, #8
 8003490:	d005      	beq.n	800349e <I2C_Master_ADDR+0x268>
 8003492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003494:	2b10      	cmp	r3, #16
 8003496:	d002      	beq.n	800349e <I2C_Master_ADDR+0x268>
 8003498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800349a:	2b20      	cmp	r3, #32
 800349c:	d107      	bne.n	80034ae <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	685a      	ldr	r2, [r3, #4]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80034ac:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034ae:	2300      	movs	r3, #0
 80034b0:	617b      	str	r3, [r7, #20]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	695b      	ldr	r3, [r3, #20]
 80034b8:	617b      	str	r3, [r7, #20]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	699b      	ldr	r3, [r3, #24]
 80034c0:	617b      	str	r3, [r7, #20]
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	e032      	b.n	800352c <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80034d4:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034e4:	d117      	bne.n	8003516 <I2C_Master_ADDR+0x2e0>
 80034e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034e8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80034ec:	d00b      	beq.n	8003506 <I2C_Master_ADDR+0x2d0>
 80034ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d008      	beq.n	8003506 <I2C_Master_ADDR+0x2d0>
 80034f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034f6:	2b08      	cmp	r3, #8
 80034f8:	d005      	beq.n	8003506 <I2C_Master_ADDR+0x2d0>
 80034fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034fc:	2b10      	cmp	r3, #16
 80034fe:	d002      	beq.n	8003506 <I2C_Master_ADDR+0x2d0>
 8003500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003502:	2b20      	cmp	r3, #32
 8003504:	d107      	bne.n	8003516 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	685a      	ldr	r2, [r3, #4]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003514:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003516:	2300      	movs	r3, #0
 8003518:	613b      	str	r3, [r7, #16]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	695b      	ldr	r3, [r3, #20]
 8003520:	613b      	str	r3, [r7, #16]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	699b      	ldr	r3, [r3, #24]
 8003528:	613b      	str	r3, [r7, #16]
 800352a:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2200      	movs	r2, #0
 8003530:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003532:	e00b      	b.n	800354c <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003534:	2300      	movs	r3, #0
 8003536:	60fb      	str	r3, [r7, #12]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	695b      	ldr	r3, [r3, #20]
 800353e:	60fb      	str	r3, [r7, #12]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	699b      	ldr	r3, [r3, #24]
 8003546:	60fb      	str	r3, [r7, #12]
 8003548:	68fb      	ldr	r3, [r7, #12]
}
 800354a:	e7ff      	b.n	800354c <I2C_Master_ADDR+0x316>
 800354c:	bf00      	nop
 800354e:	3744      	adds	r7, #68	; 0x44
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr

08003558 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b084      	sub	sp, #16
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003566:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800356c:	b29b      	uxth	r3, r3
 800356e:	2b00      	cmp	r3, #0
 8003570:	d02b      	beq.n	80035ca <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003576:	781a      	ldrb	r2, [r3, #0]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003582:	1c5a      	adds	r2, r3, #1
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800358c:	b29b      	uxth	r3, r3
 800358e:	3b01      	subs	r3, #1
 8003590:	b29a      	uxth	r2, r3
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800359a:	b29b      	uxth	r3, r3
 800359c:	2b00      	cmp	r3, #0
 800359e:	d114      	bne.n	80035ca <I2C_SlaveTransmit_TXE+0x72>
 80035a0:	7bfb      	ldrb	r3, [r7, #15]
 80035a2:	2b29      	cmp	r3, #41	; 0x29
 80035a4:	d111      	bne.n	80035ca <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	685a      	ldr	r2, [r3, #4]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035b4:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2221      	movs	r2, #33	; 0x21
 80035ba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2228      	movs	r2, #40	; 0x28
 80035c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f7ff f9d9 	bl	800297c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80035ca:	bf00      	nop
 80035cc:	3710      	adds	r7, #16
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}

080035d2 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80035d2:	b480      	push	{r7}
 80035d4:	b083      	sub	sp, #12
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035de:	b29b      	uxth	r3, r3
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d011      	beq.n	8003608 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e8:	781a      	ldrb	r2, [r3, #0]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f4:	1c5a      	adds	r2, r3, #1
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035fe:	b29b      	uxth	r3, r3
 8003600:	3b01      	subs	r3, #1
 8003602:	b29a      	uxth	r2, r3
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003608:	bf00      	nop
 800360a:	370c      	adds	r7, #12
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr

08003614 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b084      	sub	sp, #16
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003622:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003628:	b29b      	uxth	r3, r3
 800362a:	2b00      	cmp	r3, #0
 800362c:	d02c      	beq.n	8003688 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	691a      	ldr	r2, [r3, #16]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003638:	b2d2      	uxtb	r2, r2
 800363a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003640:	1c5a      	adds	r2, r3, #1
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800364a:	b29b      	uxth	r3, r3
 800364c:	3b01      	subs	r3, #1
 800364e:	b29a      	uxth	r2, r3
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003658:	b29b      	uxth	r3, r3
 800365a:	2b00      	cmp	r3, #0
 800365c:	d114      	bne.n	8003688 <I2C_SlaveReceive_RXNE+0x74>
 800365e:	7bfb      	ldrb	r3, [r7, #15]
 8003660:	2b2a      	cmp	r3, #42	; 0x2a
 8003662:	d111      	bne.n	8003688 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	685a      	ldr	r2, [r3, #4]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003672:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2222      	movs	r2, #34	; 0x22
 8003678:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2228      	movs	r2, #40	; 0x28
 800367e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f7ff f984 	bl	8002990 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003688:	bf00      	nop
 800368a:	3710      	adds	r7, #16
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}

08003690 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003690:	b480      	push	{r7}
 8003692:	b083      	sub	sp, #12
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800369c:	b29b      	uxth	r3, r3
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d012      	beq.n	80036c8 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	691a      	ldr	r2, [r3, #16]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ac:	b2d2      	uxtb	r2, r2
 80036ae:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b4:	1c5a      	adds	r2, r3, #1
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036be:	b29b      	uxth	r3, r3
 80036c0:	3b01      	subs	r3, #1
 80036c2:	b29a      	uxth	r2, r3
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80036c8:	bf00      	nop
 80036ca:	370c      	adds	r7, #12
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr

080036d4 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b084      	sub	sp, #16
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
 80036dc:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80036de:	2300      	movs	r3, #0
 80036e0:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80036ee:	2b28      	cmp	r3, #40	; 0x28
 80036f0:	d127      	bne.n	8003742 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	685a      	ldr	r2, [r3, #4]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003700:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	089b      	lsrs	r3, r3, #2
 8003706:	f003 0301 	and.w	r3, r3, #1
 800370a:	2b00      	cmp	r3, #0
 800370c:	d101      	bne.n	8003712 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800370e:	2301      	movs	r3, #1
 8003710:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	09db      	lsrs	r3, r3, #7
 8003716:	f003 0301 	and.w	r3, r3, #1
 800371a:	2b00      	cmp	r3, #0
 800371c:	d103      	bne.n	8003726 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	68db      	ldr	r3, [r3, #12]
 8003722:	81bb      	strh	r3, [r7, #12]
 8003724:	e002      	b.n	800372c <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	699b      	ldr	r3, [r3, #24]
 800372a:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2200      	movs	r2, #0
 8003730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003734:	89ba      	ldrh	r2, [r7, #12]
 8003736:	7bfb      	ldrb	r3, [r7, #15]
 8003738:	4619      	mov	r1, r3
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f7ff f932 	bl	80029a4 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003740:	e00e      	b.n	8003760 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003742:	2300      	movs	r3, #0
 8003744:	60bb      	str	r3, [r7, #8]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	695b      	ldr	r3, [r3, #20]
 800374c:	60bb      	str	r3, [r7, #8]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	699b      	ldr	r3, [r3, #24]
 8003754:	60bb      	str	r3, [r7, #8]
 8003756:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2200      	movs	r2, #0
 800375c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8003760:	bf00      	nop
 8003762:	3710      	adds	r7, #16
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}

08003768 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b084      	sub	sp, #16
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003776:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	685a      	ldr	r2, [r3, #4]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003786:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003788:	2300      	movs	r3, #0
 800378a:	60bb      	str	r3, [r7, #8]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	695b      	ldr	r3, [r3, #20]
 8003792:	60bb      	str	r3, [r7, #8]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f042 0201 	orr.w	r2, r2, #1
 80037a2:	601a      	str	r2, [r3, #0]
 80037a4:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037b4:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037c4:	d172      	bne.n	80038ac <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80037c6:	7bfb      	ldrb	r3, [r7, #15]
 80037c8:	2b22      	cmp	r3, #34	; 0x22
 80037ca:	d002      	beq.n	80037d2 <I2C_Slave_STOPF+0x6a>
 80037cc:	7bfb      	ldrb	r3, [r7, #15]
 80037ce:	2b2a      	cmp	r3, #42	; 0x2a
 80037d0:	d135      	bne.n	800383e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	b29a      	uxth	r2, r3
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037e4:	b29b      	uxth	r3, r3
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d005      	beq.n	80037f6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ee:	f043 0204 	orr.w	r2, r3, #4
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	685a      	ldr	r2, [r3, #4]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003804:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800380a:	4618      	mov	r0, r3
 800380c:	f7fd ff1f 	bl	800164e <HAL_DMA_GetState>
 8003810:	4603      	mov	r3, r0
 8003812:	2b01      	cmp	r3, #1
 8003814:	d049      	beq.n	80038aa <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800381a:	4a69      	ldr	r2, [pc, #420]	; (80039c0 <I2C_Slave_STOPF+0x258>)
 800381c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003822:	4618      	mov	r0, r3
 8003824:	f7fd fef1 	bl	800160a <HAL_DMA_Abort_IT>
 8003828:	4603      	mov	r3, r0
 800382a:	2b00      	cmp	r3, #0
 800382c:	d03d      	beq.n	80038aa <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003832:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003834:	687a      	ldr	r2, [r7, #4]
 8003836:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003838:	4610      	mov	r0, r2
 800383a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800383c:	e035      	b.n	80038aa <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	b29a      	uxth	r2, r3
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003850:	b29b      	uxth	r3, r3
 8003852:	2b00      	cmp	r3, #0
 8003854:	d005      	beq.n	8003862 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800385a:	f043 0204 	orr.w	r2, r3, #4
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	685a      	ldr	r2, [r3, #4]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003870:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003876:	4618      	mov	r0, r3
 8003878:	f7fd fee9 	bl	800164e <HAL_DMA_GetState>
 800387c:	4603      	mov	r3, r0
 800387e:	2b01      	cmp	r3, #1
 8003880:	d014      	beq.n	80038ac <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003886:	4a4e      	ldr	r2, [pc, #312]	; (80039c0 <I2C_Slave_STOPF+0x258>)
 8003888:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800388e:	4618      	mov	r0, r3
 8003890:	f7fd febb 	bl	800160a <HAL_DMA_Abort_IT>
 8003894:	4603      	mov	r3, r0
 8003896:	2b00      	cmp	r3, #0
 8003898:	d008      	beq.n	80038ac <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800389e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038a0:	687a      	ldr	r2, [r7, #4]
 80038a2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80038a4:	4610      	mov	r0, r2
 80038a6:	4798      	blx	r3
 80038a8:	e000      	b.n	80038ac <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80038aa:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038b0:	b29b      	uxth	r3, r3
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d03e      	beq.n	8003934 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	695b      	ldr	r3, [r3, #20]
 80038bc:	f003 0304 	and.w	r3, r3, #4
 80038c0:	2b04      	cmp	r3, #4
 80038c2:	d112      	bne.n	80038ea <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	691a      	ldr	r2, [r3, #16]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ce:	b2d2      	uxtb	r2, r2
 80038d0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d6:	1c5a      	adds	r2, r3, #1
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038e0:	b29b      	uxth	r3, r3
 80038e2:	3b01      	subs	r3, #1
 80038e4:	b29a      	uxth	r2, r3
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	695b      	ldr	r3, [r3, #20]
 80038f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038f4:	2b40      	cmp	r3, #64	; 0x40
 80038f6:	d112      	bne.n	800391e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	691a      	ldr	r2, [r3, #16]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003902:	b2d2      	uxtb	r2, r2
 8003904:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390a:	1c5a      	adds	r2, r3, #1
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003914:	b29b      	uxth	r3, r3
 8003916:	3b01      	subs	r3, #1
 8003918:	b29a      	uxth	r2, r3
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003922:	b29b      	uxth	r3, r3
 8003924:	2b00      	cmp	r3, #0
 8003926:	d005      	beq.n	8003934 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392c:	f043 0204 	orr.w	r2, r3, #4
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003938:	2b00      	cmp	r3, #0
 800393a:	d003      	beq.n	8003944 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800393c:	6878      	ldr	r0, [r7, #4]
 800393e:	f000 f8b3 	bl	8003aa8 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003942:	e039      	b.n	80039b8 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003944:	7bfb      	ldrb	r3, [r7, #15]
 8003946:	2b2a      	cmp	r3, #42	; 0x2a
 8003948:	d109      	bne.n	800395e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2200      	movs	r2, #0
 800394e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2228      	movs	r2, #40	; 0x28
 8003954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003958:	6878      	ldr	r0, [r7, #4]
 800395a:	f7ff f819 	bl	8002990 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003964:	b2db      	uxtb	r3, r3
 8003966:	2b28      	cmp	r3, #40	; 0x28
 8003968:	d111      	bne.n	800398e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	4a15      	ldr	r2, [pc, #84]	; (80039c4 <I2C_Slave_STOPF+0x25c>)
 800396e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2200      	movs	r2, #0
 8003974:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2220      	movs	r2, #32
 800397a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2200      	movs	r2, #0
 8003982:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f7ff f81a 	bl	80029c0 <HAL_I2C_ListenCpltCallback>
}
 800398c:	e014      	b.n	80039b8 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003992:	2b22      	cmp	r3, #34	; 0x22
 8003994:	d002      	beq.n	800399c <I2C_Slave_STOPF+0x234>
 8003996:	7bfb      	ldrb	r3, [r7, #15]
 8003998:	2b22      	cmp	r3, #34	; 0x22
 800399a:	d10d      	bne.n	80039b8 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2200      	movs	r2, #0
 80039a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2220      	movs	r2, #32
 80039a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2200      	movs	r2, #0
 80039ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f7fe ffec 	bl	8002990 <HAL_I2C_SlaveRxCpltCallback>
}
 80039b8:	bf00      	nop
 80039ba:	3710      	adds	r7, #16
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}
 80039c0:	08003fe1 	.word	0x08003fe1
 80039c4:	ffff0000 	.word	0xffff0000

080039c8 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b084      	sub	sp, #16
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039d6:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039dc:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	2b08      	cmp	r3, #8
 80039e2:	d002      	beq.n	80039ea <I2C_Slave_AF+0x22>
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	2b20      	cmp	r3, #32
 80039e8:	d129      	bne.n	8003a3e <I2C_Slave_AF+0x76>
 80039ea:	7bfb      	ldrb	r3, [r7, #15]
 80039ec:	2b28      	cmp	r3, #40	; 0x28
 80039ee:	d126      	bne.n	8003a3e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	4a2c      	ldr	r2, [pc, #176]	; (8003aa4 <I2C_Slave_AF+0xdc>)
 80039f4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	685a      	ldr	r2, [r3, #4]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003a04:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003a0e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a1e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2200      	movs	r2, #0
 8003a24:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2220      	movs	r2, #32
 8003a2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2200      	movs	r2, #0
 8003a32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f7fe ffc2 	bl	80029c0 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8003a3c:	e02e      	b.n	8003a9c <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003a3e:	7bfb      	ldrb	r3, [r7, #15]
 8003a40:	2b21      	cmp	r3, #33	; 0x21
 8003a42:	d126      	bne.n	8003a92 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	4a17      	ldr	r2, [pc, #92]	; (8003aa4 <I2C_Slave_AF+0xdc>)
 8003a48:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2221      	movs	r2, #33	; 0x21
 8003a4e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2220      	movs	r2, #32
 8003a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	685a      	ldr	r2, [r3, #4]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003a6e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003a78:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a88:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f7fe ff76 	bl	800297c <HAL_I2C_SlaveTxCpltCallback>
}
 8003a90:	e004      	b.n	8003a9c <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003a9a:	615a      	str	r2, [r3, #20]
}
 8003a9c:	bf00      	nop
 8003a9e:	3710      	adds	r7, #16
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}
 8003aa4:	ffff0000 	.word	0xffff0000

08003aa8 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b084      	sub	sp, #16
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ab6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003abe:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003ac0:	7bbb      	ldrb	r3, [r7, #14]
 8003ac2:	2b10      	cmp	r3, #16
 8003ac4:	d002      	beq.n	8003acc <I2C_ITError+0x24>
 8003ac6:	7bbb      	ldrb	r3, [r7, #14]
 8003ac8:	2b40      	cmp	r3, #64	; 0x40
 8003aca:	d10a      	bne.n	8003ae2 <I2C_ITError+0x3a>
 8003acc:	7bfb      	ldrb	r3, [r7, #15]
 8003ace:	2b22      	cmp	r3, #34	; 0x22
 8003ad0:	d107      	bne.n	8003ae2 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ae0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003ae2:	7bfb      	ldrb	r3, [r7, #15]
 8003ae4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003ae8:	2b28      	cmp	r3, #40	; 0x28
 8003aea:	d107      	bne.n	8003afc <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2200      	movs	r2, #0
 8003af0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2228      	movs	r2, #40	; 0x28
 8003af6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003afa:	e015      	b.n	8003b28 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b0a:	d00a      	beq.n	8003b22 <I2C_ITError+0x7a>
 8003b0c:	7bfb      	ldrb	r3, [r7, #15]
 8003b0e:	2b60      	cmp	r3, #96	; 0x60
 8003b10:	d007      	beq.n	8003b22 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2220      	movs	r2, #32
 8003b16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2200      	movs	r2, #0
 8003b26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b36:	d162      	bne.n	8003bfe <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	685a      	ldr	r2, [r3, #4]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b46:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b4c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	2b01      	cmp	r3, #1
 8003b54:	d020      	beq.n	8003b98 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b5a:	4a6a      	ldr	r2, [pc, #424]	; (8003d04 <I2C_ITError+0x25c>)
 8003b5c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b62:	4618      	mov	r0, r3
 8003b64:	f7fd fd51 	bl	800160a <HAL_DMA_Abort_IT>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	f000 8089 	beq.w	8003c82 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f022 0201 	bic.w	r2, r2, #1
 8003b7e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2220      	movs	r2, #32
 8003b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b8e:	687a      	ldr	r2, [r7, #4]
 8003b90:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003b92:	4610      	mov	r0, r2
 8003b94:	4798      	blx	r3
 8003b96:	e074      	b.n	8003c82 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b9c:	4a59      	ldr	r2, [pc, #356]	; (8003d04 <I2C_ITError+0x25c>)
 8003b9e:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f7fd fd30 	bl	800160a <HAL_DMA_Abort_IT>
 8003baa:	4603      	mov	r3, r0
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d068      	beq.n	8003c82 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	695b      	ldr	r3, [r3, #20]
 8003bb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bba:	2b40      	cmp	r3, #64	; 0x40
 8003bbc:	d10b      	bne.n	8003bd6 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	691a      	ldr	r2, [r3, #16]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc8:	b2d2      	uxtb	r2, r2
 8003bca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd0:	1c5a      	adds	r2, r3, #1
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	681a      	ldr	r2, [r3, #0]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f022 0201 	bic.w	r2, r2, #1
 8003be4:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2220      	movs	r2, #32
 8003bea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bf4:	687a      	ldr	r2, [r7, #4]
 8003bf6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003bf8:	4610      	mov	r0, r2
 8003bfa:	4798      	blx	r3
 8003bfc:	e041      	b.n	8003c82 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	2b60      	cmp	r3, #96	; 0x60
 8003c08:	d125      	bne.n	8003c56 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2220      	movs	r2, #32
 8003c0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2200      	movs	r2, #0
 8003c16:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	695b      	ldr	r3, [r3, #20]
 8003c1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c22:	2b40      	cmp	r3, #64	; 0x40
 8003c24:	d10b      	bne.n	8003c3e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	691a      	ldr	r2, [r3, #16]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c30:	b2d2      	uxtb	r2, r2
 8003c32:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c38:	1c5a      	adds	r2, r3, #1
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f022 0201 	bic.w	r2, r2, #1
 8003c4c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f7fe fede 	bl	8002a10 <HAL_I2C_AbortCpltCallback>
 8003c54:	e015      	b.n	8003c82 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	695b      	ldr	r3, [r3, #20]
 8003c5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c60:	2b40      	cmp	r3, #64	; 0x40
 8003c62:	d10b      	bne.n	8003c7c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	691a      	ldr	r2, [r3, #16]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c6e:	b2d2      	uxtb	r2, r2
 8003c70:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c76:	1c5a      	adds	r2, r3, #1
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	f7fe febd 	bl	80029fc <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c86:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	f003 0301 	and.w	r3, r3, #1
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d10e      	bne.n	8003cb0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d109      	bne.n	8003cb0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d104      	bne.n	8003cb0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d007      	beq.n	8003cc0 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	685a      	ldr	r2, [r3, #4]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003cbe:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cc6:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ccc:	f003 0304 	and.w	r3, r3, #4
 8003cd0:	2b04      	cmp	r3, #4
 8003cd2:	d113      	bne.n	8003cfc <I2C_ITError+0x254>
 8003cd4:	7bfb      	ldrb	r3, [r7, #15]
 8003cd6:	2b28      	cmp	r3, #40	; 0x28
 8003cd8:	d110      	bne.n	8003cfc <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	4a0a      	ldr	r2, [pc, #40]	; (8003d08 <I2C_ITError+0x260>)
 8003cde:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2220      	movs	r2, #32
 8003cea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f7fe fe62 	bl	80029c0 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003cfc:	bf00      	nop
 8003cfe:	3710      	adds	r7, #16
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}
 8003d04:	08003fe1 	.word	0x08003fe1
 8003d08:	ffff0000 	.word	0xffff0000

08003d0c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b088      	sub	sp, #32
 8003d10:	af02      	add	r7, sp, #8
 8003d12:	60f8      	str	r0, [r7, #12]
 8003d14:	607a      	str	r2, [r7, #4]
 8003d16:	603b      	str	r3, [r7, #0]
 8003d18:	460b      	mov	r3, r1
 8003d1a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d20:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	2b08      	cmp	r3, #8
 8003d26:	d006      	beq.n	8003d36 <I2C_MasterRequestWrite+0x2a>
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d003      	beq.n	8003d36 <I2C_MasterRequestWrite+0x2a>
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003d34:	d108      	bne.n	8003d48 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d44:	601a      	str	r2, [r3, #0]
 8003d46:	e00b      	b.n	8003d60 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d4c:	2b12      	cmp	r3, #18
 8003d4e:	d107      	bne.n	8003d60 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d5e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	9300      	str	r3, [sp, #0]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2200      	movs	r2, #0
 8003d68:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003d6c:	68f8      	ldr	r0, [r7, #12]
 8003d6e:	f000 f9df 	bl	8004130 <I2C_WaitOnFlagUntilTimeout>
 8003d72:	4603      	mov	r3, r0
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d00d      	beq.n	8003d94 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d86:	d103      	bne.n	8003d90 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d8e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003d90:	2303      	movs	r3, #3
 8003d92:	e035      	b.n	8003e00 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	691b      	ldr	r3, [r3, #16]
 8003d98:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d9c:	d108      	bne.n	8003db0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003d9e:	897b      	ldrh	r3, [r7, #10]
 8003da0:	b2db      	uxtb	r3, r3
 8003da2:	461a      	mov	r2, r3
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003dac:	611a      	str	r2, [r3, #16]
 8003dae:	e01b      	b.n	8003de8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003db0:	897b      	ldrh	r3, [r7, #10]
 8003db2:	11db      	asrs	r3, r3, #7
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	f003 0306 	and.w	r3, r3, #6
 8003dba:	b2db      	uxtb	r3, r3
 8003dbc:	f063 030f 	orn	r3, r3, #15
 8003dc0:	b2da      	uxtb	r2, r3
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	687a      	ldr	r2, [r7, #4]
 8003dcc:	490e      	ldr	r1, [pc, #56]	; (8003e08 <I2C_MasterRequestWrite+0xfc>)
 8003dce:	68f8      	ldr	r0, [r7, #12]
 8003dd0:	f000 fa05 	bl	80041de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d001      	beq.n	8003dde <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e010      	b.n	8003e00 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003dde:	897b      	ldrh	r3, [r7, #10]
 8003de0:	b2da      	uxtb	r2, r3
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	687a      	ldr	r2, [r7, #4]
 8003dec:	4907      	ldr	r1, [pc, #28]	; (8003e0c <I2C_MasterRequestWrite+0x100>)
 8003dee:	68f8      	ldr	r0, [r7, #12]
 8003df0:	f000 f9f5 	bl	80041de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003df4:	4603      	mov	r3, r0
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d001      	beq.n	8003dfe <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e000      	b.n	8003e00 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003dfe:	2300      	movs	r3, #0
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	3718      	adds	r7, #24
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}
 8003e08:	00010008 	.word	0x00010008
 8003e0c:	00010002 	.word	0x00010002

08003e10 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b088      	sub	sp, #32
 8003e14:	af02      	add	r7, sp, #8
 8003e16:	60f8      	str	r0, [r7, #12]
 8003e18:	4608      	mov	r0, r1
 8003e1a:	4611      	mov	r1, r2
 8003e1c:	461a      	mov	r2, r3
 8003e1e:	4603      	mov	r3, r0
 8003e20:	817b      	strh	r3, [r7, #10]
 8003e22:	460b      	mov	r3, r1
 8003e24:	813b      	strh	r3, [r7, #8]
 8003e26:	4613      	mov	r3, r2
 8003e28:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003e38:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e48:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4c:	9300      	str	r3, [sp, #0]
 8003e4e:	6a3b      	ldr	r3, [r7, #32]
 8003e50:	2200      	movs	r2, #0
 8003e52:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003e56:	68f8      	ldr	r0, [r7, #12]
 8003e58:	f000 f96a 	bl	8004130 <I2C_WaitOnFlagUntilTimeout>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d00d      	beq.n	8003e7e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e70:	d103      	bne.n	8003e7a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e78:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003e7a:	2303      	movs	r3, #3
 8003e7c:	e0aa      	b.n	8003fd4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003e7e:	897b      	ldrh	r3, [r7, #10]
 8003e80:	b2db      	uxtb	r3, r3
 8003e82:	461a      	mov	r2, r3
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003e8c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e90:	6a3a      	ldr	r2, [r7, #32]
 8003e92:	4952      	ldr	r1, [pc, #328]	; (8003fdc <I2C_RequestMemoryRead+0x1cc>)
 8003e94:	68f8      	ldr	r0, [r7, #12]
 8003e96:	f000 f9a2 	bl	80041de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d001      	beq.n	8003ea4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	e097      	b.n	8003fd4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	617b      	str	r3, [r7, #20]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	695b      	ldr	r3, [r3, #20]
 8003eae:	617b      	str	r3, [r7, #20]
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	699b      	ldr	r3, [r3, #24]
 8003eb6:	617b      	str	r3, [r7, #20]
 8003eb8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003eba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ebc:	6a39      	ldr	r1, [r7, #32]
 8003ebe:	68f8      	ldr	r0, [r7, #12]
 8003ec0:	f000 fa0c 	bl	80042dc <I2C_WaitOnTXEFlagUntilTimeout>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d00d      	beq.n	8003ee6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ece:	2b04      	cmp	r3, #4
 8003ed0:	d107      	bne.n	8003ee2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ee0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e076      	b.n	8003fd4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003ee6:	88fb      	ldrh	r3, [r7, #6]
 8003ee8:	2b01      	cmp	r3, #1
 8003eea:	d105      	bne.n	8003ef8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003eec:	893b      	ldrh	r3, [r7, #8]
 8003eee:	b2da      	uxtb	r2, r3
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	611a      	str	r2, [r3, #16]
 8003ef6:	e021      	b.n	8003f3c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003ef8:	893b      	ldrh	r3, [r7, #8]
 8003efa:	0a1b      	lsrs	r3, r3, #8
 8003efc:	b29b      	uxth	r3, r3
 8003efe:	b2da      	uxtb	r2, r3
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f08:	6a39      	ldr	r1, [r7, #32]
 8003f0a:	68f8      	ldr	r0, [r7, #12]
 8003f0c:	f000 f9e6 	bl	80042dc <I2C_WaitOnTXEFlagUntilTimeout>
 8003f10:	4603      	mov	r3, r0
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d00d      	beq.n	8003f32 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f1a:	2b04      	cmp	r3, #4
 8003f1c:	d107      	bne.n	8003f2e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f2c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e050      	b.n	8003fd4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f32:	893b      	ldrh	r3, [r7, #8]
 8003f34:	b2da      	uxtb	r2, r3
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f3e:	6a39      	ldr	r1, [r7, #32]
 8003f40:	68f8      	ldr	r0, [r7, #12]
 8003f42:	f000 f9cb 	bl	80042dc <I2C_WaitOnTXEFlagUntilTimeout>
 8003f46:	4603      	mov	r3, r0
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d00d      	beq.n	8003f68 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f50:	2b04      	cmp	r3, #4
 8003f52:	d107      	bne.n	8003f64 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f62:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	e035      	b.n	8003fd4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f76:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f7a:	9300      	str	r3, [sp, #0]
 8003f7c:	6a3b      	ldr	r3, [r7, #32]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003f84:	68f8      	ldr	r0, [r7, #12]
 8003f86:	f000 f8d3 	bl	8004130 <I2C_WaitOnFlagUntilTimeout>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d00d      	beq.n	8003fac <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f9e:	d103      	bne.n	8003fa8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003fa6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003fa8:	2303      	movs	r3, #3
 8003faa:	e013      	b.n	8003fd4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003fac:	897b      	ldrh	r3, [r7, #10]
 8003fae:	b2db      	uxtb	r3, r3
 8003fb0:	f043 0301 	orr.w	r3, r3, #1
 8003fb4:	b2da      	uxtb	r2, r3
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fbe:	6a3a      	ldr	r2, [r7, #32]
 8003fc0:	4906      	ldr	r1, [pc, #24]	; (8003fdc <I2C_RequestMemoryRead+0x1cc>)
 8003fc2:	68f8      	ldr	r0, [r7, #12]
 8003fc4:	f000 f90b 	bl	80041de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d001      	beq.n	8003fd2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e000      	b.n	8003fd4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003fd2:	2300      	movs	r3, #0
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3718      	adds	r7, #24
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}
 8003fdc:	00010002 	.word	0x00010002

08003fe0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b086      	sub	sp, #24
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ff0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ff8:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003ffa:	4b4b      	ldr	r3, [pc, #300]	; (8004128 <I2C_DMAAbort+0x148>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	08db      	lsrs	r3, r3, #3
 8004000:	4a4a      	ldr	r2, [pc, #296]	; (800412c <I2C_DMAAbort+0x14c>)
 8004002:	fba2 2303 	umull	r2, r3, r2, r3
 8004006:	0a1a      	lsrs	r2, r3, #8
 8004008:	4613      	mov	r3, r2
 800400a:	009b      	lsls	r3, r3, #2
 800400c:	4413      	add	r3, r2
 800400e:	00da      	lsls	r2, r3, #3
 8004010:	1ad3      	subs	r3, r2, r3
 8004012:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d106      	bne.n	8004028 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800401e:	f043 0220 	orr.w	r2, r3, #32
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8004026:	e00a      	b.n	800403e <I2C_DMAAbort+0x5e>
    }
    count--;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	3b01      	subs	r3, #1
 800402c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004038:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800403c:	d0ea      	beq.n	8004014 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004042:	2b00      	cmp	r3, #0
 8004044:	d003      	beq.n	800404e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800404a:	2200      	movs	r2, #0
 800404c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004052:	2b00      	cmp	r3, #0
 8004054:	d003      	beq.n	800405e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800405a:	2200      	movs	r2, #0
 800405c:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800406c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	2200      	movs	r2, #0
 8004072:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004078:	2b00      	cmp	r3, #0
 800407a:	d003      	beq.n	8004084 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004080:	2200      	movs	r2, #0
 8004082:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004088:	2b00      	cmp	r3, #0
 800408a:	d003      	beq.n	8004094 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004090:	2200      	movs	r2, #0
 8004092:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f022 0201 	bic.w	r2, r2, #1
 80040a2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040aa:	b2db      	uxtb	r3, r3
 80040ac:	2b60      	cmp	r3, #96	; 0x60
 80040ae:	d10e      	bne.n	80040ce <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	2220      	movs	r2, #32
 80040b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	2200      	movs	r2, #0
 80040bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	2200      	movs	r2, #0
 80040c4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80040c6:	6978      	ldr	r0, [r7, #20]
 80040c8:	f7fe fca2 	bl	8002a10 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80040cc:	e027      	b.n	800411e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80040ce:	7cfb      	ldrb	r3, [r7, #19]
 80040d0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80040d4:	2b28      	cmp	r3, #40	; 0x28
 80040d6:	d117      	bne.n	8004108 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f042 0201 	orr.w	r2, r2, #1
 80040e6:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80040f6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	2200      	movs	r2, #0
 80040fc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	2228      	movs	r2, #40	; 0x28
 8004102:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004106:	e007      	b.n	8004118 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	2220      	movs	r2, #32
 800410c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	2200      	movs	r2, #0
 8004114:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004118:	6978      	ldr	r0, [r7, #20]
 800411a:	f7fe fc6f 	bl	80029fc <HAL_I2C_ErrorCallback>
}
 800411e:	bf00      	nop
 8004120:	3718      	adds	r7, #24
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}
 8004126:	bf00      	nop
 8004128:	20000000 	.word	0x20000000
 800412c:	14f8b589 	.word	0x14f8b589

08004130 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b084      	sub	sp, #16
 8004134:	af00      	add	r7, sp, #0
 8004136:	60f8      	str	r0, [r7, #12]
 8004138:	60b9      	str	r1, [r7, #8]
 800413a:	603b      	str	r3, [r7, #0]
 800413c:	4613      	mov	r3, r2
 800413e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004140:	e025      	b.n	800418e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004148:	d021      	beq.n	800418e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800414a:	f7fd f8ad 	bl	80012a8 <HAL_GetTick>
 800414e:	4602      	mov	r2, r0
 8004150:	69bb      	ldr	r3, [r7, #24]
 8004152:	1ad3      	subs	r3, r2, r3
 8004154:	683a      	ldr	r2, [r7, #0]
 8004156:	429a      	cmp	r2, r3
 8004158:	d302      	bcc.n	8004160 <I2C_WaitOnFlagUntilTimeout+0x30>
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d116      	bne.n	800418e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2200      	movs	r2, #0
 8004164:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	2220      	movs	r2, #32
 800416a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2200      	movs	r2, #0
 8004172:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800417a:	f043 0220 	orr.w	r2, r3, #32
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2200      	movs	r2, #0
 8004186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	e023      	b.n	80041d6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	0c1b      	lsrs	r3, r3, #16
 8004192:	b2db      	uxtb	r3, r3
 8004194:	2b01      	cmp	r3, #1
 8004196:	d10d      	bne.n	80041b4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	695b      	ldr	r3, [r3, #20]
 800419e:	43da      	mvns	r2, r3
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	4013      	ands	r3, r2
 80041a4:	b29b      	uxth	r3, r3
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	bf0c      	ite	eq
 80041aa:	2301      	moveq	r3, #1
 80041ac:	2300      	movne	r3, #0
 80041ae:	b2db      	uxtb	r3, r3
 80041b0:	461a      	mov	r2, r3
 80041b2:	e00c      	b.n	80041ce <I2C_WaitOnFlagUntilTimeout+0x9e>
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	699b      	ldr	r3, [r3, #24]
 80041ba:	43da      	mvns	r2, r3
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	4013      	ands	r3, r2
 80041c0:	b29b      	uxth	r3, r3
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	bf0c      	ite	eq
 80041c6:	2301      	moveq	r3, #1
 80041c8:	2300      	movne	r3, #0
 80041ca:	b2db      	uxtb	r3, r3
 80041cc:	461a      	mov	r2, r3
 80041ce:	79fb      	ldrb	r3, [r7, #7]
 80041d0:	429a      	cmp	r2, r3
 80041d2:	d0b6      	beq.n	8004142 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80041d4:	2300      	movs	r3, #0
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3710      	adds	r7, #16
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}

080041de <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80041de:	b580      	push	{r7, lr}
 80041e0:	b084      	sub	sp, #16
 80041e2:	af00      	add	r7, sp, #0
 80041e4:	60f8      	str	r0, [r7, #12]
 80041e6:	60b9      	str	r1, [r7, #8]
 80041e8:	607a      	str	r2, [r7, #4]
 80041ea:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80041ec:	e051      	b.n	8004292 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	695b      	ldr	r3, [r3, #20]
 80041f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041fc:	d123      	bne.n	8004246 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800420c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004216:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2200      	movs	r2, #0
 800421c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2220      	movs	r2, #32
 8004222:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	2200      	movs	r2, #0
 800422a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004232:	f043 0204 	orr.w	r2, r3, #4
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2200      	movs	r2, #0
 800423e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	e046      	b.n	80042d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	f1b3 3fff 	cmp.w	r3, #4294967295
 800424c:	d021      	beq.n	8004292 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800424e:	f7fd f82b 	bl	80012a8 <HAL_GetTick>
 8004252:	4602      	mov	r2, r0
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	1ad3      	subs	r3, r2, r3
 8004258:	687a      	ldr	r2, [r7, #4]
 800425a:	429a      	cmp	r2, r3
 800425c:	d302      	bcc.n	8004264 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d116      	bne.n	8004292 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2200      	movs	r2, #0
 8004268:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2220      	movs	r2, #32
 800426e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2200      	movs	r2, #0
 8004276:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800427e:	f043 0220 	orr.w	r2, r3, #32
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2200      	movs	r2, #0
 800428a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	e020      	b.n	80042d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	0c1b      	lsrs	r3, r3, #16
 8004296:	b2db      	uxtb	r3, r3
 8004298:	2b01      	cmp	r3, #1
 800429a:	d10c      	bne.n	80042b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	695b      	ldr	r3, [r3, #20]
 80042a2:	43da      	mvns	r2, r3
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	4013      	ands	r3, r2
 80042a8:	b29b      	uxth	r3, r3
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	bf14      	ite	ne
 80042ae:	2301      	movne	r3, #1
 80042b0:	2300      	moveq	r3, #0
 80042b2:	b2db      	uxtb	r3, r3
 80042b4:	e00b      	b.n	80042ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	699b      	ldr	r3, [r3, #24]
 80042bc:	43da      	mvns	r2, r3
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	4013      	ands	r3, r2
 80042c2:	b29b      	uxth	r3, r3
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	bf14      	ite	ne
 80042c8:	2301      	movne	r3, #1
 80042ca:	2300      	moveq	r3, #0
 80042cc:	b2db      	uxtb	r3, r3
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d18d      	bne.n	80041ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80042d2:	2300      	movs	r3, #0
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	3710      	adds	r7, #16
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}

080042dc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b084      	sub	sp, #16
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	60f8      	str	r0, [r7, #12]
 80042e4:	60b9      	str	r1, [r7, #8]
 80042e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80042e8:	e02d      	b.n	8004346 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80042ea:	68f8      	ldr	r0, [r7, #12]
 80042ec:	f000 f900 	bl	80044f0 <I2C_IsAcknowledgeFailed>
 80042f0:	4603      	mov	r3, r0
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d001      	beq.n	80042fa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	e02d      	b.n	8004356 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004300:	d021      	beq.n	8004346 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004302:	f7fc ffd1 	bl	80012a8 <HAL_GetTick>
 8004306:	4602      	mov	r2, r0
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	1ad3      	subs	r3, r2, r3
 800430c:	68ba      	ldr	r2, [r7, #8]
 800430e:	429a      	cmp	r2, r3
 8004310:	d302      	bcc.n	8004318 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d116      	bne.n	8004346 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2200      	movs	r2, #0
 800431c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2220      	movs	r2, #32
 8004322:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2200      	movs	r2, #0
 800432a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004332:	f043 0220 	orr.w	r2, r3, #32
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2200      	movs	r2, #0
 800433e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	e007      	b.n	8004356 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	695b      	ldr	r3, [r3, #20]
 800434c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004350:	2b80      	cmp	r3, #128	; 0x80
 8004352:	d1ca      	bne.n	80042ea <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004354:	2300      	movs	r3, #0
}
 8004356:	4618      	mov	r0, r3
 8004358:	3710      	adds	r7, #16
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}

0800435e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800435e:	b580      	push	{r7, lr}
 8004360:	b084      	sub	sp, #16
 8004362:	af00      	add	r7, sp, #0
 8004364:	60f8      	str	r0, [r7, #12]
 8004366:	60b9      	str	r1, [r7, #8]
 8004368:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800436a:	e02d      	b.n	80043c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800436c:	68f8      	ldr	r0, [r7, #12]
 800436e:	f000 f8bf 	bl	80044f0 <I2C_IsAcknowledgeFailed>
 8004372:	4603      	mov	r3, r0
 8004374:	2b00      	cmp	r3, #0
 8004376:	d001      	beq.n	800437c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	e02d      	b.n	80043d8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004382:	d021      	beq.n	80043c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004384:	f7fc ff90 	bl	80012a8 <HAL_GetTick>
 8004388:	4602      	mov	r2, r0
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	1ad3      	subs	r3, r2, r3
 800438e:	68ba      	ldr	r2, [r7, #8]
 8004390:	429a      	cmp	r2, r3
 8004392:	d302      	bcc.n	800439a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d116      	bne.n	80043c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2200      	movs	r2, #0
 800439e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2220      	movs	r2, #32
 80043a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2200      	movs	r2, #0
 80043ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b4:	f043 0220 	orr.w	r2, r3, #32
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2200      	movs	r2, #0
 80043c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80043c4:	2301      	movs	r3, #1
 80043c6:	e007      	b.n	80043d8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	695b      	ldr	r3, [r3, #20]
 80043ce:	f003 0304 	and.w	r3, r3, #4
 80043d2:	2b04      	cmp	r3, #4
 80043d4:	d1ca      	bne.n	800436c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80043d6:	2300      	movs	r3, #0
}
 80043d8:	4618      	mov	r0, r3
 80043da:	3710      	adds	r7, #16
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}

080043e0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b085      	sub	sp, #20
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80043e8:	2300      	movs	r3, #0
 80043ea:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80043ec:	4b13      	ldr	r3, [pc, #76]	; (800443c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	08db      	lsrs	r3, r3, #3
 80043f2:	4a13      	ldr	r2, [pc, #76]	; (8004440 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80043f4:	fba2 2303 	umull	r2, r3, r2, r3
 80043f8:	0a1a      	lsrs	r2, r3, #8
 80043fa:	4613      	mov	r3, r2
 80043fc:	009b      	lsls	r3, r3, #2
 80043fe:	4413      	add	r3, r2
 8004400:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	3b01      	subs	r3, #1
 8004406:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d107      	bne.n	800441e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004412:	f043 0220 	orr.w	r2, r3, #32
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	e008      	b.n	8004430 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004428:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800442c:	d0e9      	beq.n	8004402 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800442e:	2300      	movs	r3, #0
}
 8004430:	4618      	mov	r0, r3
 8004432:	3714      	adds	r7, #20
 8004434:	46bd      	mov	sp, r7
 8004436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443a:	4770      	bx	lr
 800443c:	20000000 	.word	0x20000000
 8004440:	14f8b589 	.word	0x14f8b589

08004444 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b084      	sub	sp, #16
 8004448:	af00      	add	r7, sp, #0
 800444a:	60f8      	str	r0, [r7, #12]
 800444c:	60b9      	str	r1, [r7, #8]
 800444e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004450:	e042      	b.n	80044d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	695b      	ldr	r3, [r3, #20]
 8004458:	f003 0310 	and.w	r3, r3, #16
 800445c:	2b10      	cmp	r3, #16
 800445e:	d119      	bne.n	8004494 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f06f 0210 	mvn.w	r2, #16
 8004468:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2200      	movs	r2, #0
 800446e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	2220      	movs	r2, #32
 8004474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2200      	movs	r2, #0
 800447c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2200      	movs	r2, #0
 800448c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004490:	2301      	movs	r3, #1
 8004492:	e029      	b.n	80044e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004494:	f7fc ff08 	bl	80012a8 <HAL_GetTick>
 8004498:	4602      	mov	r2, r0
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	1ad3      	subs	r3, r2, r3
 800449e:	68ba      	ldr	r2, [r7, #8]
 80044a0:	429a      	cmp	r2, r3
 80044a2:	d302      	bcc.n	80044aa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d116      	bne.n	80044d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2200      	movs	r2, #0
 80044ae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2220      	movs	r2, #32
 80044b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2200      	movs	r2, #0
 80044bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c4:	f043 0220 	orr.w	r2, r3, #32
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2200      	movs	r2, #0
 80044d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	e007      	b.n	80044e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	695b      	ldr	r3, [r3, #20]
 80044de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044e2:	2b40      	cmp	r3, #64	; 0x40
 80044e4:	d1b5      	bne.n	8004452 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80044e6:	2300      	movs	r3, #0
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	3710      	adds	r7, #16
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}

080044f0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b083      	sub	sp, #12
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	695b      	ldr	r3, [r3, #20]
 80044fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004502:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004506:	d11b      	bne.n	8004540 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004510:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2200      	movs	r2, #0
 8004516:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2220      	movs	r2, #32
 800451c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2200      	movs	r2, #0
 8004524:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800452c:	f043 0204 	orr.w	r2, r3, #4
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2200      	movs	r2, #0
 8004538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	e000      	b.n	8004542 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004540:	2300      	movs	r3, #0
}
 8004542:	4618      	mov	r0, r3
 8004544:	370c      	adds	r7, #12
 8004546:	46bd      	mov	sp, r7
 8004548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454c:	4770      	bx	lr

0800454e <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800454e:	b480      	push	{r7}
 8004550:	b083      	sub	sp, #12
 8004552:	af00      	add	r7, sp, #0
 8004554:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800455a:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800455e:	d103      	bne.n	8004568 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2201      	movs	r2, #1
 8004564:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004566:	e007      	b.n	8004578 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800456c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004570:	d102      	bne.n	8004578 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2208      	movs	r2, #8
 8004576:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004578:	bf00      	nop
 800457a:	370c      	adds	r7, #12
 800457c:	46bd      	mov	sp, r7
 800457e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004582:	4770      	bx	lr

08004584 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004584:	b480      	push	{r7}
 8004586:	b083      	sub	sp, #12
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
 800458c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004594:	b2db      	uxtb	r3, r3
 8004596:	2b20      	cmp	r3, #32
 8004598:	d129      	bne.n	80045ee <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2224      	movs	r2, #36	; 0x24
 800459e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	681a      	ldr	r2, [r3, #0]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f022 0201 	bic.w	r2, r2, #1
 80045b0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f022 0210 	bic.w	r2, r2, #16
 80045c0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	683a      	ldr	r2, [r7, #0]
 80045ce:	430a      	orrs	r2, r1
 80045d0:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f042 0201 	orr.w	r2, r2, #1
 80045e0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2220      	movs	r2, #32
 80045e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80045ea:	2300      	movs	r3, #0
 80045ec:	e000      	b.n	80045f0 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80045ee:	2302      	movs	r3, #2
  }
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	370c      	adds	r7, #12
 80045f4:	46bd      	mov	sp, r7
 80045f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fa:	4770      	bx	lr

080045fc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b085      	sub	sp, #20
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
 8004604:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8004606:	2300      	movs	r3, #0
 8004608:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004610:	b2db      	uxtb	r3, r3
 8004612:	2b20      	cmp	r3, #32
 8004614:	d12a      	bne.n	800466c <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2224      	movs	r2, #36	; 0x24
 800461a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f022 0201 	bic.w	r2, r2, #1
 800462c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004634:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8004636:	89fb      	ldrh	r3, [r7, #14]
 8004638:	f023 030f 	bic.w	r3, r3, #15
 800463c:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	b29a      	uxth	r2, r3
 8004642:	89fb      	ldrh	r3, [r7, #14]
 8004644:	4313      	orrs	r3, r2
 8004646:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	89fa      	ldrh	r2, [r7, #14]
 800464e:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f042 0201 	orr.w	r2, r2, #1
 800465e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2220      	movs	r2, #32
 8004664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004668:	2300      	movs	r3, #0
 800466a:	e000      	b.n	800466e <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800466c:	2302      	movs	r3, #2
  }
}
 800466e:	4618      	mov	r0, r3
 8004670:	3714      	adds	r7, #20
 8004672:	46bd      	mov	sp, r7
 8004674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004678:	4770      	bx	lr
	...

0800467c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b082      	sub	sp, #8
 8004680:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8004682:	2300      	movs	r3, #0
 8004684:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004686:	2300      	movs	r3, #0
 8004688:	603b      	str	r3, [r7, #0]
 800468a:	4b20      	ldr	r3, [pc, #128]	; (800470c <HAL_PWREx_EnableOverDrive+0x90>)
 800468c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800468e:	4a1f      	ldr	r2, [pc, #124]	; (800470c <HAL_PWREx_EnableOverDrive+0x90>)
 8004690:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004694:	6413      	str	r3, [r2, #64]	; 0x40
 8004696:	4b1d      	ldr	r3, [pc, #116]	; (800470c <HAL_PWREx_EnableOverDrive+0x90>)
 8004698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800469a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800469e:	603b      	str	r3, [r7, #0]
 80046a0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80046a2:	4b1b      	ldr	r3, [pc, #108]	; (8004710 <HAL_PWREx_EnableOverDrive+0x94>)
 80046a4:	2201      	movs	r2, #1
 80046a6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80046a8:	f7fc fdfe 	bl	80012a8 <HAL_GetTick>
 80046ac:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80046ae:	e009      	b.n	80046c4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80046b0:	f7fc fdfa 	bl	80012a8 <HAL_GetTick>
 80046b4:	4602      	mov	r2, r0
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	1ad3      	subs	r3, r2, r3
 80046ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80046be:	d901      	bls.n	80046c4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80046c0:	2303      	movs	r3, #3
 80046c2:	e01f      	b.n	8004704 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80046c4:	4b13      	ldr	r3, [pc, #76]	; (8004714 <HAL_PWREx_EnableOverDrive+0x98>)
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046d0:	d1ee      	bne.n	80046b0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80046d2:	4b11      	ldr	r3, [pc, #68]	; (8004718 <HAL_PWREx_EnableOverDrive+0x9c>)
 80046d4:	2201      	movs	r2, #1
 80046d6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80046d8:	f7fc fde6 	bl	80012a8 <HAL_GetTick>
 80046dc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80046de:	e009      	b.n	80046f4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80046e0:	f7fc fde2 	bl	80012a8 <HAL_GetTick>
 80046e4:	4602      	mov	r2, r0
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	1ad3      	subs	r3, r2, r3
 80046ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80046ee:	d901      	bls.n	80046f4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80046f0:	2303      	movs	r3, #3
 80046f2:	e007      	b.n	8004704 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80046f4:	4b07      	ldr	r3, [pc, #28]	; (8004714 <HAL_PWREx_EnableOverDrive+0x98>)
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004700:	d1ee      	bne.n	80046e0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8004702:	2300      	movs	r3, #0
}
 8004704:	4618      	mov	r0, r3
 8004706:	3708      	adds	r7, #8
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}
 800470c:	40023800 	.word	0x40023800
 8004710:	420e0040 	.word	0x420e0040
 8004714:	40007000 	.word	0x40007000
 8004718:	420e0044 	.word	0x420e0044

0800471c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b086      	sub	sp, #24
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d101      	bne.n	800472e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800472a:	2301      	movs	r3, #1
 800472c:	e267      	b.n	8004bfe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f003 0301 	and.w	r3, r3, #1
 8004736:	2b00      	cmp	r3, #0
 8004738:	d075      	beq.n	8004826 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800473a:	4b88      	ldr	r3, [pc, #544]	; (800495c <HAL_RCC_OscConfig+0x240>)
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	f003 030c 	and.w	r3, r3, #12
 8004742:	2b04      	cmp	r3, #4
 8004744:	d00c      	beq.n	8004760 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004746:	4b85      	ldr	r3, [pc, #532]	; (800495c <HAL_RCC_OscConfig+0x240>)
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800474e:	2b08      	cmp	r3, #8
 8004750:	d112      	bne.n	8004778 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004752:	4b82      	ldr	r3, [pc, #520]	; (800495c <HAL_RCC_OscConfig+0x240>)
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800475a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800475e:	d10b      	bne.n	8004778 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004760:	4b7e      	ldr	r3, [pc, #504]	; (800495c <HAL_RCC_OscConfig+0x240>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004768:	2b00      	cmp	r3, #0
 800476a:	d05b      	beq.n	8004824 <HAL_RCC_OscConfig+0x108>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d157      	bne.n	8004824 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	e242      	b.n	8004bfe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004780:	d106      	bne.n	8004790 <HAL_RCC_OscConfig+0x74>
 8004782:	4b76      	ldr	r3, [pc, #472]	; (800495c <HAL_RCC_OscConfig+0x240>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a75      	ldr	r2, [pc, #468]	; (800495c <HAL_RCC_OscConfig+0x240>)
 8004788:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800478c:	6013      	str	r3, [r2, #0]
 800478e:	e01d      	b.n	80047cc <HAL_RCC_OscConfig+0xb0>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004798:	d10c      	bne.n	80047b4 <HAL_RCC_OscConfig+0x98>
 800479a:	4b70      	ldr	r3, [pc, #448]	; (800495c <HAL_RCC_OscConfig+0x240>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a6f      	ldr	r2, [pc, #444]	; (800495c <HAL_RCC_OscConfig+0x240>)
 80047a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80047a4:	6013      	str	r3, [r2, #0]
 80047a6:	4b6d      	ldr	r3, [pc, #436]	; (800495c <HAL_RCC_OscConfig+0x240>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a6c      	ldr	r2, [pc, #432]	; (800495c <HAL_RCC_OscConfig+0x240>)
 80047ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047b0:	6013      	str	r3, [r2, #0]
 80047b2:	e00b      	b.n	80047cc <HAL_RCC_OscConfig+0xb0>
 80047b4:	4b69      	ldr	r3, [pc, #420]	; (800495c <HAL_RCC_OscConfig+0x240>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a68      	ldr	r2, [pc, #416]	; (800495c <HAL_RCC_OscConfig+0x240>)
 80047ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047be:	6013      	str	r3, [r2, #0]
 80047c0:	4b66      	ldr	r3, [pc, #408]	; (800495c <HAL_RCC_OscConfig+0x240>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a65      	ldr	r2, [pc, #404]	; (800495c <HAL_RCC_OscConfig+0x240>)
 80047c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d013      	beq.n	80047fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047d4:	f7fc fd68 	bl	80012a8 <HAL_GetTick>
 80047d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047da:	e008      	b.n	80047ee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80047dc:	f7fc fd64 	bl	80012a8 <HAL_GetTick>
 80047e0:	4602      	mov	r2, r0
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	1ad3      	subs	r3, r2, r3
 80047e6:	2b64      	cmp	r3, #100	; 0x64
 80047e8:	d901      	bls.n	80047ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80047ea:	2303      	movs	r3, #3
 80047ec:	e207      	b.n	8004bfe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047ee:	4b5b      	ldr	r3, [pc, #364]	; (800495c <HAL_RCC_OscConfig+0x240>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d0f0      	beq.n	80047dc <HAL_RCC_OscConfig+0xc0>
 80047fa:	e014      	b.n	8004826 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047fc:	f7fc fd54 	bl	80012a8 <HAL_GetTick>
 8004800:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004802:	e008      	b.n	8004816 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004804:	f7fc fd50 	bl	80012a8 <HAL_GetTick>
 8004808:	4602      	mov	r2, r0
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	1ad3      	subs	r3, r2, r3
 800480e:	2b64      	cmp	r3, #100	; 0x64
 8004810:	d901      	bls.n	8004816 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004812:	2303      	movs	r3, #3
 8004814:	e1f3      	b.n	8004bfe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004816:	4b51      	ldr	r3, [pc, #324]	; (800495c <HAL_RCC_OscConfig+0x240>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800481e:	2b00      	cmp	r3, #0
 8004820:	d1f0      	bne.n	8004804 <HAL_RCC_OscConfig+0xe8>
 8004822:	e000      	b.n	8004826 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004824:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f003 0302 	and.w	r3, r3, #2
 800482e:	2b00      	cmp	r3, #0
 8004830:	d063      	beq.n	80048fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004832:	4b4a      	ldr	r3, [pc, #296]	; (800495c <HAL_RCC_OscConfig+0x240>)
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	f003 030c 	and.w	r3, r3, #12
 800483a:	2b00      	cmp	r3, #0
 800483c:	d00b      	beq.n	8004856 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800483e:	4b47      	ldr	r3, [pc, #284]	; (800495c <HAL_RCC_OscConfig+0x240>)
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004846:	2b08      	cmp	r3, #8
 8004848:	d11c      	bne.n	8004884 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800484a:	4b44      	ldr	r3, [pc, #272]	; (800495c <HAL_RCC_OscConfig+0x240>)
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004852:	2b00      	cmp	r3, #0
 8004854:	d116      	bne.n	8004884 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004856:	4b41      	ldr	r3, [pc, #260]	; (800495c <HAL_RCC_OscConfig+0x240>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f003 0302 	and.w	r3, r3, #2
 800485e:	2b00      	cmp	r3, #0
 8004860:	d005      	beq.n	800486e <HAL_RCC_OscConfig+0x152>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	68db      	ldr	r3, [r3, #12]
 8004866:	2b01      	cmp	r3, #1
 8004868:	d001      	beq.n	800486e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	e1c7      	b.n	8004bfe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800486e:	4b3b      	ldr	r3, [pc, #236]	; (800495c <HAL_RCC_OscConfig+0x240>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	691b      	ldr	r3, [r3, #16]
 800487a:	00db      	lsls	r3, r3, #3
 800487c:	4937      	ldr	r1, [pc, #220]	; (800495c <HAL_RCC_OscConfig+0x240>)
 800487e:	4313      	orrs	r3, r2
 8004880:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004882:	e03a      	b.n	80048fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	68db      	ldr	r3, [r3, #12]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d020      	beq.n	80048ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800488c:	4b34      	ldr	r3, [pc, #208]	; (8004960 <HAL_RCC_OscConfig+0x244>)
 800488e:	2201      	movs	r2, #1
 8004890:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004892:	f7fc fd09 	bl	80012a8 <HAL_GetTick>
 8004896:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004898:	e008      	b.n	80048ac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800489a:	f7fc fd05 	bl	80012a8 <HAL_GetTick>
 800489e:	4602      	mov	r2, r0
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	1ad3      	subs	r3, r2, r3
 80048a4:	2b02      	cmp	r3, #2
 80048a6:	d901      	bls.n	80048ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80048a8:	2303      	movs	r3, #3
 80048aa:	e1a8      	b.n	8004bfe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048ac:	4b2b      	ldr	r3, [pc, #172]	; (800495c <HAL_RCC_OscConfig+0x240>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f003 0302 	and.w	r3, r3, #2
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d0f0      	beq.n	800489a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048b8:	4b28      	ldr	r3, [pc, #160]	; (800495c <HAL_RCC_OscConfig+0x240>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	691b      	ldr	r3, [r3, #16]
 80048c4:	00db      	lsls	r3, r3, #3
 80048c6:	4925      	ldr	r1, [pc, #148]	; (800495c <HAL_RCC_OscConfig+0x240>)
 80048c8:	4313      	orrs	r3, r2
 80048ca:	600b      	str	r3, [r1, #0]
 80048cc:	e015      	b.n	80048fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80048ce:	4b24      	ldr	r3, [pc, #144]	; (8004960 <HAL_RCC_OscConfig+0x244>)
 80048d0:	2200      	movs	r2, #0
 80048d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048d4:	f7fc fce8 	bl	80012a8 <HAL_GetTick>
 80048d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048da:	e008      	b.n	80048ee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80048dc:	f7fc fce4 	bl	80012a8 <HAL_GetTick>
 80048e0:	4602      	mov	r2, r0
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	1ad3      	subs	r3, r2, r3
 80048e6:	2b02      	cmp	r3, #2
 80048e8:	d901      	bls.n	80048ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80048ea:	2303      	movs	r3, #3
 80048ec:	e187      	b.n	8004bfe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048ee:	4b1b      	ldr	r3, [pc, #108]	; (800495c <HAL_RCC_OscConfig+0x240>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f003 0302 	and.w	r3, r3, #2
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d1f0      	bne.n	80048dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f003 0308 	and.w	r3, r3, #8
 8004902:	2b00      	cmp	r3, #0
 8004904:	d036      	beq.n	8004974 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	695b      	ldr	r3, [r3, #20]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d016      	beq.n	800493c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800490e:	4b15      	ldr	r3, [pc, #84]	; (8004964 <HAL_RCC_OscConfig+0x248>)
 8004910:	2201      	movs	r2, #1
 8004912:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004914:	f7fc fcc8 	bl	80012a8 <HAL_GetTick>
 8004918:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800491a:	e008      	b.n	800492e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800491c:	f7fc fcc4 	bl	80012a8 <HAL_GetTick>
 8004920:	4602      	mov	r2, r0
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	1ad3      	subs	r3, r2, r3
 8004926:	2b02      	cmp	r3, #2
 8004928:	d901      	bls.n	800492e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800492a:	2303      	movs	r3, #3
 800492c:	e167      	b.n	8004bfe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800492e:	4b0b      	ldr	r3, [pc, #44]	; (800495c <HAL_RCC_OscConfig+0x240>)
 8004930:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004932:	f003 0302 	and.w	r3, r3, #2
 8004936:	2b00      	cmp	r3, #0
 8004938:	d0f0      	beq.n	800491c <HAL_RCC_OscConfig+0x200>
 800493a:	e01b      	b.n	8004974 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800493c:	4b09      	ldr	r3, [pc, #36]	; (8004964 <HAL_RCC_OscConfig+0x248>)
 800493e:	2200      	movs	r2, #0
 8004940:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004942:	f7fc fcb1 	bl	80012a8 <HAL_GetTick>
 8004946:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004948:	e00e      	b.n	8004968 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800494a:	f7fc fcad 	bl	80012a8 <HAL_GetTick>
 800494e:	4602      	mov	r2, r0
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	1ad3      	subs	r3, r2, r3
 8004954:	2b02      	cmp	r3, #2
 8004956:	d907      	bls.n	8004968 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004958:	2303      	movs	r3, #3
 800495a:	e150      	b.n	8004bfe <HAL_RCC_OscConfig+0x4e2>
 800495c:	40023800 	.word	0x40023800
 8004960:	42470000 	.word	0x42470000
 8004964:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004968:	4b88      	ldr	r3, [pc, #544]	; (8004b8c <HAL_RCC_OscConfig+0x470>)
 800496a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800496c:	f003 0302 	and.w	r3, r3, #2
 8004970:	2b00      	cmp	r3, #0
 8004972:	d1ea      	bne.n	800494a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f003 0304 	and.w	r3, r3, #4
 800497c:	2b00      	cmp	r3, #0
 800497e:	f000 8097 	beq.w	8004ab0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004982:	2300      	movs	r3, #0
 8004984:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004986:	4b81      	ldr	r3, [pc, #516]	; (8004b8c <HAL_RCC_OscConfig+0x470>)
 8004988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800498a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800498e:	2b00      	cmp	r3, #0
 8004990:	d10f      	bne.n	80049b2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004992:	2300      	movs	r3, #0
 8004994:	60bb      	str	r3, [r7, #8]
 8004996:	4b7d      	ldr	r3, [pc, #500]	; (8004b8c <HAL_RCC_OscConfig+0x470>)
 8004998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800499a:	4a7c      	ldr	r2, [pc, #496]	; (8004b8c <HAL_RCC_OscConfig+0x470>)
 800499c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049a0:	6413      	str	r3, [r2, #64]	; 0x40
 80049a2:	4b7a      	ldr	r3, [pc, #488]	; (8004b8c <HAL_RCC_OscConfig+0x470>)
 80049a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049aa:	60bb      	str	r3, [r7, #8]
 80049ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049ae:	2301      	movs	r3, #1
 80049b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049b2:	4b77      	ldr	r3, [pc, #476]	; (8004b90 <HAL_RCC_OscConfig+0x474>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d118      	bne.n	80049f0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80049be:	4b74      	ldr	r3, [pc, #464]	; (8004b90 <HAL_RCC_OscConfig+0x474>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a73      	ldr	r2, [pc, #460]	; (8004b90 <HAL_RCC_OscConfig+0x474>)
 80049c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049ca:	f7fc fc6d 	bl	80012a8 <HAL_GetTick>
 80049ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049d0:	e008      	b.n	80049e4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049d2:	f7fc fc69 	bl	80012a8 <HAL_GetTick>
 80049d6:	4602      	mov	r2, r0
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	1ad3      	subs	r3, r2, r3
 80049dc:	2b02      	cmp	r3, #2
 80049de:	d901      	bls.n	80049e4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80049e0:	2303      	movs	r3, #3
 80049e2:	e10c      	b.n	8004bfe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049e4:	4b6a      	ldr	r3, [pc, #424]	; (8004b90 <HAL_RCC_OscConfig+0x474>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d0f0      	beq.n	80049d2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	d106      	bne.n	8004a06 <HAL_RCC_OscConfig+0x2ea>
 80049f8:	4b64      	ldr	r3, [pc, #400]	; (8004b8c <HAL_RCC_OscConfig+0x470>)
 80049fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049fc:	4a63      	ldr	r2, [pc, #396]	; (8004b8c <HAL_RCC_OscConfig+0x470>)
 80049fe:	f043 0301 	orr.w	r3, r3, #1
 8004a02:	6713      	str	r3, [r2, #112]	; 0x70
 8004a04:	e01c      	b.n	8004a40 <HAL_RCC_OscConfig+0x324>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	2b05      	cmp	r3, #5
 8004a0c:	d10c      	bne.n	8004a28 <HAL_RCC_OscConfig+0x30c>
 8004a0e:	4b5f      	ldr	r3, [pc, #380]	; (8004b8c <HAL_RCC_OscConfig+0x470>)
 8004a10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a12:	4a5e      	ldr	r2, [pc, #376]	; (8004b8c <HAL_RCC_OscConfig+0x470>)
 8004a14:	f043 0304 	orr.w	r3, r3, #4
 8004a18:	6713      	str	r3, [r2, #112]	; 0x70
 8004a1a:	4b5c      	ldr	r3, [pc, #368]	; (8004b8c <HAL_RCC_OscConfig+0x470>)
 8004a1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a1e:	4a5b      	ldr	r2, [pc, #364]	; (8004b8c <HAL_RCC_OscConfig+0x470>)
 8004a20:	f043 0301 	orr.w	r3, r3, #1
 8004a24:	6713      	str	r3, [r2, #112]	; 0x70
 8004a26:	e00b      	b.n	8004a40 <HAL_RCC_OscConfig+0x324>
 8004a28:	4b58      	ldr	r3, [pc, #352]	; (8004b8c <HAL_RCC_OscConfig+0x470>)
 8004a2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a2c:	4a57      	ldr	r2, [pc, #348]	; (8004b8c <HAL_RCC_OscConfig+0x470>)
 8004a2e:	f023 0301 	bic.w	r3, r3, #1
 8004a32:	6713      	str	r3, [r2, #112]	; 0x70
 8004a34:	4b55      	ldr	r3, [pc, #340]	; (8004b8c <HAL_RCC_OscConfig+0x470>)
 8004a36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a38:	4a54      	ldr	r2, [pc, #336]	; (8004b8c <HAL_RCC_OscConfig+0x470>)
 8004a3a:	f023 0304 	bic.w	r3, r3, #4
 8004a3e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d015      	beq.n	8004a74 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a48:	f7fc fc2e 	bl	80012a8 <HAL_GetTick>
 8004a4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a4e:	e00a      	b.n	8004a66 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a50:	f7fc fc2a 	bl	80012a8 <HAL_GetTick>
 8004a54:	4602      	mov	r2, r0
 8004a56:	693b      	ldr	r3, [r7, #16]
 8004a58:	1ad3      	subs	r3, r2, r3
 8004a5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d901      	bls.n	8004a66 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004a62:	2303      	movs	r3, #3
 8004a64:	e0cb      	b.n	8004bfe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a66:	4b49      	ldr	r3, [pc, #292]	; (8004b8c <HAL_RCC_OscConfig+0x470>)
 8004a68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a6a:	f003 0302 	and.w	r3, r3, #2
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d0ee      	beq.n	8004a50 <HAL_RCC_OscConfig+0x334>
 8004a72:	e014      	b.n	8004a9e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a74:	f7fc fc18 	bl	80012a8 <HAL_GetTick>
 8004a78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a7a:	e00a      	b.n	8004a92 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a7c:	f7fc fc14 	bl	80012a8 <HAL_GetTick>
 8004a80:	4602      	mov	r2, r0
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	1ad3      	subs	r3, r2, r3
 8004a86:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d901      	bls.n	8004a92 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004a8e:	2303      	movs	r3, #3
 8004a90:	e0b5      	b.n	8004bfe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a92:	4b3e      	ldr	r3, [pc, #248]	; (8004b8c <HAL_RCC_OscConfig+0x470>)
 8004a94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a96:	f003 0302 	and.w	r3, r3, #2
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d1ee      	bne.n	8004a7c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a9e:	7dfb      	ldrb	r3, [r7, #23]
 8004aa0:	2b01      	cmp	r3, #1
 8004aa2:	d105      	bne.n	8004ab0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004aa4:	4b39      	ldr	r3, [pc, #228]	; (8004b8c <HAL_RCC_OscConfig+0x470>)
 8004aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa8:	4a38      	ldr	r2, [pc, #224]	; (8004b8c <HAL_RCC_OscConfig+0x470>)
 8004aaa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004aae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	699b      	ldr	r3, [r3, #24]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	f000 80a1 	beq.w	8004bfc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004aba:	4b34      	ldr	r3, [pc, #208]	; (8004b8c <HAL_RCC_OscConfig+0x470>)
 8004abc:	689b      	ldr	r3, [r3, #8]
 8004abe:	f003 030c 	and.w	r3, r3, #12
 8004ac2:	2b08      	cmp	r3, #8
 8004ac4:	d05c      	beq.n	8004b80 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	699b      	ldr	r3, [r3, #24]
 8004aca:	2b02      	cmp	r3, #2
 8004acc:	d141      	bne.n	8004b52 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ace:	4b31      	ldr	r3, [pc, #196]	; (8004b94 <HAL_RCC_OscConfig+0x478>)
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ad4:	f7fc fbe8 	bl	80012a8 <HAL_GetTick>
 8004ad8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ada:	e008      	b.n	8004aee <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004adc:	f7fc fbe4 	bl	80012a8 <HAL_GetTick>
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	1ad3      	subs	r3, r2, r3
 8004ae6:	2b02      	cmp	r3, #2
 8004ae8:	d901      	bls.n	8004aee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004aea:	2303      	movs	r3, #3
 8004aec:	e087      	b.n	8004bfe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004aee:	4b27      	ldr	r3, [pc, #156]	; (8004b8c <HAL_RCC_OscConfig+0x470>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d1f0      	bne.n	8004adc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	69da      	ldr	r2, [r3, #28]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6a1b      	ldr	r3, [r3, #32]
 8004b02:	431a      	orrs	r2, r3
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b08:	019b      	lsls	r3, r3, #6
 8004b0a:	431a      	orrs	r2, r3
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b10:	085b      	lsrs	r3, r3, #1
 8004b12:	3b01      	subs	r3, #1
 8004b14:	041b      	lsls	r3, r3, #16
 8004b16:	431a      	orrs	r2, r3
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b1c:	061b      	lsls	r3, r3, #24
 8004b1e:	491b      	ldr	r1, [pc, #108]	; (8004b8c <HAL_RCC_OscConfig+0x470>)
 8004b20:	4313      	orrs	r3, r2
 8004b22:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b24:	4b1b      	ldr	r3, [pc, #108]	; (8004b94 <HAL_RCC_OscConfig+0x478>)
 8004b26:	2201      	movs	r2, #1
 8004b28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b2a:	f7fc fbbd 	bl	80012a8 <HAL_GetTick>
 8004b2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b30:	e008      	b.n	8004b44 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b32:	f7fc fbb9 	bl	80012a8 <HAL_GetTick>
 8004b36:	4602      	mov	r2, r0
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	1ad3      	subs	r3, r2, r3
 8004b3c:	2b02      	cmp	r3, #2
 8004b3e:	d901      	bls.n	8004b44 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004b40:	2303      	movs	r3, #3
 8004b42:	e05c      	b.n	8004bfe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b44:	4b11      	ldr	r3, [pc, #68]	; (8004b8c <HAL_RCC_OscConfig+0x470>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d0f0      	beq.n	8004b32 <HAL_RCC_OscConfig+0x416>
 8004b50:	e054      	b.n	8004bfc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b52:	4b10      	ldr	r3, [pc, #64]	; (8004b94 <HAL_RCC_OscConfig+0x478>)
 8004b54:	2200      	movs	r2, #0
 8004b56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b58:	f7fc fba6 	bl	80012a8 <HAL_GetTick>
 8004b5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b5e:	e008      	b.n	8004b72 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b60:	f7fc fba2 	bl	80012a8 <HAL_GetTick>
 8004b64:	4602      	mov	r2, r0
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	1ad3      	subs	r3, r2, r3
 8004b6a:	2b02      	cmp	r3, #2
 8004b6c:	d901      	bls.n	8004b72 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004b6e:	2303      	movs	r3, #3
 8004b70:	e045      	b.n	8004bfe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b72:	4b06      	ldr	r3, [pc, #24]	; (8004b8c <HAL_RCC_OscConfig+0x470>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d1f0      	bne.n	8004b60 <HAL_RCC_OscConfig+0x444>
 8004b7e:	e03d      	b.n	8004bfc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	699b      	ldr	r3, [r3, #24]
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d107      	bne.n	8004b98 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	e038      	b.n	8004bfe <HAL_RCC_OscConfig+0x4e2>
 8004b8c:	40023800 	.word	0x40023800
 8004b90:	40007000 	.word	0x40007000
 8004b94:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004b98:	4b1b      	ldr	r3, [pc, #108]	; (8004c08 <HAL_RCC_OscConfig+0x4ec>)
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	699b      	ldr	r3, [r3, #24]
 8004ba2:	2b01      	cmp	r3, #1
 8004ba4:	d028      	beq.n	8004bf8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004bb0:	429a      	cmp	r2, r3
 8004bb2:	d121      	bne.n	8004bf8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bbe:	429a      	cmp	r2, r3
 8004bc0:	d11a      	bne.n	8004bf8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004bc2:	68fa      	ldr	r2, [r7, #12]
 8004bc4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004bc8:	4013      	ands	r3, r2
 8004bca:	687a      	ldr	r2, [r7, #4]
 8004bcc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004bce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d111      	bne.n	8004bf8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bde:	085b      	lsrs	r3, r3, #1
 8004be0:	3b01      	subs	r3, #1
 8004be2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004be4:	429a      	cmp	r2, r3
 8004be6:	d107      	bne.n	8004bf8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bf2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d001      	beq.n	8004bfc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e000      	b.n	8004bfe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004bfc:	2300      	movs	r3, #0
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3718      	adds	r7, #24
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}
 8004c06:	bf00      	nop
 8004c08:	40023800 	.word	0x40023800

08004c0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b084      	sub	sp, #16
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
 8004c14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d101      	bne.n	8004c20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	e0cc      	b.n	8004dba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004c20:	4b68      	ldr	r3, [pc, #416]	; (8004dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f003 030f 	and.w	r3, r3, #15
 8004c28:	683a      	ldr	r2, [r7, #0]
 8004c2a:	429a      	cmp	r2, r3
 8004c2c:	d90c      	bls.n	8004c48 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c2e:	4b65      	ldr	r3, [pc, #404]	; (8004dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8004c30:	683a      	ldr	r2, [r7, #0]
 8004c32:	b2d2      	uxtb	r2, r2
 8004c34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c36:	4b63      	ldr	r3, [pc, #396]	; (8004dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f003 030f 	and.w	r3, r3, #15
 8004c3e:	683a      	ldr	r2, [r7, #0]
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d001      	beq.n	8004c48 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004c44:	2301      	movs	r3, #1
 8004c46:	e0b8      	b.n	8004dba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f003 0302 	and.w	r3, r3, #2
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d020      	beq.n	8004c96 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f003 0304 	and.w	r3, r3, #4
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d005      	beq.n	8004c6c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c60:	4b59      	ldr	r3, [pc, #356]	; (8004dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c62:	689b      	ldr	r3, [r3, #8]
 8004c64:	4a58      	ldr	r2, [pc, #352]	; (8004dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c66:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004c6a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f003 0308 	and.w	r3, r3, #8
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d005      	beq.n	8004c84 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c78:	4b53      	ldr	r3, [pc, #332]	; (8004dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	4a52      	ldr	r2, [pc, #328]	; (8004dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c7e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004c82:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c84:	4b50      	ldr	r3, [pc, #320]	; (8004dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	689b      	ldr	r3, [r3, #8]
 8004c90:	494d      	ldr	r1, [pc, #308]	; (8004dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c92:	4313      	orrs	r3, r2
 8004c94:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f003 0301 	and.w	r3, r3, #1
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d044      	beq.n	8004d2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	2b01      	cmp	r3, #1
 8004ca8:	d107      	bne.n	8004cba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004caa:	4b47      	ldr	r3, [pc, #284]	; (8004dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d119      	bne.n	8004cea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e07f      	b.n	8004dba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	2b02      	cmp	r3, #2
 8004cc0:	d003      	beq.n	8004cca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004cc6:	2b03      	cmp	r3, #3
 8004cc8:	d107      	bne.n	8004cda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cca:	4b3f      	ldr	r3, [pc, #252]	; (8004dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d109      	bne.n	8004cea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e06f      	b.n	8004dba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cda:	4b3b      	ldr	r3, [pc, #236]	; (8004dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f003 0302 	and.w	r3, r3, #2
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d101      	bne.n	8004cea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	e067      	b.n	8004dba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004cea:	4b37      	ldr	r3, [pc, #220]	; (8004dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	f023 0203 	bic.w	r2, r3, #3
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	4934      	ldr	r1, [pc, #208]	; (8004dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004cfc:	f7fc fad4 	bl	80012a8 <HAL_GetTick>
 8004d00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d02:	e00a      	b.n	8004d1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d04:	f7fc fad0 	bl	80012a8 <HAL_GetTick>
 8004d08:	4602      	mov	r2, r0
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	1ad3      	subs	r3, r2, r3
 8004d0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d901      	bls.n	8004d1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004d16:	2303      	movs	r3, #3
 8004d18:	e04f      	b.n	8004dba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d1a:	4b2b      	ldr	r3, [pc, #172]	; (8004dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	f003 020c 	and.w	r2, r3, #12
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	009b      	lsls	r3, r3, #2
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	d1eb      	bne.n	8004d04 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004d2c:	4b25      	ldr	r3, [pc, #148]	; (8004dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f003 030f 	and.w	r3, r3, #15
 8004d34:	683a      	ldr	r2, [r7, #0]
 8004d36:	429a      	cmp	r2, r3
 8004d38:	d20c      	bcs.n	8004d54 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d3a:	4b22      	ldr	r3, [pc, #136]	; (8004dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8004d3c:	683a      	ldr	r2, [r7, #0]
 8004d3e:	b2d2      	uxtb	r2, r2
 8004d40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d42:	4b20      	ldr	r3, [pc, #128]	; (8004dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f003 030f 	and.w	r3, r3, #15
 8004d4a:	683a      	ldr	r2, [r7, #0]
 8004d4c:	429a      	cmp	r2, r3
 8004d4e:	d001      	beq.n	8004d54 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004d50:	2301      	movs	r3, #1
 8004d52:	e032      	b.n	8004dba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f003 0304 	and.w	r3, r3, #4
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d008      	beq.n	8004d72 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d60:	4b19      	ldr	r3, [pc, #100]	; (8004dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	68db      	ldr	r3, [r3, #12]
 8004d6c:	4916      	ldr	r1, [pc, #88]	; (8004dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f003 0308 	and.w	r3, r3, #8
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d009      	beq.n	8004d92 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d7e:	4b12      	ldr	r3, [pc, #72]	; (8004dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	691b      	ldr	r3, [r3, #16]
 8004d8a:	00db      	lsls	r3, r3, #3
 8004d8c:	490e      	ldr	r1, [pc, #56]	; (8004dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004d92:	f000 f821 	bl	8004dd8 <HAL_RCC_GetSysClockFreq>
 8004d96:	4602      	mov	r2, r0
 8004d98:	4b0b      	ldr	r3, [pc, #44]	; (8004dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	091b      	lsrs	r3, r3, #4
 8004d9e:	f003 030f 	and.w	r3, r3, #15
 8004da2:	490a      	ldr	r1, [pc, #40]	; (8004dcc <HAL_RCC_ClockConfig+0x1c0>)
 8004da4:	5ccb      	ldrb	r3, [r1, r3]
 8004da6:	fa22 f303 	lsr.w	r3, r2, r3
 8004daa:	4a09      	ldr	r2, [pc, #36]	; (8004dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8004dac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004dae:	4b09      	ldr	r3, [pc, #36]	; (8004dd4 <HAL_RCC_ClockConfig+0x1c8>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4618      	mov	r0, r3
 8004db4:	f7fc fa34 	bl	8001220 <HAL_InitTick>

  return HAL_OK;
 8004db8:	2300      	movs	r3, #0
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3710      	adds	r7, #16
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}
 8004dc2:	bf00      	nop
 8004dc4:	40023c00 	.word	0x40023c00
 8004dc8:	40023800 	.word	0x40023800
 8004dcc:	080071bc 	.word	0x080071bc
 8004dd0:	20000000 	.word	0x20000000
 8004dd4:	20000004 	.word	0x20000004

08004dd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004dd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ddc:	b094      	sub	sp, #80	; 0x50
 8004dde:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004de0:	2300      	movs	r3, #0
 8004de2:	647b      	str	r3, [r7, #68]	; 0x44
 8004de4:	2300      	movs	r3, #0
 8004de6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004de8:	2300      	movs	r3, #0
 8004dea:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004dec:	2300      	movs	r3, #0
 8004dee:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004df0:	4b79      	ldr	r3, [pc, #484]	; (8004fd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004df2:	689b      	ldr	r3, [r3, #8]
 8004df4:	f003 030c 	and.w	r3, r3, #12
 8004df8:	2b08      	cmp	r3, #8
 8004dfa:	d00d      	beq.n	8004e18 <HAL_RCC_GetSysClockFreq+0x40>
 8004dfc:	2b08      	cmp	r3, #8
 8004dfe:	f200 80e1 	bhi.w	8004fc4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d002      	beq.n	8004e0c <HAL_RCC_GetSysClockFreq+0x34>
 8004e06:	2b04      	cmp	r3, #4
 8004e08:	d003      	beq.n	8004e12 <HAL_RCC_GetSysClockFreq+0x3a>
 8004e0a:	e0db      	b.n	8004fc4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004e0c:	4b73      	ldr	r3, [pc, #460]	; (8004fdc <HAL_RCC_GetSysClockFreq+0x204>)
 8004e0e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004e10:	e0db      	b.n	8004fca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004e12:	4b73      	ldr	r3, [pc, #460]	; (8004fe0 <HAL_RCC_GetSysClockFreq+0x208>)
 8004e14:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004e16:	e0d8      	b.n	8004fca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004e18:	4b6f      	ldr	r3, [pc, #444]	; (8004fd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e20:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004e22:	4b6d      	ldr	r3, [pc, #436]	; (8004fd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d063      	beq.n	8004ef6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e2e:	4b6a      	ldr	r3, [pc, #424]	; (8004fd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	099b      	lsrs	r3, r3, #6
 8004e34:	2200      	movs	r2, #0
 8004e36:	63bb      	str	r3, [r7, #56]	; 0x38
 8004e38:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e40:	633b      	str	r3, [r7, #48]	; 0x30
 8004e42:	2300      	movs	r3, #0
 8004e44:	637b      	str	r3, [r7, #52]	; 0x34
 8004e46:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004e4a:	4622      	mov	r2, r4
 8004e4c:	462b      	mov	r3, r5
 8004e4e:	f04f 0000 	mov.w	r0, #0
 8004e52:	f04f 0100 	mov.w	r1, #0
 8004e56:	0159      	lsls	r1, r3, #5
 8004e58:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e5c:	0150      	lsls	r0, r2, #5
 8004e5e:	4602      	mov	r2, r0
 8004e60:	460b      	mov	r3, r1
 8004e62:	4621      	mov	r1, r4
 8004e64:	1a51      	subs	r1, r2, r1
 8004e66:	6139      	str	r1, [r7, #16]
 8004e68:	4629      	mov	r1, r5
 8004e6a:	eb63 0301 	sbc.w	r3, r3, r1
 8004e6e:	617b      	str	r3, [r7, #20]
 8004e70:	f04f 0200 	mov.w	r2, #0
 8004e74:	f04f 0300 	mov.w	r3, #0
 8004e78:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004e7c:	4659      	mov	r1, fp
 8004e7e:	018b      	lsls	r3, r1, #6
 8004e80:	4651      	mov	r1, sl
 8004e82:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004e86:	4651      	mov	r1, sl
 8004e88:	018a      	lsls	r2, r1, #6
 8004e8a:	4651      	mov	r1, sl
 8004e8c:	ebb2 0801 	subs.w	r8, r2, r1
 8004e90:	4659      	mov	r1, fp
 8004e92:	eb63 0901 	sbc.w	r9, r3, r1
 8004e96:	f04f 0200 	mov.w	r2, #0
 8004e9a:	f04f 0300 	mov.w	r3, #0
 8004e9e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004ea2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ea6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004eaa:	4690      	mov	r8, r2
 8004eac:	4699      	mov	r9, r3
 8004eae:	4623      	mov	r3, r4
 8004eb0:	eb18 0303 	adds.w	r3, r8, r3
 8004eb4:	60bb      	str	r3, [r7, #8]
 8004eb6:	462b      	mov	r3, r5
 8004eb8:	eb49 0303 	adc.w	r3, r9, r3
 8004ebc:	60fb      	str	r3, [r7, #12]
 8004ebe:	f04f 0200 	mov.w	r2, #0
 8004ec2:	f04f 0300 	mov.w	r3, #0
 8004ec6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004eca:	4629      	mov	r1, r5
 8004ecc:	024b      	lsls	r3, r1, #9
 8004ece:	4621      	mov	r1, r4
 8004ed0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004ed4:	4621      	mov	r1, r4
 8004ed6:	024a      	lsls	r2, r1, #9
 8004ed8:	4610      	mov	r0, r2
 8004eda:	4619      	mov	r1, r3
 8004edc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ede:	2200      	movs	r2, #0
 8004ee0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ee2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004ee4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004ee8:	f7fb f9d2 	bl	8000290 <__aeabi_uldivmod>
 8004eec:	4602      	mov	r2, r0
 8004eee:	460b      	mov	r3, r1
 8004ef0:	4613      	mov	r3, r2
 8004ef2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ef4:	e058      	b.n	8004fa8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ef6:	4b38      	ldr	r3, [pc, #224]	; (8004fd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	099b      	lsrs	r3, r3, #6
 8004efc:	2200      	movs	r2, #0
 8004efe:	4618      	mov	r0, r3
 8004f00:	4611      	mov	r1, r2
 8004f02:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004f06:	623b      	str	r3, [r7, #32]
 8004f08:	2300      	movs	r3, #0
 8004f0a:	627b      	str	r3, [r7, #36]	; 0x24
 8004f0c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004f10:	4642      	mov	r2, r8
 8004f12:	464b      	mov	r3, r9
 8004f14:	f04f 0000 	mov.w	r0, #0
 8004f18:	f04f 0100 	mov.w	r1, #0
 8004f1c:	0159      	lsls	r1, r3, #5
 8004f1e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004f22:	0150      	lsls	r0, r2, #5
 8004f24:	4602      	mov	r2, r0
 8004f26:	460b      	mov	r3, r1
 8004f28:	4641      	mov	r1, r8
 8004f2a:	ebb2 0a01 	subs.w	sl, r2, r1
 8004f2e:	4649      	mov	r1, r9
 8004f30:	eb63 0b01 	sbc.w	fp, r3, r1
 8004f34:	f04f 0200 	mov.w	r2, #0
 8004f38:	f04f 0300 	mov.w	r3, #0
 8004f3c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004f40:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004f44:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004f48:	ebb2 040a 	subs.w	r4, r2, sl
 8004f4c:	eb63 050b 	sbc.w	r5, r3, fp
 8004f50:	f04f 0200 	mov.w	r2, #0
 8004f54:	f04f 0300 	mov.w	r3, #0
 8004f58:	00eb      	lsls	r3, r5, #3
 8004f5a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f5e:	00e2      	lsls	r2, r4, #3
 8004f60:	4614      	mov	r4, r2
 8004f62:	461d      	mov	r5, r3
 8004f64:	4643      	mov	r3, r8
 8004f66:	18e3      	adds	r3, r4, r3
 8004f68:	603b      	str	r3, [r7, #0]
 8004f6a:	464b      	mov	r3, r9
 8004f6c:	eb45 0303 	adc.w	r3, r5, r3
 8004f70:	607b      	str	r3, [r7, #4]
 8004f72:	f04f 0200 	mov.w	r2, #0
 8004f76:	f04f 0300 	mov.w	r3, #0
 8004f7a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004f7e:	4629      	mov	r1, r5
 8004f80:	028b      	lsls	r3, r1, #10
 8004f82:	4621      	mov	r1, r4
 8004f84:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004f88:	4621      	mov	r1, r4
 8004f8a:	028a      	lsls	r2, r1, #10
 8004f8c:	4610      	mov	r0, r2
 8004f8e:	4619      	mov	r1, r3
 8004f90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f92:	2200      	movs	r2, #0
 8004f94:	61bb      	str	r3, [r7, #24]
 8004f96:	61fa      	str	r2, [r7, #28]
 8004f98:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f9c:	f7fb f978 	bl	8000290 <__aeabi_uldivmod>
 8004fa0:	4602      	mov	r2, r0
 8004fa2:	460b      	mov	r3, r1
 8004fa4:	4613      	mov	r3, r2
 8004fa6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004fa8:	4b0b      	ldr	r3, [pc, #44]	; (8004fd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	0c1b      	lsrs	r3, r3, #16
 8004fae:	f003 0303 	and.w	r3, r3, #3
 8004fb2:	3301      	adds	r3, #1
 8004fb4:	005b      	lsls	r3, r3, #1
 8004fb6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004fb8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004fba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004fbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fc0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004fc2:	e002      	b.n	8004fca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004fc4:	4b05      	ldr	r3, [pc, #20]	; (8004fdc <HAL_RCC_GetSysClockFreq+0x204>)
 8004fc6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004fc8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004fca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	3750      	adds	r7, #80	; 0x50
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004fd6:	bf00      	nop
 8004fd8:	40023800 	.word	0x40023800
 8004fdc:	00f42400 	.word	0x00f42400
 8004fe0:	007a1200 	.word	0x007a1200

08004fe4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004fe8:	4b03      	ldr	r3, [pc, #12]	; (8004ff8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004fea:	681b      	ldr	r3, [r3, #0]
}
 8004fec:	4618      	mov	r0, r3
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff4:	4770      	bx	lr
 8004ff6:	bf00      	nop
 8004ff8:	20000000 	.word	0x20000000

08004ffc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005000:	f7ff fff0 	bl	8004fe4 <HAL_RCC_GetHCLKFreq>
 8005004:	4602      	mov	r2, r0
 8005006:	4b05      	ldr	r3, [pc, #20]	; (800501c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005008:	689b      	ldr	r3, [r3, #8]
 800500a:	0a9b      	lsrs	r3, r3, #10
 800500c:	f003 0307 	and.w	r3, r3, #7
 8005010:	4903      	ldr	r1, [pc, #12]	; (8005020 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005012:	5ccb      	ldrb	r3, [r1, r3]
 8005014:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005018:	4618      	mov	r0, r3
 800501a:	bd80      	pop	{r7, pc}
 800501c:	40023800 	.word	0x40023800
 8005020:	080071cc 	.word	0x080071cc

08005024 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005028:	f7ff ffdc 	bl	8004fe4 <HAL_RCC_GetHCLKFreq>
 800502c:	4602      	mov	r2, r0
 800502e:	4b05      	ldr	r3, [pc, #20]	; (8005044 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005030:	689b      	ldr	r3, [r3, #8]
 8005032:	0b5b      	lsrs	r3, r3, #13
 8005034:	f003 0307 	and.w	r3, r3, #7
 8005038:	4903      	ldr	r1, [pc, #12]	; (8005048 <HAL_RCC_GetPCLK2Freq+0x24>)
 800503a:	5ccb      	ldrb	r3, [r1, r3]
 800503c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005040:	4618      	mov	r0, r3
 8005042:	bd80      	pop	{r7, pc}
 8005044:	40023800 	.word	0x40023800
 8005048:	080071cc 	.word	0x080071cc

0800504c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b082      	sub	sp, #8
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d101      	bne.n	800505e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800505a:	2301      	movs	r3, #1
 800505c:	e03f      	b.n	80050de <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005064:	b2db      	uxtb	r3, r3
 8005066:	2b00      	cmp	r3, #0
 8005068:	d106      	bne.n	8005078 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2200      	movs	r2, #0
 800506e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005072:	6878      	ldr	r0, [r7, #4]
 8005074:	f7fc f838 	bl	80010e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2224      	movs	r2, #36	; 0x24
 800507c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	68da      	ldr	r2, [r3, #12]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800508e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005090:	6878      	ldr	r0, [r7, #4]
 8005092:	f000 fd7b 	bl	8005b8c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	691a      	ldr	r2, [r3, #16]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80050a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	695a      	ldr	r2, [r3, #20]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80050b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	68da      	ldr	r2, [r3, #12]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80050c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2200      	movs	r2, #0
 80050ca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2220      	movs	r2, #32
 80050d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2220      	movs	r2, #32
 80050d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80050dc:	2300      	movs	r3, #0
}
 80050de:	4618      	mov	r0, r3
 80050e0:	3708      	adds	r7, #8
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}

080050e6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050e6:	b580      	push	{r7, lr}
 80050e8:	b08a      	sub	sp, #40	; 0x28
 80050ea:	af02      	add	r7, sp, #8
 80050ec:	60f8      	str	r0, [r7, #12]
 80050ee:	60b9      	str	r1, [r7, #8]
 80050f0:	603b      	str	r3, [r7, #0]
 80050f2:	4613      	mov	r3, r2
 80050f4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80050f6:	2300      	movs	r3, #0
 80050f8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005100:	b2db      	uxtb	r3, r3
 8005102:	2b20      	cmp	r3, #32
 8005104:	d17c      	bne.n	8005200 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d002      	beq.n	8005112 <HAL_UART_Transmit+0x2c>
 800510c:	88fb      	ldrh	r3, [r7, #6]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d101      	bne.n	8005116 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005112:	2301      	movs	r3, #1
 8005114:	e075      	b.n	8005202 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800511c:	2b01      	cmp	r3, #1
 800511e:	d101      	bne.n	8005124 <HAL_UART_Transmit+0x3e>
 8005120:	2302      	movs	r3, #2
 8005122:	e06e      	b.n	8005202 <HAL_UART_Transmit+0x11c>
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	2201      	movs	r2, #1
 8005128:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2200      	movs	r2, #0
 8005130:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	2221      	movs	r2, #33	; 0x21
 8005136:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800513a:	f7fc f8b5 	bl	80012a8 <HAL_GetTick>
 800513e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	88fa      	ldrh	r2, [r7, #6]
 8005144:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	88fa      	ldrh	r2, [r7, #6]
 800514a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	689b      	ldr	r3, [r3, #8]
 8005150:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005154:	d108      	bne.n	8005168 <HAL_UART_Transmit+0x82>
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	691b      	ldr	r3, [r3, #16]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d104      	bne.n	8005168 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800515e:	2300      	movs	r3, #0
 8005160:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	61bb      	str	r3, [r7, #24]
 8005166:	e003      	b.n	8005170 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800516c:	2300      	movs	r3, #0
 800516e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2200      	movs	r2, #0
 8005174:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005178:	e02a      	b.n	80051d0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	9300      	str	r3, [sp, #0]
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	2200      	movs	r2, #0
 8005182:	2180      	movs	r1, #128	; 0x80
 8005184:	68f8      	ldr	r0, [r7, #12]
 8005186:	f000 faf9 	bl	800577c <UART_WaitOnFlagUntilTimeout>
 800518a:	4603      	mov	r3, r0
 800518c:	2b00      	cmp	r3, #0
 800518e:	d001      	beq.n	8005194 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005190:	2303      	movs	r3, #3
 8005192:	e036      	b.n	8005202 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005194:	69fb      	ldr	r3, [r7, #28]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d10b      	bne.n	80051b2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800519a:	69bb      	ldr	r3, [r7, #24]
 800519c:	881b      	ldrh	r3, [r3, #0]
 800519e:	461a      	mov	r2, r3
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80051a8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80051aa:	69bb      	ldr	r3, [r7, #24]
 80051ac:	3302      	adds	r3, #2
 80051ae:	61bb      	str	r3, [r7, #24]
 80051b0:	e007      	b.n	80051c2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80051b2:	69fb      	ldr	r3, [r7, #28]
 80051b4:	781a      	ldrb	r2, [r3, #0]
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80051bc:	69fb      	ldr	r3, [r7, #28]
 80051be:	3301      	adds	r3, #1
 80051c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80051c6:	b29b      	uxth	r3, r3
 80051c8:	3b01      	subs	r3, #1
 80051ca:	b29a      	uxth	r2, r3
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80051d4:	b29b      	uxth	r3, r3
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d1cf      	bne.n	800517a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	9300      	str	r3, [sp, #0]
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	2200      	movs	r2, #0
 80051e2:	2140      	movs	r1, #64	; 0x40
 80051e4:	68f8      	ldr	r0, [r7, #12]
 80051e6:	f000 fac9 	bl	800577c <UART_WaitOnFlagUntilTimeout>
 80051ea:	4603      	mov	r3, r0
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d001      	beq.n	80051f4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80051f0:	2303      	movs	r3, #3
 80051f2:	e006      	b.n	8005202 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	2220      	movs	r2, #32
 80051f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80051fc:	2300      	movs	r3, #0
 80051fe:	e000      	b.n	8005202 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005200:	2302      	movs	r3, #2
  }
}
 8005202:	4618      	mov	r0, r3
 8005204:	3720      	adds	r7, #32
 8005206:	46bd      	mov	sp, r7
 8005208:	bd80      	pop	{r7, pc}
	...

0800520c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b0ba      	sub	sp, #232	; 0xe8
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	68db      	ldr	r3, [r3, #12]
 8005224:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	695b      	ldr	r3, [r3, #20]
 800522e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005232:	2300      	movs	r3, #0
 8005234:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005238:	2300      	movs	r3, #0
 800523a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800523e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005242:	f003 030f 	and.w	r3, r3, #15
 8005246:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800524a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800524e:	2b00      	cmp	r3, #0
 8005250:	d10f      	bne.n	8005272 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005252:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005256:	f003 0320 	and.w	r3, r3, #32
 800525a:	2b00      	cmp	r3, #0
 800525c:	d009      	beq.n	8005272 <HAL_UART_IRQHandler+0x66>
 800525e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005262:	f003 0320 	and.w	r3, r3, #32
 8005266:	2b00      	cmp	r3, #0
 8005268:	d003      	beq.n	8005272 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f000 fbd3 	bl	8005a16 <UART_Receive_IT>
      return;
 8005270:	e256      	b.n	8005720 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005272:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005276:	2b00      	cmp	r3, #0
 8005278:	f000 80de 	beq.w	8005438 <HAL_UART_IRQHandler+0x22c>
 800527c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005280:	f003 0301 	and.w	r3, r3, #1
 8005284:	2b00      	cmp	r3, #0
 8005286:	d106      	bne.n	8005296 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005288:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800528c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005290:	2b00      	cmp	r3, #0
 8005292:	f000 80d1 	beq.w	8005438 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005296:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800529a:	f003 0301 	and.w	r3, r3, #1
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d00b      	beq.n	80052ba <HAL_UART_IRQHandler+0xae>
 80052a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d005      	beq.n	80052ba <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052b2:	f043 0201 	orr.w	r2, r3, #1
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80052ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052be:	f003 0304 	and.w	r3, r3, #4
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d00b      	beq.n	80052de <HAL_UART_IRQHandler+0xd2>
 80052c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80052ca:	f003 0301 	and.w	r3, r3, #1
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d005      	beq.n	80052de <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052d6:	f043 0202 	orr.w	r2, r3, #2
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80052de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052e2:	f003 0302 	and.w	r3, r3, #2
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d00b      	beq.n	8005302 <HAL_UART_IRQHandler+0xf6>
 80052ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80052ee:	f003 0301 	and.w	r3, r3, #1
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d005      	beq.n	8005302 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052fa:	f043 0204 	orr.w	r2, r3, #4
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005302:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005306:	f003 0308 	and.w	r3, r3, #8
 800530a:	2b00      	cmp	r3, #0
 800530c:	d011      	beq.n	8005332 <HAL_UART_IRQHandler+0x126>
 800530e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005312:	f003 0320 	and.w	r3, r3, #32
 8005316:	2b00      	cmp	r3, #0
 8005318:	d105      	bne.n	8005326 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800531a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800531e:	f003 0301 	and.w	r3, r3, #1
 8005322:	2b00      	cmp	r3, #0
 8005324:	d005      	beq.n	8005332 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800532a:	f043 0208 	orr.w	r2, r3, #8
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005336:	2b00      	cmp	r3, #0
 8005338:	f000 81ed 	beq.w	8005716 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800533c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005340:	f003 0320 	and.w	r3, r3, #32
 8005344:	2b00      	cmp	r3, #0
 8005346:	d008      	beq.n	800535a <HAL_UART_IRQHandler+0x14e>
 8005348:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800534c:	f003 0320 	and.w	r3, r3, #32
 8005350:	2b00      	cmp	r3, #0
 8005352:	d002      	beq.n	800535a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005354:	6878      	ldr	r0, [r7, #4]
 8005356:	f000 fb5e 	bl	8005a16 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	695b      	ldr	r3, [r3, #20]
 8005360:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005364:	2b40      	cmp	r3, #64	; 0x40
 8005366:	bf0c      	ite	eq
 8005368:	2301      	moveq	r3, #1
 800536a:	2300      	movne	r3, #0
 800536c:	b2db      	uxtb	r3, r3
 800536e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005376:	f003 0308 	and.w	r3, r3, #8
 800537a:	2b00      	cmp	r3, #0
 800537c:	d103      	bne.n	8005386 <HAL_UART_IRQHandler+0x17a>
 800537e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005382:	2b00      	cmp	r3, #0
 8005384:	d04f      	beq.n	8005426 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f000 fa66 	bl	8005858 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	695b      	ldr	r3, [r3, #20]
 8005392:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005396:	2b40      	cmp	r3, #64	; 0x40
 8005398:	d141      	bne.n	800541e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	3314      	adds	r3, #20
 80053a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80053a8:	e853 3f00 	ldrex	r3, [r3]
 80053ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80053b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80053b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	3314      	adds	r3, #20
 80053c2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80053c6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80053ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80053d2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80053d6:	e841 2300 	strex	r3, r2, [r1]
 80053da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80053de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d1d9      	bne.n	800539a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d013      	beq.n	8005416 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053f2:	4a7d      	ldr	r2, [pc, #500]	; (80055e8 <HAL_UART_IRQHandler+0x3dc>)
 80053f4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053fa:	4618      	mov	r0, r3
 80053fc:	f7fc f905 	bl	800160a <HAL_DMA_Abort_IT>
 8005400:	4603      	mov	r3, r0
 8005402:	2b00      	cmp	r3, #0
 8005404:	d016      	beq.n	8005434 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800540a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800540c:	687a      	ldr	r2, [r7, #4]
 800540e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005410:	4610      	mov	r0, r2
 8005412:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005414:	e00e      	b.n	8005434 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f000 f99a 	bl	8005750 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800541c:	e00a      	b.n	8005434 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800541e:	6878      	ldr	r0, [r7, #4]
 8005420:	f000 f996 	bl	8005750 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005424:	e006      	b.n	8005434 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f000 f992 	bl	8005750 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2200      	movs	r2, #0
 8005430:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005432:	e170      	b.n	8005716 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005434:	bf00      	nop
    return;
 8005436:	e16e      	b.n	8005716 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800543c:	2b01      	cmp	r3, #1
 800543e:	f040 814a 	bne.w	80056d6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005442:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005446:	f003 0310 	and.w	r3, r3, #16
 800544a:	2b00      	cmp	r3, #0
 800544c:	f000 8143 	beq.w	80056d6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005450:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005454:	f003 0310 	and.w	r3, r3, #16
 8005458:	2b00      	cmp	r3, #0
 800545a:	f000 813c 	beq.w	80056d6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800545e:	2300      	movs	r3, #0
 8005460:	60bb      	str	r3, [r7, #8]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	60bb      	str	r3, [r7, #8]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	60bb      	str	r3, [r7, #8]
 8005472:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	695b      	ldr	r3, [r3, #20]
 800547a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800547e:	2b40      	cmp	r3, #64	; 0x40
 8005480:	f040 80b4 	bne.w	80055ec <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005490:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005494:	2b00      	cmp	r3, #0
 8005496:	f000 8140 	beq.w	800571a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800549e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80054a2:	429a      	cmp	r2, r3
 80054a4:	f080 8139 	bcs.w	800571a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80054ae:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054b4:	69db      	ldr	r3, [r3, #28]
 80054b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054ba:	f000 8088 	beq.w	80055ce <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	330c      	adds	r3, #12
 80054c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80054cc:	e853 3f00 	ldrex	r3, [r3]
 80054d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80054d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80054d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80054dc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	330c      	adds	r3, #12
 80054e6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80054ea:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80054ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054f2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80054f6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80054fa:	e841 2300 	strex	r3, r2, [r1]
 80054fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005502:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005506:	2b00      	cmp	r3, #0
 8005508:	d1d9      	bne.n	80054be <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	3314      	adds	r3, #20
 8005510:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005512:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005514:	e853 3f00 	ldrex	r3, [r3]
 8005518:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800551a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800551c:	f023 0301 	bic.w	r3, r3, #1
 8005520:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	3314      	adds	r3, #20
 800552a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800552e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005532:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005534:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005536:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800553a:	e841 2300 	strex	r3, r2, [r1]
 800553e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005540:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005542:	2b00      	cmp	r3, #0
 8005544:	d1e1      	bne.n	800550a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	3314      	adds	r3, #20
 800554c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800554e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005550:	e853 3f00 	ldrex	r3, [r3]
 8005554:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005556:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005558:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800555c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	3314      	adds	r3, #20
 8005566:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800556a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800556c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800556e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005570:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005572:	e841 2300 	strex	r3, r2, [r1]
 8005576:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005578:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800557a:	2b00      	cmp	r3, #0
 800557c:	d1e3      	bne.n	8005546 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2220      	movs	r2, #32
 8005582:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2200      	movs	r2, #0
 800558a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	330c      	adds	r3, #12
 8005592:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005594:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005596:	e853 3f00 	ldrex	r3, [r3]
 800559a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800559c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800559e:	f023 0310 	bic.w	r3, r3, #16
 80055a2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	330c      	adds	r3, #12
 80055ac:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80055b0:	65ba      	str	r2, [r7, #88]	; 0x58
 80055b2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055b4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80055b6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80055b8:	e841 2300 	strex	r3, r2, [r1]
 80055bc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80055be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d1e3      	bne.n	800558c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055c8:	4618      	mov	r0, r3
 80055ca:	f7fb ffae 	bl	800152a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80055d6:	b29b      	uxth	r3, r3
 80055d8:	1ad3      	subs	r3, r2, r3
 80055da:	b29b      	uxth	r3, r3
 80055dc:	4619      	mov	r1, r3
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f000 f8c0 	bl	8005764 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80055e4:	e099      	b.n	800571a <HAL_UART_IRQHandler+0x50e>
 80055e6:	bf00      	nop
 80055e8:	0800591f 	.word	0x0800591f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80055f4:	b29b      	uxth	r3, r3
 80055f6:	1ad3      	subs	r3, r2, r3
 80055f8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005600:	b29b      	uxth	r3, r3
 8005602:	2b00      	cmp	r3, #0
 8005604:	f000 808b 	beq.w	800571e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005608:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800560c:	2b00      	cmp	r3, #0
 800560e:	f000 8086 	beq.w	800571e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	330c      	adds	r3, #12
 8005618:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800561a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800561c:	e853 3f00 	ldrex	r3, [r3]
 8005620:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005622:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005624:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005628:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	330c      	adds	r3, #12
 8005632:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005636:	647a      	str	r2, [r7, #68]	; 0x44
 8005638:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800563a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800563c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800563e:	e841 2300 	strex	r3, r2, [r1]
 8005642:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005644:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005646:	2b00      	cmp	r3, #0
 8005648:	d1e3      	bne.n	8005612 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	3314      	adds	r3, #20
 8005650:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005654:	e853 3f00 	ldrex	r3, [r3]
 8005658:	623b      	str	r3, [r7, #32]
   return(result);
 800565a:	6a3b      	ldr	r3, [r7, #32]
 800565c:	f023 0301 	bic.w	r3, r3, #1
 8005660:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	3314      	adds	r3, #20
 800566a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800566e:	633a      	str	r2, [r7, #48]	; 0x30
 8005670:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005672:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005674:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005676:	e841 2300 	strex	r3, r2, [r1]
 800567a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800567c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800567e:	2b00      	cmp	r3, #0
 8005680:	d1e3      	bne.n	800564a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2220      	movs	r2, #32
 8005686:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2200      	movs	r2, #0
 800568e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	330c      	adds	r3, #12
 8005696:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	e853 3f00 	ldrex	r3, [r3]
 800569e:	60fb      	str	r3, [r7, #12]
   return(result);
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	f023 0310 	bic.w	r3, r3, #16
 80056a6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	330c      	adds	r3, #12
 80056b0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80056b4:	61fa      	str	r2, [r7, #28]
 80056b6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056b8:	69b9      	ldr	r1, [r7, #24]
 80056ba:	69fa      	ldr	r2, [r7, #28]
 80056bc:	e841 2300 	strex	r3, r2, [r1]
 80056c0:	617b      	str	r3, [r7, #20]
   return(result);
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d1e3      	bne.n	8005690 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80056c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80056cc:	4619      	mov	r1, r3
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	f000 f848 	bl	8005764 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80056d4:	e023      	b.n	800571e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80056d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d009      	beq.n	80056f6 <HAL_UART_IRQHandler+0x4ea>
 80056e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d003      	beq.n	80056f6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f000 f929 	bl	8005946 <UART_Transmit_IT>
    return;
 80056f4:	e014      	b.n	8005720 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80056f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d00e      	beq.n	8005720 <HAL_UART_IRQHandler+0x514>
 8005702:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005706:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800570a:	2b00      	cmp	r3, #0
 800570c:	d008      	beq.n	8005720 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	f000 f969 	bl	80059e6 <UART_EndTransmit_IT>
    return;
 8005714:	e004      	b.n	8005720 <HAL_UART_IRQHandler+0x514>
    return;
 8005716:	bf00      	nop
 8005718:	e002      	b.n	8005720 <HAL_UART_IRQHandler+0x514>
      return;
 800571a:	bf00      	nop
 800571c:	e000      	b.n	8005720 <HAL_UART_IRQHandler+0x514>
      return;
 800571e:	bf00      	nop
  }
}
 8005720:	37e8      	adds	r7, #232	; 0xe8
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}
 8005726:	bf00      	nop

08005728 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005728:	b480      	push	{r7}
 800572a:	b083      	sub	sp, #12
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005730:	bf00      	nop
 8005732:	370c      	adds	r7, #12
 8005734:	46bd      	mov	sp, r7
 8005736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573a:	4770      	bx	lr

0800573c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800573c:	b480      	push	{r7}
 800573e:	b083      	sub	sp, #12
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005744:	bf00      	nop
 8005746:	370c      	adds	r7, #12
 8005748:	46bd      	mov	sp, r7
 800574a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574e:	4770      	bx	lr

08005750 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005750:	b480      	push	{r7}
 8005752:	b083      	sub	sp, #12
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005758:	bf00      	nop
 800575a:	370c      	adds	r7, #12
 800575c:	46bd      	mov	sp, r7
 800575e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005762:	4770      	bx	lr

08005764 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005764:	b480      	push	{r7}
 8005766:	b083      	sub	sp, #12
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
 800576c:	460b      	mov	r3, r1
 800576e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005770:	bf00      	nop
 8005772:	370c      	adds	r7, #12
 8005774:	46bd      	mov	sp, r7
 8005776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577a:	4770      	bx	lr

0800577c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b090      	sub	sp, #64	; 0x40
 8005780:	af00      	add	r7, sp, #0
 8005782:	60f8      	str	r0, [r7, #12]
 8005784:	60b9      	str	r1, [r7, #8]
 8005786:	603b      	str	r3, [r7, #0]
 8005788:	4613      	mov	r3, r2
 800578a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800578c:	e050      	b.n	8005830 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800578e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005790:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005794:	d04c      	beq.n	8005830 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005796:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005798:	2b00      	cmp	r3, #0
 800579a:	d007      	beq.n	80057ac <UART_WaitOnFlagUntilTimeout+0x30>
 800579c:	f7fb fd84 	bl	80012a8 <HAL_GetTick>
 80057a0:	4602      	mov	r2, r0
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	1ad3      	subs	r3, r2, r3
 80057a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80057a8:	429a      	cmp	r2, r3
 80057aa:	d241      	bcs.n	8005830 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	330c      	adds	r3, #12
 80057b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057b6:	e853 3f00 	ldrex	r3, [r3]
 80057ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80057bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057be:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80057c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	330c      	adds	r3, #12
 80057ca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80057cc:	637a      	str	r2, [r7, #52]	; 0x34
 80057ce:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80057d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80057d4:	e841 2300 	strex	r3, r2, [r1]
 80057d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80057da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d1e5      	bne.n	80057ac <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	3314      	adds	r3, #20
 80057e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	e853 3f00 	ldrex	r3, [r3]
 80057ee:	613b      	str	r3, [r7, #16]
   return(result);
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	f023 0301 	bic.w	r3, r3, #1
 80057f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	3314      	adds	r3, #20
 80057fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005800:	623a      	str	r2, [r7, #32]
 8005802:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005804:	69f9      	ldr	r1, [r7, #28]
 8005806:	6a3a      	ldr	r2, [r7, #32]
 8005808:	e841 2300 	strex	r3, r2, [r1]
 800580c:	61bb      	str	r3, [r7, #24]
   return(result);
 800580e:	69bb      	ldr	r3, [r7, #24]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d1e5      	bne.n	80057e0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2220      	movs	r2, #32
 8005818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2220      	movs	r2, #32
 8005820:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	2200      	movs	r2, #0
 8005828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800582c:	2303      	movs	r3, #3
 800582e:	e00f      	b.n	8005850 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	681a      	ldr	r2, [r3, #0]
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	4013      	ands	r3, r2
 800583a:	68ba      	ldr	r2, [r7, #8]
 800583c:	429a      	cmp	r2, r3
 800583e:	bf0c      	ite	eq
 8005840:	2301      	moveq	r3, #1
 8005842:	2300      	movne	r3, #0
 8005844:	b2db      	uxtb	r3, r3
 8005846:	461a      	mov	r2, r3
 8005848:	79fb      	ldrb	r3, [r7, #7]
 800584a:	429a      	cmp	r2, r3
 800584c:	d09f      	beq.n	800578e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800584e:	2300      	movs	r3, #0
}
 8005850:	4618      	mov	r0, r3
 8005852:	3740      	adds	r7, #64	; 0x40
 8005854:	46bd      	mov	sp, r7
 8005856:	bd80      	pop	{r7, pc}

08005858 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005858:	b480      	push	{r7}
 800585a:	b095      	sub	sp, #84	; 0x54
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	330c      	adds	r3, #12
 8005866:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005868:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800586a:	e853 3f00 	ldrex	r3, [r3]
 800586e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005872:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005876:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	330c      	adds	r3, #12
 800587e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005880:	643a      	str	r2, [r7, #64]	; 0x40
 8005882:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005884:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005886:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005888:	e841 2300 	strex	r3, r2, [r1]
 800588c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800588e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005890:	2b00      	cmp	r3, #0
 8005892:	d1e5      	bne.n	8005860 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	3314      	adds	r3, #20
 800589a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800589c:	6a3b      	ldr	r3, [r7, #32]
 800589e:	e853 3f00 	ldrex	r3, [r3]
 80058a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80058a4:	69fb      	ldr	r3, [r7, #28]
 80058a6:	f023 0301 	bic.w	r3, r3, #1
 80058aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	3314      	adds	r3, #20
 80058b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80058b4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80058b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80058ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80058bc:	e841 2300 	strex	r3, r2, [r1]
 80058c0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80058c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d1e5      	bne.n	8005894 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058cc:	2b01      	cmp	r3, #1
 80058ce:	d119      	bne.n	8005904 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	330c      	adds	r3, #12
 80058d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	e853 3f00 	ldrex	r3, [r3]
 80058de:	60bb      	str	r3, [r7, #8]
   return(result);
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	f023 0310 	bic.w	r3, r3, #16
 80058e6:	647b      	str	r3, [r7, #68]	; 0x44
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	330c      	adds	r3, #12
 80058ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80058f0:	61ba      	str	r2, [r7, #24]
 80058f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058f4:	6979      	ldr	r1, [r7, #20]
 80058f6:	69ba      	ldr	r2, [r7, #24]
 80058f8:	e841 2300 	strex	r3, r2, [r1]
 80058fc:	613b      	str	r3, [r7, #16]
   return(result);
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d1e5      	bne.n	80058d0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2220      	movs	r2, #32
 8005908:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2200      	movs	r2, #0
 8005910:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005912:	bf00      	nop
 8005914:	3754      	adds	r7, #84	; 0x54
 8005916:	46bd      	mov	sp, r7
 8005918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591c:	4770      	bx	lr

0800591e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800591e:	b580      	push	{r7, lr}
 8005920:	b084      	sub	sp, #16
 8005922:	af00      	add	r7, sp, #0
 8005924:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800592a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2200      	movs	r2, #0
 8005930:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	2200      	movs	r2, #0
 8005936:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005938:	68f8      	ldr	r0, [r7, #12]
 800593a:	f7ff ff09 	bl	8005750 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800593e:	bf00      	nop
 8005940:	3710      	adds	r7, #16
 8005942:	46bd      	mov	sp, r7
 8005944:	bd80      	pop	{r7, pc}

08005946 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005946:	b480      	push	{r7}
 8005948:	b085      	sub	sp, #20
 800594a:	af00      	add	r7, sp, #0
 800594c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005954:	b2db      	uxtb	r3, r3
 8005956:	2b21      	cmp	r3, #33	; 0x21
 8005958:	d13e      	bne.n	80059d8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	689b      	ldr	r3, [r3, #8]
 800595e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005962:	d114      	bne.n	800598e <UART_Transmit_IT+0x48>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	691b      	ldr	r3, [r3, #16]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d110      	bne.n	800598e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6a1b      	ldr	r3, [r3, #32]
 8005970:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	881b      	ldrh	r3, [r3, #0]
 8005976:	461a      	mov	r2, r3
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005980:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6a1b      	ldr	r3, [r3, #32]
 8005986:	1c9a      	adds	r2, r3, #2
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	621a      	str	r2, [r3, #32]
 800598c:	e008      	b.n	80059a0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6a1b      	ldr	r3, [r3, #32]
 8005992:	1c59      	adds	r1, r3, #1
 8005994:	687a      	ldr	r2, [r7, #4]
 8005996:	6211      	str	r1, [r2, #32]
 8005998:	781a      	ldrb	r2, [r3, #0]
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80059a4:	b29b      	uxth	r3, r3
 80059a6:	3b01      	subs	r3, #1
 80059a8:	b29b      	uxth	r3, r3
 80059aa:	687a      	ldr	r2, [r7, #4]
 80059ac:	4619      	mov	r1, r3
 80059ae:	84d1      	strh	r1, [r2, #38]	; 0x26
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d10f      	bne.n	80059d4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	68da      	ldr	r2, [r3, #12]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80059c2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	68da      	ldr	r2, [r3, #12]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80059d2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80059d4:	2300      	movs	r3, #0
 80059d6:	e000      	b.n	80059da <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80059d8:	2302      	movs	r3, #2
  }
}
 80059da:	4618      	mov	r0, r3
 80059dc:	3714      	adds	r7, #20
 80059de:	46bd      	mov	sp, r7
 80059e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e4:	4770      	bx	lr

080059e6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80059e6:	b580      	push	{r7, lr}
 80059e8:	b082      	sub	sp, #8
 80059ea:	af00      	add	r7, sp, #0
 80059ec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	68da      	ldr	r2, [r3, #12]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059fc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2220      	movs	r2, #32
 8005a02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f7ff fe8e 	bl	8005728 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005a0c:	2300      	movs	r3, #0
}
 8005a0e:	4618      	mov	r0, r3
 8005a10:	3708      	adds	r7, #8
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bd80      	pop	{r7, pc}

08005a16 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005a16:	b580      	push	{r7, lr}
 8005a18:	b08c      	sub	sp, #48	; 0x30
 8005a1a:	af00      	add	r7, sp, #0
 8005a1c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a24:	b2db      	uxtb	r3, r3
 8005a26:	2b22      	cmp	r3, #34	; 0x22
 8005a28:	f040 80ab 	bne.w	8005b82 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	689b      	ldr	r3, [r3, #8]
 8005a30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a34:	d117      	bne.n	8005a66 <UART_Receive_IT+0x50>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	691b      	ldr	r3, [r3, #16]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d113      	bne.n	8005a66 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a46:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	b29b      	uxth	r3, r3
 8005a50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a54:	b29a      	uxth	r2, r3
 8005a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a58:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a5e:	1c9a      	adds	r2, r3, #2
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	629a      	str	r2, [r3, #40]	; 0x28
 8005a64:	e026      	b.n	8005ab4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	689b      	ldr	r3, [r3, #8]
 8005a74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a78:	d007      	beq.n	8005a8a <UART_Receive_IT+0x74>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	689b      	ldr	r3, [r3, #8]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d10a      	bne.n	8005a98 <UART_Receive_IT+0x82>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	691b      	ldr	r3, [r3, #16]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d106      	bne.n	8005a98 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	b2da      	uxtb	r2, r3
 8005a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a94:	701a      	strb	r2, [r3, #0]
 8005a96:	e008      	b.n	8005aaa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	b2db      	uxtb	r3, r3
 8005aa0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005aa4:	b2da      	uxtb	r2, r3
 8005aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aa8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aae:	1c5a      	adds	r2, r3, #1
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005ab8:	b29b      	uxth	r3, r3
 8005aba:	3b01      	subs	r3, #1
 8005abc:	b29b      	uxth	r3, r3
 8005abe:	687a      	ldr	r2, [r7, #4]
 8005ac0:	4619      	mov	r1, r3
 8005ac2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d15a      	bne.n	8005b7e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	68da      	ldr	r2, [r3, #12]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f022 0220 	bic.w	r2, r2, #32
 8005ad6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	68da      	ldr	r2, [r3, #12]
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005ae6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	695a      	ldr	r2, [r3, #20]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f022 0201 	bic.w	r2, r2, #1
 8005af6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2220      	movs	r2, #32
 8005afc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b04:	2b01      	cmp	r3, #1
 8005b06:	d135      	bne.n	8005b74 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	330c      	adds	r3, #12
 8005b14:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	e853 3f00 	ldrex	r3, [r3]
 8005b1c:	613b      	str	r3, [r7, #16]
   return(result);
 8005b1e:	693b      	ldr	r3, [r7, #16]
 8005b20:	f023 0310 	bic.w	r3, r3, #16
 8005b24:	627b      	str	r3, [r7, #36]	; 0x24
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	330c      	adds	r3, #12
 8005b2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b2e:	623a      	str	r2, [r7, #32]
 8005b30:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b32:	69f9      	ldr	r1, [r7, #28]
 8005b34:	6a3a      	ldr	r2, [r7, #32]
 8005b36:	e841 2300 	strex	r3, r2, [r1]
 8005b3a:	61bb      	str	r3, [r7, #24]
   return(result);
 8005b3c:	69bb      	ldr	r3, [r7, #24]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d1e5      	bne.n	8005b0e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f003 0310 	and.w	r3, r3, #16
 8005b4c:	2b10      	cmp	r3, #16
 8005b4e:	d10a      	bne.n	8005b66 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005b50:	2300      	movs	r3, #0
 8005b52:	60fb      	str	r3, [r7, #12]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	60fb      	str	r3, [r7, #12]
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	60fb      	str	r3, [r7, #12]
 8005b64:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005b6a:	4619      	mov	r1, r3
 8005b6c:	6878      	ldr	r0, [r7, #4]
 8005b6e:	f7ff fdf9 	bl	8005764 <HAL_UARTEx_RxEventCallback>
 8005b72:	e002      	b.n	8005b7a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005b74:	6878      	ldr	r0, [r7, #4]
 8005b76:	f7ff fde1 	bl	800573c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	e002      	b.n	8005b84 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005b7e:	2300      	movs	r3, #0
 8005b80:	e000      	b.n	8005b84 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005b82:	2302      	movs	r3, #2
  }
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	3730      	adds	r7, #48	; 0x30
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bd80      	pop	{r7, pc}

08005b8c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b90:	b0c0      	sub	sp, #256	; 0x100
 8005b92:	af00      	add	r7, sp, #0
 8005b94:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	691b      	ldr	r3, [r3, #16]
 8005ba0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005ba4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ba8:	68d9      	ldr	r1, [r3, #12]
 8005baa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bae:	681a      	ldr	r2, [r3, #0]
 8005bb0:	ea40 0301 	orr.w	r3, r0, r1
 8005bb4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005bb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bba:	689a      	ldr	r2, [r3, #8]
 8005bbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bc0:	691b      	ldr	r3, [r3, #16]
 8005bc2:	431a      	orrs	r2, r3
 8005bc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bc8:	695b      	ldr	r3, [r3, #20]
 8005bca:	431a      	orrs	r2, r3
 8005bcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bd0:	69db      	ldr	r3, [r3, #28]
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005bd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	68db      	ldr	r3, [r3, #12]
 8005be0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005be4:	f021 010c 	bic.w	r1, r1, #12
 8005be8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bec:	681a      	ldr	r2, [r3, #0]
 8005bee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005bf2:	430b      	orrs	r3, r1
 8005bf4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005bf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	695b      	ldr	r3, [r3, #20]
 8005bfe:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005c02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c06:	6999      	ldr	r1, [r3, #24]
 8005c08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c0c:	681a      	ldr	r2, [r3, #0]
 8005c0e:	ea40 0301 	orr.w	r3, r0, r1
 8005c12:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005c14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c18:	681a      	ldr	r2, [r3, #0]
 8005c1a:	4b8f      	ldr	r3, [pc, #572]	; (8005e58 <UART_SetConfig+0x2cc>)
 8005c1c:	429a      	cmp	r2, r3
 8005c1e:	d005      	beq.n	8005c2c <UART_SetConfig+0xa0>
 8005c20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c24:	681a      	ldr	r2, [r3, #0]
 8005c26:	4b8d      	ldr	r3, [pc, #564]	; (8005e5c <UART_SetConfig+0x2d0>)
 8005c28:	429a      	cmp	r2, r3
 8005c2a:	d104      	bne.n	8005c36 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005c2c:	f7ff f9fa 	bl	8005024 <HAL_RCC_GetPCLK2Freq>
 8005c30:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005c34:	e003      	b.n	8005c3e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005c36:	f7ff f9e1 	bl	8004ffc <HAL_RCC_GetPCLK1Freq>
 8005c3a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c42:	69db      	ldr	r3, [r3, #28]
 8005c44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c48:	f040 810c 	bne.w	8005e64 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005c4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c50:	2200      	movs	r2, #0
 8005c52:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005c56:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005c5a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005c5e:	4622      	mov	r2, r4
 8005c60:	462b      	mov	r3, r5
 8005c62:	1891      	adds	r1, r2, r2
 8005c64:	65b9      	str	r1, [r7, #88]	; 0x58
 8005c66:	415b      	adcs	r3, r3
 8005c68:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005c6a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005c6e:	4621      	mov	r1, r4
 8005c70:	eb12 0801 	adds.w	r8, r2, r1
 8005c74:	4629      	mov	r1, r5
 8005c76:	eb43 0901 	adc.w	r9, r3, r1
 8005c7a:	f04f 0200 	mov.w	r2, #0
 8005c7e:	f04f 0300 	mov.w	r3, #0
 8005c82:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005c86:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005c8a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005c8e:	4690      	mov	r8, r2
 8005c90:	4699      	mov	r9, r3
 8005c92:	4623      	mov	r3, r4
 8005c94:	eb18 0303 	adds.w	r3, r8, r3
 8005c98:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005c9c:	462b      	mov	r3, r5
 8005c9e:	eb49 0303 	adc.w	r3, r9, r3
 8005ca2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005ca6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	2200      	movs	r2, #0
 8005cae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005cb2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005cb6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005cba:	460b      	mov	r3, r1
 8005cbc:	18db      	adds	r3, r3, r3
 8005cbe:	653b      	str	r3, [r7, #80]	; 0x50
 8005cc0:	4613      	mov	r3, r2
 8005cc2:	eb42 0303 	adc.w	r3, r2, r3
 8005cc6:	657b      	str	r3, [r7, #84]	; 0x54
 8005cc8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005ccc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005cd0:	f7fa fade 	bl	8000290 <__aeabi_uldivmod>
 8005cd4:	4602      	mov	r2, r0
 8005cd6:	460b      	mov	r3, r1
 8005cd8:	4b61      	ldr	r3, [pc, #388]	; (8005e60 <UART_SetConfig+0x2d4>)
 8005cda:	fba3 2302 	umull	r2, r3, r3, r2
 8005cde:	095b      	lsrs	r3, r3, #5
 8005ce0:	011c      	lsls	r4, r3, #4
 8005ce2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005cec:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005cf0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005cf4:	4642      	mov	r2, r8
 8005cf6:	464b      	mov	r3, r9
 8005cf8:	1891      	adds	r1, r2, r2
 8005cfa:	64b9      	str	r1, [r7, #72]	; 0x48
 8005cfc:	415b      	adcs	r3, r3
 8005cfe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d00:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005d04:	4641      	mov	r1, r8
 8005d06:	eb12 0a01 	adds.w	sl, r2, r1
 8005d0a:	4649      	mov	r1, r9
 8005d0c:	eb43 0b01 	adc.w	fp, r3, r1
 8005d10:	f04f 0200 	mov.w	r2, #0
 8005d14:	f04f 0300 	mov.w	r3, #0
 8005d18:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005d1c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005d20:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005d24:	4692      	mov	sl, r2
 8005d26:	469b      	mov	fp, r3
 8005d28:	4643      	mov	r3, r8
 8005d2a:	eb1a 0303 	adds.w	r3, sl, r3
 8005d2e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005d32:	464b      	mov	r3, r9
 8005d34:	eb4b 0303 	adc.w	r3, fp, r3
 8005d38:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005d3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	2200      	movs	r2, #0
 8005d44:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005d48:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005d4c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005d50:	460b      	mov	r3, r1
 8005d52:	18db      	adds	r3, r3, r3
 8005d54:	643b      	str	r3, [r7, #64]	; 0x40
 8005d56:	4613      	mov	r3, r2
 8005d58:	eb42 0303 	adc.w	r3, r2, r3
 8005d5c:	647b      	str	r3, [r7, #68]	; 0x44
 8005d5e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005d62:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005d66:	f7fa fa93 	bl	8000290 <__aeabi_uldivmod>
 8005d6a:	4602      	mov	r2, r0
 8005d6c:	460b      	mov	r3, r1
 8005d6e:	4611      	mov	r1, r2
 8005d70:	4b3b      	ldr	r3, [pc, #236]	; (8005e60 <UART_SetConfig+0x2d4>)
 8005d72:	fba3 2301 	umull	r2, r3, r3, r1
 8005d76:	095b      	lsrs	r3, r3, #5
 8005d78:	2264      	movs	r2, #100	; 0x64
 8005d7a:	fb02 f303 	mul.w	r3, r2, r3
 8005d7e:	1acb      	subs	r3, r1, r3
 8005d80:	00db      	lsls	r3, r3, #3
 8005d82:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005d86:	4b36      	ldr	r3, [pc, #216]	; (8005e60 <UART_SetConfig+0x2d4>)
 8005d88:	fba3 2302 	umull	r2, r3, r3, r2
 8005d8c:	095b      	lsrs	r3, r3, #5
 8005d8e:	005b      	lsls	r3, r3, #1
 8005d90:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005d94:	441c      	add	r4, r3
 8005d96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005da0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005da4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005da8:	4642      	mov	r2, r8
 8005daa:	464b      	mov	r3, r9
 8005dac:	1891      	adds	r1, r2, r2
 8005dae:	63b9      	str	r1, [r7, #56]	; 0x38
 8005db0:	415b      	adcs	r3, r3
 8005db2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005db4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005db8:	4641      	mov	r1, r8
 8005dba:	1851      	adds	r1, r2, r1
 8005dbc:	6339      	str	r1, [r7, #48]	; 0x30
 8005dbe:	4649      	mov	r1, r9
 8005dc0:	414b      	adcs	r3, r1
 8005dc2:	637b      	str	r3, [r7, #52]	; 0x34
 8005dc4:	f04f 0200 	mov.w	r2, #0
 8005dc8:	f04f 0300 	mov.w	r3, #0
 8005dcc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005dd0:	4659      	mov	r1, fp
 8005dd2:	00cb      	lsls	r3, r1, #3
 8005dd4:	4651      	mov	r1, sl
 8005dd6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005dda:	4651      	mov	r1, sl
 8005ddc:	00ca      	lsls	r2, r1, #3
 8005dde:	4610      	mov	r0, r2
 8005de0:	4619      	mov	r1, r3
 8005de2:	4603      	mov	r3, r0
 8005de4:	4642      	mov	r2, r8
 8005de6:	189b      	adds	r3, r3, r2
 8005de8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005dec:	464b      	mov	r3, r9
 8005dee:	460a      	mov	r2, r1
 8005df0:	eb42 0303 	adc.w	r3, r2, r3
 8005df4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005df8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005e04:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005e08:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005e0c:	460b      	mov	r3, r1
 8005e0e:	18db      	adds	r3, r3, r3
 8005e10:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e12:	4613      	mov	r3, r2
 8005e14:	eb42 0303 	adc.w	r3, r2, r3
 8005e18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e1a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005e1e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005e22:	f7fa fa35 	bl	8000290 <__aeabi_uldivmod>
 8005e26:	4602      	mov	r2, r0
 8005e28:	460b      	mov	r3, r1
 8005e2a:	4b0d      	ldr	r3, [pc, #52]	; (8005e60 <UART_SetConfig+0x2d4>)
 8005e2c:	fba3 1302 	umull	r1, r3, r3, r2
 8005e30:	095b      	lsrs	r3, r3, #5
 8005e32:	2164      	movs	r1, #100	; 0x64
 8005e34:	fb01 f303 	mul.w	r3, r1, r3
 8005e38:	1ad3      	subs	r3, r2, r3
 8005e3a:	00db      	lsls	r3, r3, #3
 8005e3c:	3332      	adds	r3, #50	; 0x32
 8005e3e:	4a08      	ldr	r2, [pc, #32]	; (8005e60 <UART_SetConfig+0x2d4>)
 8005e40:	fba2 2303 	umull	r2, r3, r2, r3
 8005e44:	095b      	lsrs	r3, r3, #5
 8005e46:	f003 0207 	and.w	r2, r3, #7
 8005e4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4422      	add	r2, r4
 8005e52:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005e54:	e105      	b.n	8006062 <UART_SetConfig+0x4d6>
 8005e56:	bf00      	nop
 8005e58:	40011000 	.word	0x40011000
 8005e5c:	40011400 	.word	0x40011400
 8005e60:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005e64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e68:	2200      	movs	r2, #0
 8005e6a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005e6e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005e72:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005e76:	4642      	mov	r2, r8
 8005e78:	464b      	mov	r3, r9
 8005e7a:	1891      	adds	r1, r2, r2
 8005e7c:	6239      	str	r1, [r7, #32]
 8005e7e:	415b      	adcs	r3, r3
 8005e80:	627b      	str	r3, [r7, #36]	; 0x24
 8005e82:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005e86:	4641      	mov	r1, r8
 8005e88:	1854      	adds	r4, r2, r1
 8005e8a:	4649      	mov	r1, r9
 8005e8c:	eb43 0501 	adc.w	r5, r3, r1
 8005e90:	f04f 0200 	mov.w	r2, #0
 8005e94:	f04f 0300 	mov.w	r3, #0
 8005e98:	00eb      	lsls	r3, r5, #3
 8005e9a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005e9e:	00e2      	lsls	r2, r4, #3
 8005ea0:	4614      	mov	r4, r2
 8005ea2:	461d      	mov	r5, r3
 8005ea4:	4643      	mov	r3, r8
 8005ea6:	18e3      	adds	r3, r4, r3
 8005ea8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005eac:	464b      	mov	r3, r9
 8005eae:	eb45 0303 	adc.w	r3, r5, r3
 8005eb2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005eb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005eba:	685b      	ldr	r3, [r3, #4]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005ec2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005ec6:	f04f 0200 	mov.w	r2, #0
 8005eca:	f04f 0300 	mov.w	r3, #0
 8005ece:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005ed2:	4629      	mov	r1, r5
 8005ed4:	008b      	lsls	r3, r1, #2
 8005ed6:	4621      	mov	r1, r4
 8005ed8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005edc:	4621      	mov	r1, r4
 8005ede:	008a      	lsls	r2, r1, #2
 8005ee0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005ee4:	f7fa f9d4 	bl	8000290 <__aeabi_uldivmod>
 8005ee8:	4602      	mov	r2, r0
 8005eea:	460b      	mov	r3, r1
 8005eec:	4b60      	ldr	r3, [pc, #384]	; (8006070 <UART_SetConfig+0x4e4>)
 8005eee:	fba3 2302 	umull	r2, r3, r3, r2
 8005ef2:	095b      	lsrs	r3, r3, #5
 8005ef4:	011c      	lsls	r4, r3, #4
 8005ef6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005efa:	2200      	movs	r2, #0
 8005efc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005f00:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005f04:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005f08:	4642      	mov	r2, r8
 8005f0a:	464b      	mov	r3, r9
 8005f0c:	1891      	adds	r1, r2, r2
 8005f0e:	61b9      	str	r1, [r7, #24]
 8005f10:	415b      	adcs	r3, r3
 8005f12:	61fb      	str	r3, [r7, #28]
 8005f14:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005f18:	4641      	mov	r1, r8
 8005f1a:	1851      	adds	r1, r2, r1
 8005f1c:	6139      	str	r1, [r7, #16]
 8005f1e:	4649      	mov	r1, r9
 8005f20:	414b      	adcs	r3, r1
 8005f22:	617b      	str	r3, [r7, #20]
 8005f24:	f04f 0200 	mov.w	r2, #0
 8005f28:	f04f 0300 	mov.w	r3, #0
 8005f2c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005f30:	4659      	mov	r1, fp
 8005f32:	00cb      	lsls	r3, r1, #3
 8005f34:	4651      	mov	r1, sl
 8005f36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f3a:	4651      	mov	r1, sl
 8005f3c:	00ca      	lsls	r2, r1, #3
 8005f3e:	4610      	mov	r0, r2
 8005f40:	4619      	mov	r1, r3
 8005f42:	4603      	mov	r3, r0
 8005f44:	4642      	mov	r2, r8
 8005f46:	189b      	adds	r3, r3, r2
 8005f48:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005f4c:	464b      	mov	r3, r9
 8005f4e:	460a      	mov	r2, r1
 8005f50:	eb42 0303 	adc.w	r3, r2, r3
 8005f54:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005f58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	67bb      	str	r3, [r7, #120]	; 0x78
 8005f62:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005f64:	f04f 0200 	mov.w	r2, #0
 8005f68:	f04f 0300 	mov.w	r3, #0
 8005f6c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005f70:	4649      	mov	r1, r9
 8005f72:	008b      	lsls	r3, r1, #2
 8005f74:	4641      	mov	r1, r8
 8005f76:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f7a:	4641      	mov	r1, r8
 8005f7c:	008a      	lsls	r2, r1, #2
 8005f7e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005f82:	f7fa f985 	bl	8000290 <__aeabi_uldivmod>
 8005f86:	4602      	mov	r2, r0
 8005f88:	460b      	mov	r3, r1
 8005f8a:	4b39      	ldr	r3, [pc, #228]	; (8006070 <UART_SetConfig+0x4e4>)
 8005f8c:	fba3 1302 	umull	r1, r3, r3, r2
 8005f90:	095b      	lsrs	r3, r3, #5
 8005f92:	2164      	movs	r1, #100	; 0x64
 8005f94:	fb01 f303 	mul.w	r3, r1, r3
 8005f98:	1ad3      	subs	r3, r2, r3
 8005f9a:	011b      	lsls	r3, r3, #4
 8005f9c:	3332      	adds	r3, #50	; 0x32
 8005f9e:	4a34      	ldr	r2, [pc, #208]	; (8006070 <UART_SetConfig+0x4e4>)
 8005fa0:	fba2 2303 	umull	r2, r3, r2, r3
 8005fa4:	095b      	lsrs	r3, r3, #5
 8005fa6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005faa:	441c      	add	r4, r3
 8005fac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	673b      	str	r3, [r7, #112]	; 0x70
 8005fb4:	677a      	str	r2, [r7, #116]	; 0x74
 8005fb6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005fba:	4642      	mov	r2, r8
 8005fbc:	464b      	mov	r3, r9
 8005fbe:	1891      	adds	r1, r2, r2
 8005fc0:	60b9      	str	r1, [r7, #8]
 8005fc2:	415b      	adcs	r3, r3
 8005fc4:	60fb      	str	r3, [r7, #12]
 8005fc6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005fca:	4641      	mov	r1, r8
 8005fcc:	1851      	adds	r1, r2, r1
 8005fce:	6039      	str	r1, [r7, #0]
 8005fd0:	4649      	mov	r1, r9
 8005fd2:	414b      	adcs	r3, r1
 8005fd4:	607b      	str	r3, [r7, #4]
 8005fd6:	f04f 0200 	mov.w	r2, #0
 8005fda:	f04f 0300 	mov.w	r3, #0
 8005fde:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005fe2:	4659      	mov	r1, fp
 8005fe4:	00cb      	lsls	r3, r1, #3
 8005fe6:	4651      	mov	r1, sl
 8005fe8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005fec:	4651      	mov	r1, sl
 8005fee:	00ca      	lsls	r2, r1, #3
 8005ff0:	4610      	mov	r0, r2
 8005ff2:	4619      	mov	r1, r3
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	4642      	mov	r2, r8
 8005ff8:	189b      	adds	r3, r3, r2
 8005ffa:	66bb      	str	r3, [r7, #104]	; 0x68
 8005ffc:	464b      	mov	r3, r9
 8005ffe:	460a      	mov	r2, r1
 8006000:	eb42 0303 	adc.w	r3, r2, r3
 8006004:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006006:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800600a:	685b      	ldr	r3, [r3, #4]
 800600c:	2200      	movs	r2, #0
 800600e:	663b      	str	r3, [r7, #96]	; 0x60
 8006010:	667a      	str	r2, [r7, #100]	; 0x64
 8006012:	f04f 0200 	mov.w	r2, #0
 8006016:	f04f 0300 	mov.w	r3, #0
 800601a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800601e:	4649      	mov	r1, r9
 8006020:	008b      	lsls	r3, r1, #2
 8006022:	4641      	mov	r1, r8
 8006024:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006028:	4641      	mov	r1, r8
 800602a:	008a      	lsls	r2, r1, #2
 800602c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006030:	f7fa f92e 	bl	8000290 <__aeabi_uldivmod>
 8006034:	4602      	mov	r2, r0
 8006036:	460b      	mov	r3, r1
 8006038:	4b0d      	ldr	r3, [pc, #52]	; (8006070 <UART_SetConfig+0x4e4>)
 800603a:	fba3 1302 	umull	r1, r3, r3, r2
 800603e:	095b      	lsrs	r3, r3, #5
 8006040:	2164      	movs	r1, #100	; 0x64
 8006042:	fb01 f303 	mul.w	r3, r1, r3
 8006046:	1ad3      	subs	r3, r2, r3
 8006048:	011b      	lsls	r3, r3, #4
 800604a:	3332      	adds	r3, #50	; 0x32
 800604c:	4a08      	ldr	r2, [pc, #32]	; (8006070 <UART_SetConfig+0x4e4>)
 800604e:	fba2 2303 	umull	r2, r3, r2, r3
 8006052:	095b      	lsrs	r3, r3, #5
 8006054:	f003 020f 	and.w	r2, r3, #15
 8006058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4422      	add	r2, r4
 8006060:	609a      	str	r2, [r3, #8]
}
 8006062:	bf00      	nop
 8006064:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006068:	46bd      	mov	sp, r7
 800606a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800606e:	bf00      	nop
 8006070:	51eb851f 	.word	0x51eb851f

08006074 <__errno>:
 8006074:	4b01      	ldr	r3, [pc, #4]	; (800607c <__errno+0x8>)
 8006076:	6818      	ldr	r0, [r3, #0]
 8006078:	4770      	bx	lr
 800607a:	bf00      	nop
 800607c:	2000000c 	.word	0x2000000c

08006080 <__libc_init_array>:
 8006080:	b570      	push	{r4, r5, r6, lr}
 8006082:	4d0d      	ldr	r5, [pc, #52]	; (80060b8 <__libc_init_array+0x38>)
 8006084:	4c0d      	ldr	r4, [pc, #52]	; (80060bc <__libc_init_array+0x3c>)
 8006086:	1b64      	subs	r4, r4, r5
 8006088:	10a4      	asrs	r4, r4, #2
 800608a:	2600      	movs	r6, #0
 800608c:	42a6      	cmp	r6, r4
 800608e:	d109      	bne.n	80060a4 <__libc_init_array+0x24>
 8006090:	4d0b      	ldr	r5, [pc, #44]	; (80060c0 <__libc_init_array+0x40>)
 8006092:	4c0c      	ldr	r4, [pc, #48]	; (80060c4 <__libc_init_array+0x44>)
 8006094:	f001 f832 	bl	80070fc <_init>
 8006098:	1b64      	subs	r4, r4, r5
 800609a:	10a4      	asrs	r4, r4, #2
 800609c:	2600      	movs	r6, #0
 800609e:	42a6      	cmp	r6, r4
 80060a0:	d105      	bne.n	80060ae <__libc_init_array+0x2e>
 80060a2:	bd70      	pop	{r4, r5, r6, pc}
 80060a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80060a8:	4798      	blx	r3
 80060aa:	3601      	adds	r6, #1
 80060ac:	e7ee      	b.n	800608c <__libc_init_array+0xc>
 80060ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80060b2:	4798      	blx	r3
 80060b4:	3601      	adds	r6, #1
 80060b6:	e7f2      	b.n	800609e <__libc_init_array+0x1e>
 80060b8:	08007274 	.word	0x08007274
 80060bc:	08007274 	.word	0x08007274
 80060c0:	08007274 	.word	0x08007274
 80060c4:	08007278 	.word	0x08007278

080060c8 <memcpy>:
 80060c8:	440a      	add	r2, r1
 80060ca:	4291      	cmp	r1, r2
 80060cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80060d0:	d100      	bne.n	80060d4 <memcpy+0xc>
 80060d2:	4770      	bx	lr
 80060d4:	b510      	push	{r4, lr}
 80060d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80060da:	f803 4f01 	strb.w	r4, [r3, #1]!
 80060de:	4291      	cmp	r1, r2
 80060e0:	d1f9      	bne.n	80060d6 <memcpy+0xe>
 80060e2:	bd10      	pop	{r4, pc}

080060e4 <memset>:
 80060e4:	4402      	add	r2, r0
 80060e6:	4603      	mov	r3, r0
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d100      	bne.n	80060ee <memset+0xa>
 80060ec:	4770      	bx	lr
 80060ee:	f803 1b01 	strb.w	r1, [r3], #1
 80060f2:	e7f9      	b.n	80060e8 <memset+0x4>

080060f4 <iprintf>:
 80060f4:	b40f      	push	{r0, r1, r2, r3}
 80060f6:	4b0a      	ldr	r3, [pc, #40]	; (8006120 <iprintf+0x2c>)
 80060f8:	b513      	push	{r0, r1, r4, lr}
 80060fa:	681c      	ldr	r4, [r3, #0]
 80060fc:	b124      	cbz	r4, 8006108 <iprintf+0x14>
 80060fe:	69a3      	ldr	r3, [r4, #24]
 8006100:	b913      	cbnz	r3, 8006108 <iprintf+0x14>
 8006102:	4620      	mov	r0, r4
 8006104:	f000 fa5e 	bl	80065c4 <__sinit>
 8006108:	ab05      	add	r3, sp, #20
 800610a:	9a04      	ldr	r2, [sp, #16]
 800610c:	68a1      	ldr	r1, [r4, #8]
 800610e:	9301      	str	r3, [sp, #4]
 8006110:	4620      	mov	r0, r4
 8006112:	f000 fc67 	bl	80069e4 <_vfiprintf_r>
 8006116:	b002      	add	sp, #8
 8006118:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800611c:	b004      	add	sp, #16
 800611e:	4770      	bx	lr
 8006120:	2000000c 	.word	0x2000000c

08006124 <_puts_r>:
 8006124:	b570      	push	{r4, r5, r6, lr}
 8006126:	460e      	mov	r6, r1
 8006128:	4605      	mov	r5, r0
 800612a:	b118      	cbz	r0, 8006134 <_puts_r+0x10>
 800612c:	6983      	ldr	r3, [r0, #24]
 800612e:	b90b      	cbnz	r3, 8006134 <_puts_r+0x10>
 8006130:	f000 fa48 	bl	80065c4 <__sinit>
 8006134:	69ab      	ldr	r3, [r5, #24]
 8006136:	68ac      	ldr	r4, [r5, #8]
 8006138:	b913      	cbnz	r3, 8006140 <_puts_r+0x1c>
 800613a:	4628      	mov	r0, r5
 800613c:	f000 fa42 	bl	80065c4 <__sinit>
 8006140:	4b2c      	ldr	r3, [pc, #176]	; (80061f4 <_puts_r+0xd0>)
 8006142:	429c      	cmp	r4, r3
 8006144:	d120      	bne.n	8006188 <_puts_r+0x64>
 8006146:	686c      	ldr	r4, [r5, #4]
 8006148:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800614a:	07db      	lsls	r3, r3, #31
 800614c:	d405      	bmi.n	800615a <_puts_r+0x36>
 800614e:	89a3      	ldrh	r3, [r4, #12]
 8006150:	0598      	lsls	r0, r3, #22
 8006152:	d402      	bmi.n	800615a <_puts_r+0x36>
 8006154:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006156:	f000 fad3 	bl	8006700 <__retarget_lock_acquire_recursive>
 800615a:	89a3      	ldrh	r3, [r4, #12]
 800615c:	0719      	lsls	r1, r3, #28
 800615e:	d51d      	bpl.n	800619c <_puts_r+0x78>
 8006160:	6923      	ldr	r3, [r4, #16]
 8006162:	b1db      	cbz	r3, 800619c <_puts_r+0x78>
 8006164:	3e01      	subs	r6, #1
 8006166:	68a3      	ldr	r3, [r4, #8]
 8006168:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800616c:	3b01      	subs	r3, #1
 800616e:	60a3      	str	r3, [r4, #8]
 8006170:	bb39      	cbnz	r1, 80061c2 <_puts_r+0x9e>
 8006172:	2b00      	cmp	r3, #0
 8006174:	da38      	bge.n	80061e8 <_puts_r+0xc4>
 8006176:	4622      	mov	r2, r4
 8006178:	210a      	movs	r1, #10
 800617a:	4628      	mov	r0, r5
 800617c:	f000 f848 	bl	8006210 <__swbuf_r>
 8006180:	3001      	adds	r0, #1
 8006182:	d011      	beq.n	80061a8 <_puts_r+0x84>
 8006184:	250a      	movs	r5, #10
 8006186:	e011      	b.n	80061ac <_puts_r+0x88>
 8006188:	4b1b      	ldr	r3, [pc, #108]	; (80061f8 <_puts_r+0xd4>)
 800618a:	429c      	cmp	r4, r3
 800618c:	d101      	bne.n	8006192 <_puts_r+0x6e>
 800618e:	68ac      	ldr	r4, [r5, #8]
 8006190:	e7da      	b.n	8006148 <_puts_r+0x24>
 8006192:	4b1a      	ldr	r3, [pc, #104]	; (80061fc <_puts_r+0xd8>)
 8006194:	429c      	cmp	r4, r3
 8006196:	bf08      	it	eq
 8006198:	68ec      	ldreq	r4, [r5, #12]
 800619a:	e7d5      	b.n	8006148 <_puts_r+0x24>
 800619c:	4621      	mov	r1, r4
 800619e:	4628      	mov	r0, r5
 80061a0:	f000 f888 	bl	80062b4 <__swsetup_r>
 80061a4:	2800      	cmp	r0, #0
 80061a6:	d0dd      	beq.n	8006164 <_puts_r+0x40>
 80061a8:	f04f 35ff 	mov.w	r5, #4294967295
 80061ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80061ae:	07da      	lsls	r2, r3, #31
 80061b0:	d405      	bmi.n	80061be <_puts_r+0x9a>
 80061b2:	89a3      	ldrh	r3, [r4, #12]
 80061b4:	059b      	lsls	r3, r3, #22
 80061b6:	d402      	bmi.n	80061be <_puts_r+0x9a>
 80061b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80061ba:	f000 faa2 	bl	8006702 <__retarget_lock_release_recursive>
 80061be:	4628      	mov	r0, r5
 80061c0:	bd70      	pop	{r4, r5, r6, pc}
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	da04      	bge.n	80061d0 <_puts_r+0xac>
 80061c6:	69a2      	ldr	r2, [r4, #24]
 80061c8:	429a      	cmp	r2, r3
 80061ca:	dc06      	bgt.n	80061da <_puts_r+0xb6>
 80061cc:	290a      	cmp	r1, #10
 80061ce:	d004      	beq.n	80061da <_puts_r+0xb6>
 80061d0:	6823      	ldr	r3, [r4, #0]
 80061d2:	1c5a      	adds	r2, r3, #1
 80061d4:	6022      	str	r2, [r4, #0]
 80061d6:	7019      	strb	r1, [r3, #0]
 80061d8:	e7c5      	b.n	8006166 <_puts_r+0x42>
 80061da:	4622      	mov	r2, r4
 80061dc:	4628      	mov	r0, r5
 80061de:	f000 f817 	bl	8006210 <__swbuf_r>
 80061e2:	3001      	adds	r0, #1
 80061e4:	d1bf      	bne.n	8006166 <_puts_r+0x42>
 80061e6:	e7df      	b.n	80061a8 <_puts_r+0x84>
 80061e8:	6823      	ldr	r3, [r4, #0]
 80061ea:	250a      	movs	r5, #10
 80061ec:	1c5a      	adds	r2, r3, #1
 80061ee:	6022      	str	r2, [r4, #0]
 80061f0:	701d      	strb	r5, [r3, #0]
 80061f2:	e7db      	b.n	80061ac <_puts_r+0x88>
 80061f4:	080071f8 	.word	0x080071f8
 80061f8:	08007218 	.word	0x08007218
 80061fc:	080071d8 	.word	0x080071d8

08006200 <puts>:
 8006200:	4b02      	ldr	r3, [pc, #8]	; (800620c <puts+0xc>)
 8006202:	4601      	mov	r1, r0
 8006204:	6818      	ldr	r0, [r3, #0]
 8006206:	f7ff bf8d 	b.w	8006124 <_puts_r>
 800620a:	bf00      	nop
 800620c:	2000000c 	.word	0x2000000c

08006210 <__swbuf_r>:
 8006210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006212:	460e      	mov	r6, r1
 8006214:	4614      	mov	r4, r2
 8006216:	4605      	mov	r5, r0
 8006218:	b118      	cbz	r0, 8006222 <__swbuf_r+0x12>
 800621a:	6983      	ldr	r3, [r0, #24]
 800621c:	b90b      	cbnz	r3, 8006222 <__swbuf_r+0x12>
 800621e:	f000 f9d1 	bl	80065c4 <__sinit>
 8006222:	4b21      	ldr	r3, [pc, #132]	; (80062a8 <__swbuf_r+0x98>)
 8006224:	429c      	cmp	r4, r3
 8006226:	d12b      	bne.n	8006280 <__swbuf_r+0x70>
 8006228:	686c      	ldr	r4, [r5, #4]
 800622a:	69a3      	ldr	r3, [r4, #24]
 800622c:	60a3      	str	r3, [r4, #8]
 800622e:	89a3      	ldrh	r3, [r4, #12]
 8006230:	071a      	lsls	r2, r3, #28
 8006232:	d52f      	bpl.n	8006294 <__swbuf_r+0x84>
 8006234:	6923      	ldr	r3, [r4, #16]
 8006236:	b36b      	cbz	r3, 8006294 <__swbuf_r+0x84>
 8006238:	6923      	ldr	r3, [r4, #16]
 800623a:	6820      	ldr	r0, [r4, #0]
 800623c:	1ac0      	subs	r0, r0, r3
 800623e:	6963      	ldr	r3, [r4, #20]
 8006240:	b2f6      	uxtb	r6, r6
 8006242:	4283      	cmp	r3, r0
 8006244:	4637      	mov	r7, r6
 8006246:	dc04      	bgt.n	8006252 <__swbuf_r+0x42>
 8006248:	4621      	mov	r1, r4
 800624a:	4628      	mov	r0, r5
 800624c:	f000 f926 	bl	800649c <_fflush_r>
 8006250:	bb30      	cbnz	r0, 80062a0 <__swbuf_r+0x90>
 8006252:	68a3      	ldr	r3, [r4, #8]
 8006254:	3b01      	subs	r3, #1
 8006256:	60a3      	str	r3, [r4, #8]
 8006258:	6823      	ldr	r3, [r4, #0]
 800625a:	1c5a      	adds	r2, r3, #1
 800625c:	6022      	str	r2, [r4, #0]
 800625e:	701e      	strb	r6, [r3, #0]
 8006260:	6963      	ldr	r3, [r4, #20]
 8006262:	3001      	adds	r0, #1
 8006264:	4283      	cmp	r3, r0
 8006266:	d004      	beq.n	8006272 <__swbuf_r+0x62>
 8006268:	89a3      	ldrh	r3, [r4, #12]
 800626a:	07db      	lsls	r3, r3, #31
 800626c:	d506      	bpl.n	800627c <__swbuf_r+0x6c>
 800626e:	2e0a      	cmp	r6, #10
 8006270:	d104      	bne.n	800627c <__swbuf_r+0x6c>
 8006272:	4621      	mov	r1, r4
 8006274:	4628      	mov	r0, r5
 8006276:	f000 f911 	bl	800649c <_fflush_r>
 800627a:	b988      	cbnz	r0, 80062a0 <__swbuf_r+0x90>
 800627c:	4638      	mov	r0, r7
 800627e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006280:	4b0a      	ldr	r3, [pc, #40]	; (80062ac <__swbuf_r+0x9c>)
 8006282:	429c      	cmp	r4, r3
 8006284:	d101      	bne.n	800628a <__swbuf_r+0x7a>
 8006286:	68ac      	ldr	r4, [r5, #8]
 8006288:	e7cf      	b.n	800622a <__swbuf_r+0x1a>
 800628a:	4b09      	ldr	r3, [pc, #36]	; (80062b0 <__swbuf_r+0xa0>)
 800628c:	429c      	cmp	r4, r3
 800628e:	bf08      	it	eq
 8006290:	68ec      	ldreq	r4, [r5, #12]
 8006292:	e7ca      	b.n	800622a <__swbuf_r+0x1a>
 8006294:	4621      	mov	r1, r4
 8006296:	4628      	mov	r0, r5
 8006298:	f000 f80c 	bl	80062b4 <__swsetup_r>
 800629c:	2800      	cmp	r0, #0
 800629e:	d0cb      	beq.n	8006238 <__swbuf_r+0x28>
 80062a0:	f04f 37ff 	mov.w	r7, #4294967295
 80062a4:	e7ea      	b.n	800627c <__swbuf_r+0x6c>
 80062a6:	bf00      	nop
 80062a8:	080071f8 	.word	0x080071f8
 80062ac:	08007218 	.word	0x08007218
 80062b0:	080071d8 	.word	0x080071d8

080062b4 <__swsetup_r>:
 80062b4:	4b32      	ldr	r3, [pc, #200]	; (8006380 <__swsetup_r+0xcc>)
 80062b6:	b570      	push	{r4, r5, r6, lr}
 80062b8:	681d      	ldr	r5, [r3, #0]
 80062ba:	4606      	mov	r6, r0
 80062bc:	460c      	mov	r4, r1
 80062be:	b125      	cbz	r5, 80062ca <__swsetup_r+0x16>
 80062c0:	69ab      	ldr	r3, [r5, #24]
 80062c2:	b913      	cbnz	r3, 80062ca <__swsetup_r+0x16>
 80062c4:	4628      	mov	r0, r5
 80062c6:	f000 f97d 	bl	80065c4 <__sinit>
 80062ca:	4b2e      	ldr	r3, [pc, #184]	; (8006384 <__swsetup_r+0xd0>)
 80062cc:	429c      	cmp	r4, r3
 80062ce:	d10f      	bne.n	80062f0 <__swsetup_r+0x3c>
 80062d0:	686c      	ldr	r4, [r5, #4]
 80062d2:	89a3      	ldrh	r3, [r4, #12]
 80062d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80062d8:	0719      	lsls	r1, r3, #28
 80062da:	d42c      	bmi.n	8006336 <__swsetup_r+0x82>
 80062dc:	06dd      	lsls	r5, r3, #27
 80062de:	d411      	bmi.n	8006304 <__swsetup_r+0x50>
 80062e0:	2309      	movs	r3, #9
 80062e2:	6033      	str	r3, [r6, #0]
 80062e4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80062e8:	81a3      	strh	r3, [r4, #12]
 80062ea:	f04f 30ff 	mov.w	r0, #4294967295
 80062ee:	e03e      	b.n	800636e <__swsetup_r+0xba>
 80062f0:	4b25      	ldr	r3, [pc, #148]	; (8006388 <__swsetup_r+0xd4>)
 80062f2:	429c      	cmp	r4, r3
 80062f4:	d101      	bne.n	80062fa <__swsetup_r+0x46>
 80062f6:	68ac      	ldr	r4, [r5, #8]
 80062f8:	e7eb      	b.n	80062d2 <__swsetup_r+0x1e>
 80062fa:	4b24      	ldr	r3, [pc, #144]	; (800638c <__swsetup_r+0xd8>)
 80062fc:	429c      	cmp	r4, r3
 80062fe:	bf08      	it	eq
 8006300:	68ec      	ldreq	r4, [r5, #12]
 8006302:	e7e6      	b.n	80062d2 <__swsetup_r+0x1e>
 8006304:	0758      	lsls	r0, r3, #29
 8006306:	d512      	bpl.n	800632e <__swsetup_r+0x7a>
 8006308:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800630a:	b141      	cbz	r1, 800631e <__swsetup_r+0x6a>
 800630c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006310:	4299      	cmp	r1, r3
 8006312:	d002      	beq.n	800631a <__swsetup_r+0x66>
 8006314:	4630      	mov	r0, r6
 8006316:	f000 fa5b 	bl	80067d0 <_free_r>
 800631a:	2300      	movs	r3, #0
 800631c:	6363      	str	r3, [r4, #52]	; 0x34
 800631e:	89a3      	ldrh	r3, [r4, #12]
 8006320:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006324:	81a3      	strh	r3, [r4, #12]
 8006326:	2300      	movs	r3, #0
 8006328:	6063      	str	r3, [r4, #4]
 800632a:	6923      	ldr	r3, [r4, #16]
 800632c:	6023      	str	r3, [r4, #0]
 800632e:	89a3      	ldrh	r3, [r4, #12]
 8006330:	f043 0308 	orr.w	r3, r3, #8
 8006334:	81a3      	strh	r3, [r4, #12]
 8006336:	6923      	ldr	r3, [r4, #16]
 8006338:	b94b      	cbnz	r3, 800634e <__swsetup_r+0x9a>
 800633a:	89a3      	ldrh	r3, [r4, #12]
 800633c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006340:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006344:	d003      	beq.n	800634e <__swsetup_r+0x9a>
 8006346:	4621      	mov	r1, r4
 8006348:	4630      	mov	r0, r6
 800634a:	f000 fa01 	bl	8006750 <__smakebuf_r>
 800634e:	89a0      	ldrh	r0, [r4, #12]
 8006350:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006354:	f010 0301 	ands.w	r3, r0, #1
 8006358:	d00a      	beq.n	8006370 <__swsetup_r+0xbc>
 800635a:	2300      	movs	r3, #0
 800635c:	60a3      	str	r3, [r4, #8]
 800635e:	6963      	ldr	r3, [r4, #20]
 8006360:	425b      	negs	r3, r3
 8006362:	61a3      	str	r3, [r4, #24]
 8006364:	6923      	ldr	r3, [r4, #16]
 8006366:	b943      	cbnz	r3, 800637a <__swsetup_r+0xc6>
 8006368:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800636c:	d1ba      	bne.n	80062e4 <__swsetup_r+0x30>
 800636e:	bd70      	pop	{r4, r5, r6, pc}
 8006370:	0781      	lsls	r1, r0, #30
 8006372:	bf58      	it	pl
 8006374:	6963      	ldrpl	r3, [r4, #20]
 8006376:	60a3      	str	r3, [r4, #8]
 8006378:	e7f4      	b.n	8006364 <__swsetup_r+0xb0>
 800637a:	2000      	movs	r0, #0
 800637c:	e7f7      	b.n	800636e <__swsetup_r+0xba>
 800637e:	bf00      	nop
 8006380:	2000000c 	.word	0x2000000c
 8006384:	080071f8 	.word	0x080071f8
 8006388:	08007218 	.word	0x08007218
 800638c:	080071d8 	.word	0x080071d8

08006390 <__sflush_r>:
 8006390:	898a      	ldrh	r2, [r1, #12]
 8006392:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006396:	4605      	mov	r5, r0
 8006398:	0710      	lsls	r0, r2, #28
 800639a:	460c      	mov	r4, r1
 800639c:	d458      	bmi.n	8006450 <__sflush_r+0xc0>
 800639e:	684b      	ldr	r3, [r1, #4]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	dc05      	bgt.n	80063b0 <__sflush_r+0x20>
 80063a4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	dc02      	bgt.n	80063b0 <__sflush_r+0x20>
 80063aa:	2000      	movs	r0, #0
 80063ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80063b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80063b2:	2e00      	cmp	r6, #0
 80063b4:	d0f9      	beq.n	80063aa <__sflush_r+0x1a>
 80063b6:	2300      	movs	r3, #0
 80063b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80063bc:	682f      	ldr	r7, [r5, #0]
 80063be:	602b      	str	r3, [r5, #0]
 80063c0:	d032      	beq.n	8006428 <__sflush_r+0x98>
 80063c2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80063c4:	89a3      	ldrh	r3, [r4, #12]
 80063c6:	075a      	lsls	r2, r3, #29
 80063c8:	d505      	bpl.n	80063d6 <__sflush_r+0x46>
 80063ca:	6863      	ldr	r3, [r4, #4]
 80063cc:	1ac0      	subs	r0, r0, r3
 80063ce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80063d0:	b10b      	cbz	r3, 80063d6 <__sflush_r+0x46>
 80063d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80063d4:	1ac0      	subs	r0, r0, r3
 80063d6:	2300      	movs	r3, #0
 80063d8:	4602      	mov	r2, r0
 80063da:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80063dc:	6a21      	ldr	r1, [r4, #32]
 80063de:	4628      	mov	r0, r5
 80063e0:	47b0      	blx	r6
 80063e2:	1c43      	adds	r3, r0, #1
 80063e4:	89a3      	ldrh	r3, [r4, #12]
 80063e6:	d106      	bne.n	80063f6 <__sflush_r+0x66>
 80063e8:	6829      	ldr	r1, [r5, #0]
 80063ea:	291d      	cmp	r1, #29
 80063ec:	d82c      	bhi.n	8006448 <__sflush_r+0xb8>
 80063ee:	4a2a      	ldr	r2, [pc, #168]	; (8006498 <__sflush_r+0x108>)
 80063f0:	40ca      	lsrs	r2, r1
 80063f2:	07d6      	lsls	r6, r2, #31
 80063f4:	d528      	bpl.n	8006448 <__sflush_r+0xb8>
 80063f6:	2200      	movs	r2, #0
 80063f8:	6062      	str	r2, [r4, #4]
 80063fa:	04d9      	lsls	r1, r3, #19
 80063fc:	6922      	ldr	r2, [r4, #16]
 80063fe:	6022      	str	r2, [r4, #0]
 8006400:	d504      	bpl.n	800640c <__sflush_r+0x7c>
 8006402:	1c42      	adds	r2, r0, #1
 8006404:	d101      	bne.n	800640a <__sflush_r+0x7a>
 8006406:	682b      	ldr	r3, [r5, #0]
 8006408:	b903      	cbnz	r3, 800640c <__sflush_r+0x7c>
 800640a:	6560      	str	r0, [r4, #84]	; 0x54
 800640c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800640e:	602f      	str	r7, [r5, #0]
 8006410:	2900      	cmp	r1, #0
 8006412:	d0ca      	beq.n	80063aa <__sflush_r+0x1a>
 8006414:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006418:	4299      	cmp	r1, r3
 800641a:	d002      	beq.n	8006422 <__sflush_r+0x92>
 800641c:	4628      	mov	r0, r5
 800641e:	f000 f9d7 	bl	80067d0 <_free_r>
 8006422:	2000      	movs	r0, #0
 8006424:	6360      	str	r0, [r4, #52]	; 0x34
 8006426:	e7c1      	b.n	80063ac <__sflush_r+0x1c>
 8006428:	6a21      	ldr	r1, [r4, #32]
 800642a:	2301      	movs	r3, #1
 800642c:	4628      	mov	r0, r5
 800642e:	47b0      	blx	r6
 8006430:	1c41      	adds	r1, r0, #1
 8006432:	d1c7      	bne.n	80063c4 <__sflush_r+0x34>
 8006434:	682b      	ldr	r3, [r5, #0]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d0c4      	beq.n	80063c4 <__sflush_r+0x34>
 800643a:	2b1d      	cmp	r3, #29
 800643c:	d001      	beq.n	8006442 <__sflush_r+0xb2>
 800643e:	2b16      	cmp	r3, #22
 8006440:	d101      	bne.n	8006446 <__sflush_r+0xb6>
 8006442:	602f      	str	r7, [r5, #0]
 8006444:	e7b1      	b.n	80063aa <__sflush_r+0x1a>
 8006446:	89a3      	ldrh	r3, [r4, #12]
 8006448:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800644c:	81a3      	strh	r3, [r4, #12]
 800644e:	e7ad      	b.n	80063ac <__sflush_r+0x1c>
 8006450:	690f      	ldr	r7, [r1, #16]
 8006452:	2f00      	cmp	r7, #0
 8006454:	d0a9      	beq.n	80063aa <__sflush_r+0x1a>
 8006456:	0793      	lsls	r3, r2, #30
 8006458:	680e      	ldr	r6, [r1, #0]
 800645a:	bf08      	it	eq
 800645c:	694b      	ldreq	r3, [r1, #20]
 800645e:	600f      	str	r7, [r1, #0]
 8006460:	bf18      	it	ne
 8006462:	2300      	movne	r3, #0
 8006464:	eba6 0807 	sub.w	r8, r6, r7
 8006468:	608b      	str	r3, [r1, #8]
 800646a:	f1b8 0f00 	cmp.w	r8, #0
 800646e:	dd9c      	ble.n	80063aa <__sflush_r+0x1a>
 8006470:	6a21      	ldr	r1, [r4, #32]
 8006472:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006474:	4643      	mov	r3, r8
 8006476:	463a      	mov	r2, r7
 8006478:	4628      	mov	r0, r5
 800647a:	47b0      	blx	r6
 800647c:	2800      	cmp	r0, #0
 800647e:	dc06      	bgt.n	800648e <__sflush_r+0xfe>
 8006480:	89a3      	ldrh	r3, [r4, #12]
 8006482:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006486:	81a3      	strh	r3, [r4, #12]
 8006488:	f04f 30ff 	mov.w	r0, #4294967295
 800648c:	e78e      	b.n	80063ac <__sflush_r+0x1c>
 800648e:	4407      	add	r7, r0
 8006490:	eba8 0800 	sub.w	r8, r8, r0
 8006494:	e7e9      	b.n	800646a <__sflush_r+0xda>
 8006496:	bf00      	nop
 8006498:	20400001 	.word	0x20400001

0800649c <_fflush_r>:
 800649c:	b538      	push	{r3, r4, r5, lr}
 800649e:	690b      	ldr	r3, [r1, #16]
 80064a0:	4605      	mov	r5, r0
 80064a2:	460c      	mov	r4, r1
 80064a4:	b913      	cbnz	r3, 80064ac <_fflush_r+0x10>
 80064a6:	2500      	movs	r5, #0
 80064a8:	4628      	mov	r0, r5
 80064aa:	bd38      	pop	{r3, r4, r5, pc}
 80064ac:	b118      	cbz	r0, 80064b6 <_fflush_r+0x1a>
 80064ae:	6983      	ldr	r3, [r0, #24]
 80064b0:	b90b      	cbnz	r3, 80064b6 <_fflush_r+0x1a>
 80064b2:	f000 f887 	bl	80065c4 <__sinit>
 80064b6:	4b14      	ldr	r3, [pc, #80]	; (8006508 <_fflush_r+0x6c>)
 80064b8:	429c      	cmp	r4, r3
 80064ba:	d11b      	bne.n	80064f4 <_fflush_r+0x58>
 80064bc:	686c      	ldr	r4, [r5, #4]
 80064be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d0ef      	beq.n	80064a6 <_fflush_r+0xa>
 80064c6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80064c8:	07d0      	lsls	r0, r2, #31
 80064ca:	d404      	bmi.n	80064d6 <_fflush_r+0x3a>
 80064cc:	0599      	lsls	r1, r3, #22
 80064ce:	d402      	bmi.n	80064d6 <_fflush_r+0x3a>
 80064d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80064d2:	f000 f915 	bl	8006700 <__retarget_lock_acquire_recursive>
 80064d6:	4628      	mov	r0, r5
 80064d8:	4621      	mov	r1, r4
 80064da:	f7ff ff59 	bl	8006390 <__sflush_r>
 80064de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80064e0:	07da      	lsls	r2, r3, #31
 80064e2:	4605      	mov	r5, r0
 80064e4:	d4e0      	bmi.n	80064a8 <_fflush_r+0xc>
 80064e6:	89a3      	ldrh	r3, [r4, #12]
 80064e8:	059b      	lsls	r3, r3, #22
 80064ea:	d4dd      	bmi.n	80064a8 <_fflush_r+0xc>
 80064ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80064ee:	f000 f908 	bl	8006702 <__retarget_lock_release_recursive>
 80064f2:	e7d9      	b.n	80064a8 <_fflush_r+0xc>
 80064f4:	4b05      	ldr	r3, [pc, #20]	; (800650c <_fflush_r+0x70>)
 80064f6:	429c      	cmp	r4, r3
 80064f8:	d101      	bne.n	80064fe <_fflush_r+0x62>
 80064fa:	68ac      	ldr	r4, [r5, #8]
 80064fc:	e7df      	b.n	80064be <_fflush_r+0x22>
 80064fe:	4b04      	ldr	r3, [pc, #16]	; (8006510 <_fflush_r+0x74>)
 8006500:	429c      	cmp	r4, r3
 8006502:	bf08      	it	eq
 8006504:	68ec      	ldreq	r4, [r5, #12]
 8006506:	e7da      	b.n	80064be <_fflush_r+0x22>
 8006508:	080071f8 	.word	0x080071f8
 800650c:	08007218 	.word	0x08007218
 8006510:	080071d8 	.word	0x080071d8

08006514 <std>:
 8006514:	2300      	movs	r3, #0
 8006516:	b510      	push	{r4, lr}
 8006518:	4604      	mov	r4, r0
 800651a:	e9c0 3300 	strd	r3, r3, [r0]
 800651e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006522:	6083      	str	r3, [r0, #8]
 8006524:	8181      	strh	r1, [r0, #12]
 8006526:	6643      	str	r3, [r0, #100]	; 0x64
 8006528:	81c2      	strh	r2, [r0, #14]
 800652a:	6183      	str	r3, [r0, #24]
 800652c:	4619      	mov	r1, r3
 800652e:	2208      	movs	r2, #8
 8006530:	305c      	adds	r0, #92	; 0x5c
 8006532:	f7ff fdd7 	bl	80060e4 <memset>
 8006536:	4b05      	ldr	r3, [pc, #20]	; (800654c <std+0x38>)
 8006538:	6263      	str	r3, [r4, #36]	; 0x24
 800653a:	4b05      	ldr	r3, [pc, #20]	; (8006550 <std+0x3c>)
 800653c:	62a3      	str	r3, [r4, #40]	; 0x28
 800653e:	4b05      	ldr	r3, [pc, #20]	; (8006554 <std+0x40>)
 8006540:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006542:	4b05      	ldr	r3, [pc, #20]	; (8006558 <std+0x44>)
 8006544:	6224      	str	r4, [r4, #32]
 8006546:	6323      	str	r3, [r4, #48]	; 0x30
 8006548:	bd10      	pop	{r4, pc}
 800654a:	bf00      	nop
 800654c:	08006f8d 	.word	0x08006f8d
 8006550:	08006faf 	.word	0x08006faf
 8006554:	08006fe7 	.word	0x08006fe7
 8006558:	0800700b 	.word	0x0800700b

0800655c <_cleanup_r>:
 800655c:	4901      	ldr	r1, [pc, #4]	; (8006564 <_cleanup_r+0x8>)
 800655e:	f000 b8af 	b.w	80066c0 <_fwalk_reent>
 8006562:	bf00      	nop
 8006564:	0800649d 	.word	0x0800649d

08006568 <__sfmoreglue>:
 8006568:	b570      	push	{r4, r5, r6, lr}
 800656a:	2268      	movs	r2, #104	; 0x68
 800656c:	1e4d      	subs	r5, r1, #1
 800656e:	4355      	muls	r5, r2
 8006570:	460e      	mov	r6, r1
 8006572:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006576:	f000 f997 	bl	80068a8 <_malloc_r>
 800657a:	4604      	mov	r4, r0
 800657c:	b140      	cbz	r0, 8006590 <__sfmoreglue+0x28>
 800657e:	2100      	movs	r1, #0
 8006580:	e9c0 1600 	strd	r1, r6, [r0]
 8006584:	300c      	adds	r0, #12
 8006586:	60a0      	str	r0, [r4, #8]
 8006588:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800658c:	f7ff fdaa 	bl	80060e4 <memset>
 8006590:	4620      	mov	r0, r4
 8006592:	bd70      	pop	{r4, r5, r6, pc}

08006594 <__sfp_lock_acquire>:
 8006594:	4801      	ldr	r0, [pc, #4]	; (800659c <__sfp_lock_acquire+0x8>)
 8006596:	f000 b8b3 	b.w	8006700 <__retarget_lock_acquire_recursive>
 800659a:	bf00      	nop
 800659c:	20000245 	.word	0x20000245

080065a0 <__sfp_lock_release>:
 80065a0:	4801      	ldr	r0, [pc, #4]	; (80065a8 <__sfp_lock_release+0x8>)
 80065a2:	f000 b8ae 	b.w	8006702 <__retarget_lock_release_recursive>
 80065a6:	bf00      	nop
 80065a8:	20000245 	.word	0x20000245

080065ac <__sinit_lock_acquire>:
 80065ac:	4801      	ldr	r0, [pc, #4]	; (80065b4 <__sinit_lock_acquire+0x8>)
 80065ae:	f000 b8a7 	b.w	8006700 <__retarget_lock_acquire_recursive>
 80065b2:	bf00      	nop
 80065b4:	20000246 	.word	0x20000246

080065b8 <__sinit_lock_release>:
 80065b8:	4801      	ldr	r0, [pc, #4]	; (80065c0 <__sinit_lock_release+0x8>)
 80065ba:	f000 b8a2 	b.w	8006702 <__retarget_lock_release_recursive>
 80065be:	bf00      	nop
 80065c0:	20000246 	.word	0x20000246

080065c4 <__sinit>:
 80065c4:	b510      	push	{r4, lr}
 80065c6:	4604      	mov	r4, r0
 80065c8:	f7ff fff0 	bl	80065ac <__sinit_lock_acquire>
 80065cc:	69a3      	ldr	r3, [r4, #24]
 80065ce:	b11b      	cbz	r3, 80065d8 <__sinit+0x14>
 80065d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80065d4:	f7ff bff0 	b.w	80065b8 <__sinit_lock_release>
 80065d8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80065dc:	6523      	str	r3, [r4, #80]	; 0x50
 80065de:	4b13      	ldr	r3, [pc, #76]	; (800662c <__sinit+0x68>)
 80065e0:	4a13      	ldr	r2, [pc, #76]	; (8006630 <__sinit+0x6c>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	62a2      	str	r2, [r4, #40]	; 0x28
 80065e6:	42a3      	cmp	r3, r4
 80065e8:	bf04      	itt	eq
 80065ea:	2301      	moveq	r3, #1
 80065ec:	61a3      	streq	r3, [r4, #24]
 80065ee:	4620      	mov	r0, r4
 80065f0:	f000 f820 	bl	8006634 <__sfp>
 80065f4:	6060      	str	r0, [r4, #4]
 80065f6:	4620      	mov	r0, r4
 80065f8:	f000 f81c 	bl	8006634 <__sfp>
 80065fc:	60a0      	str	r0, [r4, #8]
 80065fe:	4620      	mov	r0, r4
 8006600:	f000 f818 	bl	8006634 <__sfp>
 8006604:	2200      	movs	r2, #0
 8006606:	60e0      	str	r0, [r4, #12]
 8006608:	2104      	movs	r1, #4
 800660a:	6860      	ldr	r0, [r4, #4]
 800660c:	f7ff ff82 	bl	8006514 <std>
 8006610:	68a0      	ldr	r0, [r4, #8]
 8006612:	2201      	movs	r2, #1
 8006614:	2109      	movs	r1, #9
 8006616:	f7ff ff7d 	bl	8006514 <std>
 800661a:	68e0      	ldr	r0, [r4, #12]
 800661c:	2202      	movs	r2, #2
 800661e:	2112      	movs	r1, #18
 8006620:	f7ff ff78 	bl	8006514 <std>
 8006624:	2301      	movs	r3, #1
 8006626:	61a3      	str	r3, [r4, #24]
 8006628:	e7d2      	b.n	80065d0 <__sinit+0xc>
 800662a:	bf00      	nop
 800662c:	080071d4 	.word	0x080071d4
 8006630:	0800655d 	.word	0x0800655d

08006634 <__sfp>:
 8006634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006636:	4607      	mov	r7, r0
 8006638:	f7ff ffac 	bl	8006594 <__sfp_lock_acquire>
 800663c:	4b1e      	ldr	r3, [pc, #120]	; (80066b8 <__sfp+0x84>)
 800663e:	681e      	ldr	r6, [r3, #0]
 8006640:	69b3      	ldr	r3, [r6, #24]
 8006642:	b913      	cbnz	r3, 800664a <__sfp+0x16>
 8006644:	4630      	mov	r0, r6
 8006646:	f7ff ffbd 	bl	80065c4 <__sinit>
 800664a:	3648      	adds	r6, #72	; 0x48
 800664c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006650:	3b01      	subs	r3, #1
 8006652:	d503      	bpl.n	800665c <__sfp+0x28>
 8006654:	6833      	ldr	r3, [r6, #0]
 8006656:	b30b      	cbz	r3, 800669c <__sfp+0x68>
 8006658:	6836      	ldr	r6, [r6, #0]
 800665a:	e7f7      	b.n	800664c <__sfp+0x18>
 800665c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006660:	b9d5      	cbnz	r5, 8006698 <__sfp+0x64>
 8006662:	4b16      	ldr	r3, [pc, #88]	; (80066bc <__sfp+0x88>)
 8006664:	60e3      	str	r3, [r4, #12]
 8006666:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800666a:	6665      	str	r5, [r4, #100]	; 0x64
 800666c:	f000 f847 	bl	80066fe <__retarget_lock_init_recursive>
 8006670:	f7ff ff96 	bl	80065a0 <__sfp_lock_release>
 8006674:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006678:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800667c:	6025      	str	r5, [r4, #0]
 800667e:	61a5      	str	r5, [r4, #24]
 8006680:	2208      	movs	r2, #8
 8006682:	4629      	mov	r1, r5
 8006684:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006688:	f7ff fd2c 	bl	80060e4 <memset>
 800668c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006690:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006694:	4620      	mov	r0, r4
 8006696:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006698:	3468      	adds	r4, #104	; 0x68
 800669a:	e7d9      	b.n	8006650 <__sfp+0x1c>
 800669c:	2104      	movs	r1, #4
 800669e:	4638      	mov	r0, r7
 80066a0:	f7ff ff62 	bl	8006568 <__sfmoreglue>
 80066a4:	4604      	mov	r4, r0
 80066a6:	6030      	str	r0, [r6, #0]
 80066a8:	2800      	cmp	r0, #0
 80066aa:	d1d5      	bne.n	8006658 <__sfp+0x24>
 80066ac:	f7ff ff78 	bl	80065a0 <__sfp_lock_release>
 80066b0:	230c      	movs	r3, #12
 80066b2:	603b      	str	r3, [r7, #0]
 80066b4:	e7ee      	b.n	8006694 <__sfp+0x60>
 80066b6:	bf00      	nop
 80066b8:	080071d4 	.word	0x080071d4
 80066bc:	ffff0001 	.word	0xffff0001

080066c0 <_fwalk_reent>:
 80066c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80066c4:	4606      	mov	r6, r0
 80066c6:	4688      	mov	r8, r1
 80066c8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80066cc:	2700      	movs	r7, #0
 80066ce:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80066d2:	f1b9 0901 	subs.w	r9, r9, #1
 80066d6:	d505      	bpl.n	80066e4 <_fwalk_reent+0x24>
 80066d8:	6824      	ldr	r4, [r4, #0]
 80066da:	2c00      	cmp	r4, #0
 80066dc:	d1f7      	bne.n	80066ce <_fwalk_reent+0xe>
 80066de:	4638      	mov	r0, r7
 80066e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80066e4:	89ab      	ldrh	r3, [r5, #12]
 80066e6:	2b01      	cmp	r3, #1
 80066e8:	d907      	bls.n	80066fa <_fwalk_reent+0x3a>
 80066ea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80066ee:	3301      	adds	r3, #1
 80066f0:	d003      	beq.n	80066fa <_fwalk_reent+0x3a>
 80066f2:	4629      	mov	r1, r5
 80066f4:	4630      	mov	r0, r6
 80066f6:	47c0      	blx	r8
 80066f8:	4307      	orrs	r7, r0
 80066fa:	3568      	adds	r5, #104	; 0x68
 80066fc:	e7e9      	b.n	80066d2 <_fwalk_reent+0x12>

080066fe <__retarget_lock_init_recursive>:
 80066fe:	4770      	bx	lr

08006700 <__retarget_lock_acquire_recursive>:
 8006700:	4770      	bx	lr

08006702 <__retarget_lock_release_recursive>:
 8006702:	4770      	bx	lr

08006704 <__swhatbuf_r>:
 8006704:	b570      	push	{r4, r5, r6, lr}
 8006706:	460e      	mov	r6, r1
 8006708:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800670c:	2900      	cmp	r1, #0
 800670e:	b096      	sub	sp, #88	; 0x58
 8006710:	4614      	mov	r4, r2
 8006712:	461d      	mov	r5, r3
 8006714:	da08      	bge.n	8006728 <__swhatbuf_r+0x24>
 8006716:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800671a:	2200      	movs	r2, #0
 800671c:	602a      	str	r2, [r5, #0]
 800671e:	061a      	lsls	r2, r3, #24
 8006720:	d410      	bmi.n	8006744 <__swhatbuf_r+0x40>
 8006722:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006726:	e00e      	b.n	8006746 <__swhatbuf_r+0x42>
 8006728:	466a      	mov	r2, sp
 800672a:	f000 fc95 	bl	8007058 <_fstat_r>
 800672e:	2800      	cmp	r0, #0
 8006730:	dbf1      	blt.n	8006716 <__swhatbuf_r+0x12>
 8006732:	9a01      	ldr	r2, [sp, #4]
 8006734:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006738:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800673c:	425a      	negs	r2, r3
 800673e:	415a      	adcs	r2, r3
 8006740:	602a      	str	r2, [r5, #0]
 8006742:	e7ee      	b.n	8006722 <__swhatbuf_r+0x1e>
 8006744:	2340      	movs	r3, #64	; 0x40
 8006746:	2000      	movs	r0, #0
 8006748:	6023      	str	r3, [r4, #0]
 800674a:	b016      	add	sp, #88	; 0x58
 800674c:	bd70      	pop	{r4, r5, r6, pc}
	...

08006750 <__smakebuf_r>:
 8006750:	898b      	ldrh	r3, [r1, #12]
 8006752:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006754:	079d      	lsls	r5, r3, #30
 8006756:	4606      	mov	r6, r0
 8006758:	460c      	mov	r4, r1
 800675a:	d507      	bpl.n	800676c <__smakebuf_r+0x1c>
 800675c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006760:	6023      	str	r3, [r4, #0]
 8006762:	6123      	str	r3, [r4, #16]
 8006764:	2301      	movs	r3, #1
 8006766:	6163      	str	r3, [r4, #20]
 8006768:	b002      	add	sp, #8
 800676a:	bd70      	pop	{r4, r5, r6, pc}
 800676c:	ab01      	add	r3, sp, #4
 800676e:	466a      	mov	r2, sp
 8006770:	f7ff ffc8 	bl	8006704 <__swhatbuf_r>
 8006774:	9900      	ldr	r1, [sp, #0]
 8006776:	4605      	mov	r5, r0
 8006778:	4630      	mov	r0, r6
 800677a:	f000 f895 	bl	80068a8 <_malloc_r>
 800677e:	b948      	cbnz	r0, 8006794 <__smakebuf_r+0x44>
 8006780:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006784:	059a      	lsls	r2, r3, #22
 8006786:	d4ef      	bmi.n	8006768 <__smakebuf_r+0x18>
 8006788:	f023 0303 	bic.w	r3, r3, #3
 800678c:	f043 0302 	orr.w	r3, r3, #2
 8006790:	81a3      	strh	r3, [r4, #12]
 8006792:	e7e3      	b.n	800675c <__smakebuf_r+0xc>
 8006794:	4b0d      	ldr	r3, [pc, #52]	; (80067cc <__smakebuf_r+0x7c>)
 8006796:	62b3      	str	r3, [r6, #40]	; 0x28
 8006798:	89a3      	ldrh	r3, [r4, #12]
 800679a:	6020      	str	r0, [r4, #0]
 800679c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067a0:	81a3      	strh	r3, [r4, #12]
 80067a2:	9b00      	ldr	r3, [sp, #0]
 80067a4:	6163      	str	r3, [r4, #20]
 80067a6:	9b01      	ldr	r3, [sp, #4]
 80067a8:	6120      	str	r0, [r4, #16]
 80067aa:	b15b      	cbz	r3, 80067c4 <__smakebuf_r+0x74>
 80067ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80067b0:	4630      	mov	r0, r6
 80067b2:	f000 fc63 	bl	800707c <_isatty_r>
 80067b6:	b128      	cbz	r0, 80067c4 <__smakebuf_r+0x74>
 80067b8:	89a3      	ldrh	r3, [r4, #12]
 80067ba:	f023 0303 	bic.w	r3, r3, #3
 80067be:	f043 0301 	orr.w	r3, r3, #1
 80067c2:	81a3      	strh	r3, [r4, #12]
 80067c4:	89a0      	ldrh	r0, [r4, #12]
 80067c6:	4305      	orrs	r5, r0
 80067c8:	81a5      	strh	r5, [r4, #12]
 80067ca:	e7cd      	b.n	8006768 <__smakebuf_r+0x18>
 80067cc:	0800655d 	.word	0x0800655d

080067d0 <_free_r>:
 80067d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80067d2:	2900      	cmp	r1, #0
 80067d4:	d044      	beq.n	8006860 <_free_r+0x90>
 80067d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80067da:	9001      	str	r0, [sp, #4]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	f1a1 0404 	sub.w	r4, r1, #4
 80067e2:	bfb8      	it	lt
 80067e4:	18e4      	addlt	r4, r4, r3
 80067e6:	f000 fc6b 	bl	80070c0 <__malloc_lock>
 80067ea:	4a1e      	ldr	r2, [pc, #120]	; (8006864 <_free_r+0x94>)
 80067ec:	9801      	ldr	r0, [sp, #4]
 80067ee:	6813      	ldr	r3, [r2, #0]
 80067f0:	b933      	cbnz	r3, 8006800 <_free_r+0x30>
 80067f2:	6063      	str	r3, [r4, #4]
 80067f4:	6014      	str	r4, [r2, #0]
 80067f6:	b003      	add	sp, #12
 80067f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80067fc:	f000 bc66 	b.w	80070cc <__malloc_unlock>
 8006800:	42a3      	cmp	r3, r4
 8006802:	d908      	bls.n	8006816 <_free_r+0x46>
 8006804:	6825      	ldr	r5, [r4, #0]
 8006806:	1961      	adds	r1, r4, r5
 8006808:	428b      	cmp	r3, r1
 800680a:	bf01      	itttt	eq
 800680c:	6819      	ldreq	r1, [r3, #0]
 800680e:	685b      	ldreq	r3, [r3, #4]
 8006810:	1949      	addeq	r1, r1, r5
 8006812:	6021      	streq	r1, [r4, #0]
 8006814:	e7ed      	b.n	80067f2 <_free_r+0x22>
 8006816:	461a      	mov	r2, r3
 8006818:	685b      	ldr	r3, [r3, #4]
 800681a:	b10b      	cbz	r3, 8006820 <_free_r+0x50>
 800681c:	42a3      	cmp	r3, r4
 800681e:	d9fa      	bls.n	8006816 <_free_r+0x46>
 8006820:	6811      	ldr	r1, [r2, #0]
 8006822:	1855      	adds	r5, r2, r1
 8006824:	42a5      	cmp	r5, r4
 8006826:	d10b      	bne.n	8006840 <_free_r+0x70>
 8006828:	6824      	ldr	r4, [r4, #0]
 800682a:	4421      	add	r1, r4
 800682c:	1854      	adds	r4, r2, r1
 800682e:	42a3      	cmp	r3, r4
 8006830:	6011      	str	r1, [r2, #0]
 8006832:	d1e0      	bne.n	80067f6 <_free_r+0x26>
 8006834:	681c      	ldr	r4, [r3, #0]
 8006836:	685b      	ldr	r3, [r3, #4]
 8006838:	6053      	str	r3, [r2, #4]
 800683a:	4421      	add	r1, r4
 800683c:	6011      	str	r1, [r2, #0]
 800683e:	e7da      	b.n	80067f6 <_free_r+0x26>
 8006840:	d902      	bls.n	8006848 <_free_r+0x78>
 8006842:	230c      	movs	r3, #12
 8006844:	6003      	str	r3, [r0, #0]
 8006846:	e7d6      	b.n	80067f6 <_free_r+0x26>
 8006848:	6825      	ldr	r5, [r4, #0]
 800684a:	1961      	adds	r1, r4, r5
 800684c:	428b      	cmp	r3, r1
 800684e:	bf04      	itt	eq
 8006850:	6819      	ldreq	r1, [r3, #0]
 8006852:	685b      	ldreq	r3, [r3, #4]
 8006854:	6063      	str	r3, [r4, #4]
 8006856:	bf04      	itt	eq
 8006858:	1949      	addeq	r1, r1, r5
 800685a:	6021      	streq	r1, [r4, #0]
 800685c:	6054      	str	r4, [r2, #4]
 800685e:	e7ca      	b.n	80067f6 <_free_r+0x26>
 8006860:	b003      	add	sp, #12
 8006862:	bd30      	pop	{r4, r5, pc}
 8006864:	20000248 	.word	0x20000248

08006868 <sbrk_aligned>:
 8006868:	b570      	push	{r4, r5, r6, lr}
 800686a:	4e0e      	ldr	r6, [pc, #56]	; (80068a4 <sbrk_aligned+0x3c>)
 800686c:	460c      	mov	r4, r1
 800686e:	6831      	ldr	r1, [r6, #0]
 8006870:	4605      	mov	r5, r0
 8006872:	b911      	cbnz	r1, 800687a <sbrk_aligned+0x12>
 8006874:	f000 fb7a 	bl	8006f6c <_sbrk_r>
 8006878:	6030      	str	r0, [r6, #0]
 800687a:	4621      	mov	r1, r4
 800687c:	4628      	mov	r0, r5
 800687e:	f000 fb75 	bl	8006f6c <_sbrk_r>
 8006882:	1c43      	adds	r3, r0, #1
 8006884:	d00a      	beq.n	800689c <sbrk_aligned+0x34>
 8006886:	1cc4      	adds	r4, r0, #3
 8006888:	f024 0403 	bic.w	r4, r4, #3
 800688c:	42a0      	cmp	r0, r4
 800688e:	d007      	beq.n	80068a0 <sbrk_aligned+0x38>
 8006890:	1a21      	subs	r1, r4, r0
 8006892:	4628      	mov	r0, r5
 8006894:	f000 fb6a 	bl	8006f6c <_sbrk_r>
 8006898:	3001      	adds	r0, #1
 800689a:	d101      	bne.n	80068a0 <sbrk_aligned+0x38>
 800689c:	f04f 34ff 	mov.w	r4, #4294967295
 80068a0:	4620      	mov	r0, r4
 80068a2:	bd70      	pop	{r4, r5, r6, pc}
 80068a4:	2000024c 	.word	0x2000024c

080068a8 <_malloc_r>:
 80068a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068ac:	1ccd      	adds	r5, r1, #3
 80068ae:	f025 0503 	bic.w	r5, r5, #3
 80068b2:	3508      	adds	r5, #8
 80068b4:	2d0c      	cmp	r5, #12
 80068b6:	bf38      	it	cc
 80068b8:	250c      	movcc	r5, #12
 80068ba:	2d00      	cmp	r5, #0
 80068bc:	4607      	mov	r7, r0
 80068be:	db01      	blt.n	80068c4 <_malloc_r+0x1c>
 80068c0:	42a9      	cmp	r1, r5
 80068c2:	d905      	bls.n	80068d0 <_malloc_r+0x28>
 80068c4:	230c      	movs	r3, #12
 80068c6:	603b      	str	r3, [r7, #0]
 80068c8:	2600      	movs	r6, #0
 80068ca:	4630      	mov	r0, r6
 80068cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80068d0:	4e2e      	ldr	r6, [pc, #184]	; (800698c <_malloc_r+0xe4>)
 80068d2:	f000 fbf5 	bl	80070c0 <__malloc_lock>
 80068d6:	6833      	ldr	r3, [r6, #0]
 80068d8:	461c      	mov	r4, r3
 80068da:	bb34      	cbnz	r4, 800692a <_malloc_r+0x82>
 80068dc:	4629      	mov	r1, r5
 80068de:	4638      	mov	r0, r7
 80068e0:	f7ff ffc2 	bl	8006868 <sbrk_aligned>
 80068e4:	1c43      	adds	r3, r0, #1
 80068e6:	4604      	mov	r4, r0
 80068e8:	d14d      	bne.n	8006986 <_malloc_r+0xde>
 80068ea:	6834      	ldr	r4, [r6, #0]
 80068ec:	4626      	mov	r6, r4
 80068ee:	2e00      	cmp	r6, #0
 80068f0:	d140      	bne.n	8006974 <_malloc_r+0xcc>
 80068f2:	6823      	ldr	r3, [r4, #0]
 80068f4:	4631      	mov	r1, r6
 80068f6:	4638      	mov	r0, r7
 80068f8:	eb04 0803 	add.w	r8, r4, r3
 80068fc:	f000 fb36 	bl	8006f6c <_sbrk_r>
 8006900:	4580      	cmp	r8, r0
 8006902:	d13a      	bne.n	800697a <_malloc_r+0xd2>
 8006904:	6821      	ldr	r1, [r4, #0]
 8006906:	3503      	adds	r5, #3
 8006908:	1a6d      	subs	r5, r5, r1
 800690a:	f025 0503 	bic.w	r5, r5, #3
 800690e:	3508      	adds	r5, #8
 8006910:	2d0c      	cmp	r5, #12
 8006912:	bf38      	it	cc
 8006914:	250c      	movcc	r5, #12
 8006916:	4629      	mov	r1, r5
 8006918:	4638      	mov	r0, r7
 800691a:	f7ff ffa5 	bl	8006868 <sbrk_aligned>
 800691e:	3001      	adds	r0, #1
 8006920:	d02b      	beq.n	800697a <_malloc_r+0xd2>
 8006922:	6823      	ldr	r3, [r4, #0]
 8006924:	442b      	add	r3, r5
 8006926:	6023      	str	r3, [r4, #0]
 8006928:	e00e      	b.n	8006948 <_malloc_r+0xa0>
 800692a:	6822      	ldr	r2, [r4, #0]
 800692c:	1b52      	subs	r2, r2, r5
 800692e:	d41e      	bmi.n	800696e <_malloc_r+0xc6>
 8006930:	2a0b      	cmp	r2, #11
 8006932:	d916      	bls.n	8006962 <_malloc_r+0xba>
 8006934:	1961      	adds	r1, r4, r5
 8006936:	42a3      	cmp	r3, r4
 8006938:	6025      	str	r5, [r4, #0]
 800693a:	bf18      	it	ne
 800693c:	6059      	strne	r1, [r3, #4]
 800693e:	6863      	ldr	r3, [r4, #4]
 8006940:	bf08      	it	eq
 8006942:	6031      	streq	r1, [r6, #0]
 8006944:	5162      	str	r2, [r4, r5]
 8006946:	604b      	str	r3, [r1, #4]
 8006948:	4638      	mov	r0, r7
 800694a:	f104 060b 	add.w	r6, r4, #11
 800694e:	f000 fbbd 	bl	80070cc <__malloc_unlock>
 8006952:	f026 0607 	bic.w	r6, r6, #7
 8006956:	1d23      	adds	r3, r4, #4
 8006958:	1af2      	subs	r2, r6, r3
 800695a:	d0b6      	beq.n	80068ca <_malloc_r+0x22>
 800695c:	1b9b      	subs	r3, r3, r6
 800695e:	50a3      	str	r3, [r4, r2]
 8006960:	e7b3      	b.n	80068ca <_malloc_r+0x22>
 8006962:	6862      	ldr	r2, [r4, #4]
 8006964:	42a3      	cmp	r3, r4
 8006966:	bf0c      	ite	eq
 8006968:	6032      	streq	r2, [r6, #0]
 800696a:	605a      	strne	r2, [r3, #4]
 800696c:	e7ec      	b.n	8006948 <_malloc_r+0xa0>
 800696e:	4623      	mov	r3, r4
 8006970:	6864      	ldr	r4, [r4, #4]
 8006972:	e7b2      	b.n	80068da <_malloc_r+0x32>
 8006974:	4634      	mov	r4, r6
 8006976:	6876      	ldr	r6, [r6, #4]
 8006978:	e7b9      	b.n	80068ee <_malloc_r+0x46>
 800697a:	230c      	movs	r3, #12
 800697c:	603b      	str	r3, [r7, #0]
 800697e:	4638      	mov	r0, r7
 8006980:	f000 fba4 	bl	80070cc <__malloc_unlock>
 8006984:	e7a1      	b.n	80068ca <_malloc_r+0x22>
 8006986:	6025      	str	r5, [r4, #0]
 8006988:	e7de      	b.n	8006948 <_malloc_r+0xa0>
 800698a:	bf00      	nop
 800698c:	20000248 	.word	0x20000248

08006990 <__sfputc_r>:
 8006990:	6893      	ldr	r3, [r2, #8]
 8006992:	3b01      	subs	r3, #1
 8006994:	2b00      	cmp	r3, #0
 8006996:	b410      	push	{r4}
 8006998:	6093      	str	r3, [r2, #8]
 800699a:	da08      	bge.n	80069ae <__sfputc_r+0x1e>
 800699c:	6994      	ldr	r4, [r2, #24]
 800699e:	42a3      	cmp	r3, r4
 80069a0:	db01      	blt.n	80069a6 <__sfputc_r+0x16>
 80069a2:	290a      	cmp	r1, #10
 80069a4:	d103      	bne.n	80069ae <__sfputc_r+0x1e>
 80069a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80069aa:	f7ff bc31 	b.w	8006210 <__swbuf_r>
 80069ae:	6813      	ldr	r3, [r2, #0]
 80069b0:	1c58      	adds	r0, r3, #1
 80069b2:	6010      	str	r0, [r2, #0]
 80069b4:	7019      	strb	r1, [r3, #0]
 80069b6:	4608      	mov	r0, r1
 80069b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80069bc:	4770      	bx	lr

080069be <__sfputs_r>:
 80069be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069c0:	4606      	mov	r6, r0
 80069c2:	460f      	mov	r7, r1
 80069c4:	4614      	mov	r4, r2
 80069c6:	18d5      	adds	r5, r2, r3
 80069c8:	42ac      	cmp	r4, r5
 80069ca:	d101      	bne.n	80069d0 <__sfputs_r+0x12>
 80069cc:	2000      	movs	r0, #0
 80069ce:	e007      	b.n	80069e0 <__sfputs_r+0x22>
 80069d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069d4:	463a      	mov	r2, r7
 80069d6:	4630      	mov	r0, r6
 80069d8:	f7ff ffda 	bl	8006990 <__sfputc_r>
 80069dc:	1c43      	adds	r3, r0, #1
 80069de:	d1f3      	bne.n	80069c8 <__sfputs_r+0xa>
 80069e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080069e4 <_vfiprintf_r>:
 80069e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069e8:	460d      	mov	r5, r1
 80069ea:	b09d      	sub	sp, #116	; 0x74
 80069ec:	4614      	mov	r4, r2
 80069ee:	4698      	mov	r8, r3
 80069f0:	4606      	mov	r6, r0
 80069f2:	b118      	cbz	r0, 80069fc <_vfiprintf_r+0x18>
 80069f4:	6983      	ldr	r3, [r0, #24]
 80069f6:	b90b      	cbnz	r3, 80069fc <_vfiprintf_r+0x18>
 80069f8:	f7ff fde4 	bl	80065c4 <__sinit>
 80069fc:	4b89      	ldr	r3, [pc, #548]	; (8006c24 <_vfiprintf_r+0x240>)
 80069fe:	429d      	cmp	r5, r3
 8006a00:	d11b      	bne.n	8006a3a <_vfiprintf_r+0x56>
 8006a02:	6875      	ldr	r5, [r6, #4]
 8006a04:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006a06:	07d9      	lsls	r1, r3, #31
 8006a08:	d405      	bmi.n	8006a16 <_vfiprintf_r+0x32>
 8006a0a:	89ab      	ldrh	r3, [r5, #12]
 8006a0c:	059a      	lsls	r2, r3, #22
 8006a0e:	d402      	bmi.n	8006a16 <_vfiprintf_r+0x32>
 8006a10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006a12:	f7ff fe75 	bl	8006700 <__retarget_lock_acquire_recursive>
 8006a16:	89ab      	ldrh	r3, [r5, #12]
 8006a18:	071b      	lsls	r3, r3, #28
 8006a1a:	d501      	bpl.n	8006a20 <_vfiprintf_r+0x3c>
 8006a1c:	692b      	ldr	r3, [r5, #16]
 8006a1e:	b9eb      	cbnz	r3, 8006a5c <_vfiprintf_r+0x78>
 8006a20:	4629      	mov	r1, r5
 8006a22:	4630      	mov	r0, r6
 8006a24:	f7ff fc46 	bl	80062b4 <__swsetup_r>
 8006a28:	b1c0      	cbz	r0, 8006a5c <_vfiprintf_r+0x78>
 8006a2a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006a2c:	07dc      	lsls	r4, r3, #31
 8006a2e:	d50e      	bpl.n	8006a4e <_vfiprintf_r+0x6a>
 8006a30:	f04f 30ff 	mov.w	r0, #4294967295
 8006a34:	b01d      	add	sp, #116	; 0x74
 8006a36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a3a:	4b7b      	ldr	r3, [pc, #492]	; (8006c28 <_vfiprintf_r+0x244>)
 8006a3c:	429d      	cmp	r5, r3
 8006a3e:	d101      	bne.n	8006a44 <_vfiprintf_r+0x60>
 8006a40:	68b5      	ldr	r5, [r6, #8]
 8006a42:	e7df      	b.n	8006a04 <_vfiprintf_r+0x20>
 8006a44:	4b79      	ldr	r3, [pc, #484]	; (8006c2c <_vfiprintf_r+0x248>)
 8006a46:	429d      	cmp	r5, r3
 8006a48:	bf08      	it	eq
 8006a4a:	68f5      	ldreq	r5, [r6, #12]
 8006a4c:	e7da      	b.n	8006a04 <_vfiprintf_r+0x20>
 8006a4e:	89ab      	ldrh	r3, [r5, #12]
 8006a50:	0598      	lsls	r0, r3, #22
 8006a52:	d4ed      	bmi.n	8006a30 <_vfiprintf_r+0x4c>
 8006a54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006a56:	f7ff fe54 	bl	8006702 <__retarget_lock_release_recursive>
 8006a5a:	e7e9      	b.n	8006a30 <_vfiprintf_r+0x4c>
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	9309      	str	r3, [sp, #36]	; 0x24
 8006a60:	2320      	movs	r3, #32
 8006a62:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006a66:	f8cd 800c 	str.w	r8, [sp, #12]
 8006a6a:	2330      	movs	r3, #48	; 0x30
 8006a6c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006c30 <_vfiprintf_r+0x24c>
 8006a70:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006a74:	f04f 0901 	mov.w	r9, #1
 8006a78:	4623      	mov	r3, r4
 8006a7a:	469a      	mov	sl, r3
 8006a7c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006a80:	b10a      	cbz	r2, 8006a86 <_vfiprintf_r+0xa2>
 8006a82:	2a25      	cmp	r2, #37	; 0x25
 8006a84:	d1f9      	bne.n	8006a7a <_vfiprintf_r+0x96>
 8006a86:	ebba 0b04 	subs.w	fp, sl, r4
 8006a8a:	d00b      	beq.n	8006aa4 <_vfiprintf_r+0xc0>
 8006a8c:	465b      	mov	r3, fp
 8006a8e:	4622      	mov	r2, r4
 8006a90:	4629      	mov	r1, r5
 8006a92:	4630      	mov	r0, r6
 8006a94:	f7ff ff93 	bl	80069be <__sfputs_r>
 8006a98:	3001      	adds	r0, #1
 8006a9a:	f000 80aa 	beq.w	8006bf2 <_vfiprintf_r+0x20e>
 8006a9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006aa0:	445a      	add	r2, fp
 8006aa2:	9209      	str	r2, [sp, #36]	; 0x24
 8006aa4:	f89a 3000 	ldrb.w	r3, [sl]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	f000 80a2 	beq.w	8006bf2 <_vfiprintf_r+0x20e>
 8006aae:	2300      	movs	r3, #0
 8006ab0:	f04f 32ff 	mov.w	r2, #4294967295
 8006ab4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006ab8:	f10a 0a01 	add.w	sl, sl, #1
 8006abc:	9304      	str	r3, [sp, #16]
 8006abe:	9307      	str	r3, [sp, #28]
 8006ac0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006ac4:	931a      	str	r3, [sp, #104]	; 0x68
 8006ac6:	4654      	mov	r4, sl
 8006ac8:	2205      	movs	r2, #5
 8006aca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ace:	4858      	ldr	r0, [pc, #352]	; (8006c30 <_vfiprintf_r+0x24c>)
 8006ad0:	f7f9 fb8e 	bl	80001f0 <memchr>
 8006ad4:	9a04      	ldr	r2, [sp, #16]
 8006ad6:	b9d8      	cbnz	r0, 8006b10 <_vfiprintf_r+0x12c>
 8006ad8:	06d1      	lsls	r1, r2, #27
 8006ada:	bf44      	itt	mi
 8006adc:	2320      	movmi	r3, #32
 8006ade:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006ae2:	0713      	lsls	r3, r2, #28
 8006ae4:	bf44      	itt	mi
 8006ae6:	232b      	movmi	r3, #43	; 0x2b
 8006ae8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006aec:	f89a 3000 	ldrb.w	r3, [sl]
 8006af0:	2b2a      	cmp	r3, #42	; 0x2a
 8006af2:	d015      	beq.n	8006b20 <_vfiprintf_r+0x13c>
 8006af4:	9a07      	ldr	r2, [sp, #28]
 8006af6:	4654      	mov	r4, sl
 8006af8:	2000      	movs	r0, #0
 8006afa:	f04f 0c0a 	mov.w	ip, #10
 8006afe:	4621      	mov	r1, r4
 8006b00:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006b04:	3b30      	subs	r3, #48	; 0x30
 8006b06:	2b09      	cmp	r3, #9
 8006b08:	d94e      	bls.n	8006ba8 <_vfiprintf_r+0x1c4>
 8006b0a:	b1b0      	cbz	r0, 8006b3a <_vfiprintf_r+0x156>
 8006b0c:	9207      	str	r2, [sp, #28]
 8006b0e:	e014      	b.n	8006b3a <_vfiprintf_r+0x156>
 8006b10:	eba0 0308 	sub.w	r3, r0, r8
 8006b14:	fa09 f303 	lsl.w	r3, r9, r3
 8006b18:	4313      	orrs	r3, r2
 8006b1a:	9304      	str	r3, [sp, #16]
 8006b1c:	46a2      	mov	sl, r4
 8006b1e:	e7d2      	b.n	8006ac6 <_vfiprintf_r+0xe2>
 8006b20:	9b03      	ldr	r3, [sp, #12]
 8006b22:	1d19      	adds	r1, r3, #4
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	9103      	str	r1, [sp, #12]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	bfbb      	ittet	lt
 8006b2c:	425b      	neglt	r3, r3
 8006b2e:	f042 0202 	orrlt.w	r2, r2, #2
 8006b32:	9307      	strge	r3, [sp, #28]
 8006b34:	9307      	strlt	r3, [sp, #28]
 8006b36:	bfb8      	it	lt
 8006b38:	9204      	strlt	r2, [sp, #16]
 8006b3a:	7823      	ldrb	r3, [r4, #0]
 8006b3c:	2b2e      	cmp	r3, #46	; 0x2e
 8006b3e:	d10c      	bne.n	8006b5a <_vfiprintf_r+0x176>
 8006b40:	7863      	ldrb	r3, [r4, #1]
 8006b42:	2b2a      	cmp	r3, #42	; 0x2a
 8006b44:	d135      	bne.n	8006bb2 <_vfiprintf_r+0x1ce>
 8006b46:	9b03      	ldr	r3, [sp, #12]
 8006b48:	1d1a      	adds	r2, r3, #4
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	9203      	str	r2, [sp, #12]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	bfb8      	it	lt
 8006b52:	f04f 33ff 	movlt.w	r3, #4294967295
 8006b56:	3402      	adds	r4, #2
 8006b58:	9305      	str	r3, [sp, #20]
 8006b5a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006c40 <_vfiprintf_r+0x25c>
 8006b5e:	7821      	ldrb	r1, [r4, #0]
 8006b60:	2203      	movs	r2, #3
 8006b62:	4650      	mov	r0, sl
 8006b64:	f7f9 fb44 	bl	80001f0 <memchr>
 8006b68:	b140      	cbz	r0, 8006b7c <_vfiprintf_r+0x198>
 8006b6a:	2340      	movs	r3, #64	; 0x40
 8006b6c:	eba0 000a 	sub.w	r0, r0, sl
 8006b70:	fa03 f000 	lsl.w	r0, r3, r0
 8006b74:	9b04      	ldr	r3, [sp, #16]
 8006b76:	4303      	orrs	r3, r0
 8006b78:	3401      	adds	r4, #1
 8006b7a:	9304      	str	r3, [sp, #16]
 8006b7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b80:	482c      	ldr	r0, [pc, #176]	; (8006c34 <_vfiprintf_r+0x250>)
 8006b82:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006b86:	2206      	movs	r2, #6
 8006b88:	f7f9 fb32 	bl	80001f0 <memchr>
 8006b8c:	2800      	cmp	r0, #0
 8006b8e:	d03f      	beq.n	8006c10 <_vfiprintf_r+0x22c>
 8006b90:	4b29      	ldr	r3, [pc, #164]	; (8006c38 <_vfiprintf_r+0x254>)
 8006b92:	bb1b      	cbnz	r3, 8006bdc <_vfiprintf_r+0x1f8>
 8006b94:	9b03      	ldr	r3, [sp, #12]
 8006b96:	3307      	adds	r3, #7
 8006b98:	f023 0307 	bic.w	r3, r3, #7
 8006b9c:	3308      	adds	r3, #8
 8006b9e:	9303      	str	r3, [sp, #12]
 8006ba0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ba2:	443b      	add	r3, r7
 8006ba4:	9309      	str	r3, [sp, #36]	; 0x24
 8006ba6:	e767      	b.n	8006a78 <_vfiprintf_r+0x94>
 8006ba8:	fb0c 3202 	mla	r2, ip, r2, r3
 8006bac:	460c      	mov	r4, r1
 8006bae:	2001      	movs	r0, #1
 8006bb0:	e7a5      	b.n	8006afe <_vfiprintf_r+0x11a>
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	3401      	adds	r4, #1
 8006bb6:	9305      	str	r3, [sp, #20]
 8006bb8:	4619      	mov	r1, r3
 8006bba:	f04f 0c0a 	mov.w	ip, #10
 8006bbe:	4620      	mov	r0, r4
 8006bc0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006bc4:	3a30      	subs	r2, #48	; 0x30
 8006bc6:	2a09      	cmp	r2, #9
 8006bc8:	d903      	bls.n	8006bd2 <_vfiprintf_r+0x1ee>
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d0c5      	beq.n	8006b5a <_vfiprintf_r+0x176>
 8006bce:	9105      	str	r1, [sp, #20]
 8006bd0:	e7c3      	b.n	8006b5a <_vfiprintf_r+0x176>
 8006bd2:	fb0c 2101 	mla	r1, ip, r1, r2
 8006bd6:	4604      	mov	r4, r0
 8006bd8:	2301      	movs	r3, #1
 8006bda:	e7f0      	b.n	8006bbe <_vfiprintf_r+0x1da>
 8006bdc:	ab03      	add	r3, sp, #12
 8006bde:	9300      	str	r3, [sp, #0]
 8006be0:	462a      	mov	r2, r5
 8006be2:	4b16      	ldr	r3, [pc, #88]	; (8006c3c <_vfiprintf_r+0x258>)
 8006be4:	a904      	add	r1, sp, #16
 8006be6:	4630      	mov	r0, r6
 8006be8:	f3af 8000 	nop.w
 8006bec:	4607      	mov	r7, r0
 8006bee:	1c78      	adds	r0, r7, #1
 8006bf0:	d1d6      	bne.n	8006ba0 <_vfiprintf_r+0x1bc>
 8006bf2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006bf4:	07d9      	lsls	r1, r3, #31
 8006bf6:	d405      	bmi.n	8006c04 <_vfiprintf_r+0x220>
 8006bf8:	89ab      	ldrh	r3, [r5, #12]
 8006bfa:	059a      	lsls	r2, r3, #22
 8006bfc:	d402      	bmi.n	8006c04 <_vfiprintf_r+0x220>
 8006bfe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006c00:	f7ff fd7f 	bl	8006702 <__retarget_lock_release_recursive>
 8006c04:	89ab      	ldrh	r3, [r5, #12]
 8006c06:	065b      	lsls	r3, r3, #25
 8006c08:	f53f af12 	bmi.w	8006a30 <_vfiprintf_r+0x4c>
 8006c0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006c0e:	e711      	b.n	8006a34 <_vfiprintf_r+0x50>
 8006c10:	ab03      	add	r3, sp, #12
 8006c12:	9300      	str	r3, [sp, #0]
 8006c14:	462a      	mov	r2, r5
 8006c16:	4b09      	ldr	r3, [pc, #36]	; (8006c3c <_vfiprintf_r+0x258>)
 8006c18:	a904      	add	r1, sp, #16
 8006c1a:	4630      	mov	r0, r6
 8006c1c:	f000 f880 	bl	8006d20 <_printf_i>
 8006c20:	e7e4      	b.n	8006bec <_vfiprintf_r+0x208>
 8006c22:	bf00      	nop
 8006c24:	080071f8 	.word	0x080071f8
 8006c28:	08007218 	.word	0x08007218
 8006c2c:	080071d8 	.word	0x080071d8
 8006c30:	08007238 	.word	0x08007238
 8006c34:	08007242 	.word	0x08007242
 8006c38:	00000000 	.word	0x00000000
 8006c3c:	080069bf 	.word	0x080069bf
 8006c40:	0800723e 	.word	0x0800723e

08006c44 <_printf_common>:
 8006c44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c48:	4616      	mov	r6, r2
 8006c4a:	4699      	mov	r9, r3
 8006c4c:	688a      	ldr	r2, [r1, #8]
 8006c4e:	690b      	ldr	r3, [r1, #16]
 8006c50:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006c54:	4293      	cmp	r3, r2
 8006c56:	bfb8      	it	lt
 8006c58:	4613      	movlt	r3, r2
 8006c5a:	6033      	str	r3, [r6, #0]
 8006c5c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006c60:	4607      	mov	r7, r0
 8006c62:	460c      	mov	r4, r1
 8006c64:	b10a      	cbz	r2, 8006c6a <_printf_common+0x26>
 8006c66:	3301      	adds	r3, #1
 8006c68:	6033      	str	r3, [r6, #0]
 8006c6a:	6823      	ldr	r3, [r4, #0]
 8006c6c:	0699      	lsls	r1, r3, #26
 8006c6e:	bf42      	ittt	mi
 8006c70:	6833      	ldrmi	r3, [r6, #0]
 8006c72:	3302      	addmi	r3, #2
 8006c74:	6033      	strmi	r3, [r6, #0]
 8006c76:	6825      	ldr	r5, [r4, #0]
 8006c78:	f015 0506 	ands.w	r5, r5, #6
 8006c7c:	d106      	bne.n	8006c8c <_printf_common+0x48>
 8006c7e:	f104 0a19 	add.w	sl, r4, #25
 8006c82:	68e3      	ldr	r3, [r4, #12]
 8006c84:	6832      	ldr	r2, [r6, #0]
 8006c86:	1a9b      	subs	r3, r3, r2
 8006c88:	42ab      	cmp	r3, r5
 8006c8a:	dc26      	bgt.n	8006cda <_printf_common+0x96>
 8006c8c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006c90:	1e13      	subs	r3, r2, #0
 8006c92:	6822      	ldr	r2, [r4, #0]
 8006c94:	bf18      	it	ne
 8006c96:	2301      	movne	r3, #1
 8006c98:	0692      	lsls	r2, r2, #26
 8006c9a:	d42b      	bmi.n	8006cf4 <_printf_common+0xb0>
 8006c9c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006ca0:	4649      	mov	r1, r9
 8006ca2:	4638      	mov	r0, r7
 8006ca4:	47c0      	blx	r8
 8006ca6:	3001      	adds	r0, #1
 8006ca8:	d01e      	beq.n	8006ce8 <_printf_common+0xa4>
 8006caa:	6823      	ldr	r3, [r4, #0]
 8006cac:	68e5      	ldr	r5, [r4, #12]
 8006cae:	6832      	ldr	r2, [r6, #0]
 8006cb0:	f003 0306 	and.w	r3, r3, #6
 8006cb4:	2b04      	cmp	r3, #4
 8006cb6:	bf08      	it	eq
 8006cb8:	1aad      	subeq	r5, r5, r2
 8006cba:	68a3      	ldr	r3, [r4, #8]
 8006cbc:	6922      	ldr	r2, [r4, #16]
 8006cbe:	bf0c      	ite	eq
 8006cc0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006cc4:	2500      	movne	r5, #0
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	bfc4      	itt	gt
 8006cca:	1a9b      	subgt	r3, r3, r2
 8006ccc:	18ed      	addgt	r5, r5, r3
 8006cce:	2600      	movs	r6, #0
 8006cd0:	341a      	adds	r4, #26
 8006cd2:	42b5      	cmp	r5, r6
 8006cd4:	d11a      	bne.n	8006d0c <_printf_common+0xc8>
 8006cd6:	2000      	movs	r0, #0
 8006cd8:	e008      	b.n	8006cec <_printf_common+0xa8>
 8006cda:	2301      	movs	r3, #1
 8006cdc:	4652      	mov	r2, sl
 8006cde:	4649      	mov	r1, r9
 8006ce0:	4638      	mov	r0, r7
 8006ce2:	47c0      	blx	r8
 8006ce4:	3001      	adds	r0, #1
 8006ce6:	d103      	bne.n	8006cf0 <_printf_common+0xac>
 8006ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8006cec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cf0:	3501      	adds	r5, #1
 8006cf2:	e7c6      	b.n	8006c82 <_printf_common+0x3e>
 8006cf4:	18e1      	adds	r1, r4, r3
 8006cf6:	1c5a      	adds	r2, r3, #1
 8006cf8:	2030      	movs	r0, #48	; 0x30
 8006cfa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006cfe:	4422      	add	r2, r4
 8006d00:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006d04:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006d08:	3302      	adds	r3, #2
 8006d0a:	e7c7      	b.n	8006c9c <_printf_common+0x58>
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	4622      	mov	r2, r4
 8006d10:	4649      	mov	r1, r9
 8006d12:	4638      	mov	r0, r7
 8006d14:	47c0      	blx	r8
 8006d16:	3001      	adds	r0, #1
 8006d18:	d0e6      	beq.n	8006ce8 <_printf_common+0xa4>
 8006d1a:	3601      	adds	r6, #1
 8006d1c:	e7d9      	b.n	8006cd2 <_printf_common+0x8e>
	...

08006d20 <_printf_i>:
 8006d20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006d24:	7e0f      	ldrb	r7, [r1, #24]
 8006d26:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006d28:	2f78      	cmp	r7, #120	; 0x78
 8006d2a:	4691      	mov	r9, r2
 8006d2c:	4680      	mov	r8, r0
 8006d2e:	460c      	mov	r4, r1
 8006d30:	469a      	mov	sl, r3
 8006d32:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006d36:	d807      	bhi.n	8006d48 <_printf_i+0x28>
 8006d38:	2f62      	cmp	r7, #98	; 0x62
 8006d3a:	d80a      	bhi.n	8006d52 <_printf_i+0x32>
 8006d3c:	2f00      	cmp	r7, #0
 8006d3e:	f000 80d8 	beq.w	8006ef2 <_printf_i+0x1d2>
 8006d42:	2f58      	cmp	r7, #88	; 0x58
 8006d44:	f000 80a3 	beq.w	8006e8e <_printf_i+0x16e>
 8006d48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006d4c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006d50:	e03a      	b.n	8006dc8 <_printf_i+0xa8>
 8006d52:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006d56:	2b15      	cmp	r3, #21
 8006d58:	d8f6      	bhi.n	8006d48 <_printf_i+0x28>
 8006d5a:	a101      	add	r1, pc, #4	; (adr r1, 8006d60 <_printf_i+0x40>)
 8006d5c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006d60:	08006db9 	.word	0x08006db9
 8006d64:	08006dcd 	.word	0x08006dcd
 8006d68:	08006d49 	.word	0x08006d49
 8006d6c:	08006d49 	.word	0x08006d49
 8006d70:	08006d49 	.word	0x08006d49
 8006d74:	08006d49 	.word	0x08006d49
 8006d78:	08006dcd 	.word	0x08006dcd
 8006d7c:	08006d49 	.word	0x08006d49
 8006d80:	08006d49 	.word	0x08006d49
 8006d84:	08006d49 	.word	0x08006d49
 8006d88:	08006d49 	.word	0x08006d49
 8006d8c:	08006ed9 	.word	0x08006ed9
 8006d90:	08006dfd 	.word	0x08006dfd
 8006d94:	08006ebb 	.word	0x08006ebb
 8006d98:	08006d49 	.word	0x08006d49
 8006d9c:	08006d49 	.word	0x08006d49
 8006da0:	08006efb 	.word	0x08006efb
 8006da4:	08006d49 	.word	0x08006d49
 8006da8:	08006dfd 	.word	0x08006dfd
 8006dac:	08006d49 	.word	0x08006d49
 8006db0:	08006d49 	.word	0x08006d49
 8006db4:	08006ec3 	.word	0x08006ec3
 8006db8:	682b      	ldr	r3, [r5, #0]
 8006dba:	1d1a      	adds	r2, r3, #4
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	602a      	str	r2, [r5, #0]
 8006dc0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006dc4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006dc8:	2301      	movs	r3, #1
 8006dca:	e0a3      	b.n	8006f14 <_printf_i+0x1f4>
 8006dcc:	6820      	ldr	r0, [r4, #0]
 8006dce:	6829      	ldr	r1, [r5, #0]
 8006dd0:	0606      	lsls	r6, r0, #24
 8006dd2:	f101 0304 	add.w	r3, r1, #4
 8006dd6:	d50a      	bpl.n	8006dee <_printf_i+0xce>
 8006dd8:	680e      	ldr	r6, [r1, #0]
 8006dda:	602b      	str	r3, [r5, #0]
 8006ddc:	2e00      	cmp	r6, #0
 8006dde:	da03      	bge.n	8006de8 <_printf_i+0xc8>
 8006de0:	232d      	movs	r3, #45	; 0x2d
 8006de2:	4276      	negs	r6, r6
 8006de4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006de8:	485e      	ldr	r0, [pc, #376]	; (8006f64 <_printf_i+0x244>)
 8006dea:	230a      	movs	r3, #10
 8006dec:	e019      	b.n	8006e22 <_printf_i+0x102>
 8006dee:	680e      	ldr	r6, [r1, #0]
 8006df0:	602b      	str	r3, [r5, #0]
 8006df2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006df6:	bf18      	it	ne
 8006df8:	b236      	sxthne	r6, r6
 8006dfa:	e7ef      	b.n	8006ddc <_printf_i+0xbc>
 8006dfc:	682b      	ldr	r3, [r5, #0]
 8006dfe:	6820      	ldr	r0, [r4, #0]
 8006e00:	1d19      	adds	r1, r3, #4
 8006e02:	6029      	str	r1, [r5, #0]
 8006e04:	0601      	lsls	r1, r0, #24
 8006e06:	d501      	bpl.n	8006e0c <_printf_i+0xec>
 8006e08:	681e      	ldr	r6, [r3, #0]
 8006e0a:	e002      	b.n	8006e12 <_printf_i+0xf2>
 8006e0c:	0646      	lsls	r6, r0, #25
 8006e0e:	d5fb      	bpl.n	8006e08 <_printf_i+0xe8>
 8006e10:	881e      	ldrh	r6, [r3, #0]
 8006e12:	4854      	ldr	r0, [pc, #336]	; (8006f64 <_printf_i+0x244>)
 8006e14:	2f6f      	cmp	r7, #111	; 0x6f
 8006e16:	bf0c      	ite	eq
 8006e18:	2308      	moveq	r3, #8
 8006e1a:	230a      	movne	r3, #10
 8006e1c:	2100      	movs	r1, #0
 8006e1e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006e22:	6865      	ldr	r5, [r4, #4]
 8006e24:	60a5      	str	r5, [r4, #8]
 8006e26:	2d00      	cmp	r5, #0
 8006e28:	bfa2      	ittt	ge
 8006e2a:	6821      	ldrge	r1, [r4, #0]
 8006e2c:	f021 0104 	bicge.w	r1, r1, #4
 8006e30:	6021      	strge	r1, [r4, #0]
 8006e32:	b90e      	cbnz	r6, 8006e38 <_printf_i+0x118>
 8006e34:	2d00      	cmp	r5, #0
 8006e36:	d04d      	beq.n	8006ed4 <_printf_i+0x1b4>
 8006e38:	4615      	mov	r5, r2
 8006e3a:	fbb6 f1f3 	udiv	r1, r6, r3
 8006e3e:	fb03 6711 	mls	r7, r3, r1, r6
 8006e42:	5dc7      	ldrb	r7, [r0, r7]
 8006e44:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006e48:	4637      	mov	r7, r6
 8006e4a:	42bb      	cmp	r3, r7
 8006e4c:	460e      	mov	r6, r1
 8006e4e:	d9f4      	bls.n	8006e3a <_printf_i+0x11a>
 8006e50:	2b08      	cmp	r3, #8
 8006e52:	d10b      	bne.n	8006e6c <_printf_i+0x14c>
 8006e54:	6823      	ldr	r3, [r4, #0]
 8006e56:	07de      	lsls	r6, r3, #31
 8006e58:	d508      	bpl.n	8006e6c <_printf_i+0x14c>
 8006e5a:	6923      	ldr	r3, [r4, #16]
 8006e5c:	6861      	ldr	r1, [r4, #4]
 8006e5e:	4299      	cmp	r1, r3
 8006e60:	bfde      	ittt	le
 8006e62:	2330      	movle	r3, #48	; 0x30
 8006e64:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006e68:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006e6c:	1b52      	subs	r2, r2, r5
 8006e6e:	6122      	str	r2, [r4, #16]
 8006e70:	f8cd a000 	str.w	sl, [sp]
 8006e74:	464b      	mov	r3, r9
 8006e76:	aa03      	add	r2, sp, #12
 8006e78:	4621      	mov	r1, r4
 8006e7a:	4640      	mov	r0, r8
 8006e7c:	f7ff fee2 	bl	8006c44 <_printf_common>
 8006e80:	3001      	adds	r0, #1
 8006e82:	d14c      	bne.n	8006f1e <_printf_i+0x1fe>
 8006e84:	f04f 30ff 	mov.w	r0, #4294967295
 8006e88:	b004      	add	sp, #16
 8006e8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e8e:	4835      	ldr	r0, [pc, #212]	; (8006f64 <_printf_i+0x244>)
 8006e90:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006e94:	6829      	ldr	r1, [r5, #0]
 8006e96:	6823      	ldr	r3, [r4, #0]
 8006e98:	f851 6b04 	ldr.w	r6, [r1], #4
 8006e9c:	6029      	str	r1, [r5, #0]
 8006e9e:	061d      	lsls	r5, r3, #24
 8006ea0:	d514      	bpl.n	8006ecc <_printf_i+0x1ac>
 8006ea2:	07df      	lsls	r7, r3, #31
 8006ea4:	bf44      	itt	mi
 8006ea6:	f043 0320 	orrmi.w	r3, r3, #32
 8006eaa:	6023      	strmi	r3, [r4, #0]
 8006eac:	b91e      	cbnz	r6, 8006eb6 <_printf_i+0x196>
 8006eae:	6823      	ldr	r3, [r4, #0]
 8006eb0:	f023 0320 	bic.w	r3, r3, #32
 8006eb4:	6023      	str	r3, [r4, #0]
 8006eb6:	2310      	movs	r3, #16
 8006eb8:	e7b0      	b.n	8006e1c <_printf_i+0xfc>
 8006eba:	6823      	ldr	r3, [r4, #0]
 8006ebc:	f043 0320 	orr.w	r3, r3, #32
 8006ec0:	6023      	str	r3, [r4, #0]
 8006ec2:	2378      	movs	r3, #120	; 0x78
 8006ec4:	4828      	ldr	r0, [pc, #160]	; (8006f68 <_printf_i+0x248>)
 8006ec6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006eca:	e7e3      	b.n	8006e94 <_printf_i+0x174>
 8006ecc:	0659      	lsls	r1, r3, #25
 8006ece:	bf48      	it	mi
 8006ed0:	b2b6      	uxthmi	r6, r6
 8006ed2:	e7e6      	b.n	8006ea2 <_printf_i+0x182>
 8006ed4:	4615      	mov	r5, r2
 8006ed6:	e7bb      	b.n	8006e50 <_printf_i+0x130>
 8006ed8:	682b      	ldr	r3, [r5, #0]
 8006eda:	6826      	ldr	r6, [r4, #0]
 8006edc:	6961      	ldr	r1, [r4, #20]
 8006ede:	1d18      	adds	r0, r3, #4
 8006ee0:	6028      	str	r0, [r5, #0]
 8006ee2:	0635      	lsls	r5, r6, #24
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	d501      	bpl.n	8006eec <_printf_i+0x1cc>
 8006ee8:	6019      	str	r1, [r3, #0]
 8006eea:	e002      	b.n	8006ef2 <_printf_i+0x1d2>
 8006eec:	0670      	lsls	r0, r6, #25
 8006eee:	d5fb      	bpl.n	8006ee8 <_printf_i+0x1c8>
 8006ef0:	8019      	strh	r1, [r3, #0]
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	6123      	str	r3, [r4, #16]
 8006ef6:	4615      	mov	r5, r2
 8006ef8:	e7ba      	b.n	8006e70 <_printf_i+0x150>
 8006efa:	682b      	ldr	r3, [r5, #0]
 8006efc:	1d1a      	adds	r2, r3, #4
 8006efe:	602a      	str	r2, [r5, #0]
 8006f00:	681d      	ldr	r5, [r3, #0]
 8006f02:	6862      	ldr	r2, [r4, #4]
 8006f04:	2100      	movs	r1, #0
 8006f06:	4628      	mov	r0, r5
 8006f08:	f7f9 f972 	bl	80001f0 <memchr>
 8006f0c:	b108      	cbz	r0, 8006f12 <_printf_i+0x1f2>
 8006f0e:	1b40      	subs	r0, r0, r5
 8006f10:	6060      	str	r0, [r4, #4]
 8006f12:	6863      	ldr	r3, [r4, #4]
 8006f14:	6123      	str	r3, [r4, #16]
 8006f16:	2300      	movs	r3, #0
 8006f18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f1c:	e7a8      	b.n	8006e70 <_printf_i+0x150>
 8006f1e:	6923      	ldr	r3, [r4, #16]
 8006f20:	462a      	mov	r2, r5
 8006f22:	4649      	mov	r1, r9
 8006f24:	4640      	mov	r0, r8
 8006f26:	47d0      	blx	sl
 8006f28:	3001      	adds	r0, #1
 8006f2a:	d0ab      	beq.n	8006e84 <_printf_i+0x164>
 8006f2c:	6823      	ldr	r3, [r4, #0]
 8006f2e:	079b      	lsls	r3, r3, #30
 8006f30:	d413      	bmi.n	8006f5a <_printf_i+0x23a>
 8006f32:	68e0      	ldr	r0, [r4, #12]
 8006f34:	9b03      	ldr	r3, [sp, #12]
 8006f36:	4298      	cmp	r0, r3
 8006f38:	bfb8      	it	lt
 8006f3a:	4618      	movlt	r0, r3
 8006f3c:	e7a4      	b.n	8006e88 <_printf_i+0x168>
 8006f3e:	2301      	movs	r3, #1
 8006f40:	4632      	mov	r2, r6
 8006f42:	4649      	mov	r1, r9
 8006f44:	4640      	mov	r0, r8
 8006f46:	47d0      	blx	sl
 8006f48:	3001      	adds	r0, #1
 8006f4a:	d09b      	beq.n	8006e84 <_printf_i+0x164>
 8006f4c:	3501      	adds	r5, #1
 8006f4e:	68e3      	ldr	r3, [r4, #12]
 8006f50:	9903      	ldr	r1, [sp, #12]
 8006f52:	1a5b      	subs	r3, r3, r1
 8006f54:	42ab      	cmp	r3, r5
 8006f56:	dcf2      	bgt.n	8006f3e <_printf_i+0x21e>
 8006f58:	e7eb      	b.n	8006f32 <_printf_i+0x212>
 8006f5a:	2500      	movs	r5, #0
 8006f5c:	f104 0619 	add.w	r6, r4, #25
 8006f60:	e7f5      	b.n	8006f4e <_printf_i+0x22e>
 8006f62:	bf00      	nop
 8006f64:	08007249 	.word	0x08007249
 8006f68:	0800725a 	.word	0x0800725a

08006f6c <_sbrk_r>:
 8006f6c:	b538      	push	{r3, r4, r5, lr}
 8006f6e:	4d06      	ldr	r5, [pc, #24]	; (8006f88 <_sbrk_r+0x1c>)
 8006f70:	2300      	movs	r3, #0
 8006f72:	4604      	mov	r4, r0
 8006f74:	4608      	mov	r0, r1
 8006f76:	602b      	str	r3, [r5, #0]
 8006f78:	f7fa f844 	bl	8001004 <_sbrk>
 8006f7c:	1c43      	adds	r3, r0, #1
 8006f7e:	d102      	bne.n	8006f86 <_sbrk_r+0x1a>
 8006f80:	682b      	ldr	r3, [r5, #0]
 8006f82:	b103      	cbz	r3, 8006f86 <_sbrk_r+0x1a>
 8006f84:	6023      	str	r3, [r4, #0]
 8006f86:	bd38      	pop	{r3, r4, r5, pc}
 8006f88:	20000250 	.word	0x20000250

08006f8c <__sread>:
 8006f8c:	b510      	push	{r4, lr}
 8006f8e:	460c      	mov	r4, r1
 8006f90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f94:	f000 f8a0 	bl	80070d8 <_read_r>
 8006f98:	2800      	cmp	r0, #0
 8006f9a:	bfab      	itete	ge
 8006f9c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006f9e:	89a3      	ldrhlt	r3, [r4, #12]
 8006fa0:	181b      	addge	r3, r3, r0
 8006fa2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006fa6:	bfac      	ite	ge
 8006fa8:	6563      	strge	r3, [r4, #84]	; 0x54
 8006faa:	81a3      	strhlt	r3, [r4, #12]
 8006fac:	bd10      	pop	{r4, pc}

08006fae <__swrite>:
 8006fae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fb2:	461f      	mov	r7, r3
 8006fb4:	898b      	ldrh	r3, [r1, #12]
 8006fb6:	05db      	lsls	r3, r3, #23
 8006fb8:	4605      	mov	r5, r0
 8006fba:	460c      	mov	r4, r1
 8006fbc:	4616      	mov	r6, r2
 8006fbe:	d505      	bpl.n	8006fcc <__swrite+0x1e>
 8006fc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fc4:	2302      	movs	r3, #2
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	f000 f868 	bl	800709c <_lseek_r>
 8006fcc:	89a3      	ldrh	r3, [r4, #12]
 8006fce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006fd2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006fd6:	81a3      	strh	r3, [r4, #12]
 8006fd8:	4632      	mov	r2, r6
 8006fda:	463b      	mov	r3, r7
 8006fdc:	4628      	mov	r0, r5
 8006fde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006fe2:	f000 b817 	b.w	8007014 <_write_r>

08006fe6 <__sseek>:
 8006fe6:	b510      	push	{r4, lr}
 8006fe8:	460c      	mov	r4, r1
 8006fea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fee:	f000 f855 	bl	800709c <_lseek_r>
 8006ff2:	1c43      	adds	r3, r0, #1
 8006ff4:	89a3      	ldrh	r3, [r4, #12]
 8006ff6:	bf15      	itete	ne
 8006ff8:	6560      	strne	r0, [r4, #84]	; 0x54
 8006ffa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006ffe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007002:	81a3      	strheq	r3, [r4, #12]
 8007004:	bf18      	it	ne
 8007006:	81a3      	strhne	r3, [r4, #12]
 8007008:	bd10      	pop	{r4, pc}

0800700a <__sclose>:
 800700a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800700e:	f000 b813 	b.w	8007038 <_close_r>
	...

08007014 <_write_r>:
 8007014:	b538      	push	{r3, r4, r5, lr}
 8007016:	4d07      	ldr	r5, [pc, #28]	; (8007034 <_write_r+0x20>)
 8007018:	4604      	mov	r4, r0
 800701a:	4608      	mov	r0, r1
 800701c:	4611      	mov	r1, r2
 800701e:	2200      	movs	r2, #0
 8007020:	602a      	str	r2, [r5, #0]
 8007022:	461a      	mov	r2, r3
 8007024:	f7f9 fe56 	bl	8000cd4 <_write>
 8007028:	1c43      	adds	r3, r0, #1
 800702a:	d102      	bne.n	8007032 <_write_r+0x1e>
 800702c:	682b      	ldr	r3, [r5, #0]
 800702e:	b103      	cbz	r3, 8007032 <_write_r+0x1e>
 8007030:	6023      	str	r3, [r4, #0]
 8007032:	bd38      	pop	{r3, r4, r5, pc}
 8007034:	20000250 	.word	0x20000250

08007038 <_close_r>:
 8007038:	b538      	push	{r3, r4, r5, lr}
 800703a:	4d06      	ldr	r5, [pc, #24]	; (8007054 <_close_r+0x1c>)
 800703c:	2300      	movs	r3, #0
 800703e:	4604      	mov	r4, r0
 8007040:	4608      	mov	r0, r1
 8007042:	602b      	str	r3, [r5, #0]
 8007044:	f7f9 ffa9 	bl	8000f9a <_close>
 8007048:	1c43      	adds	r3, r0, #1
 800704a:	d102      	bne.n	8007052 <_close_r+0x1a>
 800704c:	682b      	ldr	r3, [r5, #0]
 800704e:	b103      	cbz	r3, 8007052 <_close_r+0x1a>
 8007050:	6023      	str	r3, [r4, #0]
 8007052:	bd38      	pop	{r3, r4, r5, pc}
 8007054:	20000250 	.word	0x20000250

08007058 <_fstat_r>:
 8007058:	b538      	push	{r3, r4, r5, lr}
 800705a:	4d07      	ldr	r5, [pc, #28]	; (8007078 <_fstat_r+0x20>)
 800705c:	2300      	movs	r3, #0
 800705e:	4604      	mov	r4, r0
 8007060:	4608      	mov	r0, r1
 8007062:	4611      	mov	r1, r2
 8007064:	602b      	str	r3, [r5, #0]
 8007066:	f7f9 ffa4 	bl	8000fb2 <_fstat>
 800706a:	1c43      	adds	r3, r0, #1
 800706c:	d102      	bne.n	8007074 <_fstat_r+0x1c>
 800706e:	682b      	ldr	r3, [r5, #0]
 8007070:	b103      	cbz	r3, 8007074 <_fstat_r+0x1c>
 8007072:	6023      	str	r3, [r4, #0]
 8007074:	bd38      	pop	{r3, r4, r5, pc}
 8007076:	bf00      	nop
 8007078:	20000250 	.word	0x20000250

0800707c <_isatty_r>:
 800707c:	b538      	push	{r3, r4, r5, lr}
 800707e:	4d06      	ldr	r5, [pc, #24]	; (8007098 <_isatty_r+0x1c>)
 8007080:	2300      	movs	r3, #0
 8007082:	4604      	mov	r4, r0
 8007084:	4608      	mov	r0, r1
 8007086:	602b      	str	r3, [r5, #0]
 8007088:	f7f9 ffa3 	bl	8000fd2 <_isatty>
 800708c:	1c43      	adds	r3, r0, #1
 800708e:	d102      	bne.n	8007096 <_isatty_r+0x1a>
 8007090:	682b      	ldr	r3, [r5, #0]
 8007092:	b103      	cbz	r3, 8007096 <_isatty_r+0x1a>
 8007094:	6023      	str	r3, [r4, #0]
 8007096:	bd38      	pop	{r3, r4, r5, pc}
 8007098:	20000250 	.word	0x20000250

0800709c <_lseek_r>:
 800709c:	b538      	push	{r3, r4, r5, lr}
 800709e:	4d07      	ldr	r5, [pc, #28]	; (80070bc <_lseek_r+0x20>)
 80070a0:	4604      	mov	r4, r0
 80070a2:	4608      	mov	r0, r1
 80070a4:	4611      	mov	r1, r2
 80070a6:	2200      	movs	r2, #0
 80070a8:	602a      	str	r2, [r5, #0]
 80070aa:	461a      	mov	r2, r3
 80070ac:	f7f9 ff9c 	bl	8000fe8 <_lseek>
 80070b0:	1c43      	adds	r3, r0, #1
 80070b2:	d102      	bne.n	80070ba <_lseek_r+0x1e>
 80070b4:	682b      	ldr	r3, [r5, #0]
 80070b6:	b103      	cbz	r3, 80070ba <_lseek_r+0x1e>
 80070b8:	6023      	str	r3, [r4, #0]
 80070ba:	bd38      	pop	{r3, r4, r5, pc}
 80070bc:	20000250 	.word	0x20000250

080070c0 <__malloc_lock>:
 80070c0:	4801      	ldr	r0, [pc, #4]	; (80070c8 <__malloc_lock+0x8>)
 80070c2:	f7ff bb1d 	b.w	8006700 <__retarget_lock_acquire_recursive>
 80070c6:	bf00      	nop
 80070c8:	20000244 	.word	0x20000244

080070cc <__malloc_unlock>:
 80070cc:	4801      	ldr	r0, [pc, #4]	; (80070d4 <__malloc_unlock+0x8>)
 80070ce:	f7ff bb18 	b.w	8006702 <__retarget_lock_release_recursive>
 80070d2:	bf00      	nop
 80070d4:	20000244 	.word	0x20000244

080070d8 <_read_r>:
 80070d8:	b538      	push	{r3, r4, r5, lr}
 80070da:	4d07      	ldr	r5, [pc, #28]	; (80070f8 <_read_r+0x20>)
 80070dc:	4604      	mov	r4, r0
 80070de:	4608      	mov	r0, r1
 80070e0:	4611      	mov	r1, r2
 80070e2:	2200      	movs	r2, #0
 80070e4:	602a      	str	r2, [r5, #0]
 80070e6:	461a      	mov	r2, r3
 80070e8:	f7f9 ff3a 	bl	8000f60 <_read>
 80070ec:	1c43      	adds	r3, r0, #1
 80070ee:	d102      	bne.n	80070f6 <_read_r+0x1e>
 80070f0:	682b      	ldr	r3, [r5, #0]
 80070f2:	b103      	cbz	r3, 80070f6 <_read_r+0x1e>
 80070f4:	6023      	str	r3, [r4, #0]
 80070f6:	bd38      	pop	{r3, r4, r5, pc}
 80070f8:	20000250 	.word	0x20000250

080070fc <_init>:
 80070fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070fe:	bf00      	nop
 8007100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007102:	bc08      	pop	{r3}
 8007104:	469e      	mov	lr, r3
 8007106:	4770      	bx	lr

08007108 <_fini>:
 8007108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800710a:	bf00      	nop
 800710c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800710e:	bc08      	pop	{r3}
 8007110:	469e      	mov	lr, r3
 8007112:	4770      	bx	lr
