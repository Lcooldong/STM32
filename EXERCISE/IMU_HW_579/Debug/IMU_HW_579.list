
IMU_HW_579.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006118  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  080062c8  080062c8  000162c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080063d8  080063d8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080063d8  080063d8  000163d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080063e0  080063e0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080063e0  080063e0  000163e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080063e4  080063e4  000163e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080063e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000120  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000190  20000190  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000dfa2  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002256  00000000  00000000  0002e042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b30  00000000  00000000  00030298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000a50  00000000  00000000  00030dc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000038a1  00000000  00000000  00031818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f462  00000000  00000000  000350b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d5fe2  00000000  00000000  0004451b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0011a4fd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000034c8  00000000  00000000  0011a550  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080062b0 	.word	0x080062b0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	080062b0 	.word	0x080062b0

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b08c      	sub	sp, #48	; 0x30
 8000598:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800059a:	f107 031c 	add.w	r3, r7, #28
 800059e:	2200      	movs	r2, #0
 80005a0:	601a      	str	r2, [r3, #0]
 80005a2:	605a      	str	r2, [r3, #4]
 80005a4:	609a      	str	r2, [r3, #8]
 80005a6:	60da      	str	r2, [r3, #12]
 80005a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005aa:	2300      	movs	r3, #0
 80005ac:	61bb      	str	r3, [r7, #24]
 80005ae:	4b7c      	ldr	r3, [pc, #496]	; (80007a0 <MX_GPIO_Init+0x20c>)
 80005b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b2:	4a7b      	ldr	r2, [pc, #492]	; (80007a0 <MX_GPIO_Init+0x20c>)
 80005b4:	f043 0304 	orr.w	r3, r3, #4
 80005b8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ba:	4b79      	ldr	r3, [pc, #484]	; (80007a0 <MX_GPIO_Init+0x20c>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005be:	f003 0304 	and.w	r3, r3, #4
 80005c2:	61bb      	str	r3, [r7, #24]
 80005c4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005c6:	2300      	movs	r3, #0
 80005c8:	617b      	str	r3, [r7, #20]
 80005ca:	4b75      	ldr	r3, [pc, #468]	; (80007a0 <MX_GPIO_Init+0x20c>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ce:	4a74      	ldr	r2, [pc, #464]	; (80007a0 <MX_GPIO_Init+0x20c>)
 80005d0:	f043 0320 	orr.w	r3, r3, #32
 80005d4:	6313      	str	r3, [r2, #48]	; 0x30
 80005d6:	4b72      	ldr	r3, [pc, #456]	; (80007a0 <MX_GPIO_Init+0x20c>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	f003 0320 	and.w	r3, r3, #32
 80005de:	617b      	str	r3, [r7, #20]
 80005e0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005e2:	2300      	movs	r3, #0
 80005e4:	613b      	str	r3, [r7, #16]
 80005e6:	4b6e      	ldr	r3, [pc, #440]	; (80007a0 <MX_GPIO_Init+0x20c>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ea:	4a6d      	ldr	r2, [pc, #436]	; (80007a0 <MX_GPIO_Init+0x20c>)
 80005ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005f0:	6313      	str	r3, [r2, #48]	; 0x30
 80005f2:	4b6b      	ldr	r3, [pc, #428]	; (80007a0 <MX_GPIO_Init+0x20c>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005fa:	613b      	str	r3, [r7, #16]
 80005fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005fe:	2300      	movs	r3, #0
 8000600:	60fb      	str	r3, [r7, #12]
 8000602:	4b67      	ldr	r3, [pc, #412]	; (80007a0 <MX_GPIO_Init+0x20c>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000606:	4a66      	ldr	r2, [pc, #408]	; (80007a0 <MX_GPIO_Init+0x20c>)
 8000608:	f043 0301 	orr.w	r3, r3, #1
 800060c:	6313      	str	r3, [r2, #48]	; 0x30
 800060e:	4b64      	ldr	r3, [pc, #400]	; (80007a0 <MX_GPIO_Init+0x20c>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000612:	f003 0301 	and.w	r3, r3, #1
 8000616:	60fb      	str	r3, [r7, #12]
 8000618:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800061a:	2300      	movs	r3, #0
 800061c:	60bb      	str	r3, [r7, #8]
 800061e:	4b60      	ldr	r3, [pc, #384]	; (80007a0 <MX_GPIO_Init+0x20c>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000622:	4a5f      	ldr	r2, [pc, #380]	; (80007a0 <MX_GPIO_Init+0x20c>)
 8000624:	f043 0302 	orr.w	r3, r3, #2
 8000628:	6313      	str	r3, [r2, #48]	; 0x30
 800062a:	4b5d      	ldr	r3, [pc, #372]	; (80007a0 <MX_GPIO_Init+0x20c>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062e:	f003 0302 	and.w	r3, r3, #2
 8000632:	60bb      	str	r3, [r7, #8]
 8000634:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000636:	2300      	movs	r3, #0
 8000638:	607b      	str	r3, [r7, #4]
 800063a:	4b59      	ldr	r3, [pc, #356]	; (80007a0 <MX_GPIO_Init+0x20c>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063e:	4a58      	ldr	r2, [pc, #352]	; (80007a0 <MX_GPIO_Init+0x20c>)
 8000640:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000644:	6313      	str	r3, [r2, #48]	; 0x30
 8000646:	4b56      	ldr	r3, [pc, #344]	; (80007a0 <MX_GPIO_Init+0x20c>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800064e:	607b      	str	r3, [r7, #4]
 8000650:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000652:	2200      	movs	r2, #0
 8000654:	f244 0181 	movw	r1, #16513	; 0x4081
 8000658:	4852      	ldr	r0, [pc, #328]	; (80007a4 <MX_GPIO_Init+0x210>)
 800065a:	f001 f8a1 	bl	80017a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800065e:	2200      	movs	r2, #0
 8000660:	2140      	movs	r1, #64	; 0x40
 8000662:	4851      	ldr	r0, [pc, #324]	; (80007a8 <MX_GPIO_Init+0x214>)
 8000664:	f001 f89c 	bl	80017a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000668:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800066c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800066e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000672:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000674:	2300      	movs	r3, #0
 8000676:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000678:	f107 031c 	add.w	r3, r7, #28
 800067c:	4619      	mov	r1, r3
 800067e:	484b      	ldr	r0, [pc, #300]	; (80007ac <MX_GPIO_Init+0x218>)
 8000680:	f000 fee2 	bl	8001448 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000684:	2332      	movs	r3, #50	; 0x32
 8000686:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000688:	2302      	movs	r3, #2
 800068a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068c:	2300      	movs	r3, #0
 800068e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000690:	2303      	movs	r3, #3
 8000692:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000694:	230b      	movs	r3, #11
 8000696:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000698:	f107 031c 	add.w	r3, r7, #28
 800069c:	4619      	mov	r1, r3
 800069e:	4843      	ldr	r0, [pc, #268]	; (80007ac <MX_GPIO_Init+0x218>)
 80006a0:	f000 fed2 	bl	8001448 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80006a4:	2386      	movs	r3, #134	; 0x86
 80006a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006a8:	2302      	movs	r3, #2
 80006aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ac:	2300      	movs	r3, #0
 80006ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006b0:	2303      	movs	r3, #3
 80006b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006b4:	230b      	movs	r3, #11
 80006b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006b8:	f107 031c 	add.w	r3, r7, #28
 80006bc:	4619      	mov	r1, r3
 80006be:	483c      	ldr	r0, [pc, #240]	; (80007b0 <MX_GPIO_Init+0x21c>)
 80006c0:	f000 fec2 	bl	8001448 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80006c4:	f244 0381 	movw	r3, #16513	; 0x4081
 80006c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ca:	2301      	movs	r3, #1
 80006cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ce:	2300      	movs	r3, #0
 80006d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d2:	2300      	movs	r3, #0
 80006d4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006d6:	f107 031c 	add.w	r3, r7, #28
 80006da:	4619      	mov	r1, r3
 80006dc:	4831      	ldr	r0, [pc, #196]	; (80007a4 <MX_GPIO_Init+0x210>)
 80006de:	f000 feb3 	bl	8001448 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80006e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006e8:	2302      	movs	r3, #2
 80006ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ec:	2300      	movs	r3, #0
 80006ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006f0:	2303      	movs	r3, #3
 80006f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006f4:	230b      	movs	r3, #11
 80006f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80006f8:	f107 031c 	add.w	r3, r7, #28
 80006fc:	4619      	mov	r1, r3
 80006fe:	4829      	ldr	r0, [pc, #164]	; (80007a4 <MX_GPIO_Init+0x210>)
 8000700:	f000 fea2 	bl	8001448 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000704:	2340      	movs	r3, #64	; 0x40
 8000706:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000708:	2301      	movs	r3, #1
 800070a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070c:	2300      	movs	r3, #0
 800070e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000710:	2300      	movs	r3, #0
 8000712:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000714:	f107 031c 	add.w	r3, r7, #28
 8000718:	4619      	mov	r1, r3
 800071a:	4823      	ldr	r0, [pc, #140]	; (80007a8 <MX_GPIO_Init+0x214>)
 800071c:	f000 fe94 	bl	8001448 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000720:	2380      	movs	r3, #128	; 0x80
 8000722:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000724:	2300      	movs	r3, #0
 8000726:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000728:	2300      	movs	r3, #0
 800072a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800072c:	f107 031c 	add.w	r3, r7, #28
 8000730:	4619      	mov	r1, r3
 8000732:	481d      	ldr	r0, [pc, #116]	; (80007a8 <MX_GPIO_Init+0x214>)
 8000734:	f000 fe88 	bl	8001448 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000738:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800073c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800073e:	2302      	movs	r3, #2
 8000740:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000742:	2300      	movs	r3, #0
 8000744:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000746:	2303      	movs	r3, #3
 8000748:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800074a:	230a      	movs	r3, #10
 800074c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800074e:	f107 031c 	add.w	r3, r7, #28
 8000752:	4619      	mov	r1, r3
 8000754:	4816      	ldr	r0, [pc, #88]	; (80007b0 <MX_GPIO_Init+0x21c>)
 8000756:	f000 fe77 	bl	8001448 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800075a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800075e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000760:	2300      	movs	r3, #0
 8000762:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000764:	2300      	movs	r3, #0
 8000766:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000768:	f107 031c 	add.w	r3, r7, #28
 800076c:	4619      	mov	r1, r3
 800076e:	4810      	ldr	r0, [pc, #64]	; (80007b0 <MX_GPIO_Init+0x21c>)
 8000770:	f000 fe6a 	bl	8001448 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000774:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000778:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800077a:	2302      	movs	r3, #2
 800077c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077e:	2300      	movs	r3, #0
 8000780:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000782:	2303      	movs	r3, #3
 8000784:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000786:	230b      	movs	r3, #11
 8000788:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800078a:	f107 031c 	add.w	r3, r7, #28
 800078e:	4619      	mov	r1, r3
 8000790:	4805      	ldr	r0, [pc, #20]	; (80007a8 <MX_GPIO_Init+0x214>)
 8000792:	f000 fe59 	bl	8001448 <HAL_GPIO_Init>

}
 8000796:	bf00      	nop
 8000798:	3730      	adds	r7, #48	; 0x30
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	40023800 	.word	0x40023800
 80007a4:	40020400 	.word	0x40020400
 80007a8:	40021800 	.word	0x40021800
 80007ac:	40020800 	.word	0x40020800
 80007b0:	40020000 	.word	0x40020000

080007b4 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007b8:	4b1b      	ldr	r3, [pc, #108]	; (8000828 <MX_I2C1_Init+0x74>)
 80007ba:	4a1c      	ldr	r2, [pc, #112]	; (800082c <MX_I2C1_Init+0x78>)
 80007bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80007be:	4b1a      	ldr	r3, [pc, #104]	; (8000828 <MX_I2C1_Init+0x74>)
 80007c0:	4a1b      	ldr	r2, [pc, #108]	; (8000830 <MX_I2C1_Init+0x7c>)
 80007c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007c4:	4b18      	ldr	r3, [pc, #96]	; (8000828 <MX_I2C1_Init+0x74>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007ca:	4b17      	ldr	r3, [pc, #92]	; (8000828 <MX_I2C1_Init+0x74>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007d0:	4b15      	ldr	r3, [pc, #84]	; (8000828 <MX_I2C1_Init+0x74>)
 80007d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007d6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007d8:	4b13      	ldr	r3, [pc, #76]	; (8000828 <MX_I2C1_Init+0x74>)
 80007da:	2200      	movs	r2, #0
 80007dc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007de:	4b12      	ldr	r3, [pc, #72]	; (8000828 <MX_I2C1_Init+0x74>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007e4:	4b10      	ldr	r3, [pc, #64]	; (8000828 <MX_I2C1_Init+0x74>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007ea:	4b0f      	ldr	r3, [pc, #60]	; (8000828 <MX_I2C1_Init+0x74>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007f0:	480d      	ldr	r0, [pc, #52]	; (8000828 <MX_I2C1_Init+0x74>)
 80007f2:	f000 ffef 	bl	80017d4 <HAL_I2C_Init>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007fc:	f000 fa14 	bl	8000c28 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000800:	2100      	movs	r1, #0
 8000802:	4809      	ldr	r0, [pc, #36]	; (8000828 <MX_I2C1_Init+0x74>)
 8000804:	f002 ff99 	bl	800373a <HAL_I2CEx_ConfigAnalogFilter>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800080e:	f000 fa0b 	bl	8000c28 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000812:	2100      	movs	r1, #0
 8000814:	4804      	ldr	r0, [pc, #16]	; (8000828 <MX_I2C1_Init+0x74>)
 8000816:	f002 ffcc 	bl	80037b2 <HAL_I2CEx_ConfigDigitalFilter>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000820:	f000 fa02 	bl	8000c28 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000824:	bf00      	nop
 8000826:	bd80      	pop	{r7, pc}
 8000828:	2000008c 	.word	0x2000008c
 800082c:	40005400 	.word	0x40005400
 8000830:	000186a0 	.word	0x000186a0

08000834 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000838:	4b1b      	ldr	r3, [pc, #108]	; (80008a8 <MX_I2C2_Init+0x74>)
 800083a:	4a1c      	ldr	r2, [pc, #112]	; (80008ac <MX_I2C2_Init+0x78>)
 800083c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800083e:	4b1a      	ldr	r3, [pc, #104]	; (80008a8 <MX_I2C2_Init+0x74>)
 8000840:	4a1b      	ldr	r2, [pc, #108]	; (80008b0 <MX_I2C2_Init+0x7c>)
 8000842:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000844:	4b18      	ldr	r3, [pc, #96]	; (80008a8 <MX_I2C2_Init+0x74>)
 8000846:	2200      	movs	r2, #0
 8000848:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800084a:	4b17      	ldr	r3, [pc, #92]	; (80008a8 <MX_I2C2_Init+0x74>)
 800084c:	2200      	movs	r2, #0
 800084e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000850:	4b15      	ldr	r3, [pc, #84]	; (80008a8 <MX_I2C2_Init+0x74>)
 8000852:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000856:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000858:	4b13      	ldr	r3, [pc, #76]	; (80008a8 <MX_I2C2_Init+0x74>)
 800085a:	2200      	movs	r2, #0
 800085c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800085e:	4b12      	ldr	r3, [pc, #72]	; (80008a8 <MX_I2C2_Init+0x74>)
 8000860:	2200      	movs	r2, #0
 8000862:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000864:	4b10      	ldr	r3, [pc, #64]	; (80008a8 <MX_I2C2_Init+0x74>)
 8000866:	2200      	movs	r2, #0
 8000868:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800086a:	4b0f      	ldr	r3, [pc, #60]	; (80008a8 <MX_I2C2_Init+0x74>)
 800086c:	2200      	movs	r2, #0
 800086e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000870:	480d      	ldr	r0, [pc, #52]	; (80008a8 <MX_I2C2_Init+0x74>)
 8000872:	f000 ffaf 	bl	80017d4 <HAL_I2C_Init>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800087c:	f000 f9d4 	bl	8000c28 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000880:	2100      	movs	r1, #0
 8000882:	4809      	ldr	r0, [pc, #36]	; (80008a8 <MX_I2C2_Init+0x74>)
 8000884:	f002 ff59 	bl	800373a <HAL_I2CEx_ConfigAnalogFilter>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 800088e:	f000 f9cb 	bl	8000c28 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000892:	2100      	movs	r1, #0
 8000894:	4804      	ldr	r0, [pc, #16]	; (80008a8 <MX_I2C2_Init+0x74>)
 8000896:	f002 ff8c 	bl	80037b2 <HAL_I2CEx_ConfigDigitalFilter>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 80008a0:	f000 f9c2 	bl	8000c28 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80008a4:	bf00      	nop
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	200000e0 	.word	0x200000e0
 80008ac:	40005800 	.word	0x40005800
 80008b0:	000186a0 	.word	0x000186a0

080008b4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b08c      	sub	sp, #48	; 0x30
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008bc:	f107 031c 	add.w	r3, r7, #28
 80008c0:	2200      	movs	r2, #0
 80008c2:	601a      	str	r2, [r3, #0]
 80008c4:	605a      	str	r2, [r3, #4]
 80008c6:	609a      	str	r2, [r3, #8]
 80008c8:	60da      	str	r2, [r3, #12]
 80008ca:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4a42      	ldr	r2, [pc, #264]	; (80009dc <HAL_I2C_MspInit+0x128>)
 80008d2:	4293      	cmp	r3, r2
 80008d4:	d13d      	bne.n	8000952 <HAL_I2C_MspInit+0x9e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008d6:	2300      	movs	r3, #0
 80008d8:	61bb      	str	r3, [r7, #24]
 80008da:	4b41      	ldr	r3, [pc, #260]	; (80009e0 <HAL_I2C_MspInit+0x12c>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	4a40      	ldr	r2, [pc, #256]	; (80009e0 <HAL_I2C_MspInit+0x12c>)
 80008e0:	f043 0302 	orr.w	r3, r3, #2
 80008e4:	6313      	str	r3, [r2, #48]	; 0x30
 80008e6:	4b3e      	ldr	r3, [pc, #248]	; (80009e0 <HAL_I2C_MspInit+0x12c>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	f003 0302 	and.w	r3, r3, #2
 80008ee:	61bb      	str	r3, [r7, #24]
 80008f0:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80008f2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80008f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008f8:	2312      	movs	r3, #18
 80008fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fc:	2300      	movs	r3, #0
 80008fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000900:	2303      	movs	r3, #3
 8000902:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000904:	2304      	movs	r3, #4
 8000906:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000908:	f107 031c 	add.w	r3, r7, #28
 800090c:	4619      	mov	r1, r3
 800090e:	4835      	ldr	r0, [pc, #212]	; (80009e4 <HAL_I2C_MspInit+0x130>)
 8000910:	f000 fd9a 	bl	8001448 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000914:	2300      	movs	r3, #0
 8000916:	617b      	str	r3, [r7, #20]
 8000918:	4b31      	ldr	r3, [pc, #196]	; (80009e0 <HAL_I2C_MspInit+0x12c>)
 800091a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800091c:	4a30      	ldr	r2, [pc, #192]	; (80009e0 <HAL_I2C_MspInit+0x12c>)
 800091e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000922:	6413      	str	r3, [r2, #64]	; 0x40
 8000924:	4b2e      	ldr	r3, [pc, #184]	; (80009e0 <HAL_I2C_MspInit+0x12c>)
 8000926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000928:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800092c:	617b      	str	r3, [r7, #20]
 800092e:	697b      	ldr	r3, [r7, #20]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000930:	2200      	movs	r2, #0
 8000932:	2100      	movs	r1, #0
 8000934:	201f      	movs	r0, #31
 8000936:	f000 fcb0 	bl	800129a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800093a:	201f      	movs	r0, #31
 800093c:	f000 fcc9 	bl	80012d2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000940:	2200      	movs	r2, #0
 8000942:	2100      	movs	r1, #0
 8000944:	2020      	movs	r0, #32
 8000946:	f000 fca8 	bl	800129a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800094a:	2020      	movs	r0, #32
 800094c:	f000 fcc1 	bl	80012d2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000950:	e040      	b.n	80009d4 <HAL_I2C_MspInit+0x120>
  else if(i2cHandle->Instance==I2C2)
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	4a24      	ldr	r2, [pc, #144]	; (80009e8 <HAL_I2C_MspInit+0x134>)
 8000958:	4293      	cmp	r3, r2
 800095a:	d13b      	bne.n	80009d4 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800095c:	2300      	movs	r3, #0
 800095e:	613b      	str	r3, [r7, #16]
 8000960:	4b1f      	ldr	r3, [pc, #124]	; (80009e0 <HAL_I2C_MspInit+0x12c>)
 8000962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000964:	4a1e      	ldr	r2, [pc, #120]	; (80009e0 <HAL_I2C_MspInit+0x12c>)
 8000966:	f043 0320 	orr.w	r3, r3, #32
 800096a:	6313      	str	r3, [r2, #48]	; 0x30
 800096c:	4b1c      	ldr	r3, [pc, #112]	; (80009e0 <HAL_I2C_MspInit+0x12c>)
 800096e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000970:	f003 0320 	and.w	r3, r3, #32
 8000974:	613b      	str	r3, [r7, #16]
 8000976:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000978:	2303      	movs	r3, #3
 800097a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800097c:	2312      	movs	r3, #18
 800097e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000980:	2300      	movs	r3, #0
 8000982:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000984:	2303      	movs	r3, #3
 8000986:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000988:	2304      	movs	r3, #4
 800098a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800098c:	f107 031c 	add.w	r3, r7, #28
 8000990:	4619      	mov	r1, r3
 8000992:	4816      	ldr	r0, [pc, #88]	; (80009ec <HAL_I2C_MspInit+0x138>)
 8000994:	f000 fd58 	bl	8001448 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000998:	2300      	movs	r3, #0
 800099a:	60fb      	str	r3, [r7, #12]
 800099c:	4b10      	ldr	r3, [pc, #64]	; (80009e0 <HAL_I2C_MspInit+0x12c>)
 800099e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a0:	4a0f      	ldr	r2, [pc, #60]	; (80009e0 <HAL_I2C_MspInit+0x12c>)
 80009a2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80009a6:	6413      	str	r3, [r2, #64]	; 0x40
 80009a8:	4b0d      	ldr	r3, [pc, #52]	; (80009e0 <HAL_I2C_MspInit+0x12c>)
 80009aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80009b0:	60fb      	str	r3, [r7, #12]
 80009b2:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 80009b4:	2200      	movs	r2, #0
 80009b6:	2100      	movs	r1, #0
 80009b8:	2021      	movs	r0, #33	; 0x21
 80009ba:	f000 fc6e 	bl	800129a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80009be:	2021      	movs	r0, #33	; 0x21
 80009c0:	f000 fc87 	bl	80012d2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 80009c4:	2200      	movs	r2, #0
 80009c6:	2100      	movs	r1, #0
 80009c8:	2022      	movs	r0, #34	; 0x22
 80009ca:	f000 fc66 	bl	800129a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 80009ce:	2022      	movs	r0, #34	; 0x22
 80009d0:	f000 fc7f 	bl	80012d2 <HAL_NVIC_EnableIRQ>
}
 80009d4:	bf00      	nop
 80009d6:	3730      	adds	r7, #48	; 0x30
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	40005400 	.word	0x40005400
 80009e0:	40023800 	.word	0x40023800
 80009e4:	40020400 	.word	0x40020400
 80009e8:	40005800 	.word	0x40005800
 80009ec:	40021400 	.word	0x40021400

080009f0 <_write>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
int _write(int file, char *p, int len)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b084      	sub	sp, #16
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	60f8      	str	r0, [r7, #12]
 80009f8:	60b9      	str	r1, [r7, #8]
 80009fa:	607a      	str	r2, [r7, #4]
	if(HAL_UART_Transmit(&huart3, (uint8_t *)p, len, 10) == HAL_OK) return len;
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	b29a      	uxth	r2, r3
 8000a00:	230a      	movs	r3, #10
 8000a02:	68b9      	ldr	r1, [r7, #8]
 8000a04:	4806      	ldr	r0, [pc, #24]	; (8000a20 <_write+0x30>)
 8000a06:	f003 fc48 	bl	800429a <HAL_UART_Transmit>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d101      	bne.n	8000a14 <_write+0x24>
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	e000      	b.n	8000a16 <_write+0x26>
	else return 0;
 8000a14:	2300      	movs	r3, #0
}
 8000a16:	4618      	mov	r0, r3
 8000a18:	3710      	adds	r7, #16
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	20000138 	.word	0x20000138

08000a24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b09a      	sub	sp, #104	; 0x68
 8000a28:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a2a:	f000 fac5 	bl	8000fb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a2e:	f000 f88b 	bl	8000b48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a32:	f7ff fdaf 	bl	8000594 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000a36:	f7ff febd 	bl	80007b4 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8000a3a:	f000 fa19 	bl	8000e70 <MX_USART3_UART_Init>
  MX_I2C2_Init();
 8000a3e:	f7ff fef9 	bl	8000834 <MX_I2C2_Init>
  /* USER CODE BEGIN WHILE */

  HAL_StatusTypeDef state;
  uint8_t slave_address;
//  uint8_t state_buffer[128] = {0, };
  uint8_t sensors[3] = {0, };
 8000a42:	4b3a      	ldr	r3, [pc, #232]	; (8000b2c <main+0x108>)
 8000a44:	881b      	ldrh	r3, [r3, #0]
 8000a46:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  uint8_t numSensors = 0;
 8000a50:	2300      	movs	r3, #0
 8000a52:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
//  uint8_t nDevices;
  ITG3205 itg3205 = {hi2c1, ITG3205_MPU_ADDRESS};
 8000a56:	4a36      	ldr	r2, [pc, #216]	; (8000b30 <main+0x10c>)
 8000a58:	1d3b      	adds	r3, r7, #4
 8000a5a:	4611      	mov	r1, r2
 8000a5c:	2254      	movs	r2, #84	; 0x54
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f004 fc0c 	bl	800527c <memcpy>
 8000a64:	23d0      	movs	r3, #208	; 0xd0
 8000a66:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
  HAL_Delay(1000);
 8000a6a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a6e:	f000 fb15 	bl	800109c <HAL_Delay>
  printf("I2C Scan Start\r\n");
 8000a72:	4830      	ldr	r0, [pc, #192]	; (8000b34 <main+0x110>)
 8000a74:	f004 fc9e 	bl	80053b4 <puts>
  printf("==================\r\n");
 8000a78:	482f      	ldr	r0, [pc, #188]	; (8000b38 <main+0x114>)
 8000a7a:	f004 fc9b 	bl	80053b4 <puts>
  for(slave_address = 1; slave_address < 128; slave_address++)
 8000a7e:	2301      	movs	r3, #1
 8000a80:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8000a84:	e030      	b.n	8000ae8 <main+0xc4>
  {
	  //state = HAL_I2C_Master_Transmit(&hi2c1, slave_address, state_buffer, 3, HAL_MAX_DELAY);
	  state = HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t)(slave_address << 1), 3, 10);
 8000a86:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000a8a:	b29b      	uxth	r3, r3
 8000a8c:	005b      	lsls	r3, r3, #1
 8000a8e:	b299      	uxth	r1, r3
 8000a90:	230a      	movs	r3, #10
 8000a92:	2203      	movs	r2, #3
 8000a94:	4826      	ldr	r0, [pc, #152]	; (8000b30 <main+0x10c>)
 8000a96:	f000 ffe1 	bl	8001a5c <HAL_I2C_IsDeviceReady>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	  if (state == HAL_OK)
 8000aa0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d113      	bne.n	8000ad0 <main+0xac>
	  {
		  sensors[numSensors] = slave_address;
 8000aa8:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000aac:	3368      	adds	r3, #104	; 0x68
 8000aae:	443b      	add	r3, r7
 8000ab0:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8000ab4:	f803 2c0c 	strb.w	r2, [r3, #-12]
		  numSensors++;
 8000ab8:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000abc:	3301      	adds	r3, #1
 8000abe:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
		  printf("Address : 0x%X\r\n", slave_address);	// !HAL_OK = 1
 8000ac2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	481c      	ldr	r0, [pc, #112]	; (8000b3c <main+0x118>)
 8000aca:	f004 fbed 	bl	80052a8 <iprintf>
 8000ace:	e006      	b.n	8000ade <main+0xba>
	  }
	  else
	  {
		  while(HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8000ad0:	bf00      	nop
 8000ad2:	4817      	ldr	r0, [pc, #92]	; (8000b30 <main+0x10c>)
 8000ad4:	f001 fb70 	bl	80021b8 <HAL_I2C_GetState>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b20      	cmp	r3, #32
 8000adc:	d1f9      	bne.n	8000ad2 <main+0xae>
  for(slave_address = 1; slave_address < 128; slave_address++)
 8000ade:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000ae2:	3301      	adds	r3, #1
 8000ae4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8000ae8:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	daca      	bge.n	8000a86 <main+0x62>
	  }
  }
  printf("==================\r\n");
 8000af0:	4811      	ldr	r0, [pc, #68]	; (8000b38 <main+0x114>)
 8000af2:	f004 fc5f 	bl	80053b4 <puts>
  printf("End Scanning\r\n");
 8000af6:	4812      	ldr	r0, [pc, #72]	; (8000b40 <main+0x11c>)
 8000af8:	f004 fc5c 	bl	80053b4 <puts>

  for(int i = 0; i < numSensors; i++)
 8000afc:	2300      	movs	r3, #0
 8000afe:	663b      	str	r3, [r7, #96]	; 0x60
 8000b00:	e00b      	b.n	8000b1a <main+0xf6>
  {
	  printf("result : [0x%X]\r\n", sensors[i]);
 8000b02:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8000b06:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000b08:	4413      	add	r3, r2
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	480d      	ldr	r0, [pc, #52]	; (8000b44 <main+0x120>)
 8000b10:	f004 fbca 	bl	80052a8 <iprintf>
  for(int i = 0; i < numSensors; i++)
 8000b14:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000b16:	3301      	adds	r3, #1
 8000b18:	663b      	str	r3, [r7, #96]	; 0x60
 8000b1a:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000b1e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000b20:	429a      	cmp	r2, r3
 8000b22:	dbee      	blt.n	8000b02 <main+0xde>
//	  else if(state == HAL_OK)
//	  {
//		  printf("Memory address : 0x%X\r\n", read_address);
//		  printf("Read Buffer : %s\r\n", buffer);	// get 2bits ?
//	  }
	  HAL_Delay(100);
 8000b24:	2064      	movs	r0, #100	; 0x64
 8000b26:	f000 fab9 	bl	800109c <HAL_Delay>
 8000b2a:	e7fb      	b.n	8000b24 <main+0x100>
 8000b2c:	08006324 	.word	0x08006324
 8000b30:	2000008c 	.word	0x2000008c
 8000b34:	080062c8 	.word	0x080062c8
 8000b38:	080062d8 	.word	0x080062d8
 8000b3c:	080062ec 	.word	0x080062ec
 8000b40:	08006300 	.word	0x08006300
 8000b44:	08006310 	.word	0x08006310

08000b48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b094      	sub	sp, #80	; 0x50
 8000b4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b4e:	f107 0320 	add.w	r3, r7, #32
 8000b52:	2230      	movs	r2, #48	; 0x30
 8000b54:	2100      	movs	r1, #0
 8000b56:	4618      	mov	r0, r3
 8000b58:	f004 fb9e 	bl	8005298 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b5c:	f107 030c 	add.w	r3, r7, #12
 8000b60:	2200      	movs	r2, #0
 8000b62:	601a      	str	r2, [r3, #0]
 8000b64:	605a      	str	r2, [r3, #4]
 8000b66:	609a      	str	r2, [r3, #8]
 8000b68:	60da      	str	r2, [r3, #12]
 8000b6a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	60bb      	str	r3, [r7, #8]
 8000b70:	4b2b      	ldr	r3, [pc, #172]	; (8000c20 <SystemClock_Config+0xd8>)
 8000b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b74:	4a2a      	ldr	r2, [pc, #168]	; (8000c20 <SystemClock_Config+0xd8>)
 8000b76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b7a:	6413      	str	r3, [r2, #64]	; 0x40
 8000b7c:	4b28      	ldr	r3, [pc, #160]	; (8000c20 <SystemClock_Config+0xd8>)
 8000b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b84:	60bb      	str	r3, [r7, #8]
 8000b86:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b88:	2300      	movs	r3, #0
 8000b8a:	607b      	str	r3, [r7, #4]
 8000b8c:	4b25      	ldr	r3, [pc, #148]	; (8000c24 <SystemClock_Config+0xdc>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a24      	ldr	r2, [pc, #144]	; (8000c24 <SystemClock_Config+0xdc>)
 8000b92:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b96:	6013      	str	r3, [r2, #0]
 8000b98:	4b22      	ldr	r3, [pc, #136]	; (8000c24 <SystemClock_Config+0xdc>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ba0:	607b      	str	r3, [r7, #4]
 8000ba2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000ba8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000bac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bae:	2302      	movs	r3, #2
 8000bb0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bb2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000bb6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000bb8:	2304      	movs	r3, #4
 8000bba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000bbc:	23b4      	movs	r3, #180	; 0xb4
 8000bbe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bc0:	2302      	movs	r3, #2
 8000bc2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000bc4:	2304      	movs	r3, #4
 8000bc6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bc8:	f107 0320 	add.w	r3, r7, #32
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f002 fe7f 	bl	80038d0 <HAL_RCC_OscConfig>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000bd8:	f000 f826 	bl	8000c28 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000bdc:	f002 fe28 	bl	8003830 <HAL_PWREx_EnableOverDrive>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000be6:	f000 f81f 	bl	8000c28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bea:	230f      	movs	r3, #15
 8000bec:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bee:	2302      	movs	r3, #2
 8000bf0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000bf6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000bfa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000bfc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c00:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000c02:	f107 030c 	add.w	r3, r7, #12
 8000c06:	2105      	movs	r1, #5
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f003 f8d9 	bl	8003dc0 <HAL_RCC_ClockConfig>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000c14:	f000 f808 	bl	8000c28 <Error_Handler>
  }
}
 8000c18:	bf00      	nop
 8000c1a:	3750      	adds	r7, #80	; 0x50
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	40023800 	.word	0x40023800
 8000c24:	40007000 	.word	0x40007000

08000c28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c2c:	b672      	cpsid	i
}
 8000c2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c30:	e7fe      	b.n	8000c30 <Error_Handler+0x8>
	...

08000c34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b083      	sub	sp, #12
 8000c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	607b      	str	r3, [r7, #4]
 8000c3e:	4b10      	ldr	r3, [pc, #64]	; (8000c80 <HAL_MspInit+0x4c>)
 8000c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c42:	4a0f      	ldr	r2, [pc, #60]	; (8000c80 <HAL_MspInit+0x4c>)
 8000c44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c48:	6453      	str	r3, [r2, #68]	; 0x44
 8000c4a:	4b0d      	ldr	r3, [pc, #52]	; (8000c80 <HAL_MspInit+0x4c>)
 8000c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c52:	607b      	str	r3, [r7, #4]
 8000c54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c56:	2300      	movs	r3, #0
 8000c58:	603b      	str	r3, [r7, #0]
 8000c5a:	4b09      	ldr	r3, [pc, #36]	; (8000c80 <HAL_MspInit+0x4c>)
 8000c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5e:	4a08      	ldr	r2, [pc, #32]	; (8000c80 <HAL_MspInit+0x4c>)
 8000c60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c64:	6413      	str	r3, [r2, #64]	; 0x40
 8000c66:	4b06      	ldr	r3, [pc, #24]	; (8000c80 <HAL_MspInit+0x4c>)
 8000c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c6e:	603b      	str	r3, [r7, #0]
 8000c70:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c72:	bf00      	nop
 8000c74:	370c      	adds	r7, #12
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	40023800 	.word	0x40023800

08000c84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c88:	e7fe      	b.n	8000c88 <NMI_Handler+0x4>

08000c8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c8a:	b480      	push	{r7}
 8000c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c8e:	e7fe      	b.n	8000c8e <HardFault_Handler+0x4>

08000c90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c94:	e7fe      	b.n	8000c94 <MemManage_Handler+0x4>

08000c96 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c96:	b480      	push	{r7}
 8000c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c9a:	e7fe      	b.n	8000c9a <BusFault_Handler+0x4>

08000c9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ca0:	e7fe      	b.n	8000ca0 <UsageFault_Handler+0x4>

08000ca2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ca6:	bf00      	nop
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr

08000cb0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cb4:	bf00      	nop
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr

08000cbe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cbe:	b480      	push	{r7}
 8000cc0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cc2:	bf00      	nop
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr

08000ccc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cd0:	f000 f9c4 	bl	800105c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cd4:	bf00      	nop
 8000cd6:	bd80      	pop	{r7, pc}

08000cd8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000cdc:	4802      	ldr	r0, [pc, #8]	; (8000ce8 <I2C1_EV_IRQHandler+0x10>)
 8000cde:	f000 ffeb 	bl	8001cb8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000ce2:	bf00      	nop
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	2000008c 	.word	0x2000008c

08000cec <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000cf0:	4802      	ldr	r0, [pc, #8]	; (8000cfc <I2C1_ER_IRQHandler+0x10>)
 8000cf2:	f001 f952 	bl	8001f9a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000cf6:	bf00      	nop
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	2000008c 	.word	0x2000008c

08000d00 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8000d04:	4802      	ldr	r0, [pc, #8]	; (8000d10 <I2C2_EV_IRQHandler+0x10>)
 8000d06:	f000 ffd7 	bl	8001cb8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8000d0a:	bf00      	nop
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	200000e0 	.word	0x200000e0

08000d14 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8000d18:	4802      	ldr	r0, [pc, #8]	; (8000d24 <I2C2_ER_IRQHandler+0x10>)
 8000d1a:	f001 f93e 	bl	8001f9a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8000d1e:	bf00      	nop
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	200000e0 	.word	0x200000e0

08000d28 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000d2c:	4802      	ldr	r0, [pc, #8]	; (8000d38 <USART3_IRQHandler+0x10>)
 8000d2e:	f003 fb47 	bl	80043c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000d32:	bf00      	nop
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	20000138 	.word	0x20000138

08000d3c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b086      	sub	sp, #24
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	60f8      	str	r0, [r7, #12]
 8000d44:	60b9      	str	r1, [r7, #8]
 8000d46:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d48:	2300      	movs	r3, #0
 8000d4a:	617b      	str	r3, [r7, #20]
 8000d4c:	e00a      	b.n	8000d64 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000d4e:	f3af 8000 	nop.w
 8000d52:	4601      	mov	r1, r0
 8000d54:	68bb      	ldr	r3, [r7, #8]
 8000d56:	1c5a      	adds	r2, r3, #1
 8000d58:	60ba      	str	r2, [r7, #8]
 8000d5a:	b2ca      	uxtb	r2, r1
 8000d5c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	3301      	adds	r3, #1
 8000d62:	617b      	str	r3, [r7, #20]
 8000d64:	697a      	ldr	r2, [r7, #20]
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	429a      	cmp	r2, r3
 8000d6a:	dbf0      	blt.n	8000d4e <_read+0x12>
	}

return len;
 8000d6c:	687b      	ldr	r3, [r7, #4]
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	3718      	adds	r7, #24
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}

08000d76 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000d76:	b480      	push	{r7}
 8000d78:	b083      	sub	sp, #12
 8000d7a:	af00      	add	r7, sp, #0
 8000d7c:	6078      	str	r0, [r7, #4]
	return -1;
 8000d7e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	370c      	adds	r7, #12
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr

08000d8e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d8e:	b480      	push	{r7}
 8000d90:	b083      	sub	sp, #12
 8000d92:	af00      	add	r7, sp, #0
 8000d94:	6078      	str	r0, [r7, #4]
 8000d96:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d9e:	605a      	str	r2, [r3, #4]
	return 0;
 8000da0:	2300      	movs	r3, #0
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	370c      	adds	r7, #12
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr

08000dae <_isatty>:

int _isatty(int file)
{
 8000dae:	b480      	push	{r7}
 8000db0:	b083      	sub	sp, #12
 8000db2:	af00      	add	r7, sp, #0
 8000db4:	6078      	str	r0, [r7, #4]
	return 1;
 8000db6:	2301      	movs	r3, #1
}
 8000db8:	4618      	mov	r0, r3
 8000dba:	370c      	adds	r7, #12
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr

08000dc4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b085      	sub	sp, #20
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	60f8      	str	r0, [r7, #12]
 8000dcc:	60b9      	str	r1, [r7, #8]
 8000dce:	607a      	str	r2, [r7, #4]
	return 0;
 8000dd0:	2300      	movs	r3, #0
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	3714      	adds	r7, #20
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
	...

08000de0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b086      	sub	sp, #24
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000de8:	4a14      	ldr	r2, [pc, #80]	; (8000e3c <_sbrk+0x5c>)
 8000dea:	4b15      	ldr	r3, [pc, #84]	; (8000e40 <_sbrk+0x60>)
 8000dec:	1ad3      	subs	r3, r2, r3
 8000dee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000df4:	4b13      	ldr	r3, [pc, #76]	; (8000e44 <_sbrk+0x64>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d102      	bne.n	8000e02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dfc:	4b11      	ldr	r3, [pc, #68]	; (8000e44 <_sbrk+0x64>)
 8000dfe:	4a12      	ldr	r2, [pc, #72]	; (8000e48 <_sbrk+0x68>)
 8000e00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e02:	4b10      	ldr	r3, [pc, #64]	; (8000e44 <_sbrk+0x64>)
 8000e04:	681a      	ldr	r2, [r3, #0]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4413      	add	r3, r2
 8000e0a:	693a      	ldr	r2, [r7, #16]
 8000e0c:	429a      	cmp	r2, r3
 8000e0e:	d207      	bcs.n	8000e20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e10:	f004 fa0a 	bl	8005228 <__errno>
 8000e14:	4603      	mov	r3, r0
 8000e16:	220c      	movs	r2, #12
 8000e18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e1e:	e009      	b.n	8000e34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e20:	4b08      	ldr	r3, [pc, #32]	; (8000e44 <_sbrk+0x64>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e26:	4b07      	ldr	r3, [pc, #28]	; (8000e44 <_sbrk+0x64>)
 8000e28:	681a      	ldr	r2, [r3, #0]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	4413      	add	r3, r2
 8000e2e:	4a05      	ldr	r2, [pc, #20]	; (8000e44 <_sbrk+0x64>)
 8000e30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e32:	68fb      	ldr	r3, [r7, #12]
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	3718      	adds	r7, #24
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	20030000 	.word	0x20030000
 8000e40:	00000400 	.word	0x00000400
 8000e44:	20000134 	.word	0x20000134
 8000e48:	20000190 	.word	0x20000190

08000e4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e50:	4b06      	ldr	r3, [pc, #24]	; (8000e6c <SystemInit+0x20>)
 8000e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e56:	4a05      	ldr	r2, [pc, #20]	; (8000e6c <SystemInit+0x20>)
 8000e58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e60:	bf00      	nop
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	e000ed00 	.word	0xe000ed00

08000e70 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000e74:	4b11      	ldr	r3, [pc, #68]	; (8000ebc <MX_USART3_UART_Init+0x4c>)
 8000e76:	4a12      	ldr	r2, [pc, #72]	; (8000ec0 <MX_USART3_UART_Init+0x50>)
 8000e78:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000e7a:	4b10      	ldr	r3, [pc, #64]	; (8000ebc <MX_USART3_UART_Init+0x4c>)
 8000e7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e80:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000e82:	4b0e      	ldr	r3, [pc, #56]	; (8000ebc <MX_USART3_UART_Init+0x4c>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000e88:	4b0c      	ldr	r3, [pc, #48]	; (8000ebc <MX_USART3_UART_Init+0x4c>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000e8e:	4b0b      	ldr	r3, [pc, #44]	; (8000ebc <MX_USART3_UART_Init+0x4c>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000e94:	4b09      	ldr	r3, [pc, #36]	; (8000ebc <MX_USART3_UART_Init+0x4c>)
 8000e96:	220c      	movs	r2, #12
 8000e98:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e9a:	4b08      	ldr	r3, [pc, #32]	; (8000ebc <MX_USART3_UART_Init+0x4c>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ea0:	4b06      	ldr	r3, [pc, #24]	; (8000ebc <MX_USART3_UART_Init+0x4c>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ea6:	4805      	ldr	r0, [pc, #20]	; (8000ebc <MX_USART3_UART_Init+0x4c>)
 8000ea8:	f003 f9aa 	bl	8004200 <HAL_UART_Init>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000eb2:	f7ff feb9 	bl	8000c28 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000eb6:	bf00      	nop
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	20000138 	.word	0x20000138
 8000ec0:	40004800 	.word	0x40004800

08000ec4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b08a      	sub	sp, #40	; 0x28
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ecc:	f107 0314 	add.w	r3, r7, #20
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	601a      	str	r2, [r3, #0]
 8000ed4:	605a      	str	r2, [r3, #4]
 8000ed6:	609a      	str	r2, [r3, #8]
 8000ed8:	60da      	str	r2, [r3, #12]
 8000eda:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a1d      	ldr	r2, [pc, #116]	; (8000f58 <HAL_UART_MspInit+0x94>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d134      	bne.n	8000f50 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	613b      	str	r3, [r7, #16]
 8000eea:	4b1c      	ldr	r3, [pc, #112]	; (8000f5c <HAL_UART_MspInit+0x98>)
 8000eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eee:	4a1b      	ldr	r2, [pc, #108]	; (8000f5c <HAL_UART_MspInit+0x98>)
 8000ef0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ef4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ef6:	4b19      	ldr	r3, [pc, #100]	; (8000f5c <HAL_UART_MspInit+0x98>)
 8000ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000efe:	613b      	str	r3, [r7, #16]
 8000f00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f02:	2300      	movs	r3, #0
 8000f04:	60fb      	str	r3, [r7, #12]
 8000f06:	4b15      	ldr	r3, [pc, #84]	; (8000f5c <HAL_UART_MspInit+0x98>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0a:	4a14      	ldr	r2, [pc, #80]	; (8000f5c <HAL_UART_MspInit+0x98>)
 8000f0c:	f043 0302 	orr.w	r3, r3, #2
 8000f10:	6313      	str	r3, [r2, #48]	; 0x30
 8000f12:	4b12      	ldr	r3, [pc, #72]	; (8000f5c <HAL_UART_MspInit+0x98>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f16:	f003 0302 	and.w	r3, r3, #2
 8000f1a:	60fb      	str	r3, [r7, #12]
 8000f1c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000f1e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000f22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f24:	2302      	movs	r3, #2
 8000f26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f2c:	2303      	movs	r3, #3
 8000f2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f30:	2307      	movs	r3, #7
 8000f32:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f34:	f107 0314 	add.w	r3, r7, #20
 8000f38:	4619      	mov	r1, r3
 8000f3a:	4809      	ldr	r0, [pc, #36]	; (8000f60 <HAL_UART_MspInit+0x9c>)
 8000f3c:	f000 fa84 	bl	8001448 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000f40:	2200      	movs	r2, #0
 8000f42:	2100      	movs	r1, #0
 8000f44:	2027      	movs	r0, #39	; 0x27
 8000f46:	f000 f9a8 	bl	800129a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000f4a:	2027      	movs	r0, #39	; 0x27
 8000f4c:	f000 f9c1 	bl	80012d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000f50:	bf00      	nop
 8000f52:	3728      	adds	r7, #40	; 0x28
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	40004800 	.word	0x40004800
 8000f5c:	40023800 	.word	0x40023800
 8000f60:	40020400 	.word	0x40020400

08000f64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000f64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f9c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f68:	480d      	ldr	r0, [pc, #52]	; (8000fa0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f6a:	490e      	ldr	r1, [pc, #56]	; (8000fa4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f6c:	4a0e      	ldr	r2, [pc, #56]	; (8000fa8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f70:	e002      	b.n	8000f78 <LoopCopyDataInit>

08000f72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f76:	3304      	adds	r3, #4

08000f78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f7c:	d3f9      	bcc.n	8000f72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f7e:	4a0b      	ldr	r2, [pc, #44]	; (8000fac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f80:	4c0b      	ldr	r4, [pc, #44]	; (8000fb0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f84:	e001      	b.n	8000f8a <LoopFillZerobss>

08000f86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f88:	3204      	adds	r2, #4

08000f8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f8c:	d3fb      	bcc.n	8000f86 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f8e:	f7ff ff5d 	bl	8000e4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f92:	f004 f94f 	bl	8005234 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f96:	f7ff fd45 	bl	8000a24 <main>
  bx  lr    
 8000f9a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000f9c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000fa0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fa4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000fa8:	080063e8 	.word	0x080063e8
  ldr r2, =_sbss
 8000fac:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000fb0:	20000190 	.word	0x20000190

08000fb4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fb4:	e7fe      	b.n	8000fb4 <ADC_IRQHandler>
	...

08000fb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fbc:	4b0e      	ldr	r3, [pc, #56]	; (8000ff8 <HAL_Init+0x40>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a0d      	ldr	r2, [pc, #52]	; (8000ff8 <HAL_Init+0x40>)
 8000fc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fc6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fc8:	4b0b      	ldr	r3, [pc, #44]	; (8000ff8 <HAL_Init+0x40>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a0a      	ldr	r2, [pc, #40]	; (8000ff8 <HAL_Init+0x40>)
 8000fce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fd2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fd4:	4b08      	ldr	r3, [pc, #32]	; (8000ff8 <HAL_Init+0x40>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a07      	ldr	r2, [pc, #28]	; (8000ff8 <HAL_Init+0x40>)
 8000fda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fde:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fe0:	2003      	movs	r0, #3
 8000fe2:	f000 f94f 	bl	8001284 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fe6:	2000      	movs	r0, #0
 8000fe8:	f000 f808 	bl	8000ffc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fec:	f7ff fe22 	bl	8000c34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ff0:	2300      	movs	r3, #0
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	40023c00 	.word	0x40023c00

08000ffc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001004:	4b12      	ldr	r3, [pc, #72]	; (8001050 <HAL_InitTick+0x54>)
 8001006:	681a      	ldr	r2, [r3, #0]
 8001008:	4b12      	ldr	r3, [pc, #72]	; (8001054 <HAL_InitTick+0x58>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	4619      	mov	r1, r3
 800100e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001012:	fbb3 f3f1 	udiv	r3, r3, r1
 8001016:	fbb2 f3f3 	udiv	r3, r2, r3
 800101a:	4618      	mov	r0, r3
 800101c:	f000 f967 	bl	80012ee <HAL_SYSTICK_Config>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001026:	2301      	movs	r3, #1
 8001028:	e00e      	b.n	8001048 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2b0f      	cmp	r3, #15
 800102e:	d80a      	bhi.n	8001046 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001030:	2200      	movs	r2, #0
 8001032:	6879      	ldr	r1, [r7, #4]
 8001034:	f04f 30ff 	mov.w	r0, #4294967295
 8001038:	f000 f92f 	bl	800129a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800103c:	4a06      	ldr	r2, [pc, #24]	; (8001058 <HAL_InitTick+0x5c>)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001042:	2300      	movs	r3, #0
 8001044:	e000      	b.n	8001048 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001046:	2301      	movs	r3, #1
}
 8001048:	4618      	mov	r0, r3
 800104a:	3708      	adds	r7, #8
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	20000000 	.word	0x20000000
 8001054:	20000008 	.word	0x20000008
 8001058:	20000004 	.word	0x20000004

0800105c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001060:	4b06      	ldr	r3, [pc, #24]	; (800107c <HAL_IncTick+0x20>)
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	461a      	mov	r2, r3
 8001066:	4b06      	ldr	r3, [pc, #24]	; (8001080 <HAL_IncTick+0x24>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4413      	add	r3, r2
 800106c:	4a04      	ldr	r2, [pc, #16]	; (8001080 <HAL_IncTick+0x24>)
 800106e:	6013      	str	r3, [r2, #0]
}
 8001070:	bf00      	nop
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	20000008 	.word	0x20000008
 8001080:	2000017c 	.word	0x2000017c

08001084 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  return uwTick;
 8001088:	4b03      	ldr	r3, [pc, #12]	; (8001098 <HAL_GetTick+0x14>)
 800108a:	681b      	ldr	r3, [r3, #0]
}
 800108c:	4618      	mov	r0, r3
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	2000017c 	.word	0x2000017c

0800109c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b084      	sub	sp, #16
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010a4:	f7ff ffee 	bl	8001084 <HAL_GetTick>
 80010a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010b4:	d005      	beq.n	80010c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010b6:	4b0a      	ldr	r3, [pc, #40]	; (80010e0 <HAL_Delay+0x44>)
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	461a      	mov	r2, r3
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	4413      	add	r3, r2
 80010c0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010c2:	bf00      	nop
 80010c4:	f7ff ffde 	bl	8001084 <HAL_GetTick>
 80010c8:	4602      	mov	r2, r0
 80010ca:	68bb      	ldr	r3, [r7, #8]
 80010cc:	1ad3      	subs	r3, r2, r3
 80010ce:	68fa      	ldr	r2, [r7, #12]
 80010d0:	429a      	cmp	r2, r3
 80010d2:	d8f7      	bhi.n	80010c4 <HAL_Delay+0x28>
  {
  }
}
 80010d4:	bf00      	nop
 80010d6:	bf00      	nop
 80010d8:	3710      	adds	r7, #16
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	20000008 	.word	0x20000008

080010e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b085      	sub	sp, #20
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	f003 0307 	and.w	r3, r3, #7
 80010f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010f4:	4b0c      	ldr	r3, [pc, #48]	; (8001128 <__NVIC_SetPriorityGrouping+0x44>)
 80010f6:	68db      	ldr	r3, [r3, #12]
 80010f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010fa:	68ba      	ldr	r2, [r7, #8]
 80010fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001100:	4013      	ands	r3, r2
 8001102:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800110c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001110:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001114:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001116:	4a04      	ldr	r2, [pc, #16]	; (8001128 <__NVIC_SetPriorityGrouping+0x44>)
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	60d3      	str	r3, [r2, #12]
}
 800111c:	bf00      	nop
 800111e:	3714      	adds	r7, #20
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr
 8001128:	e000ed00 	.word	0xe000ed00

0800112c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001130:	4b04      	ldr	r3, [pc, #16]	; (8001144 <__NVIC_GetPriorityGrouping+0x18>)
 8001132:	68db      	ldr	r3, [r3, #12]
 8001134:	0a1b      	lsrs	r3, r3, #8
 8001136:	f003 0307 	and.w	r3, r3, #7
}
 800113a:	4618      	mov	r0, r3
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr
 8001144:	e000ed00 	.word	0xe000ed00

08001148 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
 800114e:	4603      	mov	r3, r0
 8001150:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001152:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001156:	2b00      	cmp	r3, #0
 8001158:	db0b      	blt.n	8001172 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800115a:	79fb      	ldrb	r3, [r7, #7]
 800115c:	f003 021f 	and.w	r2, r3, #31
 8001160:	4907      	ldr	r1, [pc, #28]	; (8001180 <__NVIC_EnableIRQ+0x38>)
 8001162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001166:	095b      	lsrs	r3, r3, #5
 8001168:	2001      	movs	r0, #1
 800116a:	fa00 f202 	lsl.w	r2, r0, r2
 800116e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001172:	bf00      	nop
 8001174:	370c      	adds	r7, #12
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	e000e100 	.word	0xe000e100

08001184 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001184:	b480      	push	{r7}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
 800118a:	4603      	mov	r3, r0
 800118c:	6039      	str	r1, [r7, #0]
 800118e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001190:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001194:	2b00      	cmp	r3, #0
 8001196:	db0a      	blt.n	80011ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	b2da      	uxtb	r2, r3
 800119c:	490c      	ldr	r1, [pc, #48]	; (80011d0 <__NVIC_SetPriority+0x4c>)
 800119e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a2:	0112      	lsls	r2, r2, #4
 80011a4:	b2d2      	uxtb	r2, r2
 80011a6:	440b      	add	r3, r1
 80011a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011ac:	e00a      	b.n	80011c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	b2da      	uxtb	r2, r3
 80011b2:	4908      	ldr	r1, [pc, #32]	; (80011d4 <__NVIC_SetPriority+0x50>)
 80011b4:	79fb      	ldrb	r3, [r7, #7]
 80011b6:	f003 030f 	and.w	r3, r3, #15
 80011ba:	3b04      	subs	r3, #4
 80011bc:	0112      	lsls	r2, r2, #4
 80011be:	b2d2      	uxtb	r2, r2
 80011c0:	440b      	add	r3, r1
 80011c2:	761a      	strb	r2, [r3, #24]
}
 80011c4:	bf00      	nop
 80011c6:	370c      	adds	r7, #12
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr
 80011d0:	e000e100 	.word	0xe000e100
 80011d4:	e000ed00 	.word	0xe000ed00

080011d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011d8:	b480      	push	{r7}
 80011da:	b089      	sub	sp, #36	; 0x24
 80011dc:	af00      	add	r7, sp, #0
 80011de:	60f8      	str	r0, [r7, #12]
 80011e0:	60b9      	str	r1, [r7, #8]
 80011e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	f003 0307 	and.w	r3, r3, #7
 80011ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011ec:	69fb      	ldr	r3, [r7, #28]
 80011ee:	f1c3 0307 	rsb	r3, r3, #7
 80011f2:	2b04      	cmp	r3, #4
 80011f4:	bf28      	it	cs
 80011f6:	2304      	movcs	r3, #4
 80011f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	3304      	adds	r3, #4
 80011fe:	2b06      	cmp	r3, #6
 8001200:	d902      	bls.n	8001208 <NVIC_EncodePriority+0x30>
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	3b03      	subs	r3, #3
 8001206:	e000      	b.n	800120a <NVIC_EncodePriority+0x32>
 8001208:	2300      	movs	r3, #0
 800120a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800120c:	f04f 32ff 	mov.w	r2, #4294967295
 8001210:	69bb      	ldr	r3, [r7, #24]
 8001212:	fa02 f303 	lsl.w	r3, r2, r3
 8001216:	43da      	mvns	r2, r3
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	401a      	ands	r2, r3
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001220:	f04f 31ff 	mov.w	r1, #4294967295
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	fa01 f303 	lsl.w	r3, r1, r3
 800122a:	43d9      	mvns	r1, r3
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001230:	4313      	orrs	r3, r2
         );
}
 8001232:	4618      	mov	r0, r3
 8001234:	3724      	adds	r7, #36	; 0x24
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
	...

08001240 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	3b01      	subs	r3, #1
 800124c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001250:	d301      	bcc.n	8001256 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001252:	2301      	movs	r3, #1
 8001254:	e00f      	b.n	8001276 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001256:	4a0a      	ldr	r2, [pc, #40]	; (8001280 <SysTick_Config+0x40>)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	3b01      	subs	r3, #1
 800125c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800125e:	210f      	movs	r1, #15
 8001260:	f04f 30ff 	mov.w	r0, #4294967295
 8001264:	f7ff ff8e 	bl	8001184 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001268:	4b05      	ldr	r3, [pc, #20]	; (8001280 <SysTick_Config+0x40>)
 800126a:	2200      	movs	r2, #0
 800126c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800126e:	4b04      	ldr	r3, [pc, #16]	; (8001280 <SysTick_Config+0x40>)
 8001270:	2207      	movs	r2, #7
 8001272:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001274:	2300      	movs	r3, #0
}
 8001276:	4618      	mov	r0, r3
 8001278:	3708      	adds	r7, #8
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	e000e010 	.word	0xe000e010

08001284 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800128c:	6878      	ldr	r0, [r7, #4]
 800128e:	f7ff ff29 	bl	80010e4 <__NVIC_SetPriorityGrouping>
}
 8001292:	bf00      	nop
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}

0800129a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800129a:	b580      	push	{r7, lr}
 800129c:	b086      	sub	sp, #24
 800129e:	af00      	add	r7, sp, #0
 80012a0:	4603      	mov	r3, r0
 80012a2:	60b9      	str	r1, [r7, #8]
 80012a4:	607a      	str	r2, [r7, #4]
 80012a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012a8:	2300      	movs	r3, #0
 80012aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012ac:	f7ff ff3e 	bl	800112c <__NVIC_GetPriorityGrouping>
 80012b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012b2:	687a      	ldr	r2, [r7, #4]
 80012b4:	68b9      	ldr	r1, [r7, #8]
 80012b6:	6978      	ldr	r0, [r7, #20]
 80012b8:	f7ff ff8e 	bl	80011d8 <NVIC_EncodePriority>
 80012bc:	4602      	mov	r2, r0
 80012be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012c2:	4611      	mov	r1, r2
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff ff5d 	bl	8001184 <__NVIC_SetPriority>
}
 80012ca:	bf00      	nop
 80012cc:	3718      	adds	r7, #24
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}

080012d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012d2:	b580      	push	{r7, lr}
 80012d4:	b082      	sub	sp, #8
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	4603      	mov	r3, r0
 80012da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7ff ff31 	bl	8001148 <__NVIC_EnableIRQ>
}
 80012e6:	bf00      	nop
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}

080012ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012ee:	b580      	push	{r7, lr}
 80012f0:	b082      	sub	sp, #8
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012f6:	6878      	ldr	r0, [r7, #4]
 80012f8:	f7ff ffa2 	bl	8001240 <SysTick_Config>
 80012fc:	4603      	mov	r3, r0
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3708      	adds	r7, #8
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}

08001306 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001306:	b580      	push	{r7, lr}
 8001308:	b084      	sub	sp, #16
 800130a:	af00      	add	r7, sp, #0
 800130c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001312:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001314:	f7ff feb6 	bl	8001084 <HAL_GetTick>
 8001318:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001320:	b2db      	uxtb	r3, r3
 8001322:	2b02      	cmp	r3, #2
 8001324:	d008      	beq.n	8001338 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2280      	movs	r2, #128	; 0x80
 800132a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2200      	movs	r2, #0
 8001330:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001334:	2301      	movs	r3, #1
 8001336:	e052      	b.n	80013de <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	681a      	ldr	r2, [r3, #0]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f022 0216 	bic.w	r2, r2, #22
 8001346:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	695a      	ldr	r2, [r3, #20]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001356:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135c:	2b00      	cmp	r3, #0
 800135e:	d103      	bne.n	8001368 <HAL_DMA_Abort+0x62>
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001364:	2b00      	cmp	r3, #0
 8001366:	d007      	beq.n	8001378 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f022 0208 	bic.w	r2, r2, #8
 8001376:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f022 0201 	bic.w	r2, r2, #1
 8001386:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001388:	e013      	b.n	80013b2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800138a:	f7ff fe7b 	bl	8001084 <HAL_GetTick>
 800138e:	4602      	mov	r2, r0
 8001390:	68bb      	ldr	r3, [r7, #8]
 8001392:	1ad3      	subs	r3, r2, r3
 8001394:	2b05      	cmp	r3, #5
 8001396:	d90c      	bls.n	80013b2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2220      	movs	r2, #32
 800139c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2203      	movs	r2, #3
 80013a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2200      	movs	r2, #0
 80013aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80013ae:	2303      	movs	r3, #3
 80013b0:	e015      	b.n	80013de <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f003 0301 	and.w	r3, r3, #1
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d1e4      	bne.n	800138a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013c4:	223f      	movs	r2, #63	; 0x3f
 80013c6:	409a      	lsls	r2, r3
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2201      	movs	r2, #1
 80013d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2200      	movs	r2, #0
 80013d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80013dc:	2300      	movs	r3, #0
}
 80013de:	4618      	mov	r0, r3
 80013e0:	3710      	adds	r7, #16
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}

080013e6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80013e6:	b480      	push	{r7}
 80013e8:	b083      	sub	sp, #12
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	2b02      	cmp	r3, #2
 80013f8:	d004      	beq.n	8001404 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2280      	movs	r2, #128	; 0x80
 80013fe:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001400:	2301      	movs	r3, #1
 8001402:	e00c      	b.n	800141e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2205      	movs	r2, #5
 8001408:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f022 0201 	bic.w	r2, r2, #1
 800141a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800141c:	2300      	movs	r3, #0
}
 800141e:	4618      	mov	r0, r3
 8001420:	370c      	adds	r7, #12
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr

0800142a <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800142a:	b480      	push	{r7}
 800142c:	b083      	sub	sp, #12
 800142e:	af00      	add	r7, sp, #0
 8001430:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001438:	b2db      	uxtb	r3, r3
}
 800143a:	4618      	mov	r0, r3
 800143c:	370c      	adds	r7, #12
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
	...

08001448 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001448:	b480      	push	{r7}
 800144a:	b089      	sub	sp, #36	; 0x24
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
 8001450:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001452:	2300      	movs	r3, #0
 8001454:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001456:	2300      	movs	r3, #0
 8001458:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800145a:	2300      	movs	r3, #0
 800145c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800145e:	2300      	movs	r3, #0
 8001460:	61fb      	str	r3, [r7, #28]
 8001462:	e177      	b.n	8001754 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001464:	2201      	movs	r2, #1
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	fa02 f303 	lsl.w	r3, r2, r3
 800146c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	697a      	ldr	r2, [r7, #20]
 8001474:	4013      	ands	r3, r2
 8001476:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001478:	693a      	ldr	r2, [r7, #16]
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	429a      	cmp	r2, r3
 800147e:	f040 8166 	bne.w	800174e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	f003 0303 	and.w	r3, r3, #3
 800148a:	2b01      	cmp	r3, #1
 800148c:	d005      	beq.n	800149a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001496:	2b02      	cmp	r3, #2
 8001498:	d130      	bne.n	80014fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	689b      	ldr	r3, [r3, #8]
 800149e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80014a0:	69fb      	ldr	r3, [r7, #28]
 80014a2:	005b      	lsls	r3, r3, #1
 80014a4:	2203      	movs	r2, #3
 80014a6:	fa02 f303 	lsl.w	r3, r2, r3
 80014aa:	43db      	mvns	r3, r3
 80014ac:	69ba      	ldr	r2, [r7, #24]
 80014ae:	4013      	ands	r3, r2
 80014b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	68da      	ldr	r2, [r3, #12]
 80014b6:	69fb      	ldr	r3, [r7, #28]
 80014b8:	005b      	lsls	r3, r3, #1
 80014ba:	fa02 f303 	lsl.w	r3, r2, r3
 80014be:	69ba      	ldr	r2, [r7, #24]
 80014c0:	4313      	orrs	r3, r2
 80014c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	69ba      	ldr	r2, [r7, #24]
 80014c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014d0:	2201      	movs	r2, #1
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	fa02 f303 	lsl.w	r3, r2, r3
 80014d8:	43db      	mvns	r3, r3
 80014da:	69ba      	ldr	r2, [r7, #24]
 80014dc:	4013      	ands	r3, r2
 80014de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	091b      	lsrs	r3, r3, #4
 80014e6:	f003 0201 	and.w	r2, r3, #1
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	fa02 f303 	lsl.w	r3, r2, r3
 80014f0:	69ba      	ldr	r2, [r7, #24]
 80014f2:	4313      	orrs	r3, r2
 80014f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	69ba      	ldr	r2, [r7, #24]
 80014fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f003 0303 	and.w	r3, r3, #3
 8001504:	2b03      	cmp	r3, #3
 8001506:	d017      	beq.n	8001538 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	68db      	ldr	r3, [r3, #12]
 800150c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	005b      	lsls	r3, r3, #1
 8001512:	2203      	movs	r2, #3
 8001514:	fa02 f303 	lsl.w	r3, r2, r3
 8001518:	43db      	mvns	r3, r3
 800151a:	69ba      	ldr	r2, [r7, #24]
 800151c:	4013      	ands	r3, r2
 800151e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	689a      	ldr	r2, [r3, #8]
 8001524:	69fb      	ldr	r3, [r7, #28]
 8001526:	005b      	lsls	r3, r3, #1
 8001528:	fa02 f303 	lsl.w	r3, r2, r3
 800152c:	69ba      	ldr	r2, [r7, #24]
 800152e:	4313      	orrs	r3, r2
 8001530:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	69ba      	ldr	r2, [r7, #24]
 8001536:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	f003 0303 	and.w	r3, r3, #3
 8001540:	2b02      	cmp	r3, #2
 8001542:	d123      	bne.n	800158c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001544:	69fb      	ldr	r3, [r7, #28]
 8001546:	08da      	lsrs	r2, r3, #3
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	3208      	adds	r2, #8
 800154c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001550:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	f003 0307 	and.w	r3, r3, #7
 8001558:	009b      	lsls	r3, r3, #2
 800155a:	220f      	movs	r2, #15
 800155c:	fa02 f303 	lsl.w	r3, r2, r3
 8001560:	43db      	mvns	r3, r3
 8001562:	69ba      	ldr	r2, [r7, #24]
 8001564:	4013      	ands	r3, r2
 8001566:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	691a      	ldr	r2, [r3, #16]
 800156c:	69fb      	ldr	r3, [r7, #28]
 800156e:	f003 0307 	and.w	r3, r3, #7
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	fa02 f303 	lsl.w	r3, r2, r3
 8001578:	69ba      	ldr	r2, [r7, #24]
 800157a:	4313      	orrs	r3, r2
 800157c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	08da      	lsrs	r2, r3, #3
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	3208      	adds	r2, #8
 8001586:	69b9      	ldr	r1, [r7, #24]
 8001588:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001592:	69fb      	ldr	r3, [r7, #28]
 8001594:	005b      	lsls	r3, r3, #1
 8001596:	2203      	movs	r2, #3
 8001598:	fa02 f303 	lsl.w	r3, r2, r3
 800159c:	43db      	mvns	r3, r3
 800159e:	69ba      	ldr	r2, [r7, #24]
 80015a0:	4013      	ands	r3, r2
 80015a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f003 0203 	and.w	r2, r3, #3
 80015ac:	69fb      	ldr	r3, [r7, #28]
 80015ae:	005b      	lsls	r3, r3, #1
 80015b0:	fa02 f303 	lsl.w	r3, r2, r3
 80015b4:	69ba      	ldr	r2, [r7, #24]
 80015b6:	4313      	orrs	r3, r2
 80015b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	69ba      	ldr	r2, [r7, #24]
 80015be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	f000 80c0 	beq.w	800174e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ce:	2300      	movs	r3, #0
 80015d0:	60fb      	str	r3, [r7, #12]
 80015d2:	4b66      	ldr	r3, [pc, #408]	; (800176c <HAL_GPIO_Init+0x324>)
 80015d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015d6:	4a65      	ldr	r2, [pc, #404]	; (800176c <HAL_GPIO_Init+0x324>)
 80015d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015dc:	6453      	str	r3, [r2, #68]	; 0x44
 80015de:	4b63      	ldr	r3, [pc, #396]	; (800176c <HAL_GPIO_Init+0x324>)
 80015e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015e6:	60fb      	str	r3, [r7, #12]
 80015e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015ea:	4a61      	ldr	r2, [pc, #388]	; (8001770 <HAL_GPIO_Init+0x328>)
 80015ec:	69fb      	ldr	r3, [r7, #28]
 80015ee:	089b      	lsrs	r3, r3, #2
 80015f0:	3302      	adds	r3, #2
 80015f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015f8:	69fb      	ldr	r3, [r7, #28]
 80015fa:	f003 0303 	and.w	r3, r3, #3
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	220f      	movs	r2, #15
 8001602:	fa02 f303 	lsl.w	r3, r2, r3
 8001606:	43db      	mvns	r3, r3
 8001608:	69ba      	ldr	r2, [r7, #24]
 800160a:	4013      	ands	r3, r2
 800160c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	4a58      	ldr	r2, [pc, #352]	; (8001774 <HAL_GPIO_Init+0x32c>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d037      	beq.n	8001686 <HAL_GPIO_Init+0x23e>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	4a57      	ldr	r2, [pc, #348]	; (8001778 <HAL_GPIO_Init+0x330>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d031      	beq.n	8001682 <HAL_GPIO_Init+0x23a>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	4a56      	ldr	r2, [pc, #344]	; (800177c <HAL_GPIO_Init+0x334>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d02b      	beq.n	800167e <HAL_GPIO_Init+0x236>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	4a55      	ldr	r2, [pc, #340]	; (8001780 <HAL_GPIO_Init+0x338>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d025      	beq.n	800167a <HAL_GPIO_Init+0x232>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	4a54      	ldr	r2, [pc, #336]	; (8001784 <HAL_GPIO_Init+0x33c>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d01f      	beq.n	8001676 <HAL_GPIO_Init+0x22e>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	4a53      	ldr	r2, [pc, #332]	; (8001788 <HAL_GPIO_Init+0x340>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d019      	beq.n	8001672 <HAL_GPIO_Init+0x22a>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	4a52      	ldr	r2, [pc, #328]	; (800178c <HAL_GPIO_Init+0x344>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d013      	beq.n	800166e <HAL_GPIO_Init+0x226>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	4a51      	ldr	r2, [pc, #324]	; (8001790 <HAL_GPIO_Init+0x348>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d00d      	beq.n	800166a <HAL_GPIO_Init+0x222>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	4a50      	ldr	r2, [pc, #320]	; (8001794 <HAL_GPIO_Init+0x34c>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d007      	beq.n	8001666 <HAL_GPIO_Init+0x21e>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	4a4f      	ldr	r2, [pc, #316]	; (8001798 <HAL_GPIO_Init+0x350>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d101      	bne.n	8001662 <HAL_GPIO_Init+0x21a>
 800165e:	2309      	movs	r3, #9
 8001660:	e012      	b.n	8001688 <HAL_GPIO_Init+0x240>
 8001662:	230a      	movs	r3, #10
 8001664:	e010      	b.n	8001688 <HAL_GPIO_Init+0x240>
 8001666:	2308      	movs	r3, #8
 8001668:	e00e      	b.n	8001688 <HAL_GPIO_Init+0x240>
 800166a:	2307      	movs	r3, #7
 800166c:	e00c      	b.n	8001688 <HAL_GPIO_Init+0x240>
 800166e:	2306      	movs	r3, #6
 8001670:	e00a      	b.n	8001688 <HAL_GPIO_Init+0x240>
 8001672:	2305      	movs	r3, #5
 8001674:	e008      	b.n	8001688 <HAL_GPIO_Init+0x240>
 8001676:	2304      	movs	r3, #4
 8001678:	e006      	b.n	8001688 <HAL_GPIO_Init+0x240>
 800167a:	2303      	movs	r3, #3
 800167c:	e004      	b.n	8001688 <HAL_GPIO_Init+0x240>
 800167e:	2302      	movs	r3, #2
 8001680:	e002      	b.n	8001688 <HAL_GPIO_Init+0x240>
 8001682:	2301      	movs	r3, #1
 8001684:	e000      	b.n	8001688 <HAL_GPIO_Init+0x240>
 8001686:	2300      	movs	r3, #0
 8001688:	69fa      	ldr	r2, [r7, #28]
 800168a:	f002 0203 	and.w	r2, r2, #3
 800168e:	0092      	lsls	r2, r2, #2
 8001690:	4093      	lsls	r3, r2
 8001692:	69ba      	ldr	r2, [r7, #24]
 8001694:	4313      	orrs	r3, r2
 8001696:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001698:	4935      	ldr	r1, [pc, #212]	; (8001770 <HAL_GPIO_Init+0x328>)
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	089b      	lsrs	r3, r3, #2
 800169e:	3302      	adds	r3, #2
 80016a0:	69ba      	ldr	r2, [r7, #24]
 80016a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016a6:	4b3d      	ldr	r3, [pc, #244]	; (800179c <HAL_GPIO_Init+0x354>)
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	43db      	mvns	r3, r3
 80016b0:	69ba      	ldr	r2, [r7, #24]
 80016b2:	4013      	ands	r3, r2
 80016b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d003      	beq.n	80016ca <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80016c2:	69ba      	ldr	r2, [r7, #24]
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	4313      	orrs	r3, r2
 80016c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016ca:	4a34      	ldr	r2, [pc, #208]	; (800179c <HAL_GPIO_Init+0x354>)
 80016cc:	69bb      	ldr	r3, [r7, #24]
 80016ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016d0:	4b32      	ldr	r3, [pc, #200]	; (800179c <HAL_GPIO_Init+0x354>)
 80016d2:	68db      	ldr	r3, [r3, #12]
 80016d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	43db      	mvns	r3, r3
 80016da:	69ba      	ldr	r2, [r7, #24]
 80016dc:	4013      	ands	r3, r2
 80016de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d003      	beq.n	80016f4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80016ec:	69ba      	ldr	r2, [r7, #24]
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	4313      	orrs	r3, r2
 80016f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80016f4:	4a29      	ldr	r2, [pc, #164]	; (800179c <HAL_GPIO_Init+0x354>)
 80016f6:	69bb      	ldr	r3, [r7, #24]
 80016f8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80016fa:	4b28      	ldr	r3, [pc, #160]	; (800179c <HAL_GPIO_Init+0x354>)
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	43db      	mvns	r3, r3
 8001704:	69ba      	ldr	r2, [r7, #24]
 8001706:	4013      	ands	r3, r2
 8001708:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001712:	2b00      	cmp	r3, #0
 8001714:	d003      	beq.n	800171e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001716:	69ba      	ldr	r2, [r7, #24]
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	4313      	orrs	r3, r2
 800171c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800171e:	4a1f      	ldr	r2, [pc, #124]	; (800179c <HAL_GPIO_Init+0x354>)
 8001720:	69bb      	ldr	r3, [r7, #24]
 8001722:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001724:	4b1d      	ldr	r3, [pc, #116]	; (800179c <HAL_GPIO_Init+0x354>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	43db      	mvns	r3, r3
 800172e:	69ba      	ldr	r2, [r7, #24]
 8001730:	4013      	ands	r3, r2
 8001732:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800173c:	2b00      	cmp	r3, #0
 800173e:	d003      	beq.n	8001748 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001740:	69ba      	ldr	r2, [r7, #24]
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	4313      	orrs	r3, r2
 8001746:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001748:	4a14      	ldr	r2, [pc, #80]	; (800179c <HAL_GPIO_Init+0x354>)
 800174a:	69bb      	ldr	r3, [r7, #24]
 800174c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800174e:	69fb      	ldr	r3, [r7, #28]
 8001750:	3301      	adds	r3, #1
 8001752:	61fb      	str	r3, [r7, #28]
 8001754:	69fb      	ldr	r3, [r7, #28]
 8001756:	2b0f      	cmp	r3, #15
 8001758:	f67f ae84 	bls.w	8001464 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800175c:	bf00      	nop
 800175e:	bf00      	nop
 8001760:	3724      	adds	r7, #36	; 0x24
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	40023800 	.word	0x40023800
 8001770:	40013800 	.word	0x40013800
 8001774:	40020000 	.word	0x40020000
 8001778:	40020400 	.word	0x40020400
 800177c:	40020800 	.word	0x40020800
 8001780:	40020c00 	.word	0x40020c00
 8001784:	40021000 	.word	0x40021000
 8001788:	40021400 	.word	0x40021400
 800178c:	40021800 	.word	0x40021800
 8001790:	40021c00 	.word	0x40021c00
 8001794:	40022000 	.word	0x40022000
 8001798:	40022400 	.word	0x40022400
 800179c:	40013c00 	.word	0x40013c00

080017a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	460b      	mov	r3, r1
 80017aa:	807b      	strh	r3, [r7, #2]
 80017ac:	4613      	mov	r3, r2
 80017ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017b0:	787b      	ldrb	r3, [r7, #1]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d003      	beq.n	80017be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017b6:	887a      	ldrh	r2, [r7, #2]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80017bc:	e003      	b.n	80017c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80017be:	887b      	ldrh	r3, [r7, #2]
 80017c0:	041a      	lsls	r2, r3, #16
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	619a      	str	r2, [r3, #24]
}
 80017c6:	bf00      	nop
 80017c8:	370c      	adds	r7, #12
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
	...

080017d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b084      	sub	sp, #16
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d101      	bne.n	80017e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	e12b      	b.n	8001a3e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d106      	bne.n	8001800 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2200      	movs	r2, #0
 80017f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80017fa:	6878      	ldr	r0, [r7, #4]
 80017fc:	f7ff f85a 	bl	80008b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2224      	movs	r2, #36	; 0x24
 8001804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f022 0201 	bic.w	r2, r2, #1
 8001816:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001826:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001836:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001838:	f002 fcba 	bl	80041b0 <HAL_RCC_GetPCLK1Freq>
 800183c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	4a81      	ldr	r2, [pc, #516]	; (8001a48 <HAL_I2C_Init+0x274>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d807      	bhi.n	8001858 <HAL_I2C_Init+0x84>
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	4a80      	ldr	r2, [pc, #512]	; (8001a4c <HAL_I2C_Init+0x278>)
 800184c:	4293      	cmp	r3, r2
 800184e:	bf94      	ite	ls
 8001850:	2301      	movls	r3, #1
 8001852:	2300      	movhi	r3, #0
 8001854:	b2db      	uxtb	r3, r3
 8001856:	e006      	b.n	8001866 <HAL_I2C_Init+0x92>
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	4a7d      	ldr	r2, [pc, #500]	; (8001a50 <HAL_I2C_Init+0x27c>)
 800185c:	4293      	cmp	r3, r2
 800185e:	bf94      	ite	ls
 8001860:	2301      	movls	r3, #1
 8001862:	2300      	movhi	r3, #0
 8001864:	b2db      	uxtb	r3, r3
 8001866:	2b00      	cmp	r3, #0
 8001868:	d001      	beq.n	800186e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	e0e7      	b.n	8001a3e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	4a78      	ldr	r2, [pc, #480]	; (8001a54 <HAL_I2C_Init+0x280>)
 8001872:	fba2 2303 	umull	r2, r3, r2, r3
 8001876:	0c9b      	lsrs	r3, r3, #18
 8001878:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	68ba      	ldr	r2, [r7, #8]
 800188a:	430a      	orrs	r2, r1
 800188c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	6a1b      	ldr	r3, [r3, #32]
 8001894:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	4a6a      	ldr	r2, [pc, #424]	; (8001a48 <HAL_I2C_Init+0x274>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d802      	bhi.n	80018a8 <HAL_I2C_Init+0xd4>
 80018a2:	68bb      	ldr	r3, [r7, #8]
 80018a4:	3301      	adds	r3, #1
 80018a6:	e009      	b.n	80018bc <HAL_I2C_Init+0xe8>
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80018ae:	fb02 f303 	mul.w	r3, r2, r3
 80018b2:	4a69      	ldr	r2, [pc, #420]	; (8001a58 <HAL_I2C_Init+0x284>)
 80018b4:	fba2 2303 	umull	r2, r3, r2, r3
 80018b8:	099b      	lsrs	r3, r3, #6
 80018ba:	3301      	adds	r3, #1
 80018bc:	687a      	ldr	r2, [r7, #4]
 80018be:	6812      	ldr	r2, [r2, #0]
 80018c0:	430b      	orrs	r3, r1
 80018c2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	69db      	ldr	r3, [r3, #28]
 80018ca:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80018ce:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	495c      	ldr	r1, [pc, #368]	; (8001a48 <HAL_I2C_Init+0x274>)
 80018d8:	428b      	cmp	r3, r1
 80018da:	d819      	bhi.n	8001910 <HAL_I2C_Init+0x13c>
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	1e59      	subs	r1, r3, #1
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	005b      	lsls	r3, r3, #1
 80018e6:	fbb1 f3f3 	udiv	r3, r1, r3
 80018ea:	1c59      	adds	r1, r3, #1
 80018ec:	f640 73fc 	movw	r3, #4092	; 0xffc
 80018f0:	400b      	ands	r3, r1
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d00a      	beq.n	800190c <HAL_I2C_Init+0x138>
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	1e59      	subs	r1, r3, #1
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	005b      	lsls	r3, r3, #1
 8001900:	fbb1 f3f3 	udiv	r3, r1, r3
 8001904:	3301      	adds	r3, #1
 8001906:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800190a:	e051      	b.n	80019b0 <HAL_I2C_Init+0x1dc>
 800190c:	2304      	movs	r3, #4
 800190e:	e04f      	b.n	80019b0 <HAL_I2C_Init+0x1dc>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d111      	bne.n	800193c <HAL_I2C_Init+0x168>
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	1e58      	subs	r0, r3, #1
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6859      	ldr	r1, [r3, #4]
 8001920:	460b      	mov	r3, r1
 8001922:	005b      	lsls	r3, r3, #1
 8001924:	440b      	add	r3, r1
 8001926:	fbb0 f3f3 	udiv	r3, r0, r3
 800192a:	3301      	adds	r3, #1
 800192c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001930:	2b00      	cmp	r3, #0
 8001932:	bf0c      	ite	eq
 8001934:	2301      	moveq	r3, #1
 8001936:	2300      	movne	r3, #0
 8001938:	b2db      	uxtb	r3, r3
 800193a:	e012      	b.n	8001962 <HAL_I2C_Init+0x18e>
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	1e58      	subs	r0, r3, #1
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6859      	ldr	r1, [r3, #4]
 8001944:	460b      	mov	r3, r1
 8001946:	009b      	lsls	r3, r3, #2
 8001948:	440b      	add	r3, r1
 800194a:	0099      	lsls	r1, r3, #2
 800194c:	440b      	add	r3, r1
 800194e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001952:	3301      	adds	r3, #1
 8001954:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001958:	2b00      	cmp	r3, #0
 800195a:	bf0c      	ite	eq
 800195c:	2301      	moveq	r3, #1
 800195e:	2300      	movne	r3, #0
 8001960:	b2db      	uxtb	r3, r3
 8001962:	2b00      	cmp	r3, #0
 8001964:	d001      	beq.n	800196a <HAL_I2C_Init+0x196>
 8001966:	2301      	movs	r3, #1
 8001968:	e022      	b.n	80019b0 <HAL_I2C_Init+0x1dc>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d10e      	bne.n	8001990 <HAL_I2C_Init+0x1bc>
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	1e58      	subs	r0, r3, #1
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6859      	ldr	r1, [r3, #4]
 800197a:	460b      	mov	r3, r1
 800197c:	005b      	lsls	r3, r3, #1
 800197e:	440b      	add	r3, r1
 8001980:	fbb0 f3f3 	udiv	r3, r0, r3
 8001984:	3301      	adds	r3, #1
 8001986:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800198a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800198e:	e00f      	b.n	80019b0 <HAL_I2C_Init+0x1dc>
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	1e58      	subs	r0, r3, #1
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6859      	ldr	r1, [r3, #4]
 8001998:	460b      	mov	r3, r1
 800199a:	009b      	lsls	r3, r3, #2
 800199c:	440b      	add	r3, r1
 800199e:	0099      	lsls	r1, r3, #2
 80019a0:	440b      	add	r3, r1
 80019a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80019a6:	3301      	adds	r3, #1
 80019a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80019b0:	6879      	ldr	r1, [r7, #4]
 80019b2:	6809      	ldr	r1, [r1, #0]
 80019b4:	4313      	orrs	r3, r2
 80019b6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	69da      	ldr	r2, [r3, #28]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6a1b      	ldr	r3, [r3, #32]
 80019ca:	431a      	orrs	r2, r3
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	430a      	orrs	r2, r1
 80019d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80019de:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80019e2:	687a      	ldr	r2, [r7, #4]
 80019e4:	6911      	ldr	r1, [r2, #16]
 80019e6:	687a      	ldr	r2, [r7, #4]
 80019e8:	68d2      	ldr	r2, [r2, #12]
 80019ea:	4311      	orrs	r1, r2
 80019ec:	687a      	ldr	r2, [r7, #4]
 80019ee:	6812      	ldr	r2, [r2, #0]
 80019f0:	430b      	orrs	r3, r1
 80019f2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	68db      	ldr	r3, [r3, #12]
 80019fa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	695a      	ldr	r2, [r3, #20]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	699b      	ldr	r3, [r3, #24]
 8001a06:	431a      	orrs	r2, r3
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	430a      	orrs	r2, r1
 8001a0e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f042 0201 	orr.w	r2, r2, #1
 8001a1e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2200      	movs	r2, #0
 8001a24:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2220      	movs	r2, #32
 8001a2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2200      	movs	r2, #0
 8001a32:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2200      	movs	r2, #0
 8001a38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001a3c:	2300      	movs	r3, #0
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3710      	adds	r7, #16
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	000186a0 	.word	0x000186a0
 8001a4c:	001e847f 	.word	0x001e847f
 8001a50:	003d08ff 	.word	0x003d08ff
 8001a54:	431bde83 	.word	0x431bde83
 8001a58:	10624dd3 	.word	0x10624dd3

08001a5c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b08a      	sub	sp, #40	; 0x28
 8001a60:	af02      	add	r7, sp, #8
 8001a62:	60f8      	str	r0, [r7, #12]
 8001a64:	607a      	str	r2, [r7, #4]
 8001a66:	603b      	str	r3, [r7, #0]
 8001a68:	460b      	mov	r3, r1
 8001a6a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001a6c:	f7ff fb0a 	bl	8001084 <HAL_GetTick>
 8001a70:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8001a72:	2300      	movs	r3, #0
 8001a74:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	2b20      	cmp	r3, #32
 8001a80:	f040 8111 	bne.w	8001ca6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001a84:	69fb      	ldr	r3, [r7, #28]
 8001a86:	9300      	str	r3, [sp, #0]
 8001a88:	2319      	movs	r3, #25
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	4988      	ldr	r1, [pc, #544]	; (8001cb0 <HAL_I2C_IsDeviceReady+0x254>)
 8001a8e:	68f8      	ldr	r0, [r7, #12]
 8001a90:	f001 fdae 	bl	80035f0 <I2C_WaitOnFlagUntilTimeout>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d001      	beq.n	8001a9e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8001a9a:	2302      	movs	r3, #2
 8001a9c:	e104      	b.n	8001ca8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d101      	bne.n	8001aac <HAL_I2C_IsDeviceReady+0x50>
 8001aa8:	2302      	movs	r3, #2
 8001aaa:	e0fd      	b.n	8001ca8 <HAL_I2C_IsDeviceReady+0x24c>
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	2201      	movs	r2, #1
 8001ab0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 0301 	and.w	r3, r3, #1
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d007      	beq.n	8001ad2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f042 0201 	orr.w	r2, r2, #1
 8001ad0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ae0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	2224      	movs	r2, #36	; 0x24
 8001ae6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	2200      	movs	r2, #0
 8001aee:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	4a70      	ldr	r2, [pc, #448]	; (8001cb4 <HAL_I2C_IsDeviceReady+0x258>)
 8001af4:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b04:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	9300      	str	r3, [sp, #0]
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001b12:	68f8      	ldr	r0, [r7, #12]
 8001b14:	f001 fd6c 	bl	80035f0 <I2C_WaitOnFlagUntilTimeout>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d00d      	beq.n	8001b3a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b2c:	d103      	bne.n	8001b36 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b34:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8001b36:	2303      	movs	r3, #3
 8001b38:	e0b6      	b.n	8001ca8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001b3a:	897b      	ldrh	r3, [r7, #10]
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	461a      	mov	r2, r3
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001b48:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001b4a:	f7ff fa9b 	bl	8001084 <HAL_GetTick>
 8001b4e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	695b      	ldr	r3, [r3, #20]
 8001b56:	f003 0302 	and.w	r3, r3, #2
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	bf0c      	ite	eq
 8001b5e:	2301      	moveq	r3, #1
 8001b60:	2300      	movne	r3, #0
 8001b62:	b2db      	uxtb	r3, r3
 8001b64:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	695b      	ldr	r3, [r3, #20]
 8001b6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b74:	bf0c      	ite	eq
 8001b76:	2301      	moveq	r3, #1
 8001b78:	2300      	movne	r3, #0
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001b7e:	e025      	b.n	8001bcc <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001b80:	f7ff fa80 	bl	8001084 <HAL_GetTick>
 8001b84:	4602      	mov	r2, r0
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	683a      	ldr	r2, [r7, #0]
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d302      	bcc.n	8001b96 <HAL_I2C_IsDeviceReady+0x13a>
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d103      	bne.n	8001b9e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	22a0      	movs	r2, #160	; 0xa0
 8001b9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	695b      	ldr	r3, [r3, #20]
 8001ba4:	f003 0302 	and.w	r3, r3, #2
 8001ba8:	2b02      	cmp	r3, #2
 8001baa:	bf0c      	ite	eq
 8001bac:	2301      	moveq	r3, #1
 8001bae:	2300      	movne	r3, #0
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	695b      	ldr	r3, [r3, #20]
 8001bba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bc2:	bf0c      	ite	eq
 8001bc4:	2301      	moveq	r3, #1
 8001bc6:	2300      	movne	r3, #0
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bd2:	b2db      	uxtb	r3, r3
 8001bd4:	2ba0      	cmp	r3, #160	; 0xa0
 8001bd6:	d005      	beq.n	8001be4 <HAL_I2C_IsDeviceReady+0x188>
 8001bd8:	7dfb      	ldrb	r3, [r7, #23]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d102      	bne.n	8001be4 <HAL_I2C_IsDeviceReady+0x188>
 8001bde:	7dbb      	ldrb	r3, [r7, #22]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d0cd      	beq.n	8001b80 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	2220      	movs	r2, #32
 8001be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	695b      	ldr	r3, [r3, #20]
 8001bf2:	f003 0302 	and.w	r3, r3, #2
 8001bf6:	2b02      	cmp	r3, #2
 8001bf8:	d129      	bne.n	8001c4e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c08:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	613b      	str	r3, [r7, #16]
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	695b      	ldr	r3, [r3, #20]
 8001c14:	613b      	str	r3, [r7, #16]
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	699b      	ldr	r3, [r3, #24]
 8001c1c:	613b      	str	r3, [r7, #16]
 8001c1e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	9300      	str	r3, [sp, #0]
 8001c24:	2319      	movs	r3, #25
 8001c26:	2201      	movs	r2, #1
 8001c28:	4921      	ldr	r1, [pc, #132]	; (8001cb0 <HAL_I2C_IsDeviceReady+0x254>)
 8001c2a:	68f8      	ldr	r0, [r7, #12]
 8001c2c:	f001 fce0 	bl	80035f0 <I2C_WaitOnFlagUntilTimeout>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d001      	beq.n	8001c3a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e036      	b.n	8001ca8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	2220      	movs	r2, #32
 8001c3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	2200      	movs	r2, #0
 8001c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	e02c      	b.n	8001ca8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c5c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001c66:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001c68:	69fb      	ldr	r3, [r7, #28]
 8001c6a:	9300      	str	r3, [sp, #0]
 8001c6c:	2319      	movs	r3, #25
 8001c6e:	2201      	movs	r2, #1
 8001c70:	490f      	ldr	r1, [pc, #60]	; (8001cb0 <HAL_I2C_IsDeviceReady+0x254>)
 8001c72:	68f8      	ldr	r0, [r7, #12]
 8001c74:	f001 fcbc 	bl	80035f0 <I2C_WaitOnFlagUntilTimeout>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e012      	b.n	8001ca8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8001c82:	69bb      	ldr	r3, [r7, #24]
 8001c84:	3301      	adds	r3, #1
 8001c86:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8001c88:	69ba      	ldr	r2, [r7, #24]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	f4ff af32 	bcc.w	8001af6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	2220      	movs	r2, #32
 8001c96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e000      	b.n	8001ca8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8001ca6:	2302      	movs	r3, #2
  }
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3720      	adds	r7, #32
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	00100002 	.word	0x00100002
 8001cb4:	ffff0000 	.word	0xffff0000

08001cb8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b088      	sub	sp, #32
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cd0:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001cd8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ce0:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001ce2:	7bfb      	ldrb	r3, [r7, #15]
 8001ce4:	2b10      	cmp	r3, #16
 8001ce6:	d003      	beq.n	8001cf0 <HAL_I2C_EV_IRQHandler+0x38>
 8001ce8:	7bfb      	ldrb	r3, [r7, #15]
 8001cea:	2b40      	cmp	r3, #64	; 0x40
 8001cec:	f040 80c1 	bne.w	8001e72 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	699b      	ldr	r3, [r3, #24]
 8001cf6:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	695b      	ldr	r3, [r3, #20]
 8001cfe:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	f003 0301 	and.w	r3, r3, #1
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d10d      	bne.n	8001d26 <HAL_I2C_EV_IRQHandler+0x6e>
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8001d10:	d003      	beq.n	8001d1a <HAL_I2C_EV_IRQHandler+0x62>
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8001d18:	d101      	bne.n	8001d1e <HAL_I2C_EV_IRQHandler+0x66>
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e000      	b.n	8001d20 <HAL_I2C_EV_IRQHandler+0x68>
 8001d1e:	2300      	movs	r3, #0
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	f000 8132 	beq.w	8001f8a <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	f003 0301 	and.w	r3, r3, #1
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d00c      	beq.n	8001d4a <HAL_I2C_EV_IRQHandler+0x92>
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	0a5b      	lsrs	r3, r3, #9
 8001d34:	f003 0301 	and.w	r3, r3, #1
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d006      	beq.n	8001d4a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	f001 fce1 	bl	8003704 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	f000 fd91 	bl	800286a <I2C_Master_SB>
 8001d48:	e092      	b.n	8001e70 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	08db      	lsrs	r3, r3, #3
 8001d4e:	f003 0301 	and.w	r3, r3, #1
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d009      	beq.n	8001d6a <HAL_I2C_EV_IRQHandler+0xb2>
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	0a5b      	lsrs	r3, r3, #9
 8001d5a:	f003 0301 	and.w	r3, r3, #1
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d003      	beq.n	8001d6a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f000 fe07 	bl	8002976 <I2C_Master_ADD10>
 8001d68:	e082      	b.n	8001e70 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	085b      	lsrs	r3, r3, #1
 8001d6e:	f003 0301 	and.w	r3, r3, #1
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d009      	beq.n	8001d8a <HAL_I2C_EV_IRQHandler+0xd2>
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	0a5b      	lsrs	r3, r3, #9
 8001d7a:	f003 0301 	and.w	r3, r3, #1
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d003      	beq.n	8001d8a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f000 fe21 	bl	80029ca <I2C_Master_ADDR>
 8001d88:	e072      	b.n	8001e70 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001d8a:	69bb      	ldr	r3, [r7, #24]
 8001d8c:	089b      	lsrs	r3, r3, #2
 8001d8e:	f003 0301 	and.w	r3, r3, #1
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d03b      	beq.n	8001e0e <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001da0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001da4:	f000 80f3 	beq.w	8001f8e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	09db      	lsrs	r3, r3, #7
 8001dac:	f003 0301 	and.w	r3, r3, #1
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d00f      	beq.n	8001dd4 <HAL_I2C_EV_IRQHandler+0x11c>
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	0a9b      	lsrs	r3, r3, #10
 8001db8:	f003 0301 	and.w	r3, r3, #1
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d009      	beq.n	8001dd4 <HAL_I2C_EV_IRQHandler+0x11c>
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	089b      	lsrs	r3, r3, #2
 8001dc4:	f003 0301 	and.w	r3, r3, #1
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d103      	bne.n	8001dd4 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8001dcc:	6878      	ldr	r0, [r7, #4]
 8001dce:	f000 fa01 	bl	80021d4 <I2C_MasterTransmit_TXE>
 8001dd2:	e04d      	b.n	8001e70 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	089b      	lsrs	r3, r3, #2
 8001dd8:	f003 0301 	and.w	r3, r3, #1
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	f000 80d6 	beq.w	8001f8e <HAL_I2C_EV_IRQHandler+0x2d6>
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	0a5b      	lsrs	r3, r3, #9
 8001de6:	f003 0301 	and.w	r3, r3, #1
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	f000 80cf 	beq.w	8001f8e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8001df0:	7bbb      	ldrb	r3, [r7, #14]
 8001df2:	2b21      	cmp	r3, #33	; 0x21
 8001df4:	d103      	bne.n	8001dfe <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f000 fa88 	bl	800230c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001dfc:	e0c7      	b.n	8001f8e <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8001dfe:	7bfb      	ldrb	r3, [r7, #15]
 8001e00:	2b40      	cmp	r3, #64	; 0x40
 8001e02:	f040 80c4 	bne.w	8001f8e <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f000 faf6 	bl	80023f8 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e0c:	e0bf      	b.n	8001f8e <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001e1c:	f000 80b7 	beq.w	8001f8e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001e20:	69fb      	ldr	r3, [r7, #28]
 8001e22:	099b      	lsrs	r3, r3, #6
 8001e24:	f003 0301 	and.w	r3, r3, #1
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d00f      	beq.n	8001e4c <HAL_I2C_EV_IRQHandler+0x194>
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	0a9b      	lsrs	r3, r3, #10
 8001e30:	f003 0301 	and.w	r3, r3, #1
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d009      	beq.n	8001e4c <HAL_I2C_EV_IRQHandler+0x194>
 8001e38:	69fb      	ldr	r3, [r7, #28]
 8001e3a:	089b      	lsrs	r3, r3, #2
 8001e3c:	f003 0301 	and.w	r3, r3, #1
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d103      	bne.n	8001e4c <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	f000 fb6b 	bl	8002520 <I2C_MasterReceive_RXNE>
 8001e4a:	e011      	b.n	8001e70 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e4c:	69fb      	ldr	r3, [r7, #28]
 8001e4e:	089b      	lsrs	r3, r3, #2
 8001e50:	f003 0301 	and.w	r3, r3, #1
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	f000 809a 	beq.w	8001f8e <HAL_I2C_EV_IRQHandler+0x2d6>
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	0a5b      	lsrs	r3, r3, #9
 8001e5e:	f003 0301 	and.w	r3, r3, #1
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	f000 8093 	beq.w	8001f8e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	f000 fc14 	bl	8002696 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e6e:	e08e      	b.n	8001f8e <HAL_I2C_EV_IRQHandler+0x2d6>
 8001e70:	e08d      	b.n	8001f8e <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d004      	beq.n	8001e84 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	695b      	ldr	r3, [r3, #20]
 8001e80:	61fb      	str	r3, [r7, #28]
 8001e82:	e007      	b.n	8001e94 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	699b      	ldr	r3, [r3, #24]
 8001e8a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	695b      	ldr	r3, [r3, #20]
 8001e92:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e94:	69fb      	ldr	r3, [r7, #28]
 8001e96:	085b      	lsrs	r3, r3, #1
 8001e98:	f003 0301 	and.w	r3, r3, #1
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d012      	beq.n	8001ec6 <HAL_I2C_EV_IRQHandler+0x20e>
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	0a5b      	lsrs	r3, r3, #9
 8001ea4:	f003 0301 	and.w	r3, r3, #1
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d00c      	beq.n	8001ec6 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d003      	beq.n	8001ebc <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	699b      	ldr	r3, [r3, #24]
 8001eba:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8001ebc:	69b9      	ldr	r1, [r7, #24]
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f000 ffd2 	bl	8002e68 <I2C_Slave_ADDR>
 8001ec4:	e066      	b.n	8001f94 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	091b      	lsrs	r3, r3, #4
 8001eca:	f003 0301 	and.w	r3, r3, #1
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d009      	beq.n	8001ee6 <HAL_I2C_EV_IRQHandler+0x22e>
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	0a5b      	lsrs	r3, r3, #9
 8001ed6:	f003 0301 	and.w	r3, r3, #1
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d003      	beq.n	8001ee6 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f001 f80c 	bl	8002efc <I2C_Slave_STOPF>
 8001ee4:	e056      	b.n	8001f94 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001ee6:	7bbb      	ldrb	r3, [r7, #14]
 8001ee8:	2b21      	cmp	r3, #33	; 0x21
 8001eea:	d002      	beq.n	8001ef2 <HAL_I2C_EV_IRQHandler+0x23a>
 8001eec:	7bbb      	ldrb	r3, [r7, #14]
 8001eee:	2b29      	cmp	r3, #41	; 0x29
 8001ef0:	d125      	bne.n	8001f3e <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	09db      	lsrs	r3, r3, #7
 8001ef6:	f003 0301 	and.w	r3, r3, #1
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d00f      	beq.n	8001f1e <HAL_I2C_EV_IRQHandler+0x266>
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	0a9b      	lsrs	r3, r3, #10
 8001f02:	f003 0301 	and.w	r3, r3, #1
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d009      	beq.n	8001f1e <HAL_I2C_EV_IRQHandler+0x266>
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	089b      	lsrs	r3, r3, #2
 8001f0e:	f003 0301 	and.w	r3, r3, #1
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d103      	bne.n	8001f1e <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f000 fee8 	bl	8002cec <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001f1c:	e039      	b.n	8001f92 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	089b      	lsrs	r3, r3, #2
 8001f22:	f003 0301 	and.w	r3, r3, #1
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d033      	beq.n	8001f92 <HAL_I2C_EV_IRQHandler+0x2da>
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	0a5b      	lsrs	r3, r3, #9
 8001f2e:	f003 0301 	and.w	r3, r3, #1
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d02d      	beq.n	8001f92 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f000 ff15 	bl	8002d66 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001f3c:	e029      	b.n	8001f92 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	099b      	lsrs	r3, r3, #6
 8001f42:	f003 0301 	and.w	r3, r3, #1
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d00f      	beq.n	8001f6a <HAL_I2C_EV_IRQHandler+0x2b2>
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	0a9b      	lsrs	r3, r3, #10
 8001f4e:	f003 0301 	and.w	r3, r3, #1
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d009      	beq.n	8001f6a <HAL_I2C_EV_IRQHandler+0x2b2>
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	089b      	lsrs	r3, r3, #2
 8001f5a:	f003 0301 	and.w	r3, r3, #1
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d103      	bne.n	8001f6a <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f000 ff20 	bl	8002da8 <I2C_SlaveReceive_RXNE>
 8001f68:	e014      	b.n	8001f94 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	089b      	lsrs	r3, r3, #2
 8001f6e:	f003 0301 	and.w	r3, r3, #1
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d00e      	beq.n	8001f94 <HAL_I2C_EV_IRQHandler+0x2dc>
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	0a5b      	lsrs	r3, r3, #9
 8001f7a:	f003 0301 	and.w	r3, r3, #1
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d008      	beq.n	8001f94 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f000 ff4e 	bl	8002e24 <I2C_SlaveReceive_BTF>
 8001f88:	e004      	b.n	8001f94 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8001f8a:	bf00      	nop
 8001f8c:	e002      	b.n	8001f94 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f8e:	bf00      	nop
 8001f90:	e000      	b.n	8001f94 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001f92:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8001f94:	3720      	adds	r7, #32
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}

08001f9a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001f9a:	b580      	push	{r7, lr}
 8001f9c:	b08a      	sub	sp, #40	; 0x28
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	695b      	ldr	r3, [r3, #20]
 8001fa8:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001fbc:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001fbe:	6a3b      	ldr	r3, [r7, #32]
 8001fc0:	0a1b      	lsrs	r3, r3, #8
 8001fc2:	f003 0301 	and.w	r3, r3, #1
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d00e      	beq.n	8001fe8 <HAL_I2C_ER_IRQHandler+0x4e>
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	0a1b      	lsrs	r3, r3, #8
 8001fce:	f003 0301 	and.w	r3, r3, #1
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d008      	beq.n	8001fe8 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8001fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd8:	f043 0301 	orr.w	r3, r3, #1
 8001fdc:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001fe6:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001fe8:	6a3b      	ldr	r3, [r7, #32]
 8001fea:	0a5b      	lsrs	r3, r3, #9
 8001fec:	f003 0301 	and.w	r3, r3, #1
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d00e      	beq.n	8002012 <HAL_I2C_ER_IRQHandler+0x78>
 8001ff4:	69fb      	ldr	r3, [r7, #28]
 8001ff6:	0a1b      	lsrs	r3, r3, #8
 8001ff8:	f003 0301 	and.w	r3, r3, #1
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d008      	beq.n	8002012 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8002000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002002:	f043 0302 	orr.w	r3, r3, #2
 8002006:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8002010:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002012:	6a3b      	ldr	r3, [r7, #32]
 8002014:	0a9b      	lsrs	r3, r3, #10
 8002016:	f003 0301 	and.w	r3, r3, #1
 800201a:	2b00      	cmp	r3, #0
 800201c:	d03f      	beq.n	800209e <HAL_I2C_ER_IRQHandler+0x104>
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	0a1b      	lsrs	r3, r3, #8
 8002022:	f003 0301 	and.w	r3, r3, #1
 8002026:	2b00      	cmp	r3, #0
 8002028:	d039      	beq.n	800209e <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800202a:	7efb      	ldrb	r3, [r7, #27]
 800202c:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002032:	b29b      	uxth	r3, r3
 8002034:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800203c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002042:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002044:	7ebb      	ldrb	r3, [r7, #26]
 8002046:	2b20      	cmp	r3, #32
 8002048:	d112      	bne.n	8002070 <HAL_I2C_ER_IRQHandler+0xd6>
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d10f      	bne.n	8002070 <HAL_I2C_ER_IRQHandler+0xd6>
 8002050:	7cfb      	ldrb	r3, [r7, #19]
 8002052:	2b21      	cmp	r3, #33	; 0x21
 8002054:	d008      	beq.n	8002068 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8002056:	7cfb      	ldrb	r3, [r7, #19]
 8002058:	2b29      	cmp	r3, #41	; 0x29
 800205a:	d005      	beq.n	8002068 <HAL_I2C_ER_IRQHandler+0xce>
 800205c:	7cfb      	ldrb	r3, [r7, #19]
 800205e:	2b28      	cmp	r3, #40	; 0x28
 8002060:	d106      	bne.n	8002070 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	2b21      	cmp	r3, #33	; 0x21
 8002066:	d103      	bne.n	8002070 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	f001 f877 	bl	800315c <I2C_Slave_AF>
 800206e:	e016      	b.n	800209e <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002078:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800207a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207c:	f043 0304 	orr.w	r3, r3, #4
 8002080:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002082:	7efb      	ldrb	r3, [r7, #27]
 8002084:	2b10      	cmp	r3, #16
 8002086:	d002      	beq.n	800208e <HAL_I2C_ER_IRQHandler+0xf4>
 8002088:	7efb      	ldrb	r3, [r7, #27]
 800208a:	2b40      	cmp	r3, #64	; 0x40
 800208c:	d107      	bne.n	800209e <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800209c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800209e:	6a3b      	ldr	r3, [r7, #32]
 80020a0:	0adb      	lsrs	r3, r3, #11
 80020a2:	f003 0301 	and.w	r3, r3, #1
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d00e      	beq.n	80020c8 <HAL_I2C_ER_IRQHandler+0x12e>
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	0a1b      	lsrs	r3, r3, #8
 80020ae:	f003 0301 	and.w	r3, r3, #1
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d008      	beq.n	80020c8 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80020b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b8:	f043 0308 	orr.w	r3, r3, #8
 80020bc:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80020c6:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80020c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d008      	beq.n	80020e0 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d4:	431a      	orrs	r2, r3
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f001 f8ae 	bl	800323c <I2C_ITError>
  }
}
 80020e0:	bf00      	nop
 80020e2:	3728      	adds	r7, #40	; 0x28
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}

080020e8 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80020f0:	bf00      	nop
 80020f2:	370c      	adds	r7, #12
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr

080020fc <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002104:	bf00      	nop
 8002106:	370c      	adds	r7, #12
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr

08002110 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002118:	bf00      	nop
 800211a:	370c      	adds	r7, #12
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr

08002124 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800212c:	bf00      	nop
 800212e:	370c      	adds	r7, #12
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr

08002138 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002138:	b480      	push	{r7}
 800213a:	b083      	sub	sp, #12
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
 8002140:	460b      	mov	r3, r1
 8002142:	70fb      	strb	r3, [r7, #3]
 8002144:	4613      	mov	r3, r2
 8002146:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002148:	bf00      	nop
 800214a:	370c      	adds	r7, #12
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr

08002154 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800215c:	bf00      	nop
 800215e:	370c      	adds	r7, #12
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr

08002168 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002170:	bf00      	nop
 8002172:	370c      	adds	r7, #12
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr

0800217c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002184:	bf00      	nop
 8002186:	370c      	adds	r7, #12
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr

08002190 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002198:	bf00      	nop
 800219a:	370c      	adds	r7, #12
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr

080021a4 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80021ac:	bf00      	nop
 80021ae:	370c      	adds	r7, #12
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr

080021b8 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021c6:	b2db      	uxtb	r3, r3
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	370c      	adds	r7, #12
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr

080021d4 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b084      	sub	sp, #16
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021e2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80021ea:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021f0:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d150      	bne.n	800229c <I2C_MasterTransmit_TXE+0xc8>
 80021fa:	7bfb      	ldrb	r3, [r7, #15]
 80021fc:	2b21      	cmp	r3, #33	; 0x21
 80021fe:	d14d      	bne.n	800229c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	2b08      	cmp	r3, #8
 8002204:	d01d      	beq.n	8002242 <I2C_MasterTransmit_TXE+0x6e>
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	2b20      	cmp	r3, #32
 800220a:	d01a      	beq.n	8002242 <I2C_MasterTransmit_TXE+0x6e>
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002212:	d016      	beq.n	8002242 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	685a      	ldr	r2, [r3, #4]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002222:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2211      	movs	r2, #17
 8002228:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2200      	movs	r2, #0
 800222e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2220      	movs	r2, #32
 8002236:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	f7ff ff54 	bl	80020e8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002240:	e060      	b.n	8002304 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	685a      	ldr	r2, [r3, #4]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002250:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002260:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2200      	movs	r2, #0
 8002266:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2220      	movs	r2, #32
 800226c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002276:	b2db      	uxtb	r3, r3
 8002278:	2b40      	cmp	r3, #64	; 0x40
 800227a:	d107      	bne.n	800228c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2200      	movs	r2, #0
 8002280:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002284:	6878      	ldr	r0, [r7, #4]
 8002286:	f7ff ff6f 	bl	8002168 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800228a:	e03b      	b.n	8002304 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2200      	movs	r2, #0
 8002290:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002294:	6878      	ldr	r0, [r7, #4]
 8002296:	f7ff ff27 	bl	80020e8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800229a:	e033      	b.n	8002304 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800229c:	7bfb      	ldrb	r3, [r7, #15]
 800229e:	2b21      	cmp	r3, #33	; 0x21
 80022a0:	d005      	beq.n	80022ae <I2C_MasterTransmit_TXE+0xda>
 80022a2:	7bbb      	ldrb	r3, [r7, #14]
 80022a4:	2b40      	cmp	r3, #64	; 0x40
 80022a6:	d12d      	bne.n	8002304 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80022a8:	7bfb      	ldrb	r3, [r7, #15]
 80022aa:	2b22      	cmp	r3, #34	; 0x22
 80022ac:	d12a      	bne.n	8002304 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022b2:	b29b      	uxth	r3, r3
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d108      	bne.n	80022ca <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	685a      	ldr	r2, [r3, #4]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022c6:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80022c8:	e01c      	b.n	8002304 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	2b40      	cmp	r3, #64	; 0x40
 80022d4:	d103      	bne.n	80022de <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f000 f88e 	bl	80023f8 <I2C_MemoryTransmit_TXE_BTF>
}
 80022dc:	e012      	b.n	8002304 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e2:	781a      	ldrb	r2, [r3, #0]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ee:	1c5a      	adds	r2, r3, #1
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022f8:	b29b      	uxth	r3, r3
 80022fa:	3b01      	subs	r3, #1
 80022fc:	b29a      	uxth	r2, r3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002302:	e7ff      	b.n	8002304 <I2C_MasterTransmit_TXE+0x130>
 8002304:	bf00      	nop
 8002306:	3710      	adds	r7, #16
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}

0800230c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b084      	sub	sp, #16
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002318:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002320:	b2db      	uxtb	r3, r3
 8002322:	2b21      	cmp	r3, #33	; 0x21
 8002324:	d164      	bne.n	80023f0 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800232a:	b29b      	uxth	r3, r3
 800232c:	2b00      	cmp	r3, #0
 800232e:	d012      	beq.n	8002356 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002334:	781a      	ldrb	r2, [r3, #0]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002340:	1c5a      	adds	r2, r3, #1
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800234a:	b29b      	uxth	r3, r3
 800234c:	3b01      	subs	r3, #1
 800234e:	b29a      	uxth	r2, r3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8002354:	e04c      	b.n	80023f0 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	2b08      	cmp	r3, #8
 800235a:	d01d      	beq.n	8002398 <I2C_MasterTransmit_BTF+0x8c>
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	2b20      	cmp	r3, #32
 8002360:	d01a      	beq.n	8002398 <I2C_MasterTransmit_BTF+0x8c>
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002368:	d016      	beq.n	8002398 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	685a      	ldr	r2, [r3, #4]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002378:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2211      	movs	r2, #17
 800237e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2200      	movs	r2, #0
 8002384:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2220      	movs	r2, #32
 800238c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002390:	6878      	ldr	r0, [r7, #4]
 8002392:	f7ff fea9 	bl	80020e8 <HAL_I2C_MasterTxCpltCallback>
}
 8002396:	e02b      	b.n	80023f0 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	685a      	ldr	r2, [r3, #4]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80023a6:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023b6:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2200      	movs	r2, #0
 80023bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2220      	movs	r2, #32
 80023c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	2b40      	cmp	r3, #64	; 0x40
 80023d0:	d107      	bne.n	80023e2 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2200      	movs	r2, #0
 80023d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	f7ff fec4 	bl	8002168 <HAL_I2C_MemTxCpltCallback>
}
 80023e0:	e006      	b.n	80023f0 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2200      	movs	r2, #0
 80023e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f7ff fe7c 	bl	80020e8 <HAL_I2C_MasterTxCpltCallback>
}
 80023f0:	bf00      	nop
 80023f2:	3710      	adds	r7, #16
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}

080023f8 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b084      	sub	sp, #16
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002406:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800240c:	2b00      	cmp	r3, #0
 800240e:	d11d      	bne.n	800244c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002414:	2b01      	cmp	r3, #1
 8002416:	d10b      	bne.n	8002430 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800241c:	b2da      	uxtb	r2, r3
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002428:	1c9a      	adds	r2, r3, #2
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800242e:	e073      	b.n	8002518 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002434:	b29b      	uxth	r3, r3
 8002436:	121b      	asrs	r3, r3, #8
 8002438:	b2da      	uxtb	r2, r3
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002444:	1c5a      	adds	r2, r3, #1
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	651a      	str	r2, [r3, #80]	; 0x50
}
 800244a:	e065      	b.n	8002518 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002450:	2b01      	cmp	r3, #1
 8002452:	d10b      	bne.n	800246c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002458:	b2da      	uxtb	r2, r3
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002464:	1c5a      	adds	r2, r3, #1
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	651a      	str	r2, [r3, #80]	; 0x50
}
 800246a:	e055      	b.n	8002518 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002470:	2b02      	cmp	r3, #2
 8002472:	d151      	bne.n	8002518 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8002474:	7bfb      	ldrb	r3, [r7, #15]
 8002476:	2b22      	cmp	r3, #34	; 0x22
 8002478:	d10d      	bne.n	8002496 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002488:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800248e:	1c5a      	adds	r2, r3, #1
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002494:	e040      	b.n	8002518 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800249a:	b29b      	uxth	r3, r3
 800249c:	2b00      	cmp	r3, #0
 800249e:	d015      	beq.n	80024cc <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80024a0:	7bfb      	ldrb	r3, [r7, #15]
 80024a2:	2b21      	cmp	r3, #33	; 0x21
 80024a4:	d112      	bne.n	80024cc <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024aa:	781a      	ldrb	r2, [r3, #0]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b6:	1c5a      	adds	r2, r3, #1
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024c0:	b29b      	uxth	r3, r3
 80024c2:	3b01      	subs	r3, #1
 80024c4:	b29a      	uxth	r2, r3
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80024ca:	e025      	b.n	8002518 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024d0:	b29b      	uxth	r3, r3
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d120      	bne.n	8002518 <I2C_MemoryTransmit_TXE_BTF+0x120>
 80024d6:	7bfb      	ldrb	r3, [r7, #15]
 80024d8:	2b21      	cmp	r3, #33	; 0x21
 80024da:	d11d      	bne.n	8002518 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	685a      	ldr	r2, [r3, #4]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80024ea:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024fa:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2200      	movs	r2, #0
 8002500:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2220      	movs	r2, #32
 8002506:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2200      	movs	r2, #0
 800250e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	f7ff fe28 	bl	8002168 <HAL_I2C_MemTxCpltCallback>
}
 8002518:	bf00      	nop
 800251a:	3710      	adds	r7, #16
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}

08002520 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b084      	sub	sp, #16
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800252e:	b2db      	uxtb	r3, r3
 8002530:	2b22      	cmp	r3, #34	; 0x22
 8002532:	f040 80ac 	bne.w	800268e <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800253a:	b29b      	uxth	r3, r3
 800253c:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2b03      	cmp	r3, #3
 8002542:	d921      	bls.n	8002588 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	691a      	ldr	r2, [r3, #16]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800254e:	b2d2      	uxtb	r2, r2
 8002550:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002556:	1c5a      	adds	r2, r3, #1
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002560:	b29b      	uxth	r3, r3
 8002562:	3b01      	subs	r3, #1
 8002564:	b29a      	uxth	r2, r3
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800256e:	b29b      	uxth	r3, r3
 8002570:	2b03      	cmp	r3, #3
 8002572:	f040 808c 	bne.w	800268e <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	685a      	ldr	r2, [r3, #4]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002584:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8002586:	e082      	b.n	800268e <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800258c:	2b02      	cmp	r3, #2
 800258e:	d075      	beq.n	800267c <I2C_MasterReceive_RXNE+0x15c>
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2b01      	cmp	r3, #1
 8002594:	d002      	beq.n	800259c <I2C_MasterReceive_RXNE+0x7c>
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d16f      	bne.n	800267c <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800259c:	6878      	ldr	r0, [r7, #4]
 800259e:	f001 f87f 	bl	80036a0 <I2C_WaitOnSTOPRequestThroughIT>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d142      	bne.n	800262e <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025b6:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	685a      	ldr	r2, [r3, #4]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80025c6:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	691a      	ldr	r2, [r3, #16]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d2:	b2d2      	uxtb	r2, r2
 80025d4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025da:	1c5a      	adds	r2, r3, #1
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025e4:	b29b      	uxth	r3, r3
 80025e6:	3b01      	subs	r3, #1
 80025e8:	b29a      	uxth	r2, r3
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2220      	movs	r2, #32
 80025f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	2b40      	cmp	r3, #64	; 0x40
 8002600:	d10a      	bne.n	8002618 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2200      	movs	r2, #0
 8002606:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2200      	movs	r2, #0
 800260e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	f7ff fdb3 	bl	800217c <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002616:	e03a      	b.n	800268e <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2200      	movs	r2, #0
 800261c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2212      	movs	r2, #18
 8002624:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	f7ff fd68 	bl	80020fc <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800262c:	e02f      	b.n	800268e <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	685a      	ldr	r2, [r3, #4]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800263c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	691a      	ldr	r2, [r3, #16]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002648:	b2d2      	uxtb	r2, r2
 800264a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002650:	1c5a      	adds	r2, r3, #1
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800265a:	b29b      	uxth	r3, r3
 800265c:	3b01      	subs	r3, #1
 800265e:	b29a      	uxth	r2, r3
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2220      	movs	r2, #32
 8002668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2200      	movs	r2, #0
 8002670:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8002674:	6878      	ldr	r0, [r7, #4]
 8002676:	f7ff fd8b 	bl	8002190 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800267a:	e008      	b.n	800268e <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	685a      	ldr	r2, [r3, #4]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800268a:	605a      	str	r2, [r3, #4]
}
 800268c:	e7ff      	b.n	800268e <I2C_MasterReceive_RXNE+0x16e>
 800268e:	bf00      	nop
 8002690:	3710      	adds	r7, #16
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}

08002696 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002696:	b580      	push	{r7, lr}
 8002698:	b084      	sub	sp, #16
 800269a:	af00      	add	r7, sp, #0
 800269c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026a2:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026a8:	b29b      	uxth	r3, r3
 80026aa:	2b04      	cmp	r3, #4
 80026ac:	d11b      	bne.n	80026e6 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	685a      	ldr	r2, [r3, #4]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026bc:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	691a      	ldr	r2, [r3, #16]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c8:	b2d2      	uxtb	r2, r2
 80026ca:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d0:	1c5a      	adds	r2, r3, #1
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026da:	b29b      	uxth	r3, r3
 80026dc:	3b01      	subs	r3, #1
 80026de:	b29a      	uxth	r2, r3
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80026e4:	e0bd      	b.n	8002862 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026ea:	b29b      	uxth	r3, r3
 80026ec:	2b03      	cmp	r3, #3
 80026ee:	d129      	bne.n	8002744 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	685a      	ldr	r2, [r3, #4]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026fe:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	2b04      	cmp	r3, #4
 8002704:	d00a      	beq.n	800271c <I2C_MasterReceive_BTF+0x86>
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	2b02      	cmp	r3, #2
 800270a:	d007      	beq.n	800271c <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800271a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	691a      	ldr	r2, [r3, #16]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002726:	b2d2      	uxtb	r2, r2
 8002728:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272e:	1c5a      	adds	r2, r3, #1
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002738:	b29b      	uxth	r3, r3
 800273a:	3b01      	subs	r3, #1
 800273c:	b29a      	uxth	r2, r3
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002742:	e08e      	b.n	8002862 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002748:	b29b      	uxth	r3, r3
 800274a:	2b02      	cmp	r3, #2
 800274c:	d176      	bne.n	800283c <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	2b01      	cmp	r3, #1
 8002752:	d002      	beq.n	800275a <I2C_MasterReceive_BTF+0xc4>
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	2b10      	cmp	r3, #16
 8002758:	d108      	bne.n	800276c <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002768:	601a      	str	r2, [r3, #0]
 800276a:	e019      	b.n	80027a0 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2b04      	cmp	r3, #4
 8002770:	d002      	beq.n	8002778 <I2C_MasterReceive_BTF+0xe2>
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	2b02      	cmp	r3, #2
 8002776:	d108      	bne.n	800278a <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002786:	601a      	str	r2, [r3, #0]
 8002788:	e00a      	b.n	80027a0 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2b10      	cmp	r3, #16
 800278e:	d007      	beq.n	80027a0 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800279e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	691a      	ldr	r2, [r3, #16]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027aa:	b2d2      	uxtb	r2, r2
 80027ac:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b2:	1c5a      	adds	r2, r3, #1
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027bc:	b29b      	uxth	r3, r3
 80027be:	3b01      	subs	r3, #1
 80027c0:	b29a      	uxth	r2, r3
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	691a      	ldr	r2, [r3, #16]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d0:	b2d2      	uxtb	r2, r2
 80027d2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d8:	1c5a      	adds	r2, r3, #1
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027e2:	b29b      	uxth	r3, r3
 80027e4:	3b01      	subs	r3, #1
 80027e6:	b29a      	uxth	r2, r3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	685a      	ldr	r2, [r3, #4]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80027fa:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2220      	movs	r2, #32
 8002800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800280a:	b2db      	uxtb	r3, r3
 800280c:	2b40      	cmp	r3, #64	; 0x40
 800280e:	d10a      	bne.n	8002826 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2200      	movs	r2, #0
 8002814:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2200      	movs	r2, #0
 800281c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f7ff fcac 	bl	800217c <HAL_I2C_MemRxCpltCallback>
}
 8002824:	e01d      	b.n	8002862 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2200      	movs	r2, #0
 800282a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2212      	movs	r2, #18
 8002832:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002834:	6878      	ldr	r0, [r7, #4]
 8002836:	f7ff fc61 	bl	80020fc <HAL_I2C_MasterRxCpltCallback>
}
 800283a:	e012      	b.n	8002862 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	691a      	ldr	r2, [r3, #16]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002846:	b2d2      	uxtb	r2, r2
 8002848:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800284e:	1c5a      	adds	r2, r3, #1
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002858:	b29b      	uxth	r3, r3
 800285a:	3b01      	subs	r3, #1
 800285c:	b29a      	uxth	r2, r3
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002862:	bf00      	nop
 8002864:	3710      	adds	r7, #16
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}

0800286a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800286a:	b480      	push	{r7}
 800286c:	b083      	sub	sp, #12
 800286e:	af00      	add	r7, sp, #0
 8002870:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002878:	b2db      	uxtb	r3, r3
 800287a:	2b40      	cmp	r3, #64	; 0x40
 800287c:	d117      	bne.n	80028ae <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002882:	2b00      	cmp	r3, #0
 8002884:	d109      	bne.n	800289a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800288a:	b2db      	uxtb	r3, r3
 800288c:	461a      	mov	r2, r3
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002896:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8002898:	e067      	b.n	800296a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800289e:	b2db      	uxtb	r3, r3
 80028a0:	f043 0301 	orr.w	r3, r3, #1
 80028a4:	b2da      	uxtb	r2, r3
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	611a      	str	r2, [r3, #16]
}
 80028ac:	e05d      	b.n	800296a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	691b      	ldr	r3, [r3, #16]
 80028b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80028b6:	d133      	bne.n	8002920 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	2b21      	cmp	r3, #33	; 0x21
 80028c2:	d109      	bne.n	80028d8 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	461a      	mov	r2, r3
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80028d4:	611a      	str	r2, [r3, #16]
 80028d6:	e008      	b.n	80028ea <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	f043 0301 	orr.w	r3, r3, #1
 80028e2:	b2da      	uxtb	r2, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d004      	beq.n	80028fc <I2C_Master_SB+0x92>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d108      	bne.n	800290e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002900:	2b00      	cmp	r3, #0
 8002902:	d032      	beq.n	800296a <I2C_Master_SB+0x100>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002908:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800290a:	2b00      	cmp	r3, #0
 800290c:	d02d      	beq.n	800296a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	685a      	ldr	r2, [r3, #4]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800291c:	605a      	str	r2, [r3, #4]
}
 800291e:	e024      	b.n	800296a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002924:	2b00      	cmp	r3, #0
 8002926:	d10e      	bne.n	8002946 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800292c:	b29b      	uxth	r3, r3
 800292e:	11db      	asrs	r3, r3, #7
 8002930:	b2db      	uxtb	r3, r3
 8002932:	f003 0306 	and.w	r3, r3, #6
 8002936:	b2db      	uxtb	r3, r3
 8002938:	f063 030f 	orn	r3, r3, #15
 800293c:	b2da      	uxtb	r2, r3
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	611a      	str	r2, [r3, #16]
}
 8002944:	e011      	b.n	800296a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800294a:	2b01      	cmp	r3, #1
 800294c:	d10d      	bne.n	800296a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002952:	b29b      	uxth	r3, r3
 8002954:	11db      	asrs	r3, r3, #7
 8002956:	b2db      	uxtb	r3, r3
 8002958:	f003 0306 	and.w	r3, r3, #6
 800295c:	b2db      	uxtb	r3, r3
 800295e:	f063 030e 	orn	r3, r3, #14
 8002962:	b2da      	uxtb	r2, r3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	611a      	str	r2, [r3, #16]
}
 800296a:	bf00      	nop
 800296c:	370c      	adds	r7, #12
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr

08002976 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8002976:	b480      	push	{r7}
 8002978:	b083      	sub	sp, #12
 800297a:	af00      	add	r7, sp, #0
 800297c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002982:	b2da      	uxtb	r2, r3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800298e:	2b00      	cmp	r3, #0
 8002990:	d004      	beq.n	800299c <I2C_Master_ADD10+0x26>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002996:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002998:	2b00      	cmp	r3, #0
 800299a:	d108      	bne.n	80029ae <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d00c      	beq.n	80029be <I2C_Master_ADD10+0x48>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d007      	beq.n	80029be <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	685a      	ldr	r2, [r3, #4]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029bc:	605a      	str	r2, [r3, #4]
  }
}
 80029be:	bf00      	nop
 80029c0:	370c      	adds	r7, #12
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr

080029ca <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80029ca:	b480      	push	{r7}
 80029cc:	b091      	sub	sp, #68	; 0x44
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80029d8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029e0:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e6:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029ee:	b2db      	uxtb	r3, r3
 80029f0:	2b22      	cmp	r3, #34	; 0x22
 80029f2:	f040 8169 	bne.w	8002cc8 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d10f      	bne.n	8002a1e <I2C_Master_ADDR+0x54>
 80029fe:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002a02:	2b40      	cmp	r3, #64	; 0x40
 8002a04:	d10b      	bne.n	8002a1e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a06:	2300      	movs	r3, #0
 8002a08:	633b      	str	r3, [r7, #48]	; 0x30
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	695b      	ldr	r3, [r3, #20]
 8002a10:	633b      	str	r3, [r7, #48]	; 0x30
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	699b      	ldr	r3, [r3, #24]
 8002a18:	633b      	str	r3, [r7, #48]	; 0x30
 8002a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a1c:	e160      	b.n	8002ce0 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d11d      	bne.n	8002a62 <I2C_Master_ADDR+0x98>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	691b      	ldr	r3, [r3, #16]
 8002a2a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002a2e:	d118      	bne.n	8002a62 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a30:	2300      	movs	r3, #0
 8002a32:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	695b      	ldr	r3, [r3, #20]
 8002a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	699b      	ldr	r3, [r3, #24]
 8002a42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a44:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a54:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a5a:	1c5a      	adds	r2, r3, #1
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	651a      	str	r2, [r3, #80]	; 0x50
 8002a60:	e13e      	b.n	8002ce0 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a66:	b29b      	uxth	r3, r3
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d113      	bne.n	8002a94 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	695b      	ldr	r3, [r3, #20]
 8002a76:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	699b      	ldr	r3, [r3, #24]
 8002a7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a80:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a90:	601a      	str	r2, [r3, #0]
 8002a92:	e115      	b.n	8002cc0 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a98:	b29b      	uxth	r3, r3
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	f040 808a 	bne.w	8002bb4 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002aa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aa2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002aa6:	d137      	bne.n	8002b18 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ab6:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ac2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ac6:	d113      	bne.n	8002af0 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ad6:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ad8:	2300      	movs	r3, #0
 8002ada:	627b      	str	r3, [r7, #36]	; 0x24
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	695b      	ldr	r3, [r3, #20]
 8002ae2:	627b      	str	r3, [r7, #36]	; 0x24
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	699b      	ldr	r3, [r3, #24]
 8002aea:	627b      	str	r3, [r7, #36]	; 0x24
 8002aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aee:	e0e7      	b.n	8002cc0 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002af0:	2300      	movs	r3, #0
 8002af2:	623b      	str	r3, [r7, #32]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	695b      	ldr	r3, [r3, #20]
 8002afa:	623b      	str	r3, [r7, #32]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	699b      	ldr	r3, [r3, #24]
 8002b02:	623b      	str	r3, [r7, #32]
 8002b04:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b14:	601a      	str	r2, [r3, #0]
 8002b16:	e0d3      	b.n	8002cc0 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002b18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b1a:	2b08      	cmp	r3, #8
 8002b1c:	d02e      	beq.n	8002b7c <I2C_Master_ADDR+0x1b2>
 8002b1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b20:	2b20      	cmp	r3, #32
 8002b22:	d02b      	beq.n	8002b7c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002b24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b26:	2b12      	cmp	r3, #18
 8002b28:	d102      	bne.n	8002b30 <I2C_Master_ADDR+0x166>
 8002b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d125      	bne.n	8002b7c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b32:	2b04      	cmp	r3, #4
 8002b34:	d00e      	beq.n	8002b54 <I2C_Master_ADDR+0x18a>
 8002b36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b38:	2b02      	cmp	r3, #2
 8002b3a:	d00b      	beq.n	8002b54 <I2C_Master_ADDR+0x18a>
 8002b3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b3e:	2b10      	cmp	r3, #16
 8002b40:	d008      	beq.n	8002b54 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b50:	601a      	str	r2, [r3, #0]
 8002b52:	e007      	b.n	8002b64 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002b62:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b64:	2300      	movs	r3, #0
 8002b66:	61fb      	str	r3, [r7, #28]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	695b      	ldr	r3, [r3, #20]
 8002b6e:	61fb      	str	r3, [r7, #28]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	699b      	ldr	r3, [r3, #24]
 8002b76:	61fb      	str	r3, [r7, #28]
 8002b78:	69fb      	ldr	r3, [r7, #28]
 8002b7a:	e0a1      	b.n	8002cc0 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b8a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	61bb      	str	r3, [r7, #24]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	695b      	ldr	r3, [r3, #20]
 8002b96:	61bb      	str	r3, [r7, #24]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	699b      	ldr	r3, [r3, #24]
 8002b9e:	61bb      	str	r3, [r7, #24]
 8002ba0:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bb0:	601a      	str	r2, [r3, #0]
 8002bb2:	e085      	b.n	8002cc0 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bb8:	b29b      	uxth	r3, r3
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d14d      	bne.n	8002c5a <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002bbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bc0:	2b04      	cmp	r3, #4
 8002bc2:	d016      	beq.n	8002bf2 <I2C_Master_ADDR+0x228>
 8002bc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bc6:	2b02      	cmp	r3, #2
 8002bc8:	d013      	beq.n	8002bf2 <I2C_Master_ADDR+0x228>
 8002bca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bcc:	2b10      	cmp	r3, #16
 8002bce:	d010      	beq.n	8002bf2 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bde:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002bee:	601a      	str	r2, [r3, #0]
 8002bf0:	e007      	b.n	8002c02 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002c00:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c10:	d117      	bne.n	8002c42 <I2C_Master_ADDR+0x278>
 8002c12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c14:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002c18:	d00b      	beq.n	8002c32 <I2C_Master_ADDR+0x268>
 8002c1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d008      	beq.n	8002c32 <I2C_Master_ADDR+0x268>
 8002c20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c22:	2b08      	cmp	r3, #8
 8002c24:	d005      	beq.n	8002c32 <I2C_Master_ADDR+0x268>
 8002c26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c28:	2b10      	cmp	r3, #16
 8002c2a:	d002      	beq.n	8002c32 <I2C_Master_ADDR+0x268>
 8002c2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c2e:	2b20      	cmp	r3, #32
 8002c30:	d107      	bne.n	8002c42 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	685a      	ldr	r2, [r3, #4]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002c40:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c42:	2300      	movs	r3, #0
 8002c44:	617b      	str	r3, [r7, #20]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	695b      	ldr	r3, [r3, #20]
 8002c4c:	617b      	str	r3, [r7, #20]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	699b      	ldr	r3, [r3, #24]
 8002c54:	617b      	str	r3, [r7, #20]
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	e032      	b.n	8002cc0 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002c68:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c78:	d117      	bne.n	8002caa <I2C_Master_ADDR+0x2e0>
 8002c7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c7c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002c80:	d00b      	beq.n	8002c9a <I2C_Master_ADDR+0x2d0>
 8002c82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d008      	beq.n	8002c9a <I2C_Master_ADDR+0x2d0>
 8002c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c8a:	2b08      	cmp	r3, #8
 8002c8c:	d005      	beq.n	8002c9a <I2C_Master_ADDR+0x2d0>
 8002c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c90:	2b10      	cmp	r3, #16
 8002c92:	d002      	beq.n	8002c9a <I2C_Master_ADDR+0x2d0>
 8002c94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c96:	2b20      	cmp	r3, #32
 8002c98:	d107      	bne.n	8002caa <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	685a      	ldr	r2, [r3, #4]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002ca8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002caa:	2300      	movs	r3, #0
 8002cac:	613b      	str	r3, [r7, #16]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	695b      	ldr	r3, [r3, #20]
 8002cb4:	613b      	str	r3, [r7, #16]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	699b      	ldr	r3, [r3, #24]
 8002cbc:	613b      	str	r3, [r7, #16]
 8002cbe:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8002cc6:	e00b      	b.n	8002ce0 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cc8:	2300      	movs	r3, #0
 8002cca:	60fb      	str	r3, [r7, #12]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	695b      	ldr	r3, [r3, #20]
 8002cd2:	60fb      	str	r3, [r7, #12]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	699b      	ldr	r3, [r3, #24]
 8002cda:	60fb      	str	r3, [r7, #12]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
}
 8002cde:	e7ff      	b.n	8002ce0 <I2C_Master_ADDR+0x316>
 8002ce0:	bf00      	nop
 8002ce2:	3744      	adds	r7, #68	; 0x44
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr

08002cec <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b084      	sub	sp, #16
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cfa:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d00:	b29b      	uxth	r3, r3
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d02b      	beq.n	8002d5e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d0a:	781a      	ldrb	r2, [r3, #0]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d16:	1c5a      	adds	r2, r3, #1
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d20:	b29b      	uxth	r3, r3
 8002d22:	3b01      	subs	r3, #1
 8002d24:	b29a      	uxth	r2, r3
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d114      	bne.n	8002d5e <I2C_SlaveTransmit_TXE+0x72>
 8002d34:	7bfb      	ldrb	r3, [r7, #15]
 8002d36:	2b29      	cmp	r3, #41	; 0x29
 8002d38:	d111      	bne.n	8002d5e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	685a      	ldr	r2, [r3, #4]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d48:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2221      	movs	r2, #33	; 0x21
 8002d4e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2228      	movs	r2, #40	; 0x28
 8002d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002d58:	6878      	ldr	r0, [r7, #4]
 8002d5a:	f7ff f9d9 	bl	8002110 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002d5e:	bf00      	nop
 8002d60:	3710      	adds	r7, #16
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}

08002d66 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002d66:	b480      	push	{r7}
 8002d68:	b083      	sub	sp, #12
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d72:	b29b      	uxth	r3, r3
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d011      	beq.n	8002d9c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d7c:	781a      	ldrb	r2, [r3, #0]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d88:	1c5a      	adds	r2, r3, #1
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d92:	b29b      	uxth	r3, r3
 8002d94:	3b01      	subs	r3, #1
 8002d96:	b29a      	uxth	r2, r3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002d9c:	bf00      	nop
 8002d9e:	370c      	adds	r7, #12
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr

08002da8 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b084      	sub	sp, #16
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002db6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dbc:	b29b      	uxth	r3, r3
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d02c      	beq.n	8002e1c <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	691a      	ldr	r2, [r3, #16]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dcc:	b2d2      	uxtb	r2, r2
 8002dce:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd4:	1c5a      	adds	r2, r3, #1
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dde:	b29b      	uxth	r3, r3
 8002de0:	3b01      	subs	r3, #1
 8002de2:	b29a      	uxth	r2, r3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dec:	b29b      	uxth	r3, r3
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d114      	bne.n	8002e1c <I2C_SlaveReceive_RXNE+0x74>
 8002df2:	7bfb      	ldrb	r3, [r7, #15]
 8002df4:	2b2a      	cmp	r3, #42	; 0x2a
 8002df6:	d111      	bne.n	8002e1c <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	685a      	ldr	r2, [r3, #4]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e06:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2222      	movs	r2, #34	; 0x22
 8002e0c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2228      	movs	r2, #40	; 0x28
 8002e12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f7ff f984 	bl	8002124 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002e1c:	bf00      	nop
 8002e1e:	3710      	adds	r7, #16
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}

08002e24 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b083      	sub	sp, #12
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e30:	b29b      	uxth	r3, r3
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d012      	beq.n	8002e5c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	691a      	ldr	r2, [r3, #16]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e40:	b2d2      	uxtb	r2, r2
 8002e42:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e48:	1c5a      	adds	r2, r3, #1
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e52:	b29b      	uxth	r3, r3
 8002e54:	3b01      	subs	r3, #1
 8002e56:	b29a      	uxth	r2, r3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002e5c:	bf00      	nop
 8002e5e:	370c      	adds	r7, #12
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr

08002e68 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b084      	sub	sp, #16
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8002e72:	2300      	movs	r3, #0
 8002e74:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002e82:	2b28      	cmp	r3, #40	; 0x28
 8002e84:	d127      	bne.n	8002ed6 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	685a      	ldr	r2, [r3, #4]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e94:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	089b      	lsrs	r3, r3, #2
 8002e9a:	f003 0301 	and.w	r3, r3, #1
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d101      	bne.n	8002ea6 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	09db      	lsrs	r3, r3, #7
 8002eaa:	f003 0301 	and.w	r3, r3, #1
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d103      	bne.n	8002eba <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	68db      	ldr	r3, [r3, #12]
 8002eb6:	81bb      	strh	r3, [r7, #12]
 8002eb8:	e002      	b.n	8002ec0 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	699b      	ldr	r3, [r3, #24]
 8002ebe:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8002ec8:	89ba      	ldrh	r2, [r7, #12]
 8002eca:	7bfb      	ldrb	r3, [r7, #15]
 8002ecc:	4619      	mov	r1, r3
 8002ece:	6878      	ldr	r0, [r7, #4]
 8002ed0:	f7ff f932 	bl	8002138 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002ed4:	e00e      	b.n	8002ef4 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	60bb      	str	r3, [r7, #8]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	695b      	ldr	r3, [r3, #20]
 8002ee0:	60bb      	str	r3, [r7, #8]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	699b      	ldr	r3, [r3, #24]
 8002ee8:	60bb      	str	r3, [r7, #8]
 8002eea:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8002ef4:	bf00      	nop
 8002ef6:	3710      	adds	r7, #16
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}

08002efc <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b084      	sub	sp, #16
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f0a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	685a      	ldr	r2, [r3, #4]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002f1a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	60bb      	str	r3, [r7, #8]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	695b      	ldr	r3, [r3, #20]
 8002f26:	60bb      	str	r3, [r7, #8]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f042 0201 	orr.w	r2, r2, #1
 8002f36:	601a      	str	r2, [r3, #0]
 8002f38:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f48:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f58:	d172      	bne.n	8003040 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002f5a:	7bfb      	ldrb	r3, [r7, #15]
 8002f5c:	2b22      	cmp	r3, #34	; 0x22
 8002f5e:	d002      	beq.n	8002f66 <I2C_Slave_STOPF+0x6a>
 8002f60:	7bfb      	ldrb	r3, [r7, #15]
 8002f62:	2b2a      	cmp	r3, #42	; 0x2a
 8002f64:	d135      	bne.n	8002fd2 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	b29a      	uxth	r2, r3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f78:	b29b      	uxth	r3, r3
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d005      	beq.n	8002f8a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f82:	f043 0204 	orr.w	r2, r3, #4
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	685a      	ldr	r2, [r3, #4]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f98:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f7fe fa43 	bl	800142a <HAL_DMA_GetState>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d049      	beq.n	800303e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fae:	4a69      	ldr	r2, [pc, #420]	; (8003154 <I2C_Slave_STOPF+0x258>)
 8002fb0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f7fe fa15 	bl	80013e6 <HAL_DMA_Abort_IT>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d03d      	beq.n	800303e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fc8:	687a      	ldr	r2, [r7, #4]
 8002fca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002fcc:	4610      	mov	r0, r2
 8002fce:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002fd0:	e035      	b.n	800303e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	b29a      	uxth	r2, r3
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fe4:	b29b      	uxth	r3, r3
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d005      	beq.n	8002ff6 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fee:	f043 0204 	orr.w	r2, r3, #4
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	685a      	ldr	r2, [r3, #4]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003004:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800300a:	4618      	mov	r0, r3
 800300c:	f7fe fa0d 	bl	800142a <HAL_DMA_GetState>
 8003010:	4603      	mov	r3, r0
 8003012:	2b01      	cmp	r3, #1
 8003014:	d014      	beq.n	8003040 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800301a:	4a4e      	ldr	r2, [pc, #312]	; (8003154 <I2C_Slave_STOPF+0x258>)
 800301c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003022:	4618      	mov	r0, r3
 8003024:	f7fe f9df 	bl	80013e6 <HAL_DMA_Abort_IT>
 8003028:	4603      	mov	r3, r0
 800302a:	2b00      	cmp	r3, #0
 800302c:	d008      	beq.n	8003040 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003032:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003034:	687a      	ldr	r2, [r7, #4]
 8003036:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003038:	4610      	mov	r0, r2
 800303a:	4798      	blx	r3
 800303c:	e000      	b.n	8003040 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800303e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003044:	b29b      	uxth	r3, r3
 8003046:	2b00      	cmp	r3, #0
 8003048:	d03e      	beq.n	80030c8 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	695b      	ldr	r3, [r3, #20]
 8003050:	f003 0304 	and.w	r3, r3, #4
 8003054:	2b04      	cmp	r3, #4
 8003056:	d112      	bne.n	800307e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	691a      	ldr	r2, [r3, #16]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003062:	b2d2      	uxtb	r2, r2
 8003064:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306a:	1c5a      	adds	r2, r3, #1
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003074:	b29b      	uxth	r3, r3
 8003076:	3b01      	subs	r3, #1
 8003078:	b29a      	uxth	r2, r3
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	695b      	ldr	r3, [r3, #20]
 8003084:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003088:	2b40      	cmp	r3, #64	; 0x40
 800308a:	d112      	bne.n	80030b2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	691a      	ldr	r2, [r3, #16]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003096:	b2d2      	uxtb	r2, r2
 8003098:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800309e:	1c5a      	adds	r2, r3, #1
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030a8:	b29b      	uxth	r3, r3
 80030aa:	3b01      	subs	r3, #1
 80030ac:	b29a      	uxth	r2, r3
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030b6:	b29b      	uxth	r3, r3
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d005      	beq.n	80030c8 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c0:	f043 0204 	orr.w	r2, r3, #4
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d003      	beq.n	80030d8 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80030d0:	6878      	ldr	r0, [r7, #4]
 80030d2:	f000 f8b3 	bl	800323c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80030d6:	e039      	b.n	800314c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80030d8:	7bfb      	ldrb	r3, [r7, #15]
 80030da:	2b2a      	cmp	r3, #42	; 0x2a
 80030dc:	d109      	bne.n	80030f2 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2200      	movs	r2, #0
 80030e2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2228      	movs	r2, #40	; 0x28
 80030e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80030ec:	6878      	ldr	r0, [r7, #4]
 80030ee:	f7ff f819 	bl	8002124 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	2b28      	cmp	r3, #40	; 0x28
 80030fc:	d111      	bne.n	8003122 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	4a15      	ldr	r2, [pc, #84]	; (8003158 <I2C_Slave_STOPF+0x25c>)
 8003102:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2200      	movs	r2, #0
 8003108:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2220      	movs	r2, #32
 800310e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2200      	movs	r2, #0
 8003116:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f7ff f81a 	bl	8002154 <HAL_I2C_ListenCpltCallback>
}
 8003120:	e014      	b.n	800314c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003126:	2b22      	cmp	r3, #34	; 0x22
 8003128:	d002      	beq.n	8003130 <I2C_Slave_STOPF+0x234>
 800312a:	7bfb      	ldrb	r3, [r7, #15]
 800312c:	2b22      	cmp	r3, #34	; 0x22
 800312e:	d10d      	bne.n	800314c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2200      	movs	r2, #0
 8003134:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2220      	movs	r2, #32
 800313a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2200      	movs	r2, #0
 8003142:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f7fe ffec 	bl	8002124 <HAL_I2C_SlaveRxCpltCallback>
}
 800314c:	bf00      	nop
 800314e:	3710      	adds	r7, #16
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}
 8003154:	080034a1 	.word	0x080034a1
 8003158:	ffff0000 	.word	0xffff0000

0800315c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b084      	sub	sp, #16
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800316a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003170:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	2b08      	cmp	r3, #8
 8003176:	d002      	beq.n	800317e <I2C_Slave_AF+0x22>
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	2b20      	cmp	r3, #32
 800317c:	d129      	bne.n	80031d2 <I2C_Slave_AF+0x76>
 800317e:	7bfb      	ldrb	r3, [r7, #15]
 8003180:	2b28      	cmp	r3, #40	; 0x28
 8003182:	d126      	bne.n	80031d2 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	4a2c      	ldr	r2, [pc, #176]	; (8003238 <I2C_Slave_AF+0xdc>)
 8003188:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	685a      	ldr	r2, [r3, #4]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003198:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80031a2:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031b2:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2200      	movs	r2, #0
 80031b8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2220      	movs	r2, #32
 80031be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2200      	movs	r2, #0
 80031c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f7fe ffc2 	bl	8002154 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80031d0:	e02e      	b.n	8003230 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80031d2:	7bfb      	ldrb	r3, [r7, #15]
 80031d4:	2b21      	cmp	r3, #33	; 0x21
 80031d6:	d126      	bne.n	8003226 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	4a17      	ldr	r2, [pc, #92]	; (8003238 <I2C_Slave_AF+0xdc>)
 80031dc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2221      	movs	r2, #33	; 0x21
 80031e2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2220      	movs	r2, #32
 80031e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2200      	movs	r2, #0
 80031f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	685a      	ldr	r2, [r3, #4]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003202:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800320c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800321c:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f7fe ff76 	bl	8002110 <HAL_I2C_SlaveTxCpltCallback>
}
 8003224:	e004      	b.n	8003230 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800322e:	615a      	str	r2, [r3, #20]
}
 8003230:	bf00      	nop
 8003232:	3710      	adds	r7, #16
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}
 8003238:	ffff0000 	.word	0xffff0000

0800323c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b084      	sub	sp, #16
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800324a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003252:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003254:	7bbb      	ldrb	r3, [r7, #14]
 8003256:	2b10      	cmp	r3, #16
 8003258:	d002      	beq.n	8003260 <I2C_ITError+0x24>
 800325a:	7bbb      	ldrb	r3, [r7, #14]
 800325c:	2b40      	cmp	r3, #64	; 0x40
 800325e:	d10a      	bne.n	8003276 <I2C_ITError+0x3a>
 8003260:	7bfb      	ldrb	r3, [r7, #15]
 8003262:	2b22      	cmp	r3, #34	; 0x22
 8003264:	d107      	bne.n	8003276 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003274:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003276:	7bfb      	ldrb	r3, [r7, #15]
 8003278:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800327c:	2b28      	cmp	r3, #40	; 0x28
 800327e:	d107      	bne.n	8003290 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2200      	movs	r2, #0
 8003284:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2228      	movs	r2, #40	; 0x28
 800328a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800328e:	e015      	b.n	80032bc <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800329a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800329e:	d00a      	beq.n	80032b6 <I2C_ITError+0x7a>
 80032a0:	7bfb      	ldrb	r3, [r7, #15]
 80032a2:	2b60      	cmp	r3, #96	; 0x60
 80032a4:	d007      	beq.n	80032b6 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2220      	movs	r2, #32
 80032aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2200      	movs	r2, #0
 80032b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2200      	movs	r2, #0
 80032ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032ca:	d162      	bne.n	8003392 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	685a      	ldr	r2, [r3, #4]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032da:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d020      	beq.n	800332c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032ee:	4a6a      	ldr	r2, [pc, #424]	; (8003498 <I2C_ITError+0x25c>)
 80032f0:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032f6:	4618      	mov	r0, r3
 80032f8:	f7fe f875 	bl	80013e6 <HAL_DMA_Abort_IT>
 80032fc:	4603      	mov	r3, r0
 80032fe:	2b00      	cmp	r3, #0
 8003300:	f000 8089 	beq.w	8003416 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f022 0201 	bic.w	r2, r2, #1
 8003312:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2220      	movs	r2, #32
 8003318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003320:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003322:	687a      	ldr	r2, [r7, #4]
 8003324:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003326:	4610      	mov	r0, r2
 8003328:	4798      	blx	r3
 800332a:	e074      	b.n	8003416 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003330:	4a59      	ldr	r2, [pc, #356]	; (8003498 <I2C_ITError+0x25c>)
 8003332:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003338:	4618      	mov	r0, r3
 800333a:	f7fe f854 	bl	80013e6 <HAL_DMA_Abort_IT>
 800333e:	4603      	mov	r3, r0
 8003340:	2b00      	cmp	r3, #0
 8003342:	d068      	beq.n	8003416 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	695b      	ldr	r3, [r3, #20]
 800334a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800334e:	2b40      	cmp	r3, #64	; 0x40
 8003350:	d10b      	bne.n	800336a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	691a      	ldr	r2, [r3, #16]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800335c:	b2d2      	uxtb	r2, r2
 800335e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003364:	1c5a      	adds	r2, r3, #1
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f022 0201 	bic.w	r2, r2, #1
 8003378:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2220      	movs	r2, #32
 800337e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003386:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003388:	687a      	ldr	r2, [r7, #4]
 800338a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800338c:	4610      	mov	r0, r2
 800338e:	4798      	blx	r3
 8003390:	e041      	b.n	8003416 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003398:	b2db      	uxtb	r3, r3
 800339a:	2b60      	cmp	r3, #96	; 0x60
 800339c:	d125      	bne.n	80033ea <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2220      	movs	r2, #32
 80033a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2200      	movs	r2, #0
 80033aa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	695b      	ldr	r3, [r3, #20]
 80033b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033b6:	2b40      	cmp	r3, #64	; 0x40
 80033b8:	d10b      	bne.n	80033d2 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	691a      	ldr	r2, [r3, #16]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c4:	b2d2      	uxtb	r2, r2
 80033c6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033cc:	1c5a      	adds	r2, r3, #1
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f022 0201 	bic.w	r2, r2, #1
 80033e0:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f7fe fede 	bl	80021a4 <HAL_I2C_AbortCpltCallback>
 80033e8:	e015      	b.n	8003416 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	695b      	ldr	r3, [r3, #20]
 80033f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033f4:	2b40      	cmp	r3, #64	; 0x40
 80033f6:	d10b      	bne.n	8003410 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	691a      	ldr	r2, [r3, #16]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003402:	b2d2      	uxtb	r2, r2
 8003404:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800340a:	1c5a      	adds	r2, r3, #1
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003410:	6878      	ldr	r0, [r7, #4]
 8003412:	f7fe febd 	bl	8002190 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	f003 0301 	and.w	r3, r3, #1
 8003422:	2b00      	cmp	r3, #0
 8003424:	d10e      	bne.n	8003444 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800342c:	2b00      	cmp	r3, #0
 800342e:	d109      	bne.n	8003444 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003436:	2b00      	cmp	r3, #0
 8003438:	d104      	bne.n	8003444 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003440:	2b00      	cmp	r3, #0
 8003442:	d007      	beq.n	8003454 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	685a      	ldr	r2, [r3, #4]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003452:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800345a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003460:	f003 0304 	and.w	r3, r3, #4
 8003464:	2b04      	cmp	r3, #4
 8003466:	d113      	bne.n	8003490 <I2C_ITError+0x254>
 8003468:	7bfb      	ldrb	r3, [r7, #15]
 800346a:	2b28      	cmp	r3, #40	; 0x28
 800346c:	d110      	bne.n	8003490 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	4a0a      	ldr	r2, [pc, #40]	; (800349c <I2C_ITError+0x260>)
 8003472:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2220      	movs	r2, #32
 800347e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2200      	movs	r2, #0
 8003486:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f7fe fe62 	bl	8002154 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003490:	bf00      	nop
 8003492:	3710      	adds	r7, #16
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}
 8003498:	080034a1 	.word	0x080034a1
 800349c:	ffff0000 	.word	0xffff0000

080034a0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b086      	sub	sp, #24
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80034a8:	2300      	movs	r3, #0
 80034aa:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034b0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034b8:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80034ba:	4b4b      	ldr	r3, [pc, #300]	; (80035e8 <I2C_DMAAbort+0x148>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	08db      	lsrs	r3, r3, #3
 80034c0:	4a4a      	ldr	r2, [pc, #296]	; (80035ec <I2C_DMAAbort+0x14c>)
 80034c2:	fba2 2303 	umull	r2, r3, r2, r3
 80034c6:	0a1a      	lsrs	r2, r3, #8
 80034c8:	4613      	mov	r3, r2
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	4413      	add	r3, r2
 80034ce:	00da      	lsls	r2, r3, #3
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d106      	bne.n	80034e8 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034de:	f043 0220 	orr.w	r2, r3, #32
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80034e6:	e00a      	b.n	80034fe <I2C_DMAAbort+0x5e>
    }
    count--;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	3b01      	subs	r3, #1
 80034ec:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034fc:	d0ea      	beq.n	80034d4 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003502:	2b00      	cmp	r3, #0
 8003504:	d003      	beq.n	800350e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800350a:	2200      	movs	r2, #0
 800350c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003512:	2b00      	cmp	r3, #0
 8003514:	d003      	beq.n	800351e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800351a:	2200      	movs	r2, #0
 800351c:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800352c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	2200      	movs	r2, #0
 8003532:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003538:	2b00      	cmp	r3, #0
 800353a:	d003      	beq.n	8003544 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003540:	2200      	movs	r2, #0
 8003542:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003548:	2b00      	cmp	r3, #0
 800354a:	d003      	beq.n	8003554 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003550:	2200      	movs	r2, #0
 8003552:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f022 0201 	bic.w	r2, r2, #1
 8003562:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800356a:	b2db      	uxtb	r3, r3
 800356c:	2b60      	cmp	r3, #96	; 0x60
 800356e:	d10e      	bne.n	800358e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	2220      	movs	r2, #32
 8003574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	2200      	movs	r2, #0
 800357c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	2200      	movs	r2, #0
 8003584:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003586:	6978      	ldr	r0, [r7, #20]
 8003588:	f7fe fe0c 	bl	80021a4 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800358c:	e027      	b.n	80035de <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800358e:	7cfb      	ldrb	r3, [r7, #19]
 8003590:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003594:	2b28      	cmp	r3, #40	; 0x28
 8003596:	d117      	bne.n	80035c8 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f042 0201 	orr.w	r2, r2, #1
 80035a6:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80035b6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	2200      	movs	r2, #0
 80035bc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	2228      	movs	r2, #40	; 0x28
 80035c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80035c6:	e007      	b.n	80035d8 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	2220      	movs	r2, #32
 80035cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	2200      	movs	r2, #0
 80035d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80035d8:	6978      	ldr	r0, [r7, #20]
 80035da:	f7fe fdd9 	bl	8002190 <HAL_I2C_ErrorCallback>
}
 80035de:	bf00      	nop
 80035e0:	3718      	adds	r7, #24
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	bf00      	nop
 80035e8:	20000000 	.word	0x20000000
 80035ec:	14f8b589 	.word	0x14f8b589

080035f0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b084      	sub	sp, #16
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	60f8      	str	r0, [r7, #12]
 80035f8:	60b9      	str	r1, [r7, #8]
 80035fa:	603b      	str	r3, [r7, #0]
 80035fc:	4613      	mov	r3, r2
 80035fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003600:	e025      	b.n	800364e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003608:	d021      	beq.n	800364e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800360a:	f7fd fd3b 	bl	8001084 <HAL_GetTick>
 800360e:	4602      	mov	r2, r0
 8003610:	69bb      	ldr	r3, [r7, #24]
 8003612:	1ad3      	subs	r3, r2, r3
 8003614:	683a      	ldr	r2, [r7, #0]
 8003616:	429a      	cmp	r2, r3
 8003618:	d302      	bcc.n	8003620 <I2C_WaitOnFlagUntilTimeout+0x30>
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d116      	bne.n	800364e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2200      	movs	r2, #0
 8003624:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2220      	movs	r2, #32
 800362a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2200      	movs	r2, #0
 8003632:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363a:	f043 0220 	orr.w	r2, r3, #32
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2200      	movs	r2, #0
 8003646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e023      	b.n	8003696 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	0c1b      	lsrs	r3, r3, #16
 8003652:	b2db      	uxtb	r3, r3
 8003654:	2b01      	cmp	r3, #1
 8003656:	d10d      	bne.n	8003674 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	695b      	ldr	r3, [r3, #20]
 800365e:	43da      	mvns	r2, r3
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	4013      	ands	r3, r2
 8003664:	b29b      	uxth	r3, r3
 8003666:	2b00      	cmp	r3, #0
 8003668:	bf0c      	ite	eq
 800366a:	2301      	moveq	r3, #1
 800366c:	2300      	movne	r3, #0
 800366e:	b2db      	uxtb	r3, r3
 8003670:	461a      	mov	r2, r3
 8003672:	e00c      	b.n	800368e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	699b      	ldr	r3, [r3, #24]
 800367a:	43da      	mvns	r2, r3
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	4013      	ands	r3, r2
 8003680:	b29b      	uxth	r3, r3
 8003682:	2b00      	cmp	r3, #0
 8003684:	bf0c      	ite	eq
 8003686:	2301      	moveq	r3, #1
 8003688:	2300      	movne	r3, #0
 800368a:	b2db      	uxtb	r3, r3
 800368c:	461a      	mov	r2, r3
 800368e:	79fb      	ldrb	r3, [r7, #7]
 8003690:	429a      	cmp	r2, r3
 8003692:	d0b6      	beq.n	8003602 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003694:	2300      	movs	r3, #0
}
 8003696:	4618      	mov	r0, r3
 8003698:	3710      	adds	r7, #16
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
	...

080036a0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b085      	sub	sp, #20
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80036a8:	2300      	movs	r3, #0
 80036aa:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80036ac:	4b13      	ldr	r3, [pc, #76]	; (80036fc <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	08db      	lsrs	r3, r3, #3
 80036b2:	4a13      	ldr	r2, [pc, #76]	; (8003700 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80036b4:	fba2 2303 	umull	r2, r3, r2, r3
 80036b8:	0a1a      	lsrs	r2, r3, #8
 80036ba:	4613      	mov	r3, r2
 80036bc:	009b      	lsls	r3, r3, #2
 80036be:	4413      	add	r3, r2
 80036c0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	3b01      	subs	r3, #1
 80036c6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d107      	bne.n	80036de <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d2:	f043 0220 	orr.w	r2, r3, #32
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e008      	b.n	80036f0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036ec:	d0e9      	beq.n	80036c2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80036ee:	2300      	movs	r3, #0
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3714      	adds	r7, #20
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr
 80036fc:	20000000 	.word	0x20000000
 8003700:	14f8b589 	.word	0x14f8b589

08003704 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8003704:	b480      	push	{r7}
 8003706:	b083      	sub	sp, #12
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003710:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003714:	d103      	bne.n	800371e <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2201      	movs	r2, #1
 800371a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800371c:	e007      	b.n	800372e <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003722:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003726:	d102      	bne.n	800372e <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2208      	movs	r2, #8
 800372c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800372e:	bf00      	nop
 8003730:	370c      	adds	r7, #12
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr

0800373a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800373a:	b480      	push	{r7}
 800373c:	b083      	sub	sp, #12
 800373e:	af00      	add	r7, sp, #0
 8003740:	6078      	str	r0, [r7, #4]
 8003742:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800374a:	b2db      	uxtb	r3, r3
 800374c:	2b20      	cmp	r3, #32
 800374e:	d129      	bne.n	80037a4 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2224      	movs	r2, #36	; 0x24
 8003754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f022 0201 	bic.w	r2, r2, #1
 8003766:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f022 0210 	bic.w	r2, r2, #16
 8003776:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	683a      	ldr	r2, [r7, #0]
 8003784:	430a      	orrs	r2, r1
 8003786:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f042 0201 	orr.w	r2, r2, #1
 8003796:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2220      	movs	r2, #32
 800379c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80037a0:	2300      	movs	r3, #0
 80037a2:	e000      	b.n	80037a6 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80037a4:	2302      	movs	r3, #2
  }
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	370c      	adds	r7, #12
 80037aa:	46bd      	mov	sp, r7
 80037ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b0:	4770      	bx	lr

080037b2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80037b2:	b480      	push	{r7}
 80037b4:	b085      	sub	sp, #20
 80037b6:	af00      	add	r7, sp, #0
 80037b8:	6078      	str	r0, [r7, #4]
 80037ba:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80037bc:	2300      	movs	r3, #0
 80037be:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	2b20      	cmp	r3, #32
 80037ca:	d12a      	bne.n	8003822 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2224      	movs	r2, #36	; 0x24
 80037d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f022 0201 	bic.w	r2, r2, #1
 80037e2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ea:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80037ec:	89fb      	ldrh	r3, [r7, #14]
 80037ee:	f023 030f 	bic.w	r3, r3, #15
 80037f2:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	b29a      	uxth	r2, r3
 80037f8:	89fb      	ldrh	r3, [r7, #14]
 80037fa:	4313      	orrs	r3, r2
 80037fc:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	89fa      	ldrh	r2, [r7, #14]
 8003804:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f042 0201 	orr.w	r2, r2, #1
 8003814:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2220      	movs	r2, #32
 800381a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800381e:	2300      	movs	r3, #0
 8003820:	e000      	b.n	8003824 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003822:	2302      	movs	r3, #2
  }
}
 8003824:	4618      	mov	r0, r3
 8003826:	3714      	adds	r7, #20
 8003828:	46bd      	mov	sp, r7
 800382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382e:	4770      	bx	lr

08003830 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b082      	sub	sp, #8
 8003834:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003836:	2300      	movs	r3, #0
 8003838:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800383a:	2300      	movs	r3, #0
 800383c:	603b      	str	r3, [r7, #0]
 800383e:	4b20      	ldr	r3, [pc, #128]	; (80038c0 <HAL_PWREx_EnableOverDrive+0x90>)
 8003840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003842:	4a1f      	ldr	r2, [pc, #124]	; (80038c0 <HAL_PWREx_EnableOverDrive+0x90>)
 8003844:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003848:	6413      	str	r3, [r2, #64]	; 0x40
 800384a:	4b1d      	ldr	r3, [pc, #116]	; (80038c0 <HAL_PWREx_EnableOverDrive+0x90>)
 800384c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800384e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003852:	603b      	str	r3, [r7, #0]
 8003854:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003856:	4b1b      	ldr	r3, [pc, #108]	; (80038c4 <HAL_PWREx_EnableOverDrive+0x94>)
 8003858:	2201      	movs	r2, #1
 800385a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800385c:	f7fd fc12 	bl	8001084 <HAL_GetTick>
 8003860:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003862:	e009      	b.n	8003878 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003864:	f7fd fc0e 	bl	8001084 <HAL_GetTick>
 8003868:	4602      	mov	r2, r0
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	1ad3      	subs	r3, r2, r3
 800386e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003872:	d901      	bls.n	8003878 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003874:	2303      	movs	r3, #3
 8003876:	e01f      	b.n	80038b8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003878:	4b13      	ldr	r3, [pc, #76]	; (80038c8 <HAL_PWREx_EnableOverDrive+0x98>)
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003880:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003884:	d1ee      	bne.n	8003864 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003886:	4b11      	ldr	r3, [pc, #68]	; (80038cc <HAL_PWREx_EnableOverDrive+0x9c>)
 8003888:	2201      	movs	r2, #1
 800388a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800388c:	f7fd fbfa 	bl	8001084 <HAL_GetTick>
 8003890:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003892:	e009      	b.n	80038a8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003894:	f7fd fbf6 	bl	8001084 <HAL_GetTick>
 8003898:	4602      	mov	r2, r0
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80038a2:	d901      	bls.n	80038a8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80038a4:	2303      	movs	r3, #3
 80038a6:	e007      	b.n	80038b8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80038a8:	4b07      	ldr	r3, [pc, #28]	; (80038c8 <HAL_PWREx_EnableOverDrive+0x98>)
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80038b4:	d1ee      	bne.n	8003894 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80038b6:	2300      	movs	r3, #0
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	3708      	adds	r7, #8
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}
 80038c0:	40023800 	.word	0x40023800
 80038c4:	420e0040 	.word	0x420e0040
 80038c8:	40007000 	.word	0x40007000
 80038cc:	420e0044 	.word	0x420e0044

080038d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b086      	sub	sp, #24
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d101      	bne.n	80038e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e267      	b.n	8003db2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 0301 	and.w	r3, r3, #1
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d075      	beq.n	80039da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80038ee:	4b88      	ldr	r3, [pc, #544]	; (8003b10 <HAL_RCC_OscConfig+0x240>)
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	f003 030c 	and.w	r3, r3, #12
 80038f6:	2b04      	cmp	r3, #4
 80038f8:	d00c      	beq.n	8003914 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038fa:	4b85      	ldr	r3, [pc, #532]	; (8003b10 <HAL_RCC_OscConfig+0x240>)
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003902:	2b08      	cmp	r3, #8
 8003904:	d112      	bne.n	800392c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003906:	4b82      	ldr	r3, [pc, #520]	; (8003b10 <HAL_RCC_OscConfig+0x240>)
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800390e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003912:	d10b      	bne.n	800392c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003914:	4b7e      	ldr	r3, [pc, #504]	; (8003b10 <HAL_RCC_OscConfig+0x240>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800391c:	2b00      	cmp	r3, #0
 800391e:	d05b      	beq.n	80039d8 <HAL_RCC_OscConfig+0x108>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d157      	bne.n	80039d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	e242      	b.n	8003db2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003934:	d106      	bne.n	8003944 <HAL_RCC_OscConfig+0x74>
 8003936:	4b76      	ldr	r3, [pc, #472]	; (8003b10 <HAL_RCC_OscConfig+0x240>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a75      	ldr	r2, [pc, #468]	; (8003b10 <HAL_RCC_OscConfig+0x240>)
 800393c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003940:	6013      	str	r3, [r2, #0]
 8003942:	e01d      	b.n	8003980 <HAL_RCC_OscConfig+0xb0>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800394c:	d10c      	bne.n	8003968 <HAL_RCC_OscConfig+0x98>
 800394e:	4b70      	ldr	r3, [pc, #448]	; (8003b10 <HAL_RCC_OscConfig+0x240>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a6f      	ldr	r2, [pc, #444]	; (8003b10 <HAL_RCC_OscConfig+0x240>)
 8003954:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003958:	6013      	str	r3, [r2, #0]
 800395a:	4b6d      	ldr	r3, [pc, #436]	; (8003b10 <HAL_RCC_OscConfig+0x240>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a6c      	ldr	r2, [pc, #432]	; (8003b10 <HAL_RCC_OscConfig+0x240>)
 8003960:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003964:	6013      	str	r3, [r2, #0]
 8003966:	e00b      	b.n	8003980 <HAL_RCC_OscConfig+0xb0>
 8003968:	4b69      	ldr	r3, [pc, #420]	; (8003b10 <HAL_RCC_OscConfig+0x240>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a68      	ldr	r2, [pc, #416]	; (8003b10 <HAL_RCC_OscConfig+0x240>)
 800396e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003972:	6013      	str	r3, [r2, #0]
 8003974:	4b66      	ldr	r3, [pc, #408]	; (8003b10 <HAL_RCC_OscConfig+0x240>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a65      	ldr	r2, [pc, #404]	; (8003b10 <HAL_RCC_OscConfig+0x240>)
 800397a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800397e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d013      	beq.n	80039b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003988:	f7fd fb7c 	bl	8001084 <HAL_GetTick>
 800398c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800398e:	e008      	b.n	80039a2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003990:	f7fd fb78 	bl	8001084 <HAL_GetTick>
 8003994:	4602      	mov	r2, r0
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	1ad3      	subs	r3, r2, r3
 800399a:	2b64      	cmp	r3, #100	; 0x64
 800399c:	d901      	bls.n	80039a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800399e:	2303      	movs	r3, #3
 80039a0:	e207      	b.n	8003db2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039a2:	4b5b      	ldr	r3, [pc, #364]	; (8003b10 <HAL_RCC_OscConfig+0x240>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d0f0      	beq.n	8003990 <HAL_RCC_OscConfig+0xc0>
 80039ae:	e014      	b.n	80039da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039b0:	f7fd fb68 	bl	8001084 <HAL_GetTick>
 80039b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039b6:	e008      	b.n	80039ca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039b8:	f7fd fb64 	bl	8001084 <HAL_GetTick>
 80039bc:	4602      	mov	r2, r0
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	1ad3      	subs	r3, r2, r3
 80039c2:	2b64      	cmp	r3, #100	; 0x64
 80039c4:	d901      	bls.n	80039ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80039c6:	2303      	movs	r3, #3
 80039c8:	e1f3      	b.n	8003db2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039ca:	4b51      	ldr	r3, [pc, #324]	; (8003b10 <HAL_RCC_OscConfig+0x240>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d1f0      	bne.n	80039b8 <HAL_RCC_OscConfig+0xe8>
 80039d6:	e000      	b.n	80039da <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 0302 	and.w	r3, r3, #2
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d063      	beq.n	8003aae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80039e6:	4b4a      	ldr	r3, [pc, #296]	; (8003b10 <HAL_RCC_OscConfig+0x240>)
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	f003 030c 	and.w	r3, r3, #12
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d00b      	beq.n	8003a0a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039f2:	4b47      	ldr	r3, [pc, #284]	; (8003b10 <HAL_RCC_OscConfig+0x240>)
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80039fa:	2b08      	cmp	r3, #8
 80039fc:	d11c      	bne.n	8003a38 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039fe:	4b44      	ldr	r3, [pc, #272]	; (8003b10 <HAL_RCC_OscConfig+0x240>)
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d116      	bne.n	8003a38 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a0a:	4b41      	ldr	r3, [pc, #260]	; (8003b10 <HAL_RCC_OscConfig+0x240>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 0302 	and.w	r3, r3, #2
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d005      	beq.n	8003a22 <HAL_RCC_OscConfig+0x152>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	68db      	ldr	r3, [r3, #12]
 8003a1a:	2b01      	cmp	r3, #1
 8003a1c:	d001      	beq.n	8003a22 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e1c7      	b.n	8003db2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a22:	4b3b      	ldr	r3, [pc, #236]	; (8003b10 <HAL_RCC_OscConfig+0x240>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	691b      	ldr	r3, [r3, #16]
 8003a2e:	00db      	lsls	r3, r3, #3
 8003a30:	4937      	ldr	r1, [pc, #220]	; (8003b10 <HAL_RCC_OscConfig+0x240>)
 8003a32:	4313      	orrs	r3, r2
 8003a34:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a36:	e03a      	b.n	8003aae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	68db      	ldr	r3, [r3, #12]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d020      	beq.n	8003a82 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a40:	4b34      	ldr	r3, [pc, #208]	; (8003b14 <HAL_RCC_OscConfig+0x244>)
 8003a42:	2201      	movs	r2, #1
 8003a44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a46:	f7fd fb1d 	bl	8001084 <HAL_GetTick>
 8003a4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a4c:	e008      	b.n	8003a60 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a4e:	f7fd fb19 	bl	8001084 <HAL_GetTick>
 8003a52:	4602      	mov	r2, r0
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	1ad3      	subs	r3, r2, r3
 8003a58:	2b02      	cmp	r3, #2
 8003a5a:	d901      	bls.n	8003a60 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003a5c:	2303      	movs	r3, #3
 8003a5e:	e1a8      	b.n	8003db2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a60:	4b2b      	ldr	r3, [pc, #172]	; (8003b10 <HAL_RCC_OscConfig+0x240>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f003 0302 	and.w	r3, r3, #2
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d0f0      	beq.n	8003a4e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a6c:	4b28      	ldr	r3, [pc, #160]	; (8003b10 <HAL_RCC_OscConfig+0x240>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	691b      	ldr	r3, [r3, #16]
 8003a78:	00db      	lsls	r3, r3, #3
 8003a7a:	4925      	ldr	r1, [pc, #148]	; (8003b10 <HAL_RCC_OscConfig+0x240>)
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	600b      	str	r3, [r1, #0]
 8003a80:	e015      	b.n	8003aae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a82:	4b24      	ldr	r3, [pc, #144]	; (8003b14 <HAL_RCC_OscConfig+0x244>)
 8003a84:	2200      	movs	r2, #0
 8003a86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a88:	f7fd fafc 	bl	8001084 <HAL_GetTick>
 8003a8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a8e:	e008      	b.n	8003aa2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a90:	f7fd faf8 	bl	8001084 <HAL_GetTick>
 8003a94:	4602      	mov	r2, r0
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	1ad3      	subs	r3, r2, r3
 8003a9a:	2b02      	cmp	r3, #2
 8003a9c:	d901      	bls.n	8003aa2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003a9e:	2303      	movs	r3, #3
 8003aa0:	e187      	b.n	8003db2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003aa2:	4b1b      	ldr	r3, [pc, #108]	; (8003b10 <HAL_RCC_OscConfig+0x240>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 0302 	and.w	r3, r3, #2
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d1f0      	bne.n	8003a90 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 0308 	and.w	r3, r3, #8
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d036      	beq.n	8003b28 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	695b      	ldr	r3, [r3, #20]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d016      	beq.n	8003af0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ac2:	4b15      	ldr	r3, [pc, #84]	; (8003b18 <HAL_RCC_OscConfig+0x248>)
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ac8:	f7fd fadc 	bl	8001084 <HAL_GetTick>
 8003acc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ace:	e008      	b.n	8003ae2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ad0:	f7fd fad8 	bl	8001084 <HAL_GetTick>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	2b02      	cmp	r3, #2
 8003adc:	d901      	bls.n	8003ae2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003ade:	2303      	movs	r3, #3
 8003ae0:	e167      	b.n	8003db2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ae2:	4b0b      	ldr	r3, [pc, #44]	; (8003b10 <HAL_RCC_OscConfig+0x240>)
 8003ae4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ae6:	f003 0302 	and.w	r3, r3, #2
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d0f0      	beq.n	8003ad0 <HAL_RCC_OscConfig+0x200>
 8003aee:	e01b      	b.n	8003b28 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003af0:	4b09      	ldr	r3, [pc, #36]	; (8003b18 <HAL_RCC_OscConfig+0x248>)
 8003af2:	2200      	movs	r2, #0
 8003af4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003af6:	f7fd fac5 	bl	8001084 <HAL_GetTick>
 8003afa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003afc:	e00e      	b.n	8003b1c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003afe:	f7fd fac1 	bl	8001084 <HAL_GetTick>
 8003b02:	4602      	mov	r2, r0
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	1ad3      	subs	r3, r2, r3
 8003b08:	2b02      	cmp	r3, #2
 8003b0a:	d907      	bls.n	8003b1c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003b0c:	2303      	movs	r3, #3
 8003b0e:	e150      	b.n	8003db2 <HAL_RCC_OscConfig+0x4e2>
 8003b10:	40023800 	.word	0x40023800
 8003b14:	42470000 	.word	0x42470000
 8003b18:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b1c:	4b88      	ldr	r3, [pc, #544]	; (8003d40 <HAL_RCC_OscConfig+0x470>)
 8003b1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b20:	f003 0302 	and.w	r3, r3, #2
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d1ea      	bne.n	8003afe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f003 0304 	and.w	r3, r3, #4
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	f000 8097 	beq.w	8003c64 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b36:	2300      	movs	r3, #0
 8003b38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b3a:	4b81      	ldr	r3, [pc, #516]	; (8003d40 <HAL_RCC_OscConfig+0x470>)
 8003b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d10f      	bne.n	8003b66 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b46:	2300      	movs	r3, #0
 8003b48:	60bb      	str	r3, [r7, #8]
 8003b4a:	4b7d      	ldr	r3, [pc, #500]	; (8003d40 <HAL_RCC_OscConfig+0x470>)
 8003b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b4e:	4a7c      	ldr	r2, [pc, #496]	; (8003d40 <HAL_RCC_OscConfig+0x470>)
 8003b50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b54:	6413      	str	r3, [r2, #64]	; 0x40
 8003b56:	4b7a      	ldr	r3, [pc, #488]	; (8003d40 <HAL_RCC_OscConfig+0x470>)
 8003b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b5e:	60bb      	str	r3, [r7, #8]
 8003b60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b62:	2301      	movs	r3, #1
 8003b64:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b66:	4b77      	ldr	r3, [pc, #476]	; (8003d44 <HAL_RCC_OscConfig+0x474>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d118      	bne.n	8003ba4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b72:	4b74      	ldr	r3, [pc, #464]	; (8003d44 <HAL_RCC_OscConfig+0x474>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a73      	ldr	r2, [pc, #460]	; (8003d44 <HAL_RCC_OscConfig+0x474>)
 8003b78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b7e:	f7fd fa81 	bl	8001084 <HAL_GetTick>
 8003b82:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b84:	e008      	b.n	8003b98 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b86:	f7fd fa7d 	bl	8001084 <HAL_GetTick>
 8003b8a:	4602      	mov	r2, r0
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	1ad3      	subs	r3, r2, r3
 8003b90:	2b02      	cmp	r3, #2
 8003b92:	d901      	bls.n	8003b98 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003b94:	2303      	movs	r3, #3
 8003b96:	e10c      	b.n	8003db2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b98:	4b6a      	ldr	r3, [pc, #424]	; (8003d44 <HAL_RCC_OscConfig+0x474>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d0f0      	beq.n	8003b86 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	d106      	bne.n	8003bba <HAL_RCC_OscConfig+0x2ea>
 8003bac:	4b64      	ldr	r3, [pc, #400]	; (8003d40 <HAL_RCC_OscConfig+0x470>)
 8003bae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bb0:	4a63      	ldr	r2, [pc, #396]	; (8003d40 <HAL_RCC_OscConfig+0x470>)
 8003bb2:	f043 0301 	orr.w	r3, r3, #1
 8003bb6:	6713      	str	r3, [r2, #112]	; 0x70
 8003bb8:	e01c      	b.n	8003bf4 <HAL_RCC_OscConfig+0x324>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	2b05      	cmp	r3, #5
 8003bc0:	d10c      	bne.n	8003bdc <HAL_RCC_OscConfig+0x30c>
 8003bc2:	4b5f      	ldr	r3, [pc, #380]	; (8003d40 <HAL_RCC_OscConfig+0x470>)
 8003bc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bc6:	4a5e      	ldr	r2, [pc, #376]	; (8003d40 <HAL_RCC_OscConfig+0x470>)
 8003bc8:	f043 0304 	orr.w	r3, r3, #4
 8003bcc:	6713      	str	r3, [r2, #112]	; 0x70
 8003bce:	4b5c      	ldr	r3, [pc, #368]	; (8003d40 <HAL_RCC_OscConfig+0x470>)
 8003bd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bd2:	4a5b      	ldr	r2, [pc, #364]	; (8003d40 <HAL_RCC_OscConfig+0x470>)
 8003bd4:	f043 0301 	orr.w	r3, r3, #1
 8003bd8:	6713      	str	r3, [r2, #112]	; 0x70
 8003bda:	e00b      	b.n	8003bf4 <HAL_RCC_OscConfig+0x324>
 8003bdc:	4b58      	ldr	r3, [pc, #352]	; (8003d40 <HAL_RCC_OscConfig+0x470>)
 8003bde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003be0:	4a57      	ldr	r2, [pc, #348]	; (8003d40 <HAL_RCC_OscConfig+0x470>)
 8003be2:	f023 0301 	bic.w	r3, r3, #1
 8003be6:	6713      	str	r3, [r2, #112]	; 0x70
 8003be8:	4b55      	ldr	r3, [pc, #340]	; (8003d40 <HAL_RCC_OscConfig+0x470>)
 8003bea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bec:	4a54      	ldr	r2, [pc, #336]	; (8003d40 <HAL_RCC_OscConfig+0x470>)
 8003bee:	f023 0304 	bic.w	r3, r3, #4
 8003bf2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d015      	beq.n	8003c28 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bfc:	f7fd fa42 	bl	8001084 <HAL_GetTick>
 8003c00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c02:	e00a      	b.n	8003c1a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c04:	f7fd fa3e 	bl	8001084 <HAL_GetTick>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	1ad3      	subs	r3, r2, r3
 8003c0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d901      	bls.n	8003c1a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003c16:	2303      	movs	r3, #3
 8003c18:	e0cb      	b.n	8003db2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c1a:	4b49      	ldr	r3, [pc, #292]	; (8003d40 <HAL_RCC_OscConfig+0x470>)
 8003c1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c1e:	f003 0302 	and.w	r3, r3, #2
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d0ee      	beq.n	8003c04 <HAL_RCC_OscConfig+0x334>
 8003c26:	e014      	b.n	8003c52 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c28:	f7fd fa2c 	bl	8001084 <HAL_GetTick>
 8003c2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c2e:	e00a      	b.n	8003c46 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c30:	f7fd fa28 	bl	8001084 <HAL_GetTick>
 8003c34:	4602      	mov	r2, r0
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	1ad3      	subs	r3, r2, r3
 8003c3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d901      	bls.n	8003c46 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003c42:	2303      	movs	r3, #3
 8003c44:	e0b5      	b.n	8003db2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c46:	4b3e      	ldr	r3, [pc, #248]	; (8003d40 <HAL_RCC_OscConfig+0x470>)
 8003c48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c4a:	f003 0302 	and.w	r3, r3, #2
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d1ee      	bne.n	8003c30 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c52:	7dfb      	ldrb	r3, [r7, #23]
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d105      	bne.n	8003c64 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c58:	4b39      	ldr	r3, [pc, #228]	; (8003d40 <HAL_RCC_OscConfig+0x470>)
 8003c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5c:	4a38      	ldr	r2, [pc, #224]	; (8003d40 <HAL_RCC_OscConfig+0x470>)
 8003c5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c62:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	699b      	ldr	r3, [r3, #24]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	f000 80a1 	beq.w	8003db0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c6e:	4b34      	ldr	r3, [pc, #208]	; (8003d40 <HAL_RCC_OscConfig+0x470>)
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	f003 030c 	and.w	r3, r3, #12
 8003c76:	2b08      	cmp	r3, #8
 8003c78:	d05c      	beq.n	8003d34 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	699b      	ldr	r3, [r3, #24]
 8003c7e:	2b02      	cmp	r3, #2
 8003c80:	d141      	bne.n	8003d06 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c82:	4b31      	ldr	r3, [pc, #196]	; (8003d48 <HAL_RCC_OscConfig+0x478>)
 8003c84:	2200      	movs	r2, #0
 8003c86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c88:	f7fd f9fc 	bl	8001084 <HAL_GetTick>
 8003c8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c8e:	e008      	b.n	8003ca2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c90:	f7fd f9f8 	bl	8001084 <HAL_GetTick>
 8003c94:	4602      	mov	r2, r0
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	1ad3      	subs	r3, r2, r3
 8003c9a:	2b02      	cmp	r3, #2
 8003c9c:	d901      	bls.n	8003ca2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003c9e:	2303      	movs	r3, #3
 8003ca0:	e087      	b.n	8003db2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ca2:	4b27      	ldr	r3, [pc, #156]	; (8003d40 <HAL_RCC_OscConfig+0x470>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d1f0      	bne.n	8003c90 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	69da      	ldr	r2, [r3, #28]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6a1b      	ldr	r3, [r3, #32]
 8003cb6:	431a      	orrs	r2, r3
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cbc:	019b      	lsls	r3, r3, #6
 8003cbe:	431a      	orrs	r2, r3
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cc4:	085b      	lsrs	r3, r3, #1
 8003cc6:	3b01      	subs	r3, #1
 8003cc8:	041b      	lsls	r3, r3, #16
 8003cca:	431a      	orrs	r2, r3
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cd0:	061b      	lsls	r3, r3, #24
 8003cd2:	491b      	ldr	r1, [pc, #108]	; (8003d40 <HAL_RCC_OscConfig+0x470>)
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003cd8:	4b1b      	ldr	r3, [pc, #108]	; (8003d48 <HAL_RCC_OscConfig+0x478>)
 8003cda:	2201      	movs	r2, #1
 8003cdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cde:	f7fd f9d1 	bl	8001084 <HAL_GetTick>
 8003ce2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ce4:	e008      	b.n	8003cf8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ce6:	f7fd f9cd 	bl	8001084 <HAL_GetTick>
 8003cea:	4602      	mov	r2, r0
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	1ad3      	subs	r3, r2, r3
 8003cf0:	2b02      	cmp	r3, #2
 8003cf2:	d901      	bls.n	8003cf8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003cf4:	2303      	movs	r3, #3
 8003cf6:	e05c      	b.n	8003db2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cf8:	4b11      	ldr	r3, [pc, #68]	; (8003d40 <HAL_RCC_OscConfig+0x470>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d0f0      	beq.n	8003ce6 <HAL_RCC_OscConfig+0x416>
 8003d04:	e054      	b.n	8003db0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d06:	4b10      	ldr	r3, [pc, #64]	; (8003d48 <HAL_RCC_OscConfig+0x478>)
 8003d08:	2200      	movs	r2, #0
 8003d0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d0c:	f7fd f9ba 	bl	8001084 <HAL_GetTick>
 8003d10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d12:	e008      	b.n	8003d26 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d14:	f7fd f9b6 	bl	8001084 <HAL_GetTick>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	2b02      	cmp	r3, #2
 8003d20:	d901      	bls.n	8003d26 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003d22:	2303      	movs	r3, #3
 8003d24:	e045      	b.n	8003db2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d26:	4b06      	ldr	r3, [pc, #24]	; (8003d40 <HAL_RCC_OscConfig+0x470>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d1f0      	bne.n	8003d14 <HAL_RCC_OscConfig+0x444>
 8003d32:	e03d      	b.n	8003db0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	699b      	ldr	r3, [r3, #24]
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d107      	bne.n	8003d4c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	e038      	b.n	8003db2 <HAL_RCC_OscConfig+0x4e2>
 8003d40:	40023800 	.word	0x40023800
 8003d44:	40007000 	.word	0x40007000
 8003d48:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d4c:	4b1b      	ldr	r3, [pc, #108]	; (8003dbc <HAL_RCC_OscConfig+0x4ec>)
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	699b      	ldr	r3, [r3, #24]
 8003d56:	2b01      	cmp	r3, #1
 8003d58:	d028      	beq.n	8003dac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d121      	bne.n	8003dac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d72:	429a      	cmp	r2, r3
 8003d74:	d11a      	bne.n	8003dac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d76:	68fa      	ldr	r2, [r7, #12]
 8003d78:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003d7c:	4013      	ands	r3, r2
 8003d7e:	687a      	ldr	r2, [r7, #4]
 8003d80:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003d82:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d111      	bne.n	8003dac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d92:	085b      	lsrs	r3, r3, #1
 8003d94:	3b01      	subs	r3, #1
 8003d96:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	d107      	bne.n	8003dac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d001      	beq.n	8003db0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
 8003dae:	e000      	b.n	8003db2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003db0:	2300      	movs	r3, #0
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	3718      	adds	r7, #24
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}
 8003dba:	bf00      	nop
 8003dbc:	40023800 	.word	0x40023800

08003dc0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b084      	sub	sp, #16
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
 8003dc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d101      	bne.n	8003dd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	e0cc      	b.n	8003f6e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003dd4:	4b68      	ldr	r3, [pc, #416]	; (8003f78 <HAL_RCC_ClockConfig+0x1b8>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f003 030f 	and.w	r3, r3, #15
 8003ddc:	683a      	ldr	r2, [r7, #0]
 8003dde:	429a      	cmp	r2, r3
 8003de0:	d90c      	bls.n	8003dfc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003de2:	4b65      	ldr	r3, [pc, #404]	; (8003f78 <HAL_RCC_ClockConfig+0x1b8>)
 8003de4:	683a      	ldr	r2, [r7, #0]
 8003de6:	b2d2      	uxtb	r2, r2
 8003de8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dea:	4b63      	ldr	r3, [pc, #396]	; (8003f78 <HAL_RCC_ClockConfig+0x1b8>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 030f 	and.w	r3, r3, #15
 8003df2:	683a      	ldr	r2, [r7, #0]
 8003df4:	429a      	cmp	r2, r3
 8003df6:	d001      	beq.n	8003dfc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	e0b8      	b.n	8003f6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 0302 	and.w	r3, r3, #2
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d020      	beq.n	8003e4a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f003 0304 	and.w	r3, r3, #4
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d005      	beq.n	8003e20 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e14:	4b59      	ldr	r3, [pc, #356]	; (8003f7c <HAL_RCC_ClockConfig+0x1bc>)
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	4a58      	ldr	r2, [pc, #352]	; (8003f7c <HAL_RCC_ClockConfig+0x1bc>)
 8003e1a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003e1e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f003 0308 	and.w	r3, r3, #8
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d005      	beq.n	8003e38 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e2c:	4b53      	ldr	r3, [pc, #332]	; (8003f7c <HAL_RCC_ClockConfig+0x1bc>)
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	4a52      	ldr	r2, [pc, #328]	; (8003f7c <HAL_RCC_ClockConfig+0x1bc>)
 8003e32:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003e36:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e38:	4b50      	ldr	r3, [pc, #320]	; (8003f7c <HAL_RCC_ClockConfig+0x1bc>)
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	494d      	ldr	r1, [pc, #308]	; (8003f7c <HAL_RCC_ClockConfig+0x1bc>)
 8003e46:	4313      	orrs	r3, r2
 8003e48:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f003 0301 	and.w	r3, r3, #1
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d044      	beq.n	8003ee0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d107      	bne.n	8003e6e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e5e:	4b47      	ldr	r3, [pc, #284]	; (8003f7c <HAL_RCC_ClockConfig+0x1bc>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d119      	bne.n	8003e9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e07f      	b.n	8003f6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	2b02      	cmp	r3, #2
 8003e74:	d003      	beq.n	8003e7e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e7a:	2b03      	cmp	r3, #3
 8003e7c:	d107      	bne.n	8003e8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e7e:	4b3f      	ldr	r3, [pc, #252]	; (8003f7c <HAL_RCC_ClockConfig+0x1bc>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d109      	bne.n	8003e9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e06f      	b.n	8003f6e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e8e:	4b3b      	ldr	r3, [pc, #236]	; (8003f7c <HAL_RCC_ClockConfig+0x1bc>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 0302 	and.w	r3, r3, #2
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d101      	bne.n	8003e9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e067      	b.n	8003f6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e9e:	4b37      	ldr	r3, [pc, #220]	; (8003f7c <HAL_RCC_ClockConfig+0x1bc>)
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	f023 0203 	bic.w	r2, r3, #3
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	4934      	ldr	r1, [pc, #208]	; (8003f7c <HAL_RCC_ClockConfig+0x1bc>)
 8003eac:	4313      	orrs	r3, r2
 8003eae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003eb0:	f7fd f8e8 	bl	8001084 <HAL_GetTick>
 8003eb4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eb6:	e00a      	b.n	8003ece <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003eb8:	f7fd f8e4 	bl	8001084 <HAL_GetTick>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	1ad3      	subs	r3, r2, r3
 8003ec2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d901      	bls.n	8003ece <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003eca:	2303      	movs	r3, #3
 8003ecc:	e04f      	b.n	8003f6e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ece:	4b2b      	ldr	r3, [pc, #172]	; (8003f7c <HAL_RCC_ClockConfig+0x1bc>)
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	f003 020c 	and.w	r2, r3, #12
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	429a      	cmp	r2, r3
 8003ede:	d1eb      	bne.n	8003eb8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ee0:	4b25      	ldr	r3, [pc, #148]	; (8003f78 <HAL_RCC_ClockConfig+0x1b8>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f003 030f 	and.w	r3, r3, #15
 8003ee8:	683a      	ldr	r2, [r7, #0]
 8003eea:	429a      	cmp	r2, r3
 8003eec:	d20c      	bcs.n	8003f08 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eee:	4b22      	ldr	r3, [pc, #136]	; (8003f78 <HAL_RCC_ClockConfig+0x1b8>)
 8003ef0:	683a      	ldr	r2, [r7, #0]
 8003ef2:	b2d2      	uxtb	r2, r2
 8003ef4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ef6:	4b20      	ldr	r3, [pc, #128]	; (8003f78 <HAL_RCC_ClockConfig+0x1b8>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f003 030f 	and.w	r3, r3, #15
 8003efe:	683a      	ldr	r2, [r7, #0]
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d001      	beq.n	8003f08 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	e032      	b.n	8003f6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f003 0304 	and.w	r3, r3, #4
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d008      	beq.n	8003f26 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f14:	4b19      	ldr	r3, [pc, #100]	; (8003f7c <HAL_RCC_ClockConfig+0x1bc>)
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	68db      	ldr	r3, [r3, #12]
 8003f20:	4916      	ldr	r1, [pc, #88]	; (8003f7c <HAL_RCC_ClockConfig+0x1bc>)
 8003f22:	4313      	orrs	r3, r2
 8003f24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 0308 	and.w	r3, r3, #8
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d009      	beq.n	8003f46 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f32:	4b12      	ldr	r3, [pc, #72]	; (8003f7c <HAL_RCC_ClockConfig+0x1bc>)
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	691b      	ldr	r3, [r3, #16]
 8003f3e:	00db      	lsls	r3, r3, #3
 8003f40:	490e      	ldr	r1, [pc, #56]	; (8003f7c <HAL_RCC_ClockConfig+0x1bc>)
 8003f42:	4313      	orrs	r3, r2
 8003f44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003f46:	f000 f821 	bl	8003f8c <HAL_RCC_GetSysClockFreq>
 8003f4a:	4602      	mov	r2, r0
 8003f4c:	4b0b      	ldr	r3, [pc, #44]	; (8003f7c <HAL_RCC_ClockConfig+0x1bc>)
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	091b      	lsrs	r3, r3, #4
 8003f52:	f003 030f 	and.w	r3, r3, #15
 8003f56:	490a      	ldr	r1, [pc, #40]	; (8003f80 <HAL_RCC_ClockConfig+0x1c0>)
 8003f58:	5ccb      	ldrb	r3, [r1, r3]
 8003f5a:	fa22 f303 	lsr.w	r3, r2, r3
 8003f5e:	4a09      	ldr	r2, [pc, #36]	; (8003f84 <HAL_RCC_ClockConfig+0x1c4>)
 8003f60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003f62:	4b09      	ldr	r3, [pc, #36]	; (8003f88 <HAL_RCC_ClockConfig+0x1c8>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4618      	mov	r0, r3
 8003f68:	f7fd f848 	bl	8000ffc <HAL_InitTick>

  return HAL_OK;
 8003f6c:	2300      	movs	r3, #0
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	3710      	adds	r7, #16
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}
 8003f76:	bf00      	nop
 8003f78:	40023c00 	.word	0x40023c00
 8003f7c:	40023800 	.word	0x40023800
 8003f80:	08006328 	.word	0x08006328
 8003f84:	20000000 	.word	0x20000000
 8003f88:	20000004 	.word	0x20000004

08003f8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f90:	b094      	sub	sp, #80	; 0x50
 8003f92:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003f94:	2300      	movs	r3, #0
 8003f96:	647b      	str	r3, [r7, #68]	; 0x44
 8003f98:	2300      	movs	r3, #0
 8003f9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003fa4:	4b79      	ldr	r3, [pc, #484]	; (800418c <HAL_RCC_GetSysClockFreq+0x200>)
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	f003 030c 	and.w	r3, r3, #12
 8003fac:	2b08      	cmp	r3, #8
 8003fae:	d00d      	beq.n	8003fcc <HAL_RCC_GetSysClockFreq+0x40>
 8003fb0:	2b08      	cmp	r3, #8
 8003fb2:	f200 80e1 	bhi.w	8004178 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d002      	beq.n	8003fc0 <HAL_RCC_GetSysClockFreq+0x34>
 8003fba:	2b04      	cmp	r3, #4
 8003fbc:	d003      	beq.n	8003fc6 <HAL_RCC_GetSysClockFreq+0x3a>
 8003fbe:	e0db      	b.n	8004178 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003fc0:	4b73      	ldr	r3, [pc, #460]	; (8004190 <HAL_RCC_GetSysClockFreq+0x204>)
 8003fc2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003fc4:	e0db      	b.n	800417e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003fc6:	4b73      	ldr	r3, [pc, #460]	; (8004194 <HAL_RCC_GetSysClockFreq+0x208>)
 8003fc8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003fca:	e0d8      	b.n	800417e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003fcc:	4b6f      	ldr	r3, [pc, #444]	; (800418c <HAL_RCC_GetSysClockFreq+0x200>)
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003fd4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003fd6:	4b6d      	ldr	r3, [pc, #436]	; (800418c <HAL_RCC_GetSysClockFreq+0x200>)
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d063      	beq.n	80040aa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fe2:	4b6a      	ldr	r3, [pc, #424]	; (800418c <HAL_RCC_GetSysClockFreq+0x200>)
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	099b      	lsrs	r3, r3, #6
 8003fe8:	2200      	movs	r2, #0
 8003fea:	63bb      	str	r3, [r7, #56]	; 0x38
 8003fec:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ff0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ff4:	633b      	str	r3, [r7, #48]	; 0x30
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	637b      	str	r3, [r7, #52]	; 0x34
 8003ffa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003ffe:	4622      	mov	r2, r4
 8004000:	462b      	mov	r3, r5
 8004002:	f04f 0000 	mov.w	r0, #0
 8004006:	f04f 0100 	mov.w	r1, #0
 800400a:	0159      	lsls	r1, r3, #5
 800400c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004010:	0150      	lsls	r0, r2, #5
 8004012:	4602      	mov	r2, r0
 8004014:	460b      	mov	r3, r1
 8004016:	4621      	mov	r1, r4
 8004018:	1a51      	subs	r1, r2, r1
 800401a:	6139      	str	r1, [r7, #16]
 800401c:	4629      	mov	r1, r5
 800401e:	eb63 0301 	sbc.w	r3, r3, r1
 8004022:	617b      	str	r3, [r7, #20]
 8004024:	f04f 0200 	mov.w	r2, #0
 8004028:	f04f 0300 	mov.w	r3, #0
 800402c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004030:	4659      	mov	r1, fp
 8004032:	018b      	lsls	r3, r1, #6
 8004034:	4651      	mov	r1, sl
 8004036:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800403a:	4651      	mov	r1, sl
 800403c:	018a      	lsls	r2, r1, #6
 800403e:	4651      	mov	r1, sl
 8004040:	ebb2 0801 	subs.w	r8, r2, r1
 8004044:	4659      	mov	r1, fp
 8004046:	eb63 0901 	sbc.w	r9, r3, r1
 800404a:	f04f 0200 	mov.w	r2, #0
 800404e:	f04f 0300 	mov.w	r3, #0
 8004052:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004056:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800405a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800405e:	4690      	mov	r8, r2
 8004060:	4699      	mov	r9, r3
 8004062:	4623      	mov	r3, r4
 8004064:	eb18 0303 	adds.w	r3, r8, r3
 8004068:	60bb      	str	r3, [r7, #8]
 800406a:	462b      	mov	r3, r5
 800406c:	eb49 0303 	adc.w	r3, r9, r3
 8004070:	60fb      	str	r3, [r7, #12]
 8004072:	f04f 0200 	mov.w	r2, #0
 8004076:	f04f 0300 	mov.w	r3, #0
 800407a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800407e:	4629      	mov	r1, r5
 8004080:	024b      	lsls	r3, r1, #9
 8004082:	4621      	mov	r1, r4
 8004084:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004088:	4621      	mov	r1, r4
 800408a:	024a      	lsls	r2, r1, #9
 800408c:	4610      	mov	r0, r2
 800408e:	4619      	mov	r1, r3
 8004090:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004092:	2200      	movs	r2, #0
 8004094:	62bb      	str	r3, [r7, #40]	; 0x28
 8004096:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004098:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800409c:	f7fc f8f8 	bl	8000290 <__aeabi_uldivmod>
 80040a0:	4602      	mov	r2, r0
 80040a2:	460b      	mov	r3, r1
 80040a4:	4613      	mov	r3, r2
 80040a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040a8:	e058      	b.n	800415c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040aa:	4b38      	ldr	r3, [pc, #224]	; (800418c <HAL_RCC_GetSysClockFreq+0x200>)
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	099b      	lsrs	r3, r3, #6
 80040b0:	2200      	movs	r2, #0
 80040b2:	4618      	mov	r0, r3
 80040b4:	4611      	mov	r1, r2
 80040b6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80040ba:	623b      	str	r3, [r7, #32]
 80040bc:	2300      	movs	r3, #0
 80040be:	627b      	str	r3, [r7, #36]	; 0x24
 80040c0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80040c4:	4642      	mov	r2, r8
 80040c6:	464b      	mov	r3, r9
 80040c8:	f04f 0000 	mov.w	r0, #0
 80040cc:	f04f 0100 	mov.w	r1, #0
 80040d0:	0159      	lsls	r1, r3, #5
 80040d2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80040d6:	0150      	lsls	r0, r2, #5
 80040d8:	4602      	mov	r2, r0
 80040da:	460b      	mov	r3, r1
 80040dc:	4641      	mov	r1, r8
 80040de:	ebb2 0a01 	subs.w	sl, r2, r1
 80040e2:	4649      	mov	r1, r9
 80040e4:	eb63 0b01 	sbc.w	fp, r3, r1
 80040e8:	f04f 0200 	mov.w	r2, #0
 80040ec:	f04f 0300 	mov.w	r3, #0
 80040f0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80040f4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80040f8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80040fc:	ebb2 040a 	subs.w	r4, r2, sl
 8004100:	eb63 050b 	sbc.w	r5, r3, fp
 8004104:	f04f 0200 	mov.w	r2, #0
 8004108:	f04f 0300 	mov.w	r3, #0
 800410c:	00eb      	lsls	r3, r5, #3
 800410e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004112:	00e2      	lsls	r2, r4, #3
 8004114:	4614      	mov	r4, r2
 8004116:	461d      	mov	r5, r3
 8004118:	4643      	mov	r3, r8
 800411a:	18e3      	adds	r3, r4, r3
 800411c:	603b      	str	r3, [r7, #0]
 800411e:	464b      	mov	r3, r9
 8004120:	eb45 0303 	adc.w	r3, r5, r3
 8004124:	607b      	str	r3, [r7, #4]
 8004126:	f04f 0200 	mov.w	r2, #0
 800412a:	f04f 0300 	mov.w	r3, #0
 800412e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004132:	4629      	mov	r1, r5
 8004134:	028b      	lsls	r3, r1, #10
 8004136:	4621      	mov	r1, r4
 8004138:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800413c:	4621      	mov	r1, r4
 800413e:	028a      	lsls	r2, r1, #10
 8004140:	4610      	mov	r0, r2
 8004142:	4619      	mov	r1, r3
 8004144:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004146:	2200      	movs	r2, #0
 8004148:	61bb      	str	r3, [r7, #24]
 800414a:	61fa      	str	r2, [r7, #28]
 800414c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004150:	f7fc f89e 	bl	8000290 <__aeabi_uldivmod>
 8004154:	4602      	mov	r2, r0
 8004156:	460b      	mov	r3, r1
 8004158:	4613      	mov	r3, r2
 800415a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800415c:	4b0b      	ldr	r3, [pc, #44]	; (800418c <HAL_RCC_GetSysClockFreq+0x200>)
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	0c1b      	lsrs	r3, r3, #16
 8004162:	f003 0303 	and.w	r3, r3, #3
 8004166:	3301      	adds	r3, #1
 8004168:	005b      	lsls	r3, r3, #1
 800416a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800416c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800416e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004170:	fbb2 f3f3 	udiv	r3, r2, r3
 8004174:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004176:	e002      	b.n	800417e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004178:	4b05      	ldr	r3, [pc, #20]	; (8004190 <HAL_RCC_GetSysClockFreq+0x204>)
 800417a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800417c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800417e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004180:	4618      	mov	r0, r3
 8004182:	3750      	adds	r7, #80	; 0x50
 8004184:	46bd      	mov	sp, r7
 8004186:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800418a:	bf00      	nop
 800418c:	40023800 	.word	0x40023800
 8004190:	00f42400 	.word	0x00f42400
 8004194:	007a1200 	.word	0x007a1200

08004198 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004198:	b480      	push	{r7}
 800419a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800419c:	4b03      	ldr	r3, [pc, #12]	; (80041ac <HAL_RCC_GetHCLKFreq+0x14>)
 800419e:	681b      	ldr	r3, [r3, #0]
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	46bd      	mov	sp, r7
 80041a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a8:	4770      	bx	lr
 80041aa:	bf00      	nop
 80041ac:	20000000 	.word	0x20000000

080041b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80041b4:	f7ff fff0 	bl	8004198 <HAL_RCC_GetHCLKFreq>
 80041b8:	4602      	mov	r2, r0
 80041ba:	4b05      	ldr	r3, [pc, #20]	; (80041d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	0a9b      	lsrs	r3, r3, #10
 80041c0:	f003 0307 	and.w	r3, r3, #7
 80041c4:	4903      	ldr	r1, [pc, #12]	; (80041d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80041c6:	5ccb      	ldrb	r3, [r1, r3]
 80041c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	bd80      	pop	{r7, pc}
 80041d0:	40023800 	.word	0x40023800
 80041d4:	08006338 	.word	0x08006338

080041d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80041dc:	f7ff ffdc 	bl	8004198 <HAL_RCC_GetHCLKFreq>
 80041e0:	4602      	mov	r2, r0
 80041e2:	4b05      	ldr	r3, [pc, #20]	; (80041f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	0b5b      	lsrs	r3, r3, #13
 80041e8:	f003 0307 	and.w	r3, r3, #7
 80041ec:	4903      	ldr	r1, [pc, #12]	; (80041fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80041ee:	5ccb      	ldrb	r3, [r1, r3]
 80041f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	bd80      	pop	{r7, pc}
 80041f8:	40023800 	.word	0x40023800
 80041fc:	08006338 	.word	0x08006338

08004200 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b082      	sub	sp, #8
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d101      	bne.n	8004212 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e03f      	b.n	8004292 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004218:	b2db      	uxtb	r3, r3
 800421a:	2b00      	cmp	r3, #0
 800421c:	d106      	bne.n	800422c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2200      	movs	r2, #0
 8004222:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f7fc fe4c 	bl	8000ec4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2224      	movs	r2, #36	; 0x24
 8004230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	68da      	ldr	r2, [r3, #12]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004242:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004244:	6878      	ldr	r0, [r7, #4]
 8004246:	f000 fd7b 	bl	8004d40 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	691a      	ldr	r2, [r3, #16]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004258:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	695a      	ldr	r2, [r3, #20]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004268:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	68da      	ldr	r2, [r3, #12]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004278:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2200      	movs	r2, #0
 800427e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2220      	movs	r2, #32
 8004284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2220      	movs	r2, #32
 800428c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004290:	2300      	movs	r3, #0
}
 8004292:	4618      	mov	r0, r3
 8004294:	3708      	adds	r7, #8
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}

0800429a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800429a:	b580      	push	{r7, lr}
 800429c:	b08a      	sub	sp, #40	; 0x28
 800429e:	af02      	add	r7, sp, #8
 80042a0:	60f8      	str	r0, [r7, #12]
 80042a2:	60b9      	str	r1, [r7, #8]
 80042a4:	603b      	str	r3, [r7, #0]
 80042a6:	4613      	mov	r3, r2
 80042a8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80042aa:	2300      	movs	r3, #0
 80042ac:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042b4:	b2db      	uxtb	r3, r3
 80042b6:	2b20      	cmp	r3, #32
 80042b8:	d17c      	bne.n	80043b4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d002      	beq.n	80042c6 <HAL_UART_Transmit+0x2c>
 80042c0:	88fb      	ldrh	r3, [r7, #6]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d101      	bne.n	80042ca <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	e075      	b.n	80043b6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d101      	bne.n	80042d8 <HAL_UART_Transmit+0x3e>
 80042d4:	2302      	movs	r3, #2
 80042d6:	e06e      	b.n	80043b6 <HAL_UART_Transmit+0x11c>
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2201      	movs	r2, #1
 80042dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2200      	movs	r2, #0
 80042e4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2221      	movs	r2, #33	; 0x21
 80042ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80042ee:	f7fc fec9 	bl	8001084 <HAL_GetTick>
 80042f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	88fa      	ldrh	r2, [r7, #6]
 80042f8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	88fa      	ldrh	r2, [r7, #6]
 80042fe:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004308:	d108      	bne.n	800431c <HAL_UART_Transmit+0x82>
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	691b      	ldr	r3, [r3, #16]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d104      	bne.n	800431c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004312:	2300      	movs	r3, #0
 8004314:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	61bb      	str	r3, [r7, #24]
 800431a:	e003      	b.n	8004324 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004320:	2300      	movs	r3, #0
 8004322:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2200      	movs	r2, #0
 8004328:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800432c:	e02a      	b.n	8004384 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	9300      	str	r3, [sp, #0]
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	2200      	movs	r2, #0
 8004336:	2180      	movs	r1, #128	; 0x80
 8004338:	68f8      	ldr	r0, [r7, #12]
 800433a:	f000 faf9 	bl	8004930 <UART_WaitOnFlagUntilTimeout>
 800433e:	4603      	mov	r3, r0
 8004340:	2b00      	cmp	r3, #0
 8004342:	d001      	beq.n	8004348 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004344:	2303      	movs	r3, #3
 8004346:	e036      	b.n	80043b6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004348:	69fb      	ldr	r3, [r7, #28]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d10b      	bne.n	8004366 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800434e:	69bb      	ldr	r3, [r7, #24]
 8004350:	881b      	ldrh	r3, [r3, #0]
 8004352:	461a      	mov	r2, r3
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800435c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800435e:	69bb      	ldr	r3, [r7, #24]
 8004360:	3302      	adds	r3, #2
 8004362:	61bb      	str	r3, [r7, #24]
 8004364:	e007      	b.n	8004376 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004366:	69fb      	ldr	r3, [r7, #28]
 8004368:	781a      	ldrb	r2, [r3, #0]
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004370:	69fb      	ldr	r3, [r7, #28]
 8004372:	3301      	adds	r3, #1
 8004374:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800437a:	b29b      	uxth	r3, r3
 800437c:	3b01      	subs	r3, #1
 800437e:	b29a      	uxth	r2, r3
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004388:	b29b      	uxth	r3, r3
 800438a:	2b00      	cmp	r3, #0
 800438c:	d1cf      	bne.n	800432e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	9300      	str	r3, [sp, #0]
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	2200      	movs	r2, #0
 8004396:	2140      	movs	r1, #64	; 0x40
 8004398:	68f8      	ldr	r0, [r7, #12]
 800439a:	f000 fac9 	bl	8004930 <UART_WaitOnFlagUntilTimeout>
 800439e:	4603      	mov	r3, r0
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d001      	beq.n	80043a8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80043a4:	2303      	movs	r3, #3
 80043a6:	e006      	b.n	80043b6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2220      	movs	r2, #32
 80043ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80043b0:	2300      	movs	r3, #0
 80043b2:	e000      	b.n	80043b6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80043b4:	2302      	movs	r3, #2
  }
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3720      	adds	r7, #32
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}
	...

080043c0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b0ba      	sub	sp, #232	; 0xe8
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	68db      	ldr	r3, [r3, #12]
 80043d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	695b      	ldr	r3, [r3, #20]
 80043e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80043e6:	2300      	movs	r3, #0
 80043e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80043ec:	2300      	movs	r3, #0
 80043ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80043f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043f6:	f003 030f 	and.w	r3, r3, #15
 80043fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80043fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004402:	2b00      	cmp	r3, #0
 8004404:	d10f      	bne.n	8004426 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004406:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800440a:	f003 0320 	and.w	r3, r3, #32
 800440e:	2b00      	cmp	r3, #0
 8004410:	d009      	beq.n	8004426 <HAL_UART_IRQHandler+0x66>
 8004412:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004416:	f003 0320 	and.w	r3, r3, #32
 800441a:	2b00      	cmp	r3, #0
 800441c:	d003      	beq.n	8004426 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	f000 fbd3 	bl	8004bca <UART_Receive_IT>
      return;
 8004424:	e256      	b.n	80048d4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004426:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800442a:	2b00      	cmp	r3, #0
 800442c:	f000 80de 	beq.w	80045ec <HAL_UART_IRQHandler+0x22c>
 8004430:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004434:	f003 0301 	and.w	r3, r3, #1
 8004438:	2b00      	cmp	r3, #0
 800443a:	d106      	bne.n	800444a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800443c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004440:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004444:	2b00      	cmp	r3, #0
 8004446:	f000 80d1 	beq.w	80045ec <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800444a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800444e:	f003 0301 	and.w	r3, r3, #1
 8004452:	2b00      	cmp	r3, #0
 8004454:	d00b      	beq.n	800446e <HAL_UART_IRQHandler+0xae>
 8004456:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800445a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800445e:	2b00      	cmp	r3, #0
 8004460:	d005      	beq.n	800446e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004466:	f043 0201 	orr.w	r2, r3, #1
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800446e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004472:	f003 0304 	and.w	r3, r3, #4
 8004476:	2b00      	cmp	r3, #0
 8004478:	d00b      	beq.n	8004492 <HAL_UART_IRQHandler+0xd2>
 800447a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800447e:	f003 0301 	and.w	r3, r3, #1
 8004482:	2b00      	cmp	r3, #0
 8004484:	d005      	beq.n	8004492 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800448a:	f043 0202 	orr.w	r2, r3, #2
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004492:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004496:	f003 0302 	and.w	r3, r3, #2
 800449a:	2b00      	cmp	r3, #0
 800449c:	d00b      	beq.n	80044b6 <HAL_UART_IRQHandler+0xf6>
 800449e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80044a2:	f003 0301 	and.w	r3, r3, #1
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d005      	beq.n	80044b6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ae:	f043 0204 	orr.w	r2, r3, #4
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80044b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044ba:	f003 0308 	and.w	r3, r3, #8
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d011      	beq.n	80044e6 <HAL_UART_IRQHandler+0x126>
 80044c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044c6:	f003 0320 	and.w	r3, r3, #32
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d105      	bne.n	80044da <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80044ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80044d2:	f003 0301 	and.w	r3, r3, #1
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d005      	beq.n	80044e6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044de:	f043 0208 	orr.w	r2, r3, #8
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	f000 81ed 	beq.w	80048ca <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80044f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044f4:	f003 0320 	and.w	r3, r3, #32
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d008      	beq.n	800450e <HAL_UART_IRQHandler+0x14e>
 80044fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004500:	f003 0320 	and.w	r3, r3, #32
 8004504:	2b00      	cmp	r3, #0
 8004506:	d002      	beq.n	800450e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004508:	6878      	ldr	r0, [r7, #4]
 800450a:	f000 fb5e 	bl	8004bca <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	695b      	ldr	r3, [r3, #20]
 8004514:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004518:	2b40      	cmp	r3, #64	; 0x40
 800451a:	bf0c      	ite	eq
 800451c:	2301      	moveq	r3, #1
 800451e:	2300      	movne	r3, #0
 8004520:	b2db      	uxtb	r3, r3
 8004522:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800452a:	f003 0308 	and.w	r3, r3, #8
 800452e:	2b00      	cmp	r3, #0
 8004530:	d103      	bne.n	800453a <HAL_UART_IRQHandler+0x17a>
 8004532:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004536:	2b00      	cmp	r3, #0
 8004538:	d04f      	beq.n	80045da <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f000 fa66 	bl	8004a0c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	695b      	ldr	r3, [r3, #20]
 8004546:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800454a:	2b40      	cmp	r3, #64	; 0x40
 800454c:	d141      	bne.n	80045d2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	3314      	adds	r3, #20
 8004554:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004558:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800455c:	e853 3f00 	ldrex	r3, [r3]
 8004560:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004564:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004568:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800456c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	3314      	adds	r3, #20
 8004576:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800457a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800457e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004582:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004586:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800458a:	e841 2300 	strex	r3, r2, [r1]
 800458e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004592:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004596:	2b00      	cmp	r3, #0
 8004598:	d1d9      	bne.n	800454e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d013      	beq.n	80045ca <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045a6:	4a7d      	ldr	r2, [pc, #500]	; (800479c <HAL_UART_IRQHandler+0x3dc>)
 80045a8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ae:	4618      	mov	r0, r3
 80045b0:	f7fc ff19 	bl	80013e6 <HAL_DMA_Abort_IT>
 80045b4:	4603      	mov	r3, r0
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d016      	beq.n	80045e8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045c0:	687a      	ldr	r2, [r7, #4]
 80045c2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80045c4:	4610      	mov	r0, r2
 80045c6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045c8:	e00e      	b.n	80045e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f000 f99a 	bl	8004904 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045d0:	e00a      	b.n	80045e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f000 f996 	bl	8004904 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045d8:	e006      	b.n	80045e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f000 f992 	bl	8004904 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2200      	movs	r2, #0
 80045e4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80045e6:	e170      	b.n	80048ca <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045e8:	bf00      	nop
    return;
 80045ea:	e16e      	b.n	80048ca <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	f040 814a 	bne.w	800488a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80045f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045fa:	f003 0310 	and.w	r3, r3, #16
 80045fe:	2b00      	cmp	r3, #0
 8004600:	f000 8143 	beq.w	800488a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004604:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004608:	f003 0310 	and.w	r3, r3, #16
 800460c:	2b00      	cmp	r3, #0
 800460e:	f000 813c 	beq.w	800488a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004612:	2300      	movs	r3, #0
 8004614:	60bb      	str	r3, [r7, #8]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	60bb      	str	r3, [r7, #8]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	60bb      	str	r3, [r7, #8]
 8004626:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	695b      	ldr	r3, [r3, #20]
 800462e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004632:	2b40      	cmp	r3, #64	; 0x40
 8004634:	f040 80b4 	bne.w	80047a0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004644:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004648:	2b00      	cmp	r3, #0
 800464a:	f000 8140 	beq.w	80048ce <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004652:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004656:	429a      	cmp	r2, r3
 8004658:	f080 8139 	bcs.w	80048ce <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004662:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004668:	69db      	ldr	r3, [r3, #28]
 800466a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800466e:	f000 8088 	beq.w	8004782 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	330c      	adds	r3, #12
 8004678:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800467c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004680:	e853 3f00 	ldrex	r3, [r3]
 8004684:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004688:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800468c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004690:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	330c      	adds	r3, #12
 800469a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800469e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80046a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046a6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80046aa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80046ae:	e841 2300 	strex	r3, r2, [r1]
 80046b2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80046b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d1d9      	bne.n	8004672 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	3314      	adds	r3, #20
 80046c4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046c8:	e853 3f00 	ldrex	r3, [r3]
 80046cc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80046ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80046d0:	f023 0301 	bic.w	r3, r3, #1
 80046d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	3314      	adds	r3, #20
 80046de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80046e2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80046e6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046e8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80046ea:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80046ee:	e841 2300 	strex	r3, r2, [r1]
 80046f2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80046f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d1e1      	bne.n	80046be <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	3314      	adds	r3, #20
 8004700:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004702:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004704:	e853 3f00 	ldrex	r3, [r3]
 8004708:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800470a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800470c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004710:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	3314      	adds	r3, #20
 800471a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800471e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004720:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004722:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004724:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004726:	e841 2300 	strex	r3, r2, [r1]
 800472a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800472c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800472e:	2b00      	cmp	r3, #0
 8004730:	d1e3      	bne.n	80046fa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2220      	movs	r2, #32
 8004736:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2200      	movs	r2, #0
 800473e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	330c      	adds	r3, #12
 8004746:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004748:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800474a:	e853 3f00 	ldrex	r3, [r3]
 800474e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004750:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004752:	f023 0310 	bic.w	r3, r3, #16
 8004756:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	330c      	adds	r3, #12
 8004760:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004764:	65ba      	str	r2, [r7, #88]	; 0x58
 8004766:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004768:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800476a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800476c:	e841 2300 	strex	r3, r2, [r1]
 8004770:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004772:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004774:	2b00      	cmp	r3, #0
 8004776:	d1e3      	bne.n	8004740 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800477c:	4618      	mov	r0, r3
 800477e:	f7fc fdc2 	bl	8001306 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800478a:	b29b      	uxth	r3, r3
 800478c:	1ad3      	subs	r3, r2, r3
 800478e:	b29b      	uxth	r3, r3
 8004790:	4619      	mov	r1, r3
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f000 f8c0 	bl	8004918 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004798:	e099      	b.n	80048ce <HAL_UART_IRQHandler+0x50e>
 800479a:	bf00      	nop
 800479c:	08004ad3 	.word	0x08004ad3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80047a8:	b29b      	uxth	r3, r3
 80047aa:	1ad3      	subs	r3, r2, r3
 80047ac:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80047b4:	b29b      	uxth	r3, r3
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	f000 808b 	beq.w	80048d2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80047bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	f000 8086 	beq.w	80048d2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	330c      	adds	r3, #12
 80047cc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047d0:	e853 3f00 	ldrex	r3, [r3]
 80047d4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80047d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047d8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80047dc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	330c      	adds	r3, #12
 80047e6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80047ea:	647a      	str	r2, [r7, #68]	; 0x44
 80047ec:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ee:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80047f0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80047f2:	e841 2300 	strex	r3, r2, [r1]
 80047f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80047f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d1e3      	bne.n	80047c6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	3314      	adds	r3, #20
 8004804:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004808:	e853 3f00 	ldrex	r3, [r3]
 800480c:	623b      	str	r3, [r7, #32]
   return(result);
 800480e:	6a3b      	ldr	r3, [r7, #32]
 8004810:	f023 0301 	bic.w	r3, r3, #1
 8004814:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	3314      	adds	r3, #20
 800481e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004822:	633a      	str	r2, [r7, #48]	; 0x30
 8004824:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004826:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004828:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800482a:	e841 2300 	strex	r3, r2, [r1]
 800482e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004832:	2b00      	cmp	r3, #0
 8004834:	d1e3      	bne.n	80047fe <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2220      	movs	r2, #32
 800483a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2200      	movs	r2, #0
 8004842:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	330c      	adds	r3, #12
 800484a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	e853 3f00 	ldrex	r3, [r3]
 8004852:	60fb      	str	r3, [r7, #12]
   return(result);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	f023 0310 	bic.w	r3, r3, #16
 800485a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	330c      	adds	r3, #12
 8004864:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004868:	61fa      	str	r2, [r7, #28]
 800486a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800486c:	69b9      	ldr	r1, [r7, #24]
 800486e:	69fa      	ldr	r2, [r7, #28]
 8004870:	e841 2300 	strex	r3, r2, [r1]
 8004874:	617b      	str	r3, [r7, #20]
   return(result);
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d1e3      	bne.n	8004844 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800487c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004880:	4619      	mov	r1, r3
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f000 f848 	bl	8004918 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004888:	e023      	b.n	80048d2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800488a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800488e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004892:	2b00      	cmp	r3, #0
 8004894:	d009      	beq.n	80048aa <HAL_UART_IRQHandler+0x4ea>
 8004896:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800489a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d003      	beq.n	80048aa <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f000 f929 	bl	8004afa <UART_Transmit_IT>
    return;
 80048a8:	e014      	b.n	80048d4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80048aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d00e      	beq.n	80048d4 <HAL_UART_IRQHandler+0x514>
 80048b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d008      	beq.n	80048d4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f000 f969 	bl	8004b9a <UART_EndTransmit_IT>
    return;
 80048c8:	e004      	b.n	80048d4 <HAL_UART_IRQHandler+0x514>
    return;
 80048ca:	bf00      	nop
 80048cc:	e002      	b.n	80048d4 <HAL_UART_IRQHandler+0x514>
      return;
 80048ce:	bf00      	nop
 80048d0:	e000      	b.n	80048d4 <HAL_UART_IRQHandler+0x514>
      return;
 80048d2:	bf00      	nop
  }
}
 80048d4:	37e8      	adds	r7, #232	; 0xe8
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}
 80048da:	bf00      	nop

080048dc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80048dc:	b480      	push	{r7}
 80048de:	b083      	sub	sp, #12
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80048e4:	bf00      	nop
 80048e6:	370c      	adds	r7, #12
 80048e8:	46bd      	mov	sp, r7
 80048ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ee:	4770      	bx	lr

080048f0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b083      	sub	sp, #12
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80048f8:	bf00      	nop
 80048fa:	370c      	adds	r7, #12
 80048fc:	46bd      	mov	sp, r7
 80048fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004902:	4770      	bx	lr

08004904 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004904:	b480      	push	{r7}
 8004906:	b083      	sub	sp, #12
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800490c:	bf00      	nop
 800490e:	370c      	adds	r7, #12
 8004910:	46bd      	mov	sp, r7
 8004912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004916:	4770      	bx	lr

08004918 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004918:	b480      	push	{r7}
 800491a:	b083      	sub	sp, #12
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
 8004920:	460b      	mov	r3, r1
 8004922:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004924:	bf00      	nop
 8004926:	370c      	adds	r7, #12
 8004928:	46bd      	mov	sp, r7
 800492a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492e:	4770      	bx	lr

08004930 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b090      	sub	sp, #64	; 0x40
 8004934:	af00      	add	r7, sp, #0
 8004936:	60f8      	str	r0, [r7, #12]
 8004938:	60b9      	str	r1, [r7, #8]
 800493a:	603b      	str	r3, [r7, #0]
 800493c:	4613      	mov	r3, r2
 800493e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004940:	e050      	b.n	80049e4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004942:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004944:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004948:	d04c      	beq.n	80049e4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800494a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800494c:	2b00      	cmp	r3, #0
 800494e:	d007      	beq.n	8004960 <UART_WaitOnFlagUntilTimeout+0x30>
 8004950:	f7fc fb98 	bl	8001084 <HAL_GetTick>
 8004954:	4602      	mov	r2, r0
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	1ad3      	subs	r3, r2, r3
 800495a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800495c:	429a      	cmp	r2, r3
 800495e:	d241      	bcs.n	80049e4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	330c      	adds	r3, #12
 8004966:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800496a:	e853 3f00 	ldrex	r3, [r3]
 800496e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004972:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004976:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	330c      	adds	r3, #12
 800497e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004980:	637a      	str	r2, [r7, #52]	; 0x34
 8004982:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004984:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004986:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004988:	e841 2300 	strex	r3, r2, [r1]
 800498c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800498e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004990:	2b00      	cmp	r3, #0
 8004992:	d1e5      	bne.n	8004960 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	3314      	adds	r3, #20
 800499a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	e853 3f00 	ldrex	r3, [r3]
 80049a2:	613b      	str	r3, [r7, #16]
   return(result);
 80049a4:	693b      	ldr	r3, [r7, #16]
 80049a6:	f023 0301 	bic.w	r3, r3, #1
 80049aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	3314      	adds	r3, #20
 80049b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80049b4:	623a      	str	r2, [r7, #32]
 80049b6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049b8:	69f9      	ldr	r1, [r7, #28]
 80049ba:	6a3a      	ldr	r2, [r7, #32]
 80049bc:	e841 2300 	strex	r3, r2, [r1]
 80049c0:	61bb      	str	r3, [r7, #24]
   return(result);
 80049c2:	69bb      	ldr	r3, [r7, #24]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d1e5      	bne.n	8004994 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2220      	movs	r2, #32
 80049cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2220      	movs	r2, #32
 80049d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2200      	movs	r2, #0
 80049dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80049e0:	2303      	movs	r3, #3
 80049e2:	e00f      	b.n	8004a04 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	4013      	ands	r3, r2
 80049ee:	68ba      	ldr	r2, [r7, #8]
 80049f0:	429a      	cmp	r2, r3
 80049f2:	bf0c      	ite	eq
 80049f4:	2301      	moveq	r3, #1
 80049f6:	2300      	movne	r3, #0
 80049f8:	b2db      	uxtb	r3, r3
 80049fa:	461a      	mov	r2, r3
 80049fc:	79fb      	ldrb	r3, [r7, #7]
 80049fe:	429a      	cmp	r2, r3
 8004a00:	d09f      	beq.n	8004942 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004a02:	2300      	movs	r3, #0
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	3740      	adds	r7, #64	; 0x40
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}

08004a0c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b095      	sub	sp, #84	; 0x54
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	330c      	adds	r3, #12
 8004a1a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a1e:	e853 3f00 	ldrex	r3, [r3]
 8004a22:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a26:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004a2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	330c      	adds	r3, #12
 8004a32:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004a34:	643a      	str	r2, [r7, #64]	; 0x40
 8004a36:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a38:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004a3a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004a3c:	e841 2300 	strex	r3, r2, [r1]
 8004a40:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004a42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d1e5      	bne.n	8004a14 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	3314      	adds	r3, #20
 8004a4e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a50:	6a3b      	ldr	r3, [r7, #32]
 8004a52:	e853 3f00 	ldrex	r3, [r3]
 8004a56:	61fb      	str	r3, [r7, #28]
   return(result);
 8004a58:	69fb      	ldr	r3, [r7, #28]
 8004a5a:	f023 0301 	bic.w	r3, r3, #1
 8004a5e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	3314      	adds	r3, #20
 8004a66:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a68:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004a6a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a6c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a70:	e841 2300 	strex	r3, r2, [r1]
 8004a74:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d1e5      	bne.n	8004a48 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d119      	bne.n	8004ab8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	330c      	adds	r3, #12
 8004a8a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	e853 3f00 	ldrex	r3, [r3]
 8004a92:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	f023 0310 	bic.w	r3, r3, #16
 8004a9a:	647b      	str	r3, [r7, #68]	; 0x44
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	330c      	adds	r3, #12
 8004aa2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004aa4:	61ba      	str	r2, [r7, #24]
 8004aa6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aa8:	6979      	ldr	r1, [r7, #20]
 8004aaa:	69ba      	ldr	r2, [r7, #24]
 8004aac:	e841 2300 	strex	r3, r2, [r1]
 8004ab0:	613b      	str	r3, [r7, #16]
   return(result);
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d1e5      	bne.n	8004a84 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2220      	movs	r2, #32
 8004abc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004ac6:	bf00      	nop
 8004ac8:	3754      	adds	r7, #84	; 0x54
 8004aca:	46bd      	mov	sp, r7
 8004acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad0:	4770      	bx	lr

08004ad2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004ad2:	b580      	push	{r7, lr}
 8004ad4:	b084      	sub	sp, #16
 8004ad6:	af00      	add	r7, sp, #0
 8004ad8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ade:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004aec:	68f8      	ldr	r0, [r7, #12]
 8004aee:	f7ff ff09 	bl	8004904 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004af2:	bf00      	nop
 8004af4:	3710      	adds	r7, #16
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}

08004afa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004afa:	b480      	push	{r7}
 8004afc:	b085      	sub	sp, #20
 8004afe:	af00      	add	r7, sp, #0
 8004b00:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b08:	b2db      	uxtb	r3, r3
 8004b0a:	2b21      	cmp	r3, #33	; 0x21
 8004b0c:	d13e      	bne.n	8004b8c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	689b      	ldr	r3, [r3, #8]
 8004b12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b16:	d114      	bne.n	8004b42 <UART_Transmit_IT+0x48>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	691b      	ldr	r3, [r3, #16]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d110      	bne.n	8004b42 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6a1b      	ldr	r3, [r3, #32]
 8004b24:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	881b      	ldrh	r3, [r3, #0]
 8004b2a:	461a      	mov	r2, r3
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b34:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6a1b      	ldr	r3, [r3, #32]
 8004b3a:	1c9a      	adds	r2, r3, #2
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	621a      	str	r2, [r3, #32]
 8004b40:	e008      	b.n	8004b54 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6a1b      	ldr	r3, [r3, #32]
 8004b46:	1c59      	adds	r1, r3, #1
 8004b48:	687a      	ldr	r2, [r7, #4]
 8004b4a:	6211      	str	r1, [r2, #32]
 8004b4c:	781a      	ldrb	r2, [r3, #0]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004b58:	b29b      	uxth	r3, r3
 8004b5a:	3b01      	subs	r3, #1
 8004b5c:	b29b      	uxth	r3, r3
 8004b5e:	687a      	ldr	r2, [r7, #4]
 8004b60:	4619      	mov	r1, r3
 8004b62:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d10f      	bne.n	8004b88 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	68da      	ldr	r2, [r3, #12]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004b76:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	68da      	ldr	r2, [r3, #12]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b86:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004b88:	2300      	movs	r3, #0
 8004b8a:	e000      	b.n	8004b8e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004b8c:	2302      	movs	r3, #2
  }
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	3714      	adds	r7, #20
 8004b92:	46bd      	mov	sp, r7
 8004b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b98:	4770      	bx	lr

08004b9a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004b9a:	b580      	push	{r7, lr}
 8004b9c:	b082      	sub	sp, #8
 8004b9e:	af00      	add	r7, sp, #0
 8004ba0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	68da      	ldr	r2, [r3, #12]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004bb0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2220      	movs	r2, #32
 8004bb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f7ff fe8e 	bl	80048dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004bc0:	2300      	movs	r3, #0
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	3708      	adds	r7, #8
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}

08004bca <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004bca:	b580      	push	{r7, lr}
 8004bcc:	b08c      	sub	sp, #48	; 0x30
 8004bce:	af00      	add	r7, sp, #0
 8004bd0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004bd8:	b2db      	uxtb	r3, r3
 8004bda:	2b22      	cmp	r3, #34	; 0x22
 8004bdc:	f040 80ab 	bne.w	8004d36 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004be8:	d117      	bne.n	8004c1a <UART_Receive_IT+0x50>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	691b      	ldr	r3, [r3, #16]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d113      	bne.n	8004c1a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bfa:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	b29b      	uxth	r3, r3
 8004c04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c08:	b29a      	uxth	r2, r3
 8004c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c0c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c12:	1c9a      	adds	r2, r3, #2
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	629a      	str	r2, [r3, #40]	; 0x28
 8004c18:	e026      	b.n	8004c68 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004c20:	2300      	movs	r3, #0
 8004c22:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	689b      	ldr	r3, [r3, #8]
 8004c28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c2c:	d007      	beq.n	8004c3e <UART_Receive_IT+0x74>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d10a      	bne.n	8004c4c <UART_Receive_IT+0x82>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	691b      	ldr	r3, [r3, #16]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d106      	bne.n	8004c4c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	b2da      	uxtb	r2, r3
 8004c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c48:	701a      	strb	r2, [r3, #0]
 8004c4a:	e008      	b.n	8004c5e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	b2db      	uxtb	r3, r3
 8004c54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c58:	b2da      	uxtb	r2, r3
 8004c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c5c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c62:	1c5a      	adds	r2, r3, #1
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c6c:	b29b      	uxth	r3, r3
 8004c6e:	3b01      	subs	r3, #1
 8004c70:	b29b      	uxth	r3, r3
 8004c72:	687a      	ldr	r2, [r7, #4]
 8004c74:	4619      	mov	r1, r3
 8004c76:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d15a      	bne.n	8004d32 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	68da      	ldr	r2, [r3, #12]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f022 0220 	bic.w	r2, r2, #32
 8004c8a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	68da      	ldr	r2, [r3, #12]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004c9a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	695a      	ldr	r2, [r3, #20]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f022 0201 	bic.w	r2, r2, #1
 8004caa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2220      	movs	r2, #32
 8004cb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cb8:	2b01      	cmp	r3, #1
 8004cba:	d135      	bne.n	8004d28 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	330c      	adds	r3, #12
 8004cc8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	e853 3f00 	ldrex	r3, [r3]
 8004cd0:	613b      	str	r3, [r7, #16]
   return(result);
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	f023 0310 	bic.w	r3, r3, #16
 8004cd8:	627b      	str	r3, [r7, #36]	; 0x24
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	330c      	adds	r3, #12
 8004ce0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ce2:	623a      	str	r2, [r7, #32]
 8004ce4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ce6:	69f9      	ldr	r1, [r7, #28]
 8004ce8:	6a3a      	ldr	r2, [r7, #32]
 8004cea:	e841 2300 	strex	r3, r2, [r1]
 8004cee:	61bb      	str	r3, [r7, #24]
   return(result);
 8004cf0:	69bb      	ldr	r3, [r7, #24]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d1e5      	bne.n	8004cc2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f003 0310 	and.w	r3, r3, #16
 8004d00:	2b10      	cmp	r3, #16
 8004d02:	d10a      	bne.n	8004d1a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004d04:	2300      	movs	r3, #0
 8004d06:	60fb      	str	r3, [r7, #12]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	60fb      	str	r3, [r7, #12]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	60fb      	str	r3, [r7, #12]
 8004d18:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004d1e:	4619      	mov	r1, r3
 8004d20:	6878      	ldr	r0, [r7, #4]
 8004d22:	f7ff fdf9 	bl	8004918 <HAL_UARTEx_RxEventCallback>
 8004d26:	e002      	b.n	8004d2e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004d28:	6878      	ldr	r0, [r7, #4]
 8004d2a:	f7ff fde1 	bl	80048f0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004d2e:	2300      	movs	r3, #0
 8004d30:	e002      	b.n	8004d38 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004d32:	2300      	movs	r3, #0
 8004d34:	e000      	b.n	8004d38 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004d36:	2302      	movs	r3, #2
  }
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	3730      	adds	r7, #48	; 0x30
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd80      	pop	{r7, pc}

08004d40 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d44:	b0c0      	sub	sp, #256	; 0x100
 8004d46:	af00      	add	r7, sp, #0
 8004d48:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	691b      	ldr	r3, [r3, #16]
 8004d54:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004d58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d5c:	68d9      	ldr	r1, [r3, #12]
 8004d5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d62:	681a      	ldr	r2, [r3, #0]
 8004d64:	ea40 0301 	orr.w	r3, r0, r1
 8004d68:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004d6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d6e:	689a      	ldr	r2, [r3, #8]
 8004d70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d74:	691b      	ldr	r3, [r3, #16]
 8004d76:	431a      	orrs	r2, r3
 8004d78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d7c:	695b      	ldr	r3, [r3, #20]
 8004d7e:	431a      	orrs	r2, r3
 8004d80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d84:	69db      	ldr	r3, [r3, #28]
 8004d86:	4313      	orrs	r3, r2
 8004d88:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004d8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	68db      	ldr	r3, [r3, #12]
 8004d94:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004d98:	f021 010c 	bic.w	r1, r1, #12
 8004d9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004da0:	681a      	ldr	r2, [r3, #0]
 8004da2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004da6:	430b      	orrs	r3, r1
 8004da8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004daa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	695b      	ldr	r3, [r3, #20]
 8004db2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004db6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dba:	6999      	ldr	r1, [r3, #24]
 8004dbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dc0:	681a      	ldr	r2, [r3, #0]
 8004dc2:	ea40 0301 	orr.w	r3, r0, r1
 8004dc6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004dc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dcc:	681a      	ldr	r2, [r3, #0]
 8004dce:	4b8f      	ldr	r3, [pc, #572]	; (800500c <UART_SetConfig+0x2cc>)
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	d005      	beq.n	8004de0 <UART_SetConfig+0xa0>
 8004dd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dd8:	681a      	ldr	r2, [r3, #0]
 8004dda:	4b8d      	ldr	r3, [pc, #564]	; (8005010 <UART_SetConfig+0x2d0>)
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	d104      	bne.n	8004dea <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004de0:	f7ff f9fa 	bl	80041d8 <HAL_RCC_GetPCLK2Freq>
 8004de4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004de8:	e003      	b.n	8004df2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004dea:	f7ff f9e1 	bl	80041b0 <HAL_RCC_GetPCLK1Freq>
 8004dee:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004df2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004df6:	69db      	ldr	r3, [r3, #28]
 8004df8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004dfc:	f040 810c 	bne.w	8005018 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004e00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e04:	2200      	movs	r2, #0
 8004e06:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004e0a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004e0e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004e12:	4622      	mov	r2, r4
 8004e14:	462b      	mov	r3, r5
 8004e16:	1891      	adds	r1, r2, r2
 8004e18:	65b9      	str	r1, [r7, #88]	; 0x58
 8004e1a:	415b      	adcs	r3, r3
 8004e1c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e1e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004e22:	4621      	mov	r1, r4
 8004e24:	eb12 0801 	adds.w	r8, r2, r1
 8004e28:	4629      	mov	r1, r5
 8004e2a:	eb43 0901 	adc.w	r9, r3, r1
 8004e2e:	f04f 0200 	mov.w	r2, #0
 8004e32:	f04f 0300 	mov.w	r3, #0
 8004e36:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e3a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004e3e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004e42:	4690      	mov	r8, r2
 8004e44:	4699      	mov	r9, r3
 8004e46:	4623      	mov	r3, r4
 8004e48:	eb18 0303 	adds.w	r3, r8, r3
 8004e4c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004e50:	462b      	mov	r3, r5
 8004e52:	eb49 0303 	adc.w	r3, r9, r3
 8004e56:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004e5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	2200      	movs	r2, #0
 8004e62:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004e66:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004e6a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004e6e:	460b      	mov	r3, r1
 8004e70:	18db      	adds	r3, r3, r3
 8004e72:	653b      	str	r3, [r7, #80]	; 0x50
 8004e74:	4613      	mov	r3, r2
 8004e76:	eb42 0303 	adc.w	r3, r2, r3
 8004e7a:	657b      	str	r3, [r7, #84]	; 0x54
 8004e7c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004e80:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004e84:	f7fb fa04 	bl	8000290 <__aeabi_uldivmod>
 8004e88:	4602      	mov	r2, r0
 8004e8a:	460b      	mov	r3, r1
 8004e8c:	4b61      	ldr	r3, [pc, #388]	; (8005014 <UART_SetConfig+0x2d4>)
 8004e8e:	fba3 2302 	umull	r2, r3, r3, r2
 8004e92:	095b      	lsrs	r3, r3, #5
 8004e94:	011c      	lsls	r4, r3, #4
 8004e96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004ea0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004ea4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004ea8:	4642      	mov	r2, r8
 8004eaa:	464b      	mov	r3, r9
 8004eac:	1891      	adds	r1, r2, r2
 8004eae:	64b9      	str	r1, [r7, #72]	; 0x48
 8004eb0:	415b      	adcs	r3, r3
 8004eb2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004eb4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004eb8:	4641      	mov	r1, r8
 8004eba:	eb12 0a01 	adds.w	sl, r2, r1
 8004ebe:	4649      	mov	r1, r9
 8004ec0:	eb43 0b01 	adc.w	fp, r3, r1
 8004ec4:	f04f 0200 	mov.w	r2, #0
 8004ec8:	f04f 0300 	mov.w	r3, #0
 8004ecc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004ed0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004ed4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004ed8:	4692      	mov	sl, r2
 8004eda:	469b      	mov	fp, r3
 8004edc:	4643      	mov	r3, r8
 8004ede:	eb1a 0303 	adds.w	r3, sl, r3
 8004ee2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004ee6:	464b      	mov	r3, r9
 8004ee8:	eb4b 0303 	adc.w	r3, fp, r3
 8004eec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004ef0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004efc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004f00:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004f04:	460b      	mov	r3, r1
 8004f06:	18db      	adds	r3, r3, r3
 8004f08:	643b      	str	r3, [r7, #64]	; 0x40
 8004f0a:	4613      	mov	r3, r2
 8004f0c:	eb42 0303 	adc.w	r3, r2, r3
 8004f10:	647b      	str	r3, [r7, #68]	; 0x44
 8004f12:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004f16:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004f1a:	f7fb f9b9 	bl	8000290 <__aeabi_uldivmod>
 8004f1e:	4602      	mov	r2, r0
 8004f20:	460b      	mov	r3, r1
 8004f22:	4611      	mov	r1, r2
 8004f24:	4b3b      	ldr	r3, [pc, #236]	; (8005014 <UART_SetConfig+0x2d4>)
 8004f26:	fba3 2301 	umull	r2, r3, r3, r1
 8004f2a:	095b      	lsrs	r3, r3, #5
 8004f2c:	2264      	movs	r2, #100	; 0x64
 8004f2e:	fb02 f303 	mul.w	r3, r2, r3
 8004f32:	1acb      	subs	r3, r1, r3
 8004f34:	00db      	lsls	r3, r3, #3
 8004f36:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004f3a:	4b36      	ldr	r3, [pc, #216]	; (8005014 <UART_SetConfig+0x2d4>)
 8004f3c:	fba3 2302 	umull	r2, r3, r3, r2
 8004f40:	095b      	lsrs	r3, r3, #5
 8004f42:	005b      	lsls	r3, r3, #1
 8004f44:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004f48:	441c      	add	r4, r3
 8004f4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f4e:	2200      	movs	r2, #0
 8004f50:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004f54:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004f58:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004f5c:	4642      	mov	r2, r8
 8004f5e:	464b      	mov	r3, r9
 8004f60:	1891      	adds	r1, r2, r2
 8004f62:	63b9      	str	r1, [r7, #56]	; 0x38
 8004f64:	415b      	adcs	r3, r3
 8004f66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f68:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004f6c:	4641      	mov	r1, r8
 8004f6e:	1851      	adds	r1, r2, r1
 8004f70:	6339      	str	r1, [r7, #48]	; 0x30
 8004f72:	4649      	mov	r1, r9
 8004f74:	414b      	adcs	r3, r1
 8004f76:	637b      	str	r3, [r7, #52]	; 0x34
 8004f78:	f04f 0200 	mov.w	r2, #0
 8004f7c:	f04f 0300 	mov.w	r3, #0
 8004f80:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004f84:	4659      	mov	r1, fp
 8004f86:	00cb      	lsls	r3, r1, #3
 8004f88:	4651      	mov	r1, sl
 8004f8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f8e:	4651      	mov	r1, sl
 8004f90:	00ca      	lsls	r2, r1, #3
 8004f92:	4610      	mov	r0, r2
 8004f94:	4619      	mov	r1, r3
 8004f96:	4603      	mov	r3, r0
 8004f98:	4642      	mov	r2, r8
 8004f9a:	189b      	adds	r3, r3, r2
 8004f9c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004fa0:	464b      	mov	r3, r9
 8004fa2:	460a      	mov	r2, r1
 8004fa4:	eb42 0303 	adc.w	r3, r2, r3
 8004fa8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004fac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004fb8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004fbc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004fc0:	460b      	mov	r3, r1
 8004fc2:	18db      	adds	r3, r3, r3
 8004fc4:	62bb      	str	r3, [r7, #40]	; 0x28
 8004fc6:	4613      	mov	r3, r2
 8004fc8:	eb42 0303 	adc.w	r3, r2, r3
 8004fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004fce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004fd2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004fd6:	f7fb f95b 	bl	8000290 <__aeabi_uldivmod>
 8004fda:	4602      	mov	r2, r0
 8004fdc:	460b      	mov	r3, r1
 8004fde:	4b0d      	ldr	r3, [pc, #52]	; (8005014 <UART_SetConfig+0x2d4>)
 8004fe0:	fba3 1302 	umull	r1, r3, r3, r2
 8004fe4:	095b      	lsrs	r3, r3, #5
 8004fe6:	2164      	movs	r1, #100	; 0x64
 8004fe8:	fb01 f303 	mul.w	r3, r1, r3
 8004fec:	1ad3      	subs	r3, r2, r3
 8004fee:	00db      	lsls	r3, r3, #3
 8004ff0:	3332      	adds	r3, #50	; 0x32
 8004ff2:	4a08      	ldr	r2, [pc, #32]	; (8005014 <UART_SetConfig+0x2d4>)
 8004ff4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ff8:	095b      	lsrs	r3, r3, #5
 8004ffa:	f003 0207 	and.w	r2, r3, #7
 8004ffe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4422      	add	r2, r4
 8005006:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005008:	e105      	b.n	8005216 <UART_SetConfig+0x4d6>
 800500a:	bf00      	nop
 800500c:	40011000 	.word	0x40011000
 8005010:	40011400 	.word	0x40011400
 8005014:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005018:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800501c:	2200      	movs	r2, #0
 800501e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005022:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005026:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800502a:	4642      	mov	r2, r8
 800502c:	464b      	mov	r3, r9
 800502e:	1891      	adds	r1, r2, r2
 8005030:	6239      	str	r1, [r7, #32]
 8005032:	415b      	adcs	r3, r3
 8005034:	627b      	str	r3, [r7, #36]	; 0x24
 8005036:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800503a:	4641      	mov	r1, r8
 800503c:	1854      	adds	r4, r2, r1
 800503e:	4649      	mov	r1, r9
 8005040:	eb43 0501 	adc.w	r5, r3, r1
 8005044:	f04f 0200 	mov.w	r2, #0
 8005048:	f04f 0300 	mov.w	r3, #0
 800504c:	00eb      	lsls	r3, r5, #3
 800504e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005052:	00e2      	lsls	r2, r4, #3
 8005054:	4614      	mov	r4, r2
 8005056:	461d      	mov	r5, r3
 8005058:	4643      	mov	r3, r8
 800505a:	18e3      	adds	r3, r4, r3
 800505c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005060:	464b      	mov	r3, r9
 8005062:	eb45 0303 	adc.w	r3, r5, r3
 8005066:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800506a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	2200      	movs	r2, #0
 8005072:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005076:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800507a:	f04f 0200 	mov.w	r2, #0
 800507e:	f04f 0300 	mov.w	r3, #0
 8005082:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005086:	4629      	mov	r1, r5
 8005088:	008b      	lsls	r3, r1, #2
 800508a:	4621      	mov	r1, r4
 800508c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005090:	4621      	mov	r1, r4
 8005092:	008a      	lsls	r2, r1, #2
 8005094:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005098:	f7fb f8fa 	bl	8000290 <__aeabi_uldivmod>
 800509c:	4602      	mov	r2, r0
 800509e:	460b      	mov	r3, r1
 80050a0:	4b60      	ldr	r3, [pc, #384]	; (8005224 <UART_SetConfig+0x4e4>)
 80050a2:	fba3 2302 	umull	r2, r3, r3, r2
 80050a6:	095b      	lsrs	r3, r3, #5
 80050a8:	011c      	lsls	r4, r3, #4
 80050aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80050ae:	2200      	movs	r2, #0
 80050b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80050b4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80050b8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80050bc:	4642      	mov	r2, r8
 80050be:	464b      	mov	r3, r9
 80050c0:	1891      	adds	r1, r2, r2
 80050c2:	61b9      	str	r1, [r7, #24]
 80050c4:	415b      	adcs	r3, r3
 80050c6:	61fb      	str	r3, [r7, #28]
 80050c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80050cc:	4641      	mov	r1, r8
 80050ce:	1851      	adds	r1, r2, r1
 80050d0:	6139      	str	r1, [r7, #16]
 80050d2:	4649      	mov	r1, r9
 80050d4:	414b      	adcs	r3, r1
 80050d6:	617b      	str	r3, [r7, #20]
 80050d8:	f04f 0200 	mov.w	r2, #0
 80050dc:	f04f 0300 	mov.w	r3, #0
 80050e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80050e4:	4659      	mov	r1, fp
 80050e6:	00cb      	lsls	r3, r1, #3
 80050e8:	4651      	mov	r1, sl
 80050ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80050ee:	4651      	mov	r1, sl
 80050f0:	00ca      	lsls	r2, r1, #3
 80050f2:	4610      	mov	r0, r2
 80050f4:	4619      	mov	r1, r3
 80050f6:	4603      	mov	r3, r0
 80050f8:	4642      	mov	r2, r8
 80050fa:	189b      	adds	r3, r3, r2
 80050fc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005100:	464b      	mov	r3, r9
 8005102:	460a      	mov	r2, r1
 8005104:	eb42 0303 	adc.w	r3, r2, r3
 8005108:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800510c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	2200      	movs	r2, #0
 8005114:	67bb      	str	r3, [r7, #120]	; 0x78
 8005116:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005118:	f04f 0200 	mov.w	r2, #0
 800511c:	f04f 0300 	mov.w	r3, #0
 8005120:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005124:	4649      	mov	r1, r9
 8005126:	008b      	lsls	r3, r1, #2
 8005128:	4641      	mov	r1, r8
 800512a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800512e:	4641      	mov	r1, r8
 8005130:	008a      	lsls	r2, r1, #2
 8005132:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005136:	f7fb f8ab 	bl	8000290 <__aeabi_uldivmod>
 800513a:	4602      	mov	r2, r0
 800513c:	460b      	mov	r3, r1
 800513e:	4b39      	ldr	r3, [pc, #228]	; (8005224 <UART_SetConfig+0x4e4>)
 8005140:	fba3 1302 	umull	r1, r3, r3, r2
 8005144:	095b      	lsrs	r3, r3, #5
 8005146:	2164      	movs	r1, #100	; 0x64
 8005148:	fb01 f303 	mul.w	r3, r1, r3
 800514c:	1ad3      	subs	r3, r2, r3
 800514e:	011b      	lsls	r3, r3, #4
 8005150:	3332      	adds	r3, #50	; 0x32
 8005152:	4a34      	ldr	r2, [pc, #208]	; (8005224 <UART_SetConfig+0x4e4>)
 8005154:	fba2 2303 	umull	r2, r3, r2, r3
 8005158:	095b      	lsrs	r3, r3, #5
 800515a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800515e:	441c      	add	r4, r3
 8005160:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005164:	2200      	movs	r2, #0
 8005166:	673b      	str	r3, [r7, #112]	; 0x70
 8005168:	677a      	str	r2, [r7, #116]	; 0x74
 800516a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800516e:	4642      	mov	r2, r8
 8005170:	464b      	mov	r3, r9
 8005172:	1891      	adds	r1, r2, r2
 8005174:	60b9      	str	r1, [r7, #8]
 8005176:	415b      	adcs	r3, r3
 8005178:	60fb      	str	r3, [r7, #12]
 800517a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800517e:	4641      	mov	r1, r8
 8005180:	1851      	adds	r1, r2, r1
 8005182:	6039      	str	r1, [r7, #0]
 8005184:	4649      	mov	r1, r9
 8005186:	414b      	adcs	r3, r1
 8005188:	607b      	str	r3, [r7, #4]
 800518a:	f04f 0200 	mov.w	r2, #0
 800518e:	f04f 0300 	mov.w	r3, #0
 8005192:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005196:	4659      	mov	r1, fp
 8005198:	00cb      	lsls	r3, r1, #3
 800519a:	4651      	mov	r1, sl
 800519c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80051a0:	4651      	mov	r1, sl
 80051a2:	00ca      	lsls	r2, r1, #3
 80051a4:	4610      	mov	r0, r2
 80051a6:	4619      	mov	r1, r3
 80051a8:	4603      	mov	r3, r0
 80051aa:	4642      	mov	r2, r8
 80051ac:	189b      	adds	r3, r3, r2
 80051ae:	66bb      	str	r3, [r7, #104]	; 0x68
 80051b0:	464b      	mov	r3, r9
 80051b2:	460a      	mov	r2, r1
 80051b4:	eb42 0303 	adc.w	r3, r2, r3
 80051b8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80051ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	2200      	movs	r2, #0
 80051c2:	663b      	str	r3, [r7, #96]	; 0x60
 80051c4:	667a      	str	r2, [r7, #100]	; 0x64
 80051c6:	f04f 0200 	mov.w	r2, #0
 80051ca:	f04f 0300 	mov.w	r3, #0
 80051ce:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80051d2:	4649      	mov	r1, r9
 80051d4:	008b      	lsls	r3, r1, #2
 80051d6:	4641      	mov	r1, r8
 80051d8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80051dc:	4641      	mov	r1, r8
 80051de:	008a      	lsls	r2, r1, #2
 80051e0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80051e4:	f7fb f854 	bl	8000290 <__aeabi_uldivmod>
 80051e8:	4602      	mov	r2, r0
 80051ea:	460b      	mov	r3, r1
 80051ec:	4b0d      	ldr	r3, [pc, #52]	; (8005224 <UART_SetConfig+0x4e4>)
 80051ee:	fba3 1302 	umull	r1, r3, r3, r2
 80051f2:	095b      	lsrs	r3, r3, #5
 80051f4:	2164      	movs	r1, #100	; 0x64
 80051f6:	fb01 f303 	mul.w	r3, r1, r3
 80051fa:	1ad3      	subs	r3, r2, r3
 80051fc:	011b      	lsls	r3, r3, #4
 80051fe:	3332      	adds	r3, #50	; 0x32
 8005200:	4a08      	ldr	r2, [pc, #32]	; (8005224 <UART_SetConfig+0x4e4>)
 8005202:	fba2 2303 	umull	r2, r3, r2, r3
 8005206:	095b      	lsrs	r3, r3, #5
 8005208:	f003 020f 	and.w	r2, r3, #15
 800520c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4422      	add	r2, r4
 8005214:	609a      	str	r2, [r3, #8]
}
 8005216:	bf00      	nop
 8005218:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800521c:	46bd      	mov	sp, r7
 800521e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005222:	bf00      	nop
 8005224:	51eb851f 	.word	0x51eb851f

08005228 <__errno>:
 8005228:	4b01      	ldr	r3, [pc, #4]	; (8005230 <__errno+0x8>)
 800522a:	6818      	ldr	r0, [r3, #0]
 800522c:	4770      	bx	lr
 800522e:	bf00      	nop
 8005230:	2000000c 	.word	0x2000000c

08005234 <__libc_init_array>:
 8005234:	b570      	push	{r4, r5, r6, lr}
 8005236:	4d0d      	ldr	r5, [pc, #52]	; (800526c <__libc_init_array+0x38>)
 8005238:	4c0d      	ldr	r4, [pc, #52]	; (8005270 <__libc_init_array+0x3c>)
 800523a:	1b64      	subs	r4, r4, r5
 800523c:	10a4      	asrs	r4, r4, #2
 800523e:	2600      	movs	r6, #0
 8005240:	42a6      	cmp	r6, r4
 8005242:	d109      	bne.n	8005258 <__libc_init_array+0x24>
 8005244:	4d0b      	ldr	r5, [pc, #44]	; (8005274 <__libc_init_array+0x40>)
 8005246:	4c0c      	ldr	r4, [pc, #48]	; (8005278 <__libc_init_array+0x44>)
 8005248:	f001 f832 	bl	80062b0 <_init>
 800524c:	1b64      	subs	r4, r4, r5
 800524e:	10a4      	asrs	r4, r4, #2
 8005250:	2600      	movs	r6, #0
 8005252:	42a6      	cmp	r6, r4
 8005254:	d105      	bne.n	8005262 <__libc_init_array+0x2e>
 8005256:	bd70      	pop	{r4, r5, r6, pc}
 8005258:	f855 3b04 	ldr.w	r3, [r5], #4
 800525c:	4798      	blx	r3
 800525e:	3601      	adds	r6, #1
 8005260:	e7ee      	b.n	8005240 <__libc_init_array+0xc>
 8005262:	f855 3b04 	ldr.w	r3, [r5], #4
 8005266:	4798      	blx	r3
 8005268:	3601      	adds	r6, #1
 800526a:	e7f2      	b.n	8005252 <__libc_init_array+0x1e>
 800526c:	080063e0 	.word	0x080063e0
 8005270:	080063e0 	.word	0x080063e0
 8005274:	080063e0 	.word	0x080063e0
 8005278:	080063e4 	.word	0x080063e4

0800527c <memcpy>:
 800527c:	440a      	add	r2, r1
 800527e:	4291      	cmp	r1, r2
 8005280:	f100 33ff 	add.w	r3, r0, #4294967295
 8005284:	d100      	bne.n	8005288 <memcpy+0xc>
 8005286:	4770      	bx	lr
 8005288:	b510      	push	{r4, lr}
 800528a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800528e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005292:	4291      	cmp	r1, r2
 8005294:	d1f9      	bne.n	800528a <memcpy+0xe>
 8005296:	bd10      	pop	{r4, pc}

08005298 <memset>:
 8005298:	4402      	add	r2, r0
 800529a:	4603      	mov	r3, r0
 800529c:	4293      	cmp	r3, r2
 800529e:	d100      	bne.n	80052a2 <memset+0xa>
 80052a0:	4770      	bx	lr
 80052a2:	f803 1b01 	strb.w	r1, [r3], #1
 80052a6:	e7f9      	b.n	800529c <memset+0x4>

080052a8 <iprintf>:
 80052a8:	b40f      	push	{r0, r1, r2, r3}
 80052aa:	4b0a      	ldr	r3, [pc, #40]	; (80052d4 <iprintf+0x2c>)
 80052ac:	b513      	push	{r0, r1, r4, lr}
 80052ae:	681c      	ldr	r4, [r3, #0]
 80052b0:	b124      	cbz	r4, 80052bc <iprintf+0x14>
 80052b2:	69a3      	ldr	r3, [r4, #24]
 80052b4:	b913      	cbnz	r3, 80052bc <iprintf+0x14>
 80052b6:	4620      	mov	r0, r4
 80052b8:	f000 fa5e 	bl	8005778 <__sinit>
 80052bc:	ab05      	add	r3, sp, #20
 80052be:	9a04      	ldr	r2, [sp, #16]
 80052c0:	68a1      	ldr	r1, [r4, #8]
 80052c2:	9301      	str	r3, [sp, #4]
 80052c4:	4620      	mov	r0, r4
 80052c6:	f000 fc67 	bl	8005b98 <_vfiprintf_r>
 80052ca:	b002      	add	sp, #8
 80052cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052d0:	b004      	add	sp, #16
 80052d2:	4770      	bx	lr
 80052d4:	2000000c 	.word	0x2000000c

080052d8 <_puts_r>:
 80052d8:	b570      	push	{r4, r5, r6, lr}
 80052da:	460e      	mov	r6, r1
 80052dc:	4605      	mov	r5, r0
 80052de:	b118      	cbz	r0, 80052e8 <_puts_r+0x10>
 80052e0:	6983      	ldr	r3, [r0, #24]
 80052e2:	b90b      	cbnz	r3, 80052e8 <_puts_r+0x10>
 80052e4:	f000 fa48 	bl	8005778 <__sinit>
 80052e8:	69ab      	ldr	r3, [r5, #24]
 80052ea:	68ac      	ldr	r4, [r5, #8]
 80052ec:	b913      	cbnz	r3, 80052f4 <_puts_r+0x1c>
 80052ee:	4628      	mov	r0, r5
 80052f0:	f000 fa42 	bl	8005778 <__sinit>
 80052f4:	4b2c      	ldr	r3, [pc, #176]	; (80053a8 <_puts_r+0xd0>)
 80052f6:	429c      	cmp	r4, r3
 80052f8:	d120      	bne.n	800533c <_puts_r+0x64>
 80052fa:	686c      	ldr	r4, [r5, #4]
 80052fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80052fe:	07db      	lsls	r3, r3, #31
 8005300:	d405      	bmi.n	800530e <_puts_r+0x36>
 8005302:	89a3      	ldrh	r3, [r4, #12]
 8005304:	0598      	lsls	r0, r3, #22
 8005306:	d402      	bmi.n	800530e <_puts_r+0x36>
 8005308:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800530a:	f000 fad3 	bl	80058b4 <__retarget_lock_acquire_recursive>
 800530e:	89a3      	ldrh	r3, [r4, #12]
 8005310:	0719      	lsls	r1, r3, #28
 8005312:	d51d      	bpl.n	8005350 <_puts_r+0x78>
 8005314:	6923      	ldr	r3, [r4, #16]
 8005316:	b1db      	cbz	r3, 8005350 <_puts_r+0x78>
 8005318:	3e01      	subs	r6, #1
 800531a:	68a3      	ldr	r3, [r4, #8]
 800531c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005320:	3b01      	subs	r3, #1
 8005322:	60a3      	str	r3, [r4, #8]
 8005324:	bb39      	cbnz	r1, 8005376 <_puts_r+0x9e>
 8005326:	2b00      	cmp	r3, #0
 8005328:	da38      	bge.n	800539c <_puts_r+0xc4>
 800532a:	4622      	mov	r2, r4
 800532c:	210a      	movs	r1, #10
 800532e:	4628      	mov	r0, r5
 8005330:	f000 f848 	bl	80053c4 <__swbuf_r>
 8005334:	3001      	adds	r0, #1
 8005336:	d011      	beq.n	800535c <_puts_r+0x84>
 8005338:	250a      	movs	r5, #10
 800533a:	e011      	b.n	8005360 <_puts_r+0x88>
 800533c:	4b1b      	ldr	r3, [pc, #108]	; (80053ac <_puts_r+0xd4>)
 800533e:	429c      	cmp	r4, r3
 8005340:	d101      	bne.n	8005346 <_puts_r+0x6e>
 8005342:	68ac      	ldr	r4, [r5, #8]
 8005344:	e7da      	b.n	80052fc <_puts_r+0x24>
 8005346:	4b1a      	ldr	r3, [pc, #104]	; (80053b0 <_puts_r+0xd8>)
 8005348:	429c      	cmp	r4, r3
 800534a:	bf08      	it	eq
 800534c:	68ec      	ldreq	r4, [r5, #12]
 800534e:	e7d5      	b.n	80052fc <_puts_r+0x24>
 8005350:	4621      	mov	r1, r4
 8005352:	4628      	mov	r0, r5
 8005354:	f000 f888 	bl	8005468 <__swsetup_r>
 8005358:	2800      	cmp	r0, #0
 800535a:	d0dd      	beq.n	8005318 <_puts_r+0x40>
 800535c:	f04f 35ff 	mov.w	r5, #4294967295
 8005360:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005362:	07da      	lsls	r2, r3, #31
 8005364:	d405      	bmi.n	8005372 <_puts_r+0x9a>
 8005366:	89a3      	ldrh	r3, [r4, #12]
 8005368:	059b      	lsls	r3, r3, #22
 800536a:	d402      	bmi.n	8005372 <_puts_r+0x9a>
 800536c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800536e:	f000 faa2 	bl	80058b6 <__retarget_lock_release_recursive>
 8005372:	4628      	mov	r0, r5
 8005374:	bd70      	pop	{r4, r5, r6, pc}
 8005376:	2b00      	cmp	r3, #0
 8005378:	da04      	bge.n	8005384 <_puts_r+0xac>
 800537a:	69a2      	ldr	r2, [r4, #24]
 800537c:	429a      	cmp	r2, r3
 800537e:	dc06      	bgt.n	800538e <_puts_r+0xb6>
 8005380:	290a      	cmp	r1, #10
 8005382:	d004      	beq.n	800538e <_puts_r+0xb6>
 8005384:	6823      	ldr	r3, [r4, #0]
 8005386:	1c5a      	adds	r2, r3, #1
 8005388:	6022      	str	r2, [r4, #0]
 800538a:	7019      	strb	r1, [r3, #0]
 800538c:	e7c5      	b.n	800531a <_puts_r+0x42>
 800538e:	4622      	mov	r2, r4
 8005390:	4628      	mov	r0, r5
 8005392:	f000 f817 	bl	80053c4 <__swbuf_r>
 8005396:	3001      	adds	r0, #1
 8005398:	d1bf      	bne.n	800531a <_puts_r+0x42>
 800539a:	e7df      	b.n	800535c <_puts_r+0x84>
 800539c:	6823      	ldr	r3, [r4, #0]
 800539e:	250a      	movs	r5, #10
 80053a0:	1c5a      	adds	r2, r3, #1
 80053a2:	6022      	str	r2, [r4, #0]
 80053a4:	701d      	strb	r5, [r3, #0]
 80053a6:	e7db      	b.n	8005360 <_puts_r+0x88>
 80053a8:	08006364 	.word	0x08006364
 80053ac:	08006384 	.word	0x08006384
 80053b0:	08006344 	.word	0x08006344

080053b4 <puts>:
 80053b4:	4b02      	ldr	r3, [pc, #8]	; (80053c0 <puts+0xc>)
 80053b6:	4601      	mov	r1, r0
 80053b8:	6818      	ldr	r0, [r3, #0]
 80053ba:	f7ff bf8d 	b.w	80052d8 <_puts_r>
 80053be:	bf00      	nop
 80053c0:	2000000c 	.word	0x2000000c

080053c4 <__swbuf_r>:
 80053c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053c6:	460e      	mov	r6, r1
 80053c8:	4614      	mov	r4, r2
 80053ca:	4605      	mov	r5, r0
 80053cc:	b118      	cbz	r0, 80053d6 <__swbuf_r+0x12>
 80053ce:	6983      	ldr	r3, [r0, #24]
 80053d0:	b90b      	cbnz	r3, 80053d6 <__swbuf_r+0x12>
 80053d2:	f000 f9d1 	bl	8005778 <__sinit>
 80053d6:	4b21      	ldr	r3, [pc, #132]	; (800545c <__swbuf_r+0x98>)
 80053d8:	429c      	cmp	r4, r3
 80053da:	d12b      	bne.n	8005434 <__swbuf_r+0x70>
 80053dc:	686c      	ldr	r4, [r5, #4]
 80053de:	69a3      	ldr	r3, [r4, #24]
 80053e0:	60a3      	str	r3, [r4, #8]
 80053e2:	89a3      	ldrh	r3, [r4, #12]
 80053e4:	071a      	lsls	r2, r3, #28
 80053e6:	d52f      	bpl.n	8005448 <__swbuf_r+0x84>
 80053e8:	6923      	ldr	r3, [r4, #16]
 80053ea:	b36b      	cbz	r3, 8005448 <__swbuf_r+0x84>
 80053ec:	6923      	ldr	r3, [r4, #16]
 80053ee:	6820      	ldr	r0, [r4, #0]
 80053f0:	1ac0      	subs	r0, r0, r3
 80053f2:	6963      	ldr	r3, [r4, #20]
 80053f4:	b2f6      	uxtb	r6, r6
 80053f6:	4283      	cmp	r3, r0
 80053f8:	4637      	mov	r7, r6
 80053fa:	dc04      	bgt.n	8005406 <__swbuf_r+0x42>
 80053fc:	4621      	mov	r1, r4
 80053fe:	4628      	mov	r0, r5
 8005400:	f000 f926 	bl	8005650 <_fflush_r>
 8005404:	bb30      	cbnz	r0, 8005454 <__swbuf_r+0x90>
 8005406:	68a3      	ldr	r3, [r4, #8]
 8005408:	3b01      	subs	r3, #1
 800540a:	60a3      	str	r3, [r4, #8]
 800540c:	6823      	ldr	r3, [r4, #0]
 800540e:	1c5a      	adds	r2, r3, #1
 8005410:	6022      	str	r2, [r4, #0]
 8005412:	701e      	strb	r6, [r3, #0]
 8005414:	6963      	ldr	r3, [r4, #20]
 8005416:	3001      	adds	r0, #1
 8005418:	4283      	cmp	r3, r0
 800541a:	d004      	beq.n	8005426 <__swbuf_r+0x62>
 800541c:	89a3      	ldrh	r3, [r4, #12]
 800541e:	07db      	lsls	r3, r3, #31
 8005420:	d506      	bpl.n	8005430 <__swbuf_r+0x6c>
 8005422:	2e0a      	cmp	r6, #10
 8005424:	d104      	bne.n	8005430 <__swbuf_r+0x6c>
 8005426:	4621      	mov	r1, r4
 8005428:	4628      	mov	r0, r5
 800542a:	f000 f911 	bl	8005650 <_fflush_r>
 800542e:	b988      	cbnz	r0, 8005454 <__swbuf_r+0x90>
 8005430:	4638      	mov	r0, r7
 8005432:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005434:	4b0a      	ldr	r3, [pc, #40]	; (8005460 <__swbuf_r+0x9c>)
 8005436:	429c      	cmp	r4, r3
 8005438:	d101      	bne.n	800543e <__swbuf_r+0x7a>
 800543a:	68ac      	ldr	r4, [r5, #8]
 800543c:	e7cf      	b.n	80053de <__swbuf_r+0x1a>
 800543e:	4b09      	ldr	r3, [pc, #36]	; (8005464 <__swbuf_r+0xa0>)
 8005440:	429c      	cmp	r4, r3
 8005442:	bf08      	it	eq
 8005444:	68ec      	ldreq	r4, [r5, #12]
 8005446:	e7ca      	b.n	80053de <__swbuf_r+0x1a>
 8005448:	4621      	mov	r1, r4
 800544a:	4628      	mov	r0, r5
 800544c:	f000 f80c 	bl	8005468 <__swsetup_r>
 8005450:	2800      	cmp	r0, #0
 8005452:	d0cb      	beq.n	80053ec <__swbuf_r+0x28>
 8005454:	f04f 37ff 	mov.w	r7, #4294967295
 8005458:	e7ea      	b.n	8005430 <__swbuf_r+0x6c>
 800545a:	bf00      	nop
 800545c:	08006364 	.word	0x08006364
 8005460:	08006384 	.word	0x08006384
 8005464:	08006344 	.word	0x08006344

08005468 <__swsetup_r>:
 8005468:	4b32      	ldr	r3, [pc, #200]	; (8005534 <__swsetup_r+0xcc>)
 800546a:	b570      	push	{r4, r5, r6, lr}
 800546c:	681d      	ldr	r5, [r3, #0]
 800546e:	4606      	mov	r6, r0
 8005470:	460c      	mov	r4, r1
 8005472:	b125      	cbz	r5, 800547e <__swsetup_r+0x16>
 8005474:	69ab      	ldr	r3, [r5, #24]
 8005476:	b913      	cbnz	r3, 800547e <__swsetup_r+0x16>
 8005478:	4628      	mov	r0, r5
 800547a:	f000 f97d 	bl	8005778 <__sinit>
 800547e:	4b2e      	ldr	r3, [pc, #184]	; (8005538 <__swsetup_r+0xd0>)
 8005480:	429c      	cmp	r4, r3
 8005482:	d10f      	bne.n	80054a4 <__swsetup_r+0x3c>
 8005484:	686c      	ldr	r4, [r5, #4]
 8005486:	89a3      	ldrh	r3, [r4, #12]
 8005488:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800548c:	0719      	lsls	r1, r3, #28
 800548e:	d42c      	bmi.n	80054ea <__swsetup_r+0x82>
 8005490:	06dd      	lsls	r5, r3, #27
 8005492:	d411      	bmi.n	80054b8 <__swsetup_r+0x50>
 8005494:	2309      	movs	r3, #9
 8005496:	6033      	str	r3, [r6, #0]
 8005498:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800549c:	81a3      	strh	r3, [r4, #12]
 800549e:	f04f 30ff 	mov.w	r0, #4294967295
 80054a2:	e03e      	b.n	8005522 <__swsetup_r+0xba>
 80054a4:	4b25      	ldr	r3, [pc, #148]	; (800553c <__swsetup_r+0xd4>)
 80054a6:	429c      	cmp	r4, r3
 80054a8:	d101      	bne.n	80054ae <__swsetup_r+0x46>
 80054aa:	68ac      	ldr	r4, [r5, #8]
 80054ac:	e7eb      	b.n	8005486 <__swsetup_r+0x1e>
 80054ae:	4b24      	ldr	r3, [pc, #144]	; (8005540 <__swsetup_r+0xd8>)
 80054b0:	429c      	cmp	r4, r3
 80054b2:	bf08      	it	eq
 80054b4:	68ec      	ldreq	r4, [r5, #12]
 80054b6:	e7e6      	b.n	8005486 <__swsetup_r+0x1e>
 80054b8:	0758      	lsls	r0, r3, #29
 80054ba:	d512      	bpl.n	80054e2 <__swsetup_r+0x7a>
 80054bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80054be:	b141      	cbz	r1, 80054d2 <__swsetup_r+0x6a>
 80054c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80054c4:	4299      	cmp	r1, r3
 80054c6:	d002      	beq.n	80054ce <__swsetup_r+0x66>
 80054c8:	4630      	mov	r0, r6
 80054ca:	f000 fa5b 	bl	8005984 <_free_r>
 80054ce:	2300      	movs	r3, #0
 80054d0:	6363      	str	r3, [r4, #52]	; 0x34
 80054d2:	89a3      	ldrh	r3, [r4, #12]
 80054d4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80054d8:	81a3      	strh	r3, [r4, #12]
 80054da:	2300      	movs	r3, #0
 80054dc:	6063      	str	r3, [r4, #4]
 80054de:	6923      	ldr	r3, [r4, #16]
 80054e0:	6023      	str	r3, [r4, #0]
 80054e2:	89a3      	ldrh	r3, [r4, #12]
 80054e4:	f043 0308 	orr.w	r3, r3, #8
 80054e8:	81a3      	strh	r3, [r4, #12]
 80054ea:	6923      	ldr	r3, [r4, #16]
 80054ec:	b94b      	cbnz	r3, 8005502 <__swsetup_r+0x9a>
 80054ee:	89a3      	ldrh	r3, [r4, #12]
 80054f0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80054f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054f8:	d003      	beq.n	8005502 <__swsetup_r+0x9a>
 80054fa:	4621      	mov	r1, r4
 80054fc:	4630      	mov	r0, r6
 80054fe:	f000 fa01 	bl	8005904 <__smakebuf_r>
 8005502:	89a0      	ldrh	r0, [r4, #12]
 8005504:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005508:	f010 0301 	ands.w	r3, r0, #1
 800550c:	d00a      	beq.n	8005524 <__swsetup_r+0xbc>
 800550e:	2300      	movs	r3, #0
 8005510:	60a3      	str	r3, [r4, #8]
 8005512:	6963      	ldr	r3, [r4, #20]
 8005514:	425b      	negs	r3, r3
 8005516:	61a3      	str	r3, [r4, #24]
 8005518:	6923      	ldr	r3, [r4, #16]
 800551a:	b943      	cbnz	r3, 800552e <__swsetup_r+0xc6>
 800551c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005520:	d1ba      	bne.n	8005498 <__swsetup_r+0x30>
 8005522:	bd70      	pop	{r4, r5, r6, pc}
 8005524:	0781      	lsls	r1, r0, #30
 8005526:	bf58      	it	pl
 8005528:	6963      	ldrpl	r3, [r4, #20]
 800552a:	60a3      	str	r3, [r4, #8]
 800552c:	e7f4      	b.n	8005518 <__swsetup_r+0xb0>
 800552e:	2000      	movs	r0, #0
 8005530:	e7f7      	b.n	8005522 <__swsetup_r+0xba>
 8005532:	bf00      	nop
 8005534:	2000000c 	.word	0x2000000c
 8005538:	08006364 	.word	0x08006364
 800553c:	08006384 	.word	0x08006384
 8005540:	08006344 	.word	0x08006344

08005544 <__sflush_r>:
 8005544:	898a      	ldrh	r2, [r1, #12]
 8005546:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800554a:	4605      	mov	r5, r0
 800554c:	0710      	lsls	r0, r2, #28
 800554e:	460c      	mov	r4, r1
 8005550:	d458      	bmi.n	8005604 <__sflush_r+0xc0>
 8005552:	684b      	ldr	r3, [r1, #4]
 8005554:	2b00      	cmp	r3, #0
 8005556:	dc05      	bgt.n	8005564 <__sflush_r+0x20>
 8005558:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800555a:	2b00      	cmp	r3, #0
 800555c:	dc02      	bgt.n	8005564 <__sflush_r+0x20>
 800555e:	2000      	movs	r0, #0
 8005560:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005564:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005566:	2e00      	cmp	r6, #0
 8005568:	d0f9      	beq.n	800555e <__sflush_r+0x1a>
 800556a:	2300      	movs	r3, #0
 800556c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005570:	682f      	ldr	r7, [r5, #0]
 8005572:	602b      	str	r3, [r5, #0]
 8005574:	d032      	beq.n	80055dc <__sflush_r+0x98>
 8005576:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005578:	89a3      	ldrh	r3, [r4, #12]
 800557a:	075a      	lsls	r2, r3, #29
 800557c:	d505      	bpl.n	800558a <__sflush_r+0x46>
 800557e:	6863      	ldr	r3, [r4, #4]
 8005580:	1ac0      	subs	r0, r0, r3
 8005582:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005584:	b10b      	cbz	r3, 800558a <__sflush_r+0x46>
 8005586:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005588:	1ac0      	subs	r0, r0, r3
 800558a:	2300      	movs	r3, #0
 800558c:	4602      	mov	r2, r0
 800558e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005590:	6a21      	ldr	r1, [r4, #32]
 8005592:	4628      	mov	r0, r5
 8005594:	47b0      	blx	r6
 8005596:	1c43      	adds	r3, r0, #1
 8005598:	89a3      	ldrh	r3, [r4, #12]
 800559a:	d106      	bne.n	80055aa <__sflush_r+0x66>
 800559c:	6829      	ldr	r1, [r5, #0]
 800559e:	291d      	cmp	r1, #29
 80055a0:	d82c      	bhi.n	80055fc <__sflush_r+0xb8>
 80055a2:	4a2a      	ldr	r2, [pc, #168]	; (800564c <__sflush_r+0x108>)
 80055a4:	40ca      	lsrs	r2, r1
 80055a6:	07d6      	lsls	r6, r2, #31
 80055a8:	d528      	bpl.n	80055fc <__sflush_r+0xb8>
 80055aa:	2200      	movs	r2, #0
 80055ac:	6062      	str	r2, [r4, #4]
 80055ae:	04d9      	lsls	r1, r3, #19
 80055b0:	6922      	ldr	r2, [r4, #16]
 80055b2:	6022      	str	r2, [r4, #0]
 80055b4:	d504      	bpl.n	80055c0 <__sflush_r+0x7c>
 80055b6:	1c42      	adds	r2, r0, #1
 80055b8:	d101      	bne.n	80055be <__sflush_r+0x7a>
 80055ba:	682b      	ldr	r3, [r5, #0]
 80055bc:	b903      	cbnz	r3, 80055c0 <__sflush_r+0x7c>
 80055be:	6560      	str	r0, [r4, #84]	; 0x54
 80055c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80055c2:	602f      	str	r7, [r5, #0]
 80055c4:	2900      	cmp	r1, #0
 80055c6:	d0ca      	beq.n	800555e <__sflush_r+0x1a>
 80055c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80055cc:	4299      	cmp	r1, r3
 80055ce:	d002      	beq.n	80055d6 <__sflush_r+0x92>
 80055d0:	4628      	mov	r0, r5
 80055d2:	f000 f9d7 	bl	8005984 <_free_r>
 80055d6:	2000      	movs	r0, #0
 80055d8:	6360      	str	r0, [r4, #52]	; 0x34
 80055da:	e7c1      	b.n	8005560 <__sflush_r+0x1c>
 80055dc:	6a21      	ldr	r1, [r4, #32]
 80055de:	2301      	movs	r3, #1
 80055e0:	4628      	mov	r0, r5
 80055e2:	47b0      	blx	r6
 80055e4:	1c41      	adds	r1, r0, #1
 80055e6:	d1c7      	bne.n	8005578 <__sflush_r+0x34>
 80055e8:	682b      	ldr	r3, [r5, #0]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d0c4      	beq.n	8005578 <__sflush_r+0x34>
 80055ee:	2b1d      	cmp	r3, #29
 80055f0:	d001      	beq.n	80055f6 <__sflush_r+0xb2>
 80055f2:	2b16      	cmp	r3, #22
 80055f4:	d101      	bne.n	80055fa <__sflush_r+0xb6>
 80055f6:	602f      	str	r7, [r5, #0]
 80055f8:	e7b1      	b.n	800555e <__sflush_r+0x1a>
 80055fa:	89a3      	ldrh	r3, [r4, #12]
 80055fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005600:	81a3      	strh	r3, [r4, #12]
 8005602:	e7ad      	b.n	8005560 <__sflush_r+0x1c>
 8005604:	690f      	ldr	r7, [r1, #16]
 8005606:	2f00      	cmp	r7, #0
 8005608:	d0a9      	beq.n	800555e <__sflush_r+0x1a>
 800560a:	0793      	lsls	r3, r2, #30
 800560c:	680e      	ldr	r6, [r1, #0]
 800560e:	bf08      	it	eq
 8005610:	694b      	ldreq	r3, [r1, #20]
 8005612:	600f      	str	r7, [r1, #0]
 8005614:	bf18      	it	ne
 8005616:	2300      	movne	r3, #0
 8005618:	eba6 0807 	sub.w	r8, r6, r7
 800561c:	608b      	str	r3, [r1, #8]
 800561e:	f1b8 0f00 	cmp.w	r8, #0
 8005622:	dd9c      	ble.n	800555e <__sflush_r+0x1a>
 8005624:	6a21      	ldr	r1, [r4, #32]
 8005626:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005628:	4643      	mov	r3, r8
 800562a:	463a      	mov	r2, r7
 800562c:	4628      	mov	r0, r5
 800562e:	47b0      	blx	r6
 8005630:	2800      	cmp	r0, #0
 8005632:	dc06      	bgt.n	8005642 <__sflush_r+0xfe>
 8005634:	89a3      	ldrh	r3, [r4, #12]
 8005636:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800563a:	81a3      	strh	r3, [r4, #12]
 800563c:	f04f 30ff 	mov.w	r0, #4294967295
 8005640:	e78e      	b.n	8005560 <__sflush_r+0x1c>
 8005642:	4407      	add	r7, r0
 8005644:	eba8 0800 	sub.w	r8, r8, r0
 8005648:	e7e9      	b.n	800561e <__sflush_r+0xda>
 800564a:	bf00      	nop
 800564c:	20400001 	.word	0x20400001

08005650 <_fflush_r>:
 8005650:	b538      	push	{r3, r4, r5, lr}
 8005652:	690b      	ldr	r3, [r1, #16]
 8005654:	4605      	mov	r5, r0
 8005656:	460c      	mov	r4, r1
 8005658:	b913      	cbnz	r3, 8005660 <_fflush_r+0x10>
 800565a:	2500      	movs	r5, #0
 800565c:	4628      	mov	r0, r5
 800565e:	bd38      	pop	{r3, r4, r5, pc}
 8005660:	b118      	cbz	r0, 800566a <_fflush_r+0x1a>
 8005662:	6983      	ldr	r3, [r0, #24]
 8005664:	b90b      	cbnz	r3, 800566a <_fflush_r+0x1a>
 8005666:	f000 f887 	bl	8005778 <__sinit>
 800566a:	4b14      	ldr	r3, [pc, #80]	; (80056bc <_fflush_r+0x6c>)
 800566c:	429c      	cmp	r4, r3
 800566e:	d11b      	bne.n	80056a8 <_fflush_r+0x58>
 8005670:	686c      	ldr	r4, [r5, #4]
 8005672:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d0ef      	beq.n	800565a <_fflush_r+0xa>
 800567a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800567c:	07d0      	lsls	r0, r2, #31
 800567e:	d404      	bmi.n	800568a <_fflush_r+0x3a>
 8005680:	0599      	lsls	r1, r3, #22
 8005682:	d402      	bmi.n	800568a <_fflush_r+0x3a>
 8005684:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005686:	f000 f915 	bl	80058b4 <__retarget_lock_acquire_recursive>
 800568a:	4628      	mov	r0, r5
 800568c:	4621      	mov	r1, r4
 800568e:	f7ff ff59 	bl	8005544 <__sflush_r>
 8005692:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005694:	07da      	lsls	r2, r3, #31
 8005696:	4605      	mov	r5, r0
 8005698:	d4e0      	bmi.n	800565c <_fflush_r+0xc>
 800569a:	89a3      	ldrh	r3, [r4, #12]
 800569c:	059b      	lsls	r3, r3, #22
 800569e:	d4dd      	bmi.n	800565c <_fflush_r+0xc>
 80056a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80056a2:	f000 f908 	bl	80058b6 <__retarget_lock_release_recursive>
 80056a6:	e7d9      	b.n	800565c <_fflush_r+0xc>
 80056a8:	4b05      	ldr	r3, [pc, #20]	; (80056c0 <_fflush_r+0x70>)
 80056aa:	429c      	cmp	r4, r3
 80056ac:	d101      	bne.n	80056b2 <_fflush_r+0x62>
 80056ae:	68ac      	ldr	r4, [r5, #8]
 80056b0:	e7df      	b.n	8005672 <_fflush_r+0x22>
 80056b2:	4b04      	ldr	r3, [pc, #16]	; (80056c4 <_fflush_r+0x74>)
 80056b4:	429c      	cmp	r4, r3
 80056b6:	bf08      	it	eq
 80056b8:	68ec      	ldreq	r4, [r5, #12]
 80056ba:	e7da      	b.n	8005672 <_fflush_r+0x22>
 80056bc:	08006364 	.word	0x08006364
 80056c0:	08006384 	.word	0x08006384
 80056c4:	08006344 	.word	0x08006344

080056c8 <std>:
 80056c8:	2300      	movs	r3, #0
 80056ca:	b510      	push	{r4, lr}
 80056cc:	4604      	mov	r4, r0
 80056ce:	e9c0 3300 	strd	r3, r3, [r0]
 80056d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80056d6:	6083      	str	r3, [r0, #8]
 80056d8:	8181      	strh	r1, [r0, #12]
 80056da:	6643      	str	r3, [r0, #100]	; 0x64
 80056dc:	81c2      	strh	r2, [r0, #14]
 80056de:	6183      	str	r3, [r0, #24]
 80056e0:	4619      	mov	r1, r3
 80056e2:	2208      	movs	r2, #8
 80056e4:	305c      	adds	r0, #92	; 0x5c
 80056e6:	f7ff fdd7 	bl	8005298 <memset>
 80056ea:	4b05      	ldr	r3, [pc, #20]	; (8005700 <std+0x38>)
 80056ec:	6263      	str	r3, [r4, #36]	; 0x24
 80056ee:	4b05      	ldr	r3, [pc, #20]	; (8005704 <std+0x3c>)
 80056f0:	62a3      	str	r3, [r4, #40]	; 0x28
 80056f2:	4b05      	ldr	r3, [pc, #20]	; (8005708 <std+0x40>)
 80056f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80056f6:	4b05      	ldr	r3, [pc, #20]	; (800570c <std+0x44>)
 80056f8:	6224      	str	r4, [r4, #32]
 80056fa:	6323      	str	r3, [r4, #48]	; 0x30
 80056fc:	bd10      	pop	{r4, pc}
 80056fe:	bf00      	nop
 8005700:	08006141 	.word	0x08006141
 8005704:	08006163 	.word	0x08006163
 8005708:	0800619b 	.word	0x0800619b
 800570c:	080061bf 	.word	0x080061bf

08005710 <_cleanup_r>:
 8005710:	4901      	ldr	r1, [pc, #4]	; (8005718 <_cleanup_r+0x8>)
 8005712:	f000 b8af 	b.w	8005874 <_fwalk_reent>
 8005716:	bf00      	nop
 8005718:	08005651 	.word	0x08005651

0800571c <__sfmoreglue>:
 800571c:	b570      	push	{r4, r5, r6, lr}
 800571e:	2268      	movs	r2, #104	; 0x68
 8005720:	1e4d      	subs	r5, r1, #1
 8005722:	4355      	muls	r5, r2
 8005724:	460e      	mov	r6, r1
 8005726:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800572a:	f000 f997 	bl	8005a5c <_malloc_r>
 800572e:	4604      	mov	r4, r0
 8005730:	b140      	cbz	r0, 8005744 <__sfmoreglue+0x28>
 8005732:	2100      	movs	r1, #0
 8005734:	e9c0 1600 	strd	r1, r6, [r0]
 8005738:	300c      	adds	r0, #12
 800573a:	60a0      	str	r0, [r4, #8]
 800573c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005740:	f7ff fdaa 	bl	8005298 <memset>
 8005744:	4620      	mov	r0, r4
 8005746:	bd70      	pop	{r4, r5, r6, pc}

08005748 <__sfp_lock_acquire>:
 8005748:	4801      	ldr	r0, [pc, #4]	; (8005750 <__sfp_lock_acquire+0x8>)
 800574a:	f000 b8b3 	b.w	80058b4 <__retarget_lock_acquire_recursive>
 800574e:	bf00      	nop
 8005750:	20000181 	.word	0x20000181

08005754 <__sfp_lock_release>:
 8005754:	4801      	ldr	r0, [pc, #4]	; (800575c <__sfp_lock_release+0x8>)
 8005756:	f000 b8ae 	b.w	80058b6 <__retarget_lock_release_recursive>
 800575a:	bf00      	nop
 800575c:	20000181 	.word	0x20000181

08005760 <__sinit_lock_acquire>:
 8005760:	4801      	ldr	r0, [pc, #4]	; (8005768 <__sinit_lock_acquire+0x8>)
 8005762:	f000 b8a7 	b.w	80058b4 <__retarget_lock_acquire_recursive>
 8005766:	bf00      	nop
 8005768:	20000182 	.word	0x20000182

0800576c <__sinit_lock_release>:
 800576c:	4801      	ldr	r0, [pc, #4]	; (8005774 <__sinit_lock_release+0x8>)
 800576e:	f000 b8a2 	b.w	80058b6 <__retarget_lock_release_recursive>
 8005772:	bf00      	nop
 8005774:	20000182 	.word	0x20000182

08005778 <__sinit>:
 8005778:	b510      	push	{r4, lr}
 800577a:	4604      	mov	r4, r0
 800577c:	f7ff fff0 	bl	8005760 <__sinit_lock_acquire>
 8005780:	69a3      	ldr	r3, [r4, #24]
 8005782:	b11b      	cbz	r3, 800578c <__sinit+0x14>
 8005784:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005788:	f7ff bff0 	b.w	800576c <__sinit_lock_release>
 800578c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005790:	6523      	str	r3, [r4, #80]	; 0x50
 8005792:	4b13      	ldr	r3, [pc, #76]	; (80057e0 <__sinit+0x68>)
 8005794:	4a13      	ldr	r2, [pc, #76]	; (80057e4 <__sinit+0x6c>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	62a2      	str	r2, [r4, #40]	; 0x28
 800579a:	42a3      	cmp	r3, r4
 800579c:	bf04      	itt	eq
 800579e:	2301      	moveq	r3, #1
 80057a0:	61a3      	streq	r3, [r4, #24]
 80057a2:	4620      	mov	r0, r4
 80057a4:	f000 f820 	bl	80057e8 <__sfp>
 80057a8:	6060      	str	r0, [r4, #4]
 80057aa:	4620      	mov	r0, r4
 80057ac:	f000 f81c 	bl	80057e8 <__sfp>
 80057b0:	60a0      	str	r0, [r4, #8]
 80057b2:	4620      	mov	r0, r4
 80057b4:	f000 f818 	bl	80057e8 <__sfp>
 80057b8:	2200      	movs	r2, #0
 80057ba:	60e0      	str	r0, [r4, #12]
 80057bc:	2104      	movs	r1, #4
 80057be:	6860      	ldr	r0, [r4, #4]
 80057c0:	f7ff ff82 	bl	80056c8 <std>
 80057c4:	68a0      	ldr	r0, [r4, #8]
 80057c6:	2201      	movs	r2, #1
 80057c8:	2109      	movs	r1, #9
 80057ca:	f7ff ff7d 	bl	80056c8 <std>
 80057ce:	68e0      	ldr	r0, [r4, #12]
 80057d0:	2202      	movs	r2, #2
 80057d2:	2112      	movs	r1, #18
 80057d4:	f7ff ff78 	bl	80056c8 <std>
 80057d8:	2301      	movs	r3, #1
 80057da:	61a3      	str	r3, [r4, #24]
 80057dc:	e7d2      	b.n	8005784 <__sinit+0xc>
 80057de:	bf00      	nop
 80057e0:	08006340 	.word	0x08006340
 80057e4:	08005711 	.word	0x08005711

080057e8 <__sfp>:
 80057e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057ea:	4607      	mov	r7, r0
 80057ec:	f7ff ffac 	bl	8005748 <__sfp_lock_acquire>
 80057f0:	4b1e      	ldr	r3, [pc, #120]	; (800586c <__sfp+0x84>)
 80057f2:	681e      	ldr	r6, [r3, #0]
 80057f4:	69b3      	ldr	r3, [r6, #24]
 80057f6:	b913      	cbnz	r3, 80057fe <__sfp+0x16>
 80057f8:	4630      	mov	r0, r6
 80057fa:	f7ff ffbd 	bl	8005778 <__sinit>
 80057fe:	3648      	adds	r6, #72	; 0x48
 8005800:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005804:	3b01      	subs	r3, #1
 8005806:	d503      	bpl.n	8005810 <__sfp+0x28>
 8005808:	6833      	ldr	r3, [r6, #0]
 800580a:	b30b      	cbz	r3, 8005850 <__sfp+0x68>
 800580c:	6836      	ldr	r6, [r6, #0]
 800580e:	e7f7      	b.n	8005800 <__sfp+0x18>
 8005810:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005814:	b9d5      	cbnz	r5, 800584c <__sfp+0x64>
 8005816:	4b16      	ldr	r3, [pc, #88]	; (8005870 <__sfp+0x88>)
 8005818:	60e3      	str	r3, [r4, #12]
 800581a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800581e:	6665      	str	r5, [r4, #100]	; 0x64
 8005820:	f000 f847 	bl	80058b2 <__retarget_lock_init_recursive>
 8005824:	f7ff ff96 	bl	8005754 <__sfp_lock_release>
 8005828:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800582c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005830:	6025      	str	r5, [r4, #0]
 8005832:	61a5      	str	r5, [r4, #24]
 8005834:	2208      	movs	r2, #8
 8005836:	4629      	mov	r1, r5
 8005838:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800583c:	f7ff fd2c 	bl	8005298 <memset>
 8005840:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005844:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005848:	4620      	mov	r0, r4
 800584a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800584c:	3468      	adds	r4, #104	; 0x68
 800584e:	e7d9      	b.n	8005804 <__sfp+0x1c>
 8005850:	2104      	movs	r1, #4
 8005852:	4638      	mov	r0, r7
 8005854:	f7ff ff62 	bl	800571c <__sfmoreglue>
 8005858:	4604      	mov	r4, r0
 800585a:	6030      	str	r0, [r6, #0]
 800585c:	2800      	cmp	r0, #0
 800585e:	d1d5      	bne.n	800580c <__sfp+0x24>
 8005860:	f7ff ff78 	bl	8005754 <__sfp_lock_release>
 8005864:	230c      	movs	r3, #12
 8005866:	603b      	str	r3, [r7, #0]
 8005868:	e7ee      	b.n	8005848 <__sfp+0x60>
 800586a:	bf00      	nop
 800586c:	08006340 	.word	0x08006340
 8005870:	ffff0001 	.word	0xffff0001

08005874 <_fwalk_reent>:
 8005874:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005878:	4606      	mov	r6, r0
 800587a:	4688      	mov	r8, r1
 800587c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005880:	2700      	movs	r7, #0
 8005882:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005886:	f1b9 0901 	subs.w	r9, r9, #1
 800588a:	d505      	bpl.n	8005898 <_fwalk_reent+0x24>
 800588c:	6824      	ldr	r4, [r4, #0]
 800588e:	2c00      	cmp	r4, #0
 8005890:	d1f7      	bne.n	8005882 <_fwalk_reent+0xe>
 8005892:	4638      	mov	r0, r7
 8005894:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005898:	89ab      	ldrh	r3, [r5, #12]
 800589a:	2b01      	cmp	r3, #1
 800589c:	d907      	bls.n	80058ae <_fwalk_reent+0x3a>
 800589e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80058a2:	3301      	adds	r3, #1
 80058a4:	d003      	beq.n	80058ae <_fwalk_reent+0x3a>
 80058a6:	4629      	mov	r1, r5
 80058a8:	4630      	mov	r0, r6
 80058aa:	47c0      	blx	r8
 80058ac:	4307      	orrs	r7, r0
 80058ae:	3568      	adds	r5, #104	; 0x68
 80058b0:	e7e9      	b.n	8005886 <_fwalk_reent+0x12>

080058b2 <__retarget_lock_init_recursive>:
 80058b2:	4770      	bx	lr

080058b4 <__retarget_lock_acquire_recursive>:
 80058b4:	4770      	bx	lr

080058b6 <__retarget_lock_release_recursive>:
 80058b6:	4770      	bx	lr

080058b8 <__swhatbuf_r>:
 80058b8:	b570      	push	{r4, r5, r6, lr}
 80058ba:	460e      	mov	r6, r1
 80058bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058c0:	2900      	cmp	r1, #0
 80058c2:	b096      	sub	sp, #88	; 0x58
 80058c4:	4614      	mov	r4, r2
 80058c6:	461d      	mov	r5, r3
 80058c8:	da08      	bge.n	80058dc <__swhatbuf_r+0x24>
 80058ca:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80058ce:	2200      	movs	r2, #0
 80058d0:	602a      	str	r2, [r5, #0]
 80058d2:	061a      	lsls	r2, r3, #24
 80058d4:	d410      	bmi.n	80058f8 <__swhatbuf_r+0x40>
 80058d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80058da:	e00e      	b.n	80058fa <__swhatbuf_r+0x42>
 80058dc:	466a      	mov	r2, sp
 80058de:	f000 fc95 	bl	800620c <_fstat_r>
 80058e2:	2800      	cmp	r0, #0
 80058e4:	dbf1      	blt.n	80058ca <__swhatbuf_r+0x12>
 80058e6:	9a01      	ldr	r2, [sp, #4]
 80058e8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80058ec:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80058f0:	425a      	negs	r2, r3
 80058f2:	415a      	adcs	r2, r3
 80058f4:	602a      	str	r2, [r5, #0]
 80058f6:	e7ee      	b.n	80058d6 <__swhatbuf_r+0x1e>
 80058f8:	2340      	movs	r3, #64	; 0x40
 80058fa:	2000      	movs	r0, #0
 80058fc:	6023      	str	r3, [r4, #0]
 80058fe:	b016      	add	sp, #88	; 0x58
 8005900:	bd70      	pop	{r4, r5, r6, pc}
	...

08005904 <__smakebuf_r>:
 8005904:	898b      	ldrh	r3, [r1, #12]
 8005906:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005908:	079d      	lsls	r5, r3, #30
 800590a:	4606      	mov	r6, r0
 800590c:	460c      	mov	r4, r1
 800590e:	d507      	bpl.n	8005920 <__smakebuf_r+0x1c>
 8005910:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005914:	6023      	str	r3, [r4, #0]
 8005916:	6123      	str	r3, [r4, #16]
 8005918:	2301      	movs	r3, #1
 800591a:	6163      	str	r3, [r4, #20]
 800591c:	b002      	add	sp, #8
 800591e:	bd70      	pop	{r4, r5, r6, pc}
 8005920:	ab01      	add	r3, sp, #4
 8005922:	466a      	mov	r2, sp
 8005924:	f7ff ffc8 	bl	80058b8 <__swhatbuf_r>
 8005928:	9900      	ldr	r1, [sp, #0]
 800592a:	4605      	mov	r5, r0
 800592c:	4630      	mov	r0, r6
 800592e:	f000 f895 	bl	8005a5c <_malloc_r>
 8005932:	b948      	cbnz	r0, 8005948 <__smakebuf_r+0x44>
 8005934:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005938:	059a      	lsls	r2, r3, #22
 800593a:	d4ef      	bmi.n	800591c <__smakebuf_r+0x18>
 800593c:	f023 0303 	bic.w	r3, r3, #3
 8005940:	f043 0302 	orr.w	r3, r3, #2
 8005944:	81a3      	strh	r3, [r4, #12]
 8005946:	e7e3      	b.n	8005910 <__smakebuf_r+0xc>
 8005948:	4b0d      	ldr	r3, [pc, #52]	; (8005980 <__smakebuf_r+0x7c>)
 800594a:	62b3      	str	r3, [r6, #40]	; 0x28
 800594c:	89a3      	ldrh	r3, [r4, #12]
 800594e:	6020      	str	r0, [r4, #0]
 8005950:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005954:	81a3      	strh	r3, [r4, #12]
 8005956:	9b00      	ldr	r3, [sp, #0]
 8005958:	6163      	str	r3, [r4, #20]
 800595a:	9b01      	ldr	r3, [sp, #4]
 800595c:	6120      	str	r0, [r4, #16]
 800595e:	b15b      	cbz	r3, 8005978 <__smakebuf_r+0x74>
 8005960:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005964:	4630      	mov	r0, r6
 8005966:	f000 fc63 	bl	8006230 <_isatty_r>
 800596a:	b128      	cbz	r0, 8005978 <__smakebuf_r+0x74>
 800596c:	89a3      	ldrh	r3, [r4, #12]
 800596e:	f023 0303 	bic.w	r3, r3, #3
 8005972:	f043 0301 	orr.w	r3, r3, #1
 8005976:	81a3      	strh	r3, [r4, #12]
 8005978:	89a0      	ldrh	r0, [r4, #12]
 800597a:	4305      	orrs	r5, r0
 800597c:	81a5      	strh	r5, [r4, #12]
 800597e:	e7cd      	b.n	800591c <__smakebuf_r+0x18>
 8005980:	08005711 	.word	0x08005711

08005984 <_free_r>:
 8005984:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005986:	2900      	cmp	r1, #0
 8005988:	d044      	beq.n	8005a14 <_free_r+0x90>
 800598a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800598e:	9001      	str	r0, [sp, #4]
 8005990:	2b00      	cmp	r3, #0
 8005992:	f1a1 0404 	sub.w	r4, r1, #4
 8005996:	bfb8      	it	lt
 8005998:	18e4      	addlt	r4, r4, r3
 800599a:	f000 fc6b 	bl	8006274 <__malloc_lock>
 800599e:	4a1e      	ldr	r2, [pc, #120]	; (8005a18 <_free_r+0x94>)
 80059a0:	9801      	ldr	r0, [sp, #4]
 80059a2:	6813      	ldr	r3, [r2, #0]
 80059a4:	b933      	cbnz	r3, 80059b4 <_free_r+0x30>
 80059a6:	6063      	str	r3, [r4, #4]
 80059a8:	6014      	str	r4, [r2, #0]
 80059aa:	b003      	add	sp, #12
 80059ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80059b0:	f000 bc66 	b.w	8006280 <__malloc_unlock>
 80059b4:	42a3      	cmp	r3, r4
 80059b6:	d908      	bls.n	80059ca <_free_r+0x46>
 80059b8:	6825      	ldr	r5, [r4, #0]
 80059ba:	1961      	adds	r1, r4, r5
 80059bc:	428b      	cmp	r3, r1
 80059be:	bf01      	itttt	eq
 80059c0:	6819      	ldreq	r1, [r3, #0]
 80059c2:	685b      	ldreq	r3, [r3, #4]
 80059c4:	1949      	addeq	r1, r1, r5
 80059c6:	6021      	streq	r1, [r4, #0]
 80059c8:	e7ed      	b.n	80059a6 <_free_r+0x22>
 80059ca:	461a      	mov	r2, r3
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	b10b      	cbz	r3, 80059d4 <_free_r+0x50>
 80059d0:	42a3      	cmp	r3, r4
 80059d2:	d9fa      	bls.n	80059ca <_free_r+0x46>
 80059d4:	6811      	ldr	r1, [r2, #0]
 80059d6:	1855      	adds	r5, r2, r1
 80059d8:	42a5      	cmp	r5, r4
 80059da:	d10b      	bne.n	80059f4 <_free_r+0x70>
 80059dc:	6824      	ldr	r4, [r4, #0]
 80059de:	4421      	add	r1, r4
 80059e0:	1854      	adds	r4, r2, r1
 80059e2:	42a3      	cmp	r3, r4
 80059e4:	6011      	str	r1, [r2, #0]
 80059e6:	d1e0      	bne.n	80059aa <_free_r+0x26>
 80059e8:	681c      	ldr	r4, [r3, #0]
 80059ea:	685b      	ldr	r3, [r3, #4]
 80059ec:	6053      	str	r3, [r2, #4]
 80059ee:	4421      	add	r1, r4
 80059f0:	6011      	str	r1, [r2, #0]
 80059f2:	e7da      	b.n	80059aa <_free_r+0x26>
 80059f4:	d902      	bls.n	80059fc <_free_r+0x78>
 80059f6:	230c      	movs	r3, #12
 80059f8:	6003      	str	r3, [r0, #0]
 80059fa:	e7d6      	b.n	80059aa <_free_r+0x26>
 80059fc:	6825      	ldr	r5, [r4, #0]
 80059fe:	1961      	adds	r1, r4, r5
 8005a00:	428b      	cmp	r3, r1
 8005a02:	bf04      	itt	eq
 8005a04:	6819      	ldreq	r1, [r3, #0]
 8005a06:	685b      	ldreq	r3, [r3, #4]
 8005a08:	6063      	str	r3, [r4, #4]
 8005a0a:	bf04      	itt	eq
 8005a0c:	1949      	addeq	r1, r1, r5
 8005a0e:	6021      	streq	r1, [r4, #0]
 8005a10:	6054      	str	r4, [r2, #4]
 8005a12:	e7ca      	b.n	80059aa <_free_r+0x26>
 8005a14:	b003      	add	sp, #12
 8005a16:	bd30      	pop	{r4, r5, pc}
 8005a18:	20000184 	.word	0x20000184

08005a1c <sbrk_aligned>:
 8005a1c:	b570      	push	{r4, r5, r6, lr}
 8005a1e:	4e0e      	ldr	r6, [pc, #56]	; (8005a58 <sbrk_aligned+0x3c>)
 8005a20:	460c      	mov	r4, r1
 8005a22:	6831      	ldr	r1, [r6, #0]
 8005a24:	4605      	mov	r5, r0
 8005a26:	b911      	cbnz	r1, 8005a2e <sbrk_aligned+0x12>
 8005a28:	f000 fb7a 	bl	8006120 <_sbrk_r>
 8005a2c:	6030      	str	r0, [r6, #0]
 8005a2e:	4621      	mov	r1, r4
 8005a30:	4628      	mov	r0, r5
 8005a32:	f000 fb75 	bl	8006120 <_sbrk_r>
 8005a36:	1c43      	adds	r3, r0, #1
 8005a38:	d00a      	beq.n	8005a50 <sbrk_aligned+0x34>
 8005a3a:	1cc4      	adds	r4, r0, #3
 8005a3c:	f024 0403 	bic.w	r4, r4, #3
 8005a40:	42a0      	cmp	r0, r4
 8005a42:	d007      	beq.n	8005a54 <sbrk_aligned+0x38>
 8005a44:	1a21      	subs	r1, r4, r0
 8005a46:	4628      	mov	r0, r5
 8005a48:	f000 fb6a 	bl	8006120 <_sbrk_r>
 8005a4c:	3001      	adds	r0, #1
 8005a4e:	d101      	bne.n	8005a54 <sbrk_aligned+0x38>
 8005a50:	f04f 34ff 	mov.w	r4, #4294967295
 8005a54:	4620      	mov	r0, r4
 8005a56:	bd70      	pop	{r4, r5, r6, pc}
 8005a58:	20000188 	.word	0x20000188

08005a5c <_malloc_r>:
 8005a5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a60:	1ccd      	adds	r5, r1, #3
 8005a62:	f025 0503 	bic.w	r5, r5, #3
 8005a66:	3508      	adds	r5, #8
 8005a68:	2d0c      	cmp	r5, #12
 8005a6a:	bf38      	it	cc
 8005a6c:	250c      	movcc	r5, #12
 8005a6e:	2d00      	cmp	r5, #0
 8005a70:	4607      	mov	r7, r0
 8005a72:	db01      	blt.n	8005a78 <_malloc_r+0x1c>
 8005a74:	42a9      	cmp	r1, r5
 8005a76:	d905      	bls.n	8005a84 <_malloc_r+0x28>
 8005a78:	230c      	movs	r3, #12
 8005a7a:	603b      	str	r3, [r7, #0]
 8005a7c:	2600      	movs	r6, #0
 8005a7e:	4630      	mov	r0, r6
 8005a80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a84:	4e2e      	ldr	r6, [pc, #184]	; (8005b40 <_malloc_r+0xe4>)
 8005a86:	f000 fbf5 	bl	8006274 <__malloc_lock>
 8005a8a:	6833      	ldr	r3, [r6, #0]
 8005a8c:	461c      	mov	r4, r3
 8005a8e:	bb34      	cbnz	r4, 8005ade <_malloc_r+0x82>
 8005a90:	4629      	mov	r1, r5
 8005a92:	4638      	mov	r0, r7
 8005a94:	f7ff ffc2 	bl	8005a1c <sbrk_aligned>
 8005a98:	1c43      	adds	r3, r0, #1
 8005a9a:	4604      	mov	r4, r0
 8005a9c:	d14d      	bne.n	8005b3a <_malloc_r+0xde>
 8005a9e:	6834      	ldr	r4, [r6, #0]
 8005aa0:	4626      	mov	r6, r4
 8005aa2:	2e00      	cmp	r6, #0
 8005aa4:	d140      	bne.n	8005b28 <_malloc_r+0xcc>
 8005aa6:	6823      	ldr	r3, [r4, #0]
 8005aa8:	4631      	mov	r1, r6
 8005aaa:	4638      	mov	r0, r7
 8005aac:	eb04 0803 	add.w	r8, r4, r3
 8005ab0:	f000 fb36 	bl	8006120 <_sbrk_r>
 8005ab4:	4580      	cmp	r8, r0
 8005ab6:	d13a      	bne.n	8005b2e <_malloc_r+0xd2>
 8005ab8:	6821      	ldr	r1, [r4, #0]
 8005aba:	3503      	adds	r5, #3
 8005abc:	1a6d      	subs	r5, r5, r1
 8005abe:	f025 0503 	bic.w	r5, r5, #3
 8005ac2:	3508      	adds	r5, #8
 8005ac4:	2d0c      	cmp	r5, #12
 8005ac6:	bf38      	it	cc
 8005ac8:	250c      	movcc	r5, #12
 8005aca:	4629      	mov	r1, r5
 8005acc:	4638      	mov	r0, r7
 8005ace:	f7ff ffa5 	bl	8005a1c <sbrk_aligned>
 8005ad2:	3001      	adds	r0, #1
 8005ad4:	d02b      	beq.n	8005b2e <_malloc_r+0xd2>
 8005ad6:	6823      	ldr	r3, [r4, #0]
 8005ad8:	442b      	add	r3, r5
 8005ada:	6023      	str	r3, [r4, #0]
 8005adc:	e00e      	b.n	8005afc <_malloc_r+0xa0>
 8005ade:	6822      	ldr	r2, [r4, #0]
 8005ae0:	1b52      	subs	r2, r2, r5
 8005ae2:	d41e      	bmi.n	8005b22 <_malloc_r+0xc6>
 8005ae4:	2a0b      	cmp	r2, #11
 8005ae6:	d916      	bls.n	8005b16 <_malloc_r+0xba>
 8005ae8:	1961      	adds	r1, r4, r5
 8005aea:	42a3      	cmp	r3, r4
 8005aec:	6025      	str	r5, [r4, #0]
 8005aee:	bf18      	it	ne
 8005af0:	6059      	strne	r1, [r3, #4]
 8005af2:	6863      	ldr	r3, [r4, #4]
 8005af4:	bf08      	it	eq
 8005af6:	6031      	streq	r1, [r6, #0]
 8005af8:	5162      	str	r2, [r4, r5]
 8005afa:	604b      	str	r3, [r1, #4]
 8005afc:	4638      	mov	r0, r7
 8005afe:	f104 060b 	add.w	r6, r4, #11
 8005b02:	f000 fbbd 	bl	8006280 <__malloc_unlock>
 8005b06:	f026 0607 	bic.w	r6, r6, #7
 8005b0a:	1d23      	adds	r3, r4, #4
 8005b0c:	1af2      	subs	r2, r6, r3
 8005b0e:	d0b6      	beq.n	8005a7e <_malloc_r+0x22>
 8005b10:	1b9b      	subs	r3, r3, r6
 8005b12:	50a3      	str	r3, [r4, r2]
 8005b14:	e7b3      	b.n	8005a7e <_malloc_r+0x22>
 8005b16:	6862      	ldr	r2, [r4, #4]
 8005b18:	42a3      	cmp	r3, r4
 8005b1a:	bf0c      	ite	eq
 8005b1c:	6032      	streq	r2, [r6, #0]
 8005b1e:	605a      	strne	r2, [r3, #4]
 8005b20:	e7ec      	b.n	8005afc <_malloc_r+0xa0>
 8005b22:	4623      	mov	r3, r4
 8005b24:	6864      	ldr	r4, [r4, #4]
 8005b26:	e7b2      	b.n	8005a8e <_malloc_r+0x32>
 8005b28:	4634      	mov	r4, r6
 8005b2a:	6876      	ldr	r6, [r6, #4]
 8005b2c:	e7b9      	b.n	8005aa2 <_malloc_r+0x46>
 8005b2e:	230c      	movs	r3, #12
 8005b30:	603b      	str	r3, [r7, #0]
 8005b32:	4638      	mov	r0, r7
 8005b34:	f000 fba4 	bl	8006280 <__malloc_unlock>
 8005b38:	e7a1      	b.n	8005a7e <_malloc_r+0x22>
 8005b3a:	6025      	str	r5, [r4, #0]
 8005b3c:	e7de      	b.n	8005afc <_malloc_r+0xa0>
 8005b3e:	bf00      	nop
 8005b40:	20000184 	.word	0x20000184

08005b44 <__sfputc_r>:
 8005b44:	6893      	ldr	r3, [r2, #8]
 8005b46:	3b01      	subs	r3, #1
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	b410      	push	{r4}
 8005b4c:	6093      	str	r3, [r2, #8]
 8005b4e:	da08      	bge.n	8005b62 <__sfputc_r+0x1e>
 8005b50:	6994      	ldr	r4, [r2, #24]
 8005b52:	42a3      	cmp	r3, r4
 8005b54:	db01      	blt.n	8005b5a <__sfputc_r+0x16>
 8005b56:	290a      	cmp	r1, #10
 8005b58:	d103      	bne.n	8005b62 <__sfputc_r+0x1e>
 8005b5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005b5e:	f7ff bc31 	b.w	80053c4 <__swbuf_r>
 8005b62:	6813      	ldr	r3, [r2, #0]
 8005b64:	1c58      	adds	r0, r3, #1
 8005b66:	6010      	str	r0, [r2, #0]
 8005b68:	7019      	strb	r1, [r3, #0]
 8005b6a:	4608      	mov	r0, r1
 8005b6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005b70:	4770      	bx	lr

08005b72 <__sfputs_r>:
 8005b72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b74:	4606      	mov	r6, r0
 8005b76:	460f      	mov	r7, r1
 8005b78:	4614      	mov	r4, r2
 8005b7a:	18d5      	adds	r5, r2, r3
 8005b7c:	42ac      	cmp	r4, r5
 8005b7e:	d101      	bne.n	8005b84 <__sfputs_r+0x12>
 8005b80:	2000      	movs	r0, #0
 8005b82:	e007      	b.n	8005b94 <__sfputs_r+0x22>
 8005b84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b88:	463a      	mov	r2, r7
 8005b8a:	4630      	mov	r0, r6
 8005b8c:	f7ff ffda 	bl	8005b44 <__sfputc_r>
 8005b90:	1c43      	adds	r3, r0, #1
 8005b92:	d1f3      	bne.n	8005b7c <__sfputs_r+0xa>
 8005b94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005b98 <_vfiprintf_r>:
 8005b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b9c:	460d      	mov	r5, r1
 8005b9e:	b09d      	sub	sp, #116	; 0x74
 8005ba0:	4614      	mov	r4, r2
 8005ba2:	4698      	mov	r8, r3
 8005ba4:	4606      	mov	r6, r0
 8005ba6:	b118      	cbz	r0, 8005bb0 <_vfiprintf_r+0x18>
 8005ba8:	6983      	ldr	r3, [r0, #24]
 8005baa:	b90b      	cbnz	r3, 8005bb0 <_vfiprintf_r+0x18>
 8005bac:	f7ff fde4 	bl	8005778 <__sinit>
 8005bb0:	4b89      	ldr	r3, [pc, #548]	; (8005dd8 <_vfiprintf_r+0x240>)
 8005bb2:	429d      	cmp	r5, r3
 8005bb4:	d11b      	bne.n	8005bee <_vfiprintf_r+0x56>
 8005bb6:	6875      	ldr	r5, [r6, #4]
 8005bb8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005bba:	07d9      	lsls	r1, r3, #31
 8005bbc:	d405      	bmi.n	8005bca <_vfiprintf_r+0x32>
 8005bbe:	89ab      	ldrh	r3, [r5, #12]
 8005bc0:	059a      	lsls	r2, r3, #22
 8005bc2:	d402      	bmi.n	8005bca <_vfiprintf_r+0x32>
 8005bc4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005bc6:	f7ff fe75 	bl	80058b4 <__retarget_lock_acquire_recursive>
 8005bca:	89ab      	ldrh	r3, [r5, #12]
 8005bcc:	071b      	lsls	r3, r3, #28
 8005bce:	d501      	bpl.n	8005bd4 <_vfiprintf_r+0x3c>
 8005bd0:	692b      	ldr	r3, [r5, #16]
 8005bd2:	b9eb      	cbnz	r3, 8005c10 <_vfiprintf_r+0x78>
 8005bd4:	4629      	mov	r1, r5
 8005bd6:	4630      	mov	r0, r6
 8005bd8:	f7ff fc46 	bl	8005468 <__swsetup_r>
 8005bdc:	b1c0      	cbz	r0, 8005c10 <_vfiprintf_r+0x78>
 8005bde:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005be0:	07dc      	lsls	r4, r3, #31
 8005be2:	d50e      	bpl.n	8005c02 <_vfiprintf_r+0x6a>
 8005be4:	f04f 30ff 	mov.w	r0, #4294967295
 8005be8:	b01d      	add	sp, #116	; 0x74
 8005bea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bee:	4b7b      	ldr	r3, [pc, #492]	; (8005ddc <_vfiprintf_r+0x244>)
 8005bf0:	429d      	cmp	r5, r3
 8005bf2:	d101      	bne.n	8005bf8 <_vfiprintf_r+0x60>
 8005bf4:	68b5      	ldr	r5, [r6, #8]
 8005bf6:	e7df      	b.n	8005bb8 <_vfiprintf_r+0x20>
 8005bf8:	4b79      	ldr	r3, [pc, #484]	; (8005de0 <_vfiprintf_r+0x248>)
 8005bfa:	429d      	cmp	r5, r3
 8005bfc:	bf08      	it	eq
 8005bfe:	68f5      	ldreq	r5, [r6, #12]
 8005c00:	e7da      	b.n	8005bb8 <_vfiprintf_r+0x20>
 8005c02:	89ab      	ldrh	r3, [r5, #12]
 8005c04:	0598      	lsls	r0, r3, #22
 8005c06:	d4ed      	bmi.n	8005be4 <_vfiprintf_r+0x4c>
 8005c08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005c0a:	f7ff fe54 	bl	80058b6 <__retarget_lock_release_recursive>
 8005c0e:	e7e9      	b.n	8005be4 <_vfiprintf_r+0x4c>
 8005c10:	2300      	movs	r3, #0
 8005c12:	9309      	str	r3, [sp, #36]	; 0x24
 8005c14:	2320      	movs	r3, #32
 8005c16:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005c1a:	f8cd 800c 	str.w	r8, [sp, #12]
 8005c1e:	2330      	movs	r3, #48	; 0x30
 8005c20:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005de4 <_vfiprintf_r+0x24c>
 8005c24:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005c28:	f04f 0901 	mov.w	r9, #1
 8005c2c:	4623      	mov	r3, r4
 8005c2e:	469a      	mov	sl, r3
 8005c30:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005c34:	b10a      	cbz	r2, 8005c3a <_vfiprintf_r+0xa2>
 8005c36:	2a25      	cmp	r2, #37	; 0x25
 8005c38:	d1f9      	bne.n	8005c2e <_vfiprintf_r+0x96>
 8005c3a:	ebba 0b04 	subs.w	fp, sl, r4
 8005c3e:	d00b      	beq.n	8005c58 <_vfiprintf_r+0xc0>
 8005c40:	465b      	mov	r3, fp
 8005c42:	4622      	mov	r2, r4
 8005c44:	4629      	mov	r1, r5
 8005c46:	4630      	mov	r0, r6
 8005c48:	f7ff ff93 	bl	8005b72 <__sfputs_r>
 8005c4c:	3001      	adds	r0, #1
 8005c4e:	f000 80aa 	beq.w	8005da6 <_vfiprintf_r+0x20e>
 8005c52:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005c54:	445a      	add	r2, fp
 8005c56:	9209      	str	r2, [sp, #36]	; 0x24
 8005c58:	f89a 3000 	ldrb.w	r3, [sl]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	f000 80a2 	beq.w	8005da6 <_vfiprintf_r+0x20e>
 8005c62:	2300      	movs	r3, #0
 8005c64:	f04f 32ff 	mov.w	r2, #4294967295
 8005c68:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005c6c:	f10a 0a01 	add.w	sl, sl, #1
 8005c70:	9304      	str	r3, [sp, #16]
 8005c72:	9307      	str	r3, [sp, #28]
 8005c74:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005c78:	931a      	str	r3, [sp, #104]	; 0x68
 8005c7a:	4654      	mov	r4, sl
 8005c7c:	2205      	movs	r2, #5
 8005c7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c82:	4858      	ldr	r0, [pc, #352]	; (8005de4 <_vfiprintf_r+0x24c>)
 8005c84:	f7fa fab4 	bl	80001f0 <memchr>
 8005c88:	9a04      	ldr	r2, [sp, #16]
 8005c8a:	b9d8      	cbnz	r0, 8005cc4 <_vfiprintf_r+0x12c>
 8005c8c:	06d1      	lsls	r1, r2, #27
 8005c8e:	bf44      	itt	mi
 8005c90:	2320      	movmi	r3, #32
 8005c92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005c96:	0713      	lsls	r3, r2, #28
 8005c98:	bf44      	itt	mi
 8005c9a:	232b      	movmi	r3, #43	; 0x2b
 8005c9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005ca0:	f89a 3000 	ldrb.w	r3, [sl]
 8005ca4:	2b2a      	cmp	r3, #42	; 0x2a
 8005ca6:	d015      	beq.n	8005cd4 <_vfiprintf_r+0x13c>
 8005ca8:	9a07      	ldr	r2, [sp, #28]
 8005caa:	4654      	mov	r4, sl
 8005cac:	2000      	movs	r0, #0
 8005cae:	f04f 0c0a 	mov.w	ip, #10
 8005cb2:	4621      	mov	r1, r4
 8005cb4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005cb8:	3b30      	subs	r3, #48	; 0x30
 8005cba:	2b09      	cmp	r3, #9
 8005cbc:	d94e      	bls.n	8005d5c <_vfiprintf_r+0x1c4>
 8005cbe:	b1b0      	cbz	r0, 8005cee <_vfiprintf_r+0x156>
 8005cc0:	9207      	str	r2, [sp, #28]
 8005cc2:	e014      	b.n	8005cee <_vfiprintf_r+0x156>
 8005cc4:	eba0 0308 	sub.w	r3, r0, r8
 8005cc8:	fa09 f303 	lsl.w	r3, r9, r3
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	9304      	str	r3, [sp, #16]
 8005cd0:	46a2      	mov	sl, r4
 8005cd2:	e7d2      	b.n	8005c7a <_vfiprintf_r+0xe2>
 8005cd4:	9b03      	ldr	r3, [sp, #12]
 8005cd6:	1d19      	adds	r1, r3, #4
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	9103      	str	r1, [sp, #12]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	bfbb      	ittet	lt
 8005ce0:	425b      	neglt	r3, r3
 8005ce2:	f042 0202 	orrlt.w	r2, r2, #2
 8005ce6:	9307      	strge	r3, [sp, #28]
 8005ce8:	9307      	strlt	r3, [sp, #28]
 8005cea:	bfb8      	it	lt
 8005cec:	9204      	strlt	r2, [sp, #16]
 8005cee:	7823      	ldrb	r3, [r4, #0]
 8005cf0:	2b2e      	cmp	r3, #46	; 0x2e
 8005cf2:	d10c      	bne.n	8005d0e <_vfiprintf_r+0x176>
 8005cf4:	7863      	ldrb	r3, [r4, #1]
 8005cf6:	2b2a      	cmp	r3, #42	; 0x2a
 8005cf8:	d135      	bne.n	8005d66 <_vfiprintf_r+0x1ce>
 8005cfa:	9b03      	ldr	r3, [sp, #12]
 8005cfc:	1d1a      	adds	r2, r3, #4
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	9203      	str	r2, [sp, #12]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	bfb8      	it	lt
 8005d06:	f04f 33ff 	movlt.w	r3, #4294967295
 8005d0a:	3402      	adds	r4, #2
 8005d0c:	9305      	str	r3, [sp, #20]
 8005d0e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005df4 <_vfiprintf_r+0x25c>
 8005d12:	7821      	ldrb	r1, [r4, #0]
 8005d14:	2203      	movs	r2, #3
 8005d16:	4650      	mov	r0, sl
 8005d18:	f7fa fa6a 	bl	80001f0 <memchr>
 8005d1c:	b140      	cbz	r0, 8005d30 <_vfiprintf_r+0x198>
 8005d1e:	2340      	movs	r3, #64	; 0x40
 8005d20:	eba0 000a 	sub.w	r0, r0, sl
 8005d24:	fa03 f000 	lsl.w	r0, r3, r0
 8005d28:	9b04      	ldr	r3, [sp, #16]
 8005d2a:	4303      	orrs	r3, r0
 8005d2c:	3401      	adds	r4, #1
 8005d2e:	9304      	str	r3, [sp, #16]
 8005d30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d34:	482c      	ldr	r0, [pc, #176]	; (8005de8 <_vfiprintf_r+0x250>)
 8005d36:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005d3a:	2206      	movs	r2, #6
 8005d3c:	f7fa fa58 	bl	80001f0 <memchr>
 8005d40:	2800      	cmp	r0, #0
 8005d42:	d03f      	beq.n	8005dc4 <_vfiprintf_r+0x22c>
 8005d44:	4b29      	ldr	r3, [pc, #164]	; (8005dec <_vfiprintf_r+0x254>)
 8005d46:	bb1b      	cbnz	r3, 8005d90 <_vfiprintf_r+0x1f8>
 8005d48:	9b03      	ldr	r3, [sp, #12]
 8005d4a:	3307      	adds	r3, #7
 8005d4c:	f023 0307 	bic.w	r3, r3, #7
 8005d50:	3308      	adds	r3, #8
 8005d52:	9303      	str	r3, [sp, #12]
 8005d54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d56:	443b      	add	r3, r7
 8005d58:	9309      	str	r3, [sp, #36]	; 0x24
 8005d5a:	e767      	b.n	8005c2c <_vfiprintf_r+0x94>
 8005d5c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005d60:	460c      	mov	r4, r1
 8005d62:	2001      	movs	r0, #1
 8005d64:	e7a5      	b.n	8005cb2 <_vfiprintf_r+0x11a>
 8005d66:	2300      	movs	r3, #0
 8005d68:	3401      	adds	r4, #1
 8005d6a:	9305      	str	r3, [sp, #20]
 8005d6c:	4619      	mov	r1, r3
 8005d6e:	f04f 0c0a 	mov.w	ip, #10
 8005d72:	4620      	mov	r0, r4
 8005d74:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005d78:	3a30      	subs	r2, #48	; 0x30
 8005d7a:	2a09      	cmp	r2, #9
 8005d7c:	d903      	bls.n	8005d86 <_vfiprintf_r+0x1ee>
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d0c5      	beq.n	8005d0e <_vfiprintf_r+0x176>
 8005d82:	9105      	str	r1, [sp, #20]
 8005d84:	e7c3      	b.n	8005d0e <_vfiprintf_r+0x176>
 8005d86:	fb0c 2101 	mla	r1, ip, r1, r2
 8005d8a:	4604      	mov	r4, r0
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	e7f0      	b.n	8005d72 <_vfiprintf_r+0x1da>
 8005d90:	ab03      	add	r3, sp, #12
 8005d92:	9300      	str	r3, [sp, #0]
 8005d94:	462a      	mov	r2, r5
 8005d96:	4b16      	ldr	r3, [pc, #88]	; (8005df0 <_vfiprintf_r+0x258>)
 8005d98:	a904      	add	r1, sp, #16
 8005d9a:	4630      	mov	r0, r6
 8005d9c:	f3af 8000 	nop.w
 8005da0:	4607      	mov	r7, r0
 8005da2:	1c78      	adds	r0, r7, #1
 8005da4:	d1d6      	bne.n	8005d54 <_vfiprintf_r+0x1bc>
 8005da6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005da8:	07d9      	lsls	r1, r3, #31
 8005daa:	d405      	bmi.n	8005db8 <_vfiprintf_r+0x220>
 8005dac:	89ab      	ldrh	r3, [r5, #12]
 8005dae:	059a      	lsls	r2, r3, #22
 8005db0:	d402      	bmi.n	8005db8 <_vfiprintf_r+0x220>
 8005db2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005db4:	f7ff fd7f 	bl	80058b6 <__retarget_lock_release_recursive>
 8005db8:	89ab      	ldrh	r3, [r5, #12]
 8005dba:	065b      	lsls	r3, r3, #25
 8005dbc:	f53f af12 	bmi.w	8005be4 <_vfiprintf_r+0x4c>
 8005dc0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005dc2:	e711      	b.n	8005be8 <_vfiprintf_r+0x50>
 8005dc4:	ab03      	add	r3, sp, #12
 8005dc6:	9300      	str	r3, [sp, #0]
 8005dc8:	462a      	mov	r2, r5
 8005dca:	4b09      	ldr	r3, [pc, #36]	; (8005df0 <_vfiprintf_r+0x258>)
 8005dcc:	a904      	add	r1, sp, #16
 8005dce:	4630      	mov	r0, r6
 8005dd0:	f000 f880 	bl	8005ed4 <_printf_i>
 8005dd4:	e7e4      	b.n	8005da0 <_vfiprintf_r+0x208>
 8005dd6:	bf00      	nop
 8005dd8:	08006364 	.word	0x08006364
 8005ddc:	08006384 	.word	0x08006384
 8005de0:	08006344 	.word	0x08006344
 8005de4:	080063a4 	.word	0x080063a4
 8005de8:	080063ae 	.word	0x080063ae
 8005dec:	00000000 	.word	0x00000000
 8005df0:	08005b73 	.word	0x08005b73
 8005df4:	080063aa 	.word	0x080063aa

08005df8 <_printf_common>:
 8005df8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005dfc:	4616      	mov	r6, r2
 8005dfe:	4699      	mov	r9, r3
 8005e00:	688a      	ldr	r2, [r1, #8]
 8005e02:	690b      	ldr	r3, [r1, #16]
 8005e04:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	bfb8      	it	lt
 8005e0c:	4613      	movlt	r3, r2
 8005e0e:	6033      	str	r3, [r6, #0]
 8005e10:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005e14:	4607      	mov	r7, r0
 8005e16:	460c      	mov	r4, r1
 8005e18:	b10a      	cbz	r2, 8005e1e <_printf_common+0x26>
 8005e1a:	3301      	adds	r3, #1
 8005e1c:	6033      	str	r3, [r6, #0]
 8005e1e:	6823      	ldr	r3, [r4, #0]
 8005e20:	0699      	lsls	r1, r3, #26
 8005e22:	bf42      	ittt	mi
 8005e24:	6833      	ldrmi	r3, [r6, #0]
 8005e26:	3302      	addmi	r3, #2
 8005e28:	6033      	strmi	r3, [r6, #0]
 8005e2a:	6825      	ldr	r5, [r4, #0]
 8005e2c:	f015 0506 	ands.w	r5, r5, #6
 8005e30:	d106      	bne.n	8005e40 <_printf_common+0x48>
 8005e32:	f104 0a19 	add.w	sl, r4, #25
 8005e36:	68e3      	ldr	r3, [r4, #12]
 8005e38:	6832      	ldr	r2, [r6, #0]
 8005e3a:	1a9b      	subs	r3, r3, r2
 8005e3c:	42ab      	cmp	r3, r5
 8005e3e:	dc26      	bgt.n	8005e8e <_printf_common+0x96>
 8005e40:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005e44:	1e13      	subs	r3, r2, #0
 8005e46:	6822      	ldr	r2, [r4, #0]
 8005e48:	bf18      	it	ne
 8005e4a:	2301      	movne	r3, #1
 8005e4c:	0692      	lsls	r2, r2, #26
 8005e4e:	d42b      	bmi.n	8005ea8 <_printf_common+0xb0>
 8005e50:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005e54:	4649      	mov	r1, r9
 8005e56:	4638      	mov	r0, r7
 8005e58:	47c0      	blx	r8
 8005e5a:	3001      	adds	r0, #1
 8005e5c:	d01e      	beq.n	8005e9c <_printf_common+0xa4>
 8005e5e:	6823      	ldr	r3, [r4, #0]
 8005e60:	68e5      	ldr	r5, [r4, #12]
 8005e62:	6832      	ldr	r2, [r6, #0]
 8005e64:	f003 0306 	and.w	r3, r3, #6
 8005e68:	2b04      	cmp	r3, #4
 8005e6a:	bf08      	it	eq
 8005e6c:	1aad      	subeq	r5, r5, r2
 8005e6e:	68a3      	ldr	r3, [r4, #8]
 8005e70:	6922      	ldr	r2, [r4, #16]
 8005e72:	bf0c      	ite	eq
 8005e74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005e78:	2500      	movne	r5, #0
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	bfc4      	itt	gt
 8005e7e:	1a9b      	subgt	r3, r3, r2
 8005e80:	18ed      	addgt	r5, r5, r3
 8005e82:	2600      	movs	r6, #0
 8005e84:	341a      	adds	r4, #26
 8005e86:	42b5      	cmp	r5, r6
 8005e88:	d11a      	bne.n	8005ec0 <_printf_common+0xc8>
 8005e8a:	2000      	movs	r0, #0
 8005e8c:	e008      	b.n	8005ea0 <_printf_common+0xa8>
 8005e8e:	2301      	movs	r3, #1
 8005e90:	4652      	mov	r2, sl
 8005e92:	4649      	mov	r1, r9
 8005e94:	4638      	mov	r0, r7
 8005e96:	47c0      	blx	r8
 8005e98:	3001      	adds	r0, #1
 8005e9a:	d103      	bne.n	8005ea4 <_printf_common+0xac>
 8005e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8005ea0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ea4:	3501      	adds	r5, #1
 8005ea6:	e7c6      	b.n	8005e36 <_printf_common+0x3e>
 8005ea8:	18e1      	adds	r1, r4, r3
 8005eaa:	1c5a      	adds	r2, r3, #1
 8005eac:	2030      	movs	r0, #48	; 0x30
 8005eae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005eb2:	4422      	add	r2, r4
 8005eb4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005eb8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005ebc:	3302      	adds	r3, #2
 8005ebe:	e7c7      	b.n	8005e50 <_printf_common+0x58>
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	4622      	mov	r2, r4
 8005ec4:	4649      	mov	r1, r9
 8005ec6:	4638      	mov	r0, r7
 8005ec8:	47c0      	blx	r8
 8005eca:	3001      	adds	r0, #1
 8005ecc:	d0e6      	beq.n	8005e9c <_printf_common+0xa4>
 8005ece:	3601      	adds	r6, #1
 8005ed0:	e7d9      	b.n	8005e86 <_printf_common+0x8e>
	...

08005ed4 <_printf_i>:
 8005ed4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ed8:	7e0f      	ldrb	r7, [r1, #24]
 8005eda:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005edc:	2f78      	cmp	r7, #120	; 0x78
 8005ede:	4691      	mov	r9, r2
 8005ee0:	4680      	mov	r8, r0
 8005ee2:	460c      	mov	r4, r1
 8005ee4:	469a      	mov	sl, r3
 8005ee6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005eea:	d807      	bhi.n	8005efc <_printf_i+0x28>
 8005eec:	2f62      	cmp	r7, #98	; 0x62
 8005eee:	d80a      	bhi.n	8005f06 <_printf_i+0x32>
 8005ef0:	2f00      	cmp	r7, #0
 8005ef2:	f000 80d8 	beq.w	80060a6 <_printf_i+0x1d2>
 8005ef6:	2f58      	cmp	r7, #88	; 0x58
 8005ef8:	f000 80a3 	beq.w	8006042 <_printf_i+0x16e>
 8005efc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f00:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005f04:	e03a      	b.n	8005f7c <_printf_i+0xa8>
 8005f06:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005f0a:	2b15      	cmp	r3, #21
 8005f0c:	d8f6      	bhi.n	8005efc <_printf_i+0x28>
 8005f0e:	a101      	add	r1, pc, #4	; (adr r1, 8005f14 <_printf_i+0x40>)
 8005f10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005f14:	08005f6d 	.word	0x08005f6d
 8005f18:	08005f81 	.word	0x08005f81
 8005f1c:	08005efd 	.word	0x08005efd
 8005f20:	08005efd 	.word	0x08005efd
 8005f24:	08005efd 	.word	0x08005efd
 8005f28:	08005efd 	.word	0x08005efd
 8005f2c:	08005f81 	.word	0x08005f81
 8005f30:	08005efd 	.word	0x08005efd
 8005f34:	08005efd 	.word	0x08005efd
 8005f38:	08005efd 	.word	0x08005efd
 8005f3c:	08005efd 	.word	0x08005efd
 8005f40:	0800608d 	.word	0x0800608d
 8005f44:	08005fb1 	.word	0x08005fb1
 8005f48:	0800606f 	.word	0x0800606f
 8005f4c:	08005efd 	.word	0x08005efd
 8005f50:	08005efd 	.word	0x08005efd
 8005f54:	080060af 	.word	0x080060af
 8005f58:	08005efd 	.word	0x08005efd
 8005f5c:	08005fb1 	.word	0x08005fb1
 8005f60:	08005efd 	.word	0x08005efd
 8005f64:	08005efd 	.word	0x08005efd
 8005f68:	08006077 	.word	0x08006077
 8005f6c:	682b      	ldr	r3, [r5, #0]
 8005f6e:	1d1a      	adds	r2, r3, #4
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	602a      	str	r2, [r5, #0]
 8005f74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f78:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	e0a3      	b.n	80060c8 <_printf_i+0x1f4>
 8005f80:	6820      	ldr	r0, [r4, #0]
 8005f82:	6829      	ldr	r1, [r5, #0]
 8005f84:	0606      	lsls	r6, r0, #24
 8005f86:	f101 0304 	add.w	r3, r1, #4
 8005f8a:	d50a      	bpl.n	8005fa2 <_printf_i+0xce>
 8005f8c:	680e      	ldr	r6, [r1, #0]
 8005f8e:	602b      	str	r3, [r5, #0]
 8005f90:	2e00      	cmp	r6, #0
 8005f92:	da03      	bge.n	8005f9c <_printf_i+0xc8>
 8005f94:	232d      	movs	r3, #45	; 0x2d
 8005f96:	4276      	negs	r6, r6
 8005f98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f9c:	485e      	ldr	r0, [pc, #376]	; (8006118 <_printf_i+0x244>)
 8005f9e:	230a      	movs	r3, #10
 8005fa0:	e019      	b.n	8005fd6 <_printf_i+0x102>
 8005fa2:	680e      	ldr	r6, [r1, #0]
 8005fa4:	602b      	str	r3, [r5, #0]
 8005fa6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005faa:	bf18      	it	ne
 8005fac:	b236      	sxthne	r6, r6
 8005fae:	e7ef      	b.n	8005f90 <_printf_i+0xbc>
 8005fb0:	682b      	ldr	r3, [r5, #0]
 8005fb2:	6820      	ldr	r0, [r4, #0]
 8005fb4:	1d19      	adds	r1, r3, #4
 8005fb6:	6029      	str	r1, [r5, #0]
 8005fb8:	0601      	lsls	r1, r0, #24
 8005fba:	d501      	bpl.n	8005fc0 <_printf_i+0xec>
 8005fbc:	681e      	ldr	r6, [r3, #0]
 8005fbe:	e002      	b.n	8005fc6 <_printf_i+0xf2>
 8005fc0:	0646      	lsls	r6, r0, #25
 8005fc2:	d5fb      	bpl.n	8005fbc <_printf_i+0xe8>
 8005fc4:	881e      	ldrh	r6, [r3, #0]
 8005fc6:	4854      	ldr	r0, [pc, #336]	; (8006118 <_printf_i+0x244>)
 8005fc8:	2f6f      	cmp	r7, #111	; 0x6f
 8005fca:	bf0c      	ite	eq
 8005fcc:	2308      	moveq	r3, #8
 8005fce:	230a      	movne	r3, #10
 8005fd0:	2100      	movs	r1, #0
 8005fd2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005fd6:	6865      	ldr	r5, [r4, #4]
 8005fd8:	60a5      	str	r5, [r4, #8]
 8005fda:	2d00      	cmp	r5, #0
 8005fdc:	bfa2      	ittt	ge
 8005fde:	6821      	ldrge	r1, [r4, #0]
 8005fe0:	f021 0104 	bicge.w	r1, r1, #4
 8005fe4:	6021      	strge	r1, [r4, #0]
 8005fe6:	b90e      	cbnz	r6, 8005fec <_printf_i+0x118>
 8005fe8:	2d00      	cmp	r5, #0
 8005fea:	d04d      	beq.n	8006088 <_printf_i+0x1b4>
 8005fec:	4615      	mov	r5, r2
 8005fee:	fbb6 f1f3 	udiv	r1, r6, r3
 8005ff2:	fb03 6711 	mls	r7, r3, r1, r6
 8005ff6:	5dc7      	ldrb	r7, [r0, r7]
 8005ff8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005ffc:	4637      	mov	r7, r6
 8005ffe:	42bb      	cmp	r3, r7
 8006000:	460e      	mov	r6, r1
 8006002:	d9f4      	bls.n	8005fee <_printf_i+0x11a>
 8006004:	2b08      	cmp	r3, #8
 8006006:	d10b      	bne.n	8006020 <_printf_i+0x14c>
 8006008:	6823      	ldr	r3, [r4, #0]
 800600a:	07de      	lsls	r6, r3, #31
 800600c:	d508      	bpl.n	8006020 <_printf_i+0x14c>
 800600e:	6923      	ldr	r3, [r4, #16]
 8006010:	6861      	ldr	r1, [r4, #4]
 8006012:	4299      	cmp	r1, r3
 8006014:	bfde      	ittt	le
 8006016:	2330      	movle	r3, #48	; 0x30
 8006018:	f805 3c01 	strble.w	r3, [r5, #-1]
 800601c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006020:	1b52      	subs	r2, r2, r5
 8006022:	6122      	str	r2, [r4, #16]
 8006024:	f8cd a000 	str.w	sl, [sp]
 8006028:	464b      	mov	r3, r9
 800602a:	aa03      	add	r2, sp, #12
 800602c:	4621      	mov	r1, r4
 800602e:	4640      	mov	r0, r8
 8006030:	f7ff fee2 	bl	8005df8 <_printf_common>
 8006034:	3001      	adds	r0, #1
 8006036:	d14c      	bne.n	80060d2 <_printf_i+0x1fe>
 8006038:	f04f 30ff 	mov.w	r0, #4294967295
 800603c:	b004      	add	sp, #16
 800603e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006042:	4835      	ldr	r0, [pc, #212]	; (8006118 <_printf_i+0x244>)
 8006044:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006048:	6829      	ldr	r1, [r5, #0]
 800604a:	6823      	ldr	r3, [r4, #0]
 800604c:	f851 6b04 	ldr.w	r6, [r1], #4
 8006050:	6029      	str	r1, [r5, #0]
 8006052:	061d      	lsls	r5, r3, #24
 8006054:	d514      	bpl.n	8006080 <_printf_i+0x1ac>
 8006056:	07df      	lsls	r7, r3, #31
 8006058:	bf44      	itt	mi
 800605a:	f043 0320 	orrmi.w	r3, r3, #32
 800605e:	6023      	strmi	r3, [r4, #0]
 8006060:	b91e      	cbnz	r6, 800606a <_printf_i+0x196>
 8006062:	6823      	ldr	r3, [r4, #0]
 8006064:	f023 0320 	bic.w	r3, r3, #32
 8006068:	6023      	str	r3, [r4, #0]
 800606a:	2310      	movs	r3, #16
 800606c:	e7b0      	b.n	8005fd0 <_printf_i+0xfc>
 800606e:	6823      	ldr	r3, [r4, #0]
 8006070:	f043 0320 	orr.w	r3, r3, #32
 8006074:	6023      	str	r3, [r4, #0]
 8006076:	2378      	movs	r3, #120	; 0x78
 8006078:	4828      	ldr	r0, [pc, #160]	; (800611c <_printf_i+0x248>)
 800607a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800607e:	e7e3      	b.n	8006048 <_printf_i+0x174>
 8006080:	0659      	lsls	r1, r3, #25
 8006082:	bf48      	it	mi
 8006084:	b2b6      	uxthmi	r6, r6
 8006086:	e7e6      	b.n	8006056 <_printf_i+0x182>
 8006088:	4615      	mov	r5, r2
 800608a:	e7bb      	b.n	8006004 <_printf_i+0x130>
 800608c:	682b      	ldr	r3, [r5, #0]
 800608e:	6826      	ldr	r6, [r4, #0]
 8006090:	6961      	ldr	r1, [r4, #20]
 8006092:	1d18      	adds	r0, r3, #4
 8006094:	6028      	str	r0, [r5, #0]
 8006096:	0635      	lsls	r5, r6, #24
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	d501      	bpl.n	80060a0 <_printf_i+0x1cc>
 800609c:	6019      	str	r1, [r3, #0]
 800609e:	e002      	b.n	80060a6 <_printf_i+0x1d2>
 80060a0:	0670      	lsls	r0, r6, #25
 80060a2:	d5fb      	bpl.n	800609c <_printf_i+0x1c8>
 80060a4:	8019      	strh	r1, [r3, #0]
 80060a6:	2300      	movs	r3, #0
 80060a8:	6123      	str	r3, [r4, #16]
 80060aa:	4615      	mov	r5, r2
 80060ac:	e7ba      	b.n	8006024 <_printf_i+0x150>
 80060ae:	682b      	ldr	r3, [r5, #0]
 80060b0:	1d1a      	adds	r2, r3, #4
 80060b2:	602a      	str	r2, [r5, #0]
 80060b4:	681d      	ldr	r5, [r3, #0]
 80060b6:	6862      	ldr	r2, [r4, #4]
 80060b8:	2100      	movs	r1, #0
 80060ba:	4628      	mov	r0, r5
 80060bc:	f7fa f898 	bl	80001f0 <memchr>
 80060c0:	b108      	cbz	r0, 80060c6 <_printf_i+0x1f2>
 80060c2:	1b40      	subs	r0, r0, r5
 80060c4:	6060      	str	r0, [r4, #4]
 80060c6:	6863      	ldr	r3, [r4, #4]
 80060c8:	6123      	str	r3, [r4, #16]
 80060ca:	2300      	movs	r3, #0
 80060cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80060d0:	e7a8      	b.n	8006024 <_printf_i+0x150>
 80060d2:	6923      	ldr	r3, [r4, #16]
 80060d4:	462a      	mov	r2, r5
 80060d6:	4649      	mov	r1, r9
 80060d8:	4640      	mov	r0, r8
 80060da:	47d0      	blx	sl
 80060dc:	3001      	adds	r0, #1
 80060de:	d0ab      	beq.n	8006038 <_printf_i+0x164>
 80060e0:	6823      	ldr	r3, [r4, #0]
 80060e2:	079b      	lsls	r3, r3, #30
 80060e4:	d413      	bmi.n	800610e <_printf_i+0x23a>
 80060e6:	68e0      	ldr	r0, [r4, #12]
 80060e8:	9b03      	ldr	r3, [sp, #12]
 80060ea:	4298      	cmp	r0, r3
 80060ec:	bfb8      	it	lt
 80060ee:	4618      	movlt	r0, r3
 80060f0:	e7a4      	b.n	800603c <_printf_i+0x168>
 80060f2:	2301      	movs	r3, #1
 80060f4:	4632      	mov	r2, r6
 80060f6:	4649      	mov	r1, r9
 80060f8:	4640      	mov	r0, r8
 80060fa:	47d0      	blx	sl
 80060fc:	3001      	adds	r0, #1
 80060fe:	d09b      	beq.n	8006038 <_printf_i+0x164>
 8006100:	3501      	adds	r5, #1
 8006102:	68e3      	ldr	r3, [r4, #12]
 8006104:	9903      	ldr	r1, [sp, #12]
 8006106:	1a5b      	subs	r3, r3, r1
 8006108:	42ab      	cmp	r3, r5
 800610a:	dcf2      	bgt.n	80060f2 <_printf_i+0x21e>
 800610c:	e7eb      	b.n	80060e6 <_printf_i+0x212>
 800610e:	2500      	movs	r5, #0
 8006110:	f104 0619 	add.w	r6, r4, #25
 8006114:	e7f5      	b.n	8006102 <_printf_i+0x22e>
 8006116:	bf00      	nop
 8006118:	080063b5 	.word	0x080063b5
 800611c:	080063c6 	.word	0x080063c6

08006120 <_sbrk_r>:
 8006120:	b538      	push	{r3, r4, r5, lr}
 8006122:	4d06      	ldr	r5, [pc, #24]	; (800613c <_sbrk_r+0x1c>)
 8006124:	2300      	movs	r3, #0
 8006126:	4604      	mov	r4, r0
 8006128:	4608      	mov	r0, r1
 800612a:	602b      	str	r3, [r5, #0]
 800612c:	f7fa fe58 	bl	8000de0 <_sbrk>
 8006130:	1c43      	adds	r3, r0, #1
 8006132:	d102      	bne.n	800613a <_sbrk_r+0x1a>
 8006134:	682b      	ldr	r3, [r5, #0]
 8006136:	b103      	cbz	r3, 800613a <_sbrk_r+0x1a>
 8006138:	6023      	str	r3, [r4, #0]
 800613a:	bd38      	pop	{r3, r4, r5, pc}
 800613c:	2000018c 	.word	0x2000018c

08006140 <__sread>:
 8006140:	b510      	push	{r4, lr}
 8006142:	460c      	mov	r4, r1
 8006144:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006148:	f000 f8a0 	bl	800628c <_read_r>
 800614c:	2800      	cmp	r0, #0
 800614e:	bfab      	itete	ge
 8006150:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006152:	89a3      	ldrhlt	r3, [r4, #12]
 8006154:	181b      	addge	r3, r3, r0
 8006156:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800615a:	bfac      	ite	ge
 800615c:	6563      	strge	r3, [r4, #84]	; 0x54
 800615e:	81a3      	strhlt	r3, [r4, #12]
 8006160:	bd10      	pop	{r4, pc}

08006162 <__swrite>:
 8006162:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006166:	461f      	mov	r7, r3
 8006168:	898b      	ldrh	r3, [r1, #12]
 800616a:	05db      	lsls	r3, r3, #23
 800616c:	4605      	mov	r5, r0
 800616e:	460c      	mov	r4, r1
 8006170:	4616      	mov	r6, r2
 8006172:	d505      	bpl.n	8006180 <__swrite+0x1e>
 8006174:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006178:	2302      	movs	r3, #2
 800617a:	2200      	movs	r2, #0
 800617c:	f000 f868 	bl	8006250 <_lseek_r>
 8006180:	89a3      	ldrh	r3, [r4, #12]
 8006182:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006186:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800618a:	81a3      	strh	r3, [r4, #12]
 800618c:	4632      	mov	r2, r6
 800618e:	463b      	mov	r3, r7
 8006190:	4628      	mov	r0, r5
 8006192:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006196:	f000 b817 	b.w	80061c8 <_write_r>

0800619a <__sseek>:
 800619a:	b510      	push	{r4, lr}
 800619c:	460c      	mov	r4, r1
 800619e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061a2:	f000 f855 	bl	8006250 <_lseek_r>
 80061a6:	1c43      	adds	r3, r0, #1
 80061a8:	89a3      	ldrh	r3, [r4, #12]
 80061aa:	bf15      	itete	ne
 80061ac:	6560      	strne	r0, [r4, #84]	; 0x54
 80061ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80061b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80061b6:	81a3      	strheq	r3, [r4, #12]
 80061b8:	bf18      	it	ne
 80061ba:	81a3      	strhne	r3, [r4, #12]
 80061bc:	bd10      	pop	{r4, pc}

080061be <__sclose>:
 80061be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061c2:	f000 b813 	b.w	80061ec <_close_r>
	...

080061c8 <_write_r>:
 80061c8:	b538      	push	{r3, r4, r5, lr}
 80061ca:	4d07      	ldr	r5, [pc, #28]	; (80061e8 <_write_r+0x20>)
 80061cc:	4604      	mov	r4, r0
 80061ce:	4608      	mov	r0, r1
 80061d0:	4611      	mov	r1, r2
 80061d2:	2200      	movs	r2, #0
 80061d4:	602a      	str	r2, [r5, #0]
 80061d6:	461a      	mov	r2, r3
 80061d8:	f7fa fc0a 	bl	80009f0 <_write>
 80061dc:	1c43      	adds	r3, r0, #1
 80061de:	d102      	bne.n	80061e6 <_write_r+0x1e>
 80061e0:	682b      	ldr	r3, [r5, #0]
 80061e2:	b103      	cbz	r3, 80061e6 <_write_r+0x1e>
 80061e4:	6023      	str	r3, [r4, #0]
 80061e6:	bd38      	pop	{r3, r4, r5, pc}
 80061e8:	2000018c 	.word	0x2000018c

080061ec <_close_r>:
 80061ec:	b538      	push	{r3, r4, r5, lr}
 80061ee:	4d06      	ldr	r5, [pc, #24]	; (8006208 <_close_r+0x1c>)
 80061f0:	2300      	movs	r3, #0
 80061f2:	4604      	mov	r4, r0
 80061f4:	4608      	mov	r0, r1
 80061f6:	602b      	str	r3, [r5, #0]
 80061f8:	f7fa fdbd 	bl	8000d76 <_close>
 80061fc:	1c43      	adds	r3, r0, #1
 80061fe:	d102      	bne.n	8006206 <_close_r+0x1a>
 8006200:	682b      	ldr	r3, [r5, #0]
 8006202:	b103      	cbz	r3, 8006206 <_close_r+0x1a>
 8006204:	6023      	str	r3, [r4, #0]
 8006206:	bd38      	pop	{r3, r4, r5, pc}
 8006208:	2000018c 	.word	0x2000018c

0800620c <_fstat_r>:
 800620c:	b538      	push	{r3, r4, r5, lr}
 800620e:	4d07      	ldr	r5, [pc, #28]	; (800622c <_fstat_r+0x20>)
 8006210:	2300      	movs	r3, #0
 8006212:	4604      	mov	r4, r0
 8006214:	4608      	mov	r0, r1
 8006216:	4611      	mov	r1, r2
 8006218:	602b      	str	r3, [r5, #0]
 800621a:	f7fa fdb8 	bl	8000d8e <_fstat>
 800621e:	1c43      	adds	r3, r0, #1
 8006220:	d102      	bne.n	8006228 <_fstat_r+0x1c>
 8006222:	682b      	ldr	r3, [r5, #0]
 8006224:	b103      	cbz	r3, 8006228 <_fstat_r+0x1c>
 8006226:	6023      	str	r3, [r4, #0]
 8006228:	bd38      	pop	{r3, r4, r5, pc}
 800622a:	bf00      	nop
 800622c:	2000018c 	.word	0x2000018c

08006230 <_isatty_r>:
 8006230:	b538      	push	{r3, r4, r5, lr}
 8006232:	4d06      	ldr	r5, [pc, #24]	; (800624c <_isatty_r+0x1c>)
 8006234:	2300      	movs	r3, #0
 8006236:	4604      	mov	r4, r0
 8006238:	4608      	mov	r0, r1
 800623a:	602b      	str	r3, [r5, #0]
 800623c:	f7fa fdb7 	bl	8000dae <_isatty>
 8006240:	1c43      	adds	r3, r0, #1
 8006242:	d102      	bne.n	800624a <_isatty_r+0x1a>
 8006244:	682b      	ldr	r3, [r5, #0]
 8006246:	b103      	cbz	r3, 800624a <_isatty_r+0x1a>
 8006248:	6023      	str	r3, [r4, #0]
 800624a:	bd38      	pop	{r3, r4, r5, pc}
 800624c:	2000018c 	.word	0x2000018c

08006250 <_lseek_r>:
 8006250:	b538      	push	{r3, r4, r5, lr}
 8006252:	4d07      	ldr	r5, [pc, #28]	; (8006270 <_lseek_r+0x20>)
 8006254:	4604      	mov	r4, r0
 8006256:	4608      	mov	r0, r1
 8006258:	4611      	mov	r1, r2
 800625a:	2200      	movs	r2, #0
 800625c:	602a      	str	r2, [r5, #0]
 800625e:	461a      	mov	r2, r3
 8006260:	f7fa fdb0 	bl	8000dc4 <_lseek>
 8006264:	1c43      	adds	r3, r0, #1
 8006266:	d102      	bne.n	800626e <_lseek_r+0x1e>
 8006268:	682b      	ldr	r3, [r5, #0]
 800626a:	b103      	cbz	r3, 800626e <_lseek_r+0x1e>
 800626c:	6023      	str	r3, [r4, #0]
 800626e:	bd38      	pop	{r3, r4, r5, pc}
 8006270:	2000018c 	.word	0x2000018c

08006274 <__malloc_lock>:
 8006274:	4801      	ldr	r0, [pc, #4]	; (800627c <__malloc_lock+0x8>)
 8006276:	f7ff bb1d 	b.w	80058b4 <__retarget_lock_acquire_recursive>
 800627a:	bf00      	nop
 800627c:	20000180 	.word	0x20000180

08006280 <__malloc_unlock>:
 8006280:	4801      	ldr	r0, [pc, #4]	; (8006288 <__malloc_unlock+0x8>)
 8006282:	f7ff bb18 	b.w	80058b6 <__retarget_lock_release_recursive>
 8006286:	bf00      	nop
 8006288:	20000180 	.word	0x20000180

0800628c <_read_r>:
 800628c:	b538      	push	{r3, r4, r5, lr}
 800628e:	4d07      	ldr	r5, [pc, #28]	; (80062ac <_read_r+0x20>)
 8006290:	4604      	mov	r4, r0
 8006292:	4608      	mov	r0, r1
 8006294:	4611      	mov	r1, r2
 8006296:	2200      	movs	r2, #0
 8006298:	602a      	str	r2, [r5, #0]
 800629a:	461a      	mov	r2, r3
 800629c:	f7fa fd4e 	bl	8000d3c <_read>
 80062a0:	1c43      	adds	r3, r0, #1
 80062a2:	d102      	bne.n	80062aa <_read_r+0x1e>
 80062a4:	682b      	ldr	r3, [r5, #0]
 80062a6:	b103      	cbz	r3, 80062aa <_read_r+0x1e>
 80062a8:	6023      	str	r3, [r4, #0]
 80062aa:	bd38      	pop	{r3, r4, r5, pc}
 80062ac:	2000018c 	.word	0x2000018c

080062b0 <_init>:
 80062b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062b2:	bf00      	nop
 80062b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062b6:	bc08      	pop	{r3}
 80062b8:	469e      	mov	lr, r3
 80062ba:	4770      	bx	lr

080062bc <_fini>:
 80062bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062be:	bf00      	nop
 80062c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062c2:	bc08      	pop	{r3}
 80062c4:	469e      	mov	lr, r3
 80062c6:	4770      	bx	lr
