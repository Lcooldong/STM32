
ADC_DMA_Timer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a53c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004e4  0800a6f0  0800a6f0  0001a6f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800abd4  0800abd4  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800abd4  0800abd4  0001abd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800abdc  0800abdc  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800abdc  0800abdc  0001abdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800abe0  0800abe0  0001abe0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800abe4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e0  2**0
                  CONTENTS
 10 .bss          00000290  200001e0  200001e0  000201e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000470  20000470  000201e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   000116ac  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002892  00000000  00000000  000318bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ed0  00000000  00000000  00034150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000da8  00000000  00000000  00035020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002655c  00000000  00000000  00035dc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000128dc  00000000  00000000  0005c324  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e8353  00000000  00000000  0006ec00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00156f53  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000052ec  00000000  00000000  00156fa4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800a6d4 	.word	0x0800a6d4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001e4 	.word	0x200001e4
 80001ec:	0800a6d4 	.word	0x0800a6d4

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9aa 	b.w	8001014 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468e      	mov	lr, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d14d      	bne.n	8000dee <__udivmoddi4+0xaa>
 8000d52:	428a      	cmp	r2, r1
 8000d54:	4694      	mov	ip, r2
 8000d56:	d969      	bls.n	8000e2c <__udivmoddi4+0xe8>
 8000d58:	fab2 f282 	clz	r2, r2
 8000d5c:	b152      	cbz	r2, 8000d74 <__udivmoddi4+0x30>
 8000d5e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d62:	f1c2 0120 	rsb	r1, r2, #32
 8000d66:	fa20 f101 	lsr.w	r1, r0, r1
 8000d6a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d72:	4094      	lsls	r4, r2
 8000d74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d78:	0c21      	lsrs	r1, r4, #16
 8000d7a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d7e:	fa1f f78c 	uxth.w	r7, ip
 8000d82:	fb08 e316 	mls	r3, r8, r6, lr
 8000d86:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d8a:	fb06 f107 	mul.w	r1, r6, r7
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	d90a      	bls.n	8000da8 <__udivmoddi4+0x64>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d9a:	f080 811f 	bcs.w	8000fdc <__udivmoddi4+0x298>
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	f240 811c 	bls.w	8000fdc <__udivmoddi4+0x298>
 8000da4:	3e02      	subs	r6, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1a5b      	subs	r3, r3, r1
 8000daa:	b2a4      	uxth	r4, r4
 8000dac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000db0:	fb08 3310 	mls	r3, r8, r0, r3
 8000db4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db8:	fb00 f707 	mul.w	r7, r0, r7
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	d90a      	bls.n	8000dd6 <__udivmoddi4+0x92>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc8:	f080 810a 	bcs.w	8000fe0 <__udivmoddi4+0x29c>
 8000dcc:	42a7      	cmp	r7, r4
 8000dce:	f240 8107 	bls.w	8000fe0 <__udivmoddi4+0x29c>
 8000dd2:	4464      	add	r4, ip
 8000dd4:	3802      	subs	r0, #2
 8000dd6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dda:	1be4      	subs	r4, r4, r7
 8000ddc:	2600      	movs	r6, #0
 8000dde:	b11d      	cbz	r5, 8000de8 <__udivmoddi4+0xa4>
 8000de0:	40d4      	lsrs	r4, r2
 8000de2:	2300      	movs	r3, #0
 8000de4:	e9c5 4300 	strd	r4, r3, [r5]
 8000de8:	4631      	mov	r1, r6
 8000dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d909      	bls.n	8000e06 <__udivmoddi4+0xc2>
 8000df2:	2d00      	cmp	r5, #0
 8000df4:	f000 80ef 	beq.w	8000fd6 <__udivmoddi4+0x292>
 8000df8:	2600      	movs	r6, #0
 8000dfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dfe:	4630      	mov	r0, r6
 8000e00:	4631      	mov	r1, r6
 8000e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e06:	fab3 f683 	clz	r6, r3
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	d14a      	bne.n	8000ea4 <__udivmoddi4+0x160>
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d302      	bcc.n	8000e18 <__udivmoddi4+0xd4>
 8000e12:	4282      	cmp	r2, r0
 8000e14:	f200 80f9 	bhi.w	800100a <__udivmoddi4+0x2c6>
 8000e18:	1a84      	subs	r4, r0, r2
 8000e1a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e1e:	2001      	movs	r0, #1
 8000e20:	469e      	mov	lr, r3
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	d0e0      	beq.n	8000de8 <__udivmoddi4+0xa4>
 8000e26:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e2a:	e7dd      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000e2c:	b902      	cbnz	r2, 8000e30 <__udivmoddi4+0xec>
 8000e2e:	deff      	udf	#255	; 0xff
 8000e30:	fab2 f282 	clz	r2, r2
 8000e34:	2a00      	cmp	r2, #0
 8000e36:	f040 8092 	bne.w	8000f5e <__udivmoddi4+0x21a>
 8000e3a:	eba1 010c 	sub.w	r1, r1, ip
 8000e3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e42:	fa1f fe8c 	uxth.w	lr, ip
 8000e46:	2601      	movs	r6, #1
 8000e48:	0c20      	lsrs	r0, r4, #16
 8000e4a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e4e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e52:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e56:	fb0e f003 	mul.w	r0, lr, r3
 8000e5a:	4288      	cmp	r0, r1
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x12c>
 8000e5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e62:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x12a>
 8000e68:	4288      	cmp	r0, r1
 8000e6a:	f200 80cb 	bhi.w	8001004 <__udivmoddi4+0x2c0>
 8000e6e:	4643      	mov	r3, r8
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e78:	fb07 1110 	mls	r1, r7, r0, r1
 8000e7c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e80:	fb0e fe00 	mul.w	lr, lr, r0
 8000e84:	45a6      	cmp	lr, r4
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x156>
 8000e88:	eb1c 0404 	adds.w	r4, ip, r4
 8000e8c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e90:	d202      	bcs.n	8000e98 <__udivmoddi4+0x154>
 8000e92:	45a6      	cmp	lr, r4
 8000e94:	f200 80bb 	bhi.w	800100e <__udivmoddi4+0x2ca>
 8000e98:	4608      	mov	r0, r1
 8000e9a:	eba4 040e 	sub.w	r4, r4, lr
 8000e9e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ea2:	e79c      	b.n	8000dde <__udivmoddi4+0x9a>
 8000ea4:	f1c6 0720 	rsb	r7, r6, #32
 8000ea8:	40b3      	lsls	r3, r6
 8000eaa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eae:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eb2:	fa20 f407 	lsr.w	r4, r0, r7
 8000eb6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eba:	431c      	orrs	r4, r3
 8000ebc:	40f9      	lsrs	r1, r7
 8000ebe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ec2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ec6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eca:	0c20      	lsrs	r0, r4, #16
 8000ecc:	fa1f fe8c 	uxth.w	lr, ip
 8000ed0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ed4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ed8:	fb08 f00e 	mul.w	r0, r8, lr
 8000edc:	4288      	cmp	r0, r1
 8000ede:	fa02 f206 	lsl.w	r2, r2, r6
 8000ee2:	d90b      	bls.n	8000efc <__udivmoddi4+0x1b8>
 8000ee4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000eec:	f080 8088 	bcs.w	8001000 <__udivmoddi4+0x2bc>
 8000ef0:	4288      	cmp	r0, r1
 8000ef2:	f240 8085 	bls.w	8001000 <__udivmoddi4+0x2bc>
 8000ef6:	f1a8 0802 	sub.w	r8, r8, #2
 8000efa:	4461      	add	r1, ip
 8000efc:	1a09      	subs	r1, r1, r0
 8000efe:	b2a4      	uxth	r4, r4
 8000f00:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f04:	fb09 1110 	mls	r1, r9, r0, r1
 8000f08:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f10:	458e      	cmp	lr, r1
 8000f12:	d908      	bls.n	8000f26 <__udivmoddi4+0x1e2>
 8000f14:	eb1c 0101 	adds.w	r1, ip, r1
 8000f18:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f1c:	d26c      	bcs.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f1e:	458e      	cmp	lr, r1
 8000f20:	d96a      	bls.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f22:	3802      	subs	r0, #2
 8000f24:	4461      	add	r1, ip
 8000f26:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f2a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f2e:	eba1 010e 	sub.w	r1, r1, lr
 8000f32:	42a1      	cmp	r1, r4
 8000f34:	46c8      	mov	r8, r9
 8000f36:	46a6      	mov	lr, r4
 8000f38:	d356      	bcc.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f3a:	d053      	beq.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f3c:	b15d      	cbz	r5, 8000f56 <__udivmoddi4+0x212>
 8000f3e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f42:	eb61 010e 	sbc.w	r1, r1, lr
 8000f46:	fa01 f707 	lsl.w	r7, r1, r7
 8000f4a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f4e:	40f1      	lsrs	r1, r6
 8000f50:	431f      	orrs	r7, r3
 8000f52:	e9c5 7100 	strd	r7, r1, [r5]
 8000f56:	2600      	movs	r6, #0
 8000f58:	4631      	mov	r1, r6
 8000f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f5e:	f1c2 0320 	rsb	r3, r2, #32
 8000f62:	40d8      	lsrs	r0, r3
 8000f64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f68:	fa21 f303 	lsr.w	r3, r1, r3
 8000f6c:	4091      	lsls	r1, r2
 8000f6e:	4301      	orrs	r1, r0
 8000f70:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f74:	fa1f fe8c 	uxth.w	lr, ip
 8000f78:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f7c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f80:	0c0b      	lsrs	r3, r1, #16
 8000f82:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f86:	fb00 f60e 	mul.w	r6, r0, lr
 8000f8a:	429e      	cmp	r6, r3
 8000f8c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f90:	d908      	bls.n	8000fa4 <__udivmoddi4+0x260>
 8000f92:	eb1c 0303 	adds.w	r3, ip, r3
 8000f96:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f9a:	d22f      	bcs.n	8000ffc <__udivmoddi4+0x2b8>
 8000f9c:	429e      	cmp	r6, r3
 8000f9e:	d92d      	bls.n	8000ffc <__udivmoddi4+0x2b8>
 8000fa0:	3802      	subs	r0, #2
 8000fa2:	4463      	add	r3, ip
 8000fa4:	1b9b      	subs	r3, r3, r6
 8000fa6:	b289      	uxth	r1, r1
 8000fa8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fac:	fb07 3316 	mls	r3, r7, r6, r3
 8000fb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fb4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fb8:	428b      	cmp	r3, r1
 8000fba:	d908      	bls.n	8000fce <__udivmoddi4+0x28a>
 8000fbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fc0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fc4:	d216      	bcs.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fc6:	428b      	cmp	r3, r1
 8000fc8:	d914      	bls.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fca:	3e02      	subs	r6, #2
 8000fcc:	4461      	add	r1, ip
 8000fce:	1ac9      	subs	r1, r1, r3
 8000fd0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fd4:	e738      	b.n	8000e48 <__udivmoddi4+0x104>
 8000fd6:	462e      	mov	r6, r5
 8000fd8:	4628      	mov	r0, r5
 8000fda:	e705      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000fdc:	4606      	mov	r6, r0
 8000fde:	e6e3      	b.n	8000da8 <__udivmoddi4+0x64>
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	e6f8      	b.n	8000dd6 <__udivmoddi4+0x92>
 8000fe4:	454b      	cmp	r3, r9
 8000fe6:	d2a9      	bcs.n	8000f3c <__udivmoddi4+0x1f8>
 8000fe8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fec:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ff0:	3801      	subs	r0, #1
 8000ff2:	e7a3      	b.n	8000f3c <__udivmoddi4+0x1f8>
 8000ff4:	4646      	mov	r6, r8
 8000ff6:	e7ea      	b.n	8000fce <__udivmoddi4+0x28a>
 8000ff8:	4620      	mov	r0, r4
 8000ffa:	e794      	b.n	8000f26 <__udivmoddi4+0x1e2>
 8000ffc:	4640      	mov	r0, r8
 8000ffe:	e7d1      	b.n	8000fa4 <__udivmoddi4+0x260>
 8001000:	46d0      	mov	r8, sl
 8001002:	e77b      	b.n	8000efc <__udivmoddi4+0x1b8>
 8001004:	3b02      	subs	r3, #2
 8001006:	4461      	add	r1, ip
 8001008:	e732      	b.n	8000e70 <__udivmoddi4+0x12c>
 800100a:	4630      	mov	r0, r6
 800100c:	e709      	b.n	8000e22 <__udivmoddi4+0xde>
 800100e:	4464      	add	r4, ip
 8001010:	3802      	subs	r0, #2
 8001012:	e742      	b.n	8000e9a <__udivmoddi4+0x156>

08001014 <__aeabi_idiv0>:
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop

08001018 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b084      	sub	sp, #16
 800101c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800101e:	463b      	mov	r3, r7
 8001020:	2200      	movs	r2, #0
 8001022:	601a      	str	r2, [r3, #0]
 8001024:	605a      	str	r2, [r3, #4]
 8001026:	609a      	str	r2, [r3, #8]
 8001028:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800102a:	4b21      	ldr	r3, [pc, #132]	; (80010b0 <MX_ADC1_Init+0x98>)
 800102c:	4a21      	ldr	r2, [pc, #132]	; (80010b4 <MX_ADC1_Init+0x9c>)
 800102e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001030:	4b1f      	ldr	r3, [pc, #124]	; (80010b0 <MX_ADC1_Init+0x98>)
 8001032:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001036:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001038:	4b1d      	ldr	r3, [pc, #116]	; (80010b0 <MX_ADC1_Init+0x98>)
 800103a:	2200      	movs	r2, #0
 800103c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800103e:	4b1c      	ldr	r3, [pc, #112]	; (80010b0 <MX_ADC1_Init+0x98>)
 8001040:	2201      	movs	r2, #1
 8001042:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001044:	4b1a      	ldr	r3, [pc, #104]	; (80010b0 <MX_ADC1_Init+0x98>)
 8001046:	2201      	movs	r2, #1
 8001048:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800104a:	4b19      	ldr	r3, [pc, #100]	; (80010b0 <MX_ADC1_Init+0x98>)
 800104c:	2200      	movs	r2, #0
 800104e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001052:	4b17      	ldr	r3, [pc, #92]	; (80010b0 <MX_ADC1_Init+0x98>)
 8001054:	2200      	movs	r2, #0
 8001056:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001058:	4b15      	ldr	r3, [pc, #84]	; (80010b0 <MX_ADC1_Init+0x98>)
 800105a:	4a17      	ldr	r2, [pc, #92]	; (80010b8 <MX_ADC1_Init+0xa0>)
 800105c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800105e:	4b14      	ldr	r3, [pc, #80]	; (80010b0 <MX_ADC1_Init+0x98>)
 8001060:	2200      	movs	r2, #0
 8001062:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001064:	4b12      	ldr	r3, [pc, #72]	; (80010b0 <MX_ADC1_Init+0x98>)
 8001066:	2201      	movs	r2, #1
 8001068:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800106a:	4b11      	ldr	r3, [pc, #68]	; (80010b0 <MX_ADC1_Init+0x98>)
 800106c:	2201      	movs	r2, #1
 800106e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001072:	4b0f      	ldr	r3, [pc, #60]	; (80010b0 <MX_ADC1_Init+0x98>)
 8001074:	2201      	movs	r2, #1
 8001076:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001078:	480d      	ldr	r0, [pc, #52]	; (80010b0 <MX_ADC1_Init+0x98>)
 800107a:	f000 fe2f 	bl	8001cdc <HAL_ADC_Init>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001084:	f000 faa0 	bl	80015c8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001088:	2303      	movs	r3, #3
 800108a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800108c:	2301      	movs	r3, #1
 800108e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001090:	2300      	movs	r3, #0
 8001092:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001094:	463b      	mov	r3, r7
 8001096:	4619      	mov	r1, r3
 8001098:	4805      	ldr	r0, [pc, #20]	; (80010b0 <MX_ADC1_Init+0x98>)
 800109a:	f000 ff91 	bl	8001fc0 <HAL_ADC_ConfigChannel>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80010a4:	f000 fa90 	bl	80015c8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010a8:	bf00      	nop
 80010aa:	3710      	adds	r7, #16
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	200001fc 	.word	0x200001fc
 80010b4:	40012000 	.word	0x40012000
 80010b8:	0f000001 	.word	0x0f000001

080010bc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b08a      	sub	sp, #40	; 0x28
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c4:	f107 0314 	add.w	r3, r7, #20
 80010c8:	2200      	movs	r2, #0
 80010ca:	601a      	str	r2, [r3, #0]
 80010cc:	605a      	str	r2, [r3, #4]
 80010ce:	609a      	str	r2, [r3, #8]
 80010d0:	60da      	str	r2, [r3, #12]
 80010d2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a2f      	ldr	r2, [pc, #188]	; (8001198 <HAL_ADC_MspInit+0xdc>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d157      	bne.n	800118e <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010de:	2300      	movs	r3, #0
 80010e0:	613b      	str	r3, [r7, #16]
 80010e2:	4b2e      	ldr	r3, [pc, #184]	; (800119c <HAL_ADC_MspInit+0xe0>)
 80010e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e6:	4a2d      	ldr	r2, [pc, #180]	; (800119c <HAL_ADC_MspInit+0xe0>)
 80010e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010ec:	6453      	str	r3, [r2, #68]	; 0x44
 80010ee:	4b2b      	ldr	r3, [pc, #172]	; (800119c <HAL_ADC_MspInit+0xe0>)
 80010f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010f6:	613b      	str	r3, [r7, #16]
 80010f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010fa:	2300      	movs	r3, #0
 80010fc:	60fb      	str	r3, [r7, #12]
 80010fe:	4b27      	ldr	r3, [pc, #156]	; (800119c <HAL_ADC_MspInit+0xe0>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001102:	4a26      	ldr	r2, [pc, #152]	; (800119c <HAL_ADC_MspInit+0xe0>)
 8001104:	f043 0301 	orr.w	r3, r3, #1
 8001108:	6313      	str	r3, [r2, #48]	; 0x30
 800110a:	4b24      	ldr	r3, [pc, #144]	; (800119c <HAL_ADC_MspInit+0xe0>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110e:	f003 0301 	and.w	r3, r3, #1
 8001112:	60fb      	str	r3, [r7, #12]
 8001114:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001116:	2308      	movs	r3, #8
 8001118:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800111a:	2303      	movs	r3, #3
 800111c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111e:	2300      	movs	r3, #0
 8001120:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001122:	f107 0314 	add.w	r3, r7, #20
 8001126:	4619      	mov	r1, r3
 8001128:	481d      	ldr	r0, [pc, #116]	; (80011a0 <HAL_ADC_MspInit+0xe4>)
 800112a:	f001 ff0d 	bl	8002f48 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800112e:	4b1d      	ldr	r3, [pc, #116]	; (80011a4 <HAL_ADC_MspInit+0xe8>)
 8001130:	4a1d      	ldr	r2, [pc, #116]	; (80011a8 <HAL_ADC_MspInit+0xec>)
 8001132:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001134:	4b1b      	ldr	r3, [pc, #108]	; (80011a4 <HAL_ADC_MspInit+0xe8>)
 8001136:	2200      	movs	r2, #0
 8001138:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800113a:	4b1a      	ldr	r3, [pc, #104]	; (80011a4 <HAL_ADC_MspInit+0xe8>)
 800113c:	2200      	movs	r2, #0
 800113e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001140:	4b18      	ldr	r3, [pc, #96]	; (80011a4 <HAL_ADC_MspInit+0xe8>)
 8001142:	2200      	movs	r2, #0
 8001144:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001146:	4b17      	ldr	r3, [pc, #92]	; (80011a4 <HAL_ADC_MspInit+0xe8>)
 8001148:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800114c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800114e:	4b15      	ldr	r3, [pc, #84]	; (80011a4 <HAL_ADC_MspInit+0xe8>)
 8001150:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001154:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001156:	4b13      	ldr	r3, [pc, #76]	; (80011a4 <HAL_ADC_MspInit+0xe8>)
 8001158:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800115c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800115e:	4b11      	ldr	r3, [pc, #68]	; (80011a4 <HAL_ADC_MspInit+0xe8>)
 8001160:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001164:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001166:	4b0f      	ldr	r3, [pc, #60]	; (80011a4 <HAL_ADC_MspInit+0xe8>)
 8001168:	2200      	movs	r2, #0
 800116a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800116c:	4b0d      	ldr	r3, [pc, #52]	; (80011a4 <HAL_ADC_MspInit+0xe8>)
 800116e:	2200      	movs	r2, #0
 8001170:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001172:	480c      	ldr	r0, [pc, #48]	; (80011a4 <HAL_ADC_MspInit+0xe8>)
 8001174:	f001 fae6 	bl	8002744 <HAL_DMA_Init>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800117e:	f000 fa23 	bl	80015c8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4a07      	ldr	r2, [pc, #28]	; (80011a4 <HAL_ADC_MspInit+0xe8>)
 8001186:	639a      	str	r2, [r3, #56]	; 0x38
 8001188:	4a06      	ldr	r2, [pc, #24]	; (80011a4 <HAL_ADC_MspInit+0xe8>)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800118e:	bf00      	nop
 8001190:	3728      	adds	r7, #40	; 0x28
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	40012000 	.word	0x40012000
 800119c:	40023800 	.word	0x40023800
 80011a0:	40020000 	.word	0x40020000
 80011a4:	20000244 	.word	0x20000244
 80011a8:	40026410 	.word	0x40026410

080011ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011b2:	2300      	movs	r3, #0
 80011b4:	607b      	str	r3, [r7, #4]
 80011b6:	4b17      	ldr	r3, [pc, #92]	; (8001214 <MX_DMA_Init+0x68>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ba:	4a16      	ldr	r2, [pc, #88]	; (8001214 <MX_DMA_Init+0x68>)
 80011bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011c0:	6313      	str	r3, [r2, #48]	; 0x30
 80011c2:	4b14      	ldr	r3, [pc, #80]	; (8001214 <MX_DMA_Init+0x68>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011ca:	607b      	str	r3, [r7, #4]
 80011cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80011ce:	2300      	movs	r3, #0
 80011d0:	603b      	str	r3, [r7, #0]
 80011d2:	4b10      	ldr	r3, [pc, #64]	; (8001214 <MX_DMA_Init+0x68>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d6:	4a0f      	ldr	r2, [pc, #60]	; (8001214 <MX_DMA_Init+0x68>)
 80011d8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011dc:	6313      	str	r3, [r2, #48]	; 0x30
 80011de:	4b0d      	ldr	r3, [pc, #52]	; (8001214 <MX_DMA_Init+0x68>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011e6:	603b      	str	r3, [r7, #0]
 80011e8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80011ea:	2200      	movs	r2, #0
 80011ec:	2100      	movs	r1, #0
 80011ee:	200d      	movs	r0, #13
 80011f0:	f001 fa71 	bl	80026d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80011f4:	200d      	movs	r0, #13
 80011f6:	f001 fa8a 	bl	800270e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80011fa:	2200      	movs	r2, #0
 80011fc:	2100      	movs	r1, #0
 80011fe:	2038      	movs	r0, #56	; 0x38
 8001200:	f001 fa69 	bl	80026d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001204:	2038      	movs	r0, #56	; 0x38
 8001206:	f001 fa82 	bl	800270e <HAL_NVIC_EnableIRQ>

}
 800120a:	bf00      	nop
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	40023800 	.word	0x40023800

08001218 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b08c      	sub	sp, #48	; 0x30
 800121c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800121e:	f107 031c 	add.w	r3, r7, #28
 8001222:	2200      	movs	r2, #0
 8001224:	601a      	str	r2, [r3, #0]
 8001226:	605a      	str	r2, [r3, #4]
 8001228:	609a      	str	r2, [r3, #8]
 800122a:	60da      	str	r2, [r3, #12]
 800122c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800122e:	2300      	movs	r3, #0
 8001230:	61bb      	str	r3, [r7, #24]
 8001232:	4b7c      	ldr	r3, [pc, #496]	; (8001424 <MX_GPIO_Init+0x20c>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001236:	4a7b      	ldr	r2, [pc, #492]	; (8001424 <MX_GPIO_Init+0x20c>)
 8001238:	f043 0304 	orr.w	r3, r3, #4
 800123c:	6313      	str	r3, [r2, #48]	; 0x30
 800123e:	4b79      	ldr	r3, [pc, #484]	; (8001424 <MX_GPIO_Init+0x20c>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001242:	f003 0304 	and.w	r3, r3, #4
 8001246:	61bb      	str	r3, [r7, #24]
 8001248:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800124a:	2300      	movs	r3, #0
 800124c:	617b      	str	r3, [r7, #20]
 800124e:	4b75      	ldr	r3, [pc, #468]	; (8001424 <MX_GPIO_Init+0x20c>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001252:	4a74      	ldr	r2, [pc, #464]	; (8001424 <MX_GPIO_Init+0x20c>)
 8001254:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001258:	6313      	str	r3, [r2, #48]	; 0x30
 800125a:	4b72      	ldr	r3, [pc, #456]	; (8001424 <MX_GPIO_Init+0x20c>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001262:	617b      	str	r3, [r7, #20]
 8001264:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001266:	2300      	movs	r3, #0
 8001268:	613b      	str	r3, [r7, #16]
 800126a:	4b6e      	ldr	r3, [pc, #440]	; (8001424 <MX_GPIO_Init+0x20c>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126e:	4a6d      	ldr	r2, [pc, #436]	; (8001424 <MX_GPIO_Init+0x20c>)
 8001270:	f043 0301 	orr.w	r3, r3, #1
 8001274:	6313      	str	r3, [r2, #48]	; 0x30
 8001276:	4b6b      	ldr	r3, [pc, #428]	; (8001424 <MX_GPIO_Init+0x20c>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127a:	f003 0301 	and.w	r3, r3, #1
 800127e:	613b      	str	r3, [r7, #16]
 8001280:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001282:	2300      	movs	r3, #0
 8001284:	60fb      	str	r3, [r7, #12]
 8001286:	4b67      	ldr	r3, [pc, #412]	; (8001424 <MX_GPIO_Init+0x20c>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128a:	4a66      	ldr	r2, [pc, #408]	; (8001424 <MX_GPIO_Init+0x20c>)
 800128c:	f043 0302 	orr.w	r3, r3, #2
 8001290:	6313      	str	r3, [r2, #48]	; 0x30
 8001292:	4b64      	ldr	r3, [pc, #400]	; (8001424 <MX_GPIO_Init+0x20c>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001296:	f003 0302 	and.w	r3, r3, #2
 800129a:	60fb      	str	r3, [r7, #12]
 800129c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800129e:	2300      	movs	r3, #0
 80012a0:	60bb      	str	r3, [r7, #8]
 80012a2:	4b60      	ldr	r3, [pc, #384]	; (8001424 <MX_GPIO_Init+0x20c>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a6:	4a5f      	ldr	r2, [pc, #380]	; (8001424 <MX_GPIO_Init+0x20c>)
 80012a8:	f043 0308 	orr.w	r3, r3, #8
 80012ac:	6313      	str	r3, [r2, #48]	; 0x30
 80012ae:	4b5d      	ldr	r3, [pc, #372]	; (8001424 <MX_GPIO_Init+0x20c>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b2:	f003 0308 	and.w	r3, r3, #8
 80012b6:	60bb      	str	r3, [r7, #8]
 80012b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80012ba:	2300      	movs	r3, #0
 80012bc:	607b      	str	r3, [r7, #4]
 80012be:	4b59      	ldr	r3, [pc, #356]	; (8001424 <MX_GPIO_Init+0x20c>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c2:	4a58      	ldr	r2, [pc, #352]	; (8001424 <MX_GPIO_Init+0x20c>)
 80012c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012c8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ca:	4b56      	ldr	r3, [pc, #344]	; (8001424 <MX_GPIO_Init+0x20c>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012d2:	607b      	str	r3, [r7, #4]
 80012d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80012d6:	2200      	movs	r2, #0
 80012d8:	f244 0181 	movw	r1, #16513	; 0x4081
 80012dc:	4852      	ldr	r0, [pc, #328]	; (8001428 <MX_GPIO_Init+0x210>)
 80012de:	f001 ffdf 	bl	80032a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80012e2:	2200      	movs	r2, #0
 80012e4:	2140      	movs	r1, #64	; 0x40
 80012e6:	4851      	ldr	r0, [pc, #324]	; (800142c <MX_GPIO_Init+0x214>)
 80012e8:	f001 ffda 	bl	80032a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80012ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012f2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80012f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f8:	2300      	movs	r3, #0
 80012fa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80012fc:	f107 031c 	add.w	r3, r7, #28
 8001300:	4619      	mov	r1, r3
 8001302:	484b      	ldr	r0, [pc, #300]	; (8001430 <MX_GPIO_Init+0x218>)
 8001304:	f001 fe20 	bl	8002f48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001308:	2332      	movs	r3, #50	; 0x32
 800130a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800130c:	2302      	movs	r3, #2
 800130e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001310:	2300      	movs	r3, #0
 8001312:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001314:	2303      	movs	r3, #3
 8001316:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001318:	230b      	movs	r3, #11
 800131a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800131c:	f107 031c 	add.w	r3, r7, #28
 8001320:	4619      	mov	r1, r3
 8001322:	4843      	ldr	r0, [pc, #268]	; (8001430 <MX_GPIO_Init+0x218>)
 8001324:	f001 fe10 	bl	8002f48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001328:	2386      	movs	r3, #134	; 0x86
 800132a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800132c:	2302      	movs	r3, #2
 800132e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001330:	2300      	movs	r3, #0
 8001332:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001334:	2303      	movs	r3, #3
 8001336:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001338:	230b      	movs	r3, #11
 800133a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800133c:	f107 031c 	add.w	r3, r7, #28
 8001340:	4619      	mov	r1, r3
 8001342:	483c      	ldr	r0, [pc, #240]	; (8001434 <MX_GPIO_Init+0x21c>)
 8001344:	f001 fe00 	bl	8002f48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001348:	f244 0381 	movw	r3, #16513	; 0x4081
 800134c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800134e:	2301      	movs	r3, #1
 8001350:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001352:	2300      	movs	r3, #0
 8001354:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001356:	2300      	movs	r3, #0
 8001358:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800135a:	f107 031c 	add.w	r3, r7, #28
 800135e:	4619      	mov	r1, r3
 8001360:	4831      	ldr	r0, [pc, #196]	; (8001428 <MX_GPIO_Init+0x210>)
 8001362:	f001 fdf1 	bl	8002f48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001366:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800136a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800136c:	2302      	movs	r3, #2
 800136e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001370:	2300      	movs	r3, #0
 8001372:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001374:	2303      	movs	r3, #3
 8001376:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001378:	230b      	movs	r3, #11
 800137a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800137c:	f107 031c 	add.w	r3, r7, #28
 8001380:	4619      	mov	r1, r3
 8001382:	4829      	ldr	r0, [pc, #164]	; (8001428 <MX_GPIO_Init+0x210>)
 8001384:	f001 fde0 	bl	8002f48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001388:	2340      	movs	r3, #64	; 0x40
 800138a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800138c:	2301      	movs	r3, #1
 800138e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001390:	2300      	movs	r3, #0
 8001392:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001394:	2300      	movs	r3, #0
 8001396:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001398:	f107 031c 	add.w	r3, r7, #28
 800139c:	4619      	mov	r1, r3
 800139e:	4823      	ldr	r0, [pc, #140]	; (800142c <MX_GPIO_Init+0x214>)
 80013a0:	f001 fdd2 	bl	8002f48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80013a4:	2380      	movs	r3, #128	; 0x80
 80013a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013a8:	2300      	movs	r3, #0
 80013aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ac:	2300      	movs	r3, #0
 80013ae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80013b0:	f107 031c 	add.w	r3, r7, #28
 80013b4:	4619      	mov	r1, r3
 80013b6:	481d      	ldr	r0, [pc, #116]	; (800142c <MX_GPIO_Init+0x214>)
 80013b8:	f001 fdc6 	bl	8002f48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80013bc:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80013c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c2:	2302      	movs	r3, #2
 80013c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c6:	2300      	movs	r3, #0
 80013c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ca:	2303      	movs	r3, #3
 80013cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80013ce:	230a      	movs	r3, #10
 80013d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d2:	f107 031c 	add.w	r3, r7, #28
 80013d6:	4619      	mov	r1, r3
 80013d8:	4816      	ldr	r0, [pc, #88]	; (8001434 <MX_GPIO_Init+0x21c>)
 80013da:	f001 fdb5 	bl	8002f48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80013de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013e4:	2300      	movs	r3, #0
 80013e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e8:	2300      	movs	r3, #0
 80013ea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80013ec:	f107 031c 	add.w	r3, r7, #28
 80013f0:	4619      	mov	r1, r3
 80013f2:	4810      	ldr	r0, [pc, #64]	; (8001434 <MX_GPIO_Init+0x21c>)
 80013f4:	f001 fda8 	bl	8002f48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80013f8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80013fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013fe:	2302      	movs	r3, #2
 8001400:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001402:	2300      	movs	r3, #0
 8001404:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001406:	2303      	movs	r3, #3
 8001408:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800140a:	230b      	movs	r3, #11
 800140c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800140e:	f107 031c 	add.w	r3, r7, #28
 8001412:	4619      	mov	r1, r3
 8001414:	4805      	ldr	r0, [pc, #20]	; (800142c <MX_GPIO_Init+0x214>)
 8001416:	f001 fd97 	bl	8002f48 <HAL_GPIO_Init>

}
 800141a:	bf00      	nop
 800141c:	3730      	adds	r7, #48	; 0x30
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	40023800 	.word	0x40023800
 8001428:	40020400 	.word	0x40020400
 800142c:	40021800 	.word	0x40021800
 8001430:	40020800 	.word	0x40020800
 8001434:	40020000 	.word	0x40020000

08001438 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b0c0      	sub	sp, #256	; 0x100
 800143c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800143e:	f000 fbb7 	bl	8001bb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001442:	f000 f837 	bl	80014b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001446:	f7ff fee7 	bl	8001218 <MX_GPIO_Init>
  MX_DMA_Init();
 800144a:	f7ff feaf 	bl	80011ac <MX_DMA_Init>
  MX_TIM3_Init();
 800144e:	f000 f9f7 	bl	8001840 <MX_TIM3_Init>
  MX_USART3_UART_Init();
 8001452:	f000 fb09 	bl	8001a68 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8001456:	f7ff fddf 	bl	8001018 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  printf("DMA Start\r\n");
 800145a:	4811      	ldr	r0, [pc, #68]	; (80014a0 <main+0x68>)
 800145c:	f005 fb3c 	bl	8006ad8 <puts>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001460:	2100      	movs	r1, #0
 8001462:	4810      	ldr	r0, [pc, #64]	; (80014a4 <main+0x6c>)
 8001464:	f002 fcc6 	bl	8003df4 <HAL_TIM_PWM_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)pwm_adc, sizeof(pwm_adc));
 8001468:	22c8      	movs	r2, #200	; 0xc8
 800146a:	490f      	ldr	r1, [pc, #60]	; (80014a8 <main+0x70>)
 800146c:	480f      	ldr	r0, [pc, #60]	; (80014ac <main+0x74>)
 800146e:	f000 fc79 	bl	8001d64 <HAL_ADC_Start_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  char buffer[256] = {0,};
 8001472:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001476:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800147a:	2200      	movs	r2, #0
 800147c:	601a      	str	r2, [r3, #0]
 800147e:	3304      	adds	r3, #4
 8001480:	22fc      	movs	r2, #252	; 0xfc
 8001482:	2100      	movs	r1, #0
 8001484:	4618      	mov	r0, r3
 8001486:	f004 fc1f 	bl	8005cc8 <memset>
  while (1)
  {

//	  sprint	f(buffer, "data : %d", pwm_adc[0]);
	  printf("%d\r\n", pwm_adc[0]);
 800148a:	4b07      	ldr	r3, [pc, #28]	; (80014a8 <main+0x70>)
 800148c:	881b      	ldrh	r3, [r3, #0]
 800148e:	4619      	mov	r1, r3
 8001490:	4807      	ldr	r0, [pc, #28]	; (80014b0 <main+0x78>)
 8001492:	f005 fa9b 	bl	80069cc <iprintf>
//	  for(uint16_t i = 0; i < sizeof(pwm_adc); i++)
//	  {
//		  printf("%d\r\n", pwm_adc[i]);
//	  }

	  HAL_Delay(100);
 8001496:	2064      	movs	r0, #100	; 0x64
 8001498:	f000 fbfc 	bl	8001c94 <HAL_Delay>
	  printf("%d\r\n", pwm_adc[0]);
 800149c:	e7f5      	b.n	800148a <main+0x52>
 800149e:	bf00      	nop
 80014a0:	0800a6f0 	.word	0x0800a6f0
 80014a4:	20000370 	.word	0x20000370
 80014a8:	200002a4 	.word	0x200002a4
 80014ac:	200001fc 	.word	0x200001fc
 80014b0:	0800a6fc 	.word	0x0800a6fc

080014b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b094      	sub	sp, #80	; 0x50
 80014b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014ba:	f107 0320 	add.w	r3, r7, #32
 80014be:	2230      	movs	r2, #48	; 0x30
 80014c0:	2100      	movs	r1, #0
 80014c2:	4618      	mov	r0, r3
 80014c4:	f004 fc00 	bl	8005cc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014c8:	f107 030c 	add.w	r3, r7, #12
 80014cc:	2200      	movs	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]
 80014d0:	605a      	str	r2, [r3, #4]
 80014d2:	609a      	str	r2, [r3, #8]
 80014d4:	60da      	str	r2, [r3, #12]
 80014d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014d8:	2300      	movs	r3, #0
 80014da:	60bb      	str	r3, [r7, #8]
 80014dc:	4b2b      	ldr	r3, [pc, #172]	; (800158c <SystemClock_Config+0xd8>)
 80014de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e0:	4a2a      	ldr	r2, [pc, #168]	; (800158c <SystemClock_Config+0xd8>)
 80014e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014e6:	6413      	str	r3, [r2, #64]	; 0x40
 80014e8:	4b28      	ldr	r3, [pc, #160]	; (800158c <SystemClock_Config+0xd8>)
 80014ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014f0:	60bb      	str	r3, [r7, #8]
 80014f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014f4:	2300      	movs	r3, #0
 80014f6:	607b      	str	r3, [r7, #4]
 80014f8:	4b25      	ldr	r3, [pc, #148]	; (8001590 <SystemClock_Config+0xdc>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a24      	ldr	r2, [pc, #144]	; (8001590 <SystemClock_Config+0xdc>)
 80014fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001502:	6013      	str	r3, [r2, #0]
 8001504:	4b22      	ldr	r3, [pc, #136]	; (8001590 <SystemClock_Config+0xdc>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800150c:	607b      	str	r3, [r7, #4]
 800150e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001510:	2301      	movs	r3, #1
 8001512:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001514:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001518:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800151a:	2302      	movs	r3, #2
 800151c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800151e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001522:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001524:	2304      	movs	r3, #4
 8001526:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001528:	23b4      	movs	r3, #180	; 0xb4
 800152a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800152c:	2302      	movs	r3, #2
 800152e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001530:	2304      	movs	r3, #4
 8001532:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001534:	f107 0320 	add.w	r3, r7, #32
 8001538:	4618      	mov	r0, r3
 800153a:	f001 ff1b 	bl	8003374 <HAL_RCC_OscConfig>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001544:	f000 f840 	bl	80015c8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001548:	f001 fec4 	bl	80032d4 <HAL_PWREx_EnableOverDrive>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8001552:	f000 f839 	bl	80015c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001556:	230f      	movs	r3, #15
 8001558:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800155a:	2302      	movs	r3, #2
 800155c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800155e:	2300      	movs	r3, #0
 8001560:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001562:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001566:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001568:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800156c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800156e:	f107 030c 	add.w	r3, r7, #12
 8001572:	2105      	movs	r1, #5
 8001574:	4618      	mov	r0, r3
 8001576:	f002 f975 	bl	8003864 <HAL_RCC_ClockConfig>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8001580:	f000 f822 	bl	80015c8 <Error_Handler>
  }
}
 8001584:	bf00      	nop
 8001586:	3750      	adds	r7, #80	; 0x50
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	40023800 	.word	0x40023800
 8001590:	40007000 	.word	0x40007000

08001594 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char* p, int len)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b084      	sub	sp, #16
 8001598:	af00      	add	r7, sp, #0
 800159a:	60f8      	str	r0, [r7, #12]
 800159c:	60b9      	str	r1, [r7, #8]
 800159e:	607a      	str	r2, [r7, #4]
	if(HAL_UART_Transmit(&huart3, (uint8_t *)p, len, 10) == HAL_OK) return len;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	b29a      	uxth	r2, r3
 80015a4:	230a      	movs	r3, #10
 80015a6:	68b9      	ldr	r1, [r7, #8]
 80015a8:	4806      	ldr	r0, [pc, #24]	; (80015c4 <_write+0x30>)
 80015aa:	f003 fb9c 	bl	8004ce6 <HAL_UART_Transmit>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d101      	bne.n	80015b8 <_write+0x24>
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	e001      	b.n	80015bc <_write+0x28>
	else return -1;
 80015b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015bc:	4618      	mov	r0, r3
 80015be:	3710      	adds	r7, #16
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	20000418 	.word	0x20000418

080015c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015cc:	b672      	cpsid	i
}
 80015ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015d0:	e7fe      	b.n	80015d0 <Error_Handler+0x8>
	...

080015d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015da:	2300      	movs	r3, #0
 80015dc:	607b      	str	r3, [r7, #4]
 80015de:	4b10      	ldr	r3, [pc, #64]	; (8001620 <HAL_MspInit+0x4c>)
 80015e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015e2:	4a0f      	ldr	r2, [pc, #60]	; (8001620 <HAL_MspInit+0x4c>)
 80015e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015e8:	6453      	str	r3, [r2, #68]	; 0x44
 80015ea:	4b0d      	ldr	r3, [pc, #52]	; (8001620 <HAL_MspInit+0x4c>)
 80015ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015f2:	607b      	str	r3, [r7, #4]
 80015f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015f6:	2300      	movs	r3, #0
 80015f8:	603b      	str	r3, [r7, #0]
 80015fa:	4b09      	ldr	r3, [pc, #36]	; (8001620 <HAL_MspInit+0x4c>)
 80015fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fe:	4a08      	ldr	r2, [pc, #32]	; (8001620 <HAL_MspInit+0x4c>)
 8001600:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001604:	6413      	str	r3, [r2, #64]	; 0x40
 8001606:	4b06      	ldr	r3, [pc, #24]	; (8001620 <HAL_MspInit+0x4c>)
 8001608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800160e:	603b      	str	r3, [r7, #0]
 8001610:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001612:	bf00      	nop
 8001614:	370c      	adds	r7, #12
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop
 8001620:	40023800 	.word	0x40023800

08001624 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001628:	e7fe      	b.n	8001628 <NMI_Handler+0x4>

0800162a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800162a:	b480      	push	{r7}
 800162c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800162e:	e7fe      	b.n	800162e <HardFault_Handler+0x4>

08001630 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001634:	e7fe      	b.n	8001634 <MemManage_Handler+0x4>

08001636 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001636:	b480      	push	{r7}
 8001638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800163a:	e7fe      	b.n	800163a <BusFault_Handler+0x4>

0800163c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001640:	e7fe      	b.n	8001640 <UsageFault_Handler+0x4>

08001642 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001642:	b480      	push	{r7}
 8001644:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001646:	bf00      	nop
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr

08001650 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001654:	bf00      	nop
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr

0800165e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800165e:	b480      	push	{r7}
 8001660:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001662:	bf00      	nop
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr

0800166c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001670:	f000 faf0 	bl	8001c54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001674:	bf00      	nop
 8001676:	bd80      	pop	{r7, pc}

08001678 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch4_up);
 800167c:	4802      	ldr	r0, [pc, #8]	; (8001688 <DMA1_Stream2_IRQHandler+0x10>)
 800167e:	f001 f9f9 	bl	8002a74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001682:	bf00      	nop
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	200003b8 	.word	0x200003b8

0800168c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001690:	4802      	ldr	r0, [pc, #8]	; (800169c <TIM3_IRQHandler+0x10>)
 8001692:	f002 fc77 	bl	8003f84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001696:	bf00      	nop
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	20000370 	.word	0x20000370

080016a0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80016a4:	4802      	ldr	r0, [pc, #8]	; (80016b0 <USART3_IRQHandler+0x10>)
 80016a6:	f003 fbb1 	bl	8004e0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80016aa:	bf00      	nop
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	20000418 	.word	0x20000418

080016b4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80016b8:	4802      	ldr	r0, [pc, #8]	; (80016c4 <DMA2_Stream0_IRQHandler+0x10>)
 80016ba:	f001 f9db 	bl	8002a74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80016be:	bf00      	nop
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	20000244 	.word	0x20000244

080016c8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
	return 1;
 80016cc:	2301      	movs	r3, #1
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr

080016d8 <_kill>:

int _kill(int pid, int sig)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
 80016e0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80016e2:	f004 fac7 	bl	8005c74 <__errno>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2216      	movs	r2, #22
 80016ea:	601a      	str	r2, [r3, #0]
	return -1;
 80016ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	3708      	adds	r7, #8
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}

080016f8 <_exit>:

void _exit (int status)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001700:	f04f 31ff 	mov.w	r1, #4294967295
 8001704:	6878      	ldr	r0, [r7, #4]
 8001706:	f7ff ffe7 	bl	80016d8 <_kill>
	while (1) {}		/* Make sure we hang here */
 800170a:	e7fe      	b.n	800170a <_exit+0x12>

0800170c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b086      	sub	sp, #24
 8001710:	af00      	add	r7, sp, #0
 8001712:	60f8      	str	r0, [r7, #12]
 8001714:	60b9      	str	r1, [r7, #8]
 8001716:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001718:	2300      	movs	r3, #0
 800171a:	617b      	str	r3, [r7, #20]
 800171c:	e00a      	b.n	8001734 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800171e:	f3af 8000 	nop.w
 8001722:	4601      	mov	r1, r0
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	1c5a      	adds	r2, r3, #1
 8001728:	60ba      	str	r2, [r7, #8]
 800172a:	b2ca      	uxtb	r2, r1
 800172c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	3301      	adds	r3, #1
 8001732:	617b      	str	r3, [r7, #20]
 8001734:	697a      	ldr	r2, [r7, #20]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	429a      	cmp	r2, r3
 800173a:	dbf0      	blt.n	800171e <_read+0x12>
	}

return len;
 800173c:	687b      	ldr	r3, [r7, #4]
}
 800173e:	4618      	mov	r0, r3
 8001740:	3718      	adds	r7, #24
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}

08001746 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001746:	b480      	push	{r7}
 8001748:	b083      	sub	sp, #12
 800174a:	af00      	add	r7, sp, #0
 800174c:	6078      	str	r0, [r7, #4]
	return -1;
 800174e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001752:	4618      	mov	r0, r3
 8001754:	370c      	adds	r7, #12
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr

0800175e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800175e:	b480      	push	{r7}
 8001760:	b083      	sub	sp, #12
 8001762:	af00      	add	r7, sp, #0
 8001764:	6078      	str	r0, [r7, #4]
 8001766:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800176e:	605a      	str	r2, [r3, #4]
	return 0;
 8001770:	2300      	movs	r3, #0
}
 8001772:	4618      	mov	r0, r3
 8001774:	370c      	adds	r7, #12
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr

0800177e <_isatty>:

int _isatty(int file)
{
 800177e:	b480      	push	{r7}
 8001780:	b083      	sub	sp, #12
 8001782:	af00      	add	r7, sp, #0
 8001784:	6078      	str	r0, [r7, #4]
	return 1;
 8001786:	2301      	movs	r3, #1
}
 8001788:	4618      	mov	r0, r3
 800178a:	370c      	adds	r7, #12
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr

08001794 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001794:	b480      	push	{r7}
 8001796:	b085      	sub	sp, #20
 8001798:	af00      	add	r7, sp, #0
 800179a:	60f8      	str	r0, [r7, #12]
 800179c:	60b9      	str	r1, [r7, #8]
 800179e:	607a      	str	r2, [r7, #4]
	return 0;
 80017a0:	2300      	movs	r3, #0
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3714      	adds	r7, #20
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
	...

080017b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b086      	sub	sp, #24
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017b8:	4a14      	ldr	r2, [pc, #80]	; (800180c <_sbrk+0x5c>)
 80017ba:	4b15      	ldr	r3, [pc, #84]	; (8001810 <_sbrk+0x60>)
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017c4:	4b13      	ldr	r3, [pc, #76]	; (8001814 <_sbrk+0x64>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d102      	bne.n	80017d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017cc:	4b11      	ldr	r3, [pc, #68]	; (8001814 <_sbrk+0x64>)
 80017ce:	4a12      	ldr	r2, [pc, #72]	; (8001818 <_sbrk+0x68>)
 80017d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017d2:	4b10      	ldr	r3, [pc, #64]	; (8001814 <_sbrk+0x64>)
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	4413      	add	r3, r2
 80017da:	693a      	ldr	r2, [r7, #16]
 80017dc:	429a      	cmp	r2, r3
 80017de:	d207      	bcs.n	80017f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017e0:	f004 fa48 	bl	8005c74 <__errno>
 80017e4:	4603      	mov	r3, r0
 80017e6:	220c      	movs	r2, #12
 80017e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017ea:	f04f 33ff 	mov.w	r3, #4294967295
 80017ee:	e009      	b.n	8001804 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017f0:	4b08      	ldr	r3, [pc, #32]	; (8001814 <_sbrk+0x64>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017f6:	4b07      	ldr	r3, [pc, #28]	; (8001814 <_sbrk+0x64>)
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4413      	add	r3, r2
 80017fe:	4a05      	ldr	r2, [pc, #20]	; (8001814 <_sbrk+0x64>)
 8001800:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001802:	68fb      	ldr	r3, [r7, #12]
}
 8001804:	4618      	mov	r0, r3
 8001806:	3718      	adds	r7, #24
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	20030000 	.word	0x20030000
 8001810:	00000400 	.word	0x00000400
 8001814:	2000036c 	.word	0x2000036c
 8001818:	20000470 	.word	0x20000470

0800181c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001820:	4b06      	ldr	r3, [pc, #24]	; (800183c <SystemInit+0x20>)
 8001822:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001826:	4a05      	ldr	r2, [pc, #20]	; (800183c <SystemInit+0x20>)
 8001828:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800182c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001830:	bf00      	nop
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	e000ed00 	.word	0xe000ed00

08001840 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
DMA_HandleTypeDef hdma_tim3_ch4_up;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b08e      	sub	sp, #56	; 0x38
 8001844:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001846:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800184a:	2200      	movs	r2, #0
 800184c:	601a      	str	r2, [r3, #0]
 800184e:	605a      	str	r2, [r3, #4]
 8001850:	609a      	str	r2, [r3, #8]
 8001852:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001854:	f107 0320 	add.w	r3, r7, #32
 8001858:	2200      	movs	r2, #0
 800185a:	601a      	str	r2, [r3, #0]
 800185c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800185e:	1d3b      	adds	r3, r7, #4
 8001860:	2200      	movs	r2, #0
 8001862:	601a      	str	r2, [r3, #0]
 8001864:	605a      	str	r2, [r3, #4]
 8001866:	609a      	str	r2, [r3, #8]
 8001868:	60da      	str	r2, [r3, #12]
 800186a:	611a      	str	r2, [r3, #16]
 800186c:	615a      	str	r2, [r3, #20]
 800186e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001870:	4b2d      	ldr	r3, [pc, #180]	; (8001928 <MX_TIM3_Init+0xe8>)
 8001872:	4a2e      	ldr	r2, [pc, #184]	; (800192c <MX_TIM3_Init+0xec>)
 8001874:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 90-1;
 8001876:	4b2c      	ldr	r3, [pc, #176]	; (8001928 <MX_TIM3_Init+0xe8>)
 8001878:	2259      	movs	r2, #89	; 0x59
 800187a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800187c:	4b2a      	ldr	r3, [pc, #168]	; (8001928 <MX_TIM3_Init+0xe8>)
 800187e:	2200      	movs	r2, #0
 8001880:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 8001882:	4b29      	ldr	r3, [pc, #164]	; (8001928 <MX_TIM3_Init+0xe8>)
 8001884:	f242 720f 	movw	r2, #9999	; 0x270f
 8001888:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800188a:	4b27      	ldr	r3, [pc, #156]	; (8001928 <MX_TIM3_Init+0xe8>)
 800188c:	2200      	movs	r2, #0
 800188e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001890:	4b25      	ldr	r3, [pc, #148]	; (8001928 <MX_TIM3_Init+0xe8>)
 8001892:	2200      	movs	r2, #0
 8001894:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001896:	4824      	ldr	r0, [pc, #144]	; (8001928 <MX_TIM3_Init+0xe8>)
 8001898:	f002 fa04 	bl	8003ca4 <HAL_TIM_Base_Init>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80018a2:	f7ff fe91 	bl	80015c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018aa:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80018ac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018b0:	4619      	mov	r1, r3
 80018b2:	481d      	ldr	r0, [pc, #116]	; (8001928 <MX_TIM3_Init+0xe8>)
 80018b4:	f002 fd30 	bl	8004318 <HAL_TIM_ConfigClockSource>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80018be:	f7ff fe83 	bl	80015c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80018c2:	4819      	ldr	r0, [pc, #100]	; (8001928 <MX_TIM3_Init+0xe8>)
 80018c4:	f002 fa3d 	bl	8003d42 <HAL_TIM_PWM_Init>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d001      	beq.n	80018d2 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80018ce:	f7ff fe7b 	bl	80015c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018d2:	2300      	movs	r3, #0
 80018d4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018d6:	2300      	movs	r3, #0
 80018d8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80018da:	f107 0320 	add.w	r3, r7, #32
 80018de:	4619      	mov	r1, r3
 80018e0:	4811      	ldr	r0, [pc, #68]	; (8001928 <MX_TIM3_Init+0xe8>)
 80018e2:	f003 f923 	bl	8004b2c <HAL_TIMEx_MasterConfigSynchronization>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d001      	beq.n	80018f0 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80018ec:	f7ff fe6c 	bl	80015c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018f0:	2360      	movs	r3, #96	; 0x60
 80018f2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 300;
 80018f4:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80018f8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018fa:	2300      	movs	r3, #0
 80018fc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018fe:	2300      	movs	r3, #0
 8001900:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001902:	1d3b      	adds	r3, r7, #4
 8001904:	2200      	movs	r2, #0
 8001906:	4619      	mov	r1, r3
 8001908:	4807      	ldr	r0, [pc, #28]	; (8001928 <MX_TIM3_Init+0xe8>)
 800190a:	f002 fc43 	bl	8004194 <HAL_TIM_PWM_ConfigChannel>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d001      	beq.n	8001918 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001914:	f7ff fe58 	bl	80015c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001918:	4803      	ldr	r0, [pc, #12]	; (8001928 <MX_TIM3_Init+0xe8>)
 800191a:	f000 f86b 	bl	80019f4 <HAL_TIM_MspPostInit>

}
 800191e:	bf00      	nop
 8001920:	3738      	adds	r7, #56	; 0x38
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	20000370 	.word	0x20000370
 800192c:	40000400 	.word	0x40000400

08001930 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b084      	sub	sp, #16
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a29      	ldr	r2, [pc, #164]	; (80019e4 <HAL_TIM_Base_MspInit+0xb4>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d14c      	bne.n	80019dc <HAL_TIM_Base_MspInit+0xac>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001942:	2300      	movs	r3, #0
 8001944:	60fb      	str	r3, [r7, #12]
 8001946:	4b28      	ldr	r3, [pc, #160]	; (80019e8 <HAL_TIM_Base_MspInit+0xb8>)
 8001948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194a:	4a27      	ldr	r2, [pc, #156]	; (80019e8 <HAL_TIM_Base_MspInit+0xb8>)
 800194c:	f043 0302 	orr.w	r3, r3, #2
 8001950:	6413      	str	r3, [r2, #64]	; 0x40
 8001952:	4b25      	ldr	r3, [pc, #148]	; (80019e8 <HAL_TIM_Base_MspInit+0xb8>)
 8001954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001956:	f003 0302 	and.w	r3, r3, #2
 800195a:	60fb      	str	r3, [r7, #12]
 800195c:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH4_UP Init */
    hdma_tim3_ch4_up.Instance = DMA1_Stream2;
 800195e:	4b23      	ldr	r3, [pc, #140]	; (80019ec <HAL_TIM_Base_MspInit+0xbc>)
 8001960:	4a23      	ldr	r2, [pc, #140]	; (80019f0 <HAL_TIM_Base_MspInit+0xc0>)
 8001962:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch4_up.Init.Channel = DMA_CHANNEL_5;
 8001964:	4b21      	ldr	r3, [pc, #132]	; (80019ec <HAL_TIM_Base_MspInit+0xbc>)
 8001966:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 800196a:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch4_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800196c:	4b1f      	ldr	r3, [pc, #124]	; (80019ec <HAL_TIM_Base_MspInit+0xbc>)
 800196e:	2200      	movs	r2, #0
 8001970:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8001972:	4b1e      	ldr	r3, [pc, #120]	; (80019ec <HAL_TIM_Base_MspInit+0xbc>)
 8001974:	2200      	movs	r2, #0
 8001976:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch4_up.Init.MemInc = DMA_MINC_ENABLE;
 8001978:	4b1c      	ldr	r3, [pc, #112]	; (80019ec <HAL_TIM_Base_MspInit+0xbc>)
 800197a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800197e:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001980:	4b1a      	ldr	r3, [pc, #104]	; (80019ec <HAL_TIM_Base_MspInit+0xbc>)
 8001982:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001986:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch4_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001988:	4b18      	ldr	r3, [pc, #96]	; (80019ec <HAL_TIM_Base_MspInit+0xbc>)
 800198a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800198e:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch4_up.Init.Mode = DMA_CIRCULAR;
 8001990:	4b16      	ldr	r3, [pc, #88]	; (80019ec <HAL_TIM_Base_MspInit+0xbc>)
 8001992:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001996:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch4_up.Init.Priority = DMA_PRIORITY_LOW;
 8001998:	4b14      	ldr	r3, [pc, #80]	; (80019ec <HAL_TIM_Base_MspInit+0xbc>)
 800199a:	2200      	movs	r2, #0
 800199c:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch4_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800199e:	4b13      	ldr	r3, [pc, #76]	; (80019ec <HAL_TIM_Base_MspInit+0xbc>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch4_up) != HAL_OK)
 80019a4:	4811      	ldr	r0, [pc, #68]	; (80019ec <HAL_TIM_Base_MspInit+0xbc>)
 80019a6:	f000 fecd 	bl	8002744 <HAL_DMA_Init>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d001      	beq.n	80019b4 <HAL_TIM_Base_MspInit+0x84>
    {
      Error_Handler();
 80019b0:	f7ff fe0a 	bl	80015c8 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC4],hdma_tim3_ch4_up);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	4a0d      	ldr	r2, [pc, #52]	; (80019ec <HAL_TIM_Base_MspInit+0xbc>)
 80019b8:	631a      	str	r2, [r3, #48]	; 0x30
 80019ba:	4a0c      	ldr	r2, [pc, #48]	; (80019ec <HAL_TIM_Base_MspInit+0xbc>)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim3_ch4_up);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	4a0a      	ldr	r2, [pc, #40]	; (80019ec <HAL_TIM_Base_MspInit+0xbc>)
 80019c4:	621a      	str	r2, [r3, #32]
 80019c6:	4a09      	ldr	r2, [pc, #36]	; (80019ec <HAL_TIM_Base_MspInit+0xbc>)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80019cc:	2200      	movs	r2, #0
 80019ce:	2100      	movs	r1, #0
 80019d0:	201d      	movs	r0, #29
 80019d2:	f000 fe80 	bl	80026d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80019d6:	201d      	movs	r0, #29
 80019d8:	f000 fe99 	bl	800270e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80019dc:	bf00      	nop
 80019de:	3710      	adds	r7, #16
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	40000400 	.word	0x40000400
 80019e8:	40023800 	.word	0x40023800
 80019ec:	200003b8 	.word	0x200003b8
 80019f0:	40026040 	.word	0x40026040

080019f4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b088      	sub	sp, #32
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019fc:	f107 030c 	add.w	r3, r7, #12
 8001a00:	2200      	movs	r2, #0
 8001a02:	601a      	str	r2, [r3, #0]
 8001a04:	605a      	str	r2, [r3, #4]
 8001a06:	609a      	str	r2, [r3, #8]
 8001a08:	60da      	str	r2, [r3, #12]
 8001a0a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a12      	ldr	r2, [pc, #72]	; (8001a5c <HAL_TIM_MspPostInit+0x68>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d11d      	bne.n	8001a52 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a16:	2300      	movs	r3, #0
 8001a18:	60bb      	str	r3, [r7, #8]
 8001a1a:	4b11      	ldr	r3, [pc, #68]	; (8001a60 <HAL_TIM_MspPostInit+0x6c>)
 8001a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1e:	4a10      	ldr	r2, [pc, #64]	; (8001a60 <HAL_TIM_MspPostInit+0x6c>)
 8001a20:	f043 0302 	orr.w	r3, r3, #2
 8001a24:	6313      	str	r3, [r2, #48]	; 0x30
 8001a26:	4b0e      	ldr	r3, [pc, #56]	; (8001a60 <HAL_TIM_MspPostInit+0x6c>)
 8001a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2a:	f003 0302 	and.w	r3, r3, #2
 8001a2e:	60bb      	str	r3, [r7, #8]
 8001a30:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001a32:	2310      	movs	r3, #16
 8001a34:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a36:	2302      	movs	r3, #2
 8001a38:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001a42:	2302      	movs	r3, #2
 8001a44:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a46:	f107 030c 	add.w	r3, r7, #12
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	4805      	ldr	r0, [pc, #20]	; (8001a64 <HAL_TIM_MspPostInit+0x70>)
 8001a4e:	f001 fa7b 	bl	8002f48 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001a52:	bf00      	nop
 8001a54:	3720      	adds	r7, #32
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	40000400 	.word	0x40000400
 8001a60:	40023800 	.word	0x40023800
 8001a64:	40020400 	.word	0x40020400

08001a68 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001a6c:	4b11      	ldr	r3, [pc, #68]	; (8001ab4 <MX_USART3_UART_Init+0x4c>)
 8001a6e:	4a12      	ldr	r2, [pc, #72]	; (8001ab8 <MX_USART3_UART_Init+0x50>)
 8001a70:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001a72:	4b10      	ldr	r3, [pc, #64]	; (8001ab4 <MX_USART3_UART_Init+0x4c>)
 8001a74:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a78:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001a7a:	4b0e      	ldr	r3, [pc, #56]	; (8001ab4 <MX_USART3_UART_Init+0x4c>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001a80:	4b0c      	ldr	r3, [pc, #48]	; (8001ab4 <MX_USART3_UART_Init+0x4c>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001a86:	4b0b      	ldr	r3, [pc, #44]	; (8001ab4 <MX_USART3_UART_Init+0x4c>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001a8c:	4b09      	ldr	r3, [pc, #36]	; (8001ab4 <MX_USART3_UART_Init+0x4c>)
 8001a8e:	220c      	movs	r2, #12
 8001a90:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a92:	4b08      	ldr	r3, [pc, #32]	; (8001ab4 <MX_USART3_UART_Init+0x4c>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a98:	4b06      	ldr	r3, [pc, #24]	; (8001ab4 <MX_USART3_UART_Init+0x4c>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001a9e:	4805      	ldr	r0, [pc, #20]	; (8001ab4 <MX_USART3_UART_Init+0x4c>)
 8001aa0:	f003 f8d4 	bl	8004c4c <HAL_UART_Init>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d001      	beq.n	8001aae <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001aaa:	f7ff fd8d 	bl	80015c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001aae:	bf00      	nop
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	20000418 	.word	0x20000418
 8001ab8:	40004800 	.word	0x40004800

08001abc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b08a      	sub	sp, #40	; 0x28
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac4:	f107 0314 	add.w	r3, r7, #20
 8001ac8:	2200      	movs	r2, #0
 8001aca:	601a      	str	r2, [r3, #0]
 8001acc:	605a      	str	r2, [r3, #4]
 8001ace:	609a      	str	r2, [r3, #8]
 8001ad0:	60da      	str	r2, [r3, #12]
 8001ad2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a1d      	ldr	r2, [pc, #116]	; (8001b50 <HAL_UART_MspInit+0x94>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d134      	bne.n	8001b48 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001ade:	2300      	movs	r3, #0
 8001ae0:	613b      	str	r3, [r7, #16]
 8001ae2:	4b1c      	ldr	r3, [pc, #112]	; (8001b54 <HAL_UART_MspInit+0x98>)
 8001ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae6:	4a1b      	ldr	r2, [pc, #108]	; (8001b54 <HAL_UART_MspInit+0x98>)
 8001ae8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001aec:	6413      	str	r3, [r2, #64]	; 0x40
 8001aee:	4b19      	ldr	r3, [pc, #100]	; (8001b54 <HAL_UART_MspInit+0x98>)
 8001af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001af6:	613b      	str	r3, [r7, #16]
 8001af8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001afa:	2300      	movs	r3, #0
 8001afc:	60fb      	str	r3, [r7, #12]
 8001afe:	4b15      	ldr	r3, [pc, #84]	; (8001b54 <HAL_UART_MspInit+0x98>)
 8001b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b02:	4a14      	ldr	r2, [pc, #80]	; (8001b54 <HAL_UART_MspInit+0x98>)
 8001b04:	f043 0308 	orr.w	r3, r3, #8
 8001b08:	6313      	str	r3, [r2, #48]	; 0x30
 8001b0a:	4b12      	ldr	r3, [pc, #72]	; (8001b54 <HAL_UART_MspInit+0x98>)
 8001b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0e:	f003 0308 	and.w	r3, r3, #8
 8001b12:	60fb      	str	r3, [r7, #12]
 8001b14:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001b16:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b1c:	2302      	movs	r3, #2
 8001b1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b20:	2300      	movs	r3, #0
 8001b22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b24:	2303      	movs	r3, #3
 8001b26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001b28:	2307      	movs	r3, #7
 8001b2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b2c:	f107 0314 	add.w	r3, r7, #20
 8001b30:	4619      	mov	r1, r3
 8001b32:	4809      	ldr	r0, [pc, #36]	; (8001b58 <HAL_UART_MspInit+0x9c>)
 8001b34:	f001 fa08 	bl	8002f48 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001b38:	2200      	movs	r2, #0
 8001b3a:	2100      	movs	r1, #0
 8001b3c:	2027      	movs	r0, #39	; 0x27
 8001b3e:	f000 fdca 	bl	80026d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001b42:	2027      	movs	r0, #39	; 0x27
 8001b44:	f000 fde3 	bl	800270e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001b48:	bf00      	nop
 8001b4a:	3728      	adds	r7, #40	; 0x28
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	40004800 	.word	0x40004800
 8001b54:	40023800 	.word	0x40023800
 8001b58:	40020c00 	.word	0x40020c00

08001b5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001b5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b94 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b60:	480d      	ldr	r0, [pc, #52]	; (8001b98 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b62:	490e      	ldr	r1, [pc, #56]	; (8001b9c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b64:	4a0e      	ldr	r2, [pc, #56]	; (8001ba0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b68:	e002      	b.n	8001b70 <LoopCopyDataInit>

08001b6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b6e:	3304      	adds	r3, #4

08001b70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b74:	d3f9      	bcc.n	8001b6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b76:	4a0b      	ldr	r2, [pc, #44]	; (8001ba4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b78:	4c0b      	ldr	r4, [pc, #44]	; (8001ba8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b7c:	e001      	b.n	8001b82 <LoopFillZerobss>

08001b7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b80:	3204      	adds	r2, #4

08001b82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b84:	d3fb      	bcc.n	8001b7e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b86:	f7ff fe49 	bl	800181c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b8a:	f004 f879 	bl	8005c80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b8e:	f7ff fc53 	bl	8001438 <main>
  bx  lr    
 8001b92:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001b94:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001b98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b9c:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001ba0:	0800abe4 	.word	0x0800abe4
  ldr r2, =_sbss
 8001ba4:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001ba8:	20000470 	.word	0x20000470

08001bac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bac:	e7fe      	b.n	8001bac <ADC_IRQHandler>
	...

08001bb0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001bb4:	4b0e      	ldr	r3, [pc, #56]	; (8001bf0 <HAL_Init+0x40>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a0d      	ldr	r2, [pc, #52]	; (8001bf0 <HAL_Init+0x40>)
 8001bba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bbe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001bc0:	4b0b      	ldr	r3, [pc, #44]	; (8001bf0 <HAL_Init+0x40>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a0a      	ldr	r2, [pc, #40]	; (8001bf0 <HAL_Init+0x40>)
 8001bc6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bcc:	4b08      	ldr	r3, [pc, #32]	; (8001bf0 <HAL_Init+0x40>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a07      	ldr	r2, [pc, #28]	; (8001bf0 <HAL_Init+0x40>)
 8001bd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bd6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bd8:	2003      	movs	r0, #3
 8001bda:	f000 fd71 	bl	80026c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bde:	2000      	movs	r0, #0
 8001be0:	f000 f808 	bl	8001bf4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001be4:	f7ff fcf6 	bl	80015d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001be8:	2300      	movs	r3, #0
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	40023c00 	.word	0x40023c00

08001bf4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bfc:	4b12      	ldr	r3, [pc, #72]	; (8001c48 <HAL_InitTick+0x54>)
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	4b12      	ldr	r3, [pc, #72]	; (8001c4c <HAL_InitTick+0x58>)
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	4619      	mov	r1, r3
 8001c06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c12:	4618      	mov	r0, r3
 8001c14:	f000 fd89 	bl	800272a <HAL_SYSTICK_Config>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e00e      	b.n	8001c40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2b0f      	cmp	r3, #15
 8001c26:	d80a      	bhi.n	8001c3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c28:	2200      	movs	r2, #0
 8001c2a:	6879      	ldr	r1, [r7, #4]
 8001c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c30:	f000 fd51 	bl	80026d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c34:	4a06      	ldr	r2, [pc, #24]	; (8001c50 <HAL_InitTick+0x5c>)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	e000      	b.n	8001c40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	3708      	adds	r7, #8
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	20000000 	.word	0x20000000
 8001c4c:	20000008 	.word	0x20000008
 8001c50:	20000004 	.word	0x20000004

08001c54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c58:	4b06      	ldr	r3, [pc, #24]	; (8001c74 <HAL_IncTick+0x20>)
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	4b06      	ldr	r3, [pc, #24]	; (8001c78 <HAL_IncTick+0x24>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4413      	add	r3, r2
 8001c64:	4a04      	ldr	r2, [pc, #16]	; (8001c78 <HAL_IncTick+0x24>)
 8001c66:	6013      	str	r3, [r2, #0]
}
 8001c68:	bf00      	nop
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop
 8001c74:	20000008 	.word	0x20000008
 8001c78:	2000045c 	.word	0x2000045c

08001c7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c80:	4b03      	ldr	r3, [pc, #12]	; (8001c90 <HAL_GetTick+0x14>)
 8001c82:	681b      	ldr	r3, [r3, #0]
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr
 8001c8e:	bf00      	nop
 8001c90:	2000045c 	.word	0x2000045c

08001c94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b084      	sub	sp, #16
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c9c:	f7ff ffee 	bl	8001c7c <HAL_GetTick>
 8001ca0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cac:	d005      	beq.n	8001cba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cae:	4b0a      	ldr	r3, [pc, #40]	; (8001cd8 <HAL_Delay+0x44>)
 8001cb0:	781b      	ldrb	r3, [r3, #0]
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	4413      	add	r3, r2
 8001cb8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001cba:	bf00      	nop
 8001cbc:	f7ff ffde 	bl	8001c7c <HAL_GetTick>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	68fa      	ldr	r2, [r7, #12]
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d8f7      	bhi.n	8001cbc <HAL_Delay+0x28>
  {
  }
}
 8001ccc:	bf00      	nop
 8001cce:	bf00      	nop
 8001cd0:	3710      	adds	r7, #16
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	20000008 	.word	0x20000008

08001cdc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b084      	sub	sp, #16
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d101      	bne.n	8001cf2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e033      	b.n	8001d5a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d109      	bne.n	8001d0e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	f7ff f9de 	bl	80010bc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2200      	movs	r2, #0
 8001d04:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d12:	f003 0310 	and.w	r3, r3, #16
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d118      	bne.n	8001d4c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001d22:	f023 0302 	bic.w	r3, r3, #2
 8001d26:	f043 0202 	orr.w	r2, r3, #2
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f000 fa78 	bl	8002224 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2200      	movs	r2, #0
 8001d38:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3e:	f023 0303 	bic.w	r3, r3, #3
 8001d42:	f043 0201 	orr.w	r2, r3, #1
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	641a      	str	r2, [r3, #64]	; 0x40
 8001d4a:	e001      	b.n	8001d50 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2200      	movs	r2, #0
 8001d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001d58:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3710      	adds	r7, #16
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
	...

08001d64 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b086      	sub	sp, #24
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	60f8      	str	r0, [r7, #12]
 8001d6c:	60b9      	str	r1, [r7, #8]
 8001d6e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001d70:	2300      	movs	r3, #0
 8001d72:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d101      	bne.n	8001d82 <HAL_ADC_Start_DMA+0x1e>
 8001d7e:	2302      	movs	r3, #2
 8001d80:	e0e9      	b.n	8001f56 <HAL_ADC_Start_DMA+0x1f2>
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	2201      	movs	r2, #1
 8001d86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	f003 0301 	and.w	r3, r3, #1
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d018      	beq.n	8001dca <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	689a      	ldr	r2, [r3, #8]
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f042 0201 	orr.w	r2, r2, #1
 8001da6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001da8:	4b6d      	ldr	r3, [pc, #436]	; (8001f60 <HAL_ADC_Start_DMA+0x1fc>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a6d      	ldr	r2, [pc, #436]	; (8001f64 <HAL_ADC_Start_DMA+0x200>)
 8001dae:	fba2 2303 	umull	r2, r3, r2, r3
 8001db2:	0c9a      	lsrs	r2, r3, #18
 8001db4:	4613      	mov	r3, r2
 8001db6:	005b      	lsls	r3, r3, #1
 8001db8:	4413      	add	r3, r2
 8001dba:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001dbc:	e002      	b.n	8001dc4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	3b01      	subs	r3, #1
 8001dc2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d1f9      	bne.n	8001dbe <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001dd8:	d107      	bne.n	8001dea <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	689a      	ldr	r2, [r3, #8]
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001de8:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	f003 0301 	and.w	r3, r3, #1
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	f040 80a1 	bne.w	8001f3c <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfe:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001e02:	f023 0301 	bic.w	r3, r3, #1
 8001e06:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d007      	beq.n	8001e2c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e20:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001e24:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e30:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e38:	d106      	bne.n	8001e48 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e3e:	f023 0206 	bic.w	r2, r3, #6
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	645a      	str	r2, [r3, #68]	; 0x44
 8001e46:	e002      	b.n	8001e4e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	2200      	movs	r2, #0
 8001e52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e56:	4b44      	ldr	r3, [pc, #272]	; (8001f68 <HAL_ADC_Start_DMA+0x204>)
 8001e58:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e5e:	4a43      	ldr	r2, [pc, #268]	; (8001f6c <HAL_ADC_Start_DMA+0x208>)
 8001e60:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e66:	4a42      	ldr	r2, [pc, #264]	; (8001f70 <HAL_ADC_Start_DMA+0x20c>)
 8001e68:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e6e:	4a41      	ldr	r2, [pc, #260]	; (8001f74 <HAL_ADC_Start_DMA+0x210>)
 8001e70:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001e7a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	685a      	ldr	r2, [r3, #4]
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001e8a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	689a      	ldr	r2, [r3, #8]
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e9a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	334c      	adds	r3, #76	; 0x4c
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	68ba      	ldr	r2, [r7, #8]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	f000 fcf8 	bl	80028a0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f003 031f 	and.w	r3, r3, #31
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d12a      	bne.n	8001f12 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a2d      	ldr	r2, [pc, #180]	; (8001f78 <HAL_ADC_Start_DMA+0x214>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d015      	beq.n	8001ef2 <HAL_ADC_Start_DMA+0x18e>
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a2c      	ldr	r2, [pc, #176]	; (8001f7c <HAL_ADC_Start_DMA+0x218>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d105      	bne.n	8001edc <HAL_ADC_Start_DMA+0x178>
 8001ed0:	4b25      	ldr	r3, [pc, #148]	; (8001f68 <HAL_ADC_Start_DMA+0x204>)
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	f003 031f 	and.w	r3, r3, #31
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d00a      	beq.n	8001ef2 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a27      	ldr	r2, [pc, #156]	; (8001f80 <HAL_ADC_Start_DMA+0x21c>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d136      	bne.n	8001f54 <HAL_ADC_Start_DMA+0x1f0>
 8001ee6:	4b20      	ldr	r3, [pc, #128]	; (8001f68 <HAL_ADC_Start_DMA+0x204>)
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	f003 0310 	and.w	r3, r3, #16
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d130      	bne.n	8001f54 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d129      	bne.n	8001f54 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	689a      	ldr	r2, [r3, #8]
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001f0e:	609a      	str	r2, [r3, #8]
 8001f10:	e020      	b.n	8001f54 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a18      	ldr	r2, [pc, #96]	; (8001f78 <HAL_ADC_Start_DMA+0x214>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d11b      	bne.n	8001f54 <HAL_ADC_Start_DMA+0x1f0>
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d114      	bne.n	8001f54 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	689a      	ldr	r2, [r3, #8]
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001f38:	609a      	str	r2, [r3, #8]
 8001f3a:	e00b      	b.n	8001f54 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f40:	f043 0210 	orr.w	r2, r3, #16
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f4c:	f043 0201 	orr.w	r2, r3, #1
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001f54:	2300      	movs	r3, #0
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3718      	adds	r7, #24
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	20000000 	.word	0x20000000
 8001f64:	431bde83 	.word	0x431bde83
 8001f68:	40012300 	.word	0x40012300
 8001f6c:	0800241d 	.word	0x0800241d
 8001f70:	080024d7 	.word	0x080024d7
 8001f74:	080024f3 	.word	0x080024f3
 8001f78:	40012000 	.word	0x40012000
 8001f7c:	40012100 	.word	0x40012100
 8001f80:	40012200 	.word	0x40012200

08001f84 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001f8c:	bf00      	nop
 8001f8e:	370c      	adds	r7, #12
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr

08001f98 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001fa0:	bf00      	nop
 8001fa2:	370c      	adds	r7, #12
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr

08001fac <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001fb4:	bf00      	nop
 8001fb6:	370c      	adds	r7, #12
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr

08001fc0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b085      	sub	sp, #20
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d101      	bne.n	8001fdc <HAL_ADC_ConfigChannel+0x1c>
 8001fd8:	2302      	movs	r3, #2
 8001fda:	e113      	b.n	8002204 <HAL_ADC_ConfigChannel+0x244>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2201      	movs	r2, #1
 8001fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	2b09      	cmp	r3, #9
 8001fea:	d925      	bls.n	8002038 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	68d9      	ldr	r1, [r3, #12]
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	b29b      	uxth	r3, r3
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	4613      	mov	r3, r2
 8001ffc:	005b      	lsls	r3, r3, #1
 8001ffe:	4413      	add	r3, r2
 8002000:	3b1e      	subs	r3, #30
 8002002:	2207      	movs	r2, #7
 8002004:	fa02 f303 	lsl.w	r3, r2, r3
 8002008:	43da      	mvns	r2, r3
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	400a      	ands	r2, r1
 8002010:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	68d9      	ldr	r1, [r3, #12]
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	689a      	ldr	r2, [r3, #8]
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	b29b      	uxth	r3, r3
 8002022:	4618      	mov	r0, r3
 8002024:	4603      	mov	r3, r0
 8002026:	005b      	lsls	r3, r3, #1
 8002028:	4403      	add	r3, r0
 800202a:	3b1e      	subs	r3, #30
 800202c:	409a      	lsls	r2, r3
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	430a      	orrs	r2, r1
 8002034:	60da      	str	r2, [r3, #12]
 8002036:	e022      	b.n	800207e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	6919      	ldr	r1, [r3, #16]
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	b29b      	uxth	r3, r3
 8002044:	461a      	mov	r2, r3
 8002046:	4613      	mov	r3, r2
 8002048:	005b      	lsls	r3, r3, #1
 800204a:	4413      	add	r3, r2
 800204c:	2207      	movs	r2, #7
 800204e:	fa02 f303 	lsl.w	r3, r2, r3
 8002052:	43da      	mvns	r2, r3
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	400a      	ands	r2, r1
 800205a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	6919      	ldr	r1, [r3, #16]
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	689a      	ldr	r2, [r3, #8]
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	b29b      	uxth	r3, r3
 800206c:	4618      	mov	r0, r3
 800206e:	4603      	mov	r3, r0
 8002070:	005b      	lsls	r3, r3, #1
 8002072:	4403      	add	r3, r0
 8002074:	409a      	lsls	r2, r3
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	430a      	orrs	r2, r1
 800207c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	2b06      	cmp	r3, #6
 8002084:	d824      	bhi.n	80020d0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	685a      	ldr	r2, [r3, #4]
 8002090:	4613      	mov	r3, r2
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	4413      	add	r3, r2
 8002096:	3b05      	subs	r3, #5
 8002098:	221f      	movs	r2, #31
 800209a:	fa02 f303 	lsl.w	r3, r2, r3
 800209e:	43da      	mvns	r2, r3
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	400a      	ands	r2, r1
 80020a6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	b29b      	uxth	r3, r3
 80020b4:	4618      	mov	r0, r3
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	685a      	ldr	r2, [r3, #4]
 80020ba:	4613      	mov	r3, r2
 80020bc:	009b      	lsls	r3, r3, #2
 80020be:	4413      	add	r3, r2
 80020c0:	3b05      	subs	r3, #5
 80020c2:	fa00 f203 	lsl.w	r2, r0, r3
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	430a      	orrs	r2, r1
 80020cc:	635a      	str	r2, [r3, #52]	; 0x34
 80020ce:	e04c      	b.n	800216a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	2b0c      	cmp	r3, #12
 80020d6:	d824      	bhi.n	8002122 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	685a      	ldr	r2, [r3, #4]
 80020e2:	4613      	mov	r3, r2
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	4413      	add	r3, r2
 80020e8:	3b23      	subs	r3, #35	; 0x23
 80020ea:	221f      	movs	r2, #31
 80020ec:	fa02 f303 	lsl.w	r3, r2, r3
 80020f0:	43da      	mvns	r2, r3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	400a      	ands	r2, r1
 80020f8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	b29b      	uxth	r3, r3
 8002106:	4618      	mov	r0, r3
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	685a      	ldr	r2, [r3, #4]
 800210c:	4613      	mov	r3, r2
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	4413      	add	r3, r2
 8002112:	3b23      	subs	r3, #35	; 0x23
 8002114:	fa00 f203 	lsl.w	r2, r0, r3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	430a      	orrs	r2, r1
 800211e:	631a      	str	r2, [r3, #48]	; 0x30
 8002120:	e023      	b.n	800216a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	685a      	ldr	r2, [r3, #4]
 800212c:	4613      	mov	r3, r2
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	4413      	add	r3, r2
 8002132:	3b41      	subs	r3, #65	; 0x41
 8002134:	221f      	movs	r2, #31
 8002136:	fa02 f303 	lsl.w	r3, r2, r3
 800213a:	43da      	mvns	r2, r3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	400a      	ands	r2, r1
 8002142:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	b29b      	uxth	r3, r3
 8002150:	4618      	mov	r0, r3
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	685a      	ldr	r2, [r3, #4]
 8002156:	4613      	mov	r3, r2
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	4413      	add	r3, r2
 800215c:	3b41      	subs	r3, #65	; 0x41
 800215e:	fa00 f203 	lsl.w	r2, r0, r3
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	430a      	orrs	r2, r1
 8002168:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800216a:	4b29      	ldr	r3, [pc, #164]	; (8002210 <HAL_ADC_ConfigChannel+0x250>)
 800216c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a28      	ldr	r2, [pc, #160]	; (8002214 <HAL_ADC_ConfigChannel+0x254>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d10f      	bne.n	8002198 <HAL_ADC_ConfigChannel+0x1d8>
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	2b12      	cmp	r3, #18
 800217e:	d10b      	bne.n	8002198 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a1d      	ldr	r2, [pc, #116]	; (8002214 <HAL_ADC_ConfigChannel+0x254>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d12b      	bne.n	80021fa <HAL_ADC_ConfigChannel+0x23a>
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a1c      	ldr	r2, [pc, #112]	; (8002218 <HAL_ADC_ConfigChannel+0x258>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d003      	beq.n	80021b4 <HAL_ADC_ConfigChannel+0x1f4>
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	2b11      	cmp	r3, #17
 80021b2:	d122      	bne.n	80021fa <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a11      	ldr	r2, [pc, #68]	; (8002218 <HAL_ADC_ConfigChannel+0x258>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d111      	bne.n	80021fa <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80021d6:	4b11      	ldr	r3, [pc, #68]	; (800221c <HAL_ADC_ConfigChannel+0x25c>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a11      	ldr	r2, [pc, #68]	; (8002220 <HAL_ADC_ConfigChannel+0x260>)
 80021dc:	fba2 2303 	umull	r2, r3, r2, r3
 80021e0:	0c9a      	lsrs	r2, r3, #18
 80021e2:	4613      	mov	r3, r2
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	4413      	add	r3, r2
 80021e8:	005b      	lsls	r3, r3, #1
 80021ea:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80021ec:	e002      	b.n	80021f4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	3b01      	subs	r3, #1
 80021f2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d1f9      	bne.n	80021ee <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2200      	movs	r2, #0
 80021fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002202:	2300      	movs	r3, #0
}
 8002204:	4618      	mov	r0, r3
 8002206:	3714      	adds	r7, #20
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr
 8002210:	40012300 	.word	0x40012300
 8002214:	40012000 	.word	0x40012000
 8002218:	10000012 	.word	0x10000012
 800221c:	20000000 	.word	0x20000000
 8002220:	431bde83 	.word	0x431bde83

08002224 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002224:	b480      	push	{r7}
 8002226:	b085      	sub	sp, #20
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800222c:	4b79      	ldr	r3, [pc, #484]	; (8002414 <ADC_Init+0x1f0>)
 800222e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	685a      	ldr	r2, [r3, #4]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	431a      	orrs	r2, r3
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	685a      	ldr	r2, [r3, #4]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002258:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	6859      	ldr	r1, [r3, #4]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	691b      	ldr	r3, [r3, #16]
 8002264:	021a      	lsls	r2, r3, #8
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	430a      	orrs	r2, r1
 800226c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	685a      	ldr	r2, [r3, #4]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800227c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	6859      	ldr	r1, [r3, #4]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	689a      	ldr	r2, [r3, #8]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	430a      	orrs	r2, r1
 800228e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	689a      	ldr	r2, [r3, #8]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800229e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	6899      	ldr	r1, [r3, #8]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	68da      	ldr	r2, [r3, #12]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	430a      	orrs	r2, r1
 80022b0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b6:	4a58      	ldr	r2, [pc, #352]	; (8002418 <ADC_Init+0x1f4>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d022      	beq.n	8002302 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	689a      	ldr	r2, [r3, #8]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80022ca:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	6899      	ldr	r1, [r3, #8]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	430a      	orrs	r2, r1
 80022dc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	689a      	ldr	r2, [r3, #8]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80022ec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	6899      	ldr	r1, [r3, #8]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	430a      	orrs	r2, r1
 80022fe:	609a      	str	r2, [r3, #8]
 8002300:	e00f      	b.n	8002322 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	689a      	ldr	r2, [r3, #8]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002310:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	689a      	ldr	r2, [r3, #8]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002320:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	689a      	ldr	r2, [r3, #8]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f022 0202 	bic.w	r2, r2, #2
 8002330:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	6899      	ldr	r1, [r3, #8]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	7e1b      	ldrb	r3, [r3, #24]
 800233c:	005a      	lsls	r2, r3, #1
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	430a      	orrs	r2, r1
 8002344:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	f893 3020 	ldrb.w	r3, [r3, #32]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d01b      	beq.n	8002388 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	685a      	ldr	r2, [r3, #4]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800235e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	685a      	ldr	r2, [r3, #4]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800236e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	6859      	ldr	r1, [r3, #4]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800237a:	3b01      	subs	r3, #1
 800237c:	035a      	lsls	r2, r3, #13
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	430a      	orrs	r2, r1
 8002384:	605a      	str	r2, [r3, #4]
 8002386:	e007      	b.n	8002398 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	685a      	ldr	r2, [r3, #4]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002396:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80023a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	69db      	ldr	r3, [r3, #28]
 80023b2:	3b01      	subs	r3, #1
 80023b4:	051a      	lsls	r2, r3, #20
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	430a      	orrs	r2, r1
 80023bc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	689a      	ldr	r2, [r3, #8]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80023cc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	6899      	ldr	r1, [r3, #8]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80023da:	025a      	lsls	r2, r3, #9
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	430a      	orrs	r2, r1
 80023e2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	689a      	ldr	r2, [r3, #8]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023f2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	6899      	ldr	r1, [r3, #8]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	695b      	ldr	r3, [r3, #20]
 80023fe:	029a      	lsls	r2, r3, #10
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	430a      	orrs	r2, r1
 8002406:	609a      	str	r2, [r3, #8]
}
 8002408:	bf00      	nop
 800240a:	3714      	adds	r7, #20
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr
 8002414:	40012300 	.word	0x40012300
 8002418:	0f000001 	.word	0x0f000001

0800241c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b084      	sub	sp, #16
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002428:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002432:	2b00      	cmp	r3, #0
 8002434:	d13c      	bne.n	80024b0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800244c:	2b00      	cmp	r3, #0
 800244e:	d12b      	bne.n	80024a8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002454:	2b00      	cmp	r3, #0
 8002456:	d127      	bne.n	80024a8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800245e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002462:	2b00      	cmp	r3, #0
 8002464:	d006      	beq.n	8002474 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002470:	2b00      	cmp	r3, #0
 8002472:	d119      	bne.n	80024a8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	685a      	ldr	r2, [r3, #4]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f022 0220 	bic.w	r2, r2, #32
 8002482:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002488:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002494:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002498:	2b00      	cmp	r3, #0
 800249a:	d105      	bne.n	80024a8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a0:	f043 0201 	orr.w	r2, r3, #1
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80024a8:	68f8      	ldr	r0, [r7, #12]
 80024aa:	f7ff fd6b 	bl	8001f84 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80024ae:	e00e      	b.n	80024ce <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b4:	f003 0310 	and.w	r3, r3, #16
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d003      	beq.n	80024c4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80024bc:	68f8      	ldr	r0, [r7, #12]
 80024be:	f7ff fd75 	bl	8001fac <HAL_ADC_ErrorCallback>
}
 80024c2:	e004      	b.n	80024ce <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	4798      	blx	r3
}
 80024ce:	bf00      	nop
 80024d0:	3710      	adds	r7, #16
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}

080024d6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80024d6:	b580      	push	{r7, lr}
 80024d8:	b084      	sub	sp, #16
 80024da:	af00      	add	r7, sp, #0
 80024dc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024e2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80024e4:	68f8      	ldr	r0, [r7, #12]
 80024e6:	f7ff fd57 	bl	8001f98 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80024ea:	bf00      	nop
 80024ec:	3710      	adds	r7, #16
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}

080024f2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80024f2:	b580      	push	{r7, lr}
 80024f4:	b084      	sub	sp, #16
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024fe:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	2240      	movs	r2, #64	; 0x40
 8002504:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800250a:	f043 0204 	orr.w	r2, r3, #4
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002512:	68f8      	ldr	r0, [r7, #12]
 8002514:	f7ff fd4a 	bl	8001fac <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002518:	bf00      	nop
 800251a:	3710      	adds	r7, #16
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}

08002520 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002520:	b480      	push	{r7}
 8002522:	b085      	sub	sp, #20
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	f003 0307 	and.w	r3, r3, #7
 800252e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002530:	4b0c      	ldr	r3, [pc, #48]	; (8002564 <__NVIC_SetPriorityGrouping+0x44>)
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002536:	68ba      	ldr	r2, [r7, #8]
 8002538:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800253c:	4013      	ands	r3, r2
 800253e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002548:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800254c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002550:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002552:	4a04      	ldr	r2, [pc, #16]	; (8002564 <__NVIC_SetPriorityGrouping+0x44>)
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	60d3      	str	r3, [r2, #12]
}
 8002558:	bf00      	nop
 800255a:	3714      	adds	r7, #20
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr
 8002564:	e000ed00 	.word	0xe000ed00

08002568 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002568:	b480      	push	{r7}
 800256a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800256c:	4b04      	ldr	r3, [pc, #16]	; (8002580 <__NVIC_GetPriorityGrouping+0x18>)
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	0a1b      	lsrs	r3, r3, #8
 8002572:	f003 0307 	and.w	r3, r3, #7
}
 8002576:	4618      	mov	r0, r3
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr
 8002580:	e000ed00 	.word	0xe000ed00

08002584 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	4603      	mov	r3, r0
 800258c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800258e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002592:	2b00      	cmp	r3, #0
 8002594:	db0b      	blt.n	80025ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002596:	79fb      	ldrb	r3, [r7, #7]
 8002598:	f003 021f 	and.w	r2, r3, #31
 800259c:	4907      	ldr	r1, [pc, #28]	; (80025bc <__NVIC_EnableIRQ+0x38>)
 800259e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025a2:	095b      	lsrs	r3, r3, #5
 80025a4:	2001      	movs	r0, #1
 80025a6:	fa00 f202 	lsl.w	r2, r0, r2
 80025aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80025ae:	bf00      	nop
 80025b0:	370c      	adds	r7, #12
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr
 80025ba:	bf00      	nop
 80025bc:	e000e100 	.word	0xe000e100

080025c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b083      	sub	sp, #12
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	4603      	mov	r3, r0
 80025c8:	6039      	str	r1, [r7, #0]
 80025ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	db0a      	blt.n	80025ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	b2da      	uxtb	r2, r3
 80025d8:	490c      	ldr	r1, [pc, #48]	; (800260c <__NVIC_SetPriority+0x4c>)
 80025da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025de:	0112      	lsls	r2, r2, #4
 80025e0:	b2d2      	uxtb	r2, r2
 80025e2:	440b      	add	r3, r1
 80025e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025e8:	e00a      	b.n	8002600 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	b2da      	uxtb	r2, r3
 80025ee:	4908      	ldr	r1, [pc, #32]	; (8002610 <__NVIC_SetPriority+0x50>)
 80025f0:	79fb      	ldrb	r3, [r7, #7]
 80025f2:	f003 030f 	and.w	r3, r3, #15
 80025f6:	3b04      	subs	r3, #4
 80025f8:	0112      	lsls	r2, r2, #4
 80025fa:	b2d2      	uxtb	r2, r2
 80025fc:	440b      	add	r3, r1
 80025fe:	761a      	strb	r2, [r3, #24]
}
 8002600:	bf00      	nop
 8002602:	370c      	adds	r7, #12
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr
 800260c:	e000e100 	.word	0xe000e100
 8002610:	e000ed00 	.word	0xe000ed00

08002614 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002614:	b480      	push	{r7}
 8002616:	b089      	sub	sp, #36	; 0x24
 8002618:	af00      	add	r7, sp, #0
 800261a:	60f8      	str	r0, [r7, #12]
 800261c:	60b9      	str	r1, [r7, #8]
 800261e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	f003 0307 	and.w	r3, r3, #7
 8002626:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002628:	69fb      	ldr	r3, [r7, #28]
 800262a:	f1c3 0307 	rsb	r3, r3, #7
 800262e:	2b04      	cmp	r3, #4
 8002630:	bf28      	it	cs
 8002632:	2304      	movcs	r3, #4
 8002634:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	3304      	adds	r3, #4
 800263a:	2b06      	cmp	r3, #6
 800263c:	d902      	bls.n	8002644 <NVIC_EncodePriority+0x30>
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	3b03      	subs	r3, #3
 8002642:	e000      	b.n	8002646 <NVIC_EncodePriority+0x32>
 8002644:	2300      	movs	r3, #0
 8002646:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002648:	f04f 32ff 	mov.w	r2, #4294967295
 800264c:	69bb      	ldr	r3, [r7, #24]
 800264e:	fa02 f303 	lsl.w	r3, r2, r3
 8002652:	43da      	mvns	r2, r3
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	401a      	ands	r2, r3
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800265c:	f04f 31ff 	mov.w	r1, #4294967295
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	fa01 f303 	lsl.w	r3, r1, r3
 8002666:	43d9      	mvns	r1, r3
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800266c:	4313      	orrs	r3, r2
         );
}
 800266e:	4618      	mov	r0, r3
 8002670:	3724      	adds	r7, #36	; 0x24
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr
	...

0800267c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b082      	sub	sp, #8
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	3b01      	subs	r3, #1
 8002688:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800268c:	d301      	bcc.n	8002692 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800268e:	2301      	movs	r3, #1
 8002690:	e00f      	b.n	80026b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002692:	4a0a      	ldr	r2, [pc, #40]	; (80026bc <SysTick_Config+0x40>)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	3b01      	subs	r3, #1
 8002698:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800269a:	210f      	movs	r1, #15
 800269c:	f04f 30ff 	mov.w	r0, #4294967295
 80026a0:	f7ff ff8e 	bl	80025c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026a4:	4b05      	ldr	r3, [pc, #20]	; (80026bc <SysTick_Config+0x40>)
 80026a6:	2200      	movs	r2, #0
 80026a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026aa:	4b04      	ldr	r3, [pc, #16]	; (80026bc <SysTick_Config+0x40>)
 80026ac:	2207      	movs	r2, #7
 80026ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026b0:	2300      	movs	r3, #0
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3708      	adds	r7, #8
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	e000e010 	.word	0xe000e010

080026c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b082      	sub	sp, #8
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	f7ff ff29 	bl	8002520 <__NVIC_SetPriorityGrouping>
}
 80026ce:	bf00      	nop
 80026d0:	3708      	adds	r7, #8
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}

080026d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026d6:	b580      	push	{r7, lr}
 80026d8:	b086      	sub	sp, #24
 80026da:	af00      	add	r7, sp, #0
 80026dc:	4603      	mov	r3, r0
 80026de:	60b9      	str	r1, [r7, #8]
 80026e0:	607a      	str	r2, [r7, #4]
 80026e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026e4:	2300      	movs	r3, #0
 80026e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026e8:	f7ff ff3e 	bl	8002568 <__NVIC_GetPriorityGrouping>
 80026ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026ee:	687a      	ldr	r2, [r7, #4]
 80026f0:	68b9      	ldr	r1, [r7, #8]
 80026f2:	6978      	ldr	r0, [r7, #20]
 80026f4:	f7ff ff8e 	bl	8002614 <NVIC_EncodePriority>
 80026f8:	4602      	mov	r2, r0
 80026fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026fe:	4611      	mov	r1, r2
 8002700:	4618      	mov	r0, r3
 8002702:	f7ff ff5d 	bl	80025c0 <__NVIC_SetPriority>
}
 8002706:	bf00      	nop
 8002708:	3718      	adds	r7, #24
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}

0800270e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800270e:	b580      	push	{r7, lr}
 8002710:	b082      	sub	sp, #8
 8002712:	af00      	add	r7, sp, #0
 8002714:	4603      	mov	r3, r0
 8002716:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002718:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800271c:	4618      	mov	r0, r3
 800271e:	f7ff ff31 	bl	8002584 <__NVIC_EnableIRQ>
}
 8002722:	bf00      	nop
 8002724:	3708      	adds	r7, #8
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}

0800272a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800272a:	b580      	push	{r7, lr}
 800272c:	b082      	sub	sp, #8
 800272e:	af00      	add	r7, sp, #0
 8002730:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f7ff ffa2 	bl	800267c <SysTick_Config>
 8002738:	4603      	mov	r3, r0
}
 800273a:	4618      	mov	r0, r3
 800273c:	3708      	adds	r7, #8
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
	...

08002744 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b086      	sub	sp, #24
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800274c:	2300      	movs	r3, #0
 800274e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002750:	f7ff fa94 	bl	8001c7c <HAL_GetTick>
 8002754:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d101      	bne.n	8002760 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	e099      	b.n	8002894 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2202      	movs	r2, #2
 8002764:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2200      	movs	r2, #0
 800276c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f022 0201 	bic.w	r2, r2, #1
 800277e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002780:	e00f      	b.n	80027a2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002782:	f7ff fa7b 	bl	8001c7c <HAL_GetTick>
 8002786:	4602      	mov	r2, r0
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	1ad3      	subs	r3, r2, r3
 800278c:	2b05      	cmp	r3, #5
 800278e:	d908      	bls.n	80027a2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2220      	movs	r2, #32
 8002794:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2203      	movs	r2, #3
 800279a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800279e:	2303      	movs	r3, #3
 80027a0:	e078      	b.n	8002894 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 0301 	and.w	r3, r3, #1
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d1e8      	bne.n	8002782 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80027b8:	697a      	ldr	r2, [r7, #20]
 80027ba:	4b38      	ldr	r3, [pc, #224]	; (800289c <HAL_DMA_Init+0x158>)
 80027bc:	4013      	ands	r3, r2
 80027be:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	685a      	ldr	r2, [r3, #4]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80027ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	691b      	ldr	r3, [r3, #16]
 80027d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	699b      	ldr	r3, [r3, #24]
 80027e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6a1b      	ldr	r3, [r3, #32]
 80027ec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80027ee:	697a      	ldr	r2, [r7, #20]
 80027f0:	4313      	orrs	r3, r2
 80027f2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f8:	2b04      	cmp	r3, #4
 80027fa:	d107      	bne.n	800280c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002804:	4313      	orrs	r3, r2
 8002806:	697a      	ldr	r2, [r7, #20]
 8002808:	4313      	orrs	r3, r2
 800280a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	697a      	ldr	r2, [r7, #20]
 8002812:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	695b      	ldr	r3, [r3, #20]
 800281a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	f023 0307 	bic.w	r3, r3, #7
 8002822:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002828:	697a      	ldr	r2, [r7, #20]
 800282a:	4313      	orrs	r3, r2
 800282c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002832:	2b04      	cmp	r3, #4
 8002834:	d117      	bne.n	8002866 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800283a:	697a      	ldr	r2, [r7, #20]
 800283c:	4313      	orrs	r3, r2
 800283e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002844:	2b00      	cmp	r3, #0
 8002846:	d00e      	beq.n	8002866 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002848:	6878      	ldr	r0, [r7, #4]
 800284a:	f000 fb01 	bl	8002e50 <DMA_CheckFifoParam>
 800284e:	4603      	mov	r3, r0
 8002850:	2b00      	cmp	r3, #0
 8002852:	d008      	beq.n	8002866 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2240      	movs	r2, #64	; 0x40
 8002858:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2201      	movs	r2, #1
 800285e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002862:	2301      	movs	r3, #1
 8002864:	e016      	b.n	8002894 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	697a      	ldr	r2, [r7, #20]
 800286c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f000 fab8 	bl	8002de4 <DMA_CalcBaseAndBitshift>
 8002874:	4603      	mov	r3, r0
 8002876:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800287c:	223f      	movs	r2, #63	; 0x3f
 800287e:	409a      	lsls	r2, r3
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2200      	movs	r2, #0
 8002888:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2201      	movs	r2, #1
 800288e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002892:	2300      	movs	r3, #0
}
 8002894:	4618      	mov	r0, r3
 8002896:	3718      	adds	r7, #24
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}
 800289c:	f010803f 	.word	0xf010803f

080028a0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b086      	sub	sp, #24
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	60f8      	str	r0, [r7, #12]
 80028a8:	60b9      	str	r1, [r7, #8]
 80028aa:	607a      	str	r2, [r7, #4]
 80028ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028ae:	2300      	movs	r3, #0
 80028b0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028b6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d101      	bne.n	80028c6 <HAL_DMA_Start_IT+0x26>
 80028c2:	2302      	movs	r3, #2
 80028c4:	e040      	b.n	8002948 <HAL_DMA_Start_IT+0xa8>
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2201      	movs	r2, #1
 80028ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d12f      	bne.n	800293a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2202      	movs	r2, #2
 80028de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2200      	movs	r2, #0
 80028e6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	687a      	ldr	r2, [r7, #4]
 80028ec:	68b9      	ldr	r1, [r7, #8]
 80028ee:	68f8      	ldr	r0, [r7, #12]
 80028f0:	f000 fa4a 	bl	8002d88 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028f8:	223f      	movs	r2, #63	; 0x3f
 80028fa:	409a      	lsls	r2, r3
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f042 0216 	orr.w	r2, r2, #22
 800290e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002914:	2b00      	cmp	r3, #0
 8002916:	d007      	beq.n	8002928 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f042 0208 	orr.w	r2, r2, #8
 8002926:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f042 0201 	orr.w	r2, r2, #1
 8002936:	601a      	str	r2, [r3, #0]
 8002938:	e005      	b.n	8002946 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2200      	movs	r2, #0
 800293e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002942:	2302      	movs	r3, #2
 8002944:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002946:	7dfb      	ldrb	r3, [r7, #23]
}
 8002948:	4618      	mov	r0, r3
 800294a:	3718      	adds	r7, #24
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}

08002950 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b084      	sub	sp, #16
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800295c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800295e:	f7ff f98d 	bl	8001c7c <HAL_GetTick>
 8002962:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800296a:	b2db      	uxtb	r3, r3
 800296c:	2b02      	cmp	r3, #2
 800296e:	d008      	beq.n	8002982 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2280      	movs	r2, #128	; 0x80
 8002974:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2200      	movs	r2, #0
 800297a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e052      	b.n	8002a28 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f022 0216 	bic.w	r2, r2, #22
 8002990:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	695a      	ldr	r2, [r3, #20]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80029a0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d103      	bne.n	80029b2 <HAL_DMA_Abort+0x62>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d007      	beq.n	80029c2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f022 0208 	bic.w	r2, r2, #8
 80029c0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f022 0201 	bic.w	r2, r2, #1
 80029d0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029d2:	e013      	b.n	80029fc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80029d4:	f7ff f952 	bl	8001c7c <HAL_GetTick>
 80029d8:	4602      	mov	r2, r0
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	2b05      	cmp	r3, #5
 80029e0:	d90c      	bls.n	80029fc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2220      	movs	r2, #32
 80029e6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2203      	movs	r2, #3
 80029ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2200      	movs	r2, #0
 80029f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80029f8:	2303      	movs	r3, #3
 80029fa:	e015      	b.n	8002a28 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 0301 	and.w	r3, r3, #1
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d1e4      	bne.n	80029d4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a0e:	223f      	movs	r2, #63	; 0x3f
 8002a10:	409a      	lsls	r2, r3
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2201      	movs	r2, #1
 8002a1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2200      	movs	r2, #0
 8002a22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002a26:	2300      	movs	r3, #0
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	3710      	adds	r7, #16
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}

08002a30 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b083      	sub	sp, #12
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	2b02      	cmp	r3, #2
 8002a42:	d004      	beq.n	8002a4e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2280      	movs	r2, #128	; 0x80
 8002a48:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e00c      	b.n	8002a68 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2205      	movs	r2, #5
 8002a52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f022 0201 	bic.w	r2, r2, #1
 8002a64:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002a66:	2300      	movs	r3, #0
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	370c      	adds	r7, #12
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr

08002a74 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b086      	sub	sp, #24
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002a80:	4b8e      	ldr	r3, [pc, #568]	; (8002cbc <HAL_DMA_IRQHandler+0x248>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a8e      	ldr	r2, [pc, #568]	; (8002cc0 <HAL_DMA_IRQHandler+0x24c>)
 8002a86:	fba2 2303 	umull	r2, r3, r2, r3
 8002a8a:	0a9b      	lsrs	r3, r3, #10
 8002a8c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a92:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a9e:	2208      	movs	r2, #8
 8002aa0:	409a      	lsls	r2, r3
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d01a      	beq.n	8002ae0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 0304 	and.w	r3, r3, #4
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d013      	beq.n	8002ae0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f022 0204 	bic.w	r2, r2, #4
 8002ac6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002acc:	2208      	movs	r2, #8
 8002ace:	409a      	lsls	r2, r3
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ad8:	f043 0201 	orr.w	r2, r3, #1
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	409a      	lsls	r2, r3
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	4013      	ands	r3, r2
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d012      	beq.n	8002b16 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	695b      	ldr	r3, [r3, #20]
 8002af6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d00b      	beq.n	8002b16 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b02:	2201      	movs	r2, #1
 8002b04:	409a      	lsls	r2, r3
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b0e:	f043 0202 	orr.w	r2, r3, #2
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b1a:	2204      	movs	r2, #4
 8002b1c:	409a      	lsls	r2, r3
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	4013      	ands	r3, r2
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d012      	beq.n	8002b4c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 0302 	and.w	r3, r3, #2
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d00b      	beq.n	8002b4c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b38:	2204      	movs	r2, #4
 8002b3a:	409a      	lsls	r2, r3
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b44:	f043 0204 	orr.w	r2, r3, #4
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b50:	2210      	movs	r2, #16
 8002b52:	409a      	lsls	r2, r3
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	4013      	ands	r3, r2
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d043      	beq.n	8002be4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 0308 	and.w	r3, r3, #8
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d03c      	beq.n	8002be4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b6e:	2210      	movs	r2, #16
 8002b70:	409a      	lsls	r2, r3
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d018      	beq.n	8002bb6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d108      	bne.n	8002ba4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d024      	beq.n	8002be4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	4798      	blx	r3
 8002ba2:	e01f      	b.n	8002be4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d01b      	beq.n	8002be4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	4798      	blx	r3
 8002bb4:	e016      	b.n	8002be4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d107      	bne.n	8002bd4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f022 0208 	bic.w	r2, r2, #8
 8002bd2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d003      	beq.n	8002be4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002be8:	2220      	movs	r2, #32
 8002bea:	409a      	lsls	r2, r3
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	4013      	ands	r3, r2
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	f000 808f 	beq.w	8002d14 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 0310 	and.w	r3, r3, #16
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	f000 8087 	beq.w	8002d14 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c0a:	2220      	movs	r2, #32
 8002c0c:	409a      	lsls	r2, r3
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	2b05      	cmp	r3, #5
 8002c1c:	d136      	bne.n	8002c8c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f022 0216 	bic.w	r2, r2, #22
 8002c2c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	695a      	ldr	r2, [r3, #20]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c3c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d103      	bne.n	8002c4e <HAL_DMA_IRQHandler+0x1da>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d007      	beq.n	8002c5e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f022 0208 	bic.w	r2, r2, #8
 8002c5c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c62:	223f      	movs	r2, #63	; 0x3f
 8002c64:	409a      	lsls	r2, r3
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d07e      	beq.n	8002d80 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	4798      	blx	r3
        }
        return;
 8002c8a:	e079      	b.n	8002d80 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d01d      	beq.n	8002cd6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d10d      	bne.n	8002cc4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d031      	beq.n	8002d14 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	4798      	blx	r3
 8002cb8:	e02c      	b.n	8002d14 <HAL_DMA_IRQHandler+0x2a0>
 8002cba:	bf00      	nop
 8002cbc:	20000000 	.word	0x20000000
 8002cc0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d023      	beq.n	8002d14 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cd0:	6878      	ldr	r0, [r7, #4]
 8002cd2:	4798      	blx	r3
 8002cd4:	e01e      	b.n	8002d14 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d10f      	bne.n	8002d04 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f022 0210 	bic.w	r2, r2, #16
 8002cf2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d003      	beq.n	8002d14 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d10:	6878      	ldr	r0, [r7, #4]
 8002d12:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d032      	beq.n	8002d82 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d20:	f003 0301 	and.w	r3, r3, #1
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d022      	beq.n	8002d6e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2205      	movs	r2, #5
 8002d2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f022 0201 	bic.w	r2, r2, #1
 8002d3e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	3301      	adds	r3, #1
 8002d44:	60bb      	str	r3, [r7, #8]
 8002d46:	697a      	ldr	r2, [r7, #20]
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d307      	bcc.n	8002d5c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 0301 	and.w	r3, r3, #1
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d1f2      	bne.n	8002d40 <HAL_DMA_IRQHandler+0x2cc>
 8002d5a:	e000      	b.n	8002d5e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002d5c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2201      	movs	r2, #1
 8002d62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d005      	beq.n	8002d82 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	4798      	blx	r3
 8002d7e:	e000      	b.n	8002d82 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002d80:	bf00      	nop
    }
  }
}
 8002d82:	3718      	adds	r7, #24
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}

08002d88 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b085      	sub	sp, #20
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	60f8      	str	r0, [r7, #12]
 8002d90:	60b9      	str	r1, [r7, #8]
 8002d92:	607a      	str	r2, [r7, #4]
 8002d94:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002da4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	683a      	ldr	r2, [r7, #0]
 8002dac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	2b40      	cmp	r3, #64	; 0x40
 8002db4:	d108      	bne.n	8002dc8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	687a      	ldr	r2, [r7, #4]
 8002dbc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	68ba      	ldr	r2, [r7, #8]
 8002dc4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002dc6:	e007      	b.n	8002dd8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	68ba      	ldr	r2, [r7, #8]
 8002dce:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	687a      	ldr	r2, [r7, #4]
 8002dd6:	60da      	str	r2, [r3, #12]
}
 8002dd8:	bf00      	nop
 8002dda:	3714      	adds	r7, #20
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr

08002de4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b085      	sub	sp, #20
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	3b10      	subs	r3, #16
 8002df4:	4a14      	ldr	r2, [pc, #80]	; (8002e48 <DMA_CalcBaseAndBitshift+0x64>)
 8002df6:	fba2 2303 	umull	r2, r3, r2, r3
 8002dfa:	091b      	lsrs	r3, r3, #4
 8002dfc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002dfe:	4a13      	ldr	r2, [pc, #76]	; (8002e4c <DMA_CalcBaseAndBitshift+0x68>)
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	4413      	add	r3, r2
 8002e04:	781b      	ldrb	r3, [r3, #0]
 8002e06:	461a      	mov	r2, r3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2b03      	cmp	r3, #3
 8002e10:	d909      	bls.n	8002e26 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002e1a:	f023 0303 	bic.w	r3, r3, #3
 8002e1e:	1d1a      	adds	r2, r3, #4
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	659a      	str	r2, [r3, #88]	; 0x58
 8002e24:	e007      	b.n	8002e36 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002e2e:	f023 0303 	bic.w	r3, r3, #3
 8002e32:	687a      	ldr	r2, [r7, #4]
 8002e34:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3714      	adds	r7, #20
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr
 8002e46:	bf00      	nop
 8002e48:	aaaaaaab 	.word	0xaaaaaaab
 8002e4c:	0800a71c 	.word	0x0800a71c

08002e50 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b085      	sub	sp, #20
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e60:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	699b      	ldr	r3, [r3, #24]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d11f      	bne.n	8002eaa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	2b03      	cmp	r3, #3
 8002e6e:	d856      	bhi.n	8002f1e <DMA_CheckFifoParam+0xce>
 8002e70:	a201      	add	r2, pc, #4	; (adr r2, 8002e78 <DMA_CheckFifoParam+0x28>)
 8002e72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e76:	bf00      	nop
 8002e78:	08002e89 	.word	0x08002e89
 8002e7c:	08002e9b 	.word	0x08002e9b
 8002e80:	08002e89 	.word	0x08002e89
 8002e84:	08002f1f 	.word	0x08002f1f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d046      	beq.n	8002f22 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e98:	e043      	b.n	8002f22 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e9e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002ea2:	d140      	bne.n	8002f26 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ea8:	e03d      	b.n	8002f26 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	699b      	ldr	r3, [r3, #24]
 8002eae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002eb2:	d121      	bne.n	8002ef8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	2b03      	cmp	r3, #3
 8002eb8:	d837      	bhi.n	8002f2a <DMA_CheckFifoParam+0xda>
 8002eba:	a201      	add	r2, pc, #4	; (adr r2, 8002ec0 <DMA_CheckFifoParam+0x70>)
 8002ebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ec0:	08002ed1 	.word	0x08002ed1
 8002ec4:	08002ed7 	.word	0x08002ed7
 8002ec8:	08002ed1 	.word	0x08002ed1
 8002ecc:	08002ee9 	.word	0x08002ee9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	73fb      	strb	r3, [r7, #15]
      break;
 8002ed4:	e030      	b.n	8002f38 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eda:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d025      	beq.n	8002f2e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ee6:	e022      	b.n	8002f2e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eec:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002ef0:	d11f      	bne.n	8002f32 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002ef6:	e01c      	b.n	8002f32 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	2b02      	cmp	r3, #2
 8002efc:	d903      	bls.n	8002f06 <DMA_CheckFifoParam+0xb6>
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	2b03      	cmp	r3, #3
 8002f02:	d003      	beq.n	8002f0c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002f04:	e018      	b.n	8002f38 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	73fb      	strb	r3, [r7, #15]
      break;
 8002f0a:	e015      	b.n	8002f38 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d00e      	beq.n	8002f36 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	73fb      	strb	r3, [r7, #15]
      break;
 8002f1c:	e00b      	b.n	8002f36 <DMA_CheckFifoParam+0xe6>
      break;
 8002f1e:	bf00      	nop
 8002f20:	e00a      	b.n	8002f38 <DMA_CheckFifoParam+0xe8>
      break;
 8002f22:	bf00      	nop
 8002f24:	e008      	b.n	8002f38 <DMA_CheckFifoParam+0xe8>
      break;
 8002f26:	bf00      	nop
 8002f28:	e006      	b.n	8002f38 <DMA_CheckFifoParam+0xe8>
      break;
 8002f2a:	bf00      	nop
 8002f2c:	e004      	b.n	8002f38 <DMA_CheckFifoParam+0xe8>
      break;
 8002f2e:	bf00      	nop
 8002f30:	e002      	b.n	8002f38 <DMA_CheckFifoParam+0xe8>
      break;   
 8002f32:	bf00      	nop
 8002f34:	e000      	b.n	8002f38 <DMA_CheckFifoParam+0xe8>
      break;
 8002f36:	bf00      	nop
    }
  } 
  
  return status; 
 8002f38:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3714      	adds	r7, #20
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr
 8002f46:	bf00      	nop

08002f48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b089      	sub	sp, #36	; 0x24
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
 8002f50:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f52:	2300      	movs	r3, #0
 8002f54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f56:	2300      	movs	r3, #0
 8002f58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f5e:	2300      	movs	r3, #0
 8002f60:	61fb      	str	r3, [r7, #28]
 8002f62:	e177      	b.n	8003254 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f64:	2201      	movs	r2, #1
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	697a      	ldr	r2, [r7, #20]
 8002f74:	4013      	ands	r3, r2
 8002f76:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f78:	693a      	ldr	r2, [r7, #16]
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	f040 8166 	bne.w	800324e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	f003 0303 	and.w	r3, r3, #3
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d005      	beq.n	8002f9a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f96:	2b02      	cmp	r3, #2
 8002f98:	d130      	bne.n	8002ffc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002fa0:	69fb      	ldr	r3, [r7, #28]
 8002fa2:	005b      	lsls	r3, r3, #1
 8002fa4:	2203      	movs	r2, #3
 8002fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8002faa:	43db      	mvns	r3, r3
 8002fac:	69ba      	ldr	r2, [r7, #24]
 8002fae:	4013      	ands	r3, r2
 8002fb0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	68da      	ldr	r2, [r3, #12]
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	005b      	lsls	r3, r3, #1
 8002fba:	fa02 f303 	lsl.w	r3, r2, r3
 8002fbe:	69ba      	ldr	r2, [r7, #24]
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	69ba      	ldr	r2, [r7, #24]
 8002fc8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	69fb      	ldr	r3, [r7, #28]
 8002fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd8:	43db      	mvns	r3, r3
 8002fda:	69ba      	ldr	r2, [r7, #24]
 8002fdc:	4013      	ands	r3, r2
 8002fde:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	091b      	lsrs	r3, r3, #4
 8002fe6:	f003 0201 	and.w	r2, r3, #1
 8002fea:	69fb      	ldr	r3, [r7, #28]
 8002fec:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff0:	69ba      	ldr	r2, [r7, #24]
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	69ba      	ldr	r2, [r7, #24]
 8002ffa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	f003 0303 	and.w	r3, r3, #3
 8003004:	2b03      	cmp	r3, #3
 8003006:	d017      	beq.n	8003038 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800300e:	69fb      	ldr	r3, [r7, #28]
 8003010:	005b      	lsls	r3, r3, #1
 8003012:	2203      	movs	r2, #3
 8003014:	fa02 f303 	lsl.w	r3, r2, r3
 8003018:	43db      	mvns	r3, r3
 800301a:	69ba      	ldr	r2, [r7, #24]
 800301c:	4013      	ands	r3, r2
 800301e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	689a      	ldr	r2, [r3, #8]
 8003024:	69fb      	ldr	r3, [r7, #28]
 8003026:	005b      	lsls	r3, r3, #1
 8003028:	fa02 f303 	lsl.w	r3, r2, r3
 800302c:	69ba      	ldr	r2, [r7, #24]
 800302e:	4313      	orrs	r3, r2
 8003030:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	69ba      	ldr	r2, [r7, #24]
 8003036:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	f003 0303 	and.w	r3, r3, #3
 8003040:	2b02      	cmp	r3, #2
 8003042:	d123      	bne.n	800308c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003044:	69fb      	ldr	r3, [r7, #28]
 8003046:	08da      	lsrs	r2, r3, #3
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	3208      	adds	r2, #8
 800304c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003050:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003052:	69fb      	ldr	r3, [r7, #28]
 8003054:	f003 0307 	and.w	r3, r3, #7
 8003058:	009b      	lsls	r3, r3, #2
 800305a:	220f      	movs	r2, #15
 800305c:	fa02 f303 	lsl.w	r3, r2, r3
 8003060:	43db      	mvns	r3, r3
 8003062:	69ba      	ldr	r2, [r7, #24]
 8003064:	4013      	ands	r3, r2
 8003066:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	691a      	ldr	r2, [r3, #16]
 800306c:	69fb      	ldr	r3, [r7, #28]
 800306e:	f003 0307 	and.w	r3, r3, #7
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	fa02 f303 	lsl.w	r3, r2, r3
 8003078:	69ba      	ldr	r2, [r7, #24]
 800307a:	4313      	orrs	r3, r2
 800307c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800307e:	69fb      	ldr	r3, [r7, #28]
 8003080:	08da      	lsrs	r2, r3, #3
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	3208      	adds	r2, #8
 8003086:	69b9      	ldr	r1, [r7, #24]
 8003088:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003092:	69fb      	ldr	r3, [r7, #28]
 8003094:	005b      	lsls	r3, r3, #1
 8003096:	2203      	movs	r2, #3
 8003098:	fa02 f303 	lsl.w	r3, r2, r3
 800309c:	43db      	mvns	r3, r3
 800309e:	69ba      	ldr	r2, [r7, #24]
 80030a0:	4013      	ands	r3, r2
 80030a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	f003 0203 	and.w	r2, r3, #3
 80030ac:	69fb      	ldr	r3, [r7, #28]
 80030ae:	005b      	lsls	r3, r3, #1
 80030b0:	fa02 f303 	lsl.w	r3, r2, r3
 80030b4:	69ba      	ldr	r2, [r7, #24]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	69ba      	ldr	r2, [r7, #24]
 80030be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	f000 80c0 	beq.w	800324e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030ce:	2300      	movs	r3, #0
 80030d0:	60fb      	str	r3, [r7, #12]
 80030d2:	4b66      	ldr	r3, [pc, #408]	; (800326c <HAL_GPIO_Init+0x324>)
 80030d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030d6:	4a65      	ldr	r2, [pc, #404]	; (800326c <HAL_GPIO_Init+0x324>)
 80030d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030dc:	6453      	str	r3, [r2, #68]	; 0x44
 80030de:	4b63      	ldr	r3, [pc, #396]	; (800326c <HAL_GPIO_Init+0x324>)
 80030e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030e6:	60fb      	str	r3, [r7, #12]
 80030e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80030ea:	4a61      	ldr	r2, [pc, #388]	; (8003270 <HAL_GPIO_Init+0x328>)
 80030ec:	69fb      	ldr	r3, [r7, #28]
 80030ee:	089b      	lsrs	r3, r3, #2
 80030f0:	3302      	adds	r3, #2
 80030f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80030f8:	69fb      	ldr	r3, [r7, #28]
 80030fa:	f003 0303 	and.w	r3, r3, #3
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	220f      	movs	r2, #15
 8003102:	fa02 f303 	lsl.w	r3, r2, r3
 8003106:	43db      	mvns	r3, r3
 8003108:	69ba      	ldr	r2, [r7, #24]
 800310a:	4013      	ands	r3, r2
 800310c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	4a58      	ldr	r2, [pc, #352]	; (8003274 <HAL_GPIO_Init+0x32c>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d037      	beq.n	8003186 <HAL_GPIO_Init+0x23e>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4a57      	ldr	r2, [pc, #348]	; (8003278 <HAL_GPIO_Init+0x330>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d031      	beq.n	8003182 <HAL_GPIO_Init+0x23a>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4a56      	ldr	r2, [pc, #344]	; (800327c <HAL_GPIO_Init+0x334>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d02b      	beq.n	800317e <HAL_GPIO_Init+0x236>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	4a55      	ldr	r2, [pc, #340]	; (8003280 <HAL_GPIO_Init+0x338>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d025      	beq.n	800317a <HAL_GPIO_Init+0x232>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4a54      	ldr	r2, [pc, #336]	; (8003284 <HAL_GPIO_Init+0x33c>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d01f      	beq.n	8003176 <HAL_GPIO_Init+0x22e>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	4a53      	ldr	r2, [pc, #332]	; (8003288 <HAL_GPIO_Init+0x340>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d019      	beq.n	8003172 <HAL_GPIO_Init+0x22a>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	4a52      	ldr	r2, [pc, #328]	; (800328c <HAL_GPIO_Init+0x344>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d013      	beq.n	800316e <HAL_GPIO_Init+0x226>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	4a51      	ldr	r2, [pc, #324]	; (8003290 <HAL_GPIO_Init+0x348>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d00d      	beq.n	800316a <HAL_GPIO_Init+0x222>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	4a50      	ldr	r2, [pc, #320]	; (8003294 <HAL_GPIO_Init+0x34c>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d007      	beq.n	8003166 <HAL_GPIO_Init+0x21e>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	4a4f      	ldr	r2, [pc, #316]	; (8003298 <HAL_GPIO_Init+0x350>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d101      	bne.n	8003162 <HAL_GPIO_Init+0x21a>
 800315e:	2309      	movs	r3, #9
 8003160:	e012      	b.n	8003188 <HAL_GPIO_Init+0x240>
 8003162:	230a      	movs	r3, #10
 8003164:	e010      	b.n	8003188 <HAL_GPIO_Init+0x240>
 8003166:	2308      	movs	r3, #8
 8003168:	e00e      	b.n	8003188 <HAL_GPIO_Init+0x240>
 800316a:	2307      	movs	r3, #7
 800316c:	e00c      	b.n	8003188 <HAL_GPIO_Init+0x240>
 800316e:	2306      	movs	r3, #6
 8003170:	e00a      	b.n	8003188 <HAL_GPIO_Init+0x240>
 8003172:	2305      	movs	r3, #5
 8003174:	e008      	b.n	8003188 <HAL_GPIO_Init+0x240>
 8003176:	2304      	movs	r3, #4
 8003178:	e006      	b.n	8003188 <HAL_GPIO_Init+0x240>
 800317a:	2303      	movs	r3, #3
 800317c:	e004      	b.n	8003188 <HAL_GPIO_Init+0x240>
 800317e:	2302      	movs	r3, #2
 8003180:	e002      	b.n	8003188 <HAL_GPIO_Init+0x240>
 8003182:	2301      	movs	r3, #1
 8003184:	e000      	b.n	8003188 <HAL_GPIO_Init+0x240>
 8003186:	2300      	movs	r3, #0
 8003188:	69fa      	ldr	r2, [r7, #28]
 800318a:	f002 0203 	and.w	r2, r2, #3
 800318e:	0092      	lsls	r2, r2, #2
 8003190:	4093      	lsls	r3, r2
 8003192:	69ba      	ldr	r2, [r7, #24]
 8003194:	4313      	orrs	r3, r2
 8003196:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003198:	4935      	ldr	r1, [pc, #212]	; (8003270 <HAL_GPIO_Init+0x328>)
 800319a:	69fb      	ldr	r3, [r7, #28]
 800319c:	089b      	lsrs	r3, r3, #2
 800319e:	3302      	adds	r3, #2
 80031a0:	69ba      	ldr	r2, [r7, #24]
 80031a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80031a6:	4b3d      	ldr	r3, [pc, #244]	; (800329c <HAL_GPIO_Init+0x354>)
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	43db      	mvns	r3, r3
 80031b0:	69ba      	ldr	r2, [r7, #24]
 80031b2:	4013      	ands	r3, r2
 80031b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d003      	beq.n	80031ca <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80031c2:	69ba      	ldr	r2, [r7, #24]
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	4313      	orrs	r3, r2
 80031c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80031ca:	4a34      	ldr	r2, [pc, #208]	; (800329c <HAL_GPIO_Init+0x354>)
 80031cc:	69bb      	ldr	r3, [r7, #24]
 80031ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80031d0:	4b32      	ldr	r3, [pc, #200]	; (800329c <HAL_GPIO_Init+0x354>)
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	43db      	mvns	r3, r3
 80031da:	69ba      	ldr	r2, [r7, #24]
 80031dc:	4013      	ands	r3, r2
 80031de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d003      	beq.n	80031f4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80031ec:	69ba      	ldr	r2, [r7, #24]
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	4313      	orrs	r3, r2
 80031f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80031f4:	4a29      	ldr	r2, [pc, #164]	; (800329c <HAL_GPIO_Init+0x354>)
 80031f6:	69bb      	ldr	r3, [r7, #24]
 80031f8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80031fa:	4b28      	ldr	r3, [pc, #160]	; (800329c <HAL_GPIO_Init+0x354>)
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	43db      	mvns	r3, r3
 8003204:	69ba      	ldr	r2, [r7, #24]
 8003206:	4013      	ands	r3, r2
 8003208:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003212:	2b00      	cmp	r3, #0
 8003214:	d003      	beq.n	800321e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003216:	69ba      	ldr	r2, [r7, #24]
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	4313      	orrs	r3, r2
 800321c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800321e:	4a1f      	ldr	r2, [pc, #124]	; (800329c <HAL_GPIO_Init+0x354>)
 8003220:	69bb      	ldr	r3, [r7, #24]
 8003222:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003224:	4b1d      	ldr	r3, [pc, #116]	; (800329c <HAL_GPIO_Init+0x354>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	43db      	mvns	r3, r3
 800322e:	69ba      	ldr	r2, [r7, #24]
 8003230:	4013      	ands	r3, r2
 8003232:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800323c:	2b00      	cmp	r3, #0
 800323e:	d003      	beq.n	8003248 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003240:	69ba      	ldr	r2, [r7, #24]
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	4313      	orrs	r3, r2
 8003246:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003248:	4a14      	ldr	r2, [pc, #80]	; (800329c <HAL_GPIO_Init+0x354>)
 800324a:	69bb      	ldr	r3, [r7, #24]
 800324c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800324e:	69fb      	ldr	r3, [r7, #28]
 8003250:	3301      	adds	r3, #1
 8003252:	61fb      	str	r3, [r7, #28]
 8003254:	69fb      	ldr	r3, [r7, #28]
 8003256:	2b0f      	cmp	r3, #15
 8003258:	f67f ae84 	bls.w	8002f64 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800325c:	bf00      	nop
 800325e:	bf00      	nop
 8003260:	3724      	adds	r7, #36	; 0x24
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr
 800326a:	bf00      	nop
 800326c:	40023800 	.word	0x40023800
 8003270:	40013800 	.word	0x40013800
 8003274:	40020000 	.word	0x40020000
 8003278:	40020400 	.word	0x40020400
 800327c:	40020800 	.word	0x40020800
 8003280:	40020c00 	.word	0x40020c00
 8003284:	40021000 	.word	0x40021000
 8003288:	40021400 	.word	0x40021400
 800328c:	40021800 	.word	0x40021800
 8003290:	40021c00 	.word	0x40021c00
 8003294:	40022000 	.word	0x40022000
 8003298:	40022400 	.word	0x40022400
 800329c:	40013c00 	.word	0x40013c00

080032a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b083      	sub	sp, #12
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
 80032a8:	460b      	mov	r3, r1
 80032aa:	807b      	strh	r3, [r7, #2]
 80032ac:	4613      	mov	r3, r2
 80032ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80032b0:	787b      	ldrb	r3, [r7, #1]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d003      	beq.n	80032be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032b6:	887a      	ldrh	r2, [r7, #2]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80032bc:	e003      	b.n	80032c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80032be:	887b      	ldrh	r3, [r7, #2]
 80032c0:	041a      	lsls	r2, r3, #16
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	619a      	str	r2, [r3, #24]
}
 80032c6:	bf00      	nop
 80032c8:	370c      	adds	r7, #12
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr
	...

080032d4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b082      	sub	sp, #8
 80032d8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80032da:	2300      	movs	r3, #0
 80032dc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80032de:	2300      	movs	r3, #0
 80032e0:	603b      	str	r3, [r7, #0]
 80032e2:	4b20      	ldr	r3, [pc, #128]	; (8003364 <HAL_PWREx_EnableOverDrive+0x90>)
 80032e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e6:	4a1f      	ldr	r2, [pc, #124]	; (8003364 <HAL_PWREx_EnableOverDrive+0x90>)
 80032e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032ec:	6413      	str	r3, [r2, #64]	; 0x40
 80032ee:	4b1d      	ldr	r3, [pc, #116]	; (8003364 <HAL_PWREx_EnableOverDrive+0x90>)
 80032f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032f6:	603b      	str	r3, [r7, #0]
 80032f8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80032fa:	4b1b      	ldr	r3, [pc, #108]	; (8003368 <HAL_PWREx_EnableOverDrive+0x94>)
 80032fc:	2201      	movs	r2, #1
 80032fe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003300:	f7fe fcbc 	bl	8001c7c <HAL_GetTick>
 8003304:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003306:	e009      	b.n	800331c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003308:	f7fe fcb8 	bl	8001c7c <HAL_GetTick>
 800330c:	4602      	mov	r2, r0
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	1ad3      	subs	r3, r2, r3
 8003312:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003316:	d901      	bls.n	800331c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003318:	2303      	movs	r3, #3
 800331a:	e01f      	b.n	800335c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800331c:	4b13      	ldr	r3, [pc, #76]	; (800336c <HAL_PWREx_EnableOverDrive+0x98>)
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003324:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003328:	d1ee      	bne.n	8003308 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800332a:	4b11      	ldr	r3, [pc, #68]	; (8003370 <HAL_PWREx_EnableOverDrive+0x9c>)
 800332c:	2201      	movs	r2, #1
 800332e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003330:	f7fe fca4 	bl	8001c7c <HAL_GetTick>
 8003334:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003336:	e009      	b.n	800334c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003338:	f7fe fca0 	bl	8001c7c <HAL_GetTick>
 800333c:	4602      	mov	r2, r0
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	1ad3      	subs	r3, r2, r3
 8003342:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003346:	d901      	bls.n	800334c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003348:	2303      	movs	r3, #3
 800334a:	e007      	b.n	800335c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800334c:	4b07      	ldr	r3, [pc, #28]	; (800336c <HAL_PWREx_EnableOverDrive+0x98>)
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003354:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003358:	d1ee      	bne.n	8003338 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800335a:	2300      	movs	r3, #0
}
 800335c:	4618      	mov	r0, r3
 800335e:	3708      	adds	r7, #8
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}
 8003364:	40023800 	.word	0x40023800
 8003368:	420e0040 	.word	0x420e0040
 800336c:	40007000 	.word	0x40007000
 8003370:	420e0044 	.word	0x420e0044

08003374 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b086      	sub	sp, #24
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d101      	bne.n	8003386 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e267      	b.n	8003856 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 0301 	and.w	r3, r3, #1
 800338e:	2b00      	cmp	r3, #0
 8003390:	d075      	beq.n	800347e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003392:	4b88      	ldr	r3, [pc, #544]	; (80035b4 <HAL_RCC_OscConfig+0x240>)
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	f003 030c 	and.w	r3, r3, #12
 800339a:	2b04      	cmp	r3, #4
 800339c:	d00c      	beq.n	80033b8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800339e:	4b85      	ldr	r3, [pc, #532]	; (80035b4 <HAL_RCC_OscConfig+0x240>)
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80033a6:	2b08      	cmp	r3, #8
 80033a8:	d112      	bne.n	80033d0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033aa:	4b82      	ldr	r3, [pc, #520]	; (80035b4 <HAL_RCC_OscConfig+0x240>)
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033b6:	d10b      	bne.n	80033d0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033b8:	4b7e      	ldr	r3, [pc, #504]	; (80035b4 <HAL_RCC_OscConfig+0x240>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d05b      	beq.n	800347c <HAL_RCC_OscConfig+0x108>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d157      	bne.n	800347c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e242      	b.n	8003856 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033d8:	d106      	bne.n	80033e8 <HAL_RCC_OscConfig+0x74>
 80033da:	4b76      	ldr	r3, [pc, #472]	; (80035b4 <HAL_RCC_OscConfig+0x240>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a75      	ldr	r2, [pc, #468]	; (80035b4 <HAL_RCC_OscConfig+0x240>)
 80033e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033e4:	6013      	str	r3, [r2, #0]
 80033e6:	e01d      	b.n	8003424 <HAL_RCC_OscConfig+0xb0>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033f0:	d10c      	bne.n	800340c <HAL_RCC_OscConfig+0x98>
 80033f2:	4b70      	ldr	r3, [pc, #448]	; (80035b4 <HAL_RCC_OscConfig+0x240>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a6f      	ldr	r2, [pc, #444]	; (80035b4 <HAL_RCC_OscConfig+0x240>)
 80033f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033fc:	6013      	str	r3, [r2, #0]
 80033fe:	4b6d      	ldr	r3, [pc, #436]	; (80035b4 <HAL_RCC_OscConfig+0x240>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a6c      	ldr	r2, [pc, #432]	; (80035b4 <HAL_RCC_OscConfig+0x240>)
 8003404:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003408:	6013      	str	r3, [r2, #0]
 800340a:	e00b      	b.n	8003424 <HAL_RCC_OscConfig+0xb0>
 800340c:	4b69      	ldr	r3, [pc, #420]	; (80035b4 <HAL_RCC_OscConfig+0x240>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a68      	ldr	r2, [pc, #416]	; (80035b4 <HAL_RCC_OscConfig+0x240>)
 8003412:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003416:	6013      	str	r3, [r2, #0]
 8003418:	4b66      	ldr	r3, [pc, #408]	; (80035b4 <HAL_RCC_OscConfig+0x240>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a65      	ldr	r2, [pc, #404]	; (80035b4 <HAL_RCC_OscConfig+0x240>)
 800341e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003422:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d013      	beq.n	8003454 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800342c:	f7fe fc26 	bl	8001c7c <HAL_GetTick>
 8003430:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003432:	e008      	b.n	8003446 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003434:	f7fe fc22 	bl	8001c7c <HAL_GetTick>
 8003438:	4602      	mov	r2, r0
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	2b64      	cmp	r3, #100	; 0x64
 8003440:	d901      	bls.n	8003446 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003442:	2303      	movs	r3, #3
 8003444:	e207      	b.n	8003856 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003446:	4b5b      	ldr	r3, [pc, #364]	; (80035b4 <HAL_RCC_OscConfig+0x240>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800344e:	2b00      	cmp	r3, #0
 8003450:	d0f0      	beq.n	8003434 <HAL_RCC_OscConfig+0xc0>
 8003452:	e014      	b.n	800347e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003454:	f7fe fc12 	bl	8001c7c <HAL_GetTick>
 8003458:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800345a:	e008      	b.n	800346e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800345c:	f7fe fc0e 	bl	8001c7c <HAL_GetTick>
 8003460:	4602      	mov	r2, r0
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	2b64      	cmp	r3, #100	; 0x64
 8003468:	d901      	bls.n	800346e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800346a:	2303      	movs	r3, #3
 800346c:	e1f3      	b.n	8003856 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800346e:	4b51      	ldr	r3, [pc, #324]	; (80035b4 <HAL_RCC_OscConfig+0x240>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d1f0      	bne.n	800345c <HAL_RCC_OscConfig+0xe8>
 800347a:	e000      	b.n	800347e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800347c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 0302 	and.w	r3, r3, #2
 8003486:	2b00      	cmp	r3, #0
 8003488:	d063      	beq.n	8003552 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800348a:	4b4a      	ldr	r3, [pc, #296]	; (80035b4 <HAL_RCC_OscConfig+0x240>)
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	f003 030c 	and.w	r3, r3, #12
 8003492:	2b00      	cmp	r3, #0
 8003494:	d00b      	beq.n	80034ae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003496:	4b47      	ldr	r3, [pc, #284]	; (80035b4 <HAL_RCC_OscConfig+0x240>)
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800349e:	2b08      	cmp	r3, #8
 80034a0:	d11c      	bne.n	80034dc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034a2:	4b44      	ldr	r3, [pc, #272]	; (80035b4 <HAL_RCC_OscConfig+0x240>)
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d116      	bne.n	80034dc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034ae:	4b41      	ldr	r3, [pc, #260]	; (80035b4 <HAL_RCC_OscConfig+0x240>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 0302 	and.w	r3, r3, #2
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d005      	beq.n	80034c6 <HAL_RCC_OscConfig+0x152>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	68db      	ldr	r3, [r3, #12]
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d001      	beq.n	80034c6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	e1c7      	b.n	8003856 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034c6:	4b3b      	ldr	r3, [pc, #236]	; (80035b4 <HAL_RCC_OscConfig+0x240>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	691b      	ldr	r3, [r3, #16]
 80034d2:	00db      	lsls	r3, r3, #3
 80034d4:	4937      	ldr	r1, [pc, #220]	; (80035b4 <HAL_RCC_OscConfig+0x240>)
 80034d6:	4313      	orrs	r3, r2
 80034d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034da:	e03a      	b.n	8003552 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d020      	beq.n	8003526 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034e4:	4b34      	ldr	r3, [pc, #208]	; (80035b8 <HAL_RCC_OscConfig+0x244>)
 80034e6:	2201      	movs	r2, #1
 80034e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034ea:	f7fe fbc7 	bl	8001c7c <HAL_GetTick>
 80034ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034f0:	e008      	b.n	8003504 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034f2:	f7fe fbc3 	bl	8001c7c <HAL_GetTick>
 80034f6:	4602      	mov	r2, r0
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	1ad3      	subs	r3, r2, r3
 80034fc:	2b02      	cmp	r3, #2
 80034fe:	d901      	bls.n	8003504 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003500:	2303      	movs	r3, #3
 8003502:	e1a8      	b.n	8003856 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003504:	4b2b      	ldr	r3, [pc, #172]	; (80035b4 <HAL_RCC_OscConfig+0x240>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 0302 	and.w	r3, r3, #2
 800350c:	2b00      	cmp	r3, #0
 800350e:	d0f0      	beq.n	80034f2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003510:	4b28      	ldr	r3, [pc, #160]	; (80035b4 <HAL_RCC_OscConfig+0x240>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	691b      	ldr	r3, [r3, #16]
 800351c:	00db      	lsls	r3, r3, #3
 800351e:	4925      	ldr	r1, [pc, #148]	; (80035b4 <HAL_RCC_OscConfig+0x240>)
 8003520:	4313      	orrs	r3, r2
 8003522:	600b      	str	r3, [r1, #0]
 8003524:	e015      	b.n	8003552 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003526:	4b24      	ldr	r3, [pc, #144]	; (80035b8 <HAL_RCC_OscConfig+0x244>)
 8003528:	2200      	movs	r2, #0
 800352a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800352c:	f7fe fba6 	bl	8001c7c <HAL_GetTick>
 8003530:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003532:	e008      	b.n	8003546 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003534:	f7fe fba2 	bl	8001c7c <HAL_GetTick>
 8003538:	4602      	mov	r2, r0
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	2b02      	cmp	r3, #2
 8003540:	d901      	bls.n	8003546 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003542:	2303      	movs	r3, #3
 8003544:	e187      	b.n	8003856 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003546:	4b1b      	ldr	r3, [pc, #108]	; (80035b4 <HAL_RCC_OscConfig+0x240>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 0302 	and.w	r3, r3, #2
 800354e:	2b00      	cmp	r3, #0
 8003550:	d1f0      	bne.n	8003534 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 0308 	and.w	r3, r3, #8
 800355a:	2b00      	cmp	r3, #0
 800355c:	d036      	beq.n	80035cc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	695b      	ldr	r3, [r3, #20]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d016      	beq.n	8003594 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003566:	4b15      	ldr	r3, [pc, #84]	; (80035bc <HAL_RCC_OscConfig+0x248>)
 8003568:	2201      	movs	r2, #1
 800356a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800356c:	f7fe fb86 	bl	8001c7c <HAL_GetTick>
 8003570:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003572:	e008      	b.n	8003586 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003574:	f7fe fb82 	bl	8001c7c <HAL_GetTick>
 8003578:	4602      	mov	r2, r0
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	2b02      	cmp	r3, #2
 8003580:	d901      	bls.n	8003586 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003582:	2303      	movs	r3, #3
 8003584:	e167      	b.n	8003856 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003586:	4b0b      	ldr	r3, [pc, #44]	; (80035b4 <HAL_RCC_OscConfig+0x240>)
 8003588:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800358a:	f003 0302 	and.w	r3, r3, #2
 800358e:	2b00      	cmp	r3, #0
 8003590:	d0f0      	beq.n	8003574 <HAL_RCC_OscConfig+0x200>
 8003592:	e01b      	b.n	80035cc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003594:	4b09      	ldr	r3, [pc, #36]	; (80035bc <HAL_RCC_OscConfig+0x248>)
 8003596:	2200      	movs	r2, #0
 8003598:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800359a:	f7fe fb6f 	bl	8001c7c <HAL_GetTick>
 800359e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035a0:	e00e      	b.n	80035c0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035a2:	f7fe fb6b 	bl	8001c7c <HAL_GetTick>
 80035a6:	4602      	mov	r2, r0
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	1ad3      	subs	r3, r2, r3
 80035ac:	2b02      	cmp	r3, #2
 80035ae:	d907      	bls.n	80035c0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80035b0:	2303      	movs	r3, #3
 80035b2:	e150      	b.n	8003856 <HAL_RCC_OscConfig+0x4e2>
 80035b4:	40023800 	.word	0x40023800
 80035b8:	42470000 	.word	0x42470000
 80035bc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035c0:	4b88      	ldr	r3, [pc, #544]	; (80037e4 <HAL_RCC_OscConfig+0x470>)
 80035c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035c4:	f003 0302 	and.w	r3, r3, #2
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d1ea      	bne.n	80035a2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 0304 	and.w	r3, r3, #4
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	f000 8097 	beq.w	8003708 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035da:	2300      	movs	r3, #0
 80035dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035de:	4b81      	ldr	r3, [pc, #516]	; (80037e4 <HAL_RCC_OscConfig+0x470>)
 80035e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d10f      	bne.n	800360a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035ea:	2300      	movs	r3, #0
 80035ec:	60bb      	str	r3, [r7, #8]
 80035ee:	4b7d      	ldr	r3, [pc, #500]	; (80037e4 <HAL_RCC_OscConfig+0x470>)
 80035f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f2:	4a7c      	ldr	r2, [pc, #496]	; (80037e4 <HAL_RCC_OscConfig+0x470>)
 80035f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035f8:	6413      	str	r3, [r2, #64]	; 0x40
 80035fa:	4b7a      	ldr	r3, [pc, #488]	; (80037e4 <HAL_RCC_OscConfig+0x470>)
 80035fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003602:	60bb      	str	r3, [r7, #8]
 8003604:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003606:	2301      	movs	r3, #1
 8003608:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800360a:	4b77      	ldr	r3, [pc, #476]	; (80037e8 <HAL_RCC_OscConfig+0x474>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003612:	2b00      	cmp	r3, #0
 8003614:	d118      	bne.n	8003648 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003616:	4b74      	ldr	r3, [pc, #464]	; (80037e8 <HAL_RCC_OscConfig+0x474>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a73      	ldr	r2, [pc, #460]	; (80037e8 <HAL_RCC_OscConfig+0x474>)
 800361c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003620:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003622:	f7fe fb2b 	bl	8001c7c <HAL_GetTick>
 8003626:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003628:	e008      	b.n	800363c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800362a:	f7fe fb27 	bl	8001c7c <HAL_GetTick>
 800362e:	4602      	mov	r2, r0
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	1ad3      	subs	r3, r2, r3
 8003634:	2b02      	cmp	r3, #2
 8003636:	d901      	bls.n	800363c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003638:	2303      	movs	r3, #3
 800363a:	e10c      	b.n	8003856 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800363c:	4b6a      	ldr	r3, [pc, #424]	; (80037e8 <HAL_RCC_OscConfig+0x474>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003644:	2b00      	cmp	r3, #0
 8003646:	d0f0      	beq.n	800362a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	2b01      	cmp	r3, #1
 800364e:	d106      	bne.n	800365e <HAL_RCC_OscConfig+0x2ea>
 8003650:	4b64      	ldr	r3, [pc, #400]	; (80037e4 <HAL_RCC_OscConfig+0x470>)
 8003652:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003654:	4a63      	ldr	r2, [pc, #396]	; (80037e4 <HAL_RCC_OscConfig+0x470>)
 8003656:	f043 0301 	orr.w	r3, r3, #1
 800365a:	6713      	str	r3, [r2, #112]	; 0x70
 800365c:	e01c      	b.n	8003698 <HAL_RCC_OscConfig+0x324>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	2b05      	cmp	r3, #5
 8003664:	d10c      	bne.n	8003680 <HAL_RCC_OscConfig+0x30c>
 8003666:	4b5f      	ldr	r3, [pc, #380]	; (80037e4 <HAL_RCC_OscConfig+0x470>)
 8003668:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800366a:	4a5e      	ldr	r2, [pc, #376]	; (80037e4 <HAL_RCC_OscConfig+0x470>)
 800366c:	f043 0304 	orr.w	r3, r3, #4
 8003670:	6713      	str	r3, [r2, #112]	; 0x70
 8003672:	4b5c      	ldr	r3, [pc, #368]	; (80037e4 <HAL_RCC_OscConfig+0x470>)
 8003674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003676:	4a5b      	ldr	r2, [pc, #364]	; (80037e4 <HAL_RCC_OscConfig+0x470>)
 8003678:	f043 0301 	orr.w	r3, r3, #1
 800367c:	6713      	str	r3, [r2, #112]	; 0x70
 800367e:	e00b      	b.n	8003698 <HAL_RCC_OscConfig+0x324>
 8003680:	4b58      	ldr	r3, [pc, #352]	; (80037e4 <HAL_RCC_OscConfig+0x470>)
 8003682:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003684:	4a57      	ldr	r2, [pc, #348]	; (80037e4 <HAL_RCC_OscConfig+0x470>)
 8003686:	f023 0301 	bic.w	r3, r3, #1
 800368a:	6713      	str	r3, [r2, #112]	; 0x70
 800368c:	4b55      	ldr	r3, [pc, #340]	; (80037e4 <HAL_RCC_OscConfig+0x470>)
 800368e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003690:	4a54      	ldr	r2, [pc, #336]	; (80037e4 <HAL_RCC_OscConfig+0x470>)
 8003692:	f023 0304 	bic.w	r3, r3, #4
 8003696:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d015      	beq.n	80036cc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036a0:	f7fe faec 	bl	8001c7c <HAL_GetTick>
 80036a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036a6:	e00a      	b.n	80036be <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036a8:	f7fe fae8 	bl	8001c7c <HAL_GetTick>
 80036ac:	4602      	mov	r2, r0
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	1ad3      	subs	r3, r2, r3
 80036b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d901      	bls.n	80036be <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80036ba:	2303      	movs	r3, #3
 80036bc:	e0cb      	b.n	8003856 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036be:	4b49      	ldr	r3, [pc, #292]	; (80037e4 <HAL_RCC_OscConfig+0x470>)
 80036c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036c2:	f003 0302 	and.w	r3, r3, #2
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d0ee      	beq.n	80036a8 <HAL_RCC_OscConfig+0x334>
 80036ca:	e014      	b.n	80036f6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036cc:	f7fe fad6 	bl	8001c7c <HAL_GetTick>
 80036d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036d2:	e00a      	b.n	80036ea <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036d4:	f7fe fad2 	bl	8001c7c <HAL_GetTick>
 80036d8:	4602      	mov	r2, r0
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	1ad3      	subs	r3, r2, r3
 80036de:	f241 3288 	movw	r2, #5000	; 0x1388
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d901      	bls.n	80036ea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80036e6:	2303      	movs	r3, #3
 80036e8:	e0b5      	b.n	8003856 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036ea:	4b3e      	ldr	r3, [pc, #248]	; (80037e4 <HAL_RCC_OscConfig+0x470>)
 80036ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ee:	f003 0302 	and.w	r3, r3, #2
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d1ee      	bne.n	80036d4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036f6:	7dfb      	ldrb	r3, [r7, #23]
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d105      	bne.n	8003708 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036fc:	4b39      	ldr	r3, [pc, #228]	; (80037e4 <HAL_RCC_OscConfig+0x470>)
 80036fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003700:	4a38      	ldr	r2, [pc, #224]	; (80037e4 <HAL_RCC_OscConfig+0x470>)
 8003702:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003706:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	699b      	ldr	r3, [r3, #24]
 800370c:	2b00      	cmp	r3, #0
 800370e:	f000 80a1 	beq.w	8003854 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003712:	4b34      	ldr	r3, [pc, #208]	; (80037e4 <HAL_RCC_OscConfig+0x470>)
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	f003 030c 	and.w	r3, r3, #12
 800371a:	2b08      	cmp	r3, #8
 800371c:	d05c      	beq.n	80037d8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	699b      	ldr	r3, [r3, #24]
 8003722:	2b02      	cmp	r3, #2
 8003724:	d141      	bne.n	80037aa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003726:	4b31      	ldr	r3, [pc, #196]	; (80037ec <HAL_RCC_OscConfig+0x478>)
 8003728:	2200      	movs	r2, #0
 800372a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800372c:	f7fe faa6 	bl	8001c7c <HAL_GetTick>
 8003730:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003732:	e008      	b.n	8003746 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003734:	f7fe faa2 	bl	8001c7c <HAL_GetTick>
 8003738:	4602      	mov	r2, r0
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	1ad3      	subs	r3, r2, r3
 800373e:	2b02      	cmp	r3, #2
 8003740:	d901      	bls.n	8003746 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003742:	2303      	movs	r3, #3
 8003744:	e087      	b.n	8003856 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003746:	4b27      	ldr	r3, [pc, #156]	; (80037e4 <HAL_RCC_OscConfig+0x470>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800374e:	2b00      	cmp	r3, #0
 8003750:	d1f0      	bne.n	8003734 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	69da      	ldr	r2, [r3, #28]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6a1b      	ldr	r3, [r3, #32]
 800375a:	431a      	orrs	r2, r3
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003760:	019b      	lsls	r3, r3, #6
 8003762:	431a      	orrs	r2, r3
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003768:	085b      	lsrs	r3, r3, #1
 800376a:	3b01      	subs	r3, #1
 800376c:	041b      	lsls	r3, r3, #16
 800376e:	431a      	orrs	r2, r3
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003774:	061b      	lsls	r3, r3, #24
 8003776:	491b      	ldr	r1, [pc, #108]	; (80037e4 <HAL_RCC_OscConfig+0x470>)
 8003778:	4313      	orrs	r3, r2
 800377a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800377c:	4b1b      	ldr	r3, [pc, #108]	; (80037ec <HAL_RCC_OscConfig+0x478>)
 800377e:	2201      	movs	r2, #1
 8003780:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003782:	f7fe fa7b 	bl	8001c7c <HAL_GetTick>
 8003786:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003788:	e008      	b.n	800379c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800378a:	f7fe fa77 	bl	8001c7c <HAL_GetTick>
 800378e:	4602      	mov	r2, r0
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	1ad3      	subs	r3, r2, r3
 8003794:	2b02      	cmp	r3, #2
 8003796:	d901      	bls.n	800379c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003798:	2303      	movs	r3, #3
 800379a:	e05c      	b.n	8003856 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800379c:	4b11      	ldr	r3, [pc, #68]	; (80037e4 <HAL_RCC_OscConfig+0x470>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d0f0      	beq.n	800378a <HAL_RCC_OscConfig+0x416>
 80037a8:	e054      	b.n	8003854 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037aa:	4b10      	ldr	r3, [pc, #64]	; (80037ec <HAL_RCC_OscConfig+0x478>)
 80037ac:	2200      	movs	r2, #0
 80037ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037b0:	f7fe fa64 	bl	8001c7c <HAL_GetTick>
 80037b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037b6:	e008      	b.n	80037ca <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037b8:	f7fe fa60 	bl	8001c7c <HAL_GetTick>
 80037bc:	4602      	mov	r2, r0
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	2b02      	cmp	r3, #2
 80037c4:	d901      	bls.n	80037ca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80037c6:	2303      	movs	r3, #3
 80037c8:	e045      	b.n	8003856 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037ca:	4b06      	ldr	r3, [pc, #24]	; (80037e4 <HAL_RCC_OscConfig+0x470>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d1f0      	bne.n	80037b8 <HAL_RCC_OscConfig+0x444>
 80037d6:	e03d      	b.n	8003854 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	699b      	ldr	r3, [r3, #24]
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d107      	bne.n	80037f0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	e038      	b.n	8003856 <HAL_RCC_OscConfig+0x4e2>
 80037e4:	40023800 	.word	0x40023800
 80037e8:	40007000 	.word	0x40007000
 80037ec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80037f0:	4b1b      	ldr	r3, [pc, #108]	; (8003860 <HAL_RCC_OscConfig+0x4ec>)
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	699b      	ldr	r3, [r3, #24]
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	d028      	beq.n	8003850 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003808:	429a      	cmp	r2, r3
 800380a:	d121      	bne.n	8003850 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003816:	429a      	cmp	r2, r3
 8003818:	d11a      	bne.n	8003850 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800381a:	68fa      	ldr	r2, [r7, #12]
 800381c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003820:	4013      	ands	r3, r2
 8003822:	687a      	ldr	r2, [r7, #4]
 8003824:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003826:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003828:	4293      	cmp	r3, r2
 800382a:	d111      	bne.n	8003850 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003836:	085b      	lsrs	r3, r3, #1
 8003838:	3b01      	subs	r3, #1
 800383a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800383c:	429a      	cmp	r2, r3
 800383e:	d107      	bne.n	8003850 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800384a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800384c:	429a      	cmp	r2, r3
 800384e:	d001      	beq.n	8003854 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	e000      	b.n	8003856 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003854:	2300      	movs	r3, #0
}
 8003856:	4618      	mov	r0, r3
 8003858:	3718      	adds	r7, #24
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
 800385e:	bf00      	nop
 8003860:	40023800 	.word	0x40023800

08003864 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b084      	sub	sp, #16
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
 800386c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d101      	bne.n	8003878 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	e0cc      	b.n	8003a12 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003878:	4b68      	ldr	r3, [pc, #416]	; (8003a1c <HAL_RCC_ClockConfig+0x1b8>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 030f 	and.w	r3, r3, #15
 8003880:	683a      	ldr	r2, [r7, #0]
 8003882:	429a      	cmp	r2, r3
 8003884:	d90c      	bls.n	80038a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003886:	4b65      	ldr	r3, [pc, #404]	; (8003a1c <HAL_RCC_ClockConfig+0x1b8>)
 8003888:	683a      	ldr	r2, [r7, #0]
 800388a:	b2d2      	uxtb	r2, r2
 800388c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800388e:	4b63      	ldr	r3, [pc, #396]	; (8003a1c <HAL_RCC_ClockConfig+0x1b8>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 030f 	and.w	r3, r3, #15
 8003896:	683a      	ldr	r2, [r7, #0]
 8003898:	429a      	cmp	r2, r3
 800389a:	d001      	beq.n	80038a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	e0b8      	b.n	8003a12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 0302 	and.w	r3, r3, #2
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d020      	beq.n	80038ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f003 0304 	and.w	r3, r3, #4
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d005      	beq.n	80038c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038b8:	4b59      	ldr	r3, [pc, #356]	; (8003a20 <HAL_RCC_ClockConfig+0x1bc>)
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	4a58      	ldr	r2, [pc, #352]	; (8003a20 <HAL_RCC_ClockConfig+0x1bc>)
 80038be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80038c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 0308 	and.w	r3, r3, #8
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d005      	beq.n	80038dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038d0:	4b53      	ldr	r3, [pc, #332]	; (8003a20 <HAL_RCC_ClockConfig+0x1bc>)
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	4a52      	ldr	r2, [pc, #328]	; (8003a20 <HAL_RCC_ClockConfig+0x1bc>)
 80038d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80038da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038dc:	4b50      	ldr	r3, [pc, #320]	; (8003a20 <HAL_RCC_ClockConfig+0x1bc>)
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	494d      	ldr	r1, [pc, #308]	; (8003a20 <HAL_RCC_ClockConfig+0x1bc>)
 80038ea:	4313      	orrs	r3, r2
 80038ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 0301 	and.w	r3, r3, #1
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d044      	beq.n	8003984 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d107      	bne.n	8003912 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003902:	4b47      	ldr	r3, [pc, #284]	; (8003a20 <HAL_RCC_ClockConfig+0x1bc>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800390a:	2b00      	cmp	r3, #0
 800390c:	d119      	bne.n	8003942 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e07f      	b.n	8003a12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	2b02      	cmp	r3, #2
 8003918:	d003      	beq.n	8003922 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800391e:	2b03      	cmp	r3, #3
 8003920:	d107      	bne.n	8003932 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003922:	4b3f      	ldr	r3, [pc, #252]	; (8003a20 <HAL_RCC_ClockConfig+0x1bc>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800392a:	2b00      	cmp	r3, #0
 800392c:	d109      	bne.n	8003942 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e06f      	b.n	8003a12 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003932:	4b3b      	ldr	r3, [pc, #236]	; (8003a20 <HAL_RCC_ClockConfig+0x1bc>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 0302 	and.w	r3, r3, #2
 800393a:	2b00      	cmp	r3, #0
 800393c:	d101      	bne.n	8003942 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e067      	b.n	8003a12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003942:	4b37      	ldr	r3, [pc, #220]	; (8003a20 <HAL_RCC_ClockConfig+0x1bc>)
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	f023 0203 	bic.w	r2, r3, #3
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	4934      	ldr	r1, [pc, #208]	; (8003a20 <HAL_RCC_ClockConfig+0x1bc>)
 8003950:	4313      	orrs	r3, r2
 8003952:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003954:	f7fe f992 	bl	8001c7c <HAL_GetTick>
 8003958:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800395a:	e00a      	b.n	8003972 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800395c:	f7fe f98e 	bl	8001c7c <HAL_GetTick>
 8003960:	4602      	mov	r2, r0
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	1ad3      	subs	r3, r2, r3
 8003966:	f241 3288 	movw	r2, #5000	; 0x1388
 800396a:	4293      	cmp	r3, r2
 800396c:	d901      	bls.n	8003972 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800396e:	2303      	movs	r3, #3
 8003970:	e04f      	b.n	8003a12 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003972:	4b2b      	ldr	r3, [pc, #172]	; (8003a20 <HAL_RCC_ClockConfig+0x1bc>)
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	f003 020c 	and.w	r2, r3, #12
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	009b      	lsls	r3, r3, #2
 8003980:	429a      	cmp	r2, r3
 8003982:	d1eb      	bne.n	800395c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003984:	4b25      	ldr	r3, [pc, #148]	; (8003a1c <HAL_RCC_ClockConfig+0x1b8>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 030f 	and.w	r3, r3, #15
 800398c:	683a      	ldr	r2, [r7, #0]
 800398e:	429a      	cmp	r2, r3
 8003990:	d20c      	bcs.n	80039ac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003992:	4b22      	ldr	r3, [pc, #136]	; (8003a1c <HAL_RCC_ClockConfig+0x1b8>)
 8003994:	683a      	ldr	r2, [r7, #0]
 8003996:	b2d2      	uxtb	r2, r2
 8003998:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800399a:	4b20      	ldr	r3, [pc, #128]	; (8003a1c <HAL_RCC_ClockConfig+0x1b8>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 030f 	and.w	r3, r3, #15
 80039a2:	683a      	ldr	r2, [r7, #0]
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d001      	beq.n	80039ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	e032      	b.n	8003a12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f003 0304 	and.w	r3, r3, #4
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d008      	beq.n	80039ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039b8:	4b19      	ldr	r3, [pc, #100]	; (8003a20 <HAL_RCC_ClockConfig+0x1bc>)
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	68db      	ldr	r3, [r3, #12]
 80039c4:	4916      	ldr	r1, [pc, #88]	; (8003a20 <HAL_RCC_ClockConfig+0x1bc>)
 80039c6:	4313      	orrs	r3, r2
 80039c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 0308 	and.w	r3, r3, #8
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d009      	beq.n	80039ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039d6:	4b12      	ldr	r3, [pc, #72]	; (8003a20 <HAL_RCC_ClockConfig+0x1bc>)
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	691b      	ldr	r3, [r3, #16]
 80039e2:	00db      	lsls	r3, r3, #3
 80039e4:	490e      	ldr	r1, [pc, #56]	; (8003a20 <HAL_RCC_ClockConfig+0x1bc>)
 80039e6:	4313      	orrs	r3, r2
 80039e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80039ea:	f000 f821 	bl	8003a30 <HAL_RCC_GetSysClockFreq>
 80039ee:	4602      	mov	r2, r0
 80039f0:	4b0b      	ldr	r3, [pc, #44]	; (8003a20 <HAL_RCC_ClockConfig+0x1bc>)
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	091b      	lsrs	r3, r3, #4
 80039f6:	f003 030f 	and.w	r3, r3, #15
 80039fa:	490a      	ldr	r1, [pc, #40]	; (8003a24 <HAL_RCC_ClockConfig+0x1c0>)
 80039fc:	5ccb      	ldrb	r3, [r1, r3]
 80039fe:	fa22 f303 	lsr.w	r3, r2, r3
 8003a02:	4a09      	ldr	r2, [pc, #36]	; (8003a28 <HAL_RCC_ClockConfig+0x1c4>)
 8003a04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003a06:	4b09      	ldr	r3, [pc, #36]	; (8003a2c <HAL_RCC_ClockConfig+0x1c8>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f7fe f8f2 	bl	8001bf4 <HAL_InitTick>

  return HAL_OK;
 8003a10:	2300      	movs	r3, #0
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	3710      	adds	r7, #16
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}
 8003a1a:	bf00      	nop
 8003a1c:	40023c00 	.word	0x40023c00
 8003a20:	40023800 	.word	0x40023800
 8003a24:	0800a704 	.word	0x0800a704
 8003a28:	20000000 	.word	0x20000000
 8003a2c:	20000004 	.word	0x20000004

08003a30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a34:	b094      	sub	sp, #80	; 0x50
 8003a36:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	647b      	str	r3, [r7, #68]	; 0x44
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a40:	2300      	movs	r3, #0
 8003a42:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003a44:	2300      	movs	r3, #0
 8003a46:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a48:	4b79      	ldr	r3, [pc, #484]	; (8003c30 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	f003 030c 	and.w	r3, r3, #12
 8003a50:	2b08      	cmp	r3, #8
 8003a52:	d00d      	beq.n	8003a70 <HAL_RCC_GetSysClockFreq+0x40>
 8003a54:	2b08      	cmp	r3, #8
 8003a56:	f200 80e1 	bhi.w	8003c1c <HAL_RCC_GetSysClockFreq+0x1ec>
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d002      	beq.n	8003a64 <HAL_RCC_GetSysClockFreq+0x34>
 8003a5e:	2b04      	cmp	r3, #4
 8003a60:	d003      	beq.n	8003a6a <HAL_RCC_GetSysClockFreq+0x3a>
 8003a62:	e0db      	b.n	8003c1c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a64:	4b73      	ldr	r3, [pc, #460]	; (8003c34 <HAL_RCC_GetSysClockFreq+0x204>)
 8003a66:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003a68:	e0db      	b.n	8003c22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a6a:	4b73      	ldr	r3, [pc, #460]	; (8003c38 <HAL_RCC_GetSysClockFreq+0x208>)
 8003a6c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003a6e:	e0d8      	b.n	8003c22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a70:	4b6f      	ldr	r3, [pc, #444]	; (8003c30 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a78:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a7a:	4b6d      	ldr	r3, [pc, #436]	; (8003c30 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d063      	beq.n	8003b4e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a86:	4b6a      	ldr	r3, [pc, #424]	; (8003c30 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	099b      	lsrs	r3, r3, #6
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003a90:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a98:	633b      	str	r3, [r7, #48]	; 0x30
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	637b      	str	r3, [r7, #52]	; 0x34
 8003a9e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003aa2:	4622      	mov	r2, r4
 8003aa4:	462b      	mov	r3, r5
 8003aa6:	f04f 0000 	mov.w	r0, #0
 8003aaa:	f04f 0100 	mov.w	r1, #0
 8003aae:	0159      	lsls	r1, r3, #5
 8003ab0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ab4:	0150      	lsls	r0, r2, #5
 8003ab6:	4602      	mov	r2, r0
 8003ab8:	460b      	mov	r3, r1
 8003aba:	4621      	mov	r1, r4
 8003abc:	1a51      	subs	r1, r2, r1
 8003abe:	6139      	str	r1, [r7, #16]
 8003ac0:	4629      	mov	r1, r5
 8003ac2:	eb63 0301 	sbc.w	r3, r3, r1
 8003ac6:	617b      	str	r3, [r7, #20]
 8003ac8:	f04f 0200 	mov.w	r2, #0
 8003acc:	f04f 0300 	mov.w	r3, #0
 8003ad0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ad4:	4659      	mov	r1, fp
 8003ad6:	018b      	lsls	r3, r1, #6
 8003ad8:	4651      	mov	r1, sl
 8003ada:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003ade:	4651      	mov	r1, sl
 8003ae0:	018a      	lsls	r2, r1, #6
 8003ae2:	4651      	mov	r1, sl
 8003ae4:	ebb2 0801 	subs.w	r8, r2, r1
 8003ae8:	4659      	mov	r1, fp
 8003aea:	eb63 0901 	sbc.w	r9, r3, r1
 8003aee:	f04f 0200 	mov.w	r2, #0
 8003af2:	f04f 0300 	mov.w	r3, #0
 8003af6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003afa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003afe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b02:	4690      	mov	r8, r2
 8003b04:	4699      	mov	r9, r3
 8003b06:	4623      	mov	r3, r4
 8003b08:	eb18 0303 	adds.w	r3, r8, r3
 8003b0c:	60bb      	str	r3, [r7, #8]
 8003b0e:	462b      	mov	r3, r5
 8003b10:	eb49 0303 	adc.w	r3, r9, r3
 8003b14:	60fb      	str	r3, [r7, #12]
 8003b16:	f04f 0200 	mov.w	r2, #0
 8003b1a:	f04f 0300 	mov.w	r3, #0
 8003b1e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003b22:	4629      	mov	r1, r5
 8003b24:	024b      	lsls	r3, r1, #9
 8003b26:	4621      	mov	r1, r4
 8003b28:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003b2c:	4621      	mov	r1, r4
 8003b2e:	024a      	lsls	r2, r1, #9
 8003b30:	4610      	mov	r0, r2
 8003b32:	4619      	mov	r1, r3
 8003b34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b36:	2200      	movs	r2, #0
 8003b38:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b3a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003b3c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003b40:	f7fd f8b2 	bl	8000ca8 <__aeabi_uldivmod>
 8003b44:	4602      	mov	r2, r0
 8003b46:	460b      	mov	r3, r1
 8003b48:	4613      	mov	r3, r2
 8003b4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b4c:	e058      	b.n	8003c00 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b4e:	4b38      	ldr	r3, [pc, #224]	; (8003c30 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	099b      	lsrs	r3, r3, #6
 8003b54:	2200      	movs	r2, #0
 8003b56:	4618      	mov	r0, r3
 8003b58:	4611      	mov	r1, r2
 8003b5a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003b5e:	623b      	str	r3, [r7, #32]
 8003b60:	2300      	movs	r3, #0
 8003b62:	627b      	str	r3, [r7, #36]	; 0x24
 8003b64:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003b68:	4642      	mov	r2, r8
 8003b6a:	464b      	mov	r3, r9
 8003b6c:	f04f 0000 	mov.w	r0, #0
 8003b70:	f04f 0100 	mov.w	r1, #0
 8003b74:	0159      	lsls	r1, r3, #5
 8003b76:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b7a:	0150      	lsls	r0, r2, #5
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	460b      	mov	r3, r1
 8003b80:	4641      	mov	r1, r8
 8003b82:	ebb2 0a01 	subs.w	sl, r2, r1
 8003b86:	4649      	mov	r1, r9
 8003b88:	eb63 0b01 	sbc.w	fp, r3, r1
 8003b8c:	f04f 0200 	mov.w	r2, #0
 8003b90:	f04f 0300 	mov.w	r3, #0
 8003b94:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003b98:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003b9c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003ba0:	ebb2 040a 	subs.w	r4, r2, sl
 8003ba4:	eb63 050b 	sbc.w	r5, r3, fp
 8003ba8:	f04f 0200 	mov.w	r2, #0
 8003bac:	f04f 0300 	mov.w	r3, #0
 8003bb0:	00eb      	lsls	r3, r5, #3
 8003bb2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003bb6:	00e2      	lsls	r2, r4, #3
 8003bb8:	4614      	mov	r4, r2
 8003bba:	461d      	mov	r5, r3
 8003bbc:	4643      	mov	r3, r8
 8003bbe:	18e3      	adds	r3, r4, r3
 8003bc0:	603b      	str	r3, [r7, #0]
 8003bc2:	464b      	mov	r3, r9
 8003bc4:	eb45 0303 	adc.w	r3, r5, r3
 8003bc8:	607b      	str	r3, [r7, #4]
 8003bca:	f04f 0200 	mov.w	r2, #0
 8003bce:	f04f 0300 	mov.w	r3, #0
 8003bd2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003bd6:	4629      	mov	r1, r5
 8003bd8:	028b      	lsls	r3, r1, #10
 8003bda:	4621      	mov	r1, r4
 8003bdc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003be0:	4621      	mov	r1, r4
 8003be2:	028a      	lsls	r2, r1, #10
 8003be4:	4610      	mov	r0, r2
 8003be6:	4619      	mov	r1, r3
 8003be8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003bea:	2200      	movs	r2, #0
 8003bec:	61bb      	str	r3, [r7, #24]
 8003bee:	61fa      	str	r2, [r7, #28]
 8003bf0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003bf4:	f7fd f858 	bl	8000ca8 <__aeabi_uldivmod>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	460b      	mov	r3, r1
 8003bfc:	4613      	mov	r3, r2
 8003bfe:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003c00:	4b0b      	ldr	r3, [pc, #44]	; (8003c30 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	0c1b      	lsrs	r3, r3, #16
 8003c06:	f003 0303 	and.w	r3, r3, #3
 8003c0a:	3301      	adds	r3, #1
 8003c0c:	005b      	lsls	r3, r3, #1
 8003c0e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003c10:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003c12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c14:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c18:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003c1a:	e002      	b.n	8003c22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c1c:	4b05      	ldr	r3, [pc, #20]	; (8003c34 <HAL_RCC_GetSysClockFreq+0x204>)
 8003c1e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003c20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	3750      	adds	r7, #80	; 0x50
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c2e:	bf00      	nop
 8003c30:	40023800 	.word	0x40023800
 8003c34:	00f42400 	.word	0x00f42400
 8003c38:	007a1200 	.word	0x007a1200

08003c3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c40:	4b03      	ldr	r3, [pc, #12]	; (8003c50 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c42:	681b      	ldr	r3, [r3, #0]
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	46bd      	mov	sp, r7
 8003c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4c:	4770      	bx	lr
 8003c4e:	bf00      	nop
 8003c50:	20000000 	.word	0x20000000

08003c54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003c58:	f7ff fff0 	bl	8003c3c <HAL_RCC_GetHCLKFreq>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	4b05      	ldr	r3, [pc, #20]	; (8003c74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	0a9b      	lsrs	r3, r3, #10
 8003c64:	f003 0307 	and.w	r3, r3, #7
 8003c68:	4903      	ldr	r1, [pc, #12]	; (8003c78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c6a:	5ccb      	ldrb	r3, [r1, r3]
 8003c6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	bd80      	pop	{r7, pc}
 8003c74:	40023800 	.word	0x40023800
 8003c78:	0800a714 	.word	0x0800a714

08003c7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003c80:	f7ff ffdc 	bl	8003c3c <HAL_RCC_GetHCLKFreq>
 8003c84:	4602      	mov	r2, r0
 8003c86:	4b05      	ldr	r3, [pc, #20]	; (8003c9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	0b5b      	lsrs	r3, r3, #13
 8003c8c:	f003 0307 	and.w	r3, r3, #7
 8003c90:	4903      	ldr	r1, [pc, #12]	; (8003ca0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c92:	5ccb      	ldrb	r3, [r1, r3]
 8003c94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	bd80      	pop	{r7, pc}
 8003c9c:	40023800 	.word	0x40023800
 8003ca0:	0800a714 	.word	0x0800a714

08003ca4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b082      	sub	sp, #8
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d101      	bne.n	8003cb6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e041      	b.n	8003d3a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d106      	bne.n	8003cd0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f7fd fe30 	bl	8001930 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2202      	movs	r2, #2
 8003cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	3304      	adds	r3, #4
 8003ce0:	4619      	mov	r1, r3
 8003ce2:	4610      	mov	r0, r2
 8003ce4:	f000 fc12 	bl	800450c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2201      	movs	r2, #1
 8003cec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2201      	movs	r2, #1
 8003d04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2201      	movs	r2, #1
 8003d14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2201      	movs	r2, #1
 8003d24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2201      	movs	r2, #1
 8003d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d38:	2300      	movs	r3, #0
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	3708      	adds	r7, #8
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}

08003d42 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003d42:	b580      	push	{r7, lr}
 8003d44:	b082      	sub	sp, #8
 8003d46:	af00      	add	r7, sp, #0
 8003d48:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d101      	bne.n	8003d54 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	e041      	b.n	8003dd8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d5a:	b2db      	uxtb	r3, r3
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d106      	bne.n	8003d6e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2200      	movs	r2, #0
 8003d64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	f000 f839 	bl	8003de0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2202      	movs	r2, #2
 8003d72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	3304      	adds	r3, #4
 8003d7e:	4619      	mov	r1, r3
 8003d80:	4610      	mov	r0, r2
 8003d82:	f000 fbc3 	bl	800450c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2201      	movs	r2, #1
 8003d8a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2201      	movs	r2, #1
 8003d92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2201      	movs	r2, #1
 8003d9a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2201      	movs	r2, #1
 8003da2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2201      	movs	r2, #1
 8003daa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2201      	movs	r2, #1
 8003db2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2201      	movs	r2, #1
 8003dba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2201      	movs	r2, #1
 8003dca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003dd6:	2300      	movs	r3, #0
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	3708      	adds	r7, #8
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}

08003de0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b083      	sub	sp, #12
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003de8:	bf00      	nop
 8003dea:	370c      	adds	r7, #12
 8003dec:	46bd      	mov	sp, r7
 8003dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df2:	4770      	bx	lr

08003df4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b084      	sub	sp, #16
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d109      	bne.n	8003e18 <HAL_TIM_PWM_Start+0x24>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e0a:	b2db      	uxtb	r3, r3
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	bf14      	ite	ne
 8003e10:	2301      	movne	r3, #1
 8003e12:	2300      	moveq	r3, #0
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	e022      	b.n	8003e5e <HAL_TIM_PWM_Start+0x6a>
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	2b04      	cmp	r3, #4
 8003e1c:	d109      	bne.n	8003e32 <HAL_TIM_PWM_Start+0x3e>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	2b01      	cmp	r3, #1
 8003e28:	bf14      	ite	ne
 8003e2a:	2301      	movne	r3, #1
 8003e2c:	2300      	moveq	r3, #0
 8003e2e:	b2db      	uxtb	r3, r3
 8003e30:	e015      	b.n	8003e5e <HAL_TIM_PWM_Start+0x6a>
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	2b08      	cmp	r3, #8
 8003e36:	d109      	bne.n	8003e4c <HAL_TIM_PWM_Start+0x58>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e3e:	b2db      	uxtb	r3, r3
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	bf14      	ite	ne
 8003e44:	2301      	movne	r3, #1
 8003e46:	2300      	moveq	r3, #0
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	e008      	b.n	8003e5e <HAL_TIM_PWM_Start+0x6a>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e52:	b2db      	uxtb	r3, r3
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	bf14      	ite	ne
 8003e58:	2301      	movne	r3, #1
 8003e5a:	2300      	moveq	r3, #0
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d001      	beq.n	8003e66 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e07c      	b.n	8003f60 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d104      	bne.n	8003e76 <HAL_TIM_PWM_Start+0x82>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2202      	movs	r2, #2
 8003e70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e74:	e013      	b.n	8003e9e <HAL_TIM_PWM_Start+0xaa>
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	2b04      	cmp	r3, #4
 8003e7a:	d104      	bne.n	8003e86 <HAL_TIM_PWM_Start+0x92>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2202      	movs	r2, #2
 8003e80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e84:	e00b      	b.n	8003e9e <HAL_TIM_PWM_Start+0xaa>
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	2b08      	cmp	r3, #8
 8003e8a:	d104      	bne.n	8003e96 <HAL_TIM_PWM_Start+0xa2>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2202      	movs	r2, #2
 8003e90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e94:	e003      	b.n	8003e9e <HAL_TIM_PWM_Start+0xaa>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2202      	movs	r2, #2
 8003e9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	6839      	ldr	r1, [r7, #0]
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f000 fe1a 	bl	8004ae0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a2d      	ldr	r2, [pc, #180]	; (8003f68 <HAL_TIM_PWM_Start+0x174>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d004      	beq.n	8003ec0 <HAL_TIM_PWM_Start+0xcc>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a2c      	ldr	r2, [pc, #176]	; (8003f6c <HAL_TIM_PWM_Start+0x178>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d101      	bne.n	8003ec4 <HAL_TIM_PWM_Start+0xd0>
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	e000      	b.n	8003ec6 <HAL_TIM_PWM_Start+0xd2>
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d007      	beq.n	8003eda <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ed8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a22      	ldr	r2, [pc, #136]	; (8003f68 <HAL_TIM_PWM_Start+0x174>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d022      	beq.n	8003f2a <HAL_TIM_PWM_Start+0x136>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eec:	d01d      	beq.n	8003f2a <HAL_TIM_PWM_Start+0x136>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a1f      	ldr	r2, [pc, #124]	; (8003f70 <HAL_TIM_PWM_Start+0x17c>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d018      	beq.n	8003f2a <HAL_TIM_PWM_Start+0x136>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a1d      	ldr	r2, [pc, #116]	; (8003f74 <HAL_TIM_PWM_Start+0x180>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d013      	beq.n	8003f2a <HAL_TIM_PWM_Start+0x136>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a1c      	ldr	r2, [pc, #112]	; (8003f78 <HAL_TIM_PWM_Start+0x184>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d00e      	beq.n	8003f2a <HAL_TIM_PWM_Start+0x136>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a16      	ldr	r2, [pc, #88]	; (8003f6c <HAL_TIM_PWM_Start+0x178>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d009      	beq.n	8003f2a <HAL_TIM_PWM_Start+0x136>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a18      	ldr	r2, [pc, #96]	; (8003f7c <HAL_TIM_PWM_Start+0x188>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d004      	beq.n	8003f2a <HAL_TIM_PWM_Start+0x136>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a16      	ldr	r2, [pc, #88]	; (8003f80 <HAL_TIM_PWM_Start+0x18c>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d111      	bne.n	8003f4e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	f003 0307 	and.w	r3, r3, #7
 8003f34:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2b06      	cmp	r3, #6
 8003f3a:	d010      	beq.n	8003f5e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f042 0201 	orr.w	r2, r2, #1
 8003f4a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f4c:	e007      	b.n	8003f5e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f042 0201 	orr.w	r2, r2, #1
 8003f5c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f5e:	2300      	movs	r3, #0
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	3710      	adds	r7, #16
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}
 8003f68:	40010000 	.word	0x40010000
 8003f6c:	40010400 	.word	0x40010400
 8003f70:	40000400 	.word	0x40000400
 8003f74:	40000800 	.word	0x40000800
 8003f78:	40000c00 	.word	0x40000c00
 8003f7c:	40014000 	.word	0x40014000
 8003f80:	40001800 	.word	0x40001800

08003f84 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b082      	sub	sp, #8
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	691b      	ldr	r3, [r3, #16]
 8003f92:	f003 0302 	and.w	r3, r3, #2
 8003f96:	2b02      	cmp	r3, #2
 8003f98:	d122      	bne.n	8003fe0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	68db      	ldr	r3, [r3, #12]
 8003fa0:	f003 0302 	and.w	r3, r3, #2
 8003fa4:	2b02      	cmp	r3, #2
 8003fa6:	d11b      	bne.n	8003fe0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f06f 0202 	mvn.w	r2, #2
 8003fb0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	699b      	ldr	r3, [r3, #24]
 8003fbe:	f003 0303 	and.w	r3, r3, #3
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d003      	beq.n	8003fce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f000 fa81 	bl	80044ce <HAL_TIM_IC_CaptureCallback>
 8003fcc:	e005      	b.n	8003fda <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f000 fa73 	bl	80044ba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fd4:	6878      	ldr	r0, [r7, #4]
 8003fd6:	f000 fa84 	bl	80044e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	691b      	ldr	r3, [r3, #16]
 8003fe6:	f003 0304 	and.w	r3, r3, #4
 8003fea:	2b04      	cmp	r3, #4
 8003fec:	d122      	bne.n	8004034 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	68db      	ldr	r3, [r3, #12]
 8003ff4:	f003 0304 	and.w	r3, r3, #4
 8003ff8:	2b04      	cmp	r3, #4
 8003ffa:	d11b      	bne.n	8004034 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f06f 0204 	mvn.w	r2, #4
 8004004:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2202      	movs	r2, #2
 800400a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	699b      	ldr	r3, [r3, #24]
 8004012:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004016:	2b00      	cmp	r3, #0
 8004018:	d003      	beq.n	8004022 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f000 fa57 	bl	80044ce <HAL_TIM_IC_CaptureCallback>
 8004020:	e005      	b.n	800402e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f000 fa49 	bl	80044ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004028:	6878      	ldr	r0, [r7, #4]
 800402a:	f000 fa5a 	bl	80044e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2200      	movs	r2, #0
 8004032:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	691b      	ldr	r3, [r3, #16]
 800403a:	f003 0308 	and.w	r3, r3, #8
 800403e:	2b08      	cmp	r3, #8
 8004040:	d122      	bne.n	8004088 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	68db      	ldr	r3, [r3, #12]
 8004048:	f003 0308 	and.w	r3, r3, #8
 800404c:	2b08      	cmp	r3, #8
 800404e:	d11b      	bne.n	8004088 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f06f 0208 	mvn.w	r2, #8
 8004058:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2204      	movs	r2, #4
 800405e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	69db      	ldr	r3, [r3, #28]
 8004066:	f003 0303 	and.w	r3, r3, #3
 800406a:	2b00      	cmp	r3, #0
 800406c:	d003      	beq.n	8004076 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f000 fa2d 	bl	80044ce <HAL_TIM_IC_CaptureCallback>
 8004074:	e005      	b.n	8004082 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	f000 fa1f 	bl	80044ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800407c:	6878      	ldr	r0, [r7, #4]
 800407e:	f000 fa30 	bl	80044e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2200      	movs	r2, #0
 8004086:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	691b      	ldr	r3, [r3, #16]
 800408e:	f003 0310 	and.w	r3, r3, #16
 8004092:	2b10      	cmp	r3, #16
 8004094:	d122      	bne.n	80040dc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	68db      	ldr	r3, [r3, #12]
 800409c:	f003 0310 	and.w	r3, r3, #16
 80040a0:	2b10      	cmp	r3, #16
 80040a2:	d11b      	bne.n	80040dc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f06f 0210 	mvn.w	r2, #16
 80040ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2208      	movs	r2, #8
 80040b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	69db      	ldr	r3, [r3, #28]
 80040ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d003      	beq.n	80040ca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f000 fa03 	bl	80044ce <HAL_TIM_IC_CaptureCallback>
 80040c8:	e005      	b.n	80040d6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	f000 f9f5 	bl	80044ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040d0:	6878      	ldr	r0, [r7, #4]
 80040d2:	f000 fa06 	bl	80044e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2200      	movs	r2, #0
 80040da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	691b      	ldr	r3, [r3, #16]
 80040e2:	f003 0301 	and.w	r3, r3, #1
 80040e6:	2b01      	cmp	r3, #1
 80040e8:	d10e      	bne.n	8004108 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	68db      	ldr	r3, [r3, #12]
 80040f0:	f003 0301 	and.w	r3, r3, #1
 80040f4:	2b01      	cmp	r3, #1
 80040f6:	d107      	bne.n	8004108 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f06f 0201 	mvn.w	r2, #1
 8004100:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f000 f9cf 	bl	80044a6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	691b      	ldr	r3, [r3, #16]
 800410e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004112:	2b80      	cmp	r3, #128	; 0x80
 8004114:	d10e      	bne.n	8004134 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	68db      	ldr	r3, [r3, #12]
 800411c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004120:	2b80      	cmp	r3, #128	; 0x80
 8004122:	d107      	bne.n	8004134 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800412c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f000 fd82 	bl	8004c38 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	691b      	ldr	r3, [r3, #16]
 800413a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800413e:	2b40      	cmp	r3, #64	; 0x40
 8004140:	d10e      	bne.n	8004160 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	68db      	ldr	r3, [r3, #12]
 8004148:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800414c:	2b40      	cmp	r3, #64	; 0x40
 800414e:	d107      	bne.n	8004160 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004158:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f000 f9cb 	bl	80044f6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	691b      	ldr	r3, [r3, #16]
 8004166:	f003 0320 	and.w	r3, r3, #32
 800416a:	2b20      	cmp	r3, #32
 800416c:	d10e      	bne.n	800418c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	68db      	ldr	r3, [r3, #12]
 8004174:	f003 0320 	and.w	r3, r3, #32
 8004178:	2b20      	cmp	r3, #32
 800417a:	d107      	bne.n	800418c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f06f 0220 	mvn.w	r2, #32
 8004184:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f000 fd4c 	bl	8004c24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800418c:	bf00      	nop
 800418e:	3708      	adds	r7, #8
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}

08004194 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b086      	sub	sp, #24
 8004198:	af00      	add	r7, sp, #0
 800419a:	60f8      	str	r0, [r7, #12]
 800419c:	60b9      	str	r1, [r7, #8]
 800419e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041a0:	2300      	movs	r3, #0
 80041a2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041aa:	2b01      	cmp	r3, #1
 80041ac:	d101      	bne.n	80041b2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80041ae:	2302      	movs	r3, #2
 80041b0:	e0ae      	b.n	8004310 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2201      	movs	r2, #1
 80041b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2b0c      	cmp	r3, #12
 80041be:	f200 809f 	bhi.w	8004300 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80041c2:	a201      	add	r2, pc, #4	; (adr r2, 80041c8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80041c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041c8:	080041fd 	.word	0x080041fd
 80041cc:	08004301 	.word	0x08004301
 80041d0:	08004301 	.word	0x08004301
 80041d4:	08004301 	.word	0x08004301
 80041d8:	0800423d 	.word	0x0800423d
 80041dc:	08004301 	.word	0x08004301
 80041e0:	08004301 	.word	0x08004301
 80041e4:	08004301 	.word	0x08004301
 80041e8:	0800427f 	.word	0x0800427f
 80041ec:	08004301 	.word	0x08004301
 80041f0:	08004301 	.word	0x08004301
 80041f4:	08004301 	.word	0x08004301
 80041f8:	080042bf 	.word	0x080042bf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	68b9      	ldr	r1, [r7, #8]
 8004202:	4618      	mov	r0, r3
 8004204:	f000 fa22 	bl	800464c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	699a      	ldr	r2, [r3, #24]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f042 0208 	orr.w	r2, r2, #8
 8004216:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	699a      	ldr	r2, [r3, #24]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f022 0204 	bic.w	r2, r2, #4
 8004226:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	6999      	ldr	r1, [r3, #24]
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	691a      	ldr	r2, [r3, #16]
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	430a      	orrs	r2, r1
 8004238:	619a      	str	r2, [r3, #24]
      break;
 800423a:	e064      	b.n	8004306 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	68b9      	ldr	r1, [r7, #8]
 8004242:	4618      	mov	r0, r3
 8004244:	f000 fa72 	bl	800472c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	699a      	ldr	r2, [r3, #24]
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004256:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	699a      	ldr	r2, [r3, #24]
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004266:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	6999      	ldr	r1, [r3, #24]
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	691b      	ldr	r3, [r3, #16]
 8004272:	021a      	lsls	r2, r3, #8
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	430a      	orrs	r2, r1
 800427a:	619a      	str	r2, [r3, #24]
      break;
 800427c:	e043      	b.n	8004306 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	68b9      	ldr	r1, [r7, #8]
 8004284:	4618      	mov	r0, r3
 8004286:	f000 fac7 	bl	8004818 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	69da      	ldr	r2, [r3, #28]
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f042 0208 	orr.w	r2, r2, #8
 8004298:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	69da      	ldr	r2, [r3, #28]
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f022 0204 	bic.w	r2, r2, #4
 80042a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	69d9      	ldr	r1, [r3, #28]
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	691a      	ldr	r2, [r3, #16]
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	430a      	orrs	r2, r1
 80042ba:	61da      	str	r2, [r3, #28]
      break;
 80042bc:	e023      	b.n	8004306 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	68b9      	ldr	r1, [r7, #8]
 80042c4:	4618      	mov	r0, r3
 80042c6:	f000 fb1b 	bl	8004900 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	69da      	ldr	r2, [r3, #28]
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80042d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	69da      	ldr	r2, [r3, #28]
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	69d9      	ldr	r1, [r3, #28]
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	691b      	ldr	r3, [r3, #16]
 80042f4:	021a      	lsls	r2, r3, #8
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	430a      	orrs	r2, r1
 80042fc:	61da      	str	r2, [r3, #28]
      break;
 80042fe:	e002      	b.n	8004306 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	75fb      	strb	r3, [r7, #23]
      break;
 8004304:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2200      	movs	r2, #0
 800430a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800430e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004310:	4618      	mov	r0, r3
 8004312:	3718      	adds	r7, #24
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}

08004318 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b084      	sub	sp, #16
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
 8004320:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004322:	2300      	movs	r3, #0
 8004324:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800432c:	2b01      	cmp	r3, #1
 800432e:	d101      	bne.n	8004334 <HAL_TIM_ConfigClockSource+0x1c>
 8004330:	2302      	movs	r3, #2
 8004332:	e0b4      	b.n	800449e <HAL_TIM_ConfigClockSource+0x186>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2201      	movs	r2, #1
 8004338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2202      	movs	r2, #2
 8004340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004352:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800435a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	68ba      	ldr	r2, [r7, #8]
 8004362:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800436c:	d03e      	beq.n	80043ec <HAL_TIM_ConfigClockSource+0xd4>
 800436e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004372:	f200 8087 	bhi.w	8004484 <HAL_TIM_ConfigClockSource+0x16c>
 8004376:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800437a:	f000 8086 	beq.w	800448a <HAL_TIM_ConfigClockSource+0x172>
 800437e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004382:	d87f      	bhi.n	8004484 <HAL_TIM_ConfigClockSource+0x16c>
 8004384:	2b70      	cmp	r3, #112	; 0x70
 8004386:	d01a      	beq.n	80043be <HAL_TIM_ConfigClockSource+0xa6>
 8004388:	2b70      	cmp	r3, #112	; 0x70
 800438a:	d87b      	bhi.n	8004484 <HAL_TIM_ConfigClockSource+0x16c>
 800438c:	2b60      	cmp	r3, #96	; 0x60
 800438e:	d050      	beq.n	8004432 <HAL_TIM_ConfigClockSource+0x11a>
 8004390:	2b60      	cmp	r3, #96	; 0x60
 8004392:	d877      	bhi.n	8004484 <HAL_TIM_ConfigClockSource+0x16c>
 8004394:	2b50      	cmp	r3, #80	; 0x50
 8004396:	d03c      	beq.n	8004412 <HAL_TIM_ConfigClockSource+0xfa>
 8004398:	2b50      	cmp	r3, #80	; 0x50
 800439a:	d873      	bhi.n	8004484 <HAL_TIM_ConfigClockSource+0x16c>
 800439c:	2b40      	cmp	r3, #64	; 0x40
 800439e:	d058      	beq.n	8004452 <HAL_TIM_ConfigClockSource+0x13a>
 80043a0:	2b40      	cmp	r3, #64	; 0x40
 80043a2:	d86f      	bhi.n	8004484 <HAL_TIM_ConfigClockSource+0x16c>
 80043a4:	2b30      	cmp	r3, #48	; 0x30
 80043a6:	d064      	beq.n	8004472 <HAL_TIM_ConfigClockSource+0x15a>
 80043a8:	2b30      	cmp	r3, #48	; 0x30
 80043aa:	d86b      	bhi.n	8004484 <HAL_TIM_ConfigClockSource+0x16c>
 80043ac:	2b20      	cmp	r3, #32
 80043ae:	d060      	beq.n	8004472 <HAL_TIM_ConfigClockSource+0x15a>
 80043b0:	2b20      	cmp	r3, #32
 80043b2:	d867      	bhi.n	8004484 <HAL_TIM_ConfigClockSource+0x16c>
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d05c      	beq.n	8004472 <HAL_TIM_ConfigClockSource+0x15a>
 80043b8:	2b10      	cmp	r3, #16
 80043ba:	d05a      	beq.n	8004472 <HAL_TIM_ConfigClockSource+0x15a>
 80043bc:	e062      	b.n	8004484 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6818      	ldr	r0, [r3, #0]
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	6899      	ldr	r1, [r3, #8]
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	685a      	ldr	r2, [r3, #4]
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	68db      	ldr	r3, [r3, #12]
 80043ce:	f000 fb67 	bl	8004aa0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80043e0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	68ba      	ldr	r2, [r7, #8]
 80043e8:	609a      	str	r2, [r3, #8]
      break;
 80043ea:	e04f      	b.n	800448c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6818      	ldr	r0, [r3, #0]
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	6899      	ldr	r1, [r3, #8]
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	685a      	ldr	r2, [r3, #4]
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	68db      	ldr	r3, [r3, #12]
 80043fc:	f000 fb50 	bl	8004aa0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	689a      	ldr	r2, [r3, #8]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800440e:	609a      	str	r2, [r3, #8]
      break;
 8004410:	e03c      	b.n	800448c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6818      	ldr	r0, [r3, #0]
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	6859      	ldr	r1, [r3, #4]
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	68db      	ldr	r3, [r3, #12]
 800441e:	461a      	mov	r2, r3
 8004420:	f000 fac4 	bl	80049ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	2150      	movs	r1, #80	; 0x50
 800442a:	4618      	mov	r0, r3
 800442c:	f000 fb1d 	bl	8004a6a <TIM_ITRx_SetConfig>
      break;
 8004430:	e02c      	b.n	800448c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6818      	ldr	r0, [r3, #0]
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	6859      	ldr	r1, [r3, #4]
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	68db      	ldr	r3, [r3, #12]
 800443e:	461a      	mov	r2, r3
 8004440:	f000 fae3 	bl	8004a0a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	2160      	movs	r1, #96	; 0x60
 800444a:	4618      	mov	r0, r3
 800444c:	f000 fb0d 	bl	8004a6a <TIM_ITRx_SetConfig>
      break;
 8004450:	e01c      	b.n	800448c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6818      	ldr	r0, [r3, #0]
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	6859      	ldr	r1, [r3, #4]
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	68db      	ldr	r3, [r3, #12]
 800445e:	461a      	mov	r2, r3
 8004460:	f000 faa4 	bl	80049ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	2140      	movs	r1, #64	; 0x40
 800446a:	4618      	mov	r0, r3
 800446c:	f000 fafd 	bl	8004a6a <TIM_ITRx_SetConfig>
      break;
 8004470:	e00c      	b.n	800448c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681a      	ldr	r2, [r3, #0]
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4619      	mov	r1, r3
 800447c:	4610      	mov	r0, r2
 800447e:	f000 faf4 	bl	8004a6a <TIM_ITRx_SetConfig>
      break;
 8004482:	e003      	b.n	800448c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	73fb      	strb	r3, [r7, #15]
      break;
 8004488:	e000      	b.n	800448c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800448a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2201      	movs	r2, #1
 8004490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2200      	movs	r2, #0
 8004498:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800449c:	7bfb      	ldrb	r3, [r7, #15]
}
 800449e:	4618      	mov	r0, r3
 80044a0:	3710      	adds	r7, #16
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}

080044a6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80044a6:	b480      	push	{r7}
 80044a8:	b083      	sub	sp, #12
 80044aa:	af00      	add	r7, sp, #0
 80044ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80044ae:	bf00      	nop
 80044b0:	370c      	adds	r7, #12
 80044b2:	46bd      	mov	sp, r7
 80044b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b8:	4770      	bx	lr

080044ba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80044ba:	b480      	push	{r7}
 80044bc:	b083      	sub	sp, #12
 80044be:	af00      	add	r7, sp, #0
 80044c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80044c2:	bf00      	nop
 80044c4:	370c      	adds	r7, #12
 80044c6:	46bd      	mov	sp, r7
 80044c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044cc:	4770      	bx	lr

080044ce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80044ce:	b480      	push	{r7}
 80044d0:	b083      	sub	sp, #12
 80044d2:	af00      	add	r7, sp, #0
 80044d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80044d6:	bf00      	nop
 80044d8:	370c      	adds	r7, #12
 80044da:	46bd      	mov	sp, r7
 80044dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e0:	4770      	bx	lr

080044e2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80044e2:	b480      	push	{r7}
 80044e4:	b083      	sub	sp, #12
 80044e6:	af00      	add	r7, sp, #0
 80044e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80044ea:	bf00      	nop
 80044ec:	370c      	adds	r7, #12
 80044ee:	46bd      	mov	sp, r7
 80044f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f4:	4770      	bx	lr

080044f6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80044f6:	b480      	push	{r7}
 80044f8:	b083      	sub	sp, #12
 80044fa:	af00      	add	r7, sp, #0
 80044fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80044fe:	bf00      	nop
 8004500:	370c      	adds	r7, #12
 8004502:	46bd      	mov	sp, r7
 8004504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004508:	4770      	bx	lr
	...

0800450c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800450c:	b480      	push	{r7}
 800450e:	b085      	sub	sp, #20
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
 8004514:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	4a40      	ldr	r2, [pc, #256]	; (8004620 <TIM_Base_SetConfig+0x114>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d013      	beq.n	800454c <TIM_Base_SetConfig+0x40>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800452a:	d00f      	beq.n	800454c <TIM_Base_SetConfig+0x40>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	4a3d      	ldr	r2, [pc, #244]	; (8004624 <TIM_Base_SetConfig+0x118>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d00b      	beq.n	800454c <TIM_Base_SetConfig+0x40>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	4a3c      	ldr	r2, [pc, #240]	; (8004628 <TIM_Base_SetConfig+0x11c>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d007      	beq.n	800454c <TIM_Base_SetConfig+0x40>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	4a3b      	ldr	r2, [pc, #236]	; (800462c <TIM_Base_SetConfig+0x120>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d003      	beq.n	800454c <TIM_Base_SetConfig+0x40>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	4a3a      	ldr	r2, [pc, #232]	; (8004630 <TIM_Base_SetConfig+0x124>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d108      	bne.n	800455e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004552:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	68fa      	ldr	r2, [r7, #12]
 800455a:	4313      	orrs	r3, r2
 800455c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	4a2f      	ldr	r2, [pc, #188]	; (8004620 <TIM_Base_SetConfig+0x114>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d02b      	beq.n	80045be <TIM_Base_SetConfig+0xb2>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800456c:	d027      	beq.n	80045be <TIM_Base_SetConfig+0xb2>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	4a2c      	ldr	r2, [pc, #176]	; (8004624 <TIM_Base_SetConfig+0x118>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d023      	beq.n	80045be <TIM_Base_SetConfig+0xb2>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	4a2b      	ldr	r2, [pc, #172]	; (8004628 <TIM_Base_SetConfig+0x11c>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d01f      	beq.n	80045be <TIM_Base_SetConfig+0xb2>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	4a2a      	ldr	r2, [pc, #168]	; (800462c <TIM_Base_SetConfig+0x120>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d01b      	beq.n	80045be <TIM_Base_SetConfig+0xb2>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	4a29      	ldr	r2, [pc, #164]	; (8004630 <TIM_Base_SetConfig+0x124>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d017      	beq.n	80045be <TIM_Base_SetConfig+0xb2>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	4a28      	ldr	r2, [pc, #160]	; (8004634 <TIM_Base_SetConfig+0x128>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d013      	beq.n	80045be <TIM_Base_SetConfig+0xb2>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	4a27      	ldr	r2, [pc, #156]	; (8004638 <TIM_Base_SetConfig+0x12c>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d00f      	beq.n	80045be <TIM_Base_SetConfig+0xb2>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	4a26      	ldr	r2, [pc, #152]	; (800463c <TIM_Base_SetConfig+0x130>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d00b      	beq.n	80045be <TIM_Base_SetConfig+0xb2>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	4a25      	ldr	r2, [pc, #148]	; (8004640 <TIM_Base_SetConfig+0x134>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d007      	beq.n	80045be <TIM_Base_SetConfig+0xb2>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	4a24      	ldr	r2, [pc, #144]	; (8004644 <TIM_Base_SetConfig+0x138>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d003      	beq.n	80045be <TIM_Base_SetConfig+0xb2>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	4a23      	ldr	r2, [pc, #140]	; (8004648 <TIM_Base_SetConfig+0x13c>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d108      	bne.n	80045d0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	68db      	ldr	r3, [r3, #12]
 80045ca:	68fa      	ldr	r2, [r7, #12]
 80045cc:	4313      	orrs	r3, r2
 80045ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	695b      	ldr	r3, [r3, #20]
 80045da:	4313      	orrs	r3, r2
 80045dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	68fa      	ldr	r2, [r7, #12]
 80045e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	689a      	ldr	r2, [r3, #8]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	4a0a      	ldr	r2, [pc, #40]	; (8004620 <TIM_Base_SetConfig+0x114>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d003      	beq.n	8004604 <TIM_Base_SetConfig+0xf8>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	4a0c      	ldr	r2, [pc, #48]	; (8004630 <TIM_Base_SetConfig+0x124>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d103      	bne.n	800460c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	691a      	ldr	r2, [r3, #16]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2201      	movs	r2, #1
 8004610:	615a      	str	r2, [r3, #20]
}
 8004612:	bf00      	nop
 8004614:	3714      	adds	r7, #20
 8004616:	46bd      	mov	sp, r7
 8004618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461c:	4770      	bx	lr
 800461e:	bf00      	nop
 8004620:	40010000 	.word	0x40010000
 8004624:	40000400 	.word	0x40000400
 8004628:	40000800 	.word	0x40000800
 800462c:	40000c00 	.word	0x40000c00
 8004630:	40010400 	.word	0x40010400
 8004634:	40014000 	.word	0x40014000
 8004638:	40014400 	.word	0x40014400
 800463c:	40014800 	.word	0x40014800
 8004640:	40001800 	.word	0x40001800
 8004644:	40001c00 	.word	0x40001c00
 8004648:	40002000 	.word	0x40002000

0800464c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800464c:	b480      	push	{r7}
 800464e:	b087      	sub	sp, #28
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
 8004654:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6a1b      	ldr	r3, [r3, #32]
 800465a:	f023 0201 	bic.w	r2, r3, #1
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6a1b      	ldr	r3, [r3, #32]
 8004666:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	699b      	ldr	r3, [r3, #24]
 8004672:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800467a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	f023 0303 	bic.w	r3, r3, #3
 8004682:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	68fa      	ldr	r2, [r7, #12]
 800468a:	4313      	orrs	r3, r2
 800468c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	f023 0302 	bic.w	r3, r3, #2
 8004694:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	697a      	ldr	r2, [r7, #20]
 800469c:	4313      	orrs	r3, r2
 800469e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	4a20      	ldr	r2, [pc, #128]	; (8004724 <TIM_OC1_SetConfig+0xd8>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d003      	beq.n	80046b0 <TIM_OC1_SetConfig+0x64>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	4a1f      	ldr	r2, [pc, #124]	; (8004728 <TIM_OC1_SetConfig+0xdc>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d10c      	bne.n	80046ca <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	f023 0308 	bic.w	r3, r3, #8
 80046b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	68db      	ldr	r3, [r3, #12]
 80046bc:	697a      	ldr	r2, [r7, #20]
 80046be:	4313      	orrs	r3, r2
 80046c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	f023 0304 	bic.w	r3, r3, #4
 80046c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	4a15      	ldr	r2, [pc, #84]	; (8004724 <TIM_OC1_SetConfig+0xd8>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d003      	beq.n	80046da <TIM_OC1_SetConfig+0x8e>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	4a14      	ldr	r2, [pc, #80]	; (8004728 <TIM_OC1_SetConfig+0xdc>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d111      	bne.n	80046fe <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80046e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	695b      	ldr	r3, [r3, #20]
 80046ee:	693a      	ldr	r2, [r7, #16]
 80046f0:	4313      	orrs	r3, r2
 80046f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	699b      	ldr	r3, [r3, #24]
 80046f8:	693a      	ldr	r2, [r7, #16]
 80046fa:	4313      	orrs	r3, r2
 80046fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	693a      	ldr	r2, [r7, #16]
 8004702:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	68fa      	ldr	r2, [r7, #12]
 8004708:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	685a      	ldr	r2, [r3, #4]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	697a      	ldr	r2, [r7, #20]
 8004716:	621a      	str	r2, [r3, #32]
}
 8004718:	bf00      	nop
 800471a:	371c      	adds	r7, #28
 800471c:	46bd      	mov	sp, r7
 800471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004722:	4770      	bx	lr
 8004724:	40010000 	.word	0x40010000
 8004728:	40010400 	.word	0x40010400

0800472c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800472c:	b480      	push	{r7}
 800472e:	b087      	sub	sp, #28
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
 8004734:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6a1b      	ldr	r3, [r3, #32]
 800473a:	f023 0210 	bic.w	r2, r3, #16
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6a1b      	ldr	r3, [r3, #32]
 8004746:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	699b      	ldr	r3, [r3, #24]
 8004752:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800475a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004762:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	021b      	lsls	r3, r3, #8
 800476a:	68fa      	ldr	r2, [r7, #12]
 800476c:	4313      	orrs	r3, r2
 800476e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	f023 0320 	bic.w	r3, r3, #32
 8004776:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	011b      	lsls	r3, r3, #4
 800477e:	697a      	ldr	r2, [r7, #20]
 8004780:	4313      	orrs	r3, r2
 8004782:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	4a22      	ldr	r2, [pc, #136]	; (8004810 <TIM_OC2_SetConfig+0xe4>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d003      	beq.n	8004794 <TIM_OC2_SetConfig+0x68>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	4a21      	ldr	r2, [pc, #132]	; (8004814 <TIM_OC2_SetConfig+0xe8>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d10d      	bne.n	80047b0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800479a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	68db      	ldr	r3, [r3, #12]
 80047a0:	011b      	lsls	r3, r3, #4
 80047a2:	697a      	ldr	r2, [r7, #20]
 80047a4:	4313      	orrs	r3, r2
 80047a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047ae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	4a17      	ldr	r2, [pc, #92]	; (8004810 <TIM_OC2_SetConfig+0xe4>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d003      	beq.n	80047c0 <TIM_OC2_SetConfig+0x94>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	4a16      	ldr	r2, [pc, #88]	; (8004814 <TIM_OC2_SetConfig+0xe8>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d113      	bne.n	80047e8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80047c6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80047ce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	695b      	ldr	r3, [r3, #20]
 80047d4:	009b      	lsls	r3, r3, #2
 80047d6:	693a      	ldr	r2, [r7, #16]
 80047d8:	4313      	orrs	r3, r2
 80047da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	699b      	ldr	r3, [r3, #24]
 80047e0:	009b      	lsls	r3, r3, #2
 80047e2:	693a      	ldr	r2, [r7, #16]
 80047e4:	4313      	orrs	r3, r2
 80047e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	693a      	ldr	r2, [r7, #16]
 80047ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	68fa      	ldr	r2, [r7, #12]
 80047f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	685a      	ldr	r2, [r3, #4]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	697a      	ldr	r2, [r7, #20]
 8004800:	621a      	str	r2, [r3, #32]
}
 8004802:	bf00      	nop
 8004804:	371c      	adds	r7, #28
 8004806:	46bd      	mov	sp, r7
 8004808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480c:	4770      	bx	lr
 800480e:	bf00      	nop
 8004810:	40010000 	.word	0x40010000
 8004814:	40010400 	.word	0x40010400

08004818 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004818:	b480      	push	{r7}
 800481a:	b087      	sub	sp, #28
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
 8004820:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6a1b      	ldr	r3, [r3, #32]
 8004826:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6a1b      	ldr	r3, [r3, #32]
 8004832:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	69db      	ldr	r3, [r3, #28]
 800483e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004846:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	f023 0303 	bic.w	r3, r3, #3
 800484e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	68fa      	ldr	r2, [r7, #12]
 8004856:	4313      	orrs	r3, r2
 8004858:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004860:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	021b      	lsls	r3, r3, #8
 8004868:	697a      	ldr	r2, [r7, #20]
 800486a:	4313      	orrs	r3, r2
 800486c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	4a21      	ldr	r2, [pc, #132]	; (80048f8 <TIM_OC3_SetConfig+0xe0>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d003      	beq.n	800487e <TIM_OC3_SetConfig+0x66>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	4a20      	ldr	r2, [pc, #128]	; (80048fc <TIM_OC3_SetConfig+0xe4>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d10d      	bne.n	800489a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004884:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	68db      	ldr	r3, [r3, #12]
 800488a:	021b      	lsls	r3, r3, #8
 800488c:	697a      	ldr	r2, [r7, #20]
 800488e:	4313      	orrs	r3, r2
 8004890:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004898:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	4a16      	ldr	r2, [pc, #88]	; (80048f8 <TIM_OC3_SetConfig+0xe0>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d003      	beq.n	80048aa <TIM_OC3_SetConfig+0x92>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	4a15      	ldr	r2, [pc, #84]	; (80048fc <TIM_OC3_SetConfig+0xe4>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d113      	bne.n	80048d2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80048b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80048b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	695b      	ldr	r3, [r3, #20]
 80048be:	011b      	lsls	r3, r3, #4
 80048c0:	693a      	ldr	r2, [r7, #16]
 80048c2:	4313      	orrs	r3, r2
 80048c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	699b      	ldr	r3, [r3, #24]
 80048ca:	011b      	lsls	r3, r3, #4
 80048cc:	693a      	ldr	r2, [r7, #16]
 80048ce:	4313      	orrs	r3, r2
 80048d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	693a      	ldr	r2, [r7, #16]
 80048d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	68fa      	ldr	r2, [r7, #12]
 80048dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	685a      	ldr	r2, [r3, #4]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	697a      	ldr	r2, [r7, #20]
 80048ea:	621a      	str	r2, [r3, #32]
}
 80048ec:	bf00      	nop
 80048ee:	371c      	adds	r7, #28
 80048f0:	46bd      	mov	sp, r7
 80048f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f6:	4770      	bx	lr
 80048f8:	40010000 	.word	0x40010000
 80048fc:	40010400 	.word	0x40010400

08004900 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004900:	b480      	push	{r7}
 8004902:	b087      	sub	sp, #28
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
 8004908:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6a1b      	ldr	r3, [r3, #32]
 800490e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6a1b      	ldr	r3, [r3, #32]
 800491a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	69db      	ldr	r3, [r3, #28]
 8004926:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800492e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004936:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	021b      	lsls	r3, r3, #8
 800493e:	68fa      	ldr	r2, [r7, #12]
 8004940:	4313      	orrs	r3, r2
 8004942:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800494a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	031b      	lsls	r3, r3, #12
 8004952:	693a      	ldr	r2, [r7, #16]
 8004954:	4313      	orrs	r3, r2
 8004956:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	4a12      	ldr	r2, [pc, #72]	; (80049a4 <TIM_OC4_SetConfig+0xa4>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d003      	beq.n	8004968 <TIM_OC4_SetConfig+0x68>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	4a11      	ldr	r2, [pc, #68]	; (80049a8 <TIM_OC4_SetConfig+0xa8>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d109      	bne.n	800497c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800496e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	695b      	ldr	r3, [r3, #20]
 8004974:	019b      	lsls	r3, r3, #6
 8004976:	697a      	ldr	r2, [r7, #20]
 8004978:	4313      	orrs	r3, r2
 800497a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	697a      	ldr	r2, [r7, #20]
 8004980:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	68fa      	ldr	r2, [r7, #12]
 8004986:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	685a      	ldr	r2, [r3, #4]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	693a      	ldr	r2, [r7, #16]
 8004994:	621a      	str	r2, [r3, #32]
}
 8004996:	bf00      	nop
 8004998:	371c      	adds	r7, #28
 800499a:	46bd      	mov	sp, r7
 800499c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a0:	4770      	bx	lr
 80049a2:	bf00      	nop
 80049a4:	40010000 	.word	0x40010000
 80049a8:	40010400 	.word	0x40010400

080049ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b087      	sub	sp, #28
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	60f8      	str	r0, [r7, #12]
 80049b4:	60b9      	str	r1, [r7, #8]
 80049b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	6a1b      	ldr	r3, [r3, #32]
 80049bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	6a1b      	ldr	r3, [r3, #32]
 80049c2:	f023 0201 	bic.w	r2, r3, #1
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	699b      	ldr	r3, [r3, #24]
 80049ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80049d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	011b      	lsls	r3, r3, #4
 80049dc:	693a      	ldr	r2, [r7, #16]
 80049de:	4313      	orrs	r3, r2
 80049e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	f023 030a 	bic.w	r3, r3, #10
 80049e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80049ea:	697a      	ldr	r2, [r7, #20]
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	4313      	orrs	r3, r2
 80049f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	693a      	ldr	r2, [r7, #16]
 80049f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	697a      	ldr	r2, [r7, #20]
 80049fc:	621a      	str	r2, [r3, #32]
}
 80049fe:	bf00      	nop
 8004a00:	371c      	adds	r7, #28
 8004a02:	46bd      	mov	sp, r7
 8004a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a08:	4770      	bx	lr

08004a0a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a0a:	b480      	push	{r7}
 8004a0c:	b087      	sub	sp, #28
 8004a0e:	af00      	add	r7, sp, #0
 8004a10:	60f8      	str	r0, [r7, #12]
 8004a12:	60b9      	str	r1, [r7, #8]
 8004a14:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	6a1b      	ldr	r3, [r3, #32]
 8004a1a:	f023 0210 	bic.w	r2, r3, #16
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	699b      	ldr	r3, [r3, #24]
 8004a26:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	6a1b      	ldr	r3, [r3, #32]
 8004a2c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a34:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	031b      	lsls	r3, r3, #12
 8004a3a:	697a      	ldr	r2, [r7, #20]
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004a46:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	011b      	lsls	r3, r3, #4
 8004a4c:	693a      	ldr	r2, [r7, #16]
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	697a      	ldr	r2, [r7, #20]
 8004a56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	693a      	ldr	r2, [r7, #16]
 8004a5c:	621a      	str	r2, [r3, #32]
}
 8004a5e:	bf00      	nop
 8004a60:	371c      	adds	r7, #28
 8004a62:	46bd      	mov	sp, r7
 8004a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a68:	4770      	bx	lr

08004a6a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004a6a:	b480      	push	{r7}
 8004a6c:	b085      	sub	sp, #20
 8004a6e:	af00      	add	r7, sp, #0
 8004a70:	6078      	str	r0, [r7, #4]
 8004a72:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a80:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004a82:	683a      	ldr	r2, [r7, #0]
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	4313      	orrs	r3, r2
 8004a88:	f043 0307 	orr.w	r3, r3, #7
 8004a8c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	68fa      	ldr	r2, [r7, #12]
 8004a92:	609a      	str	r2, [r3, #8]
}
 8004a94:	bf00      	nop
 8004a96:	3714      	adds	r7, #20
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9e:	4770      	bx	lr

08004aa0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b087      	sub	sp, #28
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	60f8      	str	r0, [r7, #12]
 8004aa8:	60b9      	str	r1, [r7, #8]
 8004aaa:	607a      	str	r2, [r7, #4]
 8004aac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004aba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	021a      	lsls	r2, r3, #8
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	431a      	orrs	r2, r3
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	697a      	ldr	r2, [r7, #20]
 8004aca:	4313      	orrs	r3, r2
 8004acc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	697a      	ldr	r2, [r7, #20]
 8004ad2:	609a      	str	r2, [r3, #8]
}
 8004ad4:	bf00      	nop
 8004ad6:	371c      	adds	r7, #28
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ade:	4770      	bx	lr

08004ae0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b087      	sub	sp, #28
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	60f8      	str	r0, [r7, #12]
 8004ae8:	60b9      	str	r1, [r7, #8]
 8004aea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	f003 031f 	and.w	r3, r3, #31
 8004af2:	2201      	movs	r2, #1
 8004af4:	fa02 f303 	lsl.w	r3, r2, r3
 8004af8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	6a1a      	ldr	r2, [r3, #32]
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	43db      	mvns	r3, r3
 8004b02:	401a      	ands	r2, r3
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	6a1a      	ldr	r2, [r3, #32]
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	f003 031f 	and.w	r3, r3, #31
 8004b12:	6879      	ldr	r1, [r7, #4]
 8004b14:	fa01 f303 	lsl.w	r3, r1, r3
 8004b18:	431a      	orrs	r2, r3
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	621a      	str	r2, [r3, #32]
}
 8004b1e:	bf00      	nop
 8004b20:	371c      	adds	r7, #28
 8004b22:	46bd      	mov	sp, r7
 8004b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b28:	4770      	bx	lr
	...

08004b2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b085      	sub	sp, #20
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
 8004b34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	d101      	bne.n	8004b44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b40:	2302      	movs	r3, #2
 8004b42:	e05a      	b.n	8004bfa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2201      	movs	r2, #1
 8004b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2202      	movs	r2, #2
 8004b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	689b      	ldr	r3, [r3, #8]
 8004b62:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b6a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	68fa      	ldr	r2, [r7, #12]
 8004b72:	4313      	orrs	r3, r2
 8004b74:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	68fa      	ldr	r2, [r7, #12]
 8004b7c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a21      	ldr	r2, [pc, #132]	; (8004c08 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d022      	beq.n	8004bce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b90:	d01d      	beq.n	8004bce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a1d      	ldr	r2, [pc, #116]	; (8004c0c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d018      	beq.n	8004bce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a1b      	ldr	r2, [pc, #108]	; (8004c10 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d013      	beq.n	8004bce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a1a      	ldr	r2, [pc, #104]	; (8004c14 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d00e      	beq.n	8004bce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a18      	ldr	r2, [pc, #96]	; (8004c18 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d009      	beq.n	8004bce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a17      	ldr	r2, [pc, #92]	; (8004c1c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d004      	beq.n	8004bce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a15      	ldr	r2, [pc, #84]	; (8004c20 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d10c      	bne.n	8004be8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004bd4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	68ba      	ldr	r2, [r7, #8]
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	68ba      	ldr	r2, [r7, #8]
 8004be6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2201      	movs	r2, #1
 8004bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004bf8:	2300      	movs	r3, #0
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	3714      	adds	r7, #20
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c04:	4770      	bx	lr
 8004c06:	bf00      	nop
 8004c08:	40010000 	.word	0x40010000
 8004c0c:	40000400 	.word	0x40000400
 8004c10:	40000800 	.word	0x40000800
 8004c14:	40000c00 	.word	0x40000c00
 8004c18:	40010400 	.word	0x40010400
 8004c1c:	40014000 	.word	0x40014000
 8004c20:	40001800 	.word	0x40001800

08004c24 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b083      	sub	sp, #12
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c2c:	bf00      	nop
 8004c2e:	370c      	adds	r7, #12
 8004c30:	46bd      	mov	sp, r7
 8004c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c36:	4770      	bx	lr

08004c38 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b083      	sub	sp, #12
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c40:	bf00      	nop
 8004c42:	370c      	adds	r7, #12
 8004c44:	46bd      	mov	sp, r7
 8004c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4a:	4770      	bx	lr

08004c4c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b082      	sub	sp, #8
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d101      	bne.n	8004c5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	e03f      	b.n	8004cde <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c64:	b2db      	uxtb	r3, r3
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d106      	bne.n	8004c78 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f7fc ff22 	bl	8001abc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2224      	movs	r2, #36	; 0x24
 8004c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	68da      	ldr	r2, [r3, #12]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c8e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004c90:	6878      	ldr	r0, [r7, #4]
 8004c92:	f000 fd7b 	bl	800578c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	691a      	ldr	r2, [r3, #16]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ca4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	695a      	ldr	r2, [r3, #20]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004cb4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	68da      	ldr	r2, [r3, #12]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004cc4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2220      	movs	r2, #32
 8004cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2220      	movs	r2, #32
 8004cd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004cdc:	2300      	movs	r3, #0
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3708      	adds	r7, #8
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}

08004ce6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ce6:	b580      	push	{r7, lr}
 8004ce8:	b08a      	sub	sp, #40	; 0x28
 8004cea:	af02      	add	r7, sp, #8
 8004cec:	60f8      	str	r0, [r7, #12]
 8004cee:	60b9      	str	r1, [r7, #8]
 8004cf0:	603b      	str	r3, [r7, #0]
 8004cf2:	4613      	mov	r3, r2
 8004cf4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d00:	b2db      	uxtb	r3, r3
 8004d02:	2b20      	cmp	r3, #32
 8004d04:	d17c      	bne.n	8004e00 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d002      	beq.n	8004d12 <HAL_UART_Transmit+0x2c>
 8004d0c:	88fb      	ldrh	r3, [r7, #6]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d101      	bne.n	8004d16 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004d12:	2301      	movs	r3, #1
 8004d14:	e075      	b.n	8004e02 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	d101      	bne.n	8004d24 <HAL_UART_Transmit+0x3e>
 8004d20:	2302      	movs	r3, #2
 8004d22:	e06e      	b.n	8004e02 <HAL_UART_Transmit+0x11c>
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	2201      	movs	r2, #1
 8004d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2221      	movs	r2, #33	; 0x21
 8004d36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d3a:	f7fc ff9f 	bl	8001c7c <HAL_GetTick>
 8004d3e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	88fa      	ldrh	r2, [r7, #6]
 8004d44:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	88fa      	ldrh	r2, [r7, #6]
 8004d4a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d54:	d108      	bne.n	8004d68 <HAL_UART_Transmit+0x82>
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	691b      	ldr	r3, [r3, #16]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d104      	bne.n	8004d68 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	61bb      	str	r3, [r7, #24]
 8004d66:	e003      	b.n	8004d70 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	2200      	movs	r2, #0
 8004d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004d78:	e02a      	b.n	8004dd0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	9300      	str	r3, [sp, #0]
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	2200      	movs	r2, #0
 8004d82:	2180      	movs	r1, #128	; 0x80
 8004d84:	68f8      	ldr	r0, [r7, #12]
 8004d86:	f000 faf9 	bl	800537c <UART_WaitOnFlagUntilTimeout>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d001      	beq.n	8004d94 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004d90:	2303      	movs	r3, #3
 8004d92:	e036      	b.n	8004e02 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004d94:	69fb      	ldr	r3, [r7, #28]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d10b      	bne.n	8004db2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004d9a:	69bb      	ldr	r3, [r7, #24]
 8004d9c:	881b      	ldrh	r3, [r3, #0]
 8004d9e:	461a      	mov	r2, r3
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004da8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004daa:	69bb      	ldr	r3, [r7, #24]
 8004dac:	3302      	adds	r3, #2
 8004dae:	61bb      	str	r3, [r7, #24]
 8004db0:	e007      	b.n	8004dc2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004db2:	69fb      	ldr	r3, [r7, #28]
 8004db4:	781a      	ldrb	r2, [r3, #0]
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004dbc:	69fb      	ldr	r3, [r7, #28]
 8004dbe:	3301      	adds	r3, #1
 8004dc0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004dc6:	b29b      	uxth	r3, r3
 8004dc8:	3b01      	subs	r3, #1
 8004dca:	b29a      	uxth	r2, r3
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004dd4:	b29b      	uxth	r3, r3
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d1cf      	bne.n	8004d7a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	9300      	str	r3, [sp, #0]
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	2200      	movs	r2, #0
 8004de2:	2140      	movs	r1, #64	; 0x40
 8004de4:	68f8      	ldr	r0, [r7, #12]
 8004de6:	f000 fac9 	bl	800537c <UART_WaitOnFlagUntilTimeout>
 8004dea:	4603      	mov	r3, r0
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d001      	beq.n	8004df4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004df0:	2303      	movs	r3, #3
 8004df2:	e006      	b.n	8004e02 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	2220      	movs	r2, #32
 8004df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	e000      	b.n	8004e02 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004e00:	2302      	movs	r3, #2
  }
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	3720      	adds	r7, #32
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}
	...

08004e0c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b0ba      	sub	sp, #232	; 0xe8
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	68db      	ldr	r3, [r3, #12]
 8004e24:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	695b      	ldr	r3, [r3, #20]
 8004e2e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004e32:	2300      	movs	r3, #0
 8004e34:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004e38:	2300      	movs	r3, #0
 8004e3a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004e3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e42:	f003 030f 	and.w	r3, r3, #15
 8004e46:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004e4a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d10f      	bne.n	8004e72 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004e52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e56:	f003 0320 	and.w	r3, r3, #32
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d009      	beq.n	8004e72 <HAL_UART_IRQHandler+0x66>
 8004e5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e62:	f003 0320 	and.w	r3, r3, #32
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d003      	beq.n	8004e72 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	f000 fbd3 	bl	8005616 <UART_Receive_IT>
      return;
 8004e70:	e256      	b.n	8005320 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004e72:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	f000 80de 	beq.w	8005038 <HAL_UART_IRQHandler+0x22c>
 8004e7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e80:	f003 0301 	and.w	r3, r3, #1
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d106      	bne.n	8004e96 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004e88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e8c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	f000 80d1 	beq.w	8005038 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004e96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e9a:	f003 0301 	and.w	r3, r3, #1
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d00b      	beq.n	8004eba <HAL_UART_IRQHandler+0xae>
 8004ea2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ea6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d005      	beq.n	8004eba <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb2:	f043 0201 	orr.w	r2, r3, #1
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004eba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ebe:	f003 0304 	and.w	r3, r3, #4
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d00b      	beq.n	8004ede <HAL_UART_IRQHandler+0xd2>
 8004ec6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004eca:	f003 0301 	and.w	r3, r3, #1
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d005      	beq.n	8004ede <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed6:	f043 0202 	orr.w	r2, r3, #2
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004ede:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ee2:	f003 0302 	and.w	r3, r3, #2
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d00b      	beq.n	8004f02 <HAL_UART_IRQHandler+0xf6>
 8004eea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004eee:	f003 0301 	and.w	r3, r3, #1
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d005      	beq.n	8004f02 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004efa:	f043 0204 	orr.w	r2, r3, #4
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004f02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f06:	f003 0308 	and.w	r3, r3, #8
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d011      	beq.n	8004f32 <HAL_UART_IRQHandler+0x126>
 8004f0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f12:	f003 0320 	and.w	r3, r3, #32
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d105      	bne.n	8004f26 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004f1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f1e:	f003 0301 	and.w	r3, r3, #1
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d005      	beq.n	8004f32 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f2a:	f043 0208 	orr.w	r2, r3, #8
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	f000 81ed 	beq.w	8005316 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004f3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f40:	f003 0320 	and.w	r3, r3, #32
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d008      	beq.n	8004f5a <HAL_UART_IRQHandler+0x14e>
 8004f48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f4c:	f003 0320 	and.w	r3, r3, #32
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d002      	beq.n	8004f5a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004f54:	6878      	ldr	r0, [r7, #4]
 8004f56:	f000 fb5e 	bl	8005616 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	695b      	ldr	r3, [r3, #20]
 8004f60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f64:	2b40      	cmp	r3, #64	; 0x40
 8004f66:	bf0c      	ite	eq
 8004f68:	2301      	moveq	r3, #1
 8004f6a:	2300      	movne	r3, #0
 8004f6c:	b2db      	uxtb	r3, r3
 8004f6e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f76:	f003 0308 	and.w	r3, r3, #8
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d103      	bne.n	8004f86 <HAL_UART_IRQHandler+0x17a>
 8004f7e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d04f      	beq.n	8005026 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f000 fa66 	bl	8005458 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	695b      	ldr	r3, [r3, #20]
 8004f92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f96:	2b40      	cmp	r3, #64	; 0x40
 8004f98:	d141      	bne.n	800501e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	3314      	adds	r3, #20
 8004fa0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fa4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004fa8:	e853 3f00 	ldrex	r3, [r3]
 8004fac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004fb0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004fb4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fb8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	3314      	adds	r3, #20
 8004fc2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004fc6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004fca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004fd2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004fd6:	e841 2300 	strex	r3, r2, [r1]
 8004fda:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004fde:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d1d9      	bne.n	8004f9a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d013      	beq.n	8005016 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ff2:	4a7d      	ldr	r2, [pc, #500]	; (80051e8 <HAL_UART_IRQHandler+0x3dc>)
 8004ff4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f7fd fd18 	bl	8002a30 <HAL_DMA_Abort_IT>
 8005000:	4603      	mov	r3, r0
 8005002:	2b00      	cmp	r3, #0
 8005004:	d016      	beq.n	8005034 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800500a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800500c:	687a      	ldr	r2, [r7, #4]
 800500e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005010:	4610      	mov	r0, r2
 8005012:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005014:	e00e      	b.n	8005034 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f000 f99a 	bl	8005350 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800501c:	e00a      	b.n	8005034 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f000 f996 	bl	8005350 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005024:	e006      	b.n	8005034 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f000 f992 	bl	8005350 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2200      	movs	r2, #0
 8005030:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005032:	e170      	b.n	8005316 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005034:	bf00      	nop
    return;
 8005036:	e16e      	b.n	8005316 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800503c:	2b01      	cmp	r3, #1
 800503e:	f040 814a 	bne.w	80052d6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005042:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005046:	f003 0310 	and.w	r3, r3, #16
 800504a:	2b00      	cmp	r3, #0
 800504c:	f000 8143 	beq.w	80052d6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005050:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005054:	f003 0310 	and.w	r3, r3, #16
 8005058:	2b00      	cmp	r3, #0
 800505a:	f000 813c 	beq.w	80052d6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800505e:	2300      	movs	r3, #0
 8005060:	60bb      	str	r3, [r7, #8]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	60bb      	str	r3, [r7, #8]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	60bb      	str	r3, [r7, #8]
 8005072:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	695b      	ldr	r3, [r3, #20]
 800507a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800507e:	2b40      	cmp	r3, #64	; 0x40
 8005080:	f040 80b4 	bne.w	80051ec <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005090:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005094:	2b00      	cmp	r3, #0
 8005096:	f000 8140 	beq.w	800531a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800509e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80050a2:	429a      	cmp	r2, r3
 80050a4:	f080 8139 	bcs.w	800531a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80050ae:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050b4:	69db      	ldr	r3, [r3, #28]
 80050b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050ba:	f000 8088 	beq.w	80051ce <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	330c      	adds	r3, #12
 80050c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80050cc:	e853 3f00 	ldrex	r3, [r3]
 80050d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80050d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80050d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80050dc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	330c      	adds	r3, #12
 80050e6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80050ea:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80050ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050f2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80050f6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80050fa:	e841 2300 	strex	r3, r2, [r1]
 80050fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005102:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005106:	2b00      	cmp	r3, #0
 8005108:	d1d9      	bne.n	80050be <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	3314      	adds	r3, #20
 8005110:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005112:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005114:	e853 3f00 	ldrex	r3, [r3]
 8005118:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800511a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800511c:	f023 0301 	bic.w	r3, r3, #1
 8005120:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	3314      	adds	r3, #20
 800512a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800512e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005132:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005134:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005136:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800513a:	e841 2300 	strex	r3, r2, [r1]
 800513e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005140:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005142:	2b00      	cmp	r3, #0
 8005144:	d1e1      	bne.n	800510a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	3314      	adds	r3, #20
 800514c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800514e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005150:	e853 3f00 	ldrex	r3, [r3]
 8005154:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005156:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005158:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800515c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	3314      	adds	r3, #20
 8005166:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800516a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800516c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800516e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005170:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005172:	e841 2300 	strex	r3, r2, [r1]
 8005176:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005178:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800517a:	2b00      	cmp	r3, #0
 800517c:	d1e3      	bne.n	8005146 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2220      	movs	r2, #32
 8005182:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2200      	movs	r2, #0
 800518a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	330c      	adds	r3, #12
 8005192:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005194:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005196:	e853 3f00 	ldrex	r3, [r3]
 800519a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800519c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800519e:	f023 0310 	bic.w	r3, r3, #16
 80051a2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	330c      	adds	r3, #12
 80051ac:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80051b0:	65ba      	str	r2, [r7, #88]	; 0x58
 80051b2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051b4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80051b6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80051b8:	e841 2300 	strex	r3, r2, [r1]
 80051bc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80051be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d1e3      	bne.n	800518c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051c8:	4618      	mov	r0, r3
 80051ca:	f7fd fbc1 	bl	8002950 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80051d6:	b29b      	uxth	r3, r3
 80051d8:	1ad3      	subs	r3, r2, r3
 80051da:	b29b      	uxth	r3, r3
 80051dc:	4619      	mov	r1, r3
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f000 f8c0 	bl	8005364 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80051e4:	e099      	b.n	800531a <HAL_UART_IRQHandler+0x50e>
 80051e6:	bf00      	nop
 80051e8:	0800551f 	.word	0x0800551f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80051f4:	b29b      	uxth	r3, r3
 80051f6:	1ad3      	subs	r3, r2, r3
 80051f8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005200:	b29b      	uxth	r3, r3
 8005202:	2b00      	cmp	r3, #0
 8005204:	f000 808b 	beq.w	800531e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005208:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800520c:	2b00      	cmp	r3, #0
 800520e:	f000 8086 	beq.w	800531e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	330c      	adds	r3, #12
 8005218:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800521a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800521c:	e853 3f00 	ldrex	r3, [r3]
 8005220:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005222:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005224:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005228:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	330c      	adds	r3, #12
 8005232:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005236:	647a      	str	r2, [r7, #68]	; 0x44
 8005238:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800523a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800523c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800523e:	e841 2300 	strex	r3, r2, [r1]
 8005242:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005244:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005246:	2b00      	cmp	r3, #0
 8005248:	d1e3      	bne.n	8005212 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	3314      	adds	r3, #20
 8005250:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005254:	e853 3f00 	ldrex	r3, [r3]
 8005258:	623b      	str	r3, [r7, #32]
   return(result);
 800525a:	6a3b      	ldr	r3, [r7, #32]
 800525c:	f023 0301 	bic.w	r3, r3, #1
 8005260:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	3314      	adds	r3, #20
 800526a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800526e:	633a      	str	r2, [r7, #48]	; 0x30
 8005270:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005272:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005274:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005276:	e841 2300 	strex	r3, r2, [r1]
 800527a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800527c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800527e:	2b00      	cmp	r3, #0
 8005280:	d1e3      	bne.n	800524a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2220      	movs	r2, #32
 8005286:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2200      	movs	r2, #0
 800528e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	330c      	adds	r3, #12
 8005296:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	e853 3f00 	ldrex	r3, [r3]
 800529e:	60fb      	str	r3, [r7, #12]
   return(result);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	f023 0310 	bic.w	r3, r3, #16
 80052a6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	330c      	adds	r3, #12
 80052b0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80052b4:	61fa      	str	r2, [r7, #28]
 80052b6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052b8:	69b9      	ldr	r1, [r7, #24]
 80052ba:	69fa      	ldr	r2, [r7, #28]
 80052bc:	e841 2300 	strex	r3, r2, [r1]
 80052c0:	617b      	str	r3, [r7, #20]
   return(result);
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d1e3      	bne.n	8005290 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80052c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80052cc:	4619      	mov	r1, r3
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f000 f848 	bl	8005364 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80052d4:	e023      	b.n	800531e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80052d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d009      	beq.n	80052f6 <HAL_UART_IRQHandler+0x4ea>
 80052e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d003      	beq.n	80052f6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f000 f929 	bl	8005546 <UART_Transmit_IT>
    return;
 80052f4:	e014      	b.n	8005320 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80052f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d00e      	beq.n	8005320 <HAL_UART_IRQHandler+0x514>
 8005302:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005306:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800530a:	2b00      	cmp	r3, #0
 800530c:	d008      	beq.n	8005320 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f000 f969 	bl	80055e6 <UART_EndTransmit_IT>
    return;
 8005314:	e004      	b.n	8005320 <HAL_UART_IRQHandler+0x514>
    return;
 8005316:	bf00      	nop
 8005318:	e002      	b.n	8005320 <HAL_UART_IRQHandler+0x514>
      return;
 800531a:	bf00      	nop
 800531c:	e000      	b.n	8005320 <HAL_UART_IRQHandler+0x514>
      return;
 800531e:	bf00      	nop
  }
}
 8005320:	37e8      	adds	r7, #232	; 0xe8
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}
 8005326:	bf00      	nop

08005328 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005328:	b480      	push	{r7}
 800532a:	b083      	sub	sp, #12
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005330:	bf00      	nop
 8005332:	370c      	adds	r7, #12
 8005334:	46bd      	mov	sp, r7
 8005336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533a:	4770      	bx	lr

0800533c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800533c:	b480      	push	{r7}
 800533e:	b083      	sub	sp, #12
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005344:	bf00      	nop
 8005346:	370c      	adds	r7, #12
 8005348:	46bd      	mov	sp, r7
 800534a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534e:	4770      	bx	lr

08005350 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005350:	b480      	push	{r7}
 8005352:	b083      	sub	sp, #12
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005358:	bf00      	nop
 800535a:	370c      	adds	r7, #12
 800535c:	46bd      	mov	sp, r7
 800535e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005362:	4770      	bx	lr

08005364 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005364:	b480      	push	{r7}
 8005366:	b083      	sub	sp, #12
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
 800536c:	460b      	mov	r3, r1
 800536e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005370:	bf00      	nop
 8005372:	370c      	adds	r7, #12
 8005374:	46bd      	mov	sp, r7
 8005376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537a:	4770      	bx	lr

0800537c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b090      	sub	sp, #64	; 0x40
 8005380:	af00      	add	r7, sp, #0
 8005382:	60f8      	str	r0, [r7, #12]
 8005384:	60b9      	str	r1, [r7, #8]
 8005386:	603b      	str	r3, [r7, #0]
 8005388:	4613      	mov	r3, r2
 800538a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800538c:	e050      	b.n	8005430 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800538e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005390:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005394:	d04c      	beq.n	8005430 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005396:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005398:	2b00      	cmp	r3, #0
 800539a:	d007      	beq.n	80053ac <UART_WaitOnFlagUntilTimeout+0x30>
 800539c:	f7fc fc6e 	bl	8001c7c <HAL_GetTick>
 80053a0:	4602      	mov	r2, r0
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	1ad3      	subs	r3, r2, r3
 80053a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80053a8:	429a      	cmp	r2, r3
 80053aa:	d241      	bcs.n	8005430 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	330c      	adds	r3, #12
 80053b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053b6:	e853 3f00 	ldrex	r3, [r3]
 80053ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80053bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053be:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80053c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	330c      	adds	r3, #12
 80053ca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80053cc:	637a      	str	r2, [r7, #52]	; 0x34
 80053ce:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80053d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80053d4:	e841 2300 	strex	r3, r2, [r1]
 80053d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80053da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d1e5      	bne.n	80053ac <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	3314      	adds	r3, #20
 80053e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	e853 3f00 	ldrex	r3, [r3]
 80053ee:	613b      	str	r3, [r7, #16]
   return(result);
 80053f0:	693b      	ldr	r3, [r7, #16]
 80053f2:	f023 0301 	bic.w	r3, r3, #1
 80053f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	3314      	adds	r3, #20
 80053fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005400:	623a      	str	r2, [r7, #32]
 8005402:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005404:	69f9      	ldr	r1, [r7, #28]
 8005406:	6a3a      	ldr	r2, [r7, #32]
 8005408:	e841 2300 	strex	r3, r2, [r1]
 800540c:	61bb      	str	r3, [r7, #24]
   return(result);
 800540e:	69bb      	ldr	r3, [r7, #24]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d1e5      	bne.n	80053e0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	2220      	movs	r2, #32
 8005418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	2220      	movs	r2, #32
 8005420:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	2200      	movs	r2, #0
 8005428:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800542c:	2303      	movs	r3, #3
 800542e:	e00f      	b.n	8005450 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	681a      	ldr	r2, [r3, #0]
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	4013      	ands	r3, r2
 800543a:	68ba      	ldr	r2, [r7, #8]
 800543c:	429a      	cmp	r2, r3
 800543e:	bf0c      	ite	eq
 8005440:	2301      	moveq	r3, #1
 8005442:	2300      	movne	r3, #0
 8005444:	b2db      	uxtb	r3, r3
 8005446:	461a      	mov	r2, r3
 8005448:	79fb      	ldrb	r3, [r7, #7]
 800544a:	429a      	cmp	r2, r3
 800544c:	d09f      	beq.n	800538e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800544e:	2300      	movs	r3, #0
}
 8005450:	4618      	mov	r0, r3
 8005452:	3740      	adds	r7, #64	; 0x40
 8005454:	46bd      	mov	sp, r7
 8005456:	bd80      	pop	{r7, pc}

08005458 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005458:	b480      	push	{r7}
 800545a:	b095      	sub	sp, #84	; 0x54
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	330c      	adds	r3, #12
 8005466:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005468:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800546a:	e853 3f00 	ldrex	r3, [r3]
 800546e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005472:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005476:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	330c      	adds	r3, #12
 800547e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005480:	643a      	str	r2, [r7, #64]	; 0x40
 8005482:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005484:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005486:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005488:	e841 2300 	strex	r3, r2, [r1]
 800548c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800548e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005490:	2b00      	cmp	r3, #0
 8005492:	d1e5      	bne.n	8005460 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	3314      	adds	r3, #20
 800549a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800549c:	6a3b      	ldr	r3, [r7, #32]
 800549e:	e853 3f00 	ldrex	r3, [r3]
 80054a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80054a4:	69fb      	ldr	r3, [r7, #28]
 80054a6:	f023 0301 	bic.w	r3, r3, #1
 80054aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	3314      	adds	r3, #20
 80054b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80054b4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80054b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80054ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054bc:	e841 2300 	strex	r3, r2, [r1]
 80054c0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80054c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d1e5      	bne.n	8005494 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054cc:	2b01      	cmp	r3, #1
 80054ce:	d119      	bne.n	8005504 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	330c      	adds	r3, #12
 80054d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	e853 3f00 	ldrex	r3, [r3]
 80054de:	60bb      	str	r3, [r7, #8]
   return(result);
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	f023 0310 	bic.w	r3, r3, #16
 80054e6:	647b      	str	r3, [r7, #68]	; 0x44
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	330c      	adds	r3, #12
 80054ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80054f0:	61ba      	str	r2, [r7, #24]
 80054f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054f4:	6979      	ldr	r1, [r7, #20]
 80054f6:	69ba      	ldr	r2, [r7, #24]
 80054f8:	e841 2300 	strex	r3, r2, [r1]
 80054fc:	613b      	str	r3, [r7, #16]
   return(result);
 80054fe:	693b      	ldr	r3, [r7, #16]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d1e5      	bne.n	80054d0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2220      	movs	r2, #32
 8005508:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2200      	movs	r2, #0
 8005510:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005512:	bf00      	nop
 8005514:	3754      	adds	r7, #84	; 0x54
 8005516:	46bd      	mov	sp, r7
 8005518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551c:	4770      	bx	lr

0800551e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800551e:	b580      	push	{r7, lr}
 8005520:	b084      	sub	sp, #16
 8005522:	af00      	add	r7, sp, #0
 8005524:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800552a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	2200      	movs	r2, #0
 8005530:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2200      	movs	r2, #0
 8005536:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005538:	68f8      	ldr	r0, [r7, #12]
 800553a:	f7ff ff09 	bl	8005350 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800553e:	bf00      	nop
 8005540:	3710      	adds	r7, #16
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}

08005546 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005546:	b480      	push	{r7}
 8005548:	b085      	sub	sp, #20
 800554a:	af00      	add	r7, sp, #0
 800554c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005554:	b2db      	uxtb	r3, r3
 8005556:	2b21      	cmp	r3, #33	; 0x21
 8005558:	d13e      	bne.n	80055d8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	689b      	ldr	r3, [r3, #8]
 800555e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005562:	d114      	bne.n	800558e <UART_Transmit_IT+0x48>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	691b      	ldr	r3, [r3, #16]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d110      	bne.n	800558e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6a1b      	ldr	r3, [r3, #32]
 8005570:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	881b      	ldrh	r3, [r3, #0]
 8005576:	461a      	mov	r2, r3
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005580:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6a1b      	ldr	r3, [r3, #32]
 8005586:	1c9a      	adds	r2, r3, #2
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	621a      	str	r2, [r3, #32]
 800558c:	e008      	b.n	80055a0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6a1b      	ldr	r3, [r3, #32]
 8005592:	1c59      	adds	r1, r3, #1
 8005594:	687a      	ldr	r2, [r7, #4]
 8005596:	6211      	str	r1, [r2, #32]
 8005598:	781a      	ldrb	r2, [r3, #0]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80055a4:	b29b      	uxth	r3, r3
 80055a6:	3b01      	subs	r3, #1
 80055a8:	b29b      	uxth	r3, r3
 80055aa:	687a      	ldr	r2, [r7, #4]
 80055ac:	4619      	mov	r1, r3
 80055ae:	84d1      	strh	r1, [r2, #38]	; 0x26
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d10f      	bne.n	80055d4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	68da      	ldr	r2, [r3, #12]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80055c2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	68da      	ldr	r2, [r3, #12]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80055d2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80055d4:	2300      	movs	r3, #0
 80055d6:	e000      	b.n	80055da <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80055d8:	2302      	movs	r3, #2
  }
}
 80055da:	4618      	mov	r0, r3
 80055dc:	3714      	adds	r7, #20
 80055de:	46bd      	mov	sp, r7
 80055e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e4:	4770      	bx	lr

080055e6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80055e6:	b580      	push	{r7, lr}
 80055e8:	b082      	sub	sp, #8
 80055ea:	af00      	add	r7, sp, #0
 80055ec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	68da      	ldr	r2, [r3, #12]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055fc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2220      	movs	r2, #32
 8005602:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005606:	6878      	ldr	r0, [r7, #4]
 8005608:	f7ff fe8e 	bl	8005328 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800560c:	2300      	movs	r3, #0
}
 800560e:	4618      	mov	r0, r3
 8005610:	3708      	adds	r7, #8
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}

08005616 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005616:	b580      	push	{r7, lr}
 8005618:	b08c      	sub	sp, #48	; 0x30
 800561a:	af00      	add	r7, sp, #0
 800561c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005624:	b2db      	uxtb	r3, r3
 8005626:	2b22      	cmp	r3, #34	; 0x22
 8005628:	f040 80ab 	bne.w	8005782 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	689b      	ldr	r3, [r3, #8]
 8005630:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005634:	d117      	bne.n	8005666 <UART_Receive_IT+0x50>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	691b      	ldr	r3, [r3, #16]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d113      	bne.n	8005666 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800563e:	2300      	movs	r3, #0
 8005640:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005646:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	b29b      	uxth	r3, r3
 8005650:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005654:	b29a      	uxth	r2, r3
 8005656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005658:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800565e:	1c9a      	adds	r2, r3, #2
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	629a      	str	r2, [r3, #40]	; 0x28
 8005664:	e026      	b.n	80056b4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800566a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800566c:	2300      	movs	r3, #0
 800566e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	689b      	ldr	r3, [r3, #8]
 8005674:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005678:	d007      	beq.n	800568a <UART_Receive_IT+0x74>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	689b      	ldr	r3, [r3, #8]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d10a      	bne.n	8005698 <UART_Receive_IT+0x82>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	691b      	ldr	r3, [r3, #16]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d106      	bne.n	8005698 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	b2da      	uxtb	r2, r3
 8005692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005694:	701a      	strb	r2, [r3, #0]
 8005696:	e008      	b.n	80056aa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	b2db      	uxtb	r3, r3
 80056a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056a4:	b2da      	uxtb	r2, r3
 80056a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056a8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ae:	1c5a      	adds	r2, r3, #1
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80056b8:	b29b      	uxth	r3, r3
 80056ba:	3b01      	subs	r3, #1
 80056bc:	b29b      	uxth	r3, r3
 80056be:	687a      	ldr	r2, [r7, #4]
 80056c0:	4619      	mov	r1, r3
 80056c2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d15a      	bne.n	800577e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	68da      	ldr	r2, [r3, #12]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f022 0220 	bic.w	r2, r2, #32
 80056d6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	68da      	ldr	r2, [r3, #12]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80056e6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	695a      	ldr	r2, [r3, #20]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f022 0201 	bic.w	r2, r2, #1
 80056f6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2220      	movs	r2, #32
 80056fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005704:	2b01      	cmp	r3, #1
 8005706:	d135      	bne.n	8005774 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2200      	movs	r2, #0
 800570c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	330c      	adds	r3, #12
 8005714:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	e853 3f00 	ldrex	r3, [r3]
 800571c:	613b      	str	r3, [r7, #16]
   return(result);
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	f023 0310 	bic.w	r3, r3, #16
 8005724:	627b      	str	r3, [r7, #36]	; 0x24
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	330c      	adds	r3, #12
 800572c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800572e:	623a      	str	r2, [r7, #32]
 8005730:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005732:	69f9      	ldr	r1, [r7, #28]
 8005734:	6a3a      	ldr	r2, [r7, #32]
 8005736:	e841 2300 	strex	r3, r2, [r1]
 800573a:	61bb      	str	r3, [r7, #24]
   return(result);
 800573c:	69bb      	ldr	r3, [r7, #24]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d1e5      	bne.n	800570e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f003 0310 	and.w	r3, r3, #16
 800574c:	2b10      	cmp	r3, #16
 800574e:	d10a      	bne.n	8005766 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005750:	2300      	movs	r3, #0
 8005752:	60fb      	str	r3, [r7, #12]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	60fb      	str	r3, [r7, #12]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	60fb      	str	r3, [r7, #12]
 8005764:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800576a:	4619      	mov	r1, r3
 800576c:	6878      	ldr	r0, [r7, #4]
 800576e:	f7ff fdf9 	bl	8005364 <HAL_UARTEx_RxEventCallback>
 8005772:	e002      	b.n	800577a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	f7ff fde1 	bl	800533c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800577a:	2300      	movs	r3, #0
 800577c:	e002      	b.n	8005784 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800577e:	2300      	movs	r3, #0
 8005780:	e000      	b.n	8005784 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005782:	2302      	movs	r3, #2
  }
}
 8005784:	4618      	mov	r0, r3
 8005786:	3730      	adds	r7, #48	; 0x30
 8005788:	46bd      	mov	sp, r7
 800578a:	bd80      	pop	{r7, pc}

0800578c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800578c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005790:	b0c0      	sub	sp, #256	; 0x100
 8005792:	af00      	add	r7, sp, #0
 8005794:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005798:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	691b      	ldr	r3, [r3, #16]
 80057a0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80057a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057a8:	68d9      	ldr	r1, [r3, #12]
 80057aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057ae:	681a      	ldr	r2, [r3, #0]
 80057b0:	ea40 0301 	orr.w	r3, r0, r1
 80057b4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80057b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057ba:	689a      	ldr	r2, [r3, #8]
 80057bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057c0:	691b      	ldr	r3, [r3, #16]
 80057c2:	431a      	orrs	r2, r3
 80057c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057c8:	695b      	ldr	r3, [r3, #20]
 80057ca:	431a      	orrs	r2, r3
 80057cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057d0:	69db      	ldr	r3, [r3, #28]
 80057d2:	4313      	orrs	r3, r2
 80057d4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80057d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	68db      	ldr	r3, [r3, #12]
 80057e0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80057e4:	f021 010c 	bic.w	r1, r1, #12
 80057e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057ec:	681a      	ldr	r2, [r3, #0]
 80057ee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80057f2:	430b      	orrs	r3, r1
 80057f4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80057f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	695b      	ldr	r3, [r3, #20]
 80057fe:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005802:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005806:	6999      	ldr	r1, [r3, #24]
 8005808:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800580c:	681a      	ldr	r2, [r3, #0]
 800580e:	ea40 0301 	orr.w	r3, r0, r1
 8005812:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005818:	681a      	ldr	r2, [r3, #0]
 800581a:	4b8f      	ldr	r3, [pc, #572]	; (8005a58 <UART_SetConfig+0x2cc>)
 800581c:	429a      	cmp	r2, r3
 800581e:	d005      	beq.n	800582c <UART_SetConfig+0xa0>
 8005820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005824:	681a      	ldr	r2, [r3, #0]
 8005826:	4b8d      	ldr	r3, [pc, #564]	; (8005a5c <UART_SetConfig+0x2d0>)
 8005828:	429a      	cmp	r2, r3
 800582a:	d104      	bne.n	8005836 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800582c:	f7fe fa26 	bl	8003c7c <HAL_RCC_GetPCLK2Freq>
 8005830:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005834:	e003      	b.n	800583e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005836:	f7fe fa0d 	bl	8003c54 <HAL_RCC_GetPCLK1Freq>
 800583a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800583e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005842:	69db      	ldr	r3, [r3, #28]
 8005844:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005848:	f040 810c 	bne.w	8005a64 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800584c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005850:	2200      	movs	r2, #0
 8005852:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005856:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800585a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800585e:	4622      	mov	r2, r4
 8005860:	462b      	mov	r3, r5
 8005862:	1891      	adds	r1, r2, r2
 8005864:	65b9      	str	r1, [r7, #88]	; 0x58
 8005866:	415b      	adcs	r3, r3
 8005868:	65fb      	str	r3, [r7, #92]	; 0x5c
 800586a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800586e:	4621      	mov	r1, r4
 8005870:	eb12 0801 	adds.w	r8, r2, r1
 8005874:	4629      	mov	r1, r5
 8005876:	eb43 0901 	adc.w	r9, r3, r1
 800587a:	f04f 0200 	mov.w	r2, #0
 800587e:	f04f 0300 	mov.w	r3, #0
 8005882:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005886:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800588a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800588e:	4690      	mov	r8, r2
 8005890:	4699      	mov	r9, r3
 8005892:	4623      	mov	r3, r4
 8005894:	eb18 0303 	adds.w	r3, r8, r3
 8005898:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800589c:	462b      	mov	r3, r5
 800589e:	eb49 0303 	adc.w	r3, r9, r3
 80058a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80058a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	2200      	movs	r2, #0
 80058ae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80058b2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80058b6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80058ba:	460b      	mov	r3, r1
 80058bc:	18db      	adds	r3, r3, r3
 80058be:	653b      	str	r3, [r7, #80]	; 0x50
 80058c0:	4613      	mov	r3, r2
 80058c2:	eb42 0303 	adc.w	r3, r2, r3
 80058c6:	657b      	str	r3, [r7, #84]	; 0x54
 80058c8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80058cc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80058d0:	f7fb f9ea 	bl	8000ca8 <__aeabi_uldivmod>
 80058d4:	4602      	mov	r2, r0
 80058d6:	460b      	mov	r3, r1
 80058d8:	4b61      	ldr	r3, [pc, #388]	; (8005a60 <UART_SetConfig+0x2d4>)
 80058da:	fba3 2302 	umull	r2, r3, r3, r2
 80058de:	095b      	lsrs	r3, r3, #5
 80058e0:	011c      	lsls	r4, r3, #4
 80058e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80058e6:	2200      	movs	r2, #0
 80058e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80058ec:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80058f0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80058f4:	4642      	mov	r2, r8
 80058f6:	464b      	mov	r3, r9
 80058f8:	1891      	adds	r1, r2, r2
 80058fa:	64b9      	str	r1, [r7, #72]	; 0x48
 80058fc:	415b      	adcs	r3, r3
 80058fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005900:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005904:	4641      	mov	r1, r8
 8005906:	eb12 0a01 	adds.w	sl, r2, r1
 800590a:	4649      	mov	r1, r9
 800590c:	eb43 0b01 	adc.w	fp, r3, r1
 8005910:	f04f 0200 	mov.w	r2, #0
 8005914:	f04f 0300 	mov.w	r3, #0
 8005918:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800591c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005920:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005924:	4692      	mov	sl, r2
 8005926:	469b      	mov	fp, r3
 8005928:	4643      	mov	r3, r8
 800592a:	eb1a 0303 	adds.w	r3, sl, r3
 800592e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005932:	464b      	mov	r3, r9
 8005934:	eb4b 0303 	adc.w	r3, fp, r3
 8005938:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800593c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	2200      	movs	r2, #0
 8005944:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005948:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800594c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005950:	460b      	mov	r3, r1
 8005952:	18db      	adds	r3, r3, r3
 8005954:	643b      	str	r3, [r7, #64]	; 0x40
 8005956:	4613      	mov	r3, r2
 8005958:	eb42 0303 	adc.w	r3, r2, r3
 800595c:	647b      	str	r3, [r7, #68]	; 0x44
 800595e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005962:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005966:	f7fb f99f 	bl	8000ca8 <__aeabi_uldivmod>
 800596a:	4602      	mov	r2, r0
 800596c:	460b      	mov	r3, r1
 800596e:	4611      	mov	r1, r2
 8005970:	4b3b      	ldr	r3, [pc, #236]	; (8005a60 <UART_SetConfig+0x2d4>)
 8005972:	fba3 2301 	umull	r2, r3, r3, r1
 8005976:	095b      	lsrs	r3, r3, #5
 8005978:	2264      	movs	r2, #100	; 0x64
 800597a:	fb02 f303 	mul.w	r3, r2, r3
 800597e:	1acb      	subs	r3, r1, r3
 8005980:	00db      	lsls	r3, r3, #3
 8005982:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005986:	4b36      	ldr	r3, [pc, #216]	; (8005a60 <UART_SetConfig+0x2d4>)
 8005988:	fba3 2302 	umull	r2, r3, r3, r2
 800598c:	095b      	lsrs	r3, r3, #5
 800598e:	005b      	lsls	r3, r3, #1
 8005990:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005994:	441c      	add	r4, r3
 8005996:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800599a:	2200      	movs	r2, #0
 800599c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80059a0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80059a4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80059a8:	4642      	mov	r2, r8
 80059aa:	464b      	mov	r3, r9
 80059ac:	1891      	adds	r1, r2, r2
 80059ae:	63b9      	str	r1, [r7, #56]	; 0x38
 80059b0:	415b      	adcs	r3, r3
 80059b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80059b8:	4641      	mov	r1, r8
 80059ba:	1851      	adds	r1, r2, r1
 80059bc:	6339      	str	r1, [r7, #48]	; 0x30
 80059be:	4649      	mov	r1, r9
 80059c0:	414b      	adcs	r3, r1
 80059c2:	637b      	str	r3, [r7, #52]	; 0x34
 80059c4:	f04f 0200 	mov.w	r2, #0
 80059c8:	f04f 0300 	mov.w	r3, #0
 80059cc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80059d0:	4659      	mov	r1, fp
 80059d2:	00cb      	lsls	r3, r1, #3
 80059d4:	4651      	mov	r1, sl
 80059d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80059da:	4651      	mov	r1, sl
 80059dc:	00ca      	lsls	r2, r1, #3
 80059de:	4610      	mov	r0, r2
 80059e0:	4619      	mov	r1, r3
 80059e2:	4603      	mov	r3, r0
 80059e4:	4642      	mov	r2, r8
 80059e6:	189b      	adds	r3, r3, r2
 80059e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80059ec:	464b      	mov	r3, r9
 80059ee:	460a      	mov	r2, r1
 80059f0:	eb42 0303 	adc.w	r3, r2, r3
 80059f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80059f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	2200      	movs	r2, #0
 8005a00:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005a04:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005a08:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005a0c:	460b      	mov	r3, r1
 8005a0e:	18db      	adds	r3, r3, r3
 8005a10:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a12:	4613      	mov	r3, r2
 8005a14:	eb42 0303 	adc.w	r3, r2, r3
 8005a18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a1a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005a1e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005a22:	f7fb f941 	bl	8000ca8 <__aeabi_uldivmod>
 8005a26:	4602      	mov	r2, r0
 8005a28:	460b      	mov	r3, r1
 8005a2a:	4b0d      	ldr	r3, [pc, #52]	; (8005a60 <UART_SetConfig+0x2d4>)
 8005a2c:	fba3 1302 	umull	r1, r3, r3, r2
 8005a30:	095b      	lsrs	r3, r3, #5
 8005a32:	2164      	movs	r1, #100	; 0x64
 8005a34:	fb01 f303 	mul.w	r3, r1, r3
 8005a38:	1ad3      	subs	r3, r2, r3
 8005a3a:	00db      	lsls	r3, r3, #3
 8005a3c:	3332      	adds	r3, #50	; 0x32
 8005a3e:	4a08      	ldr	r2, [pc, #32]	; (8005a60 <UART_SetConfig+0x2d4>)
 8005a40:	fba2 2303 	umull	r2, r3, r2, r3
 8005a44:	095b      	lsrs	r3, r3, #5
 8005a46:	f003 0207 	and.w	r2, r3, #7
 8005a4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4422      	add	r2, r4
 8005a52:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005a54:	e105      	b.n	8005c62 <UART_SetConfig+0x4d6>
 8005a56:	bf00      	nop
 8005a58:	40011000 	.word	0x40011000
 8005a5c:	40011400 	.word	0x40011400
 8005a60:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005a64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a68:	2200      	movs	r2, #0
 8005a6a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005a6e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005a72:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005a76:	4642      	mov	r2, r8
 8005a78:	464b      	mov	r3, r9
 8005a7a:	1891      	adds	r1, r2, r2
 8005a7c:	6239      	str	r1, [r7, #32]
 8005a7e:	415b      	adcs	r3, r3
 8005a80:	627b      	str	r3, [r7, #36]	; 0x24
 8005a82:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005a86:	4641      	mov	r1, r8
 8005a88:	1854      	adds	r4, r2, r1
 8005a8a:	4649      	mov	r1, r9
 8005a8c:	eb43 0501 	adc.w	r5, r3, r1
 8005a90:	f04f 0200 	mov.w	r2, #0
 8005a94:	f04f 0300 	mov.w	r3, #0
 8005a98:	00eb      	lsls	r3, r5, #3
 8005a9a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005a9e:	00e2      	lsls	r2, r4, #3
 8005aa0:	4614      	mov	r4, r2
 8005aa2:	461d      	mov	r5, r3
 8005aa4:	4643      	mov	r3, r8
 8005aa6:	18e3      	adds	r3, r4, r3
 8005aa8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005aac:	464b      	mov	r3, r9
 8005aae:	eb45 0303 	adc.w	r3, r5, r3
 8005ab2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005ab6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	2200      	movs	r2, #0
 8005abe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005ac2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005ac6:	f04f 0200 	mov.w	r2, #0
 8005aca:	f04f 0300 	mov.w	r3, #0
 8005ace:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005ad2:	4629      	mov	r1, r5
 8005ad4:	008b      	lsls	r3, r1, #2
 8005ad6:	4621      	mov	r1, r4
 8005ad8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005adc:	4621      	mov	r1, r4
 8005ade:	008a      	lsls	r2, r1, #2
 8005ae0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005ae4:	f7fb f8e0 	bl	8000ca8 <__aeabi_uldivmod>
 8005ae8:	4602      	mov	r2, r0
 8005aea:	460b      	mov	r3, r1
 8005aec:	4b60      	ldr	r3, [pc, #384]	; (8005c70 <UART_SetConfig+0x4e4>)
 8005aee:	fba3 2302 	umull	r2, r3, r3, r2
 8005af2:	095b      	lsrs	r3, r3, #5
 8005af4:	011c      	lsls	r4, r3, #4
 8005af6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005afa:	2200      	movs	r2, #0
 8005afc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005b00:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005b04:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005b08:	4642      	mov	r2, r8
 8005b0a:	464b      	mov	r3, r9
 8005b0c:	1891      	adds	r1, r2, r2
 8005b0e:	61b9      	str	r1, [r7, #24]
 8005b10:	415b      	adcs	r3, r3
 8005b12:	61fb      	str	r3, [r7, #28]
 8005b14:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005b18:	4641      	mov	r1, r8
 8005b1a:	1851      	adds	r1, r2, r1
 8005b1c:	6139      	str	r1, [r7, #16]
 8005b1e:	4649      	mov	r1, r9
 8005b20:	414b      	adcs	r3, r1
 8005b22:	617b      	str	r3, [r7, #20]
 8005b24:	f04f 0200 	mov.w	r2, #0
 8005b28:	f04f 0300 	mov.w	r3, #0
 8005b2c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005b30:	4659      	mov	r1, fp
 8005b32:	00cb      	lsls	r3, r1, #3
 8005b34:	4651      	mov	r1, sl
 8005b36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b3a:	4651      	mov	r1, sl
 8005b3c:	00ca      	lsls	r2, r1, #3
 8005b3e:	4610      	mov	r0, r2
 8005b40:	4619      	mov	r1, r3
 8005b42:	4603      	mov	r3, r0
 8005b44:	4642      	mov	r2, r8
 8005b46:	189b      	adds	r3, r3, r2
 8005b48:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005b4c:	464b      	mov	r3, r9
 8005b4e:	460a      	mov	r2, r1
 8005b50:	eb42 0303 	adc.w	r3, r2, r3
 8005b54:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005b58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	67bb      	str	r3, [r7, #120]	; 0x78
 8005b62:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005b64:	f04f 0200 	mov.w	r2, #0
 8005b68:	f04f 0300 	mov.w	r3, #0
 8005b6c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005b70:	4649      	mov	r1, r9
 8005b72:	008b      	lsls	r3, r1, #2
 8005b74:	4641      	mov	r1, r8
 8005b76:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005b7a:	4641      	mov	r1, r8
 8005b7c:	008a      	lsls	r2, r1, #2
 8005b7e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005b82:	f7fb f891 	bl	8000ca8 <__aeabi_uldivmod>
 8005b86:	4602      	mov	r2, r0
 8005b88:	460b      	mov	r3, r1
 8005b8a:	4b39      	ldr	r3, [pc, #228]	; (8005c70 <UART_SetConfig+0x4e4>)
 8005b8c:	fba3 1302 	umull	r1, r3, r3, r2
 8005b90:	095b      	lsrs	r3, r3, #5
 8005b92:	2164      	movs	r1, #100	; 0x64
 8005b94:	fb01 f303 	mul.w	r3, r1, r3
 8005b98:	1ad3      	subs	r3, r2, r3
 8005b9a:	011b      	lsls	r3, r3, #4
 8005b9c:	3332      	adds	r3, #50	; 0x32
 8005b9e:	4a34      	ldr	r2, [pc, #208]	; (8005c70 <UART_SetConfig+0x4e4>)
 8005ba0:	fba2 2303 	umull	r2, r3, r2, r3
 8005ba4:	095b      	lsrs	r3, r3, #5
 8005ba6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005baa:	441c      	add	r4, r3
 8005bac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	673b      	str	r3, [r7, #112]	; 0x70
 8005bb4:	677a      	str	r2, [r7, #116]	; 0x74
 8005bb6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005bba:	4642      	mov	r2, r8
 8005bbc:	464b      	mov	r3, r9
 8005bbe:	1891      	adds	r1, r2, r2
 8005bc0:	60b9      	str	r1, [r7, #8]
 8005bc2:	415b      	adcs	r3, r3
 8005bc4:	60fb      	str	r3, [r7, #12]
 8005bc6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005bca:	4641      	mov	r1, r8
 8005bcc:	1851      	adds	r1, r2, r1
 8005bce:	6039      	str	r1, [r7, #0]
 8005bd0:	4649      	mov	r1, r9
 8005bd2:	414b      	adcs	r3, r1
 8005bd4:	607b      	str	r3, [r7, #4]
 8005bd6:	f04f 0200 	mov.w	r2, #0
 8005bda:	f04f 0300 	mov.w	r3, #0
 8005bde:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005be2:	4659      	mov	r1, fp
 8005be4:	00cb      	lsls	r3, r1, #3
 8005be6:	4651      	mov	r1, sl
 8005be8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005bec:	4651      	mov	r1, sl
 8005bee:	00ca      	lsls	r2, r1, #3
 8005bf0:	4610      	mov	r0, r2
 8005bf2:	4619      	mov	r1, r3
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	4642      	mov	r2, r8
 8005bf8:	189b      	adds	r3, r3, r2
 8005bfa:	66bb      	str	r3, [r7, #104]	; 0x68
 8005bfc:	464b      	mov	r3, r9
 8005bfe:	460a      	mov	r2, r1
 8005c00:	eb42 0303 	adc.w	r3, r2, r3
 8005c04:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005c06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	663b      	str	r3, [r7, #96]	; 0x60
 8005c10:	667a      	str	r2, [r7, #100]	; 0x64
 8005c12:	f04f 0200 	mov.w	r2, #0
 8005c16:	f04f 0300 	mov.w	r3, #0
 8005c1a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005c1e:	4649      	mov	r1, r9
 8005c20:	008b      	lsls	r3, r1, #2
 8005c22:	4641      	mov	r1, r8
 8005c24:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c28:	4641      	mov	r1, r8
 8005c2a:	008a      	lsls	r2, r1, #2
 8005c2c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005c30:	f7fb f83a 	bl	8000ca8 <__aeabi_uldivmod>
 8005c34:	4602      	mov	r2, r0
 8005c36:	460b      	mov	r3, r1
 8005c38:	4b0d      	ldr	r3, [pc, #52]	; (8005c70 <UART_SetConfig+0x4e4>)
 8005c3a:	fba3 1302 	umull	r1, r3, r3, r2
 8005c3e:	095b      	lsrs	r3, r3, #5
 8005c40:	2164      	movs	r1, #100	; 0x64
 8005c42:	fb01 f303 	mul.w	r3, r1, r3
 8005c46:	1ad3      	subs	r3, r2, r3
 8005c48:	011b      	lsls	r3, r3, #4
 8005c4a:	3332      	adds	r3, #50	; 0x32
 8005c4c:	4a08      	ldr	r2, [pc, #32]	; (8005c70 <UART_SetConfig+0x4e4>)
 8005c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8005c52:	095b      	lsrs	r3, r3, #5
 8005c54:	f003 020f 	and.w	r2, r3, #15
 8005c58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4422      	add	r2, r4
 8005c60:	609a      	str	r2, [r3, #8]
}
 8005c62:	bf00      	nop
 8005c64:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c6e:	bf00      	nop
 8005c70:	51eb851f 	.word	0x51eb851f

08005c74 <__errno>:
 8005c74:	4b01      	ldr	r3, [pc, #4]	; (8005c7c <__errno+0x8>)
 8005c76:	6818      	ldr	r0, [r3, #0]
 8005c78:	4770      	bx	lr
 8005c7a:	bf00      	nop
 8005c7c:	2000000c 	.word	0x2000000c

08005c80 <__libc_init_array>:
 8005c80:	b570      	push	{r4, r5, r6, lr}
 8005c82:	4d0d      	ldr	r5, [pc, #52]	; (8005cb8 <__libc_init_array+0x38>)
 8005c84:	4c0d      	ldr	r4, [pc, #52]	; (8005cbc <__libc_init_array+0x3c>)
 8005c86:	1b64      	subs	r4, r4, r5
 8005c88:	10a4      	asrs	r4, r4, #2
 8005c8a:	2600      	movs	r6, #0
 8005c8c:	42a6      	cmp	r6, r4
 8005c8e:	d109      	bne.n	8005ca4 <__libc_init_array+0x24>
 8005c90:	4d0b      	ldr	r5, [pc, #44]	; (8005cc0 <__libc_init_array+0x40>)
 8005c92:	4c0c      	ldr	r4, [pc, #48]	; (8005cc4 <__libc_init_array+0x44>)
 8005c94:	f004 fd1e 	bl	800a6d4 <_init>
 8005c98:	1b64      	subs	r4, r4, r5
 8005c9a:	10a4      	asrs	r4, r4, #2
 8005c9c:	2600      	movs	r6, #0
 8005c9e:	42a6      	cmp	r6, r4
 8005ca0:	d105      	bne.n	8005cae <__libc_init_array+0x2e>
 8005ca2:	bd70      	pop	{r4, r5, r6, pc}
 8005ca4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ca8:	4798      	blx	r3
 8005caa:	3601      	adds	r6, #1
 8005cac:	e7ee      	b.n	8005c8c <__libc_init_array+0xc>
 8005cae:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cb2:	4798      	blx	r3
 8005cb4:	3601      	adds	r6, #1
 8005cb6:	e7f2      	b.n	8005c9e <__libc_init_array+0x1e>
 8005cb8:	0800abdc 	.word	0x0800abdc
 8005cbc:	0800abdc 	.word	0x0800abdc
 8005cc0:	0800abdc 	.word	0x0800abdc
 8005cc4:	0800abe0 	.word	0x0800abe0

08005cc8 <memset>:
 8005cc8:	4402      	add	r2, r0
 8005cca:	4603      	mov	r3, r0
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d100      	bne.n	8005cd2 <memset+0xa>
 8005cd0:	4770      	bx	lr
 8005cd2:	f803 1b01 	strb.w	r1, [r3], #1
 8005cd6:	e7f9      	b.n	8005ccc <memset+0x4>

08005cd8 <__cvt>:
 8005cd8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005cdc:	ec55 4b10 	vmov	r4, r5, d0
 8005ce0:	2d00      	cmp	r5, #0
 8005ce2:	460e      	mov	r6, r1
 8005ce4:	4619      	mov	r1, r3
 8005ce6:	462b      	mov	r3, r5
 8005ce8:	bfbb      	ittet	lt
 8005cea:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005cee:	461d      	movlt	r5, r3
 8005cf0:	2300      	movge	r3, #0
 8005cf2:	232d      	movlt	r3, #45	; 0x2d
 8005cf4:	700b      	strb	r3, [r1, #0]
 8005cf6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005cf8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005cfc:	4691      	mov	r9, r2
 8005cfe:	f023 0820 	bic.w	r8, r3, #32
 8005d02:	bfbc      	itt	lt
 8005d04:	4622      	movlt	r2, r4
 8005d06:	4614      	movlt	r4, r2
 8005d08:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005d0c:	d005      	beq.n	8005d1a <__cvt+0x42>
 8005d0e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005d12:	d100      	bne.n	8005d16 <__cvt+0x3e>
 8005d14:	3601      	adds	r6, #1
 8005d16:	2102      	movs	r1, #2
 8005d18:	e000      	b.n	8005d1c <__cvt+0x44>
 8005d1a:	2103      	movs	r1, #3
 8005d1c:	ab03      	add	r3, sp, #12
 8005d1e:	9301      	str	r3, [sp, #4]
 8005d20:	ab02      	add	r3, sp, #8
 8005d22:	9300      	str	r3, [sp, #0]
 8005d24:	ec45 4b10 	vmov	d0, r4, r5
 8005d28:	4653      	mov	r3, sl
 8005d2a:	4632      	mov	r2, r6
 8005d2c:	f001 fefc 	bl	8007b28 <_dtoa_r>
 8005d30:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005d34:	4607      	mov	r7, r0
 8005d36:	d102      	bne.n	8005d3e <__cvt+0x66>
 8005d38:	f019 0f01 	tst.w	r9, #1
 8005d3c:	d022      	beq.n	8005d84 <__cvt+0xac>
 8005d3e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005d42:	eb07 0906 	add.w	r9, r7, r6
 8005d46:	d110      	bne.n	8005d6a <__cvt+0x92>
 8005d48:	783b      	ldrb	r3, [r7, #0]
 8005d4a:	2b30      	cmp	r3, #48	; 0x30
 8005d4c:	d10a      	bne.n	8005d64 <__cvt+0x8c>
 8005d4e:	2200      	movs	r2, #0
 8005d50:	2300      	movs	r3, #0
 8005d52:	4620      	mov	r0, r4
 8005d54:	4629      	mov	r1, r5
 8005d56:	f7fa fec7 	bl	8000ae8 <__aeabi_dcmpeq>
 8005d5a:	b918      	cbnz	r0, 8005d64 <__cvt+0x8c>
 8005d5c:	f1c6 0601 	rsb	r6, r6, #1
 8005d60:	f8ca 6000 	str.w	r6, [sl]
 8005d64:	f8da 3000 	ldr.w	r3, [sl]
 8005d68:	4499      	add	r9, r3
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	4620      	mov	r0, r4
 8005d70:	4629      	mov	r1, r5
 8005d72:	f7fa feb9 	bl	8000ae8 <__aeabi_dcmpeq>
 8005d76:	b108      	cbz	r0, 8005d7c <__cvt+0xa4>
 8005d78:	f8cd 900c 	str.w	r9, [sp, #12]
 8005d7c:	2230      	movs	r2, #48	; 0x30
 8005d7e:	9b03      	ldr	r3, [sp, #12]
 8005d80:	454b      	cmp	r3, r9
 8005d82:	d307      	bcc.n	8005d94 <__cvt+0xbc>
 8005d84:	9b03      	ldr	r3, [sp, #12]
 8005d86:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005d88:	1bdb      	subs	r3, r3, r7
 8005d8a:	4638      	mov	r0, r7
 8005d8c:	6013      	str	r3, [r2, #0]
 8005d8e:	b004      	add	sp, #16
 8005d90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d94:	1c59      	adds	r1, r3, #1
 8005d96:	9103      	str	r1, [sp, #12]
 8005d98:	701a      	strb	r2, [r3, #0]
 8005d9a:	e7f0      	b.n	8005d7e <__cvt+0xa6>

08005d9c <__exponent>:
 8005d9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005d9e:	4603      	mov	r3, r0
 8005da0:	2900      	cmp	r1, #0
 8005da2:	bfb8      	it	lt
 8005da4:	4249      	neglt	r1, r1
 8005da6:	f803 2b02 	strb.w	r2, [r3], #2
 8005daa:	bfb4      	ite	lt
 8005dac:	222d      	movlt	r2, #45	; 0x2d
 8005dae:	222b      	movge	r2, #43	; 0x2b
 8005db0:	2909      	cmp	r1, #9
 8005db2:	7042      	strb	r2, [r0, #1]
 8005db4:	dd2a      	ble.n	8005e0c <__exponent+0x70>
 8005db6:	f10d 0407 	add.w	r4, sp, #7
 8005dba:	46a4      	mov	ip, r4
 8005dbc:	270a      	movs	r7, #10
 8005dbe:	46a6      	mov	lr, r4
 8005dc0:	460a      	mov	r2, r1
 8005dc2:	fb91 f6f7 	sdiv	r6, r1, r7
 8005dc6:	fb07 1516 	mls	r5, r7, r6, r1
 8005dca:	3530      	adds	r5, #48	; 0x30
 8005dcc:	2a63      	cmp	r2, #99	; 0x63
 8005dce:	f104 34ff 	add.w	r4, r4, #4294967295
 8005dd2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005dd6:	4631      	mov	r1, r6
 8005dd8:	dcf1      	bgt.n	8005dbe <__exponent+0x22>
 8005dda:	3130      	adds	r1, #48	; 0x30
 8005ddc:	f1ae 0502 	sub.w	r5, lr, #2
 8005de0:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005de4:	1c44      	adds	r4, r0, #1
 8005de6:	4629      	mov	r1, r5
 8005de8:	4561      	cmp	r1, ip
 8005dea:	d30a      	bcc.n	8005e02 <__exponent+0x66>
 8005dec:	f10d 0209 	add.w	r2, sp, #9
 8005df0:	eba2 020e 	sub.w	r2, r2, lr
 8005df4:	4565      	cmp	r5, ip
 8005df6:	bf88      	it	hi
 8005df8:	2200      	movhi	r2, #0
 8005dfa:	4413      	add	r3, r2
 8005dfc:	1a18      	subs	r0, r3, r0
 8005dfe:	b003      	add	sp, #12
 8005e00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e02:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005e06:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005e0a:	e7ed      	b.n	8005de8 <__exponent+0x4c>
 8005e0c:	2330      	movs	r3, #48	; 0x30
 8005e0e:	3130      	adds	r1, #48	; 0x30
 8005e10:	7083      	strb	r3, [r0, #2]
 8005e12:	70c1      	strb	r1, [r0, #3]
 8005e14:	1d03      	adds	r3, r0, #4
 8005e16:	e7f1      	b.n	8005dfc <__exponent+0x60>

08005e18 <_printf_float>:
 8005e18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e1c:	ed2d 8b02 	vpush	{d8}
 8005e20:	b08d      	sub	sp, #52	; 0x34
 8005e22:	460c      	mov	r4, r1
 8005e24:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005e28:	4616      	mov	r6, r2
 8005e2a:	461f      	mov	r7, r3
 8005e2c:	4605      	mov	r5, r0
 8005e2e:	f003 f98f 	bl	8009150 <_localeconv_r>
 8005e32:	f8d0 a000 	ldr.w	sl, [r0]
 8005e36:	4650      	mov	r0, sl
 8005e38:	f7fa f9da 	bl	80001f0 <strlen>
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	930a      	str	r3, [sp, #40]	; 0x28
 8005e40:	6823      	ldr	r3, [r4, #0]
 8005e42:	9305      	str	r3, [sp, #20]
 8005e44:	f8d8 3000 	ldr.w	r3, [r8]
 8005e48:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005e4c:	3307      	adds	r3, #7
 8005e4e:	f023 0307 	bic.w	r3, r3, #7
 8005e52:	f103 0208 	add.w	r2, r3, #8
 8005e56:	f8c8 2000 	str.w	r2, [r8]
 8005e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e5e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005e62:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005e66:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005e6a:	9307      	str	r3, [sp, #28]
 8005e6c:	f8cd 8018 	str.w	r8, [sp, #24]
 8005e70:	ee08 0a10 	vmov	s16, r0
 8005e74:	4b9f      	ldr	r3, [pc, #636]	; (80060f4 <_printf_float+0x2dc>)
 8005e76:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005e7a:	f04f 32ff 	mov.w	r2, #4294967295
 8005e7e:	f7fa fe65 	bl	8000b4c <__aeabi_dcmpun>
 8005e82:	bb88      	cbnz	r0, 8005ee8 <_printf_float+0xd0>
 8005e84:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005e88:	4b9a      	ldr	r3, [pc, #616]	; (80060f4 <_printf_float+0x2dc>)
 8005e8a:	f04f 32ff 	mov.w	r2, #4294967295
 8005e8e:	f7fa fe3f 	bl	8000b10 <__aeabi_dcmple>
 8005e92:	bb48      	cbnz	r0, 8005ee8 <_printf_float+0xd0>
 8005e94:	2200      	movs	r2, #0
 8005e96:	2300      	movs	r3, #0
 8005e98:	4640      	mov	r0, r8
 8005e9a:	4649      	mov	r1, r9
 8005e9c:	f7fa fe2e 	bl	8000afc <__aeabi_dcmplt>
 8005ea0:	b110      	cbz	r0, 8005ea8 <_printf_float+0x90>
 8005ea2:	232d      	movs	r3, #45	; 0x2d
 8005ea4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ea8:	4b93      	ldr	r3, [pc, #588]	; (80060f8 <_printf_float+0x2e0>)
 8005eaa:	4894      	ldr	r0, [pc, #592]	; (80060fc <_printf_float+0x2e4>)
 8005eac:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005eb0:	bf94      	ite	ls
 8005eb2:	4698      	movls	r8, r3
 8005eb4:	4680      	movhi	r8, r0
 8005eb6:	2303      	movs	r3, #3
 8005eb8:	6123      	str	r3, [r4, #16]
 8005eba:	9b05      	ldr	r3, [sp, #20]
 8005ebc:	f023 0204 	bic.w	r2, r3, #4
 8005ec0:	6022      	str	r2, [r4, #0]
 8005ec2:	f04f 0900 	mov.w	r9, #0
 8005ec6:	9700      	str	r7, [sp, #0]
 8005ec8:	4633      	mov	r3, r6
 8005eca:	aa0b      	add	r2, sp, #44	; 0x2c
 8005ecc:	4621      	mov	r1, r4
 8005ece:	4628      	mov	r0, r5
 8005ed0:	f000 f9d8 	bl	8006284 <_printf_common>
 8005ed4:	3001      	adds	r0, #1
 8005ed6:	f040 8090 	bne.w	8005ffa <_printf_float+0x1e2>
 8005eda:	f04f 30ff 	mov.w	r0, #4294967295
 8005ede:	b00d      	add	sp, #52	; 0x34
 8005ee0:	ecbd 8b02 	vpop	{d8}
 8005ee4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ee8:	4642      	mov	r2, r8
 8005eea:	464b      	mov	r3, r9
 8005eec:	4640      	mov	r0, r8
 8005eee:	4649      	mov	r1, r9
 8005ef0:	f7fa fe2c 	bl	8000b4c <__aeabi_dcmpun>
 8005ef4:	b140      	cbz	r0, 8005f08 <_printf_float+0xf0>
 8005ef6:	464b      	mov	r3, r9
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	bfbc      	itt	lt
 8005efc:	232d      	movlt	r3, #45	; 0x2d
 8005efe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005f02:	487f      	ldr	r0, [pc, #508]	; (8006100 <_printf_float+0x2e8>)
 8005f04:	4b7f      	ldr	r3, [pc, #508]	; (8006104 <_printf_float+0x2ec>)
 8005f06:	e7d1      	b.n	8005eac <_printf_float+0x94>
 8005f08:	6863      	ldr	r3, [r4, #4]
 8005f0a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005f0e:	9206      	str	r2, [sp, #24]
 8005f10:	1c5a      	adds	r2, r3, #1
 8005f12:	d13f      	bne.n	8005f94 <_printf_float+0x17c>
 8005f14:	2306      	movs	r3, #6
 8005f16:	6063      	str	r3, [r4, #4]
 8005f18:	9b05      	ldr	r3, [sp, #20]
 8005f1a:	6861      	ldr	r1, [r4, #4]
 8005f1c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005f20:	2300      	movs	r3, #0
 8005f22:	9303      	str	r3, [sp, #12]
 8005f24:	ab0a      	add	r3, sp, #40	; 0x28
 8005f26:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005f2a:	ab09      	add	r3, sp, #36	; 0x24
 8005f2c:	ec49 8b10 	vmov	d0, r8, r9
 8005f30:	9300      	str	r3, [sp, #0]
 8005f32:	6022      	str	r2, [r4, #0]
 8005f34:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005f38:	4628      	mov	r0, r5
 8005f3a:	f7ff fecd 	bl	8005cd8 <__cvt>
 8005f3e:	9b06      	ldr	r3, [sp, #24]
 8005f40:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005f42:	2b47      	cmp	r3, #71	; 0x47
 8005f44:	4680      	mov	r8, r0
 8005f46:	d108      	bne.n	8005f5a <_printf_float+0x142>
 8005f48:	1cc8      	adds	r0, r1, #3
 8005f4a:	db02      	blt.n	8005f52 <_printf_float+0x13a>
 8005f4c:	6863      	ldr	r3, [r4, #4]
 8005f4e:	4299      	cmp	r1, r3
 8005f50:	dd41      	ble.n	8005fd6 <_printf_float+0x1be>
 8005f52:	f1ab 0b02 	sub.w	fp, fp, #2
 8005f56:	fa5f fb8b 	uxtb.w	fp, fp
 8005f5a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005f5e:	d820      	bhi.n	8005fa2 <_printf_float+0x18a>
 8005f60:	3901      	subs	r1, #1
 8005f62:	465a      	mov	r2, fp
 8005f64:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005f68:	9109      	str	r1, [sp, #36]	; 0x24
 8005f6a:	f7ff ff17 	bl	8005d9c <__exponent>
 8005f6e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005f70:	1813      	adds	r3, r2, r0
 8005f72:	2a01      	cmp	r2, #1
 8005f74:	4681      	mov	r9, r0
 8005f76:	6123      	str	r3, [r4, #16]
 8005f78:	dc02      	bgt.n	8005f80 <_printf_float+0x168>
 8005f7a:	6822      	ldr	r2, [r4, #0]
 8005f7c:	07d2      	lsls	r2, r2, #31
 8005f7e:	d501      	bpl.n	8005f84 <_printf_float+0x16c>
 8005f80:	3301      	adds	r3, #1
 8005f82:	6123      	str	r3, [r4, #16]
 8005f84:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d09c      	beq.n	8005ec6 <_printf_float+0xae>
 8005f8c:	232d      	movs	r3, #45	; 0x2d
 8005f8e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f92:	e798      	b.n	8005ec6 <_printf_float+0xae>
 8005f94:	9a06      	ldr	r2, [sp, #24]
 8005f96:	2a47      	cmp	r2, #71	; 0x47
 8005f98:	d1be      	bne.n	8005f18 <_printf_float+0x100>
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d1bc      	bne.n	8005f18 <_printf_float+0x100>
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	e7b9      	b.n	8005f16 <_printf_float+0xfe>
 8005fa2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005fa6:	d118      	bne.n	8005fda <_printf_float+0x1c2>
 8005fa8:	2900      	cmp	r1, #0
 8005faa:	6863      	ldr	r3, [r4, #4]
 8005fac:	dd0b      	ble.n	8005fc6 <_printf_float+0x1ae>
 8005fae:	6121      	str	r1, [r4, #16]
 8005fb0:	b913      	cbnz	r3, 8005fb8 <_printf_float+0x1a0>
 8005fb2:	6822      	ldr	r2, [r4, #0]
 8005fb4:	07d0      	lsls	r0, r2, #31
 8005fb6:	d502      	bpl.n	8005fbe <_printf_float+0x1a6>
 8005fb8:	3301      	adds	r3, #1
 8005fba:	440b      	add	r3, r1
 8005fbc:	6123      	str	r3, [r4, #16]
 8005fbe:	65a1      	str	r1, [r4, #88]	; 0x58
 8005fc0:	f04f 0900 	mov.w	r9, #0
 8005fc4:	e7de      	b.n	8005f84 <_printf_float+0x16c>
 8005fc6:	b913      	cbnz	r3, 8005fce <_printf_float+0x1b6>
 8005fc8:	6822      	ldr	r2, [r4, #0]
 8005fca:	07d2      	lsls	r2, r2, #31
 8005fcc:	d501      	bpl.n	8005fd2 <_printf_float+0x1ba>
 8005fce:	3302      	adds	r3, #2
 8005fd0:	e7f4      	b.n	8005fbc <_printf_float+0x1a4>
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	e7f2      	b.n	8005fbc <_printf_float+0x1a4>
 8005fd6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005fda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005fdc:	4299      	cmp	r1, r3
 8005fde:	db05      	blt.n	8005fec <_printf_float+0x1d4>
 8005fe0:	6823      	ldr	r3, [r4, #0]
 8005fe2:	6121      	str	r1, [r4, #16]
 8005fe4:	07d8      	lsls	r0, r3, #31
 8005fe6:	d5ea      	bpl.n	8005fbe <_printf_float+0x1a6>
 8005fe8:	1c4b      	adds	r3, r1, #1
 8005fea:	e7e7      	b.n	8005fbc <_printf_float+0x1a4>
 8005fec:	2900      	cmp	r1, #0
 8005fee:	bfd4      	ite	le
 8005ff0:	f1c1 0202 	rsble	r2, r1, #2
 8005ff4:	2201      	movgt	r2, #1
 8005ff6:	4413      	add	r3, r2
 8005ff8:	e7e0      	b.n	8005fbc <_printf_float+0x1a4>
 8005ffa:	6823      	ldr	r3, [r4, #0]
 8005ffc:	055a      	lsls	r2, r3, #21
 8005ffe:	d407      	bmi.n	8006010 <_printf_float+0x1f8>
 8006000:	6923      	ldr	r3, [r4, #16]
 8006002:	4642      	mov	r2, r8
 8006004:	4631      	mov	r1, r6
 8006006:	4628      	mov	r0, r5
 8006008:	47b8      	blx	r7
 800600a:	3001      	adds	r0, #1
 800600c:	d12c      	bne.n	8006068 <_printf_float+0x250>
 800600e:	e764      	b.n	8005eda <_printf_float+0xc2>
 8006010:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006014:	f240 80e0 	bls.w	80061d8 <_printf_float+0x3c0>
 8006018:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800601c:	2200      	movs	r2, #0
 800601e:	2300      	movs	r3, #0
 8006020:	f7fa fd62 	bl	8000ae8 <__aeabi_dcmpeq>
 8006024:	2800      	cmp	r0, #0
 8006026:	d034      	beq.n	8006092 <_printf_float+0x27a>
 8006028:	4a37      	ldr	r2, [pc, #220]	; (8006108 <_printf_float+0x2f0>)
 800602a:	2301      	movs	r3, #1
 800602c:	4631      	mov	r1, r6
 800602e:	4628      	mov	r0, r5
 8006030:	47b8      	blx	r7
 8006032:	3001      	adds	r0, #1
 8006034:	f43f af51 	beq.w	8005eda <_printf_float+0xc2>
 8006038:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800603c:	429a      	cmp	r2, r3
 800603e:	db02      	blt.n	8006046 <_printf_float+0x22e>
 8006040:	6823      	ldr	r3, [r4, #0]
 8006042:	07d8      	lsls	r0, r3, #31
 8006044:	d510      	bpl.n	8006068 <_printf_float+0x250>
 8006046:	ee18 3a10 	vmov	r3, s16
 800604a:	4652      	mov	r2, sl
 800604c:	4631      	mov	r1, r6
 800604e:	4628      	mov	r0, r5
 8006050:	47b8      	blx	r7
 8006052:	3001      	adds	r0, #1
 8006054:	f43f af41 	beq.w	8005eda <_printf_float+0xc2>
 8006058:	f04f 0800 	mov.w	r8, #0
 800605c:	f104 091a 	add.w	r9, r4, #26
 8006060:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006062:	3b01      	subs	r3, #1
 8006064:	4543      	cmp	r3, r8
 8006066:	dc09      	bgt.n	800607c <_printf_float+0x264>
 8006068:	6823      	ldr	r3, [r4, #0]
 800606a:	079b      	lsls	r3, r3, #30
 800606c:	f100 8105 	bmi.w	800627a <_printf_float+0x462>
 8006070:	68e0      	ldr	r0, [r4, #12]
 8006072:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006074:	4298      	cmp	r0, r3
 8006076:	bfb8      	it	lt
 8006078:	4618      	movlt	r0, r3
 800607a:	e730      	b.n	8005ede <_printf_float+0xc6>
 800607c:	2301      	movs	r3, #1
 800607e:	464a      	mov	r2, r9
 8006080:	4631      	mov	r1, r6
 8006082:	4628      	mov	r0, r5
 8006084:	47b8      	blx	r7
 8006086:	3001      	adds	r0, #1
 8006088:	f43f af27 	beq.w	8005eda <_printf_float+0xc2>
 800608c:	f108 0801 	add.w	r8, r8, #1
 8006090:	e7e6      	b.n	8006060 <_printf_float+0x248>
 8006092:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006094:	2b00      	cmp	r3, #0
 8006096:	dc39      	bgt.n	800610c <_printf_float+0x2f4>
 8006098:	4a1b      	ldr	r2, [pc, #108]	; (8006108 <_printf_float+0x2f0>)
 800609a:	2301      	movs	r3, #1
 800609c:	4631      	mov	r1, r6
 800609e:	4628      	mov	r0, r5
 80060a0:	47b8      	blx	r7
 80060a2:	3001      	adds	r0, #1
 80060a4:	f43f af19 	beq.w	8005eda <_printf_float+0xc2>
 80060a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80060ac:	4313      	orrs	r3, r2
 80060ae:	d102      	bne.n	80060b6 <_printf_float+0x29e>
 80060b0:	6823      	ldr	r3, [r4, #0]
 80060b2:	07d9      	lsls	r1, r3, #31
 80060b4:	d5d8      	bpl.n	8006068 <_printf_float+0x250>
 80060b6:	ee18 3a10 	vmov	r3, s16
 80060ba:	4652      	mov	r2, sl
 80060bc:	4631      	mov	r1, r6
 80060be:	4628      	mov	r0, r5
 80060c0:	47b8      	blx	r7
 80060c2:	3001      	adds	r0, #1
 80060c4:	f43f af09 	beq.w	8005eda <_printf_float+0xc2>
 80060c8:	f04f 0900 	mov.w	r9, #0
 80060cc:	f104 0a1a 	add.w	sl, r4, #26
 80060d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060d2:	425b      	negs	r3, r3
 80060d4:	454b      	cmp	r3, r9
 80060d6:	dc01      	bgt.n	80060dc <_printf_float+0x2c4>
 80060d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060da:	e792      	b.n	8006002 <_printf_float+0x1ea>
 80060dc:	2301      	movs	r3, #1
 80060de:	4652      	mov	r2, sl
 80060e0:	4631      	mov	r1, r6
 80060e2:	4628      	mov	r0, r5
 80060e4:	47b8      	blx	r7
 80060e6:	3001      	adds	r0, #1
 80060e8:	f43f aef7 	beq.w	8005eda <_printf_float+0xc2>
 80060ec:	f109 0901 	add.w	r9, r9, #1
 80060f0:	e7ee      	b.n	80060d0 <_printf_float+0x2b8>
 80060f2:	bf00      	nop
 80060f4:	7fefffff 	.word	0x7fefffff
 80060f8:	0800a728 	.word	0x0800a728
 80060fc:	0800a72c 	.word	0x0800a72c
 8006100:	0800a734 	.word	0x0800a734
 8006104:	0800a730 	.word	0x0800a730
 8006108:	0800a738 	.word	0x0800a738
 800610c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800610e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006110:	429a      	cmp	r2, r3
 8006112:	bfa8      	it	ge
 8006114:	461a      	movge	r2, r3
 8006116:	2a00      	cmp	r2, #0
 8006118:	4691      	mov	r9, r2
 800611a:	dc37      	bgt.n	800618c <_printf_float+0x374>
 800611c:	f04f 0b00 	mov.w	fp, #0
 8006120:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006124:	f104 021a 	add.w	r2, r4, #26
 8006128:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800612a:	9305      	str	r3, [sp, #20]
 800612c:	eba3 0309 	sub.w	r3, r3, r9
 8006130:	455b      	cmp	r3, fp
 8006132:	dc33      	bgt.n	800619c <_printf_float+0x384>
 8006134:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006138:	429a      	cmp	r2, r3
 800613a:	db3b      	blt.n	80061b4 <_printf_float+0x39c>
 800613c:	6823      	ldr	r3, [r4, #0]
 800613e:	07da      	lsls	r2, r3, #31
 8006140:	d438      	bmi.n	80061b4 <_printf_float+0x39c>
 8006142:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006144:	9a05      	ldr	r2, [sp, #20]
 8006146:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006148:	1a9a      	subs	r2, r3, r2
 800614a:	eba3 0901 	sub.w	r9, r3, r1
 800614e:	4591      	cmp	r9, r2
 8006150:	bfa8      	it	ge
 8006152:	4691      	movge	r9, r2
 8006154:	f1b9 0f00 	cmp.w	r9, #0
 8006158:	dc35      	bgt.n	80061c6 <_printf_float+0x3ae>
 800615a:	f04f 0800 	mov.w	r8, #0
 800615e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006162:	f104 0a1a 	add.w	sl, r4, #26
 8006166:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800616a:	1a9b      	subs	r3, r3, r2
 800616c:	eba3 0309 	sub.w	r3, r3, r9
 8006170:	4543      	cmp	r3, r8
 8006172:	f77f af79 	ble.w	8006068 <_printf_float+0x250>
 8006176:	2301      	movs	r3, #1
 8006178:	4652      	mov	r2, sl
 800617a:	4631      	mov	r1, r6
 800617c:	4628      	mov	r0, r5
 800617e:	47b8      	blx	r7
 8006180:	3001      	adds	r0, #1
 8006182:	f43f aeaa 	beq.w	8005eda <_printf_float+0xc2>
 8006186:	f108 0801 	add.w	r8, r8, #1
 800618a:	e7ec      	b.n	8006166 <_printf_float+0x34e>
 800618c:	4613      	mov	r3, r2
 800618e:	4631      	mov	r1, r6
 8006190:	4642      	mov	r2, r8
 8006192:	4628      	mov	r0, r5
 8006194:	47b8      	blx	r7
 8006196:	3001      	adds	r0, #1
 8006198:	d1c0      	bne.n	800611c <_printf_float+0x304>
 800619a:	e69e      	b.n	8005eda <_printf_float+0xc2>
 800619c:	2301      	movs	r3, #1
 800619e:	4631      	mov	r1, r6
 80061a0:	4628      	mov	r0, r5
 80061a2:	9205      	str	r2, [sp, #20]
 80061a4:	47b8      	blx	r7
 80061a6:	3001      	adds	r0, #1
 80061a8:	f43f ae97 	beq.w	8005eda <_printf_float+0xc2>
 80061ac:	9a05      	ldr	r2, [sp, #20]
 80061ae:	f10b 0b01 	add.w	fp, fp, #1
 80061b2:	e7b9      	b.n	8006128 <_printf_float+0x310>
 80061b4:	ee18 3a10 	vmov	r3, s16
 80061b8:	4652      	mov	r2, sl
 80061ba:	4631      	mov	r1, r6
 80061bc:	4628      	mov	r0, r5
 80061be:	47b8      	blx	r7
 80061c0:	3001      	adds	r0, #1
 80061c2:	d1be      	bne.n	8006142 <_printf_float+0x32a>
 80061c4:	e689      	b.n	8005eda <_printf_float+0xc2>
 80061c6:	9a05      	ldr	r2, [sp, #20]
 80061c8:	464b      	mov	r3, r9
 80061ca:	4442      	add	r2, r8
 80061cc:	4631      	mov	r1, r6
 80061ce:	4628      	mov	r0, r5
 80061d0:	47b8      	blx	r7
 80061d2:	3001      	adds	r0, #1
 80061d4:	d1c1      	bne.n	800615a <_printf_float+0x342>
 80061d6:	e680      	b.n	8005eda <_printf_float+0xc2>
 80061d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80061da:	2a01      	cmp	r2, #1
 80061dc:	dc01      	bgt.n	80061e2 <_printf_float+0x3ca>
 80061de:	07db      	lsls	r3, r3, #31
 80061e0:	d538      	bpl.n	8006254 <_printf_float+0x43c>
 80061e2:	2301      	movs	r3, #1
 80061e4:	4642      	mov	r2, r8
 80061e6:	4631      	mov	r1, r6
 80061e8:	4628      	mov	r0, r5
 80061ea:	47b8      	blx	r7
 80061ec:	3001      	adds	r0, #1
 80061ee:	f43f ae74 	beq.w	8005eda <_printf_float+0xc2>
 80061f2:	ee18 3a10 	vmov	r3, s16
 80061f6:	4652      	mov	r2, sl
 80061f8:	4631      	mov	r1, r6
 80061fa:	4628      	mov	r0, r5
 80061fc:	47b8      	blx	r7
 80061fe:	3001      	adds	r0, #1
 8006200:	f43f ae6b 	beq.w	8005eda <_printf_float+0xc2>
 8006204:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006208:	2200      	movs	r2, #0
 800620a:	2300      	movs	r3, #0
 800620c:	f7fa fc6c 	bl	8000ae8 <__aeabi_dcmpeq>
 8006210:	b9d8      	cbnz	r0, 800624a <_printf_float+0x432>
 8006212:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006214:	f108 0201 	add.w	r2, r8, #1
 8006218:	3b01      	subs	r3, #1
 800621a:	4631      	mov	r1, r6
 800621c:	4628      	mov	r0, r5
 800621e:	47b8      	blx	r7
 8006220:	3001      	adds	r0, #1
 8006222:	d10e      	bne.n	8006242 <_printf_float+0x42a>
 8006224:	e659      	b.n	8005eda <_printf_float+0xc2>
 8006226:	2301      	movs	r3, #1
 8006228:	4652      	mov	r2, sl
 800622a:	4631      	mov	r1, r6
 800622c:	4628      	mov	r0, r5
 800622e:	47b8      	blx	r7
 8006230:	3001      	adds	r0, #1
 8006232:	f43f ae52 	beq.w	8005eda <_printf_float+0xc2>
 8006236:	f108 0801 	add.w	r8, r8, #1
 800623a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800623c:	3b01      	subs	r3, #1
 800623e:	4543      	cmp	r3, r8
 8006240:	dcf1      	bgt.n	8006226 <_printf_float+0x40e>
 8006242:	464b      	mov	r3, r9
 8006244:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006248:	e6dc      	b.n	8006004 <_printf_float+0x1ec>
 800624a:	f04f 0800 	mov.w	r8, #0
 800624e:	f104 0a1a 	add.w	sl, r4, #26
 8006252:	e7f2      	b.n	800623a <_printf_float+0x422>
 8006254:	2301      	movs	r3, #1
 8006256:	4642      	mov	r2, r8
 8006258:	e7df      	b.n	800621a <_printf_float+0x402>
 800625a:	2301      	movs	r3, #1
 800625c:	464a      	mov	r2, r9
 800625e:	4631      	mov	r1, r6
 8006260:	4628      	mov	r0, r5
 8006262:	47b8      	blx	r7
 8006264:	3001      	adds	r0, #1
 8006266:	f43f ae38 	beq.w	8005eda <_printf_float+0xc2>
 800626a:	f108 0801 	add.w	r8, r8, #1
 800626e:	68e3      	ldr	r3, [r4, #12]
 8006270:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006272:	1a5b      	subs	r3, r3, r1
 8006274:	4543      	cmp	r3, r8
 8006276:	dcf0      	bgt.n	800625a <_printf_float+0x442>
 8006278:	e6fa      	b.n	8006070 <_printf_float+0x258>
 800627a:	f04f 0800 	mov.w	r8, #0
 800627e:	f104 0919 	add.w	r9, r4, #25
 8006282:	e7f4      	b.n	800626e <_printf_float+0x456>

08006284 <_printf_common>:
 8006284:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006288:	4616      	mov	r6, r2
 800628a:	4699      	mov	r9, r3
 800628c:	688a      	ldr	r2, [r1, #8]
 800628e:	690b      	ldr	r3, [r1, #16]
 8006290:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006294:	4293      	cmp	r3, r2
 8006296:	bfb8      	it	lt
 8006298:	4613      	movlt	r3, r2
 800629a:	6033      	str	r3, [r6, #0]
 800629c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80062a0:	4607      	mov	r7, r0
 80062a2:	460c      	mov	r4, r1
 80062a4:	b10a      	cbz	r2, 80062aa <_printf_common+0x26>
 80062a6:	3301      	adds	r3, #1
 80062a8:	6033      	str	r3, [r6, #0]
 80062aa:	6823      	ldr	r3, [r4, #0]
 80062ac:	0699      	lsls	r1, r3, #26
 80062ae:	bf42      	ittt	mi
 80062b0:	6833      	ldrmi	r3, [r6, #0]
 80062b2:	3302      	addmi	r3, #2
 80062b4:	6033      	strmi	r3, [r6, #0]
 80062b6:	6825      	ldr	r5, [r4, #0]
 80062b8:	f015 0506 	ands.w	r5, r5, #6
 80062bc:	d106      	bne.n	80062cc <_printf_common+0x48>
 80062be:	f104 0a19 	add.w	sl, r4, #25
 80062c2:	68e3      	ldr	r3, [r4, #12]
 80062c4:	6832      	ldr	r2, [r6, #0]
 80062c6:	1a9b      	subs	r3, r3, r2
 80062c8:	42ab      	cmp	r3, r5
 80062ca:	dc26      	bgt.n	800631a <_printf_common+0x96>
 80062cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80062d0:	1e13      	subs	r3, r2, #0
 80062d2:	6822      	ldr	r2, [r4, #0]
 80062d4:	bf18      	it	ne
 80062d6:	2301      	movne	r3, #1
 80062d8:	0692      	lsls	r2, r2, #26
 80062da:	d42b      	bmi.n	8006334 <_printf_common+0xb0>
 80062dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80062e0:	4649      	mov	r1, r9
 80062e2:	4638      	mov	r0, r7
 80062e4:	47c0      	blx	r8
 80062e6:	3001      	adds	r0, #1
 80062e8:	d01e      	beq.n	8006328 <_printf_common+0xa4>
 80062ea:	6823      	ldr	r3, [r4, #0]
 80062ec:	68e5      	ldr	r5, [r4, #12]
 80062ee:	6832      	ldr	r2, [r6, #0]
 80062f0:	f003 0306 	and.w	r3, r3, #6
 80062f4:	2b04      	cmp	r3, #4
 80062f6:	bf08      	it	eq
 80062f8:	1aad      	subeq	r5, r5, r2
 80062fa:	68a3      	ldr	r3, [r4, #8]
 80062fc:	6922      	ldr	r2, [r4, #16]
 80062fe:	bf0c      	ite	eq
 8006300:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006304:	2500      	movne	r5, #0
 8006306:	4293      	cmp	r3, r2
 8006308:	bfc4      	itt	gt
 800630a:	1a9b      	subgt	r3, r3, r2
 800630c:	18ed      	addgt	r5, r5, r3
 800630e:	2600      	movs	r6, #0
 8006310:	341a      	adds	r4, #26
 8006312:	42b5      	cmp	r5, r6
 8006314:	d11a      	bne.n	800634c <_printf_common+0xc8>
 8006316:	2000      	movs	r0, #0
 8006318:	e008      	b.n	800632c <_printf_common+0xa8>
 800631a:	2301      	movs	r3, #1
 800631c:	4652      	mov	r2, sl
 800631e:	4649      	mov	r1, r9
 8006320:	4638      	mov	r0, r7
 8006322:	47c0      	blx	r8
 8006324:	3001      	adds	r0, #1
 8006326:	d103      	bne.n	8006330 <_printf_common+0xac>
 8006328:	f04f 30ff 	mov.w	r0, #4294967295
 800632c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006330:	3501      	adds	r5, #1
 8006332:	e7c6      	b.n	80062c2 <_printf_common+0x3e>
 8006334:	18e1      	adds	r1, r4, r3
 8006336:	1c5a      	adds	r2, r3, #1
 8006338:	2030      	movs	r0, #48	; 0x30
 800633a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800633e:	4422      	add	r2, r4
 8006340:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006344:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006348:	3302      	adds	r3, #2
 800634a:	e7c7      	b.n	80062dc <_printf_common+0x58>
 800634c:	2301      	movs	r3, #1
 800634e:	4622      	mov	r2, r4
 8006350:	4649      	mov	r1, r9
 8006352:	4638      	mov	r0, r7
 8006354:	47c0      	blx	r8
 8006356:	3001      	adds	r0, #1
 8006358:	d0e6      	beq.n	8006328 <_printf_common+0xa4>
 800635a:	3601      	adds	r6, #1
 800635c:	e7d9      	b.n	8006312 <_printf_common+0x8e>
	...

08006360 <_printf_i>:
 8006360:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006364:	7e0f      	ldrb	r7, [r1, #24]
 8006366:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006368:	2f78      	cmp	r7, #120	; 0x78
 800636a:	4691      	mov	r9, r2
 800636c:	4680      	mov	r8, r0
 800636e:	460c      	mov	r4, r1
 8006370:	469a      	mov	sl, r3
 8006372:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006376:	d807      	bhi.n	8006388 <_printf_i+0x28>
 8006378:	2f62      	cmp	r7, #98	; 0x62
 800637a:	d80a      	bhi.n	8006392 <_printf_i+0x32>
 800637c:	2f00      	cmp	r7, #0
 800637e:	f000 80d8 	beq.w	8006532 <_printf_i+0x1d2>
 8006382:	2f58      	cmp	r7, #88	; 0x58
 8006384:	f000 80a3 	beq.w	80064ce <_printf_i+0x16e>
 8006388:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800638c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006390:	e03a      	b.n	8006408 <_printf_i+0xa8>
 8006392:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006396:	2b15      	cmp	r3, #21
 8006398:	d8f6      	bhi.n	8006388 <_printf_i+0x28>
 800639a:	a101      	add	r1, pc, #4	; (adr r1, 80063a0 <_printf_i+0x40>)
 800639c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80063a0:	080063f9 	.word	0x080063f9
 80063a4:	0800640d 	.word	0x0800640d
 80063a8:	08006389 	.word	0x08006389
 80063ac:	08006389 	.word	0x08006389
 80063b0:	08006389 	.word	0x08006389
 80063b4:	08006389 	.word	0x08006389
 80063b8:	0800640d 	.word	0x0800640d
 80063bc:	08006389 	.word	0x08006389
 80063c0:	08006389 	.word	0x08006389
 80063c4:	08006389 	.word	0x08006389
 80063c8:	08006389 	.word	0x08006389
 80063cc:	08006519 	.word	0x08006519
 80063d0:	0800643d 	.word	0x0800643d
 80063d4:	080064fb 	.word	0x080064fb
 80063d8:	08006389 	.word	0x08006389
 80063dc:	08006389 	.word	0x08006389
 80063e0:	0800653b 	.word	0x0800653b
 80063e4:	08006389 	.word	0x08006389
 80063e8:	0800643d 	.word	0x0800643d
 80063ec:	08006389 	.word	0x08006389
 80063f0:	08006389 	.word	0x08006389
 80063f4:	08006503 	.word	0x08006503
 80063f8:	682b      	ldr	r3, [r5, #0]
 80063fa:	1d1a      	adds	r2, r3, #4
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	602a      	str	r2, [r5, #0]
 8006400:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006404:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006408:	2301      	movs	r3, #1
 800640a:	e0a3      	b.n	8006554 <_printf_i+0x1f4>
 800640c:	6820      	ldr	r0, [r4, #0]
 800640e:	6829      	ldr	r1, [r5, #0]
 8006410:	0606      	lsls	r6, r0, #24
 8006412:	f101 0304 	add.w	r3, r1, #4
 8006416:	d50a      	bpl.n	800642e <_printf_i+0xce>
 8006418:	680e      	ldr	r6, [r1, #0]
 800641a:	602b      	str	r3, [r5, #0]
 800641c:	2e00      	cmp	r6, #0
 800641e:	da03      	bge.n	8006428 <_printf_i+0xc8>
 8006420:	232d      	movs	r3, #45	; 0x2d
 8006422:	4276      	negs	r6, r6
 8006424:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006428:	485e      	ldr	r0, [pc, #376]	; (80065a4 <_printf_i+0x244>)
 800642a:	230a      	movs	r3, #10
 800642c:	e019      	b.n	8006462 <_printf_i+0x102>
 800642e:	680e      	ldr	r6, [r1, #0]
 8006430:	602b      	str	r3, [r5, #0]
 8006432:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006436:	bf18      	it	ne
 8006438:	b236      	sxthne	r6, r6
 800643a:	e7ef      	b.n	800641c <_printf_i+0xbc>
 800643c:	682b      	ldr	r3, [r5, #0]
 800643e:	6820      	ldr	r0, [r4, #0]
 8006440:	1d19      	adds	r1, r3, #4
 8006442:	6029      	str	r1, [r5, #0]
 8006444:	0601      	lsls	r1, r0, #24
 8006446:	d501      	bpl.n	800644c <_printf_i+0xec>
 8006448:	681e      	ldr	r6, [r3, #0]
 800644a:	e002      	b.n	8006452 <_printf_i+0xf2>
 800644c:	0646      	lsls	r6, r0, #25
 800644e:	d5fb      	bpl.n	8006448 <_printf_i+0xe8>
 8006450:	881e      	ldrh	r6, [r3, #0]
 8006452:	4854      	ldr	r0, [pc, #336]	; (80065a4 <_printf_i+0x244>)
 8006454:	2f6f      	cmp	r7, #111	; 0x6f
 8006456:	bf0c      	ite	eq
 8006458:	2308      	moveq	r3, #8
 800645a:	230a      	movne	r3, #10
 800645c:	2100      	movs	r1, #0
 800645e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006462:	6865      	ldr	r5, [r4, #4]
 8006464:	60a5      	str	r5, [r4, #8]
 8006466:	2d00      	cmp	r5, #0
 8006468:	bfa2      	ittt	ge
 800646a:	6821      	ldrge	r1, [r4, #0]
 800646c:	f021 0104 	bicge.w	r1, r1, #4
 8006470:	6021      	strge	r1, [r4, #0]
 8006472:	b90e      	cbnz	r6, 8006478 <_printf_i+0x118>
 8006474:	2d00      	cmp	r5, #0
 8006476:	d04d      	beq.n	8006514 <_printf_i+0x1b4>
 8006478:	4615      	mov	r5, r2
 800647a:	fbb6 f1f3 	udiv	r1, r6, r3
 800647e:	fb03 6711 	mls	r7, r3, r1, r6
 8006482:	5dc7      	ldrb	r7, [r0, r7]
 8006484:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006488:	4637      	mov	r7, r6
 800648a:	42bb      	cmp	r3, r7
 800648c:	460e      	mov	r6, r1
 800648e:	d9f4      	bls.n	800647a <_printf_i+0x11a>
 8006490:	2b08      	cmp	r3, #8
 8006492:	d10b      	bne.n	80064ac <_printf_i+0x14c>
 8006494:	6823      	ldr	r3, [r4, #0]
 8006496:	07de      	lsls	r6, r3, #31
 8006498:	d508      	bpl.n	80064ac <_printf_i+0x14c>
 800649a:	6923      	ldr	r3, [r4, #16]
 800649c:	6861      	ldr	r1, [r4, #4]
 800649e:	4299      	cmp	r1, r3
 80064a0:	bfde      	ittt	le
 80064a2:	2330      	movle	r3, #48	; 0x30
 80064a4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80064a8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80064ac:	1b52      	subs	r2, r2, r5
 80064ae:	6122      	str	r2, [r4, #16]
 80064b0:	f8cd a000 	str.w	sl, [sp]
 80064b4:	464b      	mov	r3, r9
 80064b6:	aa03      	add	r2, sp, #12
 80064b8:	4621      	mov	r1, r4
 80064ba:	4640      	mov	r0, r8
 80064bc:	f7ff fee2 	bl	8006284 <_printf_common>
 80064c0:	3001      	adds	r0, #1
 80064c2:	d14c      	bne.n	800655e <_printf_i+0x1fe>
 80064c4:	f04f 30ff 	mov.w	r0, #4294967295
 80064c8:	b004      	add	sp, #16
 80064ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064ce:	4835      	ldr	r0, [pc, #212]	; (80065a4 <_printf_i+0x244>)
 80064d0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80064d4:	6829      	ldr	r1, [r5, #0]
 80064d6:	6823      	ldr	r3, [r4, #0]
 80064d8:	f851 6b04 	ldr.w	r6, [r1], #4
 80064dc:	6029      	str	r1, [r5, #0]
 80064de:	061d      	lsls	r5, r3, #24
 80064e0:	d514      	bpl.n	800650c <_printf_i+0x1ac>
 80064e2:	07df      	lsls	r7, r3, #31
 80064e4:	bf44      	itt	mi
 80064e6:	f043 0320 	orrmi.w	r3, r3, #32
 80064ea:	6023      	strmi	r3, [r4, #0]
 80064ec:	b91e      	cbnz	r6, 80064f6 <_printf_i+0x196>
 80064ee:	6823      	ldr	r3, [r4, #0]
 80064f0:	f023 0320 	bic.w	r3, r3, #32
 80064f4:	6023      	str	r3, [r4, #0]
 80064f6:	2310      	movs	r3, #16
 80064f8:	e7b0      	b.n	800645c <_printf_i+0xfc>
 80064fa:	6823      	ldr	r3, [r4, #0]
 80064fc:	f043 0320 	orr.w	r3, r3, #32
 8006500:	6023      	str	r3, [r4, #0]
 8006502:	2378      	movs	r3, #120	; 0x78
 8006504:	4828      	ldr	r0, [pc, #160]	; (80065a8 <_printf_i+0x248>)
 8006506:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800650a:	e7e3      	b.n	80064d4 <_printf_i+0x174>
 800650c:	0659      	lsls	r1, r3, #25
 800650e:	bf48      	it	mi
 8006510:	b2b6      	uxthmi	r6, r6
 8006512:	e7e6      	b.n	80064e2 <_printf_i+0x182>
 8006514:	4615      	mov	r5, r2
 8006516:	e7bb      	b.n	8006490 <_printf_i+0x130>
 8006518:	682b      	ldr	r3, [r5, #0]
 800651a:	6826      	ldr	r6, [r4, #0]
 800651c:	6961      	ldr	r1, [r4, #20]
 800651e:	1d18      	adds	r0, r3, #4
 8006520:	6028      	str	r0, [r5, #0]
 8006522:	0635      	lsls	r5, r6, #24
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	d501      	bpl.n	800652c <_printf_i+0x1cc>
 8006528:	6019      	str	r1, [r3, #0]
 800652a:	e002      	b.n	8006532 <_printf_i+0x1d2>
 800652c:	0670      	lsls	r0, r6, #25
 800652e:	d5fb      	bpl.n	8006528 <_printf_i+0x1c8>
 8006530:	8019      	strh	r1, [r3, #0]
 8006532:	2300      	movs	r3, #0
 8006534:	6123      	str	r3, [r4, #16]
 8006536:	4615      	mov	r5, r2
 8006538:	e7ba      	b.n	80064b0 <_printf_i+0x150>
 800653a:	682b      	ldr	r3, [r5, #0]
 800653c:	1d1a      	adds	r2, r3, #4
 800653e:	602a      	str	r2, [r5, #0]
 8006540:	681d      	ldr	r5, [r3, #0]
 8006542:	6862      	ldr	r2, [r4, #4]
 8006544:	2100      	movs	r1, #0
 8006546:	4628      	mov	r0, r5
 8006548:	f7f9 fe5a 	bl	8000200 <memchr>
 800654c:	b108      	cbz	r0, 8006552 <_printf_i+0x1f2>
 800654e:	1b40      	subs	r0, r0, r5
 8006550:	6060      	str	r0, [r4, #4]
 8006552:	6863      	ldr	r3, [r4, #4]
 8006554:	6123      	str	r3, [r4, #16]
 8006556:	2300      	movs	r3, #0
 8006558:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800655c:	e7a8      	b.n	80064b0 <_printf_i+0x150>
 800655e:	6923      	ldr	r3, [r4, #16]
 8006560:	462a      	mov	r2, r5
 8006562:	4649      	mov	r1, r9
 8006564:	4640      	mov	r0, r8
 8006566:	47d0      	blx	sl
 8006568:	3001      	adds	r0, #1
 800656a:	d0ab      	beq.n	80064c4 <_printf_i+0x164>
 800656c:	6823      	ldr	r3, [r4, #0]
 800656e:	079b      	lsls	r3, r3, #30
 8006570:	d413      	bmi.n	800659a <_printf_i+0x23a>
 8006572:	68e0      	ldr	r0, [r4, #12]
 8006574:	9b03      	ldr	r3, [sp, #12]
 8006576:	4298      	cmp	r0, r3
 8006578:	bfb8      	it	lt
 800657a:	4618      	movlt	r0, r3
 800657c:	e7a4      	b.n	80064c8 <_printf_i+0x168>
 800657e:	2301      	movs	r3, #1
 8006580:	4632      	mov	r2, r6
 8006582:	4649      	mov	r1, r9
 8006584:	4640      	mov	r0, r8
 8006586:	47d0      	blx	sl
 8006588:	3001      	adds	r0, #1
 800658a:	d09b      	beq.n	80064c4 <_printf_i+0x164>
 800658c:	3501      	adds	r5, #1
 800658e:	68e3      	ldr	r3, [r4, #12]
 8006590:	9903      	ldr	r1, [sp, #12]
 8006592:	1a5b      	subs	r3, r3, r1
 8006594:	42ab      	cmp	r3, r5
 8006596:	dcf2      	bgt.n	800657e <_printf_i+0x21e>
 8006598:	e7eb      	b.n	8006572 <_printf_i+0x212>
 800659a:	2500      	movs	r5, #0
 800659c:	f104 0619 	add.w	r6, r4, #25
 80065a0:	e7f5      	b.n	800658e <_printf_i+0x22e>
 80065a2:	bf00      	nop
 80065a4:	0800a73a 	.word	0x0800a73a
 80065a8:	0800a74b 	.word	0x0800a74b

080065ac <_scanf_float>:
 80065ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065b0:	b087      	sub	sp, #28
 80065b2:	4617      	mov	r7, r2
 80065b4:	9303      	str	r3, [sp, #12]
 80065b6:	688b      	ldr	r3, [r1, #8]
 80065b8:	1e5a      	subs	r2, r3, #1
 80065ba:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80065be:	bf83      	ittte	hi
 80065c0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80065c4:	195b      	addhi	r3, r3, r5
 80065c6:	9302      	strhi	r3, [sp, #8]
 80065c8:	2300      	movls	r3, #0
 80065ca:	bf86      	itte	hi
 80065cc:	f240 135d 	movwhi	r3, #349	; 0x15d
 80065d0:	608b      	strhi	r3, [r1, #8]
 80065d2:	9302      	strls	r3, [sp, #8]
 80065d4:	680b      	ldr	r3, [r1, #0]
 80065d6:	468b      	mov	fp, r1
 80065d8:	2500      	movs	r5, #0
 80065da:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80065de:	f84b 3b1c 	str.w	r3, [fp], #28
 80065e2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80065e6:	4680      	mov	r8, r0
 80065e8:	460c      	mov	r4, r1
 80065ea:	465e      	mov	r6, fp
 80065ec:	46aa      	mov	sl, r5
 80065ee:	46a9      	mov	r9, r5
 80065f0:	9501      	str	r5, [sp, #4]
 80065f2:	68a2      	ldr	r2, [r4, #8]
 80065f4:	b152      	cbz	r2, 800660c <_scanf_float+0x60>
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	781b      	ldrb	r3, [r3, #0]
 80065fa:	2b4e      	cmp	r3, #78	; 0x4e
 80065fc:	d864      	bhi.n	80066c8 <_scanf_float+0x11c>
 80065fe:	2b40      	cmp	r3, #64	; 0x40
 8006600:	d83c      	bhi.n	800667c <_scanf_float+0xd0>
 8006602:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8006606:	b2c8      	uxtb	r0, r1
 8006608:	280e      	cmp	r0, #14
 800660a:	d93a      	bls.n	8006682 <_scanf_float+0xd6>
 800660c:	f1b9 0f00 	cmp.w	r9, #0
 8006610:	d003      	beq.n	800661a <_scanf_float+0x6e>
 8006612:	6823      	ldr	r3, [r4, #0]
 8006614:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006618:	6023      	str	r3, [r4, #0]
 800661a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800661e:	f1ba 0f01 	cmp.w	sl, #1
 8006622:	f200 8113 	bhi.w	800684c <_scanf_float+0x2a0>
 8006626:	455e      	cmp	r6, fp
 8006628:	f200 8105 	bhi.w	8006836 <_scanf_float+0x28a>
 800662c:	2501      	movs	r5, #1
 800662e:	4628      	mov	r0, r5
 8006630:	b007      	add	sp, #28
 8006632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006636:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800663a:	2a0d      	cmp	r2, #13
 800663c:	d8e6      	bhi.n	800660c <_scanf_float+0x60>
 800663e:	a101      	add	r1, pc, #4	; (adr r1, 8006644 <_scanf_float+0x98>)
 8006640:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006644:	08006783 	.word	0x08006783
 8006648:	0800660d 	.word	0x0800660d
 800664c:	0800660d 	.word	0x0800660d
 8006650:	0800660d 	.word	0x0800660d
 8006654:	080067e3 	.word	0x080067e3
 8006658:	080067bb 	.word	0x080067bb
 800665c:	0800660d 	.word	0x0800660d
 8006660:	0800660d 	.word	0x0800660d
 8006664:	08006791 	.word	0x08006791
 8006668:	0800660d 	.word	0x0800660d
 800666c:	0800660d 	.word	0x0800660d
 8006670:	0800660d 	.word	0x0800660d
 8006674:	0800660d 	.word	0x0800660d
 8006678:	08006749 	.word	0x08006749
 800667c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006680:	e7db      	b.n	800663a <_scanf_float+0x8e>
 8006682:	290e      	cmp	r1, #14
 8006684:	d8c2      	bhi.n	800660c <_scanf_float+0x60>
 8006686:	a001      	add	r0, pc, #4	; (adr r0, 800668c <_scanf_float+0xe0>)
 8006688:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800668c:	0800673b 	.word	0x0800673b
 8006690:	0800660d 	.word	0x0800660d
 8006694:	0800673b 	.word	0x0800673b
 8006698:	080067cf 	.word	0x080067cf
 800669c:	0800660d 	.word	0x0800660d
 80066a0:	080066e9 	.word	0x080066e9
 80066a4:	08006725 	.word	0x08006725
 80066a8:	08006725 	.word	0x08006725
 80066ac:	08006725 	.word	0x08006725
 80066b0:	08006725 	.word	0x08006725
 80066b4:	08006725 	.word	0x08006725
 80066b8:	08006725 	.word	0x08006725
 80066bc:	08006725 	.word	0x08006725
 80066c0:	08006725 	.word	0x08006725
 80066c4:	08006725 	.word	0x08006725
 80066c8:	2b6e      	cmp	r3, #110	; 0x6e
 80066ca:	d809      	bhi.n	80066e0 <_scanf_float+0x134>
 80066cc:	2b60      	cmp	r3, #96	; 0x60
 80066ce:	d8b2      	bhi.n	8006636 <_scanf_float+0x8a>
 80066d0:	2b54      	cmp	r3, #84	; 0x54
 80066d2:	d077      	beq.n	80067c4 <_scanf_float+0x218>
 80066d4:	2b59      	cmp	r3, #89	; 0x59
 80066d6:	d199      	bne.n	800660c <_scanf_float+0x60>
 80066d8:	2d07      	cmp	r5, #7
 80066da:	d197      	bne.n	800660c <_scanf_float+0x60>
 80066dc:	2508      	movs	r5, #8
 80066de:	e029      	b.n	8006734 <_scanf_float+0x188>
 80066e0:	2b74      	cmp	r3, #116	; 0x74
 80066e2:	d06f      	beq.n	80067c4 <_scanf_float+0x218>
 80066e4:	2b79      	cmp	r3, #121	; 0x79
 80066e6:	e7f6      	b.n	80066d6 <_scanf_float+0x12a>
 80066e8:	6821      	ldr	r1, [r4, #0]
 80066ea:	05c8      	lsls	r0, r1, #23
 80066ec:	d51a      	bpl.n	8006724 <_scanf_float+0x178>
 80066ee:	9b02      	ldr	r3, [sp, #8]
 80066f0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80066f4:	6021      	str	r1, [r4, #0]
 80066f6:	f109 0901 	add.w	r9, r9, #1
 80066fa:	b11b      	cbz	r3, 8006704 <_scanf_float+0x158>
 80066fc:	3b01      	subs	r3, #1
 80066fe:	3201      	adds	r2, #1
 8006700:	9302      	str	r3, [sp, #8]
 8006702:	60a2      	str	r2, [r4, #8]
 8006704:	68a3      	ldr	r3, [r4, #8]
 8006706:	3b01      	subs	r3, #1
 8006708:	60a3      	str	r3, [r4, #8]
 800670a:	6923      	ldr	r3, [r4, #16]
 800670c:	3301      	adds	r3, #1
 800670e:	6123      	str	r3, [r4, #16]
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	3b01      	subs	r3, #1
 8006714:	2b00      	cmp	r3, #0
 8006716:	607b      	str	r3, [r7, #4]
 8006718:	f340 8084 	ble.w	8006824 <_scanf_float+0x278>
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	3301      	adds	r3, #1
 8006720:	603b      	str	r3, [r7, #0]
 8006722:	e766      	b.n	80065f2 <_scanf_float+0x46>
 8006724:	eb1a 0f05 	cmn.w	sl, r5
 8006728:	f47f af70 	bne.w	800660c <_scanf_float+0x60>
 800672c:	6822      	ldr	r2, [r4, #0]
 800672e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8006732:	6022      	str	r2, [r4, #0]
 8006734:	f806 3b01 	strb.w	r3, [r6], #1
 8006738:	e7e4      	b.n	8006704 <_scanf_float+0x158>
 800673a:	6822      	ldr	r2, [r4, #0]
 800673c:	0610      	lsls	r0, r2, #24
 800673e:	f57f af65 	bpl.w	800660c <_scanf_float+0x60>
 8006742:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006746:	e7f4      	b.n	8006732 <_scanf_float+0x186>
 8006748:	f1ba 0f00 	cmp.w	sl, #0
 800674c:	d10e      	bne.n	800676c <_scanf_float+0x1c0>
 800674e:	f1b9 0f00 	cmp.w	r9, #0
 8006752:	d10e      	bne.n	8006772 <_scanf_float+0x1c6>
 8006754:	6822      	ldr	r2, [r4, #0]
 8006756:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800675a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800675e:	d108      	bne.n	8006772 <_scanf_float+0x1c6>
 8006760:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006764:	6022      	str	r2, [r4, #0]
 8006766:	f04f 0a01 	mov.w	sl, #1
 800676a:	e7e3      	b.n	8006734 <_scanf_float+0x188>
 800676c:	f1ba 0f02 	cmp.w	sl, #2
 8006770:	d055      	beq.n	800681e <_scanf_float+0x272>
 8006772:	2d01      	cmp	r5, #1
 8006774:	d002      	beq.n	800677c <_scanf_float+0x1d0>
 8006776:	2d04      	cmp	r5, #4
 8006778:	f47f af48 	bne.w	800660c <_scanf_float+0x60>
 800677c:	3501      	adds	r5, #1
 800677e:	b2ed      	uxtb	r5, r5
 8006780:	e7d8      	b.n	8006734 <_scanf_float+0x188>
 8006782:	f1ba 0f01 	cmp.w	sl, #1
 8006786:	f47f af41 	bne.w	800660c <_scanf_float+0x60>
 800678a:	f04f 0a02 	mov.w	sl, #2
 800678e:	e7d1      	b.n	8006734 <_scanf_float+0x188>
 8006790:	b97d      	cbnz	r5, 80067b2 <_scanf_float+0x206>
 8006792:	f1b9 0f00 	cmp.w	r9, #0
 8006796:	f47f af3c 	bne.w	8006612 <_scanf_float+0x66>
 800679a:	6822      	ldr	r2, [r4, #0]
 800679c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80067a0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80067a4:	f47f af39 	bne.w	800661a <_scanf_float+0x6e>
 80067a8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80067ac:	6022      	str	r2, [r4, #0]
 80067ae:	2501      	movs	r5, #1
 80067b0:	e7c0      	b.n	8006734 <_scanf_float+0x188>
 80067b2:	2d03      	cmp	r5, #3
 80067b4:	d0e2      	beq.n	800677c <_scanf_float+0x1d0>
 80067b6:	2d05      	cmp	r5, #5
 80067b8:	e7de      	b.n	8006778 <_scanf_float+0x1cc>
 80067ba:	2d02      	cmp	r5, #2
 80067bc:	f47f af26 	bne.w	800660c <_scanf_float+0x60>
 80067c0:	2503      	movs	r5, #3
 80067c2:	e7b7      	b.n	8006734 <_scanf_float+0x188>
 80067c4:	2d06      	cmp	r5, #6
 80067c6:	f47f af21 	bne.w	800660c <_scanf_float+0x60>
 80067ca:	2507      	movs	r5, #7
 80067cc:	e7b2      	b.n	8006734 <_scanf_float+0x188>
 80067ce:	6822      	ldr	r2, [r4, #0]
 80067d0:	0591      	lsls	r1, r2, #22
 80067d2:	f57f af1b 	bpl.w	800660c <_scanf_float+0x60>
 80067d6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80067da:	6022      	str	r2, [r4, #0]
 80067dc:	f8cd 9004 	str.w	r9, [sp, #4]
 80067e0:	e7a8      	b.n	8006734 <_scanf_float+0x188>
 80067e2:	6822      	ldr	r2, [r4, #0]
 80067e4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80067e8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80067ec:	d006      	beq.n	80067fc <_scanf_float+0x250>
 80067ee:	0550      	lsls	r0, r2, #21
 80067f0:	f57f af0c 	bpl.w	800660c <_scanf_float+0x60>
 80067f4:	f1b9 0f00 	cmp.w	r9, #0
 80067f8:	f43f af0f 	beq.w	800661a <_scanf_float+0x6e>
 80067fc:	0591      	lsls	r1, r2, #22
 80067fe:	bf58      	it	pl
 8006800:	9901      	ldrpl	r1, [sp, #4]
 8006802:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006806:	bf58      	it	pl
 8006808:	eba9 0101 	subpl.w	r1, r9, r1
 800680c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006810:	bf58      	it	pl
 8006812:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006816:	6022      	str	r2, [r4, #0]
 8006818:	f04f 0900 	mov.w	r9, #0
 800681c:	e78a      	b.n	8006734 <_scanf_float+0x188>
 800681e:	f04f 0a03 	mov.w	sl, #3
 8006822:	e787      	b.n	8006734 <_scanf_float+0x188>
 8006824:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006828:	4639      	mov	r1, r7
 800682a:	4640      	mov	r0, r8
 800682c:	4798      	blx	r3
 800682e:	2800      	cmp	r0, #0
 8006830:	f43f aedf 	beq.w	80065f2 <_scanf_float+0x46>
 8006834:	e6ea      	b.n	800660c <_scanf_float+0x60>
 8006836:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800683a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800683e:	463a      	mov	r2, r7
 8006840:	4640      	mov	r0, r8
 8006842:	4798      	blx	r3
 8006844:	6923      	ldr	r3, [r4, #16]
 8006846:	3b01      	subs	r3, #1
 8006848:	6123      	str	r3, [r4, #16]
 800684a:	e6ec      	b.n	8006626 <_scanf_float+0x7a>
 800684c:	1e6b      	subs	r3, r5, #1
 800684e:	2b06      	cmp	r3, #6
 8006850:	d825      	bhi.n	800689e <_scanf_float+0x2f2>
 8006852:	2d02      	cmp	r5, #2
 8006854:	d836      	bhi.n	80068c4 <_scanf_float+0x318>
 8006856:	455e      	cmp	r6, fp
 8006858:	f67f aee8 	bls.w	800662c <_scanf_float+0x80>
 800685c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006860:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006864:	463a      	mov	r2, r7
 8006866:	4640      	mov	r0, r8
 8006868:	4798      	blx	r3
 800686a:	6923      	ldr	r3, [r4, #16]
 800686c:	3b01      	subs	r3, #1
 800686e:	6123      	str	r3, [r4, #16]
 8006870:	e7f1      	b.n	8006856 <_scanf_float+0x2aa>
 8006872:	9802      	ldr	r0, [sp, #8]
 8006874:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006878:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800687c:	9002      	str	r0, [sp, #8]
 800687e:	463a      	mov	r2, r7
 8006880:	4640      	mov	r0, r8
 8006882:	4798      	blx	r3
 8006884:	6923      	ldr	r3, [r4, #16]
 8006886:	3b01      	subs	r3, #1
 8006888:	6123      	str	r3, [r4, #16]
 800688a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800688e:	fa5f fa8a 	uxtb.w	sl, sl
 8006892:	f1ba 0f02 	cmp.w	sl, #2
 8006896:	d1ec      	bne.n	8006872 <_scanf_float+0x2c6>
 8006898:	3d03      	subs	r5, #3
 800689a:	b2ed      	uxtb	r5, r5
 800689c:	1b76      	subs	r6, r6, r5
 800689e:	6823      	ldr	r3, [r4, #0]
 80068a0:	05da      	lsls	r2, r3, #23
 80068a2:	d52f      	bpl.n	8006904 <_scanf_float+0x358>
 80068a4:	055b      	lsls	r3, r3, #21
 80068a6:	d510      	bpl.n	80068ca <_scanf_float+0x31e>
 80068a8:	455e      	cmp	r6, fp
 80068aa:	f67f aebf 	bls.w	800662c <_scanf_float+0x80>
 80068ae:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80068b2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80068b6:	463a      	mov	r2, r7
 80068b8:	4640      	mov	r0, r8
 80068ba:	4798      	blx	r3
 80068bc:	6923      	ldr	r3, [r4, #16]
 80068be:	3b01      	subs	r3, #1
 80068c0:	6123      	str	r3, [r4, #16]
 80068c2:	e7f1      	b.n	80068a8 <_scanf_float+0x2fc>
 80068c4:	46aa      	mov	sl, r5
 80068c6:	9602      	str	r6, [sp, #8]
 80068c8:	e7df      	b.n	800688a <_scanf_float+0x2de>
 80068ca:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80068ce:	6923      	ldr	r3, [r4, #16]
 80068d0:	2965      	cmp	r1, #101	; 0x65
 80068d2:	f103 33ff 	add.w	r3, r3, #4294967295
 80068d6:	f106 35ff 	add.w	r5, r6, #4294967295
 80068da:	6123      	str	r3, [r4, #16]
 80068dc:	d00c      	beq.n	80068f8 <_scanf_float+0x34c>
 80068de:	2945      	cmp	r1, #69	; 0x45
 80068e0:	d00a      	beq.n	80068f8 <_scanf_float+0x34c>
 80068e2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80068e6:	463a      	mov	r2, r7
 80068e8:	4640      	mov	r0, r8
 80068ea:	4798      	blx	r3
 80068ec:	6923      	ldr	r3, [r4, #16]
 80068ee:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80068f2:	3b01      	subs	r3, #1
 80068f4:	1eb5      	subs	r5, r6, #2
 80068f6:	6123      	str	r3, [r4, #16]
 80068f8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80068fc:	463a      	mov	r2, r7
 80068fe:	4640      	mov	r0, r8
 8006900:	4798      	blx	r3
 8006902:	462e      	mov	r6, r5
 8006904:	6825      	ldr	r5, [r4, #0]
 8006906:	f015 0510 	ands.w	r5, r5, #16
 800690a:	d159      	bne.n	80069c0 <_scanf_float+0x414>
 800690c:	7035      	strb	r5, [r6, #0]
 800690e:	6823      	ldr	r3, [r4, #0]
 8006910:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006914:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006918:	d11b      	bne.n	8006952 <_scanf_float+0x3a6>
 800691a:	9b01      	ldr	r3, [sp, #4]
 800691c:	454b      	cmp	r3, r9
 800691e:	eba3 0209 	sub.w	r2, r3, r9
 8006922:	d123      	bne.n	800696c <_scanf_float+0x3c0>
 8006924:	2200      	movs	r2, #0
 8006926:	4659      	mov	r1, fp
 8006928:	4640      	mov	r0, r8
 800692a:	f000 ff27 	bl	800777c <_strtod_r>
 800692e:	6822      	ldr	r2, [r4, #0]
 8006930:	9b03      	ldr	r3, [sp, #12]
 8006932:	f012 0f02 	tst.w	r2, #2
 8006936:	ec57 6b10 	vmov	r6, r7, d0
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	d021      	beq.n	8006982 <_scanf_float+0x3d6>
 800693e:	9903      	ldr	r1, [sp, #12]
 8006940:	1d1a      	adds	r2, r3, #4
 8006942:	600a      	str	r2, [r1, #0]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	e9c3 6700 	strd	r6, r7, [r3]
 800694a:	68e3      	ldr	r3, [r4, #12]
 800694c:	3301      	adds	r3, #1
 800694e:	60e3      	str	r3, [r4, #12]
 8006950:	e66d      	b.n	800662e <_scanf_float+0x82>
 8006952:	9b04      	ldr	r3, [sp, #16]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d0e5      	beq.n	8006924 <_scanf_float+0x378>
 8006958:	9905      	ldr	r1, [sp, #20]
 800695a:	230a      	movs	r3, #10
 800695c:	462a      	mov	r2, r5
 800695e:	3101      	adds	r1, #1
 8006960:	4640      	mov	r0, r8
 8006962:	f000 ff93 	bl	800788c <_strtol_r>
 8006966:	9b04      	ldr	r3, [sp, #16]
 8006968:	9e05      	ldr	r6, [sp, #20]
 800696a:	1ac2      	subs	r2, r0, r3
 800696c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006970:	429e      	cmp	r6, r3
 8006972:	bf28      	it	cs
 8006974:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8006978:	4912      	ldr	r1, [pc, #72]	; (80069c4 <_scanf_float+0x418>)
 800697a:	4630      	mov	r0, r6
 800697c:	f000 f8ba 	bl	8006af4 <siprintf>
 8006980:	e7d0      	b.n	8006924 <_scanf_float+0x378>
 8006982:	9903      	ldr	r1, [sp, #12]
 8006984:	f012 0f04 	tst.w	r2, #4
 8006988:	f103 0204 	add.w	r2, r3, #4
 800698c:	600a      	str	r2, [r1, #0]
 800698e:	d1d9      	bne.n	8006944 <_scanf_float+0x398>
 8006990:	f8d3 8000 	ldr.w	r8, [r3]
 8006994:	ee10 2a10 	vmov	r2, s0
 8006998:	ee10 0a10 	vmov	r0, s0
 800699c:	463b      	mov	r3, r7
 800699e:	4639      	mov	r1, r7
 80069a0:	f7fa f8d4 	bl	8000b4c <__aeabi_dcmpun>
 80069a4:	b128      	cbz	r0, 80069b2 <_scanf_float+0x406>
 80069a6:	4808      	ldr	r0, [pc, #32]	; (80069c8 <_scanf_float+0x41c>)
 80069a8:	f000 f89e 	bl	8006ae8 <nanf>
 80069ac:	ed88 0a00 	vstr	s0, [r8]
 80069b0:	e7cb      	b.n	800694a <_scanf_float+0x39e>
 80069b2:	4630      	mov	r0, r6
 80069b4:	4639      	mov	r1, r7
 80069b6:	f7fa f927 	bl	8000c08 <__aeabi_d2f>
 80069ba:	f8c8 0000 	str.w	r0, [r8]
 80069be:	e7c4      	b.n	800694a <_scanf_float+0x39e>
 80069c0:	2500      	movs	r5, #0
 80069c2:	e634      	b.n	800662e <_scanf_float+0x82>
 80069c4:	0800a75c 	.word	0x0800a75c
 80069c8:	0800abd0 	.word	0x0800abd0

080069cc <iprintf>:
 80069cc:	b40f      	push	{r0, r1, r2, r3}
 80069ce:	4b0a      	ldr	r3, [pc, #40]	; (80069f8 <iprintf+0x2c>)
 80069d0:	b513      	push	{r0, r1, r4, lr}
 80069d2:	681c      	ldr	r4, [r3, #0]
 80069d4:	b124      	cbz	r4, 80069e0 <iprintf+0x14>
 80069d6:	69a3      	ldr	r3, [r4, #24]
 80069d8:	b913      	cbnz	r3, 80069e0 <iprintf+0x14>
 80069da:	4620      	mov	r0, r4
 80069dc:	f001 ffac 	bl	8008938 <__sinit>
 80069e0:	ab05      	add	r3, sp, #20
 80069e2:	9a04      	ldr	r2, [sp, #16]
 80069e4:	68a1      	ldr	r1, [r4, #8]
 80069e6:	9301      	str	r3, [sp, #4]
 80069e8:	4620      	mov	r0, r4
 80069ea:	f003 fb83 	bl	800a0f4 <_vfiprintf_r>
 80069ee:	b002      	add	sp, #8
 80069f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80069f4:	b004      	add	sp, #16
 80069f6:	4770      	bx	lr
 80069f8:	2000000c 	.word	0x2000000c

080069fc <_puts_r>:
 80069fc:	b570      	push	{r4, r5, r6, lr}
 80069fe:	460e      	mov	r6, r1
 8006a00:	4605      	mov	r5, r0
 8006a02:	b118      	cbz	r0, 8006a0c <_puts_r+0x10>
 8006a04:	6983      	ldr	r3, [r0, #24]
 8006a06:	b90b      	cbnz	r3, 8006a0c <_puts_r+0x10>
 8006a08:	f001 ff96 	bl	8008938 <__sinit>
 8006a0c:	69ab      	ldr	r3, [r5, #24]
 8006a0e:	68ac      	ldr	r4, [r5, #8]
 8006a10:	b913      	cbnz	r3, 8006a18 <_puts_r+0x1c>
 8006a12:	4628      	mov	r0, r5
 8006a14:	f001 ff90 	bl	8008938 <__sinit>
 8006a18:	4b2c      	ldr	r3, [pc, #176]	; (8006acc <_puts_r+0xd0>)
 8006a1a:	429c      	cmp	r4, r3
 8006a1c:	d120      	bne.n	8006a60 <_puts_r+0x64>
 8006a1e:	686c      	ldr	r4, [r5, #4]
 8006a20:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006a22:	07db      	lsls	r3, r3, #31
 8006a24:	d405      	bmi.n	8006a32 <_puts_r+0x36>
 8006a26:	89a3      	ldrh	r3, [r4, #12]
 8006a28:	0598      	lsls	r0, r3, #22
 8006a2a:	d402      	bmi.n	8006a32 <_puts_r+0x36>
 8006a2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006a2e:	f002 fb94 	bl	800915a <__retarget_lock_acquire_recursive>
 8006a32:	89a3      	ldrh	r3, [r4, #12]
 8006a34:	0719      	lsls	r1, r3, #28
 8006a36:	d51d      	bpl.n	8006a74 <_puts_r+0x78>
 8006a38:	6923      	ldr	r3, [r4, #16]
 8006a3a:	b1db      	cbz	r3, 8006a74 <_puts_r+0x78>
 8006a3c:	3e01      	subs	r6, #1
 8006a3e:	68a3      	ldr	r3, [r4, #8]
 8006a40:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006a44:	3b01      	subs	r3, #1
 8006a46:	60a3      	str	r3, [r4, #8]
 8006a48:	bb39      	cbnz	r1, 8006a9a <_puts_r+0x9e>
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	da38      	bge.n	8006ac0 <_puts_r+0xc4>
 8006a4e:	4622      	mov	r2, r4
 8006a50:	210a      	movs	r1, #10
 8006a52:	4628      	mov	r0, r5
 8006a54:	f000 ff1c 	bl	8007890 <__swbuf_r>
 8006a58:	3001      	adds	r0, #1
 8006a5a:	d011      	beq.n	8006a80 <_puts_r+0x84>
 8006a5c:	250a      	movs	r5, #10
 8006a5e:	e011      	b.n	8006a84 <_puts_r+0x88>
 8006a60:	4b1b      	ldr	r3, [pc, #108]	; (8006ad0 <_puts_r+0xd4>)
 8006a62:	429c      	cmp	r4, r3
 8006a64:	d101      	bne.n	8006a6a <_puts_r+0x6e>
 8006a66:	68ac      	ldr	r4, [r5, #8]
 8006a68:	e7da      	b.n	8006a20 <_puts_r+0x24>
 8006a6a:	4b1a      	ldr	r3, [pc, #104]	; (8006ad4 <_puts_r+0xd8>)
 8006a6c:	429c      	cmp	r4, r3
 8006a6e:	bf08      	it	eq
 8006a70:	68ec      	ldreq	r4, [r5, #12]
 8006a72:	e7d5      	b.n	8006a20 <_puts_r+0x24>
 8006a74:	4621      	mov	r1, r4
 8006a76:	4628      	mov	r0, r5
 8006a78:	f000 ff5c 	bl	8007934 <__swsetup_r>
 8006a7c:	2800      	cmp	r0, #0
 8006a7e:	d0dd      	beq.n	8006a3c <_puts_r+0x40>
 8006a80:	f04f 35ff 	mov.w	r5, #4294967295
 8006a84:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006a86:	07da      	lsls	r2, r3, #31
 8006a88:	d405      	bmi.n	8006a96 <_puts_r+0x9a>
 8006a8a:	89a3      	ldrh	r3, [r4, #12]
 8006a8c:	059b      	lsls	r3, r3, #22
 8006a8e:	d402      	bmi.n	8006a96 <_puts_r+0x9a>
 8006a90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006a92:	f002 fb63 	bl	800915c <__retarget_lock_release_recursive>
 8006a96:	4628      	mov	r0, r5
 8006a98:	bd70      	pop	{r4, r5, r6, pc}
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	da04      	bge.n	8006aa8 <_puts_r+0xac>
 8006a9e:	69a2      	ldr	r2, [r4, #24]
 8006aa0:	429a      	cmp	r2, r3
 8006aa2:	dc06      	bgt.n	8006ab2 <_puts_r+0xb6>
 8006aa4:	290a      	cmp	r1, #10
 8006aa6:	d004      	beq.n	8006ab2 <_puts_r+0xb6>
 8006aa8:	6823      	ldr	r3, [r4, #0]
 8006aaa:	1c5a      	adds	r2, r3, #1
 8006aac:	6022      	str	r2, [r4, #0]
 8006aae:	7019      	strb	r1, [r3, #0]
 8006ab0:	e7c5      	b.n	8006a3e <_puts_r+0x42>
 8006ab2:	4622      	mov	r2, r4
 8006ab4:	4628      	mov	r0, r5
 8006ab6:	f000 feeb 	bl	8007890 <__swbuf_r>
 8006aba:	3001      	adds	r0, #1
 8006abc:	d1bf      	bne.n	8006a3e <_puts_r+0x42>
 8006abe:	e7df      	b.n	8006a80 <_puts_r+0x84>
 8006ac0:	6823      	ldr	r3, [r4, #0]
 8006ac2:	250a      	movs	r5, #10
 8006ac4:	1c5a      	adds	r2, r3, #1
 8006ac6:	6022      	str	r2, [r4, #0]
 8006ac8:	701d      	strb	r5, [r3, #0]
 8006aca:	e7db      	b.n	8006a84 <_puts_r+0x88>
 8006acc:	0800a96c 	.word	0x0800a96c
 8006ad0:	0800a98c 	.word	0x0800a98c
 8006ad4:	0800a94c 	.word	0x0800a94c

08006ad8 <puts>:
 8006ad8:	4b02      	ldr	r3, [pc, #8]	; (8006ae4 <puts+0xc>)
 8006ada:	4601      	mov	r1, r0
 8006adc:	6818      	ldr	r0, [r3, #0]
 8006ade:	f7ff bf8d 	b.w	80069fc <_puts_r>
 8006ae2:	bf00      	nop
 8006ae4:	2000000c 	.word	0x2000000c

08006ae8 <nanf>:
 8006ae8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006af0 <nanf+0x8>
 8006aec:	4770      	bx	lr
 8006aee:	bf00      	nop
 8006af0:	7fc00000 	.word	0x7fc00000

08006af4 <siprintf>:
 8006af4:	b40e      	push	{r1, r2, r3}
 8006af6:	b500      	push	{lr}
 8006af8:	b09c      	sub	sp, #112	; 0x70
 8006afa:	ab1d      	add	r3, sp, #116	; 0x74
 8006afc:	9002      	str	r0, [sp, #8]
 8006afe:	9006      	str	r0, [sp, #24]
 8006b00:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006b04:	4809      	ldr	r0, [pc, #36]	; (8006b2c <siprintf+0x38>)
 8006b06:	9107      	str	r1, [sp, #28]
 8006b08:	9104      	str	r1, [sp, #16]
 8006b0a:	4909      	ldr	r1, [pc, #36]	; (8006b30 <siprintf+0x3c>)
 8006b0c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b10:	9105      	str	r1, [sp, #20]
 8006b12:	6800      	ldr	r0, [r0, #0]
 8006b14:	9301      	str	r3, [sp, #4]
 8006b16:	a902      	add	r1, sp, #8
 8006b18:	f003 f9c2 	bl	8009ea0 <_svfiprintf_r>
 8006b1c:	9b02      	ldr	r3, [sp, #8]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	701a      	strb	r2, [r3, #0]
 8006b22:	b01c      	add	sp, #112	; 0x70
 8006b24:	f85d eb04 	ldr.w	lr, [sp], #4
 8006b28:	b003      	add	sp, #12
 8006b2a:	4770      	bx	lr
 8006b2c:	2000000c 	.word	0x2000000c
 8006b30:	ffff0208 	.word	0xffff0208

08006b34 <sulp>:
 8006b34:	b570      	push	{r4, r5, r6, lr}
 8006b36:	4604      	mov	r4, r0
 8006b38:	460d      	mov	r5, r1
 8006b3a:	ec45 4b10 	vmov	d0, r4, r5
 8006b3e:	4616      	mov	r6, r2
 8006b40:	f002 ff0c 	bl	800995c <__ulp>
 8006b44:	ec51 0b10 	vmov	r0, r1, d0
 8006b48:	b17e      	cbz	r6, 8006b6a <sulp+0x36>
 8006b4a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006b4e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	dd09      	ble.n	8006b6a <sulp+0x36>
 8006b56:	051b      	lsls	r3, r3, #20
 8006b58:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006b5c:	2400      	movs	r4, #0
 8006b5e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006b62:	4622      	mov	r2, r4
 8006b64:	462b      	mov	r3, r5
 8006b66:	f7f9 fd57 	bl	8000618 <__aeabi_dmul>
 8006b6a:	bd70      	pop	{r4, r5, r6, pc}
 8006b6c:	0000      	movs	r0, r0
	...

08006b70 <_strtod_l>:
 8006b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b74:	ed2d 8b02 	vpush	{d8}
 8006b78:	b09d      	sub	sp, #116	; 0x74
 8006b7a:	461f      	mov	r7, r3
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	9318      	str	r3, [sp, #96]	; 0x60
 8006b80:	4ba2      	ldr	r3, [pc, #648]	; (8006e0c <_strtod_l+0x29c>)
 8006b82:	9213      	str	r2, [sp, #76]	; 0x4c
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	9305      	str	r3, [sp, #20]
 8006b88:	4604      	mov	r4, r0
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	4688      	mov	r8, r1
 8006b8e:	f7f9 fb2f 	bl	80001f0 <strlen>
 8006b92:	f04f 0a00 	mov.w	sl, #0
 8006b96:	4605      	mov	r5, r0
 8006b98:	f04f 0b00 	mov.w	fp, #0
 8006b9c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006ba0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006ba2:	781a      	ldrb	r2, [r3, #0]
 8006ba4:	2a2b      	cmp	r2, #43	; 0x2b
 8006ba6:	d04e      	beq.n	8006c46 <_strtod_l+0xd6>
 8006ba8:	d83b      	bhi.n	8006c22 <_strtod_l+0xb2>
 8006baa:	2a0d      	cmp	r2, #13
 8006bac:	d834      	bhi.n	8006c18 <_strtod_l+0xa8>
 8006bae:	2a08      	cmp	r2, #8
 8006bb0:	d834      	bhi.n	8006c1c <_strtod_l+0xac>
 8006bb2:	2a00      	cmp	r2, #0
 8006bb4:	d03e      	beq.n	8006c34 <_strtod_l+0xc4>
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	930a      	str	r3, [sp, #40]	; 0x28
 8006bba:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8006bbc:	7833      	ldrb	r3, [r6, #0]
 8006bbe:	2b30      	cmp	r3, #48	; 0x30
 8006bc0:	f040 80b0 	bne.w	8006d24 <_strtod_l+0x1b4>
 8006bc4:	7873      	ldrb	r3, [r6, #1]
 8006bc6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006bca:	2b58      	cmp	r3, #88	; 0x58
 8006bcc:	d168      	bne.n	8006ca0 <_strtod_l+0x130>
 8006bce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006bd0:	9301      	str	r3, [sp, #4]
 8006bd2:	ab18      	add	r3, sp, #96	; 0x60
 8006bd4:	9702      	str	r7, [sp, #8]
 8006bd6:	9300      	str	r3, [sp, #0]
 8006bd8:	4a8d      	ldr	r2, [pc, #564]	; (8006e10 <_strtod_l+0x2a0>)
 8006bda:	ab19      	add	r3, sp, #100	; 0x64
 8006bdc:	a917      	add	r1, sp, #92	; 0x5c
 8006bde:	4620      	mov	r0, r4
 8006be0:	f001 ffae 	bl	8008b40 <__gethex>
 8006be4:	f010 0707 	ands.w	r7, r0, #7
 8006be8:	4605      	mov	r5, r0
 8006bea:	d005      	beq.n	8006bf8 <_strtod_l+0x88>
 8006bec:	2f06      	cmp	r7, #6
 8006bee:	d12c      	bne.n	8006c4a <_strtod_l+0xda>
 8006bf0:	3601      	adds	r6, #1
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	9617      	str	r6, [sp, #92]	; 0x5c
 8006bf6:	930a      	str	r3, [sp, #40]	; 0x28
 8006bf8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	f040 8590 	bne.w	8007720 <_strtod_l+0xbb0>
 8006c00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c02:	b1eb      	cbz	r3, 8006c40 <_strtod_l+0xd0>
 8006c04:	4652      	mov	r2, sl
 8006c06:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006c0a:	ec43 2b10 	vmov	d0, r2, r3
 8006c0e:	b01d      	add	sp, #116	; 0x74
 8006c10:	ecbd 8b02 	vpop	{d8}
 8006c14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c18:	2a20      	cmp	r2, #32
 8006c1a:	d1cc      	bne.n	8006bb6 <_strtod_l+0x46>
 8006c1c:	3301      	adds	r3, #1
 8006c1e:	9317      	str	r3, [sp, #92]	; 0x5c
 8006c20:	e7be      	b.n	8006ba0 <_strtod_l+0x30>
 8006c22:	2a2d      	cmp	r2, #45	; 0x2d
 8006c24:	d1c7      	bne.n	8006bb6 <_strtod_l+0x46>
 8006c26:	2201      	movs	r2, #1
 8006c28:	920a      	str	r2, [sp, #40]	; 0x28
 8006c2a:	1c5a      	adds	r2, r3, #1
 8006c2c:	9217      	str	r2, [sp, #92]	; 0x5c
 8006c2e:	785b      	ldrb	r3, [r3, #1]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d1c2      	bne.n	8006bba <_strtod_l+0x4a>
 8006c34:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006c36:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	f040 856e 	bne.w	800771c <_strtod_l+0xbac>
 8006c40:	4652      	mov	r2, sl
 8006c42:	465b      	mov	r3, fp
 8006c44:	e7e1      	b.n	8006c0a <_strtod_l+0x9a>
 8006c46:	2200      	movs	r2, #0
 8006c48:	e7ee      	b.n	8006c28 <_strtod_l+0xb8>
 8006c4a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006c4c:	b13a      	cbz	r2, 8006c5e <_strtod_l+0xee>
 8006c4e:	2135      	movs	r1, #53	; 0x35
 8006c50:	a81a      	add	r0, sp, #104	; 0x68
 8006c52:	f002 ff8e 	bl	8009b72 <__copybits>
 8006c56:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006c58:	4620      	mov	r0, r4
 8006c5a:	f002 fb4d 	bl	80092f8 <_Bfree>
 8006c5e:	3f01      	subs	r7, #1
 8006c60:	2f04      	cmp	r7, #4
 8006c62:	d806      	bhi.n	8006c72 <_strtod_l+0x102>
 8006c64:	e8df f007 	tbb	[pc, r7]
 8006c68:	1714030a 	.word	0x1714030a
 8006c6c:	0a          	.byte	0x0a
 8006c6d:	00          	.byte	0x00
 8006c6e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8006c72:	0728      	lsls	r0, r5, #28
 8006c74:	d5c0      	bpl.n	8006bf8 <_strtod_l+0x88>
 8006c76:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8006c7a:	e7bd      	b.n	8006bf8 <_strtod_l+0x88>
 8006c7c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8006c80:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006c82:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006c86:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006c8a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006c8e:	e7f0      	b.n	8006c72 <_strtod_l+0x102>
 8006c90:	f8df b180 	ldr.w	fp, [pc, #384]	; 8006e14 <_strtod_l+0x2a4>
 8006c94:	e7ed      	b.n	8006c72 <_strtod_l+0x102>
 8006c96:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8006c9a:	f04f 3aff 	mov.w	sl, #4294967295
 8006c9e:	e7e8      	b.n	8006c72 <_strtod_l+0x102>
 8006ca0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006ca2:	1c5a      	adds	r2, r3, #1
 8006ca4:	9217      	str	r2, [sp, #92]	; 0x5c
 8006ca6:	785b      	ldrb	r3, [r3, #1]
 8006ca8:	2b30      	cmp	r3, #48	; 0x30
 8006caa:	d0f9      	beq.n	8006ca0 <_strtod_l+0x130>
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d0a3      	beq.n	8006bf8 <_strtod_l+0x88>
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	f04f 0900 	mov.w	r9, #0
 8006cb6:	9304      	str	r3, [sp, #16]
 8006cb8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006cba:	9308      	str	r3, [sp, #32]
 8006cbc:	f8cd 901c 	str.w	r9, [sp, #28]
 8006cc0:	464f      	mov	r7, r9
 8006cc2:	220a      	movs	r2, #10
 8006cc4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8006cc6:	7806      	ldrb	r6, [r0, #0]
 8006cc8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8006ccc:	b2d9      	uxtb	r1, r3
 8006cce:	2909      	cmp	r1, #9
 8006cd0:	d92a      	bls.n	8006d28 <_strtod_l+0x1b8>
 8006cd2:	9905      	ldr	r1, [sp, #20]
 8006cd4:	462a      	mov	r2, r5
 8006cd6:	f003 fb9a 	bl	800a40e <strncmp>
 8006cda:	b398      	cbz	r0, 8006d44 <_strtod_l+0x1d4>
 8006cdc:	2000      	movs	r0, #0
 8006cde:	4632      	mov	r2, r6
 8006ce0:	463d      	mov	r5, r7
 8006ce2:	9005      	str	r0, [sp, #20]
 8006ce4:	4603      	mov	r3, r0
 8006ce6:	2a65      	cmp	r2, #101	; 0x65
 8006ce8:	d001      	beq.n	8006cee <_strtod_l+0x17e>
 8006cea:	2a45      	cmp	r2, #69	; 0x45
 8006cec:	d118      	bne.n	8006d20 <_strtod_l+0x1b0>
 8006cee:	b91d      	cbnz	r5, 8006cf8 <_strtod_l+0x188>
 8006cf0:	9a04      	ldr	r2, [sp, #16]
 8006cf2:	4302      	orrs	r2, r0
 8006cf4:	d09e      	beq.n	8006c34 <_strtod_l+0xc4>
 8006cf6:	2500      	movs	r5, #0
 8006cf8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8006cfc:	f108 0201 	add.w	r2, r8, #1
 8006d00:	9217      	str	r2, [sp, #92]	; 0x5c
 8006d02:	f898 2001 	ldrb.w	r2, [r8, #1]
 8006d06:	2a2b      	cmp	r2, #43	; 0x2b
 8006d08:	d075      	beq.n	8006df6 <_strtod_l+0x286>
 8006d0a:	2a2d      	cmp	r2, #45	; 0x2d
 8006d0c:	d07b      	beq.n	8006e06 <_strtod_l+0x296>
 8006d0e:	f04f 0c00 	mov.w	ip, #0
 8006d12:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006d16:	2909      	cmp	r1, #9
 8006d18:	f240 8082 	bls.w	8006e20 <_strtod_l+0x2b0>
 8006d1c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006d20:	2600      	movs	r6, #0
 8006d22:	e09d      	b.n	8006e60 <_strtod_l+0x2f0>
 8006d24:	2300      	movs	r3, #0
 8006d26:	e7c4      	b.n	8006cb2 <_strtod_l+0x142>
 8006d28:	2f08      	cmp	r7, #8
 8006d2a:	bfd8      	it	le
 8006d2c:	9907      	ldrle	r1, [sp, #28]
 8006d2e:	f100 0001 	add.w	r0, r0, #1
 8006d32:	bfda      	itte	le
 8006d34:	fb02 3301 	mlale	r3, r2, r1, r3
 8006d38:	9307      	strle	r3, [sp, #28]
 8006d3a:	fb02 3909 	mlagt	r9, r2, r9, r3
 8006d3e:	3701      	adds	r7, #1
 8006d40:	9017      	str	r0, [sp, #92]	; 0x5c
 8006d42:	e7bf      	b.n	8006cc4 <_strtod_l+0x154>
 8006d44:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006d46:	195a      	adds	r2, r3, r5
 8006d48:	9217      	str	r2, [sp, #92]	; 0x5c
 8006d4a:	5d5a      	ldrb	r2, [r3, r5]
 8006d4c:	2f00      	cmp	r7, #0
 8006d4e:	d037      	beq.n	8006dc0 <_strtod_l+0x250>
 8006d50:	9005      	str	r0, [sp, #20]
 8006d52:	463d      	mov	r5, r7
 8006d54:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8006d58:	2b09      	cmp	r3, #9
 8006d5a:	d912      	bls.n	8006d82 <_strtod_l+0x212>
 8006d5c:	2301      	movs	r3, #1
 8006d5e:	e7c2      	b.n	8006ce6 <_strtod_l+0x176>
 8006d60:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006d62:	1c5a      	adds	r2, r3, #1
 8006d64:	9217      	str	r2, [sp, #92]	; 0x5c
 8006d66:	785a      	ldrb	r2, [r3, #1]
 8006d68:	3001      	adds	r0, #1
 8006d6a:	2a30      	cmp	r2, #48	; 0x30
 8006d6c:	d0f8      	beq.n	8006d60 <_strtod_l+0x1f0>
 8006d6e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8006d72:	2b08      	cmp	r3, #8
 8006d74:	f200 84d9 	bhi.w	800772a <_strtod_l+0xbba>
 8006d78:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006d7a:	9005      	str	r0, [sp, #20]
 8006d7c:	2000      	movs	r0, #0
 8006d7e:	9308      	str	r3, [sp, #32]
 8006d80:	4605      	mov	r5, r0
 8006d82:	3a30      	subs	r2, #48	; 0x30
 8006d84:	f100 0301 	add.w	r3, r0, #1
 8006d88:	d014      	beq.n	8006db4 <_strtod_l+0x244>
 8006d8a:	9905      	ldr	r1, [sp, #20]
 8006d8c:	4419      	add	r1, r3
 8006d8e:	9105      	str	r1, [sp, #20]
 8006d90:	462b      	mov	r3, r5
 8006d92:	eb00 0e05 	add.w	lr, r0, r5
 8006d96:	210a      	movs	r1, #10
 8006d98:	4573      	cmp	r3, lr
 8006d9a:	d113      	bne.n	8006dc4 <_strtod_l+0x254>
 8006d9c:	182b      	adds	r3, r5, r0
 8006d9e:	2b08      	cmp	r3, #8
 8006da0:	f105 0501 	add.w	r5, r5, #1
 8006da4:	4405      	add	r5, r0
 8006da6:	dc1c      	bgt.n	8006de2 <_strtod_l+0x272>
 8006da8:	9907      	ldr	r1, [sp, #28]
 8006daa:	230a      	movs	r3, #10
 8006dac:	fb03 2301 	mla	r3, r3, r1, r2
 8006db0:	9307      	str	r3, [sp, #28]
 8006db2:	2300      	movs	r3, #0
 8006db4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006db6:	1c51      	adds	r1, r2, #1
 8006db8:	9117      	str	r1, [sp, #92]	; 0x5c
 8006dba:	7852      	ldrb	r2, [r2, #1]
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	e7c9      	b.n	8006d54 <_strtod_l+0x1e4>
 8006dc0:	4638      	mov	r0, r7
 8006dc2:	e7d2      	b.n	8006d6a <_strtod_l+0x1fa>
 8006dc4:	2b08      	cmp	r3, #8
 8006dc6:	dc04      	bgt.n	8006dd2 <_strtod_l+0x262>
 8006dc8:	9e07      	ldr	r6, [sp, #28]
 8006dca:	434e      	muls	r6, r1
 8006dcc:	9607      	str	r6, [sp, #28]
 8006dce:	3301      	adds	r3, #1
 8006dd0:	e7e2      	b.n	8006d98 <_strtod_l+0x228>
 8006dd2:	f103 0c01 	add.w	ip, r3, #1
 8006dd6:	f1bc 0f10 	cmp.w	ip, #16
 8006dda:	bfd8      	it	le
 8006ddc:	fb01 f909 	mulle.w	r9, r1, r9
 8006de0:	e7f5      	b.n	8006dce <_strtod_l+0x25e>
 8006de2:	2d10      	cmp	r5, #16
 8006de4:	bfdc      	itt	le
 8006de6:	230a      	movle	r3, #10
 8006de8:	fb03 2909 	mlale	r9, r3, r9, r2
 8006dec:	e7e1      	b.n	8006db2 <_strtod_l+0x242>
 8006dee:	2300      	movs	r3, #0
 8006df0:	9305      	str	r3, [sp, #20]
 8006df2:	2301      	movs	r3, #1
 8006df4:	e77c      	b.n	8006cf0 <_strtod_l+0x180>
 8006df6:	f04f 0c00 	mov.w	ip, #0
 8006dfa:	f108 0202 	add.w	r2, r8, #2
 8006dfe:	9217      	str	r2, [sp, #92]	; 0x5c
 8006e00:	f898 2002 	ldrb.w	r2, [r8, #2]
 8006e04:	e785      	b.n	8006d12 <_strtod_l+0x1a2>
 8006e06:	f04f 0c01 	mov.w	ip, #1
 8006e0a:	e7f6      	b.n	8006dfa <_strtod_l+0x28a>
 8006e0c:	0800aa14 	.word	0x0800aa14
 8006e10:	0800a764 	.word	0x0800a764
 8006e14:	7ff00000 	.word	0x7ff00000
 8006e18:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006e1a:	1c51      	adds	r1, r2, #1
 8006e1c:	9117      	str	r1, [sp, #92]	; 0x5c
 8006e1e:	7852      	ldrb	r2, [r2, #1]
 8006e20:	2a30      	cmp	r2, #48	; 0x30
 8006e22:	d0f9      	beq.n	8006e18 <_strtod_l+0x2a8>
 8006e24:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8006e28:	2908      	cmp	r1, #8
 8006e2a:	f63f af79 	bhi.w	8006d20 <_strtod_l+0x1b0>
 8006e2e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8006e32:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006e34:	9206      	str	r2, [sp, #24]
 8006e36:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006e38:	1c51      	adds	r1, r2, #1
 8006e3a:	9117      	str	r1, [sp, #92]	; 0x5c
 8006e3c:	7852      	ldrb	r2, [r2, #1]
 8006e3e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8006e42:	2e09      	cmp	r6, #9
 8006e44:	d937      	bls.n	8006eb6 <_strtod_l+0x346>
 8006e46:	9e06      	ldr	r6, [sp, #24]
 8006e48:	1b89      	subs	r1, r1, r6
 8006e4a:	2908      	cmp	r1, #8
 8006e4c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8006e50:	dc02      	bgt.n	8006e58 <_strtod_l+0x2e8>
 8006e52:	4576      	cmp	r6, lr
 8006e54:	bfa8      	it	ge
 8006e56:	4676      	movge	r6, lr
 8006e58:	f1bc 0f00 	cmp.w	ip, #0
 8006e5c:	d000      	beq.n	8006e60 <_strtod_l+0x2f0>
 8006e5e:	4276      	negs	r6, r6
 8006e60:	2d00      	cmp	r5, #0
 8006e62:	d14d      	bne.n	8006f00 <_strtod_l+0x390>
 8006e64:	9904      	ldr	r1, [sp, #16]
 8006e66:	4301      	orrs	r1, r0
 8006e68:	f47f aec6 	bne.w	8006bf8 <_strtod_l+0x88>
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	f47f aee1 	bne.w	8006c34 <_strtod_l+0xc4>
 8006e72:	2a69      	cmp	r2, #105	; 0x69
 8006e74:	d027      	beq.n	8006ec6 <_strtod_l+0x356>
 8006e76:	dc24      	bgt.n	8006ec2 <_strtod_l+0x352>
 8006e78:	2a49      	cmp	r2, #73	; 0x49
 8006e7a:	d024      	beq.n	8006ec6 <_strtod_l+0x356>
 8006e7c:	2a4e      	cmp	r2, #78	; 0x4e
 8006e7e:	f47f aed9 	bne.w	8006c34 <_strtod_l+0xc4>
 8006e82:	499f      	ldr	r1, [pc, #636]	; (8007100 <_strtod_l+0x590>)
 8006e84:	a817      	add	r0, sp, #92	; 0x5c
 8006e86:	f002 f8b3 	bl	8008ff0 <__match>
 8006e8a:	2800      	cmp	r0, #0
 8006e8c:	f43f aed2 	beq.w	8006c34 <_strtod_l+0xc4>
 8006e90:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006e92:	781b      	ldrb	r3, [r3, #0]
 8006e94:	2b28      	cmp	r3, #40	; 0x28
 8006e96:	d12d      	bne.n	8006ef4 <_strtod_l+0x384>
 8006e98:	499a      	ldr	r1, [pc, #616]	; (8007104 <_strtod_l+0x594>)
 8006e9a:	aa1a      	add	r2, sp, #104	; 0x68
 8006e9c:	a817      	add	r0, sp, #92	; 0x5c
 8006e9e:	f002 f8bb 	bl	8009018 <__hexnan>
 8006ea2:	2805      	cmp	r0, #5
 8006ea4:	d126      	bne.n	8006ef4 <_strtod_l+0x384>
 8006ea6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006ea8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8006eac:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8006eb0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8006eb4:	e6a0      	b.n	8006bf8 <_strtod_l+0x88>
 8006eb6:	210a      	movs	r1, #10
 8006eb8:	fb01 2e0e 	mla	lr, r1, lr, r2
 8006ebc:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8006ec0:	e7b9      	b.n	8006e36 <_strtod_l+0x2c6>
 8006ec2:	2a6e      	cmp	r2, #110	; 0x6e
 8006ec4:	e7db      	b.n	8006e7e <_strtod_l+0x30e>
 8006ec6:	4990      	ldr	r1, [pc, #576]	; (8007108 <_strtod_l+0x598>)
 8006ec8:	a817      	add	r0, sp, #92	; 0x5c
 8006eca:	f002 f891 	bl	8008ff0 <__match>
 8006ece:	2800      	cmp	r0, #0
 8006ed0:	f43f aeb0 	beq.w	8006c34 <_strtod_l+0xc4>
 8006ed4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006ed6:	498d      	ldr	r1, [pc, #564]	; (800710c <_strtod_l+0x59c>)
 8006ed8:	3b01      	subs	r3, #1
 8006eda:	a817      	add	r0, sp, #92	; 0x5c
 8006edc:	9317      	str	r3, [sp, #92]	; 0x5c
 8006ede:	f002 f887 	bl	8008ff0 <__match>
 8006ee2:	b910      	cbnz	r0, 8006eea <_strtod_l+0x37a>
 8006ee4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006ee6:	3301      	adds	r3, #1
 8006ee8:	9317      	str	r3, [sp, #92]	; 0x5c
 8006eea:	f8df b230 	ldr.w	fp, [pc, #560]	; 800711c <_strtod_l+0x5ac>
 8006eee:	f04f 0a00 	mov.w	sl, #0
 8006ef2:	e681      	b.n	8006bf8 <_strtod_l+0x88>
 8006ef4:	4886      	ldr	r0, [pc, #536]	; (8007110 <_strtod_l+0x5a0>)
 8006ef6:	f003 fa2f 	bl	800a358 <nan>
 8006efa:	ec5b ab10 	vmov	sl, fp, d0
 8006efe:	e67b      	b.n	8006bf8 <_strtod_l+0x88>
 8006f00:	9b05      	ldr	r3, [sp, #20]
 8006f02:	9807      	ldr	r0, [sp, #28]
 8006f04:	1af3      	subs	r3, r6, r3
 8006f06:	2f00      	cmp	r7, #0
 8006f08:	bf08      	it	eq
 8006f0a:	462f      	moveq	r7, r5
 8006f0c:	2d10      	cmp	r5, #16
 8006f0e:	9306      	str	r3, [sp, #24]
 8006f10:	46a8      	mov	r8, r5
 8006f12:	bfa8      	it	ge
 8006f14:	f04f 0810 	movge.w	r8, #16
 8006f18:	f7f9 fb04 	bl	8000524 <__aeabi_ui2d>
 8006f1c:	2d09      	cmp	r5, #9
 8006f1e:	4682      	mov	sl, r0
 8006f20:	468b      	mov	fp, r1
 8006f22:	dd13      	ble.n	8006f4c <_strtod_l+0x3dc>
 8006f24:	4b7b      	ldr	r3, [pc, #492]	; (8007114 <_strtod_l+0x5a4>)
 8006f26:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8006f2a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8006f2e:	f7f9 fb73 	bl	8000618 <__aeabi_dmul>
 8006f32:	4682      	mov	sl, r0
 8006f34:	4648      	mov	r0, r9
 8006f36:	468b      	mov	fp, r1
 8006f38:	f7f9 faf4 	bl	8000524 <__aeabi_ui2d>
 8006f3c:	4602      	mov	r2, r0
 8006f3e:	460b      	mov	r3, r1
 8006f40:	4650      	mov	r0, sl
 8006f42:	4659      	mov	r1, fp
 8006f44:	f7f9 f9b2 	bl	80002ac <__adddf3>
 8006f48:	4682      	mov	sl, r0
 8006f4a:	468b      	mov	fp, r1
 8006f4c:	2d0f      	cmp	r5, #15
 8006f4e:	dc38      	bgt.n	8006fc2 <_strtod_l+0x452>
 8006f50:	9b06      	ldr	r3, [sp, #24]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	f43f ae50 	beq.w	8006bf8 <_strtod_l+0x88>
 8006f58:	dd24      	ble.n	8006fa4 <_strtod_l+0x434>
 8006f5a:	2b16      	cmp	r3, #22
 8006f5c:	dc0b      	bgt.n	8006f76 <_strtod_l+0x406>
 8006f5e:	496d      	ldr	r1, [pc, #436]	; (8007114 <_strtod_l+0x5a4>)
 8006f60:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006f64:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006f68:	4652      	mov	r2, sl
 8006f6a:	465b      	mov	r3, fp
 8006f6c:	f7f9 fb54 	bl	8000618 <__aeabi_dmul>
 8006f70:	4682      	mov	sl, r0
 8006f72:	468b      	mov	fp, r1
 8006f74:	e640      	b.n	8006bf8 <_strtod_l+0x88>
 8006f76:	9a06      	ldr	r2, [sp, #24]
 8006f78:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	db20      	blt.n	8006fc2 <_strtod_l+0x452>
 8006f80:	4c64      	ldr	r4, [pc, #400]	; (8007114 <_strtod_l+0x5a4>)
 8006f82:	f1c5 050f 	rsb	r5, r5, #15
 8006f86:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8006f8a:	4652      	mov	r2, sl
 8006f8c:	465b      	mov	r3, fp
 8006f8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006f92:	f7f9 fb41 	bl	8000618 <__aeabi_dmul>
 8006f96:	9b06      	ldr	r3, [sp, #24]
 8006f98:	1b5d      	subs	r5, r3, r5
 8006f9a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8006f9e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006fa2:	e7e3      	b.n	8006f6c <_strtod_l+0x3fc>
 8006fa4:	9b06      	ldr	r3, [sp, #24]
 8006fa6:	3316      	adds	r3, #22
 8006fa8:	db0b      	blt.n	8006fc2 <_strtod_l+0x452>
 8006faa:	9b05      	ldr	r3, [sp, #20]
 8006fac:	1b9e      	subs	r6, r3, r6
 8006fae:	4b59      	ldr	r3, [pc, #356]	; (8007114 <_strtod_l+0x5a4>)
 8006fb0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8006fb4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006fb8:	4650      	mov	r0, sl
 8006fba:	4659      	mov	r1, fp
 8006fbc:	f7f9 fc56 	bl	800086c <__aeabi_ddiv>
 8006fc0:	e7d6      	b.n	8006f70 <_strtod_l+0x400>
 8006fc2:	9b06      	ldr	r3, [sp, #24]
 8006fc4:	eba5 0808 	sub.w	r8, r5, r8
 8006fc8:	4498      	add	r8, r3
 8006fca:	f1b8 0f00 	cmp.w	r8, #0
 8006fce:	dd74      	ble.n	80070ba <_strtod_l+0x54a>
 8006fd0:	f018 030f 	ands.w	r3, r8, #15
 8006fd4:	d00a      	beq.n	8006fec <_strtod_l+0x47c>
 8006fd6:	494f      	ldr	r1, [pc, #316]	; (8007114 <_strtod_l+0x5a4>)
 8006fd8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006fdc:	4652      	mov	r2, sl
 8006fde:	465b      	mov	r3, fp
 8006fe0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006fe4:	f7f9 fb18 	bl	8000618 <__aeabi_dmul>
 8006fe8:	4682      	mov	sl, r0
 8006fea:	468b      	mov	fp, r1
 8006fec:	f038 080f 	bics.w	r8, r8, #15
 8006ff0:	d04f      	beq.n	8007092 <_strtod_l+0x522>
 8006ff2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8006ff6:	dd22      	ble.n	800703e <_strtod_l+0x4ce>
 8006ff8:	2500      	movs	r5, #0
 8006ffa:	462e      	mov	r6, r5
 8006ffc:	9507      	str	r5, [sp, #28]
 8006ffe:	9505      	str	r5, [sp, #20]
 8007000:	2322      	movs	r3, #34	; 0x22
 8007002:	f8df b118 	ldr.w	fp, [pc, #280]	; 800711c <_strtod_l+0x5ac>
 8007006:	6023      	str	r3, [r4, #0]
 8007008:	f04f 0a00 	mov.w	sl, #0
 800700c:	9b07      	ldr	r3, [sp, #28]
 800700e:	2b00      	cmp	r3, #0
 8007010:	f43f adf2 	beq.w	8006bf8 <_strtod_l+0x88>
 8007014:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007016:	4620      	mov	r0, r4
 8007018:	f002 f96e 	bl	80092f8 <_Bfree>
 800701c:	9905      	ldr	r1, [sp, #20]
 800701e:	4620      	mov	r0, r4
 8007020:	f002 f96a 	bl	80092f8 <_Bfree>
 8007024:	4631      	mov	r1, r6
 8007026:	4620      	mov	r0, r4
 8007028:	f002 f966 	bl	80092f8 <_Bfree>
 800702c:	9907      	ldr	r1, [sp, #28]
 800702e:	4620      	mov	r0, r4
 8007030:	f002 f962 	bl	80092f8 <_Bfree>
 8007034:	4629      	mov	r1, r5
 8007036:	4620      	mov	r0, r4
 8007038:	f002 f95e 	bl	80092f8 <_Bfree>
 800703c:	e5dc      	b.n	8006bf8 <_strtod_l+0x88>
 800703e:	4b36      	ldr	r3, [pc, #216]	; (8007118 <_strtod_l+0x5a8>)
 8007040:	9304      	str	r3, [sp, #16]
 8007042:	2300      	movs	r3, #0
 8007044:	ea4f 1828 	mov.w	r8, r8, asr #4
 8007048:	4650      	mov	r0, sl
 800704a:	4659      	mov	r1, fp
 800704c:	4699      	mov	r9, r3
 800704e:	f1b8 0f01 	cmp.w	r8, #1
 8007052:	dc21      	bgt.n	8007098 <_strtod_l+0x528>
 8007054:	b10b      	cbz	r3, 800705a <_strtod_l+0x4ea>
 8007056:	4682      	mov	sl, r0
 8007058:	468b      	mov	fp, r1
 800705a:	4b2f      	ldr	r3, [pc, #188]	; (8007118 <_strtod_l+0x5a8>)
 800705c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8007060:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8007064:	4652      	mov	r2, sl
 8007066:	465b      	mov	r3, fp
 8007068:	e9d9 0100 	ldrd	r0, r1, [r9]
 800706c:	f7f9 fad4 	bl	8000618 <__aeabi_dmul>
 8007070:	4b2a      	ldr	r3, [pc, #168]	; (800711c <_strtod_l+0x5ac>)
 8007072:	460a      	mov	r2, r1
 8007074:	400b      	ands	r3, r1
 8007076:	492a      	ldr	r1, [pc, #168]	; (8007120 <_strtod_l+0x5b0>)
 8007078:	428b      	cmp	r3, r1
 800707a:	4682      	mov	sl, r0
 800707c:	d8bc      	bhi.n	8006ff8 <_strtod_l+0x488>
 800707e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007082:	428b      	cmp	r3, r1
 8007084:	bf86      	itte	hi
 8007086:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8007124 <_strtod_l+0x5b4>
 800708a:	f04f 3aff 	movhi.w	sl, #4294967295
 800708e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8007092:	2300      	movs	r3, #0
 8007094:	9304      	str	r3, [sp, #16]
 8007096:	e084      	b.n	80071a2 <_strtod_l+0x632>
 8007098:	f018 0f01 	tst.w	r8, #1
 800709c:	d005      	beq.n	80070aa <_strtod_l+0x53a>
 800709e:	9b04      	ldr	r3, [sp, #16]
 80070a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070a4:	f7f9 fab8 	bl	8000618 <__aeabi_dmul>
 80070a8:	2301      	movs	r3, #1
 80070aa:	9a04      	ldr	r2, [sp, #16]
 80070ac:	3208      	adds	r2, #8
 80070ae:	f109 0901 	add.w	r9, r9, #1
 80070b2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80070b6:	9204      	str	r2, [sp, #16]
 80070b8:	e7c9      	b.n	800704e <_strtod_l+0x4de>
 80070ba:	d0ea      	beq.n	8007092 <_strtod_l+0x522>
 80070bc:	f1c8 0800 	rsb	r8, r8, #0
 80070c0:	f018 020f 	ands.w	r2, r8, #15
 80070c4:	d00a      	beq.n	80070dc <_strtod_l+0x56c>
 80070c6:	4b13      	ldr	r3, [pc, #76]	; (8007114 <_strtod_l+0x5a4>)
 80070c8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80070cc:	4650      	mov	r0, sl
 80070ce:	4659      	mov	r1, fp
 80070d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070d4:	f7f9 fbca 	bl	800086c <__aeabi_ddiv>
 80070d8:	4682      	mov	sl, r0
 80070da:	468b      	mov	fp, r1
 80070dc:	ea5f 1828 	movs.w	r8, r8, asr #4
 80070e0:	d0d7      	beq.n	8007092 <_strtod_l+0x522>
 80070e2:	f1b8 0f1f 	cmp.w	r8, #31
 80070e6:	dd1f      	ble.n	8007128 <_strtod_l+0x5b8>
 80070e8:	2500      	movs	r5, #0
 80070ea:	462e      	mov	r6, r5
 80070ec:	9507      	str	r5, [sp, #28]
 80070ee:	9505      	str	r5, [sp, #20]
 80070f0:	2322      	movs	r3, #34	; 0x22
 80070f2:	f04f 0a00 	mov.w	sl, #0
 80070f6:	f04f 0b00 	mov.w	fp, #0
 80070fa:	6023      	str	r3, [r4, #0]
 80070fc:	e786      	b.n	800700c <_strtod_l+0x49c>
 80070fe:	bf00      	nop
 8007100:	0800a735 	.word	0x0800a735
 8007104:	0800a778 	.word	0x0800a778
 8007108:	0800a72d 	.word	0x0800a72d
 800710c:	0800a8bc 	.word	0x0800a8bc
 8007110:	0800abd0 	.word	0x0800abd0
 8007114:	0800aab0 	.word	0x0800aab0
 8007118:	0800aa88 	.word	0x0800aa88
 800711c:	7ff00000 	.word	0x7ff00000
 8007120:	7ca00000 	.word	0x7ca00000
 8007124:	7fefffff 	.word	0x7fefffff
 8007128:	f018 0310 	ands.w	r3, r8, #16
 800712c:	bf18      	it	ne
 800712e:	236a      	movne	r3, #106	; 0x6a
 8007130:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 80074e0 <_strtod_l+0x970>
 8007134:	9304      	str	r3, [sp, #16]
 8007136:	4650      	mov	r0, sl
 8007138:	4659      	mov	r1, fp
 800713a:	2300      	movs	r3, #0
 800713c:	f018 0f01 	tst.w	r8, #1
 8007140:	d004      	beq.n	800714c <_strtod_l+0x5dc>
 8007142:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007146:	f7f9 fa67 	bl	8000618 <__aeabi_dmul>
 800714a:	2301      	movs	r3, #1
 800714c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8007150:	f109 0908 	add.w	r9, r9, #8
 8007154:	d1f2      	bne.n	800713c <_strtod_l+0x5cc>
 8007156:	b10b      	cbz	r3, 800715c <_strtod_l+0x5ec>
 8007158:	4682      	mov	sl, r0
 800715a:	468b      	mov	fp, r1
 800715c:	9b04      	ldr	r3, [sp, #16]
 800715e:	b1c3      	cbz	r3, 8007192 <_strtod_l+0x622>
 8007160:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8007164:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007168:	2b00      	cmp	r3, #0
 800716a:	4659      	mov	r1, fp
 800716c:	dd11      	ble.n	8007192 <_strtod_l+0x622>
 800716e:	2b1f      	cmp	r3, #31
 8007170:	f340 8124 	ble.w	80073bc <_strtod_l+0x84c>
 8007174:	2b34      	cmp	r3, #52	; 0x34
 8007176:	bfde      	ittt	le
 8007178:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800717c:	f04f 33ff 	movle.w	r3, #4294967295
 8007180:	fa03 f202 	lslle.w	r2, r3, r2
 8007184:	f04f 0a00 	mov.w	sl, #0
 8007188:	bfcc      	ite	gt
 800718a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800718e:	ea02 0b01 	andle.w	fp, r2, r1
 8007192:	2200      	movs	r2, #0
 8007194:	2300      	movs	r3, #0
 8007196:	4650      	mov	r0, sl
 8007198:	4659      	mov	r1, fp
 800719a:	f7f9 fca5 	bl	8000ae8 <__aeabi_dcmpeq>
 800719e:	2800      	cmp	r0, #0
 80071a0:	d1a2      	bne.n	80070e8 <_strtod_l+0x578>
 80071a2:	9b07      	ldr	r3, [sp, #28]
 80071a4:	9300      	str	r3, [sp, #0]
 80071a6:	9908      	ldr	r1, [sp, #32]
 80071a8:	462b      	mov	r3, r5
 80071aa:	463a      	mov	r2, r7
 80071ac:	4620      	mov	r0, r4
 80071ae:	f002 f90b 	bl	80093c8 <__s2b>
 80071b2:	9007      	str	r0, [sp, #28]
 80071b4:	2800      	cmp	r0, #0
 80071b6:	f43f af1f 	beq.w	8006ff8 <_strtod_l+0x488>
 80071ba:	9b05      	ldr	r3, [sp, #20]
 80071bc:	1b9e      	subs	r6, r3, r6
 80071be:	9b06      	ldr	r3, [sp, #24]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	bfb4      	ite	lt
 80071c4:	4633      	movlt	r3, r6
 80071c6:	2300      	movge	r3, #0
 80071c8:	930c      	str	r3, [sp, #48]	; 0x30
 80071ca:	9b06      	ldr	r3, [sp, #24]
 80071cc:	2500      	movs	r5, #0
 80071ce:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80071d2:	9312      	str	r3, [sp, #72]	; 0x48
 80071d4:	462e      	mov	r6, r5
 80071d6:	9b07      	ldr	r3, [sp, #28]
 80071d8:	4620      	mov	r0, r4
 80071da:	6859      	ldr	r1, [r3, #4]
 80071dc:	f002 f84c 	bl	8009278 <_Balloc>
 80071e0:	9005      	str	r0, [sp, #20]
 80071e2:	2800      	cmp	r0, #0
 80071e4:	f43f af0c 	beq.w	8007000 <_strtod_l+0x490>
 80071e8:	9b07      	ldr	r3, [sp, #28]
 80071ea:	691a      	ldr	r2, [r3, #16]
 80071ec:	3202      	adds	r2, #2
 80071ee:	f103 010c 	add.w	r1, r3, #12
 80071f2:	0092      	lsls	r2, r2, #2
 80071f4:	300c      	adds	r0, #12
 80071f6:	f002 f831 	bl	800925c <memcpy>
 80071fa:	ec4b ab10 	vmov	d0, sl, fp
 80071fe:	aa1a      	add	r2, sp, #104	; 0x68
 8007200:	a919      	add	r1, sp, #100	; 0x64
 8007202:	4620      	mov	r0, r4
 8007204:	f002 fc26 	bl	8009a54 <__d2b>
 8007208:	ec4b ab18 	vmov	d8, sl, fp
 800720c:	9018      	str	r0, [sp, #96]	; 0x60
 800720e:	2800      	cmp	r0, #0
 8007210:	f43f aef6 	beq.w	8007000 <_strtod_l+0x490>
 8007214:	2101      	movs	r1, #1
 8007216:	4620      	mov	r0, r4
 8007218:	f002 f970 	bl	80094fc <__i2b>
 800721c:	4606      	mov	r6, r0
 800721e:	2800      	cmp	r0, #0
 8007220:	f43f aeee 	beq.w	8007000 <_strtod_l+0x490>
 8007224:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007226:	9904      	ldr	r1, [sp, #16]
 8007228:	2b00      	cmp	r3, #0
 800722a:	bfab      	itete	ge
 800722c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800722e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8007230:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8007232:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8007236:	bfac      	ite	ge
 8007238:	eb03 0902 	addge.w	r9, r3, r2
 800723c:	1ad7      	sublt	r7, r2, r3
 800723e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007240:	eba3 0801 	sub.w	r8, r3, r1
 8007244:	4490      	add	r8, r2
 8007246:	4ba1      	ldr	r3, [pc, #644]	; (80074cc <_strtod_l+0x95c>)
 8007248:	f108 38ff 	add.w	r8, r8, #4294967295
 800724c:	4598      	cmp	r8, r3
 800724e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007252:	f280 80c7 	bge.w	80073e4 <_strtod_l+0x874>
 8007256:	eba3 0308 	sub.w	r3, r3, r8
 800725a:	2b1f      	cmp	r3, #31
 800725c:	eba2 0203 	sub.w	r2, r2, r3
 8007260:	f04f 0101 	mov.w	r1, #1
 8007264:	f300 80b1 	bgt.w	80073ca <_strtod_l+0x85a>
 8007268:	fa01 f303 	lsl.w	r3, r1, r3
 800726c:	930d      	str	r3, [sp, #52]	; 0x34
 800726e:	2300      	movs	r3, #0
 8007270:	9308      	str	r3, [sp, #32]
 8007272:	eb09 0802 	add.w	r8, r9, r2
 8007276:	9b04      	ldr	r3, [sp, #16]
 8007278:	45c1      	cmp	r9, r8
 800727a:	4417      	add	r7, r2
 800727c:	441f      	add	r7, r3
 800727e:	464b      	mov	r3, r9
 8007280:	bfa8      	it	ge
 8007282:	4643      	movge	r3, r8
 8007284:	42bb      	cmp	r3, r7
 8007286:	bfa8      	it	ge
 8007288:	463b      	movge	r3, r7
 800728a:	2b00      	cmp	r3, #0
 800728c:	bfc2      	ittt	gt
 800728e:	eba8 0803 	subgt.w	r8, r8, r3
 8007292:	1aff      	subgt	r7, r7, r3
 8007294:	eba9 0903 	subgt.w	r9, r9, r3
 8007298:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800729a:	2b00      	cmp	r3, #0
 800729c:	dd17      	ble.n	80072ce <_strtod_l+0x75e>
 800729e:	4631      	mov	r1, r6
 80072a0:	461a      	mov	r2, r3
 80072a2:	4620      	mov	r0, r4
 80072a4:	f002 f9ea 	bl	800967c <__pow5mult>
 80072a8:	4606      	mov	r6, r0
 80072aa:	2800      	cmp	r0, #0
 80072ac:	f43f aea8 	beq.w	8007000 <_strtod_l+0x490>
 80072b0:	4601      	mov	r1, r0
 80072b2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80072b4:	4620      	mov	r0, r4
 80072b6:	f002 f937 	bl	8009528 <__multiply>
 80072ba:	900b      	str	r0, [sp, #44]	; 0x2c
 80072bc:	2800      	cmp	r0, #0
 80072be:	f43f ae9f 	beq.w	8007000 <_strtod_l+0x490>
 80072c2:	9918      	ldr	r1, [sp, #96]	; 0x60
 80072c4:	4620      	mov	r0, r4
 80072c6:	f002 f817 	bl	80092f8 <_Bfree>
 80072ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80072cc:	9318      	str	r3, [sp, #96]	; 0x60
 80072ce:	f1b8 0f00 	cmp.w	r8, #0
 80072d2:	f300 808c 	bgt.w	80073ee <_strtod_l+0x87e>
 80072d6:	9b06      	ldr	r3, [sp, #24]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	dd08      	ble.n	80072ee <_strtod_l+0x77e>
 80072dc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80072de:	9905      	ldr	r1, [sp, #20]
 80072e0:	4620      	mov	r0, r4
 80072e2:	f002 f9cb 	bl	800967c <__pow5mult>
 80072e6:	9005      	str	r0, [sp, #20]
 80072e8:	2800      	cmp	r0, #0
 80072ea:	f43f ae89 	beq.w	8007000 <_strtod_l+0x490>
 80072ee:	2f00      	cmp	r7, #0
 80072f0:	dd08      	ble.n	8007304 <_strtod_l+0x794>
 80072f2:	9905      	ldr	r1, [sp, #20]
 80072f4:	463a      	mov	r2, r7
 80072f6:	4620      	mov	r0, r4
 80072f8:	f002 fa1a 	bl	8009730 <__lshift>
 80072fc:	9005      	str	r0, [sp, #20]
 80072fe:	2800      	cmp	r0, #0
 8007300:	f43f ae7e 	beq.w	8007000 <_strtod_l+0x490>
 8007304:	f1b9 0f00 	cmp.w	r9, #0
 8007308:	dd08      	ble.n	800731c <_strtod_l+0x7ac>
 800730a:	4631      	mov	r1, r6
 800730c:	464a      	mov	r2, r9
 800730e:	4620      	mov	r0, r4
 8007310:	f002 fa0e 	bl	8009730 <__lshift>
 8007314:	4606      	mov	r6, r0
 8007316:	2800      	cmp	r0, #0
 8007318:	f43f ae72 	beq.w	8007000 <_strtod_l+0x490>
 800731c:	9a05      	ldr	r2, [sp, #20]
 800731e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007320:	4620      	mov	r0, r4
 8007322:	f002 fa91 	bl	8009848 <__mdiff>
 8007326:	4605      	mov	r5, r0
 8007328:	2800      	cmp	r0, #0
 800732a:	f43f ae69 	beq.w	8007000 <_strtod_l+0x490>
 800732e:	68c3      	ldr	r3, [r0, #12]
 8007330:	930b      	str	r3, [sp, #44]	; 0x2c
 8007332:	2300      	movs	r3, #0
 8007334:	60c3      	str	r3, [r0, #12]
 8007336:	4631      	mov	r1, r6
 8007338:	f002 fa6a 	bl	8009810 <__mcmp>
 800733c:	2800      	cmp	r0, #0
 800733e:	da60      	bge.n	8007402 <_strtod_l+0x892>
 8007340:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007342:	ea53 030a 	orrs.w	r3, r3, sl
 8007346:	f040 8082 	bne.w	800744e <_strtod_l+0x8de>
 800734a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800734e:	2b00      	cmp	r3, #0
 8007350:	d17d      	bne.n	800744e <_strtod_l+0x8de>
 8007352:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007356:	0d1b      	lsrs	r3, r3, #20
 8007358:	051b      	lsls	r3, r3, #20
 800735a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800735e:	d976      	bls.n	800744e <_strtod_l+0x8de>
 8007360:	696b      	ldr	r3, [r5, #20]
 8007362:	b913      	cbnz	r3, 800736a <_strtod_l+0x7fa>
 8007364:	692b      	ldr	r3, [r5, #16]
 8007366:	2b01      	cmp	r3, #1
 8007368:	dd71      	ble.n	800744e <_strtod_l+0x8de>
 800736a:	4629      	mov	r1, r5
 800736c:	2201      	movs	r2, #1
 800736e:	4620      	mov	r0, r4
 8007370:	f002 f9de 	bl	8009730 <__lshift>
 8007374:	4631      	mov	r1, r6
 8007376:	4605      	mov	r5, r0
 8007378:	f002 fa4a 	bl	8009810 <__mcmp>
 800737c:	2800      	cmp	r0, #0
 800737e:	dd66      	ble.n	800744e <_strtod_l+0x8de>
 8007380:	9904      	ldr	r1, [sp, #16]
 8007382:	4a53      	ldr	r2, [pc, #332]	; (80074d0 <_strtod_l+0x960>)
 8007384:	465b      	mov	r3, fp
 8007386:	2900      	cmp	r1, #0
 8007388:	f000 8081 	beq.w	800748e <_strtod_l+0x91e>
 800738c:	ea02 010b 	and.w	r1, r2, fp
 8007390:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007394:	dc7b      	bgt.n	800748e <_strtod_l+0x91e>
 8007396:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800739a:	f77f aea9 	ble.w	80070f0 <_strtod_l+0x580>
 800739e:	4b4d      	ldr	r3, [pc, #308]	; (80074d4 <_strtod_l+0x964>)
 80073a0:	4650      	mov	r0, sl
 80073a2:	4659      	mov	r1, fp
 80073a4:	2200      	movs	r2, #0
 80073a6:	f7f9 f937 	bl	8000618 <__aeabi_dmul>
 80073aa:	460b      	mov	r3, r1
 80073ac:	4303      	orrs	r3, r0
 80073ae:	bf08      	it	eq
 80073b0:	2322      	moveq	r3, #34	; 0x22
 80073b2:	4682      	mov	sl, r0
 80073b4:	468b      	mov	fp, r1
 80073b6:	bf08      	it	eq
 80073b8:	6023      	streq	r3, [r4, #0]
 80073ba:	e62b      	b.n	8007014 <_strtod_l+0x4a4>
 80073bc:	f04f 32ff 	mov.w	r2, #4294967295
 80073c0:	fa02 f303 	lsl.w	r3, r2, r3
 80073c4:	ea03 0a0a 	and.w	sl, r3, sl
 80073c8:	e6e3      	b.n	8007192 <_strtod_l+0x622>
 80073ca:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80073ce:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80073d2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80073d6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80073da:	fa01 f308 	lsl.w	r3, r1, r8
 80073de:	9308      	str	r3, [sp, #32]
 80073e0:	910d      	str	r1, [sp, #52]	; 0x34
 80073e2:	e746      	b.n	8007272 <_strtod_l+0x702>
 80073e4:	2300      	movs	r3, #0
 80073e6:	9308      	str	r3, [sp, #32]
 80073e8:	2301      	movs	r3, #1
 80073ea:	930d      	str	r3, [sp, #52]	; 0x34
 80073ec:	e741      	b.n	8007272 <_strtod_l+0x702>
 80073ee:	9918      	ldr	r1, [sp, #96]	; 0x60
 80073f0:	4642      	mov	r2, r8
 80073f2:	4620      	mov	r0, r4
 80073f4:	f002 f99c 	bl	8009730 <__lshift>
 80073f8:	9018      	str	r0, [sp, #96]	; 0x60
 80073fa:	2800      	cmp	r0, #0
 80073fc:	f47f af6b 	bne.w	80072d6 <_strtod_l+0x766>
 8007400:	e5fe      	b.n	8007000 <_strtod_l+0x490>
 8007402:	465f      	mov	r7, fp
 8007404:	d16e      	bne.n	80074e4 <_strtod_l+0x974>
 8007406:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007408:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800740c:	b342      	cbz	r2, 8007460 <_strtod_l+0x8f0>
 800740e:	4a32      	ldr	r2, [pc, #200]	; (80074d8 <_strtod_l+0x968>)
 8007410:	4293      	cmp	r3, r2
 8007412:	d128      	bne.n	8007466 <_strtod_l+0x8f6>
 8007414:	9b04      	ldr	r3, [sp, #16]
 8007416:	4651      	mov	r1, sl
 8007418:	b1eb      	cbz	r3, 8007456 <_strtod_l+0x8e6>
 800741a:	4b2d      	ldr	r3, [pc, #180]	; (80074d0 <_strtod_l+0x960>)
 800741c:	403b      	ands	r3, r7
 800741e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007422:	f04f 32ff 	mov.w	r2, #4294967295
 8007426:	d819      	bhi.n	800745c <_strtod_l+0x8ec>
 8007428:	0d1b      	lsrs	r3, r3, #20
 800742a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800742e:	fa02 f303 	lsl.w	r3, r2, r3
 8007432:	4299      	cmp	r1, r3
 8007434:	d117      	bne.n	8007466 <_strtod_l+0x8f6>
 8007436:	4b29      	ldr	r3, [pc, #164]	; (80074dc <_strtod_l+0x96c>)
 8007438:	429f      	cmp	r7, r3
 800743a:	d102      	bne.n	8007442 <_strtod_l+0x8d2>
 800743c:	3101      	adds	r1, #1
 800743e:	f43f addf 	beq.w	8007000 <_strtod_l+0x490>
 8007442:	4b23      	ldr	r3, [pc, #140]	; (80074d0 <_strtod_l+0x960>)
 8007444:	403b      	ands	r3, r7
 8007446:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800744a:	f04f 0a00 	mov.w	sl, #0
 800744e:	9b04      	ldr	r3, [sp, #16]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d1a4      	bne.n	800739e <_strtod_l+0x82e>
 8007454:	e5de      	b.n	8007014 <_strtod_l+0x4a4>
 8007456:	f04f 33ff 	mov.w	r3, #4294967295
 800745a:	e7ea      	b.n	8007432 <_strtod_l+0x8c2>
 800745c:	4613      	mov	r3, r2
 800745e:	e7e8      	b.n	8007432 <_strtod_l+0x8c2>
 8007460:	ea53 030a 	orrs.w	r3, r3, sl
 8007464:	d08c      	beq.n	8007380 <_strtod_l+0x810>
 8007466:	9b08      	ldr	r3, [sp, #32]
 8007468:	b1db      	cbz	r3, 80074a2 <_strtod_l+0x932>
 800746a:	423b      	tst	r3, r7
 800746c:	d0ef      	beq.n	800744e <_strtod_l+0x8de>
 800746e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007470:	9a04      	ldr	r2, [sp, #16]
 8007472:	4650      	mov	r0, sl
 8007474:	4659      	mov	r1, fp
 8007476:	b1c3      	cbz	r3, 80074aa <_strtod_l+0x93a>
 8007478:	f7ff fb5c 	bl	8006b34 <sulp>
 800747c:	4602      	mov	r2, r0
 800747e:	460b      	mov	r3, r1
 8007480:	ec51 0b18 	vmov	r0, r1, d8
 8007484:	f7f8 ff12 	bl	80002ac <__adddf3>
 8007488:	4682      	mov	sl, r0
 800748a:	468b      	mov	fp, r1
 800748c:	e7df      	b.n	800744e <_strtod_l+0x8de>
 800748e:	4013      	ands	r3, r2
 8007490:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007494:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007498:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800749c:	f04f 3aff 	mov.w	sl, #4294967295
 80074a0:	e7d5      	b.n	800744e <_strtod_l+0x8de>
 80074a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80074a4:	ea13 0f0a 	tst.w	r3, sl
 80074a8:	e7e0      	b.n	800746c <_strtod_l+0x8fc>
 80074aa:	f7ff fb43 	bl	8006b34 <sulp>
 80074ae:	4602      	mov	r2, r0
 80074b0:	460b      	mov	r3, r1
 80074b2:	ec51 0b18 	vmov	r0, r1, d8
 80074b6:	f7f8 fef7 	bl	80002a8 <__aeabi_dsub>
 80074ba:	2200      	movs	r2, #0
 80074bc:	2300      	movs	r3, #0
 80074be:	4682      	mov	sl, r0
 80074c0:	468b      	mov	fp, r1
 80074c2:	f7f9 fb11 	bl	8000ae8 <__aeabi_dcmpeq>
 80074c6:	2800      	cmp	r0, #0
 80074c8:	d0c1      	beq.n	800744e <_strtod_l+0x8de>
 80074ca:	e611      	b.n	80070f0 <_strtod_l+0x580>
 80074cc:	fffffc02 	.word	0xfffffc02
 80074d0:	7ff00000 	.word	0x7ff00000
 80074d4:	39500000 	.word	0x39500000
 80074d8:	000fffff 	.word	0x000fffff
 80074dc:	7fefffff 	.word	0x7fefffff
 80074e0:	0800a790 	.word	0x0800a790
 80074e4:	4631      	mov	r1, r6
 80074e6:	4628      	mov	r0, r5
 80074e8:	f002 fb10 	bl	8009b0c <__ratio>
 80074ec:	ec59 8b10 	vmov	r8, r9, d0
 80074f0:	ee10 0a10 	vmov	r0, s0
 80074f4:	2200      	movs	r2, #0
 80074f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80074fa:	4649      	mov	r1, r9
 80074fc:	f7f9 fb08 	bl	8000b10 <__aeabi_dcmple>
 8007500:	2800      	cmp	r0, #0
 8007502:	d07a      	beq.n	80075fa <_strtod_l+0xa8a>
 8007504:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007506:	2b00      	cmp	r3, #0
 8007508:	d04a      	beq.n	80075a0 <_strtod_l+0xa30>
 800750a:	4b95      	ldr	r3, [pc, #596]	; (8007760 <_strtod_l+0xbf0>)
 800750c:	2200      	movs	r2, #0
 800750e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007512:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8007760 <_strtod_l+0xbf0>
 8007516:	f04f 0800 	mov.w	r8, #0
 800751a:	4b92      	ldr	r3, [pc, #584]	; (8007764 <_strtod_l+0xbf4>)
 800751c:	403b      	ands	r3, r7
 800751e:	930d      	str	r3, [sp, #52]	; 0x34
 8007520:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007522:	4b91      	ldr	r3, [pc, #580]	; (8007768 <_strtod_l+0xbf8>)
 8007524:	429a      	cmp	r2, r3
 8007526:	f040 80b0 	bne.w	800768a <_strtod_l+0xb1a>
 800752a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800752e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8007532:	ec4b ab10 	vmov	d0, sl, fp
 8007536:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800753a:	f002 fa0f 	bl	800995c <__ulp>
 800753e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007542:	ec53 2b10 	vmov	r2, r3, d0
 8007546:	f7f9 f867 	bl	8000618 <__aeabi_dmul>
 800754a:	4652      	mov	r2, sl
 800754c:	465b      	mov	r3, fp
 800754e:	f7f8 fead 	bl	80002ac <__adddf3>
 8007552:	460b      	mov	r3, r1
 8007554:	4983      	ldr	r1, [pc, #524]	; (8007764 <_strtod_l+0xbf4>)
 8007556:	4a85      	ldr	r2, [pc, #532]	; (800776c <_strtod_l+0xbfc>)
 8007558:	4019      	ands	r1, r3
 800755a:	4291      	cmp	r1, r2
 800755c:	4682      	mov	sl, r0
 800755e:	d960      	bls.n	8007622 <_strtod_l+0xab2>
 8007560:	ee18 3a90 	vmov	r3, s17
 8007564:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007568:	4293      	cmp	r3, r2
 800756a:	d104      	bne.n	8007576 <_strtod_l+0xa06>
 800756c:	ee18 3a10 	vmov	r3, s16
 8007570:	3301      	adds	r3, #1
 8007572:	f43f ad45 	beq.w	8007000 <_strtod_l+0x490>
 8007576:	f8df b200 	ldr.w	fp, [pc, #512]	; 8007778 <_strtod_l+0xc08>
 800757a:	f04f 3aff 	mov.w	sl, #4294967295
 800757e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007580:	4620      	mov	r0, r4
 8007582:	f001 feb9 	bl	80092f8 <_Bfree>
 8007586:	9905      	ldr	r1, [sp, #20]
 8007588:	4620      	mov	r0, r4
 800758a:	f001 feb5 	bl	80092f8 <_Bfree>
 800758e:	4631      	mov	r1, r6
 8007590:	4620      	mov	r0, r4
 8007592:	f001 feb1 	bl	80092f8 <_Bfree>
 8007596:	4629      	mov	r1, r5
 8007598:	4620      	mov	r0, r4
 800759a:	f001 fead 	bl	80092f8 <_Bfree>
 800759e:	e61a      	b.n	80071d6 <_strtod_l+0x666>
 80075a0:	f1ba 0f00 	cmp.w	sl, #0
 80075a4:	d11b      	bne.n	80075de <_strtod_l+0xa6e>
 80075a6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80075aa:	b9f3      	cbnz	r3, 80075ea <_strtod_l+0xa7a>
 80075ac:	4b6c      	ldr	r3, [pc, #432]	; (8007760 <_strtod_l+0xbf0>)
 80075ae:	2200      	movs	r2, #0
 80075b0:	4640      	mov	r0, r8
 80075b2:	4649      	mov	r1, r9
 80075b4:	f7f9 faa2 	bl	8000afc <__aeabi_dcmplt>
 80075b8:	b9d0      	cbnz	r0, 80075f0 <_strtod_l+0xa80>
 80075ba:	4640      	mov	r0, r8
 80075bc:	4649      	mov	r1, r9
 80075be:	4b6c      	ldr	r3, [pc, #432]	; (8007770 <_strtod_l+0xc00>)
 80075c0:	2200      	movs	r2, #0
 80075c2:	f7f9 f829 	bl	8000618 <__aeabi_dmul>
 80075c6:	4680      	mov	r8, r0
 80075c8:	4689      	mov	r9, r1
 80075ca:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80075ce:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 80075d2:	9315      	str	r3, [sp, #84]	; 0x54
 80075d4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80075d8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80075dc:	e79d      	b.n	800751a <_strtod_l+0x9aa>
 80075de:	f1ba 0f01 	cmp.w	sl, #1
 80075e2:	d102      	bne.n	80075ea <_strtod_l+0xa7a>
 80075e4:	2f00      	cmp	r7, #0
 80075e6:	f43f ad83 	beq.w	80070f0 <_strtod_l+0x580>
 80075ea:	4b62      	ldr	r3, [pc, #392]	; (8007774 <_strtod_l+0xc04>)
 80075ec:	2200      	movs	r2, #0
 80075ee:	e78e      	b.n	800750e <_strtod_l+0x99e>
 80075f0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8007770 <_strtod_l+0xc00>
 80075f4:	f04f 0800 	mov.w	r8, #0
 80075f8:	e7e7      	b.n	80075ca <_strtod_l+0xa5a>
 80075fa:	4b5d      	ldr	r3, [pc, #372]	; (8007770 <_strtod_l+0xc00>)
 80075fc:	4640      	mov	r0, r8
 80075fe:	4649      	mov	r1, r9
 8007600:	2200      	movs	r2, #0
 8007602:	f7f9 f809 	bl	8000618 <__aeabi_dmul>
 8007606:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007608:	4680      	mov	r8, r0
 800760a:	4689      	mov	r9, r1
 800760c:	b933      	cbnz	r3, 800761c <_strtod_l+0xaac>
 800760e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007612:	900e      	str	r0, [sp, #56]	; 0x38
 8007614:	930f      	str	r3, [sp, #60]	; 0x3c
 8007616:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800761a:	e7dd      	b.n	80075d8 <_strtod_l+0xa68>
 800761c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8007620:	e7f9      	b.n	8007616 <_strtod_l+0xaa6>
 8007622:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8007626:	9b04      	ldr	r3, [sp, #16]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d1a8      	bne.n	800757e <_strtod_l+0xa0e>
 800762c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007630:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007632:	0d1b      	lsrs	r3, r3, #20
 8007634:	051b      	lsls	r3, r3, #20
 8007636:	429a      	cmp	r2, r3
 8007638:	d1a1      	bne.n	800757e <_strtod_l+0xa0e>
 800763a:	4640      	mov	r0, r8
 800763c:	4649      	mov	r1, r9
 800763e:	f7f9 fb4b 	bl	8000cd8 <__aeabi_d2lz>
 8007642:	f7f8 ffbb 	bl	80005bc <__aeabi_l2d>
 8007646:	4602      	mov	r2, r0
 8007648:	460b      	mov	r3, r1
 800764a:	4640      	mov	r0, r8
 800764c:	4649      	mov	r1, r9
 800764e:	f7f8 fe2b 	bl	80002a8 <__aeabi_dsub>
 8007652:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007654:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007658:	ea43 030a 	orr.w	r3, r3, sl
 800765c:	4313      	orrs	r3, r2
 800765e:	4680      	mov	r8, r0
 8007660:	4689      	mov	r9, r1
 8007662:	d055      	beq.n	8007710 <_strtod_l+0xba0>
 8007664:	a336      	add	r3, pc, #216	; (adr r3, 8007740 <_strtod_l+0xbd0>)
 8007666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800766a:	f7f9 fa47 	bl	8000afc <__aeabi_dcmplt>
 800766e:	2800      	cmp	r0, #0
 8007670:	f47f acd0 	bne.w	8007014 <_strtod_l+0x4a4>
 8007674:	a334      	add	r3, pc, #208	; (adr r3, 8007748 <_strtod_l+0xbd8>)
 8007676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800767a:	4640      	mov	r0, r8
 800767c:	4649      	mov	r1, r9
 800767e:	f7f9 fa5b 	bl	8000b38 <__aeabi_dcmpgt>
 8007682:	2800      	cmp	r0, #0
 8007684:	f43f af7b 	beq.w	800757e <_strtod_l+0xa0e>
 8007688:	e4c4      	b.n	8007014 <_strtod_l+0x4a4>
 800768a:	9b04      	ldr	r3, [sp, #16]
 800768c:	b333      	cbz	r3, 80076dc <_strtod_l+0xb6c>
 800768e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007690:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007694:	d822      	bhi.n	80076dc <_strtod_l+0xb6c>
 8007696:	a32e      	add	r3, pc, #184	; (adr r3, 8007750 <_strtod_l+0xbe0>)
 8007698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800769c:	4640      	mov	r0, r8
 800769e:	4649      	mov	r1, r9
 80076a0:	f7f9 fa36 	bl	8000b10 <__aeabi_dcmple>
 80076a4:	b1a0      	cbz	r0, 80076d0 <_strtod_l+0xb60>
 80076a6:	4649      	mov	r1, r9
 80076a8:	4640      	mov	r0, r8
 80076aa:	f7f9 fa8d 	bl	8000bc8 <__aeabi_d2uiz>
 80076ae:	2801      	cmp	r0, #1
 80076b0:	bf38      	it	cc
 80076b2:	2001      	movcc	r0, #1
 80076b4:	f7f8 ff36 	bl	8000524 <__aeabi_ui2d>
 80076b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80076ba:	4680      	mov	r8, r0
 80076bc:	4689      	mov	r9, r1
 80076be:	bb23      	cbnz	r3, 800770a <_strtod_l+0xb9a>
 80076c0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80076c4:	9010      	str	r0, [sp, #64]	; 0x40
 80076c6:	9311      	str	r3, [sp, #68]	; 0x44
 80076c8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80076cc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80076d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076d2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80076d4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80076d8:	1a9b      	subs	r3, r3, r2
 80076da:	9309      	str	r3, [sp, #36]	; 0x24
 80076dc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80076e0:	eeb0 0a48 	vmov.f32	s0, s16
 80076e4:	eef0 0a68 	vmov.f32	s1, s17
 80076e8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80076ec:	f002 f936 	bl	800995c <__ulp>
 80076f0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80076f4:	ec53 2b10 	vmov	r2, r3, d0
 80076f8:	f7f8 ff8e 	bl	8000618 <__aeabi_dmul>
 80076fc:	ec53 2b18 	vmov	r2, r3, d8
 8007700:	f7f8 fdd4 	bl	80002ac <__adddf3>
 8007704:	4682      	mov	sl, r0
 8007706:	468b      	mov	fp, r1
 8007708:	e78d      	b.n	8007626 <_strtod_l+0xab6>
 800770a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800770e:	e7db      	b.n	80076c8 <_strtod_l+0xb58>
 8007710:	a311      	add	r3, pc, #68	; (adr r3, 8007758 <_strtod_l+0xbe8>)
 8007712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007716:	f7f9 f9f1 	bl	8000afc <__aeabi_dcmplt>
 800771a:	e7b2      	b.n	8007682 <_strtod_l+0xb12>
 800771c:	2300      	movs	r3, #0
 800771e:	930a      	str	r3, [sp, #40]	; 0x28
 8007720:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007722:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007724:	6013      	str	r3, [r2, #0]
 8007726:	f7ff ba6b 	b.w	8006c00 <_strtod_l+0x90>
 800772a:	2a65      	cmp	r2, #101	; 0x65
 800772c:	f43f ab5f 	beq.w	8006dee <_strtod_l+0x27e>
 8007730:	2a45      	cmp	r2, #69	; 0x45
 8007732:	f43f ab5c 	beq.w	8006dee <_strtod_l+0x27e>
 8007736:	2301      	movs	r3, #1
 8007738:	f7ff bb94 	b.w	8006e64 <_strtod_l+0x2f4>
 800773c:	f3af 8000 	nop.w
 8007740:	94a03595 	.word	0x94a03595
 8007744:	3fdfffff 	.word	0x3fdfffff
 8007748:	35afe535 	.word	0x35afe535
 800774c:	3fe00000 	.word	0x3fe00000
 8007750:	ffc00000 	.word	0xffc00000
 8007754:	41dfffff 	.word	0x41dfffff
 8007758:	94a03595 	.word	0x94a03595
 800775c:	3fcfffff 	.word	0x3fcfffff
 8007760:	3ff00000 	.word	0x3ff00000
 8007764:	7ff00000 	.word	0x7ff00000
 8007768:	7fe00000 	.word	0x7fe00000
 800776c:	7c9fffff 	.word	0x7c9fffff
 8007770:	3fe00000 	.word	0x3fe00000
 8007774:	bff00000 	.word	0xbff00000
 8007778:	7fefffff 	.word	0x7fefffff

0800777c <_strtod_r>:
 800777c:	4b01      	ldr	r3, [pc, #4]	; (8007784 <_strtod_r+0x8>)
 800777e:	f7ff b9f7 	b.w	8006b70 <_strtod_l>
 8007782:	bf00      	nop
 8007784:	20000074 	.word	0x20000074

08007788 <_strtol_l.constprop.0>:
 8007788:	2b01      	cmp	r3, #1
 800778a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800778e:	d001      	beq.n	8007794 <_strtol_l.constprop.0+0xc>
 8007790:	2b24      	cmp	r3, #36	; 0x24
 8007792:	d906      	bls.n	80077a2 <_strtol_l.constprop.0+0x1a>
 8007794:	f7fe fa6e 	bl	8005c74 <__errno>
 8007798:	2316      	movs	r3, #22
 800779a:	6003      	str	r3, [r0, #0]
 800779c:	2000      	movs	r0, #0
 800779e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077a2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007888 <_strtol_l.constprop.0+0x100>
 80077a6:	460d      	mov	r5, r1
 80077a8:	462e      	mov	r6, r5
 80077aa:	f815 4b01 	ldrb.w	r4, [r5], #1
 80077ae:	f814 700c 	ldrb.w	r7, [r4, ip]
 80077b2:	f017 0708 	ands.w	r7, r7, #8
 80077b6:	d1f7      	bne.n	80077a8 <_strtol_l.constprop.0+0x20>
 80077b8:	2c2d      	cmp	r4, #45	; 0x2d
 80077ba:	d132      	bne.n	8007822 <_strtol_l.constprop.0+0x9a>
 80077bc:	782c      	ldrb	r4, [r5, #0]
 80077be:	2701      	movs	r7, #1
 80077c0:	1cb5      	adds	r5, r6, #2
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d05b      	beq.n	800787e <_strtol_l.constprop.0+0xf6>
 80077c6:	2b10      	cmp	r3, #16
 80077c8:	d109      	bne.n	80077de <_strtol_l.constprop.0+0x56>
 80077ca:	2c30      	cmp	r4, #48	; 0x30
 80077cc:	d107      	bne.n	80077de <_strtol_l.constprop.0+0x56>
 80077ce:	782c      	ldrb	r4, [r5, #0]
 80077d0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80077d4:	2c58      	cmp	r4, #88	; 0x58
 80077d6:	d14d      	bne.n	8007874 <_strtol_l.constprop.0+0xec>
 80077d8:	786c      	ldrb	r4, [r5, #1]
 80077da:	2310      	movs	r3, #16
 80077dc:	3502      	adds	r5, #2
 80077de:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80077e2:	f108 38ff 	add.w	r8, r8, #4294967295
 80077e6:	f04f 0c00 	mov.w	ip, #0
 80077ea:	fbb8 f9f3 	udiv	r9, r8, r3
 80077ee:	4666      	mov	r6, ip
 80077f0:	fb03 8a19 	mls	sl, r3, r9, r8
 80077f4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80077f8:	f1be 0f09 	cmp.w	lr, #9
 80077fc:	d816      	bhi.n	800782c <_strtol_l.constprop.0+0xa4>
 80077fe:	4674      	mov	r4, lr
 8007800:	42a3      	cmp	r3, r4
 8007802:	dd24      	ble.n	800784e <_strtol_l.constprop.0+0xc6>
 8007804:	f1bc 0f00 	cmp.w	ip, #0
 8007808:	db1e      	blt.n	8007848 <_strtol_l.constprop.0+0xc0>
 800780a:	45b1      	cmp	r9, r6
 800780c:	d31c      	bcc.n	8007848 <_strtol_l.constprop.0+0xc0>
 800780e:	d101      	bne.n	8007814 <_strtol_l.constprop.0+0x8c>
 8007810:	45a2      	cmp	sl, r4
 8007812:	db19      	blt.n	8007848 <_strtol_l.constprop.0+0xc0>
 8007814:	fb06 4603 	mla	r6, r6, r3, r4
 8007818:	f04f 0c01 	mov.w	ip, #1
 800781c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007820:	e7e8      	b.n	80077f4 <_strtol_l.constprop.0+0x6c>
 8007822:	2c2b      	cmp	r4, #43	; 0x2b
 8007824:	bf04      	itt	eq
 8007826:	782c      	ldrbeq	r4, [r5, #0]
 8007828:	1cb5      	addeq	r5, r6, #2
 800782a:	e7ca      	b.n	80077c2 <_strtol_l.constprop.0+0x3a>
 800782c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8007830:	f1be 0f19 	cmp.w	lr, #25
 8007834:	d801      	bhi.n	800783a <_strtol_l.constprop.0+0xb2>
 8007836:	3c37      	subs	r4, #55	; 0x37
 8007838:	e7e2      	b.n	8007800 <_strtol_l.constprop.0+0x78>
 800783a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800783e:	f1be 0f19 	cmp.w	lr, #25
 8007842:	d804      	bhi.n	800784e <_strtol_l.constprop.0+0xc6>
 8007844:	3c57      	subs	r4, #87	; 0x57
 8007846:	e7db      	b.n	8007800 <_strtol_l.constprop.0+0x78>
 8007848:	f04f 3cff 	mov.w	ip, #4294967295
 800784c:	e7e6      	b.n	800781c <_strtol_l.constprop.0+0x94>
 800784e:	f1bc 0f00 	cmp.w	ip, #0
 8007852:	da05      	bge.n	8007860 <_strtol_l.constprop.0+0xd8>
 8007854:	2322      	movs	r3, #34	; 0x22
 8007856:	6003      	str	r3, [r0, #0]
 8007858:	4646      	mov	r6, r8
 800785a:	b942      	cbnz	r2, 800786e <_strtol_l.constprop.0+0xe6>
 800785c:	4630      	mov	r0, r6
 800785e:	e79e      	b.n	800779e <_strtol_l.constprop.0+0x16>
 8007860:	b107      	cbz	r7, 8007864 <_strtol_l.constprop.0+0xdc>
 8007862:	4276      	negs	r6, r6
 8007864:	2a00      	cmp	r2, #0
 8007866:	d0f9      	beq.n	800785c <_strtol_l.constprop.0+0xd4>
 8007868:	f1bc 0f00 	cmp.w	ip, #0
 800786c:	d000      	beq.n	8007870 <_strtol_l.constprop.0+0xe8>
 800786e:	1e69      	subs	r1, r5, #1
 8007870:	6011      	str	r1, [r2, #0]
 8007872:	e7f3      	b.n	800785c <_strtol_l.constprop.0+0xd4>
 8007874:	2430      	movs	r4, #48	; 0x30
 8007876:	2b00      	cmp	r3, #0
 8007878:	d1b1      	bne.n	80077de <_strtol_l.constprop.0+0x56>
 800787a:	2308      	movs	r3, #8
 800787c:	e7af      	b.n	80077de <_strtol_l.constprop.0+0x56>
 800787e:	2c30      	cmp	r4, #48	; 0x30
 8007880:	d0a5      	beq.n	80077ce <_strtol_l.constprop.0+0x46>
 8007882:	230a      	movs	r3, #10
 8007884:	e7ab      	b.n	80077de <_strtol_l.constprop.0+0x56>
 8007886:	bf00      	nop
 8007888:	0800a7b9 	.word	0x0800a7b9

0800788c <_strtol_r>:
 800788c:	f7ff bf7c 	b.w	8007788 <_strtol_l.constprop.0>

08007890 <__swbuf_r>:
 8007890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007892:	460e      	mov	r6, r1
 8007894:	4614      	mov	r4, r2
 8007896:	4605      	mov	r5, r0
 8007898:	b118      	cbz	r0, 80078a2 <__swbuf_r+0x12>
 800789a:	6983      	ldr	r3, [r0, #24]
 800789c:	b90b      	cbnz	r3, 80078a2 <__swbuf_r+0x12>
 800789e:	f001 f84b 	bl	8008938 <__sinit>
 80078a2:	4b21      	ldr	r3, [pc, #132]	; (8007928 <__swbuf_r+0x98>)
 80078a4:	429c      	cmp	r4, r3
 80078a6:	d12b      	bne.n	8007900 <__swbuf_r+0x70>
 80078a8:	686c      	ldr	r4, [r5, #4]
 80078aa:	69a3      	ldr	r3, [r4, #24]
 80078ac:	60a3      	str	r3, [r4, #8]
 80078ae:	89a3      	ldrh	r3, [r4, #12]
 80078b0:	071a      	lsls	r2, r3, #28
 80078b2:	d52f      	bpl.n	8007914 <__swbuf_r+0x84>
 80078b4:	6923      	ldr	r3, [r4, #16]
 80078b6:	b36b      	cbz	r3, 8007914 <__swbuf_r+0x84>
 80078b8:	6923      	ldr	r3, [r4, #16]
 80078ba:	6820      	ldr	r0, [r4, #0]
 80078bc:	1ac0      	subs	r0, r0, r3
 80078be:	6963      	ldr	r3, [r4, #20]
 80078c0:	b2f6      	uxtb	r6, r6
 80078c2:	4283      	cmp	r3, r0
 80078c4:	4637      	mov	r7, r6
 80078c6:	dc04      	bgt.n	80078d2 <__swbuf_r+0x42>
 80078c8:	4621      	mov	r1, r4
 80078ca:	4628      	mov	r0, r5
 80078cc:	f000 ffa0 	bl	8008810 <_fflush_r>
 80078d0:	bb30      	cbnz	r0, 8007920 <__swbuf_r+0x90>
 80078d2:	68a3      	ldr	r3, [r4, #8]
 80078d4:	3b01      	subs	r3, #1
 80078d6:	60a3      	str	r3, [r4, #8]
 80078d8:	6823      	ldr	r3, [r4, #0]
 80078da:	1c5a      	adds	r2, r3, #1
 80078dc:	6022      	str	r2, [r4, #0]
 80078de:	701e      	strb	r6, [r3, #0]
 80078e0:	6963      	ldr	r3, [r4, #20]
 80078e2:	3001      	adds	r0, #1
 80078e4:	4283      	cmp	r3, r0
 80078e6:	d004      	beq.n	80078f2 <__swbuf_r+0x62>
 80078e8:	89a3      	ldrh	r3, [r4, #12]
 80078ea:	07db      	lsls	r3, r3, #31
 80078ec:	d506      	bpl.n	80078fc <__swbuf_r+0x6c>
 80078ee:	2e0a      	cmp	r6, #10
 80078f0:	d104      	bne.n	80078fc <__swbuf_r+0x6c>
 80078f2:	4621      	mov	r1, r4
 80078f4:	4628      	mov	r0, r5
 80078f6:	f000 ff8b 	bl	8008810 <_fflush_r>
 80078fa:	b988      	cbnz	r0, 8007920 <__swbuf_r+0x90>
 80078fc:	4638      	mov	r0, r7
 80078fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007900:	4b0a      	ldr	r3, [pc, #40]	; (800792c <__swbuf_r+0x9c>)
 8007902:	429c      	cmp	r4, r3
 8007904:	d101      	bne.n	800790a <__swbuf_r+0x7a>
 8007906:	68ac      	ldr	r4, [r5, #8]
 8007908:	e7cf      	b.n	80078aa <__swbuf_r+0x1a>
 800790a:	4b09      	ldr	r3, [pc, #36]	; (8007930 <__swbuf_r+0xa0>)
 800790c:	429c      	cmp	r4, r3
 800790e:	bf08      	it	eq
 8007910:	68ec      	ldreq	r4, [r5, #12]
 8007912:	e7ca      	b.n	80078aa <__swbuf_r+0x1a>
 8007914:	4621      	mov	r1, r4
 8007916:	4628      	mov	r0, r5
 8007918:	f000 f80c 	bl	8007934 <__swsetup_r>
 800791c:	2800      	cmp	r0, #0
 800791e:	d0cb      	beq.n	80078b8 <__swbuf_r+0x28>
 8007920:	f04f 37ff 	mov.w	r7, #4294967295
 8007924:	e7ea      	b.n	80078fc <__swbuf_r+0x6c>
 8007926:	bf00      	nop
 8007928:	0800a96c 	.word	0x0800a96c
 800792c:	0800a98c 	.word	0x0800a98c
 8007930:	0800a94c 	.word	0x0800a94c

08007934 <__swsetup_r>:
 8007934:	4b32      	ldr	r3, [pc, #200]	; (8007a00 <__swsetup_r+0xcc>)
 8007936:	b570      	push	{r4, r5, r6, lr}
 8007938:	681d      	ldr	r5, [r3, #0]
 800793a:	4606      	mov	r6, r0
 800793c:	460c      	mov	r4, r1
 800793e:	b125      	cbz	r5, 800794a <__swsetup_r+0x16>
 8007940:	69ab      	ldr	r3, [r5, #24]
 8007942:	b913      	cbnz	r3, 800794a <__swsetup_r+0x16>
 8007944:	4628      	mov	r0, r5
 8007946:	f000 fff7 	bl	8008938 <__sinit>
 800794a:	4b2e      	ldr	r3, [pc, #184]	; (8007a04 <__swsetup_r+0xd0>)
 800794c:	429c      	cmp	r4, r3
 800794e:	d10f      	bne.n	8007970 <__swsetup_r+0x3c>
 8007950:	686c      	ldr	r4, [r5, #4]
 8007952:	89a3      	ldrh	r3, [r4, #12]
 8007954:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007958:	0719      	lsls	r1, r3, #28
 800795a:	d42c      	bmi.n	80079b6 <__swsetup_r+0x82>
 800795c:	06dd      	lsls	r5, r3, #27
 800795e:	d411      	bmi.n	8007984 <__swsetup_r+0x50>
 8007960:	2309      	movs	r3, #9
 8007962:	6033      	str	r3, [r6, #0]
 8007964:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007968:	81a3      	strh	r3, [r4, #12]
 800796a:	f04f 30ff 	mov.w	r0, #4294967295
 800796e:	e03e      	b.n	80079ee <__swsetup_r+0xba>
 8007970:	4b25      	ldr	r3, [pc, #148]	; (8007a08 <__swsetup_r+0xd4>)
 8007972:	429c      	cmp	r4, r3
 8007974:	d101      	bne.n	800797a <__swsetup_r+0x46>
 8007976:	68ac      	ldr	r4, [r5, #8]
 8007978:	e7eb      	b.n	8007952 <__swsetup_r+0x1e>
 800797a:	4b24      	ldr	r3, [pc, #144]	; (8007a0c <__swsetup_r+0xd8>)
 800797c:	429c      	cmp	r4, r3
 800797e:	bf08      	it	eq
 8007980:	68ec      	ldreq	r4, [r5, #12]
 8007982:	e7e6      	b.n	8007952 <__swsetup_r+0x1e>
 8007984:	0758      	lsls	r0, r3, #29
 8007986:	d512      	bpl.n	80079ae <__swsetup_r+0x7a>
 8007988:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800798a:	b141      	cbz	r1, 800799e <__swsetup_r+0x6a>
 800798c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007990:	4299      	cmp	r1, r3
 8007992:	d002      	beq.n	800799a <__swsetup_r+0x66>
 8007994:	4630      	mov	r0, r6
 8007996:	f002 f947 	bl	8009c28 <_free_r>
 800799a:	2300      	movs	r3, #0
 800799c:	6363      	str	r3, [r4, #52]	; 0x34
 800799e:	89a3      	ldrh	r3, [r4, #12]
 80079a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80079a4:	81a3      	strh	r3, [r4, #12]
 80079a6:	2300      	movs	r3, #0
 80079a8:	6063      	str	r3, [r4, #4]
 80079aa:	6923      	ldr	r3, [r4, #16]
 80079ac:	6023      	str	r3, [r4, #0]
 80079ae:	89a3      	ldrh	r3, [r4, #12]
 80079b0:	f043 0308 	orr.w	r3, r3, #8
 80079b4:	81a3      	strh	r3, [r4, #12]
 80079b6:	6923      	ldr	r3, [r4, #16]
 80079b8:	b94b      	cbnz	r3, 80079ce <__swsetup_r+0x9a>
 80079ba:	89a3      	ldrh	r3, [r4, #12]
 80079bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80079c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80079c4:	d003      	beq.n	80079ce <__swsetup_r+0x9a>
 80079c6:	4621      	mov	r1, r4
 80079c8:	4630      	mov	r0, r6
 80079ca:	f001 fbed 	bl	80091a8 <__smakebuf_r>
 80079ce:	89a0      	ldrh	r0, [r4, #12]
 80079d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80079d4:	f010 0301 	ands.w	r3, r0, #1
 80079d8:	d00a      	beq.n	80079f0 <__swsetup_r+0xbc>
 80079da:	2300      	movs	r3, #0
 80079dc:	60a3      	str	r3, [r4, #8]
 80079de:	6963      	ldr	r3, [r4, #20]
 80079e0:	425b      	negs	r3, r3
 80079e2:	61a3      	str	r3, [r4, #24]
 80079e4:	6923      	ldr	r3, [r4, #16]
 80079e6:	b943      	cbnz	r3, 80079fa <__swsetup_r+0xc6>
 80079e8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80079ec:	d1ba      	bne.n	8007964 <__swsetup_r+0x30>
 80079ee:	bd70      	pop	{r4, r5, r6, pc}
 80079f0:	0781      	lsls	r1, r0, #30
 80079f2:	bf58      	it	pl
 80079f4:	6963      	ldrpl	r3, [r4, #20]
 80079f6:	60a3      	str	r3, [r4, #8]
 80079f8:	e7f4      	b.n	80079e4 <__swsetup_r+0xb0>
 80079fa:	2000      	movs	r0, #0
 80079fc:	e7f7      	b.n	80079ee <__swsetup_r+0xba>
 80079fe:	bf00      	nop
 8007a00:	2000000c 	.word	0x2000000c
 8007a04:	0800a96c 	.word	0x0800a96c
 8007a08:	0800a98c 	.word	0x0800a98c
 8007a0c:	0800a94c 	.word	0x0800a94c

08007a10 <quorem>:
 8007a10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a14:	6903      	ldr	r3, [r0, #16]
 8007a16:	690c      	ldr	r4, [r1, #16]
 8007a18:	42a3      	cmp	r3, r4
 8007a1a:	4607      	mov	r7, r0
 8007a1c:	f2c0 8081 	blt.w	8007b22 <quorem+0x112>
 8007a20:	3c01      	subs	r4, #1
 8007a22:	f101 0814 	add.w	r8, r1, #20
 8007a26:	f100 0514 	add.w	r5, r0, #20
 8007a2a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007a2e:	9301      	str	r3, [sp, #4]
 8007a30:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007a34:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007a38:	3301      	adds	r3, #1
 8007a3a:	429a      	cmp	r2, r3
 8007a3c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007a40:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007a44:	fbb2 f6f3 	udiv	r6, r2, r3
 8007a48:	d331      	bcc.n	8007aae <quorem+0x9e>
 8007a4a:	f04f 0e00 	mov.w	lr, #0
 8007a4e:	4640      	mov	r0, r8
 8007a50:	46ac      	mov	ip, r5
 8007a52:	46f2      	mov	sl, lr
 8007a54:	f850 2b04 	ldr.w	r2, [r0], #4
 8007a58:	b293      	uxth	r3, r2
 8007a5a:	fb06 e303 	mla	r3, r6, r3, lr
 8007a5e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007a62:	b29b      	uxth	r3, r3
 8007a64:	ebaa 0303 	sub.w	r3, sl, r3
 8007a68:	f8dc a000 	ldr.w	sl, [ip]
 8007a6c:	0c12      	lsrs	r2, r2, #16
 8007a6e:	fa13 f38a 	uxtah	r3, r3, sl
 8007a72:	fb06 e202 	mla	r2, r6, r2, lr
 8007a76:	9300      	str	r3, [sp, #0]
 8007a78:	9b00      	ldr	r3, [sp, #0]
 8007a7a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007a7e:	b292      	uxth	r2, r2
 8007a80:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007a84:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007a88:	f8bd 3000 	ldrh.w	r3, [sp]
 8007a8c:	4581      	cmp	r9, r0
 8007a8e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007a92:	f84c 3b04 	str.w	r3, [ip], #4
 8007a96:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007a9a:	d2db      	bcs.n	8007a54 <quorem+0x44>
 8007a9c:	f855 300b 	ldr.w	r3, [r5, fp]
 8007aa0:	b92b      	cbnz	r3, 8007aae <quorem+0x9e>
 8007aa2:	9b01      	ldr	r3, [sp, #4]
 8007aa4:	3b04      	subs	r3, #4
 8007aa6:	429d      	cmp	r5, r3
 8007aa8:	461a      	mov	r2, r3
 8007aaa:	d32e      	bcc.n	8007b0a <quorem+0xfa>
 8007aac:	613c      	str	r4, [r7, #16]
 8007aae:	4638      	mov	r0, r7
 8007ab0:	f001 feae 	bl	8009810 <__mcmp>
 8007ab4:	2800      	cmp	r0, #0
 8007ab6:	db24      	blt.n	8007b02 <quorem+0xf2>
 8007ab8:	3601      	adds	r6, #1
 8007aba:	4628      	mov	r0, r5
 8007abc:	f04f 0c00 	mov.w	ip, #0
 8007ac0:	f858 2b04 	ldr.w	r2, [r8], #4
 8007ac4:	f8d0 e000 	ldr.w	lr, [r0]
 8007ac8:	b293      	uxth	r3, r2
 8007aca:	ebac 0303 	sub.w	r3, ip, r3
 8007ace:	0c12      	lsrs	r2, r2, #16
 8007ad0:	fa13 f38e 	uxtah	r3, r3, lr
 8007ad4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007ad8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007adc:	b29b      	uxth	r3, r3
 8007ade:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007ae2:	45c1      	cmp	r9, r8
 8007ae4:	f840 3b04 	str.w	r3, [r0], #4
 8007ae8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007aec:	d2e8      	bcs.n	8007ac0 <quorem+0xb0>
 8007aee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007af2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007af6:	b922      	cbnz	r2, 8007b02 <quorem+0xf2>
 8007af8:	3b04      	subs	r3, #4
 8007afa:	429d      	cmp	r5, r3
 8007afc:	461a      	mov	r2, r3
 8007afe:	d30a      	bcc.n	8007b16 <quorem+0x106>
 8007b00:	613c      	str	r4, [r7, #16]
 8007b02:	4630      	mov	r0, r6
 8007b04:	b003      	add	sp, #12
 8007b06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b0a:	6812      	ldr	r2, [r2, #0]
 8007b0c:	3b04      	subs	r3, #4
 8007b0e:	2a00      	cmp	r2, #0
 8007b10:	d1cc      	bne.n	8007aac <quorem+0x9c>
 8007b12:	3c01      	subs	r4, #1
 8007b14:	e7c7      	b.n	8007aa6 <quorem+0x96>
 8007b16:	6812      	ldr	r2, [r2, #0]
 8007b18:	3b04      	subs	r3, #4
 8007b1a:	2a00      	cmp	r2, #0
 8007b1c:	d1f0      	bne.n	8007b00 <quorem+0xf0>
 8007b1e:	3c01      	subs	r4, #1
 8007b20:	e7eb      	b.n	8007afa <quorem+0xea>
 8007b22:	2000      	movs	r0, #0
 8007b24:	e7ee      	b.n	8007b04 <quorem+0xf4>
	...

08007b28 <_dtoa_r>:
 8007b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b2c:	ed2d 8b04 	vpush	{d8-d9}
 8007b30:	ec57 6b10 	vmov	r6, r7, d0
 8007b34:	b093      	sub	sp, #76	; 0x4c
 8007b36:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007b38:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007b3c:	9106      	str	r1, [sp, #24]
 8007b3e:	ee10 aa10 	vmov	sl, s0
 8007b42:	4604      	mov	r4, r0
 8007b44:	9209      	str	r2, [sp, #36]	; 0x24
 8007b46:	930c      	str	r3, [sp, #48]	; 0x30
 8007b48:	46bb      	mov	fp, r7
 8007b4a:	b975      	cbnz	r5, 8007b6a <_dtoa_r+0x42>
 8007b4c:	2010      	movs	r0, #16
 8007b4e:	f001 fb6b 	bl	8009228 <malloc>
 8007b52:	4602      	mov	r2, r0
 8007b54:	6260      	str	r0, [r4, #36]	; 0x24
 8007b56:	b920      	cbnz	r0, 8007b62 <_dtoa_r+0x3a>
 8007b58:	4ba7      	ldr	r3, [pc, #668]	; (8007df8 <_dtoa_r+0x2d0>)
 8007b5a:	21ea      	movs	r1, #234	; 0xea
 8007b5c:	48a7      	ldr	r0, [pc, #668]	; (8007dfc <_dtoa_r+0x2d4>)
 8007b5e:	f002 fc89 	bl	800a474 <__assert_func>
 8007b62:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007b66:	6005      	str	r5, [r0, #0]
 8007b68:	60c5      	str	r5, [r0, #12]
 8007b6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b6c:	6819      	ldr	r1, [r3, #0]
 8007b6e:	b151      	cbz	r1, 8007b86 <_dtoa_r+0x5e>
 8007b70:	685a      	ldr	r2, [r3, #4]
 8007b72:	604a      	str	r2, [r1, #4]
 8007b74:	2301      	movs	r3, #1
 8007b76:	4093      	lsls	r3, r2
 8007b78:	608b      	str	r3, [r1, #8]
 8007b7a:	4620      	mov	r0, r4
 8007b7c:	f001 fbbc 	bl	80092f8 <_Bfree>
 8007b80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b82:	2200      	movs	r2, #0
 8007b84:	601a      	str	r2, [r3, #0]
 8007b86:	1e3b      	subs	r3, r7, #0
 8007b88:	bfaa      	itet	ge
 8007b8a:	2300      	movge	r3, #0
 8007b8c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007b90:	f8c8 3000 	strge.w	r3, [r8]
 8007b94:	4b9a      	ldr	r3, [pc, #616]	; (8007e00 <_dtoa_r+0x2d8>)
 8007b96:	bfbc      	itt	lt
 8007b98:	2201      	movlt	r2, #1
 8007b9a:	f8c8 2000 	strlt.w	r2, [r8]
 8007b9e:	ea33 030b 	bics.w	r3, r3, fp
 8007ba2:	d11b      	bne.n	8007bdc <_dtoa_r+0xb4>
 8007ba4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007ba6:	f242 730f 	movw	r3, #9999	; 0x270f
 8007baa:	6013      	str	r3, [r2, #0]
 8007bac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007bb0:	4333      	orrs	r3, r6
 8007bb2:	f000 8592 	beq.w	80086da <_dtoa_r+0xbb2>
 8007bb6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007bb8:	b963      	cbnz	r3, 8007bd4 <_dtoa_r+0xac>
 8007bba:	4b92      	ldr	r3, [pc, #584]	; (8007e04 <_dtoa_r+0x2dc>)
 8007bbc:	e022      	b.n	8007c04 <_dtoa_r+0xdc>
 8007bbe:	4b92      	ldr	r3, [pc, #584]	; (8007e08 <_dtoa_r+0x2e0>)
 8007bc0:	9301      	str	r3, [sp, #4]
 8007bc2:	3308      	adds	r3, #8
 8007bc4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007bc6:	6013      	str	r3, [r2, #0]
 8007bc8:	9801      	ldr	r0, [sp, #4]
 8007bca:	b013      	add	sp, #76	; 0x4c
 8007bcc:	ecbd 8b04 	vpop	{d8-d9}
 8007bd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bd4:	4b8b      	ldr	r3, [pc, #556]	; (8007e04 <_dtoa_r+0x2dc>)
 8007bd6:	9301      	str	r3, [sp, #4]
 8007bd8:	3303      	adds	r3, #3
 8007bda:	e7f3      	b.n	8007bc4 <_dtoa_r+0x9c>
 8007bdc:	2200      	movs	r2, #0
 8007bde:	2300      	movs	r3, #0
 8007be0:	4650      	mov	r0, sl
 8007be2:	4659      	mov	r1, fp
 8007be4:	f7f8 ff80 	bl	8000ae8 <__aeabi_dcmpeq>
 8007be8:	ec4b ab19 	vmov	d9, sl, fp
 8007bec:	4680      	mov	r8, r0
 8007bee:	b158      	cbz	r0, 8007c08 <_dtoa_r+0xe0>
 8007bf0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007bf2:	2301      	movs	r3, #1
 8007bf4:	6013      	str	r3, [r2, #0]
 8007bf6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	f000 856b 	beq.w	80086d4 <_dtoa_r+0xbac>
 8007bfe:	4883      	ldr	r0, [pc, #524]	; (8007e0c <_dtoa_r+0x2e4>)
 8007c00:	6018      	str	r0, [r3, #0]
 8007c02:	1e43      	subs	r3, r0, #1
 8007c04:	9301      	str	r3, [sp, #4]
 8007c06:	e7df      	b.n	8007bc8 <_dtoa_r+0xa0>
 8007c08:	ec4b ab10 	vmov	d0, sl, fp
 8007c0c:	aa10      	add	r2, sp, #64	; 0x40
 8007c0e:	a911      	add	r1, sp, #68	; 0x44
 8007c10:	4620      	mov	r0, r4
 8007c12:	f001 ff1f 	bl	8009a54 <__d2b>
 8007c16:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8007c1a:	ee08 0a10 	vmov	s16, r0
 8007c1e:	2d00      	cmp	r5, #0
 8007c20:	f000 8084 	beq.w	8007d2c <_dtoa_r+0x204>
 8007c24:	ee19 3a90 	vmov	r3, s19
 8007c28:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007c2c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007c30:	4656      	mov	r6, sl
 8007c32:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007c36:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007c3a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8007c3e:	4b74      	ldr	r3, [pc, #464]	; (8007e10 <_dtoa_r+0x2e8>)
 8007c40:	2200      	movs	r2, #0
 8007c42:	4630      	mov	r0, r6
 8007c44:	4639      	mov	r1, r7
 8007c46:	f7f8 fb2f 	bl	80002a8 <__aeabi_dsub>
 8007c4a:	a365      	add	r3, pc, #404	; (adr r3, 8007de0 <_dtoa_r+0x2b8>)
 8007c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c50:	f7f8 fce2 	bl	8000618 <__aeabi_dmul>
 8007c54:	a364      	add	r3, pc, #400	; (adr r3, 8007de8 <_dtoa_r+0x2c0>)
 8007c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c5a:	f7f8 fb27 	bl	80002ac <__adddf3>
 8007c5e:	4606      	mov	r6, r0
 8007c60:	4628      	mov	r0, r5
 8007c62:	460f      	mov	r7, r1
 8007c64:	f7f8 fc6e 	bl	8000544 <__aeabi_i2d>
 8007c68:	a361      	add	r3, pc, #388	; (adr r3, 8007df0 <_dtoa_r+0x2c8>)
 8007c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c6e:	f7f8 fcd3 	bl	8000618 <__aeabi_dmul>
 8007c72:	4602      	mov	r2, r0
 8007c74:	460b      	mov	r3, r1
 8007c76:	4630      	mov	r0, r6
 8007c78:	4639      	mov	r1, r7
 8007c7a:	f7f8 fb17 	bl	80002ac <__adddf3>
 8007c7e:	4606      	mov	r6, r0
 8007c80:	460f      	mov	r7, r1
 8007c82:	f7f8 ff79 	bl	8000b78 <__aeabi_d2iz>
 8007c86:	2200      	movs	r2, #0
 8007c88:	9000      	str	r0, [sp, #0]
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	4630      	mov	r0, r6
 8007c8e:	4639      	mov	r1, r7
 8007c90:	f7f8 ff34 	bl	8000afc <__aeabi_dcmplt>
 8007c94:	b150      	cbz	r0, 8007cac <_dtoa_r+0x184>
 8007c96:	9800      	ldr	r0, [sp, #0]
 8007c98:	f7f8 fc54 	bl	8000544 <__aeabi_i2d>
 8007c9c:	4632      	mov	r2, r6
 8007c9e:	463b      	mov	r3, r7
 8007ca0:	f7f8 ff22 	bl	8000ae8 <__aeabi_dcmpeq>
 8007ca4:	b910      	cbnz	r0, 8007cac <_dtoa_r+0x184>
 8007ca6:	9b00      	ldr	r3, [sp, #0]
 8007ca8:	3b01      	subs	r3, #1
 8007caa:	9300      	str	r3, [sp, #0]
 8007cac:	9b00      	ldr	r3, [sp, #0]
 8007cae:	2b16      	cmp	r3, #22
 8007cb0:	d85a      	bhi.n	8007d68 <_dtoa_r+0x240>
 8007cb2:	9a00      	ldr	r2, [sp, #0]
 8007cb4:	4b57      	ldr	r3, [pc, #348]	; (8007e14 <_dtoa_r+0x2ec>)
 8007cb6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cbe:	ec51 0b19 	vmov	r0, r1, d9
 8007cc2:	f7f8 ff1b 	bl	8000afc <__aeabi_dcmplt>
 8007cc6:	2800      	cmp	r0, #0
 8007cc8:	d050      	beq.n	8007d6c <_dtoa_r+0x244>
 8007cca:	9b00      	ldr	r3, [sp, #0]
 8007ccc:	3b01      	subs	r3, #1
 8007cce:	9300      	str	r3, [sp, #0]
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	930b      	str	r3, [sp, #44]	; 0x2c
 8007cd4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007cd6:	1b5d      	subs	r5, r3, r5
 8007cd8:	1e6b      	subs	r3, r5, #1
 8007cda:	9305      	str	r3, [sp, #20]
 8007cdc:	bf45      	ittet	mi
 8007cde:	f1c5 0301 	rsbmi	r3, r5, #1
 8007ce2:	9304      	strmi	r3, [sp, #16]
 8007ce4:	2300      	movpl	r3, #0
 8007ce6:	2300      	movmi	r3, #0
 8007ce8:	bf4c      	ite	mi
 8007cea:	9305      	strmi	r3, [sp, #20]
 8007cec:	9304      	strpl	r3, [sp, #16]
 8007cee:	9b00      	ldr	r3, [sp, #0]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	db3d      	blt.n	8007d70 <_dtoa_r+0x248>
 8007cf4:	9b05      	ldr	r3, [sp, #20]
 8007cf6:	9a00      	ldr	r2, [sp, #0]
 8007cf8:	920a      	str	r2, [sp, #40]	; 0x28
 8007cfa:	4413      	add	r3, r2
 8007cfc:	9305      	str	r3, [sp, #20]
 8007cfe:	2300      	movs	r3, #0
 8007d00:	9307      	str	r3, [sp, #28]
 8007d02:	9b06      	ldr	r3, [sp, #24]
 8007d04:	2b09      	cmp	r3, #9
 8007d06:	f200 8089 	bhi.w	8007e1c <_dtoa_r+0x2f4>
 8007d0a:	2b05      	cmp	r3, #5
 8007d0c:	bfc4      	itt	gt
 8007d0e:	3b04      	subgt	r3, #4
 8007d10:	9306      	strgt	r3, [sp, #24]
 8007d12:	9b06      	ldr	r3, [sp, #24]
 8007d14:	f1a3 0302 	sub.w	r3, r3, #2
 8007d18:	bfcc      	ite	gt
 8007d1a:	2500      	movgt	r5, #0
 8007d1c:	2501      	movle	r5, #1
 8007d1e:	2b03      	cmp	r3, #3
 8007d20:	f200 8087 	bhi.w	8007e32 <_dtoa_r+0x30a>
 8007d24:	e8df f003 	tbb	[pc, r3]
 8007d28:	59383a2d 	.word	0x59383a2d
 8007d2c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007d30:	441d      	add	r5, r3
 8007d32:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007d36:	2b20      	cmp	r3, #32
 8007d38:	bfc1      	itttt	gt
 8007d3a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007d3e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007d42:	fa0b f303 	lslgt.w	r3, fp, r3
 8007d46:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007d4a:	bfda      	itte	le
 8007d4c:	f1c3 0320 	rsble	r3, r3, #32
 8007d50:	fa06 f003 	lslle.w	r0, r6, r3
 8007d54:	4318      	orrgt	r0, r3
 8007d56:	f7f8 fbe5 	bl	8000524 <__aeabi_ui2d>
 8007d5a:	2301      	movs	r3, #1
 8007d5c:	4606      	mov	r6, r0
 8007d5e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007d62:	3d01      	subs	r5, #1
 8007d64:	930e      	str	r3, [sp, #56]	; 0x38
 8007d66:	e76a      	b.n	8007c3e <_dtoa_r+0x116>
 8007d68:	2301      	movs	r3, #1
 8007d6a:	e7b2      	b.n	8007cd2 <_dtoa_r+0x1aa>
 8007d6c:	900b      	str	r0, [sp, #44]	; 0x2c
 8007d6e:	e7b1      	b.n	8007cd4 <_dtoa_r+0x1ac>
 8007d70:	9b04      	ldr	r3, [sp, #16]
 8007d72:	9a00      	ldr	r2, [sp, #0]
 8007d74:	1a9b      	subs	r3, r3, r2
 8007d76:	9304      	str	r3, [sp, #16]
 8007d78:	4253      	negs	r3, r2
 8007d7a:	9307      	str	r3, [sp, #28]
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	930a      	str	r3, [sp, #40]	; 0x28
 8007d80:	e7bf      	b.n	8007d02 <_dtoa_r+0x1da>
 8007d82:	2300      	movs	r3, #0
 8007d84:	9308      	str	r3, [sp, #32]
 8007d86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	dc55      	bgt.n	8007e38 <_dtoa_r+0x310>
 8007d8c:	2301      	movs	r3, #1
 8007d8e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007d92:	461a      	mov	r2, r3
 8007d94:	9209      	str	r2, [sp, #36]	; 0x24
 8007d96:	e00c      	b.n	8007db2 <_dtoa_r+0x28a>
 8007d98:	2301      	movs	r3, #1
 8007d9a:	e7f3      	b.n	8007d84 <_dtoa_r+0x25c>
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007da0:	9308      	str	r3, [sp, #32]
 8007da2:	9b00      	ldr	r3, [sp, #0]
 8007da4:	4413      	add	r3, r2
 8007da6:	9302      	str	r3, [sp, #8]
 8007da8:	3301      	adds	r3, #1
 8007daa:	2b01      	cmp	r3, #1
 8007dac:	9303      	str	r3, [sp, #12]
 8007dae:	bfb8      	it	lt
 8007db0:	2301      	movlt	r3, #1
 8007db2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007db4:	2200      	movs	r2, #0
 8007db6:	6042      	str	r2, [r0, #4]
 8007db8:	2204      	movs	r2, #4
 8007dba:	f102 0614 	add.w	r6, r2, #20
 8007dbe:	429e      	cmp	r6, r3
 8007dc0:	6841      	ldr	r1, [r0, #4]
 8007dc2:	d93d      	bls.n	8007e40 <_dtoa_r+0x318>
 8007dc4:	4620      	mov	r0, r4
 8007dc6:	f001 fa57 	bl	8009278 <_Balloc>
 8007dca:	9001      	str	r0, [sp, #4]
 8007dcc:	2800      	cmp	r0, #0
 8007dce:	d13b      	bne.n	8007e48 <_dtoa_r+0x320>
 8007dd0:	4b11      	ldr	r3, [pc, #68]	; (8007e18 <_dtoa_r+0x2f0>)
 8007dd2:	4602      	mov	r2, r0
 8007dd4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007dd8:	e6c0      	b.n	8007b5c <_dtoa_r+0x34>
 8007dda:	2301      	movs	r3, #1
 8007ddc:	e7df      	b.n	8007d9e <_dtoa_r+0x276>
 8007dde:	bf00      	nop
 8007de0:	636f4361 	.word	0x636f4361
 8007de4:	3fd287a7 	.word	0x3fd287a7
 8007de8:	8b60c8b3 	.word	0x8b60c8b3
 8007dec:	3fc68a28 	.word	0x3fc68a28
 8007df0:	509f79fb 	.word	0x509f79fb
 8007df4:	3fd34413 	.word	0x3fd34413
 8007df8:	0800a8c6 	.word	0x0800a8c6
 8007dfc:	0800a8dd 	.word	0x0800a8dd
 8007e00:	7ff00000 	.word	0x7ff00000
 8007e04:	0800a8c2 	.word	0x0800a8c2
 8007e08:	0800a8b9 	.word	0x0800a8b9
 8007e0c:	0800a739 	.word	0x0800a739
 8007e10:	3ff80000 	.word	0x3ff80000
 8007e14:	0800aab0 	.word	0x0800aab0
 8007e18:	0800a938 	.word	0x0800a938
 8007e1c:	2501      	movs	r5, #1
 8007e1e:	2300      	movs	r3, #0
 8007e20:	9306      	str	r3, [sp, #24]
 8007e22:	9508      	str	r5, [sp, #32]
 8007e24:	f04f 33ff 	mov.w	r3, #4294967295
 8007e28:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	2312      	movs	r3, #18
 8007e30:	e7b0      	b.n	8007d94 <_dtoa_r+0x26c>
 8007e32:	2301      	movs	r3, #1
 8007e34:	9308      	str	r3, [sp, #32]
 8007e36:	e7f5      	b.n	8007e24 <_dtoa_r+0x2fc>
 8007e38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e3a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007e3e:	e7b8      	b.n	8007db2 <_dtoa_r+0x28a>
 8007e40:	3101      	adds	r1, #1
 8007e42:	6041      	str	r1, [r0, #4]
 8007e44:	0052      	lsls	r2, r2, #1
 8007e46:	e7b8      	b.n	8007dba <_dtoa_r+0x292>
 8007e48:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007e4a:	9a01      	ldr	r2, [sp, #4]
 8007e4c:	601a      	str	r2, [r3, #0]
 8007e4e:	9b03      	ldr	r3, [sp, #12]
 8007e50:	2b0e      	cmp	r3, #14
 8007e52:	f200 809d 	bhi.w	8007f90 <_dtoa_r+0x468>
 8007e56:	2d00      	cmp	r5, #0
 8007e58:	f000 809a 	beq.w	8007f90 <_dtoa_r+0x468>
 8007e5c:	9b00      	ldr	r3, [sp, #0]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	dd32      	ble.n	8007ec8 <_dtoa_r+0x3a0>
 8007e62:	4ab7      	ldr	r2, [pc, #732]	; (8008140 <_dtoa_r+0x618>)
 8007e64:	f003 030f 	and.w	r3, r3, #15
 8007e68:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007e6c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007e70:	9b00      	ldr	r3, [sp, #0]
 8007e72:	05d8      	lsls	r0, r3, #23
 8007e74:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007e78:	d516      	bpl.n	8007ea8 <_dtoa_r+0x380>
 8007e7a:	4bb2      	ldr	r3, [pc, #712]	; (8008144 <_dtoa_r+0x61c>)
 8007e7c:	ec51 0b19 	vmov	r0, r1, d9
 8007e80:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007e84:	f7f8 fcf2 	bl	800086c <__aeabi_ddiv>
 8007e88:	f007 070f 	and.w	r7, r7, #15
 8007e8c:	4682      	mov	sl, r0
 8007e8e:	468b      	mov	fp, r1
 8007e90:	2503      	movs	r5, #3
 8007e92:	4eac      	ldr	r6, [pc, #688]	; (8008144 <_dtoa_r+0x61c>)
 8007e94:	b957      	cbnz	r7, 8007eac <_dtoa_r+0x384>
 8007e96:	4642      	mov	r2, r8
 8007e98:	464b      	mov	r3, r9
 8007e9a:	4650      	mov	r0, sl
 8007e9c:	4659      	mov	r1, fp
 8007e9e:	f7f8 fce5 	bl	800086c <__aeabi_ddiv>
 8007ea2:	4682      	mov	sl, r0
 8007ea4:	468b      	mov	fp, r1
 8007ea6:	e028      	b.n	8007efa <_dtoa_r+0x3d2>
 8007ea8:	2502      	movs	r5, #2
 8007eaa:	e7f2      	b.n	8007e92 <_dtoa_r+0x36a>
 8007eac:	07f9      	lsls	r1, r7, #31
 8007eae:	d508      	bpl.n	8007ec2 <_dtoa_r+0x39a>
 8007eb0:	4640      	mov	r0, r8
 8007eb2:	4649      	mov	r1, r9
 8007eb4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007eb8:	f7f8 fbae 	bl	8000618 <__aeabi_dmul>
 8007ebc:	3501      	adds	r5, #1
 8007ebe:	4680      	mov	r8, r0
 8007ec0:	4689      	mov	r9, r1
 8007ec2:	107f      	asrs	r7, r7, #1
 8007ec4:	3608      	adds	r6, #8
 8007ec6:	e7e5      	b.n	8007e94 <_dtoa_r+0x36c>
 8007ec8:	f000 809b 	beq.w	8008002 <_dtoa_r+0x4da>
 8007ecc:	9b00      	ldr	r3, [sp, #0]
 8007ece:	4f9d      	ldr	r7, [pc, #628]	; (8008144 <_dtoa_r+0x61c>)
 8007ed0:	425e      	negs	r6, r3
 8007ed2:	4b9b      	ldr	r3, [pc, #620]	; (8008140 <_dtoa_r+0x618>)
 8007ed4:	f006 020f 	and.w	r2, r6, #15
 8007ed8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ee0:	ec51 0b19 	vmov	r0, r1, d9
 8007ee4:	f7f8 fb98 	bl	8000618 <__aeabi_dmul>
 8007ee8:	1136      	asrs	r6, r6, #4
 8007eea:	4682      	mov	sl, r0
 8007eec:	468b      	mov	fp, r1
 8007eee:	2300      	movs	r3, #0
 8007ef0:	2502      	movs	r5, #2
 8007ef2:	2e00      	cmp	r6, #0
 8007ef4:	d17a      	bne.n	8007fec <_dtoa_r+0x4c4>
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d1d3      	bne.n	8007ea2 <_dtoa_r+0x37a>
 8007efa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	f000 8082 	beq.w	8008006 <_dtoa_r+0x4de>
 8007f02:	4b91      	ldr	r3, [pc, #580]	; (8008148 <_dtoa_r+0x620>)
 8007f04:	2200      	movs	r2, #0
 8007f06:	4650      	mov	r0, sl
 8007f08:	4659      	mov	r1, fp
 8007f0a:	f7f8 fdf7 	bl	8000afc <__aeabi_dcmplt>
 8007f0e:	2800      	cmp	r0, #0
 8007f10:	d079      	beq.n	8008006 <_dtoa_r+0x4de>
 8007f12:	9b03      	ldr	r3, [sp, #12]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d076      	beq.n	8008006 <_dtoa_r+0x4de>
 8007f18:	9b02      	ldr	r3, [sp, #8]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	dd36      	ble.n	8007f8c <_dtoa_r+0x464>
 8007f1e:	9b00      	ldr	r3, [sp, #0]
 8007f20:	4650      	mov	r0, sl
 8007f22:	4659      	mov	r1, fp
 8007f24:	1e5f      	subs	r7, r3, #1
 8007f26:	2200      	movs	r2, #0
 8007f28:	4b88      	ldr	r3, [pc, #544]	; (800814c <_dtoa_r+0x624>)
 8007f2a:	f7f8 fb75 	bl	8000618 <__aeabi_dmul>
 8007f2e:	9e02      	ldr	r6, [sp, #8]
 8007f30:	4682      	mov	sl, r0
 8007f32:	468b      	mov	fp, r1
 8007f34:	3501      	adds	r5, #1
 8007f36:	4628      	mov	r0, r5
 8007f38:	f7f8 fb04 	bl	8000544 <__aeabi_i2d>
 8007f3c:	4652      	mov	r2, sl
 8007f3e:	465b      	mov	r3, fp
 8007f40:	f7f8 fb6a 	bl	8000618 <__aeabi_dmul>
 8007f44:	4b82      	ldr	r3, [pc, #520]	; (8008150 <_dtoa_r+0x628>)
 8007f46:	2200      	movs	r2, #0
 8007f48:	f7f8 f9b0 	bl	80002ac <__adddf3>
 8007f4c:	46d0      	mov	r8, sl
 8007f4e:	46d9      	mov	r9, fp
 8007f50:	4682      	mov	sl, r0
 8007f52:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8007f56:	2e00      	cmp	r6, #0
 8007f58:	d158      	bne.n	800800c <_dtoa_r+0x4e4>
 8007f5a:	4b7e      	ldr	r3, [pc, #504]	; (8008154 <_dtoa_r+0x62c>)
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	4640      	mov	r0, r8
 8007f60:	4649      	mov	r1, r9
 8007f62:	f7f8 f9a1 	bl	80002a8 <__aeabi_dsub>
 8007f66:	4652      	mov	r2, sl
 8007f68:	465b      	mov	r3, fp
 8007f6a:	4680      	mov	r8, r0
 8007f6c:	4689      	mov	r9, r1
 8007f6e:	f7f8 fde3 	bl	8000b38 <__aeabi_dcmpgt>
 8007f72:	2800      	cmp	r0, #0
 8007f74:	f040 8295 	bne.w	80084a2 <_dtoa_r+0x97a>
 8007f78:	4652      	mov	r2, sl
 8007f7a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007f7e:	4640      	mov	r0, r8
 8007f80:	4649      	mov	r1, r9
 8007f82:	f7f8 fdbb 	bl	8000afc <__aeabi_dcmplt>
 8007f86:	2800      	cmp	r0, #0
 8007f88:	f040 8289 	bne.w	800849e <_dtoa_r+0x976>
 8007f8c:	ec5b ab19 	vmov	sl, fp, d9
 8007f90:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	f2c0 8148 	blt.w	8008228 <_dtoa_r+0x700>
 8007f98:	9a00      	ldr	r2, [sp, #0]
 8007f9a:	2a0e      	cmp	r2, #14
 8007f9c:	f300 8144 	bgt.w	8008228 <_dtoa_r+0x700>
 8007fa0:	4b67      	ldr	r3, [pc, #412]	; (8008140 <_dtoa_r+0x618>)
 8007fa2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007fa6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007faa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	f280 80d5 	bge.w	800815c <_dtoa_r+0x634>
 8007fb2:	9b03      	ldr	r3, [sp, #12]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	f300 80d1 	bgt.w	800815c <_dtoa_r+0x634>
 8007fba:	f040 826f 	bne.w	800849c <_dtoa_r+0x974>
 8007fbe:	4b65      	ldr	r3, [pc, #404]	; (8008154 <_dtoa_r+0x62c>)
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	4640      	mov	r0, r8
 8007fc4:	4649      	mov	r1, r9
 8007fc6:	f7f8 fb27 	bl	8000618 <__aeabi_dmul>
 8007fca:	4652      	mov	r2, sl
 8007fcc:	465b      	mov	r3, fp
 8007fce:	f7f8 fda9 	bl	8000b24 <__aeabi_dcmpge>
 8007fd2:	9e03      	ldr	r6, [sp, #12]
 8007fd4:	4637      	mov	r7, r6
 8007fd6:	2800      	cmp	r0, #0
 8007fd8:	f040 8245 	bne.w	8008466 <_dtoa_r+0x93e>
 8007fdc:	9d01      	ldr	r5, [sp, #4]
 8007fde:	2331      	movs	r3, #49	; 0x31
 8007fe0:	f805 3b01 	strb.w	r3, [r5], #1
 8007fe4:	9b00      	ldr	r3, [sp, #0]
 8007fe6:	3301      	adds	r3, #1
 8007fe8:	9300      	str	r3, [sp, #0]
 8007fea:	e240      	b.n	800846e <_dtoa_r+0x946>
 8007fec:	07f2      	lsls	r2, r6, #31
 8007fee:	d505      	bpl.n	8007ffc <_dtoa_r+0x4d4>
 8007ff0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ff4:	f7f8 fb10 	bl	8000618 <__aeabi_dmul>
 8007ff8:	3501      	adds	r5, #1
 8007ffa:	2301      	movs	r3, #1
 8007ffc:	1076      	asrs	r6, r6, #1
 8007ffe:	3708      	adds	r7, #8
 8008000:	e777      	b.n	8007ef2 <_dtoa_r+0x3ca>
 8008002:	2502      	movs	r5, #2
 8008004:	e779      	b.n	8007efa <_dtoa_r+0x3d2>
 8008006:	9f00      	ldr	r7, [sp, #0]
 8008008:	9e03      	ldr	r6, [sp, #12]
 800800a:	e794      	b.n	8007f36 <_dtoa_r+0x40e>
 800800c:	9901      	ldr	r1, [sp, #4]
 800800e:	4b4c      	ldr	r3, [pc, #304]	; (8008140 <_dtoa_r+0x618>)
 8008010:	4431      	add	r1, r6
 8008012:	910d      	str	r1, [sp, #52]	; 0x34
 8008014:	9908      	ldr	r1, [sp, #32]
 8008016:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800801a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800801e:	2900      	cmp	r1, #0
 8008020:	d043      	beq.n	80080aa <_dtoa_r+0x582>
 8008022:	494d      	ldr	r1, [pc, #308]	; (8008158 <_dtoa_r+0x630>)
 8008024:	2000      	movs	r0, #0
 8008026:	f7f8 fc21 	bl	800086c <__aeabi_ddiv>
 800802a:	4652      	mov	r2, sl
 800802c:	465b      	mov	r3, fp
 800802e:	f7f8 f93b 	bl	80002a8 <__aeabi_dsub>
 8008032:	9d01      	ldr	r5, [sp, #4]
 8008034:	4682      	mov	sl, r0
 8008036:	468b      	mov	fp, r1
 8008038:	4649      	mov	r1, r9
 800803a:	4640      	mov	r0, r8
 800803c:	f7f8 fd9c 	bl	8000b78 <__aeabi_d2iz>
 8008040:	4606      	mov	r6, r0
 8008042:	f7f8 fa7f 	bl	8000544 <__aeabi_i2d>
 8008046:	4602      	mov	r2, r0
 8008048:	460b      	mov	r3, r1
 800804a:	4640      	mov	r0, r8
 800804c:	4649      	mov	r1, r9
 800804e:	f7f8 f92b 	bl	80002a8 <__aeabi_dsub>
 8008052:	3630      	adds	r6, #48	; 0x30
 8008054:	f805 6b01 	strb.w	r6, [r5], #1
 8008058:	4652      	mov	r2, sl
 800805a:	465b      	mov	r3, fp
 800805c:	4680      	mov	r8, r0
 800805e:	4689      	mov	r9, r1
 8008060:	f7f8 fd4c 	bl	8000afc <__aeabi_dcmplt>
 8008064:	2800      	cmp	r0, #0
 8008066:	d163      	bne.n	8008130 <_dtoa_r+0x608>
 8008068:	4642      	mov	r2, r8
 800806a:	464b      	mov	r3, r9
 800806c:	4936      	ldr	r1, [pc, #216]	; (8008148 <_dtoa_r+0x620>)
 800806e:	2000      	movs	r0, #0
 8008070:	f7f8 f91a 	bl	80002a8 <__aeabi_dsub>
 8008074:	4652      	mov	r2, sl
 8008076:	465b      	mov	r3, fp
 8008078:	f7f8 fd40 	bl	8000afc <__aeabi_dcmplt>
 800807c:	2800      	cmp	r0, #0
 800807e:	f040 80b5 	bne.w	80081ec <_dtoa_r+0x6c4>
 8008082:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008084:	429d      	cmp	r5, r3
 8008086:	d081      	beq.n	8007f8c <_dtoa_r+0x464>
 8008088:	4b30      	ldr	r3, [pc, #192]	; (800814c <_dtoa_r+0x624>)
 800808a:	2200      	movs	r2, #0
 800808c:	4650      	mov	r0, sl
 800808e:	4659      	mov	r1, fp
 8008090:	f7f8 fac2 	bl	8000618 <__aeabi_dmul>
 8008094:	4b2d      	ldr	r3, [pc, #180]	; (800814c <_dtoa_r+0x624>)
 8008096:	4682      	mov	sl, r0
 8008098:	468b      	mov	fp, r1
 800809a:	4640      	mov	r0, r8
 800809c:	4649      	mov	r1, r9
 800809e:	2200      	movs	r2, #0
 80080a0:	f7f8 faba 	bl	8000618 <__aeabi_dmul>
 80080a4:	4680      	mov	r8, r0
 80080a6:	4689      	mov	r9, r1
 80080a8:	e7c6      	b.n	8008038 <_dtoa_r+0x510>
 80080aa:	4650      	mov	r0, sl
 80080ac:	4659      	mov	r1, fp
 80080ae:	f7f8 fab3 	bl	8000618 <__aeabi_dmul>
 80080b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80080b4:	9d01      	ldr	r5, [sp, #4]
 80080b6:	930f      	str	r3, [sp, #60]	; 0x3c
 80080b8:	4682      	mov	sl, r0
 80080ba:	468b      	mov	fp, r1
 80080bc:	4649      	mov	r1, r9
 80080be:	4640      	mov	r0, r8
 80080c0:	f7f8 fd5a 	bl	8000b78 <__aeabi_d2iz>
 80080c4:	4606      	mov	r6, r0
 80080c6:	f7f8 fa3d 	bl	8000544 <__aeabi_i2d>
 80080ca:	3630      	adds	r6, #48	; 0x30
 80080cc:	4602      	mov	r2, r0
 80080ce:	460b      	mov	r3, r1
 80080d0:	4640      	mov	r0, r8
 80080d2:	4649      	mov	r1, r9
 80080d4:	f7f8 f8e8 	bl	80002a8 <__aeabi_dsub>
 80080d8:	f805 6b01 	strb.w	r6, [r5], #1
 80080dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80080de:	429d      	cmp	r5, r3
 80080e0:	4680      	mov	r8, r0
 80080e2:	4689      	mov	r9, r1
 80080e4:	f04f 0200 	mov.w	r2, #0
 80080e8:	d124      	bne.n	8008134 <_dtoa_r+0x60c>
 80080ea:	4b1b      	ldr	r3, [pc, #108]	; (8008158 <_dtoa_r+0x630>)
 80080ec:	4650      	mov	r0, sl
 80080ee:	4659      	mov	r1, fp
 80080f0:	f7f8 f8dc 	bl	80002ac <__adddf3>
 80080f4:	4602      	mov	r2, r0
 80080f6:	460b      	mov	r3, r1
 80080f8:	4640      	mov	r0, r8
 80080fa:	4649      	mov	r1, r9
 80080fc:	f7f8 fd1c 	bl	8000b38 <__aeabi_dcmpgt>
 8008100:	2800      	cmp	r0, #0
 8008102:	d173      	bne.n	80081ec <_dtoa_r+0x6c4>
 8008104:	4652      	mov	r2, sl
 8008106:	465b      	mov	r3, fp
 8008108:	4913      	ldr	r1, [pc, #76]	; (8008158 <_dtoa_r+0x630>)
 800810a:	2000      	movs	r0, #0
 800810c:	f7f8 f8cc 	bl	80002a8 <__aeabi_dsub>
 8008110:	4602      	mov	r2, r0
 8008112:	460b      	mov	r3, r1
 8008114:	4640      	mov	r0, r8
 8008116:	4649      	mov	r1, r9
 8008118:	f7f8 fcf0 	bl	8000afc <__aeabi_dcmplt>
 800811c:	2800      	cmp	r0, #0
 800811e:	f43f af35 	beq.w	8007f8c <_dtoa_r+0x464>
 8008122:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008124:	1e6b      	subs	r3, r5, #1
 8008126:	930f      	str	r3, [sp, #60]	; 0x3c
 8008128:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800812c:	2b30      	cmp	r3, #48	; 0x30
 800812e:	d0f8      	beq.n	8008122 <_dtoa_r+0x5fa>
 8008130:	9700      	str	r7, [sp, #0]
 8008132:	e049      	b.n	80081c8 <_dtoa_r+0x6a0>
 8008134:	4b05      	ldr	r3, [pc, #20]	; (800814c <_dtoa_r+0x624>)
 8008136:	f7f8 fa6f 	bl	8000618 <__aeabi_dmul>
 800813a:	4680      	mov	r8, r0
 800813c:	4689      	mov	r9, r1
 800813e:	e7bd      	b.n	80080bc <_dtoa_r+0x594>
 8008140:	0800aab0 	.word	0x0800aab0
 8008144:	0800aa88 	.word	0x0800aa88
 8008148:	3ff00000 	.word	0x3ff00000
 800814c:	40240000 	.word	0x40240000
 8008150:	401c0000 	.word	0x401c0000
 8008154:	40140000 	.word	0x40140000
 8008158:	3fe00000 	.word	0x3fe00000
 800815c:	9d01      	ldr	r5, [sp, #4]
 800815e:	4656      	mov	r6, sl
 8008160:	465f      	mov	r7, fp
 8008162:	4642      	mov	r2, r8
 8008164:	464b      	mov	r3, r9
 8008166:	4630      	mov	r0, r6
 8008168:	4639      	mov	r1, r7
 800816a:	f7f8 fb7f 	bl	800086c <__aeabi_ddiv>
 800816e:	f7f8 fd03 	bl	8000b78 <__aeabi_d2iz>
 8008172:	4682      	mov	sl, r0
 8008174:	f7f8 f9e6 	bl	8000544 <__aeabi_i2d>
 8008178:	4642      	mov	r2, r8
 800817a:	464b      	mov	r3, r9
 800817c:	f7f8 fa4c 	bl	8000618 <__aeabi_dmul>
 8008180:	4602      	mov	r2, r0
 8008182:	460b      	mov	r3, r1
 8008184:	4630      	mov	r0, r6
 8008186:	4639      	mov	r1, r7
 8008188:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800818c:	f7f8 f88c 	bl	80002a8 <__aeabi_dsub>
 8008190:	f805 6b01 	strb.w	r6, [r5], #1
 8008194:	9e01      	ldr	r6, [sp, #4]
 8008196:	9f03      	ldr	r7, [sp, #12]
 8008198:	1bae      	subs	r6, r5, r6
 800819a:	42b7      	cmp	r7, r6
 800819c:	4602      	mov	r2, r0
 800819e:	460b      	mov	r3, r1
 80081a0:	d135      	bne.n	800820e <_dtoa_r+0x6e6>
 80081a2:	f7f8 f883 	bl	80002ac <__adddf3>
 80081a6:	4642      	mov	r2, r8
 80081a8:	464b      	mov	r3, r9
 80081aa:	4606      	mov	r6, r0
 80081ac:	460f      	mov	r7, r1
 80081ae:	f7f8 fcc3 	bl	8000b38 <__aeabi_dcmpgt>
 80081b2:	b9d0      	cbnz	r0, 80081ea <_dtoa_r+0x6c2>
 80081b4:	4642      	mov	r2, r8
 80081b6:	464b      	mov	r3, r9
 80081b8:	4630      	mov	r0, r6
 80081ba:	4639      	mov	r1, r7
 80081bc:	f7f8 fc94 	bl	8000ae8 <__aeabi_dcmpeq>
 80081c0:	b110      	cbz	r0, 80081c8 <_dtoa_r+0x6a0>
 80081c2:	f01a 0f01 	tst.w	sl, #1
 80081c6:	d110      	bne.n	80081ea <_dtoa_r+0x6c2>
 80081c8:	4620      	mov	r0, r4
 80081ca:	ee18 1a10 	vmov	r1, s16
 80081ce:	f001 f893 	bl	80092f8 <_Bfree>
 80081d2:	2300      	movs	r3, #0
 80081d4:	9800      	ldr	r0, [sp, #0]
 80081d6:	702b      	strb	r3, [r5, #0]
 80081d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80081da:	3001      	adds	r0, #1
 80081dc:	6018      	str	r0, [r3, #0]
 80081de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	f43f acf1 	beq.w	8007bc8 <_dtoa_r+0xa0>
 80081e6:	601d      	str	r5, [r3, #0]
 80081e8:	e4ee      	b.n	8007bc8 <_dtoa_r+0xa0>
 80081ea:	9f00      	ldr	r7, [sp, #0]
 80081ec:	462b      	mov	r3, r5
 80081ee:	461d      	mov	r5, r3
 80081f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80081f4:	2a39      	cmp	r2, #57	; 0x39
 80081f6:	d106      	bne.n	8008206 <_dtoa_r+0x6de>
 80081f8:	9a01      	ldr	r2, [sp, #4]
 80081fa:	429a      	cmp	r2, r3
 80081fc:	d1f7      	bne.n	80081ee <_dtoa_r+0x6c6>
 80081fe:	9901      	ldr	r1, [sp, #4]
 8008200:	2230      	movs	r2, #48	; 0x30
 8008202:	3701      	adds	r7, #1
 8008204:	700a      	strb	r2, [r1, #0]
 8008206:	781a      	ldrb	r2, [r3, #0]
 8008208:	3201      	adds	r2, #1
 800820a:	701a      	strb	r2, [r3, #0]
 800820c:	e790      	b.n	8008130 <_dtoa_r+0x608>
 800820e:	4ba6      	ldr	r3, [pc, #664]	; (80084a8 <_dtoa_r+0x980>)
 8008210:	2200      	movs	r2, #0
 8008212:	f7f8 fa01 	bl	8000618 <__aeabi_dmul>
 8008216:	2200      	movs	r2, #0
 8008218:	2300      	movs	r3, #0
 800821a:	4606      	mov	r6, r0
 800821c:	460f      	mov	r7, r1
 800821e:	f7f8 fc63 	bl	8000ae8 <__aeabi_dcmpeq>
 8008222:	2800      	cmp	r0, #0
 8008224:	d09d      	beq.n	8008162 <_dtoa_r+0x63a>
 8008226:	e7cf      	b.n	80081c8 <_dtoa_r+0x6a0>
 8008228:	9a08      	ldr	r2, [sp, #32]
 800822a:	2a00      	cmp	r2, #0
 800822c:	f000 80d7 	beq.w	80083de <_dtoa_r+0x8b6>
 8008230:	9a06      	ldr	r2, [sp, #24]
 8008232:	2a01      	cmp	r2, #1
 8008234:	f300 80ba 	bgt.w	80083ac <_dtoa_r+0x884>
 8008238:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800823a:	2a00      	cmp	r2, #0
 800823c:	f000 80b2 	beq.w	80083a4 <_dtoa_r+0x87c>
 8008240:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008244:	9e07      	ldr	r6, [sp, #28]
 8008246:	9d04      	ldr	r5, [sp, #16]
 8008248:	9a04      	ldr	r2, [sp, #16]
 800824a:	441a      	add	r2, r3
 800824c:	9204      	str	r2, [sp, #16]
 800824e:	9a05      	ldr	r2, [sp, #20]
 8008250:	2101      	movs	r1, #1
 8008252:	441a      	add	r2, r3
 8008254:	4620      	mov	r0, r4
 8008256:	9205      	str	r2, [sp, #20]
 8008258:	f001 f950 	bl	80094fc <__i2b>
 800825c:	4607      	mov	r7, r0
 800825e:	2d00      	cmp	r5, #0
 8008260:	dd0c      	ble.n	800827c <_dtoa_r+0x754>
 8008262:	9b05      	ldr	r3, [sp, #20]
 8008264:	2b00      	cmp	r3, #0
 8008266:	dd09      	ble.n	800827c <_dtoa_r+0x754>
 8008268:	42ab      	cmp	r3, r5
 800826a:	9a04      	ldr	r2, [sp, #16]
 800826c:	bfa8      	it	ge
 800826e:	462b      	movge	r3, r5
 8008270:	1ad2      	subs	r2, r2, r3
 8008272:	9204      	str	r2, [sp, #16]
 8008274:	9a05      	ldr	r2, [sp, #20]
 8008276:	1aed      	subs	r5, r5, r3
 8008278:	1ad3      	subs	r3, r2, r3
 800827a:	9305      	str	r3, [sp, #20]
 800827c:	9b07      	ldr	r3, [sp, #28]
 800827e:	b31b      	cbz	r3, 80082c8 <_dtoa_r+0x7a0>
 8008280:	9b08      	ldr	r3, [sp, #32]
 8008282:	2b00      	cmp	r3, #0
 8008284:	f000 80af 	beq.w	80083e6 <_dtoa_r+0x8be>
 8008288:	2e00      	cmp	r6, #0
 800828a:	dd13      	ble.n	80082b4 <_dtoa_r+0x78c>
 800828c:	4639      	mov	r1, r7
 800828e:	4632      	mov	r2, r6
 8008290:	4620      	mov	r0, r4
 8008292:	f001 f9f3 	bl	800967c <__pow5mult>
 8008296:	ee18 2a10 	vmov	r2, s16
 800829a:	4601      	mov	r1, r0
 800829c:	4607      	mov	r7, r0
 800829e:	4620      	mov	r0, r4
 80082a0:	f001 f942 	bl	8009528 <__multiply>
 80082a4:	ee18 1a10 	vmov	r1, s16
 80082a8:	4680      	mov	r8, r0
 80082aa:	4620      	mov	r0, r4
 80082ac:	f001 f824 	bl	80092f8 <_Bfree>
 80082b0:	ee08 8a10 	vmov	s16, r8
 80082b4:	9b07      	ldr	r3, [sp, #28]
 80082b6:	1b9a      	subs	r2, r3, r6
 80082b8:	d006      	beq.n	80082c8 <_dtoa_r+0x7a0>
 80082ba:	ee18 1a10 	vmov	r1, s16
 80082be:	4620      	mov	r0, r4
 80082c0:	f001 f9dc 	bl	800967c <__pow5mult>
 80082c4:	ee08 0a10 	vmov	s16, r0
 80082c8:	2101      	movs	r1, #1
 80082ca:	4620      	mov	r0, r4
 80082cc:	f001 f916 	bl	80094fc <__i2b>
 80082d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	4606      	mov	r6, r0
 80082d6:	f340 8088 	ble.w	80083ea <_dtoa_r+0x8c2>
 80082da:	461a      	mov	r2, r3
 80082dc:	4601      	mov	r1, r0
 80082de:	4620      	mov	r0, r4
 80082e0:	f001 f9cc 	bl	800967c <__pow5mult>
 80082e4:	9b06      	ldr	r3, [sp, #24]
 80082e6:	2b01      	cmp	r3, #1
 80082e8:	4606      	mov	r6, r0
 80082ea:	f340 8081 	ble.w	80083f0 <_dtoa_r+0x8c8>
 80082ee:	f04f 0800 	mov.w	r8, #0
 80082f2:	6933      	ldr	r3, [r6, #16]
 80082f4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80082f8:	6918      	ldr	r0, [r3, #16]
 80082fa:	f001 f8af 	bl	800945c <__hi0bits>
 80082fe:	f1c0 0020 	rsb	r0, r0, #32
 8008302:	9b05      	ldr	r3, [sp, #20]
 8008304:	4418      	add	r0, r3
 8008306:	f010 001f 	ands.w	r0, r0, #31
 800830a:	f000 8092 	beq.w	8008432 <_dtoa_r+0x90a>
 800830e:	f1c0 0320 	rsb	r3, r0, #32
 8008312:	2b04      	cmp	r3, #4
 8008314:	f340 808a 	ble.w	800842c <_dtoa_r+0x904>
 8008318:	f1c0 001c 	rsb	r0, r0, #28
 800831c:	9b04      	ldr	r3, [sp, #16]
 800831e:	4403      	add	r3, r0
 8008320:	9304      	str	r3, [sp, #16]
 8008322:	9b05      	ldr	r3, [sp, #20]
 8008324:	4403      	add	r3, r0
 8008326:	4405      	add	r5, r0
 8008328:	9305      	str	r3, [sp, #20]
 800832a:	9b04      	ldr	r3, [sp, #16]
 800832c:	2b00      	cmp	r3, #0
 800832e:	dd07      	ble.n	8008340 <_dtoa_r+0x818>
 8008330:	ee18 1a10 	vmov	r1, s16
 8008334:	461a      	mov	r2, r3
 8008336:	4620      	mov	r0, r4
 8008338:	f001 f9fa 	bl	8009730 <__lshift>
 800833c:	ee08 0a10 	vmov	s16, r0
 8008340:	9b05      	ldr	r3, [sp, #20]
 8008342:	2b00      	cmp	r3, #0
 8008344:	dd05      	ble.n	8008352 <_dtoa_r+0x82a>
 8008346:	4631      	mov	r1, r6
 8008348:	461a      	mov	r2, r3
 800834a:	4620      	mov	r0, r4
 800834c:	f001 f9f0 	bl	8009730 <__lshift>
 8008350:	4606      	mov	r6, r0
 8008352:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008354:	2b00      	cmp	r3, #0
 8008356:	d06e      	beq.n	8008436 <_dtoa_r+0x90e>
 8008358:	ee18 0a10 	vmov	r0, s16
 800835c:	4631      	mov	r1, r6
 800835e:	f001 fa57 	bl	8009810 <__mcmp>
 8008362:	2800      	cmp	r0, #0
 8008364:	da67      	bge.n	8008436 <_dtoa_r+0x90e>
 8008366:	9b00      	ldr	r3, [sp, #0]
 8008368:	3b01      	subs	r3, #1
 800836a:	ee18 1a10 	vmov	r1, s16
 800836e:	9300      	str	r3, [sp, #0]
 8008370:	220a      	movs	r2, #10
 8008372:	2300      	movs	r3, #0
 8008374:	4620      	mov	r0, r4
 8008376:	f000 ffe1 	bl	800933c <__multadd>
 800837a:	9b08      	ldr	r3, [sp, #32]
 800837c:	ee08 0a10 	vmov	s16, r0
 8008380:	2b00      	cmp	r3, #0
 8008382:	f000 81b1 	beq.w	80086e8 <_dtoa_r+0xbc0>
 8008386:	2300      	movs	r3, #0
 8008388:	4639      	mov	r1, r7
 800838a:	220a      	movs	r2, #10
 800838c:	4620      	mov	r0, r4
 800838e:	f000 ffd5 	bl	800933c <__multadd>
 8008392:	9b02      	ldr	r3, [sp, #8]
 8008394:	2b00      	cmp	r3, #0
 8008396:	4607      	mov	r7, r0
 8008398:	f300 808e 	bgt.w	80084b8 <_dtoa_r+0x990>
 800839c:	9b06      	ldr	r3, [sp, #24]
 800839e:	2b02      	cmp	r3, #2
 80083a0:	dc51      	bgt.n	8008446 <_dtoa_r+0x91e>
 80083a2:	e089      	b.n	80084b8 <_dtoa_r+0x990>
 80083a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80083a6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80083aa:	e74b      	b.n	8008244 <_dtoa_r+0x71c>
 80083ac:	9b03      	ldr	r3, [sp, #12]
 80083ae:	1e5e      	subs	r6, r3, #1
 80083b0:	9b07      	ldr	r3, [sp, #28]
 80083b2:	42b3      	cmp	r3, r6
 80083b4:	bfbf      	itttt	lt
 80083b6:	9b07      	ldrlt	r3, [sp, #28]
 80083b8:	9607      	strlt	r6, [sp, #28]
 80083ba:	1af2      	sublt	r2, r6, r3
 80083bc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80083be:	bfb6      	itet	lt
 80083c0:	189b      	addlt	r3, r3, r2
 80083c2:	1b9e      	subge	r6, r3, r6
 80083c4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80083c6:	9b03      	ldr	r3, [sp, #12]
 80083c8:	bfb8      	it	lt
 80083ca:	2600      	movlt	r6, #0
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	bfb7      	itett	lt
 80083d0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80083d4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80083d8:	1a9d      	sublt	r5, r3, r2
 80083da:	2300      	movlt	r3, #0
 80083dc:	e734      	b.n	8008248 <_dtoa_r+0x720>
 80083de:	9e07      	ldr	r6, [sp, #28]
 80083e0:	9d04      	ldr	r5, [sp, #16]
 80083e2:	9f08      	ldr	r7, [sp, #32]
 80083e4:	e73b      	b.n	800825e <_dtoa_r+0x736>
 80083e6:	9a07      	ldr	r2, [sp, #28]
 80083e8:	e767      	b.n	80082ba <_dtoa_r+0x792>
 80083ea:	9b06      	ldr	r3, [sp, #24]
 80083ec:	2b01      	cmp	r3, #1
 80083ee:	dc18      	bgt.n	8008422 <_dtoa_r+0x8fa>
 80083f0:	f1ba 0f00 	cmp.w	sl, #0
 80083f4:	d115      	bne.n	8008422 <_dtoa_r+0x8fa>
 80083f6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80083fa:	b993      	cbnz	r3, 8008422 <_dtoa_r+0x8fa>
 80083fc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008400:	0d1b      	lsrs	r3, r3, #20
 8008402:	051b      	lsls	r3, r3, #20
 8008404:	b183      	cbz	r3, 8008428 <_dtoa_r+0x900>
 8008406:	9b04      	ldr	r3, [sp, #16]
 8008408:	3301      	adds	r3, #1
 800840a:	9304      	str	r3, [sp, #16]
 800840c:	9b05      	ldr	r3, [sp, #20]
 800840e:	3301      	adds	r3, #1
 8008410:	9305      	str	r3, [sp, #20]
 8008412:	f04f 0801 	mov.w	r8, #1
 8008416:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008418:	2b00      	cmp	r3, #0
 800841a:	f47f af6a 	bne.w	80082f2 <_dtoa_r+0x7ca>
 800841e:	2001      	movs	r0, #1
 8008420:	e76f      	b.n	8008302 <_dtoa_r+0x7da>
 8008422:	f04f 0800 	mov.w	r8, #0
 8008426:	e7f6      	b.n	8008416 <_dtoa_r+0x8ee>
 8008428:	4698      	mov	r8, r3
 800842a:	e7f4      	b.n	8008416 <_dtoa_r+0x8ee>
 800842c:	f43f af7d 	beq.w	800832a <_dtoa_r+0x802>
 8008430:	4618      	mov	r0, r3
 8008432:	301c      	adds	r0, #28
 8008434:	e772      	b.n	800831c <_dtoa_r+0x7f4>
 8008436:	9b03      	ldr	r3, [sp, #12]
 8008438:	2b00      	cmp	r3, #0
 800843a:	dc37      	bgt.n	80084ac <_dtoa_r+0x984>
 800843c:	9b06      	ldr	r3, [sp, #24]
 800843e:	2b02      	cmp	r3, #2
 8008440:	dd34      	ble.n	80084ac <_dtoa_r+0x984>
 8008442:	9b03      	ldr	r3, [sp, #12]
 8008444:	9302      	str	r3, [sp, #8]
 8008446:	9b02      	ldr	r3, [sp, #8]
 8008448:	b96b      	cbnz	r3, 8008466 <_dtoa_r+0x93e>
 800844a:	4631      	mov	r1, r6
 800844c:	2205      	movs	r2, #5
 800844e:	4620      	mov	r0, r4
 8008450:	f000 ff74 	bl	800933c <__multadd>
 8008454:	4601      	mov	r1, r0
 8008456:	4606      	mov	r6, r0
 8008458:	ee18 0a10 	vmov	r0, s16
 800845c:	f001 f9d8 	bl	8009810 <__mcmp>
 8008460:	2800      	cmp	r0, #0
 8008462:	f73f adbb 	bgt.w	8007fdc <_dtoa_r+0x4b4>
 8008466:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008468:	9d01      	ldr	r5, [sp, #4]
 800846a:	43db      	mvns	r3, r3
 800846c:	9300      	str	r3, [sp, #0]
 800846e:	f04f 0800 	mov.w	r8, #0
 8008472:	4631      	mov	r1, r6
 8008474:	4620      	mov	r0, r4
 8008476:	f000 ff3f 	bl	80092f8 <_Bfree>
 800847a:	2f00      	cmp	r7, #0
 800847c:	f43f aea4 	beq.w	80081c8 <_dtoa_r+0x6a0>
 8008480:	f1b8 0f00 	cmp.w	r8, #0
 8008484:	d005      	beq.n	8008492 <_dtoa_r+0x96a>
 8008486:	45b8      	cmp	r8, r7
 8008488:	d003      	beq.n	8008492 <_dtoa_r+0x96a>
 800848a:	4641      	mov	r1, r8
 800848c:	4620      	mov	r0, r4
 800848e:	f000 ff33 	bl	80092f8 <_Bfree>
 8008492:	4639      	mov	r1, r7
 8008494:	4620      	mov	r0, r4
 8008496:	f000 ff2f 	bl	80092f8 <_Bfree>
 800849a:	e695      	b.n	80081c8 <_dtoa_r+0x6a0>
 800849c:	2600      	movs	r6, #0
 800849e:	4637      	mov	r7, r6
 80084a0:	e7e1      	b.n	8008466 <_dtoa_r+0x93e>
 80084a2:	9700      	str	r7, [sp, #0]
 80084a4:	4637      	mov	r7, r6
 80084a6:	e599      	b.n	8007fdc <_dtoa_r+0x4b4>
 80084a8:	40240000 	.word	0x40240000
 80084ac:	9b08      	ldr	r3, [sp, #32]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	f000 80ca 	beq.w	8008648 <_dtoa_r+0xb20>
 80084b4:	9b03      	ldr	r3, [sp, #12]
 80084b6:	9302      	str	r3, [sp, #8]
 80084b8:	2d00      	cmp	r5, #0
 80084ba:	dd05      	ble.n	80084c8 <_dtoa_r+0x9a0>
 80084bc:	4639      	mov	r1, r7
 80084be:	462a      	mov	r2, r5
 80084c0:	4620      	mov	r0, r4
 80084c2:	f001 f935 	bl	8009730 <__lshift>
 80084c6:	4607      	mov	r7, r0
 80084c8:	f1b8 0f00 	cmp.w	r8, #0
 80084cc:	d05b      	beq.n	8008586 <_dtoa_r+0xa5e>
 80084ce:	6879      	ldr	r1, [r7, #4]
 80084d0:	4620      	mov	r0, r4
 80084d2:	f000 fed1 	bl	8009278 <_Balloc>
 80084d6:	4605      	mov	r5, r0
 80084d8:	b928      	cbnz	r0, 80084e6 <_dtoa_r+0x9be>
 80084da:	4b87      	ldr	r3, [pc, #540]	; (80086f8 <_dtoa_r+0xbd0>)
 80084dc:	4602      	mov	r2, r0
 80084de:	f240 21ea 	movw	r1, #746	; 0x2ea
 80084e2:	f7ff bb3b 	b.w	8007b5c <_dtoa_r+0x34>
 80084e6:	693a      	ldr	r2, [r7, #16]
 80084e8:	3202      	adds	r2, #2
 80084ea:	0092      	lsls	r2, r2, #2
 80084ec:	f107 010c 	add.w	r1, r7, #12
 80084f0:	300c      	adds	r0, #12
 80084f2:	f000 feb3 	bl	800925c <memcpy>
 80084f6:	2201      	movs	r2, #1
 80084f8:	4629      	mov	r1, r5
 80084fa:	4620      	mov	r0, r4
 80084fc:	f001 f918 	bl	8009730 <__lshift>
 8008500:	9b01      	ldr	r3, [sp, #4]
 8008502:	f103 0901 	add.w	r9, r3, #1
 8008506:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800850a:	4413      	add	r3, r2
 800850c:	9305      	str	r3, [sp, #20]
 800850e:	f00a 0301 	and.w	r3, sl, #1
 8008512:	46b8      	mov	r8, r7
 8008514:	9304      	str	r3, [sp, #16]
 8008516:	4607      	mov	r7, r0
 8008518:	4631      	mov	r1, r6
 800851a:	ee18 0a10 	vmov	r0, s16
 800851e:	f7ff fa77 	bl	8007a10 <quorem>
 8008522:	4641      	mov	r1, r8
 8008524:	9002      	str	r0, [sp, #8]
 8008526:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800852a:	ee18 0a10 	vmov	r0, s16
 800852e:	f001 f96f 	bl	8009810 <__mcmp>
 8008532:	463a      	mov	r2, r7
 8008534:	9003      	str	r0, [sp, #12]
 8008536:	4631      	mov	r1, r6
 8008538:	4620      	mov	r0, r4
 800853a:	f001 f985 	bl	8009848 <__mdiff>
 800853e:	68c2      	ldr	r2, [r0, #12]
 8008540:	f109 3bff 	add.w	fp, r9, #4294967295
 8008544:	4605      	mov	r5, r0
 8008546:	bb02      	cbnz	r2, 800858a <_dtoa_r+0xa62>
 8008548:	4601      	mov	r1, r0
 800854a:	ee18 0a10 	vmov	r0, s16
 800854e:	f001 f95f 	bl	8009810 <__mcmp>
 8008552:	4602      	mov	r2, r0
 8008554:	4629      	mov	r1, r5
 8008556:	4620      	mov	r0, r4
 8008558:	9207      	str	r2, [sp, #28]
 800855a:	f000 fecd 	bl	80092f8 <_Bfree>
 800855e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008562:	ea43 0102 	orr.w	r1, r3, r2
 8008566:	9b04      	ldr	r3, [sp, #16]
 8008568:	430b      	orrs	r3, r1
 800856a:	464d      	mov	r5, r9
 800856c:	d10f      	bne.n	800858e <_dtoa_r+0xa66>
 800856e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008572:	d02a      	beq.n	80085ca <_dtoa_r+0xaa2>
 8008574:	9b03      	ldr	r3, [sp, #12]
 8008576:	2b00      	cmp	r3, #0
 8008578:	dd02      	ble.n	8008580 <_dtoa_r+0xa58>
 800857a:	9b02      	ldr	r3, [sp, #8]
 800857c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008580:	f88b a000 	strb.w	sl, [fp]
 8008584:	e775      	b.n	8008472 <_dtoa_r+0x94a>
 8008586:	4638      	mov	r0, r7
 8008588:	e7ba      	b.n	8008500 <_dtoa_r+0x9d8>
 800858a:	2201      	movs	r2, #1
 800858c:	e7e2      	b.n	8008554 <_dtoa_r+0xa2c>
 800858e:	9b03      	ldr	r3, [sp, #12]
 8008590:	2b00      	cmp	r3, #0
 8008592:	db04      	blt.n	800859e <_dtoa_r+0xa76>
 8008594:	9906      	ldr	r1, [sp, #24]
 8008596:	430b      	orrs	r3, r1
 8008598:	9904      	ldr	r1, [sp, #16]
 800859a:	430b      	orrs	r3, r1
 800859c:	d122      	bne.n	80085e4 <_dtoa_r+0xabc>
 800859e:	2a00      	cmp	r2, #0
 80085a0:	ddee      	ble.n	8008580 <_dtoa_r+0xa58>
 80085a2:	ee18 1a10 	vmov	r1, s16
 80085a6:	2201      	movs	r2, #1
 80085a8:	4620      	mov	r0, r4
 80085aa:	f001 f8c1 	bl	8009730 <__lshift>
 80085ae:	4631      	mov	r1, r6
 80085b0:	ee08 0a10 	vmov	s16, r0
 80085b4:	f001 f92c 	bl	8009810 <__mcmp>
 80085b8:	2800      	cmp	r0, #0
 80085ba:	dc03      	bgt.n	80085c4 <_dtoa_r+0xa9c>
 80085bc:	d1e0      	bne.n	8008580 <_dtoa_r+0xa58>
 80085be:	f01a 0f01 	tst.w	sl, #1
 80085c2:	d0dd      	beq.n	8008580 <_dtoa_r+0xa58>
 80085c4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80085c8:	d1d7      	bne.n	800857a <_dtoa_r+0xa52>
 80085ca:	2339      	movs	r3, #57	; 0x39
 80085cc:	f88b 3000 	strb.w	r3, [fp]
 80085d0:	462b      	mov	r3, r5
 80085d2:	461d      	mov	r5, r3
 80085d4:	3b01      	subs	r3, #1
 80085d6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80085da:	2a39      	cmp	r2, #57	; 0x39
 80085dc:	d071      	beq.n	80086c2 <_dtoa_r+0xb9a>
 80085de:	3201      	adds	r2, #1
 80085e0:	701a      	strb	r2, [r3, #0]
 80085e2:	e746      	b.n	8008472 <_dtoa_r+0x94a>
 80085e4:	2a00      	cmp	r2, #0
 80085e6:	dd07      	ble.n	80085f8 <_dtoa_r+0xad0>
 80085e8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80085ec:	d0ed      	beq.n	80085ca <_dtoa_r+0xaa2>
 80085ee:	f10a 0301 	add.w	r3, sl, #1
 80085f2:	f88b 3000 	strb.w	r3, [fp]
 80085f6:	e73c      	b.n	8008472 <_dtoa_r+0x94a>
 80085f8:	9b05      	ldr	r3, [sp, #20]
 80085fa:	f809 ac01 	strb.w	sl, [r9, #-1]
 80085fe:	4599      	cmp	r9, r3
 8008600:	d047      	beq.n	8008692 <_dtoa_r+0xb6a>
 8008602:	ee18 1a10 	vmov	r1, s16
 8008606:	2300      	movs	r3, #0
 8008608:	220a      	movs	r2, #10
 800860a:	4620      	mov	r0, r4
 800860c:	f000 fe96 	bl	800933c <__multadd>
 8008610:	45b8      	cmp	r8, r7
 8008612:	ee08 0a10 	vmov	s16, r0
 8008616:	f04f 0300 	mov.w	r3, #0
 800861a:	f04f 020a 	mov.w	r2, #10
 800861e:	4641      	mov	r1, r8
 8008620:	4620      	mov	r0, r4
 8008622:	d106      	bne.n	8008632 <_dtoa_r+0xb0a>
 8008624:	f000 fe8a 	bl	800933c <__multadd>
 8008628:	4680      	mov	r8, r0
 800862a:	4607      	mov	r7, r0
 800862c:	f109 0901 	add.w	r9, r9, #1
 8008630:	e772      	b.n	8008518 <_dtoa_r+0x9f0>
 8008632:	f000 fe83 	bl	800933c <__multadd>
 8008636:	4639      	mov	r1, r7
 8008638:	4680      	mov	r8, r0
 800863a:	2300      	movs	r3, #0
 800863c:	220a      	movs	r2, #10
 800863e:	4620      	mov	r0, r4
 8008640:	f000 fe7c 	bl	800933c <__multadd>
 8008644:	4607      	mov	r7, r0
 8008646:	e7f1      	b.n	800862c <_dtoa_r+0xb04>
 8008648:	9b03      	ldr	r3, [sp, #12]
 800864a:	9302      	str	r3, [sp, #8]
 800864c:	9d01      	ldr	r5, [sp, #4]
 800864e:	ee18 0a10 	vmov	r0, s16
 8008652:	4631      	mov	r1, r6
 8008654:	f7ff f9dc 	bl	8007a10 <quorem>
 8008658:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800865c:	9b01      	ldr	r3, [sp, #4]
 800865e:	f805 ab01 	strb.w	sl, [r5], #1
 8008662:	1aea      	subs	r2, r5, r3
 8008664:	9b02      	ldr	r3, [sp, #8]
 8008666:	4293      	cmp	r3, r2
 8008668:	dd09      	ble.n	800867e <_dtoa_r+0xb56>
 800866a:	ee18 1a10 	vmov	r1, s16
 800866e:	2300      	movs	r3, #0
 8008670:	220a      	movs	r2, #10
 8008672:	4620      	mov	r0, r4
 8008674:	f000 fe62 	bl	800933c <__multadd>
 8008678:	ee08 0a10 	vmov	s16, r0
 800867c:	e7e7      	b.n	800864e <_dtoa_r+0xb26>
 800867e:	9b02      	ldr	r3, [sp, #8]
 8008680:	2b00      	cmp	r3, #0
 8008682:	bfc8      	it	gt
 8008684:	461d      	movgt	r5, r3
 8008686:	9b01      	ldr	r3, [sp, #4]
 8008688:	bfd8      	it	le
 800868a:	2501      	movle	r5, #1
 800868c:	441d      	add	r5, r3
 800868e:	f04f 0800 	mov.w	r8, #0
 8008692:	ee18 1a10 	vmov	r1, s16
 8008696:	2201      	movs	r2, #1
 8008698:	4620      	mov	r0, r4
 800869a:	f001 f849 	bl	8009730 <__lshift>
 800869e:	4631      	mov	r1, r6
 80086a0:	ee08 0a10 	vmov	s16, r0
 80086a4:	f001 f8b4 	bl	8009810 <__mcmp>
 80086a8:	2800      	cmp	r0, #0
 80086aa:	dc91      	bgt.n	80085d0 <_dtoa_r+0xaa8>
 80086ac:	d102      	bne.n	80086b4 <_dtoa_r+0xb8c>
 80086ae:	f01a 0f01 	tst.w	sl, #1
 80086b2:	d18d      	bne.n	80085d0 <_dtoa_r+0xaa8>
 80086b4:	462b      	mov	r3, r5
 80086b6:	461d      	mov	r5, r3
 80086b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80086bc:	2a30      	cmp	r2, #48	; 0x30
 80086be:	d0fa      	beq.n	80086b6 <_dtoa_r+0xb8e>
 80086c0:	e6d7      	b.n	8008472 <_dtoa_r+0x94a>
 80086c2:	9a01      	ldr	r2, [sp, #4]
 80086c4:	429a      	cmp	r2, r3
 80086c6:	d184      	bne.n	80085d2 <_dtoa_r+0xaaa>
 80086c8:	9b00      	ldr	r3, [sp, #0]
 80086ca:	3301      	adds	r3, #1
 80086cc:	9300      	str	r3, [sp, #0]
 80086ce:	2331      	movs	r3, #49	; 0x31
 80086d0:	7013      	strb	r3, [r2, #0]
 80086d2:	e6ce      	b.n	8008472 <_dtoa_r+0x94a>
 80086d4:	4b09      	ldr	r3, [pc, #36]	; (80086fc <_dtoa_r+0xbd4>)
 80086d6:	f7ff ba95 	b.w	8007c04 <_dtoa_r+0xdc>
 80086da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80086dc:	2b00      	cmp	r3, #0
 80086de:	f47f aa6e 	bne.w	8007bbe <_dtoa_r+0x96>
 80086e2:	4b07      	ldr	r3, [pc, #28]	; (8008700 <_dtoa_r+0xbd8>)
 80086e4:	f7ff ba8e 	b.w	8007c04 <_dtoa_r+0xdc>
 80086e8:	9b02      	ldr	r3, [sp, #8]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	dcae      	bgt.n	800864c <_dtoa_r+0xb24>
 80086ee:	9b06      	ldr	r3, [sp, #24]
 80086f0:	2b02      	cmp	r3, #2
 80086f2:	f73f aea8 	bgt.w	8008446 <_dtoa_r+0x91e>
 80086f6:	e7a9      	b.n	800864c <_dtoa_r+0xb24>
 80086f8:	0800a938 	.word	0x0800a938
 80086fc:	0800a738 	.word	0x0800a738
 8008700:	0800a8b9 	.word	0x0800a8b9

08008704 <__sflush_r>:
 8008704:	898a      	ldrh	r2, [r1, #12]
 8008706:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800870a:	4605      	mov	r5, r0
 800870c:	0710      	lsls	r0, r2, #28
 800870e:	460c      	mov	r4, r1
 8008710:	d458      	bmi.n	80087c4 <__sflush_r+0xc0>
 8008712:	684b      	ldr	r3, [r1, #4]
 8008714:	2b00      	cmp	r3, #0
 8008716:	dc05      	bgt.n	8008724 <__sflush_r+0x20>
 8008718:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800871a:	2b00      	cmp	r3, #0
 800871c:	dc02      	bgt.n	8008724 <__sflush_r+0x20>
 800871e:	2000      	movs	r0, #0
 8008720:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008724:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008726:	2e00      	cmp	r6, #0
 8008728:	d0f9      	beq.n	800871e <__sflush_r+0x1a>
 800872a:	2300      	movs	r3, #0
 800872c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008730:	682f      	ldr	r7, [r5, #0]
 8008732:	602b      	str	r3, [r5, #0]
 8008734:	d032      	beq.n	800879c <__sflush_r+0x98>
 8008736:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008738:	89a3      	ldrh	r3, [r4, #12]
 800873a:	075a      	lsls	r2, r3, #29
 800873c:	d505      	bpl.n	800874a <__sflush_r+0x46>
 800873e:	6863      	ldr	r3, [r4, #4]
 8008740:	1ac0      	subs	r0, r0, r3
 8008742:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008744:	b10b      	cbz	r3, 800874a <__sflush_r+0x46>
 8008746:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008748:	1ac0      	subs	r0, r0, r3
 800874a:	2300      	movs	r3, #0
 800874c:	4602      	mov	r2, r0
 800874e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008750:	6a21      	ldr	r1, [r4, #32]
 8008752:	4628      	mov	r0, r5
 8008754:	47b0      	blx	r6
 8008756:	1c43      	adds	r3, r0, #1
 8008758:	89a3      	ldrh	r3, [r4, #12]
 800875a:	d106      	bne.n	800876a <__sflush_r+0x66>
 800875c:	6829      	ldr	r1, [r5, #0]
 800875e:	291d      	cmp	r1, #29
 8008760:	d82c      	bhi.n	80087bc <__sflush_r+0xb8>
 8008762:	4a2a      	ldr	r2, [pc, #168]	; (800880c <__sflush_r+0x108>)
 8008764:	40ca      	lsrs	r2, r1
 8008766:	07d6      	lsls	r6, r2, #31
 8008768:	d528      	bpl.n	80087bc <__sflush_r+0xb8>
 800876a:	2200      	movs	r2, #0
 800876c:	6062      	str	r2, [r4, #4]
 800876e:	04d9      	lsls	r1, r3, #19
 8008770:	6922      	ldr	r2, [r4, #16]
 8008772:	6022      	str	r2, [r4, #0]
 8008774:	d504      	bpl.n	8008780 <__sflush_r+0x7c>
 8008776:	1c42      	adds	r2, r0, #1
 8008778:	d101      	bne.n	800877e <__sflush_r+0x7a>
 800877a:	682b      	ldr	r3, [r5, #0]
 800877c:	b903      	cbnz	r3, 8008780 <__sflush_r+0x7c>
 800877e:	6560      	str	r0, [r4, #84]	; 0x54
 8008780:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008782:	602f      	str	r7, [r5, #0]
 8008784:	2900      	cmp	r1, #0
 8008786:	d0ca      	beq.n	800871e <__sflush_r+0x1a>
 8008788:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800878c:	4299      	cmp	r1, r3
 800878e:	d002      	beq.n	8008796 <__sflush_r+0x92>
 8008790:	4628      	mov	r0, r5
 8008792:	f001 fa49 	bl	8009c28 <_free_r>
 8008796:	2000      	movs	r0, #0
 8008798:	6360      	str	r0, [r4, #52]	; 0x34
 800879a:	e7c1      	b.n	8008720 <__sflush_r+0x1c>
 800879c:	6a21      	ldr	r1, [r4, #32]
 800879e:	2301      	movs	r3, #1
 80087a0:	4628      	mov	r0, r5
 80087a2:	47b0      	blx	r6
 80087a4:	1c41      	adds	r1, r0, #1
 80087a6:	d1c7      	bne.n	8008738 <__sflush_r+0x34>
 80087a8:	682b      	ldr	r3, [r5, #0]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d0c4      	beq.n	8008738 <__sflush_r+0x34>
 80087ae:	2b1d      	cmp	r3, #29
 80087b0:	d001      	beq.n	80087b6 <__sflush_r+0xb2>
 80087b2:	2b16      	cmp	r3, #22
 80087b4:	d101      	bne.n	80087ba <__sflush_r+0xb6>
 80087b6:	602f      	str	r7, [r5, #0]
 80087b8:	e7b1      	b.n	800871e <__sflush_r+0x1a>
 80087ba:	89a3      	ldrh	r3, [r4, #12]
 80087bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80087c0:	81a3      	strh	r3, [r4, #12]
 80087c2:	e7ad      	b.n	8008720 <__sflush_r+0x1c>
 80087c4:	690f      	ldr	r7, [r1, #16]
 80087c6:	2f00      	cmp	r7, #0
 80087c8:	d0a9      	beq.n	800871e <__sflush_r+0x1a>
 80087ca:	0793      	lsls	r3, r2, #30
 80087cc:	680e      	ldr	r6, [r1, #0]
 80087ce:	bf08      	it	eq
 80087d0:	694b      	ldreq	r3, [r1, #20]
 80087d2:	600f      	str	r7, [r1, #0]
 80087d4:	bf18      	it	ne
 80087d6:	2300      	movne	r3, #0
 80087d8:	eba6 0807 	sub.w	r8, r6, r7
 80087dc:	608b      	str	r3, [r1, #8]
 80087de:	f1b8 0f00 	cmp.w	r8, #0
 80087e2:	dd9c      	ble.n	800871e <__sflush_r+0x1a>
 80087e4:	6a21      	ldr	r1, [r4, #32]
 80087e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80087e8:	4643      	mov	r3, r8
 80087ea:	463a      	mov	r2, r7
 80087ec:	4628      	mov	r0, r5
 80087ee:	47b0      	blx	r6
 80087f0:	2800      	cmp	r0, #0
 80087f2:	dc06      	bgt.n	8008802 <__sflush_r+0xfe>
 80087f4:	89a3      	ldrh	r3, [r4, #12]
 80087f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80087fa:	81a3      	strh	r3, [r4, #12]
 80087fc:	f04f 30ff 	mov.w	r0, #4294967295
 8008800:	e78e      	b.n	8008720 <__sflush_r+0x1c>
 8008802:	4407      	add	r7, r0
 8008804:	eba8 0800 	sub.w	r8, r8, r0
 8008808:	e7e9      	b.n	80087de <__sflush_r+0xda>
 800880a:	bf00      	nop
 800880c:	20400001 	.word	0x20400001

08008810 <_fflush_r>:
 8008810:	b538      	push	{r3, r4, r5, lr}
 8008812:	690b      	ldr	r3, [r1, #16]
 8008814:	4605      	mov	r5, r0
 8008816:	460c      	mov	r4, r1
 8008818:	b913      	cbnz	r3, 8008820 <_fflush_r+0x10>
 800881a:	2500      	movs	r5, #0
 800881c:	4628      	mov	r0, r5
 800881e:	bd38      	pop	{r3, r4, r5, pc}
 8008820:	b118      	cbz	r0, 800882a <_fflush_r+0x1a>
 8008822:	6983      	ldr	r3, [r0, #24]
 8008824:	b90b      	cbnz	r3, 800882a <_fflush_r+0x1a>
 8008826:	f000 f887 	bl	8008938 <__sinit>
 800882a:	4b14      	ldr	r3, [pc, #80]	; (800887c <_fflush_r+0x6c>)
 800882c:	429c      	cmp	r4, r3
 800882e:	d11b      	bne.n	8008868 <_fflush_r+0x58>
 8008830:	686c      	ldr	r4, [r5, #4]
 8008832:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d0ef      	beq.n	800881a <_fflush_r+0xa>
 800883a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800883c:	07d0      	lsls	r0, r2, #31
 800883e:	d404      	bmi.n	800884a <_fflush_r+0x3a>
 8008840:	0599      	lsls	r1, r3, #22
 8008842:	d402      	bmi.n	800884a <_fflush_r+0x3a>
 8008844:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008846:	f000 fc88 	bl	800915a <__retarget_lock_acquire_recursive>
 800884a:	4628      	mov	r0, r5
 800884c:	4621      	mov	r1, r4
 800884e:	f7ff ff59 	bl	8008704 <__sflush_r>
 8008852:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008854:	07da      	lsls	r2, r3, #31
 8008856:	4605      	mov	r5, r0
 8008858:	d4e0      	bmi.n	800881c <_fflush_r+0xc>
 800885a:	89a3      	ldrh	r3, [r4, #12]
 800885c:	059b      	lsls	r3, r3, #22
 800885e:	d4dd      	bmi.n	800881c <_fflush_r+0xc>
 8008860:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008862:	f000 fc7b 	bl	800915c <__retarget_lock_release_recursive>
 8008866:	e7d9      	b.n	800881c <_fflush_r+0xc>
 8008868:	4b05      	ldr	r3, [pc, #20]	; (8008880 <_fflush_r+0x70>)
 800886a:	429c      	cmp	r4, r3
 800886c:	d101      	bne.n	8008872 <_fflush_r+0x62>
 800886e:	68ac      	ldr	r4, [r5, #8]
 8008870:	e7df      	b.n	8008832 <_fflush_r+0x22>
 8008872:	4b04      	ldr	r3, [pc, #16]	; (8008884 <_fflush_r+0x74>)
 8008874:	429c      	cmp	r4, r3
 8008876:	bf08      	it	eq
 8008878:	68ec      	ldreq	r4, [r5, #12]
 800887a:	e7da      	b.n	8008832 <_fflush_r+0x22>
 800887c:	0800a96c 	.word	0x0800a96c
 8008880:	0800a98c 	.word	0x0800a98c
 8008884:	0800a94c 	.word	0x0800a94c

08008888 <std>:
 8008888:	2300      	movs	r3, #0
 800888a:	b510      	push	{r4, lr}
 800888c:	4604      	mov	r4, r0
 800888e:	e9c0 3300 	strd	r3, r3, [r0]
 8008892:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008896:	6083      	str	r3, [r0, #8]
 8008898:	8181      	strh	r1, [r0, #12]
 800889a:	6643      	str	r3, [r0, #100]	; 0x64
 800889c:	81c2      	strh	r2, [r0, #14]
 800889e:	6183      	str	r3, [r0, #24]
 80088a0:	4619      	mov	r1, r3
 80088a2:	2208      	movs	r2, #8
 80088a4:	305c      	adds	r0, #92	; 0x5c
 80088a6:	f7fd fa0f 	bl	8005cc8 <memset>
 80088aa:	4b05      	ldr	r3, [pc, #20]	; (80088c0 <std+0x38>)
 80088ac:	6263      	str	r3, [r4, #36]	; 0x24
 80088ae:	4b05      	ldr	r3, [pc, #20]	; (80088c4 <std+0x3c>)
 80088b0:	62a3      	str	r3, [r4, #40]	; 0x28
 80088b2:	4b05      	ldr	r3, [pc, #20]	; (80088c8 <std+0x40>)
 80088b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80088b6:	4b05      	ldr	r3, [pc, #20]	; (80088cc <std+0x44>)
 80088b8:	6224      	str	r4, [r4, #32]
 80088ba:	6323      	str	r3, [r4, #48]	; 0x30
 80088bc:	bd10      	pop	{r4, pc}
 80088be:	bf00      	nop
 80088c0:	0800a389 	.word	0x0800a389
 80088c4:	0800a3ab 	.word	0x0800a3ab
 80088c8:	0800a3e3 	.word	0x0800a3e3
 80088cc:	0800a407 	.word	0x0800a407

080088d0 <_cleanup_r>:
 80088d0:	4901      	ldr	r1, [pc, #4]	; (80088d8 <_cleanup_r+0x8>)
 80088d2:	f000 b8af 	b.w	8008a34 <_fwalk_reent>
 80088d6:	bf00      	nop
 80088d8:	08008811 	.word	0x08008811

080088dc <__sfmoreglue>:
 80088dc:	b570      	push	{r4, r5, r6, lr}
 80088de:	2268      	movs	r2, #104	; 0x68
 80088e0:	1e4d      	subs	r5, r1, #1
 80088e2:	4355      	muls	r5, r2
 80088e4:	460e      	mov	r6, r1
 80088e6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80088ea:	f001 fa09 	bl	8009d00 <_malloc_r>
 80088ee:	4604      	mov	r4, r0
 80088f0:	b140      	cbz	r0, 8008904 <__sfmoreglue+0x28>
 80088f2:	2100      	movs	r1, #0
 80088f4:	e9c0 1600 	strd	r1, r6, [r0]
 80088f8:	300c      	adds	r0, #12
 80088fa:	60a0      	str	r0, [r4, #8]
 80088fc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008900:	f7fd f9e2 	bl	8005cc8 <memset>
 8008904:	4620      	mov	r0, r4
 8008906:	bd70      	pop	{r4, r5, r6, pc}

08008908 <__sfp_lock_acquire>:
 8008908:	4801      	ldr	r0, [pc, #4]	; (8008910 <__sfp_lock_acquire+0x8>)
 800890a:	f000 bc26 	b.w	800915a <__retarget_lock_acquire_recursive>
 800890e:	bf00      	nop
 8008910:	20000461 	.word	0x20000461

08008914 <__sfp_lock_release>:
 8008914:	4801      	ldr	r0, [pc, #4]	; (800891c <__sfp_lock_release+0x8>)
 8008916:	f000 bc21 	b.w	800915c <__retarget_lock_release_recursive>
 800891a:	bf00      	nop
 800891c:	20000461 	.word	0x20000461

08008920 <__sinit_lock_acquire>:
 8008920:	4801      	ldr	r0, [pc, #4]	; (8008928 <__sinit_lock_acquire+0x8>)
 8008922:	f000 bc1a 	b.w	800915a <__retarget_lock_acquire_recursive>
 8008926:	bf00      	nop
 8008928:	20000462 	.word	0x20000462

0800892c <__sinit_lock_release>:
 800892c:	4801      	ldr	r0, [pc, #4]	; (8008934 <__sinit_lock_release+0x8>)
 800892e:	f000 bc15 	b.w	800915c <__retarget_lock_release_recursive>
 8008932:	bf00      	nop
 8008934:	20000462 	.word	0x20000462

08008938 <__sinit>:
 8008938:	b510      	push	{r4, lr}
 800893a:	4604      	mov	r4, r0
 800893c:	f7ff fff0 	bl	8008920 <__sinit_lock_acquire>
 8008940:	69a3      	ldr	r3, [r4, #24]
 8008942:	b11b      	cbz	r3, 800894c <__sinit+0x14>
 8008944:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008948:	f7ff bff0 	b.w	800892c <__sinit_lock_release>
 800894c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008950:	6523      	str	r3, [r4, #80]	; 0x50
 8008952:	4b13      	ldr	r3, [pc, #76]	; (80089a0 <__sinit+0x68>)
 8008954:	4a13      	ldr	r2, [pc, #76]	; (80089a4 <__sinit+0x6c>)
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	62a2      	str	r2, [r4, #40]	; 0x28
 800895a:	42a3      	cmp	r3, r4
 800895c:	bf04      	itt	eq
 800895e:	2301      	moveq	r3, #1
 8008960:	61a3      	streq	r3, [r4, #24]
 8008962:	4620      	mov	r0, r4
 8008964:	f000 f820 	bl	80089a8 <__sfp>
 8008968:	6060      	str	r0, [r4, #4]
 800896a:	4620      	mov	r0, r4
 800896c:	f000 f81c 	bl	80089a8 <__sfp>
 8008970:	60a0      	str	r0, [r4, #8]
 8008972:	4620      	mov	r0, r4
 8008974:	f000 f818 	bl	80089a8 <__sfp>
 8008978:	2200      	movs	r2, #0
 800897a:	60e0      	str	r0, [r4, #12]
 800897c:	2104      	movs	r1, #4
 800897e:	6860      	ldr	r0, [r4, #4]
 8008980:	f7ff ff82 	bl	8008888 <std>
 8008984:	68a0      	ldr	r0, [r4, #8]
 8008986:	2201      	movs	r2, #1
 8008988:	2109      	movs	r1, #9
 800898a:	f7ff ff7d 	bl	8008888 <std>
 800898e:	68e0      	ldr	r0, [r4, #12]
 8008990:	2202      	movs	r2, #2
 8008992:	2112      	movs	r1, #18
 8008994:	f7ff ff78 	bl	8008888 <std>
 8008998:	2301      	movs	r3, #1
 800899a:	61a3      	str	r3, [r4, #24]
 800899c:	e7d2      	b.n	8008944 <__sinit+0xc>
 800899e:	bf00      	nop
 80089a0:	0800a724 	.word	0x0800a724
 80089a4:	080088d1 	.word	0x080088d1

080089a8 <__sfp>:
 80089a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089aa:	4607      	mov	r7, r0
 80089ac:	f7ff ffac 	bl	8008908 <__sfp_lock_acquire>
 80089b0:	4b1e      	ldr	r3, [pc, #120]	; (8008a2c <__sfp+0x84>)
 80089b2:	681e      	ldr	r6, [r3, #0]
 80089b4:	69b3      	ldr	r3, [r6, #24]
 80089b6:	b913      	cbnz	r3, 80089be <__sfp+0x16>
 80089b8:	4630      	mov	r0, r6
 80089ba:	f7ff ffbd 	bl	8008938 <__sinit>
 80089be:	3648      	adds	r6, #72	; 0x48
 80089c0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80089c4:	3b01      	subs	r3, #1
 80089c6:	d503      	bpl.n	80089d0 <__sfp+0x28>
 80089c8:	6833      	ldr	r3, [r6, #0]
 80089ca:	b30b      	cbz	r3, 8008a10 <__sfp+0x68>
 80089cc:	6836      	ldr	r6, [r6, #0]
 80089ce:	e7f7      	b.n	80089c0 <__sfp+0x18>
 80089d0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80089d4:	b9d5      	cbnz	r5, 8008a0c <__sfp+0x64>
 80089d6:	4b16      	ldr	r3, [pc, #88]	; (8008a30 <__sfp+0x88>)
 80089d8:	60e3      	str	r3, [r4, #12]
 80089da:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80089de:	6665      	str	r5, [r4, #100]	; 0x64
 80089e0:	f000 fbba 	bl	8009158 <__retarget_lock_init_recursive>
 80089e4:	f7ff ff96 	bl	8008914 <__sfp_lock_release>
 80089e8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80089ec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80089f0:	6025      	str	r5, [r4, #0]
 80089f2:	61a5      	str	r5, [r4, #24]
 80089f4:	2208      	movs	r2, #8
 80089f6:	4629      	mov	r1, r5
 80089f8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80089fc:	f7fd f964 	bl	8005cc8 <memset>
 8008a00:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008a04:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008a08:	4620      	mov	r0, r4
 8008a0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a0c:	3468      	adds	r4, #104	; 0x68
 8008a0e:	e7d9      	b.n	80089c4 <__sfp+0x1c>
 8008a10:	2104      	movs	r1, #4
 8008a12:	4638      	mov	r0, r7
 8008a14:	f7ff ff62 	bl	80088dc <__sfmoreglue>
 8008a18:	4604      	mov	r4, r0
 8008a1a:	6030      	str	r0, [r6, #0]
 8008a1c:	2800      	cmp	r0, #0
 8008a1e:	d1d5      	bne.n	80089cc <__sfp+0x24>
 8008a20:	f7ff ff78 	bl	8008914 <__sfp_lock_release>
 8008a24:	230c      	movs	r3, #12
 8008a26:	603b      	str	r3, [r7, #0]
 8008a28:	e7ee      	b.n	8008a08 <__sfp+0x60>
 8008a2a:	bf00      	nop
 8008a2c:	0800a724 	.word	0x0800a724
 8008a30:	ffff0001 	.word	0xffff0001

08008a34 <_fwalk_reent>:
 8008a34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a38:	4606      	mov	r6, r0
 8008a3a:	4688      	mov	r8, r1
 8008a3c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008a40:	2700      	movs	r7, #0
 8008a42:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008a46:	f1b9 0901 	subs.w	r9, r9, #1
 8008a4a:	d505      	bpl.n	8008a58 <_fwalk_reent+0x24>
 8008a4c:	6824      	ldr	r4, [r4, #0]
 8008a4e:	2c00      	cmp	r4, #0
 8008a50:	d1f7      	bne.n	8008a42 <_fwalk_reent+0xe>
 8008a52:	4638      	mov	r0, r7
 8008a54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a58:	89ab      	ldrh	r3, [r5, #12]
 8008a5a:	2b01      	cmp	r3, #1
 8008a5c:	d907      	bls.n	8008a6e <_fwalk_reent+0x3a>
 8008a5e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008a62:	3301      	adds	r3, #1
 8008a64:	d003      	beq.n	8008a6e <_fwalk_reent+0x3a>
 8008a66:	4629      	mov	r1, r5
 8008a68:	4630      	mov	r0, r6
 8008a6a:	47c0      	blx	r8
 8008a6c:	4307      	orrs	r7, r0
 8008a6e:	3568      	adds	r5, #104	; 0x68
 8008a70:	e7e9      	b.n	8008a46 <_fwalk_reent+0x12>

08008a72 <rshift>:
 8008a72:	6903      	ldr	r3, [r0, #16]
 8008a74:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008a78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008a7c:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008a80:	f100 0414 	add.w	r4, r0, #20
 8008a84:	dd45      	ble.n	8008b12 <rshift+0xa0>
 8008a86:	f011 011f 	ands.w	r1, r1, #31
 8008a8a:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008a8e:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008a92:	d10c      	bne.n	8008aae <rshift+0x3c>
 8008a94:	f100 0710 	add.w	r7, r0, #16
 8008a98:	4629      	mov	r1, r5
 8008a9a:	42b1      	cmp	r1, r6
 8008a9c:	d334      	bcc.n	8008b08 <rshift+0x96>
 8008a9e:	1a9b      	subs	r3, r3, r2
 8008aa0:	009b      	lsls	r3, r3, #2
 8008aa2:	1eea      	subs	r2, r5, #3
 8008aa4:	4296      	cmp	r6, r2
 8008aa6:	bf38      	it	cc
 8008aa8:	2300      	movcc	r3, #0
 8008aaa:	4423      	add	r3, r4
 8008aac:	e015      	b.n	8008ada <rshift+0x68>
 8008aae:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008ab2:	f1c1 0820 	rsb	r8, r1, #32
 8008ab6:	40cf      	lsrs	r7, r1
 8008ab8:	f105 0e04 	add.w	lr, r5, #4
 8008abc:	46a1      	mov	r9, r4
 8008abe:	4576      	cmp	r6, lr
 8008ac0:	46f4      	mov	ip, lr
 8008ac2:	d815      	bhi.n	8008af0 <rshift+0x7e>
 8008ac4:	1a9a      	subs	r2, r3, r2
 8008ac6:	0092      	lsls	r2, r2, #2
 8008ac8:	3a04      	subs	r2, #4
 8008aca:	3501      	adds	r5, #1
 8008acc:	42ae      	cmp	r6, r5
 8008ace:	bf38      	it	cc
 8008ad0:	2200      	movcc	r2, #0
 8008ad2:	18a3      	adds	r3, r4, r2
 8008ad4:	50a7      	str	r7, [r4, r2]
 8008ad6:	b107      	cbz	r7, 8008ada <rshift+0x68>
 8008ad8:	3304      	adds	r3, #4
 8008ada:	1b1a      	subs	r2, r3, r4
 8008adc:	42a3      	cmp	r3, r4
 8008ade:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008ae2:	bf08      	it	eq
 8008ae4:	2300      	moveq	r3, #0
 8008ae6:	6102      	str	r2, [r0, #16]
 8008ae8:	bf08      	it	eq
 8008aea:	6143      	streq	r3, [r0, #20]
 8008aec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008af0:	f8dc c000 	ldr.w	ip, [ip]
 8008af4:	fa0c fc08 	lsl.w	ip, ip, r8
 8008af8:	ea4c 0707 	orr.w	r7, ip, r7
 8008afc:	f849 7b04 	str.w	r7, [r9], #4
 8008b00:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008b04:	40cf      	lsrs	r7, r1
 8008b06:	e7da      	b.n	8008abe <rshift+0x4c>
 8008b08:	f851 cb04 	ldr.w	ip, [r1], #4
 8008b0c:	f847 cf04 	str.w	ip, [r7, #4]!
 8008b10:	e7c3      	b.n	8008a9a <rshift+0x28>
 8008b12:	4623      	mov	r3, r4
 8008b14:	e7e1      	b.n	8008ada <rshift+0x68>

08008b16 <__hexdig_fun>:
 8008b16:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008b1a:	2b09      	cmp	r3, #9
 8008b1c:	d802      	bhi.n	8008b24 <__hexdig_fun+0xe>
 8008b1e:	3820      	subs	r0, #32
 8008b20:	b2c0      	uxtb	r0, r0
 8008b22:	4770      	bx	lr
 8008b24:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008b28:	2b05      	cmp	r3, #5
 8008b2a:	d801      	bhi.n	8008b30 <__hexdig_fun+0x1a>
 8008b2c:	3847      	subs	r0, #71	; 0x47
 8008b2e:	e7f7      	b.n	8008b20 <__hexdig_fun+0xa>
 8008b30:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008b34:	2b05      	cmp	r3, #5
 8008b36:	d801      	bhi.n	8008b3c <__hexdig_fun+0x26>
 8008b38:	3827      	subs	r0, #39	; 0x27
 8008b3a:	e7f1      	b.n	8008b20 <__hexdig_fun+0xa>
 8008b3c:	2000      	movs	r0, #0
 8008b3e:	4770      	bx	lr

08008b40 <__gethex>:
 8008b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b44:	ed2d 8b02 	vpush	{d8}
 8008b48:	b089      	sub	sp, #36	; 0x24
 8008b4a:	ee08 0a10 	vmov	s16, r0
 8008b4e:	9304      	str	r3, [sp, #16]
 8008b50:	4bb4      	ldr	r3, [pc, #720]	; (8008e24 <__gethex+0x2e4>)
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	9301      	str	r3, [sp, #4]
 8008b56:	4618      	mov	r0, r3
 8008b58:	468b      	mov	fp, r1
 8008b5a:	4690      	mov	r8, r2
 8008b5c:	f7f7 fb48 	bl	80001f0 <strlen>
 8008b60:	9b01      	ldr	r3, [sp, #4]
 8008b62:	f8db 2000 	ldr.w	r2, [fp]
 8008b66:	4403      	add	r3, r0
 8008b68:	4682      	mov	sl, r0
 8008b6a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008b6e:	9305      	str	r3, [sp, #20]
 8008b70:	1c93      	adds	r3, r2, #2
 8008b72:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008b76:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008b7a:	32fe      	adds	r2, #254	; 0xfe
 8008b7c:	18d1      	adds	r1, r2, r3
 8008b7e:	461f      	mov	r7, r3
 8008b80:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008b84:	9100      	str	r1, [sp, #0]
 8008b86:	2830      	cmp	r0, #48	; 0x30
 8008b88:	d0f8      	beq.n	8008b7c <__gethex+0x3c>
 8008b8a:	f7ff ffc4 	bl	8008b16 <__hexdig_fun>
 8008b8e:	4604      	mov	r4, r0
 8008b90:	2800      	cmp	r0, #0
 8008b92:	d13a      	bne.n	8008c0a <__gethex+0xca>
 8008b94:	9901      	ldr	r1, [sp, #4]
 8008b96:	4652      	mov	r2, sl
 8008b98:	4638      	mov	r0, r7
 8008b9a:	f001 fc38 	bl	800a40e <strncmp>
 8008b9e:	4605      	mov	r5, r0
 8008ba0:	2800      	cmp	r0, #0
 8008ba2:	d168      	bne.n	8008c76 <__gethex+0x136>
 8008ba4:	f817 000a 	ldrb.w	r0, [r7, sl]
 8008ba8:	eb07 060a 	add.w	r6, r7, sl
 8008bac:	f7ff ffb3 	bl	8008b16 <__hexdig_fun>
 8008bb0:	2800      	cmp	r0, #0
 8008bb2:	d062      	beq.n	8008c7a <__gethex+0x13a>
 8008bb4:	4633      	mov	r3, r6
 8008bb6:	7818      	ldrb	r0, [r3, #0]
 8008bb8:	2830      	cmp	r0, #48	; 0x30
 8008bba:	461f      	mov	r7, r3
 8008bbc:	f103 0301 	add.w	r3, r3, #1
 8008bc0:	d0f9      	beq.n	8008bb6 <__gethex+0x76>
 8008bc2:	f7ff ffa8 	bl	8008b16 <__hexdig_fun>
 8008bc6:	2301      	movs	r3, #1
 8008bc8:	fab0 f480 	clz	r4, r0
 8008bcc:	0964      	lsrs	r4, r4, #5
 8008bce:	4635      	mov	r5, r6
 8008bd0:	9300      	str	r3, [sp, #0]
 8008bd2:	463a      	mov	r2, r7
 8008bd4:	4616      	mov	r6, r2
 8008bd6:	3201      	adds	r2, #1
 8008bd8:	7830      	ldrb	r0, [r6, #0]
 8008bda:	f7ff ff9c 	bl	8008b16 <__hexdig_fun>
 8008bde:	2800      	cmp	r0, #0
 8008be0:	d1f8      	bne.n	8008bd4 <__gethex+0x94>
 8008be2:	9901      	ldr	r1, [sp, #4]
 8008be4:	4652      	mov	r2, sl
 8008be6:	4630      	mov	r0, r6
 8008be8:	f001 fc11 	bl	800a40e <strncmp>
 8008bec:	b980      	cbnz	r0, 8008c10 <__gethex+0xd0>
 8008bee:	b94d      	cbnz	r5, 8008c04 <__gethex+0xc4>
 8008bf0:	eb06 050a 	add.w	r5, r6, sl
 8008bf4:	462a      	mov	r2, r5
 8008bf6:	4616      	mov	r6, r2
 8008bf8:	3201      	adds	r2, #1
 8008bfa:	7830      	ldrb	r0, [r6, #0]
 8008bfc:	f7ff ff8b 	bl	8008b16 <__hexdig_fun>
 8008c00:	2800      	cmp	r0, #0
 8008c02:	d1f8      	bne.n	8008bf6 <__gethex+0xb6>
 8008c04:	1bad      	subs	r5, r5, r6
 8008c06:	00ad      	lsls	r5, r5, #2
 8008c08:	e004      	b.n	8008c14 <__gethex+0xd4>
 8008c0a:	2400      	movs	r4, #0
 8008c0c:	4625      	mov	r5, r4
 8008c0e:	e7e0      	b.n	8008bd2 <__gethex+0x92>
 8008c10:	2d00      	cmp	r5, #0
 8008c12:	d1f7      	bne.n	8008c04 <__gethex+0xc4>
 8008c14:	7833      	ldrb	r3, [r6, #0]
 8008c16:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008c1a:	2b50      	cmp	r3, #80	; 0x50
 8008c1c:	d13b      	bne.n	8008c96 <__gethex+0x156>
 8008c1e:	7873      	ldrb	r3, [r6, #1]
 8008c20:	2b2b      	cmp	r3, #43	; 0x2b
 8008c22:	d02c      	beq.n	8008c7e <__gethex+0x13e>
 8008c24:	2b2d      	cmp	r3, #45	; 0x2d
 8008c26:	d02e      	beq.n	8008c86 <__gethex+0x146>
 8008c28:	1c71      	adds	r1, r6, #1
 8008c2a:	f04f 0900 	mov.w	r9, #0
 8008c2e:	7808      	ldrb	r0, [r1, #0]
 8008c30:	f7ff ff71 	bl	8008b16 <__hexdig_fun>
 8008c34:	1e43      	subs	r3, r0, #1
 8008c36:	b2db      	uxtb	r3, r3
 8008c38:	2b18      	cmp	r3, #24
 8008c3a:	d82c      	bhi.n	8008c96 <__gethex+0x156>
 8008c3c:	f1a0 0210 	sub.w	r2, r0, #16
 8008c40:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008c44:	f7ff ff67 	bl	8008b16 <__hexdig_fun>
 8008c48:	1e43      	subs	r3, r0, #1
 8008c4a:	b2db      	uxtb	r3, r3
 8008c4c:	2b18      	cmp	r3, #24
 8008c4e:	d91d      	bls.n	8008c8c <__gethex+0x14c>
 8008c50:	f1b9 0f00 	cmp.w	r9, #0
 8008c54:	d000      	beq.n	8008c58 <__gethex+0x118>
 8008c56:	4252      	negs	r2, r2
 8008c58:	4415      	add	r5, r2
 8008c5a:	f8cb 1000 	str.w	r1, [fp]
 8008c5e:	b1e4      	cbz	r4, 8008c9a <__gethex+0x15a>
 8008c60:	9b00      	ldr	r3, [sp, #0]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	bf14      	ite	ne
 8008c66:	2700      	movne	r7, #0
 8008c68:	2706      	moveq	r7, #6
 8008c6a:	4638      	mov	r0, r7
 8008c6c:	b009      	add	sp, #36	; 0x24
 8008c6e:	ecbd 8b02 	vpop	{d8}
 8008c72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c76:	463e      	mov	r6, r7
 8008c78:	4625      	mov	r5, r4
 8008c7a:	2401      	movs	r4, #1
 8008c7c:	e7ca      	b.n	8008c14 <__gethex+0xd4>
 8008c7e:	f04f 0900 	mov.w	r9, #0
 8008c82:	1cb1      	adds	r1, r6, #2
 8008c84:	e7d3      	b.n	8008c2e <__gethex+0xee>
 8008c86:	f04f 0901 	mov.w	r9, #1
 8008c8a:	e7fa      	b.n	8008c82 <__gethex+0x142>
 8008c8c:	230a      	movs	r3, #10
 8008c8e:	fb03 0202 	mla	r2, r3, r2, r0
 8008c92:	3a10      	subs	r2, #16
 8008c94:	e7d4      	b.n	8008c40 <__gethex+0x100>
 8008c96:	4631      	mov	r1, r6
 8008c98:	e7df      	b.n	8008c5a <__gethex+0x11a>
 8008c9a:	1bf3      	subs	r3, r6, r7
 8008c9c:	3b01      	subs	r3, #1
 8008c9e:	4621      	mov	r1, r4
 8008ca0:	2b07      	cmp	r3, #7
 8008ca2:	dc0b      	bgt.n	8008cbc <__gethex+0x17c>
 8008ca4:	ee18 0a10 	vmov	r0, s16
 8008ca8:	f000 fae6 	bl	8009278 <_Balloc>
 8008cac:	4604      	mov	r4, r0
 8008cae:	b940      	cbnz	r0, 8008cc2 <__gethex+0x182>
 8008cb0:	4b5d      	ldr	r3, [pc, #372]	; (8008e28 <__gethex+0x2e8>)
 8008cb2:	4602      	mov	r2, r0
 8008cb4:	21de      	movs	r1, #222	; 0xde
 8008cb6:	485d      	ldr	r0, [pc, #372]	; (8008e2c <__gethex+0x2ec>)
 8008cb8:	f001 fbdc 	bl	800a474 <__assert_func>
 8008cbc:	3101      	adds	r1, #1
 8008cbe:	105b      	asrs	r3, r3, #1
 8008cc0:	e7ee      	b.n	8008ca0 <__gethex+0x160>
 8008cc2:	f100 0914 	add.w	r9, r0, #20
 8008cc6:	f04f 0b00 	mov.w	fp, #0
 8008cca:	f1ca 0301 	rsb	r3, sl, #1
 8008cce:	f8cd 9008 	str.w	r9, [sp, #8]
 8008cd2:	f8cd b000 	str.w	fp, [sp]
 8008cd6:	9306      	str	r3, [sp, #24]
 8008cd8:	42b7      	cmp	r7, r6
 8008cda:	d340      	bcc.n	8008d5e <__gethex+0x21e>
 8008cdc:	9802      	ldr	r0, [sp, #8]
 8008cde:	9b00      	ldr	r3, [sp, #0]
 8008ce0:	f840 3b04 	str.w	r3, [r0], #4
 8008ce4:	eba0 0009 	sub.w	r0, r0, r9
 8008ce8:	1080      	asrs	r0, r0, #2
 8008cea:	0146      	lsls	r6, r0, #5
 8008cec:	6120      	str	r0, [r4, #16]
 8008cee:	4618      	mov	r0, r3
 8008cf0:	f000 fbb4 	bl	800945c <__hi0bits>
 8008cf4:	1a30      	subs	r0, r6, r0
 8008cf6:	f8d8 6000 	ldr.w	r6, [r8]
 8008cfa:	42b0      	cmp	r0, r6
 8008cfc:	dd63      	ble.n	8008dc6 <__gethex+0x286>
 8008cfe:	1b87      	subs	r7, r0, r6
 8008d00:	4639      	mov	r1, r7
 8008d02:	4620      	mov	r0, r4
 8008d04:	f000 ff58 	bl	8009bb8 <__any_on>
 8008d08:	4682      	mov	sl, r0
 8008d0a:	b1a8      	cbz	r0, 8008d38 <__gethex+0x1f8>
 8008d0c:	1e7b      	subs	r3, r7, #1
 8008d0e:	1159      	asrs	r1, r3, #5
 8008d10:	f003 021f 	and.w	r2, r3, #31
 8008d14:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008d18:	f04f 0a01 	mov.w	sl, #1
 8008d1c:	fa0a f202 	lsl.w	r2, sl, r2
 8008d20:	420a      	tst	r2, r1
 8008d22:	d009      	beq.n	8008d38 <__gethex+0x1f8>
 8008d24:	4553      	cmp	r3, sl
 8008d26:	dd05      	ble.n	8008d34 <__gethex+0x1f4>
 8008d28:	1eb9      	subs	r1, r7, #2
 8008d2a:	4620      	mov	r0, r4
 8008d2c:	f000 ff44 	bl	8009bb8 <__any_on>
 8008d30:	2800      	cmp	r0, #0
 8008d32:	d145      	bne.n	8008dc0 <__gethex+0x280>
 8008d34:	f04f 0a02 	mov.w	sl, #2
 8008d38:	4639      	mov	r1, r7
 8008d3a:	4620      	mov	r0, r4
 8008d3c:	f7ff fe99 	bl	8008a72 <rshift>
 8008d40:	443d      	add	r5, r7
 8008d42:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008d46:	42ab      	cmp	r3, r5
 8008d48:	da4c      	bge.n	8008de4 <__gethex+0x2a4>
 8008d4a:	ee18 0a10 	vmov	r0, s16
 8008d4e:	4621      	mov	r1, r4
 8008d50:	f000 fad2 	bl	80092f8 <_Bfree>
 8008d54:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008d56:	2300      	movs	r3, #0
 8008d58:	6013      	str	r3, [r2, #0]
 8008d5a:	27a3      	movs	r7, #163	; 0xa3
 8008d5c:	e785      	b.n	8008c6a <__gethex+0x12a>
 8008d5e:	1e73      	subs	r3, r6, #1
 8008d60:	9a05      	ldr	r2, [sp, #20]
 8008d62:	9303      	str	r3, [sp, #12]
 8008d64:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008d68:	4293      	cmp	r3, r2
 8008d6a:	d019      	beq.n	8008da0 <__gethex+0x260>
 8008d6c:	f1bb 0f20 	cmp.w	fp, #32
 8008d70:	d107      	bne.n	8008d82 <__gethex+0x242>
 8008d72:	9b02      	ldr	r3, [sp, #8]
 8008d74:	9a00      	ldr	r2, [sp, #0]
 8008d76:	f843 2b04 	str.w	r2, [r3], #4
 8008d7a:	9302      	str	r3, [sp, #8]
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	9300      	str	r3, [sp, #0]
 8008d80:	469b      	mov	fp, r3
 8008d82:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008d86:	f7ff fec6 	bl	8008b16 <__hexdig_fun>
 8008d8a:	9b00      	ldr	r3, [sp, #0]
 8008d8c:	f000 000f 	and.w	r0, r0, #15
 8008d90:	fa00 f00b 	lsl.w	r0, r0, fp
 8008d94:	4303      	orrs	r3, r0
 8008d96:	9300      	str	r3, [sp, #0]
 8008d98:	f10b 0b04 	add.w	fp, fp, #4
 8008d9c:	9b03      	ldr	r3, [sp, #12]
 8008d9e:	e00d      	b.n	8008dbc <__gethex+0x27c>
 8008da0:	9b03      	ldr	r3, [sp, #12]
 8008da2:	9a06      	ldr	r2, [sp, #24]
 8008da4:	4413      	add	r3, r2
 8008da6:	42bb      	cmp	r3, r7
 8008da8:	d3e0      	bcc.n	8008d6c <__gethex+0x22c>
 8008daa:	4618      	mov	r0, r3
 8008dac:	9901      	ldr	r1, [sp, #4]
 8008dae:	9307      	str	r3, [sp, #28]
 8008db0:	4652      	mov	r2, sl
 8008db2:	f001 fb2c 	bl	800a40e <strncmp>
 8008db6:	9b07      	ldr	r3, [sp, #28]
 8008db8:	2800      	cmp	r0, #0
 8008dba:	d1d7      	bne.n	8008d6c <__gethex+0x22c>
 8008dbc:	461e      	mov	r6, r3
 8008dbe:	e78b      	b.n	8008cd8 <__gethex+0x198>
 8008dc0:	f04f 0a03 	mov.w	sl, #3
 8008dc4:	e7b8      	b.n	8008d38 <__gethex+0x1f8>
 8008dc6:	da0a      	bge.n	8008dde <__gethex+0x29e>
 8008dc8:	1a37      	subs	r7, r6, r0
 8008dca:	4621      	mov	r1, r4
 8008dcc:	ee18 0a10 	vmov	r0, s16
 8008dd0:	463a      	mov	r2, r7
 8008dd2:	f000 fcad 	bl	8009730 <__lshift>
 8008dd6:	1bed      	subs	r5, r5, r7
 8008dd8:	4604      	mov	r4, r0
 8008dda:	f100 0914 	add.w	r9, r0, #20
 8008dde:	f04f 0a00 	mov.w	sl, #0
 8008de2:	e7ae      	b.n	8008d42 <__gethex+0x202>
 8008de4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008de8:	42a8      	cmp	r0, r5
 8008dea:	dd72      	ble.n	8008ed2 <__gethex+0x392>
 8008dec:	1b45      	subs	r5, r0, r5
 8008dee:	42ae      	cmp	r6, r5
 8008df0:	dc36      	bgt.n	8008e60 <__gethex+0x320>
 8008df2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008df6:	2b02      	cmp	r3, #2
 8008df8:	d02a      	beq.n	8008e50 <__gethex+0x310>
 8008dfa:	2b03      	cmp	r3, #3
 8008dfc:	d02c      	beq.n	8008e58 <__gethex+0x318>
 8008dfe:	2b01      	cmp	r3, #1
 8008e00:	d11c      	bne.n	8008e3c <__gethex+0x2fc>
 8008e02:	42ae      	cmp	r6, r5
 8008e04:	d11a      	bne.n	8008e3c <__gethex+0x2fc>
 8008e06:	2e01      	cmp	r6, #1
 8008e08:	d112      	bne.n	8008e30 <__gethex+0x2f0>
 8008e0a:	9a04      	ldr	r2, [sp, #16]
 8008e0c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008e10:	6013      	str	r3, [r2, #0]
 8008e12:	2301      	movs	r3, #1
 8008e14:	6123      	str	r3, [r4, #16]
 8008e16:	f8c9 3000 	str.w	r3, [r9]
 8008e1a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008e1c:	2762      	movs	r7, #98	; 0x62
 8008e1e:	601c      	str	r4, [r3, #0]
 8008e20:	e723      	b.n	8008c6a <__gethex+0x12a>
 8008e22:	bf00      	nop
 8008e24:	0800aa14 	.word	0x0800aa14
 8008e28:	0800a938 	.word	0x0800a938
 8008e2c:	0800a9ac 	.word	0x0800a9ac
 8008e30:	1e71      	subs	r1, r6, #1
 8008e32:	4620      	mov	r0, r4
 8008e34:	f000 fec0 	bl	8009bb8 <__any_on>
 8008e38:	2800      	cmp	r0, #0
 8008e3a:	d1e6      	bne.n	8008e0a <__gethex+0x2ca>
 8008e3c:	ee18 0a10 	vmov	r0, s16
 8008e40:	4621      	mov	r1, r4
 8008e42:	f000 fa59 	bl	80092f8 <_Bfree>
 8008e46:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008e48:	2300      	movs	r3, #0
 8008e4a:	6013      	str	r3, [r2, #0]
 8008e4c:	2750      	movs	r7, #80	; 0x50
 8008e4e:	e70c      	b.n	8008c6a <__gethex+0x12a>
 8008e50:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d1f2      	bne.n	8008e3c <__gethex+0x2fc>
 8008e56:	e7d8      	b.n	8008e0a <__gethex+0x2ca>
 8008e58:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d1d5      	bne.n	8008e0a <__gethex+0x2ca>
 8008e5e:	e7ed      	b.n	8008e3c <__gethex+0x2fc>
 8008e60:	1e6f      	subs	r7, r5, #1
 8008e62:	f1ba 0f00 	cmp.w	sl, #0
 8008e66:	d131      	bne.n	8008ecc <__gethex+0x38c>
 8008e68:	b127      	cbz	r7, 8008e74 <__gethex+0x334>
 8008e6a:	4639      	mov	r1, r7
 8008e6c:	4620      	mov	r0, r4
 8008e6e:	f000 fea3 	bl	8009bb8 <__any_on>
 8008e72:	4682      	mov	sl, r0
 8008e74:	117b      	asrs	r3, r7, #5
 8008e76:	2101      	movs	r1, #1
 8008e78:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008e7c:	f007 071f 	and.w	r7, r7, #31
 8008e80:	fa01 f707 	lsl.w	r7, r1, r7
 8008e84:	421f      	tst	r7, r3
 8008e86:	4629      	mov	r1, r5
 8008e88:	4620      	mov	r0, r4
 8008e8a:	bf18      	it	ne
 8008e8c:	f04a 0a02 	orrne.w	sl, sl, #2
 8008e90:	1b76      	subs	r6, r6, r5
 8008e92:	f7ff fdee 	bl	8008a72 <rshift>
 8008e96:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008e9a:	2702      	movs	r7, #2
 8008e9c:	f1ba 0f00 	cmp.w	sl, #0
 8008ea0:	d048      	beq.n	8008f34 <__gethex+0x3f4>
 8008ea2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008ea6:	2b02      	cmp	r3, #2
 8008ea8:	d015      	beq.n	8008ed6 <__gethex+0x396>
 8008eaa:	2b03      	cmp	r3, #3
 8008eac:	d017      	beq.n	8008ede <__gethex+0x39e>
 8008eae:	2b01      	cmp	r3, #1
 8008eb0:	d109      	bne.n	8008ec6 <__gethex+0x386>
 8008eb2:	f01a 0f02 	tst.w	sl, #2
 8008eb6:	d006      	beq.n	8008ec6 <__gethex+0x386>
 8008eb8:	f8d9 0000 	ldr.w	r0, [r9]
 8008ebc:	ea4a 0a00 	orr.w	sl, sl, r0
 8008ec0:	f01a 0f01 	tst.w	sl, #1
 8008ec4:	d10e      	bne.n	8008ee4 <__gethex+0x3a4>
 8008ec6:	f047 0710 	orr.w	r7, r7, #16
 8008eca:	e033      	b.n	8008f34 <__gethex+0x3f4>
 8008ecc:	f04f 0a01 	mov.w	sl, #1
 8008ed0:	e7d0      	b.n	8008e74 <__gethex+0x334>
 8008ed2:	2701      	movs	r7, #1
 8008ed4:	e7e2      	b.n	8008e9c <__gethex+0x35c>
 8008ed6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008ed8:	f1c3 0301 	rsb	r3, r3, #1
 8008edc:	9315      	str	r3, [sp, #84]	; 0x54
 8008ede:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d0f0      	beq.n	8008ec6 <__gethex+0x386>
 8008ee4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008ee8:	f104 0314 	add.w	r3, r4, #20
 8008eec:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008ef0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008ef4:	f04f 0c00 	mov.w	ip, #0
 8008ef8:	4618      	mov	r0, r3
 8008efa:	f853 2b04 	ldr.w	r2, [r3], #4
 8008efe:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008f02:	d01c      	beq.n	8008f3e <__gethex+0x3fe>
 8008f04:	3201      	adds	r2, #1
 8008f06:	6002      	str	r2, [r0, #0]
 8008f08:	2f02      	cmp	r7, #2
 8008f0a:	f104 0314 	add.w	r3, r4, #20
 8008f0e:	d13f      	bne.n	8008f90 <__gethex+0x450>
 8008f10:	f8d8 2000 	ldr.w	r2, [r8]
 8008f14:	3a01      	subs	r2, #1
 8008f16:	42b2      	cmp	r2, r6
 8008f18:	d10a      	bne.n	8008f30 <__gethex+0x3f0>
 8008f1a:	1171      	asrs	r1, r6, #5
 8008f1c:	2201      	movs	r2, #1
 8008f1e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008f22:	f006 061f 	and.w	r6, r6, #31
 8008f26:	fa02 f606 	lsl.w	r6, r2, r6
 8008f2a:	421e      	tst	r6, r3
 8008f2c:	bf18      	it	ne
 8008f2e:	4617      	movne	r7, r2
 8008f30:	f047 0720 	orr.w	r7, r7, #32
 8008f34:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008f36:	601c      	str	r4, [r3, #0]
 8008f38:	9b04      	ldr	r3, [sp, #16]
 8008f3a:	601d      	str	r5, [r3, #0]
 8008f3c:	e695      	b.n	8008c6a <__gethex+0x12a>
 8008f3e:	4299      	cmp	r1, r3
 8008f40:	f843 cc04 	str.w	ip, [r3, #-4]
 8008f44:	d8d8      	bhi.n	8008ef8 <__gethex+0x3b8>
 8008f46:	68a3      	ldr	r3, [r4, #8]
 8008f48:	459b      	cmp	fp, r3
 8008f4a:	db19      	blt.n	8008f80 <__gethex+0x440>
 8008f4c:	6861      	ldr	r1, [r4, #4]
 8008f4e:	ee18 0a10 	vmov	r0, s16
 8008f52:	3101      	adds	r1, #1
 8008f54:	f000 f990 	bl	8009278 <_Balloc>
 8008f58:	4681      	mov	r9, r0
 8008f5a:	b918      	cbnz	r0, 8008f64 <__gethex+0x424>
 8008f5c:	4b1a      	ldr	r3, [pc, #104]	; (8008fc8 <__gethex+0x488>)
 8008f5e:	4602      	mov	r2, r0
 8008f60:	2184      	movs	r1, #132	; 0x84
 8008f62:	e6a8      	b.n	8008cb6 <__gethex+0x176>
 8008f64:	6922      	ldr	r2, [r4, #16]
 8008f66:	3202      	adds	r2, #2
 8008f68:	f104 010c 	add.w	r1, r4, #12
 8008f6c:	0092      	lsls	r2, r2, #2
 8008f6e:	300c      	adds	r0, #12
 8008f70:	f000 f974 	bl	800925c <memcpy>
 8008f74:	4621      	mov	r1, r4
 8008f76:	ee18 0a10 	vmov	r0, s16
 8008f7a:	f000 f9bd 	bl	80092f8 <_Bfree>
 8008f7e:	464c      	mov	r4, r9
 8008f80:	6923      	ldr	r3, [r4, #16]
 8008f82:	1c5a      	adds	r2, r3, #1
 8008f84:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008f88:	6122      	str	r2, [r4, #16]
 8008f8a:	2201      	movs	r2, #1
 8008f8c:	615a      	str	r2, [r3, #20]
 8008f8e:	e7bb      	b.n	8008f08 <__gethex+0x3c8>
 8008f90:	6922      	ldr	r2, [r4, #16]
 8008f92:	455a      	cmp	r2, fp
 8008f94:	dd0b      	ble.n	8008fae <__gethex+0x46e>
 8008f96:	2101      	movs	r1, #1
 8008f98:	4620      	mov	r0, r4
 8008f9a:	f7ff fd6a 	bl	8008a72 <rshift>
 8008f9e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008fa2:	3501      	adds	r5, #1
 8008fa4:	42ab      	cmp	r3, r5
 8008fa6:	f6ff aed0 	blt.w	8008d4a <__gethex+0x20a>
 8008faa:	2701      	movs	r7, #1
 8008fac:	e7c0      	b.n	8008f30 <__gethex+0x3f0>
 8008fae:	f016 061f 	ands.w	r6, r6, #31
 8008fb2:	d0fa      	beq.n	8008faa <__gethex+0x46a>
 8008fb4:	4453      	add	r3, sl
 8008fb6:	f1c6 0620 	rsb	r6, r6, #32
 8008fba:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008fbe:	f000 fa4d 	bl	800945c <__hi0bits>
 8008fc2:	42b0      	cmp	r0, r6
 8008fc4:	dbe7      	blt.n	8008f96 <__gethex+0x456>
 8008fc6:	e7f0      	b.n	8008faa <__gethex+0x46a>
 8008fc8:	0800a938 	.word	0x0800a938

08008fcc <L_shift>:
 8008fcc:	f1c2 0208 	rsb	r2, r2, #8
 8008fd0:	0092      	lsls	r2, r2, #2
 8008fd2:	b570      	push	{r4, r5, r6, lr}
 8008fd4:	f1c2 0620 	rsb	r6, r2, #32
 8008fd8:	6843      	ldr	r3, [r0, #4]
 8008fda:	6804      	ldr	r4, [r0, #0]
 8008fdc:	fa03 f506 	lsl.w	r5, r3, r6
 8008fe0:	432c      	orrs	r4, r5
 8008fe2:	40d3      	lsrs	r3, r2
 8008fe4:	6004      	str	r4, [r0, #0]
 8008fe6:	f840 3f04 	str.w	r3, [r0, #4]!
 8008fea:	4288      	cmp	r0, r1
 8008fec:	d3f4      	bcc.n	8008fd8 <L_shift+0xc>
 8008fee:	bd70      	pop	{r4, r5, r6, pc}

08008ff0 <__match>:
 8008ff0:	b530      	push	{r4, r5, lr}
 8008ff2:	6803      	ldr	r3, [r0, #0]
 8008ff4:	3301      	adds	r3, #1
 8008ff6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008ffa:	b914      	cbnz	r4, 8009002 <__match+0x12>
 8008ffc:	6003      	str	r3, [r0, #0]
 8008ffe:	2001      	movs	r0, #1
 8009000:	bd30      	pop	{r4, r5, pc}
 8009002:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009006:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800900a:	2d19      	cmp	r5, #25
 800900c:	bf98      	it	ls
 800900e:	3220      	addls	r2, #32
 8009010:	42a2      	cmp	r2, r4
 8009012:	d0f0      	beq.n	8008ff6 <__match+0x6>
 8009014:	2000      	movs	r0, #0
 8009016:	e7f3      	b.n	8009000 <__match+0x10>

08009018 <__hexnan>:
 8009018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800901c:	680b      	ldr	r3, [r1, #0]
 800901e:	115e      	asrs	r6, r3, #5
 8009020:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009024:	f013 031f 	ands.w	r3, r3, #31
 8009028:	b087      	sub	sp, #28
 800902a:	bf18      	it	ne
 800902c:	3604      	addne	r6, #4
 800902e:	2500      	movs	r5, #0
 8009030:	1f37      	subs	r7, r6, #4
 8009032:	4690      	mov	r8, r2
 8009034:	6802      	ldr	r2, [r0, #0]
 8009036:	9301      	str	r3, [sp, #4]
 8009038:	4682      	mov	sl, r0
 800903a:	f846 5c04 	str.w	r5, [r6, #-4]
 800903e:	46b9      	mov	r9, r7
 8009040:	463c      	mov	r4, r7
 8009042:	9502      	str	r5, [sp, #8]
 8009044:	46ab      	mov	fp, r5
 8009046:	7851      	ldrb	r1, [r2, #1]
 8009048:	1c53      	adds	r3, r2, #1
 800904a:	9303      	str	r3, [sp, #12]
 800904c:	b341      	cbz	r1, 80090a0 <__hexnan+0x88>
 800904e:	4608      	mov	r0, r1
 8009050:	9205      	str	r2, [sp, #20]
 8009052:	9104      	str	r1, [sp, #16]
 8009054:	f7ff fd5f 	bl	8008b16 <__hexdig_fun>
 8009058:	2800      	cmp	r0, #0
 800905a:	d14f      	bne.n	80090fc <__hexnan+0xe4>
 800905c:	9904      	ldr	r1, [sp, #16]
 800905e:	9a05      	ldr	r2, [sp, #20]
 8009060:	2920      	cmp	r1, #32
 8009062:	d818      	bhi.n	8009096 <__hexnan+0x7e>
 8009064:	9b02      	ldr	r3, [sp, #8]
 8009066:	459b      	cmp	fp, r3
 8009068:	dd13      	ble.n	8009092 <__hexnan+0x7a>
 800906a:	454c      	cmp	r4, r9
 800906c:	d206      	bcs.n	800907c <__hexnan+0x64>
 800906e:	2d07      	cmp	r5, #7
 8009070:	dc04      	bgt.n	800907c <__hexnan+0x64>
 8009072:	462a      	mov	r2, r5
 8009074:	4649      	mov	r1, r9
 8009076:	4620      	mov	r0, r4
 8009078:	f7ff ffa8 	bl	8008fcc <L_shift>
 800907c:	4544      	cmp	r4, r8
 800907e:	d950      	bls.n	8009122 <__hexnan+0x10a>
 8009080:	2300      	movs	r3, #0
 8009082:	f1a4 0904 	sub.w	r9, r4, #4
 8009086:	f844 3c04 	str.w	r3, [r4, #-4]
 800908a:	f8cd b008 	str.w	fp, [sp, #8]
 800908e:	464c      	mov	r4, r9
 8009090:	461d      	mov	r5, r3
 8009092:	9a03      	ldr	r2, [sp, #12]
 8009094:	e7d7      	b.n	8009046 <__hexnan+0x2e>
 8009096:	2929      	cmp	r1, #41	; 0x29
 8009098:	d156      	bne.n	8009148 <__hexnan+0x130>
 800909a:	3202      	adds	r2, #2
 800909c:	f8ca 2000 	str.w	r2, [sl]
 80090a0:	f1bb 0f00 	cmp.w	fp, #0
 80090a4:	d050      	beq.n	8009148 <__hexnan+0x130>
 80090a6:	454c      	cmp	r4, r9
 80090a8:	d206      	bcs.n	80090b8 <__hexnan+0xa0>
 80090aa:	2d07      	cmp	r5, #7
 80090ac:	dc04      	bgt.n	80090b8 <__hexnan+0xa0>
 80090ae:	462a      	mov	r2, r5
 80090b0:	4649      	mov	r1, r9
 80090b2:	4620      	mov	r0, r4
 80090b4:	f7ff ff8a 	bl	8008fcc <L_shift>
 80090b8:	4544      	cmp	r4, r8
 80090ba:	d934      	bls.n	8009126 <__hexnan+0x10e>
 80090bc:	f1a8 0204 	sub.w	r2, r8, #4
 80090c0:	4623      	mov	r3, r4
 80090c2:	f853 1b04 	ldr.w	r1, [r3], #4
 80090c6:	f842 1f04 	str.w	r1, [r2, #4]!
 80090ca:	429f      	cmp	r7, r3
 80090cc:	d2f9      	bcs.n	80090c2 <__hexnan+0xaa>
 80090ce:	1b3b      	subs	r3, r7, r4
 80090d0:	f023 0303 	bic.w	r3, r3, #3
 80090d4:	3304      	adds	r3, #4
 80090d6:	3401      	adds	r4, #1
 80090d8:	3e03      	subs	r6, #3
 80090da:	42b4      	cmp	r4, r6
 80090dc:	bf88      	it	hi
 80090de:	2304      	movhi	r3, #4
 80090e0:	4443      	add	r3, r8
 80090e2:	2200      	movs	r2, #0
 80090e4:	f843 2b04 	str.w	r2, [r3], #4
 80090e8:	429f      	cmp	r7, r3
 80090ea:	d2fb      	bcs.n	80090e4 <__hexnan+0xcc>
 80090ec:	683b      	ldr	r3, [r7, #0]
 80090ee:	b91b      	cbnz	r3, 80090f8 <__hexnan+0xe0>
 80090f0:	4547      	cmp	r7, r8
 80090f2:	d127      	bne.n	8009144 <__hexnan+0x12c>
 80090f4:	2301      	movs	r3, #1
 80090f6:	603b      	str	r3, [r7, #0]
 80090f8:	2005      	movs	r0, #5
 80090fa:	e026      	b.n	800914a <__hexnan+0x132>
 80090fc:	3501      	adds	r5, #1
 80090fe:	2d08      	cmp	r5, #8
 8009100:	f10b 0b01 	add.w	fp, fp, #1
 8009104:	dd06      	ble.n	8009114 <__hexnan+0xfc>
 8009106:	4544      	cmp	r4, r8
 8009108:	d9c3      	bls.n	8009092 <__hexnan+0x7a>
 800910a:	2300      	movs	r3, #0
 800910c:	f844 3c04 	str.w	r3, [r4, #-4]
 8009110:	2501      	movs	r5, #1
 8009112:	3c04      	subs	r4, #4
 8009114:	6822      	ldr	r2, [r4, #0]
 8009116:	f000 000f 	and.w	r0, r0, #15
 800911a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800911e:	6022      	str	r2, [r4, #0]
 8009120:	e7b7      	b.n	8009092 <__hexnan+0x7a>
 8009122:	2508      	movs	r5, #8
 8009124:	e7b5      	b.n	8009092 <__hexnan+0x7a>
 8009126:	9b01      	ldr	r3, [sp, #4]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d0df      	beq.n	80090ec <__hexnan+0xd4>
 800912c:	f04f 32ff 	mov.w	r2, #4294967295
 8009130:	f1c3 0320 	rsb	r3, r3, #32
 8009134:	fa22 f303 	lsr.w	r3, r2, r3
 8009138:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800913c:	401a      	ands	r2, r3
 800913e:	f846 2c04 	str.w	r2, [r6, #-4]
 8009142:	e7d3      	b.n	80090ec <__hexnan+0xd4>
 8009144:	3f04      	subs	r7, #4
 8009146:	e7d1      	b.n	80090ec <__hexnan+0xd4>
 8009148:	2004      	movs	r0, #4
 800914a:	b007      	add	sp, #28
 800914c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009150 <_localeconv_r>:
 8009150:	4800      	ldr	r0, [pc, #0]	; (8009154 <_localeconv_r+0x4>)
 8009152:	4770      	bx	lr
 8009154:	20000164 	.word	0x20000164

08009158 <__retarget_lock_init_recursive>:
 8009158:	4770      	bx	lr

0800915a <__retarget_lock_acquire_recursive>:
 800915a:	4770      	bx	lr

0800915c <__retarget_lock_release_recursive>:
 800915c:	4770      	bx	lr

0800915e <__swhatbuf_r>:
 800915e:	b570      	push	{r4, r5, r6, lr}
 8009160:	460e      	mov	r6, r1
 8009162:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009166:	2900      	cmp	r1, #0
 8009168:	b096      	sub	sp, #88	; 0x58
 800916a:	4614      	mov	r4, r2
 800916c:	461d      	mov	r5, r3
 800916e:	da08      	bge.n	8009182 <__swhatbuf_r+0x24>
 8009170:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009174:	2200      	movs	r2, #0
 8009176:	602a      	str	r2, [r5, #0]
 8009178:	061a      	lsls	r2, r3, #24
 800917a:	d410      	bmi.n	800919e <__swhatbuf_r+0x40>
 800917c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009180:	e00e      	b.n	80091a0 <__swhatbuf_r+0x42>
 8009182:	466a      	mov	r2, sp
 8009184:	f001 f9b6 	bl	800a4f4 <_fstat_r>
 8009188:	2800      	cmp	r0, #0
 800918a:	dbf1      	blt.n	8009170 <__swhatbuf_r+0x12>
 800918c:	9a01      	ldr	r2, [sp, #4]
 800918e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009192:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009196:	425a      	negs	r2, r3
 8009198:	415a      	adcs	r2, r3
 800919a:	602a      	str	r2, [r5, #0]
 800919c:	e7ee      	b.n	800917c <__swhatbuf_r+0x1e>
 800919e:	2340      	movs	r3, #64	; 0x40
 80091a0:	2000      	movs	r0, #0
 80091a2:	6023      	str	r3, [r4, #0]
 80091a4:	b016      	add	sp, #88	; 0x58
 80091a6:	bd70      	pop	{r4, r5, r6, pc}

080091a8 <__smakebuf_r>:
 80091a8:	898b      	ldrh	r3, [r1, #12]
 80091aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80091ac:	079d      	lsls	r5, r3, #30
 80091ae:	4606      	mov	r6, r0
 80091b0:	460c      	mov	r4, r1
 80091b2:	d507      	bpl.n	80091c4 <__smakebuf_r+0x1c>
 80091b4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80091b8:	6023      	str	r3, [r4, #0]
 80091ba:	6123      	str	r3, [r4, #16]
 80091bc:	2301      	movs	r3, #1
 80091be:	6163      	str	r3, [r4, #20]
 80091c0:	b002      	add	sp, #8
 80091c2:	bd70      	pop	{r4, r5, r6, pc}
 80091c4:	ab01      	add	r3, sp, #4
 80091c6:	466a      	mov	r2, sp
 80091c8:	f7ff ffc9 	bl	800915e <__swhatbuf_r>
 80091cc:	9900      	ldr	r1, [sp, #0]
 80091ce:	4605      	mov	r5, r0
 80091d0:	4630      	mov	r0, r6
 80091d2:	f000 fd95 	bl	8009d00 <_malloc_r>
 80091d6:	b948      	cbnz	r0, 80091ec <__smakebuf_r+0x44>
 80091d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80091dc:	059a      	lsls	r2, r3, #22
 80091de:	d4ef      	bmi.n	80091c0 <__smakebuf_r+0x18>
 80091e0:	f023 0303 	bic.w	r3, r3, #3
 80091e4:	f043 0302 	orr.w	r3, r3, #2
 80091e8:	81a3      	strh	r3, [r4, #12]
 80091ea:	e7e3      	b.n	80091b4 <__smakebuf_r+0xc>
 80091ec:	4b0d      	ldr	r3, [pc, #52]	; (8009224 <__smakebuf_r+0x7c>)
 80091ee:	62b3      	str	r3, [r6, #40]	; 0x28
 80091f0:	89a3      	ldrh	r3, [r4, #12]
 80091f2:	6020      	str	r0, [r4, #0]
 80091f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091f8:	81a3      	strh	r3, [r4, #12]
 80091fa:	9b00      	ldr	r3, [sp, #0]
 80091fc:	6163      	str	r3, [r4, #20]
 80091fe:	9b01      	ldr	r3, [sp, #4]
 8009200:	6120      	str	r0, [r4, #16]
 8009202:	b15b      	cbz	r3, 800921c <__smakebuf_r+0x74>
 8009204:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009208:	4630      	mov	r0, r6
 800920a:	f001 f985 	bl	800a518 <_isatty_r>
 800920e:	b128      	cbz	r0, 800921c <__smakebuf_r+0x74>
 8009210:	89a3      	ldrh	r3, [r4, #12]
 8009212:	f023 0303 	bic.w	r3, r3, #3
 8009216:	f043 0301 	orr.w	r3, r3, #1
 800921a:	81a3      	strh	r3, [r4, #12]
 800921c:	89a0      	ldrh	r0, [r4, #12]
 800921e:	4305      	orrs	r5, r0
 8009220:	81a5      	strh	r5, [r4, #12]
 8009222:	e7cd      	b.n	80091c0 <__smakebuf_r+0x18>
 8009224:	080088d1 	.word	0x080088d1

08009228 <malloc>:
 8009228:	4b02      	ldr	r3, [pc, #8]	; (8009234 <malloc+0xc>)
 800922a:	4601      	mov	r1, r0
 800922c:	6818      	ldr	r0, [r3, #0]
 800922e:	f000 bd67 	b.w	8009d00 <_malloc_r>
 8009232:	bf00      	nop
 8009234:	2000000c 	.word	0x2000000c

08009238 <__ascii_mbtowc>:
 8009238:	b082      	sub	sp, #8
 800923a:	b901      	cbnz	r1, 800923e <__ascii_mbtowc+0x6>
 800923c:	a901      	add	r1, sp, #4
 800923e:	b142      	cbz	r2, 8009252 <__ascii_mbtowc+0x1a>
 8009240:	b14b      	cbz	r3, 8009256 <__ascii_mbtowc+0x1e>
 8009242:	7813      	ldrb	r3, [r2, #0]
 8009244:	600b      	str	r3, [r1, #0]
 8009246:	7812      	ldrb	r2, [r2, #0]
 8009248:	1e10      	subs	r0, r2, #0
 800924a:	bf18      	it	ne
 800924c:	2001      	movne	r0, #1
 800924e:	b002      	add	sp, #8
 8009250:	4770      	bx	lr
 8009252:	4610      	mov	r0, r2
 8009254:	e7fb      	b.n	800924e <__ascii_mbtowc+0x16>
 8009256:	f06f 0001 	mvn.w	r0, #1
 800925a:	e7f8      	b.n	800924e <__ascii_mbtowc+0x16>

0800925c <memcpy>:
 800925c:	440a      	add	r2, r1
 800925e:	4291      	cmp	r1, r2
 8009260:	f100 33ff 	add.w	r3, r0, #4294967295
 8009264:	d100      	bne.n	8009268 <memcpy+0xc>
 8009266:	4770      	bx	lr
 8009268:	b510      	push	{r4, lr}
 800926a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800926e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009272:	4291      	cmp	r1, r2
 8009274:	d1f9      	bne.n	800926a <memcpy+0xe>
 8009276:	bd10      	pop	{r4, pc}

08009278 <_Balloc>:
 8009278:	b570      	push	{r4, r5, r6, lr}
 800927a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800927c:	4604      	mov	r4, r0
 800927e:	460d      	mov	r5, r1
 8009280:	b976      	cbnz	r6, 80092a0 <_Balloc+0x28>
 8009282:	2010      	movs	r0, #16
 8009284:	f7ff ffd0 	bl	8009228 <malloc>
 8009288:	4602      	mov	r2, r0
 800928a:	6260      	str	r0, [r4, #36]	; 0x24
 800928c:	b920      	cbnz	r0, 8009298 <_Balloc+0x20>
 800928e:	4b18      	ldr	r3, [pc, #96]	; (80092f0 <_Balloc+0x78>)
 8009290:	4818      	ldr	r0, [pc, #96]	; (80092f4 <_Balloc+0x7c>)
 8009292:	2166      	movs	r1, #102	; 0x66
 8009294:	f001 f8ee 	bl	800a474 <__assert_func>
 8009298:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800929c:	6006      	str	r6, [r0, #0]
 800929e:	60c6      	str	r6, [r0, #12]
 80092a0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80092a2:	68f3      	ldr	r3, [r6, #12]
 80092a4:	b183      	cbz	r3, 80092c8 <_Balloc+0x50>
 80092a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80092a8:	68db      	ldr	r3, [r3, #12]
 80092aa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80092ae:	b9b8      	cbnz	r0, 80092e0 <_Balloc+0x68>
 80092b0:	2101      	movs	r1, #1
 80092b2:	fa01 f605 	lsl.w	r6, r1, r5
 80092b6:	1d72      	adds	r2, r6, #5
 80092b8:	0092      	lsls	r2, r2, #2
 80092ba:	4620      	mov	r0, r4
 80092bc:	f000 fc9d 	bl	8009bfa <_calloc_r>
 80092c0:	b160      	cbz	r0, 80092dc <_Balloc+0x64>
 80092c2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80092c6:	e00e      	b.n	80092e6 <_Balloc+0x6e>
 80092c8:	2221      	movs	r2, #33	; 0x21
 80092ca:	2104      	movs	r1, #4
 80092cc:	4620      	mov	r0, r4
 80092ce:	f000 fc94 	bl	8009bfa <_calloc_r>
 80092d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80092d4:	60f0      	str	r0, [r6, #12]
 80092d6:	68db      	ldr	r3, [r3, #12]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d1e4      	bne.n	80092a6 <_Balloc+0x2e>
 80092dc:	2000      	movs	r0, #0
 80092de:	bd70      	pop	{r4, r5, r6, pc}
 80092e0:	6802      	ldr	r2, [r0, #0]
 80092e2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80092e6:	2300      	movs	r3, #0
 80092e8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80092ec:	e7f7      	b.n	80092de <_Balloc+0x66>
 80092ee:	bf00      	nop
 80092f0:	0800a8c6 	.word	0x0800a8c6
 80092f4:	0800aa28 	.word	0x0800aa28

080092f8 <_Bfree>:
 80092f8:	b570      	push	{r4, r5, r6, lr}
 80092fa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80092fc:	4605      	mov	r5, r0
 80092fe:	460c      	mov	r4, r1
 8009300:	b976      	cbnz	r6, 8009320 <_Bfree+0x28>
 8009302:	2010      	movs	r0, #16
 8009304:	f7ff ff90 	bl	8009228 <malloc>
 8009308:	4602      	mov	r2, r0
 800930a:	6268      	str	r0, [r5, #36]	; 0x24
 800930c:	b920      	cbnz	r0, 8009318 <_Bfree+0x20>
 800930e:	4b09      	ldr	r3, [pc, #36]	; (8009334 <_Bfree+0x3c>)
 8009310:	4809      	ldr	r0, [pc, #36]	; (8009338 <_Bfree+0x40>)
 8009312:	218a      	movs	r1, #138	; 0x8a
 8009314:	f001 f8ae 	bl	800a474 <__assert_func>
 8009318:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800931c:	6006      	str	r6, [r0, #0]
 800931e:	60c6      	str	r6, [r0, #12]
 8009320:	b13c      	cbz	r4, 8009332 <_Bfree+0x3a>
 8009322:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009324:	6862      	ldr	r2, [r4, #4]
 8009326:	68db      	ldr	r3, [r3, #12]
 8009328:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800932c:	6021      	str	r1, [r4, #0]
 800932e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009332:	bd70      	pop	{r4, r5, r6, pc}
 8009334:	0800a8c6 	.word	0x0800a8c6
 8009338:	0800aa28 	.word	0x0800aa28

0800933c <__multadd>:
 800933c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009340:	690d      	ldr	r5, [r1, #16]
 8009342:	4607      	mov	r7, r0
 8009344:	460c      	mov	r4, r1
 8009346:	461e      	mov	r6, r3
 8009348:	f101 0c14 	add.w	ip, r1, #20
 800934c:	2000      	movs	r0, #0
 800934e:	f8dc 3000 	ldr.w	r3, [ip]
 8009352:	b299      	uxth	r1, r3
 8009354:	fb02 6101 	mla	r1, r2, r1, r6
 8009358:	0c1e      	lsrs	r6, r3, #16
 800935a:	0c0b      	lsrs	r3, r1, #16
 800935c:	fb02 3306 	mla	r3, r2, r6, r3
 8009360:	b289      	uxth	r1, r1
 8009362:	3001      	adds	r0, #1
 8009364:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009368:	4285      	cmp	r5, r0
 800936a:	f84c 1b04 	str.w	r1, [ip], #4
 800936e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009372:	dcec      	bgt.n	800934e <__multadd+0x12>
 8009374:	b30e      	cbz	r6, 80093ba <__multadd+0x7e>
 8009376:	68a3      	ldr	r3, [r4, #8]
 8009378:	42ab      	cmp	r3, r5
 800937a:	dc19      	bgt.n	80093b0 <__multadd+0x74>
 800937c:	6861      	ldr	r1, [r4, #4]
 800937e:	4638      	mov	r0, r7
 8009380:	3101      	adds	r1, #1
 8009382:	f7ff ff79 	bl	8009278 <_Balloc>
 8009386:	4680      	mov	r8, r0
 8009388:	b928      	cbnz	r0, 8009396 <__multadd+0x5a>
 800938a:	4602      	mov	r2, r0
 800938c:	4b0c      	ldr	r3, [pc, #48]	; (80093c0 <__multadd+0x84>)
 800938e:	480d      	ldr	r0, [pc, #52]	; (80093c4 <__multadd+0x88>)
 8009390:	21b5      	movs	r1, #181	; 0xb5
 8009392:	f001 f86f 	bl	800a474 <__assert_func>
 8009396:	6922      	ldr	r2, [r4, #16]
 8009398:	3202      	adds	r2, #2
 800939a:	f104 010c 	add.w	r1, r4, #12
 800939e:	0092      	lsls	r2, r2, #2
 80093a0:	300c      	adds	r0, #12
 80093a2:	f7ff ff5b 	bl	800925c <memcpy>
 80093a6:	4621      	mov	r1, r4
 80093a8:	4638      	mov	r0, r7
 80093aa:	f7ff ffa5 	bl	80092f8 <_Bfree>
 80093ae:	4644      	mov	r4, r8
 80093b0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80093b4:	3501      	adds	r5, #1
 80093b6:	615e      	str	r6, [r3, #20]
 80093b8:	6125      	str	r5, [r4, #16]
 80093ba:	4620      	mov	r0, r4
 80093bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093c0:	0800a938 	.word	0x0800a938
 80093c4:	0800aa28 	.word	0x0800aa28

080093c8 <__s2b>:
 80093c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80093cc:	460c      	mov	r4, r1
 80093ce:	4615      	mov	r5, r2
 80093d0:	461f      	mov	r7, r3
 80093d2:	2209      	movs	r2, #9
 80093d4:	3308      	adds	r3, #8
 80093d6:	4606      	mov	r6, r0
 80093d8:	fb93 f3f2 	sdiv	r3, r3, r2
 80093dc:	2100      	movs	r1, #0
 80093de:	2201      	movs	r2, #1
 80093e0:	429a      	cmp	r2, r3
 80093e2:	db09      	blt.n	80093f8 <__s2b+0x30>
 80093e4:	4630      	mov	r0, r6
 80093e6:	f7ff ff47 	bl	8009278 <_Balloc>
 80093ea:	b940      	cbnz	r0, 80093fe <__s2b+0x36>
 80093ec:	4602      	mov	r2, r0
 80093ee:	4b19      	ldr	r3, [pc, #100]	; (8009454 <__s2b+0x8c>)
 80093f0:	4819      	ldr	r0, [pc, #100]	; (8009458 <__s2b+0x90>)
 80093f2:	21ce      	movs	r1, #206	; 0xce
 80093f4:	f001 f83e 	bl	800a474 <__assert_func>
 80093f8:	0052      	lsls	r2, r2, #1
 80093fa:	3101      	adds	r1, #1
 80093fc:	e7f0      	b.n	80093e0 <__s2b+0x18>
 80093fe:	9b08      	ldr	r3, [sp, #32]
 8009400:	6143      	str	r3, [r0, #20]
 8009402:	2d09      	cmp	r5, #9
 8009404:	f04f 0301 	mov.w	r3, #1
 8009408:	6103      	str	r3, [r0, #16]
 800940a:	dd16      	ble.n	800943a <__s2b+0x72>
 800940c:	f104 0909 	add.w	r9, r4, #9
 8009410:	46c8      	mov	r8, r9
 8009412:	442c      	add	r4, r5
 8009414:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009418:	4601      	mov	r1, r0
 800941a:	3b30      	subs	r3, #48	; 0x30
 800941c:	220a      	movs	r2, #10
 800941e:	4630      	mov	r0, r6
 8009420:	f7ff ff8c 	bl	800933c <__multadd>
 8009424:	45a0      	cmp	r8, r4
 8009426:	d1f5      	bne.n	8009414 <__s2b+0x4c>
 8009428:	f1a5 0408 	sub.w	r4, r5, #8
 800942c:	444c      	add	r4, r9
 800942e:	1b2d      	subs	r5, r5, r4
 8009430:	1963      	adds	r3, r4, r5
 8009432:	42bb      	cmp	r3, r7
 8009434:	db04      	blt.n	8009440 <__s2b+0x78>
 8009436:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800943a:	340a      	adds	r4, #10
 800943c:	2509      	movs	r5, #9
 800943e:	e7f6      	b.n	800942e <__s2b+0x66>
 8009440:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009444:	4601      	mov	r1, r0
 8009446:	3b30      	subs	r3, #48	; 0x30
 8009448:	220a      	movs	r2, #10
 800944a:	4630      	mov	r0, r6
 800944c:	f7ff ff76 	bl	800933c <__multadd>
 8009450:	e7ee      	b.n	8009430 <__s2b+0x68>
 8009452:	bf00      	nop
 8009454:	0800a938 	.word	0x0800a938
 8009458:	0800aa28 	.word	0x0800aa28

0800945c <__hi0bits>:
 800945c:	0c03      	lsrs	r3, r0, #16
 800945e:	041b      	lsls	r3, r3, #16
 8009460:	b9d3      	cbnz	r3, 8009498 <__hi0bits+0x3c>
 8009462:	0400      	lsls	r0, r0, #16
 8009464:	2310      	movs	r3, #16
 8009466:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800946a:	bf04      	itt	eq
 800946c:	0200      	lsleq	r0, r0, #8
 800946e:	3308      	addeq	r3, #8
 8009470:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009474:	bf04      	itt	eq
 8009476:	0100      	lsleq	r0, r0, #4
 8009478:	3304      	addeq	r3, #4
 800947a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800947e:	bf04      	itt	eq
 8009480:	0080      	lsleq	r0, r0, #2
 8009482:	3302      	addeq	r3, #2
 8009484:	2800      	cmp	r0, #0
 8009486:	db05      	blt.n	8009494 <__hi0bits+0x38>
 8009488:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800948c:	f103 0301 	add.w	r3, r3, #1
 8009490:	bf08      	it	eq
 8009492:	2320      	moveq	r3, #32
 8009494:	4618      	mov	r0, r3
 8009496:	4770      	bx	lr
 8009498:	2300      	movs	r3, #0
 800949a:	e7e4      	b.n	8009466 <__hi0bits+0xa>

0800949c <__lo0bits>:
 800949c:	6803      	ldr	r3, [r0, #0]
 800949e:	f013 0207 	ands.w	r2, r3, #7
 80094a2:	4601      	mov	r1, r0
 80094a4:	d00b      	beq.n	80094be <__lo0bits+0x22>
 80094a6:	07da      	lsls	r2, r3, #31
 80094a8:	d423      	bmi.n	80094f2 <__lo0bits+0x56>
 80094aa:	0798      	lsls	r0, r3, #30
 80094ac:	bf49      	itett	mi
 80094ae:	085b      	lsrmi	r3, r3, #1
 80094b0:	089b      	lsrpl	r3, r3, #2
 80094b2:	2001      	movmi	r0, #1
 80094b4:	600b      	strmi	r3, [r1, #0]
 80094b6:	bf5c      	itt	pl
 80094b8:	600b      	strpl	r3, [r1, #0]
 80094ba:	2002      	movpl	r0, #2
 80094bc:	4770      	bx	lr
 80094be:	b298      	uxth	r0, r3
 80094c0:	b9a8      	cbnz	r0, 80094ee <__lo0bits+0x52>
 80094c2:	0c1b      	lsrs	r3, r3, #16
 80094c4:	2010      	movs	r0, #16
 80094c6:	b2da      	uxtb	r2, r3
 80094c8:	b90a      	cbnz	r2, 80094ce <__lo0bits+0x32>
 80094ca:	3008      	adds	r0, #8
 80094cc:	0a1b      	lsrs	r3, r3, #8
 80094ce:	071a      	lsls	r2, r3, #28
 80094d0:	bf04      	itt	eq
 80094d2:	091b      	lsreq	r3, r3, #4
 80094d4:	3004      	addeq	r0, #4
 80094d6:	079a      	lsls	r2, r3, #30
 80094d8:	bf04      	itt	eq
 80094da:	089b      	lsreq	r3, r3, #2
 80094dc:	3002      	addeq	r0, #2
 80094de:	07da      	lsls	r2, r3, #31
 80094e0:	d403      	bmi.n	80094ea <__lo0bits+0x4e>
 80094e2:	085b      	lsrs	r3, r3, #1
 80094e4:	f100 0001 	add.w	r0, r0, #1
 80094e8:	d005      	beq.n	80094f6 <__lo0bits+0x5a>
 80094ea:	600b      	str	r3, [r1, #0]
 80094ec:	4770      	bx	lr
 80094ee:	4610      	mov	r0, r2
 80094f0:	e7e9      	b.n	80094c6 <__lo0bits+0x2a>
 80094f2:	2000      	movs	r0, #0
 80094f4:	4770      	bx	lr
 80094f6:	2020      	movs	r0, #32
 80094f8:	4770      	bx	lr
	...

080094fc <__i2b>:
 80094fc:	b510      	push	{r4, lr}
 80094fe:	460c      	mov	r4, r1
 8009500:	2101      	movs	r1, #1
 8009502:	f7ff feb9 	bl	8009278 <_Balloc>
 8009506:	4602      	mov	r2, r0
 8009508:	b928      	cbnz	r0, 8009516 <__i2b+0x1a>
 800950a:	4b05      	ldr	r3, [pc, #20]	; (8009520 <__i2b+0x24>)
 800950c:	4805      	ldr	r0, [pc, #20]	; (8009524 <__i2b+0x28>)
 800950e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009512:	f000 ffaf 	bl	800a474 <__assert_func>
 8009516:	2301      	movs	r3, #1
 8009518:	6144      	str	r4, [r0, #20]
 800951a:	6103      	str	r3, [r0, #16]
 800951c:	bd10      	pop	{r4, pc}
 800951e:	bf00      	nop
 8009520:	0800a938 	.word	0x0800a938
 8009524:	0800aa28 	.word	0x0800aa28

08009528 <__multiply>:
 8009528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800952c:	4691      	mov	r9, r2
 800952e:	690a      	ldr	r2, [r1, #16]
 8009530:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009534:	429a      	cmp	r2, r3
 8009536:	bfb8      	it	lt
 8009538:	460b      	movlt	r3, r1
 800953a:	460c      	mov	r4, r1
 800953c:	bfbc      	itt	lt
 800953e:	464c      	movlt	r4, r9
 8009540:	4699      	movlt	r9, r3
 8009542:	6927      	ldr	r7, [r4, #16]
 8009544:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009548:	68a3      	ldr	r3, [r4, #8]
 800954a:	6861      	ldr	r1, [r4, #4]
 800954c:	eb07 060a 	add.w	r6, r7, sl
 8009550:	42b3      	cmp	r3, r6
 8009552:	b085      	sub	sp, #20
 8009554:	bfb8      	it	lt
 8009556:	3101      	addlt	r1, #1
 8009558:	f7ff fe8e 	bl	8009278 <_Balloc>
 800955c:	b930      	cbnz	r0, 800956c <__multiply+0x44>
 800955e:	4602      	mov	r2, r0
 8009560:	4b44      	ldr	r3, [pc, #272]	; (8009674 <__multiply+0x14c>)
 8009562:	4845      	ldr	r0, [pc, #276]	; (8009678 <__multiply+0x150>)
 8009564:	f240 115d 	movw	r1, #349	; 0x15d
 8009568:	f000 ff84 	bl	800a474 <__assert_func>
 800956c:	f100 0514 	add.w	r5, r0, #20
 8009570:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009574:	462b      	mov	r3, r5
 8009576:	2200      	movs	r2, #0
 8009578:	4543      	cmp	r3, r8
 800957a:	d321      	bcc.n	80095c0 <__multiply+0x98>
 800957c:	f104 0314 	add.w	r3, r4, #20
 8009580:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009584:	f109 0314 	add.w	r3, r9, #20
 8009588:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800958c:	9202      	str	r2, [sp, #8]
 800958e:	1b3a      	subs	r2, r7, r4
 8009590:	3a15      	subs	r2, #21
 8009592:	f022 0203 	bic.w	r2, r2, #3
 8009596:	3204      	adds	r2, #4
 8009598:	f104 0115 	add.w	r1, r4, #21
 800959c:	428f      	cmp	r7, r1
 800959e:	bf38      	it	cc
 80095a0:	2204      	movcc	r2, #4
 80095a2:	9201      	str	r2, [sp, #4]
 80095a4:	9a02      	ldr	r2, [sp, #8]
 80095a6:	9303      	str	r3, [sp, #12]
 80095a8:	429a      	cmp	r2, r3
 80095aa:	d80c      	bhi.n	80095c6 <__multiply+0x9e>
 80095ac:	2e00      	cmp	r6, #0
 80095ae:	dd03      	ble.n	80095b8 <__multiply+0x90>
 80095b0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d05a      	beq.n	800966e <__multiply+0x146>
 80095b8:	6106      	str	r6, [r0, #16]
 80095ba:	b005      	add	sp, #20
 80095bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095c0:	f843 2b04 	str.w	r2, [r3], #4
 80095c4:	e7d8      	b.n	8009578 <__multiply+0x50>
 80095c6:	f8b3 a000 	ldrh.w	sl, [r3]
 80095ca:	f1ba 0f00 	cmp.w	sl, #0
 80095ce:	d024      	beq.n	800961a <__multiply+0xf2>
 80095d0:	f104 0e14 	add.w	lr, r4, #20
 80095d4:	46a9      	mov	r9, r5
 80095d6:	f04f 0c00 	mov.w	ip, #0
 80095da:	f85e 2b04 	ldr.w	r2, [lr], #4
 80095de:	f8d9 1000 	ldr.w	r1, [r9]
 80095e2:	fa1f fb82 	uxth.w	fp, r2
 80095e6:	b289      	uxth	r1, r1
 80095e8:	fb0a 110b 	mla	r1, sl, fp, r1
 80095ec:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80095f0:	f8d9 2000 	ldr.w	r2, [r9]
 80095f4:	4461      	add	r1, ip
 80095f6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80095fa:	fb0a c20b 	mla	r2, sl, fp, ip
 80095fe:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009602:	b289      	uxth	r1, r1
 8009604:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009608:	4577      	cmp	r7, lr
 800960a:	f849 1b04 	str.w	r1, [r9], #4
 800960e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009612:	d8e2      	bhi.n	80095da <__multiply+0xb2>
 8009614:	9a01      	ldr	r2, [sp, #4]
 8009616:	f845 c002 	str.w	ip, [r5, r2]
 800961a:	9a03      	ldr	r2, [sp, #12]
 800961c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009620:	3304      	adds	r3, #4
 8009622:	f1b9 0f00 	cmp.w	r9, #0
 8009626:	d020      	beq.n	800966a <__multiply+0x142>
 8009628:	6829      	ldr	r1, [r5, #0]
 800962a:	f104 0c14 	add.w	ip, r4, #20
 800962e:	46ae      	mov	lr, r5
 8009630:	f04f 0a00 	mov.w	sl, #0
 8009634:	f8bc b000 	ldrh.w	fp, [ip]
 8009638:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800963c:	fb09 220b 	mla	r2, r9, fp, r2
 8009640:	4492      	add	sl, r2
 8009642:	b289      	uxth	r1, r1
 8009644:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009648:	f84e 1b04 	str.w	r1, [lr], #4
 800964c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009650:	f8be 1000 	ldrh.w	r1, [lr]
 8009654:	0c12      	lsrs	r2, r2, #16
 8009656:	fb09 1102 	mla	r1, r9, r2, r1
 800965a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800965e:	4567      	cmp	r7, ip
 8009660:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009664:	d8e6      	bhi.n	8009634 <__multiply+0x10c>
 8009666:	9a01      	ldr	r2, [sp, #4]
 8009668:	50a9      	str	r1, [r5, r2]
 800966a:	3504      	adds	r5, #4
 800966c:	e79a      	b.n	80095a4 <__multiply+0x7c>
 800966e:	3e01      	subs	r6, #1
 8009670:	e79c      	b.n	80095ac <__multiply+0x84>
 8009672:	bf00      	nop
 8009674:	0800a938 	.word	0x0800a938
 8009678:	0800aa28 	.word	0x0800aa28

0800967c <__pow5mult>:
 800967c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009680:	4615      	mov	r5, r2
 8009682:	f012 0203 	ands.w	r2, r2, #3
 8009686:	4606      	mov	r6, r0
 8009688:	460f      	mov	r7, r1
 800968a:	d007      	beq.n	800969c <__pow5mult+0x20>
 800968c:	4c25      	ldr	r4, [pc, #148]	; (8009724 <__pow5mult+0xa8>)
 800968e:	3a01      	subs	r2, #1
 8009690:	2300      	movs	r3, #0
 8009692:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009696:	f7ff fe51 	bl	800933c <__multadd>
 800969a:	4607      	mov	r7, r0
 800969c:	10ad      	asrs	r5, r5, #2
 800969e:	d03d      	beq.n	800971c <__pow5mult+0xa0>
 80096a0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80096a2:	b97c      	cbnz	r4, 80096c4 <__pow5mult+0x48>
 80096a4:	2010      	movs	r0, #16
 80096a6:	f7ff fdbf 	bl	8009228 <malloc>
 80096aa:	4602      	mov	r2, r0
 80096ac:	6270      	str	r0, [r6, #36]	; 0x24
 80096ae:	b928      	cbnz	r0, 80096bc <__pow5mult+0x40>
 80096b0:	4b1d      	ldr	r3, [pc, #116]	; (8009728 <__pow5mult+0xac>)
 80096b2:	481e      	ldr	r0, [pc, #120]	; (800972c <__pow5mult+0xb0>)
 80096b4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80096b8:	f000 fedc 	bl	800a474 <__assert_func>
 80096bc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80096c0:	6004      	str	r4, [r0, #0]
 80096c2:	60c4      	str	r4, [r0, #12]
 80096c4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80096c8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80096cc:	b94c      	cbnz	r4, 80096e2 <__pow5mult+0x66>
 80096ce:	f240 2171 	movw	r1, #625	; 0x271
 80096d2:	4630      	mov	r0, r6
 80096d4:	f7ff ff12 	bl	80094fc <__i2b>
 80096d8:	2300      	movs	r3, #0
 80096da:	f8c8 0008 	str.w	r0, [r8, #8]
 80096de:	4604      	mov	r4, r0
 80096e0:	6003      	str	r3, [r0, #0]
 80096e2:	f04f 0900 	mov.w	r9, #0
 80096e6:	07eb      	lsls	r3, r5, #31
 80096e8:	d50a      	bpl.n	8009700 <__pow5mult+0x84>
 80096ea:	4639      	mov	r1, r7
 80096ec:	4622      	mov	r2, r4
 80096ee:	4630      	mov	r0, r6
 80096f0:	f7ff ff1a 	bl	8009528 <__multiply>
 80096f4:	4639      	mov	r1, r7
 80096f6:	4680      	mov	r8, r0
 80096f8:	4630      	mov	r0, r6
 80096fa:	f7ff fdfd 	bl	80092f8 <_Bfree>
 80096fe:	4647      	mov	r7, r8
 8009700:	106d      	asrs	r5, r5, #1
 8009702:	d00b      	beq.n	800971c <__pow5mult+0xa0>
 8009704:	6820      	ldr	r0, [r4, #0]
 8009706:	b938      	cbnz	r0, 8009718 <__pow5mult+0x9c>
 8009708:	4622      	mov	r2, r4
 800970a:	4621      	mov	r1, r4
 800970c:	4630      	mov	r0, r6
 800970e:	f7ff ff0b 	bl	8009528 <__multiply>
 8009712:	6020      	str	r0, [r4, #0]
 8009714:	f8c0 9000 	str.w	r9, [r0]
 8009718:	4604      	mov	r4, r0
 800971a:	e7e4      	b.n	80096e6 <__pow5mult+0x6a>
 800971c:	4638      	mov	r0, r7
 800971e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009722:	bf00      	nop
 8009724:	0800ab78 	.word	0x0800ab78
 8009728:	0800a8c6 	.word	0x0800a8c6
 800972c:	0800aa28 	.word	0x0800aa28

08009730 <__lshift>:
 8009730:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009734:	460c      	mov	r4, r1
 8009736:	6849      	ldr	r1, [r1, #4]
 8009738:	6923      	ldr	r3, [r4, #16]
 800973a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800973e:	68a3      	ldr	r3, [r4, #8]
 8009740:	4607      	mov	r7, r0
 8009742:	4691      	mov	r9, r2
 8009744:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009748:	f108 0601 	add.w	r6, r8, #1
 800974c:	42b3      	cmp	r3, r6
 800974e:	db0b      	blt.n	8009768 <__lshift+0x38>
 8009750:	4638      	mov	r0, r7
 8009752:	f7ff fd91 	bl	8009278 <_Balloc>
 8009756:	4605      	mov	r5, r0
 8009758:	b948      	cbnz	r0, 800976e <__lshift+0x3e>
 800975a:	4602      	mov	r2, r0
 800975c:	4b2a      	ldr	r3, [pc, #168]	; (8009808 <__lshift+0xd8>)
 800975e:	482b      	ldr	r0, [pc, #172]	; (800980c <__lshift+0xdc>)
 8009760:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009764:	f000 fe86 	bl	800a474 <__assert_func>
 8009768:	3101      	adds	r1, #1
 800976a:	005b      	lsls	r3, r3, #1
 800976c:	e7ee      	b.n	800974c <__lshift+0x1c>
 800976e:	2300      	movs	r3, #0
 8009770:	f100 0114 	add.w	r1, r0, #20
 8009774:	f100 0210 	add.w	r2, r0, #16
 8009778:	4618      	mov	r0, r3
 800977a:	4553      	cmp	r3, sl
 800977c:	db37      	blt.n	80097ee <__lshift+0xbe>
 800977e:	6920      	ldr	r0, [r4, #16]
 8009780:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009784:	f104 0314 	add.w	r3, r4, #20
 8009788:	f019 091f 	ands.w	r9, r9, #31
 800978c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009790:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009794:	d02f      	beq.n	80097f6 <__lshift+0xc6>
 8009796:	f1c9 0e20 	rsb	lr, r9, #32
 800979a:	468a      	mov	sl, r1
 800979c:	f04f 0c00 	mov.w	ip, #0
 80097a0:	681a      	ldr	r2, [r3, #0]
 80097a2:	fa02 f209 	lsl.w	r2, r2, r9
 80097a6:	ea42 020c 	orr.w	r2, r2, ip
 80097aa:	f84a 2b04 	str.w	r2, [sl], #4
 80097ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80097b2:	4298      	cmp	r0, r3
 80097b4:	fa22 fc0e 	lsr.w	ip, r2, lr
 80097b8:	d8f2      	bhi.n	80097a0 <__lshift+0x70>
 80097ba:	1b03      	subs	r3, r0, r4
 80097bc:	3b15      	subs	r3, #21
 80097be:	f023 0303 	bic.w	r3, r3, #3
 80097c2:	3304      	adds	r3, #4
 80097c4:	f104 0215 	add.w	r2, r4, #21
 80097c8:	4290      	cmp	r0, r2
 80097ca:	bf38      	it	cc
 80097cc:	2304      	movcc	r3, #4
 80097ce:	f841 c003 	str.w	ip, [r1, r3]
 80097d2:	f1bc 0f00 	cmp.w	ip, #0
 80097d6:	d001      	beq.n	80097dc <__lshift+0xac>
 80097d8:	f108 0602 	add.w	r6, r8, #2
 80097dc:	3e01      	subs	r6, #1
 80097de:	4638      	mov	r0, r7
 80097e0:	612e      	str	r6, [r5, #16]
 80097e2:	4621      	mov	r1, r4
 80097e4:	f7ff fd88 	bl	80092f8 <_Bfree>
 80097e8:	4628      	mov	r0, r5
 80097ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097ee:	f842 0f04 	str.w	r0, [r2, #4]!
 80097f2:	3301      	adds	r3, #1
 80097f4:	e7c1      	b.n	800977a <__lshift+0x4a>
 80097f6:	3904      	subs	r1, #4
 80097f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80097fc:	f841 2f04 	str.w	r2, [r1, #4]!
 8009800:	4298      	cmp	r0, r3
 8009802:	d8f9      	bhi.n	80097f8 <__lshift+0xc8>
 8009804:	e7ea      	b.n	80097dc <__lshift+0xac>
 8009806:	bf00      	nop
 8009808:	0800a938 	.word	0x0800a938
 800980c:	0800aa28 	.word	0x0800aa28

08009810 <__mcmp>:
 8009810:	b530      	push	{r4, r5, lr}
 8009812:	6902      	ldr	r2, [r0, #16]
 8009814:	690c      	ldr	r4, [r1, #16]
 8009816:	1b12      	subs	r2, r2, r4
 8009818:	d10e      	bne.n	8009838 <__mcmp+0x28>
 800981a:	f100 0314 	add.w	r3, r0, #20
 800981e:	3114      	adds	r1, #20
 8009820:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009824:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009828:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800982c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009830:	42a5      	cmp	r5, r4
 8009832:	d003      	beq.n	800983c <__mcmp+0x2c>
 8009834:	d305      	bcc.n	8009842 <__mcmp+0x32>
 8009836:	2201      	movs	r2, #1
 8009838:	4610      	mov	r0, r2
 800983a:	bd30      	pop	{r4, r5, pc}
 800983c:	4283      	cmp	r3, r0
 800983e:	d3f3      	bcc.n	8009828 <__mcmp+0x18>
 8009840:	e7fa      	b.n	8009838 <__mcmp+0x28>
 8009842:	f04f 32ff 	mov.w	r2, #4294967295
 8009846:	e7f7      	b.n	8009838 <__mcmp+0x28>

08009848 <__mdiff>:
 8009848:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800984c:	460c      	mov	r4, r1
 800984e:	4606      	mov	r6, r0
 8009850:	4611      	mov	r1, r2
 8009852:	4620      	mov	r0, r4
 8009854:	4690      	mov	r8, r2
 8009856:	f7ff ffdb 	bl	8009810 <__mcmp>
 800985a:	1e05      	subs	r5, r0, #0
 800985c:	d110      	bne.n	8009880 <__mdiff+0x38>
 800985e:	4629      	mov	r1, r5
 8009860:	4630      	mov	r0, r6
 8009862:	f7ff fd09 	bl	8009278 <_Balloc>
 8009866:	b930      	cbnz	r0, 8009876 <__mdiff+0x2e>
 8009868:	4b3a      	ldr	r3, [pc, #232]	; (8009954 <__mdiff+0x10c>)
 800986a:	4602      	mov	r2, r0
 800986c:	f240 2132 	movw	r1, #562	; 0x232
 8009870:	4839      	ldr	r0, [pc, #228]	; (8009958 <__mdiff+0x110>)
 8009872:	f000 fdff 	bl	800a474 <__assert_func>
 8009876:	2301      	movs	r3, #1
 8009878:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800987c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009880:	bfa4      	itt	ge
 8009882:	4643      	movge	r3, r8
 8009884:	46a0      	movge	r8, r4
 8009886:	4630      	mov	r0, r6
 8009888:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800988c:	bfa6      	itte	ge
 800988e:	461c      	movge	r4, r3
 8009890:	2500      	movge	r5, #0
 8009892:	2501      	movlt	r5, #1
 8009894:	f7ff fcf0 	bl	8009278 <_Balloc>
 8009898:	b920      	cbnz	r0, 80098a4 <__mdiff+0x5c>
 800989a:	4b2e      	ldr	r3, [pc, #184]	; (8009954 <__mdiff+0x10c>)
 800989c:	4602      	mov	r2, r0
 800989e:	f44f 7110 	mov.w	r1, #576	; 0x240
 80098a2:	e7e5      	b.n	8009870 <__mdiff+0x28>
 80098a4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80098a8:	6926      	ldr	r6, [r4, #16]
 80098aa:	60c5      	str	r5, [r0, #12]
 80098ac:	f104 0914 	add.w	r9, r4, #20
 80098b0:	f108 0514 	add.w	r5, r8, #20
 80098b4:	f100 0e14 	add.w	lr, r0, #20
 80098b8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80098bc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80098c0:	f108 0210 	add.w	r2, r8, #16
 80098c4:	46f2      	mov	sl, lr
 80098c6:	2100      	movs	r1, #0
 80098c8:	f859 3b04 	ldr.w	r3, [r9], #4
 80098cc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80098d0:	fa1f f883 	uxth.w	r8, r3
 80098d4:	fa11 f18b 	uxtah	r1, r1, fp
 80098d8:	0c1b      	lsrs	r3, r3, #16
 80098da:	eba1 0808 	sub.w	r8, r1, r8
 80098de:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80098e2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80098e6:	fa1f f888 	uxth.w	r8, r8
 80098ea:	1419      	asrs	r1, r3, #16
 80098ec:	454e      	cmp	r6, r9
 80098ee:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80098f2:	f84a 3b04 	str.w	r3, [sl], #4
 80098f6:	d8e7      	bhi.n	80098c8 <__mdiff+0x80>
 80098f8:	1b33      	subs	r3, r6, r4
 80098fa:	3b15      	subs	r3, #21
 80098fc:	f023 0303 	bic.w	r3, r3, #3
 8009900:	3304      	adds	r3, #4
 8009902:	3415      	adds	r4, #21
 8009904:	42a6      	cmp	r6, r4
 8009906:	bf38      	it	cc
 8009908:	2304      	movcc	r3, #4
 800990a:	441d      	add	r5, r3
 800990c:	4473      	add	r3, lr
 800990e:	469e      	mov	lr, r3
 8009910:	462e      	mov	r6, r5
 8009912:	4566      	cmp	r6, ip
 8009914:	d30e      	bcc.n	8009934 <__mdiff+0xec>
 8009916:	f10c 0203 	add.w	r2, ip, #3
 800991a:	1b52      	subs	r2, r2, r5
 800991c:	f022 0203 	bic.w	r2, r2, #3
 8009920:	3d03      	subs	r5, #3
 8009922:	45ac      	cmp	ip, r5
 8009924:	bf38      	it	cc
 8009926:	2200      	movcc	r2, #0
 8009928:	441a      	add	r2, r3
 800992a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800992e:	b17b      	cbz	r3, 8009950 <__mdiff+0x108>
 8009930:	6107      	str	r7, [r0, #16]
 8009932:	e7a3      	b.n	800987c <__mdiff+0x34>
 8009934:	f856 8b04 	ldr.w	r8, [r6], #4
 8009938:	fa11 f288 	uxtah	r2, r1, r8
 800993c:	1414      	asrs	r4, r2, #16
 800993e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009942:	b292      	uxth	r2, r2
 8009944:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009948:	f84e 2b04 	str.w	r2, [lr], #4
 800994c:	1421      	asrs	r1, r4, #16
 800994e:	e7e0      	b.n	8009912 <__mdiff+0xca>
 8009950:	3f01      	subs	r7, #1
 8009952:	e7ea      	b.n	800992a <__mdiff+0xe2>
 8009954:	0800a938 	.word	0x0800a938
 8009958:	0800aa28 	.word	0x0800aa28

0800995c <__ulp>:
 800995c:	b082      	sub	sp, #8
 800995e:	ed8d 0b00 	vstr	d0, [sp]
 8009962:	9b01      	ldr	r3, [sp, #4]
 8009964:	4912      	ldr	r1, [pc, #72]	; (80099b0 <__ulp+0x54>)
 8009966:	4019      	ands	r1, r3
 8009968:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800996c:	2900      	cmp	r1, #0
 800996e:	dd05      	ble.n	800997c <__ulp+0x20>
 8009970:	2200      	movs	r2, #0
 8009972:	460b      	mov	r3, r1
 8009974:	ec43 2b10 	vmov	d0, r2, r3
 8009978:	b002      	add	sp, #8
 800997a:	4770      	bx	lr
 800997c:	4249      	negs	r1, r1
 800997e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8009982:	ea4f 5021 	mov.w	r0, r1, asr #20
 8009986:	f04f 0200 	mov.w	r2, #0
 800998a:	f04f 0300 	mov.w	r3, #0
 800998e:	da04      	bge.n	800999a <__ulp+0x3e>
 8009990:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8009994:	fa41 f300 	asr.w	r3, r1, r0
 8009998:	e7ec      	b.n	8009974 <__ulp+0x18>
 800999a:	f1a0 0114 	sub.w	r1, r0, #20
 800999e:	291e      	cmp	r1, #30
 80099a0:	bfda      	itte	le
 80099a2:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80099a6:	fa20 f101 	lsrle.w	r1, r0, r1
 80099aa:	2101      	movgt	r1, #1
 80099ac:	460a      	mov	r2, r1
 80099ae:	e7e1      	b.n	8009974 <__ulp+0x18>
 80099b0:	7ff00000 	.word	0x7ff00000

080099b4 <__b2d>:
 80099b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099b6:	6905      	ldr	r5, [r0, #16]
 80099b8:	f100 0714 	add.w	r7, r0, #20
 80099bc:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80099c0:	1f2e      	subs	r6, r5, #4
 80099c2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80099c6:	4620      	mov	r0, r4
 80099c8:	f7ff fd48 	bl	800945c <__hi0bits>
 80099cc:	f1c0 0320 	rsb	r3, r0, #32
 80099d0:	280a      	cmp	r0, #10
 80099d2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8009a50 <__b2d+0x9c>
 80099d6:	600b      	str	r3, [r1, #0]
 80099d8:	dc14      	bgt.n	8009a04 <__b2d+0x50>
 80099da:	f1c0 0e0b 	rsb	lr, r0, #11
 80099de:	fa24 f10e 	lsr.w	r1, r4, lr
 80099e2:	42b7      	cmp	r7, r6
 80099e4:	ea41 030c 	orr.w	r3, r1, ip
 80099e8:	bf34      	ite	cc
 80099ea:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80099ee:	2100      	movcs	r1, #0
 80099f0:	3015      	adds	r0, #21
 80099f2:	fa04 f000 	lsl.w	r0, r4, r0
 80099f6:	fa21 f10e 	lsr.w	r1, r1, lr
 80099fa:	ea40 0201 	orr.w	r2, r0, r1
 80099fe:	ec43 2b10 	vmov	d0, r2, r3
 8009a02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a04:	42b7      	cmp	r7, r6
 8009a06:	bf3a      	itte	cc
 8009a08:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009a0c:	f1a5 0608 	subcc.w	r6, r5, #8
 8009a10:	2100      	movcs	r1, #0
 8009a12:	380b      	subs	r0, #11
 8009a14:	d017      	beq.n	8009a46 <__b2d+0x92>
 8009a16:	f1c0 0c20 	rsb	ip, r0, #32
 8009a1a:	fa04 f500 	lsl.w	r5, r4, r0
 8009a1e:	42be      	cmp	r6, r7
 8009a20:	fa21 f40c 	lsr.w	r4, r1, ip
 8009a24:	ea45 0504 	orr.w	r5, r5, r4
 8009a28:	bf8c      	ite	hi
 8009a2a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8009a2e:	2400      	movls	r4, #0
 8009a30:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8009a34:	fa01 f000 	lsl.w	r0, r1, r0
 8009a38:	fa24 f40c 	lsr.w	r4, r4, ip
 8009a3c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009a40:	ea40 0204 	orr.w	r2, r0, r4
 8009a44:	e7db      	b.n	80099fe <__b2d+0x4a>
 8009a46:	ea44 030c 	orr.w	r3, r4, ip
 8009a4a:	460a      	mov	r2, r1
 8009a4c:	e7d7      	b.n	80099fe <__b2d+0x4a>
 8009a4e:	bf00      	nop
 8009a50:	3ff00000 	.word	0x3ff00000

08009a54 <__d2b>:
 8009a54:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009a58:	4689      	mov	r9, r1
 8009a5a:	2101      	movs	r1, #1
 8009a5c:	ec57 6b10 	vmov	r6, r7, d0
 8009a60:	4690      	mov	r8, r2
 8009a62:	f7ff fc09 	bl	8009278 <_Balloc>
 8009a66:	4604      	mov	r4, r0
 8009a68:	b930      	cbnz	r0, 8009a78 <__d2b+0x24>
 8009a6a:	4602      	mov	r2, r0
 8009a6c:	4b25      	ldr	r3, [pc, #148]	; (8009b04 <__d2b+0xb0>)
 8009a6e:	4826      	ldr	r0, [pc, #152]	; (8009b08 <__d2b+0xb4>)
 8009a70:	f240 310a 	movw	r1, #778	; 0x30a
 8009a74:	f000 fcfe 	bl	800a474 <__assert_func>
 8009a78:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009a7c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009a80:	bb35      	cbnz	r5, 8009ad0 <__d2b+0x7c>
 8009a82:	2e00      	cmp	r6, #0
 8009a84:	9301      	str	r3, [sp, #4]
 8009a86:	d028      	beq.n	8009ada <__d2b+0x86>
 8009a88:	4668      	mov	r0, sp
 8009a8a:	9600      	str	r6, [sp, #0]
 8009a8c:	f7ff fd06 	bl	800949c <__lo0bits>
 8009a90:	9900      	ldr	r1, [sp, #0]
 8009a92:	b300      	cbz	r0, 8009ad6 <__d2b+0x82>
 8009a94:	9a01      	ldr	r2, [sp, #4]
 8009a96:	f1c0 0320 	rsb	r3, r0, #32
 8009a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8009a9e:	430b      	orrs	r3, r1
 8009aa0:	40c2      	lsrs	r2, r0
 8009aa2:	6163      	str	r3, [r4, #20]
 8009aa4:	9201      	str	r2, [sp, #4]
 8009aa6:	9b01      	ldr	r3, [sp, #4]
 8009aa8:	61a3      	str	r3, [r4, #24]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	bf14      	ite	ne
 8009aae:	2202      	movne	r2, #2
 8009ab0:	2201      	moveq	r2, #1
 8009ab2:	6122      	str	r2, [r4, #16]
 8009ab4:	b1d5      	cbz	r5, 8009aec <__d2b+0x98>
 8009ab6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009aba:	4405      	add	r5, r0
 8009abc:	f8c9 5000 	str.w	r5, [r9]
 8009ac0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009ac4:	f8c8 0000 	str.w	r0, [r8]
 8009ac8:	4620      	mov	r0, r4
 8009aca:	b003      	add	sp, #12
 8009acc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009ad0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009ad4:	e7d5      	b.n	8009a82 <__d2b+0x2e>
 8009ad6:	6161      	str	r1, [r4, #20]
 8009ad8:	e7e5      	b.n	8009aa6 <__d2b+0x52>
 8009ada:	a801      	add	r0, sp, #4
 8009adc:	f7ff fcde 	bl	800949c <__lo0bits>
 8009ae0:	9b01      	ldr	r3, [sp, #4]
 8009ae2:	6163      	str	r3, [r4, #20]
 8009ae4:	2201      	movs	r2, #1
 8009ae6:	6122      	str	r2, [r4, #16]
 8009ae8:	3020      	adds	r0, #32
 8009aea:	e7e3      	b.n	8009ab4 <__d2b+0x60>
 8009aec:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009af0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009af4:	f8c9 0000 	str.w	r0, [r9]
 8009af8:	6918      	ldr	r0, [r3, #16]
 8009afa:	f7ff fcaf 	bl	800945c <__hi0bits>
 8009afe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009b02:	e7df      	b.n	8009ac4 <__d2b+0x70>
 8009b04:	0800a938 	.word	0x0800a938
 8009b08:	0800aa28 	.word	0x0800aa28

08009b0c <__ratio>:
 8009b0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b10:	4688      	mov	r8, r1
 8009b12:	4669      	mov	r1, sp
 8009b14:	4681      	mov	r9, r0
 8009b16:	f7ff ff4d 	bl	80099b4 <__b2d>
 8009b1a:	a901      	add	r1, sp, #4
 8009b1c:	4640      	mov	r0, r8
 8009b1e:	ec55 4b10 	vmov	r4, r5, d0
 8009b22:	f7ff ff47 	bl	80099b4 <__b2d>
 8009b26:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009b2a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009b2e:	eba3 0c02 	sub.w	ip, r3, r2
 8009b32:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009b36:	1a9b      	subs	r3, r3, r2
 8009b38:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009b3c:	ec51 0b10 	vmov	r0, r1, d0
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	bfd6      	itet	le
 8009b44:	460a      	movle	r2, r1
 8009b46:	462a      	movgt	r2, r5
 8009b48:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009b4c:	468b      	mov	fp, r1
 8009b4e:	462f      	mov	r7, r5
 8009b50:	bfd4      	ite	le
 8009b52:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009b56:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009b5a:	4620      	mov	r0, r4
 8009b5c:	ee10 2a10 	vmov	r2, s0
 8009b60:	465b      	mov	r3, fp
 8009b62:	4639      	mov	r1, r7
 8009b64:	f7f6 fe82 	bl	800086c <__aeabi_ddiv>
 8009b68:	ec41 0b10 	vmov	d0, r0, r1
 8009b6c:	b003      	add	sp, #12
 8009b6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009b72 <__copybits>:
 8009b72:	3901      	subs	r1, #1
 8009b74:	b570      	push	{r4, r5, r6, lr}
 8009b76:	1149      	asrs	r1, r1, #5
 8009b78:	6914      	ldr	r4, [r2, #16]
 8009b7a:	3101      	adds	r1, #1
 8009b7c:	f102 0314 	add.w	r3, r2, #20
 8009b80:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009b84:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009b88:	1f05      	subs	r5, r0, #4
 8009b8a:	42a3      	cmp	r3, r4
 8009b8c:	d30c      	bcc.n	8009ba8 <__copybits+0x36>
 8009b8e:	1aa3      	subs	r3, r4, r2
 8009b90:	3b11      	subs	r3, #17
 8009b92:	f023 0303 	bic.w	r3, r3, #3
 8009b96:	3211      	adds	r2, #17
 8009b98:	42a2      	cmp	r2, r4
 8009b9a:	bf88      	it	hi
 8009b9c:	2300      	movhi	r3, #0
 8009b9e:	4418      	add	r0, r3
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	4288      	cmp	r0, r1
 8009ba4:	d305      	bcc.n	8009bb2 <__copybits+0x40>
 8009ba6:	bd70      	pop	{r4, r5, r6, pc}
 8009ba8:	f853 6b04 	ldr.w	r6, [r3], #4
 8009bac:	f845 6f04 	str.w	r6, [r5, #4]!
 8009bb0:	e7eb      	b.n	8009b8a <__copybits+0x18>
 8009bb2:	f840 3b04 	str.w	r3, [r0], #4
 8009bb6:	e7f4      	b.n	8009ba2 <__copybits+0x30>

08009bb8 <__any_on>:
 8009bb8:	f100 0214 	add.w	r2, r0, #20
 8009bbc:	6900      	ldr	r0, [r0, #16]
 8009bbe:	114b      	asrs	r3, r1, #5
 8009bc0:	4298      	cmp	r0, r3
 8009bc2:	b510      	push	{r4, lr}
 8009bc4:	db11      	blt.n	8009bea <__any_on+0x32>
 8009bc6:	dd0a      	ble.n	8009bde <__any_on+0x26>
 8009bc8:	f011 011f 	ands.w	r1, r1, #31
 8009bcc:	d007      	beq.n	8009bde <__any_on+0x26>
 8009bce:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009bd2:	fa24 f001 	lsr.w	r0, r4, r1
 8009bd6:	fa00 f101 	lsl.w	r1, r0, r1
 8009bda:	428c      	cmp	r4, r1
 8009bdc:	d10b      	bne.n	8009bf6 <__any_on+0x3e>
 8009bde:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009be2:	4293      	cmp	r3, r2
 8009be4:	d803      	bhi.n	8009bee <__any_on+0x36>
 8009be6:	2000      	movs	r0, #0
 8009be8:	bd10      	pop	{r4, pc}
 8009bea:	4603      	mov	r3, r0
 8009bec:	e7f7      	b.n	8009bde <__any_on+0x26>
 8009bee:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009bf2:	2900      	cmp	r1, #0
 8009bf4:	d0f5      	beq.n	8009be2 <__any_on+0x2a>
 8009bf6:	2001      	movs	r0, #1
 8009bf8:	e7f6      	b.n	8009be8 <__any_on+0x30>

08009bfa <_calloc_r>:
 8009bfa:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009bfc:	fba1 2402 	umull	r2, r4, r1, r2
 8009c00:	b94c      	cbnz	r4, 8009c16 <_calloc_r+0x1c>
 8009c02:	4611      	mov	r1, r2
 8009c04:	9201      	str	r2, [sp, #4]
 8009c06:	f000 f87b 	bl	8009d00 <_malloc_r>
 8009c0a:	9a01      	ldr	r2, [sp, #4]
 8009c0c:	4605      	mov	r5, r0
 8009c0e:	b930      	cbnz	r0, 8009c1e <_calloc_r+0x24>
 8009c10:	4628      	mov	r0, r5
 8009c12:	b003      	add	sp, #12
 8009c14:	bd30      	pop	{r4, r5, pc}
 8009c16:	220c      	movs	r2, #12
 8009c18:	6002      	str	r2, [r0, #0]
 8009c1a:	2500      	movs	r5, #0
 8009c1c:	e7f8      	b.n	8009c10 <_calloc_r+0x16>
 8009c1e:	4621      	mov	r1, r4
 8009c20:	f7fc f852 	bl	8005cc8 <memset>
 8009c24:	e7f4      	b.n	8009c10 <_calloc_r+0x16>
	...

08009c28 <_free_r>:
 8009c28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009c2a:	2900      	cmp	r1, #0
 8009c2c:	d044      	beq.n	8009cb8 <_free_r+0x90>
 8009c2e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c32:	9001      	str	r0, [sp, #4]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	f1a1 0404 	sub.w	r4, r1, #4
 8009c3a:	bfb8      	it	lt
 8009c3c:	18e4      	addlt	r4, r4, r3
 8009c3e:	f000 fca7 	bl	800a590 <__malloc_lock>
 8009c42:	4a1e      	ldr	r2, [pc, #120]	; (8009cbc <_free_r+0x94>)
 8009c44:	9801      	ldr	r0, [sp, #4]
 8009c46:	6813      	ldr	r3, [r2, #0]
 8009c48:	b933      	cbnz	r3, 8009c58 <_free_r+0x30>
 8009c4a:	6063      	str	r3, [r4, #4]
 8009c4c:	6014      	str	r4, [r2, #0]
 8009c4e:	b003      	add	sp, #12
 8009c50:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009c54:	f000 bca2 	b.w	800a59c <__malloc_unlock>
 8009c58:	42a3      	cmp	r3, r4
 8009c5a:	d908      	bls.n	8009c6e <_free_r+0x46>
 8009c5c:	6825      	ldr	r5, [r4, #0]
 8009c5e:	1961      	adds	r1, r4, r5
 8009c60:	428b      	cmp	r3, r1
 8009c62:	bf01      	itttt	eq
 8009c64:	6819      	ldreq	r1, [r3, #0]
 8009c66:	685b      	ldreq	r3, [r3, #4]
 8009c68:	1949      	addeq	r1, r1, r5
 8009c6a:	6021      	streq	r1, [r4, #0]
 8009c6c:	e7ed      	b.n	8009c4a <_free_r+0x22>
 8009c6e:	461a      	mov	r2, r3
 8009c70:	685b      	ldr	r3, [r3, #4]
 8009c72:	b10b      	cbz	r3, 8009c78 <_free_r+0x50>
 8009c74:	42a3      	cmp	r3, r4
 8009c76:	d9fa      	bls.n	8009c6e <_free_r+0x46>
 8009c78:	6811      	ldr	r1, [r2, #0]
 8009c7a:	1855      	adds	r5, r2, r1
 8009c7c:	42a5      	cmp	r5, r4
 8009c7e:	d10b      	bne.n	8009c98 <_free_r+0x70>
 8009c80:	6824      	ldr	r4, [r4, #0]
 8009c82:	4421      	add	r1, r4
 8009c84:	1854      	adds	r4, r2, r1
 8009c86:	42a3      	cmp	r3, r4
 8009c88:	6011      	str	r1, [r2, #0]
 8009c8a:	d1e0      	bne.n	8009c4e <_free_r+0x26>
 8009c8c:	681c      	ldr	r4, [r3, #0]
 8009c8e:	685b      	ldr	r3, [r3, #4]
 8009c90:	6053      	str	r3, [r2, #4]
 8009c92:	4421      	add	r1, r4
 8009c94:	6011      	str	r1, [r2, #0]
 8009c96:	e7da      	b.n	8009c4e <_free_r+0x26>
 8009c98:	d902      	bls.n	8009ca0 <_free_r+0x78>
 8009c9a:	230c      	movs	r3, #12
 8009c9c:	6003      	str	r3, [r0, #0]
 8009c9e:	e7d6      	b.n	8009c4e <_free_r+0x26>
 8009ca0:	6825      	ldr	r5, [r4, #0]
 8009ca2:	1961      	adds	r1, r4, r5
 8009ca4:	428b      	cmp	r3, r1
 8009ca6:	bf04      	itt	eq
 8009ca8:	6819      	ldreq	r1, [r3, #0]
 8009caa:	685b      	ldreq	r3, [r3, #4]
 8009cac:	6063      	str	r3, [r4, #4]
 8009cae:	bf04      	itt	eq
 8009cb0:	1949      	addeq	r1, r1, r5
 8009cb2:	6021      	streq	r1, [r4, #0]
 8009cb4:	6054      	str	r4, [r2, #4]
 8009cb6:	e7ca      	b.n	8009c4e <_free_r+0x26>
 8009cb8:	b003      	add	sp, #12
 8009cba:	bd30      	pop	{r4, r5, pc}
 8009cbc:	20000464 	.word	0x20000464

08009cc0 <sbrk_aligned>:
 8009cc0:	b570      	push	{r4, r5, r6, lr}
 8009cc2:	4e0e      	ldr	r6, [pc, #56]	; (8009cfc <sbrk_aligned+0x3c>)
 8009cc4:	460c      	mov	r4, r1
 8009cc6:	6831      	ldr	r1, [r6, #0]
 8009cc8:	4605      	mov	r5, r0
 8009cca:	b911      	cbnz	r1, 8009cd2 <sbrk_aligned+0x12>
 8009ccc:	f000 fb4c 	bl	800a368 <_sbrk_r>
 8009cd0:	6030      	str	r0, [r6, #0]
 8009cd2:	4621      	mov	r1, r4
 8009cd4:	4628      	mov	r0, r5
 8009cd6:	f000 fb47 	bl	800a368 <_sbrk_r>
 8009cda:	1c43      	adds	r3, r0, #1
 8009cdc:	d00a      	beq.n	8009cf4 <sbrk_aligned+0x34>
 8009cde:	1cc4      	adds	r4, r0, #3
 8009ce0:	f024 0403 	bic.w	r4, r4, #3
 8009ce4:	42a0      	cmp	r0, r4
 8009ce6:	d007      	beq.n	8009cf8 <sbrk_aligned+0x38>
 8009ce8:	1a21      	subs	r1, r4, r0
 8009cea:	4628      	mov	r0, r5
 8009cec:	f000 fb3c 	bl	800a368 <_sbrk_r>
 8009cf0:	3001      	adds	r0, #1
 8009cf2:	d101      	bne.n	8009cf8 <sbrk_aligned+0x38>
 8009cf4:	f04f 34ff 	mov.w	r4, #4294967295
 8009cf8:	4620      	mov	r0, r4
 8009cfa:	bd70      	pop	{r4, r5, r6, pc}
 8009cfc:	20000468 	.word	0x20000468

08009d00 <_malloc_r>:
 8009d00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d04:	1ccd      	adds	r5, r1, #3
 8009d06:	f025 0503 	bic.w	r5, r5, #3
 8009d0a:	3508      	adds	r5, #8
 8009d0c:	2d0c      	cmp	r5, #12
 8009d0e:	bf38      	it	cc
 8009d10:	250c      	movcc	r5, #12
 8009d12:	2d00      	cmp	r5, #0
 8009d14:	4607      	mov	r7, r0
 8009d16:	db01      	blt.n	8009d1c <_malloc_r+0x1c>
 8009d18:	42a9      	cmp	r1, r5
 8009d1a:	d905      	bls.n	8009d28 <_malloc_r+0x28>
 8009d1c:	230c      	movs	r3, #12
 8009d1e:	603b      	str	r3, [r7, #0]
 8009d20:	2600      	movs	r6, #0
 8009d22:	4630      	mov	r0, r6
 8009d24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d28:	4e2e      	ldr	r6, [pc, #184]	; (8009de4 <_malloc_r+0xe4>)
 8009d2a:	f000 fc31 	bl	800a590 <__malloc_lock>
 8009d2e:	6833      	ldr	r3, [r6, #0]
 8009d30:	461c      	mov	r4, r3
 8009d32:	bb34      	cbnz	r4, 8009d82 <_malloc_r+0x82>
 8009d34:	4629      	mov	r1, r5
 8009d36:	4638      	mov	r0, r7
 8009d38:	f7ff ffc2 	bl	8009cc0 <sbrk_aligned>
 8009d3c:	1c43      	adds	r3, r0, #1
 8009d3e:	4604      	mov	r4, r0
 8009d40:	d14d      	bne.n	8009dde <_malloc_r+0xde>
 8009d42:	6834      	ldr	r4, [r6, #0]
 8009d44:	4626      	mov	r6, r4
 8009d46:	2e00      	cmp	r6, #0
 8009d48:	d140      	bne.n	8009dcc <_malloc_r+0xcc>
 8009d4a:	6823      	ldr	r3, [r4, #0]
 8009d4c:	4631      	mov	r1, r6
 8009d4e:	4638      	mov	r0, r7
 8009d50:	eb04 0803 	add.w	r8, r4, r3
 8009d54:	f000 fb08 	bl	800a368 <_sbrk_r>
 8009d58:	4580      	cmp	r8, r0
 8009d5a:	d13a      	bne.n	8009dd2 <_malloc_r+0xd2>
 8009d5c:	6821      	ldr	r1, [r4, #0]
 8009d5e:	3503      	adds	r5, #3
 8009d60:	1a6d      	subs	r5, r5, r1
 8009d62:	f025 0503 	bic.w	r5, r5, #3
 8009d66:	3508      	adds	r5, #8
 8009d68:	2d0c      	cmp	r5, #12
 8009d6a:	bf38      	it	cc
 8009d6c:	250c      	movcc	r5, #12
 8009d6e:	4629      	mov	r1, r5
 8009d70:	4638      	mov	r0, r7
 8009d72:	f7ff ffa5 	bl	8009cc0 <sbrk_aligned>
 8009d76:	3001      	adds	r0, #1
 8009d78:	d02b      	beq.n	8009dd2 <_malloc_r+0xd2>
 8009d7a:	6823      	ldr	r3, [r4, #0]
 8009d7c:	442b      	add	r3, r5
 8009d7e:	6023      	str	r3, [r4, #0]
 8009d80:	e00e      	b.n	8009da0 <_malloc_r+0xa0>
 8009d82:	6822      	ldr	r2, [r4, #0]
 8009d84:	1b52      	subs	r2, r2, r5
 8009d86:	d41e      	bmi.n	8009dc6 <_malloc_r+0xc6>
 8009d88:	2a0b      	cmp	r2, #11
 8009d8a:	d916      	bls.n	8009dba <_malloc_r+0xba>
 8009d8c:	1961      	adds	r1, r4, r5
 8009d8e:	42a3      	cmp	r3, r4
 8009d90:	6025      	str	r5, [r4, #0]
 8009d92:	bf18      	it	ne
 8009d94:	6059      	strne	r1, [r3, #4]
 8009d96:	6863      	ldr	r3, [r4, #4]
 8009d98:	bf08      	it	eq
 8009d9a:	6031      	streq	r1, [r6, #0]
 8009d9c:	5162      	str	r2, [r4, r5]
 8009d9e:	604b      	str	r3, [r1, #4]
 8009da0:	4638      	mov	r0, r7
 8009da2:	f104 060b 	add.w	r6, r4, #11
 8009da6:	f000 fbf9 	bl	800a59c <__malloc_unlock>
 8009daa:	f026 0607 	bic.w	r6, r6, #7
 8009dae:	1d23      	adds	r3, r4, #4
 8009db0:	1af2      	subs	r2, r6, r3
 8009db2:	d0b6      	beq.n	8009d22 <_malloc_r+0x22>
 8009db4:	1b9b      	subs	r3, r3, r6
 8009db6:	50a3      	str	r3, [r4, r2]
 8009db8:	e7b3      	b.n	8009d22 <_malloc_r+0x22>
 8009dba:	6862      	ldr	r2, [r4, #4]
 8009dbc:	42a3      	cmp	r3, r4
 8009dbe:	bf0c      	ite	eq
 8009dc0:	6032      	streq	r2, [r6, #0]
 8009dc2:	605a      	strne	r2, [r3, #4]
 8009dc4:	e7ec      	b.n	8009da0 <_malloc_r+0xa0>
 8009dc6:	4623      	mov	r3, r4
 8009dc8:	6864      	ldr	r4, [r4, #4]
 8009dca:	e7b2      	b.n	8009d32 <_malloc_r+0x32>
 8009dcc:	4634      	mov	r4, r6
 8009dce:	6876      	ldr	r6, [r6, #4]
 8009dd0:	e7b9      	b.n	8009d46 <_malloc_r+0x46>
 8009dd2:	230c      	movs	r3, #12
 8009dd4:	603b      	str	r3, [r7, #0]
 8009dd6:	4638      	mov	r0, r7
 8009dd8:	f000 fbe0 	bl	800a59c <__malloc_unlock>
 8009ddc:	e7a1      	b.n	8009d22 <_malloc_r+0x22>
 8009dde:	6025      	str	r5, [r4, #0]
 8009de0:	e7de      	b.n	8009da0 <_malloc_r+0xa0>
 8009de2:	bf00      	nop
 8009de4:	20000464 	.word	0x20000464

08009de8 <__ssputs_r>:
 8009de8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009dec:	688e      	ldr	r6, [r1, #8]
 8009dee:	429e      	cmp	r6, r3
 8009df0:	4682      	mov	sl, r0
 8009df2:	460c      	mov	r4, r1
 8009df4:	4690      	mov	r8, r2
 8009df6:	461f      	mov	r7, r3
 8009df8:	d838      	bhi.n	8009e6c <__ssputs_r+0x84>
 8009dfa:	898a      	ldrh	r2, [r1, #12]
 8009dfc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009e00:	d032      	beq.n	8009e68 <__ssputs_r+0x80>
 8009e02:	6825      	ldr	r5, [r4, #0]
 8009e04:	6909      	ldr	r1, [r1, #16]
 8009e06:	eba5 0901 	sub.w	r9, r5, r1
 8009e0a:	6965      	ldr	r5, [r4, #20]
 8009e0c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009e10:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009e14:	3301      	adds	r3, #1
 8009e16:	444b      	add	r3, r9
 8009e18:	106d      	asrs	r5, r5, #1
 8009e1a:	429d      	cmp	r5, r3
 8009e1c:	bf38      	it	cc
 8009e1e:	461d      	movcc	r5, r3
 8009e20:	0553      	lsls	r3, r2, #21
 8009e22:	d531      	bpl.n	8009e88 <__ssputs_r+0xa0>
 8009e24:	4629      	mov	r1, r5
 8009e26:	f7ff ff6b 	bl	8009d00 <_malloc_r>
 8009e2a:	4606      	mov	r6, r0
 8009e2c:	b950      	cbnz	r0, 8009e44 <__ssputs_r+0x5c>
 8009e2e:	230c      	movs	r3, #12
 8009e30:	f8ca 3000 	str.w	r3, [sl]
 8009e34:	89a3      	ldrh	r3, [r4, #12]
 8009e36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e3a:	81a3      	strh	r3, [r4, #12]
 8009e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8009e40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e44:	6921      	ldr	r1, [r4, #16]
 8009e46:	464a      	mov	r2, r9
 8009e48:	f7ff fa08 	bl	800925c <memcpy>
 8009e4c:	89a3      	ldrh	r3, [r4, #12]
 8009e4e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009e52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e56:	81a3      	strh	r3, [r4, #12]
 8009e58:	6126      	str	r6, [r4, #16]
 8009e5a:	6165      	str	r5, [r4, #20]
 8009e5c:	444e      	add	r6, r9
 8009e5e:	eba5 0509 	sub.w	r5, r5, r9
 8009e62:	6026      	str	r6, [r4, #0]
 8009e64:	60a5      	str	r5, [r4, #8]
 8009e66:	463e      	mov	r6, r7
 8009e68:	42be      	cmp	r6, r7
 8009e6a:	d900      	bls.n	8009e6e <__ssputs_r+0x86>
 8009e6c:	463e      	mov	r6, r7
 8009e6e:	6820      	ldr	r0, [r4, #0]
 8009e70:	4632      	mov	r2, r6
 8009e72:	4641      	mov	r1, r8
 8009e74:	f000 fb72 	bl	800a55c <memmove>
 8009e78:	68a3      	ldr	r3, [r4, #8]
 8009e7a:	1b9b      	subs	r3, r3, r6
 8009e7c:	60a3      	str	r3, [r4, #8]
 8009e7e:	6823      	ldr	r3, [r4, #0]
 8009e80:	4433      	add	r3, r6
 8009e82:	6023      	str	r3, [r4, #0]
 8009e84:	2000      	movs	r0, #0
 8009e86:	e7db      	b.n	8009e40 <__ssputs_r+0x58>
 8009e88:	462a      	mov	r2, r5
 8009e8a:	f000 fb8d 	bl	800a5a8 <_realloc_r>
 8009e8e:	4606      	mov	r6, r0
 8009e90:	2800      	cmp	r0, #0
 8009e92:	d1e1      	bne.n	8009e58 <__ssputs_r+0x70>
 8009e94:	6921      	ldr	r1, [r4, #16]
 8009e96:	4650      	mov	r0, sl
 8009e98:	f7ff fec6 	bl	8009c28 <_free_r>
 8009e9c:	e7c7      	b.n	8009e2e <__ssputs_r+0x46>
	...

08009ea0 <_svfiprintf_r>:
 8009ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ea4:	4698      	mov	r8, r3
 8009ea6:	898b      	ldrh	r3, [r1, #12]
 8009ea8:	061b      	lsls	r3, r3, #24
 8009eaa:	b09d      	sub	sp, #116	; 0x74
 8009eac:	4607      	mov	r7, r0
 8009eae:	460d      	mov	r5, r1
 8009eb0:	4614      	mov	r4, r2
 8009eb2:	d50e      	bpl.n	8009ed2 <_svfiprintf_r+0x32>
 8009eb4:	690b      	ldr	r3, [r1, #16]
 8009eb6:	b963      	cbnz	r3, 8009ed2 <_svfiprintf_r+0x32>
 8009eb8:	2140      	movs	r1, #64	; 0x40
 8009eba:	f7ff ff21 	bl	8009d00 <_malloc_r>
 8009ebe:	6028      	str	r0, [r5, #0]
 8009ec0:	6128      	str	r0, [r5, #16]
 8009ec2:	b920      	cbnz	r0, 8009ece <_svfiprintf_r+0x2e>
 8009ec4:	230c      	movs	r3, #12
 8009ec6:	603b      	str	r3, [r7, #0]
 8009ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8009ecc:	e0d1      	b.n	800a072 <_svfiprintf_r+0x1d2>
 8009ece:	2340      	movs	r3, #64	; 0x40
 8009ed0:	616b      	str	r3, [r5, #20]
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	9309      	str	r3, [sp, #36]	; 0x24
 8009ed6:	2320      	movs	r3, #32
 8009ed8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009edc:	f8cd 800c 	str.w	r8, [sp, #12]
 8009ee0:	2330      	movs	r3, #48	; 0x30
 8009ee2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a08c <_svfiprintf_r+0x1ec>
 8009ee6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009eea:	f04f 0901 	mov.w	r9, #1
 8009eee:	4623      	mov	r3, r4
 8009ef0:	469a      	mov	sl, r3
 8009ef2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ef6:	b10a      	cbz	r2, 8009efc <_svfiprintf_r+0x5c>
 8009ef8:	2a25      	cmp	r2, #37	; 0x25
 8009efa:	d1f9      	bne.n	8009ef0 <_svfiprintf_r+0x50>
 8009efc:	ebba 0b04 	subs.w	fp, sl, r4
 8009f00:	d00b      	beq.n	8009f1a <_svfiprintf_r+0x7a>
 8009f02:	465b      	mov	r3, fp
 8009f04:	4622      	mov	r2, r4
 8009f06:	4629      	mov	r1, r5
 8009f08:	4638      	mov	r0, r7
 8009f0a:	f7ff ff6d 	bl	8009de8 <__ssputs_r>
 8009f0e:	3001      	adds	r0, #1
 8009f10:	f000 80aa 	beq.w	800a068 <_svfiprintf_r+0x1c8>
 8009f14:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f16:	445a      	add	r2, fp
 8009f18:	9209      	str	r2, [sp, #36]	; 0x24
 8009f1a:	f89a 3000 	ldrb.w	r3, [sl]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	f000 80a2 	beq.w	800a068 <_svfiprintf_r+0x1c8>
 8009f24:	2300      	movs	r3, #0
 8009f26:	f04f 32ff 	mov.w	r2, #4294967295
 8009f2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009f2e:	f10a 0a01 	add.w	sl, sl, #1
 8009f32:	9304      	str	r3, [sp, #16]
 8009f34:	9307      	str	r3, [sp, #28]
 8009f36:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009f3a:	931a      	str	r3, [sp, #104]	; 0x68
 8009f3c:	4654      	mov	r4, sl
 8009f3e:	2205      	movs	r2, #5
 8009f40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f44:	4851      	ldr	r0, [pc, #324]	; (800a08c <_svfiprintf_r+0x1ec>)
 8009f46:	f7f6 f95b 	bl	8000200 <memchr>
 8009f4a:	9a04      	ldr	r2, [sp, #16]
 8009f4c:	b9d8      	cbnz	r0, 8009f86 <_svfiprintf_r+0xe6>
 8009f4e:	06d0      	lsls	r0, r2, #27
 8009f50:	bf44      	itt	mi
 8009f52:	2320      	movmi	r3, #32
 8009f54:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009f58:	0711      	lsls	r1, r2, #28
 8009f5a:	bf44      	itt	mi
 8009f5c:	232b      	movmi	r3, #43	; 0x2b
 8009f5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009f62:	f89a 3000 	ldrb.w	r3, [sl]
 8009f66:	2b2a      	cmp	r3, #42	; 0x2a
 8009f68:	d015      	beq.n	8009f96 <_svfiprintf_r+0xf6>
 8009f6a:	9a07      	ldr	r2, [sp, #28]
 8009f6c:	4654      	mov	r4, sl
 8009f6e:	2000      	movs	r0, #0
 8009f70:	f04f 0c0a 	mov.w	ip, #10
 8009f74:	4621      	mov	r1, r4
 8009f76:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009f7a:	3b30      	subs	r3, #48	; 0x30
 8009f7c:	2b09      	cmp	r3, #9
 8009f7e:	d94e      	bls.n	800a01e <_svfiprintf_r+0x17e>
 8009f80:	b1b0      	cbz	r0, 8009fb0 <_svfiprintf_r+0x110>
 8009f82:	9207      	str	r2, [sp, #28]
 8009f84:	e014      	b.n	8009fb0 <_svfiprintf_r+0x110>
 8009f86:	eba0 0308 	sub.w	r3, r0, r8
 8009f8a:	fa09 f303 	lsl.w	r3, r9, r3
 8009f8e:	4313      	orrs	r3, r2
 8009f90:	9304      	str	r3, [sp, #16]
 8009f92:	46a2      	mov	sl, r4
 8009f94:	e7d2      	b.n	8009f3c <_svfiprintf_r+0x9c>
 8009f96:	9b03      	ldr	r3, [sp, #12]
 8009f98:	1d19      	adds	r1, r3, #4
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	9103      	str	r1, [sp, #12]
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	bfbb      	ittet	lt
 8009fa2:	425b      	neglt	r3, r3
 8009fa4:	f042 0202 	orrlt.w	r2, r2, #2
 8009fa8:	9307      	strge	r3, [sp, #28]
 8009faa:	9307      	strlt	r3, [sp, #28]
 8009fac:	bfb8      	it	lt
 8009fae:	9204      	strlt	r2, [sp, #16]
 8009fb0:	7823      	ldrb	r3, [r4, #0]
 8009fb2:	2b2e      	cmp	r3, #46	; 0x2e
 8009fb4:	d10c      	bne.n	8009fd0 <_svfiprintf_r+0x130>
 8009fb6:	7863      	ldrb	r3, [r4, #1]
 8009fb8:	2b2a      	cmp	r3, #42	; 0x2a
 8009fba:	d135      	bne.n	800a028 <_svfiprintf_r+0x188>
 8009fbc:	9b03      	ldr	r3, [sp, #12]
 8009fbe:	1d1a      	adds	r2, r3, #4
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	9203      	str	r2, [sp, #12]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	bfb8      	it	lt
 8009fc8:	f04f 33ff 	movlt.w	r3, #4294967295
 8009fcc:	3402      	adds	r4, #2
 8009fce:	9305      	str	r3, [sp, #20]
 8009fd0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a09c <_svfiprintf_r+0x1fc>
 8009fd4:	7821      	ldrb	r1, [r4, #0]
 8009fd6:	2203      	movs	r2, #3
 8009fd8:	4650      	mov	r0, sl
 8009fda:	f7f6 f911 	bl	8000200 <memchr>
 8009fde:	b140      	cbz	r0, 8009ff2 <_svfiprintf_r+0x152>
 8009fe0:	2340      	movs	r3, #64	; 0x40
 8009fe2:	eba0 000a 	sub.w	r0, r0, sl
 8009fe6:	fa03 f000 	lsl.w	r0, r3, r0
 8009fea:	9b04      	ldr	r3, [sp, #16]
 8009fec:	4303      	orrs	r3, r0
 8009fee:	3401      	adds	r4, #1
 8009ff0:	9304      	str	r3, [sp, #16]
 8009ff2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ff6:	4826      	ldr	r0, [pc, #152]	; (800a090 <_svfiprintf_r+0x1f0>)
 8009ff8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009ffc:	2206      	movs	r2, #6
 8009ffe:	f7f6 f8ff 	bl	8000200 <memchr>
 800a002:	2800      	cmp	r0, #0
 800a004:	d038      	beq.n	800a078 <_svfiprintf_r+0x1d8>
 800a006:	4b23      	ldr	r3, [pc, #140]	; (800a094 <_svfiprintf_r+0x1f4>)
 800a008:	bb1b      	cbnz	r3, 800a052 <_svfiprintf_r+0x1b2>
 800a00a:	9b03      	ldr	r3, [sp, #12]
 800a00c:	3307      	adds	r3, #7
 800a00e:	f023 0307 	bic.w	r3, r3, #7
 800a012:	3308      	adds	r3, #8
 800a014:	9303      	str	r3, [sp, #12]
 800a016:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a018:	4433      	add	r3, r6
 800a01a:	9309      	str	r3, [sp, #36]	; 0x24
 800a01c:	e767      	b.n	8009eee <_svfiprintf_r+0x4e>
 800a01e:	fb0c 3202 	mla	r2, ip, r2, r3
 800a022:	460c      	mov	r4, r1
 800a024:	2001      	movs	r0, #1
 800a026:	e7a5      	b.n	8009f74 <_svfiprintf_r+0xd4>
 800a028:	2300      	movs	r3, #0
 800a02a:	3401      	adds	r4, #1
 800a02c:	9305      	str	r3, [sp, #20]
 800a02e:	4619      	mov	r1, r3
 800a030:	f04f 0c0a 	mov.w	ip, #10
 800a034:	4620      	mov	r0, r4
 800a036:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a03a:	3a30      	subs	r2, #48	; 0x30
 800a03c:	2a09      	cmp	r2, #9
 800a03e:	d903      	bls.n	800a048 <_svfiprintf_r+0x1a8>
 800a040:	2b00      	cmp	r3, #0
 800a042:	d0c5      	beq.n	8009fd0 <_svfiprintf_r+0x130>
 800a044:	9105      	str	r1, [sp, #20]
 800a046:	e7c3      	b.n	8009fd0 <_svfiprintf_r+0x130>
 800a048:	fb0c 2101 	mla	r1, ip, r1, r2
 800a04c:	4604      	mov	r4, r0
 800a04e:	2301      	movs	r3, #1
 800a050:	e7f0      	b.n	800a034 <_svfiprintf_r+0x194>
 800a052:	ab03      	add	r3, sp, #12
 800a054:	9300      	str	r3, [sp, #0]
 800a056:	462a      	mov	r2, r5
 800a058:	4b0f      	ldr	r3, [pc, #60]	; (800a098 <_svfiprintf_r+0x1f8>)
 800a05a:	a904      	add	r1, sp, #16
 800a05c:	4638      	mov	r0, r7
 800a05e:	f7fb fedb 	bl	8005e18 <_printf_float>
 800a062:	1c42      	adds	r2, r0, #1
 800a064:	4606      	mov	r6, r0
 800a066:	d1d6      	bne.n	800a016 <_svfiprintf_r+0x176>
 800a068:	89ab      	ldrh	r3, [r5, #12]
 800a06a:	065b      	lsls	r3, r3, #25
 800a06c:	f53f af2c 	bmi.w	8009ec8 <_svfiprintf_r+0x28>
 800a070:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a072:	b01d      	add	sp, #116	; 0x74
 800a074:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a078:	ab03      	add	r3, sp, #12
 800a07a:	9300      	str	r3, [sp, #0]
 800a07c:	462a      	mov	r2, r5
 800a07e:	4b06      	ldr	r3, [pc, #24]	; (800a098 <_svfiprintf_r+0x1f8>)
 800a080:	a904      	add	r1, sp, #16
 800a082:	4638      	mov	r0, r7
 800a084:	f7fc f96c 	bl	8006360 <_printf_i>
 800a088:	e7eb      	b.n	800a062 <_svfiprintf_r+0x1c2>
 800a08a:	bf00      	nop
 800a08c:	0800ab84 	.word	0x0800ab84
 800a090:	0800ab8e 	.word	0x0800ab8e
 800a094:	08005e19 	.word	0x08005e19
 800a098:	08009de9 	.word	0x08009de9
 800a09c:	0800ab8a 	.word	0x0800ab8a

0800a0a0 <__sfputc_r>:
 800a0a0:	6893      	ldr	r3, [r2, #8]
 800a0a2:	3b01      	subs	r3, #1
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	b410      	push	{r4}
 800a0a8:	6093      	str	r3, [r2, #8]
 800a0aa:	da08      	bge.n	800a0be <__sfputc_r+0x1e>
 800a0ac:	6994      	ldr	r4, [r2, #24]
 800a0ae:	42a3      	cmp	r3, r4
 800a0b0:	db01      	blt.n	800a0b6 <__sfputc_r+0x16>
 800a0b2:	290a      	cmp	r1, #10
 800a0b4:	d103      	bne.n	800a0be <__sfputc_r+0x1e>
 800a0b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a0ba:	f7fd bbe9 	b.w	8007890 <__swbuf_r>
 800a0be:	6813      	ldr	r3, [r2, #0]
 800a0c0:	1c58      	adds	r0, r3, #1
 800a0c2:	6010      	str	r0, [r2, #0]
 800a0c4:	7019      	strb	r1, [r3, #0]
 800a0c6:	4608      	mov	r0, r1
 800a0c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a0cc:	4770      	bx	lr

0800a0ce <__sfputs_r>:
 800a0ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0d0:	4606      	mov	r6, r0
 800a0d2:	460f      	mov	r7, r1
 800a0d4:	4614      	mov	r4, r2
 800a0d6:	18d5      	adds	r5, r2, r3
 800a0d8:	42ac      	cmp	r4, r5
 800a0da:	d101      	bne.n	800a0e0 <__sfputs_r+0x12>
 800a0dc:	2000      	movs	r0, #0
 800a0de:	e007      	b.n	800a0f0 <__sfputs_r+0x22>
 800a0e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0e4:	463a      	mov	r2, r7
 800a0e6:	4630      	mov	r0, r6
 800a0e8:	f7ff ffda 	bl	800a0a0 <__sfputc_r>
 800a0ec:	1c43      	adds	r3, r0, #1
 800a0ee:	d1f3      	bne.n	800a0d8 <__sfputs_r+0xa>
 800a0f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a0f4 <_vfiprintf_r>:
 800a0f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0f8:	460d      	mov	r5, r1
 800a0fa:	b09d      	sub	sp, #116	; 0x74
 800a0fc:	4614      	mov	r4, r2
 800a0fe:	4698      	mov	r8, r3
 800a100:	4606      	mov	r6, r0
 800a102:	b118      	cbz	r0, 800a10c <_vfiprintf_r+0x18>
 800a104:	6983      	ldr	r3, [r0, #24]
 800a106:	b90b      	cbnz	r3, 800a10c <_vfiprintf_r+0x18>
 800a108:	f7fe fc16 	bl	8008938 <__sinit>
 800a10c:	4b89      	ldr	r3, [pc, #548]	; (800a334 <_vfiprintf_r+0x240>)
 800a10e:	429d      	cmp	r5, r3
 800a110:	d11b      	bne.n	800a14a <_vfiprintf_r+0x56>
 800a112:	6875      	ldr	r5, [r6, #4]
 800a114:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a116:	07d9      	lsls	r1, r3, #31
 800a118:	d405      	bmi.n	800a126 <_vfiprintf_r+0x32>
 800a11a:	89ab      	ldrh	r3, [r5, #12]
 800a11c:	059a      	lsls	r2, r3, #22
 800a11e:	d402      	bmi.n	800a126 <_vfiprintf_r+0x32>
 800a120:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a122:	f7ff f81a 	bl	800915a <__retarget_lock_acquire_recursive>
 800a126:	89ab      	ldrh	r3, [r5, #12]
 800a128:	071b      	lsls	r3, r3, #28
 800a12a:	d501      	bpl.n	800a130 <_vfiprintf_r+0x3c>
 800a12c:	692b      	ldr	r3, [r5, #16]
 800a12e:	b9eb      	cbnz	r3, 800a16c <_vfiprintf_r+0x78>
 800a130:	4629      	mov	r1, r5
 800a132:	4630      	mov	r0, r6
 800a134:	f7fd fbfe 	bl	8007934 <__swsetup_r>
 800a138:	b1c0      	cbz	r0, 800a16c <_vfiprintf_r+0x78>
 800a13a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a13c:	07dc      	lsls	r4, r3, #31
 800a13e:	d50e      	bpl.n	800a15e <_vfiprintf_r+0x6a>
 800a140:	f04f 30ff 	mov.w	r0, #4294967295
 800a144:	b01d      	add	sp, #116	; 0x74
 800a146:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a14a:	4b7b      	ldr	r3, [pc, #492]	; (800a338 <_vfiprintf_r+0x244>)
 800a14c:	429d      	cmp	r5, r3
 800a14e:	d101      	bne.n	800a154 <_vfiprintf_r+0x60>
 800a150:	68b5      	ldr	r5, [r6, #8]
 800a152:	e7df      	b.n	800a114 <_vfiprintf_r+0x20>
 800a154:	4b79      	ldr	r3, [pc, #484]	; (800a33c <_vfiprintf_r+0x248>)
 800a156:	429d      	cmp	r5, r3
 800a158:	bf08      	it	eq
 800a15a:	68f5      	ldreq	r5, [r6, #12]
 800a15c:	e7da      	b.n	800a114 <_vfiprintf_r+0x20>
 800a15e:	89ab      	ldrh	r3, [r5, #12]
 800a160:	0598      	lsls	r0, r3, #22
 800a162:	d4ed      	bmi.n	800a140 <_vfiprintf_r+0x4c>
 800a164:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a166:	f7fe fff9 	bl	800915c <__retarget_lock_release_recursive>
 800a16a:	e7e9      	b.n	800a140 <_vfiprintf_r+0x4c>
 800a16c:	2300      	movs	r3, #0
 800a16e:	9309      	str	r3, [sp, #36]	; 0x24
 800a170:	2320      	movs	r3, #32
 800a172:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a176:	f8cd 800c 	str.w	r8, [sp, #12]
 800a17a:	2330      	movs	r3, #48	; 0x30
 800a17c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a340 <_vfiprintf_r+0x24c>
 800a180:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a184:	f04f 0901 	mov.w	r9, #1
 800a188:	4623      	mov	r3, r4
 800a18a:	469a      	mov	sl, r3
 800a18c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a190:	b10a      	cbz	r2, 800a196 <_vfiprintf_r+0xa2>
 800a192:	2a25      	cmp	r2, #37	; 0x25
 800a194:	d1f9      	bne.n	800a18a <_vfiprintf_r+0x96>
 800a196:	ebba 0b04 	subs.w	fp, sl, r4
 800a19a:	d00b      	beq.n	800a1b4 <_vfiprintf_r+0xc0>
 800a19c:	465b      	mov	r3, fp
 800a19e:	4622      	mov	r2, r4
 800a1a0:	4629      	mov	r1, r5
 800a1a2:	4630      	mov	r0, r6
 800a1a4:	f7ff ff93 	bl	800a0ce <__sfputs_r>
 800a1a8:	3001      	adds	r0, #1
 800a1aa:	f000 80aa 	beq.w	800a302 <_vfiprintf_r+0x20e>
 800a1ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a1b0:	445a      	add	r2, fp
 800a1b2:	9209      	str	r2, [sp, #36]	; 0x24
 800a1b4:	f89a 3000 	ldrb.w	r3, [sl]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	f000 80a2 	beq.w	800a302 <_vfiprintf_r+0x20e>
 800a1be:	2300      	movs	r3, #0
 800a1c0:	f04f 32ff 	mov.w	r2, #4294967295
 800a1c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a1c8:	f10a 0a01 	add.w	sl, sl, #1
 800a1cc:	9304      	str	r3, [sp, #16]
 800a1ce:	9307      	str	r3, [sp, #28]
 800a1d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a1d4:	931a      	str	r3, [sp, #104]	; 0x68
 800a1d6:	4654      	mov	r4, sl
 800a1d8:	2205      	movs	r2, #5
 800a1da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1de:	4858      	ldr	r0, [pc, #352]	; (800a340 <_vfiprintf_r+0x24c>)
 800a1e0:	f7f6 f80e 	bl	8000200 <memchr>
 800a1e4:	9a04      	ldr	r2, [sp, #16]
 800a1e6:	b9d8      	cbnz	r0, 800a220 <_vfiprintf_r+0x12c>
 800a1e8:	06d1      	lsls	r1, r2, #27
 800a1ea:	bf44      	itt	mi
 800a1ec:	2320      	movmi	r3, #32
 800a1ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a1f2:	0713      	lsls	r3, r2, #28
 800a1f4:	bf44      	itt	mi
 800a1f6:	232b      	movmi	r3, #43	; 0x2b
 800a1f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a1fc:	f89a 3000 	ldrb.w	r3, [sl]
 800a200:	2b2a      	cmp	r3, #42	; 0x2a
 800a202:	d015      	beq.n	800a230 <_vfiprintf_r+0x13c>
 800a204:	9a07      	ldr	r2, [sp, #28]
 800a206:	4654      	mov	r4, sl
 800a208:	2000      	movs	r0, #0
 800a20a:	f04f 0c0a 	mov.w	ip, #10
 800a20e:	4621      	mov	r1, r4
 800a210:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a214:	3b30      	subs	r3, #48	; 0x30
 800a216:	2b09      	cmp	r3, #9
 800a218:	d94e      	bls.n	800a2b8 <_vfiprintf_r+0x1c4>
 800a21a:	b1b0      	cbz	r0, 800a24a <_vfiprintf_r+0x156>
 800a21c:	9207      	str	r2, [sp, #28]
 800a21e:	e014      	b.n	800a24a <_vfiprintf_r+0x156>
 800a220:	eba0 0308 	sub.w	r3, r0, r8
 800a224:	fa09 f303 	lsl.w	r3, r9, r3
 800a228:	4313      	orrs	r3, r2
 800a22a:	9304      	str	r3, [sp, #16]
 800a22c:	46a2      	mov	sl, r4
 800a22e:	e7d2      	b.n	800a1d6 <_vfiprintf_r+0xe2>
 800a230:	9b03      	ldr	r3, [sp, #12]
 800a232:	1d19      	adds	r1, r3, #4
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	9103      	str	r1, [sp, #12]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	bfbb      	ittet	lt
 800a23c:	425b      	neglt	r3, r3
 800a23e:	f042 0202 	orrlt.w	r2, r2, #2
 800a242:	9307      	strge	r3, [sp, #28]
 800a244:	9307      	strlt	r3, [sp, #28]
 800a246:	bfb8      	it	lt
 800a248:	9204      	strlt	r2, [sp, #16]
 800a24a:	7823      	ldrb	r3, [r4, #0]
 800a24c:	2b2e      	cmp	r3, #46	; 0x2e
 800a24e:	d10c      	bne.n	800a26a <_vfiprintf_r+0x176>
 800a250:	7863      	ldrb	r3, [r4, #1]
 800a252:	2b2a      	cmp	r3, #42	; 0x2a
 800a254:	d135      	bne.n	800a2c2 <_vfiprintf_r+0x1ce>
 800a256:	9b03      	ldr	r3, [sp, #12]
 800a258:	1d1a      	adds	r2, r3, #4
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	9203      	str	r2, [sp, #12]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	bfb8      	it	lt
 800a262:	f04f 33ff 	movlt.w	r3, #4294967295
 800a266:	3402      	adds	r4, #2
 800a268:	9305      	str	r3, [sp, #20]
 800a26a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a350 <_vfiprintf_r+0x25c>
 800a26e:	7821      	ldrb	r1, [r4, #0]
 800a270:	2203      	movs	r2, #3
 800a272:	4650      	mov	r0, sl
 800a274:	f7f5 ffc4 	bl	8000200 <memchr>
 800a278:	b140      	cbz	r0, 800a28c <_vfiprintf_r+0x198>
 800a27a:	2340      	movs	r3, #64	; 0x40
 800a27c:	eba0 000a 	sub.w	r0, r0, sl
 800a280:	fa03 f000 	lsl.w	r0, r3, r0
 800a284:	9b04      	ldr	r3, [sp, #16]
 800a286:	4303      	orrs	r3, r0
 800a288:	3401      	adds	r4, #1
 800a28a:	9304      	str	r3, [sp, #16]
 800a28c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a290:	482c      	ldr	r0, [pc, #176]	; (800a344 <_vfiprintf_r+0x250>)
 800a292:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a296:	2206      	movs	r2, #6
 800a298:	f7f5 ffb2 	bl	8000200 <memchr>
 800a29c:	2800      	cmp	r0, #0
 800a29e:	d03f      	beq.n	800a320 <_vfiprintf_r+0x22c>
 800a2a0:	4b29      	ldr	r3, [pc, #164]	; (800a348 <_vfiprintf_r+0x254>)
 800a2a2:	bb1b      	cbnz	r3, 800a2ec <_vfiprintf_r+0x1f8>
 800a2a4:	9b03      	ldr	r3, [sp, #12]
 800a2a6:	3307      	adds	r3, #7
 800a2a8:	f023 0307 	bic.w	r3, r3, #7
 800a2ac:	3308      	adds	r3, #8
 800a2ae:	9303      	str	r3, [sp, #12]
 800a2b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2b2:	443b      	add	r3, r7
 800a2b4:	9309      	str	r3, [sp, #36]	; 0x24
 800a2b6:	e767      	b.n	800a188 <_vfiprintf_r+0x94>
 800a2b8:	fb0c 3202 	mla	r2, ip, r2, r3
 800a2bc:	460c      	mov	r4, r1
 800a2be:	2001      	movs	r0, #1
 800a2c0:	e7a5      	b.n	800a20e <_vfiprintf_r+0x11a>
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	3401      	adds	r4, #1
 800a2c6:	9305      	str	r3, [sp, #20]
 800a2c8:	4619      	mov	r1, r3
 800a2ca:	f04f 0c0a 	mov.w	ip, #10
 800a2ce:	4620      	mov	r0, r4
 800a2d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a2d4:	3a30      	subs	r2, #48	; 0x30
 800a2d6:	2a09      	cmp	r2, #9
 800a2d8:	d903      	bls.n	800a2e2 <_vfiprintf_r+0x1ee>
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d0c5      	beq.n	800a26a <_vfiprintf_r+0x176>
 800a2de:	9105      	str	r1, [sp, #20]
 800a2e0:	e7c3      	b.n	800a26a <_vfiprintf_r+0x176>
 800a2e2:	fb0c 2101 	mla	r1, ip, r1, r2
 800a2e6:	4604      	mov	r4, r0
 800a2e8:	2301      	movs	r3, #1
 800a2ea:	e7f0      	b.n	800a2ce <_vfiprintf_r+0x1da>
 800a2ec:	ab03      	add	r3, sp, #12
 800a2ee:	9300      	str	r3, [sp, #0]
 800a2f0:	462a      	mov	r2, r5
 800a2f2:	4b16      	ldr	r3, [pc, #88]	; (800a34c <_vfiprintf_r+0x258>)
 800a2f4:	a904      	add	r1, sp, #16
 800a2f6:	4630      	mov	r0, r6
 800a2f8:	f7fb fd8e 	bl	8005e18 <_printf_float>
 800a2fc:	4607      	mov	r7, r0
 800a2fe:	1c78      	adds	r0, r7, #1
 800a300:	d1d6      	bne.n	800a2b0 <_vfiprintf_r+0x1bc>
 800a302:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a304:	07d9      	lsls	r1, r3, #31
 800a306:	d405      	bmi.n	800a314 <_vfiprintf_r+0x220>
 800a308:	89ab      	ldrh	r3, [r5, #12]
 800a30a:	059a      	lsls	r2, r3, #22
 800a30c:	d402      	bmi.n	800a314 <_vfiprintf_r+0x220>
 800a30e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a310:	f7fe ff24 	bl	800915c <__retarget_lock_release_recursive>
 800a314:	89ab      	ldrh	r3, [r5, #12]
 800a316:	065b      	lsls	r3, r3, #25
 800a318:	f53f af12 	bmi.w	800a140 <_vfiprintf_r+0x4c>
 800a31c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a31e:	e711      	b.n	800a144 <_vfiprintf_r+0x50>
 800a320:	ab03      	add	r3, sp, #12
 800a322:	9300      	str	r3, [sp, #0]
 800a324:	462a      	mov	r2, r5
 800a326:	4b09      	ldr	r3, [pc, #36]	; (800a34c <_vfiprintf_r+0x258>)
 800a328:	a904      	add	r1, sp, #16
 800a32a:	4630      	mov	r0, r6
 800a32c:	f7fc f818 	bl	8006360 <_printf_i>
 800a330:	e7e4      	b.n	800a2fc <_vfiprintf_r+0x208>
 800a332:	bf00      	nop
 800a334:	0800a96c 	.word	0x0800a96c
 800a338:	0800a98c 	.word	0x0800a98c
 800a33c:	0800a94c 	.word	0x0800a94c
 800a340:	0800ab84 	.word	0x0800ab84
 800a344:	0800ab8e 	.word	0x0800ab8e
 800a348:	08005e19 	.word	0x08005e19
 800a34c:	0800a0cf 	.word	0x0800a0cf
 800a350:	0800ab8a 	.word	0x0800ab8a
 800a354:	00000000 	.word	0x00000000

0800a358 <nan>:
 800a358:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a360 <nan+0x8>
 800a35c:	4770      	bx	lr
 800a35e:	bf00      	nop
 800a360:	00000000 	.word	0x00000000
 800a364:	7ff80000 	.word	0x7ff80000

0800a368 <_sbrk_r>:
 800a368:	b538      	push	{r3, r4, r5, lr}
 800a36a:	4d06      	ldr	r5, [pc, #24]	; (800a384 <_sbrk_r+0x1c>)
 800a36c:	2300      	movs	r3, #0
 800a36e:	4604      	mov	r4, r0
 800a370:	4608      	mov	r0, r1
 800a372:	602b      	str	r3, [r5, #0]
 800a374:	f7f7 fa1c 	bl	80017b0 <_sbrk>
 800a378:	1c43      	adds	r3, r0, #1
 800a37a:	d102      	bne.n	800a382 <_sbrk_r+0x1a>
 800a37c:	682b      	ldr	r3, [r5, #0]
 800a37e:	b103      	cbz	r3, 800a382 <_sbrk_r+0x1a>
 800a380:	6023      	str	r3, [r4, #0]
 800a382:	bd38      	pop	{r3, r4, r5, pc}
 800a384:	2000046c 	.word	0x2000046c

0800a388 <__sread>:
 800a388:	b510      	push	{r4, lr}
 800a38a:	460c      	mov	r4, r1
 800a38c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a390:	f000 f93a 	bl	800a608 <_read_r>
 800a394:	2800      	cmp	r0, #0
 800a396:	bfab      	itete	ge
 800a398:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a39a:	89a3      	ldrhlt	r3, [r4, #12]
 800a39c:	181b      	addge	r3, r3, r0
 800a39e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a3a2:	bfac      	ite	ge
 800a3a4:	6563      	strge	r3, [r4, #84]	; 0x54
 800a3a6:	81a3      	strhlt	r3, [r4, #12]
 800a3a8:	bd10      	pop	{r4, pc}

0800a3aa <__swrite>:
 800a3aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3ae:	461f      	mov	r7, r3
 800a3b0:	898b      	ldrh	r3, [r1, #12]
 800a3b2:	05db      	lsls	r3, r3, #23
 800a3b4:	4605      	mov	r5, r0
 800a3b6:	460c      	mov	r4, r1
 800a3b8:	4616      	mov	r6, r2
 800a3ba:	d505      	bpl.n	800a3c8 <__swrite+0x1e>
 800a3bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3c0:	2302      	movs	r3, #2
 800a3c2:	2200      	movs	r2, #0
 800a3c4:	f000 f8b8 	bl	800a538 <_lseek_r>
 800a3c8:	89a3      	ldrh	r3, [r4, #12]
 800a3ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a3ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a3d2:	81a3      	strh	r3, [r4, #12]
 800a3d4:	4632      	mov	r2, r6
 800a3d6:	463b      	mov	r3, r7
 800a3d8:	4628      	mov	r0, r5
 800a3da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a3de:	f000 b837 	b.w	800a450 <_write_r>

0800a3e2 <__sseek>:
 800a3e2:	b510      	push	{r4, lr}
 800a3e4:	460c      	mov	r4, r1
 800a3e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3ea:	f000 f8a5 	bl	800a538 <_lseek_r>
 800a3ee:	1c43      	adds	r3, r0, #1
 800a3f0:	89a3      	ldrh	r3, [r4, #12]
 800a3f2:	bf15      	itete	ne
 800a3f4:	6560      	strne	r0, [r4, #84]	; 0x54
 800a3f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a3fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a3fe:	81a3      	strheq	r3, [r4, #12]
 800a400:	bf18      	it	ne
 800a402:	81a3      	strhne	r3, [r4, #12]
 800a404:	bd10      	pop	{r4, pc}

0800a406 <__sclose>:
 800a406:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a40a:	f000 b851 	b.w	800a4b0 <_close_r>

0800a40e <strncmp>:
 800a40e:	b510      	push	{r4, lr}
 800a410:	b17a      	cbz	r2, 800a432 <strncmp+0x24>
 800a412:	4603      	mov	r3, r0
 800a414:	3901      	subs	r1, #1
 800a416:	1884      	adds	r4, r0, r2
 800a418:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a41c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a420:	4290      	cmp	r0, r2
 800a422:	d101      	bne.n	800a428 <strncmp+0x1a>
 800a424:	42a3      	cmp	r3, r4
 800a426:	d101      	bne.n	800a42c <strncmp+0x1e>
 800a428:	1a80      	subs	r0, r0, r2
 800a42a:	bd10      	pop	{r4, pc}
 800a42c:	2800      	cmp	r0, #0
 800a42e:	d1f3      	bne.n	800a418 <strncmp+0xa>
 800a430:	e7fa      	b.n	800a428 <strncmp+0x1a>
 800a432:	4610      	mov	r0, r2
 800a434:	e7f9      	b.n	800a42a <strncmp+0x1c>

0800a436 <__ascii_wctomb>:
 800a436:	b149      	cbz	r1, 800a44c <__ascii_wctomb+0x16>
 800a438:	2aff      	cmp	r2, #255	; 0xff
 800a43a:	bf85      	ittet	hi
 800a43c:	238a      	movhi	r3, #138	; 0x8a
 800a43e:	6003      	strhi	r3, [r0, #0]
 800a440:	700a      	strbls	r2, [r1, #0]
 800a442:	f04f 30ff 	movhi.w	r0, #4294967295
 800a446:	bf98      	it	ls
 800a448:	2001      	movls	r0, #1
 800a44a:	4770      	bx	lr
 800a44c:	4608      	mov	r0, r1
 800a44e:	4770      	bx	lr

0800a450 <_write_r>:
 800a450:	b538      	push	{r3, r4, r5, lr}
 800a452:	4d07      	ldr	r5, [pc, #28]	; (800a470 <_write_r+0x20>)
 800a454:	4604      	mov	r4, r0
 800a456:	4608      	mov	r0, r1
 800a458:	4611      	mov	r1, r2
 800a45a:	2200      	movs	r2, #0
 800a45c:	602a      	str	r2, [r5, #0]
 800a45e:	461a      	mov	r2, r3
 800a460:	f7f7 f898 	bl	8001594 <_write>
 800a464:	1c43      	adds	r3, r0, #1
 800a466:	d102      	bne.n	800a46e <_write_r+0x1e>
 800a468:	682b      	ldr	r3, [r5, #0]
 800a46a:	b103      	cbz	r3, 800a46e <_write_r+0x1e>
 800a46c:	6023      	str	r3, [r4, #0]
 800a46e:	bd38      	pop	{r3, r4, r5, pc}
 800a470:	2000046c 	.word	0x2000046c

0800a474 <__assert_func>:
 800a474:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a476:	4614      	mov	r4, r2
 800a478:	461a      	mov	r2, r3
 800a47a:	4b09      	ldr	r3, [pc, #36]	; (800a4a0 <__assert_func+0x2c>)
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	4605      	mov	r5, r0
 800a480:	68d8      	ldr	r0, [r3, #12]
 800a482:	b14c      	cbz	r4, 800a498 <__assert_func+0x24>
 800a484:	4b07      	ldr	r3, [pc, #28]	; (800a4a4 <__assert_func+0x30>)
 800a486:	9100      	str	r1, [sp, #0]
 800a488:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a48c:	4906      	ldr	r1, [pc, #24]	; (800a4a8 <__assert_func+0x34>)
 800a48e:	462b      	mov	r3, r5
 800a490:	f000 f81e 	bl	800a4d0 <fiprintf>
 800a494:	f000 f8ca 	bl	800a62c <abort>
 800a498:	4b04      	ldr	r3, [pc, #16]	; (800a4ac <__assert_func+0x38>)
 800a49a:	461c      	mov	r4, r3
 800a49c:	e7f3      	b.n	800a486 <__assert_func+0x12>
 800a49e:	bf00      	nop
 800a4a0:	2000000c 	.word	0x2000000c
 800a4a4:	0800ab95 	.word	0x0800ab95
 800a4a8:	0800aba2 	.word	0x0800aba2
 800a4ac:	0800abd0 	.word	0x0800abd0

0800a4b0 <_close_r>:
 800a4b0:	b538      	push	{r3, r4, r5, lr}
 800a4b2:	4d06      	ldr	r5, [pc, #24]	; (800a4cc <_close_r+0x1c>)
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	4604      	mov	r4, r0
 800a4b8:	4608      	mov	r0, r1
 800a4ba:	602b      	str	r3, [r5, #0]
 800a4bc:	f7f7 f943 	bl	8001746 <_close>
 800a4c0:	1c43      	adds	r3, r0, #1
 800a4c2:	d102      	bne.n	800a4ca <_close_r+0x1a>
 800a4c4:	682b      	ldr	r3, [r5, #0]
 800a4c6:	b103      	cbz	r3, 800a4ca <_close_r+0x1a>
 800a4c8:	6023      	str	r3, [r4, #0]
 800a4ca:	bd38      	pop	{r3, r4, r5, pc}
 800a4cc:	2000046c 	.word	0x2000046c

0800a4d0 <fiprintf>:
 800a4d0:	b40e      	push	{r1, r2, r3}
 800a4d2:	b503      	push	{r0, r1, lr}
 800a4d4:	4601      	mov	r1, r0
 800a4d6:	ab03      	add	r3, sp, #12
 800a4d8:	4805      	ldr	r0, [pc, #20]	; (800a4f0 <fiprintf+0x20>)
 800a4da:	f853 2b04 	ldr.w	r2, [r3], #4
 800a4de:	6800      	ldr	r0, [r0, #0]
 800a4e0:	9301      	str	r3, [sp, #4]
 800a4e2:	f7ff fe07 	bl	800a0f4 <_vfiprintf_r>
 800a4e6:	b002      	add	sp, #8
 800a4e8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a4ec:	b003      	add	sp, #12
 800a4ee:	4770      	bx	lr
 800a4f0:	2000000c 	.word	0x2000000c

0800a4f4 <_fstat_r>:
 800a4f4:	b538      	push	{r3, r4, r5, lr}
 800a4f6:	4d07      	ldr	r5, [pc, #28]	; (800a514 <_fstat_r+0x20>)
 800a4f8:	2300      	movs	r3, #0
 800a4fa:	4604      	mov	r4, r0
 800a4fc:	4608      	mov	r0, r1
 800a4fe:	4611      	mov	r1, r2
 800a500:	602b      	str	r3, [r5, #0]
 800a502:	f7f7 f92c 	bl	800175e <_fstat>
 800a506:	1c43      	adds	r3, r0, #1
 800a508:	d102      	bne.n	800a510 <_fstat_r+0x1c>
 800a50a:	682b      	ldr	r3, [r5, #0]
 800a50c:	b103      	cbz	r3, 800a510 <_fstat_r+0x1c>
 800a50e:	6023      	str	r3, [r4, #0]
 800a510:	bd38      	pop	{r3, r4, r5, pc}
 800a512:	bf00      	nop
 800a514:	2000046c 	.word	0x2000046c

0800a518 <_isatty_r>:
 800a518:	b538      	push	{r3, r4, r5, lr}
 800a51a:	4d06      	ldr	r5, [pc, #24]	; (800a534 <_isatty_r+0x1c>)
 800a51c:	2300      	movs	r3, #0
 800a51e:	4604      	mov	r4, r0
 800a520:	4608      	mov	r0, r1
 800a522:	602b      	str	r3, [r5, #0]
 800a524:	f7f7 f92b 	bl	800177e <_isatty>
 800a528:	1c43      	adds	r3, r0, #1
 800a52a:	d102      	bne.n	800a532 <_isatty_r+0x1a>
 800a52c:	682b      	ldr	r3, [r5, #0]
 800a52e:	b103      	cbz	r3, 800a532 <_isatty_r+0x1a>
 800a530:	6023      	str	r3, [r4, #0]
 800a532:	bd38      	pop	{r3, r4, r5, pc}
 800a534:	2000046c 	.word	0x2000046c

0800a538 <_lseek_r>:
 800a538:	b538      	push	{r3, r4, r5, lr}
 800a53a:	4d07      	ldr	r5, [pc, #28]	; (800a558 <_lseek_r+0x20>)
 800a53c:	4604      	mov	r4, r0
 800a53e:	4608      	mov	r0, r1
 800a540:	4611      	mov	r1, r2
 800a542:	2200      	movs	r2, #0
 800a544:	602a      	str	r2, [r5, #0]
 800a546:	461a      	mov	r2, r3
 800a548:	f7f7 f924 	bl	8001794 <_lseek>
 800a54c:	1c43      	adds	r3, r0, #1
 800a54e:	d102      	bne.n	800a556 <_lseek_r+0x1e>
 800a550:	682b      	ldr	r3, [r5, #0]
 800a552:	b103      	cbz	r3, 800a556 <_lseek_r+0x1e>
 800a554:	6023      	str	r3, [r4, #0]
 800a556:	bd38      	pop	{r3, r4, r5, pc}
 800a558:	2000046c 	.word	0x2000046c

0800a55c <memmove>:
 800a55c:	4288      	cmp	r0, r1
 800a55e:	b510      	push	{r4, lr}
 800a560:	eb01 0402 	add.w	r4, r1, r2
 800a564:	d902      	bls.n	800a56c <memmove+0x10>
 800a566:	4284      	cmp	r4, r0
 800a568:	4623      	mov	r3, r4
 800a56a:	d807      	bhi.n	800a57c <memmove+0x20>
 800a56c:	1e43      	subs	r3, r0, #1
 800a56e:	42a1      	cmp	r1, r4
 800a570:	d008      	beq.n	800a584 <memmove+0x28>
 800a572:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a576:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a57a:	e7f8      	b.n	800a56e <memmove+0x12>
 800a57c:	4402      	add	r2, r0
 800a57e:	4601      	mov	r1, r0
 800a580:	428a      	cmp	r2, r1
 800a582:	d100      	bne.n	800a586 <memmove+0x2a>
 800a584:	bd10      	pop	{r4, pc}
 800a586:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a58a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a58e:	e7f7      	b.n	800a580 <memmove+0x24>

0800a590 <__malloc_lock>:
 800a590:	4801      	ldr	r0, [pc, #4]	; (800a598 <__malloc_lock+0x8>)
 800a592:	f7fe bde2 	b.w	800915a <__retarget_lock_acquire_recursive>
 800a596:	bf00      	nop
 800a598:	20000460 	.word	0x20000460

0800a59c <__malloc_unlock>:
 800a59c:	4801      	ldr	r0, [pc, #4]	; (800a5a4 <__malloc_unlock+0x8>)
 800a59e:	f7fe bddd 	b.w	800915c <__retarget_lock_release_recursive>
 800a5a2:	bf00      	nop
 800a5a4:	20000460 	.word	0x20000460

0800a5a8 <_realloc_r>:
 800a5a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5ac:	4680      	mov	r8, r0
 800a5ae:	4614      	mov	r4, r2
 800a5b0:	460e      	mov	r6, r1
 800a5b2:	b921      	cbnz	r1, 800a5be <_realloc_r+0x16>
 800a5b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a5b8:	4611      	mov	r1, r2
 800a5ba:	f7ff bba1 	b.w	8009d00 <_malloc_r>
 800a5be:	b92a      	cbnz	r2, 800a5cc <_realloc_r+0x24>
 800a5c0:	f7ff fb32 	bl	8009c28 <_free_r>
 800a5c4:	4625      	mov	r5, r4
 800a5c6:	4628      	mov	r0, r5
 800a5c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5cc:	f000 f835 	bl	800a63a <_malloc_usable_size_r>
 800a5d0:	4284      	cmp	r4, r0
 800a5d2:	4607      	mov	r7, r0
 800a5d4:	d802      	bhi.n	800a5dc <_realloc_r+0x34>
 800a5d6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a5da:	d812      	bhi.n	800a602 <_realloc_r+0x5a>
 800a5dc:	4621      	mov	r1, r4
 800a5de:	4640      	mov	r0, r8
 800a5e0:	f7ff fb8e 	bl	8009d00 <_malloc_r>
 800a5e4:	4605      	mov	r5, r0
 800a5e6:	2800      	cmp	r0, #0
 800a5e8:	d0ed      	beq.n	800a5c6 <_realloc_r+0x1e>
 800a5ea:	42bc      	cmp	r4, r7
 800a5ec:	4622      	mov	r2, r4
 800a5ee:	4631      	mov	r1, r6
 800a5f0:	bf28      	it	cs
 800a5f2:	463a      	movcs	r2, r7
 800a5f4:	f7fe fe32 	bl	800925c <memcpy>
 800a5f8:	4631      	mov	r1, r6
 800a5fa:	4640      	mov	r0, r8
 800a5fc:	f7ff fb14 	bl	8009c28 <_free_r>
 800a600:	e7e1      	b.n	800a5c6 <_realloc_r+0x1e>
 800a602:	4635      	mov	r5, r6
 800a604:	e7df      	b.n	800a5c6 <_realloc_r+0x1e>
	...

0800a608 <_read_r>:
 800a608:	b538      	push	{r3, r4, r5, lr}
 800a60a:	4d07      	ldr	r5, [pc, #28]	; (800a628 <_read_r+0x20>)
 800a60c:	4604      	mov	r4, r0
 800a60e:	4608      	mov	r0, r1
 800a610:	4611      	mov	r1, r2
 800a612:	2200      	movs	r2, #0
 800a614:	602a      	str	r2, [r5, #0]
 800a616:	461a      	mov	r2, r3
 800a618:	f7f7 f878 	bl	800170c <_read>
 800a61c:	1c43      	adds	r3, r0, #1
 800a61e:	d102      	bne.n	800a626 <_read_r+0x1e>
 800a620:	682b      	ldr	r3, [r5, #0]
 800a622:	b103      	cbz	r3, 800a626 <_read_r+0x1e>
 800a624:	6023      	str	r3, [r4, #0]
 800a626:	bd38      	pop	{r3, r4, r5, pc}
 800a628:	2000046c 	.word	0x2000046c

0800a62c <abort>:
 800a62c:	b508      	push	{r3, lr}
 800a62e:	2006      	movs	r0, #6
 800a630:	f000 f834 	bl	800a69c <raise>
 800a634:	2001      	movs	r0, #1
 800a636:	f7f7 f85f 	bl	80016f8 <_exit>

0800a63a <_malloc_usable_size_r>:
 800a63a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a63e:	1f18      	subs	r0, r3, #4
 800a640:	2b00      	cmp	r3, #0
 800a642:	bfbc      	itt	lt
 800a644:	580b      	ldrlt	r3, [r1, r0]
 800a646:	18c0      	addlt	r0, r0, r3
 800a648:	4770      	bx	lr

0800a64a <_raise_r>:
 800a64a:	291f      	cmp	r1, #31
 800a64c:	b538      	push	{r3, r4, r5, lr}
 800a64e:	4604      	mov	r4, r0
 800a650:	460d      	mov	r5, r1
 800a652:	d904      	bls.n	800a65e <_raise_r+0x14>
 800a654:	2316      	movs	r3, #22
 800a656:	6003      	str	r3, [r0, #0]
 800a658:	f04f 30ff 	mov.w	r0, #4294967295
 800a65c:	bd38      	pop	{r3, r4, r5, pc}
 800a65e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a660:	b112      	cbz	r2, 800a668 <_raise_r+0x1e>
 800a662:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a666:	b94b      	cbnz	r3, 800a67c <_raise_r+0x32>
 800a668:	4620      	mov	r0, r4
 800a66a:	f000 f831 	bl	800a6d0 <_getpid_r>
 800a66e:	462a      	mov	r2, r5
 800a670:	4601      	mov	r1, r0
 800a672:	4620      	mov	r0, r4
 800a674:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a678:	f000 b818 	b.w	800a6ac <_kill_r>
 800a67c:	2b01      	cmp	r3, #1
 800a67e:	d00a      	beq.n	800a696 <_raise_r+0x4c>
 800a680:	1c59      	adds	r1, r3, #1
 800a682:	d103      	bne.n	800a68c <_raise_r+0x42>
 800a684:	2316      	movs	r3, #22
 800a686:	6003      	str	r3, [r0, #0]
 800a688:	2001      	movs	r0, #1
 800a68a:	e7e7      	b.n	800a65c <_raise_r+0x12>
 800a68c:	2400      	movs	r4, #0
 800a68e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a692:	4628      	mov	r0, r5
 800a694:	4798      	blx	r3
 800a696:	2000      	movs	r0, #0
 800a698:	e7e0      	b.n	800a65c <_raise_r+0x12>
	...

0800a69c <raise>:
 800a69c:	4b02      	ldr	r3, [pc, #8]	; (800a6a8 <raise+0xc>)
 800a69e:	4601      	mov	r1, r0
 800a6a0:	6818      	ldr	r0, [r3, #0]
 800a6a2:	f7ff bfd2 	b.w	800a64a <_raise_r>
 800a6a6:	bf00      	nop
 800a6a8:	2000000c 	.word	0x2000000c

0800a6ac <_kill_r>:
 800a6ac:	b538      	push	{r3, r4, r5, lr}
 800a6ae:	4d07      	ldr	r5, [pc, #28]	; (800a6cc <_kill_r+0x20>)
 800a6b0:	2300      	movs	r3, #0
 800a6b2:	4604      	mov	r4, r0
 800a6b4:	4608      	mov	r0, r1
 800a6b6:	4611      	mov	r1, r2
 800a6b8:	602b      	str	r3, [r5, #0]
 800a6ba:	f7f7 f80d 	bl	80016d8 <_kill>
 800a6be:	1c43      	adds	r3, r0, #1
 800a6c0:	d102      	bne.n	800a6c8 <_kill_r+0x1c>
 800a6c2:	682b      	ldr	r3, [r5, #0]
 800a6c4:	b103      	cbz	r3, 800a6c8 <_kill_r+0x1c>
 800a6c6:	6023      	str	r3, [r4, #0]
 800a6c8:	bd38      	pop	{r3, r4, r5, pc}
 800a6ca:	bf00      	nop
 800a6cc:	2000046c 	.word	0x2000046c

0800a6d0 <_getpid_r>:
 800a6d0:	f7f6 bffa 	b.w	80016c8 <_getpid>

0800a6d4 <_init>:
 800a6d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6d6:	bf00      	nop
 800a6d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6da:	bc08      	pop	{r3}
 800a6dc:	469e      	mov	lr, r3
 800a6de:	4770      	bx	lr

0800a6e0 <_fini>:
 800a6e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6e2:	bf00      	nop
 800a6e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6e6:	bc08      	pop	{r3}
 800a6e8:	469e      	mov	lr, r3
 800a6ea:	4770      	bx	lr
