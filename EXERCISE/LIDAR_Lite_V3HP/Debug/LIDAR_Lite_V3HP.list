
LIDAR_Lite_V3HP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004928  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004ad4  08004ad4  00014ad4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004aec  08004aec  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004aec  08004aec  00014aec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004af4  08004af4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004af4  08004af4  00014af4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004af8  08004af8  00014af8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004afc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000110  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000011c  2000011c  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e696  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000022c5  00000000  00000000  0002e6d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ae8  00000000  00000000  00030998  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000a18  00000000  00000000  00031480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025aad  00000000  00000000  00031e98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f2f1  00000000  00000000  00057945  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d5079  00000000  00000000  00066c36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013bcaf  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002ba4  00000000  00000000  0013bd00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08004abc 	.word	0x08004abc

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	08004abc 	.word	0x08004abc

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b974 	b.w	80004ec <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468e      	mov	lr, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14d      	bne.n	80002c6 <__udivmoddi4+0xaa>
 800022a:	428a      	cmp	r2, r1
 800022c:	4694      	mov	ip, r2
 800022e:	d969      	bls.n	8000304 <__udivmoddi4+0xe8>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b152      	cbz	r2, 800024c <__udivmoddi4+0x30>
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	f1c2 0120 	rsb	r1, r2, #32
 800023e:	fa20 f101 	lsr.w	r1, r0, r1
 8000242:	fa0c fc02 	lsl.w	ip, ip, r2
 8000246:	ea41 0e03 	orr.w	lr, r1, r3
 800024a:	4094      	lsls	r4, r2
 800024c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000250:	0c21      	lsrs	r1, r4, #16
 8000252:	fbbe f6f8 	udiv	r6, lr, r8
 8000256:	fa1f f78c 	uxth.w	r7, ip
 800025a:	fb08 e316 	mls	r3, r8, r6, lr
 800025e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000262:	fb06 f107 	mul.w	r1, r6, r7
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000272:	f080 811f 	bcs.w	80004b4 <__udivmoddi4+0x298>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 811c 	bls.w	80004b4 <__udivmoddi4+0x298>
 800027c:	3e02      	subs	r6, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0f8 	udiv	r0, r3, r8
 8000288:	fb08 3310 	mls	r3, r8, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 f707 	mul.w	r7, r0, r7
 8000294:	42a7      	cmp	r7, r4
 8000296:	d90a      	bls.n	80002ae <__udivmoddi4+0x92>
 8000298:	eb1c 0404 	adds.w	r4, ip, r4
 800029c:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a0:	f080 810a 	bcs.w	80004b8 <__udivmoddi4+0x29c>
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	f240 8107 	bls.w	80004b8 <__udivmoddi4+0x29c>
 80002aa:	4464      	add	r4, ip
 80002ac:	3802      	subs	r0, #2
 80002ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b2:	1be4      	subs	r4, r4, r7
 80002b4:	2600      	movs	r6, #0
 80002b6:	b11d      	cbz	r5, 80002c0 <__udivmoddi4+0xa4>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c5 4300 	strd	r4, r3, [r5]
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xc2>
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	f000 80ef 	beq.w	80004ae <__udivmoddi4+0x292>
 80002d0:	2600      	movs	r6, #0
 80002d2:	e9c5 0100 	strd	r0, r1, [r5]
 80002d6:	4630      	mov	r0, r6
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f683 	clz	r6, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d14a      	bne.n	800037c <__udivmoddi4+0x160>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd4>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80f9 	bhi.w	80004e2 <__udivmoddi4+0x2c6>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	469e      	mov	lr, r3
 80002fa:	2d00      	cmp	r5, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa4>
 80002fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa4>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xec>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 8092 	bne.w	8000436 <__udivmoddi4+0x21a>
 8000312:	eba1 010c 	sub.w	r1, r1, ip
 8000316:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031a:	fa1f fe8c 	uxth.w	lr, ip
 800031e:	2601      	movs	r6, #1
 8000320:	0c20      	lsrs	r0, r4, #16
 8000322:	fbb1 f3f7 	udiv	r3, r1, r7
 8000326:	fb07 1113 	mls	r1, r7, r3, r1
 800032a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032e:	fb0e f003 	mul.w	r0, lr, r3
 8000332:	4288      	cmp	r0, r1
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x12c>
 8000336:	eb1c 0101 	adds.w	r1, ip, r1
 800033a:	f103 38ff 	add.w	r8, r3, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x12a>
 8000340:	4288      	cmp	r0, r1
 8000342:	f200 80cb 	bhi.w	80004dc <__udivmoddi4+0x2c0>
 8000346:	4643      	mov	r3, r8
 8000348:	1a09      	subs	r1, r1, r0
 800034a:	b2a4      	uxth	r4, r4
 800034c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000350:	fb07 1110 	mls	r1, r7, r0, r1
 8000354:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000358:	fb0e fe00 	mul.w	lr, lr, r0
 800035c:	45a6      	cmp	lr, r4
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x156>
 8000360:	eb1c 0404 	adds.w	r4, ip, r4
 8000364:	f100 31ff 	add.w	r1, r0, #4294967295
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x154>
 800036a:	45a6      	cmp	lr, r4
 800036c:	f200 80bb 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000370:	4608      	mov	r0, r1
 8000372:	eba4 040e 	sub.w	r4, r4, lr
 8000376:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037a:	e79c      	b.n	80002b6 <__udivmoddi4+0x9a>
 800037c:	f1c6 0720 	rsb	r7, r6, #32
 8000380:	40b3      	lsls	r3, r6
 8000382:	fa22 fc07 	lsr.w	ip, r2, r7
 8000386:	ea4c 0c03 	orr.w	ip, ip, r3
 800038a:	fa20 f407 	lsr.w	r4, r0, r7
 800038e:	fa01 f306 	lsl.w	r3, r1, r6
 8000392:	431c      	orrs	r4, r3
 8000394:	40f9      	lsrs	r1, r7
 8000396:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039a:	fa00 f306 	lsl.w	r3, r0, r6
 800039e:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a2:	0c20      	lsrs	r0, r4, #16
 80003a4:	fa1f fe8c 	uxth.w	lr, ip
 80003a8:	fb09 1118 	mls	r1, r9, r8, r1
 80003ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b0:	fb08 f00e 	mul.w	r0, r8, lr
 80003b4:	4288      	cmp	r0, r1
 80003b6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ba:	d90b      	bls.n	80003d4 <__udivmoddi4+0x1b8>
 80003bc:	eb1c 0101 	adds.w	r1, ip, r1
 80003c0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c4:	f080 8088 	bcs.w	80004d8 <__udivmoddi4+0x2bc>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f240 8085 	bls.w	80004d8 <__udivmoddi4+0x2bc>
 80003ce:	f1a8 0802 	sub.w	r8, r8, #2
 80003d2:	4461      	add	r1, ip
 80003d4:	1a09      	subs	r1, r1, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003dc:	fb09 1110 	mls	r1, r9, r0, r1
 80003e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e8:	458e      	cmp	lr, r1
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1e2>
 80003ec:	eb1c 0101 	adds.w	r1, ip, r1
 80003f0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f4:	d26c      	bcs.n	80004d0 <__udivmoddi4+0x2b4>
 80003f6:	458e      	cmp	lr, r1
 80003f8:	d96a      	bls.n	80004d0 <__udivmoddi4+0x2b4>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4461      	add	r1, ip
 80003fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000402:	fba0 9402 	umull	r9, r4, r0, r2
 8000406:	eba1 010e 	sub.w	r1, r1, lr
 800040a:	42a1      	cmp	r1, r4
 800040c:	46c8      	mov	r8, r9
 800040e:	46a6      	mov	lr, r4
 8000410:	d356      	bcc.n	80004c0 <__udivmoddi4+0x2a4>
 8000412:	d053      	beq.n	80004bc <__udivmoddi4+0x2a0>
 8000414:	b15d      	cbz	r5, 800042e <__udivmoddi4+0x212>
 8000416:	ebb3 0208 	subs.w	r2, r3, r8
 800041a:	eb61 010e 	sbc.w	r1, r1, lr
 800041e:	fa01 f707 	lsl.w	r7, r1, r7
 8000422:	fa22 f306 	lsr.w	r3, r2, r6
 8000426:	40f1      	lsrs	r1, r6
 8000428:	431f      	orrs	r7, r3
 800042a:	e9c5 7100 	strd	r7, r1, [r5]
 800042e:	2600      	movs	r6, #0
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	f1c2 0320 	rsb	r3, r2, #32
 800043a:	40d8      	lsrs	r0, r3
 800043c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000440:	fa21 f303 	lsr.w	r3, r1, r3
 8000444:	4091      	lsls	r1, r2
 8000446:	4301      	orrs	r1, r0
 8000448:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044c:	fa1f fe8c 	uxth.w	lr, ip
 8000450:	fbb3 f0f7 	udiv	r0, r3, r7
 8000454:	fb07 3610 	mls	r6, r7, r0, r3
 8000458:	0c0b      	lsrs	r3, r1, #16
 800045a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045e:	fb00 f60e 	mul.w	r6, r0, lr
 8000462:	429e      	cmp	r6, r3
 8000464:	fa04 f402 	lsl.w	r4, r4, r2
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x260>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000472:	d22f      	bcs.n	80004d4 <__udivmoddi4+0x2b8>
 8000474:	429e      	cmp	r6, r3
 8000476:	d92d      	bls.n	80004d4 <__udivmoddi4+0x2b8>
 8000478:	3802      	subs	r0, #2
 800047a:	4463      	add	r3, ip
 800047c:	1b9b      	subs	r3, r3, r6
 800047e:	b289      	uxth	r1, r1
 8000480:	fbb3 f6f7 	udiv	r6, r3, r7
 8000484:	fb07 3316 	mls	r3, r7, r6, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb06 f30e 	mul.w	r3, r6, lr
 8000490:	428b      	cmp	r3, r1
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x28a>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f106 38ff 	add.w	r8, r6, #4294967295
 800049c:	d216      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d914      	bls.n	80004cc <__udivmoddi4+0x2b0>
 80004a2:	3e02      	subs	r6, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1ac9      	subs	r1, r1, r3
 80004a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004ac:	e738      	b.n	8000320 <__udivmoddi4+0x104>
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e705      	b.n	80002c0 <__udivmoddi4+0xa4>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e3      	b.n	8000280 <__udivmoddi4+0x64>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6f8      	b.n	80002ae <__udivmoddi4+0x92>
 80004bc:	454b      	cmp	r3, r9
 80004be:	d2a9      	bcs.n	8000414 <__udivmoddi4+0x1f8>
 80004c0:	ebb9 0802 	subs.w	r8, r9, r2
 80004c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7a3      	b.n	8000414 <__udivmoddi4+0x1f8>
 80004cc:	4646      	mov	r6, r8
 80004ce:	e7ea      	b.n	80004a6 <__udivmoddi4+0x28a>
 80004d0:	4620      	mov	r0, r4
 80004d2:	e794      	b.n	80003fe <__udivmoddi4+0x1e2>
 80004d4:	4640      	mov	r0, r8
 80004d6:	e7d1      	b.n	800047c <__udivmoddi4+0x260>
 80004d8:	46d0      	mov	r8, sl
 80004da:	e77b      	b.n	80003d4 <__udivmoddi4+0x1b8>
 80004dc:	3b02      	subs	r3, #2
 80004de:	4461      	add	r1, ip
 80004e0:	e732      	b.n	8000348 <__udivmoddi4+0x12c>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e709      	b.n	80002fa <__udivmoddi4+0xde>
 80004e6:	4464      	add	r4, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e742      	b.n	8000372 <__udivmoddi4+0x156>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <_ZN14LIDARLite_v3HP14DWT_Delay_InitEv>:
        }
    }
} /* LIDARLite_v3HP::peakStackRead */

uint32_t LIDARLite_v3HP::DWT_Delay_Init(void)
{
 80004f0:	b480      	push	{r7}
 80004f2:	b083      	sub	sp, #12
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 80004f8:	4b17      	ldr	r3, [pc, #92]	; (8000558 <_ZN14LIDARLite_v3HP14DWT_Delay_InitEv+0x68>)
 80004fa:	68db      	ldr	r3, [r3, #12]
 80004fc:	4a16      	ldr	r2, [pc, #88]	; (8000558 <_ZN14LIDARLite_v3HP14DWT_Delay_InitEv+0x68>)
 80004fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000502:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000504:	4b14      	ldr	r3, [pc, #80]	; (8000558 <_ZN14LIDARLite_v3HP14DWT_Delay_InitEv+0x68>)
 8000506:	68db      	ldr	r3, [r3, #12]
 8000508:	4a13      	ldr	r2, [pc, #76]	; (8000558 <_ZN14LIDARLite_v3HP14DWT_Delay_InitEv+0x68>)
 800050a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800050e:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000510:	4b12      	ldr	r3, [pc, #72]	; (800055c <_ZN14LIDARLite_v3HP14DWT_Delay_InitEv+0x6c>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	4a11      	ldr	r2, [pc, #68]	; (800055c <_ZN14LIDARLite_v3HP14DWT_Delay_InitEv+0x6c>)
 8000516:	f023 0301 	bic.w	r3, r3, #1
 800051a:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 800051c:	4b0f      	ldr	r3, [pc, #60]	; (800055c <_ZN14LIDARLite_v3HP14DWT_Delay_InitEv+0x6c>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	4a0e      	ldr	r2, [pc, #56]	; (800055c <_ZN14LIDARLite_v3HP14DWT_Delay_InitEv+0x6c>)
 8000522:	f043 0301 	orr.w	r3, r3, #1
 8000526:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8000528:	4b0c      	ldr	r3, [pc, #48]	; (800055c <_ZN14LIDARLite_v3HP14DWT_Delay_InitEv+0x6c>)
 800052a:	2200      	movs	r2, #0
 800052c:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 800052e:	bf00      	nop
  __ASM volatile ("NOP");
 8000530:	bf00      	nop
  __ASM volatile ("NOP");
 8000532:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 8000534:	4b09      	ldr	r3, [pc, #36]	; (800055c <_ZN14LIDARLite_v3HP14DWT_Delay_InitEv+0x6c>)
 8000536:	685b      	ldr	r3, [r3, #4]
 8000538:	2b00      	cmp	r3, #0
 800053a:	bf14      	ite	ne
 800053c:	2301      	movne	r3, #1
 800053e:	2300      	moveq	r3, #0
 8000540:	b2db      	uxtb	r3, r3
 8000542:	2b00      	cmp	r3, #0
 8000544:	d001      	beq.n	800054a <_ZN14LIDARLite_v3HP14DWT_Delay_InitEv+0x5a>
     {
       return 0; /*clock cycle counter started*/
 8000546:	2300      	movs	r3, #0
 8000548:	e000      	b.n	800054c <_ZN14LIDARLite_v3HP14DWT_Delay_InitEv+0x5c>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 800054a:	2301      	movs	r3, #1
  }
}
 800054c:	4618      	mov	r0, r3
 800054e:	370c      	adds	r7, #12
 8000550:	46bd      	mov	sp, r7
 8000552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000556:	4770      	bx	lr
 8000558:	e000edf0 	.word	0xe000edf0
 800055c:	e0001000 	.word	0xe0001000

08000560 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b08c      	sub	sp, #48	; 0x30
 8000564:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000566:	f107 031c 	add.w	r3, r7, #28
 800056a:	2200      	movs	r2, #0
 800056c:	601a      	str	r2, [r3, #0]
 800056e:	605a      	str	r2, [r3, #4]
 8000570:	609a      	str	r2, [r3, #8]
 8000572:	60da      	str	r2, [r3, #12]
 8000574:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000576:	2300      	movs	r3, #0
 8000578:	61bb      	str	r3, [r7, #24]
 800057a:	4b7c      	ldr	r3, [pc, #496]	; (800076c <MX_GPIO_Init+0x20c>)
 800057c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057e:	4a7b      	ldr	r2, [pc, #492]	; (800076c <MX_GPIO_Init+0x20c>)
 8000580:	f043 0304 	orr.w	r3, r3, #4
 8000584:	6313      	str	r3, [r2, #48]	; 0x30
 8000586:	4b79      	ldr	r3, [pc, #484]	; (800076c <MX_GPIO_Init+0x20c>)
 8000588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058a:	f003 0304 	and.w	r3, r3, #4
 800058e:	61bb      	str	r3, [r7, #24]
 8000590:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000592:	2300      	movs	r3, #0
 8000594:	617b      	str	r3, [r7, #20]
 8000596:	4b75      	ldr	r3, [pc, #468]	; (800076c <MX_GPIO_Init+0x20c>)
 8000598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059a:	4a74      	ldr	r2, [pc, #464]	; (800076c <MX_GPIO_Init+0x20c>)
 800059c:	f043 0320 	orr.w	r3, r3, #32
 80005a0:	6313      	str	r3, [r2, #48]	; 0x30
 80005a2:	4b72      	ldr	r3, [pc, #456]	; (800076c <MX_GPIO_Init+0x20c>)
 80005a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a6:	f003 0320 	and.w	r3, r3, #32
 80005aa:	617b      	str	r3, [r7, #20]
 80005ac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005ae:	2300      	movs	r3, #0
 80005b0:	613b      	str	r3, [r7, #16]
 80005b2:	4b6e      	ldr	r3, [pc, #440]	; (800076c <MX_GPIO_Init+0x20c>)
 80005b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b6:	4a6d      	ldr	r2, [pc, #436]	; (800076c <MX_GPIO_Init+0x20c>)
 80005b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005bc:	6313      	str	r3, [r2, #48]	; 0x30
 80005be:	4b6b      	ldr	r3, [pc, #428]	; (800076c <MX_GPIO_Init+0x20c>)
 80005c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005c6:	613b      	str	r3, [r7, #16]
 80005c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ca:	2300      	movs	r3, #0
 80005cc:	60fb      	str	r3, [r7, #12]
 80005ce:	4b67      	ldr	r3, [pc, #412]	; (800076c <MX_GPIO_Init+0x20c>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d2:	4a66      	ldr	r2, [pc, #408]	; (800076c <MX_GPIO_Init+0x20c>)
 80005d4:	f043 0301 	orr.w	r3, r3, #1
 80005d8:	6313      	str	r3, [r2, #48]	; 0x30
 80005da:	4b64      	ldr	r3, [pc, #400]	; (800076c <MX_GPIO_Init+0x20c>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005de:	f003 0301 	and.w	r3, r3, #1
 80005e2:	60fb      	str	r3, [r7, #12]
 80005e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005e6:	2300      	movs	r3, #0
 80005e8:	60bb      	str	r3, [r7, #8]
 80005ea:	4b60      	ldr	r3, [pc, #384]	; (800076c <MX_GPIO_Init+0x20c>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ee:	4a5f      	ldr	r2, [pc, #380]	; (800076c <MX_GPIO_Init+0x20c>)
 80005f0:	f043 0302 	orr.w	r3, r3, #2
 80005f4:	6313      	str	r3, [r2, #48]	; 0x30
 80005f6:	4b5d      	ldr	r3, [pc, #372]	; (800076c <MX_GPIO_Init+0x20c>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fa:	f003 0302 	and.w	r3, r3, #2
 80005fe:	60bb      	str	r3, [r7, #8]
 8000600:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000602:	2300      	movs	r3, #0
 8000604:	607b      	str	r3, [r7, #4]
 8000606:	4b59      	ldr	r3, [pc, #356]	; (800076c <MX_GPIO_Init+0x20c>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060a:	4a58      	ldr	r2, [pc, #352]	; (800076c <MX_GPIO_Init+0x20c>)
 800060c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000610:	6313      	str	r3, [r2, #48]	; 0x30
 8000612:	4b56      	ldr	r3, [pc, #344]	; (800076c <MX_GPIO_Init+0x20c>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000616:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800061a:	607b      	str	r3, [r7, #4]
 800061c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800061e:	2200      	movs	r2, #0
 8000620:	f244 0181 	movw	r1, #16513	; 0x4081
 8000624:	4852      	ldr	r0, [pc, #328]	; (8000770 <MX_GPIO_Init+0x210>)
 8000626:	f000 ff6d 	bl	8001504 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800062a:	2200      	movs	r2, #0
 800062c:	2140      	movs	r1, #64	; 0x40
 800062e:	4851      	ldr	r0, [pc, #324]	; (8000774 <MX_GPIO_Init+0x214>)
 8000630:	f000 ff68 	bl	8001504 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000634:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000638:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800063a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800063e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000640:	2300      	movs	r3, #0
 8000642:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000644:	f107 031c 	add.w	r3, r7, #28
 8000648:	4619      	mov	r1, r3
 800064a:	484b      	ldr	r0, [pc, #300]	; (8000778 <MX_GPIO_Init+0x218>)
 800064c:	f000 fdae 	bl	80011ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000650:	2332      	movs	r3, #50	; 0x32
 8000652:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000654:	2302      	movs	r3, #2
 8000656:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000658:	2300      	movs	r3, #0
 800065a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800065c:	2303      	movs	r3, #3
 800065e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000660:	230b      	movs	r3, #11
 8000662:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000664:	f107 031c 	add.w	r3, r7, #28
 8000668:	4619      	mov	r1, r3
 800066a:	4843      	ldr	r0, [pc, #268]	; (8000778 <MX_GPIO_Init+0x218>)
 800066c:	f000 fd9e 	bl	80011ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000670:	2386      	movs	r3, #134	; 0x86
 8000672:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000674:	2302      	movs	r3, #2
 8000676:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000678:	2300      	movs	r3, #0
 800067a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800067c:	2303      	movs	r3, #3
 800067e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000680:	230b      	movs	r3, #11
 8000682:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000684:	f107 031c 	add.w	r3, r7, #28
 8000688:	4619      	mov	r1, r3
 800068a:	483c      	ldr	r0, [pc, #240]	; (800077c <MX_GPIO_Init+0x21c>)
 800068c:	f000 fd8e 	bl	80011ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000690:	f244 0381 	movw	r3, #16513	; 0x4081
 8000694:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000696:	2301      	movs	r3, #1
 8000698:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069a:	2300      	movs	r3, #0
 800069c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800069e:	2300      	movs	r3, #0
 80006a0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006a2:	f107 031c 	add.w	r3, r7, #28
 80006a6:	4619      	mov	r1, r3
 80006a8:	4831      	ldr	r0, [pc, #196]	; (8000770 <MX_GPIO_Init+0x210>)
 80006aa:	f000 fd7f 	bl	80011ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80006ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006b4:	2302      	movs	r3, #2
 80006b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b8:	2300      	movs	r3, #0
 80006ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006bc:	2303      	movs	r3, #3
 80006be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006c0:	230b      	movs	r3, #11
 80006c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80006c4:	f107 031c 	add.w	r3, r7, #28
 80006c8:	4619      	mov	r1, r3
 80006ca:	4829      	ldr	r0, [pc, #164]	; (8000770 <MX_GPIO_Init+0x210>)
 80006cc:	f000 fd6e 	bl	80011ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80006d0:	2340      	movs	r3, #64	; 0x40
 80006d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006d4:	2301      	movs	r3, #1
 80006d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d8:	2300      	movs	r3, #0
 80006da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006dc:	2300      	movs	r3, #0
 80006de:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80006e0:	f107 031c 	add.w	r3, r7, #28
 80006e4:	4619      	mov	r1, r3
 80006e6:	4823      	ldr	r0, [pc, #140]	; (8000774 <MX_GPIO_Init+0x214>)
 80006e8:	f000 fd60 	bl	80011ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80006ec:	2380      	movs	r3, #128	; 0x80
 80006ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006f0:	2300      	movs	r3, #0
 80006f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f4:	2300      	movs	r3, #0
 80006f6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80006f8:	f107 031c 	add.w	r3, r7, #28
 80006fc:	4619      	mov	r1, r3
 80006fe:	481d      	ldr	r0, [pc, #116]	; (8000774 <MX_GPIO_Init+0x214>)
 8000700:	f000 fd54 	bl	80011ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000704:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000708:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800070a:	2302      	movs	r3, #2
 800070c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070e:	2300      	movs	r3, #0
 8000710:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000712:	2303      	movs	r3, #3
 8000714:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000716:	230a      	movs	r3, #10
 8000718:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800071a:	f107 031c 	add.w	r3, r7, #28
 800071e:	4619      	mov	r1, r3
 8000720:	4816      	ldr	r0, [pc, #88]	; (800077c <MX_GPIO_Init+0x21c>)
 8000722:	f000 fd43 	bl	80011ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000726:	f44f 7300 	mov.w	r3, #512	; 0x200
 800072a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800072c:	2300      	movs	r3, #0
 800072e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000730:	2300      	movs	r3, #0
 8000732:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000734:	f107 031c 	add.w	r3, r7, #28
 8000738:	4619      	mov	r1, r3
 800073a:	4810      	ldr	r0, [pc, #64]	; (800077c <MX_GPIO_Init+0x21c>)
 800073c:	f000 fd36 	bl	80011ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000740:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000744:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000746:	2302      	movs	r3, #2
 8000748:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074a:	2300      	movs	r3, #0
 800074c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800074e:	2303      	movs	r3, #3
 8000750:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000752:	230b      	movs	r3, #11
 8000754:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000756:	f107 031c 	add.w	r3, r7, #28
 800075a:	4619      	mov	r1, r3
 800075c:	4805      	ldr	r0, [pc, #20]	; (8000774 <MX_GPIO_Init+0x214>)
 800075e:	f000 fd25 	bl	80011ac <HAL_GPIO_Init>

}
 8000762:	bf00      	nop
 8000764:	3730      	adds	r7, #48	; 0x30
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	40023800 	.word	0x40023800
 8000770:	40020400 	.word	0x40020400
 8000774:	40021800 	.word	0x40021800
 8000778:	40020800 	.word	0x40020800
 800077c:	40020000 	.word	0x40020000

08000780 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000784:	4b1b      	ldr	r3, [pc, #108]	; (80007f4 <MX_I2C1_Init+0x74>)
 8000786:	4a1c      	ldr	r2, [pc, #112]	; (80007f8 <MX_I2C1_Init+0x78>)
 8000788:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800078a:	4b1a      	ldr	r3, [pc, #104]	; (80007f4 <MX_I2C1_Init+0x74>)
 800078c:	4a1b      	ldr	r2, [pc, #108]	; (80007fc <MX_I2C1_Init+0x7c>)
 800078e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000790:	4b18      	ldr	r3, [pc, #96]	; (80007f4 <MX_I2C1_Init+0x74>)
 8000792:	2200      	movs	r2, #0
 8000794:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000796:	4b17      	ldr	r3, [pc, #92]	; (80007f4 <MX_I2C1_Init+0x74>)
 8000798:	2200      	movs	r2, #0
 800079a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800079c:	4b15      	ldr	r3, [pc, #84]	; (80007f4 <MX_I2C1_Init+0x74>)
 800079e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007a2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007a4:	4b13      	ldr	r3, [pc, #76]	; (80007f4 <MX_I2C1_Init+0x74>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007aa:	4b12      	ldr	r3, [pc, #72]	; (80007f4 <MX_I2C1_Init+0x74>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007b0:	4b10      	ldr	r3, [pc, #64]	; (80007f4 <MX_I2C1_Init+0x74>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007b6:	4b0f      	ldr	r3, [pc, #60]	; (80007f4 <MX_I2C1_Init+0x74>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007bc:	480d      	ldr	r0, [pc, #52]	; (80007f4 <MX_I2C1_Init+0x74>)
 80007be:	f000 febb 	bl	8001538 <HAL_I2C_Init>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007c8:	f000 f98c 	bl	8000ae4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007cc:	2100      	movs	r1, #0
 80007ce:	4809      	ldr	r0, [pc, #36]	; (80007f4 <MX_I2C1_Init+0x74>)
 80007d0:	f002 fcd1 	bl	8003176 <HAL_I2CEx_ConfigAnalogFilter>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80007da:	f000 f983 	bl	8000ae4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80007de:	2100      	movs	r1, #0
 80007e0:	4804      	ldr	r0, [pc, #16]	; (80007f4 <MX_I2C1_Init+0x74>)
 80007e2:	f002 fd04 	bl	80031ee <HAL_I2CEx_ConfigDigitalFilter>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80007ec:	f000 f97a 	bl	8000ae4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007f0:	bf00      	nop
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	20000028 	.word	0x20000028
 80007f8:	40005400 	.word	0x40005400
 80007fc:	000186a0 	.word	0x000186a0

08000800 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000804:	4b1b      	ldr	r3, [pc, #108]	; (8000874 <MX_I2C2_Init+0x74>)
 8000806:	4a1c      	ldr	r2, [pc, #112]	; (8000878 <MX_I2C2_Init+0x78>)
 8000808:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800080a:	4b1a      	ldr	r3, [pc, #104]	; (8000874 <MX_I2C2_Init+0x74>)
 800080c:	4a1b      	ldr	r2, [pc, #108]	; (800087c <MX_I2C2_Init+0x7c>)
 800080e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000810:	4b18      	ldr	r3, [pc, #96]	; (8000874 <MX_I2C2_Init+0x74>)
 8000812:	2200      	movs	r2, #0
 8000814:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000816:	4b17      	ldr	r3, [pc, #92]	; (8000874 <MX_I2C2_Init+0x74>)
 8000818:	2200      	movs	r2, #0
 800081a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800081c:	4b15      	ldr	r3, [pc, #84]	; (8000874 <MX_I2C2_Init+0x74>)
 800081e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000822:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000824:	4b13      	ldr	r3, [pc, #76]	; (8000874 <MX_I2C2_Init+0x74>)
 8000826:	2200      	movs	r2, #0
 8000828:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800082a:	4b12      	ldr	r3, [pc, #72]	; (8000874 <MX_I2C2_Init+0x74>)
 800082c:	2200      	movs	r2, #0
 800082e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000830:	4b10      	ldr	r3, [pc, #64]	; (8000874 <MX_I2C2_Init+0x74>)
 8000832:	2200      	movs	r2, #0
 8000834:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000836:	4b0f      	ldr	r3, [pc, #60]	; (8000874 <MX_I2C2_Init+0x74>)
 8000838:	2200      	movs	r2, #0
 800083a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800083c:	480d      	ldr	r0, [pc, #52]	; (8000874 <MX_I2C2_Init+0x74>)
 800083e:	f000 fe7b 	bl	8001538 <HAL_I2C_Init>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000848:	f000 f94c 	bl	8000ae4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800084c:	2100      	movs	r1, #0
 800084e:	4809      	ldr	r0, [pc, #36]	; (8000874 <MX_I2C2_Init+0x74>)
 8000850:	f002 fc91 	bl	8003176 <HAL_I2CEx_ConfigAnalogFilter>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 800085a:	f000 f943 	bl	8000ae4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800085e:	2100      	movs	r1, #0
 8000860:	4804      	ldr	r0, [pc, #16]	; (8000874 <MX_I2C2_Init+0x74>)
 8000862:	f002 fcc4 	bl	80031ee <HAL_I2CEx_ConfigDigitalFilter>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 800086c:	f000 f93a 	bl	8000ae4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000870:	bf00      	nop
 8000872:	bd80      	pop	{r7, pc}
 8000874:	2000007c 	.word	0x2000007c
 8000878:	40005800 	.word	0x40005800
 800087c:	000186a0 	.word	0x000186a0

08000880 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b08c      	sub	sp, #48	; 0x30
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000888:	f107 031c 	add.w	r3, r7, #28
 800088c:	2200      	movs	r2, #0
 800088e:	601a      	str	r2, [r3, #0]
 8000890:	605a      	str	r2, [r3, #4]
 8000892:	609a      	str	r2, [r3, #8]
 8000894:	60da      	str	r2, [r3, #12]
 8000896:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	4a42      	ldr	r2, [pc, #264]	; (80009a8 <HAL_I2C_MspInit+0x128>)
 800089e:	4293      	cmp	r3, r2
 80008a0:	d13d      	bne.n	800091e <HAL_I2C_MspInit+0x9e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008a2:	2300      	movs	r3, #0
 80008a4:	61bb      	str	r3, [r7, #24]
 80008a6:	4b41      	ldr	r3, [pc, #260]	; (80009ac <HAL_I2C_MspInit+0x12c>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	4a40      	ldr	r2, [pc, #256]	; (80009ac <HAL_I2C_MspInit+0x12c>)
 80008ac:	f043 0302 	orr.w	r3, r3, #2
 80008b0:	6313      	str	r3, [r2, #48]	; 0x30
 80008b2:	4b3e      	ldr	r3, [pc, #248]	; (80009ac <HAL_I2C_MspInit+0x12c>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	f003 0302 	and.w	r3, r3, #2
 80008ba:	61bb      	str	r3, [r7, #24]
 80008bc:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80008be:	f44f 7340 	mov.w	r3, #768	; 0x300
 80008c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008c4:	2312      	movs	r3, #18
 80008c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c8:	2300      	movs	r3, #0
 80008ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008cc:	2303      	movs	r3, #3
 80008ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008d0:	2304      	movs	r3, #4
 80008d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008d4:	f107 031c 	add.w	r3, r7, #28
 80008d8:	4619      	mov	r1, r3
 80008da:	4835      	ldr	r0, [pc, #212]	; (80009b0 <HAL_I2C_MspInit+0x130>)
 80008dc:	f000 fc66 	bl	80011ac <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80008e0:	2300      	movs	r3, #0
 80008e2:	617b      	str	r3, [r7, #20]
 80008e4:	4b31      	ldr	r3, [pc, #196]	; (80009ac <HAL_I2C_MspInit+0x12c>)
 80008e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e8:	4a30      	ldr	r2, [pc, #192]	; (80009ac <HAL_I2C_MspInit+0x12c>)
 80008ea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80008ee:	6413      	str	r3, [r2, #64]	; 0x40
 80008f0:	4b2e      	ldr	r3, [pc, #184]	; (80009ac <HAL_I2C_MspInit+0x12c>)
 80008f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80008f8:	617b      	str	r3, [r7, #20]
 80008fa:	697b      	ldr	r3, [r7, #20]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80008fc:	2200      	movs	r2, #0
 80008fe:	2100      	movs	r1, #0
 8000900:	201f      	movs	r0, #31
 8000902:	f000 fb7c 	bl	8000ffe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000906:	201f      	movs	r0, #31
 8000908:	f000 fb95 	bl	8001036 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800090c:	2200      	movs	r2, #0
 800090e:	2100      	movs	r1, #0
 8000910:	2020      	movs	r0, #32
 8000912:	f000 fb74 	bl	8000ffe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000916:	2020      	movs	r0, #32
 8000918:	f000 fb8d 	bl	8001036 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800091c:	e040      	b.n	80009a0 <HAL_I2C_MspInit+0x120>
  else if(i2cHandle->Instance==I2C2)
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	4a24      	ldr	r2, [pc, #144]	; (80009b4 <HAL_I2C_MspInit+0x134>)
 8000924:	4293      	cmp	r3, r2
 8000926:	d13b      	bne.n	80009a0 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000928:	2300      	movs	r3, #0
 800092a:	613b      	str	r3, [r7, #16]
 800092c:	4b1f      	ldr	r3, [pc, #124]	; (80009ac <HAL_I2C_MspInit+0x12c>)
 800092e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000930:	4a1e      	ldr	r2, [pc, #120]	; (80009ac <HAL_I2C_MspInit+0x12c>)
 8000932:	f043 0320 	orr.w	r3, r3, #32
 8000936:	6313      	str	r3, [r2, #48]	; 0x30
 8000938:	4b1c      	ldr	r3, [pc, #112]	; (80009ac <HAL_I2C_MspInit+0x12c>)
 800093a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093c:	f003 0320 	and.w	r3, r3, #32
 8000940:	613b      	str	r3, [r7, #16]
 8000942:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000944:	2303      	movs	r3, #3
 8000946:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000948:	2312      	movs	r3, #18
 800094a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094c:	2300      	movs	r3, #0
 800094e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000950:	2303      	movs	r3, #3
 8000952:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000954:	2304      	movs	r3, #4
 8000956:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000958:	f107 031c 	add.w	r3, r7, #28
 800095c:	4619      	mov	r1, r3
 800095e:	4816      	ldr	r0, [pc, #88]	; (80009b8 <HAL_I2C_MspInit+0x138>)
 8000960:	f000 fc24 	bl	80011ac <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000964:	2300      	movs	r3, #0
 8000966:	60fb      	str	r3, [r7, #12]
 8000968:	4b10      	ldr	r3, [pc, #64]	; (80009ac <HAL_I2C_MspInit+0x12c>)
 800096a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800096c:	4a0f      	ldr	r2, [pc, #60]	; (80009ac <HAL_I2C_MspInit+0x12c>)
 800096e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000972:	6413      	str	r3, [r2, #64]	; 0x40
 8000974:	4b0d      	ldr	r3, [pc, #52]	; (80009ac <HAL_I2C_MspInit+0x12c>)
 8000976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000978:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800097c:	60fb      	str	r3, [r7, #12]
 800097e:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8000980:	2200      	movs	r2, #0
 8000982:	2100      	movs	r1, #0
 8000984:	2021      	movs	r0, #33	; 0x21
 8000986:	f000 fb3a 	bl	8000ffe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 800098a:	2021      	movs	r0, #33	; 0x21
 800098c:	f000 fb53 	bl	8001036 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8000990:	2200      	movs	r2, #0
 8000992:	2100      	movs	r1, #0
 8000994:	2022      	movs	r0, #34	; 0x22
 8000996:	f000 fb32 	bl	8000ffe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 800099a:	2022      	movs	r0, #34	; 0x22
 800099c:	f000 fb4b 	bl	8001036 <HAL_NVIC_EnableIRQ>
}
 80009a0:	bf00      	nop
 80009a2:	3730      	adds	r7, #48	; 0x30
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	40005400 	.word	0x40005400
 80009ac:	40023800 	.word	0x40023800
 80009b0:	40020400 	.word	0x40020400
 80009b4:	40005800 	.word	0x40005800
 80009b8:	40021400 	.word	0x40021400

080009bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009c0:	f000 f9d0 	bl	8000d64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009c4:	f000 f80e 	bl	80009e4 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009c8:	f7ff fdca 	bl	8000560 <MX_GPIO_Init>
  MX_I2C1_Init();
 80009cc:	f7ff fed8 	bl	8000780 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 80009d0:	f000 f924 	bl	8000c1c <MX_USART3_UART_Init>
  MX_I2C2_Init();
 80009d4:	f7ff ff14 	bl	8000800 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  myLidarLite.DWT_Delay_Init();
 80009d8:	4801      	ldr	r0, [pc, #4]	; (80009e0 <main+0x24>)
 80009da:	f7ff fd89 	bl	80004f0 <_ZN14LIDARLite_v3HP14DWT_Delay_InitEv>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009de:	e7fe      	b.n	80009de <main+0x22>
 80009e0:	200000d0 	.word	0x200000d0

080009e4 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b094      	sub	sp, #80	; 0x50
 80009e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ea:	f107 0320 	add.w	r3, r7, #32
 80009ee:	2230      	movs	r2, #48	; 0x30
 80009f0:	2100      	movs	r1, #0
 80009f2:	4618      	mov	r0, r3
 80009f4:	f004 f85a 	bl	8004aac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009f8:	f107 030c 	add.w	r3, r7, #12
 80009fc:	2200      	movs	r2, #0
 80009fe:	601a      	str	r2, [r3, #0]
 8000a00:	605a      	str	r2, [r3, #4]
 8000a02:	609a      	str	r2, [r3, #8]
 8000a04:	60da      	str	r2, [r3, #12]
 8000a06:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a08:	2300      	movs	r3, #0
 8000a0a:	60bb      	str	r3, [r7, #8]
 8000a0c:	4b33      	ldr	r3, [pc, #204]	; (8000adc <_Z18SystemClock_Configv+0xf8>)
 8000a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a10:	4a32      	ldr	r2, [pc, #200]	; (8000adc <_Z18SystemClock_Configv+0xf8>)
 8000a12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a16:	6413      	str	r3, [r2, #64]	; 0x40
 8000a18:	4b30      	ldr	r3, [pc, #192]	; (8000adc <_Z18SystemClock_Configv+0xf8>)
 8000a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a20:	60bb      	str	r3, [r7, #8]
 8000a22:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a24:	2300      	movs	r3, #0
 8000a26:	607b      	str	r3, [r7, #4]
 8000a28:	4b2d      	ldr	r3, [pc, #180]	; (8000ae0 <_Z18SystemClock_Configv+0xfc>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a2c      	ldr	r2, [pc, #176]	; (8000ae0 <_Z18SystemClock_Configv+0xfc>)
 8000a2e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a32:	6013      	str	r3, [r2, #0]
 8000a34:	4b2a      	ldr	r3, [pc, #168]	; (8000ae0 <_Z18SystemClock_Configv+0xfc>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a3c:	607b      	str	r3, [r7, #4]
 8000a3e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a40:	2301      	movs	r3, #1
 8000a42:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a44:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000a48:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a4a:	2302      	movs	r3, #2
 8000a4c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a4e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a52:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a54:	2304      	movs	r3, #4
 8000a56:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000a58:	23b4      	movs	r3, #180	; 0xb4
 8000a5a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a5c:	2302      	movs	r3, #2
 8000a5e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a60:	2304      	movs	r3, #4
 8000a62:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a64:	f107 0320 	add.w	r3, r7, #32
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f002 fc4f 	bl	800330c <HAL_RCC_OscConfig>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	bf14      	ite	ne
 8000a74:	2301      	movne	r3, #1
 8000a76:	2300      	moveq	r3, #0
 8000a78:	b2db      	uxtb	r3, r3
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 8000a7e:	f000 f831 	bl	8000ae4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000a82:	f002 fbf3 	bl	800326c <HAL_PWREx_EnableOverDrive>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	bf14      	ite	ne
 8000a8c:	2301      	movne	r3, #1
 8000a8e:	2300      	moveq	r3, #0
 8000a90:	b2db      	uxtb	r3, r3
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <_Z18SystemClock_Configv+0xb6>
  {
    Error_Handler();
 8000a96:	f000 f825 	bl	8000ae4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a9a:	230f      	movs	r3, #15
 8000a9c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a9e:	2302      	movs	r3, #2
 8000aa0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000aa6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000aaa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000aac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ab0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ab2:	f107 030c 	add.w	r3, r7, #12
 8000ab6:	2105      	movs	r1, #5
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f002 fe9f 	bl	80037fc <HAL_RCC_ClockConfig>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	bf14      	ite	ne
 8000ac4:	2301      	movne	r3, #1
 8000ac6:	2300      	moveq	r3, #0
 8000ac8:	b2db      	uxtb	r3, r3
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <_Z18SystemClock_Configv+0xee>
  {
    Error_Handler();
 8000ace:	f000 f809 	bl	8000ae4 <Error_Handler>
  }
}
 8000ad2:	bf00      	nop
 8000ad4:	3750      	adds	r7, #80	; 0x50
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	40023800 	.word	0x40023800
 8000ae0:	40007000 	.word	0x40007000

08000ae4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ae8:	b672      	cpsid	i
}
 8000aea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aec:	e7fe      	b.n	8000aec <Error_Handler+0x8>
	...

08000af0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b083      	sub	sp, #12
 8000af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000af6:	2300      	movs	r3, #0
 8000af8:	607b      	str	r3, [r7, #4]
 8000afa:	4b10      	ldr	r3, [pc, #64]	; (8000b3c <HAL_MspInit+0x4c>)
 8000afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000afe:	4a0f      	ldr	r2, [pc, #60]	; (8000b3c <HAL_MspInit+0x4c>)
 8000b00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b04:	6453      	str	r3, [r2, #68]	; 0x44
 8000b06:	4b0d      	ldr	r3, [pc, #52]	; (8000b3c <HAL_MspInit+0x4c>)
 8000b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b0e:	607b      	str	r3, [r7, #4]
 8000b10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b12:	2300      	movs	r3, #0
 8000b14:	603b      	str	r3, [r7, #0]
 8000b16:	4b09      	ldr	r3, [pc, #36]	; (8000b3c <HAL_MspInit+0x4c>)
 8000b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b1a:	4a08      	ldr	r2, [pc, #32]	; (8000b3c <HAL_MspInit+0x4c>)
 8000b1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b20:	6413      	str	r3, [r2, #64]	; 0x40
 8000b22:	4b06      	ldr	r3, [pc, #24]	; (8000b3c <HAL_MspInit+0x4c>)
 8000b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b2a:	603b      	str	r3, [r7, #0]
 8000b2c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b2e:	bf00      	nop
 8000b30:	370c      	adds	r7, #12
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	40023800 	.word	0x40023800

08000b40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b44:	e7fe      	b.n	8000b44 <NMI_Handler+0x4>

08000b46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b46:	b480      	push	{r7}
 8000b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b4a:	e7fe      	b.n	8000b4a <HardFault_Handler+0x4>

08000b4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b50:	e7fe      	b.n	8000b50 <MemManage_Handler+0x4>

08000b52 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b52:	b480      	push	{r7}
 8000b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b56:	e7fe      	b.n	8000b56 <BusFault_Handler+0x4>

08000b58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b5c:	e7fe      	b.n	8000b5c <UsageFault_Handler+0x4>

08000b5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b5e:	b480      	push	{r7}
 8000b60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b62:	bf00      	nop
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr

08000b6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b70:	bf00      	nop
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr

08000b7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b7a:	b480      	push	{r7}
 8000b7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b7e:	bf00      	nop
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr

08000b88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b8c:	f000 f93c 	bl	8000e08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b90:	bf00      	nop
 8000b92:	bd80      	pop	{r7, pc}

08000b94 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000b98:	4802      	ldr	r0, [pc, #8]	; (8000ba4 <I2C1_EV_IRQHandler+0x10>)
 8000b9a:	f000 fe11 	bl	80017c0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000b9e:	bf00      	nop
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	20000028 	.word	0x20000028

08000ba8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000bac:	4802      	ldr	r0, [pc, #8]	; (8000bb8 <I2C1_ER_IRQHandler+0x10>)
 8000bae:	f000 ff78 	bl	8001aa2 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	20000028 	.word	0x20000028

08000bbc <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8000bc0:	4802      	ldr	r0, [pc, #8]	; (8000bcc <I2C2_EV_IRQHandler+0x10>)
 8000bc2:	f000 fdfd 	bl	80017c0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8000bc6:	bf00      	nop
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	2000007c 	.word	0x2000007c

08000bd0 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8000bd4:	4802      	ldr	r0, [pc, #8]	; (8000be0 <I2C2_ER_IRQHandler+0x10>)
 8000bd6:	f000 ff64 	bl	8001aa2 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8000bda:	bf00      	nop
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	2000007c 	.word	0x2000007c

08000be4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000be8:	4802      	ldr	r0, [pc, #8]	; (8000bf4 <USART3_IRQHandler+0x10>)
 8000bea:	f003 f875 	bl	8003cd8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000bee:	bf00      	nop
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	200000d4 	.word	0x200000d4

08000bf8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bfc:	4b06      	ldr	r3, [pc, #24]	; (8000c18 <SystemInit+0x20>)
 8000bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c02:	4a05      	ldr	r2, [pc, #20]	; (8000c18 <SystemInit+0x20>)
 8000c04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c0c:	bf00      	nop
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	e000ed00 	.word	0xe000ed00

08000c1c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c20:	4b11      	ldr	r3, [pc, #68]	; (8000c68 <MX_USART3_UART_Init+0x4c>)
 8000c22:	4a12      	ldr	r2, [pc, #72]	; (8000c6c <MX_USART3_UART_Init+0x50>)
 8000c24:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c26:	4b10      	ldr	r3, [pc, #64]	; (8000c68 <MX_USART3_UART_Init+0x4c>)
 8000c28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c2c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c2e:	4b0e      	ldr	r3, [pc, #56]	; (8000c68 <MX_USART3_UART_Init+0x4c>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c34:	4b0c      	ldr	r3, [pc, #48]	; (8000c68 <MX_USART3_UART_Init+0x4c>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c3a:	4b0b      	ldr	r3, [pc, #44]	; (8000c68 <MX_USART3_UART_Init+0x4c>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c40:	4b09      	ldr	r3, [pc, #36]	; (8000c68 <MX_USART3_UART_Init+0x4c>)
 8000c42:	220c      	movs	r2, #12
 8000c44:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c46:	4b08      	ldr	r3, [pc, #32]	; (8000c68 <MX_USART3_UART_Init+0x4c>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c4c:	4b06      	ldr	r3, [pc, #24]	; (8000c68 <MX_USART3_UART_Init+0x4c>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c52:	4805      	ldr	r0, [pc, #20]	; (8000c68 <MX_USART3_UART_Init+0x4c>)
 8000c54:	f002 fff2 	bl	8003c3c <HAL_UART_Init>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000c5e:	f7ff ff41 	bl	8000ae4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c62:	bf00      	nop
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	200000d4 	.word	0x200000d4
 8000c6c:	40004800 	.word	0x40004800

08000c70 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b08a      	sub	sp, #40	; 0x28
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c78:	f107 0314 	add.w	r3, r7, #20
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	601a      	str	r2, [r3, #0]
 8000c80:	605a      	str	r2, [r3, #4]
 8000c82:	609a      	str	r2, [r3, #8]
 8000c84:	60da      	str	r2, [r3, #12]
 8000c86:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a1d      	ldr	r2, [pc, #116]	; (8000d04 <HAL_UART_MspInit+0x94>)
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	d134      	bne.n	8000cfc <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c92:	2300      	movs	r3, #0
 8000c94:	613b      	str	r3, [r7, #16]
 8000c96:	4b1c      	ldr	r3, [pc, #112]	; (8000d08 <HAL_UART_MspInit+0x98>)
 8000c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9a:	4a1b      	ldr	r2, [pc, #108]	; (8000d08 <HAL_UART_MspInit+0x98>)
 8000c9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ca0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ca2:	4b19      	ldr	r3, [pc, #100]	; (8000d08 <HAL_UART_MspInit+0x98>)
 8000ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000caa:	613b      	str	r3, [r7, #16]
 8000cac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cae:	2300      	movs	r3, #0
 8000cb0:	60fb      	str	r3, [r7, #12]
 8000cb2:	4b15      	ldr	r3, [pc, #84]	; (8000d08 <HAL_UART_MspInit+0x98>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb6:	4a14      	ldr	r2, [pc, #80]	; (8000d08 <HAL_UART_MspInit+0x98>)
 8000cb8:	f043 0302 	orr.w	r3, r3, #2
 8000cbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cbe:	4b12      	ldr	r3, [pc, #72]	; (8000d08 <HAL_UART_MspInit+0x98>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	f003 0302 	and.w	r3, r3, #2
 8000cc6:	60fb      	str	r3, [r7, #12]
 8000cc8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000cca:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000cce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd0:	2302      	movs	r3, #2
 8000cd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd8:	2303      	movs	r3, #3
 8000cda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000cdc:	2307      	movs	r3, #7
 8000cde:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ce0:	f107 0314 	add.w	r3, r7, #20
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	4809      	ldr	r0, [pc, #36]	; (8000d0c <HAL_UART_MspInit+0x9c>)
 8000ce8:	f000 fa60 	bl	80011ac <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000cec:	2200      	movs	r2, #0
 8000cee:	2100      	movs	r1, #0
 8000cf0:	2027      	movs	r0, #39	; 0x27
 8000cf2:	f000 f984 	bl	8000ffe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000cf6:	2027      	movs	r0, #39	; 0x27
 8000cf8:	f000 f99d 	bl	8001036 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000cfc:	bf00      	nop
 8000cfe:	3728      	adds	r7, #40	; 0x28
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	40004800 	.word	0x40004800
 8000d08:	40023800 	.word	0x40023800
 8000d0c:	40020400 	.word	0x40020400

08000d10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000d10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d48 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d14:	480d      	ldr	r0, [pc, #52]	; (8000d4c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d16:	490e      	ldr	r1, [pc, #56]	; (8000d50 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d18:	4a0e      	ldr	r2, [pc, #56]	; (8000d54 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d1c:	e002      	b.n	8000d24 <LoopCopyDataInit>

08000d1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d22:	3304      	adds	r3, #4

08000d24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d28:	d3f9      	bcc.n	8000d1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d2a:	4a0b      	ldr	r2, [pc, #44]	; (8000d58 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d2c:	4c0b      	ldr	r4, [pc, #44]	; (8000d5c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d30:	e001      	b.n	8000d36 <LoopFillZerobss>

08000d32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d34:	3204      	adds	r2, #4

08000d36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d38:	d3fb      	bcc.n	8000d32 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d3a:	f7ff ff5d 	bl	8000bf8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d3e:	f003 fe91 	bl	8004a64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d42:	f7ff fe3b 	bl	80009bc <main>
  bx  lr    
 8000d46:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000d48:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000d4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d50:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000d54:	08004afc 	.word	0x08004afc
  ldr r2, =_sbss
 8000d58:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000d5c:	2000011c 	.word	0x2000011c

08000d60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d60:	e7fe      	b.n	8000d60 <ADC_IRQHandler>
	...

08000d64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d68:	4b0e      	ldr	r3, [pc, #56]	; (8000da4 <HAL_Init+0x40>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a0d      	ldr	r2, [pc, #52]	; (8000da4 <HAL_Init+0x40>)
 8000d6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d72:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d74:	4b0b      	ldr	r3, [pc, #44]	; (8000da4 <HAL_Init+0x40>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a0a      	ldr	r2, [pc, #40]	; (8000da4 <HAL_Init+0x40>)
 8000d7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d7e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d80:	4b08      	ldr	r3, [pc, #32]	; (8000da4 <HAL_Init+0x40>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a07      	ldr	r2, [pc, #28]	; (8000da4 <HAL_Init+0x40>)
 8000d86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d8a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d8c:	2003      	movs	r0, #3
 8000d8e:	f000 f92b 	bl	8000fe8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d92:	2000      	movs	r0, #0
 8000d94:	f000 f808 	bl	8000da8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d98:	f7ff feaa 	bl	8000af0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d9c:	2300      	movs	r3, #0
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	40023c00 	.word	0x40023c00

08000da8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000db0:	4b12      	ldr	r3, [pc, #72]	; (8000dfc <HAL_InitTick+0x54>)
 8000db2:	681a      	ldr	r2, [r3, #0]
 8000db4:	4b12      	ldr	r3, [pc, #72]	; (8000e00 <HAL_InitTick+0x58>)
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	4619      	mov	r1, r3
 8000dba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f000 f943 	bl	8001052 <HAL_SYSTICK_Config>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	e00e      	b.n	8000df4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	2b0f      	cmp	r3, #15
 8000dda:	d80a      	bhi.n	8000df2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ddc:	2200      	movs	r2, #0
 8000dde:	6879      	ldr	r1, [r7, #4]
 8000de0:	f04f 30ff 	mov.w	r0, #4294967295
 8000de4:	f000 f90b 	bl	8000ffe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000de8:	4a06      	ldr	r2, [pc, #24]	; (8000e04 <HAL_InitTick+0x5c>)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dee:	2300      	movs	r3, #0
 8000df0:	e000      	b.n	8000df4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000df2:	2301      	movs	r3, #1
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	3708      	adds	r7, #8
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	20000000 	.word	0x20000000
 8000e00:	20000008 	.word	0x20000008
 8000e04:	20000004 	.word	0x20000004

08000e08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e0c:	4b06      	ldr	r3, [pc, #24]	; (8000e28 <HAL_IncTick+0x20>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	461a      	mov	r2, r3
 8000e12:	4b06      	ldr	r3, [pc, #24]	; (8000e2c <HAL_IncTick+0x24>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4413      	add	r3, r2
 8000e18:	4a04      	ldr	r2, [pc, #16]	; (8000e2c <HAL_IncTick+0x24>)
 8000e1a:	6013      	str	r3, [r2, #0]
}
 8000e1c:	bf00      	nop
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	20000008 	.word	0x20000008
 8000e2c:	20000118 	.word	0x20000118

08000e30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  return uwTick;
 8000e34:	4b03      	ldr	r3, [pc, #12]	; (8000e44 <HAL_GetTick+0x14>)
 8000e36:	681b      	ldr	r3, [r3, #0]
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	20000118 	.word	0x20000118

08000e48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b085      	sub	sp, #20
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	f003 0307 	and.w	r3, r3, #7
 8000e56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e58:	4b0c      	ldr	r3, [pc, #48]	; (8000e8c <__NVIC_SetPriorityGrouping+0x44>)
 8000e5a:	68db      	ldr	r3, [r3, #12]
 8000e5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e5e:	68ba      	ldr	r2, [r7, #8]
 8000e60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e64:	4013      	ands	r3, r2
 8000e66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e6c:	68bb      	ldr	r3, [r7, #8]
 8000e6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e7a:	4a04      	ldr	r2, [pc, #16]	; (8000e8c <__NVIC_SetPriorityGrouping+0x44>)
 8000e7c:	68bb      	ldr	r3, [r7, #8]
 8000e7e:	60d3      	str	r3, [r2, #12]
}
 8000e80:	bf00      	nop
 8000e82:	3714      	adds	r7, #20
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr
 8000e8c:	e000ed00 	.word	0xe000ed00

08000e90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e94:	4b04      	ldr	r3, [pc, #16]	; (8000ea8 <__NVIC_GetPriorityGrouping+0x18>)
 8000e96:	68db      	ldr	r3, [r3, #12]
 8000e98:	0a1b      	lsrs	r3, r3, #8
 8000e9a:	f003 0307 	and.w	r3, r3, #7
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr
 8000ea8:	e000ed00 	.word	0xe000ed00

08000eac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	db0b      	blt.n	8000ed6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ebe:	79fb      	ldrb	r3, [r7, #7]
 8000ec0:	f003 021f 	and.w	r2, r3, #31
 8000ec4:	4907      	ldr	r1, [pc, #28]	; (8000ee4 <__NVIC_EnableIRQ+0x38>)
 8000ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eca:	095b      	lsrs	r3, r3, #5
 8000ecc:	2001      	movs	r0, #1
 8000ece:	fa00 f202 	lsl.w	r2, r0, r2
 8000ed2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ed6:	bf00      	nop
 8000ed8:	370c      	adds	r7, #12
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	e000e100 	.word	0xe000e100

08000ee8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	4603      	mov	r3, r0
 8000ef0:	6039      	str	r1, [r7, #0]
 8000ef2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ef4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	db0a      	blt.n	8000f12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	b2da      	uxtb	r2, r3
 8000f00:	490c      	ldr	r1, [pc, #48]	; (8000f34 <__NVIC_SetPriority+0x4c>)
 8000f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f06:	0112      	lsls	r2, r2, #4
 8000f08:	b2d2      	uxtb	r2, r2
 8000f0a:	440b      	add	r3, r1
 8000f0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f10:	e00a      	b.n	8000f28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	b2da      	uxtb	r2, r3
 8000f16:	4908      	ldr	r1, [pc, #32]	; (8000f38 <__NVIC_SetPriority+0x50>)
 8000f18:	79fb      	ldrb	r3, [r7, #7]
 8000f1a:	f003 030f 	and.w	r3, r3, #15
 8000f1e:	3b04      	subs	r3, #4
 8000f20:	0112      	lsls	r2, r2, #4
 8000f22:	b2d2      	uxtb	r2, r2
 8000f24:	440b      	add	r3, r1
 8000f26:	761a      	strb	r2, [r3, #24]
}
 8000f28:	bf00      	nop
 8000f2a:	370c      	adds	r7, #12
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr
 8000f34:	e000e100 	.word	0xe000e100
 8000f38:	e000ed00 	.word	0xe000ed00

08000f3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b089      	sub	sp, #36	; 0x24
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	60f8      	str	r0, [r7, #12]
 8000f44:	60b9      	str	r1, [r7, #8]
 8000f46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	f003 0307 	and.w	r3, r3, #7
 8000f4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f50:	69fb      	ldr	r3, [r7, #28]
 8000f52:	f1c3 0307 	rsb	r3, r3, #7
 8000f56:	2b04      	cmp	r3, #4
 8000f58:	bf28      	it	cs
 8000f5a:	2304      	movcs	r3, #4
 8000f5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	3304      	adds	r3, #4
 8000f62:	2b06      	cmp	r3, #6
 8000f64:	d902      	bls.n	8000f6c <NVIC_EncodePriority+0x30>
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	3b03      	subs	r3, #3
 8000f6a:	e000      	b.n	8000f6e <NVIC_EncodePriority+0x32>
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f70:	f04f 32ff 	mov.w	r2, #4294967295
 8000f74:	69bb      	ldr	r3, [r7, #24]
 8000f76:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7a:	43da      	mvns	r2, r3
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	401a      	ands	r2, r3
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f84:	f04f 31ff 	mov.w	r1, #4294967295
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f8e:	43d9      	mvns	r1, r3
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f94:	4313      	orrs	r3, r2
         );
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3724      	adds	r7, #36	; 0x24
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
	...

08000fa4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	3b01      	subs	r3, #1
 8000fb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fb4:	d301      	bcc.n	8000fba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	e00f      	b.n	8000fda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fba:	4a0a      	ldr	r2, [pc, #40]	; (8000fe4 <SysTick_Config+0x40>)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	3b01      	subs	r3, #1
 8000fc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fc2:	210f      	movs	r1, #15
 8000fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fc8:	f7ff ff8e 	bl	8000ee8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fcc:	4b05      	ldr	r3, [pc, #20]	; (8000fe4 <SysTick_Config+0x40>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fd2:	4b04      	ldr	r3, [pc, #16]	; (8000fe4 <SysTick_Config+0x40>)
 8000fd4:	2207      	movs	r2, #7
 8000fd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fd8:	2300      	movs	r3, #0
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	e000e010 	.word	0xe000e010

08000fe8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ff0:	6878      	ldr	r0, [r7, #4]
 8000ff2:	f7ff ff29 	bl	8000e48 <__NVIC_SetPriorityGrouping>
}
 8000ff6:	bf00      	nop
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}

08000ffe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ffe:	b580      	push	{r7, lr}
 8001000:	b086      	sub	sp, #24
 8001002:	af00      	add	r7, sp, #0
 8001004:	4603      	mov	r3, r0
 8001006:	60b9      	str	r1, [r7, #8]
 8001008:	607a      	str	r2, [r7, #4]
 800100a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800100c:	2300      	movs	r3, #0
 800100e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001010:	f7ff ff3e 	bl	8000e90 <__NVIC_GetPriorityGrouping>
 8001014:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001016:	687a      	ldr	r2, [r7, #4]
 8001018:	68b9      	ldr	r1, [r7, #8]
 800101a:	6978      	ldr	r0, [r7, #20]
 800101c:	f7ff ff8e 	bl	8000f3c <NVIC_EncodePriority>
 8001020:	4602      	mov	r2, r0
 8001022:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001026:	4611      	mov	r1, r2
 8001028:	4618      	mov	r0, r3
 800102a:	f7ff ff5d 	bl	8000ee8 <__NVIC_SetPriority>
}
 800102e:	bf00      	nop
 8001030:	3718      	adds	r7, #24
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}

08001036 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001036:	b580      	push	{r7, lr}
 8001038:	b082      	sub	sp, #8
 800103a:	af00      	add	r7, sp, #0
 800103c:	4603      	mov	r3, r0
 800103e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001040:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001044:	4618      	mov	r0, r3
 8001046:	f7ff ff31 	bl	8000eac <__NVIC_EnableIRQ>
}
 800104a:	bf00      	nop
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}

08001052 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001052:	b580      	push	{r7, lr}
 8001054:	b082      	sub	sp, #8
 8001056:	af00      	add	r7, sp, #0
 8001058:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800105a:	6878      	ldr	r0, [r7, #4]
 800105c:	f7ff ffa2 	bl	8000fa4 <SysTick_Config>
 8001060:	4603      	mov	r3, r0
}
 8001062:	4618      	mov	r0, r3
 8001064:	3708      	adds	r7, #8
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}

0800106a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800106a:	b580      	push	{r7, lr}
 800106c:	b084      	sub	sp, #16
 800106e:	af00      	add	r7, sp, #0
 8001070:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001076:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001078:	f7ff feda 	bl	8000e30 <HAL_GetTick>
 800107c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001084:	b2db      	uxtb	r3, r3
 8001086:	2b02      	cmp	r3, #2
 8001088:	d008      	beq.n	800109c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2280      	movs	r2, #128	; 0x80
 800108e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2200      	movs	r2, #0
 8001094:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001098:	2301      	movs	r3, #1
 800109a:	e052      	b.n	8001142 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f022 0216 	bic.w	r2, r2, #22
 80010aa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	695a      	ldr	r2, [r3, #20]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80010ba:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d103      	bne.n	80010cc <HAL_DMA_Abort+0x62>
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d007      	beq.n	80010dc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f022 0208 	bic.w	r2, r2, #8
 80010da:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f022 0201 	bic.w	r2, r2, #1
 80010ea:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010ec:	e013      	b.n	8001116 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80010ee:	f7ff fe9f 	bl	8000e30 <HAL_GetTick>
 80010f2:	4602      	mov	r2, r0
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	1ad3      	subs	r3, r2, r3
 80010f8:	2b05      	cmp	r3, #5
 80010fa:	d90c      	bls.n	8001116 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2220      	movs	r2, #32
 8001100:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2203      	movs	r2, #3
 8001106:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2200      	movs	r2, #0
 800110e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001112:	2303      	movs	r3, #3
 8001114:	e015      	b.n	8001142 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f003 0301 	and.w	r3, r3, #1
 8001120:	2b00      	cmp	r3, #0
 8001122:	d1e4      	bne.n	80010ee <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001128:	223f      	movs	r2, #63	; 0x3f
 800112a:	409a      	lsls	r2, r3
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2201      	movs	r2, #1
 8001134:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2200      	movs	r2, #0
 800113c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001140:	2300      	movs	r3, #0
}
 8001142:	4618      	mov	r0, r3
 8001144:	3710      	adds	r7, #16
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}

0800114a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800114a:	b480      	push	{r7}
 800114c:	b083      	sub	sp, #12
 800114e:	af00      	add	r7, sp, #0
 8001150:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001158:	b2db      	uxtb	r3, r3
 800115a:	2b02      	cmp	r3, #2
 800115c:	d004      	beq.n	8001168 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2280      	movs	r2, #128	; 0x80
 8001162:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001164:	2301      	movs	r3, #1
 8001166:	e00c      	b.n	8001182 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2205      	movs	r2, #5
 800116c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f022 0201 	bic.w	r2, r2, #1
 800117e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001180:	2300      	movs	r3, #0
}
 8001182:	4618      	mov	r0, r3
 8001184:	370c      	adds	r7, #12
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr

0800118e <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800118e:	b480      	push	{r7}
 8001190:	b083      	sub	sp, #12
 8001192:	af00      	add	r7, sp, #0
 8001194:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800119c:	b2db      	uxtb	r3, r3
}
 800119e:	4618      	mov	r0, r3
 80011a0:	370c      	adds	r7, #12
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
	...

080011ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b089      	sub	sp, #36	; 0x24
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011b6:	2300      	movs	r3, #0
 80011b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011ba:	2300      	movs	r3, #0
 80011bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011be:	2300      	movs	r3, #0
 80011c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011c2:	2300      	movs	r3, #0
 80011c4:	61fb      	str	r3, [r7, #28]
 80011c6:	e177      	b.n	80014b8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011c8:	2201      	movs	r2, #1
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	fa02 f303 	lsl.w	r3, r2, r3
 80011d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	697a      	ldr	r2, [r7, #20]
 80011d8:	4013      	ands	r3, r2
 80011da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011dc:	693a      	ldr	r2, [r7, #16]
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	429a      	cmp	r2, r3
 80011e2:	f040 8166 	bne.w	80014b2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	f003 0303 	and.w	r3, r3, #3
 80011ee:	2b01      	cmp	r3, #1
 80011f0:	d005      	beq.n	80011fe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011fa:	2b02      	cmp	r3, #2
 80011fc:	d130      	bne.n	8001260 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	689b      	ldr	r3, [r3, #8]
 8001202:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001204:	69fb      	ldr	r3, [r7, #28]
 8001206:	005b      	lsls	r3, r3, #1
 8001208:	2203      	movs	r2, #3
 800120a:	fa02 f303 	lsl.w	r3, r2, r3
 800120e:	43db      	mvns	r3, r3
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	4013      	ands	r3, r2
 8001214:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	68da      	ldr	r2, [r3, #12]
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	005b      	lsls	r3, r3, #1
 800121e:	fa02 f303 	lsl.w	r3, r2, r3
 8001222:	69ba      	ldr	r2, [r7, #24]
 8001224:	4313      	orrs	r3, r2
 8001226:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	69ba      	ldr	r2, [r7, #24]
 800122c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001234:	2201      	movs	r2, #1
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	43db      	mvns	r3, r3
 800123e:	69ba      	ldr	r2, [r7, #24]
 8001240:	4013      	ands	r3, r2
 8001242:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	091b      	lsrs	r3, r3, #4
 800124a:	f003 0201 	and.w	r2, r3, #1
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	fa02 f303 	lsl.w	r3, r2, r3
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	4313      	orrs	r3, r2
 8001258:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	69ba      	ldr	r2, [r7, #24]
 800125e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f003 0303 	and.w	r3, r3, #3
 8001268:	2b03      	cmp	r3, #3
 800126a:	d017      	beq.n	800129c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	68db      	ldr	r3, [r3, #12]
 8001270:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	005b      	lsls	r3, r3, #1
 8001276:	2203      	movs	r2, #3
 8001278:	fa02 f303 	lsl.w	r3, r2, r3
 800127c:	43db      	mvns	r3, r3
 800127e:	69ba      	ldr	r2, [r7, #24]
 8001280:	4013      	ands	r3, r2
 8001282:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	689a      	ldr	r2, [r3, #8]
 8001288:	69fb      	ldr	r3, [r7, #28]
 800128a:	005b      	lsls	r3, r3, #1
 800128c:	fa02 f303 	lsl.w	r3, r2, r3
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	4313      	orrs	r3, r2
 8001294:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f003 0303 	and.w	r3, r3, #3
 80012a4:	2b02      	cmp	r3, #2
 80012a6:	d123      	bne.n	80012f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012a8:	69fb      	ldr	r3, [r7, #28]
 80012aa:	08da      	lsrs	r2, r3, #3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	3208      	adds	r2, #8
 80012b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	f003 0307 	and.w	r3, r3, #7
 80012bc:	009b      	lsls	r3, r3, #2
 80012be:	220f      	movs	r2, #15
 80012c0:	fa02 f303 	lsl.w	r3, r2, r3
 80012c4:	43db      	mvns	r3, r3
 80012c6:	69ba      	ldr	r2, [r7, #24]
 80012c8:	4013      	ands	r3, r2
 80012ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	691a      	ldr	r2, [r3, #16]
 80012d0:	69fb      	ldr	r3, [r7, #28]
 80012d2:	f003 0307 	and.w	r3, r3, #7
 80012d6:	009b      	lsls	r3, r3, #2
 80012d8:	fa02 f303 	lsl.w	r3, r2, r3
 80012dc:	69ba      	ldr	r2, [r7, #24]
 80012de:	4313      	orrs	r3, r2
 80012e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	08da      	lsrs	r2, r3, #3
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	3208      	adds	r2, #8
 80012ea:	69b9      	ldr	r1, [r7, #24]
 80012ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	005b      	lsls	r3, r3, #1
 80012fa:	2203      	movs	r2, #3
 80012fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001300:	43db      	mvns	r3, r3
 8001302:	69ba      	ldr	r2, [r7, #24]
 8001304:	4013      	ands	r3, r2
 8001306:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f003 0203 	and.w	r2, r3, #3
 8001310:	69fb      	ldr	r3, [r7, #28]
 8001312:	005b      	lsls	r3, r3, #1
 8001314:	fa02 f303 	lsl.w	r3, r2, r3
 8001318:	69ba      	ldr	r2, [r7, #24]
 800131a:	4313      	orrs	r3, r2
 800131c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	69ba      	ldr	r2, [r7, #24]
 8001322:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800132c:	2b00      	cmp	r3, #0
 800132e:	f000 80c0 	beq.w	80014b2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001332:	2300      	movs	r3, #0
 8001334:	60fb      	str	r3, [r7, #12]
 8001336:	4b66      	ldr	r3, [pc, #408]	; (80014d0 <HAL_GPIO_Init+0x324>)
 8001338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800133a:	4a65      	ldr	r2, [pc, #404]	; (80014d0 <HAL_GPIO_Init+0x324>)
 800133c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001340:	6453      	str	r3, [r2, #68]	; 0x44
 8001342:	4b63      	ldr	r3, [pc, #396]	; (80014d0 <HAL_GPIO_Init+0x324>)
 8001344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001346:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800134a:	60fb      	str	r3, [r7, #12]
 800134c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800134e:	4a61      	ldr	r2, [pc, #388]	; (80014d4 <HAL_GPIO_Init+0x328>)
 8001350:	69fb      	ldr	r3, [r7, #28]
 8001352:	089b      	lsrs	r3, r3, #2
 8001354:	3302      	adds	r3, #2
 8001356:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800135a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800135c:	69fb      	ldr	r3, [r7, #28]
 800135e:	f003 0303 	and.w	r3, r3, #3
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	220f      	movs	r2, #15
 8001366:	fa02 f303 	lsl.w	r3, r2, r3
 800136a:	43db      	mvns	r3, r3
 800136c:	69ba      	ldr	r2, [r7, #24]
 800136e:	4013      	ands	r3, r2
 8001370:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4a58      	ldr	r2, [pc, #352]	; (80014d8 <HAL_GPIO_Init+0x32c>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d037      	beq.n	80013ea <HAL_GPIO_Init+0x23e>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4a57      	ldr	r2, [pc, #348]	; (80014dc <HAL_GPIO_Init+0x330>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d031      	beq.n	80013e6 <HAL_GPIO_Init+0x23a>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4a56      	ldr	r2, [pc, #344]	; (80014e0 <HAL_GPIO_Init+0x334>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d02b      	beq.n	80013e2 <HAL_GPIO_Init+0x236>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4a55      	ldr	r2, [pc, #340]	; (80014e4 <HAL_GPIO_Init+0x338>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d025      	beq.n	80013de <HAL_GPIO_Init+0x232>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4a54      	ldr	r2, [pc, #336]	; (80014e8 <HAL_GPIO_Init+0x33c>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d01f      	beq.n	80013da <HAL_GPIO_Init+0x22e>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4a53      	ldr	r2, [pc, #332]	; (80014ec <HAL_GPIO_Init+0x340>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d019      	beq.n	80013d6 <HAL_GPIO_Init+0x22a>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4a52      	ldr	r2, [pc, #328]	; (80014f0 <HAL_GPIO_Init+0x344>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d013      	beq.n	80013d2 <HAL_GPIO_Init+0x226>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4a51      	ldr	r2, [pc, #324]	; (80014f4 <HAL_GPIO_Init+0x348>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d00d      	beq.n	80013ce <HAL_GPIO_Init+0x222>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4a50      	ldr	r2, [pc, #320]	; (80014f8 <HAL_GPIO_Init+0x34c>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d007      	beq.n	80013ca <HAL_GPIO_Init+0x21e>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4a4f      	ldr	r2, [pc, #316]	; (80014fc <HAL_GPIO_Init+0x350>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d101      	bne.n	80013c6 <HAL_GPIO_Init+0x21a>
 80013c2:	2309      	movs	r3, #9
 80013c4:	e012      	b.n	80013ec <HAL_GPIO_Init+0x240>
 80013c6:	230a      	movs	r3, #10
 80013c8:	e010      	b.n	80013ec <HAL_GPIO_Init+0x240>
 80013ca:	2308      	movs	r3, #8
 80013cc:	e00e      	b.n	80013ec <HAL_GPIO_Init+0x240>
 80013ce:	2307      	movs	r3, #7
 80013d0:	e00c      	b.n	80013ec <HAL_GPIO_Init+0x240>
 80013d2:	2306      	movs	r3, #6
 80013d4:	e00a      	b.n	80013ec <HAL_GPIO_Init+0x240>
 80013d6:	2305      	movs	r3, #5
 80013d8:	e008      	b.n	80013ec <HAL_GPIO_Init+0x240>
 80013da:	2304      	movs	r3, #4
 80013dc:	e006      	b.n	80013ec <HAL_GPIO_Init+0x240>
 80013de:	2303      	movs	r3, #3
 80013e0:	e004      	b.n	80013ec <HAL_GPIO_Init+0x240>
 80013e2:	2302      	movs	r3, #2
 80013e4:	e002      	b.n	80013ec <HAL_GPIO_Init+0x240>
 80013e6:	2301      	movs	r3, #1
 80013e8:	e000      	b.n	80013ec <HAL_GPIO_Init+0x240>
 80013ea:	2300      	movs	r3, #0
 80013ec:	69fa      	ldr	r2, [r7, #28]
 80013ee:	f002 0203 	and.w	r2, r2, #3
 80013f2:	0092      	lsls	r2, r2, #2
 80013f4:	4093      	lsls	r3, r2
 80013f6:	69ba      	ldr	r2, [r7, #24]
 80013f8:	4313      	orrs	r3, r2
 80013fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013fc:	4935      	ldr	r1, [pc, #212]	; (80014d4 <HAL_GPIO_Init+0x328>)
 80013fe:	69fb      	ldr	r3, [r7, #28]
 8001400:	089b      	lsrs	r3, r3, #2
 8001402:	3302      	adds	r3, #2
 8001404:	69ba      	ldr	r2, [r7, #24]
 8001406:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800140a:	4b3d      	ldr	r3, [pc, #244]	; (8001500 <HAL_GPIO_Init+0x354>)
 800140c:	689b      	ldr	r3, [r3, #8]
 800140e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	43db      	mvns	r3, r3
 8001414:	69ba      	ldr	r2, [r7, #24]
 8001416:	4013      	ands	r3, r2
 8001418:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001422:	2b00      	cmp	r3, #0
 8001424:	d003      	beq.n	800142e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001426:	69ba      	ldr	r2, [r7, #24]
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	4313      	orrs	r3, r2
 800142c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800142e:	4a34      	ldr	r2, [pc, #208]	; (8001500 <HAL_GPIO_Init+0x354>)
 8001430:	69bb      	ldr	r3, [r7, #24]
 8001432:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001434:	4b32      	ldr	r3, [pc, #200]	; (8001500 <HAL_GPIO_Init+0x354>)
 8001436:	68db      	ldr	r3, [r3, #12]
 8001438:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	43db      	mvns	r3, r3
 800143e:	69ba      	ldr	r2, [r7, #24]
 8001440:	4013      	ands	r3, r2
 8001442:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800144c:	2b00      	cmp	r3, #0
 800144e:	d003      	beq.n	8001458 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001450:	69ba      	ldr	r2, [r7, #24]
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	4313      	orrs	r3, r2
 8001456:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001458:	4a29      	ldr	r2, [pc, #164]	; (8001500 <HAL_GPIO_Init+0x354>)
 800145a:	69bb      	ldr	r3, [r7, #24]
 800145c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800145e:	4b28      	ldr	r3, [pc, #160]	; (8001500 <HAL_GPIO_Init+0x354>)
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	43db      	mvns	r3, r3
 8001468:	69ba      	ldr	r2, [r7, #24]
 800146a:	4013      	ands	r3, r2
 800146c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001476:	2b00      	cmp	r3, #0
 8001478:	d003      	beq.n	8001482 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800147a:	69ba      	ldr	r2, [r7, #24]
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	4313      	orrs	r3, r2
 8001480:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001482:	4a1f      	ldr	r2, [pc, #124]	; (8001500 <HAL_GPIO_Init+0x354>)
 8001484:	69bb      	ldr	r3, [r7, #24]
 8001486:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001488:	4b1d      	ldr	r3, [pc, #116]	; (8001500 <HAL_GPIO_Init+0x354>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	43db      	mvns	r3, r3
 8001492:	69ba      	ldr	r2, [r7, #24]
 8001494:	4013      	ands	r3, r2
 8001496:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d003      	beq.n	80014ac <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80014a4:	69ba      	ldr	r2, [r7, #24]
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	4313      	orrs	r3, r2
 80014aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014ac:	4a14      	ldr	r2, [pc, #80]	; (8001500 <HAL_GPIO_Init+0x354>)
 80014ae:	69bb      	ldr	r3, [r7, #24]
 80014b0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	3301      	adds	r3, #1
 80014b6:	61fb      	str	r3, [r7, #28]
 80014b8:	69fb      	ldr	r3, [r7, #28]
 80014ba:	2b0f      	cmp	r3, #15
 80014bc:	f67f ae84 	bls.w	80011c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014c0:	bf00      	nop
 80014c2:	bf00      	nop
 80014c4:	3724      	adds	r7, #36	; 0x24
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	40023800 	.word	0x40023800
 80014d4:	40013800 	.word	0x40013800
 80014d8:	40020000 	.word	0x40020000
 80014dc:	40020400 	.word	0x40020400
 80014e0:	40020800 	.word	0x40020800
 80014e4:	40020c00 	.word	0x40020c00
 80014e8:	40021000 	.word	0x40021000
 80014ec:	40021400 	.word	0x40021400
 80014f0:	40021800 	.word	0x40021800
 80014f4:	40021c00 	.word	0x40021c00
 80014f8:	40022000 	.word	0x40022000
 80014fc:	40022400 	.word	0x40022400
 8001500:	40013c00 	.word	0x40013c00

08001504 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
 800150c:	460b      	mov	r3, r1
 800150e:	807b      	strh	r3, [r7, #2]
 8001510:	4613      	mov	r3, r2
 8001512:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001514:	787b      	ldrb	r3, [r7, #1]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d003      	beq.n	8001522 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800151a:	887a      	ldrh	r2, [r7, #2]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001520:	e003      	b.n	800152a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001522:	887b      	ldrh	r3, [r7, #2]
 8001524:	041a      	lsls	r2, r3, #16
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	619a      	str	r2, [r3, #24]
}
 800152a:	bf00      	nop
 800152c:	370c      	adds	r7, #12
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
	...

08001538 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b084      	sub	sp, #16
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d101      	bne.n	800154a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	e12b      	b.n	80017a2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001550:	b2db      	uxtb	r3, r3
 8001552:	2b00      	cmp	r3, #0
 8001554:	d106      	bne.n	8001564 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2200      	movs	r2, #0
 800155a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800155e:	6878      	ldr	r0, [r7, #4]
 8001560:	f7ff f98e 	bl	8000880 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2224      	movs	r2, #36	; 0x24
 8001568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f022 0201 	bic.w	r2, r2, #1
 800157a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800158a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800159a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800159c:	f002 fb26 	bl	8003bec <HAL_RCC_GetPCLK1Freq>
 80015a0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	4a81      	ldr	r2, [pc, #516]	; (80017ac <HAL_I2C_Init+0x274>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d807      	bhi.n	80015bc <HAL_I2C_Init+0x84>
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	4a80      	ldr	r2, [pc, #512]	; (80017b0 <HAL_I2C_Init+0x278>)
 80015b0:	4293      	cmp	r3, r2
 80015b2:	bf94      	ite	ls
 80015b4:	2301      	movls	r3, #1
 80015b6:	2300      	movhi	r3, #0
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	e006      	b.n	80015ca <HAL_I2C_Init+0x92>
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	4a7d      	ldr	r2, [pc, #500]	; (80017b4 <HAL_I2C_Init+0x27c>)
 80015c0:	4293      	cmp	r3, r2
 80015c2:	bf94      	ite	ls
 80015c4:	2301      	movls	r3, #1
 80015c6:	2300      	movhi	r3, #0
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	e0e7      	b.n	80017a2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	4a78      	ldr	r2, [pc, #480]	; (80017b8 <HAL_I2C_Init+0x280>)
 80015d6:	fba2 2303 	umull	r2, r3, r2, r3
 80015da:	0c9b      	lsrs	r3, r3, #18
 80015dc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	68ba      	ldr	r2, [r7, #8]
 80015ee:	430a      	orrs	r2, r1
 80015f0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	6a1b      	ldr	r3, [r3, #32]
 80015f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	4a6a      	ldr	r2, [pc, #424]	; (80017ac <HAL_I2C_Init+0x274>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d802      	bhi.n	800160c <HAL_I2C_Init+0xd4>
 8001606:	68bb      	ldr	r3, [r7, #8]
 8001608:	3301      	adds	r3, #1
 800160a:	e009      	b.n	8001620 <HAL_I2C_Init+0xe8>
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001612:	fb02 f303 	mul.w	r3, r2, r3
 8001616:	4a69      	ldr	r2, [pc, #420]	; (80017bc <HAL_I2C_Init+0x284>)
 8001618:	fba2 2303 	umull	r2, r3, r2, r3
 800161c:	099b      	lsrs	r3, r3, #6
 800161e:	3301      	adds	r3, #1
 8001620:	687a      	ldr	r2, [r7, #4]
 8001622:	6812      	ldr	r2, [r2, #0]
 8001624:	430b      	orrs	r3, r1
 8001626:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	69db      	ldr	r3, [r3, #28]
 800162e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001632:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	495c      	ldr	r1, [pc, #368]	; (80017ac <HAL_I2C_Init+0x274>)
 800163c:	428b      	cmp	r3, r1
 800163e:	d819      	bhi.n	8001674 <HAL_I2C_Init+0x13c>
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	1e59      	subs	r1, r3, #1
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	005b      	lsls	r3, r3, #1
 800164a:	fbb1 f3f3 	udiv	r3, r1, r3
 800164e:	1c59      	adds	r1, r3, #1
 8001650:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001654:	400b      	ands	r3, r1
 8001656:	2b00      	cmp	r3, #0
 8001658:	d00a      	beq.n	8001670 <HAL_I2C_Init+0x138>
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	1e59      	subs	r1, r3, #1
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	005b      	lsls	r3, r3, #1
 8001664:	fbb1 f3f3 	udiv	r3, r1, r3
 8001668:	3301      	adds	r3, #1
 800166a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800166e:	e051      	b.n	8001714 <HAL_I2C_Init+0x1dc>
 8001670:	2304      	movs	r3, #4
 8001672:	e04f      	b.n	8001714 <HAL_I2C_Init+0x1dc>
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	689b      	ldr	r3, [r3, #8]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d111      	bne.n	80016a0 <HAL_I2C_Init+0x168>
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	1e58      	subs	r0, r3, #1
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6859      	ldr	r1, [r3, #4]
 8001684:	460b      	mov	r3, r1
 8001686:	005b      	lsls	r3, r3, #1
 8001688:	440b      	add	r3, r1
 800168a:	fbb0 f3f3 	udiv	r3, r0, r3
 800168e:	3301      	adds	r3, #1
 8001690:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001694:	2b00      	cmp	r3, #0
 8001696:	bf0c      	ite	eq
 8001698:	2301      	moveq	r3, #1
 800169a:	2300      	movne	r3, #0
 800169c:	b2db      	uxtb	r3, r3
 800169e:	e012      	b.n	80016c6 <HAL_I2C_Init+0x18e>
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	1e58      	subs	r0, r3, #1
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6859      	ldr	r1, [r3, #4]
 80016a8:	460b      	mov	r3, r1
 80016aa:	009b      	lsls	r3, r3, #2
 80016ac:	440b      	add	r3, r1
 80016ae:	0099      	lsls	r1, r3, #2
 80016b0:	440b      	add	r3, r1
 80016b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80016b6:	3301      	adds	r3, #1
 80016b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016bc:	2b00      	cmp	r3, #0
 80016be:	bf0c      	ite	eq
 80016c0:	2301      	moveq	r3, #1
 80016c2:	2300      	movne	r3, #0
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <HAL_I2C_Init+0x196>
 80016ca:	2301      	movs	r3, #1
 80016cc:	e022      	b.n	8001714 <HAL_I2C_Init+0x1dc>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d10e      	bne.n	80016f4 <HAL_I2C_Init+0x1bc>
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	1e58      	subs	r0, r3, #1
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6859      	ldr	r1, [r3, #4]
 80016de:	460b      	mov	r3, r1
 80016e0:	005b      	lsls	r3, r3, #1
 80016e2:	440b      	add	r3, r1
 80016e4:	fbb0 f3f3 	udiv	r3, r0, r3
 80016e8:	3301      	adds	r3, #1
 80016ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016f2:	e00f      	b.n	8001714 <HAL_I2C_Init+0x1dc>
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	1e58      	subs	r0, r3, #1
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6859      	ldr	r1, [r3, #4]
 80016fc:	460b      	mov	r3, r1
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	440b      	add	r3, r1
 8001702:	0099      	lsls	r1, r3, #2
 8001704:	440b      	add	r3, r1
 8001706:	fbb0 f3f3 	udiv	r3, r0, r3
 800170a:	3301      	adds	r3, #1
 800170c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001710:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001714:	6879      	ldr	r1, [r7, #4]
 8001716:	6809      	ldr	r1, [r1, #0]
 8001718:	4313      	orrs	r3, r2
 800171a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	69da      	ldr	r2, [r3, #28]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6a1b      	ldr	r3, [r3, #32]
 800172e:	431a      	orrs	r2, r3
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	430a      	orrs	r2, r1
 8001736:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001742:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001746:	687a      	ldr	r2, [r7, #4]
 8001748:	6911      	ldr	r1, [r2, #16]
 800174a:	687a      	ldr	r2, [r7, #4]
 800174c:	68d2      	ldr	r2, [r2, #12]
 800174e:	4311      	orrs	r1, r2
 8001750:	687a      	ldr	r2, [r7, #4]
 8001752:	6812      	ldr	r2, [r2, #0]
 8001754:	430b      	orrs	r3, r1
 8001756:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	68db      	ldr	r3, [r3, #12]
 800175e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	695a      	ldr	r2, [r3, #20]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	699b      	ldr	r3, [r3, #24]
 800176a:	431a      	orrs	r2, r3
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	430a      	orrs	r2, r1
 8001772:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f042 0201 	orr.w	r2, r2, #1
 8001782:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2200      	movs	r2, #0
 8001788:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2220      	movs	r2, #32
 800178e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2200      	movs	r2, #0
 8001796:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2200      	movs	r2, #0
 800179c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80017a0:	2300      	movs	r3, #0
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3710      	adds	r7, #16
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	000186a0 	.word	0x000186a0
 80017b0:	001e847f 	.word	0x001e847f
 80017b4:	003d08ff 	.word	0x003d08ff
 80017b8:	431bde83 	.word	0x431bde83
 80017bc:	10624dd3 	.word	0x10624dd3

080017c0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b088      	sub	sp, #32
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80017c8:	2300      	movs	r3, #0
 80017ca:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017d8:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80017e0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017e8:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80017ea:	7bfb      	ldrb	r3, [r7, #15]
 80017ec:	2b10      	cmp	r3, #16
 80017ee:	d003      	beq.n	80017f8 <HAL_I2C_EV_IRQHandler+0x38>
 80017f0:	7bfb      	ldrb	r3, [r7, #15]
 80017f2:	2b40      	cmp	r3, #64	; 0x40
 80017f4:	f040 80c1 	bne.w	800197a <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	699b      	ldr	r3, [r3, #24]
 80017fe:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	695b      	ldr	r3, [r3, #20]
 8001806:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8001808:	69fb      	ldr	r3, [r7, #28]
 800180a:	f003 0301 	and.w	r3, r3, #1
 800180e:	2b00      	cmp	r3, #0
 8001810:	d10d      	bne.n	800182e <HAL_I2C_EV_IRQHandler+0x6e>
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8001818:	d003      	beq.n	8001822 <HAL_I2C_EV_IRQHandler+0x62>
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8001820:	d101      	bne.n	8001826 <HAL_I2C_EV_IRQHandler+0x66>
 8001822:	2301      	movs	r3, #1
 8001824:	e000      	b.n	8001828 <HAL_I2C_EV_IRQHandler+0x68>
 8001826:	2300      	movs	r3, #0
 8001828:	2b01      	cmp	r3, #1
 800182a:	f000 8132 	beq.w	8001a92 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800182e:	69fb      	ldr	r3, [r7, #28]
 8001830:	f003 0301 	and.w	r3, r3, #1
 8001834:	2b00      	cmp	r3, #0
 8001836:	d00c      	beq.n	8001852 <HAL_I2C_EV_IRQHandler+0x92>
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	0a5b      	lsrs	r3, r3, #9
 800183c:	f003 0301 	and.w	r3, r3, #1
 8001840:	2b00      	cmp	r3, #0
 8001842:	d006      	beq.n	8001852 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	f001 fc7b 	bl	8003140 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800184a:	6878      	ldr	r0, [r7, #4]
 800184c:	f000 fd83 	bl	8002356 <I2C_Master_SB>
 8001850:	e092      	b.n	8001978 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	08db      	lsrs	r3, r3, #3
 8001856:	f003 0301 	and.w	r3, r3, #1
 800185a:	2b00      	cmp	r3, #0
 800185c:	d009      	beq.n	8001872 <HAL_I2C_EV_IRQHandler+0xb2>
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	0a5b      	lsrs	r3, r3, #9
 8001862:	f003 0301 	and.w	r3, r3, #1
 8001866:	2b00      	cmp	r3, #0
 8001868:	d003      	beq.n	8001872 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	f000 fdf9 	bl	8002462 <I2C_Master_ADD10>
 8001870:	e082      	b.n	8001978 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	085b      	lsrs	r3, r3, #1
 8001876:	f003 0301 	and.w	r3, r3, #1
 800187a:	2b00      	cmp	r3, #0
 800187c:	d009      	beq.n	8001892 <HAL_I2C_EV_IRQHandler+0xd2>
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	0a5b      	lsrs	r3, r3, #9
 8001882:	f003 0301 	and.w	r3, r3, #1
 8001886:	2b00      	cmp	r3, #0
 8001888:	d003      	beq.n	8001892 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	f000 fe13 	bl	80024b6 <I2C_Master_ADDR>
 8001890:	e072      	b.n	8001978 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001892:	69bb      	ldr	r3, [r7, #24]
 8001894:	089b      	lsrs	r3, r3, #2
 8001896:	f003 0301 	and.w	r3, r3, #1
 800189a:	2b00      	cmp	r3, #0
 800189c:	d03b      	beq.n	8001916 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80018ac:	f000 80f3 	beq.w	8001a96 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	09db      	lsrs	r3, r3, #7
 80018b4:	f003 0301 	and.w	r3, r3, #1
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d00f      	beq.n	80018dc <HAL_I2C_EV_IRQHandler+0x11c>
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	0a9b      	lsrs	r3, r3, #10
 80018c0:	f003 0301 	and.w	r3, r3, #1
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d009      	beq.n	80018dc <HAL_I2C_EV_IRQHandler+0x11c>
 80018c8:	69fb      	ldr	r3, [r7, #28]
 80018ca:	089b      	lsrs	r3, r3, #2
 80018cc:	f003 0301 	and.w	r3, r3, #1
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d103      	bne.n	80018dc <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80018d4:	6878      	ldr	r0, [r7, #4]
 80018d6:	f000 f9f3 	bl	8001cc0 <I2C_MasterTransmit_TXE>
 80018da:	e04d      	b.n	8001978 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	089b      	lsrs	r3, r3, #2
 80018e0:	f003 0301 	and.w	r3, r3, #1
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	f000 80d6 	beq.w	8001a96 <HAL_I2C_EV_IRQHandler+0x2d6>
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	0a5b      	lsrs	r3, r3, #9
 80018ee:	f003 0301 	and.w	r3, r3, #1
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	f000 80cf 	beq.w	8001a96 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80018f8:	7bbb      	ldrb	r3, [r7, #14]
 80018fa:	2b21      	cmp	r3, #33	; 0x21
 80018fc:	d103      	bne.n	8001906 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f000 fa7a 	bl	8001df8 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001904:	e0c7      	b.n	8001a96 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8001906:	7bfb      	ldrb	r3, [r7, #15]
 8001908:	2b40      	cmp	r3, #64	; 0x40
 800190a:	f040 80c4 	bne.w	8001a96 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	f000 fae8 	bl	8001ee4 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001914:	e0bf      	b.n	8001a96 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001920:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001924:	f000 80b7 	beq.w	8001a96 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001928:	69fb      	ldr	r3, [r7, #28]
 800192a:	099b      	lsrs	r3, r3, #6
 800192c:	f003 0301 	and.w	r3, r3, #1
 8001930:	2b00      	cmp	r3, #0
 8001932:	d00f      	beq.n	8001954 <HAL_I2C_EV_IRQHandler+0x194>
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	0a9b      	lsrs	r3, r3, #10
 8001938:	f003 0301 	and.w	r3, r3, #1
 800193c:	2b00      	cmp	r3, #0
 800193e:	d009      	beq.n	8001954 <HAL_I2C_EV_IRQHandler+0x194>
 8001940:	69fb      	ldr	r3, [r7, #28]
 8001942:	089b      	lsrs	r3, r3, #2
 8001944:	f003 0301 	and.w	r3, r3, #1
 8001948:	2b00      	cmp	r3, #0
 800194a:	d103      	bne.n	8001954 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800194c:	6878      	ldr	r0, [r7, #4]
 800194e:	f000 fb5d 	bl	800200c <I2C_MasterReceive_RXNE>
 8001952:	e011      	b.n	8001978 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	089b      	lsrs	r3, r3, #2
 8001958:	f003 0301 	and.w	r3, r3, #1
 800195c:	2b00      	cmp	r3, #0
 800195e:	f000 809a 	beq.w	8001a96 <HAL_I2C_EV_IRQHandler+0x2d6>
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	0a5b      	lsrs	r3, r3, #9
 8001966:	f003 0301 	and.w	r3, r3, #1
 800196a:	2b00      	cmp	r3, #0
 800196c:	f000 8093 	beq.w	8001a96 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8001970:	6878      	ldr	r0, [r7, #4]
 8001972:	f000 fc06 	bl	8002182 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001976:	e08e      	b.n	8001a96 <HAL_I2C_EV_IRQHandler+0x2d6>
 8001978:	e08d      	b.n	8001a96 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197e:	2b00      	cmp	r3, #0
 8001980:	d004      	beq.n	800198c <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	695b      	ldr	r3, [r3, #20]
 8001988:	61fb      	str	r3, [r7, #28]
 800198a:	e007      	b.n	800199c <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	699b      	ldr	r3, [r3, #24]
 8001992:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	695b      	ldr	r3, [r3, #20]
 800199a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800199c:	69fb      	ldr	r3, [r7, #28]
 800199e:	085b      	lsrs	r3, r3, #1
 80019a0:	f003 0301 	and.w	r3, r3, #1
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d012      	beq.n	80019ce <HAL_I2C_EV_IRQHandler+0x20e>
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	0a5b      	lsrs	r3, r3, #9
 80019ac:	f003 0301 	and.w	r3, r3, #1
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d00c      	beq.n	80019ce <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d003      	beq.n	80019c4 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	699b      	ldr	r3, [r3, #24]
 80019c2:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80019c4:	69b9      	ldr	r1, [r7, #24]
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	f000 ffc4 	bl	8002954 <I2C_Slave_ADDR>
 80019cc:	e066      	b.n	8001a9c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	091b      	lsrs	r3, r3, #4
 80019d2:	f003 0301 	and.w	r3, r3, #1
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d009      	beq.n	80019ee <HAL_I2C_EV_IRQHandler+0x22e>
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	0a5b      	lsrs	r3, r3, #9
 80019de:	f003 0301 	and.w	r3, r3, #1
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d003      	beq.n	80019ee <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	f000 fffe 	bl	80029e8 <I2C_Slave_STOPF>
 80019ec:	e056      	b.n	8001a9c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80019ee:	7bbb      	ldrb	r3, [r7, #14]
 80019f0:	2b21      	cmp	r3, #33	; 0x21
 80019f2:	d002      	beq.n	80019fa <HAL_I2C_EV_IRQHandler+0x23a>
 80019f4:	7bbb      	ldrb	r3, [r7, #14]
 80019f6:	2b29      	cmp	r3, #41	; 0x29
 80019f8:	d125      	bne.n	8001a46 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	09db      	lsrs	r3, r3, #7
 80019fe:	f003 0301 	and.w	r3, r3, #1
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d00f      	beq.n	8001a26 <HAL_I2C_EV_IRQHandler+0x266>
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	0a9b      	lsrs	r3, r3, #10
 8001a0a:	f003 0301 	and.w	r3, r3, #1
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d009      	beq.n	8001a26 <HAL_I2C_EV_IRQHandler+0x266>
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	089b      	lsrs	r3, r3, #2
 8001a16:	f003 0301 	and.w	r3, r3, #1
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d103      	bne.n	8001a26 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	f000 feda 	bl	80027d8 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001a24:	e039      	b.n	8001a9a <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	089b      	lsrs	r3, r3, #2
 8001a2a:	f003 0301 	and.w	r3, r3, #1
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d033      	beq.n	8001a9a <HAL_I2C_EV_IRQHandler+0x2da>
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	0a5b      	lsrs	r3, r3, #9
 8001a36:	f003 0301 	and.w	r3, r3, #1
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d02d      	beq.n	8001a9a <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	f000 ff07 	bl	8002852 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001a44:	e029      	b.n	8001a9a <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	099b      	lsrs	r3, r3, #6
 8001a4a:	f003 0301 	and.w	r3, r3, #1
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d00f      	beq.n	8001a72 <HAL_I2C_EV_IRQHandler+0x2b2>
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	0a9b      	lsrs	r3, r3, #10
 8001a56:	f003 0301 	and.w	r3, r3, #1
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d009      	beq.n	8001a72 <HAL_I2C_EV_IRQHandler+0x2b2>
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	089b      	lsrs	r3, r3, #2
 8001a62:	f003 0301 	and.w	r3, r3, #1
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d103      	bne.n	8001a72 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f000 ff12 	bl	8002894 <I2C_SlaveReceive_RXNE>
 8001a70:	e014      	b.n	8001a9c <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	089b      	lsrs	r3, r3, #2
 8001a76:	f003 0301 	and.w	r3, r3, #1
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d00e      	beq.n	8001a9c <HAL_I2C_EV_IRQHandler+0x2dc>
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	0a5b      	lsrs	r3, r3, #9
 8001a82:	f003 0301 	and.w	r3, r3, #1
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d008      	beq.n	8001a9c <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	f000 ff40 	bl	8002910 <I2C_SlaveReceive_BTF>
 8001a90:	e004      	b.n	8001a9c <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8001a92:	bf00      	nop
 8001a94:	e002      	b.n	8001a9c <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001a96:	bf00      	nop
 8001a98:	e000      	b.n	8001a9c <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001a9a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8001a9c:	3720      	adds	r7, #32
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}

08001aa2 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001aa2:	b580      	push	{r7, lr}
 8001aa4:	b08a      	sub	sp, #40	; 0x28
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	695b      	ldr	r3, [r3, #20]
 8001ab0:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8001aba:	2300      	movs	r3, #0
 8001abc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001ac4:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001ac6:	6a3b      	ldr	r3, [r7, #32]
 8001ac8:	0a1b      	lsrs	r3, r3, #8
 8001aca:	f003 0301 	and.w	r3, r3, #1
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d00e      	beq.n	8001af0 <HAL_I2C_ER_IRQHandler+0x4e>
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	0a1b      	lsrs	r3, r3, #8
 8001ad6:	f003 0301 	and.w	r3, r3, #1
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d008      	beq.n	8001af0 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8001ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae0:	f043 0301 	orr.w	r3, r3, #1
 8001ae4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001aee:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001af0:	6a3b      	ldr	r3, [r7, #32]
 8001af2:	0a5b      	lsrs	r3, r3, #9
 8001af4:	f003 0301 	and.w	r3, r3, #1
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d00e      	beq.n	8001b1a <HAL_I2C_ER_IRQHandler+0x78>
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	0a1b      	lsrs	r3, r3, #8
 8001b00:	f003 0301 	and.w	r3, r3, #1
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d008      	beq.n	8001b1a <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8001b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0a:	f043 0302 	orr.w	r3, r3, #2
 8001b0e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8001b18:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001b1a:	6a3b      	ldr	r3, [r7, #32]
 8001b1c:	0a9b      	lsrs	r3, r3, #10
 8001b1e:	f003 0301 	and.w	r3, r3, #1
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d03f      	beq.n	8001ba6 <HAL_I2C_ER_IRQHandler+0x104>
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	0a1b      	lsrs	r3, r3, #8
 8001b2a:	f003 0301 	and.w	r3, r3, #1
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d039      	beq.n	8001ba6 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8001b32:	7efb      	ldrb	r3, [r7, #27]
 8001b34:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b3a:	b29b      	uxth	r3, r3
 8001b3c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b44:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8001b4c:	7ebb      	ldrb	r3, [r7, #26]
 8001b4e:	2b20      	cmp	r3, #32
 8001b50:	d112      	bne.n	8001b78 <HAL_I2C_ER_IRQHandler+0xd6>
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d10f      	bne.n	8001b78 <HAL_I2C_ER_IRQHandler+0xd6>
 8001b58:	7cfb      	ldrb	r3, [r7, #19]
 8001b5a:	2b21      	cmp	r3, #33	; 0x21
 8001b5c:	d008      	beq.n	8001b70 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8001b5e:	7cfb      	ldrb	r3, [r7, #19]
 8001b60:	2b29      	cmp	r3, #41	; 0x29
 8001b62:	d005      	beq.n	8001b70 <HAL_I2C_ER_IRQHandler+0xce>
 8001b64:	7cfb      	ldrb	r3, [r7, #19]
 8001b66:	2b28      	cmp	r3, #40	; 0x28
 8001b68:	d106      	bne.n	8001b78 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	2b21      	cmp	r3, #33	; 0x21
 8001b6e:	d103      	bne.n	8001b78 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8001b70:	6878      	ldr	r0, [r7, #4]
 8001b72:	f001 f869 	bl	8002c48 <I2C_Slave_AF>
 8001b76:	e016      	b.n	8001ba6 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001b80:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8001b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b84:	f043 0304 	orr.w	r3, r3, #4
 8001b88:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001b8a:	7efb      	ldrb	r3, [r7, #27]
 8001b8c:	2b10      	cmp	r3, #16
 8001b8e:	d002      	beq.n	8001b96 <HAL_I2C_ER_IRQHandler+0xf4>
 8001b90:	7efb      	ldrb	r3, [r7, #27]
 8001b92:	2b40      	cmp	r3, #64	; 0x40
 8001b94:	d107      	bne.n	8001ba6 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ba4:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001ba6:	6a3b      	ldr	r3, [r7, #32]
 8001ba8:	0adb      	lsrs	r3, r3, #11
 8001baa:	f003 0301 	and.w	r3, r3, #1
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d00e      	beq.n	8001bd0 <HAL_I2C_ER_IRQHandler+0x12e>
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	0a1b      	lsrs	r3, r3, #8
 8001bb6:	f003 0301 	and.w	r3, r3, #1
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d008      	beq.n	8001bd0 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8001bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc0:	f043 0308 	orr.w	r3, r3, #8
 8001bc4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8001bce:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8001bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d008      	beq.n	8001be8 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bdc:	431a      	orrs	r2, r3
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f001 f8a0 	bl	8002d28 <I2C_ITError>
  }
}
 8001be8:	bf00      	nop
 8001bea:	3728      	adds	r7, #40	; 0x28
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}

08001bf0 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8001bf8:	bf00      	nop
 8001bfa:	370c      	adds	r7, #12
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr

08001c04 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8001c0c:	bf00      	nop
 8001c0e:	370c      	adds	r7, #12
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr

08001c18 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001c20:	bf00      	nop
 8001c22:	370c      	adds	r7, #12
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr

08001c2c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001c34:	bf00      	nop
 8001c36:	370c      	adds	r7, #12
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr

08001c40 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	460b      	mov	r3, r1
 8001c4a:	70fb      	strb	r3, [r7, #3]
 8001c4c:	4613      	mov	r3, r2
 8001c4e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001c50:	bf00      	nop
 8001c52:	370c      	adds	r7, #12
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr

08001c5c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8001c64:	bf00      	nop
 8001c66:	370c      	adds	r7, #12
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr

08001c70 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8001c78:	bf00      	nop
 8001c7a:	370c      	adds	r7, #12
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr

08001c84 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8001c8c:	bf00      	nop
 8001c8e:	370c      	adds	r7, #12
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr

08001c98 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8001ca0:	bf00      	nop
 8001ca2:	370c      	adds	r7, #12
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr

08001cac <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001cb4:	bf00      	nop
 8001cb6:	370c      	adds	r7, #12
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr

08001cc0 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b084      	sub	sp, #16
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cce:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001cd6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cdc:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d150      	bne.n	8001d88 <I2C_MasterTransmit_TXE+0xc8>
 8001ce6:	7bfb      	ldrb	r3, [r7, #15]
 8001ce8:	2b21      	cmp	r3, #33	; 0x21
 8001cea:	d14d      	bne.n	8001d88 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	2b08      	cmp	r3, #8
 8001cf0:	d01d      	beq.n	8001d2e <I2C_MasterTransmit_TXE+0x6e>
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	2b20      	cmp	r3, #32
 8001cf6:	d01a      	beq.n	8001d2e <I2C_MasterTransmit_TXE+0x6e>
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001cfe:	d016      	beq.n	8001d2e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	685a      	ldr	r2, [r3, #4]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001d0e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2211      	movs	r2, #17
 8001d14:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2220      	movs	r2, #32
 8001d22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f7ff ff62 	bl	8001bf0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001d2c:	e060      	b.n	8001df0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	685a      	ldr	r2, [r3, #4]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001d3c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d4c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2200      	movs	r2, #0
 8001d52:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2220      	movs	r2, #32
 8001d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001d62:	b2db      	uxtb	r3, r3
 8001d64:	2b40      	cmp	r3, #64	; 0x40
 8001d66:	d107      	bne.n	8001d78 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8001d70:	6878      	ldr	r0, [r7, #4]
 8001d72:	f7ff ff7d 	bl	8001c70 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001d76:	e03b      	b.n	8001df0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001d80:	6878      	ldr	r0, [r7, #4]
 8001d82:	f7ff ff35 	bl	8001bf0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001d86:	e033      	b.n	8001df0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8001d88:	7bfb      	ldrb	r3, [r7, #15]
 8001d8a:	2b21      	cmp	r3, #33	; 0x21
 8001d8c:	d005      	beq.n	8001d9a <I2C_MasterTransmit_TXE+0xda>
 8001d8e:	7bbb      	ldrb	r3, [r7, #14]
 8001d90:	2b40      	cmp	r3, #64	; 0x40
 8001d92:	d12d      	bne.n	8001df0 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8001d94:	7bfb      	ldrb	r3, [r7, #15]
 8001d96:	2b22      	cmp	r3, #34	; 0x22
 8001d98:	d12a      	bne.n	8001df0 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d9e:	b29b      	uxth	r3, r3
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d108      	bne.n	8001db6 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	685a      	ldr	r2, [r3, #4]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001db2:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8001db4:	e01c      	b.n	8001df0 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	2b40      	cmp	r3, #64	; 0x40
 8001dc0:	d103      	bne.n	8001dca <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f000 f88e 	bl	8001ee4 <I2C_MemoryTransmit_TXE_BTF>
}
 8001dc8:	e012      	b.n	8001df0 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dce:	781a      	ldrb	r2, [r3, #0]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dda:	1c5a      	adds	r2, r3, #1
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001de4:	b29b      	uxth	r3, r3
 8001de6:	3b01      	subs	r3, #1
 8001de8:	b29a      	uxth	r2, r3
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001dee:	e7ff      	b.n	8001df0 <I2C_MasterTransmit_TXE+0x130>
 8001df0:	bf00      	nop
 8001df2:	3710      	adds	r7, #16
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}

08001df8 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b084      	sub	sp, #16
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e04:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	2b21      	cmp	r3, #33	; 0x21
 8001e10:	d164      	bne.n	8001edc <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e16:	b29b      	uxth	r3, r3
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d012      	beq.n	8001e42 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e20:	781a      	ldrb	r2, [r3, #0]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e2c:	1c5a      	adds	r2, r3, #1
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e36:	b29b      	uxth	r3, r3
 8001e38:	3b01      	subs	r3, #1
 8001e3a:	b29a      	uxth	r2, r3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8001e40:	e04c      	b.n	8001edc <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	2b08      	cmp	r3, #8
 8001e46:	d01d      	beq.n	8001e84 <I2C_MasterTransmit_BTF+0x8c>
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	2b20      	cmp	r3, #32
 8001e4c:	d01a      	beq.n	8001e84 <I2C_MasterTransmit_BTF+0x8c>
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001e54:	d016      	beq.n	8001e84 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	685a      	ldr	r2, [r3, #4]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001e64:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2211      	movs	r2, #17
 8001e6a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2220      	movs	r2, #32
 8001e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001e7c:	6878      	ldr	r0, [r7, #4]
 8001e7e:	f7ff feb7 	bl	8001bf0 <HAL_I2C_MasterTxCpltCallback>
}
 8001e82:	e02b      	b.n	8001edc <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	685a      	ldr	r2, [r3, #4]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001e92:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ea2:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2220      	movs	r2, #32
 8001eae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	2b40      	cmp	r3, #64	; 0x40
 8001ebc:	d107      	bne.n	8001ece <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f7ff fed2 	bl	8001c70 <HAL_I2C_MemTxCpltCallback>
}
 8001ecc:	e006      	b.n	8001edc <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f7ff fe8a 	bl	8001bf0 <HAL_I2C_MasterTxCpltCallback>
}
 8001edc:	bf00      	nop
 8001ede:	3710      	adds	r7, #16
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}

08001ee4 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b084      	sub	sp, #16
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ef2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d11d      	bne.n	8001f38 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f00:	2b01      	cmp	r3, #1
 8001f02:	d10b      	bne.n	8001f1c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f08:	b2da      	uxtb	r2, r3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f14:	1c9a      	adds	r2, r3, #2
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8001f1a:	e073      	b.n	8002004 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f20:	b29b      	uxth	r3, r3
 8001f22:	121b      	asrs	r3, r3, #8
 8001f24:	b2da      	uxtb	r2, r3
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f30:	1c5a      	adds	r2, r3, #1
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001f36:	e065      	b.n	8002004 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d10b      	bne.n	8001f58 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f44:	b2da      	uxtb	r2, r3
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f50:	1c5a      	adds	r2, r3, #1
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001f56:	e055      	b.n	8002004 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f5c:	2b02      	cmp	r3, #2
 8001f5e:	d151      	bne.n	8002004 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8001f60:	7bfb      	ldrb	r3, [r7, #15]
 8001f62:	2b22      	cmp	r3, #34	; 0x22
 8001f64:	d10d      	bne.n	8001f82 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f74:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f7a:	1c5a      	adds	r2, r3, #1
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001f80:	e040      	b.n	8002004 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f86:	b29b      	uxth	r3, r3
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d015      	beq.n	8001fb8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8001f8c:	7bfb      	ldrb	r3, [r7, #15]
 8001f8e:	2b21      	cmp	r3, #33	; 0x21
 8001f90:	d112      	bne.n	8001fb8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f96:	781a      	ldrb	r2, [r3, #0]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa2:	1c5a      	adds	r2, r3, #1
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fac:	b29b      	uxth	r3, r3
 8001fae:	3b01      	subs	r3, #1
 8001fb0:	b29a      	uxth	r2, r3
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001fb6:	e025      	b.n	8002004 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fbc:	b29b      	uxth	r3, r3
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d120      	bne.n	8002004 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8001fc2:	7bfb      	ldrb	r3, [r7, #15]
 8001fc4:	2b21      	cmp	r3, #33	; 0x21
 8001fc6:	d11d      	bne.n	8002004 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	685a      	ldr	r2, [r3, #4]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001fd6:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fe6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2200      	movs	r2, #0
 8001fec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2220      	movs	r2, #32
 8001ff2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f7ff fe36 	bl	8001c70 <HAL_I2C_MemTxCpltCallback>
}
 8002004:	bf00      	nop
 8002006:	3710      	adds	r7, #16
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}

0800200c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b084      	sub	sp, #16
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800201a:	b2db      	uxtb	r3, r3
 800201c:	2b22      	cmp	r3, #34	; 0x22
 800201e:	f040 80ac 	bne.w	800217a <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002026:	b29b      	uxth	r3, r3
 8002028:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	2b03      	cmp	r3, #3
 800202e:	d921      	bls.n	8002074 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	691a      	ldr	r2, [r3, #16]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800203a:	b2d2      	uxtb	r2, r2
 800203c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002042:	1c5a      	adds	r2, r3, #1
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800204c:	b29b      	uxth	r3, r3
 800204e:	3b01      	subs	r3, #1
 8002050:	b29a      	uxth	r2, r3
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800205a:	b29b      	uxth	r3, r3
 800205c:	2b03      	cmp	r3, #3
 800205e:	f040 808c 	bne.w	800217a <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	685a      	ldr	r2, [r3, #4]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002070:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8002072:	e082      	b.n	800217a <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002078:	2b02      	cmp	r3, #2
 800207a:	d075      	beq.n	8002168 <I2C_MasterReceive_RXNE+0x15c>
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	2b01      	cmp	r3, #1
 8002080:	d002      	beq.n	8002088 <I2C_MasterReceive_RXNE+0x7c>
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d16f      	bne.n	8002168 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	f001 f827 	bl	80030dc <I2C_WaitOnSTOPRequestThroughIT>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d142      	bne.n	800211a <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020a2:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	685a      	ldr	r2, [r3, #4]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80020b2:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	691a      	ldr	r2, [r3, #16]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020be:	b2d2      	uxtb	r2, r2
 80020c0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c6:	1c5a      	adds	r2, r3, #1
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020d0:	b29b      	uxth	r3, r3
 80020d2:	3b01      	subs	r3, #1
 80020d4:	b29a      	uxth	r2, r3
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2220      	movs	r2, #32
 80020de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	2b40      	cmp	r3, #64	; 0x40
 80020ec:	d10a      	bne.n	8002104 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2200      	movs	r2, #0
 80020f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2200      	movs	r2, #0
 80020fa:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80020fc:	6878      	ldr	r0, [r7, #4]
 80020fe:	f7ff fdc1 	bl	8001c84 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002102:	e03a      	b.n	800217a <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2200      	movs	r2, #0
 8002108:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2212      	movs	r2, #18
 8002110:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f7ff fd76 	bl	8001c04 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002118:	e02f      	b.n	800217a <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	685a      	ldr	r2, [r3, #4]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002128:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	691a      	ldr	r2, [r3, #16]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002134:	b2d2      	uxtb	r2, r2
 8002136:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800213c:	1c5a      	adds	r2, r3, #1
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002146:	b29b      	uxth	r3, r3
 8002148:	3b01      	subs	r3, #1
 800214a:	b29a      	uxth	r2, r3
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2220      	movs	r2, #32
 8002154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2200      	movs	r2, #0
 800215c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8002160:	6878      	ldr	r0, [r7, #4]
 8002162:	f7ff fd99 	bl	8001c98 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002166:	e008      	b.n	800217a <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	685a      	ldr	r2, [r3, #4]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002176:	605a      	str	r2, [r3, #4]
}
 8002178:	e7ff      	b.n	800217a <I2C_MasterReceive_RXNE+0x16e>
 800217a:	bf00      	nop
 800217c:	3710      	adds	r7, #16
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}

08002182 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002182:	b580      	push	{r7, lr}
 8002184:	b084      	sub	sp, #16
 8002186:	af00      	add	r7, sp, #0
 8002188:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800218e:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002194:	b29b      	uxth	r3, r3
 8002196:	2b04      	cmp	r3, #4
 8002198:	d11b      	bne.n	80021d2 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	685a      	ldr	r2, [r3, #4]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021a8:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	691a      	ldr	r2, [r3, #16]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b4:	b2d2      	uxtb	r2, r2
 80021b6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021bc:	1c5a      	adds	r2, r3, #1
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021c6:	b29b      	uxth	r3, r3
 80021c8:	3b01      	subs	r3, #1
 80021ca:	b29a      	uxth	r2, r3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80021d0:	e0bd      	b.n	800234e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021d6:	b29b      	uxth	r3, r3
 80021d8:	2b03      	cmp	r3, #3
 80021da:	d129      	bne.n	8002230 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	685a      	ldr	r2, [r3, #4]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021ea:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2b04      	cmp	r3, #4
 80021f0:	d00a      	beq.n	8002208 <I2C_MasterReceive_BTF+0x86>
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2b02      	cmp	r3, #2
 80021f6:	d007      	beq.n	8002208 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002206:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	691a      	ldr	r2, [r3, #16]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002212:	b2d2      	uxtb	r2, r2
 8002214:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800221a:	1c5a      	adds	r2, r3, #1
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002224:	b29b      	uxth	r3, r3
 8002226:	3b01      	subs	r3, #1
 8002228:	b29a      	uxth	r2, r3
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800222e:	e08e      	b.n	800234e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002234:	b29b      	uxth	r3, r3
 8002236:	2b02      	cmp	r3, #2
 8002238:	d176      	bne.n	8002328 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	2b01      	cmp	r3, #1
 800223e:	d002      	beq.n	8002246 <I2C_MasterReceive_BTF+0xc4>
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	2b10      	cmp	r3, #16
 8002244:	d108      	bne.n	8002258 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002254:	601a      	str	r2, [r3, #0]
 8002256:	e019      	b.n	800228c <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	2b04      	cmp	r3, #4
 800225c:	d002      	beq.n	8002264 <I2C_MasterReceive_BTF+0xe2>
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	2b02      	cmp	r3, #2
 8002262:	d108      	bne.n	8002276 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002272:	601a      	str	r2, [r3, #0]
 8002274:	e00a      	b.n	800228c <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	2b10      	cmp	r3, #16
 800227a:	d007      	beq.n	800228c <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800228a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	691a      	ldr	r2, [r3, #16]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002296:	b2d2      	uxtb	r2, r2
 8002298:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800229e:	1c5a      	adds	r2, r3, #1
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022a8:	b29b      	uxth	r3, r3
 80022aa:	3b01      	subs	r3, #1
 80022ac:	b29a      	uxth	r2, r3
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	691a      	ldr	r2, [r3, #16]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022bc:	b2d2      	uxtb	r2, r2
 80022be:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c4:	1c5a      	adds	r2, r3, #1
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022ce:	b29b      	uxth	r3, r3
 80022d0:	3b01      	subs	r3, #1
 80022d2:	b29a      	uxth	r2, r3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	685a      	ldr	r2, [r3, #4]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80022e6:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2220      	movs	r2, #32
 80022ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	2b40      	cmp	r3, #64	; 0x40
 80022fa:	d10a      	bne.n	8002312 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2200      	movs	r2, #0
 8002300:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2200      	movs	r2, #0
 8002308:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f7ff fcba 	bl	8001c84 <HAL_I2C_MemRxCpltCallback>
}
 8002310:	e01d      	b.n	800234e <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2200      	movs	r2, #0
 8002316:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2212      	movs	r2, #18
 800231e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002320:	6878      	ldr	r0, [r7, #4]
 8002322:	f7ff fc6f 	bl	8001c04 <HAL_I2C_MasterRxCpltCallback>
}
 8002326:	e012      	b.n	800234e <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	691a      	ldr	r2, [r3, #16]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002332:	b2d2      	uxtb	r2, r2
 8002334:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800233a:	1c5a      	adds	r2, r3, #1
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002344:	b29b      	uxth	r3, r3
 8002346:	3b01      	subs	r3, #1
 8002348:	b29a      	uxth	r2, r3
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800234e:	bf00      	nop
 8002350:	3710      	adds	r7, #16
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}

08002356 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8002356:	b480      	push	{r7}
 8002358:	b083      	sub	sp, #12
 800235a:	af00      	add	r7, sp, #0
 800235c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002364:	b2db      	uxtb	r3, r3
 8002366:	2b40      	cmp	r3, #64	; 0x40
 8002368:	d117      	bne.n	800239a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800236e:	2b00      	cmp	r3, #0
 8002370:	d109      	bne.n	8002386 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002376:	b2db      	uxtb	r3, r3
 8002378:	461a      	mov	r2, r3
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002382:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8002384:	e067      	b.n	8002456 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800238a:	b2db      	uxtb	r3, r3
 800238c:	f043 0301 	orr.w	r3, r3, #1
 8002390:	b2da      	uxtb	r2, r3
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	611a      	str	r2, [r3, #16]
}
 8002398:	e05d      	b.n	8002456 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	691b      	ldr	r3, [r3, #16]
 800239e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80023a2:	d133      	bne.n	800240c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	2b21      	cmp	r3, #33	; 0x21
 80023ae:	d109      	bne.n	80023c4 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	461a      	mov	r2, r3
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80023c0:	611a      	str	r2, [r3, #16]
 80023c2:	e008      	b.n	80023d6 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	f043 0301 	orr.w	r3, r3, #1
 80023ce:	b2da      	uxtb	r2, r3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d004      	beq.n	80023e8 <I2C_Master_SB+0x92>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d108      	bne.n	80023fa <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d032      	beq.n	8002456 <I2C_Master_SB+0x100>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d02d      	beq.n	8002456 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	685a      	ldr	r2, [r3, #4]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002408:	605a      	str	r2, [r3, #4]
}
 800240a:	e024      	b.n	8002456 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002410:	2b00      	cmp	r3, #0
 8002412:	d10e      	bne.n	8002432 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002418:	b29b      	uxth	r3, r3
 800241a:	11db      	asrs	r3, r3, #7
 800241c:	b2db      	uxtb	r3, r3
 800241e:	f003 0306 	and.w	r3, r3, #6
 8002422:	b2db      	uxtb	r3, r3
 8002424:	f063 030f 	orn	r3, r3, #15
 8002428:	b2da      	uxtb	r2, r3
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	611a      	str	r2, [r3, #16]
}
 8002430:	e011      	b.n	8002456 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002436:	2b01      	cmp	r3, #1
 8002438:	d10d      	bne.n	8002456 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800243e:	b29b      	uxth	r3, r3
 8002440:	11db      	asrs	r3, r3, #7
 8002442:	b2db      	uxtb	r3, r3
 8002444:	f003 0306 	and.w	r3, r3, #6
 8002448:	b2db      	uxtb	r3, r3
 800244a:	f063 030e 	orn	r3, r3, #14
 800244e:	b2da      	uxtb	r2, r3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	611a      	str	r2, [r3, #16]
}
 8002456:	bf00      	nop
 8002458:	370c      	adds	r7, #12
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr

08002462 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8002462:	b480      	push	{r7}
 8002464:	b083      	sub	sp, #12
 8002466:	af00      	add	r7, sp, #0
 8002468:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800246e:	b2da      	uxtb	r2, r3
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800247a:	2b00      	cmp	r3, #0
 800247c:	d004      	beq.n	8002488 <I2C_Master_ADD10+0x26>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002482:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002484:	2b00      	cmp	r3, #0
 8002486:	d108      	bne.n	800249a <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800248c:	2b00      	cmp	r3, #0
 800248e:	d00c      	beq.n	80024aa <I2C_Master_ADD10+0x48>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002494:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002496:	2b00      	cmp	r3, #0
 8002498:	d007      	beq.n	80024aa <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	685a      	ldr	r2, [r3, #4]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80024a8:	605a      	str	r2, [r3, #4]
  }
}
 80024aa:	bf00      	nop
 80024ac:	370c      	adds	r7, #12
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr

080024b6 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80024b6:	b480      	push	{r7}
 80024b8:	b091      	sub	sp, #68	; 0x44
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80024c4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024cc:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d2:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	2b22      	cmp	r3, #34	; 0x22
 80024de:	f040 8169 	bne.w	80027b4 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d10f      	bne.n	800250a <I2C_Master_ADDR+0x54>
 80024ea:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80024ee:	2b40      	cmp	r3, #64	; 0x40
 80024f0:	d10b      	bne.n	800250a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024f2:	2300      	movs	r3, #0
 80024f4:	633b      	str	r3, [r7, #48]	; 0x30
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	695b      	ldr	r3, [r3, #20]
 80024fc:	633b      	str	r3, [r7, #48]	; 0x30
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	699b      	ldr	r3, [r3, #24]
 8002504:	633b      	str	r3, [r7, #48]	; 0x30
 8002506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002508:	e160      	b.n	80027cc <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800250e:	2b00      	cmp	r3, #0
 8002510:	d11d      	bne.n	800254e <I2C_Master_ADDR+0x98>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	691b      	ldr	r3, [r3, #16]
 8002516:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800251a:	d118      	bne.n	800254e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800251c:	2300      	movs	r3, #0
 800251e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	695b      	ldr	r3, [r3, #20]
 8002526:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	699b      	ldr	r3, [r3, #24]
 800252e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002530:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002540:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002546:	1c5a      	adds	r2, r3, #1
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	651a      	str	r2, [r3, #80]	; 0x50
 800254c:	e13e      	b.n	80027cc <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002552:	b29b      	uxth	r3, r3
 8002554:	2b00      	cmp	r3, #0
 8002556:	d113      	bne.n	8002580 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002558:	2300      	movs	r3, #0
 800255a:	62bb      	str	r3, [r7, #40]	; 0x28
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	695b      	ldr	r3, [r3, #20]
 8002562:	62bb      	str	r3, [r7, #40]	; 0x28
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	699b      	ldr	r3, [r3, #24]
 800256a:	62bb      	str	r3, [r7, #40]	; 0x28
 800256c:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800257c:	601a      	str	r2, [r3, #0]
 800257e:	e115      	b.n	80027ac <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002584:	b29b      	uxth	r3, r3
 8002586:	2b01      	cmp	r3, #1
 8002588:	f040 808a 	bne.w	80026a0 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800258c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800258e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002592:	d137      	bne.n	8002604 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025a2:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80025b2:	d113      	bne.n	80025dc <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025c2:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025c4:	2300      	movs	r3, #0
 80025c6:	627b      	str	r3, [r7, #36]	; 0x24
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	695b      	ldr	r3, [r3, #20]
 80025ce:	627b      	str	r3, [r7, #36]	; 0x24
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	699b      	ldr	r3, [r3, #24]
 80025d6:	627b      	str	r3, [r7, #36]	; 0x24
 80025d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025da:	e0e7      	b.n	80027ac <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025dc:	2300      	movs	r3, #0
 80025de:	623b      	str	r3, [r7, #32]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	695b      	ldr	r3, [r3, #20]
 80025e6:	623b      	str	r3, [r7, #32]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	699b      	ldr	r3, [r3, #24]
 80025ee:	623b      	str	r3, [r7, #32]
 80025f0:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002600:	601a      	str	r2, [r3, #0]
 8002602:	e0d3      	b.n	80027ac <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002606:	2b08      	cmp	r3, #8
 8002608:	d02e      	beq.n	8002668 <I2C_Master_ADDR+0x1b2>
 800260a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800260c:	2b20      	cmp	r3, #32
 800260e:	d02b      	beq.n	8002668 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002610:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002612:	2b12      	cmp	r3, #18
 8002614:	d102      	bne.n	800261c <I2C_Master_ADDR+0x166>
 8002616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002618:	2b01      	cmp	r3, #1
 800261a:	d125      	bne.n	8002668 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800261c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800261e:	2b04      	cmp	r3, #4
 8002620:	d00e      	beq.n	8002640 <I2C_Master_ADDR+0x18a>
 8002622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002624:	2b02      	cmp	r3, #2
 8002626:	d00b      	beq.n	8002640 <I2C_Master_ADDR+0x18a>
 8002628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800262a:	2b10      	cmp	r3, #16
 800262c:	d008      	beq.n	8002640 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800263c:	601a      	str	r2, [r3, #0]
 800263e:	e007      	b.n	8002650 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800264e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002650:	2300      	movs	r3, #0
 8002652:	61fb      	str	r3, [r7, #28]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	695b      	ldr	r3, [r3, #20]
 800265a:	61fb      	str	r3, [r7, #28]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	699b      	ldr	r3, [r3, #24]
 8002662:	61fb      	str	r3, [r7, #28]
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	e0a1      	b.n	80027ac <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002676:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002678:	2300      	movs	r3, #0
 800267a:	61bb      	str	r3, [r7, #24]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	695b      	ldr	r3, [r3, #20]
 8002682:	61bb      	str	r3, [r7, #24]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	699b      	ldr	r3, [r3, #24]
 800268a:	61bb      	str	r3, [r7, #24]
 800268c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800269c:	601a      	str	r2, [r3, #0]
 800269e:	e085      	b.n	80027ac <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026a4:	b29b      	uxth	r3, r3
 80026a6:	2b02      	cmp	r3, #2
 80026a8:	d14d      	bne.n	8002746 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80026aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026ac:	2b04      	cmp	r3, #4
 80026ae:	d016      	beq.n	80026de <I2C_Master_ADDR+0x228>
 80026b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026b2:	2b02      	cmp	r3, #2
 80026b4:	d013      	beq.n	80026de <I2C_Master_ADDR+0x228>
 80026b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026b8:	2b10      	cmp	r3, #16
 80026ba:	d010      	beq.n	80026de <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026ca:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80026da:	601a      	str	r2, [r3, #0]
 80026dc:	e007      	b.n	80026ee <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80026ec:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80026fc:	d117      	bne.n	800272e <I2C_Master_ADDR+0x278>
 80026fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002700:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002704:	d00b      	beq.n	800271e <I2C_Master_ADDR+0x268>
 8002706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002708:	2b01      	cmp	r3, #1
 800270a:	d008      	beq.n	800271e <I2C_Master_ADDR+0x268>
 800270c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800270e:	2b08      	cmp	r3, #8
 8002710:	d005      	beq.n	800271e <I2C_Master_ADDR+0x268>
 8002712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002714:	2b10      	cmp	r3, #16
 8002716:	d002      	beq.n	800271e <I2C_Master_ADDR+0x268>
 8002718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800271a:	2b20      	cmp	r3, #32
 800271c:	d107      	bne.n	800272e <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	685a      	ldr	r2, [r3, #4]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800272c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800272e:	2300      	movs	r3, #0
 8002730:	617b      	str	r3, [r7, #20]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	695b      	ldr	r3, [r3, #20]
 8002738:	617b      	str	r3, [r7, #20]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	699b      	ldr	r3, [r3, #24]
 8002740:	617b      	str	r3, [r7, #20]
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	e032      	b.n	80027ac <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002754:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002760:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002764:	d117      	bne.n	8002796 <I2C_Master_ADDR+0x2e0>
 8002766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002768:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800276c:	d00b      	beq.n	8002786 <I2C_Master_ADDR+0x2d0>
 800276e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002770:	2b01      	cmp	r3, #1
 8002772:	d008      	beq.n	8002786 <I2C_Master_ADDR+0x2d0>
 8002774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002776:	2b08      	cmp	r3, #8
 8002778:	d005      	beq.n	8002786 <I2C_Master_ADDR+0x2d0>
 800277a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800277c:	2b10      	cmp	r3, #16
 800277e:	d002      	beq.n	8002786 <I2C_Master_ADDR+0x2d0>
 8002780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002782:	2b20      	cmp	r3, #32
 8002784:	d107      	bne.n	8002796 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	685a      	ldr	r2, [r3, #4]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002794:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002796:	2300      	movs	r3, #0
 8002798:	613b      	str	r3, [r7, #16]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	695b      	ldr	r3, [r3, #20]
 80027a0:	613b      	str	r3, [r7, #16]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	699b      	ldr	r3, [r3, #24]
 80027a8:	613b      	str	r3, [r7, #16]
 80027aa:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2200      	movs	r2, #0
 80027b0:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80027b2:	e00b      	b.n	80027cc <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027b4:	2300      	movs	r3, #0
 80027b6:	60fb      	str	r3, [r7, #12]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	695b      	ldr	r3, [r3, #20]
 80027be:	60fb      	str	r3, [r7, #12]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	699b      	ldr	r3, [r3, #24]
 80027c6:	60fb      	str	r3, [r7, #12]
 80027c8:	68fb      	ldr	r3, [r7, #12]
}
 80027ca:	e7ff      	b.n	80027cc <I2C_Master_ADDR+0x316>
 80027cc:	bf00      	nop
 80027ce:	3744      	adds	r7, #68	; 0x44
 80027d0:	46bd      	mov	sp, r7
 80027d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d6:	4770      	bx	lr

080027d8 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b084      	sub	sp, #16
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027e6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027ec:	b29b      	uxth	r3, r3
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d02b      	beq.n	800284a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f6:	781a      	ldrb	r2, [r3, #0]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002802:	1c5a      	adds	r2, r3, #1
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800280c:	b29b      	uxth	r3, r3
 800280e:	3b01      	subs	r3, #1
 8002810:	b29a      	uxth	r2, r3
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800281a:	b29b      	uxth	r3, r3
 800281c:	2b00      	cmp	r3, #0
 800281e:	d114      	bne.n	800284a <I2C_SlaveTransmit_TXE+0x72>
 8002820:	7bfb      	ldrb	r3, [r7, #15]
 8002822:	2b29      	cmp	r3, #41	; 0x29
 8002824:	d111      	bne.n	800284a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	685a      	ldr	r2, [r3, #4]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002834:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2221      	movs	r2, #33	; 0x21
 800283a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2228      	movs	r2, #40	; 0x28
 8002840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002844:	6878      	ldr	r0, [r7, #4]
 8002846:	f7ff f9e7 	bl	8001c18 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800284a:	bf00      	nop
 800284c:	3710      	adds	r7, #16
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}

08002852 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002852:	b480      	push	{r7}
 8002854:	b083      	sub	sp, #12
 8002856:	af00      	add	r7, sp, #0
 8002858:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800285e:	b29b      	uxth	r3, r3
 8002860:	2b00      	cmp	r3, #0
 8002862:	d011      	beq.n	8002888 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002868:	781a      	ldrb	r2, [r3, #0]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002874:	1c5a      	adds	r2, r3, #1
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800287e:	b29b      	uxth	r3, r3
 8002880:	3b01      	subs	r3, #1
 8002882:	b29a      	uxth	r2, r3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002888:	bf00      	nop
 800288a:	370c      	adds	r7, #12
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr

08002894 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b084      	sub	sp, #16
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028a2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028a8:	b29b      	uxth	r3, r3
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d02c      	beq.n	8002908 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	691a      	ldr	r2, [r3, #16]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b8:	b2d2      	uxtb	r2, r2
 80028ba:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c0:	1c5a      	adds	r2, r3, #1
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028ca:	b29b      	uxth	r3, r3
 80028cc:	3b01      	subs	r3, #1
 80028ce:	b29a      	uxth	r2, r3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028d8:	b29b      	uxth	r3, r3
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d114      	bne.n	8002908 <I2C_SlaveReceive_RXNE+0x74>
 80028de:	7bfb      	ldrb	r3, [r7, #15]
 80028e0:	2b2a      	cmp	r3, #42	; 0x2a
 80028e2:	d111      	bne.n	8002908 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	685a      	ldr	r2, [r3, #4]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028f2:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2222      	movs	r2, #34	; 0x22
 80028f8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2228      	movs	r2, #40	; 0x28
 80028fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	f7ff f992 	bl	8001c2c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002908:	bf00      	nop
 800290a:	3710      	adds	r7, #16
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}

08002910 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002910:	b480      	push	{r7}
 8002912:	b083      	sub	sp, #12
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800291c:	b29b      	uxth	r3, r3
 800291e:	2b00      	cmp	r3, #0
 8002920:	d012      	beq.n	8002948 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	691a      	ldr	r2, [r3, #16]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800292c:	b2d2      	uxtb	r2, r2
 800292e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002934:	1c5a      	adds	r2, r3, #1
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800293e:	b29b      	uxth	r3, r3
 8002940:	3b01      	subs	r3, #1
 8002942:	b29a      	uxth	r2, r3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002948:	bf00      	nop
 800294a:	370c      	adds	r7, #12
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr

08002954 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b084      	sub	sp, #16
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
 800295c:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800295e:	2300      	movs	r3, #0
 8002960:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002968:	b2db      	uxtb	r3, r3
 800296a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800296e:	2b28      	cmp	r3, #40	; 0x28
 8002970:	d127      	bne.n	80029c2 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	685a      	ldr	r2, [r3, #4]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002980:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	089b      	lsrs	r3, r3, #2
 8002986:	f003 0301 	and.w	r3, r3, #1
 800298a:	2b00      	cmp	r3, #0
 800298c:	d101      	bne.n	8002992 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800298e:	2301      	movs	r3, #1
 8002990:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	09db      	lsrs	r3, r3, #7
 8002996:	f003 0301 	and.w	r3, r3, #1
 800299a:	2b00      	cmp	r3, #0
 800299c:	d103      	bne.n	80029a6 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	68db      	ldr	r3, [r3, #12]
 80029a2:	81bb      	strh	r3, [r7, #12]
 80029a4:	e002      	b.n	80029ac <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	699b      	ldr	r3, [r3, #24]
 80029aa:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2200      	movs	r2, #0
 80029b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80029b4:	89ba      	ldrh	r2, [r7, #12]
 80029b6:	7bfb      	ldrb	r3, [r7, #15]
 80029b8:	4619      	mov	r1, r3
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f7ff f940 	bl	8001c40 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80029c0:	e00e      	b.n	80029e0 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029c2:	2300      	movs	r3, #0
 80029c4:	60bb      	str	r3, [r7, #8]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	695b      	ldr	r3, [r3, #20]
 80029cc:	60bb      	str	r3, [r7, #8]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	699b      	ldr	r3, [r3, #24]
 80029d4:	60bb      	str	r3, [r7, #8]
 80029d6:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2200      	movs	r2, #0
 80029dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80029e0:	bf00      	nop
 80029e2:	3710      	adds	r7, #16
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}

080029e8 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b084      	sub	sp, #16
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029f6:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	685a      	ldr	r2, [r3, #4]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002a06:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8002a08:	2300      	movs	r3, #0
 8002a0a:	60bb      	str	r3, [r7, #8]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	695b      	ldr	r3, [r3, #20]
 8002a12:	60bb      	str	r3, [r7, #8]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f042 0201 	orr.w	r2, r2, #1
 8002a22:	601a      	str	r2, [r3, #0]
 8002a24:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a34:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a44:	d172      	bne.n	8002b2c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002a46:	7bfb      	ldrb	r3, [r7, #15]
 8002a48:	2b22      	cmp	r3, #34	; 0x22
 8002a4a:	d002      	beq.n	8002a52 <I2C_Slave_STOPF+0x6a>
 8002a4c:	7bfb      	ldrb	r3, [r7, #15]
 8002a4e:	2b2a      	cmp	r3, #42	; 0x2a
 8002a50:	d135      	bne.n	8002abe <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	b29a      	uxth	r2, r3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a64:	b29b      	uxth	r3, r3
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d005      	beq.n	8002a76 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6e:	f043 0204 	orr.w	r2, r3, #4
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	685a      	ldr	r2, [r3, #4]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a84:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f7fe fb7f 	bl	800118e <HAL_DMA_GetState>
 8002a90:	4603      	mov	r3, r0
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d049      	beq.n	8002b2a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a9a:	4a69      	ldr	r2, [pc, #420]	; (8002c40 <I2C_Slave_STOPF+0x258>)
 8002a9c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f7fe fb51 	bl	800114a <HAL_DMA_Abort_IT>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d03d      	beq.n	8002b2a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ab2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ab4:	687a      	ldr	r2, [r7, #4]
 8002ab6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002ab8:	4610      	mov	r0, r2
 8002aba:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002abc:	e035      	b.n	8002b2a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	b29a      	uxth	r2, r3
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ad0:	b29b      	uxth	r3, r3
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d005      	beq.n	8002ae2 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ada:	f043 0204 	orr.w	r2, r3, #4
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	685a      	ldr	r2, [r3, #4]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002af0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002af6:	4618      	mov	r0, r3
 8002af8:	f7fe fb49 	bl	800118e <HAL_DMA_GetState>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d014      	beq.n	8002b2c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b06:	4a4e      	ldr	r2, [pc, #312]	; (8002c40 <I2C_Slave_STOPF+0x258>)
 8002b08:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f7fe fb1b 	bl	800114a <HAL_DMA_Abort_IT>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d008      	beq.n	8002b2c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b20:	687a      	ldr	r2, [r7, #4]
 8002b22:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002b24:	4610      	mov	r0, r2
 8002b26:	4798      	blx	r3
 8002b28:	e000      	b.n	8002b2c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002b2a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b30:	b29b      	uxth	r3, r3
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d03e      	beq.n	8002bb4 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	695b      	ldr	r3, [r3, #20]
 8002b3c:	f003 0304 	and.w	r3, r3, #4
 8002b40:	2b04      	cmp	r3, #4
 8002b42:	d112      	bne.n	8002b6a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	691a      	ldr	r2, [r3, #16]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4e:	b2d2      	uxtb	r2, r2
 8002b50:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b56:	1c5a      	adds	r2, r3, #1
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b60:	b29b      	uxth	r3, r3
 8002b62:	3b01      	subs	r3, #1
 8002b64:	b29a      	uxth	r2, r3
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	695b      	ldr	r3, [r3, #20]
 8002b70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b74:	2b40      	cmp	r3, #64	; 0x40
 8002b76:	d112      	bne.n	8002b9e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	691a      	ldr	r2, [r3, #16]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b82:	b2d2      	uxtb	r2, r2
 8002b84:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b8a:	1c5a      	adds	r2, r3, #1
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b94:	b29b      	uxth	r3, r3
 8002b96:	3b01      	subs	r3, #1
 8002b98:	b29a      	uxth	r2, r3
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ba2:	b29b      	uxth	r3, r3
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d005      	beq.n	8002bb4 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bac:	f043 0204 	orr.w	r2, r3, #4
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d003      	beq.n	8002bc4 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	f000 f8b3 	bl	8002d28 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8002bc2:	e039      	b.n	8002c38 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002bc4:	7bfb      	ldrb	r3, [r7, #15]
 8002bc6:	2b2a      	cmp	r3, #42	; 0x2a
 8002bc8:	d109      	bne.n	8002bde <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2228      	movs	r2, #40	; 0x28
 8002bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002bd8:	6878      	ldr	r0, [r7, #4]
 8002bda:	f7ff f827 	bl	8001c2c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	2b28      	cmp	r3, #40	; 0x28
 8002be8:	d111      	bne.n	8002c0e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4a15      	ldr	r2, [pc, #84]	; (8002c44 <I2C_Slave_STOPF+0x25c>)
 8002bee:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2220      	movs	r2, #32
 8002bfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2200      	movs	r2, #0
 8002c02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	f7ff f828 	bl	8001c5c <HAL_I2C_ListenCpltCallback>
}
 8002c0c:	e014      	b.n	8002c38 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c12:	2b22      	cmp	r3, #34	; 0x22
 8002c14:	d002      	beq.n	8002c1c <I2C_Slave_STOPF+0x234>
 8002c16:	7bfb      	ldrb	r3, [r7, #15]
 8002c18:	2b22      	cmp	r3, #34	; 0x22
 8002c1a:	d10d      	bne.n	8002c38 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2220      	movs	r2, #32
 8002c26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f7fe fffa 	bl	8001c2c <HAL_I2C_SlaveRxCpltCallback>
}
 8002c38:	bf00      	nop
 8002c3a:	3710      	adds	r7, #16
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	08002f8d 	.word	0x08002f8d
 8002c44:	ffff0000 	.word	0xffff0000

08002c48 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b084      	sub	sp, #16
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c56:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c5c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	2b08      	cmp	r3, #8
 8002c62:	d002      	beq.n	8002c6a <I2C_Slave_AF+0x22>
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	2b20      	cmp	r3, #32
 8002c68:	d129      	bne.n	8002cbe <I2C_Slave_AF+0x76>
 8002c6a:	7bfb      	ldrb	r3, [r7, #15]
 8002c6c:	2b28      	cmp	r3, #40	; 0x28
 8002c6e:	d126      	bne.n	8002cbe <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	4a2c      	ldr	r2, [pc, #176]	; (8002d24 <I2C_Slave_AF+0xdc>)
 8002c74:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	685a      	ldr	r2, [r3, #4]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002c84:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c8e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c9e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2220      	movs	r2, #32
 8002caa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f7fe ffd0 	bl	8001c5c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8002cbc:	e02e      	b.n	8002d1c <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002cbe:	7bfb      	ldrb	r3, [r7, #15]
 8002cc0:	2b21      	cmp	r3, #33	; 0x21
 8002cc2:	d126      	bne.n	8002d12 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	4a17      	ldr	r2, [pc, #92]	; (8002d24 <I2C_Slave_AF+0xdc>)
 8002cc8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2221      	movs	r2, #33	; 0x21
 8002cce:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2220      	movs	r2, #32
 8002cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	685a      	ldr	r2, [r3, #4]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002cee:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002cf8:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d08:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f7fe ff84 	bl	8001c18 <HAL_I2C_SlaveTxCpltCallback>
}
 8002d10:	e004      	b.n	8002d1c <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002d1a:	615a      	str	r2, [r3, #20]
}
 8002d1c:	bf00      	nop
 8002d1e:	3710      	adds	r7, #16
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	ffff0000 	.word	0xffff0000

08002d28 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b084      	sub	sp, #16
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d36:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d3e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002d40:	7bbb      	ldrb	r3, [r7, #14]
 8002d42:	2b10      	cmp	r3, #16
 8002d44:	d002      	beq.n	8002d4c <I2C_ITError+0x24>
 8002d46:	7bbb      	ldrb	r3, [r7, #14]
 8002d48:	2b40      	cmp	r3, #64	; 0x40
 8002d4a:	d10a      	bne.n	8002d62 <I2C_ITError+0x3a>
 8002d4c:	7bfb      	ldrb	r3, [r7, #15]
 8002d4e:	2b22      	cmp	r3, #34	; 0x22
 8002d50:	d107      	bne.n	8002d62 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d60:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002d62:	7bfb      	ldrb	r3, [r7, #15]
 8002d64:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002d68:	2b28      	cmp	r3, #40	; 0x28
 8002d6a:	d107      	bne.n	8002d7c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2228      	movs	r2, #40	; 0x28
 8002d76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002d7a:	e015      	b.n	8002da8 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d8a:	d00a      	beq.n	8002da2 <I2C_ITError+0x7a>
 8002d8c:	7bfb      	ldrb	r3, [r7, #15]
 8002d8e:	2b60      	cmp	r3, #96	; 0x60
 8002d90:	d007      	beq.n	8002da2 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2220      	movs	r2, #32
 8002d96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2200      	movs	r2, #0
 8002da6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002db2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002db6:	d162      	bne.n	8002e7e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	685a      	ldr	r2, [r3, #4]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002dc6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dcc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d020      	beq.n	8002e18 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dda:	4a6a      	ldr	r2, [pc, #424]	; (8002f84 <I2C_ITError+0x25c>)
 8002ddc:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002de2:	4618      	mov	r0, r3
 8002de4:	f7fe f9b1 	bl	800114a <HAL_DMA_Abort_IT>
 8002de8:	4603      	mov	r3, r0
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	f000 8089 	beq.w	8002f02 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f022 0201 	bic.w	r2, r2, #1
 8002dfe:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2220      	movs	r2, #32
 8002e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002e12:	4610      	mov	r0, r2
 8002e14:	4798      	blx	r3
 8002e16:	e074      	b.n	8002f02 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e1c:	4a59      	ldr	r2, [pc, #356]	; (8002f84 <I2C_ITError+0x25c>)
 8002e1e:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e24:	4618      	mov	r0, r3
 8002e26:	f7fe f990 	bl	800114a <HAL_DMA_Abort_IT>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d068      	beq.n	8002f02 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	695b      	ldr	r3, [r3, #20]
 8002e36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e3a:	2b40      	cmp	r3, #64	; 0x40
 8002e3c:	d10b      	bne.n	8002e56 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	691a      	ldr	r2, [r3, #16]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e48:	b2d2      	uxtb	r2, r2
 8002e4a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e50:	1c5a      	adds	r2, r3, #1
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f022 0201 	bic.w	r2, r2, #1
 8002e64:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2220      	movs	r2, #32
 8002e6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e74:	687a      	ldr	r2, [r7, #4]
 8002e76:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002e78:	4610      	mov	r0, r2
 8002e7a:	4798      	blx	r3
 8002e7c:	e041      	b.n	8002f02 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	2b60      	cmp	r3, #96	; 0x60
 8002e88:	d125      	bne.n	8002ed6 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2220      	movs	r2, #32
 8002e8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2200      	movs	r2, #0
 8002e96:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	695b      	ldr	r3, [r3, #20]
 8002e9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ea2:	2b40      	cmp	r3, #64	; 0x40
 8002ea4:	d10b      	bne.n	8002ebe <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	691a      	ldr	r2, [r3, #16]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb0:	b2d2      	uxtb	r2, r2
 8002eb2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb8:	1c5a      	adds	r2, r3, #1
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f022 0201 	bic.w	r2, r2, #1
 8002ecc:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002ece:	6878      	ldr	r0, [r7, #4]
 8002ed0:	f7fe feec 	bl	8001cac <HAL_I2C_AbortCpltCallback>
 8002ed4:	e015      	b.n	8002f02 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	695b      	ldr	r3, [r3, #20]
 8002edc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ee0:	2b40      	cmp	r3, #64	; 0x40
 8002ee2:	d10b      	bne.n	8002efc <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	691a      	ldr	r2, [r3, #16]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eee:	b2d2      	uxtb	r2, r2
 8002ef0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef6:	1c5a      	adds	r2, r3, #1
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8002efc:	6878      	ldr	r0, [r7, #4]
 8002efe:	f7fe fecb 	bl	8001c98 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f06:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	f003 0301 	and.w	r3, r3, #1
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d10e      	bne.n	8002f30 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d109      	bne.n	8002f30 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d104      	bne.n	8002f30 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d007      	beq.n	8002f40 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	685a      	ldr	r2, [r3, #4]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002f3e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f46:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4c:	f003 0304 	and.w	r3, r3, #4
 8002f50:	2b04      	cmp	r3, #4
 8002f52:	d113      	bne.n	8002f7c <I2C_ITError+0x254>
 8002f54:	7bfb      	ldrb	r3, [r7, #15]
 8002f56:	2b28      	cmp	r3, #40	; 0x28
 8002f58:	d110      	bne.n	8002f7c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	4a0a      	ldr	r2, [pc, #40]	; (8002f88 <I2C_ITError+0x260>)
 8002f5e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2200      	movs	r2, #0
 8002f64:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2220      	movs	r2, #32
 8002f6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2200      	movs	r2, #0
 8002f72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f7fe fe70 	bl	8001c5c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002f7c:	bf00      	nop
 8002f7e:	3710      	adds	r7, #16
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}
 8002f84:	08002f8d 	.word	0x08002f8d
 8002f88:	ffff0000 	.word	0xffff0000

08002f8c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b086      	sub	sp, #24
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002f94:	2300      	movs	r3, #0
 8002f96:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f9c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fa4:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002fa6:	4b4b      	ldr	r3, [pc, #300]	; (80030d4 <I2C_DMAAbort+0x148>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	08db      	lsrs	r3, r3, #3
 8002fac:	4a4a      	ldr	r2, [pc, #296]	; (80030d8 <I2C_DMAAbort+0x14c>)
 8002fae:	fba2 2303 	umull	r2, r3, r2, r3
 8002fb2:	0a1a      	lsrs	r2, r3, #8
 8002fb4:	4613      	mov	r3, r2
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	4413      	add	r3, r2
 8002fba:	00da      	lsls	r2, r3, #3
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d106      	bne.n	8002fd4 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fca:	f043 0220 	orr.w	r2, r3, #32
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8002fd2:	e00a      	b.n	8002fea <I2C_DMAAbort+0x5e>
    }
    count--;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	3b01      	subs	r3, #1
 8002fd8:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fe4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fe8:	d0ea      	beq.n	8002fc0 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d003      	beq.n	8002ffa <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d003      	beq.n	800300a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003006:	2200      	movs	r2, #0
 8003008:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003018:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	2200      	movs	r2, #0
 800301e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003024:	2b00      	cmp	r3, #0
 8003026:	d003      	beq.n	8003030 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800302c:	2200      	movs	r2, #0
 800302e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003034:	2b00      	cmp	r3, #0
 8003036:	d003      	beq.n	8003040 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800303c:	2200      	movs	r2, #0
 800303e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f022 0201 	bic.w	r2, r2, #1
 800304e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003056:	b2db      	uxtb	r3, r3
 8003058:	2b60      	cmp	r3, #96	; 0x60
 800305a:	d10e      	bne.n	800307a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	2220      	movs	r2, #32
 8003060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	2200      	movs	r2, #0
 8003068:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	2200      	movs	r2, #0
 8003070:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003072:	6978      	ldr	r0, [r7, #20]
 8003074:	f7fe fe1a 	bl	8001cac <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003078:	e027      	b.n	80030ca <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800307a:	7cfb      	ldrb	r3, [r7, #19]
 800307c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003080:	2b28      	cmp	r3, #40	; 0x28
 8003082:	d117      	bne.n	80030b4 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f042 0201 	orr.w	r2, r2, #1
 8003092:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80030a2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	2200      	movs	r2, #0
 80030a8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	2228      	movs	r2, #40	; 0x28
 80030ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80030b2:	e007      	b.n	80030c4 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	2220      	movs	r2, #32
 80030b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	2200      	movs	r2, #0
 80030c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80030c4:	6978      	ldr	r0, [r7, #20]
 80030c6:	f7fe fde7 	bl	8001c98 <HAL_I2C_ErrorCallback>
}
 80030ca:	bf00      	nop
 80030cc:	3718      	adds	r7, #24
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}
 80030d2:	bf00      	nop
 80030d4:	20000000 	.word	0x20000000
 80030d8:	14f8b589 	.word	0x14f8b589

080030dc <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80030dc:	b480      	push	{r7}
 80030de:	b085      	sub	sp, #20
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80030e4:	2300      	movs	r3, #0
 80030e6:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80030e8:	4b13      	ldr	r3, [pc, #76]	; (8003138 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	08db      	lsrs	r3, r3, #3
 80030ee:	4a13      	ldr	r2, [pc, #76]	; (800313c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80030f0:	fba2 2303 	umull	r2, r3, r2, r3
 80030f4:	0a1a      	lsrs	r2, r3, #8
 80030f6:	4613      	mov	r3, r2
 80030f8:	009b      	lsls	r3, r3, #2
 80030fa:	4413      	add	r3, r2
 80030fc:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	3b01      	subs	r3, #1
 8003102:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d107      	bne.n	800311a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310e:	f043 0220 	orr.w	r2, r3, #32
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e008      	b.n	800312c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003124:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003128:	d0e9      	beq.n	80030fe <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800312a:	2300      	movs	r3, #0
}
 800312c:	4618      	mov	r0, r3
 800312e:	3714      	adds	r7, #20
 8003130:	46bd      	mov	sp, r7
 8003132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003136:	4770      	bx	lr
 8003138:	20000000 	.word	0x20000000
 800313c:	14f8b589 	.word	0x14f8b589

08003140 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8003140:	b480      	push	{r7}
 8003142:	b083      	sub	sp, #12
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800314c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003150:	d103      	bne.n	800315a <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2201      	movs	r2, #1
 8003156:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8003158:	e007      	b.n	800316a <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800315e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003162:	d102      	bne.n	800316a <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2208      	movs	r2, #8
 8003168:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800316a:	bf00      	nop
 800316c:	370c      	adds	r7, #12
 800316e:	46bd      	mov	sp, r7
 8003170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003174:	4770      	bx	lr

08003176 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003176:	b480      	push	{r7}
 8003178:	b083      	sub	sp, #12
 800317a:	af00      	add	r7, sp, #0
 800317c:	6078      	str	r0, [r7, #4]
 800317e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003186:	b2db      	uxtb	r3, r3
 8003188:	2b20      	cmp	r3, #32
 800318a:	d129      	bne.n	80031e0 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2224      	movs	r2, #36	; 0x24
 8003190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f022 0201 	bic.w	r2, r2, #1
 80031a2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f022 0210 	bic.w	r2, r2, #16
 80031b2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	683a      	ldr	r2, [r7, #0]
 80031c0:	430a      	orrs	r2, r1
 80031c2:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f042 0201 	orr.w	r2, r2, #1
 80031d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2220      	movs	r2, #32
 80031d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80031dc:	2300      	movs	r3, #0
 80031de:	e000      	b.n	80031e2 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80031e0:	2302      	movs	r3, #2
  }
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	370c      	adds	r7, #12
 80031e6:	46bd      	mov	sp, r7
 80031e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ec:	4770      	bx	lr

080031ee <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80031ee:	b480      	push	{r7}
 80031f0:	b085      	sub	sp, #20
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	6078      	str	r0, [r7, #4]
 80031f6:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80031f8:	2300      	movs	r3, #0
 80031fa:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003202:	b2db      	uxtb	r3, r3
 8003204:	2b20      	cmp	r3, #32
 8003206:	d12a      	bne.n	800325e <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2224      	movs	r2, #36	; 0x24
 800320c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f022 0201 	bic.w	r2, r2, #1
 800321e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003226:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003228:	89fb      	ldrh	r3, [r7, #14]
 800322a:	f023 030f 	bic.w	r3, r3, #15
 800322e:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	b29a      	uxth	r2, r3
 8003234:	89fb      	ldrh	r3, [r7, #14]
 8003236:	4313      	orrs	r3, r2
 8003238:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	89fa      	ldrh	r2, [r7, #14]
 8003240:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f042 0201 	orr.w	r2, r2, #1
 8003250:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2220      	movs	r2, #32
 8003256:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800325a:	2300      	movs	r3, #0
 800325c:	e000      	b.n	8003260 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800325e:	2302      	movs	r3, #2
  }
}
 8003260:	4618      	mov	r0, r3
 8003262:	3714      	adds	r7, #20
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr

0800326c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b082      	sub	sp, #8
 8003270:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003272:	2300      	movs	r3, #0
 8003274:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003276:	2300      	movs	r3, #0
 8003278:	603b      	str	r3, [r7, #0]
 800327a:	4b20      	ldr	r3, [pc, #128]	; (80032fc <HAL_PWREx_EnableOverDrive+0x90>)
 800327c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327e:	4a1f      	ldr	r2, [pc, #124]	; (80032fc <HAL_PWREx_EnableOverDrive+0x90>)
 8003280:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003284:	6413      	str	r3, [r2, #64]	; 0x40
 8003286:	4b1d      	ldr	r3, [pc, #116]	; (80032fc <HAL_PWREx_EnableOverDrive+0x90>)
 8003288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800328e:	603b      	str	r3, [r7, #0]
 8003290:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003292:	4b1b      	ldr	r3, [pc, #108]	; (8003300 <HAL_PWREx_EnableOverDrive+0x94>)
 8003294:	2201      	movs	r2, #1
 8003296:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003298:	f7fd fdca 	bl	8000e30 <HAL_GetTick>
 800329c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800329e:	e009      	b.n	80032b4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80032a0:	f7fd fdc6 	bl	8000e30 <HAL_GetTick>
 80032a4:	4602      	mov	r2, r0
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80032ae:	d901      	bls.n	80032b4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80032b0:	2303      	movs	r3, #3
 80032b2:	e01f      	b.n	80032f4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80032b4:	4b13      	ldr	r3, [pc, #76]	; (8003304 <HAL_PWREx_EnableOverDrive+0x98>)
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032c0:	d1ee      	bne.n	80032a0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80032c2:	4b11      	ldr	r3, [pc, #68]	; (8003308 <HAL_PWREx_EnableOverDrive+0x9c>)
 80032c4:	2201      	movs	r2, #1
 80032c6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80032c8:	f7fd fdb2 	bl	8000e30 <HAL_GetTick>
 80032cc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80032ce:	e009      	b.n	80032e4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80032d0:	f7fd fdae 	bl	8000e30 <HAL_GetTick>
 80032d4:	4602      	mov	r2, r0
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	1ad3      	subs	r3, r2, r3
 80032da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80032de:	d901      	bls.n	80032e4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80032e0:	2303      	movs	r3, #3
 80032e2:	e007      	b.n	80032f4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80032e4:	4b07      	ldr	r3, [pc, #28]	; (8003304 <HAL_PWREx_EnableOverDrive+0x98>)
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80032f0:	d1ee      	bne.n	80032d0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80032f2:	2300      	movs	r3, #0
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	3708      	adds	r7, #8
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}
 80032fc:	40023800 	.word	0x40023800
 8003300:	420e0040 	.word	0x420e0040
 8003304:	40007000 	.word	0x40007000
 8003308:	420e0044 	.word	0x420e0044

0800330c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b086      	sub	sp, #24
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d101      	bne.n	800331e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e267      	b.n	80037ee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 0301 	and.w	r3, r3, #1
 8003326:	2b00      	cmp	r3, #0
 8003328:	d075      	beq.n	8003416 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800332a:	4b88      	ldr	r3, [pc, #544]	; (800354c <HAL_RCC_OscConfig+0x240>)
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	f003 030c 	and.w	r3, r3, #12
 8003332:	2b04      	cmp	r3, #4
 8003334:	d00c      	beq.n	8003350 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003336:	4b85      	ldr	r3, [pc, #532]	; (800354c <HAL_RCC_OscConfig+0x240>)
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800333e:	2b08      	cmp	r3, #8
 8003340:	d112      	bne.n	8003368 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003342:	4b82      	ldr	r3, [pc, #520]	; (800354c <HAL_RCC_OscConfig+0x240>)
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800334a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800334e:	d10b      	bne.n	8003368 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003350:	4b7e      	ldr	r3, [pc, #504]	; (800354c <HAL_RCC_OscConfig+0x240>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003358:	2b00      	cmp	r3, #0
 800335a:	d05b      	beq.n	8003414 <HAL_RCC_OscConfig+0x108>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d157      	bne.n	8003414 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	e242      	b.n	80037ee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003370:	d106      	bne.n	8003380 <HAL_RCC_OscConfig+0x74>
 8003372:	4b76      	ldr	r3, [pc, #472]	; (800354c <HAL_RCC_OscConfig+0x240>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a75      	ldr	r2, [pc, #468]	; (800354c <HAL_RCC_OscConfig+0x240>)
 8003378:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800337c:	6013      	str	r3, [r2, #0]
 800337e:	e01d      	b.n	80033bc <HAL_RCC_OscConfig+0xb0>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003388:	d10c      	bne.n	80033a4 <HAL_RCC_OscConfig+0x98>
 800338a:	4b70      	ldr	r3, [pc, #448]	; (800354c <HAL_RCC_OscConfig+0x240>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a6f      	ldr	r2, [pc, #444]	; (800354c <HAL_RCC_OscConfig+0x240>)
 8003390:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003394:	6013      	str	r3, [r2, #0]
 8003396:	4b6d      	ldr	r3, [pc, #436]	; (800354c <HAL_RCC_OscConfig+0x240>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a6c      	ldr	r2, [pc, #432]	; (800354c <HAL_RCC_OscConfig+0x240>)
 800339c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033a0:	6013      	str	r3, [r2, #0]
 80033a2:	e00b      	b.n	80033bc <HAL_RCC_OscConfig+0xb0>
 80033a4:	4b69      	ldr	r3, [pc, #420]	; (800354c <HAL_RCC_OscConfig+0x240>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a68      	ldr	r2, [pc, #416]	; (800354c <HAL_RCC_OscConfig+0x240>)
 80033aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033ae:	6013      	str	r3, [r2, #0]
 80033b0:	4b66      	ldr	r3, [pc, #408]	; (800354c <HAL_RCC_OscConfig+0x240>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a65      	ldr	r2, [pc, #404]	; (800354c <HAL_RCC_OscConfig+0x240>)
 80033b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d013      	beq.n	80033ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033c4:	f7fd fd34 	bl	8000e30 <HAL_GetTick>
 80033c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033ca:	e008      	b.n	80033de <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033cc:	f7fd fd30 	bl	8000e30 <HAL_GetTick>
 80033d0:	4602      	mov	r2, r0
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	2b64      	cmp	r3, #100	; 0x64
 80033d8:	d901      	bls.n	80033de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	e207      	b.n	80037ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033de:	4b5b      	ldr	r3, [pc, #364]	; (800354c <HAL_RCC_OscConfig+0x240>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d0f0      	beq.n	80033cc <HAL_RCC_OscConfig+0xc0>
 80033ea:	e014      	b.n	8003416 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033ec:	f7fd fd20 	bl	8000e30 <HAL_GetTick>
 80033f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033f2:	e008      	b.n	8003406 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033f4:	f7fd fd1c 	bl	8000e30 <HAL_GetTick>
 80033f8:	4602      	mov	r2, r0
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	1ad3      	subs	r3, r2, r3
 80033fe:	2b64      	cmp	r3, #100	; 0x64
 8003400:	d901      	bls.n	8003406 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003402:	2303      	movs	r3, #3
 8003404:	e1f3      	b.n	80037ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003406:	4b51      	ldr	r3, [pc, #324]	; (800354c <HAL_RCC_OscConfig+0x240>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800340e:	2b00      	cmp	r3, #0
 8003410:	d1f0      	bne.n	80033f4 <HAL_RCC_OscConfig+0xe8>
 8003412:	e000      	b.n	8003416 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003414:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 0302 	and.w	r3, r3, #2
 800341e:	2b00      	cmp	r3, #0
 8003420:	d063      	beq.n	80034ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003422:	4b4a      	ldr	r3, [pc, #296]	; (800354c <HAL_RCC_OscConfig+0x240>)
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	f003 030c 	and.w	r3, r3, #12
 800342a:	2b00      	cmp	r3, #0
 800342c:	d00b      	beq.n	8003446 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800342e:	4b47      	ldr	r3, [pc, #284]	; (800354c <HAL_RCC_OscConfig+0x240>)
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003436:	2b08      	cmp	r3, #8
 8003438:	d11c      	bne.n	8003474 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800343a:	4b44      	ldr	r3, [pc, #272]	; (800354c <HAL_RCC_OscConfig+0x240>)
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003442:	2b00      	cmp	r3, #0
 8003444:	d116      	bne.n	8003474 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003446:	4b41      	ldr	r3, [pc, #260]	; (800354c <HAL_RCC_OscConfig+0x240>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 0302 	and.w	r3, r3, #2
 800344e:	2b00      	cmp	r3, #0
 8003450:	d005      	beq.n	800345e <HAL_RCC_OscConfig+0x152>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	68db      	ldr	r3, [r3, #12]
 8003456:	2b01      	cmp	r3, #1
 8003458:	d001      	beq.n	800345e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e1c7      	b.n	80037ee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800345e:	4b3b      	ldr	r3, [pc, #236]	; (800354c <HAL_RCC_OscConfig+0x240>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	691b      	ldr	r3, [r3, #16]
 800346a:	00db      	lsls	r3, r3, #3
 800346c:	4937      	ldr	r1, [pc, #220]	; (800354c <HAL_RCC_OscConfig+0x240>)
 800346e:	4313      	orrs	r3, r2
 8003470:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003472:	e03a      	b.n	80034ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d020      	beq.n	80034be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800347c:	4b34      	ldr	r3, [pc, #208]	; (8003550 <HAL_RCC_OscConfig+0x244>)
 800347e:	2201      	movs	r2, #1
 8003480:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003482:	f7fd fcd5 	bl	8000e30 <HAL_GetTick>
 8003486:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003488:	e008      	b.n	800349c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800348a:	f7fd fcd1 	bl	8000e30 <HAL_GetTick>
 800348e:	4602      	mov	r2, r0
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	1ad3      	subs	r3, r2, r3
 8003494:	2b02      	cmp	r3, #2
 8003496:	d901      	bls.n	800349c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003498:	2303      	movs	r3, #3
 800349a:	e1a8      	b.n	80037ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800349c:	4b2b      	ldr	r3, [pc, #172]	; (800354c <HAL_RCC_OscConfig+0x240>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f003 0302 	and.w	r3, r3, #2
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d0f0      	beq.n	800348a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034a8:	4b28      	ldr	r3, [pc, #160]	; (800354c <HAL_RCC_OscConfig+0x240>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	691b      	ldr	r3, [r3, #16]
 80034b4:	00db      	lsls	r3, r3, #3
 80034b6:	4925      	ldr	r1, [pc, #148]	; (800354c <HAL_RCC_OscConfig+0x240>)
 80034b8:	4313      	orrs	r3, r2
 80034ba:	600b      	str	r3, [r1, #0]
 80034bc:	e015      	b.n	80034ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034be:	4b24      	ldr	r3, [pc, #144]	; (8003550 <HAL_RCC_OscConfig+0x244>)
 80034c0:	2200      	movs	r2, #0
 80034c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034c4:	f7fd fcb4 	bl	8000e30 <HAL_GetTick>
 80034c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034ca:	e008      	b.n	80034de <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034cc:	f7fd fcb0 	bl	8000e30 <HAL_GetTick>
 80034d0:	4602      	mov	r2, r0
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	2b02      	cmp	r3, #2
 80034d8:	d901      	bls.n	80034de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80034da:	2303      	movs	r3, #3
 80034dc:	e187      	b.n	80037ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034de:	4b1b      	ldr	r3, [pc, #108]	; (800354c <HAL_RCC_OscConfig+0x240>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 0302 	and.w	r3, r3, #2
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d1f0      	bne.n	80034cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 0308 	and.w	r3, r3, #8
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d036      	beq.n	8003564 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	695b      	ldr	r3, [r3, #20]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d016      	beq.n	800352c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034fe:	4b15      	ldr	r3, [pc, #84]	; (8003554 <HAL_RCC_OscConfig+0x248>)
 8003500:	2201      	movs	r2, #1
 8003502:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003504:	f7fd fc94 	bl	8000e30 <HAL_GetTick>
 8003508:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800350a:	e008      	b.n	800351e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800350c:	f7fd fc90 	bl	8000e30 <HAL_GetTick>
 8003510:	4602      	mov	r2, r0
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	2b02      	cmp	r3, #2
 8003518:	d901      	bls.n	800351e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800351a:	2303      	movs	r3, #3
 800351c:	e167      	b.n	80037ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800351e:	4b0b      	ldr	r3, [pc, #44]	; (800354c <HAL_RCC_OscConfig+0x240>)
 8003520:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003522:	f003 0302 	and.w	r3, r3, #2
 8003526:	2b00      	cmp	r3, #0
 8003528:	d0f0      	beq.n	800350c <HAL_RCC_OscConfig+0x200>
 800352a:	e01b      	b.n	8003564 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800352c:	4b09      	ldr	r3, [pc, #36]	; (8003554 <HAL_RCC_OscConfig+0x248>)
 800352e:	2200      	movs	r2, #0
 8003530:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003532:	f7fd fc7d 	bl	8000e30 <HAL_GetTick>
 8003536:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003538:	e00e      	b.n	8003558 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800353a:	f7fd fc79 	bl	8000e30 <HAL_GetTick>
 800353e:	4602      	mov	r2, r0
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	1ad3      	subs	r3, r2, r3
 8003544:	2b02      	cmp	r3, #2
 8003546:	d907      	bls.n	8003558 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003548:	2303      	movs	r3, #3
 800354a:	e150      	b.n	80037ee <HAL_RCC_OscConfig+0x4e2>
 800354c:	40023800 	.word	0x40023800
 8003550:	42470000 	.word	0x42470000
 8003554:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003558:	4b88      	ldr	r3, [pc, #544]	; (800377c <HAL_RCC_OscConfig+0x470>)
 800355a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800355c:	f003 0302 	and.w	r3, r3, #2
 8003560:	2b00      	cmp	r3, #0
 8003562:	d1ea      	bne.n	800353a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 0304 	and.w	r3, r3, #4
 800356c:	2b00      	cmp	r3, #0
 800356e:	f000 8097 	beq.w	80036a0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003572:	2300      	movs	r3, #0
 8003574:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003576:	4b81      	ldr	r3, [pc, #516]	; (800377c <HAL_RCC_OscConfig+0x470>)
 8003578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800357e:	2b00      	cmp	r3, #0
 8003580:	d10f      	bne.n	80035a2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003582:	2300      	movs	r3, #0
 8003584:	60bb      	str	r3, [r7, #8]
 8003586:	4b7d      	ldr	r3, [pc, #500]	; (800377c <HAL_RCC_OscConfig+0x470>)
 8003588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358a:	4a7c      	ldr	r2, [pc, #496]	; (800377c <HAL_RCC_OscConfig+0x470>)
 800358c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003590:	6413      	str	r3, [r2, #64]	; 0x40
 8003592:	4b7a      	ldr	r3, [pc, #488]	; (800377c <HAL_RCC_OscConfig+0x470>)
 8003594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003596:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800359a:	60bb      	str	r3, [r7, #8]
 800359c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800359e:	2301      	movs	r3, #1
 80035a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035a2:	4b77      	ldr	r3, [pc, #476]	; (8003780 <HAL_RCC_OscConfig+0x474>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d118      	bne.n	80035e0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035ae:	4b74      	ldr	r3, [pc, #464]	; (8003780 <HAL_RCC_OscConfig+0x474>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a73      	ldr	r2, [pc, #460]	; (8003780 <HAL_RCC_OscConfig+0x474>)
 80035b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035ba:	f7fd fc39 	bl	8000e30 <HAL_GetTick>
 80035be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035c0:	e008      	b.n	80035d4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035c2:	f7fd fc35 	bl	8000e30 <HAL_GetTick>
 80035c6:	4602      	mov	r2, r0
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	1ad3      	subs	r3, r2, r3
 80035cc:	2b02      	cmp	r3, #2
 80035ce:	d901      	bls.n	80035d4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80035d0:	2303      	movs	r3, #3
 80035d2:	e10c      	b.n	80037ee <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035d4:	4b6a      	ldr	r3, [pc, #424]	; (8003780 <HAL_RCC_OscConfig+0x474>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d0f0      	beq.n	80035c2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d106      	bne.n	80035f6 <HAL_RCC_OscConfig+0x2ea>
 80035e8:	4b64      	ldr	r3, [pc, #400]	; (800377c <HAL_RCC_OscConfig+0x470>)
 80035ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ec:	4a63      	ldr	r2, [pc, #396]	; (800377c <HAL_RCC_OscConfig+0x470>)
 80035ee:	f043 0301 	orr.w	r3, r3, #1
 80035f2:	6713      	str	r3, [r2, #112]	; 0x70
 80035f4:	e01c      	b.n	8003630 <HAL_RCC_OscConfig+0x324>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	2b05      	cmp	r3, #5
 80035fc:	d10c      	bne.n	8003618 <HAL_RCC_OscConfig+0x30c>
 80035fe:	4b5f      	ldr	r3, [pc, #380]	; (800377c <HAL_RCC_OscConfig+0x470>)
 8003600:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003602:	4a5e      	ldr	r2, [pc, #376]	; (800377c <HAL_RCC_OscConfig+0x470>)
 8003604:	f043 0304 	orr.w	r3, r3, #4
 8003608:	6713      	str	r3, [r2, #112]	; 0x70
 800360a:	4b5c      	ldr	r3, [pc, #368]	; (800377c <HAL_RCC_OscConfig+0x470>)
 800360c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800360e:	4a5b      	ldr	r2, [pc, #364]	; (800377c <HAL_RCC_OscConfig+0x470>)
 8003610:	f043 0301 	orr.w	r3, r3, #1
 8003614:	6713      	str	r3, [r2, #112]	; 0x70
 8003616:	e00b      	b.n	8003630 <HAL_RCC_OscConfig+0x324>
 8003618:	4b58      	ldr	r3, [pc, #352]	; (800377c <HAL_RCC_OscConfig+0x470>)
 800361a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800361c:	4a57      	ldr	r2, [pc, #348]	; (800377c <HAL_RCC_OscConfig+0x470>)
 800361e:	f023 0301 	bic.w	r3, r3, #1
 8003622:	6713      	str	r3, [r2, #112]	; 0x70
 8003624:	4b55      	ldr	r3, [pc, #340]	; (800377c <HAL_RCC_OscConfig+0x470>)
 8003626:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003628:	4a54      	ldr	r2, [pc, #336]	; (800377c <HAL_RCC_OscConfig+0x470>)
 800362a:	f023 0304 	bic.w	r3, r3, #4
 800362e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d015      	beq.n	8003664 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003638:	f7fd fbfa 	bl	8000e30 <HAL_GetTick>
 800363c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800363e:	e00a      	b.n	8003656 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003640:	f7fd fbf6 	bl	8000e30 <HAL_GetTick>
 8003644:	4602      	mov	r2, r0
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	f241 3288 	movw	r2, #5000	; 0x1388
 800364e:	4293      	cmp	r3, r2
 8003650:	d901      	bls.n	8003656 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003652:	2303      	movs	r3, #3
 8003654:	e0cb      	b.n	80037ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003656:	4b49      	ldr	r3, [pc, #292]	; (800377c <HAL_RCC_OscConfig+0x470>)
 8003658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800365a:	f003 0302 	and.w	r3, r3, #2
 800365e:	2b00      	cmp	r3, #0
 8003660:	d0ee      	beq.n	8003640 <HAL_RCC_OscConfig+0x334>
 8003662:	e014      	b.n	800368e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003664:	f7fd fbe4 	bl	8000e30 <HAL_GetTick>
 8003668:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800366a:	e00a      	b.n	8003682 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800366c:	f7fd fbe0 	bl	8000e30 <HAL_GetTick>
 8003670:	4602      	mov	r2, r0
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	1ad3      	subs	r3, r2, r3
 8003676:	f241 3288 	movw	r2, #5000	; 0x1388
 800367a:	4293      	cmp	r3, r2
 800367c:	d901      	bls.n	8003682 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800367e:	2303      	movs	r3, #3
 8003680:	e0b5      	b.n	80037ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003682:	4b3e      	ldr	r3, [pc, #248]	; (800377c <HAL_RCC_OscConfig+0x470>)
 8003684:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003686:	f003 0302 	and.w	r3, r3, #2
 800368a:	2b00      	cmp	r3, #0
 800368c:	d1ee      	bne.n	800366c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800368e:	7dfb      	ldrb	r3, [r7, #23]
 8003690:	2b01      	cmp	r3, #1
 8003692:	d105      	bne.n	80036a0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003694:	4b39      	ldr	r3, [pc, #228]	; (800377c <HAL_RCC_OscConfig+0x470>)
 8003696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003698:	4a38      	ldr	r2, [pc, #224]	; (800377c <HAL_RCC_OscConfig+0x470>)
 800369a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800369e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	699b      	ldr	r3, [r3, #24]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	f000 80a1 	beq.w	80037ec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80036aa:	4b34      	ldr	r3, [pc, #208]	; (800377c <HAL_RCC_OscConfig+0x470>)
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	f003 030c 	and.w	r3, r3, #12
 80036b2:	2b08      	cmp	r3, #8
 80036b4:	d05c      	beq.n	8003770 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	699b      	ldr	r3, [r3, #24]
 80036ba:	2b02      	cmp	r3, #2
 80036bc:	d141      	bne.n	8003742 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036be:	4b31      	ldr	r3, [pc, #196]	; (8003784 <HAL_RCC_OscConfig+0x478>)
 80036c0:	2200      	movs	r2, #0
 80036c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036c4:	f7fd fbb4 	bl	8000e30 <HAL_GetTick>
 80036c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036ca:	e008      	b.n	80036de <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036cc:	f7fd fbb0 	bl	8000e30 <HAL_GetTick>
 80036d0:	4602      	mov	r2, r0
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	1ad3      	subs	r3, r2, r3
 80036d6:	2b02      	cmp	r3, #2
 80036d8:	d901      	bls.n	80036de <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80036da:	2303      	movs	r3, #3
 80036dc:	e087      	b.n	80037ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036de:	4b27      	ldr	r3, [pc, #156]	; (800377c <HAL_RCC_OscConfig+0x470>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d1f0      	bne.n	80036cc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	69da      	ldr	r2, [r3, #28]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6a1b      	ldr	r3, [r3, #32]
 80036f2:	431a      	orrs	r2, r3
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f8:	019b      	lsls	r3, r3, #6
 80036fa:	431a      	orrs	r2, r3
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003700:	085b      	lsrs	r3, r3, #1
 8003702:	3b01      	subs	r3, #1
 8003704:	041b      	lsls	r3, r3, #16
 8003706:	431a      	orrs	r2, r3
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800370c:	061b      	lsls	r3, r3, #24
 800370e:	491b      	ldr	r1, [pc, #108]	; (800377c <HAL_RCC_OscConfig+0x470>)
 8003710:	4313      	orrs	r3, r2
 8003712:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003714:	4b1b      	ldr	r3, [pc, #108]	; (8003784 <HAL_RCC_OscConfig+0x478>)
 8003716:	2201      	movs	r2, #1
 8003718:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800371a:	f7fd fb89 	bl	8000e30 <HAL_GetTick>
 800371e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003720:	e008      	b.n	8003734 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003722:	f7fd fb85 	bl	8000e30 <HAL_GetTick>
 8003726:	4602      	mov	r2, r0
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	1ad3      	subs	r3, r2, r3
 800372c:	2b02      	cmp	r3, #2
 800372e:	d901      	bls.n	8003734 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003730:	2303      	movs	r3, #3
 8003732:	e05c      	b.n	80037ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003734:	4b11      	ldr	r3, [pc, #68]	; (800377c <HAL_RCC_OscConfig+0x470>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800373c:	2b00      	cmp	r3, #0
 800373e:	d0f0      	beq.n	8003722 <HAL_RCC_OscConfig+0x416>
 8003740:	e054      	b.n	80037ec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003742:	4b10      	ldr	r3, [pc, #64]	; (8003784 <HAL_RCC_OscConfig+0x478>)
 8003744:	2200      	movs	r2, #0
 8003746:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003748:	f7fd fb72 	bl	8000e30 <HAL_GetTick>
 800374c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800374e:	e008      	b.n	8003762 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003750:	f7fd fb6e 	bl	8000e30 <HAL_GetTick>
 8003754:	4602      	mov	r2, r0
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	1ad3      	subs	r3, r2, r3
 800375a:	2b02      	cmp	r3, #2
 800375c:	d901      	bls.n	8003762 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800375e:	2303      	movs	r3, #3
 8003760:	e045      	b.n	80037ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003762:	4b06      	ldr	r3, [pc, #24]	; (800377c <HAL_RCC_OscConfig+0x470>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800376a:	2b00      	cmp	r3, #0
 800376c:	d1f0      	bne.n	8003750 <HAL_RCC_OscConfig+0x444>
 800376e:	e03d      	b.n	80037ec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	699b      	ldr	r3, [r3, #24]
 8003774:	2b01      	cmp	r3, #1
 8003776:	d107      	bne.n	8003788 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	e038      	b.n	80037ee <HAL_RCC_OscConfig+0x4e2>
 800377c:	40023800 	.word	0x40023800
 8003780:	40007000 	.word	0x40007000
 8003784:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003788:	4b1b      	ldr	r3, [pc, #108]	; (80037f8 <HAL_RCC_OscConfig+0x4ec>)
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	699b      	ldr	r3, [r3, #24]
 8003792:	2b01      	cmp	r3, #1
 8003794:	d028      	beq.n	80037e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037a0:	429a      	cmp	r2, r3
 80037a2:	d121      	bne.n	80037e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037ae:	429a      	cmp	r2, r3
 80037b0:	d11a      	bne.n	80037e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037b2:	68fa      	ldr	r2, [r7, #12]
 80037b4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80037b8:	4013      	ands	r3, r2
 80037ba:	687a      	ldr	r2, [r7, #4]
 80037bc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80037be:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d111      	bne.n	80037e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ce:	085b      	lsrs	r3, r3, #1
 80037d0:	3b01      	subs	r3, #1
 80037d2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d107      	bne.n	80037e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037e2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d001      	beq.n	80037ec <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	e000      	b.n	80037ee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80037ec:	2300      	movs	r3, #0
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3718      	adds	r7, #24
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	bf00      	nop
 80037f8:	40023800 	.word	0x40023800

080037fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b084      	sub	sp, #16
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d101      	bne.n	8003810 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	e0cc      	b.n	80039aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003810:	4b68      	ldr	r3, [pc, #416]	; (80039b4 <HAL_RCC_ClockConfig+0x1b8>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 030f 	and.w	r3, r3, #15
 8003818:	683a      	ldr	r2, [r7, #0]
 800381a:	429a      	cmp	r2, r3
 800381c:	d90c      	bls.n	8003838 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800381e:	4b65      	ldr	r3, [pc, #404]	; (80039b4 <HAL_RCC_ClockConfig+0x1b8>)
 8003820:	683a      	ldr	r2, [r7, #0]
 8003822:	b2d2      	uxtb	r2, r2
 8003824:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003826:	4b63      	ldr	r3, [pc, #396]	; (80039b4 <HAL_RCC_ClockConfig+0x1b8>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 030f 	and.w	r3, r3, #15
 800382e:	683a      	ldr	r2, [r7, #0]
 8003830:	429a      	cmp	r2, r3
 8003832:	d001      	beq.n	8003838 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	e0b8      	b.n	80039aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 0302 	and.w	r3, r3, #2
 8003840:	2b00      	cmp	r3, #0
 8003842:	d020      	beq.n	8003886 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f003 0304 	and.w	r3, r3, #4
 800384c:	2b00      	cmp	r3, #0
 800384e:	d005      	beq.n	800385c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003850:	4b59      	ldr	r3, [pc, #356]	; (80039b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	4a58      	ldr	r2, [pc, #352]	; (80039b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003856:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800385a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 0308 	and.w	r3, r3, #8
 8003864:	2b00      	cmp	r3, #0
 8003866:	d005      	beq.n	8003874 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003868:	4b53      	ldr	r3, [pc, #332]	; (80039b8 <HAL_RCC_ClockConfig+0x1bc>)
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	4a52      	ldr	r2, [pc, #328]	; (80039b8 <HAL_RCC_ClockConfig+0x1bc>)
 800386e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003872:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003874:	4b50      	ldr	r3, [pc, #320]	; (80039b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	494d      	ldr	r1, [pc, #308]	; (80039b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003882:	4313      	orrs	r3, r2
 8003884:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 0301 	and.w	r3, r3, #1
 800388e:	2b00      	cmp	r3, #0
 8003890:	d044      	beq.n	800391c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	2b01      	cmp	r3, #1
 8003898:	d107      	bne.n	80038aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800389a:	4b47      	ldr	r3, [pc, #284]	; (80039b8 <HAL_RCC_ClockConfig+0x1bc>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d119      	bne.n	80038da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	e07f      	b.n	80039aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	2b02      	cmp	r3, #2
 80038b0:	d003      	beq.n	80038ba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038b6:	2b03      	cmp	r3, #3
 80038b8:	d107      	bne.n	80038ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038ba:	4b3f      	ldr	r3, [pc, #252]	; (80039b8 <HAL_RCC_ClockConfig+0x1bc>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d109      	bne.n	80038da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e06f      	b.n	80039aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038ca:	4b3b      	ldr	r3, [pc, #236]	; (80039b8 <HAL_RCC_ClockConfig+0x1bc>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 0302 	and.w	r3, r3, #2
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d101      	bne.n	80038da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e067      	b.n	80039aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038da:	4b37      	ldr	r3, [pc, #220]	; (80039b8 <HAL_RCC_ClockConfig+0x1bc>)
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	f023 0203 	bic.w	r2, r3, #3
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	4934      	ldr	r1, [pc, #208]	; (80039b8 <HAL_RCC_ClockConfig+0x1bc>)
 80038e8:	4313      	orrs	r3, r2
 80038ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038ec:	f7fd faa0 	bl	8000e30 <HAL_GetTick>
 80038f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038f2:	e00a      	b.n	800390a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038f4:	f7fd fa9c 	bl	8000e30 <HAL_GetTick>
 80038f8:	4602      	mov	r2, r0
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003902:	4293      	cmp	r3, r2
 8003904:	d901      	bls.n	800390a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003906:	2303      	movs	r3, #3
 8003908:	e04f      	b.n	80039aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800390a:	4b2b      	ldr	r3, [pc, #172]	; (80039b8 <HAL_RCC_ClockConfig+0x1bc>)
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	f003 020c 	and.w	r2, r3, #12
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	009b      	lsls	r3, r3, #2
 8003918:	429a      	cmp	r2, r3
 800391a:	d1eb      	bne.n	80038f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800391c:	4b25      	ldr	r3, [pc, #148]	; (80039b4 <HAL_RCC_ClockConfig+0x1b8>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 030f 	and.w	r3, r3, #15
 8003924:	683a      	ldr	r2, [r7, #0]
 8003926:	429a      	cmp	r2, r3
 8003928:	d20c      	bcs.n	8003944 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800392a:	4b22      	ldr	r3, [pc, #136]	; (80039b4 <HAL_RCC_ClockConfig+0x1b8>)
 800392c:	683a      	ldr	r2, [r7, #0]
 800392e:	b2d2      	uxtb	r2, r2
 8003930:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003932:	4b20      	ldr	r3, [pc, #128]	; (80039b4 <HAL_RCC_ClockConfig+0x1b8>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 030f 	and.w	r3, r3, #15
 800393a:	683a      	ldr	r2, [r7, #0]
 800393c:	429a      	cmp	r2, r3
 800393e:	d001      	beq.n	8003944 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	e032      	b.n	80039aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f003 0304 	and.w	r3, r3, #4
 800394c:	2b00      	cmp	r3, #0
 800394e:	d008      	beq.n	8003962 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003950:	4b19      	ldr	r3, [pc, #100]	; (80039b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	68db      	ldr	r3, [r3, #12]
 800395c:	4916      	ldr	r1, [pc, #88]	; (80039b8 <HAL_RCC_ClockConfig+0x1bc>)
 800395e:	4313      	orrs	r3, r2
 8003960:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 0308 	and.w	r3, r3, #8
 800396a:	2b00      	cmp	r3, #0
 800396c:	d009      	beq.n	8003982 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800396e:	4b12      	ldr	r3, [pc, #72]	; (80039b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	691b      	ldr	r3, [r3, #16]
 800397a:	00db      	lsls	r3, r3, #3
 800397c:	490e      	ldr	r1, [pc, #56]	; (80039b8 <HAL_RCC_ClockConfig+0x1bc>)
 800397e:	4313      	orrs	r3, r2
 8003980:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003982:	f000 f821 	bl	80039c8 <HAL_RCC_GetSysClockFreq>
 8003986:	4602      	mov	r2, r0
 8003988:	4b0b      	ldr	r3, [pc, #44]	; (80039b8 <HAL_RCC_ClockConfig+0x1bc>)
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	091b      	lsrs	r3, r3, #4
 800398e:	f003 030f 	and.w	r3, r3, #15
 8003992:	490a      	ldr	r1, [pc, #40]	; (80039bc <HAL_RCC_ClockConfig+0x1c0>)
 8003994:	5ccb      	ldrb	r3, [r1, r3]
 8003996:	fa22 f303 	lsr.w	r3, r2, r3
 800399a:	4a09      	ldr	r2, [pc, #36]	; (80039c0 <HAL_RCC_ClockConfig+0x1c4>)
 800399c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800399e:	4b09      	ldr	r3, [pc, #36]	; (80039c4 <HAL_RCC_ClockConfig+0x1c8>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4618      	mov	r0, r3
 80039a4:	f7fd fa00 	bl	8000da8 <HAL_InitTick>

  return HAL_OK;
 80039a8:	2300      	movs	r3, #0
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3710      	adds	r7, #16
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	bf00      	nop
 80039b4:	40023c00 	.word	0x40023c00
 80039b8:	40023800 	.word	0x40023800
 80039bc:	08004ad4 	.word	0x08004ad4
 80039c0:	20000000 	.word	0x20000000
 80039c4:	20000004 	.word	0x20000004

080039c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039cc:	b094      	sub	sp, #80	; 0x50
 80039ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80039d0:	2300      	movs	r3, #0
 80039d2:	647b      	str	r3, [r7, #68]	; 0x44
 80039d4:	2300      	movs	r3, #0
 80039d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039d8:	2300      	movs	r3, #0
 80039da:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80039dc:	2300      	movs	r3, #0
 80039de:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80039e0:	4b79      	ldr	r3, [pc, #484]	; (8003bc8 <HAL_RCC_GetSysClockFreq+0x200>)
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	f003 030c 	and.w	r3, r3, #12
 80039e8:	2b08      	cmp	r3, #8
 80039ea:	d00d      	beq.n	8003a08 <HAL_RCC_GetSysClockFreq+0x40>
 80039ec:	2b08      	cmp	r3, #8
 80039ee:	f200 80e1 	bhi.w	8003bb4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d002      	beq.n	80039fc <HAL_RCC_GetSysClockFreq+0x34>
 80039f6:	2b04      	cmp	r3, #4
 80039f8:	d003      	beq.n	8003a02 <HAL_RCC_GetSysClockFreq+0x3a>
 80039fa:	e0db      	b.n	8003bb4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80039fc:	4b73      	ldr	r3, [pc, #460]	; (8003bcc <HAL_RCC_GetSysClockFreq+0x204>)
 80039fe:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003a00:	e0db      	b.n	8003bba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a02:	4b73      	ldr	r3, [pc, #460]	; (8003bd0 <HAL_RCC_GetSysClockFreq+0x208>)
 8003a04:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003a06:	e0d8      	b.n	8003bba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a08:	4b6f      	ldr	r3, [pc, #444]	; (8003bc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a10:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a12:	4b6d      	ldr	r3, [pc, #436]	; (8003bc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d063      	beq.n	8003ae6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a1e:	4b6a      	ldr	r3, [pc, #424]	; (8003bc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	099b      	lsrs	r3, r3, #6
 8003a24:	2200      	movs	r2, #0
 8003a26:	63bb      	str	r3, [r7, #56]	; 0x38
 8003a28:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003a2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a30:	633b      	str	r3, [r7, #48]	; 0x30
 8003a32:	2300      	movs	r3, #0
 8003a34:	637b      	str	r3, [r7, #52]	; 0x34
 8003a36:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003a3a:	4622      	mov	r2, r4
 8003a3c:	462b      	mov	r3, r5
 8003a3e:	f04f 0000 	mov.w	r0, #0
 8003a42:	f04f 0100 	mov.w	r1, #0
 8003a46:	0159      	lsls	r1, r3, #5
 8003a48:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a4c:	0150      	lsls	r0, r2, #5
 8003a4e:	4602      	mov	r2, r0
 8003a50:	460b      	mov	r3, r1
 8003a52:	4621      	mov	r1, r4
 8003a54:	1a51      	subs	r1, r2, r1
 8003a56:	6139      	str	r1, [r7, #16]
 8003a58:	4629      	mov	r1, r5
 8003a5a:	eb63 0301 	sbc.w	r3, r3, r1
 8003a5e:	617b      	str	r3, [r7, #20]
 8003a60:	f04f 0200 	mov.w	r2, #0
 8003a64:	f04f 0300 	mov.w	r3, #0
 8003a68:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003a6c:	4659      	mov	r1, fp
 8003a6e:	018b      	lsls	r3, r1, #6
 8003a70:	4651      	mov	r1, sl
 8003a72:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a76:	4651      	mov	r1, sl
 8003a78:	018a      	lsls	r2, r1, #6
 8003a7a:	4651      	mov	r1, sl
 8003a7c:	ebb2 0801 	subs.w	r8, r2, r1
 8003a80:	4659      	mov	r1, fp
 8003a82:	eb63 0901 	sbc.w	r9, r3, r1
 8003a86:	f04f 0200 	mov.w	r2, #0
 8003a8a:	f04f 0300 	mov.w	r3, #0
 8003a8e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a92:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a96:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a9a:	4690      	mov	r8, r2
 8003a9c:	4699      	mov	r9, r3
 8003a9e:	4623      	mov	r3, r4
 8003aa0:	eb18 0303 	adds.w	r3, r8, r3
 8003aa4:	60bb      	str	r3, [r7, #8]
 8003aa6:	462b      	mov	r3, r5
 8003aa8:	eb49 0303 	adc.w	r3, r9, r3
 8003aac:	60fb      	str	r3, [r7, #12]
 8003aae:	f04f 0200 	mov.w	r2, #0
 8003ab2:	f04f 0300 	mov.w	r3, #0
 8003ab6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003aba:	4629      	mov	r1, r5
 8003abc:	024b      	lsls	r3, r1, #9
 8003abe:	4621      	mov	r1, r4
 8003ac0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003ac4:	4621      	mov	r1, r4
 8003ac6:	024a      	lsls	r2, r1, #9
 8003ac8:	4610      	mov	r0, r2
 8003aca:	4619      	mov	r1, r3
 8003acc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ace:	2200      	movs	r2, #0
 8003ad0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ad2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ad4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003ad8:	f7fc fb88 	bl	80001ec <__aeabi_uldivmod>
 8003adc:	4602      	mov	r2, r0
 8003ade:	460b      	mov	r3, r1
 8003ae0:	4613      	mov	r3, r2
 8003ae2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ae4:	e058      	b.n	8003b98 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ae6:	4b38      	ldr	r3, [pc, #224]	; (8003bc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	099b      	lsrs	r3, r3, #6
 8003aec:	2200      	movs	r2, #0
 8003aee:	4618      	mov	r0, r3
 8003af0:	4611      	mov	r1, r2
 8003af2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003af6:	623b      	str	r3, [r7, #32]
 8003af8:	2300      	movs	r3, #0
 8003afa:	627b      	str	r3, [r7, #36]	; 0x24
 8003afc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003b00:	4642      	mov	r2, r8
 8003b02:	464b      	mov	r3, r9
 8003b04:	f04f 0000 	mov.w	r0, #0
 8003b08:	f04f 0100 	mov.w	r1, #0
 8003b0c:	0159      	lsls	r1, r3, #5
 8003b0e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b12:	0150      	lsls	r0, r2, #5
 8003b14:	4602      	mov	r2, r0
 8003b16:	460b      	mov	r3, r1
 8003b18:	4641      	mov	r1, r8
 8003b1a:	ebb2 0a01 	subs.w	sl, r2, r1
 8003b1e:	4649      	mov	r1, r9
 8003b20:	eb63 0b01 	sbc.w	fp, r3, r1
 8003b24:	f04f 0200 	mov.w	r2, #0
 8003b28:	f04f 0300 	mov.w	r3, #0
 8003b2c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003b30:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003b34:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003b38:	ebb2 040a 	subs.w	r4, r2, sl
 8003b3c:	eb63 050b 	sbc.w	r5, r3, fp
 8003b40:	f04f 0200 	mov.w	r2, #0
 8003b44:	f04f 0300 	mov.w	r3, #0
 8003b48:	00eb      	lsls	r3, r5, #3
 8003b4a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b4e:	00e2      	lsls	r2, r4, #3
 8003b50:	4614      	mov	r4, r2
 8003b52:	461d      	mov	r5, r3
 8003b54:	4643      	mov	r3, r8
 8003b56:	18e3      	adds	r3, r4, r3
 8003b58:	603b      	str	r3, [r7, #0]
 8003b5a:	464b      	mov	r3, r9
 8003b5c:	eb45 0303 	adc.w	r3, r5, r3
 8003b60:	607b      	str	r3, [r7, #4]
 8003b62:	f04f 0200 	mov.w	r2, #0
 8003b66:	f04f 0300 	mov.w	r3, #0
 8003b6a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003b6e:	4629      	mov	r1, r5
 8003b70:	028b      	lsls	r3, r1, #10
 8003b72:	4621      	mov	r1, r4
 8003b74:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b78:	4621      	mov	r1, r4
 8003b7a:	028a      	lsls	r2, r1, #10
 8003b7c:	4610      	mov	r0, r2
 8003b7e:	4619      	mov	r1, r3
 8003b80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b82:	2200      	movs	r2, #0
 8003b84:	61bb      	str	r3, [r7, #24]
 8003b86:	61fa      	str	r2, [r7, #28]
 8003b88:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b8c:	f7fc fb2e 	bl	80001ec <__aeabi_uldivmod>
 8003b90:	4602      	mov	r2, r0
 8003b92:	460b      	mov	r3, r1
 8003b94:	4613      	mov	r3, r2
 8003b96:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003b98:	4b0b      	ldr	r3, [pc, #44]	; (8003bc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	0c1b      	lsrs	r3, r3, #16
 8003b9e:	f003 0303 	and.w	r3, r3, #3
 8003ba2:	3301      	adds	r3, #1
 8003ba4:	005b      	lsls	r3, r3, #1
 8003ba6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003ba8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003baa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bac:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bb0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003bb2:	e002      	b.n	8003bba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003bb4:	4b05      	ldr	r3, [pc, #20]	; (8003bcc <HAL_RCC_GetSysClockFreq+0x204>)
 8003bb6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003bb8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003bba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	3750      	adds	r7, #80	; 0x50
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003bc6:	bf00      	nop
 8003bc8:	40023800 	.word	0x40023800
 8003bcc:	00f42400 	.word	0x00f42400
 8003bd0:	007a1200 	.word	0x007a1200

08003bd4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bd8:	4b03      	ldr	r3, [pc, #12]	; (8003be8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003bda:	681b      	ldr	r3, [r3, #0]
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	46bd      	mov	sp, r7
 8003be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be4:	4770      	bx	lr
 8003be6:	bf00      	nop
 8003be8:	20000000 	.word	0x20000000

08003bec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003bf0:	f7ff fff0 	bl	8003bd4 <HAL_RCC_GetHCLKFreq>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	4b05      	ldr	r3, [pc, #20]	; (8003c0c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	0a9b      	lsrs	r3, r3, #10
 8003bfc:	f003 0307 	and.w	r3, r3, #7
 8003c00:	4903      	ldr	r1, [pc, #12]	; (8003c10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c02:	5ccb      	ldrb	r3, [r1, r3]
 8003c04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	bd80      	pop	{r7, pc}
 8003c0c:	40023800 	.word	0x40023800
 8003c10:	08004ae4 	.word	0x08004ae4

08003c14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003c18:	f7ff ffdc 	bl	8003bd4 <HAL_RCC_GetHCLKFreq>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	4b05      	ldr	r3, [pc, #20]	; (8003c34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	0b5b      	lsrs	r3, r3, #13
 8003c24:	f003 0307 	and.w	r3, r3, #7
 8003c28:	4903      	ldr	r1, [pc, #12]	; (8003c38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c2a:	5ccb      	ldrb	r3, [r1, r3]
 8003c2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	bd80      	pop	{r7, pc}
 8003c34:	40023800 	.word	0x40023800
 8003c38:	08004ae4 	.word	0x08004ae4

08003c3c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b082      	sub	sp, #8
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d101      	bne.n	8003c4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e03f      	b.n	8003cce <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d106      	bne.n	8003c68 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f7fd f804 	bl	8000c70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2224      	movs	r2, #36	; 0x24
 8003c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	68da      	ldr	r2, [r3, #12]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c7e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c80:	6878      	ldr	r0, [r7, #4]
 8003c82:	f000 fc7b 	bl	800457c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	691a      	ldr	r2, [r3, #16]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c94:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	695a      	ldr	r2, [r3, #20]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ca4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	68da      	ldr	r2, [r3, #12]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003cb4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2220      	movs	r2, #32
 8003cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2220      	movs	r2, #32
 8003cc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003ccc:	2300      	movs	r3, #0
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	3708      	adds	r7, #8
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}
	...

08003cd8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b0ba      	sub	sp, #232	; 0xe8
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	68db      	ldr	r3, [r3, #12]
 8003cf0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	695b      	ldr	r3, [r3, #20]
 8003cfa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003d04:	2300      	movs	r3, #0
 8003d06:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003d0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d0e:	f003 030f 	and.w	r3, r3, #15
 8003d12:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003d16:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d10f      	bne.n	8003d3e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003d1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d22:	f003 0320 	and.w	r3, r3, #32
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d009      	beq.n	8003d3e <HAL_UART_IRQHandler+0x66>
 8003d2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d2e:	f003 0320 	and.w	r3, r3, #32
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d003      	beq.n	8003d3e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f000 fb65 	bl	8004406 <UART_Receive_IT>
      return;
 8003d3c:	e256      	b.n	80041ec <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003d3e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	f000 80de 	beq.w	8003f04 <HAL_UART_IRQHandler+0x22c>
 8003d48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d4c:	f003 0301 	and.w	r3, r3, #1
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d106      	bne.n	8003d62 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003d54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d58:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	f000 80d1 	beq.w	8003f04 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003d62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d66:	f003 0301 	and.w	r3, r3, #1
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d00b      	beq.n	8003d86 <HAL_UART_IRQHandler+0xae>
 8003d6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d005      	beq.n	8003d86 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7e:	f043 0201 	orr.w	r2, r3, #1
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003d86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d8a:	f003 0304 	and.w	r3, r3, #4
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d00b      	beq.n	8003daa <HAL_UART_IRQHandler+0xd2>
 8003d92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d96:	f003 0301 	and.w	r3, r3, #1
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d005      	beq.n	8003daa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da2:	f043 0202 	orr.w	r2, r3, #2
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003daa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dae:	f003 0302 	and.w	r3, r3, #2
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d00b      	beq.n	8003dce <HAL_UART_IRQHandler+0xf6>
 8003db6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003dba:	f003 0301 	and.w	r3, r3, #1
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d005      	beq.n	8003dce <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc6:	f043 0204 	orr.w	r2, r3, #4
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003dce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dd2:	f003 0308 	and.w	r3, r3, #8
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d011      	beq.n	8003dfe <HAL_UART_IRQHandler+0x126>
 8003dda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003dde:	f003 0320 	and.w	r3, r3, #32
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d105      	bne.n	8003df2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003de6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003dea:	f003 0301 	and.w	r3, r3, #1
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d005      	beq.n	8003dfe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df6:	f043 0208 	orr.w	r2, r3, #8
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	f000 81ed 	beq.w	80041e2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e0c:	f003 0320 	and.w	r3, r3, #32
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d008      	beq.n	8003e26 <HAL_UART_IRQHandler+0x14e>
 8003e14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e18:	f003 0320 	and.w	r3, r3, #32
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d002      	beq.n	8003e26 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003e20:	6878      	ldr	r0, [r7, #4]
 8003e22:	f000 faf0 	bl	8004406 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	695b      	ldr	r3, [r3, #20]
 8003e2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e30:	2b40      	cmp	r3, #64	; 0x40
 8003e32:	bf0c      	ite	eq
 8003e34:	2301      	moveq	r3, #1
 8003e36:	2300      	movne	r3, #0
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e42:	f003 0308 	and.w	r3, r3, #8
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d103      	bne.n	8003e52 <HAL_UART_IRQHandler+0x17a>
 8003e4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d04f      	beq.n	8003ef2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f000 f9f8 	bl	8004248 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	695b      	ldr	r3, [r3, #20]
 8003e5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e62:	2b40      	cmp	r3, #64	; 0x40
 8003e64:	d141      	bne.n	8003eea <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	3314      	adds	r3, #20
 8003e6c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e70:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003e74:	e853 3f00 	ldrex	r3, [r3]
 8003e78:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003e7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003e80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e84:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	3314      	adds	r3, #20
 8003e8e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003e92:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003e96:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e9a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003e9e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003ea2:	e841 2300 	strex	r3, r2, [r1]
 8003ea6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003eaa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d1d9      	bne.n	8003e66 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d013      	beq.n	8003ee2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ebe:	4a7d      	ldr	r2, [pc, #500]	; (80040b4 <HAL_UART_IRQHandler+0x3dc>)
 8003ec0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f7fd f93f 	bl	800114a <HAL_DMA_Abort_IT>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d016      	beq.n	8003f00 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ed6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ed8:	687a      	ldr	r2, [r7, #4]
 8003eda:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003edc:	4610      	mov	r0, r2
 8003ede:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ee0:	e00e      	b.n	8003f00 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f000 f99a 	bl	800421c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ee8:	e00a      	b.n	8003f00 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f000 f996 	bl	800421c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ef0:	e006      	b.n	8003f00 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f000 f992 	bl	800421c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2200      	movs	r2, #0
 8003efc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003efe:	e170      	b.n	80041e2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f00:	bf00      	nop
    return;
 8003f02:	e16e      	b.n	80041e2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	f040 814a 	bne.w	80041a2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003f0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f12:	f003 0310 	and.w	r3, r3, #16
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	f000 8143 	beq.w	80041a2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003f1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f20:	f003 0310 	and.w	r3, r3, #16
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	f000 813c 	beq.w	80041a2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	60bb      	str	r3, [r7, #8]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	60bb      	str	r3, [r7, #8]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	60bb      	str	r3, [r7, #8]
 8003f3e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	695b      	ldr	r3, [r3, #20]
 8003f46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f4a:	2b40      	cmp	r3, #64	; 0x40
 8003f4c:	f040 80b4 	bne.w	80040b8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003f5c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	f000 8140 	beq.w	80041e6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003f6a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003f6e:	429a      	cmp	r2, r3
 8003f70:	f080 8139 	bcs.w	80041e6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003f7a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f80:	69db      	ldr	r3, [r3, #28]
 8003f82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f86:	f000 8088 	beq.w	800409a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	330c      	adds	r3, #12
 8003f90:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f94:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003f98:	e853 3f00 	ldrex	r3, [r3]
 8003f9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003fa0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003fa4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003fa8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	330c      	adds	r3, #12
 8003fb2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003fb6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003fba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fbe:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003fc2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003fc6:	e841 2300 	strex	r3, r2, [r1]
 8003fca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003fce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d1d9      	bne.n	8003f8a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	3314      	adds	r3, #20
 8003fdc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fde:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fe0:	e853 3f00 	ldrex	r3, [r3]
 8003fe4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003fe6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003fe8:	f023 0301 	bic.w	r3, r3, #1
 8003fec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	3314      	adds	r3, #20
 8003ff6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003ffa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003ffe:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004000:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004002:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004006:	e841 2300 	strex	r3, r2, [r1]
 800400a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800400c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800400e:	2b00      	cmp	r3, #0
 8004010:	d1e1      	bne.n	8003fd6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	3314      	adds	r3, #20
 8004018:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800401a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800401c:	e853 3f00 	ldrex	r3, [r3]
 8004020:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004022:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004024:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004028:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	3314      	adds	r3, #20
 8004032:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004036:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004038:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800403a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800403c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800403e:	e841 2300 	strex	r3, r2, [r1]
 8004042:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004044:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004046:	2b00      	cmp	r3, #0
 8004048:	d1e3      	bne.n	8004012 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2220      	movs	r2, #32
 800404e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2200      	movs	r2, #0
 8004056:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	330c      	adds	r3, #12
 800405e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004060:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004062:	e853 3f00 	ldrex	r3, [r3]
 8004066:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004068:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800406a:	f023 0310 	bic.w	r3, r3, #16
 800406e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	330c      	adds	r3, #12
 8004078:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800407c:	65ba      	str	r2, [r7, #88]	; 0x58
 800407e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004080:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004082:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004084:	e841 2300 	strex	r3, r2, [r1]
 8004088:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800408a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800408c:	2b00      	cmp	r3, #0
 800408e:	d1e3      	bne.n	8004058 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004094:	4618      	mov	r0, r3
 8004096:	f7fc ffe8 	bl	800106a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80040a2:	b29b      	uxth	r3, r3
 80040a4:	1ad3      	subs	r3, r2, r3
 80040a6:	b29b      	uxth	r3, r3
 80040a8:	4619      	mov	r1, r3
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f000 f8c0 	bl	8004230 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80040b0:	e099      	b.n	80041e6 <HAL_UART_IRQHandler+0x50e>
 80040b2:	bf00      	nop
 80040b4:	0800430f 	.word	0x0800430f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80040c0:	b29b      	uxth	r3, r3
 80040c2:	1ad3      	subs	r3, r2, r3
 80040c4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80040cc:	b29b      	uxth	r3, r3
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	f000 808b 	beq.w	80041ea <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80040d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80040d8:	2b00      	cmp	r3, #0
 80040da:	f000 8086 	beq.w	80041ea <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	330c      	adds	r3, #12
 80040e4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040e8:	e853 3f00 	ldrex	r3, [r3]
 80040ec:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80040ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040f0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80040f4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	330c      	adds	r3, #12
 80040fe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004102:	647a      	str	r2, [r7, #68]	; 0x44
 8004104:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004106:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004108:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800410a:	e841 2300 	strex	r3, r2, [r1]
 800410e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004110:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004112:	2b00      	cmp	r3, #0
 8004114:	d1e3      	bne.n	80040de <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	3314      	adds	r3, #20
 800411c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800411e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004120:	e853 3f00 	ldrex	r3, [r3]
 8004124:	623b      	str	r3, [r7, #32]
   return(result);
 8004126:	6a3b      	ldr	r3, [r7, #32]
 8004128:	f023 0301 	bic.w	r3, r3, #1
 800412c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	3314      	adds	r3, #20
 8004136:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800413a:	633a      	str	r2, [r7, #48]	; 0x30
 800413c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800413e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004140:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004142:	e841 2300 	strex	r3, r2, [r1]
 8004146:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800414a:	2b00      	cmp	r3, #0
 800414c:	d1e3      	bne.n	8004116 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2220      	movs	r2, #32
 8004152:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2200      	movs	r2, #0
 800415a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	330c      	adds	r3, #12
 8004162:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	e853 3f00 	ldrex	r3, [r3]
 800416a:	60fb      	str	r3, [r7, #12]
   return(result);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	f023 0310 	bic.w	r3, r3, #16
 8004172:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	330c      	adds	r3, #12
 800417c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004180:	61fa      	str	r2, [r7, #28]
 8004182:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004184:	69b9      	ldr	r1, [r7, #24]
 8004186:	69fa      	ldr	r2, [r7, #28]
 8004188:	e841 2300 	strex	r3, r2, [r1]
 800418c:	617b      	str	r3, [r7, #20]
   return(result);
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d1e3      	bne.n	800415c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004194:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004198:	4619      	mov	r1, r3
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f000 f848 	bl	8004230 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80041a0:	e023      	b.n	80041ea <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80041a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d009      	beq.n	80041c2 <HAL_UART_IRQHandler+0x4ea>
 80041ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d003      	beq.n	80041c2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f000 f8bb 	bl	8004336 <UART_Transmit_IT>
    return;
 80041c0:	e014      	b.n	80041ec <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80041c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d00e      	beq.n	80041ec <HAL_UART_IRQHandler+0x514>
 80041ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d008      	beq.n	80041ec <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f000 f8fb 	bl	80043d6 <UART_EndTransmit_IT>
    return;
 80041e0:	e004      	b.n	80041ec <HAL_UART_IRQHandler+0x514>
    return;
 80041e2:	bf00      	nop
 80041e4:	e002      	b.n	80041ec <HAL_UART_IRQHandler+0x514>
      return;
 80041e6:	bf00      	nop
 80041e8:	e000      	b.n	80041ec <HAL_UART_IRQHandler+0x514>
      return;
 80041ea:	bf00      	nop
  }
}
 80041ec:	37e8      	adds	r7, #232	; 0xe8
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}
 80041f2:	bf00      	nop

080041f4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b083      	sub	sp, #12
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80041fc:	bf00      	nop
 80041fe:	370c      	adds	r7, #12
 8004200:	46bd      	mov	sp, r7
 8004202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004206:	4770      	bx	lr

08004208 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004208:	b480      	push	{r7}
 800420a:	b083      	sub	sp, #12
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004210:	bf00      	nop
 8004212:	370c      	adds	r7, #12
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr

0800421c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800421c:	b480      	push	{r7}
 800421e:	b083      	sub	sp, #12
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004224:	bf00      	nop
 8004226:	370c      	adds	r7, #12
 8004228:	46bd      	mov	sp, r7
 800422a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422e:	4770      	bx	lr

08004230 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004230:	b480      	push	{r7}
 8004232:	b083      	sub	sp, #12
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
 8004238:	460b      	mov	r3, r1
 800423a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800423c:	bf00      	nop
 800423e:	370c      	adds	r7, #12
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr

08004248 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004248:	b480      	push	{r7}
 800424a:	b095      	sub	sp, #84	; 0x54
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	330c      	adds	r3, #12
 8004256:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004258:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800425a:	e853 3f00 	ldrex	r3, [r3]
 800425e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004262:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004266:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	330c      	adds	r3, #12
 800426e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004270:	643a      	str	r2, [r7, #64]	; 0x40
 8004272:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004274:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004276:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004278:	e841 2300 	strex	r3, r2, [r1]
 800427c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800427e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004280:	2b00      	cmp	r3, #0
 8004282:	d1e5      	bne.n	8004250 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	3314      	adds	r3, #20
 800428a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800428c:	6a3b      	ldr	r3, [r7, #32]
 800428e:	e853 3f00 	ldrex	r3, [r3]
 8004292:	61fb      	str	r3, [r7, #28]
   return(result);
 8004294:	69fb      	ldr	r3, [r7, #28]
 8004296:	f023 0301 	bic.w	r3, r3, #1
 800429a:	64bb      	str	r3, [r7, #72]	; 0x48
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	3314      	adds	r3, #20
 80042a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80042a4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80042a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80042aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042ac:	e841 2300 	strex	r3, r2, [r1]
 80042b0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80042b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d1e5      	bne.n	8004284 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d119      	bne.n	80042f4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	330c      	adds	r3, #12
 80042c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	e853 3f00 	ldrex	r3, [r3]
 80042ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	f023 0310 	bic.w	r3, r3, #16
 80042d6:	647b      	str	r3, [r7, #68]	; 0x44
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	330c      	adds	r3, #12
 80042de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80042e0:	61ba      	str	r2, [r7, #24]
 80042e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042e4:	6979      	ldr	r1, [r7, #20]
 80042e6:	69ba      	ldr	r2, [r7, #24]
 80042e8:	e841 2300 	strex	r3, r2, [r1]
 80042ec:	613b      	str	r3, [r7, #16]
   return(result);
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d1e5      	bne.n	80042c0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2220      	movs	r2, #32
 80042f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2200      	movs	r2, #0
 8004300:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004302:	bf00      	nop
 8004304:	3754      	adds	r7, #84	; 0x54
 8004306:	46bd      	mov	sp, r7
 8004308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430c:	4770      	bx	lr

0800430e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800430e:	b580      	push	{r7, lr}
 8004310:	b084      	sub	sp, #16
 8004312:	af00      	add	r7, sp, #0
 8004314:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800431a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2200      	movs	r2, #0
 8004320:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2200      	movs	r2, #0
 8004326:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004328:	68f8      	ldr	r0, [r7, #12]
 800432a:	f7ff ff77 	bl	800421c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800432e:	bf00      	nop
 8004330:	3710      	adds	r7, #16
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}

08004336 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004336:	b480      	push	{r7}
 8004338:	b085      	sub	sp, #20
 800433a:	af00      	add	r7, sp, #0
 800433c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004344:	b2db      	uxtb	r3, r3
 8004346:	2b21      	cmp	r3, #33	; 0x21
 8004348:	d13e      	bne.n	80043c8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004352:	d114      	bne.n	800437e <UART_Transmit_IT+0x48>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	691b      	ldr	r3, [r3, #16]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d110      	bne.n	800437e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6a1b      	ldr	r3, [r3, #32]
 8004360:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	881b      	ldrh	r3, [r3, #0]
 8004366:	461a      	mov	r2, r3
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004370:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6a1b      	ldr	r3, [r3, #32]
 8004376:	1c9a      	adds	r2, r3, #2
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	621a      	str	r2, [r3, #32]
 800437c:	e008      	b.n	8004390 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6a1b      	ldr	r3, [r3, #32]
 8004382:	1c59      	adds	r1, r3, #1
 8004384:	687a      	ldr	r2, [r7, #4]
 8004386:	6211      	str	r1, [r2, #32]
 8004388:	781a      	ldrb	r2, [r3, #0]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004394:	b29b      	uxth	r3, r3
 8004396:	3b01      	subs	r3, #1
 8004398:	b29b      	uxth	r3, r3
 800439a:	687a      	ldr	r2, [r7, #4]
 800439c:	4619      	mov	r1, r3
 800439e:	84d1      	strh	r1, [r2, #38]	; 0x26
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d10f      	bne.n	80043c4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	68da      	ldr	r2, [r3, #12]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80043b2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	68da      	ldr	r2, [r3, #12]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80043c2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80043c4:	2300      	movs	r3, #0
 80043c6:	e000      	b.n	80043ca <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80043c8:	2302      	movs	r3, #2
  }
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	3714      	adds	r7, #20
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr

080043d6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80043d6:	b580      	push	{r7, lr}
 80043d8:	b082      	sub	sp, #8
 80043da:	af00      	add	r7, sp, #0
 80043dc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	68da      	ldr	r2, [r3, #12]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043ec:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2220      	movs	r2, #32
 80043f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f7ff fefc 	bl	80041f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80043fc:	2300      	movs	r3, #0
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3708      	adds	r7, #8
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}

08004406 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004406:	b580      	push	{r7, lr}
 8004408:	b08c      	sub	sp, #48	; 0x30
 800440a:	af00      	add	r7, sp, #0
 800440c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004414:	b2db      	uxtb	r3, r3
 8004416:	2b22      	cmp	r3, #34	; 0x22
 8004418:	f040 80ab 	bne.w	8004572 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004424:	d117      	bne.n	8004456 <UART_Receive_IT+0x50>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	691b      	ldr	r3, [r3, #16]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d113      	bne.n	8004456 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800442e:	2300      	movs	r3, #0
 8004430:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004436:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	b29b      	uxth	r3, r3
 8004440:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004444:	b29a      	uxth	r2, r3
 8004446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004448:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800444e:	1c9a      	adds	r2, r3, #2
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	629a      	str	r2, [r3, #40]	; 0x28
 8004454:	e026      	b.n	80044a4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800445a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800445c:	2300      	movs	r3, #0
 800445e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004468:	d007      	beq.n	800447a <UART_Receive_IT+0x74>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d10a      	bne.n	8004488 <UART_Receive_IT+0x82>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	691b      	ldr	r3, [r3, #16]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d106      	bne.n	8004488 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	b2da      	uxtb	r2, r3
 8004482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004484:	701a      	strb	r2, [r3, #0]
 8004486:	e008      	b.n	800449a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	b2db      	uxtb	r3, r3
 8004490:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004494:	b2da      	uxtb	r2, r3
 8004496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004498:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800449e:	1c5a      	adds	r2, r3, #1
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80044a8:	b29b      	uxth	r3, r3
 80044aa:	3b01      	subs	r3, #1
 80044ac:	b29b      	uxth	r3, r3
 80044ae:	687a      	ldr	r2, [r7, #4]
 80044b0:	4619      	mov	r1, r3
 80044b2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d15a      	bne.n	800456e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	68da      	ldr	r2, [r3, #12]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f022 0220 	bic.w	r2, r2, #32
 80044c6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	68da      	ldr	r2, [r3, #12]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80044d6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	695a      	ldr	r2, [r3, #20]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f022 0201 	bic.w	r2, r2, #1
 80044e6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2220      	movs	r2, #32
 80044ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	d135      	bne.n	8004564 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2200      	movs	r2, #0
 80044fc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	330c      	adds	r3, #12
 8004504:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	e853 3f00 	ldrex	r3, [r3]
 800450c:	613b      	str	r3, [r7, #16]
   return(result);
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	f023 0310 	bic.w	r3, r3, #16
 8004514:	627b      	str	r3, [r7, #36]	; 0x24
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	330c      	adds	r3, #12
 800451c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800451e:	623a      	str	r2, [r7, #32]
 8004520:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004522:	69f9      	ldr	r1, [r7, #28]
 8004524:	6a3a      	ldr	r2, [r7, #32]
 8004526:	e841 2300 	strex	r3, r2, [r1]
 800452a:	61bb      	str	r3, [r7, #24]
   return(result);
 800452c:	69bb      	ldr	r3, [r7, #24]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d1e5      	bne.n	80044fe <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f003 0310 	and.w	r3, r3, #16
 800453c:	2b10      	cmp	r3, #16
 800453e:	d10a      	bne.n	8004556 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004540:	2300      	movs	r3, #0
 8004542:	60fb      	str	r3, [r7, #12]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	60fb      	str	r3, [r7, #12]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	60fb      	str	r3, [r7, #12]
 8004554:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800455a:	4619      	mov	r1, r3
 800455c:	6878      	ldr	r0, [r7, #4]
 800455e:	f7ff fe67 	bl	8004230 <HAL_UARTEx_RxEventCallback>
 8004562:	e002      	b.n	800456a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004564:	6878      	ldr	r0, [r7, #4]
 8004566:	f7ff fe4f 	bl	8004208 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800456a:	2300      	movs	r3, #0
 800456c:	e002      	b.n	8004574 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800456e:	2300      	movs	r3, #0
 8004570:	e000      	b.n	8004574 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004572:	2302      	movs	r3, #2
  }
}
 8004574:	4618      	mov	r0, r3
 8004576:	3730      	adds	r7, #48	; 0x30
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}

0800457c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800457c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004580:	b0c0      	sub	sp, #256	; 0x100
 8004582:	af00      	add	r7, sp, #0
 8004584:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004588:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	691b      	ldr	r3, [r3, #16]
 8004590:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004594:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004598:	68d9      	ldr	r1, [r3, #12]
 800459a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	ea40 0301 	orr.w	r3, r0, r1
 80045a4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80045a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045aa:	689a      	ldr	r2, [r3, #8]
 80045ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045b0:	691b      	ldr	r3, [r3, #16]
 80045b2:	431a      	orrs	r2, r3
 80045b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045b8:	695b      	ldr	r3, [r3, #20]
 80045ba:	431a      	orrs	r2, r3
 80045bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045c0:	69db      	ldr	r3, [r3, #28]
 80045c2:	4313      	orrs	r3, r2
 80045c4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80045c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	68db      	ldr	r3, [r3, #12]
 80045d0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80045d4:	f021 010c 	bic.w	r1, r1, #12
 80045d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045dc:	681a      	ldr	r2, [r3, #0]
 80045de:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80045e2:	430b      	orrs	r3, r1
 80045e4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80045e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	695b      	ldr	r3, [r3, #20]
 80045ee:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80045f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045f6:	6999      	ldr	r1, [r3, #24]
 80045f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	ea40 0301 	orr.w	r3, r0, r1
 8004602:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004604:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	4b8f      	ldr	r3, [pc, #572]	; (8004848 <UART_SetConfig+0x2cc>)
 800460c:	429a      	cmp	r2, r3
 800460e:	d005      	beq.n	800461c <UART_SetConfig+0xa0>
 8004610:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004614:	681a      	ldr	r2, [r3, #0]
 8004616:	4b8d      	ldr	r3, [pc, #564]	; (800484c <UART_SetConfig+0x2d0>)
 8004618:	429a      	cmp	r2, r3
 800461a:	d104      	bne.n	8004626 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800461c:	f7ff fafa 	bl	8003c14 <HAL_RCC_GetPCLK2Freq>
 8004620:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004624:	e003      	b.n	800462e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004626:	f7ff fae1 	bl	8003bec <HAL_RCC_GetPCLK1Freq>
 800462a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800462e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004632:	69db      	ldr	r3, [r3, #28]
 8004634:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004638:	f040 810c 	bne.w	8004854 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800463c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004640:	2200      	movs	r2, #0
 8004642:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004646:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800464a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800464e:	4622      	mov	r2, r4
 8004650:	462b      	mov	r3, r5
 8004652:	1891      	adds	r1, r2, r2
 8004654:	65b9      	str	r1, [r7, #88]	; 0x58
 8004656:	415b      	adcs	r3, r3
 8004658:	65fb      	str	r3, [r7, #92]	; 0x5c
 800465a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800465e:	4621      	mov	r1, r4
 8004660:	eb12 0801 	adds.w	r8, r2, r1
 8004664:	4629      	mov	r1, r5
 8004666:	eb43 0901 	adc.w	r9, r3, r1
 800466a:	f04f 0200 	mov.w	r2, #0
 800466e:	f04f 0300 	mov.w	r3, #0
 8004672:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004676:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800467a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800467e:	4690      	mov	r8, r2
 8004680:	4699      	mov	r9, r3
 8004682:	4623      	mov	r3, r4
 8004684:	eb18 0303 	adds.w	r3, r8, r3
 8004688:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800468c:	462b      	mov	r3, r5
 800468e:	eb49 0303 	adc.w	r3, r9, r3
 8004692:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004696:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	2200      	movs	r2, #0
 800469e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80046a2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80046a6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80046aa:	460b      	mov	r3, r1
 80046ac:	18db      	adds	r3, r3, r3
 80046ae:	653b      	str	r3, [r7, #80]	; 0x50
 80046b0:	4613      	mov	r3, r2
 80046b2:	eb42 0303 	adc.w	r3, r2, r3
 80046b6:	657b      	str	r3, [r7, #84]	; 0x54
 80046b8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80046bc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80046c0:	f7fb fd94 	bl	80001ec <__aeabi_uldivmod>
 80046c4:	4602      	mov	r2, r0
 80046c6:	460b      	mov	r3, r1
 80046c8:	4b61      	ldr	r3, [pc, #388]	; (8004850 <UART_SetConfig+0x2d4>)
 80046ca:	fba3 2302 	umull	r2, r3, r3, r2
 80046ce:	095b      	lsrs	r3, r3, #5
 80046d0:	011c      	lsls	r4, r3, #4
 80046d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80046d6:	2200      	movs	r2, #0
 80046d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80046dc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80046e0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80046e4:	4642      	mov	r2, r8
 80046e6:	464b      	mov	r3, r9
 80046e8:	1891      	adds	r1, r2, r2
 80046ea:	64b9      	str	r1, [r7, #72]	; 0x48
 80046ec:	415b      	adcs	r3, r3
 80046ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80046f0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80046f4:	4641      	mov	r1, r8
 80046f6:	eb12 0a01 	adds.w	sl, r2, r1
 80046fa:	4649      	mov	r1, r9
 80046fc:	eb43 0b01 	adc.w	fp, r3, r1
 8004700:	f04f 0200 	mov.w	r2, #0
 8004704:	f04f 0300 	mov.w	r3, #0
 8004708:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800470c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004710:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004714:	4692      	mov	sl, r2
 8004716:	469b      	mov	fp, r3
 8004718:	4643      	mov	r3, r8
 800471a:	eb1a 0303 	adds.w	r3, sl, r3
 800471e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004722:	464b      	mov	r3, r9
 8004724:	eb4b 0303 	adc.w	r3, fp, r3
 8004728:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800472c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	2200      	movs	r2, #0
 8004734:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004738:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800473c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004740:	460b      	mov	r3, r1
 8004742:	18db      	adds	r3, r3, r3
 8004744:	643b      	str	r3, [r7, #64]	; 0x40
 8004746:	4613      	mov	r3, r2
 8004748:	eb42 0303 	adc.w	r3, r2, r3
 800474c:	647b      	str	r3, [r7, #68]	; 0x44
 800474e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004752:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004756:	f7fb fd49 	bl	80001ec <__aeabi_uldivmod>
 800475a:	4602      	mov	r2, r0
 800475c:	460b      	mov	r3, r1
 800475e:	4611      	mov	r1, r2
 8004760:	4b3b      	ldr	r3, [pc, #236]	; (8004850 <UART_SetConfig+0x2d4>)
 8004762:	fba3 2301 	umull	r2, r3, r3, r1
 8004766:	095b      	lsrs	r3, r3, #5
 8004768:	2264      	movs	r2, #100	; 0x64
 800476a:	fb02 f303 	mul.w	r3, r2, r3
 800476e:	1acb      	subs	r3, r1, r3
 8004770:	00db      	lsls	r3, r3, #3
 8004772:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004776:	4b36      	ldr	r3, [pc, #216]	; (8004850 <UART_SetConfig+0x2d4>)
 8004778:	fba3 2302 	umull	r2, r3, r3, r2
 800477c:	095b      	lsrs	r3, r3, #5
 800477e:	005b      	lsls	r3, r3, #1
 8004780:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004784:	441c      	add	r4, r3
 8004786:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800478a:	2200      	movs	r2, #0
 800478c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004790:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004794:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004798:	4642      	mov	r2, r8
 800479a:	464b      	mov	r3, r9
 800479c:	1891      	adds	r1, r2, r2
 800479e:	63b9      	str	r1, [r7, #56]	; 0x38
 80047a0:	415b      	adcs	r3, r3
 80047a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047a4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80047a8:	4641      	mov	r1, r8
 80047aa:	1851      	adds	r1, r2, r1
 80047ac:	6339      	str	r1, [r7, #48]	; 0x30
 80047ae:	4649      	mov	r1, r9
 80047b0:	414b      	adcs	r3, r1
 80047b2:	637b      	str	r3, [r7, #52]	; 0x34
 80047b4:	f04f 0200 	mov.w	r2, #0
 80047b8:	f04f 0300 	mov.w	r3, #0
 80047bc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80047c0:	4659      	mov	r1, fp
 80047c2:	00cb      	lsls	r3, r1, #3
 80047c4:	4651      	mov	r1, sl
 80047c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80047ca:	4651      	mov	r1, sl
 80047cc:	00ca      	lsls	r2, r1, #3
 80047ce:	4610      	mov	r0, r2
 80047d0:	4619      	mov	r1, r3
 80047d2:	4603      	mov	r3, r0
 80047d4:	4642      	mov	r2, r8
 80047d6:	189b      	adds	r3, r3, r2
 80047d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80047dc:	464b      	mov	r3, r9
 80047de:	460a      	mov	r2, r1
 80047e0:	eb42 0303 	adc.w	r3, r2, r3
 80047e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80047e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	2200      	movs	r2, #0
 80047f0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80047f4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80047f8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80047fc:	460b      	mov	r3, r1
 80047fe:	18db      	adds	r3, r3, r3
 8004800:	62bb      	str	r3, [r7, #40]	; 0x28
 8004802:	4613      	mov	r3, r2
 8004804:	eb42 0303 	adc.w	r3, r2, r3
 8004808:	62fb      	str	r3, [r7, #44]	; 0x2c
 800480a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800480e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004812:	f7fb fceb 	bl	80001ec <__aeabi_uldivmod>
 8004816:	4602      	mov	r2, r0
 8004818:	460b      	mov	r3, r1
 800481a:	4b0d      	ldr	r3, [pc, #52]	; (8004850 <UART_SetConfig+0x2d4>)
 800481c:	fba3 1302 	umull	r1, r3, r3, r2
 8004820:	095b      	lsrs	r3, r3, #5
 8004822:	2164      	movs	r1, #100	; 0x64
 8004824:	fb01 f303 	mul.w	r3, r1, r3
 8004828:	1ad3      	subs	r3, r2, r3
 800482a:	00db      	lsls	r3, r3, #3
 800482c:	3332      	adds	r3, #50	; 0x32
 800482e:	4a08      	ldr	r2, [pc, #32]	; (8004850 <UART_SetConfig+0x2d4>)
 8004830:	fba2 2303 	umull	r2, r3, r2, r3
 8004834:	095b      	lsrs	r3, r3, #5
 8004836:	f003 0207 	and.w	r2, r3, #7
 800483a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4422      	add	r2, r4
 8004842:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004844:	e105      	b.n	8004a52 <UART_SetConfig+0x4d6>
 8004846:	bf00      	nop
 8004848:	40011000 	.word	0x40011000
 800484c:	40011400 	.word	0x40011400
 8004850:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004854:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004858:	2200      	movs	r2, #0
 800485a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800485e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004862:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004866:	4642      	mov	r2, r8
 8004868:	464b      	mov	r3, r9
 800486a:	1891      	adds	r1, r2, r2
 800486c:	6239      	str	r1, [r7, #32]
 800486e:	415b      	adcs	r3, r3
 8004870:	627b      	str	r3, [r7, #36]	; 0x24
 8004872:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004876:	4641      	mov	r1, r8
 8004878:	1854      	adds	r4, r2, r1
 800487a:	4649      	mov	r1, r9
 800487c:	eb43 0501 	adc.w	r5, r3, r1
 8004880:	f04f 0200 	mov.w	r2, #0
 8004884:	f04f 0300 	mov.w	r3, #0
 8004888:	00eb      	lsls	r3, r5, #3
 800488a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800488e:	00e2      	lsls	r2, r4, #3
 8004890:	4614      	mov	r4, r2
 8004892:	461d      	mov	r5, r3
 8004894:	4643      	mov	r3, r8
 8004896:	18e3      	adds	r3, r4, r3
 8004898:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800489c:	464b      	mov	r3, r9
 800489e:	eb45 0303 	adc.w	r3, r5, r3
 80048a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80048a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	2200      	movs	r2, #0
 80048ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80048b2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80048b6:	f04f 0200 	mov.w	r2, #0
 80048ba:	f04f 0300 	mov.w	r3, #0
 80048be:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80048c2:	4629      	mov	r1, r5
 80048c4:	008b      	lsls	r3, r1, #2
 80048c6:	4621      	mov	r1, r4
 80048c8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80048cc:	4621      	mov	r1, r4
 80048ce:	008a      	lsls	r2, r1, #2
 80048d0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80048d4:	f7fb fc8a 	bl	80001ec <__aeabi_uldivmod>
 80048d8:	4602      	mov	r2, r0
 80048da:	460b      	mov	r3, r1
 80048dc:	4b60      	ldr	r3, [pc, #384]	; (8004a60 <UART_SetConfig+0x4e4>)
 80048de:	fba3 2302 	umull	r2, r3, r3, r2
 80048e2:	095b      	lsrs	r3, r3, #5
 80048e4:	011c      	lsls	r4, r3, #4
 80048e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048ea:	2200      	movs	r2, #0
 80048ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80048f0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80048f4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80048f8:	4642      	mov	r2, r8
 80048fa:	464b      	mov	r3, r9
 80048fc:	1891      	adds	r1, r2, r2
 80048fe:	61b9      	str	r1, [r7, #24]
 8004900:	415b      	adcs	r3, r3
 8004902:	61fb      	str	r3, [r7, #28]
 8004904:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004908:	4641      	mov	r1, r8
 800490a:	1851      	adds	r1, r2, r1
 800490c:	6139      	str	r1, [r7, #16]
 800490e:	4649      	mov	r1, r9
 8004910:	414b      	adcs	r3, r1
 8004912:	617b      	str	r3, [r7, #20]
 8004914:	f04f 0200 	mov.w	r2, #0
 8004918:	f04f 0300 	mov.w	r3, #0
 800491c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004920:	4659      	mov	r1, fp
 8004922:	00cb      	lsls	r3, r1, #3
 8004924:	4651      	mov	r1, sl
 8004926:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800492a:	4651      	mov	r1, sl
 800492c:	00ca      	lsls	r2, r1, #3
 800492e:	4610      	mov	r0, r2
 8004930:	4619      	mov	r1, r3
 8004932:	4603      	mov	r3, r0
 8004934:	4642      	mov	r2, r8
 8004936:	189b      	adds	r3, r3, r2
 8004938:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800493c:	464b      	mov	r3, r9
 800493e:	460a      	mov	r2, r1
 8004940:	eb42 0303 	adc.w	r3, r2, r3
 8004944:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	2200      	movs	r2, #0
 8004950:	67bb      	str	r3, [r7, #120]	; 0x78
 8004952:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004954:	f04f 0200 	mov.w	r2, #0
 8004958:	f04f 0300 	mov.w	r3, #0
 800495c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004960:	4649      	mov	r1, r9
 8004962:	008b      	lsls	r3, r1, #2
 8004964:	4641      	mov	r1, r8
 8004966:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800496a:	4641      	mov	r1, r8
 800496c:	008a      	lsls	r2, r1, #2
 800496e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004972:	f7fb fc3b 	bl	80001ec <__aeabi_uldivmod>
 8004976:	4602      	mov	r2, r0
 8004978:	460b      	mov	r3, r1
 800497a:	4b39      	ldr	r3, [pc, #228]	; (8004a60 <UART_SetConfig+0x4e4>)
 800497c:	fba3 1302 	umull	r1, r3, r3, r2
 8004980:	095b      	lsrs	r3, r3, #5
 8004982:	2164      	movs	r1, #100	; 0x64
 8004984:	fb01 f303 	mul.w	r3, r1, r3
 8004988:	1ad3      	subs	r3, r2, r3
 800498a:	011b      	lsls	r3, r3, #4
 800498c:	3332      	adds	r3, #50	; 0x32
 800498e:	4a34      	ldr	r2, [pc, #208]	; (8004a60 <UART_SetConfig+0x4e4>)
 8004990:	fba2 2303 	umull	r2, r3, r2, r3
 8004994:	095b      	lsrs	r3, r3, #5
 8004996:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800499a:	441c      	add	r4, r3
 800499c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049a0:	2200      	movs	r2, #0
 80049a2:	673b      	str	r3, [r7, #112]	; 0x70
 80049a4:	677a      	str	r2, [r7, #116]	; 0x74
 80049a6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80049aa:	4642      	mov	r2, r8
 80049ac:	464b      	mov	r3, r9
 80049ae:	1891      	adds	r1, r2, r2
 80049b0:	60b9      	str	r1, [r7, #8]
 80049b2:	415b      	adcs	r3, r3
 80049b4:	60fb      	str	r3, [r7, #12]
 80049b6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80049ba:	4641      	mov	r1, r8
 80049bc:	1851      	adds	r1, r2, r1
 80049be:	6039      	str	r1, [r7, #0]
 80049c0:	4649      	mov	r1, r9
 80049c2:	414b      	adcs	r3, r1
 80049c4:	607b      	str	r3, [r7, #4]
 80049c6:	f04f 0200 	mov.w	r2, #0
 80049ca:	f04f 0300 	mov.w	r3, #0
 80049ce:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80049d2:	4659      	mov	r1, fp
 80049d4:	00cb      	lsls	r3, r1, #3
 80049d6:	4651      	mov	r1, sl
 80049d8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80049dc:	4651      	mov	r1, sl
 80049de:	00ca      	lsls	r2, r1, #3
 80049e0:	4610      	mov	r0, r2
 80049e2:	4619      	mov	r1, r3
 80049e4:	4603      	mov	r3, r0
 80049e6:	4642      	mov	r2, r8
 80049e8:	189b      	adds	r3, r3, r2
 80049ea:	66bb      	str	r3, [r7, #104]	; 0x68
 80049ec:	464b      	mov	r3, r9
 80049ee:	460a      	mov	r2, r1
 80049f0:	eb42 0303 	adc.w	r3, r2, r3
 80049f4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80049f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	2200      	movs	r2, #0
 80049fe:	663b      	str	r3, [r7, #96]	; 0x60
 8004a00:	667a      	str	r2, [r7, #100]	; 0x64
 8004a02:	f04f 0200 	mov.w	r2, #0
 8004a06:	f04f 0300 	mov.w	r3, #0
 8004a0a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004a0e:	4649      	mov	r1, r9
 8004a10:	008b      	lsls	r3, r1, #2
 8004a12:	4641      	mov	r1, r8
 8004a14:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a18:	4641      	mov	r1, r8
 8004a1a:	008a      	lsls	r2, r1, #2
 8004a1c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004a20:	f7fb fbe4 	bl	80001ec <__aeabi_uldivmod>
 8004a24:	4602      	mov	r2, r0
 8004a26:	460b      	mov	r3, r1
 8004a28:	4b0d      	ldr	r3, [pc, #52]	; (8004a60 <UART_SetConfig+0x4e4>)
 8004a2a:	fba3 1302 	umull	r1, r3, r3, r2
 8004a2e:	095b      	lsrs	r3, r3, #5
 8004a30:	2164      	movs	r1, #100	; 0x64
 8004a32:	fb01 f303 	mul.w	r3, r1, r3
 8004a36:	1ad3      	subs	r3, r2, r3
 8004a38:	011b      	lsls	r3, r3, #4
 8004a3a:	3332      	adds	r3, #50	; 0x32
 8004a3c:	4a08      	ldr	r2, [pc, #32]	; (8004a60 <UART_SetConfig+0x4e4>)
 8004a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a42:	095b      	lsrs	r3, r3, #5
 8004a44:	f003 020f 	and.w	r2, r3, #15
 8004a48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4422      	add	r2, r4
 8004a50:	609a      	str	r2, [r3, #8]
}
 8004a52:	bf00      	nop
 8004a54:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a5e:	bf00      	nop
 8004a60:	51eb851f 	.word	0x51eb851f

08004a64 <__libc_init_array>:
 8004a64:	b570      	push	{r4, r5, r6, lr}
 8004a66:	4d0d      	ldr	r5, [pc, #52]	; (8004a9c <__libc_init_array+0x38>)
 8004a68:	4c0d      	ldr	r4, [pc, #52]	; (8004aa0 <__libc_init_array+0x3c>)
 8004a6a:	1b64      	subs	r4, r4, r5
 8004a6c:	10a4      	asrs	r4, r4, #2
 8004a6e:	2600      	movs	r6, #0
 8004a70:	42a6      	cmp	r6, r4
 8004a72:	d109      	bne.n	8004a88 <__libc_init_array+0x24>
 8004a74:	4d0b      	ldr	r5, [pc, #44]	; (8004aa4 <__libc_init_array+0x40>)
 8004a76:	4c0c      	ldr	r4, [pc, #48]	; (8004aa8 <__libc_init_array+0x44>)
 8004a78:	f000 f820 	bl	8004abc <_init>
 8004a7c:	1b64      	subs	r4, r4, r5
 8004a7e:	10a4      	asrs	r4, r4, #2
 8004a80:	2600      	movs	r6, #0
 8004a82:	42a6      	cmp	r6, r4
 8004a84:	d105      	bne.n	8004a92 <__libc_init_array+0x2e>
 8004a86:	bd70      	pop	{r4, r5, r6, pc}
 8004a88:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a8c:	4798      	blx	r3
 8004a8e:	3601      	adds	r6, #1
 8004a90:	e7ee      	b.n	8004a70 <__libc_init_array+0xc>
 8004a92:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a96:	4798      	blx	r3
 8004a98:	3601      	adds	r6, #1
 8004a9a:	e7f2      	b.n	8004a82 <__libc_init_array+0x1e>
 8004a9c:	08004af4 	.word	0x08004af4
 8004aa0:	08004af4 	.word	0x08004af4
 8004aa4:	08004af4 	.word	0x08004af4
 8004aa8:	08004af8 	.word	0x08004af8

08004aac <memset>:
 8004aac:	4402      	add	r2, r0
 8004aae:	4603      	mov	r3, r0
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d100      	bne.n	8004ab6 <memset+0xa>
 8004ab4:	4770      	bx	lr
 8004ab6:	f803 1b01 	strb.w	r1, [r3], #1
 8004aba:	e7f9      	b.n	8004ab0 <memset+0x4>

08004abc <_init>:
 8004abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004abe:	bf00      	nop
 8004ac0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ac2:	bc08      	pop	{r3}
 8004ac4:	469e      	mov	lr, r3
 8004ac6:	4770      	bx	lr

08004ac8 <_fini>:
 8004ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aca:	bf00      	nop
 8004acc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ace:	bc08      	pop	{r3}
 8004ad0:	469e      	mov	lr, r3
 8004ad2:	4770      	bx	lr
