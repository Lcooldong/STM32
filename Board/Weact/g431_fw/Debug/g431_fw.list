
g431_fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000079bc  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08007b94  08007b94  00008b94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007c08  08007c08  0000918c  2**0
                  CONTENTS
  4 .ARM          00000000  08007c08  08007c08  0000918c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007c08  08007c08  0000918c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007c08  08007c08  00008c08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007c0c  08007c0c  00008c0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000018c  20000000  08007c10  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmsram      00000000  10000000  10000000  0000918c  2**0
                  CONTENTS
 10 .bss          000019f0  2000018c  2000018c  0000918c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001b7c  20001b7c  0000918c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000918c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f6eb  00000000  00000000  000091bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000033ea  00000000  00000000  000188a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e78  00000000  00000000  0001bc98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a92  00000000  00000000  0001cb10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a86c  00000000  00000000  0001d5a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c4c1  00000000  00000000  00047e0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00107006  00000000  00000000  000642cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0016b2d5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000036cc  00000000  00000000  0016b318  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000055  00000000  00000000  0016e9e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000018c 	.word	0x2000018c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08007b7c 	.word	0x08007b7c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000190 	.word	0x20000190
 8000214:	08007b7c 	.word	0x08007b7c

08000218 <apInit>:


#include "ap.h"

void apInit(void)
{
 8000218:	b480      	push	{r7}
 800021a:	af00      	add	r7, sp, #0

}
 800021c:	bf00      	nop
 800021e:	46bd      	mov	sp, r7
 8000220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000224:	4770      	bx	lr
	...

08000228 <apMain>:

void apMain(void)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	b088      	sub	sp, #32
 800022c:	af00      	add	r7, sp, #0
  uint32_t pre_time[2];

  for(int i=0; i<sizeof(pre_time); i++)
 800022e:	2300      	movs	r3, #0
 8000230:	61fb      	str	r3, [r7, #28]
 8000232:	e00b      	b.n	800024c <apMain+0x24>
  {
    pre_time[i] = millis();
 8000234:	f000 f857 	bl	80002e6 <millis>
 8000238:	4602      	mov	r2, r0
 800023a:	69fb      	ldr	r3, [r7, #28]
 800023c:	009b      	lsls	r3, r3, #2
 800023e:	3320      	adds	r3, #32
 8000240:	443b      	add	r3, r7
 8000242:	f843 2c18 	str.w	r2, [r3, #-24]
  for(int i=0; i<sizeof(pre_time); i++)
 8000246:	69fb      	ldr	r3, [r7, #28]
 8000248:	3301      	adds	r3, #1
 800024a:	61fb      	str	r3, [r7, #28]
 800024c:	69fb      	ldr	r3, [r7, #28]
 800024e:	2b07      	cmp	r3, #7
 8000250:	d9f0      	bls.n	8000234 <apMain+0xc>
  }

  while(1)
  {
    uint32_t cur_time = millis();
 8000252:	f000 f848 	bl	80002e6 <millis>
 8000256:	61b8      	str	r0, [r7, #24]
    if(cur_time - pre_time[0] >= 500)
 8000258:	68bb      	ldr	r3, [r7, #8]
 800025a:	69ba      	ldr	r2, [r7, #24]
 800025c:	1ad3      	subs	r3, r2, r3
 800025e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000262:	d304      	bcc.n	800026e <apMain+0x46>
    {
      pre_time[0] = cur_time;
 8000264:	69bb      	ldr	r3, [r7, #24]
 8000266:	60bb      	str	r3, [r7, #8]
      ledToggle(_DEF_LED1);
 8000268:	2000      	movs	r0, #0
 800026a:	f000 faa5 	bl	80007b8 <ledToggle>
    }


    if(cdcIsConnect() == true)
 800026e:	f000 fa1f 	bl	80006b0 <cdcIsConnect>
 8000272:	4603      	mov	r3, r0
 8000274:	2b00      	cmp	r3, #0
 8000276:	d00b      	beq.n	8000290 <apMain+0x68>
    {
      if(cur_time - pre_time[1] >= 500)
 8000278:	68fb      	ldr	r3, [r7, #12]
 800027a:	69ba      	ldr	r2, [r7, #24]
 800027c:	1ad3      	subs	r3, r2, r3
 800027e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000282:	d308      	bcc.n	8000296 <apMain+0x6e>
      {
        pre_time[1] = cur_time;
 8000284:	69bb      	ldr	r3, [r7, #24]
 8000286:	60fb      	str	r3, [r7, #12]
        ledToggle(_DEF_LED2);
 8000288:	2001      	movs	r0, #1
 800028a:	f000 fa95 	bl	80007b8 <ledToggle>
 800028e:	e002      	b.n	8000296 <apMain+0x6e>
      }
    }
    else
    {
      ledOff(_DEF_LED2);
 8000290:	2001      	movs	r0, #1
 8000292:	f000 fa75 	bl	8000780 <ledOff>
    }

    if(cdcAvailable() > 0)
 8000296:	f000 fa12 	bl	80006be <cdcAvailable>
 800029a:	4603      	mov	r3, r0
 800029c:	2b00      	cmp	r3, #0
 800029e:	d0d8      	beq.n	8000252 <apMain+0x2a>
    {
      uint8_t rx_data;
      char *startText = "RX : ";
 80002a0:	4b0a      	ldr	r3, [pc, #40]	@ (80002cc <apMain+0xa4>)
 80002a2:	617b      	str	r3, [r7, #20]
      char *endText = "\r\n";
 80002a4:	4b0a      	ldr	r3, [pc, #40]	@ (80002d0 <apMain+0xa8>)
 80002a6:	613b      	str	r3, [r7, #16]

      rx_data = cdcRead();
 80002a8:	f000 fa10 	bl	80006cc <cdcRead>
 80002ac:	4603      	mov	r3, r0
 80002ae:	71fb      	strb	r3, [r7, #7]

      cdcWrite((uint8_t*)startText, sizeof(startText));
 80002b0:	2104      	movs	r1, #4
 80002b2:	6978      	ldr	r0, [r7, #20]
 80002b4:	f000 fa11 	bl	80006da <cdcWrite>
      cdcWrite(&rx_data, 1);
 80002b8:	1dfb      	adds	r3, r7, #7
 80002ba:	2101      	movs	r1, #1
 80002bc:	4618      	mov	r0, r3
 80002be:	f000 fa0c 	bl	80006da <cdcWrite>
      cdcWrite((uint8_t*)endText, sizeof(endText));
 80002c2:	2104      	movs	r1, #4
 80002c4:	6938      	ldr	r0, [r7, #16]
 80002c6:	f000 fa08 	bl	80006da <cdcWrite>
  {
 80002ca:	e7c2      	b.n	8000252 <apMain+0x2a>
 80002cc:	08007b94 	.word	0x08007b94
 80002d0:	08007b9c 	.word	0x08007b9c

080002d4 <bspInit>:
void SystemClock_Config(void);



bool bspInit(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	af00      	add	r7, sp, #0
  HAL_Init();
 80002d8:	f002 fdc3 	bl	8002e62 <HAL_Init>


  SystemClock_Config();
 80002dc:	f000 f80a 	bl	80002f4 <SystemClock_Config>

  return true;
 80002e0:	2301      	movs	r3, #1
}
 80002e2:	4618      	mov	r0, r3
 80002e4:	bd80      	pop	{r7, pc}

080002e6 <millis>:
  HAL_Delay(time_ms);
#endif
}

uint32_t millis(void)
{
 80002e6:	b580      	push	{r7, lr}
 80002e8:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80002ea:	f002 fe0d 	bl	8002f08 <HAL_GetTick>
 80002ee:	4603      	mov	r3, r0
}
 80002f0:	4618      	mov	r0, r3
 80002f2:	bd80      	pop	{r7, pc}

080002f4 <SystemClock_Config>:




void SystemClock_Config(void)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b094      	sub	sp, #80	@ 0x50
 80002f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002fa:	f107 0318 	add.w	r3, r7, #24
 80002fe:	2238      	movs	r2, #56	@ 0x38
 8000300:	2100      	movs	r1, #0
 8000302:	4618      	mov	r0, r3
 8000304:	f007 fc0e 	bl	8007b24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000308:	1d3b      	adds	r3, r7, #4
 800030a:	2200      	movs	r2, #0
 800030c:	601a      	str	r2, [r3, #0]
 800030e:	605a      	str	r2, [r3, #4]
 8000310:	609a      	str	r2, [r3, #8]
 8000312:	60da      	str	r2, [r3, #12]
 8000314:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000316:	2000      	movs	r0, #0
 8000318:	f004 fdc8 	bl	8004eac <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
//  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE
//                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSI
 800031c:	2329      	movs	r3, #41	@ 0x29
 800031e:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000320:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000324:	61fb      	str	r3, [r7, #28]
//  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000326:	2301      	movs	r3, #1
 8000328:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800032a:	2301      	movs	r3, #1
 800032c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800032e:	2302      	movs	r3, #2
 8000330:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000332:	2303      	movs	r3, #3
 8000334:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000336:	2301      	movs	r3, #1
 8000338:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 40;
 800033a:	2328      	movs	r3, #40	@ 0x28
 800033c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800033e:	2302      	movs	r3, #2
 8000340:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8000342:	2304      	movs	r3, #4
 8000344:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000346:	2302      	movs	r3, #2
 8000348:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800034a:	f107 0318 	add.w	r3, r7, #24
 800034e:	4618      	mov	r0, r3
 8000350:	f004 fe60 	bl	8005014 <HAL_RCC_OscConfig>
 8000354:	4603      	mov	r3, r0
 8000356:	2b00      	cmp	r3, #0
 8000358:	d001      	beq.n	800035e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800035a:	f000 f818 	bl	800038e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800035e:	230f      	movs	r3, #15
 8000360:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000362:	2303      	movs	r3, #3
 8000364:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000366:	2300      	movs	r3, #0
 8000368:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800036a:	2300      	movs	r3, #0
 800036c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800036e:	2300      	movs	r3, #0
 8000370:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000372:	1d3b      	adds	r3, r7, #4
 8000374:	2104      	movs	r1, #4
 8000376:	4618      	mov	r0, r3
 8000378:	f005 f95e 	bl	8005638 <HAL_RCC_ClockConfig>
 800037c:	4603      	mov	r3, r0
 800037e:	2b00      	cmp	r3, #0
 8000380:	d001      	beq.n	8000386 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000382:	f000 f804 	bl	800038e <Error_Handler>
  }
}
 8000386:	bf00      	nop
 8000388:	3750      	adds	r7, #80	@ 0x50
 800038a:	46bd      	mov	sp, r7
 800038c:	bd80      	pop	{r7, pc}

0800038e <Error_Handler>:

void Error_Handler(void)
{
 800038e:	b480      	push	{r7}
 8000390:	af00      	add	r7, sp, #0
}
 8000392:	bf00      	nop
 8000394:	46bd      	mov	sp, r7
 8000396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039a:	4770      	bx	lr

0800039c <HAL_MspInit>:

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	b082      	sub	sp, #8
 80003a0:	af00      	add	r7, sp, #0

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003a2:	4b0f      	ldr	r3, [pc, #60]	@ (80003e0 <HAL_MspInit+0x44>)
 80003a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80003a6:	4a0e      	ldr	r2, [pc, #56]	@ (80003e0 <HAL_MspInit+0x44>)
 80003a8:	f043 0301 	orr.w	r3, r3, #1
 80003ac:	6613      	str	r3, [r2, #96]	@ 0x60
 80003ae:	4b0c      	ldr	r3, [pc, #48]	@ (80003e0 <HAL_MspInit+0x44>)
 80003b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80003b2:	f003 0301 	and.w	r3, r3, #1
 80003b6:	607b      	str	r3, [r7, #4]
 80003b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003ba:	4b09      	ldr	r3, [pc, #36]	@ (80003e0 <HAL_MspInit+0x44>)
 80003bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80003be:	4a08      	ldr	r2, [pc, #32]	@ (80003e0 <HAL_MspInit+0x44>)
 80003c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80003c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80003c6:	4b06      	ldr	r3, [pc, #24]	@ (80003e0 <HAL_MspInit+0x44>)
 80003c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80003ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80003ce:	603b      	str	r3, [r7, #0]
 80003d0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80003d2:	f004 fe0f 	bl	8004ff4 <HAL_PWREx_DisableUCPDDeadBattery>


}
 80003d6:	bf00      	nop
 80003d8:	3708      	adds	r7, #8
 80003da:	46bd      	mov	sp, r7
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	bf00      	nop
 80003e0:	40021000 	.word	0x40021000

080003e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003e4:	b480      	push	{r7}
 80003e6:	af00      	add	r7, sp, #0

   while (1)
 80003e8:	bf00      	nop
 80003ea:	e7fd      	b.n	80003e8 <NMI_Handler+0x4>

080003ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003ec:	b480      	push	{r7}
 80003ee:	af00      	add	r7, sp, #0

  while (1)
 80003f0:	bf00      	nop
 80003f2:	e7fd      	b.n	80003f0 <HardFault_Handler+0x4>

080003f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003f4:	b480      	push	{r7}
 80003f6:	af00      	add	r7, sp, #0

  while (1)
 80003f8:	bf00      	nop
 80003fa:	e7fd      	b.n	80003f8 <MemManage_Handler+0x4>

080003fc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003fc:	b480      	push	{r7}
 80003fe:	af00      	add	r7, sp, #0

  while (1)
 8000400:	bf00      	nop
 8000402:	e7fd      	b.n	8000400 <BusFault_Handler+0x4>

08000404 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000404:	b480      	push	{r7}
 8000406:	af00      	add	r7, sp, #0

  while (1)
 8000408:	bf00      	nop
 800040a:	e7fd      	b.n	8000408 <UsageFault_Handler+0x4>

0800040c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800040c:	b480      	push	{r7}
 800040e:	af00      	add	r7, sp, #0

}
 8000410:	bf00      	nop
 8000412:	46bd      	mov	sp, r7
 8000414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000418:	4770      	bx	lr

0800041a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800041a:	b480      	push	{r7}
 800041c:	af00      	add	r7, sp, #0

}
 800041e:	bf00      	nop
 8000420:	46bd      	mov	sp, r7
 8000422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000426:	4770      	bx	lr

08000428 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000428:	b480      	push	{r7}
 800042a:	af00      	add	r7, sp, #0

}
 800042c:	bf00      	nop
 800042e:	46bd      	mov	sp, r7
 8000430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000434:	4770      	bx	lr
	...

08000438 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000438:	b480      	push	{r7}
 800043a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800043c:	4b06      	ldr	r3, [pc, #24]	@ (8000458 <SystemInit+0x20>)
 800043e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000442:	4a05      	ldr	r2, [pc, #20]	@ (8000458 <SystemInit+0x20>)
 8000444:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000448:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800044c:	bf00      	nop
 800044e:	46bd      	mov	sp, r7
 8000450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000454:	4770      	bx	lr
 8000456:	bf00      	nop
 8000458:	e000ed00 	.word	0xe000ed00

0800045c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800045c:	480d      	ldr	r0, [pc, #52]	@ (8000494 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800045e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000460:	f7ff ffea 	bl	8000438 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000464:	480c      	ldr	r0, [pc, #48]	@ (8000498 <LoopForever+0x6>)
  ldr r1, =_edata
 8000466:	490d      	ldr	r1, [pc, #52]	@ (800049c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000468:	4a0d      	ldr	r2, [pc, #52]	@ (80004a0 <LoopForever+0xe>)
  movs r3, #0
 800046a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800046c:	e002      	b.n	8000474 <LoopCopyDataInit>

0800046e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800046e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000470:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000472:	3304      	adds	r3, #4

08000474 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000474:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000476:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000478:	d3f9      	bcc.n	800046e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800047a:	4a0a      	ldr	r2, [pc, #40]	@ (80004a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800047c:	4c0a      	ldr	r4, [pc, #40]	@ (80004a8 <LoopForever+0x16>)
  movs r3, #0
 800047e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000480:	e001      	b.n	8000486 <LoopFillZerobss>

08000482 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000482:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000484:	3204      	adds	r2, #4

08000486 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000486:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000488:	d3fb      	bcc.n	8000482 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800048a:	f007 fb53 	bl	8007b34 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800048e:	f007 fb3e 	bl	8007b0e <main>

08000492 <LoopForever>:

LoopForever:
  b LoopForever
 8000492:	e7fe      	b.n	8000492 <LoopForever>
  ldr   r0, =_estack
 8000494:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000498:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800049c:	2000018c 	.word	0x2000018c
  ldr r2, =_sidata
 80004a0:	08007c10 	.word	0x08007c10
  ldr r2, =_sbss
 80004a4:	2000018c 	.word	0x2000018c
  ldr r4, =_ebss
 80004a8:	20001b7c 	.word	0x20001b7c

080004ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004ac:	e7fe      	b.n	80004ac <ADC1_2_IRQHandler>

080004ae <qbufferCreate>:
{

}

bool qbufferCreate(qbuffer_t *p_node, uint8_t *p_buf, uint32_t length)
{
 80004ae:	b480      	push	{r7}
 80004b0:	b087      	sub	sp, #28
 80004b2:	af00      	add	r7, sp, #0
 80004b4:	60f8      	str	r0, [r7, #12]
 80004b6:	60b9      	str	r1, [r7, #8]
 80004b8:	607a      	str	r2, [r7, #4]
  bool ret = true;
 80004ba:	2301      	movs	r3, #1
 80004bc:	75fb      	strb	r3, [r7, #23]

  p_node->in    = 0;
 80004be:	68fb      	ldr	r3, [r7, #12]
 80004c0:	2200      	movs	r2, #0
 80004c2:	601a      	str	r2, [r3, #0]
  p_node->out   = 0;
 80004c4:	68fb      	ldr	r3, [r7, #12]
 80004c6:	2200      	movs	r2, #0
 80004c8:	605a      	str	r2, [r3, #4]
  p_node->len   = length;
 80004ca:	68fb      	ldr	r3, [r7, #12]
 80004cc:	687a      	ldr	r2, [r7, #4]
 80004ce:	609a      	str	r2, [r3, #8]
  p_node->size  = 1;
 80004d0:	68fb      	ldr	r3, [r7, #12]
 80004d2:	2201      	movs	r2, #1
 80004d4:	60da      	str	r2, [r3, #12]
  p_node->p_buf = p_buf;
 80004d6:	68fb      	ldr	r3, [r7, #12]
 80004d8:	68ba      	ldr	r2, [r7, #8]
 80004da:	611a      	str	r2, [r3, #16]

  return ret;
 80004dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80004de:	4618      	mov	r0, r3
 80004e0:	371c      	adds	r7, #28
 80004e2:	46bd      	mov	sp, r7
 80004e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e8:	4770      	bx	lr

080004ea <qbufferWrite>:

  return ret;
}

bool qbufferWrite(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 80004ea:	b480      	push	{r7}
 80004ec:	b08b      	sub	sp, #44	@ 0x2c
 80004ee:	af00      	add	r7, sp, #0
 80004f0:	60f8      	str	r0, [r7, #12]
 80004f2:	60b9      	str	r1, [r7, #8]
 80004f4:	607a      	str	r2, [r7, #4]
  bool ret = true;
 80004f6:	2301      	movs	r3, #1
 80004f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t next_in;


  for (int i=0; i<length; i++)
 80004fc:	2300      	movs	r3, #0
 80004fe:	623b      	str	r3, [r7, #32]
 8000500:	e043      	b.n	800058a <qbufferWrite+0xa0>
  {
    next_in = (p_node->in + 1) % p_node->len;
 8000502:	68fb      	ldr	r3, [r7, #12]
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	3301      	adds	r3, #1
 8000508:	68fa      	ldr	r2, [r7, #12]
 800050a:	6892      	ldr	r2, [r2, #8]
 800050c:	fbb3 f1f2 	udiv	r1, r3, r2
 8000510:	fb01 f202 	mul.w	r2, r1, r2
 8000514:	1a9b      	subs	r3, r3, r2
 8000516:	61bb      	str	r3, [r7, #24]

    if (next_in != p_node->out)
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	685b      	ldr	r3, [r3, #4]
 800051c:	69ba      	ldr	r2, [r7, #24]
 800051e:	429a      	cmp	r2, r3
 8000520:	d02c      	beq.n	800057c <qbufferWrite+0x92>
    {
      if (p_node->p_buf != NULL && p_data != NULL)
 8000522:	68fb      	ldr	r3, [r7, #12]
 8000524:	691b      	ldr	r3, [r3, #16]
 8000526:	2b00      	cmp	r3, #0
 8000528:	d024      	beq.n	8000574 <qbufferWrite+0x8a>
 800052a:	68bb      	ldr	r3, [r7, #8]
 800052c:	2b00      	cmp	r3, #0
 800052e:	d021      	beq.n	8000574 <qbufferWrite+0x8a>
      {
        uint8_t *p_buf;

        p_buf = &p_node->p_buf[p_node->in*p_node->size];
 8000530:	68fb      	ldr	r3, [r7, #12]
 8000532:	691a      	ldr	r2, [r3, #16]
 8000534:	68fb      	ldr	r3, [r7, #12]
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	68f9      	ldr	r1, [r7, #12]
 800053a:	68c9      	ldr	r1, [r1, #12]
 800053c:	fb01 f303 	mul.w	r3, r1, r3
 8000540:	4413      	add	r3, r2
 8000542:	617b      	str	r3, [r7, #20]
        for (int j=0; j<p_node->size; j++)
 8000544:	2300      	movs	r3, #0
 8000546:	61fb      	str	r3, [r7, #28]
 8000548:	e00a      	b.n	8000560 <qbufferWrite+0x76>
        {
          p_buf[j] = p_data[j];
 800054a:	69fb      	ldr	r3, [r7, #28]
 800054c:	68ba      	ldr	r2, [r7, #8]
 800054e:	441a      	add	r2, r3
 8000550:	69fb      	ldr	r3, [r7, #28]
 8000552:	6979      	ldr	r1, [r7, #20]
 8000554:	440b      	add	r3, r1
 8000556:	7812      	ldrb	r2, [r2, #0]
 8000558:	701a      	strb	r2, [r3, #0]
        for (int j=0; j<p_node->size; j++)
 800055a:	69fb      	ldr	r3, [r7, #28]
 800055c:	3301      	adds	r3, #1
 800055e:	61fb      	str	r3, [r7, #28]
 8000560:	68fb      	ldr	r3, [r7, #12]
 8000562:	68da      	ldr	r2, [r3, #12]
 8000564:	69fb      	ldr	r3, [r7, #28]
 8000566:	429a      	cmp	r2, r3
 8000568:	d8ef      	bhi.n	800054a <qbufferWrite+0x60>
        }
        p_data += p_node->size;
 800056a:	68fb      	ldr	r3, [r7, #12]
 800056c:	68db      	ldr	r3, [r3, #12]
 800056e:	68ba      	ldr	r2, [r7, #8]
 8000570:	4413      	add	r3, r2
 8000572:	60bb      	str	r3, [r7, #8]
      }
      p_node->in = next_in;
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	69ba      	ldr	r2, [r7, #24]
 8000578:	601a      	str	r2, [r3, #0]
 800057a:	e003      	b.n	8000584 <qbufferWrite+0x9a>
    }
    else
    {
      ret = false;
 800057c:	2300      	movs	r3, #0
 800057e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8000582:	e006      	b.n	8000592 <qbufferWrite+0xa8>
  for (int i=0; i<length; i++)
 8000584:	6a3b      	ldr	r3, [r7, #32]
 8000586:	3301      	adds	r3, #1
 8000588:	623b      	str	r3, [r7, #32]
 800058a:	6a3b      	ldr	r3, [r7, #32]
 800058c:	687a      	ldr	r2, [r7, #4]
 800058e:	429a      	cmp	r2, r3
 8000590:	d8b7      	bhi.n	8000502 <qbufferWrite+0x18>
    }
  }

  return ret;
 8000592:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8000596:	4618      	mov	r0, r3
 8000598:	372c      	adds	r7, #44	@ 0x2c
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr

080005a2 <qbufferRead>:

bool qbufferRead(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 80005a2:	b480      	push	{r7}
 80005a4:	b089      	sub	sp, #36	@ 0x24
 80005a6:	af00      	add	r7, sp, #0
 80005a8:	60f8      	str	r0, [r7, #12]
 80005aa:	60b9      	str	r1, [r7, #8]
 80005ac:	607a      	str	r2, [r7, #4]
  bool ret = true;
 80005ae:	2301      	movs	r3, #1
 80005b0:	77fb      	strb	r3, [r7, #31]


  for (int i=0; i<length; i++)
 80005b2:	2300      	movs	r3, #0
 80005b4:	61bb      	str	r3, [r7, #24]
 80005b6:	e041      	b.n	800063c <qbufferRead+0x9a>
  {
    if (p_node->p_buf != NULL && p_data != NULL)
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	691b      	ldr	r3, [r3, #16]
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d024      	beq.n	800060a <qbufferRead+0x68>
 80005c0:	68bb      	ldr	r3, [r7, #8]
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d021      	beq.n	800060a <qbufferRead+0x68>
    {
      uint8_t *p_buf;

      p_buf = &p_node->p_buf[p_node->out*p_node->size];
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	691a      	ldr	r2, [r3, #16]
 80005ca:	68fb      	ldr	r3, [r7, #12]
 80005cc:	685b      	ldr	r3, [r3, #4]
 80005ce:	68f9      	ldr	r1, [r7, #12]
 80005d0:	68c9      	ldr	r1, [r1, #12]
 80005d2:	fb01 f303 	mul.w	r3, r1, r3
 80005d6:	4413      	add	r3, r2
 80005d8:	613b      	str	r3, [r7, #16]
      for (int j=0; j<p_node->size; j++)
 80005da:	2300      	movs	r3, #0
 80005dc:	617b      	str	r3, [r7, #20]
 80005de:	e00a      	b.n	80005f6 <qbufferRead+0x54>
      {
        p_data[j] = p_buf[j];
 80005e0:	697b      	ldr	r3, [r7, #20]
 80005e2:	693a      	ldr	r2, [r7, #16]
 80005e4:	441a      	add	r2, r3
 80005e6:	697b      	ldr	r3, [r7, #20]
 80005e8:	68b9      	ldr	r1, [r7, #8]
 80005ea:	440b      	add	r3, r1
 80005ec:	7812      	ldrb	r2, [r2, #0]
 80005ee:	701a      	strb	r2, [r3, #0]
      for (int j=0; j<p_node->size; j++)
 80005f0:	697b      	ldr	r3, [r7, #20]
 80005f2:	3301      	adds	r3, #1
 80005f4:	617b      	str	r3, [r7, #20]
 80005f6:	68fb      	ldr	r3, [r7, #12]
 80005f8:	68da      	ldr	r2, [r3, #12]
 80005fa:	697b      	ldr	r3, [r7, #20]
 80005fc:	429a      	cmp	r2, r3
 80005fe:	d8ef      	bhi.n	80005e0 <qbufferRead+0x3e>
      }

      p_data += p_node->size;
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	68db      	ldr	r3, [r3, #12]
 8000604:	68ba      	ldr	r2, [r7, #8]
 8000606:	4413      	add	r3, r2
 8000608:	60bb      	str	r3, [r7, #8]
    }

    if (p_node->out != p_node->in)
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	685a      	ldr	r2, [r3, #4]
 800060e:	68fb      	ldr	r3, [r7, #12]
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	429a      	cmp	r2, r3
 8000614:	d00c      	beq.n	8000630 <qbufferRead+0x8e>
    {
      p_node->out = (p_node->out + 1) % p_node->len;
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	685b      	ldr	r3, [r3, #4]
 800061a:	3301      	adds	r3, #1
 800061c:	68fa      	ldr	r2, [r7, #12]
 800061e:	6892      	ldr	r2, [r2, #8]
 8000620:	fbb3 f1f2 	udiv	r1, r3, r2
 8000624:	fb01 f202 	mul.w	r2, r1, r2
 8000628:	1a9a      	subs	r2, r3, r2
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	605a      	str	r2, [r3, #4]
 800062e:	e002      	b.n	8000636 <qbufferRead+0x94>
    }
    else
    {
      ret = false;
 8000630:	2300      	movs	r3, #0
 8000632:	77fb      	strb	r3, [r7, #31]
      break;
 8000634:	e006      	b.n	8000644 <qbufferRead+0xa2>
  for (int i=0; i<length; i++)
 8000636:	69bb      	ldr	r3, [r7, #24]
 8000638:	3301      	adds	r3, #1
 800063a:	61bb      	str	r3, [r7, #24]
 800063c:	69bb      	ldr	r3, [r7, #24]
 800063e:	687a      	ldr	r2, [r7, #4]
 8000640:	429a      	cmp	r2, r3
 8000642:	d8b9      	bhi.n	80005b8 <qbufferRead+0x16>
    }
  }

  return ret;
 8000644:	7ffb      	ldrb	r3, [r7, #31]
}
 8000646:	4618      	mov	r0, r3
 8000648:	3724      	adds	r7, #36	@ 0x24
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr

08000652 <qbufferAvailable>:
  return &p_node->p_buf[p_node->out*p_node->size];
}


uint32_t qbufferAvailable(qbuffer_t *p_node)
{
 8000652:	b480      	push	{r7}
 8000654:	b085      	sub	sp, #20
 8000656:	af00      	add	r7, sp, #0
 8000658:	6078      	str	r0, [r7, #4]
  uint32_t ret;


  ret = (p_node->len + p_node->in - p_node->out) % p_node->len;
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	689a      	ldr	r2, [r3, #8]
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	441a      	add	r2, r3
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	685b      	ldr	r3, [r3, #4]
 8000668:	1ad3      	subs	r3, r2, r3
 800066a:	687a      	ldr	r2, [r7, #4]
 800066c:	6892      	ldr	r2, [r2, #8]
 800066e:	fbb3 f1f2 	udiv	r1, r3, r2
 8000672:	fb01 f202 	mul.w	r2, r1, r2
 8000676:	1a9b      	subs	r3, r3, r2
 8000678:	60fb      	str	r3, [r7, #12]

  return ret;
 800067a:	68fb      	ldr	r3, [r7, #12]
}
 800067c:	4618      	mov	r0, r3
 800067e:	3714      	adds	r7, #20
 8000680:	46bd      	mov	sp, r7
 8000682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000686:	4770      	bx	lr

08000688 <cdcInit>:


static bool is_init = false;

bool cdcInit(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
  bool ret = true;
 800068e:	2301      	movs	r3, #1
 8000690:	71fb      	strb	r3, [r7, #7]


  ret = cdcIfInit();
 8000692:	f001 fd4f 	bl	8002134 <cdcIfInit>
 8000696:	4603      	mov	r3, r0
 8000698:	71fb      	strb	r3, [r7, #7]

  is_init = ret;
 800069a:	4a04      	ldr	r2, [pc, #16]	@ (80006ac <cdcInit+0x24>)
 800069c:	79fb      	ldrb	r3, [r7, #7]
 800069e:	7013      	strb	r3, [r2, #0]

  return ret;
 80006a0:	79fb      	ldrb	r3, [r7, #7]
}
 80006a2:	4618      	mov	r0, r3
 80006a4:	3708      	adds	r7, #8
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	200001a8 	.word	0x200001a8

080006b0 <cdcIsConnect>:
{
  return is_init;
}

bool cdcIsConnect(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
  return cdcIfIsConnected();
 80006b4:	f001 fdcc 	bl	8002250 <cdcIfIsConnected>
 80006b8:	4603      	mov	r3, r0
}
 80006ba:	4618      	mov	r0, r3
 80006bc:	bd80      	pop	{r7, pc}

080006be <cdcAvailable>:

uint32_t cdcAvailable(void)
{
 80006be:	b580      	push	{r7, lr}
 80006c0:	af00      	add	r7, sp, #0
  return cdcIfAvailable();
 80006c2:	f001 fd55 	bl	8002170 <cdcIfAvailable>
 80006c6:	4603      	mov	r3, r0
}
 80006c8:	4618      	mov	r0, r3
 80006ca:	bd80      	pop	{r7, pc}

080006cc <cdcRead>:

uint8_t cdcRead(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
  return cdcIfRead();
 80006d0:	f001 fd58 	bl	8002184 <cdcIfRead>
 80006d4:	4603      	mov	r3, r0
}
 80006d6:	4618      	mov	r0, r3
 80006d8:	bd80      	pop	{r7, pc}

080006da <cdcWrite>:

uint32_t cdcWrite(uint8_t *p_data, uint32_t length)
{
 80006da:	b580      	push	{r7, lr}
 80006dc:	b082      	sub	sp, #8
 80006de:	af00      	add	r7, sp, #0
 80006e0:	6078      	str	r0, [r7, #4]
 80006e2:	6039      	str	r1, [r7, #0]
  return cdcIfWrite(p_data, length);
 80006e4:	6839      	ldr	r1, [r7, #0]
 80006e6:	6878      	ldr	r0, [r7, #4]
 80006e8:	f001 fd5e 	bl	80021a8 <cdcIfWrite>
 80006ec:	4603      	mov	r3, r0
}
 80006ee:	4618      	mov	r0, r3
 80006f0:	3708      	adds	r7, #8
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
	...

080006f8 <ledInit>:




bool ledInit(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b088      	sub	sp, #32
 80006fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure = { 0, };
 80006fe:	f107 0308 	add.w	r3, r7, #8
 8000702:	2200      	movs	r2, #0
 8000704:	601a      	str	r2, [r3, #0]
 8000706:	605a      	str	r2, [r3, #4]
 8000708:	609a      	str	r2, [r3, #8]
 800070a:	60da      	str	r2, [r3, #12]
 800070c:	611a      	str	r2, [r3, #16]

  __HAL_RCC_GPIOC_CLK_ENABLE();
 800070e:	4b1a      	ldr	r3, [pc, #104]	@ (8000778 <ledInit+0x80>)
 8000710:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000712:	4a19      	ldr	r2, [pc, #100]	@ (8000778 <ledInit+0x80>)
 8000714:	f043 0304 	orr.w	r3, r3, #4
 8000718:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800071a:	4b17      	ldr	r3, [pc, #92]	@ (8000778 <ledInit+0x80>)
 800071c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800071e:	f003 0304 	and.w	r3, r3, #4
 8000722:	607b      	str	r3, [r7, #4]
 8000724:	687b      	ldr	r3, [r7, #4]

  GPIO_InitStructure.Mode  = GPIO_MODE_OUTPUT_PP;
 8000726:	2301      	movs	r3, #1
 8000728:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 800072a:	2300      	movs	r3, #0
 800072c:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Speed = GPIO_SPEED_LOW;
 800072e:	2300      	movs	r3, #0
 8000730:	617b      	str	r3, [r7, #20]


  for(int i=0; i<LED_MAX_CH; i++)
 8000732:	2300      	movs	r3, #0
 8000734:	61fb      	str	r3, [r7, #28]
 8000736:	e017      	b.n	8000768 <ledInit+0x70>
  {
    GPIO_InitStructure.Pin   = led_tbl[i].pin;
 8000738:	4a10      	ldr	r2, [pc, #64]	@ (800077c <ledInit+0x84>)
 800073a:	69fb      	ldr	r3, [r7, #28]
 800073c:	00db      	lsls	r3, r3, #3
 800073e:	4413      	add	r3, r2
 8000740:	889b      	ldrh	r3, [r3, #4]
 8000742:	60bb      	str	r3, [r7, #8]
    HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStructure);
 8000744:	4a0d      	ldr	r2, [pc, #52]	@ (800077c <ledInit+0x84>)
 8000746:	69fb      	ldr	r3, [r7, #28]
 8000748:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800074c:	f107 0208 	add.w	r2, r7, #8
 8000750:	4611      	mov	r1, r2
 8000752:	4618      	mov	r0, r3
 8000754:	f002 fcf4 	bl	8003140 <HAL_GPIO_Init>

    ledOff(i);
 8000758:	69fb      	ldr	r3, [r7, #28]
 800075a:	b2db      	uxtb	r3, r3
 800075c:	4618      	mov	r0, r3
 800075e:	f000 f80f 	bl	8000780 <ledOff>
  for(int i=0; i<LED_MAX_CH; i++)
 8000762:	69fb      	ldr	r3, [r7, #28]
 8000764:	3301      	adds	r3, #1
 8000766:	61fb      	str	r3, [r7, #28]
 8000768:	69fb      	ldr	r3, [r7, #28]
 800076a:	2b01      	cmp	r3, #1
 800076c:	dde4      	ble.n	8000738 <ledInit+0x40>
  }

  return true;
 800076e:	2301      	movs	r3, #1
}
 8000770:	4618      	mov	r0, r3
 8000772:	3720      	adds	r7, #32
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	40021000 	.word	0x40021000
 800077c:	08007bf8 	.word	0x08007bf8

08000780 <ledOff>:

}


void ledOff(uint8_t ch)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
 8000786:	4603      	mov	r3, r0
 8000788:	71fb      	strb	r3, [r7, #7]
  if(ch >= LED_MAX_CH) return;
 800078a:	79fb      	ldrb	r3, [r7, #7]
 800078c:	2b01      	cmp	r3, #1
 800078e:	d80d      	bhi.n	80007ac <ledOff+0x2c>
  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, GPIO_PIN_RESET);
 8000790:	79fb      	ldrb	r3, [r7, #7]
 8000792:	4a08      	ldr	r2, [pc, #32]	@ (80007b4 <ledOff+0x34>)
 8000794:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000798:	79fb      	ldrb	r3, [r7, #7]
 800079a:	4a06      	ldr	r2, [pc, #24]	@ (80007b4 <ledOff+0x34>)
 800079c:	00db      	lsls	r3, r3, #3
 800079e:	4413      	add	r3, r2
 80007a0:	889b      	ldrh	r3, [r3, #4]
 80007a2:	2200      	movs	r2, #0
 80007a4:	4619      	mov	r1, r3
 80007a6:	f002 fe4d 	bl	8003444 <HAL_GPIO_WritePin>
 80007aa:	e000      	b.n	80007ae <ledOff+0x2e>
  if(ch >= LED_MAX_CH) return;
 80007ac:	bf00      	nop
  //led_tbl[ch].port->ODR &= ~(1 << led_tbl[ch].pin);

}
 80007ae:	3708      	adds	r7, #8
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	08007bf8 	.word	0x08007bf8

080007b8 <ledToggle>:

void ledToggle(uint8_t ch)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
 80007be:	4603      	mov	r3, r0
 80007c0:	71fb      	strb	r3, [r7, #7]
  if(ch >= LED_MAX_CH) return;
 80007c2:	79fb      	ldrb	r3, [r7, #7]
 80007c4:	2b01      	cmp	r3, #1
 80007c6:	d80d      	bhi.n	80007e4 <ledToggle+0x2c>
  HAL_GPIO_TogglePin(led_tbl[ch].port, led_tbl[ch].pin);
 80007c8:	79fb      	ldrb	r3, [r7, #7]
 80007ca:	4a08      	ldr	r2, [pc, #32]	@ (80007ec <ledToggle+0x34>)
 80007cc:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80007d0:	79fb      	ldrb	r3, [r7, #7]
 80007d2:	4906      	ldr	r1, [pc, #24]	@ (80007ec <ledToggle+0x34>)
 80007d4:	00db      	lsls	r3, r3, #3
 80007d6:	440b      	add	r3, r1
 80007d8:	889b      	ldrh	r3, [r3, #4]
 80007da:	4619      	mov	r1, r3
 80007dc:	4610      	mov	r0, r2
 80007de:	f002 fe49 	bl	8003474 <HAL_GPIO_TogglePin>
 80007e2:	e000      	b.n	80007e6 <ledToggle+0x2e>
  if(ch >= LED_MAX_CH) return;
 80007e4:	bf00      	nop
}
 80007e6:	3708      	adds	r7, #8
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	08007bf8 	.word	0x08007bf8

080007f0 <usbInit>:
#endif



bool usbInit(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b083      	sub	sp, #12
 80007f4:	af00      	add	r7, sp, #0
  bool ret = true;
 80007f6:	2301      	movs	r3, #1
 80007f8:	71fb      	strb	r3, [r7, #7]


#ifdef _USE_HW_CLI
  cliAdd("usb", cliCmd);
#endif
  return ret;
 80007fa:	79fb      	ldrb	r3, [r7, #7]
}
 80007fc:	4618      	mov	r0, r3
 80007fe:	370c      	adds	r7, #12
 8000800:	46bd      	mov	sp, r7
 8000802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000806:	4770      	bx	lr

08000808 <usbBegin>:
{
  return is_usb_mode;
}

bool usbBegin(UsbMode usb_mode)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b084      	sub	sp, #16
 800080c:	af00      	add	r7, sp, #0
 800080e:	4603      	mov	r3, r0
 8000810:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 8000812:	2300      	movs	r3, #0
 8000814:	73fb      	strb	r3, [r7, #15]


#if HW_USE_CDC == 1

  if (usb_mode == USB_CDC_MODE)
 8000816:	79fb      	ldrb	r3, [r7, #7]
 8000818:	2b01      	cmp	r3, #1
 800081a:	d12a      	bne.n	8000872 <usbBegin+0x6a>
  {
    if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK)
 800081c:	2200      	movs	r2, #0
 800081e:	4919      	ldr	r1, [pc, #100]	@ (8000884 <usbBegin+0x7c>)
 8000820:	4819      	ldr	r0, [pc, #100]	@ (8000888 <usbBegin+0x80>)
 8000822:	f000 f845 	bl	80008b0 <USBD_Init>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <usbBegin+0x28>
    {
      return false;
 800082c:	2300      	movs	r3, #0
 800082e:	e024      	b.n	800087a <usbBegin+0x72>
    }
    if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8000830:	4916      	ldr	r1, [pc, #88]	@ (800088c <usbBegin+0x84>)
 8000832:	4815      	ldr	r0, [pc, #84]	@ (8000888 <usbBegin+0x80>)
 8000834:	f000 f86c 	bl	8000910 <USBD_RegisterClass>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <usbBegin+0x3a>
    {
      return false;
 800083e:	2300      	movs	r3, #0
 8000840:	e01b      	b.n	800087a <usbBegin+0x72>
    }
    if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8000842:	4913      	ldr	r1, [pc, #76]	@ (8000890 <usbBegin+0x88>)
 8000844:	4810      	ldr	r0, [pc, #64]	@ (8000888 <usbBegin+0x80>)
 8000846:	f001 fbcf 	bl	8001fe8 <USBD_CDC_RegisterInterface>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <usbBegin+0x4c>
    {
      return false;
 8000850:	2300      	movs	r3, #0
 8000852:	e012      	b.n	800087a <usbBegin+0x72>
    }
    if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8000854:	480c      	ldr	r0, [pc, #48]	@ (8000888 <usbBegin+0x80>)
 8000856:	f000 f882 	bl	800095e <USBD_Start>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <usbBegin+0x5c>
    {
      return false;
 8000860:	2300      	movs	r3, #0
 8000862:	e00a      	b.n	800087a <usbBegin+0x72>
    }


    cdcInit();
 8000864:	f7ff ff10 	bl	8000688 <cdcInit>

//    logPrintf("usbBegin     \t\t: CDC_MODE\r\n");

    is_usb_mode = USB_CDC_MODE;
 8000868:	4b0a      	ldr	r3, [pc, #40]	@ (8000894 <usbBegin+0x8c>)
 800086a:	2201      	movs	r2, #1
 800086c:	701a      	strb	r2, [r3, #0]
    ret = true;
 800086e:	2301      	movs	r3, #1
 8000870:	73fb      	strb	r3, [r7, #15]
    ret = true;
  }
#endif


  is_init = ret;
 8000872:	4a09      	ldr	r2, [pc, #36]	@ (8000898 <usbBegin+0x90>)
 8000874:	7bfb      	ldrb	r3, [r7, #15]
 8000876:	7013      	strb	r3, [r2, #0]

  return ret;
 8000878:	7bfb      	ldrb	r3, [r7, #15]
}
 800087a:	4618      	mov	r0, r3
 800087c:	3710      	adds	r7, #16
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	20000130 	.word	0x20000130
 8000888:	200001ac 	.word	0x200001ac
 800088c:	20000010 	.word	0x20000010
 8000890:	20000114 	.word	0x20000114
 8000894:	200001aa 	.word	0x200001aa
 8000898:	200001a9 	.word	0x200001a9

0800089c <USB_LP_IRQHandler>:




void USB_LP_IRQHandler(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80008a0:	4802      	ldr	r0, [pc, #8]	@ (80008ac <USB_LP_IRQHandler+0x10>)
 80008a2:	f002 fef1 	bl	8003688 <HAL_PCD_IRQHandler>
}
 80008a6:	bf00      	nop
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	2000167c 	.word	0x2000167c

080008b0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b086      	sub	sp, #24
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	60f8      	str	r0, [r7, #12]
 80008b8:	60b9      	str	r1, [r7, #8]
 80008ba:	4613      	mov	r3, r2
 80008bc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d101      	bne.n	80008c8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80008c4:	2303      	movs	r3, #3
 80008c6:	e01f      	b.n	8000908 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	2200      	movs	r2, #0
 80008cc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	2200      	movs	r2, #0
 80008d4:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	2200      	movs	r2, #0
 80008dc:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80008e0:	68bb      	ldr	r3, [r7, #8]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d003      	beq.n	80008ee <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	68ba      	ldr	r2, [r7, #8]
 80008ea:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	2201      	movs	r2, #1
 80008f2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	79fa      	ldrb	r2, [r7, #7]
 80008fa:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80008fc:	68f8      	ldr	r0, [r7, #12]
 80008fe:	f002 f85b 	bl	80029b8 <USBD_LL_Init>
 8000902:	4603      	mov	r3, r0
 8000904:	75fb      	strb	r3, [r7, #23]

  return ret;
 8000906:	7dfb      	ldrb	r3, [r7, #23]
}
 8000908:	4618      	mov	r0, r3
 800090a:	3718      	adds	r7, #24
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}

08000910 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b084      	sub	sp, #16
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
 8000918:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800091a:	2300      	movs	r3, #0
 800091c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800091e:	683b      	ldr	r3, [r7, #0]
 8000920:	2b00      	cmp	r3, #0
 8000922:	d101      	bne.n	8000928 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8000924:	2303      	movs	r3, #3
 8000926:	e016      	b.n	8000956 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	683a      	ldr	r2, [r7, #0]
 800092c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8000936:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000938:	2b00      	cmp	r3, #0
 800093a:	d00b      	beq.n	8000954 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8000942:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000944:	f107 020e 	add.w	r2, r7, #14
 8000948:	4610      	mov	r0, r2
 800094a:	4798      	blx	r3
 800094c:	4602      	mov	r2, r0
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8000954:	2300      	movs	r3, #0
}
 8000956:	4618      	mov	r0, r3
 8000958:	3710      	adds	r7, #16
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}

0800095e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800095e:	b580      	push	{r7, lr}
 8000960:	b082      	sub	sp, #8
 8000962:	af00      	add	r7, sp, #0
 8000964:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8000966:	6878      	ldr	r0, [r7, #4]
 8000968:	f002 f886 	bl	8002a78 <USBD_LL_Start>
 800096c:	4603      	mov	r3, r0
}
 800096e:	4618      	mov	r0, r3
 8000970:	3708      	adds	r7, #8
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}

08000976 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8000976:	b480      	push	{r7}
 8000978:	b083      	sub	sp, #12
 800097a:	af00      	add	r7, sp, #0
 800097c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800097e:	2300      	movs	r3, #0
}
 8000980:	4618      	mov	r0, r3
 8000982:	370c      	adds	r7, #12
 8000984:	46bd      	mov	sp, r7
 8000986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098a:	4770      	bx	lr

0800098c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b084      	sub	sp, #16
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
 8000994:	460b      	mov	r3, r1
 8000996:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8000998:	2303      	movs	r3, #3
 800099a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d009      	beq.n	80009ba <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	78fa      	ldrb	r2, [r7, #3]
 80009b0:	4611      	mov	r1, r2
 80009b2:	6878      	ldr	r0, [r7, #4]
 80009b4:	4798      	blx	r3
 80009b6:	4603      	mov	r3, r0
 80009b8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80009ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80009bc:	4618      	mov	r0, r3
 80009be:	3710      	adds	r7, #16
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}

080009c4 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
 80009cc:	460b      	mov	r3, r1
 80009ce:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d007      	beq.n	80009ea <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80009e0:	685b      	ldr	r3, [r3, #4]
 80009e2:	78fa      	ldrb	r2, [r7, #3]
 80009e4:	4611      	mov	r1, r2
 80009e6:	6878      	ldr	r0, [r7, #4]
 80009e8:	4798      	blx	r3
  }

  return USBD_OK;
 80009ea:	2300      	movs	r3, #0
}
 80009ec:	4618      	mov	r0, r3
 80009ee:	3708      	adds	r7, #8
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}

080009f4 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b084      	sub	sp, #16
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
 80009fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8000a04:	6839      	ldr	r1, [r7, #0]
 8000a06:	4618      	mov	r0, r3
 8000a08:	f000 ff46 	bl	8001898 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	2201      	movs	r2, #1
 8000a10:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8000a1a:	461a      	mov	r2, r3
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8000a28:	f003 031f 	and.w	r3, r3, #31
 8000a2c:	2b02      	cmp	r3, #2
 8000a2e:	d01a      	beq.n	8000a66 <USBD_LL_SetupStage+0x72>
 8000a30:	2b02      	cmp	r3, #2
 8000a32:	d822      	bhi.n	8000a7a <USBD_LL_SetupStage+0x86>
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d002      	beq.n	8000a3e <USBD_LL_SetupStage+0x4a>
 8000a38:	2b01      	cmp	r3, #1
 8000a3a:	d00a      	beq.n	8000a52 <USBD_LL_SetupStage+0x5e>
 8000a3c:	e01d      	b.n	8000a7a <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8000a44:	4619      	mov	r1, r3
 8000a46:	6878      	ldr	r0, [r7, #4]
 8000a48:	f000 f9ee 	bl	8000e28 <USBD_StdDevReq>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	73fb      	strb	r3, [r7, #15]
      break;
 8000a50:	e020      	b.n	8000a94 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8000a58:	4619      	mov	r1, r3
 8000a5a:	6878      	ldr	r0, [r7, #4]
 8000a5c:	f000 fa52 	bl	8000f04 <USBD_StdItfReq>
 8000a60:	4603      	mov	r3, r0
 8000a62:	73fb      	strb	r3, [r7, #15]
      break;
 8000a64:	e016      	b.n	8000a94 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	6878      	ldr	r0, [r7, #4]
 8000a70:	f000 fa91 	bl	8000f96 <USBD_StdEPReq>
 8000a74:	4603      	mov	r3, r0
 8000a76:	73fb      	strb	r3, [r7, #15]
      break;
 8000a78:	e00c      	b.n	8000a94 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8000a80:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8000a84:	b2db      	uxtb	r3, r3
 8000a86:	4619      	mov	r1, r3
 8000a88:	6878      	ldr	r0, [r7, #4]
 8000a8a:	f002 f855 	bl	8002b38 <USBD_LL_StallEP>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	73fb      	strb	r3, [r7, #15]
      break;
 8000a92:	bf00      	nop
  }

  return ret;
 8000a94:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	3710      	adds	r7, #16
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}

08000a9e <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8000a9e:	b580      	push	{r7, lr}
 8000aa0:	b086      	sub	sp, #24
 8000aa2:	af00      	add	r7, sp, #0
 8000aa4:	60f8      	str	r0, [r7, #12]
 8000aa6:	460b      	mov	r3, r1
 8000aa8:	607a      	str	r2, [r7, #4]
 8000aaa:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8000aac:	7afb      	ldrb	r3, [r7, #11]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d138      	bne.n	8000b24 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8000ab8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8000ac0:	2b03      	cmp	r3, #3
 8000ac2:	d14a      	bne.n	8000b5a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8000ac4:	693b      	ldr	r3, [r7, #16]
 8000ac6:	689a      	ldr	r2, [r3, #8]
 8000ac8:	693b      	ldr	r3, [r7, #16]
 8000aca:	68db      	ldr	r3, [r3, #12]
 8000acc:	429a      	cmp	r2, r3
 8000ace:	d913      	bls.n	8000af8 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8000ad0:	693b      	ldr	r3, [r7, #16]
 8000ad2:	689a      	ldr	r2, [r3, #8]
 8000ad4:	693b      	ldr	r3, [r7, #16]
 8000ad6:	68db      	ldr	r3, [r3, #12]
 8000ad8:	1ad2      	subs	r2, r2, r3
 8000ada:	693b      	ldr	r3, [r7, #16]
 8000adc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8000ade:	693b      	ldr	r3, [r7, #16]
 8000ae0:	68da      	ldr	r2, [r3, #12]
 8000ae2:	693b      	ldr	r3, [r7, #16]
 8000ae4:	689b      	ldr	r3, [r3, #8]
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	bf28      	it	cs
 8000aea:	4613      	movcs	r3, r2
 8000aec:	461a      	mov	r2, r3
 8000aee:	6879      	ldr	r1, [r7, #4]
 8000af0:	68f8      	ldr	r0, [r7, #12]
 8000af2:	f000 ffc5 	bl	8001a80 <USBD_CtlContinueRx>
 8000af6:	e030      	b.n	8000b5a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8000afe:	b2db      	uxtb	r3, r3
 8000b00:	2b03      	cmp	r3, #3
 8000b02:	d10b      	bne.n	8000b1c <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8000b0a:	691b      	ldr	r3, [r3, #16]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d005      	beq.n	8000b1c <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8000b16:	691b      	ldr	r3, [r3, #16]
 8000b18:	68f8      	ldr	r0, [r7, #12]
 8000b1a:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8000b1c:	68f8      	ldr	r0, [r7, #12]
 8000b1e:	f000 ffc0 	bl	8001aa2 <USBD_CtlSendStatus>
 8000b22:	e01a      	b.n	8000b5a <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8000b2a:	b2db      	uxtb	r3, r3
 8000b2c:	2b03      	cmp	r3, #3
 8000b2e:	d114      	bne.n	8000b5a <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8000b36:	699b      	ldr	r3, [r3, #24]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d00e      	beq.n	8000b5a <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8000b42:	699b      	ldr	r3, [r3, #24]
 8000b44:	7afa      	ldrb	r2, [r7, #11]
 8000b46:	4611      	mov	r1, r2
 8000b48:	68f8      	ldr	r0, [r7, #12]
 8000b4a:	4798      	blx	r3
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8000b50:	7dfb      	ldrb	r3, [r7, #23]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8000b56:	7dfb      	ldrb	r3, [r7, #23]
 8000b58:	e000      	b.n	8000b5c <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8000b5a:	2300      	movs	r3, #0
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	3718      	adds	r7, #24
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}

08000b64 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b086      	sub	sp, #24
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	60f8      	str	r0, [r7, #12]
 8000b6c:	460b      	mov	r3, r1
 8000b6e:	607a      	str	r2, [r7, #4]
 8000b70:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8000b72:	7afb      	ldrb	r3, [r7, #11]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d16b      	bne.n	8000c50 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	3314      	adds	r3, #20
 8000b7c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8000b84:	2b02      	cmp	r3, #2
 8000b86:	d156      	bne.n	8000c36 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8000b88:	693b      	ldr	r3, [r7, #16]
 8000b8a:	689a      	ldr	r2, [r3, #8]
 8000b8c:	693b      	ldr	r3, [r7, #16]
 8000b8e:	68db      	ldr	r3, [r3, #12]
 8000b90:	429a      	cmp	r2, r3
 8000b92:	d914      	bls.n	8000bbe <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8000b94:	693b      	ldr	r3, [r7, #16]
 8000b96:	689a      	ldr	r2, [r3, #8]
 8000b98:	693b      	ldr	r3, [r7, #16]
 8000b9a:	68db      	ldr	r3, [r3, #12]
 8000b9c:	1ad2      	subs	r2, r2, r3
 8000b9e:	693b      	ldr	r3, [r7, #16]
 8000ba0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8000ba2:	693b      	ldr	r3, [r7, #16]
 8000ba4:	689b      	ldr	r3, [r3, #8]
 8000ba6:	461a      	mov	r2, r3
 8000ba8:	6879      	ldr	r1, [r7, #4]
 8000baa:	68f8      	ldr	r0, [r7, #12]
 8000bac:	f000 ff3a 	bl	8001a24 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	68f8      	ldr	r0, [r7, #12]
 8000bb8:	f002 f868 	bl	8002c8c <USBD_LL_PrepareReceive>
 8000bbc:	e03b      	b.n	8000c36 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8000bbe:	693b      	ldr	r3, [r7, #16]
 8000bc0:	68da      	ldr	r2, [r3, #12]
 8000bc2:	693b      	ldr	r3, [r7, #16]
 8000bc4:	689b      	ldr	r3, [r3, #8]
 8000bc6:	429a      	cmp	r2, r3
 8000bc8:	d11c      	bne.n	8000c04 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8000bca:	693b      	ldr	r3, [r7, #16]
 8000bcc:	685a      	ldr	r2, [r3, #4]
 8000bce:	693b      	ldr	r3, [r7, #16]
 8000bd0:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8000bd2:	429a      	cmp	r2, r3
 8000bd4:	d316      	bcc.n	8000c04 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8000bd6:	693b      	ldr	r3, [r7, #16]
 8000bd8:	685a      	ldr	r2, [r3, #4]
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8000be0:	429a      	cmp	r2, r3
 8000be2:	d20f      	bcs.n	8000c04 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8000be4:	2200      	movs	r2, #0
 8000be6:	2100      	movs	r1, #0
 8000be8:	68f8      	ldr	r0, [r7, #12]
 8000bea:	f000 ff1b 	bl	8001a24 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	2100      	movs	r1, #0
 8000bfc:	68f8      	ldr	r0, [r7, #12]
 8000bfe:	f002 f845 	bl	8002c8c <USBD_LL_PrepareReceive>
 8000c02:	e018      	b.n	8000c36 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8000c0a:	b2db      	uxtb	r3, r3
 8000c0c:	2b03      	cmp	r3, #3
 8000c0e:	d10b      	bne.n	8000c28 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8000c16:	68db      	ldr	r3, [r3, #12]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d005      	beq.n	8000c28 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8000c22:	68db      	ldr	r3, [r3, #12]
 8000c24:	68f8      	ldr	r0, [r7, #12]
 8000c26:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8000c28:	2180      	movs	r1, #128	@ 0x80
 8000c2a:	68f8      	ldr	r0, [r7, #12]
 8000c2c:	f001 ff84 	bl	8002b38 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8000c30:	68f8      	ldr	r0, [r7, #12]
 8000c32:	f000 ff49 	bl	8001ac8 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8000c3c:	2b01      	cmp	r3, #1
 8000c3e:	d122      	bne.n	8000c86 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8000c40:	68f8      	ldr	r0, [r7, #12]
 8000c42:	f7ff fe98 	bl	8000976 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	2200      	movs	r2, #0
 8000c4a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8000c4e:	e01a      	b.n	8000c86 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8000c56:	b2db      	uxtb	r3, r3
 8000c58:	2b03      	cmp	r3, #3
 8000c5a:	d114      	bne.n	8000c86 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8000c62:	695b      	ldr	r3, [r3, #20]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d00e      	beq.n	8000c86 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8000c6e:	695b      	ldr	r3, [r3, #20]
 8000c70:	7afa      	ldrb	r2, [r7, #11]
 8000c72:	4611      	mov	r1, r2
 8000c74:	68f8      	ldr	r0, [r7, #12]
 8000c76:	4798      	blx	r3
 8000c78:	4603      	mov	r3, r0
 8000c7a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8000c7c:	7dfb      	ldrb	r3, [r7, #23]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8000c82:	7dfb      	ldrb	r3, [r7, #23]
 8000c84:	e000      	b.n	8000c88 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8000c86:	2300      	movs	r3, #0
}
 8000c88:	4618      	mov	r0, r3
 8000c8a:	3718      	adds	r7, #24
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}

08000c90 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	2200      	movs	r2, #0
 8000cac:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d101      	bne.n	8000cc4 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8000cc0:	2303      	movs	r3, #3
 8000cc2:	e02f      	b.n	8000d24 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d00f      	beq.n	8000cee <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8000cd4:	685b      	ldr	r3, [r3, #4]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d009      	beq.n	8000cee <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8000ce0:	685b      	ldr	r3, [r3, #4]
 8000ce2:	687a      	ldr	r2, [r7, #4]
 8000ce4:	6852      	ldr	r2, [r2, #4]
 8000ce6:	b2d2      	uxtb	r2, r2
 8000ce8:	4611      	mov	r1, r2
 8000cea:	6878      	ldr	r0, [r7, #4]
 8000cec:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8000cee:	2340      	movs	r3, #64	@ 0x40
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	6878      	ldr	r0, [r7, #4]
 8000cf6:	f001 feda 	bl	8002aae <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	2240      	movs	r2, #64	@ 0x40
 8000d06:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8000d0a:	2340      	movs	r3, #64	@ 0x40
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	2180      	movs	r1, #128	@ 0x80
 8000d10:	6878      	ldr	r0, [r7, #4]
 8000d12:	f001 fecc 	bl	8002aae <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	2201      	movs	r2, #1
 8000d1a:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	2240      	movs	r2, #64	@ 0x40
 8000d20:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8000d22:	2300      	movs	r3, #0
}
 8000d24:	4618      	mov	r0, r3
 8000d26:	3708      	adds	r7, #8
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}

08000d2c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b083      	sub	sp, #12
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
 8000d34:	460b      	mov	r3, r1
 8000d36:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	78fa      	ldrb	r2, [r7, #3]
 8000d3c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8000d3e:	2300      	movs	r3, #0
}
 8000d40:	4618      	mov	r0, r3
 8000d42:	370c      	adds	r7, #12
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr

08000d4c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8000d5a:	b2da      	uxtb	r2, r3
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	2204      	movs	r2, #4
 8000d66:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8000d6a:	2300      	movs	r3, #0
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	370c      	adds	r7, #12
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr

08000d78 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8000d86:	b2db      	uxtb	r3, r3
 8000d88:	2b04      	cmp	r3, #4
 8000d8a:	d106      	bne.n	8000d9a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8000d92:	b2da      	uxtb	r2, r3
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8000d9a:	2300      	movs	r3, #0
}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	370c      	adds	r7, #12
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr

08000da8 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d101      	bne.n	8000dbe <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8000dba:	2303      	movs	r3, #3
 8000dbc:	e012      	b.n	8000de4 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8000dc4:	b2db      	uxtb	r3, r3
 8000dc6:	2b03      	cmp	r3, #3
 8000dc8:	d10b      	bne.n	8000de2 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8000dd0:	69db      	ldr	r3, [r3, #28]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d005      	beq.n	8000de2 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8000ddc:	69db      	ldr	r3, [r3, #28]
 8000dde:	6878      	ldr	r0, [r7, #4]
 8000de0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8000de2:	2300      	movs	r3, #0
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	3708      	adds	r7, #8
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}

08000dec <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b087      	sub	sp, #28
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8000dfe:	697b      	ldr	r3, [r7, #20]
 8000e00:	3301      	adds	r3, #1
 8000e02:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8000e0a:	8a3b      	ldrh	r3, [r7, #16]
 8000e0c:	021b      	lsls	r3, r3, #8
 8000e0e:	b21a      	sxth	r2, r3
 8000e10:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000e14:	4313      	orrs	r3, r2
 8000e16:	b21b      	sxth	r3, r3
 8000e18:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8000e1a:	89fb      	ldrh	r3, [r7, #14]
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	371c      	adds	r7, #28
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr

08000e28 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b084      	sub	sp, #16
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
 8000e30:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8000e32:	2300      	movs	r3, #0
 8000e34:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8000e3e:	2b40      	cmp	r3, #64	@ 0x40
 8000e40:	d005      	beq.n	8000e4e <USBD_StdDevReq+0x26>
 8000e42:	2b40      	cmp	r3, #64	@ 0x40
 8000e44:	d853      	bhi.n	8000eee <USBD_StdDevReq+0xc6>
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d00b      	beq.n	8000e62 <USBD_StdDevReq+0x3a>
 8000e4a:	2b20      	cmp	r3, #32
 8000e4c:	d14f      	bne.n	8000eee <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8000e54:	689b      	ldr	r3, [r3, #8]
 8000e56:	6839      	ldr	r1, [r7, #0]
 8000e58:	6878      	ldr	r0, [r7, #4]
 8000e5a:	4798      	blx	r3
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	73fb      	strb	r3, [r7, #15]
      break;
 8000e60:	e04a      	b.n	8000ef8 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	785b      	ldrb	r3, [r3, #1]
 8000e66:	2b09      	cmp	r3, #9
 8000e68:	d83b      	bhi.n	8000ee2 <USBD_StdDevReq+0xba>
 8000e6a:	a201      	add	r2, pc, #4	@ (adr r2, 8000e70 <USBD_StdDevReq+0x48>)
 8000e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e70:	08000ec5 	.word	0x08000ec5
 8000e74:	08000ed9 	.word	0x08000ed9
 8000e78:	08000ee3 	.word	0x08000ee3
 8000e7c:	08000ecf 	.word	0x08000ecf
 8000e80:	08000ee3 	.word	0x08000ee3
 8000e84:	08000ea3 	.word	0x08000ea3
 8000e88:	08000e99 	.word	0x08000e99
 8000e8c:	08000ee3 	.word	0x08000ee3
 8000e90:	08000ebb 	.word	0x08000ebb
 8000e94:	08000ead 	.word	0x08000ead
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8000e98:	6839      	ldr	r1, [r7, #0]
 8000e9a:	6878      	ldr	r0, [r7, #4]
 8000e9c:	f000 f9de 	bl	800125c <USBD_GetDescriptor>
          break;
 8000ea0:	e024      	b.n	8000eec <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8000ea2:	6839      	ldr	r1, [r7, #0]
 8000ea4:	6878      	ldr	r0, [r7, #4]
 8000ea6:	f000 fb6d 	bl	8001584 <USBD_SetAddress>
          break;
 8000eaa:	e01f      	b.n	8000eec <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8000eac:	6839      	ldr	r1, [r7, #0]
 8000eae:	6878      	ldr	r0, [r7, #4]
 8000eb0:	f000 fbac 	bl	800160c <USBD_SetConfig>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	73fb      	strb	r3, [r7, #15]
          break;
 8000eb8:	e018      	b.n	8000eec <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8000eba:	6839      	ldr	r1, [r7, #0]
 8000ebc:	6878      	ldr	r0, [r7, #4]
 8000ebe:	f000 fc4b 	bl	8001758 <USBD_GetConfig>
          break;
 8000ec2:	e013      	b.n	8000eec <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8000ec4:	6839      	ldr	r1, [r7, #0]
 8000ec6:	6878      	ldr	r0, [r7, #4]
 8000ec8:	f000 fc7c 	bl	80017c4 <USBD_GetStatus>
          break;
 8000ecc:	e00e      	b.n	8000eec <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8000ece:	6839      	ldr	r1, [r7, #0]
 8000ed0:	6878      	ldr	r0, [r7, #4]
 8000ed2:	f000 fcab 	bl	800182c <USBD_SetFeature>
          break;
 8000ed6:	e009      	b.n	8000eec <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8000ed8:	6839      	ldr	r1, [r7, #0]
 8000eda:	6878      	ldr	r0, [r7, #4]
 8000edc:	f000 fcba 	bl	8001854 <USBD_ClrFeature>
          break;
 8000ee0:	e004      	b.n	8000eec <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8000ee2:	6839      	ldr	r1, [r7, #0]
 8000ee4:	6878      	ldr	r0, [r7, #4]
 8000ee6:	f000 fd11 	bl	800190c <USBD_CtlError>
          break;
 8000eea:	bf00      	nop
      }
      break;
 8000eec:	e004      	b.n	8000ef8 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8000eee:	6839      	ldr	r1, [r7, #0]
 8000ef0:	6878      	ldr	r0, [r7, #4]
 8000ef2:	f000 fd0b 	bl	800190c <USBD_CtlError>
      break;
 8000ef6:	bf00      	nop
  }

  return ret;
 8000ef8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	3710      	adds	r7, #16
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop

08000f04 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b084      	sub	sp, #16
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
 8000f0c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8000f1a:	2b40      	cmp	r3, #64	@ 0x40
 8000f1c:	d005      	beq.n	8000f2a <USBD_StdItfReq+0x26>
 8000f1e:	2b40      	cmp	r3, #64	@ 0x40
 8000f20:	d82f      	bhi.n	8000f82 <USBD_StdItfReq+0x7e>
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <USBD_StdItfReq+0x26>
 8000f26:	2b20      	cmp	r3, #32
 8000f28:	d12b      	bne.n	8000f82 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8000f30:	b2db      	uxtb	r3, r3
 8000f32:	3b01      	subs	r3, #1
 8000f34:	2b02      	cmp	r3, #2
 8000f36:	d81d      	bhi.n	8000f74 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	889b      	ldrh	r3, [r3, #4]
 8000f3c:	b2db      	uxtb	r3, r3
 8000f3e:	2b01      	cmp	r3, #1
 8000f40:	d813      	bhi.n	8000f6a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8000f48:	689b      	ldr	r3, [r3, #8]
 8000f4a:	6839      	ldr	r1, [r7, #0]
 8000f4c:	6878      	ldr	r0, [r7, #4]
 8000f4e:	4798      	blx	r3
 8000f50:	4603      	mov	r3, r0
 8000f52:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	88db      	ldrh	r3, [r3, #6]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d110      	bne.n	8000f7e <USBD_StdItfReq+0x7a>
 8000f5c:	7bfb      	ldrb	r3, [r7, #15]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d10d      	bne.n	8000f7e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8000f62:	6878      	ldr	r0, [r7, #4]
 8000f64:	f000 fd9d 	bl	8001aa2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8000f68:	e009      	b.n	8000f7e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8000f6a:	6839      	ldr	r1, [r7, #0]
 8000f6c:	6878      	ldr	r0, [r7, #4]
 8000f6e:	f000 fccd 	bl	800190c <USBD_CtlError>
          break;
 8000f72:	e004      	b.n	8000f7e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8000f74:	6839      	ldr	r1, [r7, #0]
 8000f76:	6878      	ldr	r0, [r7, #4]
 8000f78:	f000 fcc8 	bl	800190c <USBD_CtlError>
          break;
 8000f7c:	e000      	b.n	8000f80 <USBD_StdItfReq+0x7c>
          break;
 8000f7e:	bf00      	nop
      }
      break;
 8000f80:	e004      	b.n	8000f8c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8000f82:	6839      	ldr	r1, [r7, #0]
 8000f84:	6878      	ldr	r0, [r7, #4]
 8000f86:	f000 fcc1 	bl	800190c <USBD_CtlError>
      break;
 8000f8a:	bf00      	nop
  }

  return ret;
 8000f8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3710      	adds	r7, #16
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}

08000f96 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8000f96:	b580      	push	{r7, lr}
 8000f98:	b084      	sub	sp, #16
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	6078      	str	r0, [r7, #4]
 8000f9e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	889b      	ldrh	r3, [r3, #4]
 8000fa8:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8000fb2:	2b40      	cmp	r3, #64	@ 0x40
 8000fb4:	d007      	beq.n	8000fc6 <USBD_StdEPReq+0x30>
 8000fb6:	2b40      	cmp	r3, #64	@ 0x40
 8000fb8:	f200 8145 	bhi.w	8001246 <USBD_StdEPReq+0x2b0>
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d00c      	beq.n	8000fda <USBD_StdEPReq+0x44>
 8000fc0:	2b20      	cmp	r3, #32
 8000fc2:	f040 8140 	bne.w	8001246 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8000fcc:	689b      	ldr	r3, [r3, #8]
 8000fce:	6839      	ldr	r1, [r7, #0]
 8000fd0:	6878      	ldr	r0, [r7, #4]
 8000fd2:	4798      	blx	r3
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	73fb      	strb	r3, [r7, #15]
      break;
 8000fd8:	e13a      	b.n	8001250 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	785b      	ldrb	r3, [r3, #1]
 8000fde:	2b03      	cmp	r3, #3
 8000fe0:	d007      	beq.n	8000ff2 <USBD_StdEPReq+0x5c>
 8000fe2:	2b03      	cmp	r3, #3
 8000fe4:	f300 8129 	bgt.w	800123a <USBD_StdEPReq+0x2a4>
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d07f      	beq.n	80010ec <USBD_StdEPReq+0x156>
 8000fec:	2b01      	cmp	r3, #1
 8000fee:	d03c      	beq.n	800106a <USBD_StdEPReq+0xd4>
 8000ff0:	e123      	b.n	800123a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8000ff8:	b2db      	uxtb	r3, r3
 8000ffa:	2b02      	cmp	r3, #2
 8000ffc:	d002      	beq.n	8001004 <USBD_StdEPReq+0x6e>
 8000ffe:	2b03      	cmp	r3, #3
 8001000:	d016      	beq.n	8001030 <USBD_StdEPReq+0x9a>
 8001002:	e02c      	b.n	800105e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8001004:	7bbb      	ldrb	r3, [r7, #14]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d00d      	beq.n	8001026 <USBD_StdEPReq+0x90>
 800100a:	7bbb      	ldrb	r3, [r7, #14]
 800100c:	2b80      	cmp	r3, #128	@ 0x80
 800100e:	d00a      	beq.n	8001026 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8001010:	7bbb      	ldrb	r3, [r7, #14]
 8001012:	4619      	mov	r1, r3
 8001014:	6878      	ldr	r0, [r7, #4]
 8001016:	f001 fd8f 	bl	8002b38 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800101a:	2180      	movs	r1, #128	@ 0x80
 800101c:	6878      	ldr	r0, [r7, #4]
 800101e:	f001 fd8b 	bl	8002b38 <USBD_LL_StallEP>
 8001022:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8001024:	e020      	b.n	8001068 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8001026:	6839      	ldr	r1, [r7, #0]
 8001028:	6878      	ldr	r0, [r7, #4]
 800102a:	f000 fc6f 	bl	800190c <USBD_CtlError>
              break;
 800102e:	e01b      	b.n	8001068 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	885b      	ldrh	r3, [r3, #2]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d10e      	bne.n	8001056 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8001038:	7bbb      	ldrb	r3, [r7, #14]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d00b      	beq.n	8001056 <USBD_StdEPReq+0xc0>
 800103e:	7bbb      	ldrb	r3, [r7, #14]
 8001040:	2b80      	cmp	r3, #128	@ 0x80
 8001042:	d008      	beq.n	8001056 <USBD_StdEPReq+0xc0>
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	88db      	ldrh	r3, [r3, #6]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d104      	bne.n	8001056 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800104c:	7bbb      	ldrb	r3, [r7, #14]
 800104e:	4619      	mov	r1, r3
 8001050:	6878      	ldr	r0, [r7, #4]
 8001052:	f001 fd71 	bl	8002b38 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8001056:	6878      	ldr	r0, [r7, #4]
 8001058:	f000 fd23 	bl	8001aa2 <USBD_CtlSendStatus>

              break;
 800105c:	e004      	b.n	8001068 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800105e:	6839      	ldr	r1, [r7, #0]
 8001060:	6878      	ldr	r0, [r7, #4]
 8001062:	f000 fc53 	bl	800190c <USBD_CtlError>
              break;
 8001066:	bf00      	nop
          }
          break;
 8001068:	e0ec      	b.n	8001244 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8001070:	b2db      	uxtb	r3, r3
 8001072:	2b02      	cmp	r3, #2
 8001074:	d002      	beq.n	800107c <USBD_StdEPReq+0xe6>
 8001076:	2b03      	cmp	r3, #3
 8001078:	d016      	beq.n	80010a8 <USBD_StdEPReq+0x112>
 800107a:	e030      	b.n	80010de <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800107c:	7bbb      	ldrb	r3, [r7, #14]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d00d      	beq.n	800109e <USBD_StdEPReq+0x108>
 8001082:	7bbb      	ldrb	r3, [r7, #14]
 8001084:	2b80      	cmp	r3, #128	@ 0x80
 8001086:	d00a      	beq.n	800109e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8001088:	7bbb      	ldrb	r3, [r7, #14]
 800108a:	4619      	mov	r1, r3
 800108c:	6878      	ldr	r0, [r7, #4]
 800108e:	f001 fd53 	bl	8002b38 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8001092:	2180      	movs	r1, #128	@ 0x80
 8001094:	6878      	ldr	r0, [r7, #4]
 8001096:	f001 fd4f 	bl	8002b38 <USBD_LL_StallEP>
 800109a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800109c:	e025      	b.n	80010ea <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800109e:	6839      	ldr	r1, [r7, #0]
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	f000 fc33 	bl	800190c <USBD_CtlError>
              break;
 80010a6:	e020      	b.n	80010ea <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	885b      	ldrh	r3, [r3, #2]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d11b      	bne.n	80010e8 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80010b0:	7bbb      	ldrb	r3, [r7, #14]
 80010b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d004      	beq.n	80010c4 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80010ba:	7bbb      	ldrb	r3, [r7, #14]
 80010bc:	4619      	mov	r1, r3
 80010be:	6878      	ldr	r0, [r7, #4]
 80010c0:	f001 fd59 	bl	8002b76 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80010c4:	6878      	ldr	r0, [r7, #4]
 80010c6:	f000 fcec 	bl	8001aa2 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80010d0:	689b      	ldr	r3, [r3, #8]
 80010d2:	6839      	ldr	r1, [r7, #0]
 80010d4:	6878      	ldr	r0, [r7, #4]
 80010d6:	4798      	blx	r3
 80010d8:	4603      	mov	r3, r0
 80010da:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80010dc:	e004      	b.n	80010e8 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80010de:	6839      	ldr	r1, [r7, #0]
 80010e0:	6878      	ldr	r0, [r7, #4]
 80010e2:	f000 fc13 	bl	800190c <USBD_CtlError>
              break;
 80010e6:	e000      	b.n	80010ea <USBD_StdEPReq+0x154>
              break;
 80010e8:	bf00      	nop
          }
          break;
 80010ea:	e0ab      	b.n	8001244 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80010f2:	b2db      	uxtb	r3, r3
 80010f4:	2b02      	cmp	r3, #2
 80010f6:	d002      	beq.n	80010fe <USBD_StdEPReq+0x168>
 80010f8:	2b03      	cmp	r3, #3
 80010fa:	d032      	beq.n	8001162 <USBD_StdEPReq+0x1cc>
 80010fc:	e097      	b.n	800122e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80010fe:	7bbb      	ldrb	r3, [r7, #14]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d007      	beq.n	8001114 <USBD_StdEPReq+0x17e>
 8001104:	7bbb      	ldrb	r3, [r7, #14]
 8001106:	2b80      	cmp	r3, #128	@ 0x80
 8001108:	d004      	beq.n	8001114 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800110a:	6839      	ldr	r1, [r7, #0]
 800110c:	6878      	ldr	r0, [r7, #4]
 800110e:	f000 fbfd 	bl	800190c <USBD_CtlError>
                break;
 8001112:	e091      	b.n	8001238 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8001114:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001118:	2b00      	cmp	r3, #0
 800111a:	da0b      	bge.n	8001134 <USBD_StdEPReq+0x19e>
 800111c:	7bbb      	ldrb	r3, [r7, #14]
 800111e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001122:	4613      	mov	r3, r2
 8001124:	009b      	lsls	r3, r3, #2
 8001126:	4413      	add	r3, r2
 8001128:	009b      	lsls	r3, r3, #2
 800112a:	3310      	adds	r3, #16
 800112c:	687a      	ldr	r2, [r7, #4]
 800112e:	4413      	add	r3, r2
 8001130:	3304      	adds	r3, #4
 8001132:	e00b      	b.n	800114c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8001134:	7bbb      	ldrb	r3, [r7, #14]
 8001136:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800113a:	4613      	mov	r3, r2
 800113c:	009b      	lsls	r3, r3, #2
 800113e:	4413      	add	r3, r2
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001146:	687a      	ldr	r2, [r7, #4]
 8001148:	4413      	add	r3, r2
 800114a:	3304      	adds	r3, #4
 800114c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800114e:	68bb      	ldr	r3, [r7, #8]
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	2202      	movs	r2, #2
 8001158:	4619      	mov	r1, r3
 800115a:	6878      	ldr	r0, [r7, #4]
 800115c:	f000 fc47 	bl	80019ee <USBD_CtlSendData>
              break;
 8001160:	e06a      	b.n	8001238 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8001162:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001166:	2b00      	cmp	r3, #0
 8001168:	da11      	bge.n	800118e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800116a:	7bbb      	ldrb	r3, [r7, #14]
 800116c:	f003 020f 	and.w	r2, r3, #15
 8001170:	6879      	ldr	r1, [r7, #4]
 8001172:	4613      	mov	r3, r2
 8001174:	009b      	lsls	r3, r3, #2
 8001176:	4413      	add	r3, r2
 8001178:	009b      	lsls	r3, r3, #2
 800117a:	440b      	add	r3, r1
 800117c:	3324      	adds	r3, #36	@ 0x24
 800117e:	881b      	ldrh	r3, [r3, #0]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d117      	bne.n	80011b4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8001184:	6839      	ldr	r1, [r7, #0]
 8001186:	6878      	ldr	r0, [r7, #4]
 8001188:	f000 fbc0 	bl	800190c <USBD_CtlError>
                  break;
 800118c:	e054      	b.n	8001238 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800118e:	7bbb      	ldrb	r3, [r7, #14]
 8001190:	f003 020f 	and.w	r2, r3, #15
 8001194:	6879      	ldr	r1, [r7, #4]
 8001196:	4613      	mov	r3, r2
 8001198:	009b      	lsls	r3, r3, #2
 800119a:	4413      	add	r3, r2
 800119c:	009b      	lsls	r3, r3, #2
 800119e:	440b      	add	r3, r1
 80011a0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80011a4:	881b      	ldrh	r3, [r3, #0]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d104      	bne.n	80011b4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80011aa:	6839      	ldr	r1, [r7, #0]
 80011ac:	6878      	ldr	r0, [r7, #4]
 80011ae:	f000 fbad 	bl	800190c <USBD_CtlError>
                  break;
 80011b2:	e041      	b.n	8001238 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80011b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	da0b      	bge.n	80011d4 <USBD_StdEPReq+0x23e>
 80011bc:	7bbb      	ldrb	r3, [r7, #14]
 80011be:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80011c2:	4613      	mov	r3, r2
 80011c4:	009b      	lsls	r3, r3, #2
 80011c6:	4413      	add	r3, r2
 80011c8:	009b      	lsls	r3, r3, #2
 80011ca:	3310      	adds	r3, #16
 80011cc:	687a      	ldr	r2, [r7, #4]
 80011ce:	4413      	add	r3, r2
 80011d0:	3304      	adds	r3, #4
 80011d2:	e00b      	b.n	80011ec <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80011d4:	7bbb      	ldrb	r3, [r7, #14]
 80011d6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80011da:	4613      	mov	r3, r2
 80011dc:	009b      	lsls	r3, r3, #2
 80011de:	4413      	add	r3, r2
 80011e0:	009b      	lsls	r3, r3, #2
 80011e2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80011e6:	687a      	ldr	r2, [r7, #4]
 80011e8:	4413      	add	r3, r2
 80011ea:	3304      	adds	r3, #4
 80011ec:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80011ee:	7bbb      	ldrb	r3, [r7, #14]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d002      	beq.n	80011fa <USBD_StdEPReq+0x264>
 80011f4:	7bbb      	ldrb	r3, [r7, #14]
 80011f6:	2b80      	cmp	r3, #128	@ 0x80
 80011f8:	d103      	bne.n	8001202 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80011fa:	68bb      	ldr	r3, [r7, #8]
 80011fc:	2200      	movs	r2, #0
 80011fe:	601a      	str	r2, [r3, #0]
 8001200:	e00e      	b.n	8001220 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8001202:	7bbb      	ldrb	r3, [r7, #14]
 8001204:	4619      	mov	r1, r3
 8001206:	6878      	ldr	r0, [r7, #4]
 8001208:	f001 fcd4 	bl	8002bb4 <USBD_LL_IsStallEP>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d003      	beq.n	800121a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8001212:	68bb      	ldr	r3, [r7, #8]
 8001214:	2201      	movs	r2, #1
 8001216:	601a      	str	r2, [r3, #0]
 8001218:	e002      	b.n	8001220 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800121a:	68bb      	ldr	r3, [r7, #8]
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	2202      	movs	r2, #2
 8001224:	4619      	mov	r1, r3
 8001226:	6878      	ldr	r0, [r7, #4]
 8001228:	f000 fbe1 	bl	80019ee <USBD_CtlSendData>
              break;
 800122c:	e004      	b.n	8001238 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800122e:	6839      	ldr	r1, [r7, #0]
 8001230:	6878      	ldr	r0, [r7, #4]
 8001232:	f000 fb6b 	bl	800190c <USBD_CtlError>
              break;
 8001236:	bf00      	nop
          }
          break;
 8001238:	e004      	b.n	8001244 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800123a:	6839      	ldr	r1, [r7, #0]
 800123c:	6878      	ldr	r0, [r7, #4]
 800123e:	f000 fb65 	bl	800190c <USBD_CtlError>
          break;
 8001242:	bf00      	nop
      }
      break;
 8001244:	e004      	b.n	8001250 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8001246:	6839      	ldr	r1, [r7, #0]
 8001248:	6878      	ldr	r0, [r7, #4]
 800124a:	f000 fb5f 	bl	800190c <USBD_CtlError>
      break;
 800124e:	bf00      	nop
  }

  return ret;
 8001250:	7bfb      	ldrb	r3, [r7, #15]
}
 8001252:	4618      	mov	r0, r3
 8001254:	3710      	adds	r7, #16
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
	...

0800125c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
 8001264:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8001266:	2300      	movs	r3, #0
 8001268:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800126a:	2300      	movs	r3, #0
 800126c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800126e:	2300      	movs	r3, #0
 8001270:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	885b      	ldrh	r3, [r3, #2]
 8001276:	0a1b      	lsrs	r3, r3, #8
 8001278:	b29b      	uxth	r3, r3
 800127a:	3b01      	subs	r3, #1
 800127c:	2b0e      	cmp	r3, #14
 800127e:	f200 8152 	bhi.w	8001526 <USBD_GetDescriptor+0x2ca>
 8001282:	a201      	add	r2, pc, #4	@ (adr r2, 8001288 <USBD_GetDescriptor+0x2c>)
 8001284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001288:	080012f9 	.word	0x080012f9
 800128c:	08001311 	.word	0x08001311
 8001290:	08001351 	.word	0x08001351
 8001294:	08001527 	.word	0x08001527
 8001298:	08001527 	.word	0x08001527
 800129c:	080014c7 	.word	0x080014c7
 80012a0:	080014f3 	.word	0x080014f3
 80012a4:	08001527 	.word	0x08001527
 80012a8:	08001527 	.word	0x08001527
 80012ac:	08001527 	.word	0x08001527
 80012b0:	08001527 	.word	0x08001527
 80012b4:	08001527 	.word	0x08001527
 80012b8:	08001527 	.word	0x08001527
 80012bc:	08001527 	.word	0x08001527
 80012c0:	080012c5 	.word	0x080012c5
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80012ca:	69db      	ldr	r3, [r3, #28]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d00b      	beq.n	80012e8 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80012d6:	69db      	ldr	r3, [r3, #28]
 80012d8:	687a      	ldr	r2, [r7, #4]
 80012da:	7c12      	ldrb	r2, [r2, #16]
 80012dc:	f107 0108 	add.w	r1, r7, #8
 80012e0:	4610      	mov	r0, r2
 80012e2:	4798      	blx	r3
 80012e4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80012e6:	e126      	b.n	8001536 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80012e8:	6839      	ldr	r1, [r7, #0]
 80012ea:	6878      	ldr	r0, [r7, #4]
 80012ec:	f000 fb0e 	bl	800190c <USBD_CtlError>
        err++;
 80012f0:	7afb      	ldrb	r3, [r7, #11]
 80012f2:	3301      	adds	r3, #1
 80012f4:	72fb      	strb	r3, [r7, #11]
      break;
 80012f6:	e11e      	b.n	8001536 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	687a      	ldr	r2, [r7, #4]
 8001302:	7c12      	ldrb	r2, [r2, #16]
 8001304:	f107 0108 	add.w	r1, r7, #8
 8001308:	4610      	mov	r0, r2
 800130a:	4798      	blx	r3
 800130c:	60f8      	str	r0, [r7, #12]
      break;
 800130e:	e112      	b.n	8001536 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	7c1b      	ldrb	r3, [r3, #16]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d10d      	bne.n	8001334 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800131e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001320:	f107 0208 	add.w	r2, r7, #8
 8001324:	4610      	mov	r0, r2
 8001326:	4798      	blx	r3
 8001328:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	3301      	adds	r3, #1
 800132e:	2202      	movs	r2, #2
 8001330:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8001332:	e100      	b.n	8001536 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800133a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800133c:	f107 0208 	add.w	r2, r7, #8
 8001340:	4610      	mov	r0, r2
 8001342:	4798      	blx	r3
 8001344:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	3301      	adds	r3, #1
 800134a:	2202      	movs	r2, #2
 800134c:	701a      	strb	r2, [r3, #0]
      break;
 800134e:	e0f2      	b.n	8001536 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	885b      	ldrh	r3, [r3, #2]
 8001354:	b2db      	uxtb	r3, r3
 8001356:	2b05      	cmp	r3, #5
 8001358:	f200 80ac 	bhi.w	80014b4 <USBD_GetDescriptor+0x258>
 800135c:	a201      	add	r2, pc, #4	@ (adr r2, 8001364 <USBD_GetDescriptor+0x108>)
 800135e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001362:	bf00      	nop
 8001364:	0800137d 	.word	0x0800137d
 8001368:	080013b1 	.word	0x080013b1
 800136c:	080013e5 	.word	0x080013e5
 8001370:	08001419 	.word	0x08001419
 8001374:	0800144d 	.word	0x0800144d
 8001378:	08001481 	.word	0x08001481
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d00b      	beq.n	80013a0 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	687a      	ldr	r2, [r7, #4]
 8001392:	7c12      	ldrb	r2, [r2, #16]
 8001394:	f107 0108 	add.w	r1, r7, #8
 8001398:	4610      	mov	r0, r2
 800139a:	4798      	blx	r3
 800139c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800139e:	e091      	b.n	80014c4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80013a0:	6839      	ldr	r1, [r7, #0]
 80013a2:	6878      	ldr	r0, [r7, #4]
 80013a4:	f000 fab2 	bl	800190c <USBD_CtlError>
            err++;
 80013a8:	7afb      	ldrb	r3, [r7, #11]
 80013aa:	3301      	adds	r3, #1
 80013ac:	72fb      	strb	r3, [r7, #11]
          break;
 80013ae:	e089      	b.n	80014c4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80013b6:	689b      	ldr	r3, [r3, #8]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d00b      	beq.n	80013d4 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80013c2:	689b      	ldr	r3, [r3, #8]
 80013c4:	687a      	ldr	r2, [r7, #4]
 80013c6:	7c12      	ldrb	r2, [r2, #16]
 80013c8:	f107 0108 	add.w	r1, r7, #8
 80013cc:	4610      	mov	r0, r2
 80013ce:	4798      	blx	r3
 80013d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80013d2:	e077      	b.n	80014c4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80013d4:	6839      	ldr	r1, [r7, #0]
 80013d6:	6878      	ldr	r0, [r7, #4]
 80013d8:	f000 fa98 	bl	800190c <USBD_CtlError>
            err++;
 80013dc:	7afb      	ldrb	r3, [r7, #11]
 80013de:	3301      	adds	r3, #1
 80013e0:	72fb      	strb	r3, [r7, #11]
          break;
 80013e2:	e06f      	b.n	80014c4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80013ea:	68db      	ldr	r3, [r3, #12]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d00b      	beq.n	8001408 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80013f6:	68db      	ldr	r3, [r3, #12]
 80013f8:	687a      	ldr	r2, [r7, #4]
 80013fa:	7c12      	ldrb	r2, [r2, #16]
 80013fc:	f107 0108 	add.w	r1, r7, #8
 8001400:	4610      	mov	r0, r2
 8001402:	4798      	blx	r3
 8001404:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8001406:	e05d      	b.n	80014c4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8001408:	6839      	ldr	r1, [r7, #0]
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	f000 fa7e 	bl	800190c <USBD_CtlError>
            err++;
 8001410:	7afb      	ldrb	r3, [r7, #11]
 8001412:	3301      	adds	r3, #1
 8001414:	72fb      	strb	r3, [r7, #11]
          break;
 8001416:	e055      	b.n	80014c4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800141e:	691b      	ldr	r3, [r3, #16]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d00b      	beq.n	800143c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800142a:	691b      	ldr	r3, [r3, #16]
 800142c:	687a      	ldr	r2, [r7, #4]
 800142e:	7c12      	ldrb	r2, [r2, #16]
 8001430:	f107 0108 	add.w	r1, r7, #8
 8001434:	4610      	mov	r0, r2
 8001436:	4798      	blx	r3
 8001438:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800143a:	e043      	b.n	80014c4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800143c:	6839      	ldr	r1, [r7, #0]
 800143e:	6878      	ldr	r0, [r7, #4]
 8001440:	f000 fa64 	bl	800190c <USBD_CtlError>
            err++;
 8001444:	7afb      	ldrb	r3, [r7, #11]
 8001446:	3301      	adds	r3, #1
 8001448:	72fb      	strb	r3, [r7, #11]
          break;
 800144a:	e03b      	b.n	80014c4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8001452:	695b      	ldr	r3, [r3, #20]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d00b      	beq.n	8001470 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800145e:	695b      	ldr	r3, [r3, #20]
 8001460:	687a      	ldr	r2, [r7, #4]
 8001462:	7c12      	ldrb	r2, [r2, #16]
 8001464:	f107 0108 	add.w	r1, r7, #8
 8001468:	4610      	mov	r0, r2
 800146a:	4798      	blx	r3
 800146c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800146e:	e029      	b.n	80014c4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8001470:	6839      	ldr	r1, [r7, #0]
 8001472:	6878      	ldr	r0, [r7, #4]
 8001474:	f000 fa4a 	bl	800190c <USBD_CtlError>
            err++;
 8001478:	7afb      	ldrb	r3, [r7, #11]
 800147a:	3301      	adds	r3, #1
 800147c:	72fb      	strb	r3, [r7, #11]
          break;
 800147e:	e021      	b.n	80014c4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8001486:	699b      	ldr	r3, [r3, #24]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d00b      	beq.n	80014a4 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8001492:	699b      	ldr	r3, [r3, #24]
 8001494:	687a      	ldr	r2, [r7, #4]
 8001496:	7c12      	ldrb	r2, [r2, #16]
 8001498:	f107 0108 	add.w	r1, r7, #8
 800149c:	4610      	mov	r0, r2
 800149e:	4798      	blx	r3
 80014a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80014a2:	e00f      	b.n	80014c4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80014a4:	6839      	ldr	r1, [r7, #0]
 80014a6:	6878      	ldr	r0, [r7, #4]
 80014a8:	f000 fa30 	bl	800190c <USBD_CtlError>
            err++;
 80014ac:	7afb      	ldrb	r3, [r7, #11]
 80014ae:	3301      	adds	r3, #1
 80014b0:	72fb      	strb	r3, [r7, #11]
          break;
 80014b2:	e007      	b.n	80014c4 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80014b4:	6839      	ldr	r1, [r7, #0]
 80014b6:	6878      	ldr	r0, [r7, #4]
 80014b8:	f000 fa28 	bl	800190c <USBD_CtlError>
          err++;
 80014bc:	7afb      	ldrb	r3, [r7, #11]
 80014be:	3301      	adds	r3, #1
 80014c0:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 80014c2:	bf00      	nop
      }
      break;
 80014c4:	e037      	b.n	8001536 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	7c1b      	ldrb	r3, [r3, #16]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d109      	bne.n	80014e2 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80014d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80014d6:	f107 0208 	add.w	r2, r7, #8
 80014da:	4610      	mov	r0, r2
 80014dc:	4798      	blx	r3
 80014de:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80014e0:	e029      	b.n	8001536 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80014e2:	6839      	ldr	r1, [r7, #0]
 80014e4:	6878      	ldr	r0, [r7, #4]
 80014e6:	f000 fa11 	bl	800190c <USBD_CtlError>
        err++;
 80014ea:	7afb      	ldrb	r3, [r7, #11]
 80014ec:	3301      	adds	r3, #1
 80014ee:	72fb      	strb	r3, [r7, #11]
      break;
 80014f0:	e021      	b.n	8001536 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	7c1b      	ldrb	r3, [r3, #16]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d10d      	bne.n	8001516 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8001500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001502:	f107 0208 	add.w	r2, r7, #8
 8001506:	4610      	mov	r0, r2
 8001508:	4798      	blx	r3
 800150a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	3301      	adds	r3, #1
 8001510:	2207      	movs	r2, #7
 8001512:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8001514:	e00f      	b.n	8001536 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8001516:	6839      	ldr	r1, [r7, #0]
 8001518:	6878      	ldr	r0, [r7, #4]
 800151a:	f000 f9f7 	bl	800190c <USBD_CtlError>
        err++;
 800151e:	7afb      	ldrb	r3, [r7, #11]
 8001520:	3301      	adds	r3, #1
 8001522:	72fb      	strb	r3, [r7, #11]
      break;
 8001524:	e007      	b.n	8001536 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8001526:	6839      	ldr	r1, [r7, #0]
 8001528:	6878      	ldr	r0, [r7, #4]
 800152a:	f000 f9ef 	bl	800190c <USBD_CtlError>
      err++;
 800152e:	7afb      	ldrb	r3, [r7, #11]
 8001530:	3301      	adds	r3, #1
 8001532:	72fb      	strb	r3, [r7, #11]
      break;
 8001534:	bf00      	nop
  }

  if (err != 0U)
 8001536:	7afb      	ldrb	r3, [r7, #11]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d11e      	bne.n	800157a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	88db      	ldrh	r3, [r3, #6]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d016      	beq.n	8001572 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8001544:	893b      	ldrh	r3, [r7, #8]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d00e      	beq.n	8001568 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	88da      	ldrh	r2, [r3, #6]
 800154e:	893b      	ldrh	r3, [r7, #8]
 8001550:	4293      	cmp	r3, r2
 8001552:	bf28      	it	cs
 8001554:	4613      	movcs	r3, r2
 8001556:	b29b      	uxth	r3, r3
 8001558:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800155a:	893b      	ldrh	r3, [r7, #8]
 800155c:	461a      	mov	r2, r3
 800155e:	68f9      	ldr	r1, [r7, #12]
 8001560:	6878      	ldr	r0, [r7, #4]
 8001562:	f000 fa44 	bl	80019ee <USBD_CtlSendData>
 8001566:	e009      	b.n	800157c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8001568:	6839      	ldr	r1, [r7, #0]
 800156a:	6878      	ldr	r0, [r7, #4]
 800156c:	f000 f9ce 	bl	800190c <USBD_CtlError>
 8001570:	e004      	b.n	800157c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8001572:	6878      	ldr	r0, [r7, #4]
 8001574:	f000 fa95 	bl	8001aa2 <USBD_CtlSendStatus>
 8001578:	e000      	b.n	800157c <USBD_GetDescriptor+0x320>
    return;
 800157a:	bf00      	nop
  }
}
 800157c:	3710      	adds	r7, #16
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop

08001584 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b084      	sub	sp, #16
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
 800158c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	889b      	ldrh	r3, [r3, #4]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d131      	bne.n	80015fa <USBD_SetAddress+0x76>
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	88db      	ldrh	r3, [r3, #6]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d12d      	bne.n	80015fa <USBD_SetAddress+0x76>
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	885b      	ldrh	r3, [r3, #2]
 80015a2:	2b7f      	cmp	r3, #127	@ 0x7f
 80015a4:	d829      	bhi.n	80015fa <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	885b      	ldrh	r3, [r3, #2]
 80015aa:	b2db      	uxtb	r3, r3
 80015ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80015b0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	2b03      	cmp	r3, #3
 80015bc:	d104      	bne.n	80015c8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80015be:	6839      	ldr	r1, [r7, #0]
 80015c0:	6878      	ldr	r0, [r7, #4]
 80015c2:	f000 f9a3 	bl	800190c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80015c6:	e01d      	b.n	8001604 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	7bfa      	ldrb	r2, [r7, #15]
 80015cc:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80015d0:	7bfb      	ldrb	r3, [r7, #15]
 80015d2:	4619      	mov	r1, r3
 80015d4:	6878      	ldr	r0, [r7, #4]
 80015d6:	f001 fb19 	bl	8002c0c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	f000 fa61 	bl	8001aa2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80015e0:	7bfb      	ldrb	r3, [r7, #15]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d004      	beq.n	80015f0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2202      	movs	r2, #2
 80015ea:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80015ee:	e009      	b.n	8001604 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2201      	movs	r2, #1
 80015f4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80015f8:	e004      	b.n	8001604 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80015fa:	6839      	ldr	r1, [r7, #0]
 80015fc:	6878      	ldr	r0, [r7, #4]
 80015fe:	f000 f985 	bl	800190c <USBD_CtlError>
  }
}
 8001602:	bf00      	nop
 8001604:	bf00      	nop
 8001606:	3710      	adds	r7, #16
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}

0800160c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b084      	sub	sp, #16
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
 8001614:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8001616:	2300      	movs	r3, #0
 8001618:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	885b      	ldrh	r3, [r3, #2]
 800161e:	b2da      	uxtb	r2, r3
 8001620:	4b4c      	ldr	r3, [pc, #304]	@ (8001754 <USBD_SetConfig+0x148>)
 8001622:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8001624:	4b4b      	ldr	r3, [pc, #300]	@ (8001754 <USBD_SetConfig+0x148>)
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	2b01      	cmp	r3, #1
 800162a:	d905      	bls.n	8001638 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800162c:	6839      	ldr	r1, [r7, #0]
 800162e:	6878      	ldr	r0, [r7, #4]
 8001630:	f000 f96c 	bl	800190c <USBD_CtlError>
    return USBD_FAIL;
 8001634:	2303      	movs	r3, #3
 8001636:	e088      	b.n	800174a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800163e:	b2db      	uxtb	r3, r3
 8001640:	2b02      	cmp	r3, #2
 8001642:	d002      	beq.n	800164a <USBD_SetConfig+0x3e>
 8001644:	2b03      	cmp	r3, #3
 8001646:	d025      	beq.n	8001694 <USBD_SetConfig+0x88>
 8001648:	e071      	b.n	800172e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800164a:	4b42      	ldr	r3, [pc, #264]	@ (8001754 <USBD_SetConfig+0x148>)
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d01c      	beq.n	800168c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8001652:	4b40      	ldr	r3, [pc, #256]	@ (8001754 <USBD_SetConfig+0x148>)
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	461a      	mov	r2, r3
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800165c:	4b3d      	ldr	r3, [pc, #244]	@ (8001754 <USBD_SetConfig+0x148>)
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	4619      	mov	r1, r3
 8001662:	6878      	ldr	r0, [r7, #4]
 8001664:	f7ff f992 	bl	800098c <USBD_SetClassConfig>
 8001668:	4603      	mov	r3, r0
 800166a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800166c:	7bfb      	ldrb	r3, [r7, #15]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d004      	beq.n	800167c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8001672:	6839      	ldr	r1, [r7, #0]
 8001674:	6878      	ldr	r0, [r7, #4]
 8001676:	f000 f949 	bl	800190c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800167a:	e065      	b.n	8001748 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800167c:	6878      	ldr	r0, [r7, #4]
 800167e:	f000 fa10 	bl	8001aa2 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2203      	movs	r2, #3
 8001686:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800168a:	e05d      	b.n	8001748 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	f000 fa08 	bl	8001aa2 <USBD_CtlSendStatus>
      break;
 8001692:	e059      	b.n	8001748 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8001694:	4b2f      	ldr	r3, [pc, #188]	@ (8001754 <USBD_SetConfig+0x148>)
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d112      	bne.n	80016c2 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2202      	movs	r2, #2
 80016a0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80016a4:	4b2b      	ldr	r3, [pc, #172]	@ (8001754 <USBD_SetConfig+0x148>)
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	461a      	mov	r2, r3
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80016ae:	4b29      	ldr	r3, [pc, #164]	@ (8001754 <USBD_SetConfig+0x148>)
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	4619      	mov	r1, r3
 80016b4:	6878      	ldr	r0, [r7, #4]
 80016b6:	f7ff f985 	bl	80009c4 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f000 f9f1 	bl	8001aa2 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80016c0:	e042      	b.n	8001748 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80016c2:	4b24      	ldr	r3, [pc, #144]	@ (8001754 <USBD_SetConfig+0x148>)
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	461a      	mov	r2, r3
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d02a      	beq.n	8001726 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	4619      	mov	r1, r3
 80016d8:	6878      	ldr	r0, [r7, #4]
 80016da:	f7ff f973 	bl	80009c4 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80016de:	4b1d      	ldr	r3, [pc, #116]	@ (8001754 <USBD_SetConfig+0x148>)
 80016e0:	781b      	ldrb	r3, [r3, #0]
 80016e2:	461a      	mov	r2, r3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80016e8:	4b1a      	ldr	r3, [pc, #104]	@ (8001754 <USBD_SetConfig+0x148>)
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	4619      	mov	r1, r3
 80016ee:	6878      	ldr	r0, [r7, #4]
 80016f0:	f7ff f94c 	bl	800098c <USBD_SetClassConfig>
 80016f4:	4603      	mov	r3, r0
 80016f6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80016f8:	7bfb      	ldrb	r3, [r7, #15]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d00f      	beq.n	800171e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80016fe:	6839      	ldr	r1, [r7, #0]
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	f000 f903 	bl	800190c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	b2db      	uxtb	r3, r3
 800170c:	4619      	mov	r1, r3
 800170e:	6878      	ldr	r0, [r7, #4]
 8001710:	f7ff f958 	bl	80009c4 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2202      	movs	r2, #2
 8001718:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800171c:	e014      	b.n	8001748 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	f000 f9bf 	bl	8001aa2 <USBD_CtlSendStatus>
      break;
 8001724:	e010      	b.n	8001748 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8001726:	6878      	ldr	r0, [r7, #4]
 8001728:	f000 f9bb 	bl	8001aa2 <USBD_CtlSendStatus>
      break;
 800172c:	e00c      	b.n	8001748 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800172e:	6839      	ldr	r1, [r7, #0]
 8001730:	6878      	ldr	r0, [r7, #4]
 8001732:	f000 f8eb 	bl	800190c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8001736:	4b07      	ldr	r3, [pc, #28]	@ (8001754 <USBD_SetConfig+0x148>)
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	4619      	mov	r1, r3
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	f7ff f941 	bl	80009c4 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8001742:	2303      	movs	r3, #3
 8001744:	73fb      	strb	r3, [r7, #15]
      break;
 8001746:	bf00      	nop
  }

  return ret;
 8001748:	7bfb      	ldrb	r3, [r7, #15]
}
 800174a:	4618      	mov	r0, r3
 800174c:	3710      	adds	r7, #16
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	2000047c 	.word	0x2000047c

08001758 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
 8001760:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	88db      	ldrh	r3, [r3, #6]
 8001766:	2b01      	cmp	r3, #1
 8001768:	d004      	beq.n	8001774 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800176a:	6839      	ldr	r1, [r7, #0]
 800176c:	6878      	ldr	r0, [r7, #4]
 800176e:	f000 f8cd 	bl	800190c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8001772:	e023      	b.n	80017bc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800177a:	b2db      	uxtb	r3, r3
 800177c:	2b02      	cmp	r3, #2
 800177e:	dc02      	bgt.n	8001786 <USBD_GetConfig+0x2e>
 8001780:	2b00      	cmp	r3, #0
 8001782:	dc03      	bgt.n	800178c <USBD_GetConfig+0x34>
 8001784:	e015      	b.n	80017b2 <USBD_GetConfig+0x5a>
 8001786:	2b03      	cmp	r3, #3
 8001788:	d00b      	beq.n	80017a2 <USBD_GetConfig+0x4a>
 800178a:	e012      	b.n	80017b2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2200      	movs	r2, #0
 8001790:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	3308      	adds	r3, #8
 8001796:	2201      	movs	r2, #1
 8001798:	4619      	mov	r1, r3
 800179a:	6878      	ldr	r0, [r7, #4]
 800179c:	f000 f927 	bl	80019ee <USBD_CtlSendData>
        break;
 80017a0:	e00c      	b.n	80017bc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	3304      	adds	r3, #4
 80017a6:	2201      	movs	r2, #1
 80017a8:	4619      	mov	r1, r3
 80017aa:	6878      	ldr	r0, [r7, #4]
 80017ac:	f000 f91f 	bl	80019ee <USBD_CtlSendData>
        break;
 80017b0:	e004      	b.n	80017bc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80017b2:	6839      	ldr	r1, [r7, #0]
 80017b4:	6878      	ldr	r0, [r7, #4]
 80017b6:	f000 f8a9 	bl	800190c <USBD_CtlError>
        break;
 80017ba:	bf00      	nop
}
 80017bc:	bf00      	nop
 80017be:	3708      	adds	r7, #8
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}

080017c4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
 80017cc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	3b01      	subs	r3, #1
 80017d8:	2b02      	cmp	r3, #2
 80017da:	d81e      	bhi.n	800181a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	88db      	ldrh	r3, [r3, #6]
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	d004      	beq.n	80017ee <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80017e4:	6839      	ldr	r1, [r7, #0]
 80017e6:	6878      	ldr	r0, [r7, #4]
 80017e8:	f000 f890 	bl	800190c <USBD_CtlError>
        break;
 80017ec:	e01a      	b.n	8001824 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2201      	movs	r2, #1
 80017f2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d005      	beq.n	800180a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	68db      	ldr	r3, [r3, #12]
 8001802:	f043 0202 	orr.w	r2, r3, #2
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	330c      	adds	r3, #12
 800180e:	2202      	movs	r2, #2
 8001810:	4619      	mov	r1, r3
 8001812:	6878      	ldr	r0, [r7, #4]
 8001814:	f000 f8eb 	bl	80019ee <USBD_CtlSendData>
      break;
 8001818:	e004      	b.n	8001824 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800181a:	6839      	ldr	r1, [r7, #0]
 800181c:	6878      	ldr	r0, [r7, #4]
 800181e:	f000 f875 	bl	800190c <USBD_CtlError>
      break;
 8001822:	bf00      	nop
  }
}
 8001824:	bf00      	nop
 8001826:	3708      	adds	r7, #8
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}

0800182c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
 8001834:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	885b      	ldrh	r3, [r3, #2]
 800183a:	2b01      	cmp	r3, #1
 800183c:	d106      	bne.n	800184c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2201      	movs	r2, #1
 8001842:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8001846:	6878      	ldr	r0, [r7, #4]
 8001848:	f000 f92b 	bl	8001aa2 <USBD_CtlSendStatus>
  }
}
 800184c:	bf00      	nop
 800184e:	3708      	adds	r7, #8
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}

08001854 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8001864:	b2db      	uxtb	r3, r3
 8001866:	3b01      	subs	r3, #1
 8001868:	2b02      	cmp	r3, #2
 800186a:	d80b      	bhi.n	8001884 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	885b      	ldrh	r3, [r3, #2]
 8001870:	2b01      	cmp	r3, #1
 8001872:	d10c      	bne.n	800188e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2200      	movs	r2, #0
 8001878:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800187c:	6878      	ldr	r0, [r7, #4]
 800187e:	f000 f910 	bl	8001aa2 <USBD_CtlSendStatus>
      }
      break;
 8001882:	e004      	b.n	800188e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8001884:	6839      	ldr	r1, [r7, #0]
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	f000 f840 	bl	800190c <USBD_CtlError>
      break;
 800188c:	e000      	b.n	8001890 <USBD_ClrFeature+0x3c>
      break;
 800188e:	bf00      	nop
  }
}
 8001890:	bf00      	nop
 8001892:	3708      	adds	r7, #8
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}

08001898 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	781a      	ldrb	r2, [r3, #0]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	3301      	adds	r3, #1
 80018b2:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	781a      	ldrb	r2, [r3, #0]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	3301      	adds	r3, #1
 80018c0:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80018c2:	68f8      	ldr	r0, [r7, #12]
 80018c4:	f7ff fa92 	bl	8000dec <SWAPBYTE>
 80018c8:	4603      	mov	r3, r0
 80018ca:	461a      	mov	r2, r3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	3301      	adds	r3, #1
 80018d4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	3301      	adds	r3, #1
 80018da:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80018dc:	68f8      	ldr	r0, [r7, #12]
 80018de:	f7ff fa85 	bl	8000dec <SWAPBYTE>
 80018e2:	4603      	mov	r3, r0
 80018e4:	461a      	mov	r2, r3
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	3301      	adds	r3, #1
 80018ee:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	3301      	adds	r3, #1
 80018f4:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80018f6:	68f8      	ldr	r0, [r7, #12]
 80018f8:	f7ff fa78 	bl	8000dec <SWAPBYTE>
 80018fc:	4603      	mov	r3, r0
 80018fe:	461a      	mov	r2, r3
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	80da      	strh	r2, [r3, #6]
}
 8001904:	bf00      	nop
 8001906:	3710      	adds	r7, #16
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}

0800190c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
 8001914:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8001916:	2180      	movs	r1, #128	@ 0x80
 8001918:	6878      	ldr	r0, [r7, #4]
 800191a:	f001 f90d 	bl	8002b38 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800191e:	2100      	movs	r1, #0
 8001920:	6878      	ldr	r0, [r7, #4]
 8001922:	f001 f909 	bl	8002b38 <USBD_LL_StallEP>
}
 8001926:	bf00      	nop
 8001928:	3708      	adds	r7, #8
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}

0800192e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800192e:	b580      	push	{r7, lr}
 8001930:	b086      	sub	sp, #24
 8001932:	af00      	add	r7, sp, #0
 8001934:	60f8      	str	r0, [r7, #12]
 8001936:	60b9      	str	r1, [r7, #8]
 8001938:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800193a:	2300      	movs	r3, #0
 800193c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d036      	beq.n	80019b2 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8001948:	6938      	ldr	r0, [r7, #16]
 800194a:	f000 f836 	bl	80019ba <USBD_GetLen>
 800194e:	4603      	mov	r3, r0
 8001950:	3301      	adds	r3, #1
 8001952:	b29b      	uxth	r3, r3
 8001954:	005b      	lsls	r3, r3, #1
 8001956:	b29a      	uxth	r2, r3
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800195c:	7dfb      	ldrb	r3, [r7, #23]
 800195e:	68ba      	ldr	r2, [r7, #8]
 8001960:	4413      	add	r3, r2
 8001962:	687a      	ldr	r2, [r7, #4]
 8001964:	7812      	ldrb	r2, [r2, #0]
 8001966:	701a      	strb	r2, [r3, #0]
  idx++;
 8001968:	7dfb      	ldrb	r3, [r7, #23]
 800196a:	3301      	adds	r3, #1
 800196c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800196e:	7dfb      	ldrb	r3, [r7, #23]
 8001970:	68ba      	ldr	r2, [r7, #8]
 8001972:	4413      	add	r3, r2
 8001974:	2203      	movs	r2, #3
 8001976:	701a      	strb	r2, [r3, #0]
  idx++;
 8001978:	7dfb      	ldrb	r3, [r7, #23]
 800197a:	3301      	adds	r3, #1
 800197c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800197e:	e013      	b.n	80019a8 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8001980:	7dfb      	ldrb	r3, [r7, #23]
 8001982:	68ba      	ldr	r2, [r7, #8]
 8001984:	4413      	add	r3, r2
 8001986:	693a      	ldr	r2, [r7, #16]
 8001988:	7812      	ldrb	r2, [r2, #0]
 800198a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	3301      	adds	r3, #1
 8001990:	613b      	str	r3, [r7, #16]
    idx++;
 8001992:	7dfb      	ldrb	r3, [r7, #23]
 8001994:	3301      	adds	r3, #1
 8001996:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8001998:	7dfb      	ldrb	r3, [r7, #23]
 800199a:	68ba      	ldr	r2, [r7, #8]
 800199c:	4413      	add	r3, r2
 800199e:	2200      	movs	r2, #0
 80019a0:	701a      	strb	r2, [r3, #0]
    idx++;
 80019a2:	7dfb      	ldrb	r3, [r7, #23]
 80019a4:	3301      	adds	r3, #1
 80019a6:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d1e7      	bne.n	8001980 <USBD_GetString+0x52>
 80019b0:	e000      	b.n	80019b4 <USBD_GetString+0x86>
    return;
 80019b2:	bf00      	nop
  }
}
 80019b4:	3718      	adds	r7, #24
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}

080019ba <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80019ba:	b480      	push	{r7}
 80019bc:	b085      	sub	sp, #20
 80019be:	af00      	add	r7, sp, #0
 80019c0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80019c2:	2300      	movs	r3, #0
 80019c4:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80019ca:	e005      	b.n	80019d8 <USBD_GetLen+0x1e>
  {
    len++;
 80019cc:	7bfb      	ldrb	r3, [r7, #15]
 80019ce:	3301      	adds	r3, #1
 80019d0:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	3301      	adds	r3, #1
 80019d6:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d1f5      	bne.n	80019cc <USBD_GetLen+0x12>
  }

  return len;
 80019e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3714      	adds	r7, #20
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr

080019ee <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80019ee:	b580      	push	{r7, lr}
 80019f0:	b084      	sub	sp, #16
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	60f8      	str	r0, [r7, #12]
 80019f6:	60b9      	str	r1, [r7, #8]
 80019f8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	2202      	movs	r2, #2
 80019fe:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	687a      	ldr	r2, [r7, #4]
 8001a06:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	687a      	ldr	r2, [r7, #4]
 8001a0c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	68ba      	ldr	r2, [r7, #8]
 8001a12:	2100      	movs	r1, #0
 8001a14:	68f8      	ldr	r0, [r7, #12]
 8001a16:	f001 f918 	bl	8002c4a <USBD_LL_Transmit>

  return USBD_OK;
 8001a1a:	2300      	movs	r3, #0
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3710      	adds	r7, #16
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}

08001a24 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b084      	sub	sp, #16
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	60f8      	str	r0, [r7, #12]
 8001a2c:	60b9      	str	r1, [r7, #8]
 8001a2e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	68ba      	ldr	r2, [r7, #8]
 8001a34:	2100      	movs	r1, #0
 8001a36:	68f8      	ldr	r0, [r7, #12]
 8001a38:	f001 f907 	bl	8002c4a <USBD_LL_Transmit>

  return USBD_OK;
 8001a3c:	2300      	movs	r3, #0
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3710      	adds	r7, #16
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}

08001a46 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8001a46:	b580      	push	{r7, lr}
 8001a48:	b084      	sub	sp, #16
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	60f8      	str	r0, [r7, #12]
 8001a4e:	60b9      	str	r1, [r7, #8]
 8001a50:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	2203      	movs	r2, #3
 8001a56:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	687a      	ldr	r2, [r7, #4]
 8001a5e:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	687a      	ldr	r2, [r7, #4]
 8001a66:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	68ba      	ldr	r2, [r7, #8]
 8001a6e:	2100      	movs	r1, #0
 8001a70:	68f8      	ldr	r0, [r7, #12]
 8001a72:	f001 f90b 	bl	8002c8c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8001a76:	2300      	movs	r3, #0
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3710      	adds	r7, #16
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}

08001a80 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b084      	sub	sp, #16
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	60f8      	str	r0, [r7, #12]
 8001a88:	60b9      	str	r1, [r7, #8]
 8001a8a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	68ba      	ldr	r2, [r7, #8]
 8001a90:	2100      	movs	r1, #0
 8001a92:	68f8      	ldr	r0, [r7, #12]
 8001a94:	f001 f8fa 	bl	8002c8c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8001a98:	2300      	movs	r3, #0
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3710      	adds	r7, #16
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}

08001aa2 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8001aa2:	b580      	push	{r7, lr}
 8001aa4:	b082      	sub	sp, #8
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2204      	movs	r2, #4
 8001aae:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	2100      	movs	r1, #0
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	f001 f8c6 	bl	8002c4a <USBD_LL_Transmit>

  return USBD_OK;
 8001abe:	2300      	movs	r3, #0
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	3708      	adds	r7, #8
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}

08001ac8 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2205      	movs	r2, #5
 8001ad4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8001ad8:	2300      	movs	r3, #0
 8001ada:	2200      	movs	r2, #0
 8001adc:	2100      	movs	r1, #0
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	f001 f8d4 	bl	8002c8c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8001ae4:	2300      	movs	r3, #0
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3708      	adds	r7, #8
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}

08001aee <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8001aee:	b580      	push	{r7, lr}
 8001af0:	b084      	sub	sp, #16
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	6078      	str	r0, [r7, #4]
 8001af6:	460b      	mov	r3, r1
 8001af8:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8001afa:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8001afe:	f001 f92f 	bl	8002d60 <USBD_static_malloc>
 8001b02:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d105      	bne.n	8001b16 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 8001b12:	2302      	movs	r3, #2
 8001b14:	e066      	b.n	8001be4 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	68fa      	ldr	r2, [r7, #12]
 8001b1a:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	7c1b      	ldrb	r3, [r3, #16]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d119      	bne.n	8001b5a <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8001b26:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001b2a:	2202      	movs	r2, #2
 8001b2c:	2181      	movs	r1, #129	@ 0x81
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	f000 ffbd 	bl	8002aae <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2201      	movs	r2, #1
 8001b38:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8001b3a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001b3e:	2202      	movs	r2, #2
 8001b40:	2101      	movs	r1, #1
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	f000 ffb3 	bl	8002aae <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2210      	movs	r2, #16
 8001b54:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 8001b58:	e016      	b.n	8001b88 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8001b5a:	2340      	movs	r3, #64	@ 0x40
 8001b5c:	2202      	movs	r2, #2
 8001b5e:	2181      	movs	r1, #129	@ 0x81
 8001b60:	6878      	ldr	r0, [r7, #4]
 8001b62:	f000 ffa4 	bl	8002aae <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2201      	movs	r2, #1
 8001b6a:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8001b6c:	2340      	movs	r3, #64	@ 0x40
 8001b6e:	2202      	movs	r2, #2
 8001b70:	2101      	movs	r1, #1
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f000 ff9b 	bl	8002aae <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2210      	movs	r2, #16
 8001b84:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8001b88:	2308      	movs	r3, #8
 8001b8a:	2203      	movs	r2, #3
 8001b8c:	2182      	movs	r1, #130	@ 0x82
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f000 ff8d 	bl	8002aae <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2201      	movs	r2, #1
 8001b98:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	7c1b      	ldrb	r3, [r3, #16]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d109      	bne.n	8001bd2 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001bc4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001bc8:	2101      	movs	r1, #1
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f001 f85e 	bl	8002c8c <USBD_LL_PrepareReceive>
 8001bd0:	e007      	b.n	8001be2 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001bd8:	2340      	movs	r3, #64	@ 0x40
 8001bda:	2101      	movs	r1, #1
 8001bdc:	6878      	ldr	r0, [r7, #4]
 8001bde:	f001 f855 	bl	8002c8c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8001be2:	2300      	movs	r3, #0
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3710      	adds	r7, #16
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}

08001bec <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	460b      	mov	r3, r1
 8001bf6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8001bf8:	2181      	movs	r1, #129	@ 0x81
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f000 ff7d 	bl	8002afa <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2200      	movs	r2, #0
 8001c04:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8001c06:	2101      	movs	r1, #1
 8001c08:	6878      	ldr	r0, [r7, #4]
 8001c0a:	f000 ff76 	bl	8002afa <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2200      	movs	r2, #0
 8001c12:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8001c16:	2182      	movs	r1, #130	@ 0x82
 8001c18:	6878      	ldr	r0, [r7, #4]
 8001c1a:	f000 ff6e 	bl	8002afa <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2200      	movs	r2, #0
 8001c22:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2200      	movs	r2, #0
 8001c2a:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d00e      	beq.n	8001c56 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f001 f897 	bl	8002d7c <USBD_static_free>
    pdev->pClassData = NULL;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2200      	movs	r2, #0
 8001c52:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8001c56:	2300      	movs	r3, #0
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3708      	adds	r7, #8
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}

08001c60 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b086      	sub	sp, #24
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8001c70:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8001c72:	2300      	movs	r3, #0
 8001c74:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8001c76:	2300      	movs	r3, #0
 8001c78:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d101      	bne.n	8001c88 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8001c84:	2303      	movs	r3, #3
 8001c86:	e0af      	b.n	8001de8 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d03f      	beq.n	8001d14 <USBD_CDC_Setup+0xb4>
 8001c94:	2b20      	cmp	r3, #32
 8001c96:	f040 809f 	bne.w	8001dd8 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	88db      	ldrh	r3, [r3, #6]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d02e      	beq.n	8001d00 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	781b      	ldrb	r3, [r3, #0]
 8001ca6:	b25b      	sxtb	r3, r3
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	da16      	bge.n	8001cda <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	683a      	ldr	r2, [r7, #0]
 8001cb6:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8001cb8:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8001cba:	683a      	ldr	r2, [r7, #0]
 8001cbc:	88d2      	ldrh	r2, [r2, #6]
 8001cbe:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	88db      	ldrh	r3, [r3, #6]
 8001cc4:	2b07      	cmp	r3, #7
 8001cc6:	bf28      	it	cs
 8001cc8:	2307      	movcs	r3, #7
 8001cca:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	89fa      	ldrh	r2, [r7, #14]
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f7ff fe8b 	bl	80019ee <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8001cd8:	e085      	b.n	8001de6 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	785a      	ldrb	r2, [r3, #1]
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	88db      	ldrh	r3, [r3, #6]
 8001ce8:	b2da      	uxtb	r2, r3
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8001cf0:	6939      	ldr	r1, [r7, #16]
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	88db      	ldrh	r3, [r3, #6]
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	f7ff fea4 	bl	8001a46 <USBD_CtlPrepareRx>
      break;
 8001cfe:	e072      	b.n	8001de6 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	683a      	ldr	r2, [r7, #0]
 8001d0a:	7850      	ldrb	r0, [r2, #1]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	6839      	ldr	r1, [r7, #0]
 8001d10:	4798      	blx	r3
      break;
 8001d12:	e068      	b.n	8001de6 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	785b      	ldrb	r3, [r3, #1]
 8001d18:	2b0b      	cmp	r3, #11
 8001d1a:	d852      	bhi.n	8001dc2 <USBD_CDC_Setup+0x162>
 8001d1c:	a201      	add	r2, pc, #4	@ (adr r2, 8001d24 <USBD_CDC_Setup+0xc4>)
 8001d1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d22:	bf00      	nop
 8001d24:	08001d55 	.word	0x08001d55
 8001d28:	08001dd1 	.word	0x08001dd1
 8001d2c:	08001dc3 	.word	0x08001dc3
 8001d30:	08001dc3 	.word	0x08001dc3
 8001d34:	08001dc3 	.word	0x08001dc3
 8001d38:	08001dc3 	.word	0x08001dc3
 8001d3c:	08001dc3 	.word	0x08001dc3
 8001d40:	08001dc3 	.word	0x08001dc3
 8001d44:	08001dc3 	.word	0x08001dc3
 8001d48:	08001dc3 	.word	0x08001dc3
 8001d4c:	08001d7f 	.word	0x08001d7f
 8001d50:	08001da9 	.word	0x08001da9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	2b03      	cmp	r3, #3
 8001d5e:	d107      	bne.n	8001d70 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8001d60:	f107 030a 	add.w	r3, r7, #10
 8001d64:	2202      	movs	r2, #2
 8001d66:	4619      	mov	r1, r3
 8001d68:	6878      	ldr	r0, [r7, #4]
 8001d6a:	f7ff fe40 	bl	80019ee <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8001d6e:	e032      	b.n	8001dd6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8001d70:	6839      	ldr	r1, [r7, #0]
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f7ff fdca 	bl	800190c <USBD_CtlError>
            ret = USBD_FAIL;
 8001d78:	2303      	movs	r3, #3
 8001d7a:	75fb      	strb	r3, [r7, #23]
          break;
 8001d7c:	e02b      	b.n	8001dd6 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	2b03      	cmp	r3, #3
 8001d88:	d107      	bne.n	8001d9a <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8001d8a:	f107 030d 	add.w	r3, r7, #13
 8001d8e:	2201      	movs	r2, #1
 8001d90:	4619      	mov	r1, r3
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f7ff fe2b 	bl	80019ee <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8001d98:	e01d      	b.n	8001dd6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8001d9a:	6839      	ldr	r1, [r7, #0]
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	f7ff fdb5 	bl	800190c <USBD_CtlError>
            ret = USBD_FAIL;
 8001da2:	2303      	movs	r3, #3
 8001da4:	75fb      	strb	r3, [r7, #23]
          break;
 8001da6:	e016      	b.n	8001dd6 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8001dae:	b2db      	uxtb	r3, r3
 8001db0:	2b03      	cmp	r3, #3
 8001db2:	d00f      	beq.n	8001dd4 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8001db4:	6839      	ldr	r1, [r7, #0]
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f7ff fda8 	bl	800190c <USBD_CtlError>
            ret = USBD_FAIL;
 8001dbc:	2303      	movs	r3, #3
 8001dbe:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8001dc0:	e008      	b.n	8001dd4 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8001dc2:	6839      	ldr	r1, [r7, #0]
 8001dc4:	6878      	ldr	r0, [r7, #4]
 8001dc6:	f7ff fda1 	bl	800190c <USBD_CtlError>
          ret = USBD_FAIL;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	75fb      	strb	r3, [r7, #23]
          break;
 8001dce:	e002      	b.n	8001dd6 <USBD_CDC_Setup+0x176>
          break;
 8001dd0:	bf00      	nop
 8001dd2:	e008      	b.n	8001de6 <USBD_CDC_Setup+0x186>
          break;
 8001dd4:	bf00      	nop
      }
      break;
 8001dd6:	e006      	b.n	8001de6 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8001dd8:	6839      	ldr	r1, [r7, #0]
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f7ff fd96 	bl	800190c <USBD_CtlError>
      ret = USBD_FAIL;
 8001de0:	2303      	movs	r3, #3
 8001de2:	75fb      	strb	r3, [r7, #23]
      break;
 8001de4:	bf00      	nop
  }

  return (uint8_t)ret;
 8001de6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	3718      	adds	r7, #24
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}

08001df0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b084      	sub	sp, #16
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	460b      	mov	r3, r1
 8001dfa:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8001e02:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d101      	bne.n	8001e12 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	e04f      	b.n	8001eb2 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8001e18:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8001e1a:	78fa      	ldrb	r2, [r7, #3]
 8001e1c:	6879      	ldr	r1, [r7, #4]
 8001e1e:	4613      	mov	r3, r2
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	4413      	add	r3, r2
 8001e24:	009b      	lsls	r3, r3, #2
 8001e26:	440b      	add	r3, r1
 8001e28:	3318      	adds	r3, #24
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d029      	beq.n	8001e84 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8001e30:	78fa      	ldrb	r2, [r7, #3]
 8001e32:	6879      	ldr	r1, [r7, #4]
 8001e34:	4613      	mov	r3, r2
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	4413      	add	r3, r2
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	440b      	add	r3, r1
 8001e3e:	3318      	adds	r3, #24
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	78f9      	ldrb	r1, [r7, #3]
 8001e44:	68f8      	ldr	r0, [r7, #12]
 8001e46:	460b      	mov	r3, r1
 8001e48:	009b      	lsls	r3, r3, #2
 8001e4a:	440b      	add	r3, r1
 8001e4c:	00db      	lsls	r3, r3, #3
 8001e4e:	4403      	add	r3, r0
 8001e50:	3320      	adds	r3, #32
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	fbb2 f1f3 	udiv	r1, r2, r3
 8001e58:	fb01 f303 	mul.w	r3, r1, r3
 8001e5c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d110      	bne.n	8001e84 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8001e62:	78fa      	ldrb	r2, [r7, #3]
 8001e64:	6879      	ldr	r1, [r7, #4]
 8001e66:	4613      	mov	r3, r2
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	4413      	add	r3, r2
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	440b      	add	r3, r1
 8001e70:	3318      	adds	r3, #24
 8001e72:	2200      	movs	r2, #0
 8001e74:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8001e76:	78f9      	ldrb	r1, [r7, #3]
 8001e78:	2300      	movs	r3, #0
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	6878      	ldr	r0, [r7, #4]
 8001e7e:	f000 fee4 	bl	8002c4a <USBD_LL_Transmit>
 8001e82:	e015      	b.n	8001eb0 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	2200      	movs	r2, #0
 8001e88:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8001e92:	691b      	ldr	r3, [r3, #16]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d00b      	beq.n	8001eb0 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8001e9e:	691b      	ldr	r3, [r3, #16]
 8001ea0:	68ba      	ldr	r2, [r7, #8]
 8001ea2:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8001ea6:	68ba      	ldr	r2, [r7, #8]
 8001ea8:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8001eac:	78fa      	ldrb	r2, [r7, #3]
 8001eae:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8001eb0:	2300      	movs	r3, #0
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3710      	adds	r7, #16
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}

08001eba <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8001eba:	b580      	push	{r7, lr}
 8001ebc:	b084      	sub	sp, #16
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	6078      	str	r0, [r7, #4]
 8001ec2:	460b      	mov	r3, r1
 8001ec4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8001ecc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d101      	bne.n	8001edc <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8001ed8:	2303      	movs	r3, #3
 8001eda:	e015      	b.n	8001f08 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8001edc:	78fb      	ldrb	r3, [r7, #3]
 8001ede:	4619      	mov	r1, r3
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	f000 fef4 	bl	8002cce <USBD_LL_GetRxDataSize>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8001ef4:	68db      	ldr	r3, [r3, #12]
 8001ef6:	68fa      	ldr	r2, [r7, #12]
 8001ef8:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8001efc:	68fa      	ldr	r2, [r7, #12]
 8001efe:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8001f02:	4611      	mov	r1, r2
 8001f04:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8001f06:	2300      	movs	r3, #0
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	3710      	adds	r7, #16
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}

08001f10 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b084      	sub	sp, #16
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8001f1e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d101      	bne.n	8001f2a <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8001f26:	2303      	movs	r3, #3
 8001f28:	e01a      	b.n	8001f60 <USBD_CDC_EP0_RxReady+0x50>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d014      	beq.n	8001f5e <USBD_CDC_EP0_RxReady+0x4e>
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8001f3a:	2bff      	cmp	r3, #255	@ 0xff
 8001f3c:	d00f      	beq.n	8001f5e <USBD_CDC_EP0_RxReady+0x4e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	68fa      	ldr	r2, [r7, #12]
 8001f48:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 8001f4c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8001f4e:	68fa      	ldr	r2, [r7, #12]
 8001f50:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8001f54:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	22ff      	movs	r2, #255	@ 0xff
 8001f5a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8001f5e:	2300      	movs	r3, #0
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	3710      	adds	r7, #16
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}

08001f68 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2243      	movs	r2, #67	@ 0x43
 8001f74:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8001f76:	4b03      	ldr	r3, [pc, #12]	@ (8001f84 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	370c      	adds	r7, #12
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr
 8001f84:	2000008c 	.word	0x2000008c

08001f88 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2243      	movs	r2, #67	@ 0x43
 8001f94:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8001f96:	4b03      	ldr	r3, [pc, #12]	@ (8001fa4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	370c      	adds	r7, #12
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr
 8001fa4:	20000048 	.word	0x20000048

08001fa8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2243      	movs	r2, #67	@ 0x43
 8001fb4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8001fb6:	4b03      	ldr	r3, [pc, #12]	@ (8001fc4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	370c      	adds	r7, #12
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr
 8001fc4:	200000d0 	.word	0x200000d0

08001fc8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	220a      	movs	r2, #10
 8001fd4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8001fd6:	4b03      	ldr	r3, [pc, #12]	@ (8001fe4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	370c      	adds	r7, #12
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr
 8001fe4:	20000004 	.word	0x20000004

08001fe8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
 8001ff0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d101      	bne.n	8001ffc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8001ff8:	2303      	movs	r3, #3
 8001ffa:	e004      	b.n	8002006 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	683a      	ldr	r2, [r7, #0]
 8002000:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 8002004:	2300      	movs	r3, #0
}
 8002006:	4618      	mov	r0, r3
 8002008:	370c      	adds	r7, #12
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr

08002012 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8002012:	b480      	push	{r7}
 8002014:	b087      	sub	sp, #28
 8002016:	af00      	add	r7, sp, #0
 8002018:	60f8      	str	r0, [r7, #12]
 800201a:	60b9      	str	r1, [r7, #8]
 800201c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8002024:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d101      	bne.n	8002030 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800202c:	2303      	movs	r3, #3
 800202e:	e008      	b.n	8002042 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	68ba      	ldr	r2, [r7, #8]
 8002034:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	687a      	ldr	r2, [r7, #4]
 800203c:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8002040:	2300      	movs	r3, #0
}
 8002042:	4618      	mov	r0, r3
 8002044:	371c      	adds	r7, #28
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr

0800204e <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800204e:	b480      	push	{r7}
 8002050:	b085      	sub	sp, #20
 8002052:	af00      	add	r7, sp, #0
 8002054:	6078      	str	r0, [r7, #4]
 8002056:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800205e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d101      	bne.n	800206a <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8002066:	2303      	movs	r3, #3
 8002068:	e004      	b.n	8002074 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	683a      	ldr	r2, [r7, #0]
 800206e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8002072:	2300      	movs	r3, #0
}
 8002074:	4618      	mov	r0, r3
 8002076:	3714      	adds	r7, #20
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr

08002080 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b084      	sub	sp, #16
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800208e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8002090:	2301      	movs	r3, #1
 8002092:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800209a:	2b00      	cmp	r3, #0
 800209c:	d101      	bne.n	80020a2 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800209e:	2303      	movs	r3, #3
 80020a0:	e01a      	b.n	80020d8 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d114      	bne.n	80020d6 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	2201      	movs	r2, #1
 80020b0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80020ca:	2181      	movs	r1, #129	@ 0x81
 80020cc:	6878      	ldr	r0, [r7, #4]
 80020ce:	f000 fdbc 	bl	8002c4a <USBD_LL_Transmit>

    ret = USBD_OK;
 80020d2:	2300      	movs	r3, #0
 80020d4:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80020d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80020d8:	4618      	mov	r0, r3
 80020da:	3710      	adds	r7, #16
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}

080020e0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b084      	sub	sp, #16
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80020ee:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d101      	bne.n	80020fe <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80020fa:	2303      	movs	r3, #3
 80020fc:	e016      	b.n	800212c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	7c1b      	ldrb	r3, [r3, #16]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d109      	bne.n	800211a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800210c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002110:	2101      	movs	r1, #1
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f000 fdba 	bl	8002c8c <USBD_LL_PrepareReceive>
 8002118:	e007      	b.n	800212a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002120:	2340      	movs	r3, #64	@ 0x40
 8002122:	2101      	movs	r1, #1
 8002124:	6878      	ldr	r0, [r7, #4]
 8002126:	f000 fdb1 	bl	8002c8c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800212a:	2300      	movs	r3, #0
}
 800212c:	4618      	mov	r0, r3
 800212e:	3710      	adds	r7, #16
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}

08002134 <cdcIfInit>:
static bool is_opened = false;
static bool is_rx_full = false;


bool cdcIfInit(void)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	af00      	add	r7, sp, #0
  is_opened = false;
 8002138:	4b08      	ldr	r3, [pc, #32]	@ (800215c <cdcIfInit+0x28>)
 800213a:	2200      	movs	r2, #0
 800213c:	701a      	strb	r2, [r3, #0]
  qbufferCreate(&q_rx, q_rx_buf, 1024);
 800213e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002142:	4907      	ldr	r1, [pc, #28]	@ (8002160 <cdcIfInit+0x2c>)
 8002144:	4807      	ldr	r0, [pc, #28]	@ (8002164 <cdcIfInit+0x30>)
 8002146:	f7fe f9b2 	bl	80004ae <qbufferCreate>
  qbufferCreate(&q_tx, q_tx_buf, 1024);
 800214a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800214e:	4906      	ldr	r1, [pc, #24]	@ (8002168 <cdcIfInit+0x34>)
 8002150:	4806      	ldr	r0, [pc, #24]	@ (800216c <cdcIfInit+0x38>)
 8002152:	f7fe f9ac 	bl	80004ae <qbufferCreate>

  return true;
 8002156:	2301      	movs	r3, #1
}
 8002158:	4618      	mov	r0, r3
 800215a:	bd80      	pop	{r7, pc}
 800215c:	20001478 	.word	0x20001478
 8002160:	20000c78 	.word	0x20000c78
 8002164:	20000c50 	.word	0x20000c50
 8002168:	20001078 	.word	0x20001078
 800216c:	20000c64 	.word	0x20000c64

08002170 <cdcIfAvailable>:

uint32_t cdcIfAvailable(void)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	af00      	add	r7, sp, #0
  return qbufferAvailable(&q_rx);
 8002174:	4802      	ldr	r0, [pc, #8]	@ (8002180 <cdcIfAvailable+0x10>)
 8002176:	f7fe fa6c 	bl	8000652 <qbufferAvailable>
 800217a:	4603      	mov	r3, r0
}
 800217c:	4618      	mov	r0, r3
 800217e:	bd80      	pop	{r7, pc}
 8002180:	20000c50 	.word	0x20000c50

08002184 <cdcIfRead>:

uint8_t cdcIfRead(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
  uint8_t ret = 0;
 800218a:	2300      	movs	r3, #0
 800218c:	71fb      	strb	r3, [r7, #7]

  qbufferRead(&q_rx, &ret, 1);
 800218e:	1dfb      	adds	r3, r7, #7
 8002190:	2201      	movs	r2, #1
 8002192:	4619      	mov	r1, r3
 8002194:	4803      	ldr	r0, [pc, #12]	@ (80021a4 <cdcIfRead+0x20>)
 8002196:	f7fe fa04 	bl	80005a2 <qbufferRead>

  return ret;
 800219a:	79fb      	ldrb	r3, [r7, #7]
}
 800219c:	4618      	mov	r0, r3
 800219e:	3708      	adds	r7, #8
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	20000c50 	.word	0x20000c50

080021a8 <cdcIfWrite>:

uint32_t cdcIfWrite(uint8_t *p_data, uint32_t length)
{
 80021a8:	b590      	push	{r4, r7, lr}
 80021aa:	b087      	sub	sp, #28
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	6039      	str	r1, [r7, #0]
  uint32_t tx_len;
  uint32_t buf_len;
  uint32_t sent_len;


  if (cdcIfIsConnected() != true) return 0;
 80021b2:	f000 f84d 	bl	8002250 <cdcIfIsConnected>
 80021b6:	4603      	mov	r3, r0
 80021b8:	f083 0301 	eor.w	r3, r3, #1
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <cdcIfWrite+0x1e>
 80021c2:	2300      	movs	r3, #0
 80021c4:	e03e      	b.n	8002244 <cdcIfWrite+0x9c>


  sent_len = 0;
 80021c6:	2300      	movs	r3, #0
 80021c8:	613b      	str	r3, [r7, #16]

  pre_time = millis();
 80021ca:	f7fe f88c 	bl	80002e6 <millis>
 80021ce:	60f8      	str	r0, [r7, #12]
  while(sent_len < length)
 80021d0:	e02f      	b.n	8002232 <cdcIfWrite+0x8a>
  {
    buf_len = (q_tx.len - qbufferAvailable(&q_tx)) - 1;
 80021d2:	4b1e      	ldr	r3, [pc, #120]	@ (800224c <cdcIfWrite+0xa4>)
 80021d4:	689c      	ldr	r4, [r3, #8]
 80021d6:	481d      	ldr	r0, [pc, #116]	@ (800224c <cdcIfWrite+0xa4>)
 80021d8:	f7fe fa3b 	bl	8000652 <qbufferAvailable>
 80021dc:	4603      	mov	r3, r0
 80021de:	1ae3      	subs	r3, r4, r3
 80021e0:	3b01      	subs	r3, #1
 80021e2:	60bb      	str	r3, [r7, #8]
    tx_len = length;
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	617b      	str	r3, [r7, #20]

    if (tx_len > buf_len)
 80021e8:	697a      	ldr	r2, [r7, #20]
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d901      	bls.n	80021f4 <cdcIfWrite+0x4c>
    {
      tx_len = buf_len;
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	617b      	str	r3, [r7, #20]
    }

    if (tx_len > 0)
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d00c      	beq.n	8002214 <cdcIfWrite+0x6c>
    {
      qbufferWrite(&q_tx, p_data, tx_len);
 80021fa:	697a      	ldr	r2, [r7, #20]
 80021fc:	6879      	ldr	r1, [r7, #4]
 80021fe:	4813      	ldr	r0, [pc, #76]	@ (800224c <cdcIfWrite+0xa4>)
 8002200:	f7fe f973 	bl	80004ea <qbufferWrite>
      p_data += tx_len;
 8002204:	687a      	ldr	r2, [r7, #4]
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	4413      	add	r3, r2
 800220a:	607b      	str	r3, [r7, #4]
      sent_len += tx_len;
 800220c:	693a      	ldr	r2, [r7, #16]
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	4413      	add	r3, r2
 8002212:	613b      	str	r3, [r7, #16]
    }

    if (cdcIfIsConnected() != true)
 8002214:	f000 f81c 	bl	8002250 <cdcIfIsConnected>
 8002218:	4603      	mov	r3, r0
 800221a:	f083 0301 	eor.w	r3, r3, #1
 800221e:	b2db      	uxtb	r3, r3
 8002220:	2b00      	cmp	r3, #0
 8002222:	d10b      	bne.n	800223c <cdcIfWrite+0x94>
    {
      break;
    }

    if (millis()-pre_time >= 100)
 8002224:	f7fe f85f 	bl	80002e6 <millis>
 8002228:	4602      	mov	r2, r0
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	2b63      	cmp	r3, #99	@ 0x63
 8002230:	d806      	bhi.n	8002240 <cdcIfWrite+0x98>
  while(sent_len < length)
 8002232:	693a      	ldr	r2, [r7, #16]
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	429a      	cmp	r2, r3
 8002238:	d3cb      	bcc.n	80021d2 <cdcIfWrite+0x2a>
 800223a:	e002      	b.n	8002242 <cdcIfWrite+0x9a>
      break;
 800223c:	bf00      	nop
 800223e:	e000      	b.n	8002242 <cdcIfWrite+0x9a>
    {
      break;
 8002240:	bf00      	nop
    }
  }

  return sent_len;
 8002242:	693b      	ldr	r3, [r7, #16]
}
 8002244:	4618      	mov	r0, r3
 8002246:	371c      	adds	r7, #28
 8002248:	46bd      	mov	sp, r7
 800224a:	bd90      	pop	{r4, r7, pc}
 800224c:	20000c64 	.word	0x20000c64

08002250 <cdcIfIsConnected>:
{
  return LineCoding.bitrate;
}

bool cdcIfIsConnected(void)
{
 8002250:	b480      	push	{r7}
 8002252:	af00      	add	r7, sp, #0
  if (hUsbDeviceFS.pClassData == NULL)
 8002254:	4b11      	ldr	r3, [pc, #68]	@ (800229c <cdcIfIsConnected+0x4c>)
 8002256:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800225a:	2b00      	cmp	r3, #0
 800225c:	d101      	bne.n	8002262 <cdcIfIsConnected+0x12>
  {
    return false;
 800225e:	2300      	movs	r3, #0
 8002260:	e017      	b.n	8002292 <cdcIfIsConnected+0x42>
  }
  if (is_opened == false)
 8002262:	4b0f      	ldr	r3, [pc, #60]	@ (80022a0 <cdcIfIsConnected+0x50>)
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	f083 0301 	eor.w	r3, r3, #1
 800226a:	b2db      	uxtb	r3, r3
 800226c:	2b00      	cmp	r3, #0
 800226e:	d001      	beq.n	8002274 <cdcIfIsConnected+0x24>
  {
    return false;
 8002270:	2300      	movs	r3, #0
 8002272:	e00e      	b.n	8002292 <cdcIfIsConnected+0x42>
  }
  if (hUsbDeviceFS.dev_state != USBD_STATE_CONFIGURED)
 8002274:	4b09      	ldr	r3, [pc, #36]	@ (800229c <cdcIfIsConnected+0x4c>)
 8002276:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800227a:	b2db      	uxtb	r3, r3
 800227c:	2b03      	cmp	r3, #3
 800227e:	d001      	beq.n	8002284 <cdcIfIsConnected+0x34>
  {
    return false;
 8002280:	2300      	movs	r3, #0
 8002282:	e006      	b.n	8002292 <cdcIfIsConnected+0x42>
  }
  if (hUsbDeviceFS.dev_config == 0)
 8002284:	4b05      	ldr	r3, [pc, #20]	@ (800229c <cdcIfIsConnected+0x4c>)
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d101      	bne.n	8002290 <cdcIfIsConnected+0x40>
  {
    return false;
 800228c:	2300      	movs	r3, #0
 800228e:	e000      	b.n	8002292 <cdcIfIsConnected+0x42>
  }

  return true;
 8002290:	2301      	movs	r3, #1
}
 8002292:	4618      	mov	r0, r3
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr
 800229c:	200001ac 	.word	0x200001ac
 80022a0:	20001478 	.word	0x20001478

080022a4 <CDC_SoF_ISR>:


uint8_t CDC_SoF_ISR(struct _USBD_HandleTypeDef *pdev)
{
 80022a4:	b590      	push	{r4, r7, lr}
 80022a6:	b087      	sub	sp, #28
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]

  //-- RX
  //
  if (is_rx_full)
 80022ac:	4b23      	ldr	r3, [pc, #140]	@ (800233c <CDC_SoF_ISR+0x98>)
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d015      	beq.n	80022e0 <CDC_SoF_ISR+0x3c>
  {
    uint32_t buf_len;

    buf_len = (q_rx.len - qbufferAvailable(&q_rx)) - 1;
 80022b4:	4b22      	ldr	r3, [pc, #136]	@ (8002340 <CDC_SoF_ISR+0x9c>)
 80022b6:	689c      	ldr	r4, [r3, #8]
 80022b8:	4821      	ldr	r0, [pc, #132]	@ (8002340 <CDC_SoF_ISR+0x9c>)
 80022ba:	f7fe f9ca 	bl	8000652 <qbufferAvailable>
 80022be:	4603      	mov	r3, r0
 80022c0:	1ae3      	subs	r3, r4, r3
 80022c2:	3b01      	subs	r3, #1
 80022c4:	613b      	str	r3, [r7, #16]

    if (buf_len >= CDC_DATA_FS_MAX_PACKET_SIZE)
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	2b3f      	cmp	r3, #63	@ 0x3f
 80022ca:	d909      	bls.n	80022e0 <CDC_SoF_ISR+0x3c>
    {
      USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &UserRxBufferFS[0]);
 80022cc:	491d      	ldr	r1, [pc, #116]	@ (8002344 <CDC_SoF_ISR+0xa0>)
 80022ce:	481e      	ldr	r0, [pc, #120]	@ (8002348 <CDC_SoF_ISR+0xa4>)
 80022d0:	f7ff febd 	bl	800204e <USBD_CDC_SetRxBuffer>
      USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80022d4:	481c      	ldr	r0, [pc, #112]	@ (8002348 <CDC_SoF_ISR+0xa4>)
 80022d6:	f7ff ff03 	bl	80020e0 <USBD_CDC_ReceivePacket>
      is_rx_full = false;
 80022da:	4b18      	ldr	r3, [pc, #96]	@ (800233c <CDC_SoF_ISR+0x98>)
 80022dc:	2200      	movs	r2, #0
 80022de:	701a      	strb	r2, [r3, #0]


  //-- TX
  //
  uint32_t tx_len;
  tx_len = qbufferAvailable(&q_tx);
 80022e0:	481a      	ldr	r0, [pc, #104]	@ (800234c <CDC_SoF_ISR+0xa8>)
 80022e2:	f7fe f9b6 	bl	8000652 <qbufferAvailable>
 80022e6:	6178      	str	r0, [r7, #20]

  if (tx_len%CDC_DATA_FS_MAX_PACKET_SIZE == 0)
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d105      	bne.n	80022fe <CDC_SoF_ISR+0x5a>
  {
    if (tx_len > 0)
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d002      	beq.n	80022fe <CDC_SoF_ISR+0x5a>
    {
      tx_len = tx_len - 1;
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	3b01      	subs	r3, #1
 80022fc:	617b      	str	r3, [r7, #20]
    }
  }

  if (tx_len > 0)
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d015      	beq.n	8002330 <CDC_SoF_ISR+0x8c>
  {
    USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8002304:	4b10      	ldr	r3, [pc, #64]	@ (8002348 <CDC_SoF_ISR+0xa4>)
 8002306:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800230a:	60fb      	str	r3, [r7, #12]
    if (hcdc->TxState == 0)
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8002312:	2b00      	cmp	r3, #0
 8002314:	d10c      	bne.n	8002330 <CDC_SoF_ISR+0x8c>
    {
      qbufferRead(&q_tx, UserTxBufferFS, tx_len);
 8002316:	697a      	ldr	r2, [r7, #20]
 8002318:	490d      	ldr	r1, [pc, #52]	@ (8002350 <CDC_SoF_ISR+0xac>)
 800231a:	480c      	ldr	r0, [pc, #48]	@ (800234c <CDC_SoF_ISR+0xa8>)
 800231c:	f7fe f941 	bl	80005a2 <qbufferRead>

      USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, tx_len);
 8002320:	697a      	ldr	r2, [r7, #20]
 8002322:	490b      	ldr	r1, [pc, #44]	@ (8002350 <CDC_SoF_ISR+0xac>)
 8002324:	4808      	ldr	r0, [pc, #32]	@ (8002348 <CDC_SoF_ISR+0xa4>)
 8002326:	f7ff fe74 	bl	8002012 <USBD_CDC_SetTxBuffer>
      USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800232a:	4807      	ldr	r0, [pc, #28]	@ (8002348 <CDC_SoF_ISR+0xa4>)
 800232c:	f7ff fea8 	bl	8002080 <USBD_CDC_TransmitPacket>
    }
  }

  return 0;
 8002330:	2300      	movs	r3, #0
}
 8002332:	4618      	mov	r0, r3
 8002334:	371c      	adds	r7, #28
 8002336:	46bd      	mov	sp, r7
 8002338:	bd90      	pop	{r4, r7, pc}
 800233a:	bf00      	nop
 800233c:	20001479 	.word	0x20001479
 8002340:	20000c50 	.word	0x20000c50
 8002344:	20000480 	.word	0x20000480
 8002348:	200001ac 	.word	0x200001ac
 800234c:	20000c64 	.word	0x20000c64
 8002350:	20000868 	.word	0x20000868

08002354 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	af00      	add	r7, sp, #0

  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8002358:	2200      	movs	r2, #0
 800235a:	4907      	ldr	r1, [pc, #28]	@ (8002378 <CDC_Init_FS+0x24>)
 800235c:	4807      	ldr	r0, [pc, #28]	@ (800237c <CDC_Init_FS+0x28>)
 800235e:	f7ff fe58 	bl	8002012 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8002362:	4907      	ldr	r1, [pc, #28]	@ (8002380 <CDC_Init_FS+0x2c>)
 8002364:	4805      	ldr	r0, [pc, #20]	@ (800237c <CDC_Init_FS+0x28>)
 8002366:	f7ff fe72 	bl	800204e <USBD_CDC_SetRxBuffer>

  is_opened = false;
 800236a:	4b06      	ldr	r3, [pc, #24]	@ (8002384 <CDC_Init_FS+0x30>)
 800236c:	2200      	movs	r2, #0
 800236e:	701a      	strb	r2, [r3, #0]

  return (USBD_OK);
 8002370:	2300      	movs	r3, #0

}
 8002372:	4618      	mov	r0, r3
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	20000868 	.word	0x20000868
 800237c:	200001ac 	.word	0x200001ac
 8002380:	20000480 	.word	0x20000480
 8002384:	20001478 	.word	0x20001478

08002388 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8002388:	b480      	push	{r7}
 800238a:	af00      	add	r7, sp, #0

  is_opened = false;
 800238c:	4b04      	ldr	r3, [pc, #16]	@ (80023a0 <CDC_DeInit_FS+0x18>)
 800238e:	2200      	movs	r2, #0
 8002390:	701a      	strb	r2, [r3, #0]

  return (USBD_OK);
 8002392:	2300      	movs	r3, #0

}
 8002394:	4618      	mov	r0, r3
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr
 800239e:	bf00      	nop
 80023a0:	20001478 	.word	0x20001478

080023a4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b085      	sub	sp, #20
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	4603      	mov	r3, r0
 80023ac:	6039      	str	r1, [r7, #0]
 80023ae:	71fb      	strb	r3, [r7, #7]
 80023b0:	4613      	mov	r3, r2
 80023b2:	80bb      	strh	r3, [r7, #4]
  USBD_SetupReqTypedef *req = (USBD_SetupReqTypedef *)pbuf;
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	60fb      	str	r3, [r7, #12]
  uint32_t bitrate;
  switch(cmd)
 80023b8:	79fb      	ldrb	r3, [r7, #7]
 80023ba:	2b23      	cmp	r3, #35	@ 0x23
 80023bc:	f200 80b7 	bhi.w	800252e <CDC_Control_FS+0x18a>
 80023c0:	a201      	add	r2, pc, #4	@ (adr r2, 80023c8 <CDC_Control_FS+0x24>)
 80023c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023c6:	bf00      	nop
 80023c8:	0800252f 	.word	0x0800252f
 80023cc:	0800252f 	.word	0x0800252f
 80023d0:	0800252f 	.word	0x0800252f
 80023d4:	0800252f 	.word	0x0800252f
 80023d8:	0800252f 	.word	0x0800252f
 80023dc:	0800252f 	.word	0x0800252f
 80023e0:	0800252f 	.word	0x0800252f
 80023e4:	0800252f 	.word	0x0800252f
 80023e8:	0800252f 	.word	0x0800252f
 80023ec:	0800252f 	.word	0x0800252f
 80023f0:	0800252f 	.word	0x0800252f
 80023f4:	0800252f 	.word	0x0800252f
 80023f8:	0800252f 	.word	0x0800252f
 80023fc:	0800252f 	.word	0x0800252f
 8002400:	0800252f 	.word	0x0800252f
 8002404:	0800252f 	.word	0x0800252f
 8002408:	0800252f 	.word	0x0800252f
 800240c:	0800252f 	.word	0x0800252f
 8002410:	0800252f 	.word	0x0800252f
 8002414:	0800252f 	.word	0x0800252f
 8002418:	0800252f 	.word	0x0800252f
 800241c:	0800252f 	.word	0x0800252f
 8002420:	0800252f 	.word	0x0800252f
 8002424:	0800252f 	.word	0x0800252f
 8002428:	0800252f 	.word	0x0800252f
 800242c:	0800252f 	.word	0x0800252f
 8002430:	0800252f 	.word	0x0800252f
 8002434:	0800252f 	.word	0x0800252f
 8002438:	0800252f 	.word	0x0800252f
 800243c:	0800252f 	.word	0x0800252f
 8002440:	0800252f 	.word	0x0800252f
 8002444:	0800252f 	.word	0x0800252f
 8002448:	08002459 	.word	0x08002459
 800244c:	080024bf 	.word	0x080024bf
 8002450:	08002513 	.word	0x08002513
 8002454:	0800252f 	.word	0x0800252f
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
      bitrate   = (uint32_t)(pbuf[0]);
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	60bb      	str	r3, [r7, #8]
      bitrate  |= (uint32_t)(pbuf[1]<<8);
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	3301      	adds	r3, #1
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	021b      	lsls	r3, r3, #8
 8002466:	68ba      	ldr	r2, [r7, #8]
 8002468:	4313      	orrs	r3, r2
 800246a:	60bb      	str	r3, [r7, #8]
      bitrate  |= (uint32_t)(pbuf[2]<<16);
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	3302      	adds	r3, #2
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	041b      	lsls	r3, r3, #16
 8002474:	68ba      	ldr	r2, [r7, #8]
 8002476:	4313      	orrs	r3, r2
 8002478:	60bb      	str	r3, [r7, #8]
      bitrate  |= (uint32_t)(pbuf[3]<<24);
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	3303      	adds	r3, #3
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	061b      	lsls	r3, r3, #24
 8002482:	68ba      	ldr	r2, [r7, #8]
 8002484:	4313      	orrs	r3, r2
 8002486:	60bb      	str	r3, [r7, #8]
//      LineCoding.bitrate   = (uint32_t)(pbuf[0]);
//      LineCoding.bitrate   |= (uint32_t)(pbuf[1]<<8);
//      LineCoding.bitrate   |= (uint32_t)(pbuf[2]<<16);
//      LineCoding.bitrate   |= (uint32_t)(pbuf[3]<<24);
      LineCoding.format    = pbuf[4];
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	791a      	ldrb	r2, [r3, #4]
 800248c:	4b2c      	ldr	r3, [pc, #176]	@ (8002540 <CDC_Control_FS+0x19c>)
 800248e:	711a      	strb	r2, [r3, #4]
      LineCoding.paritytype= pbuf[5];
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	795a      	ldrb	r2, [r3, #5]
 8002494:	4b2a      	ldr	r3, [pc, #168]	@ (8002540 <CDC_Control_FS+0x19c>)
 8002496:	715a      	strb	r2, [r3, #5]
      LineCoding.datatype  = pbuf[6];
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	799a      	ldrb	r2, [r3, #6]
 800249c:	4b28      	ldr	r3, [pc, #160]	@ (8002540 <CDC_Control_FS+0x19c>)
 800249e:	719a      	strb	r2, [r3, #6]
      LineCoding.bitrate   = bitrate - (bitrate%10);
 80024a0:	68b9      	ldr	r1, [r7, #8]
 80024a2:	4b28      	ldr	r3, [pc, #160]	@ (8002544 <CDC_Control_FS+0x1a0>)
 80024a4:	fba3 2301 	umull	r2, r3, r3, r1
 80024a8:	08da      	lsrs	r2, r3, #3
 80024aa:	4613      	mov	r3, r2
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	4413      	add	r3, r2
 80024b0:	005b      	lsls	r3, r3, #1
 80024b2:	1aca      	subs	r2, r1, r3
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	1a9b      	subs	r3, r3, r2
 80024b8:	4a21      	ldr	r2, [pc, #132]	@ (8002540 <CDC_Control_FS+0x19c>)
 80024ba:	6013      	str	r3, [r2, #0]
//      }
//      if (LineCoding.bitrate == 115200)
//        cdc_type = USB_CON_CLI;
//     else
//       cdc_type = 0;
    break;
 80024bc:	e038      	b.n	8002530 <CDC_Control_FS+0x18c>

//      pbuf[0] = (uint8_t)(bitrate);
//      pbuf[1] = (uint8_t)(bitrate>>8);
//      pbuf[2] = (uint8_t)(bitrate>>16);
//      pbuf[3] = (uint8_t)(bitrate>>24);
      pbuf[0] = (uint8_t)(LineCoding.bitrate);
 80024be:	4b20      	ldr	r3, [pc, #128]	@ (8002540 <CDC_Control_FS+0x19c>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	b2da      	uxtb	r2, r3
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	701a      	strb	r2, [r3, #0]
      pbuf[1] = (uint8_t)(LineCoding.bitrate>>8);
 80024c8:	4b1d      	ldr	r3, [pc, #116]	@ (8002540 <CDC_Control_FS+0x19c>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	0a1a      	lsrs	r2, r3, #8
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	3301      	adds	r3, #1
 80024d2:	b2d2      	uxtb	r2, r2
 80024d4:	701a      	strb	r2, [r3, #0]
      pbuf[2] = (uint8_t)(LineCoding.bitrate>>16);
 80024d6:	4b1a      	ldr	r3, [pc, #104]	@ (8002540 <CDC_Control_FS+0x19c>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	0c1a      	lsrs	r2, r3, #16
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	3302      	adds	r3, #2
 80024e0:	b2d2      	uxtb	r2, r2
 80024e2:	701a      	strb	r2, [r3, #0]
      pbuf[3] = (uint8_t)(LineCoding.bitrate>>24);
 80024e4:	4b16      	ldr	r3, [pc, #88]	@ (8002540 <CDC_Control_FS+0x19c>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	0e1a      	lsrs	r2, r3, #24
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	3303      	adds	r3, #3
 80024ee:	b2d2      	uxtb	r2, r2
 80024f0:	701a      	strb	r2, [r3, #0]
      pbuf[4] = LineCoding.format;
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	3304      	adds	r3, #4
 80024f6:	4a12      	ldr	r2, [pc, #72]	@ (8002540 <CDC_Control_FS+0x19c>)
 80024f8:	7912      	ldrb	r2, [r2, #4]
 80024fa:	701a      	strb	r2, [r3, #0]
      pbuf[5] = LineCoding.paritytype;
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	3305      	adds	r3, #5
 8002500:	4a0f      	ldr	r2, [pc, #60]	@ (8002540 <CDC_Control_FS+0x19c>)
 8002502:	7952      	ldrb	r2, [r2, #5]
 8002504:	701a      	strb	r2, [r3, #0]
      pbuf[6] = LineCoding.datatype;
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	3306      	adds	r3, #6
 800250a:	4a0d      	ldr	r2, [pc, #52]	@ (8002540 <CDC_Control_FS+0x19c>)
 800250c:	7992      	ldrb	r2, [r2, #6]
 800250e:	701a      	strb	r2, [r3, #0]
    break;
 8002510:	e00e      	b.n	8002530 <CDC_Control_FS+0x18c>

    case CDC_SET_CONTROL_LINE_STATE:
      // TODO : 나중에 다른 터미널에서 문제 없는지 확인 필요
      //is_opened = req->wValue&0x01;  // 0 bit:DTR, 1 bit:RTS
      if (req->wValue & 0x01)
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	885b      	ldrh	r3, [r3, #2]
 8002516:	f003 0301 	and.w	r3, r3, #1
 800251a:	2b00      	cmp	r3, #0
 800251c:	d003      	beq.n	8002526 <CDC_Control_FS+0x182>
        is_opened = true;
 800251e:	4b0a      	ldr	r3, [pc, #40]	@ (8002548 <CDC_Control_FS+0x1a4>)
 8002520:	2201      	movs	r2, #1
 8002522:	701a      	strb	r2, [r3, #0]
      else
        is_opened = false;
    break;
 8002524:	e004      	b.n	8002530 <CDC_Control_FS+0x18c>
        is_opened = false;
 8002526:	4b08      	ldr	r3, [pc, #32]	@ (8002548 <CDC_Control_FS+0x1a4>)
 8002528:	2200      	movs	r2, #0
 800252a:	701a      	strb	r2, [r3, #0]
    break;
 800252c:	e000      	b.n	8002530 <CDC_Control_FS+0x18c>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800252e:	bf00      	nop
  }

  return (USBD_OK);
 8002530:	2300      	movs	r3, #0

}
 8002532:	4618      	mov	r0, r3
 8002534:	3714      	adds	r7, #20
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr
 800253e:	bf00      	nop
 8002540:	20000128 	.word	0x20000128
 8002544:	cccccccd 	.word	0xcccccccd
 8002548:	20001478 	.word	0x20001478

0800254c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800254c:	b590      	push	{r4, r7, lr}
 800254e:	b085      	sub	sp, #20
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	6039      	str	r1, [r7, #0]




  qbufferWrite(&q_rx, Buf, *Len);
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	461a      	mov	r2, r3
 800255c:	6879      	ldr	r1, [r7, #4]
 800255e:	480f      	ldr	r0, [pc, #60]	@ (800259c <CDC_Receive_FS+0x50>)
 8002560:	f7fd ffc3 	bl	80004ea <qbufferWrite>
//    }
//  }

  uint32_t buf_len;

  buf_len = (q_rx.len - qbufferAvailable(&q_rx)) - 1;
 8002564:	4b0d      	ldr	r3, [pc, #52]	@ (800259c <CDC_Receive_FS+0x50>)
 8002566:	689c      	ldr	r4, [r3, #8]
 8002568:	480c      	ldr	r0, [pc, #48]	@ (800259c <CDC_Receive_FS+0x50>)
 800256a:	f7fe f872 	bl	8000652 <qbufferAvailable>
 800256e:	4603      	mov	r3, r0
 8002570:	1ae3      	subs	r3, r4, r3
 8002572:	3b01      	subs	r3, #1
 8002574:	60fb      	str	r3, [r7, #12]

  if (buf_len >= CDC_DATA_FS_MAX_PACKET_SIZE)
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2b3f      	cmp	r3, #63	@ 0x3f
 800257a:	d907      	bls.n	800258c <CDC_Receive_FS+0x40>
  {
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800257c:	6879      	ldr	r1, [r7, #4]
 800257e:	4808      	ldr	r0, [pc, #32]	@ (80025a0 <CDC_Receive_FS+0x54>)
 8002580:	f7ff fd65 	bl	800204e <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8002584:	4806      	ldr	r0, [pc, #24]	@ (80025a0 <CDC_Receive_FS+0x54>)
 8002586:	f7ff fdab 	bl	80020e0 <USBD_CDC_ReceivePacket>
 800258a:	e002      	b.n	8002592 <CDC_Receive_FS+0x46>
  }
  else
  {
    is_rx_full = true;
 800258c:	4b05      	ldr	r3, [pc, #20]	@ (80025a4 <CDC_Receive_FS+0x58>)
 800258e:	2201      	movs	r2, #1
 8002590:	701a      	strb	r2, [r3, #0]
  }

  return (USBD_OK);
 8002592:	2300      	movs	r3, #0

}
 8002594:	4618      	mov	r0, r3
 8002596:	3714      	adds	r7, #20
 8002598:	46bd      	mov	sp, r7
 800259a:	bd90      	pop	{r4, r7, pc}
 800259c:	20000c50 	.word	0x20000c50
 80025a0:	200001ac 	.word	0x200001ac
 80025a4:	20001479 	.word	0x20001479

080025a8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b087      	sub	sp, #28
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	60f8      	str	r0, [r7, #12]
 80025b0:	60b9      	str	r1, [r7, #8]
 80025b2:	4613      	mov	r3, r2
 80025b4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80025b6:	2300      	movs	r3, #0
 80025b8:	75fb      	strb	r3, [r7, #23]

  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);

  return result;
 80025ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80025be:	4618      	mov	r0, r3
 80025c0:	371c      	adds	r7, #28
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr
	...

080025cc <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b083      	sub	sp, #12
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	4603      	mov	r3, r0
 80025d4:	6039      	str	r1, [r7, #0]
 80025d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	2212      	movs	r2, #18
 80025dc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 80025de:	4b03      	ldr	r3, [pc, #12]	@ (80025ec <USBD_CDC_DeviceDescriptor+0x20>)
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	370c      	adds	r7, #12
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr
 80025ec:	20000150 	.word	0x20000150

080025f0 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b083      	sub	sp, #12
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	4603      	mov	r3, r0
 80025f8:	6039      	str	r1, [r7, #0]
 80025fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	2204      	movs	r2, #4
 8002600:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8002602:	4b03      	ldr	r3, [pc, #12]	@ (8002610 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8002604:	4618      	mov	r0, r3
 8002606:	370c      	adds	r7, #12
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr
 8002610:	20000164 	.word	0x20000164

08002614 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b082      	sub	sp, #8
 8002618:	af00      	add	r7, sp, #0
 800261a:	4603      	mov	r3, r0
 800261c:	6039      	str	r1, [r7, #0]
 800261e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8002620:	79fb      	ldrb	r3, [r7, #7]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d105      	bne.n	8002632 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8002626:	683a      	ldr	r2, [r7, #0]
 8002628:	4907      	ldr	r1, [pc, #28]	@ (8002648 <USBD_CDC_ProductStrDescriptor+0x34>)
 800262a:	4808      	ldr	r0, [pc, #32]	@ (800264c <USBD_CDC_ProductStrDescriptor+0x38>)
 800262c:	f7ff f97f 	bl	800192e <USBD_GetString>
 8002630:	e004      	b.n	800263c <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8002632:	683a      	ldr	r2, [r7, #0]
 8002634:	4904      	ldr	r1, [pc, #16]	@ (8002648 <USBD_CDC_ProductStrDescriptor+0x34>)
 8002636:	4805      	ldr	r0, [pc, #20]	@ (800264c <USBD_CDC_ProductStrDescriptor+0x38>)
 8002638:	f7ff f979 	bl	800192e <USBD_GetString>
  }
  return USBD_StrDesc;
 800263c:	4b02      	ldr	r3, [pc, #8]	@ (8002648 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800263e:	4618      	mov	r0, r3
 8002640:	3708      	adds	r7, #8
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	2000147c 	.word	0x2000147c
 800264c:	08007ba0 	.word	0x08007ba0

08002650 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b082      	sub	sp, #8
 8002654:	af00      	add	r7, sp, #0
 8002656:	4603      	mov	r3, r0
 8002658:	6039      	str	r1, [r7, #0]
 800265a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800265c:	683a      	ldr	r2, [r7, #0]
 800265e:	4904      	ldr	r1, [pc, #16]	@ (8002670 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8002660:	4804      	ldr	r0, [pc, #16]	@ (8002674 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8002662:	f7ff f964 	bl	800192e <USBD_GetString>
  return USBD_StrDesc;
 8002666:	4b02      	ldr	r3, [pc, #8]	@ (8002670 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8002668:	4618      	mov	r0, r3
 800266a:	3708      	adds	r7, #8
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}
 8002670:	2000147c 	.word	0x2000147c
 8002674:	08007bb8 	.word	0x08007bb8

08002678 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b082      	sub	sp, #8
 800267c:	af00      	add	r7, sp, #0
 800267e:	4603      	mov	r3, r0
 8002680:	6039      	str	r1, [r7, #0]
 8002682:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	221a      	movs	r2, #26
 8002688:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800268a:	f000 f843 	bl	8002714 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800268e:	4b02      	ldr	r3, [pc, #8]	@ (8002698 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8002690:	4618      	mov	r0, r3
 8002692:	3708      	adds	r7, #8
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}
 8002698:	20000168 	.word	0x20000168

0800269c <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b082      	sub	sp, #8
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	4603      	mov	r3, r0
 80026a4:	6039      	str	r1, [r7, #0]
 80026a6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80026a8:	79fb      	ldrb	r3, [r7, #7]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d105      	bne.n	80026ba <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80026ae:	683a      	ldr	r2, [r7, #0]
 80026b0:	4907      	ldr	r1, [pc, #28]	@ (80026d0 <USBD_CDC_ConfigStrDescriptor+0x34>)
 80026b2:	4808      	ldr	r0, [pc, #32]	@ (80026d4 <USBD_CDC_ConfigStrDescriptor+0x38>)
 80026b4:	f7ff f93b 	bl	800192e <USBD_GetString>
 80026b8:	e004      	b.n	80026c4 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80026ba:	683a      	ldr	r2, [r7, #0]
 80026bc:	4904      	ldr	r1, [pc, #16]	@ (80026d0 <USBD_CDC_ConfigStrDescriptor+0x34>)
 80026be:	4805      	ldr	r0, [pc, #20]	@ (80026d4 <USBD_CDC_ConfigStrDescriptor+0x38>)
 80026c0:	f7ff f935 	bl	800192e <USBD_GetString>
  }
  return USBD_StrDesc;
 80026c4:	4b02      	ldr	r3, [pc, #8]	@ (80026d0 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3708      	adds	r7, #8
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	2000147c 	.word	0x2000147c
 80026d4:	08007bcc 	.word	0x08007bcc

080026d8 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b082      	sub	sp, #8
 80026dc:	af00      	add	r7, sp, #0
 80026de:	4603      	mov	r3, r0
 80026e0:	6039      	str	r1, [r7, #0]
 80026e2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80026e4:	79fb      	ldrb	r3, [r7, #7]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d105      	bne.n	80026f6 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80026ea:	683a      	ldr	r2, [r7, #0]
 80026ec:	4907      	ldr	r1, [pc, #28]	@ (800270c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 80026ee:	4808      	ldr	r0, [pc, #32]	@ (8002710 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 80026f0:	f7ff f91d 	bl	800192e <USBD_GetString>
 80026f4:	e004      	b.n	8002700 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80026f6:	683a      	ldr	r2, [r7, #0]
 80026f8:	4904      	ldr	r1, [pc, #16]	@ (800270c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 80026fa:	4805      	ldr	r0, [pc, #20]	@ (8002710 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 80026fc:	f7ff f917 	bl	800192e <USBD_GetString>
  }
  return USBD_StrDesc;
 8002700:	4b02      	ldr	r3, [pc, #8]	@ (800270c <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8002702:	4618      	mov	r0, r3
 8002704:	3708      	adds	r7, #8
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	2000147c 	.word	0x2000147c
 8002710:	08007bd8 	.word	0x08007bd8

08002714 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b084      	sub	sp, #16
 8002718:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800271a:	4b0f      	ldr	r3, [pc, #60]	@ (8002758 <Get_SerialNum+0x44>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8002720:	4b0e      	ldr	r3, [pc, #56]	@ (800275c <Get_SerialNum+0x48>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8002726:	4b0e      	ldr	r3, [pc, #56]	@ (8002760 <Get_SerialNum+0x4c>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800272c:	68fa      	ldr	r2, [r7, #12]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4413      	add	r3, r2
 8002732:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d009      	beq.n	800274e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800273a:	2208      	movs	r2, #8
 800273c:	4909      	ldr	r1, [pc, #36]	@ (8002764 <Get_SerialNum+0x50>)
 800273e:	68f8      	ldr	r0, [r7, #12]
 8002740:	f000 f814 	bl	800276c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8002744:	2204      	movs	r2, #4
 8002746:	4908      	ldr	r1, [pc, #32]	@ (8002768 <Get_SerialNum+0x54>)
 8002748:	68b8      	ldr	r0, [r7, #8]
 800274a:	f000 f80f 	bl	800276c <IntToUnicode>
  }
}
 800274e:	bf00      	nop
 8002750:	3710      	adds	r7, #16
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	1fff7590 	.word	0x1fff7590
 800275c:	1fff7594 	.word	0x1fff7594
 8002760:	1fff7598 	.word	0x1fff7598
 8002764:	2000016a 	.word	0x2000016a
 8002768:	2000017a 	.word	0x2000017a

0800276c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800276c:	b480      	push	{r7}
 800276e:	b087      	sub	sp, #28
 8002770:	af00      	add	r7, sp, #0
 8002772:	60f8      	str	r0, [r7, #12]
 8002774:	60b9      	str	r1, [r7, #8]
 8002776:	4613      	mov	r3, r2
 8002778:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800277a:	2300      	movs	r3, #0
 800277c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800277e:	2300      	movs	r3, #0
 8002780:	75fb      	strb	r3, [r7, #23]
 8002782:	e027      	b.n	80027d4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	0f1b      	lsrs	r3, r3, #28
 8002788:	2b09      	cmp	r3, #9
 800278a:	d80b      	bhi.n	80027a4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	0f1b      	lsrs	r3, r3, #28
 8002790:	b2da      	uxtb	r2, r3
 8002792:	7dfb      	ldrb	r3, [r7, #23]
 8002794:	005b      	lsls	r3, r3, #1
 8002796:	4619      	mov	r1, r3
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	440b      	add	r3, r1
 800279c:	3230      	adds	r2, #48	@ 0x30
 800279e:	b2d2      	uxtb	r2, r2
 80027a0:	701a      	strb	r2, [r3, #0]
 80027a2:	e00a      	b.n	80027ba <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	0f1b      	lsrs	r3, r3, #28
 80027a8:	b2da      	uxtb	r2, r3
 80027aa:	7dfb      	ldrb	r3, [r7, #23]
 80027ac:	005b      	lsls	r3, r3, #1
 80027ae:	4619      	mov	r1, r3
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	440b      	add	r3, r1
 80027b4:	3237      	adds	r2, #55	@ 0x37
 80027b6:	b2d2      	uxtb	r2, r2
 80027b8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	011b      	lsls	r3, r3, #4
 80027be:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80027c0:	7dfb      	ldrb	r3, [r7, #23]
 80027c2:	005b      	lsls	r3, r3, #1
 80027c4:	3301      	adds	r3, #1
 80027c6:	68ba      	ldr	r2, [r7, #8]
 80027c8:	4413      	add	r3, r2
 80027ca:	2200      	movs	r2, #0
 80027cc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80027ce:	7dfb      	ldrb	r3, [r7, #23]
 80027d0:	3301      	adds	r3, #1
 80027d2:	75fb      	strb	r3, [r7, #23]
 80027d4:	7dfa      	ldrb	r2, [r7, #23]
 80027d6:	79fb      	ldrb	r3, [r7, #7]
 80027d8:	429a      	cmp	r2, r3
 80027da:	d3d3      	bcc.n	8002784 <IntToUnicode+0x18>
  }
}
 80027dc:	bf00      	nop
 80027de:	bf00      	nop
 80027e0:	371c      	adds	r7, #28
 80027e2:	46bd      	mov	sp, r7
 80027e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e8:	4770      	bx	lr
	...

080027ec <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b094      	sub	sp, #80	@ 0x50
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80027f4:	f107 030c 	add.w	r3, r7, #12
 80027f8:	2244      	movs	r2, #68	@ 0x44
 80027fa:	2100      	movs	r1, #0
 80027fc:	4618      	mov	r0, r3
 80027fe:	f005 f991 	bl	8007b24 <memset>
  if(pcdHandle->Instance==USB)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a15      	ldr	r2, [pc, #84]	@ (800285c <HAL_PCD_MspInit+0x70>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d122      	bne.n	8002852 <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800280c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002810:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8002812:	2300      	movs	r3, #0
 8002814:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002816:	f107 030c 	add.w	r3, r7, #12
 800281a:	4618      	mov	r0, r3
 800281c:	f003 f8f0 	bl	8005a00 <HAL_RCCEx_PeriphCLKConfig>
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
 8002824:	d001      	beq.n	800282a <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 8002826:	f7fd fdb2 	bl	800038e <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800282a:	4b0d      	ldr	r3, [pc, #52]	@ (8002860 <HAL_PCD_MspInit+0x74>)
 800282c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800282e:	4a0c      	ldr	r2, [pc, #48]	@ (8002860 <HAL_PCD_MspInit+0x74>)
 8002830:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002834:	6593      	str	r3, [r2, #88]	@ 0x58
 8002836:	4b0a      	ldr	r3, [pc, #40]	@ (8002860 <HAL_PCD_MspInit+0x74>)
 8002838:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800283a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800283e:	60bb      	str	r3, [r7, #8]
 8002840:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 5, 0);
 8002842:	2200      	movs	r2, #0
 8002844:	2105      	movs	r1, #5
 8002846:	2014      	movs	r0, #20
 8002848:	f000 fc45 	bl	80030d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800284c:	2014      	movs	r0, #20
 800284e:	f000 fc5c 	bl	800310a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8002852:	bf00      	nop
 8002854:	3750      	adds	r7, #80	@ 0x50
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	40005c00 	.word	0x40005c00
 8002860:	40021000 	.word	0x40021000

08002864 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b082      	sub	sp, #8
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8002878:	4619      	mov	r1, r3
 800287a:	4610      	mov	r0, r2
 800287c:	f7fe f8ba 	bl	80009f4 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8002880:	bf00      	nop
 8002882:	3708      	adds	r7, #8
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}

08002888 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b082      	sub	sp, #8
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	460b      	mov	r3, r1
 8002892:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800289a:	78fa      	ldrb	r2, [r7, #3]
 800289c:	6879      	ldr	r1, [r7, #4]
 800289e:	4613      	mov	r3, r2
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	4413      	add	r3, r2
 80028a4:	00db      	lsls	r3, r3, #3
 80028a6:	440b      	add	r3, r1
 80028a8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	78fb      	ldrb	r3, [r7, #3]
 80028b0:	4619      	mov	r1, r3
 80028b2:	f7fe f8f4 	bl	8000a9e <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 80028b6:	bf00      	nop
 80028b8:	3708      	adds	r7, #8
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}

080028be <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80028be:	b580      	push	{r7, lr}
 80028c0:	b082      	sub	sp, #8
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	6078      	str	r0, [r7, #4]
 80028c6:	460b      	mov	r3, r1
 80028c8:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 80028d0:	78fa      	ldrb	r2, [r7, #3]
 80028d2:	6879      	ldr	r1, [r7, #4]
 80028d4:	4613      	mov	r3, r2
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	4413      	add	r3, r2
 80028da:	00db      	lsls	r3, r3, #3
 80028dc:	440b      	add	r3, r1
 80028de:	3324      	adds	r3, #36	@ 0x24
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	78fb      	ldrb	r3, [r7, #3]
 80028e4:	4619      	mov	r1, r3
 80028e6:	f7fe f93d 	bl	8000b64 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 80028ea:	bf00      	nop
 80028ec:	3708      	adds	r7, #8
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}

080028f2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80028f2:	b580      	push	{r7, lr}
 80028f4:	b082      	sub	sp, #8
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8002900:	4618      	mov	r0, r3
 8002902:	f7fe fa51 	bl	8000da8 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8002906:	bf00      	nop
 8002908:	3708      	adds	r7, #8
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}

0800290e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800290e:	b580      	push	{r7, lr}
 8002910:	b084      	sub	sp, #16
 8002912:	af00      	add	r7, sp, #0
 8002914:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8002916:	2301      	movs	r3, #1
 8002918:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	795b      	ldrb	r3, [r3, #5]
 800291e:	2b02      	cmp	r3, #2
 8002920:	d001      	beq.n	8002926 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8002922:	f7fd fd34 	bl	800038e <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800292c:	7bfa      	ldrb	r2, [r7, #15]
 800292e:	4611      	mov	r1, r2
 8002930:	4618      	mov	r0, r3
 8002932:	f7fe f9fb 	bl	8000d2c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800293c:	4618      	mov	r0, r3
 800293e:	f7fe f9a7 	bl	8000c90 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8002942:	bf00      	nop
 8002944:	3710      	adds	r7, #16
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
	...

0800294c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b082      	sub	sp, #8
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800295a:	4618      	mov	r0, r3
 800295c:	f7fe f9f6 	bl	8000d4c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	7a5b      	ldrb	r3, [r3, #9]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d005      	beq.n	8002974 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8002968:	4b04      	ldr	r3, [pc, #16]	@ (800297c <HAL_PCD_SuspendCallback+0x30>)
 800296a:	691b      	ldr	r3, [r3, #16]
 800296c:	4a03      	ldr	r2, [pc, #12]	@ (800297c <HAL_PCD_SuspendCallback+0x30>)
 800296e:	f043 0306 	orr.w	r3, r3, #6
 8002972:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8002974:	bf00      	nop
 8002976:	3708      	adds	r7, #8
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}
 800297c:	e000ed00 	.word	0xe000ed00

08002980 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b082      	sub	sp, #8
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	7a5b      	ldrb	r3, [r3, #9]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d007      	beq.n	80029a0 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8002990:	4b08      	ldr	r3, [pc, #32]	@ (80029b4 <HAL_PCD_ResumeCallback+0x34>)
 8002992:	691b      	ldr	r3, [r3, #16]
 8002994:	4a07      	ldr	r2, [pc, #28]	@ (80029b4 <HAL_PCD_ResumeCallback+0x34>)
 8002996:	f023 0306 	bic.w	r3, r3, #6
 800299a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800299c:	f000 f9f8 	bl	8002d90 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80029a6:	4618      	mov	r0, r3
 80029a8:	f7fe f9e6 	bl	8000d78 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 80029ac:	bf00      	nop
 80029ae:	3708      	adds	r7, #8
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}
 80029b4:	e000ed00 	.word	0xe000ed00

080029b8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b082      	sub	sp, #8
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 80029c0:	4a2b      	ldr	r2, [pc, #172]	@ (8002a70 <USBD_LL_Init+0xb8>)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	4a29      	ldr	r2, [pc, #164]	@ (8002a70 <USBD_LL_Init+0xb8>)
 80029cc:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 80029d0:	4b27      	ldr	r3, [pc, #156]	@ (8002a70 <USBD_LL_Init+0xb8>)
 80029d2:	4a28      	ldr	r2, [pc, #160]	@ (8002a74 <USBD_LL_Init+0xbc>)
 80029d4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80029d6:	4b26      	ldr	r3, [pc, #152]	@ (8002a70 <USBD_LL_Init+0xb8>)
 80029d8:	2208      	movs	r2, #8
 80029da:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80029dc:	4b24      	ldr	r3, [pc, #144]	@ (8002a70 <USBD_LL_Init+0xb8>)
 80029de:	2202      	movs	r2, #2
 80029e0:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80029e2:	4b23      	ldr	r3, [pc, #140]	@ (8002a70 <USBD_LL_Init+0xb8>)
 80029e4:	2202      	movs	r2, #2
 80029e6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = ENABLE;
 80029e8:	4b21      	ldr	r3, [pc, #132]	@ (8002a70 <USBD_LL_Init+0xb8>)
 80029ea:	2201      	movs	r2, #1
 80029ec:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80029ee:	4b20      	ldr	r3, [pc, #128]	@ (8002a70 <USBD_LL_Init+0xb8>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80029f4:	4b1e      	ldr	r3, [pc, #120]	@ (8002a70 <USBD_LL_Init+0xb8>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80029fa:	4b1d      	ldr	r3, [pc, #116]	@ (8002a70 <USBD_LL_Init+0xb8>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8002a00:	481b      	ldr	r0, [pc, #108]	@ (8002a70 <USBD_LL_Init+0xb8>)
 8002a02:	f000 fd51 	bl	80034a8 <HAL_PCD_Init>
 8002a06:	4603      	mov	r3, r0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d001      	beq.n	8002a10 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 8002a0c:	f7fd fcbf 	bl	800038e <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8002a16:	2318      	movs	r3, #24
 8002a18:	2200      	movs	r2, #0
 8002a1a:	2100      	movs	r1, #0
 8002a1c:	f002 f9d8 	bl	8004dd0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8002a26:	2358      	movs	r3, #88	@ 0x58
 8002a28:	2200      	movs	r2, #0
 8002a2a:	2180      	movs	r1, #128	@ 0x80
 8002a2c:	f002 f9d0 	bl	8004dd0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8002a36:	23c0      	movs	r3, #192	@ 0xc0
 8002a38:	2200      	movs	r2, #0
 8002a3a:	2181      	movs	r1, #129	@ 0x81
 8002a3c:	f002 f9c8 	bl	8004dd0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8002a46:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	2101      	movs	r1, #1
 8002a4e:	f002 f9bf 	bl	8004dd0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8002a58:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	2182      	movs	r1, #130	@ 0x82
 8002a60:	f002 f9b6 	bl	8004dd0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8002a64:	2300      	movs	r3, #0
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3708      	adds	r7, #8
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	2000167c 	.word	0x2000167c
 8002a74:	40005c00 	.word	0x40005c00

08002a78 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b084      	sub	sp, #16
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8002a80:	2300      	movs	r3, #0
 8002a82:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8002a84:	2300      	movs	r3, #0
 8002a86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f000 fdd8 	bl	8003644 <HAL_PCD_Start>
 8002a94:	4603      	mov	r3, r0
 8002a96:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8002a98:	7bfb      	ldrb	r3, [r7, #15]
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f000 f97e 	bl	8002d9c <USBD_Get_USB_Status>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8002aa4:	7bbb      	ldrb	r3, [r7, #14]
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3710      	adds	r7, #16
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}

08002aae <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8002aae:	b580      	push	{r7, lr}
 8002ab0:	b084      	sub	sp, #16
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	6078      	str	r0, [r7, #4]
 8002ab6:	4608      	mov	r0, r1
 8002ab8:	4611      	mov	r1, r2
 8002aba:	461a      	mov	r2, r3
 8002abc:	4603      	mov	r3, r0
 8002abe:	70fb      	strb	r3, [r7, #3]
 8002ac0:	460b      	mov	r3, r1
 8002ac2:	70bb      	strb	r3, [r7, #2]
 8002ac4:	4613      	mov	r3, r2
 8002ac6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8002acc:	2300      	movs	r3, #0
 8002ace:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8002ad6:	78bb      	ldrb	r3, [r7, #2]
 8002ad8:	883a      	ldrh	r2, [r7, #0]
 8002ada:	78f9      	ldrb	r1, [r7, #3]
 8002adc:	f000 ff1f 	bl	800391e <HAL_PCD_EP_Open>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8002ae4:	7bfb      	ldrb	r3, [r7, #15]
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f000 f958 	bl	8002d9c <USBD_Get_USB_Status>
 8002aec:	4603      	mov	r3, r0
 8002aee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8002af0:	7bbb      	ldrb	r3, [r7, #14]
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3710      	adds	r7, #16
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}

08002afa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8002afa:	b580      	push	{r7, lr}
 8002afc:	b084      	sub	sp, #16
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	6078      	str	r0, [r7, #4]
 8002b02:	460b      	mov	r3, r1
 8002b04:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8002b06:	2300      	movs	r3, #0
 8002b08:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8002b14:	78fa      	ldrb	r2, [r7, #3]
 8002b16:	4611      	mov	r1, r2
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f000 ff5f 	bl	80039dc <HAL_PCD_EP_Close>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8002b22:	7bfb      	ldrb	r3, [r7, #15]
 8002b24:	4618      	mov	r0, r3
 8002b26:	f000 f939 	bl	8002d9c <USBD_Get_USB_Status>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8002b2e:	7bbb      	ldrb	r3, [r7, #14]
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	3710      	adds	r7, #16
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}

08002b38 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b084      	sub	sp, #16
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
 8002b40:	460b      	mov	r3, r1
 8002b42:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8002b44:	2300      	movs	r3, #0
 8002b46:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8002b52:	78fa      	ldrb	r2, [r7, #3]
 8002b54:	4611      	mov	r1, r2
 8002b56:	4618      	mov	r0, r3
 8002b58:	f001 f808 	bl	8003b6c <HAL_PCD_EP_SetStall>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8002b60:	7bfb      	ldrb	r3, [r7, #15]
 8002b62:	4618      	mov	r0, r3
 8002b64:	f000 f91a 	bl	8002d9c <USBD_Get_USB_Status>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8002b6c:	7bbb      	ldrb	r3, [r7, #14]
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3710      	adds	r7, #16
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}

08002b76 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8002b76:	b580      	push	{r7, lr}
 8002b78:	b084      	sub	sp, #16
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	6078      	str	r0, [r7, #4]
 8002b7e:	460b      	mov	r3, r1
 8002b80:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8002b82:	2300      	movs	r3, #0
 8002b84:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8002b86:	2300      	movs	r3, #0
 8002b88:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8002b90:	78fa      	ldrb	r2, [r7, #3]
 8002b92:	4611      	mov	r1, r2
 8002b94:	4618      	mov	r0, r3
 8002b96:	f001 f83b 	bl	8003c10 <HAL_PCD_EP_ClrStall>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8002b9e:	7bfb      	ldrb	r3, [r7, #15]
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f000 f8fb 	bl	8002d9c <USBD_Get_USB_Status>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8002baa:	7bbb      	ldrb	r3, [r7, #14]
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	3710      	adds	r7, #16
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}

08002bb4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b085      	sub	sp, #20
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
 8002bbc:	460b      	mov	r3, r1
 8002bbe:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8002bc6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8002bc8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	da0b      	bge.n	8002be8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8002bd0:	78fb      	ldrb	r3, [r7, #3]
 8002bd2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002bd6:	68f9      	ldr	r1, [r7, #12]
 8002bd8:	4613      	mov	r3, r2
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	4413      	add	r3, r2
 8002bde:	00db      	lsls	r3, r3, #3
 8002be0:	440b      	add	r3, r1
 8002be2:	3312      	adds	r3, #18
 8002be4:	781b      	ldrb	r3, [r3, #0]
 8002be6:	e00b      	b.n	8002c00 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8002be8:	78fb      	ldrb	r3, [r7, #3]
 8002bea:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002bee:	68f9      	ldr	r1, [r7, #12]
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	4413      	add	r3, r2
 8002bf6:	00db      	lsls	r3, r3, #3
 8002bf8:	440b      	add	r3, r1
 8002bfa:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 8002bfe:	781b      	ldrb	r3, [r3, #0]
  }
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	3714      	adds	r7, #20
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr

08002c0c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b084      	sub	sp, #16
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
 8002c14:	460b      	mov	r3, r1
 8002c16:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8002c26:	78fa      	ldrb	r2, [r7, #3]
 8002c28:	4611      	mov	r1, r2
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f000 fe53 	bl	80038d6 <HAL_PCD_SetAddress>
 8002c30:	4603      	mov	r3, r0
 8002c32:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8002c34:	7bfb      	ldrb	r3, [r7, #15]
 8002c36:	4618      	mov	r0, r3
 8002c38:	f000 f8b0 	bl	8002d9c <USBD_Get_USB_Status>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8002c40:	7bbb      	ldrb	r3, [r7, #14]
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3710      	adds	r7, #16
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}

08002c4a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8002c4a:	b580      	push	{r7, lr}
 8002c4c:	b086      	sub	sp, #24
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	60f8      	str	r0, [r7, #12]
 8002c52:	607a      	str	r2, [r7, #4]
 8002c54:	603b      	str	r3, [r7, #0]
 8002c56:	460b      	mov	r3, r1
 8002c58:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8002c68:	7af9      	ldrb	r1, [r7, #11]
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	687a      	ldr	r2, [r7, #4]
 8002c6e:	f000 ff46 	bl	8003afe <HAL_PCD_EP_Transmit>
 8002c72:	4603      	mov	r3, r0
 8002c74:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8002c76:	7dfb      	ldrb	r3, [r7, #23]
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f000 f88f 	bl	8002d9c <USBD_Get_USB_Status>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8002c82:	7dbb      	ldrb	r3, [r7, #22]
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3718      	adds	r7, #24
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}

08002c8c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b086      	sub	sp, #24
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	60f8      	str	r0, [r7, #12]
 8002c94:	607a      	str	r2, [r7, #4]
 8002c96:	603b      	str	r3, [r7, #0]
 8002c98:	460b      	mov	r3, r1
 8002c9a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8002caa:	7af9      	ldrb	r1, [r7, #11]
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	f000 fedc 	bl	8003a6c <HAL_PCD_EP_Receive>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8002cb8:	7dfb      	ldrb	r3, [r7, #23]
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f000 f86e 	bl	8002d9c <USBD_Get_USB_Status>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8002cc4:	7dbb      	ldrb	r3, [r7, #22]
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3718      	adds	r7, #24
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}

08002cce <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8002cce:	b580      	push	{r7, lr}
 8002cd0:	b082      	sub	sp, #8
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	6078      	str	r0, [r7, #4]
 8002cd6:	460b      	mov	r3, r1
 8002cd8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8002ce0:	78fa      	ldrb	r2, [r7, #3]
 8002ce2:	4611      	mov	r1, r2
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f000 fef2 	bl	8003ace <HAL_PCD_EP_GetRxCount>
 8002cea:	4603      	mov	r3, r0
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	3708      	adds	r7, #8
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}

08002cf4 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b082      	sub	sp, #8
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
 8002cfc:	460b      	mov	r3, r1
 8002cfe:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8002d00:	78fb      	ldrb	r3, [r7, #3]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d002      	beq.n	8002d0c <HAL_PCDEx_LPM_Callback+0x18>
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d013      	beq.n	8002d32 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8002d0a:	e023      	b.n	8002d54 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	7a5b      	ldrb	r3, [r3, #9]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d007      	beq.n	8002d24 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8002d14:	f000 f83c 	bl	8002d90 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8002d18:	4b10      	ldr	r3, [pc, #64]	@ (8002d5c <HAL_PCDEx_LPM_Callback+0x68>)
 8002d1a:	691b      	ldr	r3, [r3, #16]
 8002d1c:	4a0f      	ldr	r2, [pc, #60]	@ (8002d5c <HAL_PCDEx_LPM_Callback+0x68>)
 8002d1e:	f023 0306 	bic.w	r3, r3, #6
 8002d22:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f7fe f824 	bl	8000d78 <USBD_LL_Resume>
    break;
 8002d30:	e010      	b.n	8002d54 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f7fe f807 	bl	8000d4c <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	7a5b      	ldrb	r3, [r3, #9]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d005      	beq.n	8002d52 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8002d46:	4b05      	ldr	r3, [pc, #20]	@ (8002d5c <HAL_PCDEx_LPM_Callback+0x68>)
 8002d48:	691b      	ldr	r3, [r3, #16]
 8002d4a:	4a04      	ldr	r2, [pc, #16]	@ (8002d5c <HAL_PCDEx_LPM_Callback+0x68>)
 8002d4c:	f043 0306 	orr.w	r3, r3, #6
 8002d50:	6113      	str	r3, [r2, #16]
    break;
 8002d52:	bf00      	nop
}
 8002d54:	bf00      	nop
 8002d56:	3708      	adds	r7, #8
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}
 8002d5c:	e000ed00 	.word	0xe000ed00

08002d60 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b083      	sub	sp, #12
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8002d68:	4b03      	ldr	r3, [pc, #12]	@ (8002d78 <USBD_static_malloc+0x18>)
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	370c      	adds	r7, #12
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr
 8002d76:	bf00      	nop
 8002d78:	20001958 	.word	0x20001958

08002d7c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]

}
 8002d84:	bf00      	nop
 8002d86:	370c      	adds	r7, #12
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr

08002d90 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8002d94:	f7fd faae 	bl	80002f4 <SystemClock_Config>
}
 8002d98:	bf00      	nop
 8002d9a:	bd80      	pop	{r7, pc}

08002d9c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b085      	sub	sp, #20
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	4603      	mov	r3, r0
 8002da4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8002da6:	2300      	movs	r3, #0
 8002da8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8002daa:	79fb      	ldrb	r3, [r7, #7]
 8002dac:	2b03      	cmp	r3, #3
 8002dae:	d817      	bhi.n	8002de0 <USBD_Get_USB_Status+0x44>
 8002db0:	a201      	add	r2, pc, #4	@ (adr r2, 8002db8 <USBD_Get_USB_Status+0x1c>)
 8002db2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002db6:	bf00      	nop
 8002db8:	08002dc9 	.word	0x08002dc9
 8002dbc:	08002dcf 	.word	0x08002dcf
 8002dc0:	08002dd5 	.word	0x08002dd5
 8002dc4:	08002ddb 	.word	0x08002ddb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	73fb      	strb	r3, [r7, #15]
    break;
 8002dcc:	e00b      	b.n	8002de6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	73fb      	strb	r3, [r7, #15]
    break;
 8002dd2:	e008      	b.n	8002de6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	73fb      	strb	r3, [r7, #15]
    break;
 8002dd8:	e005      	b.n	8002de6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	73fb      	strb	r3, [r7, #15]
    break;
 8002dde:	e002      	b.n	8002de6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8002de0:	2303      	movs	r3, #3
 8002de2:	73fb      	strb	r3, [r7, #15]
    break;
 8002de4:	bf00      	nop
  }
  return usb_status;
 8002de6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3714      	adds	r7, #20
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr

08002df4 <hwInit>:


#include "hw.h"

bool hwInit(void)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b082      	sub	sp, #8
 8002df8:	af00      	add	r7, sp, #0
  bool ret = true;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	71fb      	strb	r3, [r7, #7]

  ret &= bspInit();
 8002dfe:	f7fd fa69 	bl	80002d4 <bspInit>
 8002e02:	4603      	mov	r3, r0
 8002e04:	461a      	mov	r2, r3
 8002e06:	79fb      	ldrb	r3, [r7, #7]
 8002e08:	4013      	ands	r3, r2
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	bf14      	ite	ne
 8002e0e:	2301      	movne	r3, #1
 8002e10:	2300      	moveq	r3, #0
 8002e12:	71fb      	strb	r3, [r7, #7]
//
//  ret &= rtcInit();
//  ret &= resetInit();
  ret &= ledInit();
 8002e14:	f7fd fc70 	bl	80006f8 <ledInit>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	79fb      	ldrb	r3, [r7, #7]
 8002e1e:	4013      	ands	r3, r2
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	bf14      	ite	ne
 8002e24:	2301      	movne	r3, #1
 8002e26:	2300      	moveq	r3, #0
 8002e28:	71fb      	strb	r3, [r7, #7]
  ret &= usbInit();
 8002e2a:	f7fd fce1 	bl	80007f0 <usbInit>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	461a      	mov	r2, r3
 8002e32:	79fb      	ldrb	r3, [r7, #7]
 8002e34:	4013      	ands	r3, r2
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	bf14      	ite	ne
 8002e3a:	2301      	movne	r3, #1
 8002e3c:	2300      	moveq	r3, #0
 8002e3e:	71fb      	strb	r3, [r7, #7]
  ret &= usbBegin(USB_CDC_MODE);
 8002e40:	2001      	movs	r0, #1
 8002e42:	f7fd fce1 	bl	8000808 <usbBegin>
 8002e46:	4603      	mov	r3, r0
 8002e48:	461a      	mov	r2, r3
 8002e4a:	79fb      	ldrb	r3, [r7, #7]
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	bf14      	ite	ne
 8002e52:	2301      	movne	r3, #1
 8002e54:	2300      	moveq	r3, #0
 8002e56:	71fb      	strb	r3, [r7, #7]
//  if(resetGetCount() == 2)
//  {
//    resetToSysBoot();
//  }

  return ret;
 8002e58:	79fb      	ldrb	r3, [r7, #7]
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3708      	adds	r7, #8
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}

08002e62 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e62:	b580      	push	{r7, lr}
 8002e64:	b082      	sub	sp, #8
 8002e66:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e6c:	2003      	movs	r0, #3
 8002e6e:	f000 f927 	bl	80030c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002e72:	200f      	movs	r0, #15
 8002e74:	f000 f80e 	bl	8002e94 <HAL_InitTick>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d002      	beq.n	8002e84 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	71fb      	strb	r3, [r7, #7]
 8002e82:	e001      	b.n	8002e88 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002e84:	f7fd fa8a 	bl	800039c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002e88:	79fb      	ldrb	r3, [r7, #7]

}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3708      	adds	r7, #8
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
	...

08002e94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b084      	sub	sp, #16
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002ea0:	4b16      	ldr	r3, [pc, #88]	@ (8002efc <HAL_InitTick+0x68>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d022      	beq.n	8002eee <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002ea8:	4b15      	ldr	r3, [pc, #84]	@ (8002f00 <HAL_InitTick+0x6c>)
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	4b13      	ldr	r3, [pc, #76]	@ (8002efc <HAL_InitTick+0x68>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002eb4:	fbb1 f3f3 	udiv	r3, r1, r3
 8002eb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f000 f932 	bl	8003126 <HAL_SYSTICK_Config>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d10f      	bne.n	8002ee8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2b0f      	cmp	r3, #15
 8002ecc:	d809      	bhi.n	8002ee2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ece:	2200      	movs	r2, #0
 8002ed0:	6879      	ldr	r1, [r7, #4]
 8002ed2:	f04f 30ff 	mov.w	r0, #4294967295
 8002ed6:	f000 f8fe 	bl	80030d6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002eda:	4a0a      	ldr	r2, [pc, #40]	@ (8002f04 <HAL_InitTick+0x70>)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6013      	str	r3, [r2, #0]
 8002ee0:	e007      	b.n	8002ef2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	73fb      	strb	r3, [r7, #15]
 8002ee6:	e004      	b.n	8002ef2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	73fb      	strb	r3, [r7, #15]
 8002eec:	e001      	b.n	8002ef2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002ef2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	3710      	adds	r7, #16
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}
 8002efc:	20000188 	.word	0x20000188
 8002f00:	20000000 	.word	0x20000000
 8002f04:	20000184 	.word	0x20000184

08002f08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	af00      	add	r7, sp, #0
  return uwTick;
 8002f0c:	4b03      	ldr	r3, [pc, #12]	@ (8002f1c <HAL_GetTick+0x14>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr
 8002f1a:	bf00      	nop
 8002f1c:	20001b78 	.word	0x20001b78

08002f20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b085      	sub	sp, #20
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	f003 0307 	and.w	r3, r3, #7
 8002f2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f30:	4b0c      	ldr	r3, [pc, #48]	@ (8002f64 <__NVIC_SetPriorityGrouping+0x44>)
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f36:	68ba      	ldr	r2, [r7, #8]
 8002f38:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f48:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002f4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f52:	4a04      	ldr	r2, [pc, #16]	@ (8002f64 <__NVIC_SetPriorityGrouping+0x44>)
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	60d3      	str	r3, [r2, #12]
}
 8002f58:	bf00      	nop
 8002f5a:	3714      	adds	r7, #20
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr
 8002f64:	e000ed00 	.word	0xe000ed00

08002f68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f6c:	4b04      	ldr	r3, [pc, #16]	@ (8002f80 <__NVIC_GetPriorityGrouping+0x18>)
 8002f6e:	68db      	ldr	r3, [r3, #12]
 8002f70:	0a1b      	lsrs	r3, r3, #8
 8002f72:	f003 0307 	and.w	r3, r3, #7
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr
 8002f80:	e000ed00 	.word	0xe000ed00

08002f84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b083      	sub	sp, #12
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	db0b      	blt.n	8002fae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f96:	79fb      	ldrb	r3, [r7, #7]
 8002f98:	f003 021f 	and.w	r2, r3, #31
 8002f9c:	4907      	ldr	r1, [pc, #28]	@ (8002fbc <__NVIC_EnableIRQ+0x38>)
 8002f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fa2:	095b      	lsrs	r3, r3, #5
 8002fa4:	2001      	movs	r0, #1
 8002fa6:	fa00 f202 	lsl.w	r2, r0, r2
 8002faa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002fae:	bf00      	nop
 8002fb0:	370c      	adds	r7, #12
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb8:	4770      	bx	lr
 8002fba:	bf00      	nop
 8002fbc:	e000e100 	.word	0xe000e100

08002fc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	6039      	str	r1, [r7, #0]
 8002fca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	db0a      	blt.n	8002fea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	b2da      	uxtb	r2, r3
 8002fd8:	490c      	ldr	r1, [pc, #48]	@ (800300c <__NVIC_SetPriority+0x4c>)
 8002fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fde:	0112      	lsls	r2, r2, #4
 8002fe0:	b2d2      	uxtb	r2, r2
 8002fe2:	440b      	add	r3, r1
 8002fe4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fe8:	e00a      	b.n	8003000 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	b2da      	uxtb	r2, r3
 8002fee:	4908      	ldr	r1, [pc, #32]	@ (8003010 <__NVIC_SetPriority+0x50>)
 8002ff0:	79fb      	ldrb	r3, [r7, #7]
 8002ff2:	f003 030f 	and.w	r3, r3, #15
 8002ff6:	3b04      	subs	r3, #4
 8002ff8:	0112      	lsls	r2, r2, #4
 8002ffa:	b2d2      	uxtb	r2, r2
 8002ffc:	440b      	add	r3, r1
 8002ffe:	761a      	strb	r2, [r3, #24]
}
 8003000:	bf00      	nop
 8003002:	370c      	adds	r7, #12
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr
 800300c:	e000e100 	.word	0xe000e100
 8003010:	e000ed00 	.word	0xe000ed00

08003014 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003014:	b480      	push	{r7}
 8003016:	b089      	sub	sp, #36	@ 0x24
 8003018:	af00      	add	r7, sp, #0
 800301a:	60f8      	str	r0, [r7, #12]
 800301c:	60b9      	str	r1, [r7, #8]
 800301e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	f003 0307 	and.w	r3, r3, #7
 8003026:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	f1c3 0307 	rsb	r3, r3, #7
 800302e:	2b04      	cmp	r3, #4
 8003030:	bf28      	it	cs
 8003032:	2304      	movcs	r3, #4
 8003034:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	3304      	adds	r3, #4
 800303a:	2b06      	cmp	r3, #6
 800303c:	d902      	bls.n	8003044 <NVIC_EncodePriority+0x30>
 800303e:	69fb      	ldr	r3, [r7, #28]
 8003040:	3b03      	subs	r3, #3
 8003042:	e000      	b.n	8003046 <NVIC_EncodePriority+0x32>
 8003044:	2300      	movs	r3, #0
 8003046:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003048:	f04f 32ff 	mov.w	r2, #4294967295
 800304c:	69bb      	ldr	r3, [r7, #24]
 800304e:	fa02 f303 	lsl.w	r3, r2, r3
 8003052:	43da      	mvns	r2, r3
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	401a      	ands	r2, r3
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800305c:	f04f 31ff 	mov.w	r1, #4294967295
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	fa01 f303 	lsl.w	r3, r1, r3
 8003066:	43d9      	mvns	r1, r3
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800306c:	4313      	orrs	r3, r2
         );
}
 800306e:	4618      	mov	r0, r3
 8003070:	3724      	adds	r7, #36	@ 0x24
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr
	...

0800307c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b082      	sub	sp, #8
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	3b01      	subs	r3, #1
 8003088:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800308c:	d301      	bcc.n	8003092 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800308e:	2301      	movs	r3, #1
 8003090:	e00f      	b.n	80030b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003092:	4a0a      	ldr	r2, [pc, #40]	@ (80030bc <SysTick_Config+0x40>)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	3b01      	subs	r3, #1
 8003098:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800309a:	210f      	movs	r1, #15
 800309c:	f04f 30ff 	mov.w	r0, #4294967295
 80030a0:	f7ff ff8e 	bl	8002fc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80030a4:	4b05      	ldr	r3, [pc, #20]	@ (80030bc <SysTick_Config+0x40>)
 80030a6:	2200      	movs	r2, #0
 80030a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030aa:	4b04      	ldr	r3, [pc, #16]	@ (80030bc <SysTick_Config+0x40>)
 80030ac:	2207      	movs	r2, #7
 80030ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80030b0:	2300      	movs	r3, #0
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3708      	adds	r7, #8
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}
 80030ba:	bf00      	nop
 80030bc:	e000e010 	.word	0xe000e010

080030c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b082      	sub	sp, #8
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030c8:	6878      	ldr	r0, [r7, #4]
 80030ca:	f7ff ff29 	bl	8002f20 <__NVIC_SetPriorityGrouping>
}
 80030ce:	bf00      	nop
 80030d0:	3708      	adds	r7, #8
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}

080030d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030d6:	b580      	push	{r7, lr}
 80030d8:	b086      	sub	sp, #24
 80030da:	af00      	add	r7, sp, #0
 80030dc:	4603      	mov	r3, r0
 80030de:	60b9      	str	r1, [r7, #8]
 80030e0:	607a      	str	r2, [r7, #4]
 80030e2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80030e4:	f7ff ff40 	bl	8002f68 <__NVIC_GetPriorityGrouping>
 80030e8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030ea:	687a      	ldr	r2, [r7, #4]
 80030ec:	68b9      	ldr	r1, [r7, #8]
 80030ee:	6978      	ldr	r0, [r7, #20]
 80030f0:	f7ff ff90 	bl	8003014 <NVIC_EncodePriority>
 80030f4:	4602      	mov	r2, r0
 80030f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030fa:	4611      	mov	r1, r2
 80030fc:	4618      	mov	r0, r3
 80030fe:	f7ff ff5f 	bl	8002fc0 <__NVIC_SetPriority>
}
 8003102:	bf00      	nop
 8003104:	3718      	adds	r7, #24
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}

0800310a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800310a:	b580      	push	{r7, lr}
 800310c:	b082      	sub	sp, #8
 800310e:	af00      	add	r7, sp, #0
 8003110:	4603      	mov	r3, r0
 8003112:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003114:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003118:	4618      	mov	r0, r3
 800311a:	f7ff ff33 	bl	8002f84 <__NVIC_EnableIRQ>
}
 800311e:	bf00      	nop
 8003120:	3708      	adds	r7, #8
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}

08003126 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003126:	b580      	push	{r7, lr}
 8003128:	b082      	sub	sp, #8
 800312a:	af00      	add	r7, sp, #0
 800312c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f7ff ffa4 	bl	800307c <SysTick_Config>
 8003134:	4603      	mov	r3, r0
}
 8003136:	4618      	mov	r0, r3
 8003138:	3708      	adds	r7, #8
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
	...

08003140 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003140:	b480      	push	{r7}
 8003142:	b087      	sub	sp, #28
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
 8003148:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800314a:	2300      	movs	r3, #0
 800314c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800314e:	e15a      	b.n	8003406 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	2101      	movs	r1, #1
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	fa01 f303 	lsl.w	r3, r1, r3
 800315c:	4013      	ands	r3, r2
 800315e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2b00      	cmp	r3, #0
 8003164:	f000 814c 	beq.w	8003400 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	f003 0303 	and.w	r3, r3, #3
 8003170:	2b01      	cmp	r3, #1
 8003172:	d005      	beq.n	8003180 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800317c:	2b02      	cmp	r3, #2
 800317e:	d130      	bne.n	80031e2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	005b      	lsls	r3, r3, #1
 800318a:	2203      	movs	r2, #3
 800318c:	fa02 f303 	lsl.w	r3, r2, r3
 8003190:	43db      	mvns	r3, r3
 8003192:	693a      	ldr	r2, [r7, #16]
 8003194:	4013      	ands	r3, r2
 8003196:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	68da      	ldr	r2, [r3, #12]
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	005b      	lsls	r3, r3, #1
 80031a0:	fa02 f303 	lsl.w	r3, r2, r3
 80031a4:	693a      	ldr	r2, [r7, #16]
 80031a6:	4313      	orrs	r3, r2
 80031a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	693a      	ldr	r2, [r7, #16]
 80031ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80031b6:	2201      	movs	r2, #1
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	fa02 f303 	lsl.w	r3, r2, r3
 80031be:	43db      	mvns	r3, r3
 80031c0:	693a      	ldr	r2, [r7, #16]
 80031c2:	4013      	ands	r3, r2
 80031c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	091b      	lsrs	r3, r3, #4
 80031cc:	f003 0201 	and.w	r2, r3, #1
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	fa02 f303 	lsl.w	r3, r2, r3
 80031d6:	693a      	ldr	r2, [r7, #16]
 80031d8:	4313      	orrs	r3, r2
 80031da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	693a      	ldr	r2, [r7, #16]
 80031e0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	f003 0303 	and.w	r3, r3, #3
 80031ea:	2b03      	cmp	r3, #3
 80031ec:	d017      	beq.n	800321e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	68db      	ldr	r3, [r3, #12]
 80031f2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	005b      	lsls	r3, r3, #1
 80031f8:	2203      	movs	r2, #3
 80031fa:	fa02 f303 	lsl.w	r3, r2, r3
 80031fe:	43db      	mvns	r3, r3
 8003200:	693a      	ldr	r2, [r7, #16]
 8003202:	4013      	ands	r3, r2
 8003204:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	689a      	ldr	r2, [r3, #8]
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	005b      	lsls	r3, r3, #1
 800320e:	fa02 f303 	lsl.w	r3, r2, r3
 8003212:	693a      	ldr	r2, [r7, #16]
 8003214:	4313      	orrs	r3, r2
 8003216:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	693a      	ldr	r2, [r7, #16]
 800321c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	f003 0303 	and.w	r3, r3, #3
 8003226:	2b02      	cmp	r3, #2
 8003228:	d123      	bne.n	8003272 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	08da      	lsrs	r2, r3, #3
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	3208      	adds	r2, #8
 8003232:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003236:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	f003 0307 	and.w	r3, r3, #7
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	220f      	movs	r2, #15
 8003242:	fa02 f303 	lsl.w	r3, r2, r3
 8003246:	43db      	mvns	r3, r3
 8003248:	693a      	ldr	r2, [r7, #16]
 800324a:	4013      	ands	r3, r2
 800324c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	691a      	ldr	r2, [r3, #16]
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	f003 0307 	and.w	r3, r3, #7
 8003258:	009b      	lsls	r3, r3, #2
 800325a:	fa02 f303 	lsl.w	r3, r2, r3
 800325e:	693a      	ldr	r2, [r7, #16]
 8003260:	4313      	orrs	r3, r2
 8003262:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	08da      	lsrs	r2, r3, #3
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	3208      	adds	r2, #8
 800326c:	6939      	ldr	r1, [r7, #16]
 800326e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	005b      	lsls	r3, r3, #1
 800327c:	2203      	movs	r2, #3
 800327e:	fa02 f303 	lsl.w	r3, r2, r3
 8003282:	43db      	mvns	r3, r3
 8003284:	693a      	ldr	r2, [r7, #16]
 8003286:	4013      	ands	r3, r2
 8003288:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	f003 0203 	and.w	r2, r3, #3
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	005b      	lsls	r3, r3, #1
 8003296:	fa02 f303 	lsl.w	r3, r2, r3
 800329a:	693a      	ldr	r2, [r7, #16]
 800329c:	4313      	orrs	r3, r2
 800329e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	693a      	ldr	r2, [r7, #16]
 80032a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	f000 80a6 	beq.w	8003400 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032b4:	4b5b      	ldr	r3, [pc, #364]	@ (8003424 <HAL_GPIO_Init+0x2e4>)
 80032b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032b8:	4a5a      	ldr	r2, [pc, #360]	@ (8003424 <HAL_GPIO_Init+0x2e4>)
 80032ba:	f043 0301 	orr.w	r3, r3, #1
 80032be:	6613      	str	r3, [r2, #96]	@ 0x60
 80032c0:	4b58      	ldr	r3, [pc, #352]	@ (8003424 <HAL_GPIO_Init+0x2e4>)
 80032c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032c4:	f003 0301 	and.w	r3, r3, #1
 80032c8:	60bb      	str	r3, [r7, #8]
 80032ca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80032cc:	4a56      	ldr	r2, [pc, #344]	@ (8003428 <HAL_GPIO_Init+0x2e8>)
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	089b      	lsrs	r3, r3, #2
 80032d2:	3302      	adds	r3, #2
 80032d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	f003 0303 	and.w	r3, r3, #3
 80032e0:	009b      	lsls	r3, r3, #2
 80032e2:	220f      	movs	r2, #15
 80032e4:	fa02 f303 	lsl.w	r3, r2, r3
 80032e8:	43db      	mvns	r3, r3
 80032ea:	693a      	ldr	r2, [r7, #16]
 80032ec:	4013      	ands	r3, r2
 80032ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80032f6:	d01f      	beq.n	8003338 <HAL_GPIO_Init+0x1f8>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	4a4c      	ldr	r2, [pc, #304]	@ (800342c <HAL_GPIO_Init+0x2ec>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d019      	beq.n	8003334 <HAL_GPIO_Init+0x1f4>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	4a4b      	ldr	r2, [pc, #300]	@ (8003430 <HAL_GPIO_Init+0x2f0>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d013      	beq.n	8003330 <HAL_GPIO_Init+0x1f0>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	4a4a      	ldr	r2, [pc, #296]	@ (8003434 <HAL_GPIO_Init+0x2f4>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d00d      	beq.n	800332c <HAL_GPIO_Init+0x1ec>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	4a49      	ldr	r2, [pc, #292]	@ (8003438 <HAL_GPIO_Init+0x2f8>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d007      	beq.n	8003328 <HAL_GPIO_Init+0x1e8>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	4a48      	ldr	r2, [pc, #288]	@ (800343c <HAL_GPIO_Init+0x2fc>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d101      	bne.n	8003324 <HAL_GPIO_Init+0x1e4>
 8003320:	2305      	movs	r3, #5
 8003322:	e00a      	b.n	800333a <HAL_GPIO_Init+0x1fa>
 8003324:	2306      	movs	r3, #6
 8003326:	e008      	b.n	800333a <HAL_GPIO_Init+0x1fa>
 8003328:	2304      	movs	r3, #4
 800332a:	e006      	b.n	800333a <HAL_GPIO_Init+0x1fa>
 800332c:	2303      	movs	r3, #3
 800332e:	e004      	b.n	800333a <HAL_GPIO_Init+0x1fa>
 8003330:	2302      	movs	r3, #2
 8003332:	e002      	b.n	800333a <HAL_GPIO_Init+0x1fa>
 8003334:	2301      	movs	r3, #1
 8003336:	e000      	b.n	800333a <HAL_GPIO_Init+0x1fa>
 8003338:	2300      	movs	r3, #0
 800333a:	697a      	ldr	r2, [r7, #20]
 800333c:	f002 0203 	and.w	r2, r2, #3
 8003340:	0092      	lsls	r2, r2, #2
 8003342:	4093      	lsls	r3, r2
 8003344:	693a      	ldr	r2, [r7, #16]
 8003346:	4313      	orrs	r3, r2
 8003348:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800334a:	4937      	ldr	r1, [pc, #220]	@ (8003428 <HAL_GPIO_Init+0x2e8>)
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	089b      	lsrs	r3, r3, #2
 8003350:	3302      	adds	r3, #2
 8003352:	693a      	ldr	r2, [r7, #16]
 8003354:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003358:	4b39      	ldr	r3, [pc, #228]	@ (8003440 <HAL_GPIO_Init+0x300>)
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	43db      	mvns	r3, r3
 8003362:	693a      	ldr	r2, [r7, #16]
 8003364:	4013      	ands	r3, r2
 8003366:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003370:	2b00      	cmp	r3, #0
 8003372:	d003      	beq.n	800337c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003374:	693a      	ldr	r2, [r7, #16]
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	4313      	orrs	r3, r2
 800337a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800337c:	4a30      	ldr	r2, [pc, #192]	@ (8003440 <HAL_GPIO_Init+0x300>)
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003382:	4b2f      	ldr	r3, [pc, #188]	@ (8003440 <HAL_GPIO_Init+0x300>)
 8003384:	68db      	ldr	r3, [r3, #12]
 8003386:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	43db      	mvns	r3, r3
 800338c:	693a      	ldr	r2, [r7, #16]
 800338e:	4013      	ands	r3, r2
 8003390:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800339a:	2b00      	cmp	r3, #0
 800339c:	d003      	beq.n	80033a6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800339e:	693a      	ldr	r2, [r7, #16]
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	4313      	orrs	r3, r2
 80033a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80033a6:	4a26      	ldr	r2, [pc, #152]	@ (8003440 <HAL_GPIO_Init+0x300>)
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80033ac:	4b24      	ldr	r3, [pc, #144]	@ (8003440 <HAL_GPIO_Init+0x300>)
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	43db      	mvns	r3, r3
 80033b6:	693a      	ldr	r2, [r7, #16]
 80033b8:	4013      	ands	r3, r2
 80033ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d003      	beq.n	80033d0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80033c8:	693a      	ldr	r2, [r7, #16]
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	4313      	orrs	r3, r2
 80033ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80033d0:	4a1b      	ldr	r2, [pc, #108]	@ (8003440 <HAL_GPIO_Init+0x300>)
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80033d6:	4b1a      	ldr	r3, [pc, #104]	@ (8003440 <HAL_GPIO_Init+0x300>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	43db      	mvns	r3, r3
 80033e0:	693a      	ldr	r2, [r7, #16]
 80033e2:	4013      	ands	r3, r2
 80033e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d003      	beq.n	80033fa <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80033f2:	693a      	ldr	r2, [r7, #16]
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	4313      	orrs	r3, r2
 80033f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80033fa:	4a11      	ldr	r2, [pc, #68]	@ (8003440 <HAL_GPIO_Init+0x300>)
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	3301      	adds	r3, #1
 8003404:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	fa22 f303 	lsr.w	r3, r2, r3
 8003410:	2b00      	cmp	r3, #0
 8003412:	f47f ae9d 	bne.w	8003150 <HAL_GPIO_Init+0x10>
  }
}
 8003416:	bf00      	nop
 8003418:	bf00      	nop
 800341a:	371c      	adds	r7, #28
 800341c:	46bd      	mov	sp, r7
 800341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003422:	4770      	bx	lr
 8003424:	40021000 	.word	0x40021000
 8003428:	40010000 	.word	0x40010000
 800342c:	48000400 	.word	0x48000400
 8003430:	48000800 	.word	0x48000800
 8003434:	48000c00 	.word	0x48000c00
 8003438:	48001000 	.word	0x48001000
 800343c:	48001400 	.word	0x48001400
 8003440:	40010400 	.word	0x40010400

08003444 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003444:	b480      	push	{r7}
 8003446:	b083      	sub	sp, #12
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
 800344c:	460b      	mov	r3, r1
 800344e:	807b      	strh	r3, [r7, #2]
 8003450:	4613      	mov	r3, r2
 8003452:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003454:	787b      	ldrb	r3, [r7, #1]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d003      	beq.n	8003462 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800345a:	887a      	ldrh	r2, [r7, #2]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003460:	e002      	b.n	8003468 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003462:	887a      	ldrh	r2, [r7, #2]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003468:	bf00      	nop
 800346a:	370c      	adds	r7, #12
 800346c:	46bd      	mov	sp, r7
 800346e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003472:	4770      	bx	lr

08003474 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003474:	b480      	push	{r7}
 8003476:	b085      	sub	sp, #20
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
 800347c:	460b      	mov	r3, r1
 800347e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	695b      	ldr	r3, [r3, #20]
 8003484:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003486:	887a      	ldrh	r2, [r7, #2]
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	4013      	ands	r3, r2
 800348c:	041a      	lsls	r2, r3, #16
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	43d9      	mvns	r1, r3
 8003492:	887b      	ldrh	r3, [r7, #2]
 8003494:	400b      	ands	r3, r1
 8003496:	431a      	orrs	r2, r3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	619a      	str	r2, [r3, #24]
}
 800349c:	bf00      	nop
 800349e:	3714      	adds	r7, #20
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr

080034a8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b084      	sub	sp, #16
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d101      	bne.n	80034ba <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e0c0      	b.n	800363c <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d106      	bne.n	80034d4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2200      	movs	r2, #0
 80034ca:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f7ff f98c 	bl	80027ec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2203      	movs	r2, #3
 80034d8:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4618      	mov	r0, r3
 80034e2:	f002 fc94 	bl	8005e0e <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034e6:	2300      	movs	r3, #0
 80034e8:	73fb      	strb	r3, [r7, #15]
 80034ea:	e03e      	b.n	800356a <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80034ec:	7bfa      	ldrb	r2, [r7, #15]
 80034ee:	6879      	ldr	r1, [r7, #4]
 80034f0:	4613      	mov	r3, r2
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	4413      	add	r3, r2
 80034f6:	00db      	lsls	r3, r3, #3
 80034f8:	440b      	add	r3, r1
 80034fa:	3311      	adds	r3, #17
 80034fc:	2201      	movs	r2, #1
 80034fe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003500:	7bfa      	ldrb	r2, [r7, #15]
 8003502:	6879      	ldr	r1, [r7, #4]
 8003504:	4613      	mov	r3, r2
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	4413      	add	r3, r2
 800350a:	00db      	lsls	r3, r3, #3
 800350c:	440b      	add	r3, r1
 800350e:	3310      	adds	r3, #16
 8003510:	7bfa      	ldrb	r2, [r7, #15]
 8003512:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003514:	7bfa      	ldrb	r2, [r7, #15]
 8003516:	6879      	ldr	r1, [r7, #4]
 8003518:	4613      	mov	r3, r2
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	4413      	add	r3, r2
 800351e:	00db      	lsls	r3, r3, #3
 8003520:	440b      	add	r3, r1
 8003522:	3313      	adds	r3, #19
 8003524:	2200      	movs	r2, #0
 8003526:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003528:	7bfa      	ldrb	r2, [r7, #15]
 800352a:	6879      	ldr	r1, [r7, #4]
 800352c:	4613      	mov	r3, r2
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	4413      	add	r3, r2
 8003532:	00db      	lsls	r3, r3, #3
 8003534:	440b      	add	r3, r1
 8003536:	3320      	adds	r3, #32
 8003538:	2200      	movs	r2, #0
 800353a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800353c:	7bfa      	ldrb	r2, [r7, #15]
 800353e:	6879      	ldr	r1, [r7, #4]
 8003540:	4613      	mov	r3, r2
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	4413      	add	r3, r2
 8003546:	00db      	lsls	r3, r3, #3
 8003548:	440b      	add	r3, r1
 800354a:	3324      	adds	r3, #36	@ 0x24
 800354c:	2200      	movs	r2, #0
 800354e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003550:	7bfb      	ldrb	r3, [r7, #15]
 8003552:	6879      	ldr	r1, [r7, #4]
 8003554:	1c5a      	adds	r2, r3, #1
 8003556:	4613      	mov	r3, r2
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	4413      	add	r3, r2
 800355c:	00db      	lsls	r3, r3, #3
 800355e:	440b      	add	r3, r1
 8003560:	2200      	movs	r2, #0
 8003562:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003564:	7bfb      	ldrb	r3, [r7, #15]
 8003566:	3301      	adds	r3, #1
 8003568:	73fb      	strb	r3, [r7, #15]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	791b      	ldrb	r3, [r3, #4]
 800356e:	7bfa      	ldrb	r2, [r7, #15]
 8003570:	429a      	cmp	r2, r3
 8003572:	d3bb      	bcc.n	80034ec <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003574:	2300      	movs	r3, #0
 8003576:	73fb      	strb	r3, [r7, #15]
 8003578:	e044      	b.n	8003604 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800357a:	7bfa      	ldrb	r2, [r7, #15]
 800357c:	6879      	ldr	r1, [r7, #4]
 800357e:	4613      	mov	r3, r2
 8003580:	009b      	lsls	r3, r3, #2
 8003582:	4413      	add	r3, r2
 8003584:	00db      	lsls	r3, r3, #3
 8003586:	440b      	add	r3, r1
 8003588:	f203 1351 	addw	r3, r3, #337	@ 0x151
 800358c:	2200      	movs	r2, #0
 800358e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003590:	7bfa      	ldrb	r2, [r7, #15]
 8003592:	6879      	ldr	r1, [r7, #4]
 8003594:	4613      	mov	r3, r2
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	4413      	add	r3, r2
 800359a:	00db      	lsls	r3, r3, #3
 800359c:	440b      	add	r3, r1
 800359e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80035a2:	7bfa      	ldrb	r2, [r7, #15]
 80035a4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80035a6:	7bfa      	ldrb	r2, [r7, #15]
 80035a8:	6879      	ldr	r1, [r7, #4]
 80035aa:	4613      	mov	r3, r2
 80035ac:	009b      	lsls	r3, r3, #2
 80035ae:	4413      	add	r3, r2
 80035b0:	00db      	lsls	r3, r3, #3
 80035b2:	440b      	add	r3, r1
 80035b4:	f203 1353 	addw	r3, r3, #339	@ 0x153
 80035b8:	2200      	movs	r2, #0
 80035ba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80035bc:	7bfa      	ldrb	r2, [r7, #15]
 80035be:	6879      	ldr	r1, [r7, #4]
 80035c0:	4613      	mov	r3, r2
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	4413      	add	r3, r2
 80035c6:	00db      	lsls	r3, r3, #3
 80035c8:	440b      	add	r3, r1
 80035ca:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80035ce:	2200      	movs	r2, #0
 80035d0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80035d2:	7bfa      	ldrb	r2, [r7, #15]
 80035d4:	6879      	ldr	r1, [r7, #4]
 80035d6:	4613      	mov	r3, r2
 80035d8:	009b      	lsls	r3, r3, #2
 80035da:	4413      	add	r3, r2
 80035dc:	00db      	lsls	r3, r3, #3
 80035de:	440b      	add	r3, r1
 80035e0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80035e4:	2200      	movs	r2, #0
 80035e6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80035e8:	7bfa      	ldrb	r2, [r7, #15]
 80035ea:	6879      	ldr	r1, [r7, #4]
 80035ec:	4613      	mov	r3, r2
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	4413      	add	r3, r2
 80035f2:	00db      	lsls	r3, r3, #3
 80035f4:	440b      	add	r3, r1
 80035f6:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80035fa:	2200      	movs	r2, #0
 80035fc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035fe:	7bfb      	ldrb	r3, [r7, #15]
 8003600:	3301      	adds	r3, #1
 8003602:	73fb      	strb	r3, [r7, #15]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	791b      	ldrb	r3, [r3, #4]
 8003608:	7bfa      	ldrb	r2, [r7, #15]
 800360a:	429a      	cmp	r2, r3
 800360c:	d3b5      	bcc.n	800357a <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6818      	ldr	r0, [r3, #0]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	3304      	adds	r3, #4
 8003616:	e893 0006 	ldmia.w	r3, {r1, r2}
 800361a:	f002 fc13 	bl	8005e44 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2200      	movs	r2, #0
 8003622:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2201      	movs	r2, #1
 8003628:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	7a9b      	ldrb	r3, [r3, #10]
 8003630:	2b01      	cmp	r3, #1
 8003632:	d102      	bne.n	800363a <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003634:	6878      	ldr	r0, [r7, #4]
 8003636:	f001 fc0e 	bl	8004e56 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800363a:	2300      	movs	r3, #0
}
 800363c:	4618      	mov	r0, r3
 800363e:	3710      	adds	r7, #16
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}

08003644 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b082      	sub	sp, #8
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003652:	2b01      	cmp	r3, #1
 8003654:	d101      	bne.n	800365a <HAL_PCD_Start+0x16>
 8003656:	2302      	movs	r3, #2
 8003658:	e012      	b.n	8003680 <HAL_PCD_Start+0x3c>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2201      	movs	r2, #1
 800365e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4618      	mov	r0, r3
 8003668:	f002 fbba 	bl	8005de0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4618      	mov	r0, r3
 8003672:	f004 f997 	bl	80079a4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2200      	movs	r2, #0
 800367a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800367e:	2300      	movs	r3, #0
}
 8003680:	4618      	mov	r0, r3
 8003682:	3708      	adds	r7, #8
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}

08003688 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b084      	sub	sp, #16
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4618      	mov	r0, r3
 8003696:	f004 f99c 	bl	80079d2 <USB_ReadInterrupts>
 800369a:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d003      	beq.n	80036ae <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f000 fb06 	bl	8003cb8 <PCD_EP_ISR_Handler>

    return;
 80036ac:	e110      	b.n	80038d0 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d013      	beq.n	80036e0 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80036c0:	b29a      	uxth	r2, r3
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80036ca:	b292      	uxth	r2, r2
 80036cc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f7ff f91c 	bl	800290e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80036d6:	2100      	movs	r1, #0
 80036d8:	6878      	ldr	r0, [r7, #4]
 80036da:	f000 f8fc 	bl	80038d6 <HAL_PCD_SetAddress>

    return;
 80036de:	e0f7      	b.n	80038d0 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d00c      	beq.n	8003704 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80036f2:	b29a      	uxth	r2, r3
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80036fc:	b292      	uxth	r2, r2
 80036fe:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003702:	e0e5      	b.n	80038d0 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800370a:	2b00      	cmp	r3, #0
 800370c:	d00c      	beq.n	8003728 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003716:	b29a      	uxth	r2, r3
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003720:	b292      	uxth	r2, r2
 8003722:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003726:	e0d3      	b.n	80038d0 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800372e:	2b00      	cmp	r3, #0
 8003730:	d034      	beq.n	800379c <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800373a:	b29a      	uxth	r2, r3
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f022 0204 	bic.w	r2, r2, #4
 8003744:	b292      	uxth	r2, r2
 8003746:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003752:	b29a      	uxth	r2, r3
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f022 0208 	bic.w	r2, r2, #8
 800375c:	b292      	uxth	r2, r2
 800375e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8003768:	2b01      	cmp	r3, #1
 800376a:	d107      	bne.n	800377c <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2200      	movs	r2, #0
 8003770:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003774:	2100      	movs	r1, #0
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f7ff fabc 	bl	8002cf4 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	f7ff f8ff 	bl	8002980 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800378a:	b29a      	uxth	r2, r3
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003794:	b292      	uxth	r2, r2
 8003796:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800379a:	e099      	b.n	80038d0 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d027      	beq.n	80037f6 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80037ae:	b29a      	uxth	r2, r3
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f042 0208 	orr.w	r2, r2, #8
 80037b8:	b292      	uxth	r2, r2
 80037ba:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80037c6:	b29a      	uxth	r2, r3
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80037d0:	b292      	uxth	r2, r2
 80037d2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80037de:	b29a      	uxth	r2, r3
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f042 0204 	orr.w	r2, r2, #4
 80037e8:	b292      	uxth	r2, r2
 80037ea:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f7ff f8ac 	bl	800294c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80037f4:	e06c      	b.n	80038d0 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d040      	beq.n	8003882 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003808:	b29a      	uxth	r2, r3
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003812:	b292      	uxth	r2, r2
 8003814:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 800381e:	2b00      	cmp	r3, #0
 8003820:	d12b      	bne.n	800387a <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800382a:	b29a      	uxth	r2, r3
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f042 0204 	orr.w	r2, r2, #4
 8003834:	b292      	uxth	r2, r2
 8003836:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003842:	b29a      	uxth	r2, r3
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f042 0208 	orr.w	r2, r2, #8
 800384c:	b292      	uxth	r2, r2
 800384e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2201      	movs	r2, #1
 8003856:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8003862:	b29b      	uxth	r3, r3
 8003864:	089b      	lsrs	r3, r3, #2
 8003866:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003870:	2101      	movs	r1, #1
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f7ff fa3e 	bl	8002cf4 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8003878:	e02a      	b.n	80038d0 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f7ff f866 	bl	800294c <HAL_PCD_SuspendCallback>
    return;
 8003880:	e026      	b.n	80038d0 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003888:	2b00      	cmp	r3, #0
 800388a:	d00f      	beq.n	80038ac <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003894:	b29a      	uxth	r2, r3
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800389e:	b292      	uxth	r2, r2
 80038a0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	f7ff f824 	bl	80028f2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80038aa:	e011      	b.n	80038d0 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d00c      	beq.n	80038d0 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80038be:	b29a      	uxth	r2, r3
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80038c8:	b292      	uxth	r2, r2
 80038ca:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80038ce:	bf00      	nop
  }
}
 80038d0:	3710      	adds	r7, #16
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}

080038d6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80038d6:	b580      	push	{r7, lr}
 80038d8:	b082      	sub	sp, #8
 80038da:	af00      	add	r7, sp, #0
 80038dc:	6078      	str	r0, [r7, #4]
 80038de:	460b      	mov	r3, r1
 80038e0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d101      	bne.n	80038f0 <HAL_PCD_SetAddress+0x1a>
 80038ec:	2302      	movs	r3, #2
 80038ee:	e012      	b.n	8003916 <HAL_PCD_SetAddress+0x40>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2201      	movs	r2, #1
 80038f4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	78fa      	ldrb	r2, [r7, #3]
 80038fc:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	78fa      	ldrb	r2, [r7, #3]
 8003904:	4611      	mov	r1, r2
 8003906:	4618      	mov	r0, r3
 8003908:	f004 f838 	bl	800797c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2200      	movs	r2, #0
 8003910:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003914:	2300      	movs	r3, #0
}
 8003916:	4618      	mov	r0, r3
 8003918:	3708      	adds	r7, #8
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}

0800391e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800391e:	b580      	push	{r7, lr}
 8003920:	b084      	sub	sp, #16
 8003922:	af00      	add	r7, sp, #0
 8003924:	6078      	str	r0, [r7, #4]
 8003926:	4608      	mov	r0, r1
 8003928:	4611      	mov	r1, r2
 800392a:	461a      	mov	r2, r3
 800392c:	4603      	mov	r3, r0
 800392e:	70fb      	strb	r3, [r7, #3]
 8003930:	460b      	mov	r3, r1
 8003932:	803b      	strh	r3, [r7, #0]
 8003934:	4613      	mov	r3, r2
 8003936:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8003938:	2300      	movs	r3, #0
 800393a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800393c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003940:	2b00      	cmp	r3, #0
 8003942:	da0e      	bge.n	8003962 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003944:	78fb      	ldrb	r3, [r7, #3]
 8003946:	f003 0207 	and.w	r2, r3, #7
 800394a:	4613      	mov	r3, r2
 800394c:	009b      	lsls	r3, r3, #2
 800394e:	4413      	add	r3, r2
 8003950:	00db      	lsls	r3, r3, #3
 8003952:	3310      	adds	r3, #16
 8003954:	687a      	ldr	r2, [r7, #4]
 8003956:	4413      	add	r3, r2
 8003958:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2201      	movs	r2, #1
 800395e:	705a      	strb	r2, [r3, #1]
 8003960:	e00e      	b.n	8003980 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003962:	78fb      	ldrb	r3, [r7, #3]
 8003964:	f003 0207 	and.w	r2, r3, #7
 8003968:	4613      	mov	r3, r2
 800396a:	009b      	lsls	r3, r3, #2
 800396c:	4413      	add	r3, r2
 800396e:	00db      	lsls	r3, r3, #3
 8003970:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003974:	687a      	ldr	r2, [r7, #4]
 8003976:	4413      	add	r3, r2
 8003978:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2200      	movs	r2, #0
 800397e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003980:	78fb      	ldrb	r3, [r7, #3]
 8003982:	f003 0307 	and.w	r3, r3, #7
 8003986:	b2da      	uxtb	r2, r3
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800398c:	883b      	ldrh	r3, [r7, #0]
 800398e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	78ba      	ldrb	r2, [r7, #2]
 800399a:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800399c:	78bb      	ldrb	r3, [r7, #2]
 800399e:	2b02      	cmp	r3, #2
 80039a0:	d102      	bne.n	80039a8 <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2200      	movs	r2, #0
 80039a6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d101      	bne.n	80039b6 <HAL_PCD_EP_Open+0x98>
 80039b2:	2302      	movs	r3, #2
 80039b4:	e00e      	b.n	80039d4 <HAL_PCD_EP_Open+0xb6>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2201      	movs	r2, #1
 80039ba:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	68f9      	ldr	r1, [r7, #12]
 80039c4:	4618      	mov	r0, r3
 80039c6:	f002 fa5b 	bl	8005e80 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2200      	movs	r2, #0
 80039ce:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 80039d2:	7afb      	ldrb	r3, [r7, #11]
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	3710      	adds	r7, #16
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}

080039dc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b084      	sub	sp, #16
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
 80039e4:	460b      	mov	r3, r1
 80039e6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80039e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	da0e      	bge.n	8003a0e <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039f0:	78fb      	ldrb	r3, [r7, #3]
 80039f2:	f003 0207 	and.w	r2, r3, #7
 80039f6:	4613      	mov	r3, r2
 80039f8:	009b      	lsls	r3, r3, #2
 80039fa:	4413      	add	r3, r2
 80039fc:	00db      	lsls	r3, r3, #3
 80039fe:	3310      	adds	r3, #16
 8003a00:	687a      	ldr	r2, [r7, #4]
 8003a02:	4413      	add	r3, r2
 8003a04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2201      	movs	r2, #1
 8003a0a:	705a      	strb	r2, [r3, #1]
 8003a0c:	e00e      	b.n	8003a2c <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a0e:	78fb      	ldrb	r3, [r7, #3]
 8003a10:	f003 0207 	and.w	r2, r3, #7
 8003a14:	4613      	mov	r3, r2
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	4413      	add	r3, r2
 8003a1a:	00db      	lsls	r3, r3, #3
 8003a1c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003a20:	687a      	ldr	r2, [r7, #4]
 8003a22:	4413      	add	r3, r2
 8003a24:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a2c:	78fb      	ldrb	r3, [r7, #3]
 8003a2e:	f003 0307 	and.w	r3, r3, #7
 8003a32:	b2da      	uxtb	r2, r3
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	d101      	bne.n	8003a46 <HAL_PCD_EP_Close+0x6a>
 8003a42:	2302      	movs	r3, #2
 8003a44:	e00e      	b.n	8003a64 <HAL_PCD_EP_Close+0x88>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2201      	movs	r2, #1
 8003a4a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	68f9      	ldr	r1, [r7, #12]
 8003a54:	4618      	mov	r0, r3
 8003a56:	f002 fefb 	bl	8006850 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8003a62:	2300      	movs	r3, #0
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	3710      	adds	r7, #16
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}

08003a6c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b086      	sub	sp, #24
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	60f8      	str	r0, [r7, #12]
 8003a74:	607a      	str	r2, [r7, #4]
 8003a76:	603b      	str	r3, [r7, #0]
 8003a78:	460b      	mov	r3, r1
 8003a7a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a7c:	7afb      	ldrb	r3, [r7, #11]
 8003a7e:	f003 0207 	and.w	r2, r3, #7
 8003a82:	4613      	mov	r3, r2
 8003a84:	009b      	lsls	r3, r3, #2
 8003a86:	4413      	add	r3, r2
 8003a88:	00db      	lsls	r3, r3, #3
 8003a8a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003a8e:	68fa      	ldr	r2, [r7, #12]
 8003a90:	4413      	add	r3, r2
 8003a92:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	687a      	ldr	r2, [r7, #4]
 8003a98:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	683a      	ldr	r2, [r7, #0]
 8003a9e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003aac:	7afb      	ldrb	r3, [r7, #11]
 8003aae:	f003 0307 	and.w	r3, r3, #7
 8003ab2:	b2da      	uxtb	r2, r3
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	6979      	ldr	r1, [r7, #20]
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f003 f8b3 	bl	8006c2a <USB_EPStartXfer>

  return HAL_OK;
 8003ac4:	2300      	movs	r3, #0
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3718      	adds	r7, #24
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}

08003ace <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003ace:	b480      	push	{r7}
 8003ad0:	b083      	sub	sp, #12
 8003ad2:	af00      	add	r7, sp, #0
 8003ad4:	6078      	str	r0, [r7, #4]
 8003ad6:	460b      	mov	r3, r1
 8003ad8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003ada:	78fb      	ldrb	r3, [r7, #3]
 8003adc:	f003 0207 	and.w	r2, r3, #7
 8003ae0:	6879      	ldr	r1, [r7, #4]
 8003ae2:	4613      	mov	r3, r2
 8003ae4:	009b      	lsls	r3, r3, #2
 8003ae6:	4413      	add	r3, r2
 8003ae8:	00db      	lsls	r3, r3, #3
 8003aea:	440b      	add	r3, r1
 8003aec:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8003af0:	681b      	ldr	r3, [r3, #0]
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	370c      	adds	r7, #12
 8003af6:	46bd      	mov	sp, r7
 8003af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afc:	4770      	bx	lr

08003afe <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003afe:	b580      	push	{r7, lr}
 8003b00:	b086      	sub	sp, #24
 8003b02:	af00      	add	r7, sp, #0
 8003b04:	60f8      	str	r0, [r7, #12]
 8003b06:	607a      	str	r2, [r7, #4]
 8003b08:	603b      	str	r3, [r7, #0]
 8003b0a:	460b      	mov	r3, r1
 8003b0c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b0e:	7afb      	ldrb	r3, [r7, #11]
 8003b10:	f003 0207 	and.w	r2, r3, #7
 8003b14:	4613      	mov	r3, r2
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	4413      	add	r3, r2
 8003b1a:	00db      	lsls	r3, r3, #3
 8003b1c:	3310      	adds	r3, #16
 8003b1e:	68fa      	ldr	r2, [r7, #12]
 8003b20:	4413      	add	r3, r2
 8003b22:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	687a      	ldr	r2, [r7, #4]
 8003b28:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	683a      	ldr	r2, [r7, #0]
 8003b2e:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	2201      	movs	r2, #1
 8003b34:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	683a      	ldr	r2, [r7, #0]
 8003b3c:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	2200      	movs	r2, #0
 8003b42:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	2201      	movs	r2, #1
 8003b48:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b4a:	7afb      	ldrb	r3, [r7, #11]
 8003b4c:	f003 0307 	and.w	r3, r3, #7
 8003b50:	b2da      	uxtb	r2, r3
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	6979      	ldr	r1, [r7, #20]
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f003 f864 	bl	8006c2a <USB_EPStartXfer>

  return HAL_OK;
 8003b62:	2300      	movs	r3, #0
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	3718      	adds	r7, #24
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}

08003b6c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b084      	sub	sp, #16
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
 8003b74:	460b      	mov	r3, r1
 8003b76:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003b78:	78fb      	ldrb	r3, [r7, #3]
 8003b7a:	f003 0307 	and.w	r3, r3, #7
 8003b7e:	687a      	ldr	r2, [r7, #4]
 8003b80:	7912      	ldrb	r2, [r2, #4]
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d901      	bls.n	8003b8a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	e03e      	b.n	8003c08 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003b8a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	da0e      	bge.n	8003bb0 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b92:	78fb      	ldrb	r3, [r7, #3]
 8003b94:	f003 0207 	and.w	r2, r3, #7
 8003b98:	4613      	mov	r3, r2
 8003b9a:	009b      	lsls	r3, r3, #2
 8003b9c:	4413      	add	r3, r2
 8003b9e:	00db      	lsls	r3, r3, #3
 8003ba0:	3310      	adds	r3, #16
 8003ba2:	687a      	ldr	r2, [r7, #4]
 8003ba4:	4413      	add	r3, r2
 8003ba6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2201      	movs	r2, #1
 8003bac:	705a      	strb	r2, [r3, #1]
 8003bae:	e00c      	b.n	8003bca <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003bb0:	78fa      	ldrb	r2, [r7, #3]
 8003bb2:	4613      	mov	r3, r2
 8003bb4:	009b      	lsls	r3, r3, #2
 8003bb6:	4413      	add	r3, r2
 8003bb8:	00db      	lsls	r3, r3, #3
 8003bba:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003bbe:	687a      	ldr	r2, [r7, #4]
 8003bc0:	4413      	add	r3, r2
 8003bc2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2201      	movs	r2, #1
 8003bce:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003bd0:	78fb      	ldrb	r3, [r7, #3]
 8003bd2:	f003 0307 	and.w	r3, r3, #7
 8003bd6:	b2da      	uxtb	r2, r3
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d101      	bne.n	8003bea <HAL_PCD_EP_SetStall+0x7e>
 8003be6:	2302      	movs	r3, #2
 8003be8:	e00e      	b.n	8003c08 <HAL_PCD_EP_SetStall+0x9c>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2201      	movs	r2, #1
 8003bee:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	68f9      	ldr	r1, [r7, #12]
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f003 fdc5 	bl	8007788 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2200      	movs	r2, #0
 8003c02:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003c06:	2300      	movs	r3, #0
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	3710      	adds	r7, #16
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}

08003c10 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b084      	sub	sp, #16
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
 8003c18:	460b      	mov	r3, r1
 8003c1a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003c1c:	78fb      	ldrb	r3, [r7, #3]
 8003c1e:	f003 030f 	and.w	r3, r3, #15
 8003c22:	687a      	ldr	r2, [r7, #4]
 8003c24:	7912      	ldrb	r2, [r2, #4]
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d901      	bls.n	8003c2e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e040      	b.n	8003cb0 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003c2e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	da0e      	bge.n	8003c54 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c36:	78fb      	ldrb	r3, [r7, #3]
 8003c38:	f003 0207 	and.w	r2, r3, #7
 8003c3c:	4613      	mov	r3, r2
 8003c3e:	009b      	lsls	r3, r3, #2
 8003c40:	4413      	add	r3, r2
 8003c42:	00db      	lsls	r3, r3, #3
 8003c44:	3310      	adds	r3, #16
 8003c46:	687a      	ldr	r2, [r7, #4]
 8003c48:	4413      	add	r3, r2
 8003c4a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2201      	movs	r2, #1
 8003c50:	705a      	strb	r2, [r3, #1]
 8003c52:	e00e      	b.n	8003c72 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c54:	78fb      	ldrb	r3, [r7, #3]
 8003c56:	f003 0207 	and.w	r2, r3, #7
 8003c5a:	4613      	mov	r3, r2
 8003c5c:	009b      	lsls	r3, r3, #2
 8003c5e:	4413      	add	r3, r2
 8003c60:	00db      	lsls	r3, r3, #3
 8003c62:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	4413      	add	r3, r2
 8003c6a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2200      	movs	r2, #0
 8003c76:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c78:	78fb      	ldrb	r3, [r7, #3]
 8003c7a:	f003 0307 	and.w	r3, r3, #7
 8003c7e:	b2da      	uxtb	r2, r3
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d101      	bne.n	8003c92 <HAL_PCD_EP_ClrStall+0x82>
 8003c8e:	2302      	movs	r3, #2
 8003c90:	e00e      	b.n	8003cb0 <HAL_PCD_EP_ClrStall+0xa0>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2201      	movs	r2, #1
 8003c96:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	68f9      	ldr	r1, [r7, #12]
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f003 fdc2 	bl	800782a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003cae:	2300      	movs	r3, #0
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3710      	adds	r7, #16
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}

08003cb8 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b092      	sub	sp, #72	@ 0x48
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003cc0:	e333      	b.n	800432a <PCD_EP_ISR_Handler+0x672>
  {
    wIstr = hpcd->Instance->ISTR;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003cca:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003ccc:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8003cce:	b2db      	uxtb	r3, r3
 8003cd0:	f003 030f 	and.w	r3, r3, #15
 8003cd4:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

    if (epindex == 0U)
 8003cd8:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	f040 8108 	bne.w	8003ef2 <PCD_EP_ISR_Handler+0x23a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003ce2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8003ce4:	f003 0310 	and.w	r3, r3, #16
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d14c      	bne.n	8003d86 <PCD_EP_ISR_Handler+0xce>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	881b      	ldrh	r3, [r3, #0]
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8003cf8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003cfc:	813b      	strh	r3, [r7, #8]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	893b      	ldrh	r3, [r7, #8]
 8003d04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d0c:	b29b      	uxth	r3, r3
 8003d0e:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	3310      	adds	r3, #16
 8003d14:	643b      	str	r3, [r7, #64]	@ 0x40

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d1e:	b29b      	uxth	r3, r3
 8003d20:	461a      	mov	r2, r3
 8003d22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d24:	781b      	ldrb	r3, [r3, #0]
 8003d26:	00db      	lsls	r3, r3, #3
 8003d28:	4413      	add	r3, r2
 8003d2a:	687a      	ldr	r2, [r7, #4]
 8003d2c:	6812      	ldr	r2, [r2, #0]
 8003d2e:	4413      	add	r3, r2
 8003d30:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003d34:	881b      	ldrh	r3, [r3, #0]
 8003d36:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003d3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d3c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003d3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d40:	695a      	ldr	r2, [r3, #20]
 8003d42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d44:	69db      	ldr	r3, [r3, #28]
 8003d46:	441a      	add	r2, r3
 8003d48:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d4a:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003d4c:	2100      	movs	r1, #0
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	f7fe fdb5 	bl	80028be <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	7b1b      	ldrb	r3, [r3, #12]
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	f000 82e5 	beq.w	800432a <PCD_EP_ISR_Handler+0x672>
 8003d60:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d62:	699b      	ldr	r3, [r3, #24]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	f040 82e0 	bne.w	800432a <PCD_EP_ISR_Handler+0x672>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	7b1b      	ldrb	r3, [r3, #12]
 8003d6e:	b2db      	uxtb	r3, r3
 8003d70:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003d74:	b2da      	uxtb	r2, r3
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2200      	movs	r2, #0
 8003d82:	731a      	strb	r2, [r3, #12]
 8003d84:	e2d1      	b.n	800432a <PCD_EP_ISR_Handler+0x672>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003d8c:	643b      	str	r3, [r7, #64]	@ 0x40
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	881b      	ldrh	r3, [r3, #0]
 8003d94:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003d96:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003d98:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d032      	beq.n	8003e06 <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003da8:	b29b      	uxth	r3, r3
 8003daa:	461a      	mov	r2, r3
 8003dac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003dae:	781b      	ldrb	r3, [r3, #0]
 8003db0:	00db      	lsls	r3, r3, #3
 8003db2:	4413      	add	r3, r2
 8003db4:	687a      	ldr	r2, [r7, #4]
 8003db6:	6812      	ldr	r2, [r2, #0]
 8003db8:	4413      	add	r3, r2
 8003dba:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003dbe:	881b      	ldrh	r3, [r3, #0]
 8003dc0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003dc4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003dc6:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6818      	ldr	r0, [r3, #0]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8003dd2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003dd4:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003dd6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003dd8:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003dda:	b29b      	uxth	r3, r3
 8003ddc:	f003 fe4b 	bl	8007a76 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	881b      	ldrh	r3, [r3, #0]
 8003de6:	b29a      	uxth	r2, r3
 8003de8:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003dec:	4013      	ands	r3, r2
 8003dee:	817b      	strh	r3, [r7, #10]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	897a      	ldrh	r2, [r7, #10]
 8003df6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003dfa:	b292      	uxth	r2, r2
 8003dfc:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f7fe fd30 	bl	8002864 <HAL_PCD_SetupStageCallback>
 8003e04:	e291      	b.n	800432a <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003e06:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	f280 828d 	bge.w	800432a <PCD_EP_ISR_Handler+0x672>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	881b      	ldrh	r3, [r3, #0]
 8003e16:	b29a      	uxth	r2, r3
 8003e18:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003e1c:	4013      	ands	r3, r2
 8003e1e:	81fb      	strh	r3, [r7, #14]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	89fa      	ldrh	r2, [r7, #14]
 8003e26:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003e2a:	b292      	uxth	r2, r2
 8003e2c:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e36:	b29b      	uxth	r3, r3
 8003e38:	461a      	mov	r2, r3
 8003e3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e3c:	781b      	ldrb	r3, [r3, #0]
 8003e3e:	00db      	lsls	r3, r3, #3
 8003e40:	4413      	add	r3, r2
 8003e42:	687a      	ldr	r2, [r7, #4]
 8003e44:	6812      	ldr	r2, [r2, #0]
 8003e46:	4413      	add	r3, r2
 8003e48:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003e4c:	881b      	ldrh	r3, [r3, #0]
 8003e4e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003e52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e54:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003e56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e58:	69db      	ldr	r3, [r3, #28]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d019      	beq.n	8003e92 <PCD_EP_ISR_Handler+0x1da>
 8003e5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e60:	695b      	ldr	r3, [r3, #20]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d015      	beq.n	8003e92 <PCD_EP_ISR_Handler+0x1da>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6818      	ldr	r0, [r3, #0]
 8003e6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e6c:	6959      	ldr	r1, [r3, #20]
 8003e6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e70:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003e72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e74:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003e76:	b29b      	uxth	r3, r3
 8003e78:	f003 fdfd 	bl	8007a76 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003e7c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e7e:	695a      	ldr	r2, [r3, #20]
 8003e80:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e82:	69db      	ldr	r3, [r3, #28]
 8003e84:	441a      	add	r2, r3
 8003e86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e88:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003e8a:	2100      	movs	r1, #0
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	f7fe fcfb 	bl	8002888 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	881b      	ldrh	r3, [r3, #0]
 8003e98:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8003e9a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003e9c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	f040 8242 	bne.w	800432a <PCD_EP_ISR_Handler+0x672>
 8003ea6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003ea8:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003eac:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003eb0:	f000 823b 	beq.w	800432a <PCD_EP_ISR_Handler+0x672>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	881b      	ldrh	r3, [r3, #0]
 8003eba:	b29b      	uxth	r3, r3
 8003ebc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003ec0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ec4:	81bb      	strh	r3, [r7, #12]
 8003ec6:	89bb      	ldrh	r3, [r7, #12]
 8003ec8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8003ecc:	81bb      	strh	r3, [r7, #12]
 8003ece:	89bb      	ldrh	r3, [r7, #12]
 8003ed0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003ed4:	81bb      	strh	r3, [r7, #12]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	89bb      	ldrh	r3, [r7, #12]
 8003edc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003ee0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003ee4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003ee8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003eec:	b29b      	uxth	r3, r3
 8003eee:	8013      	strh	r3, [r2, #0]
 8003ef0:	e21b      	b.n	800432a <PCD_EP_ISR_Handler+0x672>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	461a      	mov	r2, r3
 8003ef8:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8003efc:	009b      	lsls	r3, r3, #2
 8003efe:	4413      	add	r3, r2
 8003f00:	881b      	ldrh	r3, [r3, #0]
 8003f02:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003f04:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	f280 80f1 	bge.w	80040f0 <PCD_EP_ISR_Handler+0x438>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	461a      	mov	r2, r3
 8003f14:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8003f18:	009b      	lsls	r3, r3, #2
 8003f1a:	4413      	add	r3, r2
 8003f1c:	881b      	ldrh	r3, [r3, #0]
 8003f1e:	b29a      	uxth	r2, r3
 8003f20:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003f24:	4013      	ands	r3, r2
 8003f26:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	461a      	mov	r2, r3
 8003f2e:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	4413      	add	r3, r2
 8003f36:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003f38:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003f3c:	b292      	uxth	r2, r2
 8003f3e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003f40:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8003f44:	4613      	mov	r3, r2
 8003f46:	009b      	lsls	r3, r3, #2
 8003f48:	4413      	add	r3, r2
 8003f4a:	00db      	lsls	r3, r3, #3
 8003f4c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003f50:	687a      	ldr	r2, [r7, #4]
 8003f52:	4413      	add	r3, r2
 8003f54:	643b      	str	r3, [r7, #64]	@ 0x40

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003f56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f58:	7b1b      	ldrb	r3, [r3, #12]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d123      	bne.n	8003fa6 <PCD_EP_ISR_Handler+0x2ee>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003f66:	b29b      	uxth	r3, r3
 8003f68:	461a      	mov	r2, r3
 8003f6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f6c:	781b      	ldrb	r3, [r3, #0]
 8003f6e:	00db      	lsls	r3, r3, #3
 8003f70:	4413      	add	r3, r2
 8003f72:	687a      	ldr	r2, [r7, #4]
 8003f74:	6812      	ldr	r2, [r2, #0]
 8003f76:	4413      	add	r3, r2
 8003f78:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003f7c:	881b      	ldrh	r3, [r3, #0]
 8003f7e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f82:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

          if (count != 0U)
 8003f86:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	f000 808b 	beq.w	80040a6 <PCD_EP_ISR_Handler+0x3ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6818      	ldr	r0, [r3, #0]
 8003f94:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f96:	6959      	ldr	r1, [r3, #20]
 8003f98:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f9a:	88da      	ldrh	r2, [r3, #6]
 8003f9c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003fa0:	f003 fd69 	bl	8007a76 <USB_ReadPMA>
 8003fa4:	e07f      	b.n	80040a6 <PCD_EP_ISR_Handler+0x3ee>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003fa6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003fa8:	78db      	ldrb	r3, [r3, #3]
 8003faa:	2b02      	cmp	r3, #2
 8003fac:	d109      	bne.n	8003fc2 <PCD_EP_ISR_Handler+0x30a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003fae:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003fb0:	461a      	mov	r2, r3
 8003fb2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003fb4:	6878      	ldr	r0, [r7, #4]
 8003fb6:	f000 f9c6 	bl	8004346 <HAL_PCD_EP_DB_Receive>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8003fc0:	e071      	b.n	80040a6 <PCD_EP_ISR_Handler+0x3ee>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	461a      	mov	r2, r3
 8003fc8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003fca:	781b      	ldrb	r3, [r3, #0]
 8003fcc:	009b      	lsls	r3, r3, #2
 8003fce:	4413      	add	r3, r2
 8003fd0:	881b      	ldrh	r3, [r3, #0]
 8003fd2:	b29b      	uxth	r3, r3
 8003fd4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003fd8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fdc:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	461a      	mov	r2, r3
 8003fe4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003fe6:	781b      	ldrb	r3, [r3, #0]
 8003fe8:	009b      	lsls	r3, r3, #2
 8003fea:	441a      	add	r2, r3
 8003fec:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8003fee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003ff2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003ff6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003ffa:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003ffe:	b29b      	uxth	r3, r3
 8004000:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	461a      	mov	r2, r3
 8004008:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800400a:	781b      	ldrb	r3, [r3, #0]
 800400c:	009b      	lsls	r3, r3, #2
 800400e:	4413      	add	r3, r2
 8004010:	881b      	ldrh	r3, [r3, #0]
 8004012:	b29b      	uxth	r3, r3
 8004014:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004018:	2b00      	cmp	r3, #0
 800401a:	d022      	beq.n	8004062 <PCD_EP_ISR_Handler+0x3aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004024:	b29b      	uxth	r3, r3
 8004026:	461a      	mov	r2, r3
 8004028:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800402a:	781b      	ldrb	r3, [r3, #0]
 800402c:	00db      	lsls	r3, r3, #3
 800402e:	4413      	add	r3, r2
 8004030:	687a      	ldr	r2, [r7, #4]
 8004032:	6812      	ldr	r2, [r2, #0]
 8004034:	4413      	add	r3, r2
 8004036:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800403a:	881b      	ldrh	r3, [r3, #0]
 800403c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004040:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 8004044:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004048:	2b00      	cmp	r3, #0
 800404a:	d02c      	beq.n	80040a6 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6818      	ldr	r0, [r3, #0]
 8004050:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004052:	6959      	ldr	r1, [r3, #20]
 8004054:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004056:	891a      	ldrh	r2, [r3, #8]
 8004058:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800405c:	f003 fd0b 	bl	8007a76 <USB_ReadPMA>
 8004060:	e021      	b.n	80040a6 <PCD_EP_ISR_Handler+0x3ee>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800406a:	b29b      	uxth	r3, r3
 800406c:	461a      	mov	r2, r3
 800406e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004070:	781b      	ldrb	r3, [r3, #0]
 8004072:	00db      	lsls	r3, r3, #3
 8004074:	4413      	add	r3, r2
 8004076:	687a      	ldr	r2, [r7, #4]
 8004078:	6812      	ldr	r2, [r2, #0]
 800407a:	4413      	add	r3, r2
 800407c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004080:	881b      	ldrh	r3, [r3, #0]
 8004082:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004086:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 800408a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800408e:	2b00      	cmp	r3, #0
 8004090:	d009      	beq.n	80040a6 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6818      	ldr	r0, [r3, #0]
 8004096:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004098:	6959      	ldr	r1, [r3, #20]
 800409a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800409c:	895a      	ldrh	r2, [r3, #10]
 800409e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80040a2:	f003 fce8 	bl	8007a76 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80040a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80040a8:	69da      	ldr	r2, [r3, #28]
 80040aa:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80040ae:	441a      	add	r2, r3
 80040b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80040b2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80040b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80040b6:	695a      	ldr	r2, [r3, #20]
 80040b8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80040bc:	441a      	add	r2, r3
 80040be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80040c0:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80040c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80040c4:	699b      	ldr	r3, [r3, #24]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d005      	beq.n	80040d6 <PCD_EP_ISR_Handler+0x41e>
 80040ca:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 80040ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80040d0:	691b      	ldr	r3, [r3, #16]
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d206      	bcs.n	80040e4 <PCD_EP_ISR_Handler+0x42c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80040d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80040d8:	781b      	ldrb	r3, [r3, #0]
 80040da:	4619      	mov	r1, r3
 80040dc:	6878      	ldr	r0, [r7, #4]
 80040de:	f7fe fbd3 	bl	8002888 <HAL_PCD_DataOutStageCallback>
 80040e2:	e005      	b.n	80040f0 <PCD_EP_ISR_Handler+0x438>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80040ea:	4618      	mov	r0, r3
 80040ec:	f002 fd9d 	bl	8006c2a <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80040f0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80040f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	f000 8117 	beq.w	800432a <PCD_EP_ISR_Handler+0x672>
      {
        ep = &hpcd->IN_ep[epindex];
 80040fc:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8004100:	4613      	mov	r3, r2
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	4413      	add	r3, r2
 8004106:	00db      	lsls	r3, r3, #3
 8004108:	3310      	adds	r3, #16
 800410a:	687a      	ldr	r2, [r7, #4]
 800410c:	4413      	add	r3, r2
 800410e:	643b      	str	r3, [r7, #64]	@ 0x40

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	461a      	mov	r2, r3
 8004116:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800411a:	009b      	lsls	r3, r3, #2
 800411c:	4413      	add	r3, r2
 800411e:	881b      	ldrh	r3, [r3, #0]
 8004120:	b29b      	uxth	r3, r3
 8004122:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8004126:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800412a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	461a      	mov	r2, r3
 8004132:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	441a      	add	r2, r3
 800413a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800413c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004140:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004144:	b29b      	uxth	r3, r3
 8004146:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8004148:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800414a:	78db      	ldrb	r3, [r3, #3]
 800414c:	2b01      	cmp	r3, #1
 800414e:	f040 80a1 	bne.w	8004294 <PCD_EP_ISR_Handler+0x5dc>
        {
          ep->xfer_len = 0U;
 8004152:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004154:	2200      	movs	r2, #0
 8004156:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8004158:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800415a:	7b1b      	ldrb	r3, [r3, #12]
 800415c:	2b00      	cmp	r3, #0
 800415e:	f000 8092 	beq.w	8004286 <PCD_EP_ISR_Handler+0x5ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004162:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004164:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004168:	2b00      	cmp	r3, #0
 800416a:	d046      	beq.n	80041fa <PCD_EP_ISR_Handler+0x542>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800416c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800416e:	785b      	ldrb	r3, [r3, #1]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d126      	bne.n	80041c2 <PCD_EP_ISR_Handler+0x50a>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	617b      	str	r3, [r7, #20]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004182:	b29b      	uxth	r3, r3
 8004184:	461a      	mov	r2, r3
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	4413      	add	r3, r2
 800418a:	617b      	str	r3, [r7, #20]
 800418c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800418e:	781b      	ldrb	r3, [r3, #0]
 8004190:	00da      	lsls	r2, r3, #3
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	4413      	add	r3, r2
 8004196:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800419a:	613b      	str	r3, [r7, #16]
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	881b      	ldrh	r3, [r3, #0]
 80041a0:	b29b      	uxth	r3, r3
 80041a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80041a6:	b29a      	uxth	r2, r3
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	801a      	strh	r2, [r3, #0]
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	881b      	ldrh	r3, [r3, #0]
 80041b0:	b29b      	uxth	r3, r3
 80041b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80041ba:	b29a      	uxth	r2, r3
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	801a      	strh	r2, [r3, #0]
 80041c0:	e061      	b.n	8004286 <PCD_EP_ISR_Handler+0x5ce>
 80041c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80041c4:	785b      	ldrb	r3, [r3, #1]
 80041c6:	2b01      	cmp	r3, #1
 80041c8:	d15d      	bne.n	8004286 <PCD_EP_ISR_Handler+0x5ce>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	61fb      	str	r3, [r7, #28]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80041d8:	b29b      	uxth	r3, r3
 80041da:	461a      	mov	r2, r3
 80041dc:	69fb      	ldr	r3, [r7, #28]
 80041de:	4413      	add	r3, r2
 80041e0:	61fb      	str	r3, [r7, #28]
 80041e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80041e4:	781b      	ldrb	r3, [r3, #0]
 80041e6:	00da      	lsls	r2, r3, #3
 80041e8:	69fb      	ldr	r3, [r7, #28]
 80041ea:	4413      	add	r3, r2
 80041ec:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80041f0:	61bb      	str	r3, [r7, #24]
 80041f2:	69bb      	ldr	r3, [r7, #24]
 80041f4:	2200      	movs	r2, #0
 80041f6:	801a      	strh	r2, [r3, #0]
 80041f8:	e045      	b.n	8004286 <PCD_EP_ISR_Handler+0x5ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004200:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004202:	785b      	ldrb	r3, [r3, #1]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d126      	bne.n	8004256 <PCD_EP_ISR_Handler+0x59e>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	627b      	str	r3, [r7, #36]	@ 0x24
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004216:	b29b      	uxth	r3, r3
 8004218:	461a      	mov	r2, r3
 800421a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800421c:	4413      	add	r3, r2
 800421e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004220:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004222:	781b      	ldrb	r3, [r3, #0]
 8004224:	00da      	lsls	r2, r3, #3
 8004226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004228:	4413      	add	r3, r2
 800422a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800422e:	623b      	str	r3, [r7, #32]
 8004230:	6a3b      	ldr	r3, [r7, #32]
 8004232:	881b      	ldrh	r3, [r3, #0]
 8004234:	b29b      	uxth	r3, r3
 8004236:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800423a:	b29a      	uxth	r2, r3
 800423c:	6a3b      	ldr	r3, [r7, #32]
 800423e:	801a      	strh	r2, [r3, #0]
 8004240:	6a3b      	ldr	r3, [r7, #32]
 8004242:	881b      	ldrh	r3, [r3, #0]
 8004244:	b29b      	uxth	r3, r3
 8004246:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800424a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800424e:	b29a      	uxth	r2, r3
 8004250:	6a3b      	ldr	r3, [r7, #32]
 8004252:	801a      	strh	r2, [r3, #0]
 8004254:	e017      	b.n	8004286 <PCD_EP_ISR_Handler+0x5ce>
 8004256:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004258:	785b      	ldrb	r3, [r3, #1]
 800425a:	2b01      	cmp	r3, #1
 800425c:	d113      	bne.n	8004286 <PCD_EP_ISR_Handler+0x5ce>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004266:	b29b      	uxth	r3, r3
 8004268:	461a      	mov	r2, r3
 800426a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800426c:	4413      	add	r3, r2
 800426e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004270:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004272:	781b      	ldrb	r3, [r3, #0]
 8004274:	00da      	lsls	r2, r3, #3
 8004276:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004278:	4413      	add	r3, r2
 800427a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800427e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004280:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004282:	2200      	movs	r2, #0
 8004284:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004286:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004288:	781b      	ldrb	r3, [r3, #0]
 800428a:	4619      	mov	r1, r3
 800428c:	6878      	ldr	r0, [r7, #4]
 800428e:	f7fe fb16 	bl	80028be <HAL_PCD_DataInStageCallback>
 8004292:	e04a      	b.n	800432a <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8004294:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004296:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800429a:	2b00      	cmp	r3, #0
 800429c:	d13f      	bne.n	800431e <PCD_EP_ISR_Handler+0x666>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80042a6:	b29b      	uxth	r3, r3
 80042a8:	461a      	mov	r2, r3
 80042aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80042ac:	781b      	ldrb	r3, [r3, #0]
 80042ae:	00db      	lsls	r3, r3, #3
 80042b0:	4413      	add	r3, r2
 80042b2:	687a      	ldr	r2, [r7, #4]
 80042b4:	6812      	ldr	r2, [r2, #0]
 80042b6:	4413      	add	r3, r2
 80042b8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80042bc:	881b      	ldrh	r3, [r3, #0]
 80042be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80042c2:	867b      	strh	r3, [r7, #50]	@ 0x32

            if (ep->xfer_len > TxPctSize)
 80042c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80042c6:	699a      	ldr	r2, [r3, #24]
 80042c8:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80042ca:	429a      	cmp	r2, r3
 80042cc:	d906      	bls.n	80042dc <PCD_EP_ISR_Handler+0x624>
            {
              ep->xfer_len -= TxPctSize;
 80042ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80042d0:	699a      	ldr	r2, [r3, #24]
 80042d2:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80042d4:	1ad2      	subs	r2, r2, r3
 80042d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80042d8:	619a      	str	r2, [r3, #24]
 80042da:	e002      	b.n	80042e2 <PCD_EP_ISR_Handler+0x62a>
            }
            else
            {
              ep->xfer_len = 0U;
 80042dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80042de:	2200      	movs	r2, #0
 80042e0:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80042e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80042e4:	699b      	ldr	r3, [r3, #24]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d106      	bne.n	80042f8 <PCD_EP_ISR_Handler+0x640>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80042ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80042ec:	781b      	ldrb	r3, [r3, #0]
 80042ee:	4619      	mov	r1, r3
 80042f0:	6878      	ldr	r0, [r7, #4]
 80042f2:	f7fe fae4 	bl	80028be <HAL_PCD_DataInStageCallback>
 80042f6:	e018      	b.n	800432a <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80042f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80042fa:	695a      	ldr	r2, [r3, #20]
 80042fc:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80042fe:	441a      	add	r2, r3
 8004300:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004302:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8004304:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004306:	69da      	ldr	r2, [r3, #28]
 8004308:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800430a:	441a      	add	r2, r3
 800430c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800430e:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004316:	4618      	mov	r0, r3
 8004318:	f002 fc87 	bl	8006c2a <USB_EPStartXfer>
 800431c:	e005      	b.n	800432a <PCD_EP_ISR_Handler+0x672>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800431e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004320:	461a      	mov	r2, r3
 8004322:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	f000 f917 	bl	8004558 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004332:	b29b      	uxth	r3, r3
 8004334:	b21b      	sxth	r3, r3
 8004336:	2b00      	cmp	r3, #0
 8004338:	f6ff acc3 	blt.w	8003cc2 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800433c:	2300      	movs	r3, #0
}
 800433e:	4618      	mov	r0, r3
 8004340:	3748      	adds	r7, #72	@ 0x48
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}

08004346 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004346:	b580      	push	{r7, lr}
 8004348:	b088      	sub	sp, #32
 800434a:	af00      	add	r7, sp, #0
 800434c:	60f8      	str	r0, [r7, #12]
 800434e:	60b9      	str	r1, [r7, #8]
 8004350:	4613      	mov	r3, r2
 8004352:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004354:	88fb      	ldrh	r3, [r7, #6]
 8004356:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800435a:	2b00      	cmp	r3, #0
 800435c:	d07c      	beq.n	8004458 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004366:	b29b      	uxth	r3, r3
 8004368:	461a      	mov	r2, r3
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	781b      	ldrb	r3, [r3, #0]
 800436e:	00db      	lsls	r3, r3, #3
 8004370:	4413      	add	r3, r2
 8004372:	68fa      	ldr	r2, [r7, #12]
 8004374:	6812      	ldr	r2, [r2, #0]
 8004376:	4413      	add	r3, r2
 8004378:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800437c:	881b      	ldrh	r3, [r3, #0]
 800437e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004382:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	699a      	ldr	r2, [r3, #24]
 8004388:	8b7b      	ldrh	r3, [r7, #26]
 800438a:	429a      	cmp	r2, r3
 800438c:	d306      	bcc.n	800439c <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	699a      	ldr	r2, [r3, #24]
 8004392:	8b7b      	ldrh	r3, [r7, #26]
 8004394:	1ad2      	subs	r2, r2, r3
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	619a      	str	r2, [r3, #24]
 800439a:	e002      	b.n	80043a2 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	2200      	movs	r2, #0
 80043a0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	699b      	ldr	r3, [r3, #24]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d123      	bne.n	80043f2 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	461a      	mov	r2, r3
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	781b      	ldrb	r3, [r3, #0]
 80043b4:	009b      	lsls	r3, r3, #2
 80043b6:	4413      	add	r3, r2
 80043b8:	881b      	ldrh	r3, [r3, #0]
 80043ba:	b29b      	uxth	r3, r3
 80043bc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80043c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043c4:	833b      	strh	r3, [r7, #24]
 80043c6:	8b3b      	ldrh	r3, [r7, #24]
 80043c8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80043cc:	833b      	strh	r3, [r7, #24]
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	461a      	mov	r2, r3
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	781b      	ldrb	r3, [r3, #0]
 80043d8:	009b      	lsls	r3, r3, #2
 80043da:	441a      	add	r2, r3
 80043dc:	8b3b      	ldrh	r3, [r7, #24]
 80043de:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80043e2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80043e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80043ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80043ee:	b29b      	uxth	r3, r3
 80043f0:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80043f2:	88fb      	ldrh	r3, [r7, #6]
 80043f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d01f      	beq.n	800443c <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	461a      	mov	r2, r3
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	781b      	ldrb	r3, [r3, #0]
 8004406:	009b      	lsls	r3, r3, #2
 8004408:	4413      	add	r3, r2
 800440a:	881b      	ldrh	r3, [r3, #0]
 800440c:	b29b      	uxth	r3, r3
 800440e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004412:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004416:	82fb      	strh	r3, [r7, #22]
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	461a      	mov	r2, r3
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	781b      	ldrb	r3, [r3, #0]
 8004422:	009b      	lsls	r3, r3, #2
 8004424:	441a      	add	r2, r3
 8004426:	8afb      	ldrh	r3, [r7, #22]
 8004428:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800442c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004430:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004434:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004438:	b29b      	uxth	r3, r3
 800443a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800443c:	8b7b      	ldrh	r3, [r7, #26]
 800443e:	2b00      	cmp	r3, #0
 8004440:	f000 8085 	beq.w	800454e <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	6818      	ldr	r0, [r3, #0]
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	6959      	ldr	r1, [r3, #20]
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	891a      	ldrh	r2, [r3, #8]
 8004450:	8b7b      	ldrh	r3, [r7, #26]
 8004452:	f003 fb10 	bl	8007a76 <USB_ReadPMA>
 8004456:	e07a      	b.n	800454e <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004460:	b29b      	uxth	r3, r3
 8004462:	461a      	mov	r2, r3
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	781b      	ldrb	r3, [r3, #0]
 8004468:	00db      	lsls	r3, r3, #3
 800446a:	4413      	add	r3, r2
 800446c:	68fa      	ldr	r2, [r7, #12]
 800446e:	6812      	ldr	r2, [r2, #0]
 8004470:	4413      	add	r3, r2
 8004472:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004476:	881b      	ldrh	r3, [r3, #0]
 8004478:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800447c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	699a      	ldr	r2, [r3, #24]
 8004482:	8b7b      	ldrh	r3, [r7, #26]
 8004484:	429a      	cmp	r2, r3
 8004486:	d306      	bcc.n	8004496 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	699a      	ldr	r2, [r3, #24]
 800448c:	8b7b      	ldrh	r3, [r7, #26]
 800448e:	1ad2      	subs	r2, r2, r3
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	619a      	str	r2, [r3, #24]
 8004494:	e002      	b.n	800449c <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	2200      	movs	r2, #0
 800449a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	699b      	ldr	r3, [r3, #24]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d123      	bne.n	80044ec <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	461a      	mov	r2, r3
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	781b      	ldrb	r3, [r3, #0]
 80044ae:	009b      	lsls	r3, r3, #2
 80044b0:	4413      	add	r3, r2
 80044b2:	881b      	ldrh	r3, [r3, #0]
 80044b4:	b29b      	uxth	r3, r3
 80044b6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80044ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044be:	83fb      	strh	r3, [r7, #30]
 80044c0:	8bfb      	ldrh	r3, [r7, #30]
 80044c2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80044c6:	83fb      	strh	r3, [r7, #30]
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	461a      	mov	r2, r3
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	781b      	ldrb	r3, [r3, #0]
 80044d2:	009b      	lsls	r3, r3, #2
 80044d4:	441a      	add	r2, r3
 80044d6:	8bfb      	ldrh	r3, [r7, #30]
 80044d8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80044dc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80044e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80044e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80044e8:	b29b      	uxth	r3, r3
 80044ea:	8013      	strh	r3, [r2, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80044ec:	88fb      	ldrh	r3, [r7, #6]
 80044ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d11f      	bne.n	8004536 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	461a      	mov	r2, r3
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	781b      	ldrb	r3, [r3, #0]
 8004500:	009b      	lsls	r3, r3, #2
 8004502:	4413      	add	r3, r2
 8004504:	881b      	ldrh	r3, [r3, #0]
 8004506:	b29b      	uxth	r3, r3
 8004508:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800450c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004510:	83bb      	strh	r3, [r7, #28]
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	461a      	mov	r2, r3
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	781b      	ldrb	r3, [r3, #0]
 800451c:	009b      	lsls	r3, r3, #2
 800451e:	441a      	add	r2, r3
 8004520:	8bbb      	ldrh	r3, [r7, #28]
 8004522:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004526:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800452a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800452e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004532:	b29b      	uxth	r3, r3
 8004534:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004536:	8b7b      	ldrh	r3, [r7, #26]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d008      	beq.n	800454e <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	6818      	ldr	r0, [r3, #0]
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	6959      	ldr	r1, [r3, #20]
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	895a      	ldrh	r2, [r3, #10]
 8004548:	8b7b      	ldrh	r3, [r7, #26]
 800454a:	f003 fa94 	bl	8007a76 <USB_ReadPMA>
    }
  }

  return count;
 800454e:	8b7b      	ldrh	r3, [r7, #26]
}
 8004550:	4618      	mov	r0, r3
 8004552:	3720      	adds	r7, #32
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}

08004558 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b0a6      	sub	sp, #152	@ 0x98
 800455c:	af00      	add	r7, sp, #0
 800455e:	60f8      	str	r0, [r7, #12]
 8004560:	60b9      	str	r1, [r7, #8]
 8004562:	4613      	mov	r3, r2
 8004564:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004566:	88fb      	ldrh	r3, [r7, #6]
 8004568:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800456c:	2b00      	cmp	r3, #0
 800456e:	f000 81f7 	beq.w	8004960 <HAL_PCD_EP_DB_Transmit+0x408>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800457a:	b29b      	uxth	r3, r3
 800457c:	461a      	mov	r2, r3
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	781b      	ldrb	r3, [r3, #0]
 8004582:	00db      	lsls	r3, r3, #3
 8004584:	4413      	add	r3, r2
 8004586:	68fa      	ldr	r2, [r7, #12]
 8004588:	6812      	ldr	r2, [r2, #0]
 800458a:	4413      	add	r3, r2
 800458c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004590:	881b      	ldrh	r3, [r3, #0]
 8004592:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004596:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len > TxPctSize)
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	699a      	ldr	r2, [r3, #24]
 800459e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80045a2:	429a      	cmp	r2, r3
 80045a4:	d907      	bls.n	80045b6 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	699a      	ldr	r2, [r3, #24]
 80045aa:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80045ae:	1ad2      	subs	r2, r2, r3
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	619a      	str	r2, [r3, #24]
 80045b4:	e002      	b.n	80045bc <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	2200      	movs	r2, #0
 80045ba:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	699b      	ldr	r3, [r3, #24]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	f040 80e1 	bne.w	8004788 <HAL_PCD_EP_DB_Transmit+0x230>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	785b      	ldrb	r3, [r3, #1]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d126      	bne.n	800461c <HAL_PCD_EP_DB_Transmit+0xc4>
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	633b      	str	r3, [r7, #48]	@ 0x30
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80045dc:	b29b      	uxth	r3, r3
 80045de:	461a      	mov	r2, r3
 80045e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045e2:	4413      	add	r3, r2
 80045e4:	633b      	str	r3, [r7, #48]	@ 0x30
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	781b      	ldrb	r3, [r3, #0]
 80045ea:	00da      	lsls	r2, r3, #3
 80045ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045ee:	4413      	add	r3, r2
 80045f0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80045f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80045f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045f8:	881b      	ldrh	r3, [r3, #0]
 80045fa:	b29b      	uxth	r3, r3
 80045fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004600:	b29a      	uxth	r2, r3
 8004602:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004604:	801a      	strh	r2, [r3, #0]
 8004606:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004608:	881b      	ldrh	r3, [r3, #0]
 800460a:	b29b      	uxth	r3, r3
 800460c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004610:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004614:	b29a      	uxth	r2, r3
 8004616:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004618:	801a      	strh	r2, [r3, #0]
 800461a:	e01a      	b.n	8004652 <HAL_PCD_EP_DB_Transmit+0xfa>
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	785b      	ldrb	r3, [r3, #1]
 8004620:	2b01      	cmp	r3, #1
 8004622:	d116      	bne.n	8004652 <HAL_PCD_EP_DB_Transmit+0xfa>
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	63bb      	str	r3, [r7, #56]	@ 0x38
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004632:	b29b      	uxth	r3, r3
 8004634:	461a      	mov	r2, r3
 8004636:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004638:	4413      	add	r3, r2
 800463a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	781b      	ldrb	r3, [r3, #0]
 8004640:	00da      	lsls	r2, r3, #3
 8004642:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004644:	4413      	add	r3, r2
 8004646:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800464a:	637b      	str	r3, [r7, #52]	@ 0x34
 800464c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800464e:	2200      	movs	r2, #0
 8004650:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	785b      	ldrb	r3, [r3, #1]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d126      	bne.n	80046ae <HAL_PCD_EP_DB_Transmit+0x156>
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	623b      	str	r3, [r7, #32]
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800466e:	b29b      	uxth	r3, r3
 8004670:	461a      	mov	r2, r3
 8004672:	6a3b      	ldr	r3, [r7, #32]
 8004674:	4413      	add	r3, r2
 8004676:	623b      	str	r3, [r7, #32]
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	781b      	ldrb	r3, [r3, #0]
 800467c:	00da      	lsls	r2, r3, #3
 800467e:	6a3b      	ldr	r3, [r7, #32]
 8004680:	4413      	add	r3, r2
 8004682:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004686:	61fb      	str	r3, [r7, #28]
 8004688:	69fb      	ldr	r3, [r7, #28]
 800468a:	881b      	ldrh	r3, [r3, #0]
 800468c:	b29b      	uxth	r3, r3
 800468e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004692:	b29a      	uxth	r2, r3
 8004694:	69fb      	ldr	r3, [r7, #28]
 8004696:	801a      	strh	r2, [r3, #0]
 8004698:	69fb      	ldr	r3, [r7, #28]
 800469a:	881b      	ldrh	r3, [r3, #0]
 800469c:	b29b      	uxth	r3, r3
 800469e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80046a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046a6:	b29a      	uxth	r2, r3
 80046a8:	69fb      	ldr	r3, [r7, #28]
 80046aa:	801a      	strh	r2, [r3, #0]
 80046ac:	e017      	b.n	80046de <HAL_PCD_EP_DB_Transmit+0x186>
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	785b      	ldrb	r3, [r3, #1]
 80046b2:	2b01      	cmp	r3, #1
 80046b4:	d113      	bne.n	80046de <HAL_PCD_EP_DB_Transmit+0x186>
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80046be:	b29b      	uxth	r3, r3
 80046c0:	461a      	mov	r2, r3
 80046c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046c4:	4413      	add	r3, r2
 80046c6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	781b      	ldrb	r3, [r3, #0]
 80046cc:	00da      	lsls	r2, r3, #3
 80046ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046d0:	4413      	add	r3, r2
 80046d2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80046d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80046d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046da:	2200      	movs	r2, #0
 80046dc:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	78db      	ldrb	r3, [r3, #3]
 80046e2:	2b02      	cmp	r3, #2
 80046e4:	d123      	bne.n	800472e <HAL_PCD_EP_DB_Transmit+0x1d6>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	461a      	mov	r2, r3
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	781b      	ldrb	r3, [r3, #0]
 80046f0:	009b      	lsls	r3, r3, #2
 80046f2:	4413      	add	r3, r2
 80046f4:	881b      	ldrh	r3, [r3, #0]
 80046f6:	b29b      	uxth	r3, r3
 80046f8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80046fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004700:	837b      	strh	r3, [r7, #26]
 8004702:	8b7b      	ldrh	r3, [r7, #26]
 8004704:	f083 0320 	eor.w	r3, r3, #32
 8004708:	837b      	strh	r3, [r7, #26]
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	461a      	mov	r2, r3
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	781b      	ldrb	r3, [r3, #0]
 8004714:	009b      	lsls	r3, r3, #2
 8004716:	441a      	add	r2, r3
 8004718:	8b7b      	ldrh	r3, [r7, #26]
 800471a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800471e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004722:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004726:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800472a:	b29b      	uxth	r3, r3
 800472c:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	781b      	ldrb	r3, [r3, #0]
 8004732:	4619      	mov	r1, r3
 8004734:	68f8      	ldr	r0, [r7, #12]
 8004736:	f7fe f8c2 	bl	80028be <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800473a:	88fb      	ldrh	r3, [r7, #6]
 800473c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004740:	2b00      	cmp	r3, #0
 8004742:	d01f      	beq.n	8004784 <HAL_PCD_EP_DB_Transmit+0x22c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	461a      	mov	r2, r3
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	781b      	ldrb	r3, [r3, #0]
 800474e:	009b      	lsls	r3, r3, #2
 8004750:	4413      	add	r3, r2
 8004752:	881b      	ldrh	r3, [r3, #0]
 8004754:	b29b      	uxth	r3, r3
 8004756:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800475a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800475e:	833b      	strh	r3, [r7, #24]
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	461a      	mov	r2, r3
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	781b      	ldrb	r3, [r3, #0]
 800476a:	009b      	lsls	r3, r3, #2
 800476c:	441a      	add	r2, r3
 800476e:	8b3b      	ldrh	r3, [r7, #24]
 8004770:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004774:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004778:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800477c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004780:	b29b      	uxth	r3, r3
 8004782:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8004784:	2300      	movs	r3, #0
 8004786:	e31f      	b.n	8004dc8 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004788:	88fb      	ldrh	r3, [r7, #6]
 800478a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800478e:	2b00      	cmp	r3, #0
 8004790:	d021      	beq.n	80047d6 <HAL_PCD_EP_DB_Transmit+0x27e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	461a      	mov	r2, r3
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	781b      	ldrb	r3, [r3, #0]
 800479c:	009b      	lsls	r3, r3, #2
 800479e:	4413      	add	r3, r2
 80047a0:	881b      	ldrh	r3, [r3, #0]
 80047a2:	b29b      	uxth	r3, r3
 80047a4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80047a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047ac:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	461a      	mov	r2, r3
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	781b      	ldrb	r3, [r3, #0]
 80047ba:	009b      	lsls	r3, r3, #2
 80047bc:	441a      	add	r2, r3
 80047be:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80047c2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80047c6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80047ca:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80047ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80047d2:	b29b      	uxth	r3, r3
 80047d4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80047dc:	2b01      	cmp	r3, #1
 80047de:	f040 82ca 	bne.w	8004d76 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	695a      	ldr	r2, [r3, #20]
 80047e6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80047ea:	441a      	add	r2, r3
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	69da      	ldr	r2, [r3, #28]
 80047f4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80047f8:	441a      	add	r2, r3
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	6a1a      	ldr	r2, [r3, #32]
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	691b      	ldr	r3, [r3, #16]
 8004806:	429a      	cmp	r2, r3
 8004808:	d309      	bcc.n	800481e <HAL_PCD_EP_DB_Transmit+0x2c6>
        {
          len = ep->maxpacket;
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	691b      	ldr	r3, [r3, #16]
 800480e:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	6a1a      	ldr	r2, [r3, #32]
 8004814:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004816:	1ad2      	subs	r2, r2, r3
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	621a      	str	r2, [r3, #32]
 800481c:	e015      	b.n	800484a <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else if (ep->xfer_len_db == 0U)
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	6a1b      	ldr	r3, [r3, #32]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d107      	bne.n	8004836 <HAL_PCD_EP_DB_Transmit+0x2de>
        {
          len = TxPctSize;
 8004826:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800482a:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	2200      	movs	r2, #0
 8004830:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8004834:	e009      	b.n	800484a <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	2200      	movs	r2, #0
 800483a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	6a1b      	ldr	r3, [r3, #32]
 8004842:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	2200      	movs	r2, #0
 8004848:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	785b      	ldrb	r3, [r3, #1]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d15f      	bne.n	8004912 <HAL_PCD_EP_DB_Transmit+0x3ba>
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	643b      	str	r3, [r7, #64]	@ 0x40
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004860:	b29b      	uxth	r3, r3
 8004862:	461a      	mov	r2, r3
 8004864:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004866:	4413      	add	r3, r2
 8004868:	643b      	str	r3, [r7, #64]	@ 0x40
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	781b      	ldrb	r3, [r3, #0]
 800486e:	00da      	lsls	r2, r3, #3
 8004870:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004872:	4413      	add	r3, r2
 8004874:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004878:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800487a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800487c:	881b      	ldrh	r3, [r3, #0]
 800487e:	b29b      	uxth	r3, r3
 8004880:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004884:	b29a      	uxth	r2, r3
 8004886:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004888:	801a      	strh	r2, [r3, #0]
 800488a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800488c:	2b00      	cmp	r3, #0
 800488e:	d10a      	bne.n	80048a6 <HAL_PCD_EP_DB_Transmit+0x34e>
 8004890:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004892:	881b      	ldrh	r3, [r3, #0]
 8004894:	b29b      	uxth	r3, r3
 8004896:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800489a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800489e:	b29a      	uxth	r2, r3
 80048a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80048a2:	801a      	strh	r2, [r3, #0]
 80048a4:	e051      	b.n	800494a <HAL_PCD_EP_DB_Transmit+0x3f2>
 80048a6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80048a8:	2b3e      	cmp	r3, #62	@ 0x3e
 80048aa:	d816      	bhi.n	80048da <HAL_PCD_EP_DB_Transmit+0x382>
 80048ac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80048ae:	085b      	lsrs	r3, r3, #1
 80048b0:	653b      	str	r3, [r7, #80]	@ 0x50
 80048b2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80048b4:	f003 0301 	and.w	r3, r3, #1
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d002      	beq.n	80048c2 <HAL_PCD_EP_DB_Transmit+0x36a>
 80048bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80048be:	3301      	adds	r3, #1
 80048c0:	653b      	str	r3, [r7, #80]	@ 0x50
 80048c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80048c4:	881b      	ldrh	r3, [r3, #0]
 80048c6:	b29a      	uxth	r2, r3
 80048c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80048ca:	b29b      	uxth	r3, r3
 80048cc:	029b      	lsls	r3, r3, #10
 80048ce:	b29b      	uxth	r3, r3
 80048d0:	4313      	orrs	r3, r2
 80048d2:	b29a      	uxth	r2, r3
 80048d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80048d6:	801a      	strh	r2, [r3, #0]
 80048d8:	e037      	b.n	800494a <HAL_PCD_EP_DB_Transmit+0x3f2>
 80048da:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80048dc:	095b      	lsrs	r3, r3, #5
 80048de:	653b      	str	r3, [r7, #80]	@ 0x50
 80048e0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80048e2:	f003 031f 	and.w	r3, r3, #31
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d102      	bne.n	80048f0 <HAL_PCD_EP_DB_Transmit+0x398>
 80048ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80048ec:	3b01      	subs	r3, #1
 80048ee:	653b      	str	r3, [r7, #80]	@ 0x50
 80048f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80048f2:	881b      	ldrh	r3, [r3, #0]
 80048f4:	b29a      	uxth	r2, r3
 80048f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80048f8:	b29b      	uxth	r3, r3
 80048fa:	029b      	lsls	r3, r3, #10
 80048fc:	b29b      	uxth	r3, r3
 80048fe:	4313      	orrs	r3, r2
 8004900:	b29b      	uxth	r3, r3
 8004902:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004906:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800490a:	b29a      	uxth	r2, r3
 800490c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800490e:	801a      	strh	r2, [r3, #0]
 8004910:	e01b      	b.n	800494a <HAL_PCD_EP_DB_Transmit+0x3f2>
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	785b      	ldrb	r3, [r3, #1]
 8004916:	2b01      	cmp	r3, #1
 8004918:	d117      	bne.n	800494a <HAL_PCD_EP_DB_Transmit+0x3f2>
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004928:	b29b      	uxth	r3, r3
 800492a:	461a      	mov	r2, r3
 800492c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800492e:	4413      	add	r3, r2
 8004930:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	781b      	ldrb	r3, [r3, #0]
 8004936:	00da      	lsls	r2, r3, #3
 8004938:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800493a:	4413      	add	r3, r2
 800493c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004940:	647b      	str	r3, [r7, #68]	@ 0x44
 8004942:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004944:	b29a      	uxth	r2, r3
 8004946:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004948:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	6818      	ldr	r0, [r3, #0]
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	6959      	ldr	r1, [r3, #20]
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	891a      	ldrh	r2, [r3, #8]
 8004956:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004958:	b29b      	uxth	r3, r3
 800495a:	f003 f84a 	bl	80079f2 <USB_WritePMA>
 800495e:	e20a      	b.n	8004d76 <HAL_PCD_EP_DB_Transmit+0x81e>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004968:	b29b      	uxth	r3, r3
 800496a:	461a      	mov	r2, r3
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	781b      	ldrb	r3, [r3, #0]
 8004970:	00db      	lsls	r3, r3, #3
 8004972:	4413      	add	r3, r2
 8004974:	68fa      	ldr	r2, [r7, #12]
 8004976:	6812      	ldr	r2, [r2, #0]
 8004978:	4413      	add	r3, r2
 800497a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800497e:	881b      	ldrh	r3, [r3, #0]
 8004980:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004984:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len >= TxPctSize)
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	699a      	ldr	r2, [r3, #24]
 800498c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004990:	429a      	cmp	r2, r3
 8004992:	d307      	bcc.n	80049a4 <HAL_PCD_EP_DB_Transmit+0x44c>
    {
      ep->xfer_len -= TxPctSize;
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	699a      	ldr	r2, [r3, #24]
 8004998:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800499c:	1ad2      	subs	r2, r2, r3
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	619a      	str	r2, [r3, #24]
 80049a2:	e002      	b.n	80049aa <HAL_PCD_EP_DB_Transmit+0x452>
    }
    else
    {
      ep->xfer_len = 0U;
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	2200      	movs	r2, #0
 80049a8:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	699b      	ldr	r3, [r3, #24]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	f040 80f6 	bne.w	8004ba0 <HAL_PCD_EP_DB_Transmit+0x648>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	785b      	ldrb	r3, [r3, #1]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d126      	bne.n	8004a0a <HAL_PCD_EP_DB_Transmit+0x4b2>
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	677b      	str	r3, [r7, #116]	@ 0x74
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80049ca:	b29b      	uxth	r3, r3
 80049cc:	461a      	mov	r2, r3
 80049ce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80049d0:	4413      	add	r3, r2
 80049d2:	677b      	str	r3, [r7, #116]	@ 0x74
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	781b      	ldrb	r3, [r3, #0]
 80049d8:	00da      	lsls	r2, r3, #3
 80049da:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80049dc:	4413      	add	r3, r2
 80049de:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80049e2:	673b      	str	r3, [r7, #112]	@ 0x70
 80049e4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80049e6:	881b      	ldrh	r3, [r3, #0]
 80049e8:	b29b      	uxth	r3, r3
 80049ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80049ee:	b29a      	uxth	r2, r3
 80049f0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80049f2:	801a      	strh	r2, [r3, #0]
 80049f4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80049f6:	881b      	ldrh	r3, [r3, #0]
 80049f8:	b29b      	uxth	r3, r3
 80049fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a02:	b29a      	uxth	r2, r3
 8004a04:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004a06:	801a      	strh	r2, [r3, #0]
 8004a08:	e01a      	b.n	8004a40 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	785b      	ldrb	r3, [r3, #1]
 8004a0e:	2b01      	cmp	r3, #1
 8004a10:	d116      	bne.n	8004a40 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004a20:	b29b      	uxth	r3, r3
 8004a22:	461a      	mov	r2, r3
 8004a24:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004a26:	4413      	add	r3, r2
 8004a28:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	781b      	ldrb	r3, [r3, #0]
 8004a2e:	00da      	lsls	r2, r3, #3
 8004a30:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004a32:	4413      	add	r3, r2
 8004a34:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004a38:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004a3a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	785b      	ldrb	r3, [r3, #1]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d12f      	bne.n	8004ab0 <HAL_PCD_EP_DB_Transmit+0x558>
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004a60:	b29b      	uxth	r3, r3
 8004a62:	461a      	mov	r2, r3
 8004a64:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004a68:	4413      	add	r3, r2
 8004a6a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	781b      	ldrb	r3, [r3, #0]
 8004a72:	00da      	lsls	r2, r3, #3
 8004a74:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004a78:	4413      	add	r3, r2
 8004a7a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004a7e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004a82:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004a86:	881b      	ldrh	r3, [r3, #0]
 8004a88:	b29b      	uxth	r3, r3
 8004a8a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a8e:	b29a      	uxth	r2, r3
 8004a90:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004a94:	801a      	strh	r2, [r3, #0]
 8004a96:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004a9a:	881b      	ldrh	r3, [r3, #0]
 8004a9c:	b29b      	uxth	r3, r3
 8004a9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004aa2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004aa6:	b29a      	uxth	r2, r3
 8004aa8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004aac:	801a      	strh	r2, [r3, #0]
 8004aae:	e01c      	b.n	8004aea <HAL_PCD_EP_DB_Transmit+0x592>
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	785b      	ldrb	r3, [r3, #1]
 8004ab4:	2b01      	cmp	r3, #1
 8004ab6:	d118      	bne.n	8004aea <HAL_PCD_EP_DB_Transmit+0x592>
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004ac0:	b29b      	uxth	r3, r3
 8004ac2:	461a      	mov	r2, r3
 8004ac4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004ac8:	4413      	add	r3, r2
 8004aca:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	781b      	ldrb	r3, [r3, #0]
 8004ad2:	00da      	lsls	r2, r3, #3
 8004ad4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004ad8:	4413      	add	r3, r2
 8004ada:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004ade:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004ae2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	78db      	ldrb	r3, [r3, #3]
 8004aee:	2b02      	cmp	r3, #2
 8004af0:	d127      	bne.n	8004b42 <HAL_PCD_EP_DB_Transmit+0x5ea>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	461a      	mov	r2, r3
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	781b      	ldrb	r3, [r3, #0]
 8004afc:	009b      	lsls	r3, r3, #2
 8004afe:	4413      	add	r3, r2
 8004b00:	881b      	ldrh	r3, [r3, #0]
 8004b02:	b29b      	uxth	r3, r3
 8004b04:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b08:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b0c:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8004b10:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8004b14:	f083 0320 	eor.w	r3, r3, #32
 8004b18:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	461a      	mov	r2, r3
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	781b      	ldrb	r3, [r3, #0]
 8004b26:	009b      	lsls	r3, r3, #2
 8004b28:	441a      	add	r2, r3
 8004b2a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8004b2e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b32:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b36:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b3e:	b29b      	uxth	r3, r3
 8004b40:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	781b      	ldrb	r3, [r3, #0]
 8004b46:	4619      	mov	r1, r3
 8004b48:	68f8      	ldr	r0, [r7, #12]
 8004b4a:	f7fd feb8 	bl	80028be <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004b4e:	88fb      	ldrh	r3, [r7, #6]
 8004b50:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d121      	bne.n	8004b9c <HAL_PCD_EP_DB_Transmit+0x644>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	461a      	mov	r2, r3
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	781b      	ldrb	r3, [r3, #0]
 8004b62:	009b      	lsls	r3, r3, #2
 8004b64:	4413      	add	r3, r2
 8004b66:	881b      	ldrh	r3, [r3, #0]
 8004b68:	b29b      	uxth	r3, r3
 8004b6a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b72:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	461a      	mov	r2, r3
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	781b      	ldrb	r3, [r3, #0]
 8004b80:	009b      	lsls	r3, r3, #2
 8004b82:	441a      	add	r2, r3
 8004b84:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8004b88:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b8c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b90:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004b94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b98:	b29b      	uxth	r3, r3
 8004b9a:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	e113      	b.n	8004dc8 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004ba0:	88fb      	ldrh	r3, [r7, #6]
 8004ba2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d121      	bne.n	8004bee <HAL_PCD_EP_DB_Transmit+0x696>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	461a      	mov	r2, r3
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	781b      	ldrb	r3, [r3, #0]
 8004bb4:	009b      	lsls	r3, r3, #2
 8004bb6:	4413      	add	r3, r2
 8004bb8:	881b      	ldrh	r3, [r3, #0]
 8004bba:	b29b      	uxth	r3, r3
 8004bbc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004bc0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bc4:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	461a      	mov	r2, r3
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	781b      	ldrb	r3, [r3, #0]
 8004bd2:	009b      	lsls	r3, r3, #2
 8004bd4:	441a      	add	r2, r3
 8004bd6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8004bda:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004bde:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004be2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004be6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004bea:	b29b      	uxth	r3, r3
 8004bec:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004bf4:	2b01      	cmp	r3, #1
 8004bf6:	f040 80be 	bne.w	8004d76 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	695a      	ldr	r2, [r3, #20]
 8004bfe:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004c02:	441a      	add	r2, r3
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	69da      	ldr	r2, [r3, #28]
 8004c0c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004c10:	441a      	add	r2, r3
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	6a1a      	ldr	r2, [r3, #32]
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	691b      	ldr	r3, [r3, #16]
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	d309      	bcc.n	8004c36 <HAL_PCD_EP_DB_Transmit+0x6de>
        {
          len = ep->maxpacket;
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	691b      	ldr	r3, [r3, #16]
 8004c26:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	6a1a      	ldr	r2, [r3, #32]
 8004c2c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004c2e:	1ad2      	subs	r2, r2, r3
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	621a      	str	r2, [r3, #32]
 8004c34:	e015      	b.n	8004c62 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else if (ep->xfer_len_db == 0U)
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	6a1b      	ldr	r3, [r3, #32]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d107      	bne.n	8004c4e <HAL_PCD_EP_DB_Transmit+0x6f6>
        {
          len = TxPctSize;
 8004c3e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004c42:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	2200      	movs	r2, #0
 8004c48:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8004c4c:	e009      	b.n	8004c62 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else
        {
          len = ep->xfer_len_db;
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	6a1b      	ldr	r3, [r3, #32]
 8004c52:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	2200      	movs	r2, #0
 8004c58:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	785b      	ldrb	r3, [r3, #1]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d15f      	bne.n	8004d30 <HAL_PCD_EP_DB_Transmit+0x7d8>
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004c7e:	b29b      	uxth	r3, r3
 8004c80:	461a      	mov	r2, r3
 8004c82:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004c84:	4413      	add	r3, r2
 8004c86:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	781b      	ldrb	r3, [r3, #0]
 8004c8c:	00da      	lsls	r2, r3, #3
 8004c8e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004c90:	4413      	add	r3, r2
 8004c92:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004c96:	667b      	str	r3, [r7, #100]	@ 0x64
 8004c98:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004c9a:	881b      	ldrh	r3, [r3, #0]
 8004c9c:	b29b      	uxth	r3, r3
 8004c9e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ca2:	b29a      	uxth	r2, r3
 8004ca4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004ca6:	801a      	strh	r2, [r3, #0]
 8004ca8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d10a      	bne.n	8004cc4 <HAL_PCD_EP_DB_Transmit+0x76c>
 8004cae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004cb0:	881b      	ldrh	r3, [r3, #0]
 8004cb2:	b29b      	uxth	r3, r3
 8004cb4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004cb8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004cbc:	b29a      	uxth	r2, r3
 8004cbe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004cc0:	801a      	strh	r2, [r3, #0]
 8004cc2:	e04e      	b.n	8004d62 <HAL_PCD_EP_DB_Transmit+0x80a>
 8004cc4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004cc6:	2b3e      	cmp	r3, #62	@ 0x3e
 8004cc8:	d816      	bhi.n	8004cf8 <HAL_PCD_EP_DB_Transmit+0x7a0>
 8004cca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004ccc:	085b      	lsrs	r3, r3, #1
 8004cce:	663b      	str	r3, [r7, #96]	@ 0x60
 8004cd0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004cd2:	f003 0301 	and.w	r3, r3, #1
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d002      	beq.n	8004ce0 <HAL_PCD_EP_DB_Transmit+0x788>
 8004cda:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004cdc:	3301      	adds	r3, #1
 8004cde:	663b      	str	r3, [r7, #96]	@ 0x60
 8004ce0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004ce2:	881b      	ldrh	r3, [r3, #0]
 8004ce4:	b29a      	uxth	r2, r3
 8004ce6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004ce8:	b29b      	uxth	r3, r3
 8004cea:	029b      	lsls	r3, r3, #10
 8004cec:	b29b      	uxth	r3, r3
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	b29a      	uxth	r2, r3
 8004cf2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004cf4:	801a      	strh	r2, [r3, #0]
 8004cf6:	e034      	b.n	8004d62 <HAL_PCD_EP_DB_Transmit+0x80a>
 8004cf8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004cfa:	095b      	lsrs	r3, r3, #5
 8004cfc:	663b      	str	r3, [r7, #96]	@ 0x60
 8004cfe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004d00:	f003 031f 	and.w	r3, r3, #31
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d102      	bne.n	8004d0e <HAL_PCD_EP_DB_Transmit+0x7b6>
 8004d08:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004d0a:	3b01      	subs	r3, #1
 8004d0c:	663b      	str	r3, [r7, #96]	@ 0x60
 8004d0e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004d10:	881b      	ldrh	r3, [r3, #0]
 8004d12:	b29a      	uxth	r2, r3
 8004d14:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004d16:	b29b      	uxth	r3, r3
 8004d18:	029b      	lsls	r3, r3, #10
 8004d1a:	b29b      	uxth	r3, r3
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	b29b      	uxth	r3, r3
 8004d20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d28:	b29a      	uxth	r2, r3
 8004d2a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004d2c:	801a      	strh	r2, [r3, #0]
 8004d2e:	e018      	b.n	8004d62 <HAL_PCD_EP_DB_Transmit+0x80a>
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	785b      	ldrb	r3, [r3, #1]
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	d114      	bne.n	8004d62 <HAL_PCD_EP_DB_Transmit+0x80a>
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004d40:	b29b      	uxth	r3, r3
 8004d42:	461a      	mov	r2, r3
 8004d44:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004d46:	4413      	add	r3, r2
 8004d48:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	781b      	ldrb	r3, [r3, #0]
 8004d4e:	00da      	lsls	r2, r3, #3
 8004d50:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004d52:	4413      	add	r3, r2
 8004d54:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004d58:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004d5a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004d5c:	b29a      	uxth	r2, r3
 8004d5e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004d60:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	6818      	ldr	r0, [r3, #0]
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	6959      	ldr	r1, [r3, #20]
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	895a      	ldrh	r2, [r3, #10]
 8004d6e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004d70:	b29b      	uxth	r3, r3
 8004d72:	f002 fe3e 	bl	80079f2 <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	461a      	mov	r2, r3
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	781b      	ldrb	r3, [r3, #0]
 8004d80:	009b      	lsls	r3, r3, #2
 8004d82:	4413      	add	r3, r2
 8004d84:	881b      	ldrh	r3, [r3, #0]
 8004d86:	b29b      	uxth	r3, r3
 8004d88:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d8c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004d90:	82fb      	strh	r3, [r7, #22]
 8004d92:	8afb      	ldrh	r3, [r7, #22]
 8004d94:	f083 0310 	eor.w	r3, r3, #16
 8004d98:	82fb      	strh	r3, [r7, #22]
 8004d9a:	8afb      	ldrh	r3, [r7, #22]
 8004d9c:	f083 0320 	eor.w	r3, r3, #32
 8004da0:	82fb      	strh	r3, [r7, #22]
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	461a      	mov	r2, r3
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	781b      	ldrb	r3, [r3, #0]
 8004dac:	009b      	lsls	r3, r3, #2
 8004dae:	441a      	add	r2, r3
 8004db0:	8afb      	ldrh	r3, [r7, #22]
 8004db2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004db6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004dba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004dbe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004dc2:	b29b      	uxth	r3, r3
 8004dc4:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004dc6:	2300      	movs	r3, #0
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	3798      	adds	r7, #152	@ 0x98
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}

08004dd0 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b087      	sub	sp, #28
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	60f8      	str	r0, [r7, #12]
 8004dd8:	607b      	str	r3, [r7, #4]
 8004dda:	460b      	mov	r3, r1
 8004ddc:	817b      	strh	r3, [r7, #10]
 8004dde:	4613      	mov	r3, r2
 8004de0:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004de2:	897b      	ldrh	r3, [r7, #10]
 8004de4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004de8:	b29b      	uxth	r3, r3
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d00b      	beq.n	8004e06 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004dee:	897b      	ldrh	r3, [r7, #10]
 8004df0:	f003 0207 	and.w	r2, r3, #7
 8004df4:	4613      	mov	r3, r2
 8004df6:	009b      	lsls	r3, r3, #2
 8004df8:	4413      	add	r3, r2
 8004dfa:	00db      	lsls	r3, r3, #3
 8004dfc:	3310      	adds	r3, #16
 8004dfe:	68fa      	ldr	r2, [r7, #12]
 8004e00:	4413      	add	r3, r2
 8004e02:	617b      	str	r3, [r7, #20]
 8004e04:	e009      	b.n	8004e1a <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004e06:	897a      	ldrh	r2, [r7, #10]
 8004e08:	4613      	mov	r3, r2
 8004e0a:	009b      	lsls	r3, r3, #2
 8004e0c:	4413      	add	r3, r2
 8004e0e:	00db      	lsls	r3, r3, #3
 8004e10:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004e14:	68fa      	ldr	r2, [r7, #12]
 8004e16:	4413      	add	r3, r2
 8004e18:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004e1a:	893b      	ldrh	r3, [r7, #8]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d107      	bne.n	8004e30 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	2200      	movs	r2, #0
 8004e24:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	b29a      	uxth	r2, r3
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	80da      	strh	r2, [r3, #6]
 8004e2e:	e00b      	b.n	8004e48 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	2201      	movs	r2, #1
 8004e34:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	b29a      	uxth	r2, r3
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	0c1b      	lsrs	r3, r3, #16
 8004e42:	b29a      	uxth	r2, r3
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004e48:	2300      	movs	r3, #0
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	371c      	adds	r7, #28
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e54:	4770      	bx	lr

08004e56 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004e56:	b480      	push	{r7}
 8004e58:	b085      	sub	sp, #20
 8004e5a:	af00      	add	r7, sp, #0
 8004e5c:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2201      	movs	r2, #1
 8004e68:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8004e7a:	b29b      	uxth	r3, r3
 8004e7c:	f043 0301 	orr.w	r3, r3, #1
 8004e80:	b29a      	uxth	r2, r3
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8004e8e:	b29b      	uxth	r3, r3
 8004e90:	f043 0302 	orr.w	r3, r3, #2
 8004e94:	b29a      	uxth	r2, r3
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8004e9c:	2300      	movs	r3, #0
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	3714      	adds	r7, #20
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea8:	4770      	bx	lr
	...

08004eac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b085      	sub	sp, #20
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d141      	bne.n	8004f3e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004eba:	4b4b      	ldr	r3, [pc, #300]	@ (8004fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004ec2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ec6:	d131      	bne.n	8004f2c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004ec8:	4b47      	ldr	r3, [pc, #284]	@ (8004fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004eca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004ece:	4a46      	ldr	r2, [pc, #280]	@ (8004fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ed0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004ed4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004ed8:	4b43      	ldr	r3, [pc, #268]	@ (8004fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004ee0:	4a41      	ldr	r2, [pc, #260]	@ (8004fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ee2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004ee6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004ee8:	4b40      	ldr	r3, [pc, #256]	@ (8004fec <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	2232      	movs	r2, #50	@ 0x32
 8004eee:	fb02 f303 	mul.w	r3, r2, r3
 8004ef2:	4a3f      	ldr	r2, [pc, #252]	@ (8004ff0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004ef4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ef8:	0c9b      	lsrs	r3, r3, #18
 8004efa:	3301      	adds	r3, #1
 8004efc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004efe:	e002      	b.n	8004f06 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	3b01      	subs	r3, #1
 8004f04:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004f06:	4b38      	ldr	r3, [pc, #224]	@ (8004fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f08:	695b      	ldr	r3, [r3, #20]
 8004f0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f12:	d102      	bne.n	8004f1a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d1f2      	bne.n	8004f00 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004f1a:	4b33      	ldr	r3, [pc, #204]	@ (8004fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f1c:	695b      	ldr	r3, [r3, #20]
 8004f1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f26:	d158      	bne.n	8004fda <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004f28:	2303      	movs	r3, #3
 8004f2a:	e057      	b.n	8004fdc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004f2c:	4b2e      	ldr	r3, [pc, #184]	@ (8004fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f32:	4a2d      	ldr	r2, [pc, #180]	@ (8004fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f34:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f38:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004f3c:	e04d      	b.n	8004fda <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f44:	d141      	bne.n	8004fca <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004f46:	4b28      	ldr	r3, [pc, #160]	@ (8004fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004f4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f52:	d131      	bne.n	8004fb8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004f54:	4b24      	ldr	r3, [pc, #144]	@ (8004fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f5a:	4a23      	ldr	r2, [pc, #140]	@ (8004fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f60:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004f64:	4b20      	ldr	r3, [pc, #128]	@ (8004fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004f6c:	4a1e      	ldr	r2, [pc, #120]	@ (8004fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f6e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004f72:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004f74:	4b1d      	ldr	r3, [pc, #116]	@ (8004fec <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	2232      	movs	r2, #50	@ 0x32
 8004f7a:	fb02 f303 	mul.w	r3, r2, r3
 8004f7e:	4a1c      	ldr	r2, [pc, #112]	@ (8004ff0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004f80:	fba2 2303 	umull	r2, r3, r2, r3
 8004f84:	0c9b      	lsrs	r3, r3, #18
 8004f86:	3301      	adds	r3, #1
 8004f88:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004f8a:	e002      	b.n	8004f92 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	3b01      	subs	r3, #1
 8004f90:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004f92:	4b15      	ldr	r3, [pc, #84]	@ (8004fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f94:	695b      	ldr	r3, [r3, #20]
 8004f96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f9e:	d102      	bne.n	8004fa6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d1f2      	bne.n	8004f8c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004fa6:	4b10      	ldr	r3, [pc, #64]	@ (8004fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fa8:	695b      	ldr	r3, [r3, #20]
 8004faa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004fae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fb2:	d112      	bne.n	8004fda <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004fb4:	2303      	movs	r3, #3
 8004fb6:	e011      	b.n	8004fdc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004fb8:	4b0b      	ldr	r3, [pc, #44]	@ (8004fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004fbe:	4a0a      	ldr	r2, [pc, #40]	@ (8004fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fc0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004fc4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004fc8:	e007      	b.n	8004fda <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004fca:	4b07      	ldr	r3, [pc, #28]	@ (8004fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004fd2:	4a05      	ldr	r2, [pc, #20]	@ (8004fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fd4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004fd8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004fda:	2300      	movs	r3, #0
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	3714      	adds	r7, #20
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe6:	4770      	bx	lr
 8004fe8:	40007000 	.word	0x40007000
 8004fec:	20000000 	.word	0x20000000
 8004ff0:	431bde83 	.word	0x431bde83

08004ff4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004ff8:	4b05      	ldr	r3, [pc, #20]	@ (8005010 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004ffa:	689b      	ldr	r3, [r3, #8]
 8004ffc:	4a04      	ldr	r2, [pc, #16]	@ (8005010 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004ffe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005002:	6093      	str	r3, [r2, #8]
}
 8005004:	bf00      	nop
 8005006:	46bd      	mov	sp, r7
 8005008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500c:	4770      	bx	lr
 800500e:	bf00      	nop
 8005010:	40007000 	.word	0x40007000

08005014 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b088      	sub	sp, #32
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d101      	bne.n	8005026 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005022:	2301      	movs	r3, #1
 8005024:	e2fe      	b.n	8005624 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f003 0301 	and.w	r3, r3, #1
 800502e:	2b00      	cmp	r3, #0
 8005030:	d075      	beq.n	800511e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005032:	4b97      	ldr	r3, [pc, #604]	@ (8005290 <HAL_RCC_OscConfig+0x27c>)
 8005034:	689b      	ldr	r3, [r3, #8]
 8005036:	f003 030c 	and.w	r3, r3, #12
 800503a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800503c:	4b94      	ldr	r3, [pc, #592]	@ (8005290 <HAL_RCC_OscConfig+0x27c>)
 800503e:	68db      	ldr	r3, [r3, #12]
 8005040:	f003 0303 	and.w	r3, r3, #3
 8005044:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005046:	69bb      	ldr	r3, [r7, #24]
 8005048:	2b0c      	cmp	r3, #12
 800504a:	d102      	bne.n	8005052 <HAL_RCC_OscConfig+0x3e>
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	2b03      	cmp	r3, #3
 8005050:	d002      	beq.n	8005058 <HAL_RCC_OscConfig+0x44>
 8005052:	69bb      	ldr	r3, [r7, #24]
 8005054:	2b08      	cmp	r3, #8
 8005056:	d10b      	bne.n	8005070 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005058:	4b8d      	ldr	r3, [pc, #564]	@ (8005290 <HAL_RCC_OscConfig+0x27c>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005060:	2b00      	cmp	r3, #0
 8005062:	d05b      	beq.n	800511c <HAL_RCC_OscConfig+0x108>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d157      	bne.n	800511c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800506c:	2301      	movs	r3, #1
 800506e:	e2d9      	b.n	8005624 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005078:	d106      	bne.n	8005088 <HAL_RCC_OscConfig+0x74>
 800507a:	4b85      	ldr	r3, [pc, #532]	@ (8005290 <HAL_RCC_OscConfig+0x27c>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a84      	ldr	r2, [pc, #528]	@ (8005290 <HAL_RCC_OscConfig+0x27c>)
 8005080:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005084:	6013      	str	r3, [r2, #0]
 8005086:	e01d      	b.n	80050c4 <HAL_RCC_OscConfig+0xb0>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005090:	d10c      	bne.n	80050ac <HAL_RCC_OscConfig+0x98>
 8005092:	4b7f      	ldr	r3, [pc, #508]	@ (8005290 <HAL_RCC_OscConfig+0x27c>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a7e      	ldr	r2, [pc, #504]	@ (8005290 <HAL_RCC_OscConfig+0x27c>)
 8005098:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800509c:	6013      	str	r3, [r2, #0]
 800509e:	4b7c      	ldr	r3, [pc, #496]	@ (8005290 <HAL_RCC_OscConfig+0x27c>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a7b      	ldr	r2, [pc, #492]	@ (8005290 <HAL_RCC_OscConfig+0x27c>)
 80050a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050a8:	6013      	str	r3, [r2, #0]
 80050aa:	e00b      	b.n	80050c4 <HAL_RCC_OscConfig+0xb0>
 80050ac:	4b78      	ldr	r3, [pc, #480]	@ (8005290 <HAL_RCC_OscConfig+0x27c>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a77      	ldr	r2, [pc, #476]	@ (8005290 <HAL_RCC_OscConfig+0x27c>)
 80050b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80050b6:	6013      	str	r3, [r2, #0]
 80050b8:	4b75      	ldr	r3, [pc, #468]	@ (8005290 <HAL_RCC_OscConfig+0x27c>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a74      	ldr	r2, [pc, #464]	@ (8005290 <HAL_RCC_OscConfig+0x27c>)
 80050be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80050c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d013      	beq.n	80050f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050cc:	f7fd ff1c 	bl	8002f08 <HAL_GetTick>
 80050d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80050d2:	e008      	b.n	80050e6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050d4:	f7fd ff18 	bl	8002f08 <HAL_GetTick>
 80050d8:	4602      	mov	r2, r0
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	1ad3      	subs	r3, r2, r3
 80050de:	2b64      	cmp	r3, #100	@ 0x64
 80050e0:	d901      	bls.n	80050e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80050e2:	2303      	movs	r3, #3
 80050e4:	e29e      	b.n	8005624 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80050e6:	4b6a      	ldr	r3, [pc, #424]	@ (8005290 <HAL_RCC_OscConfig+0x27c>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d0f0      	beq.n	80050d4 <HAL_RCC_OscConfig+0xc0>
 80050f2:	e014      	b.n	800511e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050f4:	f7fd ff08 	bl	8002f08 <HAL_GetTick>
 80050f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80050fa:	e008      	b.n	800510e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050fc:	f7fd ff04 	bl	8002f08 <HAL_GetTick>
 8005100:	4602      	mov	r2, r0
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	1ad3      	subs	r3, r2, r3
 8005106:	2b64      	cmp	r3, #100	@ 0x64
 8005108:	d901      	bls.n	800510e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800510a:	2303      	movs	r3, #3
 800510c:	e28a      	b.n	8005624 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800510e:	4b60      	ldr	r3, [pc, #384]	@ (8005290 <HAL_RCC_OscConfig+0x27c>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005116:	2b00      	cmp	r3, #0
 8005118:	d1f0      	bne.n	80050fc <HAL_RCC_OscConfig+0xe8>
 800511a:	e000      	b.n	800511e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800511c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f003 0302 	and.w	r3, r3, #2
 8005126:	2b00      	cmp	r3, #0
 8005128:	d075      	beq.n	8005216 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800512a:	4b59      	ldr	r3, [pc, #356]	@ (8005290 <HAL_RCC_OscConfig+0x27c>)
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	f003 030c 	and.w	r3, r3, #12
 8005132:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005134:	4b56      	ldr	r3, [pc, #344]	@ (8005290 <HAL_RCC_OscConfig+0x27c>)
 8005136:	68db      	ldr	r3, [r3, #12]
 8005138:	f003 0303 	and.w	r3, r3, #3
 800513c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800513e:	69bb      	ldr	r3, [r7, #24]
 8005140:	2b0c      	cmp	r3, #12
 8005142:	d102      	bne.n	800514a <HAL_RCC_OscConfig+0x136>
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	2b02      	cmp	r3, #2
 8005148:	d002      	beq.n	8005150 <HAL_RCC_OscConfig+0x13c>
 800514a:	69bb      	ldr	r3, [r7, #24]
 800514c:	2b04      	cmp	r3, #4
 800514e:	d11f      	bne.n	8005190 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005150:	4b4f      	ldr	r3, [pc, #316]	@ (8005290 <HAL_RCC_OscConfig+0x27c>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005158:	2b00      	cmp	r3, #0
 800515a:	d005      	beq.n	8005168 <HAL_RCC_OscConfig+0x154>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	68db      	ldr	r3, [r3, #12]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d101      	bne.n	8005168 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005164:	2301      	movs	r3, #1
 8005166:	e25d      	b.n	8005624 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005168:	4b49      	ldr	r3, [pc, #292]	@ (8005290 <HAL_RCC_OscConfig+0x27c>)
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	691b      	ldr	r3, [r3, #16]
 8005174:	061b      	lsls	r3, r3, #24
 8005176:	4946      	ldr	r1, [pc, #280]	@ (8005290 <HAL_RCC_OscConfig+0x27c>)
 8005178:	4313      	orrs	r3, r2
 800517a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800517c:	4b45      	ldr	r3, [pc, #276]	@ (8005294 <HAL_RCC_OscConfig+0x280>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4618      	mov	r0, r3
 8005182:	f7fd fe87 	bl	8002e94 <HAL_InitTick>
 8005186:	4603      	mov	r3, r0
 8005188:	2b00      	cmp	r3, #0
 800518a:	d043      	beq.n	8005214 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800518c:	2301      	movs	r3, #1
 800518e:	e249      	b.n	8005624 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	68db      	ldr	r3, [r3, #12]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d023      	beq.n	80051e0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005198:	4b3d      	ldr	r3, [pc, #244]	@ (8005290 <HAL_RCC_OscConfig+0x27c>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a3c      	ldr	r2, [pc, #240]	@ (8005290 <HAL_RCC_OscConfig+0x27c>)
 800519e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80051a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051a4:	f7fd feb0 	bl	8002f08 <HAL_GetTick>
 80051a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80051aa:	e008      	b.n	80051be <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051ac:	f7fd feac 	bl	8002f08 <HAL_GetTick>
 80051b0:	4602      	mov	r2, r0
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	1ad3      	subs	r3, r2, r3
 80051b6:	2b02      	cmp	r3, #2
 80051b8:	d901      	bls.n	80051be <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80051ba:	2303      	movs	r3, #3
 80051bc:	e232      	b.n	8005624 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80051be:	4b34      	ldr	r3, [pc, #208]	@ (8005290 <HAL_RCC_OscConfig+0x27c>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d0f0      	beq.n	80051ac <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051ca:	4b31      	ldr	r3, [pc, #196]	@ (8005290 <HAL_RCC_OscConfig+0x27c>)
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	691b      	ldr	r3, [r3, #16]
 80051d6:	061b      	lsls	r3, r3, #24
 80051d8:	492d      	ldr	r1, [pc, #180]	@ (8005290 <HAL_RCC_OscConfig+0x27c>)
 80051da:	4313      	orrs	r3, r2
 80051dc:	604b      	str	r3, [r1, #4]
 80051de:	e01a      	b.n	8005216 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80051e0:	4b2b      	ldr	r3, [pc, #172]	@ (8005290 <HAL_RCC_OscConfig+0x27c>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a2a      	ldr	r2, [pc, #168]	@ (8005290 <HAL_RCC_OscConfig+0x27c>)
 80051e6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80051ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051ec:	f7fd fe8c 	bl	8002f08 <HAL_GetTick>
 80051f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80051f2:	e008      	b.n	8005206 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051f4:	f7fd fe88 	bl	8002f08 <HAL_GetTick>
 80051f8:	4602      	mov	r2, r0
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	1ad3      	subs	r3, r2, r3
 80051fe:	2b02      	cmp	r3, #2
 8005200:	d901      	bls.n	8005206 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005202:	2303      	movs	r3, #3
 8005204:	e20e      	b.n	8005624 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005206:	4b22      	ldr	r3, [pc, #136]	@ (8005290 <HAL_RCC_OscConfig+0x27c>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800520e:	2b00      	cmp	r3, #0
 8005210:	d1f0      	bne.n	80051f4 <HAL_RCC_OscConfig+0x1e0>
 8005212:	e000      	b.n	8005216 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005214:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f003 0308 	and.w	r3, r3, #8
 800521e:	2b00      	cmp	r3, #0
 8005220:	d041      	beq.n	80052a6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	695b      	ldr	r3, [r3, #20]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d01c      	beq.n	8005264 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800522a:	4b19      	ldr	r3, [pc, #100]	@ (8005290 <HAL_RCC_OscConfig+0x27c>)
 800522c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005230:	4a17      	ldr	r2, [pc, #92]	@ (8005290 <HAL_RCC_OscConfig+0x27c>)
 8005232:	f043 0301 	orr.w	r3, r3, #1
 8005236:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800523a:	f7fd fe65 	bl	8002f08 <HAL_GetTick>
 800523e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005240:	e008      	b.n	8005254 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005242:	f7fd fe61 	bl	8002f08 <HAL_GetTick>
 8005246:	4602      	mov	r2, r0
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	1ad3      	subs	r3, r2, r3
 800524c:	2b02      	cmp	r3, #2
 800524e:	d901      	bls.n	8005254 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005250:	2303      	movs	r3, #3
 8005252:	e1e7      	b.n	8005624 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005254:	4b0e      	ldr	r3, [pc, #56]	@ (8005290 <HAL_RCC_OscConfig+0x27c>)
 8005256:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800525a:	f003 0302 	and.w	r3, r3, #2
 800525e:	2b00      	cmp	r3, #0
 8005260:	d0ef      	beq.n	8005242 <HAL_RCC_OscConfig+0x22e>
 8005262:	e020      	b.n	80052a6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005264:	4b0a      	ldr	r3, [pc, #40]	@ (8005290 <HAL_RCC_OscConfig+0x27c>)
 8005266:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800526a:	4a09      	ldr	r2, [pc, #36]	@ (8005290 <HAL_RCC_OscConfig+0x27c>)
 800526c:	f023 0301 	bic.w	r3, r3, #1
 8005270:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005274:	f7fd fe48 	bl	8002f08 <HAL_GetTick>
 8005278:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800527a:	e00d      	b.n	8005298 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800527c:	f7fd fe44 	bl	8002f08 <HAL_GetTick>
 8005280:	4602      	mov	r2, r0
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	1ad3      	subs	r3, r2, r3
 8005286:	2b02      	cmp	r3, #2
 8005288:	d906      	bls.n	8005298 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800528a:	2303      	movs	r3, #3
 800528c:	e1ca      	b.n	8005624 <HAL_RCC_OscConfig+0x610>
 800528e:	bf00      	nop
 8005290:	40021000 	.word	0x40021000
 8005294:	20000184 	.word	0x20000184
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005298:	4b8c      	ldr	r3, [pc, #560]	@ (80054cc <HAL_RCC_OscConfig+0x4b8>)
 800529a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800529e:	f003 0302 	and.w	r3, r3, #2
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d1ea      	bne.n	800527c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f003 0304 	and.w	r3, r3, #4
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	f000 80a6 	beq.w	8005400 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80052b4:	2300      	movs	r3, #0
 80052b6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80052b8:	4b84      	ldr	r3, [pc, #528]	@ (80054cc <HAL_RCC_OscConfig+0x4b8>)
 80052ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d101      	bne.n	80052c8 <HAL_RCC_OscConfig+0x2b4>
 80052c4:	2301      	movs	r3, #1
 80052c6:	e000      	b.n	80052ca <HAL_RCC_OscConfig+0x2b6>
 80052c8:	2300      	movs	r3, #0
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d00d      	beq.n	80052ea <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052ce:	4b7f      	ldr	r3, [pc, #508]	@ (80054cc <HAL_RCC_OscConfig+0x4b8>)
 80052d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052d2:	4a7e      	ldr	r2, [pc, #504]	@ (80054cc <HAL_RCC_OscConfig+0x4b8>)
 80052d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80052d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80052da:	4b7c      	ldr	r3, [pc, #496]	@ (80054cc <HAL_RCC_OscConfig+0x4b8>)
 80052dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80052e2:	60fb      	str	r3, [r7, #12]
 80052e4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80052e6:	2301      	movs	r3, #1
 80052e8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80052ea:	4b79      	ldr	r3, [pc, #484]	@ (80054d0 <HAL_RCC_OscConfig+0x4bc>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d118      	bne.n	8005328 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80052f6:	4b76      	ldr	r3, [pc, #472]	@ (80054d0 <HAL_RCC_OscConfig+0x4bc>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a75      	ldr	r2, [pc, #468]	@ (80054d0 <HAL_RCC_OscConfig+0x4bc>)
 80052fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005300:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005302:	f7fd fe01 	bl	8002f08 <HAL_GetTick>
 8005306:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005308:	e008      	b.n	800531c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800530a:	f7fd fdfd 	bl	8002f08 <HAL_GetTick>
 800530e:	4602      	mov	r2, r0
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	1ad3      	subs	r3, r2, r3
 8005314:	2b02      	cmp	r3, #2
 8005316:	d901      	bls.n	800531c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005318:	2303      	movs	r3, #3
 800531a:	e183      	b.n	8005624 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800531c:	4b6c      	ldr	r3, [pc, #432]	@ (80054d0 <HAL_RCC_OscConfig+0x4bc>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005324:	2b00      	cmp	r3, #0
 8005326:	d0f0      	beq.n	800530a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	689b      	ldr	r3, [r3, #8]
 800532c:	2b01      	cmp	r3, #1
 800532e:	d108      	bne.n	8005342 <HAL_RCC_OscConfig+0x32e>
 8005330:	4b66      	ldr	r3, [pc, #408]	@ (80054cc <HAL_RCC_OscConfig+0x4b8>)
 8005332:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005336:	4a65      	ldr	r2, [pc, #404]	@ (80054cc <HAL_RCC_OscConfig+0x4b8>)
 8005338:	f043 0301 	orr.w	r3, r3, #1
 800533c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005340:	e024      	b.n	800538c <HAL_RCC_OscConfig+0x378>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	689b      	ldr	r3, [r3, #8]
 8005346:	2b05      	cmp	r3, #5
 8005348:	d110      	bne.n	800536c <HAL_RCC_OscConfig+0x358>
 800534a:	4b60      	ldr	r3, [pc, #384]	@ (80054cc <HAL_RCC_OscConfig+0x4b8>)
 800534c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005350:	4a5e      	ldr	r2, [pc, #376]	@ (80054cc <HAL_RCC_OscConfig+0x4b8>)
 8005352:	f043 0304 	orr.w	r3, r3, #4
 8005356:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800535a:	4b5c      	ldr	r3, [pc, #368]	@ (80054cc <HAL_RCC_OscConfig+0x4b8>)
 800535c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005360:	4a5a      	ldr	r2, [pc, #360]	@ (80054cc <HAL_RCC_OscConfig+0x4b8>)
 8005362:	f043 0301 	orr.w	r3, r3, #1
 8005366:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800536a:	e00f      	b.n	800538c <HAL_RCC_OscConfig+0x378>
 800536c:	4b57      	ldr	r3, [pc, #348]	@ (80054cc <HAL_RCC_OscConfig+0x4b8>)
 800536e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005372:	4a56      	ldr	r2, [pc, #344]	@ (80054cc <HAL_RCC_OscConfig+0x4b8>)
 8005374:	f023 0301 	bic.w	r3, r3, #1
 8005378:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800537c:	4b53      	ldr	r3, [pc, #332]	@ (80054cc <HAL_RCC_OscConfig+0x4b8>)
 800537e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005382:	4a52      	ldr	r2, [pc, #328]	@ (80054cc <HAL_RCC_OscConfig+0x4b8>)
 8005384:	f023 0304 	bic.w	r3, r3, #4
 8005388:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d016      	beq.n	80053c2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005394:	f7fd fdb8 	bl	8002f08 <HAL_GetTick>
 8005398:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800539a:	e00a      	b.n	80053b2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800539c:	f7fd fdb4 	bl	8002f08 <HAL_GetTick>
 80053a0:	4602      	mov	r2, r0
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	1ad3      	subs	r3, r2, r3
 80053a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d901      	bls.n	80053b2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80053ae:	2303      	movs	r3, #3
 80053b0:	e138      	b.n	8005624 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053b2:	4b46      	ldr	r3, [pc, #280]	@ (80054cc <HAL_RCC_OscConfig+0x4b8>)
 80053b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053b8:	f003 0302 	and.w	r3, r3, #2
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d0ed      	beq.n	800539c <HAL_RCC_OscConfig+0x388>
 80053c0:	e015      	b.n	80053ee <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053c2:	f7fd fda1 	bl	8002f08 <HAL_GetTick>
 80053c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80053c8:	e00a      	b.n	80053e0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053ca:	f7fd fd9d 	bl	8002f08 <HAL_GetTick>
 80053ce:	4602      	mov	r2, r0
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	1ad3      	subs	r3, r2, r3
 80053d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053d8:	4293      	cmp	r3, r2
 80053da:	d901      	bls.n	80053e0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80053dc:	2303      	movs	r3, #3
 80053de:	e121      	b.n	8005624 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80053e0:	4b3a      	ldr	r3, [pc, #232]	@ (80054cc <HAL_RCC_OscConfig+0x4b8>)
 80053e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053e6:	f003 0302 	and.w	r3, r3, #2
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d1ed      	bne.n	80053ca <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80053ee:	7ffb      	ldrb	r3, [r7, #31]
 80053f0:	2b01      	cmp	r3, #1
 80053f2:	d105      	bne.n	8005400 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053f4:	4b35      	ldr	r3, [pc, #212]	@ (80054cc <HAL_RCC_OscConfig+0x4b8>)
 80053f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053f8:	4a34      	ldr	r2, [pc, #208]	@ (80054cc <HAL_RCC_OscConfig+0x4b8>)
 80053fa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80053fe:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f003 0320 	and.w	r3, r3, #32
 8005408:	2b00      	cmp	r3, #0
 800540a:	d03c      	beq.n	8005486 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	699b      	ldr	r3, [r3, #24]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d01c      	beq.n	800544e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005414:	4b2d      	ldr	r3, [pc, #180]	@ (80054cc <HAL_RCC_OscConfig+0x4b8>)
 8005416:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800541a:	4a2c      	ldr	r2, [pc, #176]	@ (80054cc <HAL_RCC_OscConfig+0x4b8>)
 800541c:	f043 0301 	orr.w	r3, r3, #1
 8005420:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005424:	f7fd fd70 	bl	8002f08 <HAL_GetTick>
 8005428:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800542a:	e008      	b.n	800543e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800542c:	f7fd fd6c 	bl	8002f08 <HAL_GetTick>
 8005430:	4602      	mov	r2, r0
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	1ad3      	subs	r3, r2, r3
 8005436:	2b02      	cmp	r3, #2
 8005438:	d901      	bls.n	800543e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800543a:	2303      	movs	r3, #3
 800543c:	e0f2      	b.n	8005624 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800543e:	4b23      	ldr	r3, [pc, #140]	@ (80054cc <HAL_RCC_OscConfig+0x4b8>)
 8005440:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005444:	f003 0302 	and.w	r3, r3, #2
 8005448:	2b00      	cmp	r3, #0
 800544a:	d0ef      	beq.n	800542c <HAL_RCC_OscConfig+0x418>
 800544c:	e01b      	b.n	8005486 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800544e:	4b1f      	ldr	r3, [pc, #124]	@ (80054cc <HAL_RCC_OscConfig+0x4b8>)
 8005450:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005454:	4a1d      	ldr	r2, [pc, #116]	@ (80054cc <HAL_RCC_OscConfig+0x4b8>)
 8005456:	f023 0301 	bic.w	r3, r3, #1
 800545a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800545e:	f7fd fd53 	bl	8002f08 <HAL_GetTick>
 8005462:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005464:	e008      	b.n	8005478 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005466:	f7fd fd4f 	bl	8002f08 <HAL_GetTick>
 800546a:	4602      	mov	r2, r0
 800546c:	693b      	ldr	r3, [r7, #16]
 800546e:	1ad3      	subs	r3, r2, r3
 8005470:	2b02      	cmp	r3, #2
 8005472:	d901      	bls.n	8005478 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005474:	2303      	movs	r3, #3
 8005476:	e0d5      	b.n	8005624 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005478:	4b14      	ldr	r3, [pc, #80]	@ (80054cc <HAL_RCC_OscConfig+0x4b8>)
 800547a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800547e:	f003 0302 	and.w	r3, r3, #2
 8005482:	2b00      	cmp	r3, #0
 8005484:	d1ef      	bne.n	8005466 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	69db      	ldr	r3, [r3, #28]
 800548a:	2b00      	cmp	r3, #0
 800548c:	f000 80c9 	beq.w	8005622 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005490:	4b0e      	ldr	r3, [pc, #56]	@ (80054cc <HAL_RCC_OscConfig+0x4b8>)
 8005492:	689b      	ldr	r3, [r3, #8]
 8005494:	f003 030c 	and.w	r3, r3, #12
 8005498:	2b0c      	cmp	r3, #12
 800549a:	f000 8083 	beq.w	80055a4 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	69db      	ldr	r3, [r3, #28]
 80054a2:	2b02      	cmp	r3, #2
 80054a4:	d15e      	bne.n	8005564 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054a6:	4b09      	ldr	r3, [pc, #36]	@ (80054cc <HAL_RCC_OscConfig+0x4b8>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a08      	ldr	r2, [pc, #32]	@ (80054cc <HAL_RCC_OscConfig+0x4b8>)
 80054ac:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80054b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054b2:	f7fd fd29 	bl	8002f08 <HAL_GetTick>
 80054b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80054b8:	e00c      	b.n	80054d4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054ba:	f7fd fd25 	bl	8002f08 <HAL_GetTick>
 80054be:	4602      	mov	r2, r0
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	1ad3      	subs	r3, r2, r3
 80054c4:	2b02      	cmp	r3, #2
 80054c6:	d905      	bls.n	80054d4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80054c8:	2303      	movs	r3, #3
 80054ca:	e0ab      	b.n	8005624 <HAL_RCC_OscConfig+0x610>
 80054cc:	40021000 	.word	0x40021000
 80054d0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80054d4:	4b55      	ldr	r3, [pc, #340]	@ (800562c <HAL_RCC_OscConfig+0x618>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d1ec      	bne.n	80054ba <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80054e0:	4b52      	ldr	r3, [pc, #328]	@ (800562c <HAL_RCC_OscConfig+0x618>)
 80054e2:	68da      	ldr	r2, [r3, #12]
 80054e4:	4b52      	ldr	r3, [pc, #328]	@ (8005630 <HAL_RCC_OscConfig+0x61c>)
 80054e6:	4013      	ands	r3, r2
 80054e8:	687a      	ldr	r2, [r7, #4]
 80054ea:	6a11      	ldr	r1, [r2, #32]
 80054ec:	687a      	ldr	r2, [r7, #4]
 80054ee:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80054f0:	3a01      	subs	r2, #1
 80054f2:	0112      	lsls	r2, r2, #4
 80054f4:	4311      	orrs	r1, r2
 80054f6:	687a      	ldr	r2, [r7, #4]
 80054f8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80054fa:	0212      	lsls	r2, r2, #8
 80054fc:	4311      	orrs	r1, r2
 80054fe:	687a      	ldr	r2, [r7, #4]
 8005500:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005502:	0852      	lsrs	r2, r2, #1
 8005504:	3a01      	subs	r2, #1
 8005506:	0552      	lsls	r2, r2, #21
 8005508:	4311      	orrs	r1, r2
 800550a:	687a      	ldr	r2, [r7, #4]
 800550c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800550e:	0852      	lsrs	r2, r2, #1
 8005510:	3a01      	subs	r2, #1
 8005512:	0652      	lsls	r2, r2, #25
 8005514:	4311      	orrs	r1, r2
 8005516:	687a      	ldr	r2, [r7, #4]
 8005518:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800551a:	06d2      	lsls	r2, r2, #27
 800551c:	430a      	orrs	r2, r1
 800551e:	4943      	ldr	r1, [pc, #268]	@ (800562c <HAL_RCC_OscConfig+0x618>)
 8005520:	4313      	orrs	r3, r2
 8005522:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005524:	4b41      	ldr	r3, [pc, #260]	@ (800562c <HAL_RCC_OscConfig+0x618>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a40      	ldr	r2, [pc, #256]	@ (800562c <HAL_RCC_OscConfig+0x618>)
 800552a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800552e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005530:	4b3e      	ldr	r3, [pc, #248]	@ (800562c <HAL_RCC_OscConfig+0x618>)
 8005532:	68db      	ldr	r3, [r3, #12]
 8005534:	4a3d      	ldr	r2, [pc, #244]	@ (800562c <HAL_RCC_OscConfig+0x618>)
 8005536:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800553a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800553c:	f7fd fce4 	bl	8002f08 <HAL_GetTick>
 8005540:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005542:	e008      	b.n	8005556 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005544:	f7fd fce0 	bl	8002f08 <HAL_GetTick>
 8005548:	4602      	mov	r2, r0
 800554a:	693b      	ldr	r3, [r7, #16]
 800554c:	1ad3      	subs	r3, r2, r3
 800554e:	2b02      	cmp	r3, #2
 8005550:	d901      	bls.n	8005556 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005552:	2303      	movs	r3, #3
 8005554:	e066      	b.n	8005624 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005556:	4b35      	ldr	r3, [pc, #212]	@ (800562c <HAL_RCC_OscConfig+0x618>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800555e:	2b00      	cmp	r3, #0
 8005560:	d0f0      	beq.n	8005544 <HAL_RCC_OscConfig+0x530>
 8005562:	e05e      	b.n	8005622 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005564:	4b31      	ldr	r3, [pc, #196]	@ (800562c <HAL_RCC_OscConfig+0x618>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a30      	ldr	r2, [pc, #192]	@ (800562c <HAL_RCC_OscConfig+0x618>)
 800556a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800556e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005570:	f7fd fcca 	bl	8002f08 <HAL_GetTick>
 8005574:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005576:	e008      	b.n	800558a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005578:	f7fd fcc6 	bl	8002f08 <HAL_GetTick>
 800557c:	4602      	mov	r2, r0
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	1ad3      	subs	r3, r2, r3
 8005582:	2b02      	cmp	r3, #2
 8005584:	d901      	bls.n	800558a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8005586:	2303      	movs	r3, #3
 8005588:	e04c      	b.n	8005624 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800558a:	4b28      	ldr	r3, [pc, #160]	@ (800562c <HAL_RCC_OscConfig+0x618>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005592:	2b00      	cmp	r3, #0
 8005594:	d1f0      	bne.n	8005578 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005596:	4b25      	ldr	r3, [pc, #148]	@ (800562c <HAL_RCC_OscConfig+0x618>)
 8005598:	68da      	ldr	r2, [r3, #12]
 800559a:	4924      	ldr	r1, [pc, #144]	@ (800562c <HAL_RCC_OscConfig+0x618>)
 800559c:	4b25      	ldr	r3, [pc, #148]	@ (8005634 <HAL_RCC_OscConfig+0x620>)
 800559e:	4013      	ands	r3, r2
 80055a0:	60cb      	str	r3, [r1, #12]
 80055a2:	e03e      	b.n	8005622 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	69db      	ldr	r3, [r3, #28]
 80055a8:	2b01      	cmp	r3, #1
 80055aa:	d101      	bne.n	80055b0 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80055ac:	2301      	movs	r3, #1
 80055ae:	e039      	b.n	8005624 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80055b0:	4b1e      	ldr	r3, [pc, #120]	@ (800562c <HAL_RCC_OscConfig+0x618>)
 80055b2:	68db      	ldr	r3, [r3, #12]
 80055b4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055b6:	697b      	ldr	r3, [r7, #20]
 80055b8:	f003 0203 	and.w	r2, r3, #3
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6a1b      	ldr	r3, [r3, #32]
 80055c0:	429a      	cmp	r2, r3
 80055c2:	d12c      	bne.n	800561e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055ce:	3b01      	subs	r3, #1
 80055d0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055d2:	429a      	cmp	r2, r3
 80055d4:	d123      	bne.n	800561e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055e0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80055e2:	429a      	cmp	r2, r3
 80055e4:	d11b      	bne.n	800561e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055f0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80055f2:	429a      	cmp	r2, r3
 80055f4:	d113      	bne.n	800561e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005600:	085b      	lsrs	r3, r3, #1
 8005602:	3b01      	subs	r3, #1
 8005604:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005606:	429a      	cmp	r2, r3
 8005608:	d109      	bne.n	800561e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005614:	085b      	lsrs	r3, r3, #1
 8005616:	3b01      	subs	r3, #1
 8005618:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800561a:	429a      	cmp	r2, r3
 800561c:	d001      	beq.n	8005622 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800561e:	2301      	movs	r3, #1
 8005620:	e000      	b.n	8005624 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8005622:	2300      	movs	r3, #0
}
 8005624:	4618      	mov	r0, r3
 8005626:	3720      	adds	r7, #32
 8005628:	46bd      	mov	sp, r7
 800562a:	bd80      	pop	{r7, pc}
 800562c:	40021000 	.word	0x40021000
 8005630:	019f800c 	.word	0x019f800c
 8005634:	feeefffc 	.word	0xfeeefffc

08005638 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b086      	sub	sp, #24
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
 8005640:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005642:	2300      	movs	r3, #0
 8005644:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d101      	bne.n	8005650 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800564c:	2301      	movs	r3, #1
 800564e:	e11e      	b.n	800588e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005650:	4b91      	ldr	r3, [pc, #580]	@ (8005898 <HAL_RCC_ClockConfig+0x260>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f003 030f 	and.w	r3, r3, #15
 8005658:	683a      	ldr	r2, [r7, #0]
 800565a:	429a      	cmp	r2, r3
 800565c:	d910      	bls.n	8005680 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800565e:	4b8e      	ldr	r3, [pc, #568]	@ (8005898 <HAL_RCC_ClockConfig+0x260>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f023 020f 	bic.w	r2, r3, #15
 8005666:	498c      	ldr	r1, [pc, #560]	@ (8005898 <HAL_RCC_ClockConfig+0x260>)
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	4313      	orrs	r3, r2
 800566c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800566e:	4b8a      	ldr	r3, [pc, #552]	@ (8005898 <HAL_RCC_ClockConfig+0x260>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f003 030f 	and.w	r3, r3, #15
 8005676:	683a      	ldr	r2, [r7, #0]
 8005678:	429a      	cmp	r2, r3
 800567a:	d001      	beq.n	8005680 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800567c:	2301      	movs	r3, #1
 800567e:	e106      	b.n	800588e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f003 0301 	and.w	r3, r3, #1
 8005688:	2b00      	cmp	r3, #0
 800568a:	d073      	beq.n	8005774 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	2b03      	cmp	r3, #3
 8005692:	d129      	bne.n	80056e8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005694:	4b81      	ldr	r3, [pc, #516]	@ (800589c <HAL_RCC_ClockConfig+0x264>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800569c:	2b00      	cmp	r3, #0
 800569e:	d101      	bne.n	80056a4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80056a0:	2301      	movs	r3, #1
 80056a2:	e0f4      	b.n	800588e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80056a4:	f000 f966 	bl	8005974 <RCC_GetSysClockFreqFromPLLSource>
 80056a8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80056aa:	693b      	ldr	r3, [r7, #16]
 80056ac:	4a7c      	ldr	r2, [pc, #496]	@ (80058a0 <HAL_RCC_ClockConfig+0x268>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d93f      	bls.n	8005732 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80056b2:	4b7a      	ldr	r3, [pc, #488]	@ (800589c <HAL_RCC_ClockConfig+0x264>)
 80056b4:	689b      	ldr	r3, [r3, #8]
 80056b6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d009      	beq.n	80056d2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d033      	beq.n	8005732 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d12f      	bne.n	8005732 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80056d2:	4b72      	ldr	r3, [pc, #456]	@ (800589c <HAL_RCC_ClockConfig+0x264>)
 80056d4:	689b      	ldr	r3, [r3, #8]
 80056d6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80056da:	4a70      	ldr	r2, [pc, #448]	@ (800589c <HAL_RCC_ClockConfig+0x264>)
 80056dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80056e0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80056e2:	2380      	movs	r3, #128	@ 0x80
 80056e4:	617b      	str	r3, [r7, #20]
 80056e6:	e024      	b.n	8005732 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	2b02      	cmp	r3, #2
 80056ee:	d107      	bne.n	8005700 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80056f0:	4b6a      	ldr	r3, [pc, #424]	@ (800589c <HAL_RCC_ClockConfig+0x264>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d109      	bne.n	8005710 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80056fc:	2301      	movs	r3, #1
 80056fe:	e0c6      	b.n	800588e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005700:	4b66      	ldr	r3, [pc, #408]	@ (800589c <HAL_RCC_ClockConfig+0x264>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005708:	2b00      	cmp	r3, #0
 800570a:	d101      	bne.n	8005710 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800570c:	2301      	movs	r3, #1
 800570e:	e0be      	b.n	800588e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005710:	f000 f8ce 	bl	80058b0 <HAL_RCC_GetSysClockFreq>
 8005714:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005716:	693b      	ldr	r3, [r7, #16]
 8005718:	4a61      	ldr	r2, [pc, #388]	@ (80058a0 <HAL_RCC_ClockConfig+0x268>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d909      	bls.n	8005732 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800571e:	4b5f      	ldr	r3, [pc, #380]	@ (800589c <HAL_RCC_ClockConfig+0x264>)
 8005720:	689b      	ldr	r3, [r3, #8]
 8005722:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005726:	4a5d      	ldr	r2, [pc, #372]	@ (800589c <HAL_RCC_ClockConfig+0x264>)
 8005728:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800572c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800572e:	2380      	movs	r3, #128	@ 0x80
 8005730:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005732:	4b5a      	ldr	r3, [pc, #360]	@ (800589c <HAL_RCC_ClockConfig+0x264>)
 8005734:	689b      	ldr	r3, [r3, #8]
 8005736:	f023 0203 	bic.w	r2, r3, #3
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	4957      	ldr	r1, [pc, #348]	@ (800589c <HAL_RCC_ClockConfig+0x264>)
 8005740:	4313      	orrs	r3, r2
 8005742:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005744:	f7fd fbe0 	bl	8002f08 <HAL_GetTick>
 8005748:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800574a:	e00a      	b.n	8005762 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800574c:	f7fd fbdc 	bl	8002f08 <HAL_GetTick>
 8005750:	4602      	mov	r2, r0
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	1ad3      	subs	r3, r2, r3
 8005756:	f241 3288 	movw	r2, #5000	@ 0x1388
 800575a:	4293      	cmp	r3, r2
 800575c:	d901      	bls.n	8005762 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800575e:	2303      	movs	r3, #3
 8005760:	e095      	b.n	800588e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005762:	4b4e      	ldr	r3, [pc, #312]	@ (800589c <HAL_RCC_ClockConfig+0x264>)
 8005764:	689b      	ldr	r3, [r3, #8]
 8005766:	f003 020c 	and.w	r2, r3, #12
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	009b      	lsls	r3, r3, #2
 8005770:	429a      	cmp	r2, r3
 8005772:	d1eb      	bne.n	800574c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f003 0302 	and.w	r3, r3, #2
 800577c:	2b00      	cmp	r3, #0
 800577e:	d023      	beq.n	80057c8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f003 0304 	and.w	r3, r3, #4
 8005788:	2b00      	cmp	r3, #0
 800578a:	d005      	beq.n	8005798 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800578c:	4b43      	ldr	r3, [pc, #268]	@ (800589c <HAL_RCC_ClockConfig+0x264>)
 800578e:	689b      	ldr	r3, [r3, #8]
 8005790:	4a42      	ldr	r2, [pc, #264]	@ (800589c <HAL_RCC_ClockConfig+0x264>)
 8005792:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005796:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f003 0308 	and.w	r3, r3, #8
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d007      	beq.n	80057b4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80057a4:	4b3d      	ldr	r3, [pc, #244]	@ (800589c <HAL_RCC_ClockConfig+0x264>)
 80057a6:	689b      	ldr	r3, [r3, #8]
 80057a8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80057ac:	4a3b      	ldr	r2, [pc, #236]	@ (800589c <HAL_RCC_ClockConfig+0x264>)
 80057ae:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80057b2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80057b4:	4b39      	ldr	r3, [pc, #228]	@ (800589c <HAL_RCC_ClockConfig+0x264>)
 80057b6:	689b      	ldr	r3, [r3, #8]
 80057b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	689b      	ldr	r3, [r3, #8]
 80057c0:	4936      	ldr	r1, [pc, #216]	@ (800589c <HAL_RCC_ClockConfig+0x264>)
 80057c2:	4313      	orrs	r3, r2
 80057c4:	608b      	str	r3, [r1, #8]
 80057c6:	e008      	b.n	80057da <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	2b80      	cmp	r3, #128	@ 0x80
 80057cc:	d105      	bne.n	80057da <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80057ce:	4b33      	ldr	r3, [pc, #204]	@ (800589c <HAL_RCC_ClockConfig+0x264>)
 80057d0:	689b      	ldr	r3, [r3, #8]
 80057d2:	4a32      	ldr	r2, [pc, #200]	@ (800589c <HAL_RCC_ClockConfig+0x264>)
 80057d4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80057d8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80057da:	4b2f      	ldr	r3, [pc, #188]	@ (8005898 <HAL_RCC_ClockConfig+0x260>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f003 030f 	and.w	r3, r3, #15
 80057e2:	683a      	ldr	r2, [r7, #0]
 80057e4:	429a      	cmp	r2, r3
 80057e6:	d21d      	bcs.n	8005824 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057e8:	4b2b      	ldr	r3, [pc, #172]	@ (8005898 <HAL_RCC_ClockConfig+0x260>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f023 020f 	bic.w	r2, r3, #15
 80057f0:	4929      	ldr	r1, [pc, #164]	@ (8005898 <HAL_RCC_ClockConfig+0x260>)
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	4313      	orrs	r3, r2
 80057f6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80057f8:	f7fd fb86 	bl	8002f08 <HAL_GetTick>
 80057fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80057fe:	e00a      	b.n	8005816 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005800:	f7fd fb82 	bl	8002f08 <HAL_GetTick>
 8005804:	4602      	mov	r2, r0
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	1ad3      	subs	r3, r2, r3
 800580a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800580e:	4293      	cmp	r3, r2
 8005810:	d901      	bls.n	8005816 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005812:	2303      	movs	r3, #3
 8005814:	e03b      	b.n	800588e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005816:	4b20      	ldr	r3, [pc, #128]	@ (8005898 <HAL_RCC_ClockConfig+0x260>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f003 030f 	and.w	r3, r3, #15
 800581e:	683a      	ldr	r2, [r7, #0]
 8005820:	429a      	cmp	r2, r3
 8005822:	d1ed      	bne.n	8005800 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f003 0304 	and.w	r3, r3, #4
 800582c:	2b00      	cmp	r3, #0
 800582e:	d008      	beq.n	8005842 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005830:	4b1a      	ldr	r3, [pc, #104]	@ (800589c <HAL_RCC_ClockConfig+0x264>)
 8005832:	689b      	ldr	r3, [r3, #8]
 8005834:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	68db      	ldr	r3, [r3, #12]
 800583c:	4917      	ldr	r1, [pc, #92]	@ (800589c <HAL_RCC_ClockConfig+0x264>)
 800583e:	4313      	orrs	r3, r2
 8005840:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f003 0308 	and.w	r3, r3, #8
 800584a:	2b00      	cmp	r3, #0
 800584c:	d009      	beq.n	8005862 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800584e:	4b13      	ldr	r3, [pc, #76]	@ (800589c <HAL_RCC_ClockConfig+0x264>)
 8005850:	689b      	ldr	r3, [r3, #8]
 8005852:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	691b      	ldr	r3, [r3, #16]
 800585a:	00db      	lsls	r3, r3, #3
 800585c:	490f      	ldr	r1, [pc, #60]	@ (800589c <HAL_RCC_ClockConfig+0x264>)
 800585e:	4313      	orrs	r3, r2
 8005860:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005862:	f000 f825 	bl	80058b0 <HAL_RCC_GetSysClockFreq>
 8005866:	4602      	mov	r2, r0
 8005868:	4b0c      	ldr	r3, [pc, #48]	@ (800589c <HAL_RCC_ClockConfig+0x264>)
 800586a:	689b      	ldr	r3, [r3, #8]
 800586c:	091b      	lsrs	r3, r3, #4
 800586e:	f003 030f 	and.w	r3, r3, #15
 8005872:	490c      	ldr	r1, [pc, #48]	@ (80058a4 <HAL_RCC_ClockConfig+0x26c>)
 8005874:	5ccb      	ldrb	r3, [r1, r3]
 8005876:	f003 031f 	and.w	r3, r3, #31
 800587a:	fa22 f303 	lsr.w	r3, r2, r3
 800587e:	4a0a      	ldr	r2, [pc, #40]	@ (80058a8 <HAL_RCC_ClockConfig+0x270>)
 8005880:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005882:	4b0a      	ldr	r3, [pc, #40]	@ (80058ac <HAL_RCC_ClockConfig+0x274>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4618      	mov	r0, r3
 8005888:	f7fd fb04 	bl	8002e94 <HAL_InitTick>
 800588c:	4603      	mov	r3, r0
}
 800588e:	4618      	mov	r0, r3
 8005890:	3718      	adds	r7, #24
 8005892:	46bd      	mov	sp, r7
 8005894:	bd80      	pop	{r7, pc}
 8005896:	bf00      	nop
 8005898:	40022000 	.word	0x40022000
 800589c:	40021000 	.word	0x40021000
 80058a0:	04c4b400 	.word	0x04c4b400
 80058a4:	08007be8 	.word	0x08007be8
 80058a8:	20000000 	.word	0x20000000
 80058ac:	20000184 	.word	0x20000184

080058b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80058b0:	b480      	push	{r7}
 80058b2:	b087      	sub	sp, #28
 80058b4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80058b6:	4b2c      	ldr	r3, [pc, #176]	@ (8005968 <HAL_RCC_GetSysClockFreq+0xb8>)
 80058b8:	689b      	ldr	r3, [r3, #8]
 80058ba:	f003 030c 	and.w	r3, r3, #12
 80058be:	2b04      	cmp	r3, #4
 80058c0:	d102      	bne.n	80058c8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80058c2:	4b2a      	ldr	r3, [pc, #168]	@ (800596c <HAL_RCC_GetSysClockFreq+0xbc>)
 80058c4:	613b      	str	r3, [r7, #16]
 80058c6:	e047      	b.n	8005958 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80058c8:	4b27      	ldr	r3, [pc, #156]	@ (8005968 <HAL_RCC_GetSysClockFreq+0xb8>)
 80058ca:	689b      	ldr	r3, [r3, #8]
 80058cc:	f003 030c 	and.w	r3, r3, #12
 80058d0:	2b08      	cmp	r3, #8
 80058d2:	d102      	bne.n	80058da <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80058d4:	4b26      	ldr	r3, [pc, #152]	@ (8005970 <HAL_RCC_GetSysClockFreq+0xc0>)
 80058d6:	613b      	str	r3, [r7, #16]
 80058d8:	e03e      	b.n	8005958 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80058da:	4b23      	ldr	r3, [pc, #140]	@ (8005968 <HAL_RCC_GetSysClockFreq+0xb8>)
 80058dc:	689b      	ldr	r3, [r3, #8]
 80058de:	f003 030c 	and.w	r3, r3, #12
 80058e2:	2b0c      	cmp	r3, #12
 80058e4:	d136      	bne.n	8005954 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80058e6:	4b20      	ldr	r3, [pc, #128]	@ (8005968 <HAL_RCC_GetSysClockFreq+0xb8>)
 80058e8:	68db      	ldr	r3, [r3, #12]
 80058ea:	f003 0303 	and.w	r3, r3, #3
 80058ee:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80058f0:	4b1d      	ldr	r3, [pc, #116]	@ (8005968 <HAL_RCC_GetSysClockFreq+0xb8>)
 80058f2:	68db      	ldr	r3, [r3, #12]
 80058f4:	091b      	lsrs	r3, r3, #4
 80058f6:	f003 030f 	and.w	r3, r3, #15
 80058fa:	3301      	adds	r3, #1
 80058fc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	2b03      	cmp	r3, #3
 8005902:	d10c      	bne.n	800591e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005904:	4a1a      	ldr	r2, [pc, #104]	@ (8005970 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	fbb2 f3f3 	udiv	r3, r2, r3
 800590c:	4a16      	ldr	r2, [pc, #88]	@ (8005968 <HAL_RCC_GetSysClockFreq+0xb8>)
 800590e:	68d2      	ldr	r2, [r2, #12]
 8005910:	0a12      	lsrs	r2, r2, #8
 8005912:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005916:	fb02 f303 	mul.w	r3, r2, r3
 800591a:	617b      	str	r3, [r7, #20]
      break;
 800591c:	e00c      	b.n	8005938 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800591e:	4a13      	ldr	r2, [pc, #76]	@ (800596c <HAL_RCC_GetSysClockFreq+0xbc>)
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	fbb2 f3f3 	udiv	r3, r2, r3
 8005926:	4a10      	ldr	r2, [pc, #64]	@ (8005968 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005928:	68d2      	ldr	r2, [r2, #12]
 800592a:	0a12      	lsrs	r2, r2, #8
 800592c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005930:	fb02 f303 	mul.w	r3, r2, r3
 8005934:	617b      	str	r3, [r7, #20]
      break;
 8005936:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005938:	4b0b      	ldr	r3, [pc, #44]	@ (8005968 <HAL_RCC_GetSysClockFreq+0xb8>)
 800593a:	68db      	ldr	r3, [r3, #12]
 800593c:	0e5b      	lsrs	r3, r3, #25
 800593e:	f003 0303 	and.w	r3, r3, #3
 8005942:	3301      	adds	r3, #1
 8005944:	005b      	lsls	r3, r3, #1
 8005946:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005948:	697a      	ldr	r2, [r7, #20]
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005950:	613b      	str	r3, [r7, #16]
 8005952:	e001      	b.n	8005958 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005954:	2300      	movs	r3, #0
 8005956:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005958:	693b      	ldr	r3, [r7, #16]
}
 800595a:	4618      	mov	r0, r3
 800595c:	371c      	adds	r7, #28
 800595e:	46bd      	mov	sp, r7
 8005960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005964:	4770      	bx	lr
 8005966:	bf00      	nop
 8005968:	40021000 	.word	0x40021000
 800596c:	00f42400 	.word	0x00f42400
 8005970:	007a1200 	.word	0x007a1200

08005974 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005974:	b480      	push	{r7}
 8005976:	b087      	sub	sp, #28
 8005978:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800597a:	4b1e      	ldr	r3, [pc, #120]	@ (80059f4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800597c:	68db      	ldr	r3, [r3, #12]
 800597e:	f003 0303 	and.w	r3, r3, #3
 8005982:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005984:	4b1b      	ldr	r3, [pc, #108]	@ (80059f4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005986:	68db      	ldr	r3, [r3, #12]
 8005988:	091b      	lsrs	r3, r3, #4
 800598a:	f003 030f 	and.w	r3, r3, #15
 800598e:	3301      	adds	r3, #1
 8005990:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	2b03      	cmp	r3, #3
 8005996:	d10c      	bne.n	80059b2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005998:	4a17      	ldr	r2, [pc, #92]	@ (80059f8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	fbb2 f3f3 	udiv	r3, r2, r3
 80059a0:	4a14      	ldr	r2, [pc, #80]	@ (80059f4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80059a2:	68d2      	ldr	r2, [r2, #12]
 80059a4:	0a12      	lsrs	r2, r2, #8
 80059a6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80059aa:	fb02 f303 	mul.w	r3, r2, r3
 80059ae:	617b      	str	r3, [r7, #20]
    break;
 80059b0:	e00c      	b.n	80059cc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80059b2:	4a12      	ldr	r2, [pc, #72]	@ (80059fc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80059ba:	4a0e      	ldr	r2, [pc, #56]	@ (80059f4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80059bc:	68d2      	ldr	r2, [r2, #12]
 80059be:	0a12      	lsrs	r2, r2, #8
 80059c0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80059c4:	fb02 f303 	mul.w	r3, r2, r3
 80059c8:	617b      	str	r3, [r7, #20]
    break;
 80059ca:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80059cc:	4b09      	ldr	r3, [pc, #36]	@ (80059f4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80059ce:	68db      	ldr	r3, [r3, #12]
 80059d0:	0e5b      	lsrs	r3, r3, #25
 80059d2:	f003 0303 	and.w	r3, r3, #3
 80059d6:	3301      	adds	r3, #1
 80059d8:	005b      	lsls	r3, r3, #1
 80059da:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80059dc:	697a      	ldr	r2, [r7, #20]
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80059e4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80059e6:	687b      	ldr	r3, [r7, #4]
}
 80059e8:	4618      	mov	r0, r3
 80059ea:	371c      	adds	r7, #28
 80059ec:	46bd      	mov	sp, r7
 80059ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f2:	4770      	bx	lr
 80059f4:	40021000 	.word	0x40021000
 80059f8:	007a1200 	.word	0x007a1200
 80059fc:	00f42400 	.word	0x00f42400

08005a00 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b086      	sub	sp, #24
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005a08:	2300      	movs	r3, #0
 8005a0a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	f000 8098 	beq.w	8005b4e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a1e:	2300      	movs	r3, #0
 8005a20:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a22:	4b43      	ldr	r3, [pc, #268]	@ (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d10d      	bne.n	8005a4a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a2e:	4b40      	ldr	r3, [pc, #256]	@ (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a32:	4a3f      	ldr	r2, [pc, #252]	@ (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a38:	6593      	str	r3, [r2, #88]	@ 0x58
 8005a3a:	4b3d      	ldr	r3, [pc, #244]	@ (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a42:	60bb      	str	r3, [r7, #8]
 8005a44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a46:	2301      	movs	r3, #1
 8005a48:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005a4a:	4b3a      	ldr	r3, [pc, #232]	@ (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4a39      	ldr	r2, [pc, #228]	@ (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005a50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a54:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005a56:	f7fd fa57 	bl	8002f08 <HAL_GetTick>
 8005a5a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005a5c:	e009      	b.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a5e:	f7fd fa53 	bl	8002f08 <HAL_GetTick>
 8005a62:	4602      	mov	r2, r0
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	1ad3      	subs	r3, r2, r3
 8005a68:	2b02      	cmp	r3, #2
 8005a6a:	d902      	bls.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005a6c:	2303      	movs	r3, #3
 8005a6e:	74fb      	strb	r3, [r7, #19]
        break;
 8005a70:	e005      	b.n	8005a7e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005a72:	4b30      	ldr	r3, [pc, #192]	@ (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d0ef      	beq.n	8005a5e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005a7e:	7cfb      	ldrb	r3, [r7, #19]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d159      	bne.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005a84:	4b2a      	ldr	r3, [pc, #168]	@ (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a8e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005a90:	697b      	ldr	r3, [r7, #20]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d01e      	beq.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a9a:	697a      	ldr	r2, [r7, #20]
 8005a9c:	429a      	cmp	r2, r3
 8005a9e:	d019      	beq.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005aa0:	4b23      	ldr	r3, [pc, #140]	@ (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005aa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005aa6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005aaa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005aac:	4b20      	ldr	r3, [pc, #128]	@ (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005aae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ab2:	4a1f      	ldr	r2, [pc, #124]	@ (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ab4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ab8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005abc:	4b1c      	ldr	r3, [pc, #112]	@ (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005abe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ac2:	4a1b      	ldr	r2, [pc, #108]	@ (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ac4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005ac8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005acc:	4a18      	ldr	r2, [pc, #96]	@ (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	f003 0301 	and.w	r3, r3, #1
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d016      	beq.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ade:	f7fd fa13 	bl	8002f08 <HAL_GetTick>
 8005ae2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005ae4:	e00b      	b.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ae6:	f7fd fa0f 	bl	8002f08 <HAL_GetTick>
 8005aea:	4602      	mov	r2, r0
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	1ad3      	subs	r3, r2, r3
 8005af0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d902      	bls.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005af8:	2303      	movs	r3, #3
 8005afa:	74fb      	strb	r3, [r7, #19]
            break;
 8005afc:	e006      	b.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005afe:	4b0c      	ldr	r3, [pc, #48]	@ (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b04:	f003 0302 	and.w	r3, r3, #2
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d0ec      	beq.n	8005ae6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005b0c:	7cfb      	ldrb	r3, [r7, #19]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d10b      	bne.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005b12:	4b07      	ldr	r3, [pc, #28]	@ (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b18:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b20:	4903      	ldr	r1, [pc, #12]	@ (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b22:	4313      	orrs	r3, r2
 8005b24:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005b28:	e008      	b.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005b2a:	7cfb      	ldrb	r3, [r7, #19]
 8005b2c:	74bb      	strb	r3, [r7, #18]
 8005b2e:	e005      	b.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005b30:	40021000 	.word	0x40021000
 8005b34:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b38:	7cfb      	ldrb	r3, [r7, #19]
 8005b3a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005b3c:	7c7b      	ldrb	r3, [r7, #17]
 8005b3e:	2b01      	cmp	r3, #1
 8005b40:	d105      	bne.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b42:	4ba6      	ldr	r3, [pc, #664]	@ (8005ddc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b46:	4aa5      	ldr	r2, [pc, #660]	@ (8005ddc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b48:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005b4c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f003 0301 	and.w	r3, r3, #1
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d00a      	beq.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005b5a:	4ba0      	ldr	r3, [pc, #640]	@ (8005ddc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b60:	f023 0203 	bic.w	r2, r3, #3
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	685b      	ldr	r3, [r3, #4]
 8005b68:	499c      	ldr	r1, [pc, #624]	@ (8005ddc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f003 0302 	and.w	r3, r3, #2
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d00a      	beq.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005b7c:	4b97      	ldr	r3, [pc, #604]	@ (8005ddc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b82:	f023 020c 	bic.w	r2, r3, #12
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	689b      	ldr	r3, [r3, #8]
 8005b8a:	4994      	ldr	r1, [pc, #592]	@ (8005ddc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f003 0304 	and.w	r3, r3, #4
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d00a      	beq.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005b9e:	4b8f      	ldr	r3, [pc, #572]	@ (8005ddc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ba0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ba4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	68db      	ldr	r3, [r3, #12]
 8005bac:	498b      	ldr	r1, [pc, #556]	@ (8005ddc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f003 0308 	and.w	r3, r3, #8
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d00a      	beq.n	8005bd6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005bc0:	4b86      	ldr	r3, [pc, #536]	@ (8005ddc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bc6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	691b      	ldr	r3, [r3, #16]
 8005bce:	4983      	ldr	r1, [pc, #524]	@ (8005ddc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f003 0320 	and.w	r3, r3, #32
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d00a      	beq.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005be2:	4b7e      	ldr	r3, [pc, #504]	@ (8005ddc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005be4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005be8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	695b      	ldr	r3, [r3, #20]
 8005bf0:	497a      	ldr	r1, [pc, #488]	@ (8005ddc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d00a      	beq.n	8005c1a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005c04:	4b75      	ldr	r3, [pc, #468]	@ (8005ddc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c0a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	699b      	ldr	r3, [r3, #24]
 8005c12:	4972      	ldr	r1, [pc, #456]	@ (8005ddc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c14:	4313      	orrs	r3, r2
 8005c16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d00a      	beq.n	8005c3c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005c26:	4b6d      	ldr	r3, [pc, #436]	@ (8005ddc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c2c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	69db      	ldr	r3, [r3, #28]
 8005c34:	4969      	ldr	r1, [pc, #420]	@ (8005ddc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c36:	4313      	orrs	r3, r2
 8005c38:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d00a      	beq.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005c48:	4b64      	ldr	r3, [pc, #400]	@ (8005ddc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c4e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6a1b      	ldr	r3, [r3, #32]
 8005c56:	4961      	ldr	r1, [pc, #388]	@ (8005ddc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d00a      	beq.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005c6a:	4b5c      	ldr	r3, [pc, #368]	@ (8005ddc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c70:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c78:	4958      	ldr	r1, [pc, #352]	@ (8005ddc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d015      	beq.n	8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005c8c:	4b53      	ldr	r3, [pc, #332]	@ (8005ddc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c92:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c9a:	4950      	ldr	r1, [pc, #320]	@ (8005ddc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c9c:	4313      	orrs	r3, r2
 8005c9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ca6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005caa:	d105      	bne.n	8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005cac:	4b4b      	ldr	r3, [pc, #300]	@ (8005ddc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005cae:	68db      	ldr	r3, [r3, #12]
 8005cb0:	4a4a      	ldr	r2, [pc, #296]	@ (8005ddc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005cb2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005cb6:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d015      	beq.n	8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005cc4:	4b45      	ldr	r3, [pc, #276]	@ (8005ddc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cca:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cd2:	4942      	ldr	r1, [pc, #264]	@ (8005ddc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cde:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005ce2:	d105      	bne.n	8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ce4:	4b3d      	ldr	r3, [pc, #244]	@ (8005ddc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ce6:	68db      	ldr	r3, [r3, #12]
 8005ce8:	4a3c      	ldr	r2, [pc, #240]	@ (8005ddc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005cea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005cee:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d015      	beq.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005cfc:	4b37      	ldr	r3, [pc, #220]	@ (8005ddc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d02:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d0a:	4934      	ldr	r1, [pc, #208]	@ (8005ddc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d16:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005d1a:	d105      	bne.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005d1c:	4b2f      	ldr	r3, [pc, #188]	@ (8005ddc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d1e:	68db      	ldr	r3, [r3, #12]
 8005d20:	4a2e      	ldr	r2, [pc, #184]	@ (8005ddc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d22:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005d26:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d015      	beq.n	8005d60 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005d34:	4b29      	ldr	r3, [pc, #164]	@ (8005ddc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d3a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d42:	4926      	ldr	r1, [pc, #152]	@ (8005ddc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d44:	4313      	orrs	r3, r2
 8005d46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d4e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005d52:	d105      	bne.n	8005d60 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005d54:	4b21      	ldr	r3, [pc, #132]	@ (8005ddc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d56:	68db      	ldr	r3, [r3, #12]
 8005d58:	4a20      	ldr	r2, [pc, #128]	@ (8005ddc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d5a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005d5e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d015      	beq.n	8005d98 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005d6c:	4b1b      	ldr	r3, [pc, #108]	@ (8005ddc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d72:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d7a:	4918      	ldr	r1, [pc, #96]	@ (8005ddc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d86:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005d8a:	d105      	bne.n	8005d98 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005d8c:	4b13      	ldr	r3, [pc, #76]	@ (8005ddc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d8e:	68db      	ldr	r3, [r3, #12]
 8005d90:	4a12      	ldr	r2, [pc, #72]	@ (8005ddc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d92:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005d96:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d015      	beq.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005da4:	4b0d      	ldr	r3, [pc, #52]	@ (8005ddc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005daa:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005db2:	490a      	ldr	r1, [pc, #40]	@ (8005ddc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005db4:	4313      	orrs	r3, r2
 8005db6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005dbe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005dc2:	d105      	bne.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005dc4:	4b05      	ldr	r3, [pc, #20]	@ (8005ddc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005dc6:	68db      	ldr	r3, [r3, #12]
 8005dc8:	4a04      	ldr	r2, [pc, #16]	@ (8005ddc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005dca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005dce:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005dd0:	7cbb      	ldrb	r3, [r7, #18]
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	3718      	adds	r7, #24
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}
 8005dda:	bf00      	nop
 8005ddc:	40021000 	.word	0x40021000

08005de0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005de0:	b480      	push	{r7}
 8005de2:	b085      	sub	sp, #20
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2200      	movs	r2, #0
 8005dec:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005df0:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8005df4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	b29a      	uxth	r2, r3
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005e00:	2300      	movs	r3, #0
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	3714      	adds	r7, #20
 8005e06:	46bd      	mov	sp, r7
 8005e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0c:	4770      	bx	lr

08005e0e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005e0e:	b480      	push	{r7}
 8005e10:	b085      	sub	sp, #20
 8005e12:	af00      	add	r7, sp, #0
 8005e14:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005e16:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8005e1a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005e22:	b29a      	uxth	r2, r3
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	b29b      	uxth	r3, r3
 8005e28:	43db      	mvns	r3, r3
 8005e2a:	b29b      	uxth	r3, r3
 8005e2c:	4013      	ands	r3, r2
 8005e2e:	b29a      	uxth	r2, r3
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005e36:	2300      	movs	r3, #0
}
 8005e38:	4618      	mov	r0, r3
 8005e3a:	3714      	adds	r7, #20
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e42:	4770      	bx	lr

08005e44 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b085      	sub	sp, #20
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	60f8      	str	r0, [r7, #12]
 8005e4c:	1d3b      	adds	r3, r7, #4
 8005e4e:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	2201      	movs	r2, #1
 8005e56:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	2200      	movs	r2, #0
 8005e66:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8005e72:	2300      	movs	r3, #0
}
 8005e74:	4618      	mov	r0, r3
 8005e76:	3714      	adds	r7, #20
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7e:	4770      	bx	lr

08005e80 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b0a7      	sub	sp, #156	@ 0x9c
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
 8005e88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005e90:	687a      	ldr	r2, [r7, #4]
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	781b      	ldrb	r3, [r3, #0]
 8005e96:	009b      	lsls	r3, r3, #2
 8005e98:	4413      	add	r3, r2
 8005e9a:	881b      	ldrh	r3, [r3, #0]
 8005e9c:	b29b      	uxth	r3, r3
 8005e9e:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8005ea2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ea6:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

  /* initialize Endpoint */
  switch (ep->type)
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	78db      	ldrb	r3, [r3, #3]
 8005eae:	2b03      	cmp	r3, #3
 8005eb0:	d81f      	bhi.n	8005ef2 <USB_ActivateEndpoint+0x72>
 8005eb2:	a201      	add	r2, pc, #4	@ (adr r2, 8005eb8 <USB_ActivateEndpoint+0x38>)
 8005eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eb8:	08005ec9 	.word	0x08005ec9
 8005ebc:	08005ee5 	.word	0x08005ee5
 8005ec0:	08005efb 	.word	0x08005efb
 8005ec4:	08005ed7 	.word	0x08005ed7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005ec8:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8005ecc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005ed0:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8005ed4:	e012      	b.n	8005efc <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005ed6:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8005eda:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8005ede:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8005ee2:	e00b      	b.n	8005efc <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005ee4:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8005ee8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005eec:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8005ef0:	e004      	b.n	8005efc <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      break;
 8005ef8:	e000      	b.n	8005efc <USB_ActivateEndpoint+0x7c>
      break;
 8005efa:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005efc:	687a      	ldr	r2, [r7, #4]
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	781b      	ldrb	r3, [r3, #0]
 8005f02:	009b      	lsls	r3, r3, #2
 8005f04:	441a      	add	r2, r3
 8005f06:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8005f0a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f0e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f12:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f1a:	b29b      	uxth	r3, r3
 8005f1c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005f1e:	687a      	ldr	r2, [r7, #4]
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	781b      	ldrb	r3, [r3, #0]
 8005f24:	009b      	lsls	r3, r3, #2
 8005f26:	4413      	add	r3, r2
 8005f28:	881b      	ldrh	r3, [r3, #0]
 8005f2a:	b29b      	uxth	r3, r3
 8005f2c:	b21b      	sxth	r3, r3
 8005f2e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f36:	b21a      	sxth	r2, r3
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	781b      	ldrb	r3, [r3, #0]
 8005f3c:	b21b      	sxth	r3, r3
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	b21b      	sxth	r3, r3
 8005f42:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
 8005f46:	687a      	ldr	r2, [r7, #4]
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	781b      	ldrb	r3, [r3, #0]
 8005f4c:	009b      	lsls	r3, r3, #2
 8005f4e:	441a      	add	r2, r3
 8005f50:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005f54:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f58:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f5c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f64:	b29b      	uxth	r3, r3
 8005f66:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	7b1b      	ldrb	r3, [r3, #12]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	f040 8180 	bne.w	8006272 <USB_ActivateEndpoint+0x3f2>
  {
    if (ep->is_in != 0U)
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	785b      	ldrb	r3, [r3, #1]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	f000 8084 	beq.w	8006084 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	61bb      	str	r3, [r7, #24]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005f86:	b29b      	uxth	r3, r3
 8005f88:	461a      	mov	r2, r3
 8005f8a:	69bb      	ldr	r3, [r7, #24]
 8005f8c:	4413      	add	r3, r2
 8005f8e:	61bb      	str	r3, [r7, #24]
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	781b      	ldrb	r3, [r3, #0]
 8005f94:	00da      	lsls	r2, r3, #3
 8005f96:	69bb      	ldr	r3, [r7, #24]
 8005f98:	4413      	add	r3, r2
 8005f9a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005f9e:	617b      	str	r3, [r7, #20]
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	88db      	ldrh	r3, [r3, #6]
 8005fa4:	085b      	lsrs	r3, r3, #1
 8005fa6:	b29b      	uxth	r3, r3
 8005fa8:	005b      	lsls	r3, r3, #1
 8005faa:	b29a      	uxth	r2, r3
 8005fac:	697b      	ldr	r3, [r7, #20]
 8005fae:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005fb0:	687a      	ldr	r2, [r7, #4]
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	781b      	ldrb	r3, [r3, #0]
 8005fb6:	009b      	lsls	r3, r3, #2
 8005fb8:	4413      	add	r3, r2
 8005fba:	881b      	ldrh	r3, [r3, #0]
 8005fbc:	827b      	strh	r3, [r7, #18]
 8005fbe:	8a7b      	ldrh	r3, [r7, #18]
 8005fc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d01b      	beq.n	8006000 <USB_ActivateEndpoint+0x180>
 8005fc8:	687a      	ldr	r2, [r7, #4]
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	781b      	ldrb	r3, [r3, #0]
 8005fce:	009b      	lsls	r3, r3, #2
 8005fd0:	4413      	add	r3, r2
 8005fd2:	881b      	ldrh	r3, [r3, #0]
 8005fd4:	b29b      	uxth	r3, r3
 8005fd6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005fda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fde:	823b      	strh	r3, [r7, #16]
 8005fe0:	687a      	ldr	r2, [r7, #4]
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	781b      	ldrb	r3, [r3, #0]
 8005fe6:	009b      	lsls	r3, r3, #2
 8005fe8:	441a      	add	r2, r3
 8005fea:	8a3b      	ldrh	r3, [r7, #16]
 8005fec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005ff0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005ff4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ff8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005ffc:	b29b      	uxth	r3, r3
 8005ffe:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	78db      	ldrb	r3, [r3, #3]
 8006004:	2b01      	cmp	r3, #1
 8006006:	d020      	beq.n	800604a <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006008:	687a      	ldr	r2, [r7, #4]
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	781b      	ldrb	r3, [r3, #0]
 800600e:	009b      	lsls	r3, r3, #2
 8006010:	4413      	add	r3, r2
 8006012:	881b      	ldrh	r3, [r3, #0]
 8006014:	b29b      	uxth	r3, r3
 8006016:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800601a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800601e:	81bb      	strh	r3, [r7, #12]
 8006020:	89bb      	ldrh	r3, [r7, #12]
 8006022:	f083 0320 	eor.w	r3, r3, #32
 8006026:	81bb      	strh	r3, [r7, #12]
 8006028:	687a      	ldr	r2, [r7, #4]
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	781b      	ldrb	r3, [r3, #0]
 800602e:	009b      	lsls	r3, r3, #2
 8006030:	441a      	add	r2, r3
 8006032:	89bb      	ldrh	r3, [r7, #12]
 8006034:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006038:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800603c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006040:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006044:	b29b      	uxth	r3, r3
 8006046:	8013      	strh	r3, [r2, #0]
 8006048:	e3f9      	b.n	800683e <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800604a:	687a      	ldr	r2, [r7, #4]
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	781b      	ldrb	r3, [r3, #0]
 8006050:	009b      	lsls	r3, r3, #2
 8006052:	4413      	add	r3, r2
 8006054:	881b      	ldrh	r3, [r3, #0]
 8006056:	b29b      	uxth	r3, r3
 8006058:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800605c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006060:	81fb      	strh	r3, [r7, #14]
 8006062:	687a      	ldr	r2, [r7, #4]
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	781b      	ldrb	r3, [r3, #0]
 8006068:	009b      	lsls	r3, r3, #2
 800606a:	441a      	add	r2, r3
 800606c:	89fb      	ldrh	r3, [r7, #14]
 800606e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006072:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006076:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800607a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800607e:	b29b      	uxth	r3, r3
 8006080:	8013      	strh	r3, [r2, #0]
 8006082:	e3dc      	b.n	800683e <USB_ActivateEndpoint+0x9be>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	633b      	str	r3, [r7, #48]	@ 0x30
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800608e:	b29b      	uxth	r3, r3
 8006090:	461a      	mov	r2, r3
 8006092:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006094:	4413      	add	r3, r2
 8006096:	633b      	str	r3, [r7, #48]	@ 0x30
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	781b      	ldrb	r3, [r3, #0]
 800609c:	00da      	lsls	r2, r3, #3
 800609e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060a0:	4413      	add	r3, r2
 80060a2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80060a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	88db      	ldrh	r3, [r3, #6]
 80060ac:	085b      	lsrs	r3, r3, #1
 80060ae:	b29b      	uxth	r3, r3
 80060b0:	005b      	lsls	r3, r3, #1
 80060b2:	b29a      	uxth	r2, r3
 80060b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060b6:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	62bb      	str	r3, [r7, #40]	@ 0x28
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80060c2:	b29b      	uxth	r3, r3
 80060c4:	461a      	mov	r2, r3
 80060c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060c8:	4413      	add	r3, r2
 80060ca:	62bb      	str	r3, [r7, #40]	@ 0x28
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	781b      	ldrb	r3, [r3, #0]
 80060d0:	00da      	lsls	r2, r3, #3
 80060d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060d4:	4413      	add	r3, r2
 80060d6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80060da:	627b      	str	r3, [r7, #36]	@ 0x24
 80060dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060de:	881b      	ldrh	r3, [r3, #0]
 80060e0:	b29b      	uxth	r3, r3
 80060e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80060e6:	b29a      	uxth	r2, r3
 80060e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060ea:	801a      	strh	r2, [r3, #0]
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	691b      	ldr	r3, [r3, #16]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d10a      	bne.n	800610a <USB_ActivateEndpoint+0x28a>
 80060f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060f6:	881b      	ldrh	r3, [r3, #0]
 80060f8:	b29b      	uxth	r3, r3
 80060fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006102:	b29a      	uxth	r2, r3
 8006104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006106:	801a      	strh	r2, [r3, #0]
 8006108:	e041      	b.n	800618e <USB_ActivateEndpoint+0x30e>
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	691b      	ldr	r3, [r3, #16]
 800610e:	2b3e      	cmp	r3, #62	@ 0x3e
 8006110:	d81c      	bhi.n	800614c <USB_ActivateEndpoint+0x2cc>
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	691b      	ldr	r3, [r3, #16]
 8006116:	085b      	lsrs	r3, r3, #1
 8006118:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	691b      	ldr	r3, [r3, #16]
 8006120:	f003 0301 	and.w	r3, r3, #1
 8006124:	2b00      	cmp	r3, #0
 8006126:	d004      	beq.n	8006132 <USB_ActivateEndpoint+0x2b2>
 8006128:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800612c:	3301      	adds	r3, #1
 800612e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006134:	881b      	ldrh	r3, [r3, #0]
 8006136:	b29a      	uxth	r2, r3
 8006138:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800613c:	b29b      	uxth	r3, r3
 800613e:	029b      	lsls	r3, r3, #10
 8006140:	b29b      	uxth	r3, r3
 8006142:	4313      	orrs	r3, r2
 8006144:	b29a      	uxth	r2, r3
 8006146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006148:	801a      	strh	r2, [r3, #0]
 800614a:	e020      	b.n	800618e <USB_ActivateEndpoint+0x30e>
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	691b      	ldr	r3, [r3, #16]
 8006150:	095b      	lsrs	r3, r3, #5
 8006152:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	691b      	ldr	r3, [r3, #16]
 800615a:	f003 031f 	and.w	r3, r3, #31
 800615e:	2b00      	cmp	r3, #0
 8006160:	d104      	bne.n	800616c <USB_ActivateEndpoint+0x2ec>
 8006162:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006166:	3b01      	subs	r3, #1
 8006168:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800616c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800616e:	881b      	ldrh	r3, [r3, #0]
 8006170:	b29a      	uxth	r2, r3
 8006172:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006176:	b29b      	uxth	r3, r3
 8006178:	029b      	lsls	r3, r3, #10
 800617a:	b29b      	uxth	r3, r3
 800617c:	4313      	orrs	r3, r2
 800617e:	b29b      	uxth	r3, r3
 8006180:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006184:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006188:	b29a      	uxth	r2, r3
 800618a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800618c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800618e:	687a      	ldr	r2, [r7, #4]
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	781b      	ldrb	r3, [r3, #0]
 8006194:	009b      	lsls	r3, r3, #2
 8006196:	4413      	add	r3, r2
 8006198:	881b      	ldrh	r3, [r3, #0]
 800619a:	847b      	strh	r3, [r7, #34]	@ 0x22
 800619c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800619e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d01b      	beq.n	80061de <USB_ActivateEndpoint+0x35e>
 80061a6:	687a      	ldr	r2, [r7, #4]
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	781b      	ldrb	r3, [r3, #0]
 80061ac:	009b      	lsls	r3, r3, #2
 80061ae:	4413      	add	r3, r2
 80061b0:	881b      	ldrh	r3, [r3, #0]
 80061b2:	b29b      	uxth	r3, r3
 80061b4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80061b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061bc:	843b      	strh	r3, [r7, #32]
 80061be:	687a      	ldr	r2, [r7, #4]
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	781b      	ldrb	r3, [r3, #0]
 80061c4:	009b      	lsls	r3, r3, #2
 80061c6:	441a      	add	r2, r3
 80061c8:	8c3b      	ldrh	r3, [r7, #32]
 80061ca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80061ce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80061d2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80061d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80061da:	b29b      	uxth	r3, r3
 80061dc:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	781b      	ldrb	r3, [r3, #0]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d124      	bne.n	8006230 <USB_ActivateEndpoint+0x3b0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80061e6:	687a      	ldr	r2, [r7, #4]
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	781b      	ldrb	r3, [r3, #0]
 80061ec:	009b      	lsls	r3, r3, #2
 80061ee:	4413      	add	r3, r2
 80061f0:	881b      	ldrh	r3, [r3, #0]
 80061f2:	b29b      	uxth	r3, r3
 80061f4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80061f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061fc:	83bb      	strh	r3, [r7, #28]
 80061fe:	8bbb      	ldrh	r3, [r7, #28]
 8006200:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006204:	83bb      	strh	r3, [r7, #28]
 8006206:	8bbb      	ldrh	r3, [r7, #28]
 8006208:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800620c:	83bb      	strh	r3, [r7, #28]
 800620e:	687a      	ldr	r2, [r7, #4]
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	781b      	ldrb	r3, [r3, #0]
 8006214:	009b      	lsls	r3, r3, #2
 8006216:	441a      	add	r2, r3
 8006218:	8bbb      	ldrh	r3, [r7, #28]
 800621a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800621e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006222:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006226:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800622a:	b29b      	uxth	r3, r3
 800622c:	8013      	strh	r3, [r2, #0]
 800622e:	e306      	b.n	800683e <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8006230:	687a      	ldr	r2, [r7, #4]
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	781b      	ldrb	r3, [r3, #0]
 8006236:	009b      	lsls	r3, r3, #2
 8006238:	4413      	add	r3, r2
 800623a:	881b      	ldrh	r3, [r3, #0]
 800623c:	b29b      	uxth	r3, r3
 800623e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006242:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006246:	83fb      	strh	r3, [r7, #30]
 8006248:	8bfb      	ldrh	r3, [r7, #30]
 800624a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800624e:	83fb      	strh	r3, [r7, #30]
 8006250:	687a      	ldr	r2, [r7, #4]
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	781b      	ldrb	r3, [r3, #0]
 8006256:	009b      	lsls	r3, r3, #2
 8006258:	441a      	add	r2, r3
 800625a:	8bfb      	ldrh	r3, [r7, #30]
 800625c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006260:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006264:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006268:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800626c:	b29b      	uxth	r3, r3
 800626e:	8013      	strh	r3, [r2, #0]
 8006270:	e2e5      	b.n	800683e <USB_ActivateEndpoint+0x9be>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	78db      	ldrb	r3, [r3, #3]
 8006276:	2b02      	cmp	r3, #2
 8006278:	d11e      	bne.n	80062b8 <USB_ActivateEndpoint+0x438>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800627a:	687a      	ldr	r2, [r7, #4]
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	781b      	ldrb	r3, [r3, #0]
 8006280:	009b      	lsls	r3, r3, #2
 8006282:	4413      	add	r3, r2
 8006284:	881b      	ldrh	r3, [r3, #0]
 8006286:	b29b      	uxth	r3, r3
 8006288:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800628c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006290:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 8006294:	687a      	ldr	r2, [r7, #4]
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	781b      	ldrb	r3, [r3, #0]
 800629a:	009b      	lsls	r3, r3, #2
 800629c:	441a      	add	r2, r3
 800629e:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 80062a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80062a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80062aa:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80062ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80062b2:	b29b      	uxth	r3, r3
 80062b4:	8013      	strh	r3, [r2, #0]
 80062b6:	e01d      	b.n	80062f4 <USB_ActivateEndpoint+0x474>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80062b8:	687a      	ldr	r2, [r7, #4]
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	781b      	ldrb	r3, [r3, #0]
 80062be:	009b      	lsls	r3, r3, #2
 80062c0:	4413      	add	r3, r2
 80062c2:	881b      	ldrh	r3, [r3, #0]
 80062c4:	b29b      	uxth	r3, r3
 80062c6:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80062ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062ce:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
 80062d2:	687a      	ldr	r2, [r7, #4]
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	781b      	ldrb	r3, [r3, #0]
 80062d8:	009b      	lsls	r3, r3, #2
 80062da:	441a      	add	r2, r3
 80062dc:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 80062e0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80062e4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80062e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80062ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80062f0:	b29b      	uxth	r3, r3
 80062f2:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80062fe:	b29b      	uxth	r3, r3
 8006300:	461a      	mov	r2, r3
 8006302:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006304:	4413      	add	r3, r2
 8006306:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	781b      	ldrb	r3, [r3, #0]
 800630c:	00da      	lsls	r2, r3, #3
 800630e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006310:	4413      	add	r3, r2
 8006312:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006316:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	891b      	ldrh	r3, [r3, #8]
 800631c:	085b      	lsrs	r3, r3, #1
 800631e:	b29b      	uxth	r3, r3
 8006320:	005b      	lsls	r3, r3, #1
 8006322:	b29a      	uxth	r2, r3
 8006324:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006326:	801a      	strh	r2, [r3, #0]
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	677b      	str	r3, [r7, #116]	@ 0x74
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006332:	b29b      	uxth	r3, r3
 8006334:	461a      	mov	r2, r3
 8006336:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006338:	4413      	add	r3, r2
 800633a:	677b      	str	r3, [r7, #116]	@ 0x74
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	781b      	ldrb	r3, [r3, #0]
 8006340:	00da      	lsls	r2, r3, #3
 8006342:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006344:	4413      	add	r3, r2
 8006346:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800634a:	673b      	str	r3, [r7, #112]	@ 0x70
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	895b      	ldrh	r3, [r3, #10]
 8006350:	085b      	lsrs	r3, r3, #1
 8006352:	b29b      	uxth	r3, r3
 8006354:	005b      	lsls	r3, r3, #1
 8006356:	b29a      	uxth	r2, r3
 8006358:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800635a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	785b      	ldrb	r3, [r3, #1]
 8006360:	2b00      	cmp	r3, #0
 8006362:	f040 81af 	bne.w	80066c4 <USB_ActivateEndpoint+0x844>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006366:	687a      	ldr	r2, [r7, #4]
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	781b      	ldrb	r3, [r3, #0]
 800636c:	009b      	lsls	r3, r3, #2
 800636e:	4413      	add	r3, r2
 8006370:	881b      	ldrh	r3, [r3, #0]
 8006372:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 8006376:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 800637a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800637e:	2b00      	cmp	r3, #0
 8006380:	d01d      	beq.n	80063be <USB_ActivateEndpoint+0x53e>
 8006382:	687a      	ldr	r2, [r7, #4]
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	781b      	ldrb	r3, [r3, #0]
 8006388:	009b      	lsls	r3, r3, #2
 800638a:	4413      	add	r3, r2
 800638c:	881b      	ldrh	r3, [r3, #0]
 800638e:	b29b      	uxth	r3, r3
 8006390:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006394:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006398:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 800639c:	687a      	ldr	r2, [r7, #4]
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	781b      	ldrb	r3, [r3, #0]
 80063a2:	009b      	lsls	r3, r3, #2
 80063a4:	441a      	add	r2, r3
 80063a6:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 80063aa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80063ae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80063b2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80063b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80063ba:	b29b      	uxth	r3, r3
 80063bc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80063be:	687a      	ldr	r2, [r7, #4]
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	781b      	ldrb	r3, [r3, #0]
 80063c4:	009b      	lsls	r3, r3, #2
 80063c6:	4413      	add	r3, r2
 80063c8:	881b      	ldrh	r3, [r3, #0]
 80063ca:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 80063ce:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 80063d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d01d      	beq.n	8006416 <USB_ActivateEndpoint+0x596>
 80063da:	687a      	ldr	r2, [r7, #4]
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	781b      	ldrb	r3, [r3, #0]
 80063e0:	009b      	lsls	r3, r3, #2
 80063e2:	4413      	add	r3, r2
 80063e4:	881b      	ldrh	r3, [r3, #0]
 80063e6:	b29b      	uxth	r3, r3
 80063e8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80063ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063f0:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 80063f4:	687a      	ldr	r2, [r7, #4]
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	781b      	ldrb	r3, [r3, #0]
 80063fa:	009b      	lsls	r3, r3, #2
 80063fc:	441a      	add	r2, r3
 80063fe:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8006402:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006406:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800640a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800640e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006412:	b29b      	uxth	r3, r3
 8006414:	8013      	strh	r3, [r2, #0]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	785b      	ldrb	r3, [r3, #1]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d16b      	bne.n	80064f6 <USB_ActivateEndpoint+0x676>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006428:	b29b      	uxth	r3, r3
 800642a:	461a      	mov	r2, r3
 800642c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800642e:	4413      	add	r3, r2
 8006430:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	781b      	ldrb	r3, [r3, #0]
 8006436:	00da      	lsls	r2, r3, #3
 8006438:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800643a:	4413      	add	r3, r2
 800643c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006440:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006442:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006444:	881b      	ldrh	r3, [r3, #0]
 8006446:	b29b      	uxth	r3, r3
 8006448:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800644c:	b29a      	uxth	r2, r3
 800644e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006450:	801a      	strh	r2, [r3, #0]
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	691b      	ldr	r3, [r3, #16]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d10a      	bne.n	8006470 <USB_ActivateEndpoint+0x5f0>
 800645a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800645c:	881b      	ldrh	r3, [r3, #0]
 800645e:	b29b      	uxth	r3, r3
 8006460:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006464:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006468:	b29a      	uxth	r2, r3
 800646a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800646c:	801a      	strh	r2, [r3, #0]
 800646e:	e05d      	b.n	800652c <USB_ActivateEndpoint+0x6ac>
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	691b      	ldr	r3, [r3, #16]
 8006474:	2b3e      	cmp	r3, #62	@ 0x3e
 8006476:	d81c      	bhi.n	80064b2 <USB_ActivateEndpoint+0x632>
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	691b      	ldr	r3, [r3, #16]
 800647c:	085b      	lsrs	r3, r3, #1
 800647e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	691b      	ldr	r3, [r3, #16]
 8006486:	f003 0301 	and.w	r3, r3, #1
 800648a:	2b00      	cmp	r3, #0
 800648c:	d004      	beq.n	8006498 <USB_ActivateEndpoint+0x618>
 800648e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006492:	3301      	adds	r3, #1
 8006494:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006498:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800649a:	881b      	ldrh	r3, [r3, #0]
 800649c:	b29a      	uxth	r2, r3
 800649e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80064a2:	b29b      	uxth	r3, r3
 80064a4:	029b      	lsls	r3, r3, #10
 80064a6:	b29b      	uxth	r3, r3
 80064a8:	4313      	orrs	r3, r2
 80064aa:	b29a      	uxth	r2, r3
 80064ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80064ae:	801a      	strh	r2, [r3, #0]
 80064b0:	e03c      	b.n	800652c <USB_ActivateEndpoint+0x6ac>
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	691b      	ldr	r3, [r3, #16]
 80064b6:	095b      	lsrs	r3, r3, #5
 80064b8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	691b      	ldr	r3, [r3, #16]
 80064c0:	f003 031f 	and.w	r3, r3, #31
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d104      	bne.n	80064d2 <USB_ActivateEndpoint+0x652>
 80064c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80064cc:	3b01      	subs	r3, #1
 80064ce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80064d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80064d4:	881b      	ldrh	r3, [r3, #0]
 80064d6:	b29a      	uxth	r2, r3
 80064d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80064dc:	b29b      	uxth	r3, r3
 80064de:	029b      	lsls	r3, r3, #10
 80064e0:	b29b      	uxth	r3, r3
 80064e2:	4313      	orrs	r3, r2
 80064e4:	b29b      	uxth	r3, r3
 80064e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064ee:	b29a      	uxth	r2, r3
 80064f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80064f2:	801a      	strh	r2, [r3, #0]
 80064f4:	e01a      	b.n	800652c <USB_ActivateEndpoint+0x6ac>
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	785b      	ldrb	r3, [r3, #1]
 80064fa:	2b01      	cmp	r3, #1
 80064fc:	d116      	bne.n	800652c <USB_ActivateEndpoint+0x6ac>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	657b      	str	r3, [r7, #84]	@ 0x54
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006508:	b29b      	uxth	r3, r3
 800650a:	461a      	mov	r2, r3
 800650c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800650e:	4413      	add	r3, r2
 8006510:	657b      	str	r3, [r7, #84]	@ 0x54
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	781b      	ldrb	r3, [r3, #0]
 8006516:	00da      	lsls	r2, r3, #3
 8006518:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800651a:	4413      	add	r3, r2
 800651c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006520:	653b      	str	r3, [r7, #80]	@ 0x50
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	691b      	ldr	r3, [r3, #16]
 8006526:	b29a      	uxth	r2, r3
 8006528:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800652a:	801a      	strh	r2, [r3, #0]
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	785b      	ldrb	r3, [r3, #1]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d16b      	bne.n	8006610 <USB_ActivateEndpoint+0x790>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006542:	b29b      	uxth	r3, r3
 8006544:	461a      	mov	r2, r3
 8006546:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006548:	4413      	add	r3, r2
 800654a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	781b      	ldrb	r3, [r3, #0]
 8006550:	00da      	lsls	r2, r3, #3
 8006552:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006554:	4413      	add	r3, r2
 8006556:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800655a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800655c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800655e:	881b      	ldrh	r3, [r3, #0]
 8006560:	b29b      	uxth	r3, r3
 8006562:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006566:	b29a      	uxth	r2, r3
 8006568:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800656a:	801a      	strh	r2, [r3, #0]
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	691b      	ldr	r3, [r3, #16]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d10a      	bne.n	800658a <USB_ActivateEndpoint+0x70a>
 8006574:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006576:	881b      	ldrh	r3, [r3, #0]
 8006578:	b29b      	uxth	r3, r3
 800657a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800657e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006582:	b29a      	uxth	r2, r3
 8006584:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006586:	801a      	strh	r2, [r3, #0]
 8006588:	e05b      	b.n	8006642 <USB_ActivateEndpoint+0x7c2>
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	691b      	ldr	r3, [r3, #16]
 800658e:	2b3e      	cmp	r3, #62	@ 0x3e
 8006590:	d81c      	bhi.n	80065cc <USB_ActivateEndpoint+0x74c>
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	691b      	ldr	r3, [r3, #16]
 8006596:	085b      	lsrs	r3, r3, #1
 8006598:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	691b      	ldr	r3, [r3, #16]
 80065a0:	f003 0301 	and.w	r3, r3, #1
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d004      	beq.n	80065b2 <USB_ActivateEndpoint+0x732>
 80065a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80065ac:	3301      	adds	r3, #1
 80065ae:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80065b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065b4:	881b      	ldrh	r3, [r3, #0]
 80065b6:	b29a      	uxth	r2, r3
 80065b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80065bc:	b29b      	uxth	r3, r3
 80065be:	029b      	lsls	r3, r3, #10
 80065c0:	b29b      	uxth	r3, r3
 80065c2:	4313      	orrs	r3, r2
 80065c4:	b29a      	uxth	r2, r3
 80065c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065c8:	801a      	strh	r2, [r3, #0]
 80065ca:	e03a      	b.n	8006642 <USB_ActivateEndpoint+0x7c2>
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	691b      	ldr	r3, [r3, #16]
 80065d0:	095b      	lsrs	r3, r3, #5
 80065d2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	691b      	ldr	r3, [r3, #16]
 80065da:	f003 031f 	and.w	r3, r3, #31
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d104      	bne.n	80065ec <USB_ActivateEndpoint+0x76c>
 80065e2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80065e6:	3b01      	subs	r3, #1
 80065e8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80065ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065ee:	881b      	ldrh	r3, [r3, #0]
 80065f0:	b29a      	uxth	r2, r3
 80065f2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80065f6:	b29b      	uxth	r3, r3
 80065f8:	029b      	lsls	r3, r3, #10
 80065fa:	b29b      	uxth	r3, r3
 80065fc:	4313      	orrs	r3, r2
 80065fe:	b29b      	uxth	r3, r3
 8006600:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006604:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006608:	b29a      	uxth	r2, r3
 800660a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800660c:	801a      	strh	r2, [r3, #0]
 800660e:	e018      	b.n	8006642 <USB_ActivateEndpoint+0x7c2>
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	785b      	ldrb	r3, [r3, #1]
 8006614:	2b01      	cmp	r3, #1
 8006616:	d114      	bne.n	8006642 <USB_ActivateEndpoint+0x7c2>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800661e:	b29b      	uxth	r3, r3
 8006620:	461a      	mov	r2, r3
 8006622:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006624:	4413      	add	r3, r2
 8006626:	647b      	str	r3, [r7, #68]	@ 0x44
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	781b      	ldrb	r3, [r3, #0]
 800662c:	00da      	lsls	r2, r3, #3
 800662e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006630:	4413      	add	r3, r2
 8006632:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006636:	643b      	str	r3, [r7, #64]	@ 0x40
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	691b      	ldr	r3, [r3, #16]
 800663c:	b29a      	uxth	r2, r3
 800663e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006640:	801a      	strh	r2, [r3, #0]

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006642:	687a      	ldr	r2, [r7, #4]
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	781b      	ldrb	r3, [r3, #0]
 8006648:	009b      	lsls	r3, r3, #2
 800664a:	4413      	add	r3, r2
 800664c:	881b      	ldrh	r3, [r3, #0]
 800664e:	b29b      	uxth	r3, r3
 8006650:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006654:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006658:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800665a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800665c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006660:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8006662:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006664:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006668:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800666a:	687a      	ldr	r2, [r7, #4]
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	781b      	ldrb	r3, [r3, #0]
 8006670:	009b      	lsls	r3, r3, #2
 8006672:	441a      	add	r2, r3
 8006674:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006676:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800667a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800667e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006682:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006686:	b29b      	uxth	r3, r3
 8006688:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800668a:	687a      	ldr	r2, [r7, #4]
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	781b      	ldrb	r3, [r3, #0]
 8006690:	009b      	lsls	r3, r3, #2
 8006692:	4413      	add	r3, r2
 8006694:	881b      	ldrh	r3, [r3, #0]
 8006696:	b29b      	uxth	r3, r3
 8006698:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800669c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80066a0:	86bb      	strh	r3, [r7, #52]	@ 0x34
 80066a2:	687a      	ldr	r2, [r7, #4]
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	781b      	ldrb	r3, [r3, #0]
 80066a8:	009b      	lsls	r3, r3, #2
 80066aa:	441a      	add	r2, r3
 80066ac:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80066ae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80066b2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80066b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80066ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066be:	b29b      	uxth	r3, r3
 80066c0:	8013      	strh	r3, [r2, #0]
 80066c2:	e0bc      	b.n	800683e <USB_ActivateEndpoint+0x9be>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80066c4:	687a      	ldr	r2, [r7, #4]
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	781b      	ldrb	r3, [r3, #0]
 80066ca:	009b      	lsls	r3, r3, #2
 80066cc:	4413      	add	r3, r2
 80066ce:	881b      	ldrh	r3, [r3, #0]
 80066d0:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 80066d4:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80066d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d01d      	beq.n	800671c <USB_ActivateEndpoint+0x89c>
 80066e0:	687a      	ldr	r2, [r7, #4]
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	781b      	ldrb	r3, [r3, #0]
 80066e6:	009b      	lsls	r3, r3, #2
 80066e8:	4413      	add	r3, r2
 80066ea:	881b      	ldrh	r3, [r3, #0]
 80066ec:	b29b      	uxth	r3, r3
 80066ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80066f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066f6:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 80066fa:	687a      	ldr	r2, [r7, #4]
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	781b      	ldrb	r3, [r3, #0]
 8006700:	009b      	lsls	r3, r3, #2
 8006702:	441a      	add	r2, r3
 8006704:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006708:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800670c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006710:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006714:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006718:	b29b      	uxth	r3, r3
 800671a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800671c:	687a      	ldr	r2, [r7, #4]
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	781b      	ldrb	r3, [r3, #0]
 8006722:	009b      	lsls	r3, r3, #2
 8006724:	4413      	add	r3, r2
 8006726:	881b      	ldrh	r3, [r3, #0]
 8006728:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 800672c:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8006730:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006734:	2b00      	cmp	r3, #0
 8006736:	d01d      	beq.n	8006774 <USB_ActivateEndpoint+0x8f4>
 8006738:	687a      	ldr	r2, [r7, #4]
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	781b      	ldrb	r3, [r3, #0]
 800673e:	009b      	lsls	r3, r3, #2
 8006740:	4413      	add	r3, r2
 8006742:	881b      	ldrh	r3, [r3, #0]
 8006744:	b29b      	uxth	r3, r3
 8006746:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800674a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800674e:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 8006752:	687a      	ldr	r2, [r7, #4]
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	781b      	ldrb	r3, [r3, #0]
 8006758:	009b      	lsls	r3, r3, #2
 800675a:	441a      	add	r2, r3
 800675c:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 8006760:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006764:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006768:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800676c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006770:	b29b      	uxth	r3, r3
 8006772:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	78db      	ldrb	r3, [r3, #3]
 8006778:	2b01      	cmp	r3, #1
 800677a:	d024      	beq.n	80067c6 <USB_ActivateEndpoint+0x946>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800677c:	687a      	ldr	r2, [r7, #4]
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	781b      	ldrb	r3, [r3, #0]
 8006782:	009b      	lsls	r3, r3, #2
 8006784:	4413      	add	r3, r2
 8006786:	881b      	ldrh	r3, [r3, #0]
 8006788:	b29b      	uxth	r3, r3
 800678a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800678e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006792:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8006796:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800679a:	f083 0320 	eor.w	r3, r3, #32
 800679e:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 80067a2:	687a      	ldr	r2, [r7, #4]
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	781b      	ldrb	r3, [r3, #0]
 80067a8:	009b      	lsls	r3, r3, #2
 80067aa:	441a      	add	r2, r3
 80067ac:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80067b0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80067b4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80067b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80067bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80067c0:	b29b      	uxth	r3, r3
 80067c2:	8013      	strh	r3, [r2, #0]
 80067c4:	e01d      	b.n	8006802 <USB_ActivateEndpoint+0x982>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80067c6:	687a      	ldr	r2, [r7, #4]
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	781b      	ldrb	r3, [r3, #0]
 80067cc:	009b      	lsls	r3, r3, #2
 80067ce:	4413      	add	r3, r2
 80067d0:	881b      	ldrh	r3, [r3, #0]
 80067d2:	b29b      	uxth	r3, r3
 80067d4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80067d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80067dc:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 80067e0:	687a      	ldr	r2, [r7, #4]
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	781b      	ldrb	r3, [r3, #0]
 80067e6:	009b      	lsls	r3, r3, #2
 80067e8:	441a      	add	r2, r3
 80067ea:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80067ee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80067f2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80067f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80067fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80067fe:	b29b      	uxth	r3, r3
 8006800:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006802:	687a      	ldr	r2, [r7, #4]
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	781b      	ldrb	r3, [r3, #0]
 8006808:	009b      	lsls	r3, r3, #2
 800680a:	4413      	add	r3, r2
 800680c:	881b      	ldrh	r3, [r3, #0]
 800680e:	b29b      	uxth	r3, r3
 8006810:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006814:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006818:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800681c:	687a      	ldr	r2, [r7, #4]
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	781b      	ldrb	r3, [r3, #0]
 8006822:	009b      	lsls	r3, r3, #2
 8006824:	441a      	add	r2, r3
 8006826:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800682a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800682e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006832:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006836:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800683a:	b29b      	uxth	r3, r3
 800683c:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800683e:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 8006842:	4618      	mov	r0, r3
 8006844:	379c      	adds	r7, #156	@ 0x9c
 8006846:	46bd      	mov	sp, r7
 8006848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684c:	4770      	bx	lr
 800684e:	bf00      	nop

08006850 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006850:	b480      	push	{r7}
 8006852:	b08d      	sub	sp, #52	@ 0x34
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
 8006858:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	7b1b      	ldrb	r3, [r3, #12]
 800685e:	2b00      	cmp	r3, #0
 8006860:	f040 808e 	bne.w	8006980 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	785b      	ldrb	r3, [r3, #1]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d044      	beq.n	80068f6 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800686c:	687a      	ldr	r2, [r7, #4]
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	781b      	ldrb	r3, [r3, #0]
 8006872:	009b      	lsls	r3, r3, #2
 8006874:	4413      	add	r3, r2
 8006876:	881b      	ldrh	r3, [r3, #0]
 8006878:	81bb      	strh	r3, [r7, #12]
 800687a:	89bb      	ldrh	r3, [r7, #12]
 800687c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006880:	2b00      	cmp	r3, #0
 8006882:	d01b      	beq.n	80068bc <USB_DeactivateEndpoint+0x6c>
 8006884:	687a      	ldr	r2, [r7, #4]
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	781b      	ldrb	r3, [r3, #0]
 800688a:	009b      	lsls	r3, r3, #2
 800688c:	4413      	add	r3, r2
 800688e:	881b      	ldrh	r3, [r3, #0]
 8006890:	b29b      	uxth	r3, r3
 8006892:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006896:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800689a:	817b      	strh	r3, [r7, #10]
 800689c:	687a      	ldr	r2, [r7, #4]
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	781b      	ldrb	r3, [r3, #0]
 80068a2:	009b      	lsls	r3, r3, #2
 80068a4:	441a      	add	r2, r3
 80068a6:	897b      	ldrh	r3, [r7, #10]
 80068a8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80068ac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80068b0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80068b4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80068b8:	b29b      	uxth	r3, r3
 80068ba:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80068bc:	687a      	ldr	r2, [r7, #4]
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	781b      	ldrb	r3, [r3, #0]
 80068c2:	009b      	lsls	r3, r3, #2
 80068c4:	4413      	add	r3, r2
 80068c6:	881b      	ldrh	r3, [r3, #0]
 80068c8:	b29b      	uxth	r3, r3
 80068ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80068ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80068d2:	813b      	strh	r3, [r7, #8]
 80068d4:	687a      	ldr	r2, [r7, #4]
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	781b      	ldrb	r3, [r3, #0]
 80068da:	009b      	lsls	r3, r3, #2
 80068dc:	441a      	add	r2, r3
 80068de:	893b      	ldrh	r3, [r7, #8]
 80068e0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80068e4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80068e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80068ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80068f0:	b29b      	uxth	r3, r3
 80068f2:	8013      	strh	r3, [r2, #0]
 80068f4:	e192      	b.n	8006c1c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80068f6:	687a      	ldr	r2, [r7, #4]
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	781b      	ldrb	r3, [r3, #0]
 80068fc:	009b      	lsls	r3, r3, #2
 80068fe:	4413      	add	r3, r2
 8006900:	881b      	ldrh	r3, [r3, #0]
 8006902:	827b      	strh	r3, [r7, #18]
 8006904:	8a7b      	ldrh	r3, [r7, #18]
 8006906:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800690a:	2b00      	cmp	r3, #0
 800690c:	d01b      	beq.n	8006946 <USB_DeactivateEndpoint+0xf6>
 800690e:	687a      	ldr	r2, [r7, #4]
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	781b      	ldrb	r3, [r3, #0]
 8006914:	009b      	lsls	r3, r3, #2
 8006916:	4413      	add	r3, r2
 8006918:	881b      	ldrh	r3, [r3, #0]
 800691a:	b29b      	uxth	r3, r3
 800691c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006920:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006924:	823b      	strh	r3, [r7, #16]
 8006926:	687a      	ldr	r2, [r7, #4]
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	781b      	ldrb	r3, [r3, #0]
 800692c:	009b      	lsls	r3, r3, #2
 800692e:	441a      	add	r2, r3
 8006930:	8a3b      	ldrh	r3, [r7, #16]
 8006932:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006936:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800693a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800693e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006942:	b29b      	uxth	r3, r3
 8006944:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006946:	687a      	ldr	r2, [r7, #4]
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	781b      	ldrb	r3, [r3, #0]
 800694c:	009b      	lsls	r3, r3, #2
 800694e:	4413      	add	r3, r2
 8006950:	881b      	ldrh	r3, [r3, #0]
 8006952:	b29b      	uxth	r3, r3
 8006954:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006958:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800695c:	81fb      	strh	r3, [r7, #14]
 800695e:	687a      	ldr	r2, [r7, #4]
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	781b      	ldrb	r3, [r3, #0]
 8006964:	009b      	lsls	r3, r3, #2
 8006966:	441a      	add	r2, r3
 8006968:	89fb      	ldrh	r3, [r7, #14]
 800696a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800696e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006972:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006976:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800697a:	b29b      	uxth	r3, r3
 800697c:	8013      	strh	r3, [r2, #0]
 800697e:	e14d      	b.n	8006c1c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	785b      	ldrb	r3, [r3, #1]
 8006984:	2b00      	cmp	r3, #0
 8006986:	f040 80a5 	bne.w	8006ad4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800698a:	687a      	ldr	r2, [r7, #4]
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	781b      	ldrb	r3, [r3, #0]
 8006990:	009b      	lsls	r3, r3, #2
 8006992:	4413      	add	r3, r2
 8006994:	881b      	ldrh	r3, [r3, #0]
 8006996:	843b      	strh	r3, [r7, #32]
 8006998:	8c3b      	ldrh	r3, [r7, #32]
 800699a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d01b      	beq.n	80069da <USB_DeactivateEndpoint+0x18a>
 80069a2:	687a      	ldr	r2, [r7, #4]
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	781b      	ldrb	r3, [r3, #0]
 80069a8:	009b      	lsls	r3, r3, #2
 80069aa:	4413      	add	r3, r2
 80069ac:	881b      	ldrh	r3, [r3, #0]
 80069ae:	b29b      	uxth	r3, r3
 80069b0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80069b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069b8:	83fb      	strh	r3, [r7, #30]
 80069ba:	687a      	ldr	r2, [r7, #4]
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	781b      	ldrb	r3, [r3, #0]
 80069c0:	009b      	lsls	r3, r3, #2
 80069c2:	441a      	add	r2, r3
 80069c4:	8bfb      	ldrh	r3, [r7, #30]
 80069c6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80069ca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80069ce:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80069d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80069d6:	b29b      	uxth	r3, r3
 80069d8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80069da:	687a      	ldr	r2, [r7, #4]
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	781b      	ldrb	r3, [r3, #0]
 80069e0:	009b      	lsls	r3, r3, #2
 80069e2:	4413      	add	r3, r2
 80069e4:	881b      	ldrh	r3, [r3, #0]
 80069e6:	83bb      	strh	r3, [r7, #28]
 80069e8:	8bbb      	ldrh	r3, [r7, #28]
 80069ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d01b      	beq.n	8006a2a <USB_DeactivateEndpoint+0x1da>
 80069f2:	687a      	ldr	r2, [r7, #4]
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	781b      	ldrb	r3, [r3, #0]
 80069f8:	009b      	lsls	r3, r3, #2
 80069fa:	4413      	add	r3, r2
 80069fc:	881b      	ldrh	r3, [r3, #0]
 80069fe:	b29b      	uxth	r3, r3
 8006a00:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a04:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a08:	837b      	strh	r3, [r7, #26]
 8006a0a:	687a      	ldr	r2, [r7, #4]
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	781b      	ldrb	r3, [r3, #0]
 8006a10:	009b      	lsls	r3, r3, #2
 8006a12:	441a      	add	r2, r3
 8006a14:	8b7b      	ldrh	r3, [r7, #26]
 8006a16:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a1a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a1e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a22:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006a26:	b29b      	uxth	r3, r3
 8006a28:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006a2a:	687a      	ldr	r2, [r7, #4]
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	781b      	ldrb	r3, [r3, #0]
 8006a30:	009b      	lsls	r3, r3, #2
 8006a32:	4413      	add	r3, r2
 8006a34:	881b      	ldrh	r3, [r3, #0]
 8006a36:	b29b      	uxth	r3, r3
 8006a38:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a3c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a40:	833b      	strh	r3, [r7, #24]
 8006a42:	687a      	ldr	r2, [r7, #4]
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	781b      	ldrb	r3, [r3, #0]
 8006a48:	009b      	lsls	r3, r3, #2
 8006a4a:	441a      	add	r2, r3
 8006a4c:	8b3b      	ldrh	r3, [r7, #24]
 8006a4e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a52:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a56:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a5a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006a5e:	b29b      	uxth	r3, r3
 8006a60:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006a62:	687a      	ldr	r2, [r7, #4]
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	781b      	ldrb	r3, [r3, #0]
 8006a68:	009b      	lsls	r3, r3, #2
 8006a6a:	4413      	add	r3, r2
 8006a6c:	881b      	ldrh	r3, [r3, #0]
 8006a6e:	b29b      	uxth	r3, r3
 8006a70:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006a74:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a78:	82fb      	strh	r3, [r7, #22]
 8006a7a:	687a      	ldr	r2, [r7, #4]
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	781b      	ldrb	r3, [r3, #0]
 8006a80:	009b      	lsls	r3, r3, #2
 8006a82:	441a      	add	r2, r3
 8006a84:	8afb      	ldrh	r3, [r7, #22]
 8006a86:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a8a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a8e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a96:	b29b      	uxth	r3, r3
 8006a98:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006a9a:	687a      	ldr	r2, [r7, #4]
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	781b      	ldrb	r3, [r3, #0]
 8006aa0:	009b      	lsls	r3, r3, #2
 8006aa2:	4413      	add	r3, r2
 8006aa4:	881b      	ldrh	r3, [r3, #0]
 8006aa6:	b29b      	uxth	r3, r3
 8006aa8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006aac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006ab0:	82bb      	strh	r3, [r7, #20]
 8006ab2:	687a      	ldr	r2, [r7, #4]
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	781b      	ldrb	r3, [r3, #0]
 8006ab8:	009b      	lsls	r3, r3, #2
 8006aba:	441a      	add	r2, r3
 8006abc:	8abb      	ldrh	r3, [r7, #20]
 8006abe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ac2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ac6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006aca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ace:	b29b      	uxth	r3, r3
 8006ad0:	8013      	strh	r3, [r2, #0]
 8006ad2:	e0a3      	b.n	8006c1c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006ad4:	687a      	ldr	r2, [r7, #4]
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	781b      	ldrb	r3, [r3, #0]
 8006ada:	009b      	lsls	r3, r3, #2
 8006adc:	4413      	add	r3, r2
 8006ade:	881b      	ldrh	r3, [r3, #0]
 8006ae0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8006ae2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8006ae4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d01b      	beq.n	8006b24 <USB_DeactivateEndpoint+0x2d4>
 8006aec:	687a      	ldr	r2, [r7, #4]
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	781b      	ldrb	r3, [r3, #0]
 8006af2:	009b      	lsls	r3, r3, #2
 8006af4:	4413      	add	r3, r2
 8006af6:	881b      	ldrh	r3, [r3, #0]
 8006af8:	b29b      	uxth	r3, r3
 8006afa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006afe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b02:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8006b04:	687a      	ldr	r2, [r7, #4]
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	781b      	ldrb	r3, [r3, #0]
 8006b0a:	009b      	lsls	r3, r3, #2
 8006b0c:	441a      	add	r2, r3
 8006b0e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006b10:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b14:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b18:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006b1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b20:	b29b      	uxth	r3, r3
 8006b22:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006b24:	687a      	ldr	r2, [r7, #4]
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	781b      	ldrb	r3, [r3, #0]
 8006b2a:	009b      	lsls	r3, r3, #2
 8006b2c:	4413      	add	r3, r2
 8006b2e:	881b      	ldrh	r3, [r3, #0]
 8006b30:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8006b32:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006b34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d01b      	beq.n	8006b74 <USB_DeactivateEndpoint+0x324>
 8006b3c:	687a      	ldr	r2, [r7, #4]
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	781b      	ldrb	r3, [r3, #0]
 8006b42:	009b      	lsls	r3, r3, #2
 8006b44:	4413      	add	r3, r2
 8006b46:	881b      	ldrh	r3, [r3, #0]
 8006b48:	b29b      	uxth	r3, r3
 8006b4a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b52:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006b54:	687a      	ldr	r2, [r7, #4]
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	781b      	ldrb	r3, [r3, #0]
 8006b5a:	009b      	lsls	r3, r3, #2
 8006b5c:	441a      	add	r2, r3
 8006b5e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006b60:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b64:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b68:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b6c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006b70:	b29b      	uxth	r3, r3
 8006b72:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006b74:	687a      	ldr	r2, [r7, #4]
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	781b      	ldrb	r3, [r3, #0]
 8006b7a:	009b      	lsls	r3, r3, #2
 8006b7c:	4413      	add	r3, r2
 8006b7e:	881b      	ldrh	r3, [r3, #0]
 8006b80:	b29b      	uxth	r3, r3
 8006b82:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b8a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8006b8c:	687a      	ldr	r2, [r7, #4]
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	781b      	ldrb	r3, [r3, #0]
 8006b92:	009b      	lsls	r3, r3, #2
 8006b94:	441a      	add	r2, r3
 8006b96:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006b98:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b9c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ba0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006ba4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ba8:	b29b      	uxth	r3, r3
 8006baa:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006bac:	687a      	ldr	r2, [r7, #4]
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	781b      	ldrb	r3, [r3, #0]
 8006bb2:	009b      	lsls	r3, r3, #2
 8006bb4:	4413      	add	r3, r2
 8006bb6:	881b      	ldrh	r3, [r3, #0]
 8006bb8:	b29b      	uxth	r3, r3
 8006bba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006bbe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006bc2:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8006bc4:	687a      	ldr	r2, [r7, #4]
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	781b      	ldrb	r3, [r3, #0]
 8006bca:	009b      	lsls	r3, r3, #2
 8006bcc:	441a      	add	r2, r3
 8006bce:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006bd0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006bd4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006bd8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006bdc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006be0:	b29b      	uxth	r3, r3
 8006be2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006be4:	687a      	ldr	r2, [r7, #4]
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	781b      	ldrb	r3, [r3, #0]
 8006bea:	009b      	lsls	r3, r3, #2
 8006bec:	4413      	add	r3, r2
 8006bee:	881b      	ldrh	r3, [r3, #0]
 8006bf0:	b29b      	uxth	r3, r3
 8006bf2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006bf6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bfa:	847b      	strh	r3, [r7, #34]	@ 0x22
 8006bfc:	687a      	ldr	r2, [r7, #4]
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	781b      	ldrb	r3, [r3, #0]
 8006c02:	009b      	lsls	r3, r3, #2
 8006c04:	441a      	add	r2, r3
 8006c06:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006c08:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c0c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c10:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c18:	b29b      	uxth	r3, r3
 8006c1a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006c1c:	2300      	movs	r3, #0
}
 8006c1e:	4618      	mov	r0, r3
 8006c20:	3734      	adds	r7, #52	@ 0x34
 8006c22:	46bd      	mov	sp, r7
 8006c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c28:	4770      	bx	lr

08006c2a <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006c2a:	b580      	push	{r7, lr}
 8006c2c:	b0ac      	sub	sp, #176	@ 0xb0
 8006c2e:	af00      	add	r7, sp, #0
 8006c30:	6078      	str	r0, [r7, #4]
 8006c32:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	785b      	ldrb	r3, [r3, #1]
 8006c38:	2b01      	cmp	r3, #1
 8006c3a:	f040 84ca 	bne.w	80075d2 <USB_EPStartXfer+0x9a8>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	699a      	ldr	r2, [r3, #24]
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	691b      	ldr	r3, [r3, #16]
 8006c46:	429a      	cmp	r2, r3
 8006c48:	d904      	bls.n	8006c54 <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	691b      	ldr	r3, [r3, #16]
 8006c4e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006c52:	e003      	b.n	8006c5c <USB_EPStartXfer+0x32>
    }
    else
    {
      len = ep->xfer_len;
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	699b      	ldr	r3, [r3, #24]
 8006c58:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	7b1b      	ldrb	r3, [r3, #12]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d122      	bne.n	8006caa <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	6959      	ldr	r1, [r3, #20]
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	88da      	ldrh	r2, [r3, #6]
 8006c6c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006c70:	b29b      	uxth	r3, r3
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f000 febd 	bl	80079f2 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	613b      	str	r3, [r7, #16]
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006c82:	b29b      	uxth	r3, r3
 8006c84:	461a      	mov	r2, r3
 8006c86:	693b      	ldr	r3, [r7, #16]
 8006c88:	4413      	add	r3, r2
 8006c8a:	613b      	str	r3, [r7, #16]
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	781b      	ldrb	r3, [r3, #0]
 8006c90:	00da      	lsls	r2, r3, #3
 8006c92:	693b      	ldr	r3, [r7, #16]
 8006c94:	4413      	add	r3, r2
 8006c96:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006c9a:	60fb      	str	r3, [r7, #12]
 8006c9c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006ca0:	b29a      	uxth	r2, r3
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	801a      	strh	r2, [r3, #0]
 8006ca6:	f000 bc6f 	b.w	8007588 <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	78db      	ldrb	r3, [r3, #3]
 8006cae:	2b02      	cmp	r3, #2
 8006cb0:	f040 831e 	bne.w	80072f0 <USB_EPStartXfer+0x6c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	6a1a      	ldr	r2, [r3, #32]
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	691b      	ldr	r3, [r3, #16]
 8006cbc:	429a      	cmp	r2, r3
 8006cbe:	f240 82cf 	bls.w	8007260 <USB_EPStartXfer+0x636>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006cc2:	687a      	ldr	r2, [r7, #4]
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	781b      	ldrb	r3, [r3, #0]
 8006cc8:	009b      	lsls	r3, r3, #2
 8006cca:	4413      	add	r3, r2
 8006ccc:	881b      	ldrh	r3, [r3, #0]
 8006cce:	b29b      	uxth	r3, r3
 8006cd0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006cd4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006cd8:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8006cdc:	687a      	ldr	r2, [r7, #4]
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	781b      	ldrb	r3, [r3, #0]
 8006ce2:	009b      	lsls	r3, r3, #2
 8006ce4:	441a      	add	r2, r3
 8006ce6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8006cea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006cee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006cf2:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8006cf6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006cfa:	b29b      	uxth	r3, r3
 8006cfc:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	6a1a      	ldr	r2, [r3, #32]
 8006d02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006d06:	1ad2      	subs	r2, r2, r3
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006d0c:	687a      	ldr	r2, [r7, #4]
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	781b      	ldrb	r3, [r3, #0]
 8006d12:	009b      	lsls	r3, r3, #2
 8006d14:	4413      	add	r3, r2
 8006d16:	881b      	ldrh	r3, [r3, #0]
 8006d18:	b29b      	uxth	r3, r3
 8006d1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	f000 814f 	beq.w	8006fc2 <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	633b      	str	r3, [r7, #48]	@ 0x30
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	785b      	ldrb	r3, [r3, #1]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d16b      	bne.n	8006e08 <USB_EPStartXfer+0x1de>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006d3a:	b29b      	uxth	r3, r3
 8006d3c:	461a      	mov	r2, r3
 8006d3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d40:	4413      	add	r3, r2
 8006d42:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	781b      	ldrb	r3, [r3, #0]
 8006d48:	00da      	lsls	r2, r3, #3
 8006d4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d4c:	4413      	add	r3, r2
 8006d4e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006d52:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d56:	881b      	ldrh	r3, [r3, #0]
 8006d58:	b29b      	uxth	r3, r3
 8006d5a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d5e:	b29a      	uxth	r2, r3
 8006d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d62:	801a      	strh	r2, [r3, #0]
 8006d64:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d10a      	bne.n	8006d82 <USB_EPStartXfer+0x158>
 8006d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d6e:	881b      	ldrh	r3, [r3, #0]
 8006d70:	b29b      	uxth	r3, r3
 8006d72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d7a:	b29a      	uxth	r2, r3
 8006d7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d7e:	801a      	strh	r2, [r3, #0]
 8006d80:	e05b      	b.n	8006e3a <USB_EPStartXfer+0x210>
 8006d82:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006d86:	2b3e      	cmp	r3, #62	@ 0x3e
 8006d88:	d81c      	bhi.n	8006dc4 <USB_EPStartXfer+0x19a>
 8006d8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006d8e:	085b      	lsrs	r3, r3, #1
 8006d90:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006d94:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006d98:	f003 0301 	and.w	r3, r3, #1
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d004      	beq.n	8006daa <USB_EPStartXfer+0x180>
 8006da0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006da4:	3301      	adds	r3, #1
 8006da6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dac:	881b      	ldrh	r3, [r3, #0]
 8006dae:	b29a      	uxth	r2, r3
 8006db0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006db4:	b29b      	uxth	r3, r3
 8006db6:	029b      	lsls	r3, r3, #10
 8006db8:	b29b      	uxth	r3, r3
 8006dba:	4313      	orrs	r3, r2
 8006dbc:	b29a      	uxth	r2, r3
 8006dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dc0:	801a      	strh	r2, [r3, #0]
 8006dc2:	e03a      	b.n	8006e3a <USB_EPStartXfer+0x210>
 8006dc4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006dc8:	095b      	lsrs	r3, r3, #5
 8006dca:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006dce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006dd2:	f003 031f 	and.w	r3, r3, #31
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d104      	bne.n	8006de4 <USB_EPStartXfer+0x1ba>
 8006dda:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006dde:	3b01      	subs	r3, #1
 8006de0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006de6:	881b      	ldrh	r3, [r3, #0]
 8006de8:	b29a      	uxth	r2, r3
 8006dea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006dee:	b29b      	uxth	r3, r3
 8006df0:	029b      	lsls	r3, r3, #10
 8006df2:	b29b      	uxth	r3, r3
 8006df4:	4313      	orrs	r3, r2
 8006df6:	b29b      	uxth	r3, r3
 8006df8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006dfc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e00:	b29a      	uxth	r2, r3
 8006e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e04:	801a      	strh	r2, [r3, #0]
 8006e06:	e018      	b.n	8006e3a <USB_EPStartXfer+0x210>
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	785b      	ldrb	r3, [r3, #1]
 8006e0c:	2b01      	cmp	r3, #1
 8006e0e:	d114      	bne.n	8006e3a <USB_EPStartXfer+0x210>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006e16:	b29b      	uxth	r3, r3
 8006e18:	461a      	mov	r2, r3
 8006e1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e1c:	4413      	add	r3, r2
 8006e1e:	633b      	str	r3, [r7, #48]	@ 0x30
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	781b      	ldrb	r3, [r3, #0]
 8006e24:	00da      	lsls	r2, r3, #3
 8006e26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e28:	4413      	add	r3, r2
 8006e2a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006e2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006e30:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006e34:	b29a      	uxth	r2, r3
 8006e36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e38:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	895b      	ldrh	r3, [r3, #10]
 8006e3e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	6959      	ldr	r1, [r3, #20]
 8006e46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006e4a:	b29b      	uxth	r3, r3
 8006e4c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006e50:	6878      	ldr	r0, [r7, #4]
 8006e52:	f000 fdce 	bl	80079f2 <USB_WritePMA>
            ep->xfer_buff += len;
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	695a      	ldr	r2, [r3, #20]
 8006e5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006e5e:	441a      	add	r2, r3
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	6a1a      	ldr	r2, [r3, #32]
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	691b      	ldr	r3, [r3, #16]
 8006e6c:	429a      	cmp	r2, r3
 8006e6e:	d907      	bls.n	8006e80 <USB_EPStartXfer+0x256>
            {
              ep->xfer_len_db -= len;
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	6a1a      	ldr	r2, [r3, #32]
 8006e74:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006e78:	1ad2      	subs	r2, r2, r3
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	621a      	str	r2, [r3, #32]
 8006e7e:	e006      	b.n	8006e8e <USB_EPStartXfer+0x264>
            }
            else
            {
              len = ep->xfer_len_db;
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	6a1b      	ldr	r3, [r3, #32]
 8006e84:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	785b      	ldrb	r3, [r3, #1]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d16b      	bne.n	8006f6e <USB_EPStartXfer+0x344>
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	61bb      	str	r3, [r7, #24]
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006ea0:	b29b      	uxth	r3, r3
 8006ea2:	461a      	mov	r2, r3
 8006ea4:	69bb      	ldr	r3, [r7, #24]
 8006ea6:	4413      	add	r3, r2
 8006ea8:	61bb      	str	r3, [r7, #24]
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	781b      	ldrb	r3, [r3, #0]
 8006eae:	00da      	lsls	r2, r3, #3
 8006eb0:	69bb      	ldr	r3, [r7, #24]
 8006eb2:	4413      	add	r3, r2
 8006eb4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006eb8:	617b      	str	r3, [r7, #20]
 8006eba:	697b      	ldr	r3, [r7, #20]
 8006ebc:	881b      	ldrh	r3, [r3, #0]
 8006ebe:	b29b      	uxth	r3, r3
 8006ec0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006ec4:	b29a      	uxth	r2, r3
 8006ec6:	697b      	ldr	r3, [r7, #20]
 8006ec8:	801a      	strh	r2, [r3, #0]
 8006eca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d10a      	bne.n	8006ee8 <USB_EPStartXfer+0x2be>
 8006ed2:	697b      	ldr	r3, [r7, #20]
 8006ed4:	881b      	ldrh	r3, [r3, #0]
 8006ed6:	b29b      	uxth	r3, r3
 8006ed8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006edc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ee0:	b29a      	uxth	r2, r3
 8006ee2:	697b      	ldr	r3, [r7, #20]
 8006ee4:	801a      	strh	r2, [r3, #0]
 8006ee6:	e05d      	b.n	8006fa4 <USB_EPStartXfer+0x37a>
 8006ee8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006eec:	2b3e      	cmp	r3, #62	@ 0x3e
 8006eee:	d81c      	bhi.n	8006f2a <USB_EPStartXfer+0x300>
 8006ef0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006ef4:	085b      	lsrs	r3, r3, #1
 8006ef6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006efa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006efe:	f003 0301 	and.w	r3, r3, #1
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d004      	beq.n	8006f10 <USB_EPStartXfer+0x2e6>
 8006f06:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006f0a:	3301      	adds	r3, #1
 8006f0c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006f10:	697b      	ldr	r3, [r7, #20]
 8006f12:	881b      	ldrh	r3, [r3, #0]
 8006f14:	b29a      	uxth	r2, r3
 8006f16:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006f1a:	b29b      	uxth	r3, r3
 8006f1c:	029b      	lsls	r3, r3, #10
 8006f1e:	b29b      	uxth	r3, r3
 8006f20:	4313      	orrs	r3, r2
 8006f22:	b29a      	uxth	r2, r3
 8006f24:	697b      	ldr	r3, [r7, #20]
 8006f26:	801a      	strh	r2, [r3, #0]
 8006f28:	e03c      	b.n	8006fa4 <USB_EPStartXfer+0x37a>
 8006f2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006f2e:	095b      	lsrs	r3, r3, #5
 8006f30:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006f34:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006f38:	f003 031f 	and.w	r3, r3, #31
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d104      	bne.n	8006f4a <USB_EPStartXfer+0x320>
 8006f40:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006f44:	3b01      	subs	r3, #1
 8006f46:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006f4a:	697b      	ldr	r3, [r7, #20]
 8006f4c:	881b      	ldrh	r3, [r3, #0]
 8006f4e:	b29a      	uxth	r2, r3
 8006f50:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006f54:	b29b      	uxth	r3, r3
 8006f56:	029b      	lsls	r3, r3, #10
 8006f58:	b29b      	uxth	r3, r3
 8006f5a:	4313      	orrs	r3, r2
 8006f5c:	b29b      	uxth	r3, r3
 8006f5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f66:	b29a      	uxth	r2, r3
 8006f68:	697b      	ldr	r3, [r7, #20]
 8006f6a:	801a      	strh	r2, [r3, #0]
 8006f6c:	e01a      	b.n	8006fa4 <USB_EPStartXfer+0x37a>
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	785b      	ldrb	r3, [r3, #1]
 8006f72:	2b01      	cmp	r3, #1
 8006f74:	d116      	bne.n	8006fa4 <USB_EPStartXfer+0x37a>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	623b      	str	r3, [r7, #32]
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006f80:	b29b      	uxth	r3, r3
 8006f82:	461a      	mov	r2, r3
 8006f84:	6a3b      	ldr	r3, [r7, #32]
 8006f86:	4413      	add	r3, r2
 8006f88:	623b      	str	r3, [r7, #32]
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	781b      	ldrb	r3, [r3, #0]
 8006f8e:	00da      	lsls	r2, r3, #3
 8006f90:	6a3b      	ldr	r3, [r7, #32]
 8006f92:	4413      	add	r3, r2
 8006f94:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006f98:	61fb      	str	r3, [r7, #28]
 8006f9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006f9e:	b29a      	uxth	r2, r3
 8006fa0:	69fb      	ldr	r3, [r7, #28]
 8006fa2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	891b      	ldrh	r3, [r3, #8]
 8006fa8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	6959      	ldr	r1, [r3, #20]
 8006fb0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006fb4:	b29b      	uxth	r3, r3
 8006fb6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	f000 fd19 	bl	80079f2 <USB_WritePMA>
 8006fc0:	e2e2      	b.n	8007588 <USB_EPStartXfer+0x95e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	785b      	ldrb	r3, [r3, #1]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d16b      	bne.n	80070a2 <USB_EPStartXfer+0x478>
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006fd4:	b29b      	uxth	r3, r3
 8006fd6:	461a      	mov	r2, r3
 8006fd8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006fda:	4413      	add	r3, r2
 8006fdc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	781b      	ldrb	r3, [r3, #0]
 8006fe2:	00da      	lsls	r2, r3, #3
 8006fe4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006fe6:	4413      	add	r3, r2
 8006fe8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006fec:	647b      	str	r3, [r7, #68]	@ 0x44
 8006fee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006ff0:	881b      	ldrh	r3, [r3, #0]
 8006ff2:	b29b      	uxth	r3, r3
 8006ff4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006ff8:	b29a      	uxth	r2, r3
 8006ffa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006ffc:	801a      	strh	r2, [r3, #0]
 8006ffe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007002:	2b00      	cmp	r3, #0
 8007004:	d10a      	bne.n	800701c <USB_EPStartXfer+0x3f2>
 8007006:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007008:	881b      	ldrh	r3, [r3, #0]
 800700a:	b29b      	uxth	r3, r3
 800700c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007010:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007014:	b29a      	uxth	r2, r3
 8007016:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007018:	801a      	strh	r2, [r3, #0]
 800701a:	e05d      	b.n	80070d8 <USB_EPStartXfer+0x4ae>
 800701c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007020:	2b3e      	cmp	r3, #62	@ 0x3e
 8007022:	d81c      	bhi.n	800705e <USB_EPStartXfer+0x434>
 8007024:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007028:	085b      	lsrs	r3, r3, #1
 800702a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800702e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007032:	f003 0301 	and.w	r3, r3, #1
 8007036:	2b00      	cmp	r3, #0
 8007038:	d004      	beq.n	8007044 <USB_EPStartXfer+0x41a>
 800703a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800703e:	3301      	adds	r3, #1
 8007040:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007044:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007046:	881b      	ldrh	r3, [r3, #0]
 8007048:	b29a      	uxth	r2, r3
 800704a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800704e:	b29b      	uxth	r3, r3
 8007050:	029b      	lsls	r3, r3, #10
 8007052:	b29b      	uxth	r3, r3
 8007054:	4313      	orrs	r3, r2
 8007056:	b29a      	uxth	r2, r3
 8007058:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800705a:	801a      	strh	r2, [r3, #0]
 800705c:	e03c      	b.n	80070d8 <USB_EPStartXfer+0x4ae>
 800705e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007062:	095b      	lsrs	r3, r3, #5
 8007064:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007068:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800706c:	f003 031f 	and.w	r3, r3, #31
 8007070:	2b00      	cmp	r3, #0
 8007072:	d104      	bne.n	800707e <USB_EPStartXfer+0x454>
 8007074:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007078:	3b01      	subs	r3, #1
 800707a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800707e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007080:	881b      	ldrh	r3, [r3, #0]
 8007082:	b29a      	uxth	r2, r3
 8007084:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007088:	b29b      	uxth	r3, r3
 800708a:	029b      	lsls	r3, r3, #10
 800708c:	b29b      	uxth	r3, r3
 800708e:	4313      	orrs	r3, r2
 8007090:	b29b      	uxth	r3, r3
 8007092:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007096:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800709a:	b29a      	uxth	r2, r3
 800709c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800709e:	801a      	strh	r2, [r3, #0]
 80070a0:	e01a      	b.n	80070d8 <USB_EPStartXfer+0x4ae>
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	785b      	ldrb	r3, [r3, #1]
 80070a6:	2b01      	cmp	r3, #1
 80070a8:	d116      	bne.n	80070d8 <USB_EPStartXfer+0x4ae>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	653b      	str	r3, [r7, #80]	@ 0x50
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80070b4:	b29b      	uxth	r3, r3
 80070b6:	461a      	mov	r2, r3
 80070b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80070ba:	4413      	add	r3, r2
 80070bc:	653b      	str	r3, [r7, #80]	@ 0x50
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	781b      	ldrb	r3, [r3, #0]
 80070c2:	00da      	lsls	r2, r3, #3
 80070c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80070c6:	4413      	add	r3, r2
 80070c8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80070cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80070ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80070d2:	b29a      	uxth	r2, r3
 80070d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80070d6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	891b      	ldrh	r3, [r3, #8]
 80070dc:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	6959      	ldr	r1, [r3, #20]
 80070e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80070e8:	b29b      	uxth	r3, r3
 80070ea:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80070ee:	6878      	ldr	r0, [r7, #4]
 80070f0:	f000 fc7f 	bl	80079f2 <USB_WritePMA>
            ep->xfer_buff += len;
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	695a      	ldr	r2, [r3, #20]
 80070f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80070fc:	441a      	add	r2, r3
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	6a1a      	ldr	r2, [r3, #32]
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	691b      	ldr	r3, [r3, #16]
 800710a:	429a      	cmp	r2, r3
 800710c:	d907      	bls.n	800711e <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	6a1a      	ldr	r2, [r3, #32]
 8007112:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007116:	1ad2      	subs	r2, r2, r3
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	621a      	str	r2, [r3, #32]
 800711c:	e006      	b.n	800712c <USB_EPStartXfer+0x502>
            }
            else
            {
              len = ep->xfer_len_db;
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	6a1b      	ldr	r3, [r3, #32]
 8007122:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	2200      	movs	r2, #0
 800712a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	643b      	str	r3, [r7, #64]	@ 0x40
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	785b      	ldrb	r3, [r3, #1]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d16b      	bne.n	8007210 <USB_EPStartXfer+0x5e6>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007142:	b29b      	uxth	r3, r3
 8007144:	461a      	mov	r2, r3
 8007146:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007148:	4413      	add	r3, r2
 800714a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	781b      	ldrb	r3, [r3, #0]
 8007150:	00da      	lsls	r2, r3, #3
 8007152:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007154:	4413      	add	r3, r2
 8007156:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800715a:	637b      	str	r3, [r7, #52]	@ 0x34
 800715c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800715e:	881b      	ldrh	r3, [r3, #0]
 8007160:	b29b      	uxth	r3, r3
 8007162:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007166:	b29a      	uxth	r2, r3
 8007168:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800716a:	801a      	strh	r2, [r3, #0]
 800716c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007170:	2b00      	cmp	r3, #0
 8007172:	d10a      	bne.n	800718a <USB_EPStartXfer+0x560>
 8007174:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007176:	881b      	ldrh	r3, [r3, #0]
 8007178:	b29b      	uxth	r3, r3
 800717a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800717e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007182:	b29a      	uxth	r2, r3
 8007184:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007186:	801a      	strh	r2, [r3, #0]
 8007188:	e05b      	b.n	8007242 <USB_EPStartXfer+0x618>
 800718a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800718e:	2b3e      	cmp	r3, #62	@ 0x3e
 8007190:	d81c      	bhi.n	80071cc <USB_EPStartXfer+0x5a2>
 8007192:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007196:	085b      	lsrs	r3, r3, #1
 8007198:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800719c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80071a0:	f003 0301 	and.w	r3, r3, #1
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d004      	beq.n	80071b2 <USB_EPStartXfer+0x588>
 80071a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80071ac:	3301      	adds	r3, #1
 80071ae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80071b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071b4:	881b      	ldrh	r3, [r3, #0]
 80071b6:	b29a      	uxth	r2, r3
 80071b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80071bc:	b29b      	uxth	r3, r3
 80071be:	029b      	lsls	r3, r3, #10
 80071c0:	b29b      	uxth	r3, r3
 80071c2:	4313      	orrs	r3, r2
 80071c4:	b29a      	uxth	r2, r3
 80071c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071c8:	801a      	strh	r2, [r3, #0]
 80071ca:	e03a      	b.n	8007242 <USB_EPStartXfer+0x618>
 80071cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80071d0:	095b      	lsrs	r3, r3, #5
 80071d2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80071d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80071da:	f003 031f 	and.w	r3, r3, #31
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d104      	bne.n	80071ec <USB_EPStartXfer+0x5c2>
 80071e2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80071e6:	3b01      	subs	r3, #1
 80071e8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80071ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071ee:	881b      	ldrh	r3, [r3, #0]
 80071f0:	b29a      	uxth	r2, r3
 80071f2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80071f6:	b29b      	uxth	r3, r3
 80071f8:	029b      	lsls	r3, r3, #10
 80071fa:	b29b      	uxth	r3, r3
 80071fc:	4313      	orrs	r3, r2
 80071fe:	b29b      	uxth	r3, r3
 8007200:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007204:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007208:	b29a      	uxth	r2, r3
 800720a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800720c:	801a      	strh	r2, [r3, #0]
 800720e:	e018      	b.n	8007242 <USB_EPStartXfer+0x618>
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	785b      	ldrb	r3, [r3, #1]
 8007214:	2b01      	cmp	r3, #1
 8007216:	d114      	bne.n	8007242 <USB_EPStartXfer+0x618>
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800721e:	b29b      	uxth	r3, r3
 8007220:	461a      	mov	r2, r3
 8007222:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007224:	4413      	add	r3, r2
 8007226:	643b      	str	r3, [r7, #64]	@ 0x40
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	781b      	ldrb	r3, [r3, #0]
 800722c:	00da      	lsls	r2, r3, #3
 800722e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007230:	4413      	add	r3, r2
 8007232:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007236:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007238:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800723c:	b29a      	uxth	r2, r3
 800723e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007240:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	895b      	ldrh	r3, [r3, #10]
 8007246:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	6959      	ldr	r1, [r3, #20]
 800724e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007252:	b29b      	uxth	r3, r3
 8007254:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	f000 fbca 	bl	80079f2 <USB_WritePMA>
 800725e:	e193      	b.n	8007588 <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	6a1b      	ldr	r3, [r3, #32]
 8007264:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8007268:	687a      	ldr	r2, [r7, #4]
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	781b      	ldrb	r3, [r3, #0]
 800726e:	009b      	lsls	r3, r3, #2
 8007270:	4413      	add	r3, r2
 8007272:	881b      	ldrh	r3, [r3, #0]
 8007274:	b29b      	uxth	r3, r3
 8007276:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800727a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800727e:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8007282:	687a      	ldr	r2, [r7, #4]
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	781b      	ldrb	r3, [r3, #0]
 8007288:	009b      	lsls	r3, r3, #2
 800728a:	441a      	add	r2, r3
 800728c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8007290:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007294:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007298:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800729c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80072a0:	b29b      	uxth	r3, r3
 80072a2:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80072ae:	b29b      	uxth	r3, r3
 80072b0:	461a      	mov	r2, r3
 80072b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80072b4:	4413      	add	r3, r2
 80072b6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	781b      	ldrb	r3, [r3, #0]
 80072bc:	00da      	lsls	r2, r3, #3
 80072be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80072c0:	4413      	add	r3, r2
 80072c2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80072c6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80072c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80072cc:	b29a      	uxth	r2, r3
 80072ce:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80072d0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	891b      	ldrh	r3, [r3, #8]
 80072d6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	6959      	ldr	r1, [r3, #20]
 80072de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80072e2:	b29b      	uxth	r3, r3
 80072e4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80072e8:	6878      	ldr	r0, [r7, #4]
 80072ea:	f000 fb82 	bl	80079f2 <USB_WritePMA>
 80072ee:	e14b      	b.n	8007588 <USB_EPStartXfer+0x95e>
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	6a1a      	ldr	r2, [r3, #32]
 80072f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80072f8:	1ad2      	subs	r2, r2, r3
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80072fe:	687a      	ldr	r2, [r7, #4]
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	781b      	ldrb	r3, [r3, #0]
 8007304:	009b      	lsls	r3, r3, #2
 8007306:	4413      	add	r3, r2
 8007308:	881b      	ldrh	r3, [r3, #0]
 800730a:	b29b      	uxth	r3, r3
 800730c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007310:	2b00      	cmp	r3, #0
 8007312:	f000 809a 	beq.w	800744a <USB_EPStartXfer+0x820>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	673b      	str	r3, [r7, #112]	@ 0x70
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	785b      	ldrb	r3, [r3, #1]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d16b      	bne.n	80073fa <USB_EPStartXfer+0x7d0>
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800732c:	b29b      	uxth	r3, r3
 800732e:	461a      	mov	r2, r3
 8007330:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007332:	4413      	add	r3, r2
 8007334:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	781b      	ldrb	r3, [r3, #0]
 800733a:	00da      	lsls	r2, r3, #3
 800733c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800733e:	4413      	add	r3, r2
 8007340:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007344:	667b      	str	r3, [r7, #100]	@ 0x64
 8007346:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007348:	881b      	ldrh	r3, [r3, #0]
 800734a:	b29b      	uxth	r3, r3
 800734c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007350:	b29a      	uxth	r2, r3
 8007352:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007354:	801a      	strh	r2, [r3, #0]
 8007356:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800735a:	2b00      	cmp	r3, #0
 800735c:	d10a      	bne.n	8007374 <USB_EPStartXfer+0x74a>
 800735e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007360:	881b      	ldrh	r3, [r3, #0]
 8007362:	b29b      	uxth	r3, r3
 8007364:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007368:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800736c:	b29a      	uxth	r2, r3
 800736e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007370:	801a      	strh	r2, [r3, #0]
 8007372:	e05b      	b.n	800742c <USB_EPStartXfer+0x802>
 8007374:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007378:	2b3e      	cmp	r3, #62	@ 0x3e
 800737a:	d81c      	bhi.n	80073b6 <USB_EPStartXfer+0x78c>
 800737c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007380:	085b      	lsrs	r3, r3, #1
 8007382:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007386:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800738a:	f003 0301 	and.w	r3, r3, #1
 800738e:	2b00      	cmp	r3, #0
 8007390:	d004      	beq.n	800739c <USB_EPStartXfer+0x772>
 8007392:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007396:	3301      	adds	r3, #1
 8007398:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800739c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800739e:	881b      	ldrh	r3, [r3, #0]
 80073a0:	b29a      	uxth	r2, r3
 80073a2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80073a6:	b29b      	uxth	r3, r3
 80073a8:	029b      	lsls	r3, r3, #10
 80073aa:	b29b      	uxth	r3, r3
 80073ac:	4313      	orrs	r3, r2
 80073ae:	b29a      	uxth	r2, r3
 80073b0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80073b2:	801a      	strh	r2, [r3, #0]
 80073b4:	e03a      	b.n	800742c <USB_EPStartXfer+0x802>
 80073b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80073ba:	095b      	lsrs	r3, r3, #5
 80073bc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80073c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80073c4:	f003 031f 	and.w	r3, r3, #31
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d104      	bne.n	80073d6 <USB_EPStartXfer+0x7ac>
 80073cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80073d0:	3b01      	subs	r3, #1
 80073d2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80073d6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80073d8:	881b      	ldrh	r3, [r3, #0]
 80073da:	b29a      	uxth	r2, r3
 80073dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80073e0:	b29b      	uxth	r3, r3
 80073e2:	029b      	lsls	r3, r3, #10
 80073e4:	b29b      	uxth	r3, r3
 80073e6:	4313      	orrs	r3, r2
 80073e8:	b29b      	uxth	r3, r3
 80073ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073f2:	b29a      	uxth	r2, r3
 80073f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80073f6:	801a      	strh	r2, [r3, #0]
 80073f8:	e018      	b.n	800742c <USB_EPStartXfer+0x802>
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	785b      	ldrb	r3, [r3, #1]
 80073fe:	2b01      	cmp	r3, #1
 8007400:	d114      	bne.n	800742c <USB_EPStartXfer+0x802>
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007408:	b29b      	uxth	r3, r3
 800740a:	461a      	mov	r2, r3
 800740c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800740e:	4413      	add	r3, r2
 8007410:	673b      	str	r3, [r7, #112]	@ 0x70
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	781b      	ldrb	r3, [r3, #0]
 8007416:	00da      	lsls	r2, r3, #3
 8007418:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800741a:	4413      	add	r3, r2
 800741c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007420:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007422:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007426:	b29a      	uxth	r2, r3
 8007428:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800742a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	895b      	ldrh	r3, [r3, #10]
 8007430:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	6959      	ldr	r1, [r3, #20]
 8007438:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800743c:	b29b      	uxth	r3, r3
 800743e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	f000 fad5 	bl	80079f2 <USB_WritePMA>
 8007448:	e09e      	b.n	8007588 <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	785b      	ldrb	r3, [r3, #1]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d16b      	bne.n	800752a <USB_EPStartXfer+0x900>
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800745c:	b29b      	uxth	r3, r3
 800745e:	461a      	mov	r2, r3
 8007460:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007462:	4413      	add	r3, r2
 8007464:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	781b      	ldrb	r3, [r3, #0]
 800746a:	00da      	lsls	r2, r3, #3
 800746c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800746e:	4413      	add	r3, r2
 8007470:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007474:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007476:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007478:	881b      	ldrh	r3, [r3, #0]
 800747a:	b29b      	uxth	r3, r3
 800747c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007480:	b29a      	uxth	r2, r3
 8007482:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007484:	801a      	strh	r2, [r3, #0]
 8007486:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800748a:	2b00      	cmp	r3, #0
 800748c:	d10a      	bne.n	80074a4 <USB_EPStartXfer+0x87a>
 800748e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007490:	881b      	ldrh	r3, [r3, #0]
 8007492:	b29b      	uxth	r3, r3
 8007494:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007498:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800749c:	b29a      	uxth	r2, r3
 800749e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80074a0:	801a      	strh	r2, [r3, #0]
 80074a2:	e063      	b.n	800756c <USB_EPStartXfer+0x942>
 80074a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80074a8:	2b3e      	cmp	r3, #62	@ 0x3e
 80074aa:	d81c      	bhi.n	80074e6 <USB_EPStartXfer+0x8bc>
 80074ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80074b0:	085b      	lsrs	r3, r3, #1
 80074b2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80074b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80074ba:	f003 0301 	and.w	r3, r3, #1
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d004      	beq.n	80074cc <USB_EPStartXfer+0x8a2>
 80074c2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80074c6:	3301      	adds	r3, #1
 80074c8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80074cc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80074ce:	881b      	ldrh	r3, [r3, #0]
 80074d0:	b29a      	uxth	r2, r3
 80074d2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80074d6:	b29b      	uxth	r3, r3
 80074d8:	029b      	lsls	r3, r3, #10
 80074da:	b29b      	uxth	r3, r3
 80074dc:	4313      	orrs	r3, r2
 80074de:	b29a      	uxth	r2, r3
 80074e0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80074e2:	801a      	strh	r2, [r3, #0]
 80074e4:	e042      	b.n	800756c <USB_EPStartXfer+0x942>
 80074e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80074ea:	095b      	lsrs	r3, r3, #5
 80074ec:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80074f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80074f4:	f003 031f 	and.w	r3, r3, #31
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d104      	bne.n	8007506 <USB_EPStartXfer+0x8dc>
 80074fc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007500:	3b01      	subs	r3, #1
 8007502:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007506:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007508:	881b      	ldrh	r3, [r3, #0]
 800750a:	b29a      	uxth	r2, r3
 800750c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007510:	b29b      	uxth	r3, r3
 8007512:	029b      	lsls	r3, r3, #10
 8007514:	b29b      	uxth	r3, r3
 8007516:	4313      	orrs	r3, r2
 8007518:	b29b      	uxth	r3, r3
 800751a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800751e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007522:	b29a      	uxth	r2, r3
 8007524:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007526:	801a      	strh	r2, [r3, #0]
 8007528:	e020      	b.n	800756c <USB_EPStartXfer+0x942>
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	785b      	ldrb	r3, [r3, #1]
 800752e:	2b01      	cmp	r3, #1
 8007530:	d11c      	bne.n	800756c <USB_EPStartXfer+0x942>
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800753e:	b29b      	uxth	r3, r3
 8007540:	461a      	mov	r2, r3
 8007542:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007546:	4413      	add	r3, r2
 8007548:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	781b      	ldrb	r3, [r3, #0]
 8007550:	00da      	lsls	r2, r3, #3
 8007552:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007556:	4413      	add	r3, r2
 8007558:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800755c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007560:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007564:	b29a      	uxth	r2, r3
 8007566:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800756a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	891b      	ldrh	r3, [r3, #8]
 8007570:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	6959      	ldr	r1, [r3, #20]
 8007578:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800757c:	b29b      	uxth	r3, r3
 800757e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f000 fa35 	bl	80079f2 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007588:	687a      	ldr	r2, [r7, #4]
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	781b      	ldrb	r3, [r3, #0]
 800758e:	009b      	lsls	r3, r3, #2
 8007590:	4413      	add	r3, r2
 8007592:	881b      	ldrh	r3, [r3, #0]
 8007594:	b29b      	uxth	r3, r3
 8007596:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800759a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800759e:	817b      	strh	r3, [r7, #10]
 80075a0:	897b      	ldrh	r3, [r7, #10]
 80075a2:	f083 0310 	eor.w	r3, r3, #16
 80075a6:	817b      	strh	r3, [r7, #10]
 80075a8:	897b      	ldrh	r3, [r7, #10]
 80075aa:	f083 0320 	eor.w	r3, r3, #32
 80075ae:	817b      	strh	r3, [r7, #10]
 80075b0:	687a      	ldr	r2, [r7, #4]
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	781b      	ldrb	r3, [r3, #0]
 80075b6:	009b      	lsls	r3, r3, #2
 80075b8:	441a      	add	r2, r3
 80075ba:	897b      	ldrh	r3, [r7, #10]
 80075bc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80075c0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80075c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80075c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80075cc:	b29b      	uxth	r3, r3
 80075ce:	8013      	strh	r3, [r2, #0]
 80075d0:	e0d5      	b.n	800777e <USB_EPStartXfer+0xb54>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	7b1b      	ldrb	r3, [r3, #12]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d156      	bne.n	8007688 <USB_EPStartXfer+0xa5e>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	699b      	ldr	r3, [r3, #24]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d122      	bne.n	8007628 <USB_EPStartXfer+0x9fe>
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	78db      	ldrb	r3, [r3, #3]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d11e      	bne.n	8007628 <USB_EPStartXfer+0x9fe>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 80075ea:	687a      	ldr	r2, [r7, #4]
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	781b      	ldrb	r3, [r3, #0]
 80075f0:	009b      	lsls	r3, r3, #2
 80075f2:	4413      	add	r3, r2
 80075f4:	881b      	ldrh	r3, [r3, #0]
 80075f6:	b29b      	uxth	r3, r3
 80075f8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80075fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007600:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 8007604:	687a      	ldr	r2, [r7, #4]
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	781b      	ldrb	r3, [r3, #0]
 800760a:	009b      	lsls	r3, r3, #2
 800760c:	441a      	add	r2, r3
 800760e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8007612:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007616:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800761a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800761e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007622:	b29b      	uxth	r3, r3
 8007624:	8013      	strh	r3, [r2, #0]
 8007626:	e01d      	b.n	8007664 <USB_EPStartXfer+0xa3a>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 8007628:	687a      	ldr	r2, [r7, #4]
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	781b      	ldrb	r3, [r3, #0]
 800762e:	009b      	lsls	r3, r3, #2
 8007630:	4413      	add	r3, r2
 8007632:	881b      	ldrh	r3, [r3, #0]
 8007634:	b29b      	uxth	r3, r3
 8007636:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800763a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800763e:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 8007642:	687a      	ldr	r2, [r7, #4]
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	781b      	ldrb	r3, [r3, #0]
 8007648:	009b      	lsls	r3, r3, #2
 800764a:	441a      	add	r2, r3
 800764c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 8007650:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007654:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007658:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800765c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007660:	b29b      	uxth	r3, r3
 8007662:	8013      	strh	r3, [r2, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	699a      	ldr	r2, [r3, #24]
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	691b      	ldr	r3, [r3, #16]
 800766c:	429a      	cmp	r2, r3
 800766e:	d907      	bls.n	8007680 <USB_EPStartXfer+0xa56>
      {
        ep->xfer_len -= ep->maxpacket;
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	699a      	ldr	r2, [r3, #24]
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	691b      	ldr	r3, [r3, #16]
 8007678:	1ad2      	subs	r2, r2, r3
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	619a      	str	r2, [r3, #24]
 800767e:	e054      	b.n	800772a <USB_EPStartXfer+0xb00>
      }
      else
      {
        ep->xfer_len = 0U;
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	2200      	movs	r2, #0
 8007684:	619a      	str	r2, [r3, #24]
 8007686:	e050      	b.n	800772a <USB_EPStartXfer+0xb00>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	78db      	ldrb	r3, [r3, #3]
 800768c:	2b02      	cmp	r3, #2
 800768e:	d142      	bne.n	8007716 <USB_EPStartXfer+0xaec>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	69db      	ldr	r3, [r3, #28]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d048      	beq.n	800772a <USB_EPStartXfer+0xb00>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007698:	687a      	ldr	r2, [r7, #4]
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	781b      	ldrb	r3, [r3, #0]
 800769e:	009b      	lsls	r3, r3, #2
 80076a0:	4413      	add	r3, r2
 80076a2:	881b      	ldrh	r3, [r3, #0]
 80076a4:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80076a8:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80076ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d005      	beq.n	80076c0 <USB_EPStartXfer+0xa96>
 80076b4:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80076b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d10b      	bne.n	80076d8 <USB_EPStartXfer+0xaae>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80076c0:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80076c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d12e      	bne.n	800772a <USB_EPStartXfer+0xb00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80076cc:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80076d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d128      	bne.n	800772a <USB_EPStartXfer+0xb00>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80076d8:	687a      	ldr	r2, [r7, #4]
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	781b      	ldrb	r3, [r3, #0]
 80076de:	009b      	lsls	r3, r3, #2
 80076e0:	4413      	add	r3, r2
 80076e2:	881b      	ldrh	r3, [r3, #0]
 80076e4:	b29b      	uxth	r3, r3
 80076e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80076ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80076ee:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 80076f2:	687a      	ldr	r2, [r7, #4]
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	781b      	ldrb	r3, [r3, #0]
 80076f8:	009b      	lsls	r3, r3, #2
 80076fa:	441a      	add	r2, r3
 80076fc:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 8007700:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007704:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007708:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800770c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007710:	b29b      	uxth	r3, r3
 8007712:	8013      	strh	r3, [r2, #0]
 8007714:	e009      	b.n	800772a <USB_EPStartXfer+0xb00>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	78db      	ldrb	r3, [r3, #3]
 800771a:	2b01      	cmp	r3, #1
 800771c:	d103      	bne.n	8007726 <USB_EPStartXfer+0xafc>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	2200      	movs	r2, #0
 8007722:	619a      	str	r2, [r3, #24]
 8007724:	e001      	b.n	800772a <USB_EPStartXfer+0xb00>
      }
      else
      {
        return HAL_ERROR;
 8007726:	2301      	movs	r3, #1
 8007728:	e02a      	b.n	8007780 <USB_EPStartXfer+0xb56>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800772a:	687a      	ldr	r2, [r7, #4]
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	781b      	ldrb	r3, [r3, #0]
 8007730:	009b      	lsls	r3, r3, #2
 8007732:	4413      	add	r3, r2
 8007734:	881b      	ldrh	r3, [r3, #0]
 8007736:	b29b      	uxth	r3, r3
 8007738:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800773c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007740:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007744:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007748:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800774c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007750:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007754:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007758:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800775c:	687a      	ldr	r2, [r7, #4]
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	781b      	ldrb	r3, [r3, #0]
 8007762:	009b      	lsls	r3, r3, #2
 8007764:	441a      	add	r2, r3
 8007766:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800776a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800776e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007772:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007776:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800777a:	b29b      	uxth	r3, r3
 800777c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800777e:	2300      	movs	r3, #0
}
 8007780:	4618      	mov	r0, r3
 8007782:	37b0      	adds	r7, #176	@ 0xb0
 8007784:	46bd      	mov	sp, r7
 8007786:	bd80      	pop	{r7, pc}

08007788 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007788:	b480      	push	{r7}
 800778a:	b085      	sub	sp, #20
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
 8007790:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	785b      	ldrb	r3, [r3, #1]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d020      	beq.n	80077dc <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800779a:	687a      	ldr	r2, [r7, #4]
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	781b      	ldrb	r3, [r3, #0]
 80077a0:	009b      	lsls	r3, r3, #2
 80077a2:	4413      	add	r3, r2
 80077a4:	881b      	ldrh	r3, [r3, #0]
 80077a6:	b29b      	uxth	r3, r3
 80077a8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80077ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80077b0:	81bb      	strh	r3, [r7, #12]
 80077b2:	89bb      	ldrh	r3, [r7, #12]
 80077b4:	f083 0310 	eor.w	r3, r3, #16
 80077b8:	81bb      	strh	r3, [r7, #12]
 80077ba:	687a      	ldr	r2, [r7, #4]
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	781b      	ldrb	r3, [r3, #0]
 80077c0:	009b      	lsls	r3, r3, #2
 80077c2:	441a      	add	r2, r3
 80077c4:	89bb      	ldrh	r3, [r7, #12]
 80077c6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80077ca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80077ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80077d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80077d6:	b29b      	uxth	r3, r3
 80077d8:	8013      	strh	r3, [r2, #0]
 80077da:	e01f      	b.n	800781c <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80077dc:	687a      	ldr	r2, [r7, #4]
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	781b      	ldrb	r3, [r3, #0]
 80077e2:	009b      	lsls	r3, r3, #2
 80077e4:	4413      	add	r3, r2
 80077e6:	881b      	ldrh	r3, [r3, #0]
 80077e8:	b29b      	uxth	r3, r3
 80077ea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80077ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80077f2:	81fb      	strh	r3, [r7, #14]
 80077f4:	89fb      	ldrh	r3, [r7, #14]
 80077f6:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80077fa:	81fb      	strh	r3, [r7, #14]
 80077fc:	687a      	ldr	r2, [r7, #4]
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	781b      	ldrb	r3, [r3, #0]
 8007802:	009b      	lsls	r3, r3, #2
 8007804:	441a      	add	r2, r3
 8007806:	89fb      	ldrh	r3, [r7, #14]
 8007808:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800780c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007810:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007814:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007818:	b29b      	uxth	r3, r3
 800781a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800781c:	2300      	movs	r3, #0
}
 800781e:	4618      	mov	r0, r3
 8007820:	3714      	adds	r7, #20
 8007822:	46bd      	mov	sp, r7
 8007824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007828:	4770      	bx	lr

0800782a <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800782a:	b480      	push	{r7}
 800782c:	b087      	sub	sp, #28
 800782e:	af00      	add	r7, sp, #0
 8007830:	6078      	str	r0, [r7, #4]
 8007832:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	785b      	ldrb	r3, [r3, #1]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d04c      	beq.n	80078d6 <USB_EPClearStall+0xac>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800783c:	687a      	ldr	r2, [r7, #4]
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	781b      	ldrb	r3, [r3, #0]
 8007842:	009b      	lsls	r3, r3, #2
 8007844:	4413      	add	r3, r2
 8007846:	881b      	ldrh	r3, [r3, #0]
 8007848:	823b      	strh	r3, [r7, #16]
 800784a:	8a3b      	ldrh	r3, [r7, #16]
 800784c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007850:	2b00      	cmp	r3, #0
 8007852:	d01b      	beq.n	800788c <USB_EPClearStall+0x62>
 8007854:	687a      	ldr	r2, [r7, #4]
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	781b      	ldrb	r3, [r3, #0]
 800785a:	009b      	lsls	r3, r3, #2
 800785c:	4413      	add	r3, r2
 800785e:	881b      	ldrh	r3, [r3, #0]
 8007860:	b29b      	uxth	r3, r3
 8007862:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007866:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800786a:	81fb      	strh	r3, [r7, #14]
 800786c:	687a      	ldr	r2, [r7, #4]
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	781b      	ldrb	r3, [r3, #0]
 8007872:	009b      	lsls	r3, r3, #2
 8007874:	441a      	add	r2, r3
 8007876:	89fb      	ldrh	r3, [r7, #14]
 8007878:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800787c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007880:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007884:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007888:	b29b      	uxth	r3, r3
 800788a:	8013      	strh	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	78db      	ldrb	r3, [r3, #3]
 8007890:	2b01      	cmp	r3, #1
 8007892:	d06c      	beq.n	800796e <USB_EPClearStall+0x144>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007894:	687a      	ldr	r2, [r7, #4]
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	781b      	ldrb	r3, [r3, #0]
 800789a:	009b      	lsls	r3, r3, #2
 800789c:	4413      	add	r3, r2
 800789e:	881b      	ldrh	r3, [r3, #0]
 80078a0:	b29b      	uxth	r3, r3
 80078a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80078a6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80078aa:	81bb      	strh	r3, [r7, #12]
 80078ac:	89bb      	ldrh	r3, [r7, #12]
 80078ae:	f083 0320 	eor.w	r3, r3, #32
 80078b2:	81bb      	strh	r3, [r7, #12]
 80078b4:	687a      	ldr	r2, [r7, #4]
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	781b      	ldrb	r3, [r3, #0]
 80078ba:	009b      	lsls	r3, r3, #2
 80078bc:	441a      	add	r2, r3
 80078be:	89bb      	ldrh	r3, [r7, #12]
 80078c0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80078c4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80078c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80078cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80078d0:	b29b      	uxth	r3, r3
 80078d2:	8013      	strh	r3, [r2, #0]
 80078d4:	e04b      	b.n	800796e <USB_EPClearStall+0x144>
    }
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80078d6:	687a      	ldr	r2, [r7, #4]
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	781b      	ldrb	r3, [r3, #0]
 80078dc:	009b      	lsls	r3, r3, #2
 80078de:	4413      	add	r3, r2
 80078e0:	881b      	ldrh	r3, [r3, #0]
 80078e2:	82fb      	strh	r3, [r7, #22]
 80078e4:	8afb      	ldrh	r3, [r7, #22]
 80078e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d01b      	beq.n	8007926 <USB_EPClearStall+0xfc>
 80078ee:	687a      	ldr	r2, [r7, #4]
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	781b      	ldrb	r3, [r3, #0]
 80078f4:	009b      	lsls	r3, r3, #2
 80078f6:	4413      	add	r3, r2
 80078f8:	881b      	ldrh	r3, [r3, #0]
 80078fa:	b29b      	uxth	r3, r3
 80078fc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007900:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007904:	82bb      	strh	r3, [r7, #20]
 8007906:	687a      	ldr	r2, [r7, #4]
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	781b      	ldrb	r3, [r3, #0]
 800790c:	009b      	lsls	r3, r3, #2
 800790e:	441a      	add	r2, r3
 8007910:	8abb      	ldrh	r3, [r7, #20]
 8007912:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007916:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800791a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800791e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007922:	b29b      	uxth	r3, r3
 8007924:	8013      	strh	r3, [r2, #0]

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007926:	687a      	ldr	r2, [r7, #4]
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	781b      	ldrb	r3, [r3, #0]
 800792c:	009b      	lsls	r3, r3, #2
 800792e:	4413      	add	r3, r2
 8007930:	881b      	ldrh	r3, [r3, #0]
 8007932:	b29b      	uxth	r3, r3
 8007934:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007938:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800793c:	827b      	strh	r3, [r7, #18]
 800793e:	8a7b      	ldrh	r3, [r7, #18]
 8007940:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007944:	827b      	strh	r3, [r7, #18]
 8007946:	8a7b      	ldrh	r3, [r7, #18]
 8007948:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800794c:	827b      	strh	r3, [r7, #18]
 800794e:	687a      	ldr	r2, [r7, #4]
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	781b      	ldrb	r3, [r3, #0]
 8007954:	009b      	lsls	r3, r3, #2
 8007956:	441a      	add	r2, r3
 8007958:	8a7b      	ldrh	r3, [r7, #18]
 800795a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800795e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007962:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007966:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800796a:	b29b      	uxth	r3, r3
 800796c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800796e:	2300      	movs	r3, #0
}
 8007970:	4618      	mov	r0, r3
 8007972:	371c      	adds	r7, #28
 8007974:	46bd      	mov	sp, r7
 8007976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797a:	4770      	bx	lr

0800797c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800797c:	b480      	push	{r7}
 800797e:	b083      	sub	sp, #12
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
 8007984:	460b      	mov	r3, r1
 8007986:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007988:	78fb      	ldrb	r3, [r7, #3]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d103      	bne.n	8007996 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2280      	movs	r2, #128	@ 0x80
 8007992:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8007996:	2300      	movs	r3, #0
}
 8007998:	4618      	mov	r0, r3
 800799a:	370c      	adds	r7, #12
 800799c:	46bd      	mov	sp, r7
 800799e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a2:	4770      	bx	lr

080079a4 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80079a4:	b480      	push	{r7}
 80079a6:	b083      	sub	sp, #12
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80079b2:	b29b      	uxth	r3, r3
 80079b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079bc:	b29a      	uxth	r2, r3
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 80079c4:	2300      	movs	r3, #0
}
 80079c6:	4618      	mov	r0, r3
 80079c8:	370c      	adds	r7, #12
 80079ca:	46bd      	mov	sp, r7
 80079cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d0:	4770      	bx	lr

080079d2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80079d2:	b480      	push	{r7}
 80079d4:	b085      	sub	sp, #20
 80079d6:	af00      	add	r7, sp, #0
 80079d8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80079e0:	b29b      	uxth	r3, r3
 80079e2:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80079e4:	68fb      	ldr	r3, [r7, #12]
}
 80079e6:	4618      	mov	r0, r3
 80079e8:	3714      	adds	r7, #20
 80079ea:	46bd      	mov	sp, r7
 80079ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f0:	4770      	bx	lr

080079f2 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80079f2:	b480      	push	{r7}
 80079f4:	b08b      	sub	sp, #44	@ 0x2c
 80079f6:	af00      	add	r7, sp, #0
 80079f8:	60f8      	str	r0, [r7, #12]
 80079fa:	60b9      	str	r1, [r7, #8]
 80079fc:	4611      	mov	r1, r2
 80079fe:	461a      	mov	r2, r3
 8007a00:	460b      	mov	r3, r1
 8007a02:	80fb      	strh	r3, [r7, #6]
 8007a04:	4613      	mov	r3, r2
 8007a06:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007a08:	88bb      	ldrh	r3, [r7, #4]
 8007a0a:	3301      	adds	r3, #1
 8007a0c:	085b      	lsrs	r3, r3, #1
 8007a0e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007a14:	68bb      	ldr	r3, [r7, #8]
 8007a16:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007a18:	88fa      	ldrh	r2, [r7, #6]
 8007a1a:	697b      	ldr	r3, [r7, #20]
 8007a1c:	4413      	add	r3, r2
 8007a1e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007a22:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007a24:	69bb      	ldr	r3, [r7, #24]
 8007a26:	627b      	str	r3, [r7, #36]	@ 0x24
 8007a28:	e01b      	b.n	8007a62 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 8007a2a:	69fb      	ldr	r3, [r7, #28]
 8007a2c:	781b      	ldrb	r3, [r3, #0]
 8007a2e:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8007a30:	69fb      	ldr	r3, [r7, #28]
 8007a32:	3301      	adds	r3, #1
 8007a34:	781b      	ldrb	r3, [r3, #0]
 8007a36:	021b      	lsls	r3, r3, #8
 8007a38:	b21a      	sxth	r2, r3
 8007a3a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007a3e:	4313      	orrs	r3, r2
 8007a40:	b21b      	sxth	r3, r3
 8007a42:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8007a44:	6a3b      	ldr	r3, [r7, #32]
 8007a46:	8a7a      	ldrh	r2, [r7, #18]
 8007a48:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007a4a:	6a3b      	ldr	r3, [r7, #32]
 8007a4c:	3302      	adds	r3, #2
 8007a4e:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8007a50:	69fb      	ldr	r3, [r7, #28]
 8007a52:	3301      	adds	r3, #1
 8007a54:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8007a56:	69fb      	ldr	r3, [r7, #28]
 8007a58:	3301      	adds	r3, #1
 8007a5a:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8007a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a5e:	3b01      	subs	r3, #1
 8007a60:	627b      	str	r3, [r7, #36]	@ 0x24
 8007a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d1e0      	bne.n	8007a2a <USB_WritePMA+0x38>
  }
}
 8007a68:	bf00      	nop
 8007a6a:	bf00      	nop
 8007a6c:	372c      	adds	r7, #44	@ 0x2c
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a74:	4770      	bx	lr

08007a76 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007a76:	b480      	push	{r7}
 8007a78:	b08b      	sub	sp, #44	@ 0x2c
 8007a7a:	af00      	add	r7, sp, #0
 8007a7c:	60f8      	str	r0, [r7, #12]
 8007a7e:	60b9      	str	r1, [r7, #8]
 8007a80:	4611      	mov	r1, r2
 8007a82:	461a      	mov	r2, r3
 8007a84:	460b      	mov	r3, r1
 8007a86:	80fb      	strh	r3, [r7, #6]
 8007a88:	4613      	mov	r3, r2
 8007a8a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007a8c:	88bb      	ldrh	r3, [r7, #4]
 8007a8e:	085b      	lsrs	r3, r3, #1
 8007a90:	b29b      	uxth	r3, r3
 8007a92:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007a98:	68bb      	ldr	r3, [r7, #8]
 8007a9a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007a9c:	88fa      	ldrh	r2, [r7, #6]
 8007a9e:	697b      	ldr	r3, [r7, #20]
 8007aa0:	4413      	add	r3, r2
 8007aa2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007aa6:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007aa8:	69bb      	ldr	r3, [r7, #24]
 8007aaa:	627b      	str	r3, [r7, #36]	@ 0x24
 8007aac:	e018      	b.n	8007ae0 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8007aae:	6a3b      	ldr	r3, [r7, #32]
 8007ab0:	881b      	ldrh	r3, [r3, #0]
 8007ab2:	b29b      	uxth	r3, r3
 8007ab4:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007ab6:	6a3b      	ldr	r3, [r7, #32]
 8007ab8:	3302      	adds	r3, #2
 8007aba:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007abc:	693b      	ldr	r3, [r7, #16]
 8007abe:	b2da      	uxtb	r2, r3
 8007ac0:	69fb      	ldr	r3, [r7, #28]
 8007ac2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007ac4:	69fb      	ldr	r3, [r7, #28]
 8007ac6:	3301      	adds	r3, #1
 8007ac8:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8007aca:	693b      	ldr	r3, [r7, #16]
 8007acc:	0a1b      	lsrs	r3, r3, #8
 8007ace:	b2da      	uxtb	r2, r3
 8007ad0:	69fb      	ldr	r3, [r7, #28]
 8007ad2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007ad4:	69fb      	ldr	r3, [r7, #28]
 8007ad6:	3301      	adds	r3, #1
 8007ad8:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8007ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007adc:	3b01      	subs	r3, #1
 8007ade:	627b      	str	r3, [r7, #36]	@ 0x24
 8007ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d1e3      	bne.n	8007aae <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8007ae6:	88bb      	ldrh	r3, [r7, #4]
 8007ae8:	f003 0301 	and.w	r3, r3, #1
 8007aec:	b29b      	uxth	r3, r3
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d007      	beq.n	8007b02 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8007af2:	6a3b      	ldr	r3, [r7, #32]
 8007af4:	881b      	ldrh	r3, [r3, #0]
 8007af6:	b29b      	uxth	r3, r3
 8007af8:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007afa:	693b      	ldr	r3, [r7, #16]
 8007afc:	b2da      	uxtb	r2, r3
 8007afe:	69fb      	ldr	r3, [r7, #28]
 8007b00:	701a      	strb	r2, [r3, #0]
  }
}
 8007b02:	bf00      	nop
 8007b04:	372c      	adds	r7, #44	@ 0x2c
 8007b06:	46bd      	mov	sp, r7
 8007b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0c:	4770      	bx	lr

08007b0e <main>:
 */

#include "main.h"

int main(void)
{
 8007b0e:	b580      	push	{r7, lr}
 8007b10:	af00      	add	r7, sp, #0
  hwInit();
 8007b12:	f7fb f96f 	bl	8002df4 <hwInit>
  apInit();
 8007b16:	f7f8 fb7f 	bl	8000218 <apInit>
  apMain();
 8007b1a:	f7f8 fb85 	bl	8000228 <apMain>

  return 0;
 8007b1e:	2300      	movs	r3, #0
}
 8007b20:	4618      	mov	r0, r3
 8007b22:	bd80      	pop	{r7, pc}

08007b24 <memset>:
 8007b24:	4402      	add	r2, r0
 8007b26:	4603      	mov	r3, r0
 8007b28:	4293      	cmp	r3, r2
 8007b2a:	d100      	bne.n	8007b2e <memset+0xa>
 8007b2c:	4770      	bx	lr
 8007b2e:	f803 1b01 	strb.w	r1, [r3], #1
 8007b32:	e7f9      	b.n	8007b28 <memset+0x4>

08007b34 <__libc_init_array>:
 8007b34:	b570      	push	{r4, r5, r6, lr}
 8007b36:	4d0d      	ldr	r5, [pc, #52]	@ (8007b6c <__libc_init_array+0x38>)
 8007b38:	4c0d      	ldr	r4, [pc, #52]	@ (8007b70 <__libc_init_array+0x3c>)
 8007b3a:	1b64      	subs	r4, r4, r5
 8007b3c:	10a4      	asrs	r4, r4, #2
 8007b3e:	2600      	movs	r6, #0
 8007b40:	42a6      	cmp	r6, r4
 8007b42:	d109      	bne.n	8007b58 <__libc_init_array+0x24>
 8007b44:	4d0b      	ldr	r5, [pc, #44]	@ (8007b74 <__libc_init_array+0x40>)
 8007b46:	4c0c      	ldr	r4, [pc, #48]	@ (8007b78 <__libc_init_array+0x44>)
 8007b48:	f000 f818 	bl	8007b7c <_init>
 8007b4c:	1b64      	subs	r4, r4, r5
 8007b4e:	10a4      	asrs	r4, r4, #2
 8007b50:	2600      	movs	r6, #0
 8007b52:	42a6      	cmp	r6, r4
 8007b54:	d105      	bne.n	8007b62 <__libc_init_array+0x2e>
 8007b56:	bd70      	pop	{r4, r5, r6, pc}
 8007b58:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b5c:	4798      	blx	r3
 8007b5e:	3601      	adds	r6, #1
 8007b60:	e7ee      	b.n	8007b40 <__libc_init_array+0xc>
 8007b62:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b66:	4798      	blx	r3
 8007b68:	3601      	adds	r6, #1
 8007b6a:	e7f2      	b.n	8007b52 <__libc_init_array+0x1e>
 8007b6c:	08007c08 	.word	0x08007c08
 8007b70:	08007c08 	.word	0x08007c08
 8007b74:	08007c08 	.word	0x08007c08
 8007b78:	08007c0c 	.word	0x08007c0c

08007b7c <_init>:
 8007b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b7e:	bf00      	nop
 8007b80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b82:	bc08      	pop	{r3}
 8007b84:	469e      	mov	lr, r3
 8007b86:	4770      	bx	lr

08007b88 <_fini>:
 8007b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b8a:	bf00      	nop
 8007b8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b8e:	bc08      	pop	{r3}
 8007b90:	469e      	mov	lr, r3
 8007b92:	4770      	bx	lr
