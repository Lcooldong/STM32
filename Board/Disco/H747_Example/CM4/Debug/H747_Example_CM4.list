
H747_Example_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004854  08100298  08100298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08104aec  08104aec  00005aec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08104afc  08104afc  00005afc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  08104b00  08104b00  00005b00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000010  10000000  08104b04  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000084  10000010  08104b14  00006010  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  10000094  08104b14  00006094  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000c4e4  00000000  00000000  00006040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00001b9c  00000000  00000000  00012524  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000bb0  00000000  00000000  000140c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 000008ca  00000000  00000000  00014c70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003ef85  00000000  00000000  0001553a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000d822  00000000  00000000  000544bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    001a01ae  00000000  00000000  00061ce1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  00201e8f  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000030a4  00000000  00000000  00201ed4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000067  00000000  00000000  00204f78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08100298 <__do_global_dtors_aux>:
 8100298:	b510      	push	{r4, lr}
 810029a:	4c05      	ldr	r4, [pc, #20]	@ (81002b0 <__do_global_dtors_aux+0x18>)
 810029c:	7823      	ldrb	r3, [r4, #0]
 810029e:	b933      	cbnz	r3, 81002ae <__do_global_dtors_aux+0x16>
 81002a0:	4b04      	ldr	r3, [pc, #16]	@ (81002b4 <__do_global_dtors_aux+0x1c>)
 81002a2:	b113      	cbz	r3, 81002aa <__do_global_dtors_aux+0x12>
 81002a4:	4804      	ldr	r0, [pc, #16]	@ (81002b8 <__do_global_dtors_aux+0x20>)
 81002a6:	f3af 8000 	nop.w
 81002aa:	2301      	movs	r3, #1
 81002ac:	7023      	strb	r3, [r4, #0]
 81002ae:	bd10      	pop	{r4, pc}
 81002b0:	10000010 	.word	0x10000010
 81002b4:	00000000 	.word	0x00000000
 81002b8:	08104ad4 	.word	0x08104ad4

081002bc <frame_dummy>:
 81002bc:	b508      	push	{r3, lr}
 81002be:	4b03      	ldr	r3, [pc, #12]	@ (81002cc <frame_dummy+0x10>)
 81002c0:	b11b      	cbz	r3, 81002ca <frame_dummy+0xe>
 81002c2:	4903      	ldr	r1, [pc, #12]	@ (81002d0 <frame_dummy+0x14>)
 81002c4:	4803      	ldr	r0, [pc, #12]	@ (81002d4 <frame_dummy+0x18>)
 81002c6:	f3af 8000 	nop.w
 81002ca:	bd08      	pop	{r3, pc}
 81002cc:	00000000 	.word	0x00000000
 81002d0:	10000014 	.word	0x10000014
 81002d4:	08104ad4 	.word	0x08104ad4

081002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 81002d8:	b480      	push	{r7}
 81002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 81002dc:	4b09      	ldr	r3, [pc, #36]	@ (8100304 <SystemInit+0x2c>)
 81002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 81002e2:	4a08      	ldr	r2, [pc, #32]	@ (8100304 <SystemInit+0x2c>)
 81002e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 81002e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 81002ec:	4b05      	ldr	r3, [pc, #20]	@ (8100304 <SystemInit+0x2c>)
 81002ee:	691b      	ldr	r3, [r3, #16]
 81002f0:	4a04      	ldr	r2, [pc, #16]	@ (8100304 <SystemInit+0x2c>)
 81002f2:	f043 0310 	orr.w	r3, r3, #16
 81002f6:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 81002f8:	bf00      	nop
 81002fa:	46bd      	mov	sp, r7
 81002fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100300:	4770      	bx	lr
 8100302:	bf00      	nop
 8100304:	e000ed00 	.word	0xe000ed00

08100308 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8100308:	b580      	push	{r7, lr}
 810030a:	b082      	sub	sp, #8
 810030c:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 810030e:	4b1c      	ldr	r3, [pc, #112]	@ (8100380 <main+0x78>)
 8100310:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100314:	4a1a      	ldr	r2, [pc, #104]	@ (8100380 <main+0x78>)
 8100316:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 810031a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810031e:	4b18      	ldr	r3, [pc, #96]	@ (8100380 <main+0x78>)
 8100320:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100324:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8100328:	607b      	str	r3, [r7, #4]
 810032a:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 810032c:	2001      	movs	r0, #1
 810032e:	f001 fc0b 	bl	8101b48 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 8100332:	f001 fc95 	bl	8101c60 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 8100336:	2201      	movs	r2, #1
 8100338:	2102      	movs	r1, #2
 810033a:	2000      	movs	r0, #0
 810033c:	f001 fc16 	bl	8101b6c <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100340:	4b10      	ldr	r3, [pc, #64]	@ (8100384 <main+0x7c>)
 8100342:	681b      	ldr	r3, [r3, #0]
 8100344:	091b      	lsrs	r3, r3, #4
 8100346:	f003 030f 	and.w	r3, r3, #15
 810034a:	2b07      	cmp	r3, #7
 810034c:	d108      	bne.n	8100360 <main+0x58>
 810034e:	4b0e      	ldr	r3, [pc, #56]	@ (8100388 <main+0x80>)
 8100350:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8100354:	4a0c      	ldr	r2, [pc, #48]	@ (8100388 <main+0x80>)
 8100356:	f043 0301 	orr.w	r3, r3, #1
 810035a:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
 810035e:	e007      	b.n	8100370 <main+0x68>
 8100360:	4b09      	ldr	r3, [pc, #36]	@ (8100388 <main+0x80>)
 8100362:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8100366:	4a08      	ldr	r2, [pc, #32]	@ (8100388 <main+0x80>)
 8100368:	f043 0301 	orr.w	r3, r3, #1
 810036c:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8100370:	f000 f97e 	bl	8100670 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8100374:	f000 f882 	bl	810047c <MX_GPIO_Init>
  MX_ADC1_Init();
 8100378:	f000 f808 	bl	810038c <MX_ADC1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 810037c:	bf00      	nop
 810037e:	e7fd      	b.n	810037c <main+0x74>
 8100380:	58024400 	.word	0x58024400
 8100384:	e000ed00 	.word	0xe000ed00
 8100388:	58026400 	.word	0x58026400

0810038c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 810038c:	b580      	push	{r7, lr}
 810038e:	b08a      	sub	sp, #40	@ 0x28
 8100390:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8100392:	f107 031c 	add.w	r3, r7, #28
 8100396:	2200      	movs	r2, #0
 8100398:	601a      	str	r2, [r3, #0]
 810039a:	605a      	str	r2, [r3, #4]
 810039c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 810039e:	463b      	mov	r3, r7
 81003a0:	2200      	movs	r2, #0
 81003a2:	601a      	str	r2, [r3, #0]
 81003a4:	605a      	str	r2, [r3, #4]
 81003a6:	609a      	str	r2, [r3, #8]
 81003a8:	60da      	str	r2, [r3, #12]
 81003aa:	611a      	str	r2, [r3, #16]
 81003ac:	615a      	str	r2, [r3, #20]
 81003ae:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 81003b0:	4b2f      	ldr	r3, [pc, #188]	@ (8100470 <MX_ADC1_Init+0xe4>)
 81003b2:	4a30      	ldr	r2, [pc, #192]	@ (8100474 <MX_ADC1_Init+0xe8>)
 81003b4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 81003b6:	4b2e      	ldr	r3, [pc, #184]	@ (8100470 <MX_ADC1_Init+0xe4>)
 81003b8:	2200      	movs	r2, #0
 81003ba:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 81003bc:	4b2c      	ldr	r3, [pc, #176]	@ (8100470 <MX_ADC1_Init+0xe4>)
 81003be:	2200      	movs	r2, #0
 81003c0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 81003c2:	4b2b      	ldr	r3, [pc, #172]	@ (8100470 <MX_ADC1_Init+0xe4>)
 81003c4:	2200      	movs	r2, #0
 81003c6:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 81003c8:	4b29      	ldr	r3, [pc, #164]	@ (8100470 <MX_ADC1_Init+0xe4>)
 81003ca:	2204      	movs	r2, #4
 81003cc:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 81003ce:	4b28      	ldr	r3, [pc, #160]	@ (8100470 <MX_ADC1_Init+0xe4>)
 81003d0:	2200      	movs	r2, #0
 81003d2:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 81003d4:	4b26      	ldr	r3, [pc, #152]	@ (8100470 <MX_ADC1_Init+0xe4>)
 81003d6:	2200      	movs	r2, #0
 81003d8:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 81003da:	4b25      	ldr	r3, [pc, #148]	@ (8100470 <MX_ADC1_Init+0xe4>)
 81003dc:	2201      	movs	r2, #1
 81003de:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 81003e0:	4b23      	ldr	r3, [pc, #140]	@ (8100470 <MX_ADC1_Init+0xe4>)
 81003e2:	2200      	movs	r2, #0
 81003e4:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 81003e6:	4b22      	ldr	r3, [pc, #136]	@ (8100470 <MX_ADC1_Init+0xe4>)
 81003e8:	2200      	movs	r2, #0
 81003ea:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 81003ec:	4b20      	ldr	r3, [pc, #128]	@ (8100470 <MX_ADC1_Init+0xe4>)
 81003ee:	2200      	movs	r2, #0
 81003f0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 81003f2:	4b1f      	ldr	r3, [pc, #124]	@ (8100470 <MX_ADC1_Init+0xe4>)
 81003f4:	2200      	movs	r2, #0
 81003f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 81003f8:	4b1d      	ldr	r3, [pc, #116]	@ (8100470 <MX_ADC1_Init+0xe4>)
 81003fa:	2200      	movs	r2, #0
 81003fc:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 81003fe:	4b1c      	ldr	r3, [pc, #112]	@ (8100470 <MX_ADC1_Init+0xe4>)
 8100400:	2200      	movs	r2, #0
 8100402:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8100404:	4b1a      	ldr	r3, [pc, #104]	@ (8100470 <MX_ADC1_Init+0xe4>)
 8100406:	2200      	movs	r2, #0
 8100408:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 810040c:	4818      	ldr	r0, [pc, #96]	@ (8100470 <MX_ADC1_Init+0xe4>)
 810040e:	f000 fb91 	bl	8100b34 <HAL_ADC_Init>
 8100412:	4603      	mov	r3, r0
 8100414:	2b00      	cmp	r3, #0
 8100416:	d001      	beq.n	810041c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8100418:	f000 f84a 	bl	81004b0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 810041c:	2300      	movs	r3, #0
 810041e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8100420:	f107 031c 	add.w	r3, r7, #28
 8100424:	4619      	mov	r1, r3
 8100426:	4812      	ldr	r0, [pc, #72]	@ (8100470 <MX_ADC1_Init+0xe4>)
 8100428:	f001 f9b4 	bl	8101794 <HAL_ADCEx_MultiModeConfigChannel>
 810042c:	4603      	mov	r3, r0
 810042e:	2b00      	cmp	r3, #0
 8100430:	d001      	beq.n	8100436 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8100432:	f000 f83d 	bl	81004b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8100436:	4b10      	ldr	r3, [pc, #64]	@ (8100478 <MX_ADC1_Init+0xec>)
 8100438:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 810043a:	2306      	movs	r3, #6
 810043c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 810043e:	2300      	movs	r3, #0
 8100440:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8100442:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8100446:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8100448:	2304      	movs	r3, #4
 810044a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 810044c:	2300      	movs	r3, #0
 810044e:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8100450:	2300      	movs	r3, #0
 8100452:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8100454:	463b      	mov	r3, r7
 8100456:	4619      	mov	r1, r3
 8100458:	4805      	ldr	r0, [pc, #20]	@ (8100470 <MX_ADC1_Init+0xe4>)
 810045a:	f000 fd0d 	bl	8100e78 <HAL_ADC_ConfigChannel>
 810045e:	4603      	mov	r3, r0
 8100460:	2b00      	cmp	r3, #0
 8100462:	d001      	beq.n	8100468 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8100464:	f000 f824 	bl	81004b0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8100468:	bf00      	nop
 810046a:	3728      	adds	r7, #40	@ 0x28
 810046c:	46bd      	mov	sp, r7
 810046e:	bd80      	pop	{r7, pc}
 8100470:	1000002c 	.word	0x1000002c
 8100474:	40022000 	.word	0x40022000
 8100478:	04300002 	.word	0x04300002

0810047c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 810047c:	b480      	push	{r7}
 810047e:	b083      	sub	sp, #12
 8100480:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8100482:	4b0a      	ldr	r3, [pc, #40]	@ (81004ac <MX_GPIO_Init+0x30>)
 8100484:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100488:	4a08      	ldr	r2, [pc, #32]	@ (81004ac <MX_GPIO_Init+0x30>)
 810048a:	f043 0301 	orr.w	r3, r3, #1
 810048e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100492:	4b06      	ldr	r3, [pc, #24]	@ (81004ac <MX_GPIO_Init+0x30>)
 8100494:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100498:	f003 0301 	and.w	r3, r3, #1
 810049c:	607b      	str	r3, [r7, #4]
 810049e:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 81004a0:	bf00      	nop
 81004a2:	370c      	adds	r7, #12
 81004a4:	46bd      	mov	sp, r7
 81004a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81004aa:	4770      	bx	lr
 81004ac:	58024400 	.word	0x58024400

081004b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 81004b0:	b480      	push	{r7}
 81004b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 81004b4:	b672      	cpsid	i
}
 81004b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 81004b8:	bf00      	nop
 81004ba:	e7fd      	b.n	81004b8 <Error_Handler+0x8>

081004bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 81004bc:	b480      	push	{r7}
 81004be:	b083      	sub	sp, #12
 81004c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 81004c2:	4b0a      	ldr	r3, [pc, #40]	@ (81004ec <HAL_MspInit+0x30>)
 81004c4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 81004c8:	4a08      	ldr	r2, [pc, #32]	@ (81004ec <HAL_MspInit+0x30>)
 81004ca:	f043 0302 	orr.w	r3, r3, #2
 81004ce:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 81004d2:	4b06      	ldr	r3, [pc, #24]	@ (81004ec <HAL_MspInit+0x30>)
 81004d4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 81004d8:	f003 0302 	and.w	r3, r3, #2
 81004dc:	607b      	str	r3, [r7, #4]
 81004de:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 81004e0:	bf00      	nop
 81004e2:	370c      	adds	r7, #12
 81004e4:	46bd      	mov	sp, r7
 81004e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81004ea:	4770      	bx	lr
 81004ec:	58024400 	.word	0x58024400

081004f0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 81004f0:	b580      	push	{r7, lr}
 81004f2:	b0b6      	sub	sp, #216	@ 0xd8
 81004f4:	af00      	add	r7, sp, #0
 81004f6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 81004f8:	f107 0310 	add.w	r3, r7, #16
 81004fc:	22c8      	movs	r2, #200	@ 0xc8
 81004fe:	2100      	movs	r1, #0
 8100500:	4618      	mov	r0, r3
 8100502:	f004 fabb 	bl	8104a7c <memset>
  if(hadc->Instance==ADC1)
 8100506:	687b      	ldr	r3, [r7, #4]
 8100508:	681b      	ldr	r3, [r3, #0]
 810050a:	4a2a      	ldr	r2, [pc, #168]	@ (81005b4 <HAL_ADC_MspInit+0xc4>)
 810050c:	4293      	cmp	r3, r2
 810050e:	d14d      	bne.n	81005ac <HAL_ADC_MspInit+0xbc>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8100510:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8100514:	f04f 0300 	mov.w	r3, #0
 8100518:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 810051c:	2304      	movs	r3, #4
 810051e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 9;
 8100520:	2309      	movs	r3, #9
 8100522:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8100524:	2302      	movs	r3, #2
 8100526:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8100528:	2302      	movs	r3, #2
 810052a:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 810052c:	2302      	movs	r3, #2
 810052e:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8100530:	23c0      	movs	r3, #192	@ 0xc0
 8100532:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8100534:	2320      	movs	r3, #32
 8100536:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 3072;
 8100538:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 810053c:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 810053e:	2300      	movs	r3, #0
 8100540:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8100544:	f107 0310 	add.w	r3, r7, #16
 8100548:	4618      	mov	r0, r3
 810054a:	f001 fd59 	bl	8102000 <HAL_RCCEx_PeriphCLKConfig>
 810054e:	4603      	mov	r3, r0
 8100550:	2b00      	cmp	r3, #0
 8100552:	d001      	beq.n	8100558 <HAL_ADC_MspInit+0x68>
    {
      Error_Handler();
 8100554:	f7ff ffac 	bl	81004b0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8100558:	4b17      	ldr	r3, [pc, #92]	@ (81005b8 <HAL_ADC_MspInit+0xc8>)
 810055a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 810055e:	4a16      	ldr	r2, [pc, #88]	@ (81005b8 <HAL_ADC_MspInit+0xc8>)
 8100560:	f043 0320 	orr.w	r3, r3, #32
 8100564:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8100568:	4b13      	ldr	r3, [pc, #76]	@ (81005b8 <HAL_ADC_MspInit+0xc8>)
 810056a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 810056e:	f003 0320 	and.w	r3, r3, #32
 8100572:	60fb      	str	r3, [r7, #12]
 8100574:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8100576:	4b10      	ldr	r3, [pc, #64]	@ (81005b8 <HAL_ADC_MspInit+0xc8>)
 8100578:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810057c:	4a0e      	ldr	r2, [pc, #56]	@ (81005b8 <HAL_ADC_MspInit+0xc8>)
 810057e:	f043 0301 	orr.w	r3, r3, #1
 8100582:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100586:	4b0c      	ldr	r3, [pc, #48]	@ (81005b8 <HAL_ADC_MspInit+0xc8>)
 8100588:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810058c:	f003 0301 	and.w	r3, r3, #1
 8100590:	60bb      	str	r3, [r7, #8]
 8100592:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0_C     ------> ADC1_INP0
    PA1_C     ------> ADC1_INP1
    */
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 8100594:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 8100598:	f04f 7080 	mov.w	r0, #16777216	@ 0x1000000
 810059c:	f000 f928 	bl	81007f0 <HAL_SYSCFG_AnalogSwitchConfig>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 81005a0:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 81005a4:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 81005a8:	f000 f922 	bl	81007f0 <HAL_SYSCFG_AnalogSwitchConfig>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 81005ac:	bf00      	nop
 81005ae:	37d8      	adds	r7, #216	@ 0xd8
 81005b0:	46bd      	mov	sp, r7
 81005b2:	bd80      	pop	{r7, pc}
 81005b4:	40022000 	.word	0x40022000
 81005b8:	58024400 	.word	0x58024400

081005bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 81005bc:	b480      	push	{r7}
 81005be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 81005c0:	bf00      	nop
 81005c2:	e7fd      	b.n	81005c0 <NMI_Handler+0x4>

081005c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 81005c4:	b480      	push	{r7}
 81005c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 81005c8:	bf00      	nop
 81005ca:	e7fd      	b.n	81005c8 <HardFault_Handler+0x4>

081005cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 81005cc:	b480      	push	{r7}
 81005ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 81005d0:	bf00      	nop
 81005d2:	e7fd      	b.n	81005d0 <MemManage_Handler+0x4>

081005d4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 81005d4:	b480      	push	{r7}
 81005d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 81005d8:	bf00      	nop
 81005da:	e7fd      	b.n	81005d8 <BusFault_Handler+0x4>

081005dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 81005dc:	b480      	push	{r7}
 81005de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 81005e0:	bf00      	nop
 81005e2:	e7fd      	b.n	81005e0 <UsageFault_Handler+0x4>

081005e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 81005e4:	b480      	push	{r7}
 81005e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 81005e8:	bf00      	nop
 81005ea:	46bd      	mov	sp, r7
 81005ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 81005f0:	4770      	bx	lr

081005f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 81005f2:	b480      	push	{r7}
 81005f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 81005f6:	bf00      	nop
 81005f8:	46bd      	mov	sp, r7
 81005fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81005fe:	4770      	bx	lr

08100600 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8100600:	b480      	push	{r7}
 8100602:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8100604:	bf00      	nop
 8100606:	46bd      	mov	sp, r7
 8100608:	f85d 7b04 	ldr.w	r7, [sp], #4
 810060c:	4770      	bx	lr

0810060e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 810060e:	b580      	push	{r7, lr}
 8100610:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8100612:	f000 f8c1 	bl	8100798 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8100616:	bf00      	nop
 8100618:	bd80      	pop	{r7, pc}
	...

0810061c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 810061c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8100654 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8100620:	f7ff fe5a 	bl	81002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8100624:	480c      	ldr	r0, [pc, #48]	@ (8100658 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8100626:	490d      	ldr	r1, [pc, #52]	@ (810065c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8100628:	4a0d      	ldr	r2, [pc, #52]	@ (8100660 <LoopFillZerobss+0x1a>)
  movs r3, #0
 810062a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 810062c:	e002      	b.n	8100634 <LoopCopyDataInit>

0810062e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 810062e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8100630:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8100632:	3304      	adds	r3, #4

08100634 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8100634:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8100636:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8100638:	d3f9      	bcc.n	810062e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 810063a:	4a0a      	ldr	r2, [pc, #40]	@ (8100664 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 810063c:	4c0a      	ldr	r4, [pc, #40]	@ (8100668 <LoopFillZerobss+0x22>)
  movs r3, #0
 810063e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8100640:	e001      	b.n	8100646 <LoopFillZerobss>

08100642 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8100642:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8100644:	3204      	adds	r2, #4

08100646 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8100646:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8100648:	d3fb      	bcc.n	8100642 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 810064a:	f004 fa1f 	bl	8104a8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 810064e:	f7ff fe5b 	bl	8100308 <main>
  bx  lr
 8100652:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8100654:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8100658:	10000000 	.word	0x10000000
  ldr r1, =_edata
 810065c:	10000010 	.word	0x10000010
  ldr r2, =_sidata
 8100660:	08104b04 	.word	0x08104b04
  ldr r2, =_sbss
 8100664:	10000010 	.word	0x10000010
  ldr r4, =_ebss
 8100668:	10000094 	.word	0x10000094

0810066c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 810066c:	e7fe      	b.n	810066c <ADC3_IRQHandler>
	...

08100670 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8100670:	b580      	push	{r7, lr}
 8100672:	b082      	sub	sp, #8
 8100674:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8100676:	4b28      	ldr	r3, [pc, #160]	@ (8100718 <HAL_Init+0xa8>)
 8100678:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 810067c:	4a26      	ldr	r2, [pc, #152]	@ (8100718 <HAL_Init+0xa8>)
 810067e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8100682:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8100686:	4b24      	ldr	r3, [pc, #144]	@ (8100718 <HAL_Init+0xa8>)
 8100688:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 810068c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8100690:	603b      	str	r3, [r7, #0]
 8100692:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8100694:	4b21      	ldr	r3, [pc, #132]	@ (810071c <HAL_Init+0xac>)
 8100696:	681b      	ldr	r3, [r3, #0]
 8100698:	f423 237f 	bic.w	r3, r3, #1044480	@ 0xff000
 810069c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 81006a0:	4a1e      	ldr	r2, [pc, #120]	@ (810071c <HAL_Init+0xac>)
 81006a2:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 81006a6:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 81006a8:	4b1c      	ldr	r3, [pc, #112]	@ (810071c <HAL_Init+0xac>)
 81006aa:	681b      	ldr	r3, [r3, #0]
 81006ac:	4a1b      	ldr	r2, [pc, #108]	@ (810071c <HAL_Init+0xac>)
 81006ae:	f043 0301 	orr.w	r3, r3, #1
 81006b2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 81006b4:	2003      	movs	r0, #3
 81006b6:	f001 fa01 	bl	8101abc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 81006ba:	f001 fadf 	bl	8101c7c <HAL_RCC_GetSysClockFreq>
 81006be:	4602      	mov	r2, r0
 81006c0:	4b15      	ldr	r3, [pc, #84]	@ (8100718 <HAL_Init+0xa8>)
 81006c2:	699b      	ldr	r3, [r3, #24]
 81006c4:	0a1b      	lsrs	r3, r3, #8
 81006c6:	f003 030f 	and.w	r3, r3, #15
 81006ca:	4915      	ldr	r1, [pc, #84]	@ (8100720 <HAL_Init+0xb0>)
 81006cc:	5ccb      	ldrb	r3, [r1, r3]
 81006ce:	f003 031f 	and.w	r3, r3, #31
 81006d2:	fa22 f303 	lsr.w	r3, r2, r3
 81006d6:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 81006d8:	4b0f      	ldr	r3, [pc, #60]	@ (8100718 <HAL_Init+0xa8>)
 81006da:	699b      	ldr	r3, [r3, #24]
 81006dc:	f003 030f 	and.w	r3, r3, #15
 81006e0:	4a0f      	ldr	r2, [pc, #60]	@ (8100720 <HAL_Init+0xb0>)
 81006e2:	5cd3      	ldrb	r3, [r2, r3]
 81006e4:	f003 031f 	and.w	r3, r3, #31
 81006e8:	687a      	ldr	r2, [r7, #4]
 81006ea:	fa22 f303 	lsr.w	r3, r2, r3
 81006ee:	4a0d      	ldr	r2, [pc, #52]	@ (8100724 <HAL_Init+0xb4>)
 81006f0:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 81006f2:	4b0c      	ldr	r3, [pc, #48]	@ (8100724 <HAL_Init+0xb4>)
 81006f4:	681b      	ldr	r3, [r3, #0]
 81006f6:	4a0c      	ldr	r2, [pc, #48]	@ (8100728 <HAL_Init+0xb8>)
 81006f8:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 81006fa:	2000      	movs	r0, #0
 81006fc:	f000 f816 	bl	810072c <HAL_InitTick>
 8100700:	4603      	mov	r3, r0
 8100702:	2b00      	cmp	r3, #0
 8100704:	d001      	beq.n	810070a <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8100706:	2301      	movs	r3, #1
 8100708:	e002      	b.n	8100710 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 810070a:	f7ff fed7 	bl	81004bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 810070e:	2300      	movs	r3, #0
}
 8100710:	4618      	mov	r0, r3
 8100712:	3708      	adds	r7, #8
 8100714:	46bd      	mov	sp, r7
 8100716:	bd80      	pop	{r7, pc}
 8100718:	58024400 	.word	0x58024400
 810071c:	40024400 	.word	0x40024400
 8100720:	08104aec 	.word	0x08104aec
 8100724:	10000004 	.word	0x10000004
 8100728:	10000000 	.word	0x10000000

0810072c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 810072c:	b580      	push	{r7, lr}
 810072e:	b082      	sub	sp, #8
 8100730:	af00      	add	r7, sp, #0
 8100732:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8100734:	4b15      	ldr	r3, [pc, #84]	@ (810078c <HAL_InitTick+0x60>)
 8100736:	781b      	ldrb	r3, [r3, #0]
 8100738:	2b00      	cmp	r3, #0
 810073a:	d101      	bne.n	8100740 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 810073c:	2301      	movs	r3, #1
 810073e:	e021      	b.n	8100784 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8100740:	4b13      	ldr	r3, [pc, #76]	@ (8100790 <HAL_InitTick+0x64>)
 8100742:	681a      	ldr	r2, [r3, #0]
 8100744:	4b11      	ldr	r3, [pc, #68]	@ (810078c <HAL_InitTick+0x60>)
 8100746:	781b      	ldrb	r3, [r3, #0]
 8100748:	4619      	mov	r1, r3
 810074a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 810074e:	fbb3 f3f1 	udiv	r3, r3, r1
 8100752:	fbb2 f3f3 	udiv	r3, r2, r3
 8100756:	4618      	mov	r0, r3
 8100758:	f001 f9d5 	bl	8101b06 <HAL_SYSTICK_Config>
 810075c:	4603      	mov	r3, r0
 810075e:	2b00      	cmp	r3, #0
 8100760:	d001      	beq.n	8100766 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8100762:	2301      	movs	r3, #1
 8100764:	e00e      	b.n	8100784 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8100766:	687b      	ldr	r3, [r7, #4]
 8100768:	2b0f      	cmp	r3, #15
 810076a:	d80a      	bhi.n	8100782 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 810076c:	2200      	movs	r2, #0
 810076e:	6879      	ldr	r1, [r7, #4]
 8100770:	f04f 30ff 	mov.w	r0, #4294967295
 8100774:	f001 f9ad 	bl	8101ad2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8100778:	4a06      	ldr	r2, [pc, #24]	@ (8100794 <HAL_InitTick+0x68>)
 810077a:	687b      	ldr	r3, [r7, #4]
 810077c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 810077e:	2300      	movs	r3, #0
 8100780:	e000      	b.n	8100784 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8100782:	2301      	movs	r3, #1
}
 8100784:	4618      	mov	r0, r3
 8100786:	3708      	adds	r7, #8
 8100788:	46bd      	mov	sp, r7
 810078a:	bd80      	pop	{r7, pc}
 810078c:	1000000c 	.word	0x1000000c
 8100790:	10000000 	.word	0x10000000
 8100794:	10000008 	.word	0x10000008

08100798 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8100798:	b480      	push	{r7}
 810079a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 810079c:	4b06      	ldr	r3, [pc, #24]	@ (81007b8 <HAL_IncTick+0x20>)
 810079e:	781b      	ldrb	r3, [r3, #0]
 81007a0:	461a      	mov	r2, r3
 81007a2:	4b06      	ldr	r3, [pc, #24]	@ (81007bc <HAL_IncTick+0x24>)
 81007a4:	681b      	ldr	r3, [r3, #0]
 81007a6:	4413      	add	r3, r2
 81007a8:	4a04      	ldr	r2, [pc, #16]	@ (81007bc <HAL_IncTick+0x24>)
 81007aa:	6013      	str	r3, [r2, #0]
}
 81007ac:	bf00      	nop
 81007ae:	46bd      	mov	sp, r7
 81007b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81007b4:	4770      	bx	lr
 81007b6:	bf00      	nop
 81007b8:	1000000c 	.word	0x1000000c
 81007bc:	10000090 	.word	0x10000090

081007c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 81007c0:	b480      	push	{r7}
 81007c2:	af00      	add	r7, sp, #0
  return uwTick;
 81007c4:	4b03      	ldr	r3, [pc, #12]	@ (81007d4 <HAL_GetTick+0x14>)
 81007c6:	681b      	ldr	r3, [r3, #0]
}
 81007c8:	4618      	mov	r0, r3
 81007ca:	46bd      	mov	sp, r7
 81007cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81007d0:	4770      	bx	lr
 81007d2:	bf00      	nop
 81007d4:	10000090 	.word	0x10000090

081007d8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 81007d8:	b480      	push	{r7}
 81007da:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 81007dc:	4b03      	ldr	r3, [pc, #12]	@ (81007ec <HAL_GetREVID+0x14>)
 81007de:	681b      	ldr	r3, [r3, #0]
 81007e0:	0c1b      	lsrs	r3, r3, #16
}
 81007e2:	4618      	mov	r0, r3
 81007e4:	46bd      	mov	sp, r7
 81007e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81007ea:	4770      	bx	lr
 81007ec:	5c001000 	.word	0x5c001000

081007f0 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 81007f0:	b480      	push	{r7}
 81007f2:	b083      	sub	sp, #12
 81007f4:	af00      	add	r7, sp, #0
 81007f6:	6078      	str	r0, [r7, #4]
 81007f8:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 81007fa:	4b07      	ldr	r3, [pc, #28]	@ (8100818 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 81007fc:	685a      	ldr	r2, [r3, #4]
 81007fe:	687b      	ldr	r3, [r7, #4]
 8100800:	43db      	mvns	r3, r3
 8100802:	401a      	ands	r2, r3
 8100804:	4904      	ldr	r1, [pc, #16]	@ (8100818 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8100806:	683b      	ldr	r3, [r7, #0]
 8100808:	4313      	orrs	r3, r2
 810080a:	604b      	str	r3, [r1, #4]
}
 810080c:	bf00      	nop
 810080e:	370c      	adds	r7, #12
 8100810:	46bd      	mov	sp, r7
 8100812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100816:	4770      	bx	lr
 8100818:	58000400 	.word	0x58000400

0810081c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 810081c:	b480      	push	{r7}
 810081e:	b083      	sub	sp, #12
 8100820:	af00      	add	r7, sp, #0
 8100822:	6078      	str	r0, [r7, #4]
 8100824:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8100826:	687b      	ldr	r3, [r7, #4]
 8100828:	689b      	ldr	r3, [r3, #8]
 810082a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 810082e:	683b      	ldr	r3, [r7, #0]
 8100830:	431a      	orrs	r2, r3
 8100832:	687b      	ldr	r3, [r7, #4]
 8100834:	609a      	str	r2, [r3, #8]
}
 8100836:	bf00      	nop
 8100838:	370c      	adds	r7, #12
 810083a:	46bd      	mov	sp, r7
 810083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100840:	4770      	bx	lr

08100842 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8100842:	b480      	push	{r7}
 8100844:	b083      	sub	sp, #12
 8100846:	af00      	add	r7, sp, #0
 8100848:	6078      	str	r0, [r7, #4]
 810084a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 810084c:	687b      	ldr	r3, [r7, #4]
 810084e:	689b      	ldr	r3, [r3, #8]
 8100850:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8100854:	683b      	ldr	r3, [r7, #0]
 8100856:	431a      	orrs	r2, r3
 8100858:	687b      	ldr	r3, [r7, #4]
 810085a:	609a      	str	r2, [r3, #8]
}
 810085c:	bf00      	nop
 810085e:	370c      	adds	r7, #12
 8100860:	46bd      	mov	sp, r7
 8100862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100866:	4770      	bx	lr

08100868 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8100868:	b480      	push	{r7}
 810086a:	b083      	sub	sp, #12
 810086c:	af00      	add	r7, sp, #0
 810086e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8100870:	687b      	ldr	r3, [r7, #4]
 8100872:	689b      	ldr	r3, [r3, #8]
 8100874:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8100878:	4618      	mov	r0, r3
 810087a:	370c      	adds	r7, #12
 810087c:	46bd      	mov	sp, r7
 810087e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100882:	4770      	bx	lr

08100884 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8100884:	b480      	push	{r7}
 8100886:	b087      	sub	sp, #28
 8100888:	af00      	add	r7, sp, #0
 810088a:	60f8      	str	r0, [r7, #12]
 810088c:	60b9      	str	r1, [r7, #8]
 810088e:	607a      	str	r2, [r7, #4]
 8100890:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8100892:	68fb      	ldr	r3, [r7, #12]
 8100894:	3360      	adds	r3, #96	@ 0x60
 8100896:	461a      	mov	r2, r3
 8100898:	68bb      	ldr	r3, [r7, #8]
 810089a:	009b      	lsls	r3, r3, #2
 810089c:	4413      	add	r3, r2
 810089e:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 81008a0:	697b      	ldr	r3, [r7, #20]
 81008a2:	681b      	ldr	r3, [r3, #0]
 81008a4:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 81008a8:	687b      	ldr	r3, [r7, #4]
 81008aa:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 81008ae:	683b      	ldr	r3, [r7, #0]
 81008b0:	430b      	orrs	r3, r1
 81008b2:	431a      	orrs	r2, r3
 81008b4:	697b      	ldr	r3, [r7, #20]
 81008b6:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 81008b8:	bf00      	nop
 81008ba:	371c      	adds	r7, #28
 81008bc:	46bd      	mov	sp, r7
 81008be:	f85d 7b04 	ldr.w	r7, [sp], #4
 81008c2:	4770      	bx	lr

081008c4 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 81008c4:	b480      	push	{r7}
 81008c6:	b085      	sub	sp, #20
 81008c8:	af00      	add	r7, sp, #0
 81008ca:	60f8      	str	r0, [r7, #12]
 81008cc:	60b9      	str	r1, [r7, #8]
 81008ce:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 81008d0:	68fb      	ldr	r3, [r7, #12]
 81008d2:	691b      	ldr	r3, [r3, #16]
 81008d4:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 81008d8:	68bb      	ldr	r3, [r7, #8]
 81008da:	f003 031f 	and.w	r3, r3, #31
 81008de:	6879      	ldr	r1, [r7, #4]
 81008e0:	fa01 f303 	lsl.w	r3, r1, r3
 81008e4:	431a      	orrs	r2, r3
 81008e6:	68fb      	ldr	r3, [r7, #12]
 81008e8:	611a      	str	r2, [r3, #16]
}
 81008ea:	bf00      	nop
 81008ec:	3714      	adds	r7, #20
 81008ee:	46bd      	mov	sp, r7
 81008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81008f4:	4770      	bx	lr

081008f6 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 81008f6:	b480      	push	{r7}
 81008f8:	b087      	sub	sp, #28
 81008fa:	af00      	add	r7, sp, #0
 81008fc:	60f8      	str	r0, [r7, #12]
 81008fe:	60b9      	str	r1, [r7, #8]
 8100900:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8100902:	68fb      	ldr	r3, [r7, #12]
 8100904:	3360      	adds	r3, #96	@ 0x60
 8100906:	461a      	mov	r2, r3
 8100908:	68bb      	ldr	r3, [r7, #8]
 810090a:	009b      	lsls	r3, r3, #2
 810090c:	4413      	add	r3, r2
 810090e:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8100910:	697b      	ldr	r3, [r7, #20]
 8100912:	681b      	ldr	r3, [r3, #0]
 8100914:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8100918:	687b      	ldr	r3, [r7, #4]
 810091a:	431a      	orrs	r2, r3
 810091c:	697b      	ldr	r3, [r7, #20]
 810091e:	601a      	str	r2, [r3, #0]
  }
}
 8100920:	bf00      	nop
 8100922:	371c      	adds	r7, #28
 8100924:	46bd      	mov	sp, r7
 8100926:	f85d 7b04 	ldr.w	r7, [sp], #4
 810092a:	4770      	bx	lr

0810092c <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 810092c:	b480      	push	{r7}
 810092e:	b087      	sub	sp, #28
 8100930:	af00      	add	r7, sp, #0
 8100932:	60f8      	str	r0, [r7, #12]
 8100934:	60b9      	str	r1, [r7, #8]
 8100936:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8100938:	68fb      	ldr	r3, [r7, #12]
 810093a:	3330      	adds	r3, #48	@ 0x30
 810093c:	461a      	mov	r2, r3
 810093e:	68bb      	ldr	r3, [r7, #8]
 8100940:	0a1b      	lsrs	r3, r3, #8
 8100942:	009b      	lsls	r3, r3, #2
 8100944:	f003 030c 	and.w	r3, r3, #12
 8100948:	4413      	add	r3, r2
 810094a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 810094c:	697b      	ldr	r3, [r7, #20]
 810094e:	681a      	ldr	r2, [r3, #0]
 8100950:	68bb      	ldr	r3, [r7, #8]
 8100952:	f003 031f 	and.w	r3, r3, #31
 8100956:	211f      	movs	r1, #31
 8100958:	fa01 f303 	lsl.w	r3, r1, r3
 810095c:	43db      	mvns	r3, r3
 810095e:	401a      	ands	r2, r3
 8100960:	687b      	ldr	r3, [r7, #4]
 8100962:	0e9b      	lsrs	r3, r3, #26
 8100964:	f003 011f 	and.w	r1, r3, #31
 8100968:	68bb      	ldr	r3, [r7, #8]
 810096a:	f003 031f 	and.w	r3, r3, #31
 810096e:	fa01 f303 	lsl.w	r3, r1, r3
 8100972:	431a      	orrs	r2, r3
 8100974:	697b      	ldr	r3, [r7, #20]
 8100976:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8100978:	bf00      	nop
 810097a:	371c      	adds	r7, #28
 810097c:	46bd      	mov	sp, r7
 810097e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100982:	4770      	bx	lr

08100984 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8100984:	b480      	push	{r7}
 8100986:	b087      	sub	sp, #28
 8100988:	af00      	add	r7, sp, #0
 810098a:	60f8      	str	r0, [r7, #12]
 810098c:	60b9      	str	r1, [r7, #8]
 810098e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8100990:	68fb      	ldr	r3, [r7, #12]
 8100992:	3314      	adds	r3, #20
 8100994:	461a      	mov	r2, r3
 8100996:	68bb      	ldr	r3, [r7, #8]
 8100998:	0e5b      	lsrs	r3, r3, #25
 810099a:	009b      	lsls	r3, r3, #2
 810099c:	f003 0304 	and.w	r3, r3, #4
 81009a0:	4413      	add	r3, r2
 81009a2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 81009a4:	697b      	ldr	r3, [r7, #20]
 81009a6:	681a      	ldr	r2, [r3, #0]
 81009a8:	68bb      	ldr	r3, [r7, #8]
 81009aa:	0d1b      	lsrs	r3, r3, #20
 81009ac:	f003 031f 	and.w	r3, r3, #31
 81009b0:	2107      	movs	r1, #7
 81009b2:	fa01 f303 	lsl.w	r3, r1, r3
 81009b6:	43db      	mvns	r3, r3
 81009b8:	401a      	ands	r2, r3
 81009ba:	68bb      	ldr	r3, [r7, #8]
 81009bc:	0d1b      	lsrs	r3, r3, #20
 81009be:	f003 031f 	and.w	r3, r3, #31
 81009c2:	6879      	ldr	r1, [r7, #4]
 81009c4:	fa01 f303 	lsl.w	r3, r1, r3
 81009c8:	431a      	orrs	r2, r3
 81009ca:	697b      	ldr	r3, [r7, #20]
 81009cc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 81009ce:	bf00      	nop
 81009d0:	371c      	adds	r7, #28
 81009d2:	46bd      	mov	sp, r7
 81009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81009d8:	4770      	bx	lr
	...

081009dc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 81009dc:	b480      	push	{r7}
 81009de:	b085      	sub	sp, #20
 81009e0:	af00      	add	r7, sp, #0
 81009e2:	60f8      	str	r0, [r7, #12]
 81009e4:	60b9      	str	r1, [r7, #8]
 81009e6:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 81009e8:	68fb      	ldr	r3, [r7, #12]
 81009ea:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 81009ee:	68bb      	ldr	r3, [r7, #8]
 81009f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 81009f4:	43db      	mvns	r3, r3
 81009f6:	401a      	ands	r2, r3
 81009f8:	687b      	ldr	r3, [r7, #4]
 81009fa:	f003 0318 	and.w	r3, r3, #24
 81009fe:	4908      	ldr	r1, [pc, #32]	@ (8100a20 <LL_ADC_SetChannelSingleDiff+0x44>)
 8100a00:	40d9      	lsrs	r1, r3
 8100a02:	68bb      	ldr	r3, [r7, #8]
 8100a04:	400b      	ands	r3, r1
 8100a06:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8100a0a:	431a      	orrs	r2, r3
 8100a0c:	68fb      	ldr	r3, [r7, #12]
 8100a0e:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8100a12:	bf00      	nop
 8100a14:	3714      	adds	r7, #20
 8100a16:	46bd      	mov	sp, r7
 8100a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100a1c:	4770      	bx	lr
 8100a1e:	bf00      	nop
 8100a20:	000fffff 	.word	0x000fffff

08100a24 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8100a24:	b480      	push	{r7}
 8100a26:	b083      	sub	sp, #12
 8100a28:	af00      	add	r7, sp, #0
 8100a2a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8100a2c:	687b      	ldr	r3, [r7, #4]
 8100a2e:	689b      	ldr	r3, [r3, #8]
 8100a30:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8100a34:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8100a38:	687a      	ldr	r2, [r7, #4]
 8100a3a:	6093      	str	r3, [r2, #8]
}
 8100a3c:	bf00      	nop
 8100a3e:	370c      	adds	r7, #12
 8100a40:	46bd      	mov	sp, r7
 8100a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100a46:	4770      	bx	lr

08100a48 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8100a48:	b480      	push	{r7}
 8100a4a:	b083      	sub	sp, #12
 8100a4c:	af00      	add	r7, sp, #0
 8100a4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8100a50:	687b      	ldr	r3, [r7, #4]
 8100a52:	689b      	ldr	r3, [r3, #8]
 8100a54:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8100a58:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8100a5c:	d101      	bne.n	8100a62 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8100a5e:	2301      	movs	r3, #1
 8100a60:	e000      	b.n	8100a64 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8100a62:	2300      	movs	r3, #0
}
 8100a64:	4618      	mov	r0, r3
 8100a66:	370c      	adds	r7, #12
 8100a68:	46bd      	mov	sp, r7
 8100a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100a6e:	4770      	bx	lr

08100a70 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8100a70:	b480      	push	{r7}
 8100a72:	b083      	sub	sp, #12
 8100a74:	af00      	add	r7, sp, #0
 8100a76:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8100a78:	687b      	ldr	r3, [r7, #4]
 8100a7a:	689b      	ldr	r3, [r3, #8]
 8100a7c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8100a80:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8100a84:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8100a88:	687b      	ldr	r3, [r7, #4]
 8100a8a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8100a8c:	bf00      	nop
 8100a8e:	370c      	adds	r7, #12
 8100a90:	46bd      	mov	sp, r7
 8100a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100a96:	4770      	bx	lr

08100a98 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8100a98:	b480      	push	{r7}
 8100a9a:	b083      	sub	sp, #12
 8100a9c:	af00      	add	r7, sp, #0
 8100a9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8100aa0:	687b      	ldr	r3, [r7, #4]
 8100aa2:	689b      	ldr	r3, [r3, #8]
 8100aa4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8100aa8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8100aac:	d101      	bne.n	8100ab2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8100aae:	2301      	movs	r3, #1
 8100ab0:	e000      	b.n	8100ab4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8100ab2:	2300      	movs	r3, #0
}
 8100ab4:	4618      	mov	r0, r3
 8100ab6:	370c      	adds	r7, #12
 8100ab8:	46bd      	mov	sp, r7
 8100aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100abe:	4770      	bx	lr

08100ac0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8100ac0:	b480      	push	{r7}
 8100ac2:	b083      	sub	sp, #12
 8100ac4:	af00      	add	r7, sp, #0
 8100ac6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8100ac8:	687b      	ldr	r3, [r7, #4]
 8100aca:	689b      	ldr	r3, [r3, #8]
 8100acc:	f003 0301 	and.w	r3, r3, #1
 8100ad0:	2b01      	cmp	r3, #1
 8100ad2:	d101      	bne.n	8100ad8 <LL_ADC_IsEnabled+0x18>
 8100ad4:	2301      	movs	r3, #1
 8100ad6:	e000      	b.n	8100ada <LL_ADC_IsEnabled+0x1a>
 8100ad8:	2300      	movs	r3, #0
}
 8100ada:	4618      	mov	r0, r3
 8100adc:	370c      	adds	r7, #12
 8100ade:	46bd      	mov	sp, r7
 8100ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100ae4:	4770      	bx	lr

08100ae6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8100ae6:	b480      	push	{r7}
 8100ae8:	b083      	sub	sp, #12
 8100aea:	af00      	add	r7, sp, #0
 8100aec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8100aee:	687b      	ldr	r3, [r7, #4]
 8100af0:	689b      	ldr	r3, [r3, #8]
 8100af2:	f003 0304 	and.w	r3, r3, #4
 8100af6:	2b04      	cmp	r3, #4
 8100af8:	d101      	bne.n	8100afe <LL_ADC_REG_IsConversionOngoing+0x18>
 8100afa:	2301      	movs	r3, #1
 8100afc:	e000      	b.n	8100b00 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8100afe:	2300      	movs	r3, #0
}
 8100b00:	4618      	mov	r0, r3
 8100b02:	370c      	adds	r7, #12
 8100b04:	46bd      	mov	sp, r7
 8100b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100b0a:	4770      	bx	lr

08100b0c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8100b0c:	b480      	push	{r7}
 8100b0e:	b083      	sub	sp, #12
 8100b10:	af00      	add	r7, sp, #0
 8100b12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8100b14:	687b      	ldr	r3, [r7, #4]
 8100b16:	689b      	ldr	r3, [r3, #8]
 8100b18:	f003 0308 	and.w	r3, r3, #8
 8100b1c:	2b08      	cmp	r3, #8
 8100b1e:	d101      	bne.n	8100b24 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8100b20:	2301      	movs	r3, #1
 8100b22:	e000      	b.n	8100b26 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8100b24:	2300      	movs	r3, #0
}
 8100b26:	4618      	mov	r0, r3
 8100b28:	370c      	adds	r7, #12
 8100b2a:	46bd      	mov	sp, r7
 8100b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100b30:	4770      	bx	lr
	...

08100b34 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8100b34:	b590      	push	{r4, r7, lr}
 8100b36:	b089      	sub	sp, #36	@ 0x24
 8100b38:	af00      	add	r7, sp, #0
 8100b3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8100b3c:	2300      	movs	r3, #0
 8100b3e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8100b40:	2300      	movs	r3, #0
 8100b42:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8100b44:	687b      	ldr	r3, [r7, #4]
 8100b46:	2b00      	cmp	r3, #0
 8100b48:	d101      	bne.n	8100b4e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8100b4a:	2301      	movs	r3, #1
 8100b4c:	e18f      	b.n	8100e6e <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8100b4e:	687b      	ldr	r3, [r7, #4]
 8100b50:	68db      	ldr	r3, [r3, #12]
 8100b52:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8100b54:	687b      	ldr	r3, [r7, #4]
 8100b56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8100b58:	2b00      	cmp	r3, #0
 8100b5a:	d109      	bne.n	8100b70 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8100b5c:	6878      	ldr	r0, [r7, #4]
 8100b5e:	f7ff fcc7 	bl	81004f0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8100b62:	687b      	ldr	r3, [r7, #4]
 8100b64:	2200      	movs	r2, #0
 8100b66:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8100b68:	687b      	ldr	r3, [r7, #4]
 8100b6a:	2200      	movs	r2, #0
 8100b6c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8100b70:	687b      	ldr	r3, [r7, #4]
 8100b72:	681b      	ldr	r3, [r3, #0]
 8100b74:	4618      	mov	r0, r3
 8100b76:	f7ff ff67 	bl	8100a48 <LL_ADC_IsDeepPowerDownEnabled>
 8100b7a:	4603      	mov	r3, r0
 8100b7c:	2b00      	cmp	r3, #0
 8100b7e:	d004      	beq.n	8100b8a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8100b80:	687b      	ldr	r3, [r7, #4]
 8100b82:	681b      	ldr	r3, [r3, #0]
 8100b84:	4618      	mov	r0, r3
 8100b86:	f7ff ff4d 	bl	8100a24 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8100b8a:	687b      	ldr	r3, [r7, #4]
 8100b8c:	681b      	ldr	r3, [r3, #0]
 8100b8e:	4618      	mov	r0, r3
 8100b90:	f7ff ff82 	bl	8100a98 <LL_ADC_IsInternalRegulatorEnabled>
 8100b94:	4603      	mov	r3, r0
 8100b96:	2b00      	cmp	r3, #0
 8100b98:	d114      	bne.n	8100bc4 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8100b9a:	687b      	ldr	r3, [r7, #4]
 8100b9c:	681b      	ldr	r3, [r3, #0]
 8100b9e:	4618      	mov	r0, r3
 8100ba0:	f7ff ff66 	bl	8100a70 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8100ba4:	4b88      	ldr	r3, [pc, #544]	@ (8100dc8 <HAL_ADC_Init+0x294>)
 8100ba6:	681b      	ldr	r3, [r3, #0]
 8100ba8:	099b      	lsrs	r3, r3, #6
 8100baa:	4a88      	ldr	r2, [pc, #544]	@ (8100dcc <HAL_ADC_Init+0x298>)
 8100bac:	fba2 2303 	umull	r2, r3, r2, r3
 8100bb0:	099b      	lsrs	r3, r3, #6
 8100bb2:	3301      	adds	r3, #1
 8100bb4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8100bb6:	e002      	b.n	8100bbe <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8100bb8:	68bb      	ldr	r3, [r7, #8]
 8100bba:	3b01      	subs	r3, #1
 8100bbc:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8100bbe:	68bb      	ldr	r3, [r7, #8]
 8100bc0:	2b00      	cmp	r3, #0
 8100bc2:	d1f9      	bne.n	8100bb8 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8100bc4:	687b      	ldr	r3, [r7, #4]
 8100bc6:	681b      	ldr	r3, [r3, #0]
 8100bc8:	4618      	mov	r0, r3
 8100bca:	f7ff ff65 	bl	8100a98 <LL_ADC_IsInternalRegulatorEnabled>
 8100bce:	4603      	mov	r3, r0
 8100bd0:	2b00      	cmp	r3, #0
 8100bd2:	d10d      	bne.n	8100bf0 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8100bd4:	687b      	ldr	r3, [r7, #4]
 8100bd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8100bd8:	f043 0210 	orr.w	r2, r3, #16
 8100bdc:	687b      	ldr	r3, [r7, #4]
 8100bde:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8100be0:	687b      	ldr	r3, [r7, #4]
 8100be2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8100be4:	f043 0201 	orr.w	r2, r3, #1
 8100be8:	687b      	ldr	r3, [r7, #4]
 8100bea:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8100bec:	2301      	movs	r3, #1
 8100bee:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8100bf0:	687b      	ldr	r3, [r7, #4]
 8100bf2:	681b      	ldr	r3, [r3, #0]
 8100bf4:	4618      	mov	r0, r3
 8100bf6:	f7ff ff76 	bl	8100ae6 <LL_ADC_REG_IsConversionOngoing>
 8100bfa:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8100bfc:	687b      	ldr	r3, [r7, #4]
 8100bfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8100c00:	f003 0310 	and.w	r3, r3, #16
 8100c04:	2b00      	cmp	r3, #0
 8100c06:	f040 8129 	bne.w	8100e5c <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8100c0a:	697b      	ldr	r3, [r7, #20]
 8100c0c:	2b00      	cmp	r3, #0
 8100c0e:	f040 8125 	bne.w	8100e5c <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8100c12:	687b      	ldr	r3, [r7, #4]
 8100c14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8100c16:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8100c1a:	f043 0202 	orr.w	r2, r3, #2
 8100c1e:	687b      	ldr	r3, [r7, #4]
 8100c20:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8100c22:	687b      	ldr	r3, [r7, #4]
 8100c24:	681b      	ldr	r3, [r3, #0]
 8100c26:	4618      	mov	r0, r3
 8100c28:	f7ff ff4a 	bl	8100ac0 <LL_ADC_IsEnabled>
 8100c2c:	4603      	mov	r3, r0
 8100c2e:	2b00      	cmp	r3, #0
 8100c30:	d136      	bne.n	8100ca0 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8100c32:	687b      	ldr	r3, [r7, #4]
 8100c34:	681b      	ldr	r3, [r3, #0]
 8100c36:	4a66      	ldr	r2, [pc, #408]	@ (8100dd0 <HAL_ADC_Init+0x29c>)
 8100c38:	4293      	cmp	r3, r2
 8100c3a:	d004      	beq.n	8100c46 <HAL_ADC_Init+0x112>
 8100c3c:	687b      	ldr	r3, [r7, #4]
 8100c3e:	681b      	ldr	r3, [r3, #0]
 8100c40:	4a64      	ldr	r2, [pc, #400]	@ (8100dd4 <HAL_ADC_Init+0x2a0>)
 8100c42:	4293      	cmp	r3, r2
 8100c44:	d10e      	bne.n	8100c64 <HAL_ADC_Init+0x130>
 8100c46:	4862      	ldr	r0, [pc, #392]	@ (8100dd0 <HAL_ADC_Init+0x29c>)
 8100c48:	f7ff ff3a 	bl	8100ac0 <LL_ADC_IsEnabled>
 8100c4c:	4604      	mov	r4, r0
 8100c4e:	4861      	ldr	r0, [pc, #388]	@ (8100dd4 <HAL_ADC_Init+0x2a0>)
 8100c50:	f7ff ff36 	bl	8100ac0 <LL_ADC_IsEnabled>
 8100c54:	4603      	mov	r3, r0
 8100c56:	4323      	orrs	r3, r4
 8100c58:	2b00      	cmp	r3, #0
 8100c5a:	bf0c      	ite	eq
 8100c5c:	2301      	moveq	r3, #1
 8100c5e:	2300      	movne	r3, #0
 8100c60:	b2db      	uxtb	r3, r3
 8100c62:	e008      	b.n	8100c76 <HAL_ADC_Init+0x142>
 8100c64:	485c      	ldr	r0, [pc, #368]	@ (8100dd8 <HAL_ADC_Init+0x2a4>)
 8100c66:	f7ff ff2b 	bl	8100ac0 <LL_ADC_IsEnabled>
 8100c6a:	4603      	mov	r3, r0
 8100c6c:	2b00      	cmp	r3, #0
 8100c6e:	bf0c      	ite	eq
 8100c70:	2301      	moveq	r3, #1
 8100c72:	2300      	movne	r3, #0
 8100c74:	b2db      	uxtb	r3, r3
 8100c76:	2b00      	cmp	r3, #0
 8100c78:	d012      	beq.n	8100ca0 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8100c7a:	687b      	ldr	r3, [r7, #4]
 8100c7c:	681b      	ldr	r3, [r3, #0]
 8100c7e:	4a54      	ldr	r2, [pc, #336]	@ (8100dd0 <HAL_ADC_Init+0x29c>)
 8100c80:	4293      	cmp	r3, r2
 8100c82:	d004      	beq.n	8100c8e <HAL_ADC_Init+0x15a>
 8100c84:	687b      	ldr	r3, [r7, #4]
 8100c86:	681b      	ldr	r3, [r3, #0]
 8100c88:	4a52      	ldr	r2, [pc, #328]	@ (8100dd4 <HAL_ADC_Init+0x2a0>)
 8100c8a:	4293      	cmp	r3, r2
 8100c8c:	d101      	bne.n	8100c92 <HAL_ADC_Init+0x15e>
 8100c8e:	4a53      	ldr	r2, [pc, #332]	@ (8100ddc <HAL_ADC_Init+0x2a8>)
 8100c90:	e000      	b.n	8100c94 <HAL_ADC_Init+0x160>
 8100c92:	4a53      	ldr	r2, [pc, #332]	@ (8100de0 <HAL_ADC_Init+0x2ac>)
 8100c94:	687b      	ldr	r3, [r7, #4]
 8100c96:	685b      	ldr	r3, [r3, #4]
 8100c98:	4619      	mov	r1, r3
 8100c9a:	4610      	mov	r0, r2
 8100c9c:	f7ff fdbe 	bl	810081c <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8100ca0:	f7ff fd9a 	bl	81007d8 <HAL_GetREVID>
 8100ca4:	4603      	mov	r3, r0
 8100ca6:	f241 0203 	movw	r2, #4099	@ 0x1003
 8100caa:	4293      	cmp	r3, r2
 8100cac:	d914      	bls.n	8100cd8 <HAL_ADC_Init+0x1a4>
 8100cae:	687b      	ldr	r3, [r7, #4]
 8100cb0:	689b      	ldr	r3, [r3, #8]
 8100cb2:	2b10      	cmp	r3, #16
 8100cb4:	d110      	bne.n	8100cd8 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8100cb6:	687b      	ldr	r3, [r7, #4]
 8100cb8:	7d5b      	ldrb	r3, [r3, #21]
 8100cba:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8100cbc:	687b      	ldr	r3, [r7, #4]
 8100cbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8100cc0:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8100cc2:	687b      	ldr	r3, [r7, #4]
 8100cc4:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8100cc6:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8100cc8:	687b      	ldr	r3, [r7, #4]
 8100cca:	7f1b      	ldrb	r3, [r3, #28]
 8100ccc:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8100cce:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8100cd0:	f043 030c 	orr.w	r3, r3, #12
 8100cd4:	61bb      	str	r3, [r7, #24]
 8100cd6:	e00d      	b.n	8100cf4 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8100cd8:	687b      	ldr	r3, [r7, #4]
 8100cda:	7d5b      	ldrb	r3, [r3, #21]
 8100cdc:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8100cde:	687b      	ldr	r3, [r7, #4]
 8100ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8100ce2:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8100ce4:	687b      	ldr	r3, [r7, #4]
 8100ce6:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8100ce8:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8100cea:	687b      	ldr	r3, [r7, #4]
 8100cec:	7f1b      	ldrb	r3, [r3, #28]
 8100cee:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8100cf0:	4313      	orrs	r3, r2
 8100cf2:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8100cf4:	687b      	ldr	r3, [r7, #4]
 8100cf6:	7f1b      	ldrb	r3, [r3, #28]
 8100cf8:	2b01      	cmp	r3, #1
 8100cfa:	d106      	bne.n	8100d0a <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8100cfc:	687b      	ldr	r3, [r7, #4]
 8100cfe:	6a1b      	ldr	r3, [r3, #32]
 8100d00:	3b01      	subs	r3, #1
 8100d02:	045b      	lsls	r3, r3, #17
 8100d04:	69ba      	ldr	r2, [r7, #24]
 8100d06:	4313      	orrs	r3, r2
 8100d08:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8100d0a:	687b      	ldr	r3, [r7, #4]
 8100d0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8100d0e:	2b00      	cmp	r3, #0
 8100d10:	d009      	beq.n	8100d26 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8100d12:	687b      	ldr	r3, [r7, #4]
 8100d14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8100d16:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8100d1a:	687b      	ldr	r3, [r7, #4]
 8100d1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8100d1e:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8100d20:	69ba      	ldr	r2, [r7, #24]
 8100d22:	4313      	orrs	r3, r2
 8100d24:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8100d26:	687b      	ldr	r3, [r7, #4]
 8100d28:	681b      	ldr	r3, [r3, #0]
 8100d2a:	68da      	ldr	r2, [r3, #12]
 8100d2c:	4b2d      	ldr	r3, [pc, #180]	@ (8100de4 <HAL_ADC_Init+0x2b0>)
 8100d2e:	4013      	ands	r3, r2
 8100d30:	687a      	ldr	r2, [r7, #4]
 8100d32:	6812      	ldr	r2, [r2, #0]
 8100d34:	69b9      	ldr	r1, [r7, #24]
 8100d36:	430b      	orrs	r3, r1
 8100d38:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8100d3a:	687b      	ldr	r3, [r7, #4]
 8100d3c:	681b      	ldr	r3, [r3, #0]
 8100d3e:	4618      	mov	r0, r3
 8100d40:	f7ff fed1 	bl	8100ae6 <LL_ADC_REG_IsConversionOngoing>
 8100d44:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8100d46:	687b      	ldr	r3, [r7, #4]
 8100d48:	681b      	ldr	r3, [r3, #0]
 8100d4a:	4618      	mov	r0, r3
 8100d4c:	f7ff fede 	bl	8100b0c <LL_ADC_INJ_IsConversionOngoing>
 8100d50:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8100d52:	693b      	ldr	r3, [r7, #16]
 8100d54:	2b00      	cmp	r3, #0
 8100d56:	d15f      	bne.n	8100e18 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8100d58:	68fb      	ldr	r3, [r7, #12]
 8100d5a:	2b00      	cmp	r3, #0
 8100d5c:	d15c      	bne.n	8100e18 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8100d5e:	687b      	ldr	r3, [r7, #4]
 8100d60:	7d1b      	ldrb	r3, [r3, #20]
 8100d62:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8100d64:	687b      	ldr	r3, [r7, #4]
 8100d66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8100d68:	4313      	orrs	r3, r2
 8100d6a:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8100d6c:	687b      	ldr	r3, [r7, #4]
 8100d6e:	681b      	ldr	r3, [r3, #0]
 8100d70:	68db      	ldr	r3, [r3, #12]
 8100d72:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8100d76:	f023 0303 	bic.w	r3, r3, #3
 8100d7a:	687a      	ldr	r2, [r7, #4]
 8100d7c:	6812      	ldr	r2, [r2, #0]
 8100d7e:	69b9      	ldr	r1, [r7, #24]
 8100d80:	430b      	orrs	r3, r1
 8100d82:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8100d84:	687b      	ldr	r3, [r7, #4]
 8100d86:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8100d8a:	2b01      	cmp	r3, #1
 8100d8c:	d12e      	bne.n	8100dec <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8100d8e:	687b      	ldr	r3, [r7, #4]
 8100d90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8100d92:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8100d94:	687b      	ldr	r3, [r7, #4]
 8100d96:	681b      	ldr	r3, [r3, #0]
 8100d98:	691a      	ldr	r2, [r3, #16]
 8100d9a:	4b13      	ldr	r3, [pc, #76]	@ (8100de8 <HAL_ADC_Init+0x2b4>)
 8100d9c:	4013      	ands	r3, r2
 8100d9e:	687a      	ldr	r2, [r7, #4]
 8100da0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8100da2:	3a01      	subs	r2, #1
 8100da4:	0411      	lsls	r1, r2, #16
 8100da6:	687a      	ldr	r2, [r7, #4]
 8100da8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8100daa:	4311      	orrs	r1, r2
 8100dac:	687a      	ldr	r2, [r7, #4]
 8100dae:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8100db0:	4311      	orrs	r1, r2
 8100db2:	687a      	ldr	r2, [r7, #4]
 8100db4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8100db6:	430a      	orrs	r2, r1
 8100db8:	431a      	orrs	r2, r3
 8100dba:	687b      	ldr	r3, [r7, #4]
 8100dbc:	681b      	ldr	r3, [r3, #0]
 8100dbe:	f042 0201 	orr.w	r2, r2, #1
 8100dc2:	611a      	str	r2, [r3, #16]
 8100dc4:	e01a      	b.n	8100dfc <HAL_ADC_Init+0x2c8>
 8100dc6:	bf00      	nop
 8100dc8:	10000000 	.word	0x10000000
 8100dcc:	053e2d63 	.word	0x053e2d63
 8100dd0:	40022000 	.word	0x40022000
 8100dd4:	40022100 	.word	0x40022100
 8100dd8:	58026000 	.word	0x58026000
 8100ddc:	40022300 	.word	0x40022300
 8100de0:	58026300 	.word	0x58026300
 8100de4:	fff0c003 	.word	0xfff0c003
 8100de8:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8100dec:	687b      	ldr	r3, [r7, #4]
 8100dee:	681b      	ldr	r3, [r3, #0]
 8100df0:	691a      	ldr	r2, [r3, #16]
 8100df2:	687b      	ldr	r3, [r7, #4]
 8100df4:	681b      	ldr	r3, [r3, #0]
 8100df6:	f022 0201 	bic.w	r2, r2, #1
 8100dfa:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8100dfc:	687b      	ldr	r3, [r7, #4]
 8100dfe:	681b      	ldr	r3, [r3, #0]
 8100e00:	691b      	ldr	r3, [r3, #16]
 8100e02:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8100e06:	687b      	ldr	r3, [r7, #4]
 8100e08:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8100e0a:	687b      	ldr	r3, [r7, #4]
 8100e0c:	681b      	ldr	r3, [r3, #0]
 8100e0e:	430a      	orrs	r2, r1
 8100e10:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8100e12:	6878      	ldr	r0, [r7, #4]
 8100e14:	f000 fb8c 	bl	8101530 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8100e18:	687b      	ldr	r3, [r7, #4]
 8100e1a:	68db      	ldr	r3, [r3, #12]
 8100e1c:	2b01      	cmp	r3, #1
 8100e1e:	d10c      	bne.n	8100e3a <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8100e20:	687b      	ldr	r3, [r7, #4]
 8100e22:	681b      	ldr	r3, [r3, #0]
 8100e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8100e26:	f023 010f 	bic.w	r1, r3, #15
 8100e2a:	687b      	ldr	r3, [r7, #4]
 8100e2c:	699b      	ldr	r3, [r3, #24]
 8100e2e:	1e5a      	subs	r2, r3, #1
 8100e30:	687b      	ldr	r3, [r7, #4]
 8100e32:	681b      	ldr	r3, [r3, #0]
 8100e34:	430a      	orrs	r2, r1
 8100e36:	631a      	str	r2, [r3, #48]	@ 0x30
 8100e38:	e007      	b.n	8100e4a <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8100e3a:	687b      	ldr	r3, [r7, #4]
 8100e3c:	681b      	ldr	r3, [r3, #0]
 8100e3e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8100e40:	687b      	ldr	r3, [r7, #4]
 8100e42:	681b      	ldr	r3, [r3, #0]
 8100e44:	f022 020f 	bic.w	r2, r2, #15
 8100e48:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8100e4a:	687b      	ldr	r3, [r7, #4]
 8100e4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8100e4e:	f023 0303 	bic.w	r3, r3, #3
 8100e52:	f043 0201 	orr.w	r2, r3, #1
 8100e56:	687b      	ldr	r3, [r7, #4]
 8100e58:	655a      	str	r2, [r3, #84]	@ 0x54
 8100e5a:	e007      	b.n	8100e6c <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8100e5c:	687b      	ldr	r3, [r7, #4]
 8100e5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8100e60:	f043 0210 	orr.w	r2, r3, #16
 8100e64:	687b      	ldr	r3, [r7, #4]
 8100e66:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8100e68:	2301      	movs	r3, #1
 8100e6a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8100e6c:	7ffb      	ldrb	r3, [r7, #31]
}
 8100e6e:	4618      	mov	r0, r3
 8100e70:	3724      	adds	r7, #36	@ 0x24
 8100e72:	46bd      	mov	sp, r7
 8100e74:	bd90      	pop	{r4, r7, pc}
 8100e76:	bf00      	nop

08100e78 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8100e78:	b590      	push	{r4, r7, lr}
 8100e7a:	b0a1      	sub	sp, #132	@ 0x84
 8100e7c:	af00      	add	r7, sp, #0
 8100e7e:	6078      	str	r0, [r7, #4]
 8100e80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8100e82:	2300      	movs	r3, #0
 8100e84:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8100e88:	2300      	movs	r3, #0
 8100e8a:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8100e8c:	683b      	ldr	r3, [r7, #0]
 8100e8e:	68db      	ldr	r3, [r3, #12]
 8100e90:	4a65      	ldr	r2, [pc, #404]	@ (8101028 <HAL_ADC_ConfigChannel+0x1b0>)
 8100e92:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8100e94:	687b      	ldr	r3, [r7, #4]
 8100e96:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8100e9a:	2b01      	cmp	r3, #1
 8100e9c:	d101      	bne.n	8100ea2 <HAL_ADC_ConfigChannel+0x2a>
 8100e9e:	2302      	movs	r3, #2
 8100ea0:	e32e      	b.n	8101500 <HAL_ADC_ConfigChannel+0x688>
 8100ea2:	687b      	ldr	r3, [r7, #4]
 8100ea4:	2201      	movs	r2, #1
 8100ea6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8100eaa:	687b      	ldr	r3, [r7, #4]
 8100eac:	681b      	ldr	r3, [r3, #0]
 8100eae:	4618      	mov	r0, r3
 8100eb0:	f7ff fe19 	bl	8100ae6 <LL_ADC_REG_IsConversionOngoing>
 8100eb4:	4603      	mov	r3, r0
 8100eb6:	2b00      	cmp	r3, #0
 8100eb8:	f040 8313 	bne.w	81014e2 <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8100ebc:	683b      	ldr	r3, [r7, #0]
 8100ebe:	681b      	ldr	r3, [r3, #0]
 8100ec0:	2b00      	cmp	r3, #0
 8100ec2:	db2c      	blt.n	8100f1e <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8100ec4:	683b      	ldr	r3, [r7, #0]
 8100ec6:	681b      	ldr	r3, [r3, #0]
 8100ec8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8100ecc:	2b00      	cmp	r3, #0
 8100ece:	d108      	bne.n	8100ee2 <HAL_ADC_ConfigChannel+0x6a>
 8100ed0:	683b      	ldr	r3, [r7, #0]
 8100ed2:	681b      	ldr	r3, [r3, #0]
 8100ed4:	0e9b      	lsrs	r3, r3, #26
 8100ed6:	f003 031f 	and.w	r3, r3, #31
 8100eda:	2201      	movs	r2, #1
 8100edc:	fa02 f303 	lsl.w	r3, r2, r3
 8100ee0:	e016      	b.n	8100f10 <HAL_ADC_ConfigChannel+0x98>
 8100ee2:	683b      	ldr	r3, [r7, #0]
 8100ee4:	681b      	ldr	r3, [r3, #0]
 8100ee6:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8100ee8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8100eea:	fa93 f3a3 	rbit	r3, r3
 8100eee:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8100ef0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8100ef2:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8100ef4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8100ef6:	2b00      	cmp	r3, #0
 8100ef8:	d101      	bne.n	8100efe <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8100efa:	2320      	movs	r3, #32
 8100efc:	e003      	b.n	8100f06 <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8100efe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8100f00:	fab3 f383 	clz	r3, r3
 8100f04:	b2db      	uxtb	r3, r3
 8100f06:	f003 031f 	and.w	r3, r3, #31
 8100f0a:	2201      	movs	r2, #1
 8100f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8100f10:	687a      	ldr	r2, [r7, #4]
 8100f12:	6812      	ldr	r2, [r2, #0]
 8100f14:	69d1      	ldr	r1, [r2, #28]
 8100f16:	687a      	ldr	r2, [r7, #4]
 8100f18:	6812      	ldr	r2, [r2, #0]
 8100f1a:	430b      	orrs	r3, r1
 8100f1c:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8100f1e:	687b      	ldr	r3, [r7, #4]
 8100f20:	6818      	ldr	r0, [r3, #0]
 8100f22:	683b      	ldr	r3, [r7, #0]
 8100f24:	6859      	ldr	r1, [r3, #4]
 8100f26:	683b      	ldr	r3, [r7, #0]
 8100f28:	681b      	ldr	r3, [r3, #0]
 8100f2a:	461a      	mov	r2, r3
 8100f2c:	f7ff fcfe 	bl	810092c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8100f30:	687b      	ldr	r3, [r7, #4]
 8100f32:	681b      	ldr	r3, [r3, #0]
 8100f34:	4618      	mov	r0, r3
 8100f36:	f7ff fdd6 	bl	8100ae6 <LL_ADC_REG_IsConversionOngoing>
 8100f3a:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8100f3c:	687b      	ldr	r3, [r7, #4]
 8100f3e:	681b      	ldr	r3, [r3, #0]
 8100f40:	4618      	mov	r0, r3
 8100f42:	f7ff fde3 	bl	8100b0c <LL_ADC_INJ_IsConversionOngoing>
 8100f46:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8100f48:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8100f4a:	2b00      	cmp	r3, #0
 8100f4c:	f040 80b8 	bne.w	81010c0 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8100f50:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8100f52:	2b00      	cmp	r3, #0
 8100f54:	f040 80b4 	bne.w	81010c0 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8100f58:	687b      	ldr	r3, [r7, #4]
 8100f5a:	6818      	ldr	r0, [r3, #0]
 8100f5c:	683b      	ldr	r3, [r7, #0]
 8100f5e:	6819      	ldr	r1, [r3, #0]
 8100f60:	683b      	ldr	r3, [r7, #0]
 8100f62:	689b      	ldr	r3, [r3, #8]
 8100f64:	461a      	mov	r2, r3
 8100f66:	f7ff fd0d 	bl	8100984 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8100f6a:	4b30      	ldr	r3, [pc, #192]	@ (810102c <HAL_ADC_ConfigChannel+0x1b4>)
 8100f6c:	681b      	ldr	r3, [r3, #0]
 8100f6e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8100f72:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8100f76:	d10b      	bne.n	8100f90 <HAL_ADC_ConfigChannel+0x118>
 8100f78:	683b      	ldr	r3, [r7, #0]
 8100f7a:	695a      	ldr	r2, [r3, #20]
 8100f7c:	687b      	ldr	r3, [r7, #4]
 8100f7e:	681b      	ldr	r3, [r3, #0]
 8100f80:	68db      	ldr	r3, [r3, #12]
 8100f82:	089b      	lsrs	r3, r3, #2
 8100f84:	f003 0307 	and.w	r3, r3, #7
 8100f88:	005b      	lsls	r3, r3, #1
 8100f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8100f8e:	e01d      	b.n	8100fcc <HAL_ADC_ConfigChannel+0x154>
 8100f90:	687b      	ldr	r3, [r7, #4]
 8100f92:	681b      	ldr	r3, [r3, #0]
 8100f94:	68db      	ldr	r3, [r3, #12]
 8100f96:	f003 0310 	and.w	r3, r3, #16
 8100f9a:	2b00      	cmp	r3, #0
 8100f9c:	d10b      	bne.n	8100fb6 <HAL_ADC_ConfigChannel+0x13e>
 8100f9e:	683b      	ldr	r3, [r7, #0]
 8100fa0:	695a      	ldr	r2, [r3, #20]
 8100fa2:	687b      	ldr	r3, [r7, #4]
 8100fa4:	681b      	ldr	r3, [r3, #0]
 8100fa6:	68db      	ldr	r3, [r3, #12]
 8100fa8:	089b      	lsrs	r3, r3, #2
 8100faa:	f003 0307 	and.w	r3, r3, #7
 8100fae:	005b      	lsls	r3, r3, #1
 8100fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8100fb4:	e00a      	b.n	8100fcc <HAL_ADC_ConfigChannel+0x154>
 8100fb6:	683b      	ldr	r3, [r7, #0]
 8100fb8:	695a      	ldr	r2, [r3, #20]
 8100fba:	687b      	ldr	r3, [r7, #4]
 8100fbc:	681b      	ldr	r3, [r3, #0]
 8100fbe:	68db      	ldr	r3, [r3, #12]
 8100fc0:	089b      	lsrs	r3, r3, #2
 8100fc2:	f003 0304 	and.w	r3, r3, #4
 8100fc6:	005b      	lsls	r3, r3, #1
 8100fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8100fcc:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8100fce:	683b      	ldr	r3, [r7, #0]
 8100fd0:	691b      	ldr	r3, [r3, #16]
 8100fd2:	2b04      	cmp	r3, #4
 8100fd4:	d02c      	beq.n	8101030 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8100fd6:	687b      	ldr	r3, [r7, #4]
 8100fd8:	6818      	ldr	r0, [r3, #0]
 8100fda:	683b      	ldr	r3, [r7, #0]
 8100fdc:	6919      	ldr	r1, [r3, #16]
 8100fde:	683b      	ldr	r3, [r7, #0]
 8100fe0:	681a      	ldr	r2, [r3, #0]
 8100fe2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8100fe4:	f7ff fc4e 	bl	8100884 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8100fe8:	687b      	ldr	r3, [r7, #4]
 8100fea:	6818      	ldr	r0, [r3, #0]
 8100fec:	683b      	ldr	r3, [r7, #0]
 8100fee:	6919      	ldr	r1, [r3, #16]
 8100ff0:	683b      	ldr	r3, [r7, #0]
 8100ff2:	7e5b      	ldrb	r3, [r3, #25]
 8100ff4:	2b01      	cmp	r3, #1
 8100ff6:	d102      	bne.n	8100ffe <HAL_ADC_ConfigChannel+0x186>
 8100ff8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8100ffc:	e000      	b.n	8101000 <HAL_ADC_ConfigChannel+0x188>
 8100ffe:	2300      	movs	r3, #0
 8101000:	461a      	mov	r2, r3
 8101002:	f7ff fc78 	bl	81008f6 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8101006:	687b      	ldr	r3, [r7, #4]
 8101008:	6818      	ldr	r0, [r3, #0]
 810100a:	683b      	ldr	r3, [r7, #0]
 810100c:	6919      	ldr	r1, [r3, #16]
 810100e:	683b      	ldr	r3, [r7, #0]
 8101010:	7e1b      	ldrb	r3, [r3, #24]
 8101012:	2b01      	cmp	r3, #1
 8101014:	d102      	bne.n	810101c <HAL_ADC_ConfigChannel+0x1a4>
 8101016:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 810101a:	e000      	b.n	810101e <HAL_ADC_ConfigChannel+0x1a6>
 810101c:	2300      	movs	r3, #0
 810101e:	461a      	mov	r2, r3
 8101020:	f7ff fc50 	bl	81008c4 <LL_ADC_SetDataRightShift>
 8101024:	e04c      	b.n	81010c0 <HAL_ADC_ConfigChannel+0x248>
 8101026:	bf00      	nop
 8101028:	47ff0000 	.word	0x47ff0000
 810102c:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8101030:	687b      	ldr	r3, [r7, #4]
 8101032:	681b      	ldr	r3, [r3, #0]
 8101034:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8101036:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 810103a:	683b      	ldr	r3, [r7, #0]
 810103c:	681b      	ldr	r3, [r3, #0]
 810103e:	069b      	lsls	r3, r3, #26
 8101040:	429a      	cmp	r2, r3
 8101042:	d107      	bne.n	8101054 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8101044:	687b      	ldr	r3, [r7, #4]
 8101046:	681b      	ldr	r3, [r3, #0]
 8101048:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 810104a:	687b      	ldr	r3, [r7, #4]
 810104c:	681b      	ldr	r3, [r3, #0]
 810104e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8101052:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8101054:	687b      	ldr	r3, [r7, #4]
 8101056:	681b      	ldr	r3, [r3, #0]
 8101058:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810105a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 810105e:	683b      	ldr	r3, [r7, #0]
 8101060:	681b      	ldr	r3, [r3, #0]
 8101062:	069b      	lsls	r3, r3, #26
 8101064:	429a      	cmp	r2, r3
 8101066:	d107      	bne.n	8101078 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8101068:	687b      	ldr	r3, [r7, #4]
 810106a:	681b      	ldr	r3, [r3, #0]
 810106c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 810106e:	687b      	ldr	r3, [r7, #4]
 8101070:	681b      	ldr	r3, [r3, #0]
 8101072:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8101076:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8101078:	687b      	ldr	r3, [r7, #4]
 810107a:	681b      	ldr	r3, [r3, #0]
 810107c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 810107e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8101082:	683b      	ldr	r3, [r7, #0]
 8101084:	681b      	ldr	r3, [r3, #0]
 8101086:	069b      	lsls	r3, r3, #26
 8101088:	429a      	cmp	r2, r3
 810108a:	d107      	bne.n	810109c <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 810108c:	687b      	ldr	r3, [r7, #4]
 810108e:	681b      	ldr	r3, [r3, #0]
 8101090:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8101092:	687b      	ldr	r3, [r7, #4]
 8101094:	681b      	ldr	r3, [r3, #0]
 8101096:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 810109a:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 810109c:	687b      	ldr	r3, [r7, #4]
 810109e:	681b      	ldr	r3, [r3, #0]
 81010a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 81010a2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 81010a6:	683b      	ldr	r3, [r7, #0]
 81010a8:	681b      	ldr	r3, [r3, #0]
 81010aa:	069b      	lsls	r3, r3, #26
 81010ac:	429a      	cmp	r2, r3
 81010ae:	d107      	bne.n	81010c0 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 81010b0:	687b      	ldr	r3, [r7, #4]
 81010b2:	681b      	ldr	r3, [r3, #0]
 81010b4:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 81010b6:	687b      	ldr	r3, [r7, #4]
 81010b8:	681b      	ldr	r3, [r3, #0]
 81010ba:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 81010be:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 81010c0:	687b      	ldr	r3, [r7, #4]
 81010c2:	681b      	ldr	r3, [r3, #0]
 81010c4:	4618      	mov	r0, r3
 81010c6:	f7ff fcfb 	bl	8100ac0 <LL_ADC_IsEnabled>
 81010ca:	4603      	mov	r3, r0
 81010cc:	2b00      	cmp	r3, #0
 81010ce:	f040 8211 	bne.w	81014f4 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 81010d2:	687b      	ldr	r3, [r7, #4]
 81010d4:	6818      	ldr	r0, [r3, #0]
 81010d6:	683b      	ldr	r3, [r7, #0]
 81010d8:	6819      	ldr	r1, [r3, #0]
 81010da:	683b      	ldr	r3, [r7, #0]
 81010dc:	68db      	ldr	r3, [r3, #12]
 81010de:	461a      	mov	r2, r3
 81010e0:	f7ff fc7c 	bl	81009dc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 81010e4:	683b      	ldr	r3, [r7, #0]
 81010e6:	68db      	ldr	r3, [r3, #12]
 81010e8:	4aa1      	ldr	r2, [pc, #644]	@ (8101370 <HAL_ADC_ConfigChannel+0x4f8>)
 81010ea:	4293      	cmp	r3, r2
 81010ec:	f040 812e 	bne.w	810134c <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 81010f0:	687b      	ldr	r3, [r7, #4]
 81010f2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 81010f4:	683b      	ldr	r3, [r7, #0]
 81010f6:	681b      	ldr	r3, [r3, #0]
 81010f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 81010fc:	2b00      	cmp	r3, #0
 81010fe:	d10b      	bne.n	8101118 <HAL_ADC_ConfigChannel+0x2a0>
 8101100:	683b      	ldr	r3, [r7, #0]
 8101102:	681b      	ldr	r3, [r3, #0]
 8101104:	0e9b      	lsrs	r3, r3, #26
 8101106:	3301      	adds	r3, #1
 8101108:	f003 031f 	and.w	r3, r3, #31
 810110c:	2b09      	cmp	r3, #9
 810110e:	bf94      	ite	ls
 8101110:	2301      	movls	r3, #1
 8101112:	2300      	movhi	r3, #0
 8101114:	b2db      	uxtb	r3, r3
 8101116:	e019      	b.n	810114c <HAL_ADC_ConfigChannel+0x2d4>
 8101118:	683b      	ldr	r3, [r7, #0]
 810111a:	681b      	ldr	r3, [r3, #0]
 810111c:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 810111e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8101120:	fa93 f3a3 	rbit	r3, r3
 8101124:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8101126:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8101128:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 810112a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 810112c:	2b00      	cmp	r3, #0
 810112e:	d101      	bne.n	8101134 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8101130:	2320      	movs	r3, #32
 8101132:	e003      	b.n	810113c <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8101134:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8101136:	fab3 f383 	clz	r3, r3
 810113a:	b2db      	uxtb	r3, r3
 810113c:	3301      	adds	r3, #1
 810113e:	f003 031f 	and.w	r3, r3, #31
 8101142:	2b09      	cmp	r3, #9
 8101144:	bf94      	ite	ls
 8101146:	2301      	movls	r3, #1
 8101148:	2300      	movhi	r3, #0
 810114a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 810114c:	2b00      	cmp	r3, #0
 810114e:	d079      	beq.n	8101244 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8101150:	683b      	ldr	r3, [r7, #0]
 8101152:	681b      	ldr	r3, [r3, #0]
 8101154:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8101158:	2b00      	cmp	r3, #0
 810115a:	d107      	bne.n	810116c <HAL_ADC_ConfigChannel+0x2f4>
 810115c:	683b      	ldr	r3, [r7, #0]
 810115e:	681b      	ldr	r3, [r3, #0]
 8101160:	0e9b      	lsrs	r3, r3, #26
 8101162:	3301      	adds	r3, #1
 8101164:	069b      	lsls	r3, r3, #26
 8101166:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 810116a:	e015      	b.n	8101198 <HAL_ADC_ConfigChannel+0x320>
 810116c:	683b      	ldr	r3, [r7, #0]
 810116e:	681b      	ldr	r3, [r3, #0]
 8101170:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8101172:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8101174:	fa93 f3a3 	rbit	r3, r3
 8101178:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 810117a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 810117c:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 810117e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8101180:	2b00      	cmp	r3, #0
 8101182:	d101      	bne.n	8101188 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8101184:	2320      	movs	r3, #32
 8101186:	e003      	b.n	8101190 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8101188:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 810118a:	fab3 f383 	clz	r3, r3
 810118e:	b2db      	uxtb	r3, r3
 8101190:	3301      	adds	r3, #1
 8101192:	069b      	lsls	r3, r3, #26
 8101194:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8101198:	683b      	ldr	r3, [r7, #0]
 810119a:	681b      	ldr	r3, [r3, #0]
 810119c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 81011a0:	2b00      	cmp	r3, #0
 81011a2:	d109      	bne.n	81011b8 <HAL_ADC_ConfigChannel+0x340>
 81011a4:	683b      	ldr	r3, [r7, #0]
 81011a6:	681b      	ldr	r3, [r3, #0]
 81011a8:	0e9b      	lsrs	r3, r3, #26
 81011aa:	3301      	adds	r3, #1
 81011ac:	f003 031f 	and.w	r3, r3, #31
 81011b0:	2101      	movs	r1, #1
 81011b2:	fa01 f303 	lsl.w	r3, r1, r3
 81011b6:	e017      	b.n	81011e8 <HAL_ADC_ConfigChannel+0x370>
 81011b8:	683b      	ldr	r3, [r7, #0]
 81011ba:	681b      	ldr	r3, [r3, #0]
 81011bc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 81011be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 81011c0:	fa93 f3a3 	rbit	r3, r3
 81011c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 81011c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 81011c8:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 81011ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 81011cc:	2b00      	cmp	r3, #0
 81011ce:	d101      	bne.n	81011d4 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 81011d0:	2320      	movs	r3, #32
 81011d2:	e003      	b.n	81011dc <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 81011d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 81011d6:	fab3 f383 	clz	r3, r3
 81011da:	b2db      	uxtb	r3, r3
 81011dc:	3301      	adds	r3, #1
 81011de:	f003 031f 	and.w	r3, r3, #31
 81011e2:	2101      	movs	r1, #1
 81011e4:	fa01 f303 	lsl.w	r3, r1, r3
 81011e8:	ea42 0103 	orr.w	r1, r2, r3
 81011ec:	683b      	ldr	r3, [r7, #0]
 81011ee:	681b      	ldr	r3, [r3, #0]
 81011f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 81011f4:	2b00      	cmp	r3, #0
 81011f6:	d10a      	bne.n	810120e <HAL_ADC_ConfigChannel+0x396>
 81011f8:	683b      	ldr	r3, [r7, #0]
 81011fa:	681b      	ldr	r3, [r3, #0]
 81011fc:	0e9b      	lsrs	r3, r3, #26
 81011fe:	3301      	adds	r3, #1
 8101200:	f003 021f 	and.w	r2, r3, #31
 8101204:	4613      	mov	r3, r2
 8101206:	005b      	lsls	r3, r3, #1
 8101208:	4413      	add	r3, r2
 810120a:	051b      	lsls	r3, r3, #20
 810120c:	e018      	b.n	8101240 <HAL_ADC_ConfigChannel+0x3c8>
 810120e:	683b      	ldr	r3, [r7, #0]
 8101210:	681b      	ldr	r3, [r3, #0]
 8101212:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8101214:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8101216:	fa93 f3a3 	rbit	r3, r3
 810121a:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 810121c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810121e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8101220:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8101222:	2b00      	cmp	r3, #0
 8101224:	d101      	bne.n	810122a <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8101226:	2320      	movs	r3, #32
 8101228:	e003      	b.n	8101232 <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 810122a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810122c:	fab3 f383 	clz	r3, r3
 8101230:	b2db      	uxtb	r3, r3
 8101232:	3301      	adds	r3, #1
 8101234:	f003 021f 	and.w	r2, r3, #31
 8101238:	4613      	mov	r3, r2
 810123a:	005b      	lsls	r3, r3, #1
 810123c:	4413      	add	r3, r2
 810123e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8101240:	430b      	orrs	r3, r1
 8101242:	e07e      	b.n	8101342 <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8101244:	683b      	ldr	r3, [r7, #0]
 8101246:	681b      	ldr	r3, [r3, #0]
 8101248:	f3c3 0313 	ubfx	r3, r3, #0, #20
 810124c:	2b00      	cmp	r3, #0
 810124e:	d107      	bne.n	8101260 <HAL_ADC_ConfigChannel+0x3e8>
 8101250:	683b      	ldr	r3, [r7, #0]
 8101252:	681b      	ldr	r3, [r3, #0]
 8101254:	0e9b      	lsrs	r3, r3, #26
 8101256:	3301      	adds	r3, #1
 8101258:	069b      	lsls	r3, r3, #26
 810125a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 810125e:	e015      	b.n	810128c <HAL_ADC_ConfigChannel+0x414>
 8101260:	683b      	ldr	r3, [r7, #0]
 8101262:	681b      	ldr	r3, [r3, #0]
 8101264:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8101266:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8101268:	fa93 f3a3 	rbit	r3, r3
 810126c:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 810126e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8101270:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8101272:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8101274:	2b00      	cmp	r3, #0
 8101276:	d101      	bne.n	810127c <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8101278:	2320      	movs	r3, #32
 810127a:	e003      	b.n	8101284 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 810127c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810127e:	fab3 f383 	clz	r3, r3
 8101282:	b2db      	uxtb	r3, r3
 8101284:	3301      	adds	r3, #1
 8101286:	069b      	lsls	r3, r3, #26
 8101288:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 810128c:	683b      	ldr	r3, [r7, #0]
 810128e:	681b      	ldr	r3, [r3, #0]
 8101290:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8101294:	2b00      	cmp	r3, #0
 8101296:	d109      	bne.n	81012ac <HAL_ADC_ConfigChannel+0x434>
 8101298:	683b      	ldr	r3, [r7, #0]
 810129a:	681b      	ldr	r3, [r3, #0]
 810129c:	0e9b      	lsrs	r3, r3, #26
 810129e:	3301      	adds	r3, #1
 81012a0:	f003 031f 	and.w	r3, r3, #31
 81012a4:	2101      	movs	r1, #1
 81012a6:	fa01 f303 	lsl.w	r3, r1, r3
 81012aa:	e017      	b.n	81012dc <HAL_ADC_ConfigChannel+0x464>
 81012ac:	683b      	ldr	r3, [r7, #0]
 81012ae:	681b      	ldr	r3, [r3, #0]
 81012b0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 81012b2:	69fb      	ldr	r3, [r7, #28]
 81012b4:	fa93 f3a3 	rbit	r3, r3
 81012b8:	61bb      	str	r3, [r7, #24]
  return result;
 81012ba:	69bb      	ldr	r3, [r7, #24]
 81012bc:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 81012be:	6a3b      	ldr	r3, [r7, #32]
 81012c0:	2b00      	cmp	r3, #0
 81012c2:	d101      	bne.n	81012c8 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 81012c4:	2320      	movs	r3, #32
 81012c6:	e003      	b.n	81012d0 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 81012c8:	6a3b      	ldr	r3, [r7, #32]
 81012ca:	fab3 f383 	clz	r3, r3
 81012ce:	b2db      	uxtb	r3, r3
 81012d0:	3301      	adds	r3, #1
 81012d2:	f003 031f 	and.w	r3, r3, #31
 81012d6:	2101      	movs	r1, #1
 81012d8:	fa01 f303 	lsl.w	r3, r1, r3
 81012dc:	ea42 0103 	orr.w	r1, r2, r3
 81012e0:	683b      	ldr	r3, [r7, #0]
 81012e2:	681b      	ldr	r3, [r3, #0]
 81012e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 81012e8:	2b00      	cmp	r3, #0
 81012ea:	d10d      	bne.n	8101308 <HAL_ADC_ConfigChannel+0x490>
 81012ec:	683b      	ldr	r3, [r7, #0]
 81012ee:	681b      	ldr	r3, [r3, #0]
 81012f0:	0e9b      	lsrs	r3, r3, #26
 81012f2:	3301      	adds	r3, #1
 81012f4:	f003 021f 	and.w	r2, r3, #31
 81012f8:	4613      	mov	r3, r2
 81012fa:	005b      	lsls	r3, r3, #1
 81012fc:	4413      	add	r3, r2
 81012fe:	3b1e      	subs	r3, #30
 8101300:	051b      	lsls	r3, r3, #20
 8101302:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8101306:	e01b      	b.n	8101340 <HAL_ADC_ConfigChannel+0x4c8>
 8101308:	683b      	ldr	r3, [r7, #0]
 810130a:	681b      	ldr	r3, [r3, #0]
 810130c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 810130e:	693b      	ldr	r3, [r7, #16]
 8101310:	fa93 f3a3 	rbit	r3, r3
 8101314:	60fb      	str	r3, [r7, #12]
  return result;
 8101316:	68fb      	ldr	r3, [r7, #12]
 8101318:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 810131a:	697b      	ldr	r3, [r7, #20]
 810131c:	2b00      	cmp	r3, #0
 810131e:	d101      	bne.n	8101324 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8101320:	2320      	movs	r3, #32
 8101322:	e003      	b.n	810132c <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8101324:	697b      	ldr	r3, [r7, #20]
 8101326:	fab3 f383 	clz	r3, r3
 810132a:	b2db      	uxtb	r3, r3
 810132c:	3301      	adds	r3, #1
 810132e:	f003 021f 	and.w	r2, r3, #31
 8101332:	4613      	mov	r3, r2
 8101334:	005b      	lsls	r3, r3, #1
 8101336:	4413      	add	r3, r2
 8101338:	3b1e      	subs	r3, #30
 810133a:	051b      	lsls	r3, r3, #20
 810133c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8101340:	430b      	orrs	r3, r1
 8101342:	683a      	ldr	r2, [r7, #0]
 8101344:	6892      	ldr	r2, [r2, #8]
 8101346:	4619      	mov	r1, r3
 8101348:	f7ff fb1c 	bl	8100984 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 810134c:	683b      	ldr	r3, [r7, #0]
 810134e:	681b      	ldr	r3, [r3, #0]
 8101350:	2b00      	cmp	r3, #0
 8101352:	f280 80cf 	bge.w	81014f4 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8101356:	687b      	ldr	r3, [r7, #4]
 8101358:	681b      	ldr	r3, [r3, #0]
 810135a:	4a06      	ldr	r2, [pc, #24]	@ (8101374 <HAL_ADC_ConfigChannel+0x4fc>)
 810135c:	4293      	cmp	r3, r2
 810135e:	d004      	beq.n	810136a <HAL_ADC_ConfigChannel+0x4f2>
 8101360:	687b      	ldr	r3, [r7, #4]
 8101362:	681b      	ldr	r3, [r3, #0]
 8101364:	4a04      	ldr	r2, [pc, #16]	@ (8101378 <HAL_ADC_ConfigChannel+0x500>)
 8101366:	4293      	cmp	r3, r2
 8101368:	d10a      	bne.n	8101380 <HAL_ADC_ConfigChannel+0x508>
 810136a:	4b04      	ldr	r3, [pc, #16]	@ (810137c <HAL_ADC_ConfigChannel+0x504>)
 810136c:	e009      	b.n	8101382 <HAL_ADC_ConfigChannel+0x50a>
 810136e:	bf00      	nop
 8101370:	47ff0000 	.word	0x47ff0000
 8101374:	40022000 	.word	0x40022000
 8101378:	40022100 	.word	0x40022100
 810137c:	40022300 	.word	0x40022300
 8101380:	4b61      	ldr	r3, [pc, #388]	@ (8101508 <HAL_ADC_ConfigChannel+0x690>)
 8101382:	4618      	mov	r0, r3
 8101384:	f7ff fa70 	bl	8100868 <LL_ADC_GetCommonPathInternalCh>
 8101388:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 810138a:	687b      	ldr	r3, [r7, #4]
 810138c:	681b      	ldr	r3, [r3, #0]
 810138e:	4a5f      	ldr	r2, [pc, #380]	@ (810150c <HAL_ADC_ConfigChannel+0x694>)
 8101390:	4293      	cmp	r3, r2
 8101392:	d004      	beq.n	810139e <HAL_ADC_ConfigChannel+0x526>
 8101394:	687b      	ldr	r3, [r7, #4]
 8101396:	681b      	ldr	r3, [r3, #0]
 8101398:	4a5d      	ldr	r2, [pc, #372]	@ (8101510 <HAL_ADC_ConfigChannel+0x698>)
 810139a:	4293      	cmp	r3, r2
 810139c:	d10e      	bne.n	81013bc <HAL_ADC_ConfigChannel+0x544>
 810139e:	485b      	ldr	r0, [pc, #364]	@ (810150c <HAL_ADC_ConfigChannel+0x694>)
 81013a0:	f7ff fb8e 	bl	8100ac0 <LL_ADC_IsEnabled>
 81013a4:	4604      	mov	r4, r0
 81013a6:	485a      	ldr	r0, [pc, #360]	@ (8101510 <HAL_ADC_ConfigChannel+0x698>)
 81013a8:	f7ff fb8a 	bl	8100ac0 <LL_ADC_IsEnabled>
 81013ac:	4603      	mov	r3, r0
 81013ae:	4323      	orrs	r3, r4
 81013b0:	2b00      	cmp	r3, #0
 81013b2:	bf0c      	ite	eq
 81013b4:	2301      	moveq	r3, #1
 81013b6:	2300      	movne	r3, #0
 81013b8:	b2db      	uxtb	r3, r3
 81013ba:	e008      	b.n	81013ce <HAL_ADC_ConfigChannel+0x556>
 81013bc:	4855      	ldr	r0, [pc, #340]	@ (8101514 <HAL_ADC_ConfigChannel+0x69c>)
 81013be:	f7ff fb7f 	bl	8100ac0 <LL_ADC_IsEnabled>
 81013c2:	4603      	mov	r3, r0
 81013c4:	2b00      	cmp	r3, #0
 81013c6:	bf0c      	ite	eq
 81013c8:	2301      	moveq	r3, #1
 81013ca:	2300      	movne	r3, #0
 81013cc:	b2db      	uxtb	r3, r3
 81013ce:	2b00      	cmp	r3, #0
 81013d0:	d07d      	beq.n	81014ce <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 81013d2:	683b      	ldr	r3, [r7, #0]
 81013d4:	681b      	ldr	r3, [r3, #0]
 81013d6:	4a50      	ldr	r2, [pc, #320]	@ (8101518 <HAL_ADC_ConfigChannel+0x6a0>)
 81013d8:	4293      	cmp	r3, r2
 81013da:	d130      	bne.n	810143e <HAL_ADC_ConfigChannel+0x5c6>
 81013dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 81013de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 81013e2:	2b00      	cmp	r3, #0
 81013e4:	d12b      	bne.n	810143e <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 81013e6:	687b      	ldr	r3, [r7, #4]
 81013e8:	681b      	ldr	r3, [r3, #0]
 81013ea:	4a4a      	ldr	r2, [pc, #296]	@ (8101514 <HAL_ADC_ConfigChannel+0x69c>)
 81013ec:	4293      	cmp	r3, r2
 81013ee:	f040 8081 	bne.w	81014f4 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 81013f2:	687b      	ldr	r3, [r7, #4]
 81013f4:	681b      	ldr	r3, [r3, #0]
 81013f6:	4a45      	ldr	r2, [pc, #276]	@ (810150c <HAL_ADC_ConfigChannel+0x694>)
 81013f8:	4293      	cmp	r3, r2
 81013fa:	d004      	beq.n	8101406 <HAL_ADC_ConfigChannel+0x58e>
 81013fc:	687b      	ldr	r3, [r7, #4]
 81013fe:	681b      	ldr	r3, [r3, #0]
 8101400:	4a43      	ldr	r2, [pc, #268]	@ (8101510 <HAL_ADC_ConfigChannel+0x698>)
 8101402:	4293      	cmp	r3, r2
 8101404:	d101      	bne.n	810140a <HAL_ADC_ConfigChannel+0x592>
 8101406:	4a45      	ldr	r2, [pc, #276]	@ (810151c <HAL_ADC_ConfigChannel+0x6a4>)
 8101408:	e000      	b.n	810140c <HAL_ADC_ConfigChannel+0x594>
 810140a:	4a3f      	ldr	r2, [pc, #252]	@ (8101508 <HAL_ADC_ConfigChannel+0x690>)
 810140c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 810140e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8101412:	4619      	mov	r1, r3
 8101414:	4610      	mov	r0, r2
 8101416:	f7ff fa14 	bl	8100842 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 810141a:	4b41      	ldr	r3, [pc, #260]	@ (8101520 <HAL_ADC_ConfigChannel+0x6a8>)
 810141c:	681b      	ldr	r3, [r3, #0]
 810141e:	099b      	lsrs	r3, r3, #6
 8101420:	4a40      	ldr	r2, [pc, #256]	@ (8101524 <HAL_ADC_ConfigChannel+0x6ac>)
 8101422:	fba2 2303 	umull	r2, r3, r2, r3
 8101426:	099b      	lsrs	r3, r3, #6
 8101428:	3301      	adds	r3, #1
 810142a:	005b      	lsls	r3, r3, #1
 810142c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 810142e:	e002      	b.n	8101436 <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8101430:	68bb      	ldr	r3, [r7, #8]
 8101432:	3b01      	subs	r3, #1
 8101434:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8101436:	68bb      	ldr	r3, [r7, #8]
 8101438:	2b00      	cmp	r3, #0
 810143a:	d1f9      	bne.n	8101430 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 810143c:	e05a      	b.n	81014f4 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 810143e:	683b      	ldr	r3, [r7, #0]
 8101440:	681b      	ldr	r3, [r3, #0]
 8101442:	4a39      	ldr	r2, [pc, #228]	@ (8101528 <HAL_ADC_ConfigChannel+0x6b0>)
 8101444:	4293      	cmp	r3, r2
 8101446:	d11e      	bne.n	8101486 <HAL_ADC_ConfigChannel+0x60e>
 8101448:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 810144a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 810144e:	2b00      	cmp	r3, #0
 8101450:	d119      	bne.n	8101486 <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8101452:	687b      	ldr	r3, [r7, #4]
 8101454:	681b      	ldr	r3, [r3, #0]
 8101456:	4a2f      	ldr	r2, [pc, #188]	@ (8101514 <HAL_ADC_ConfigChannel+0x69c>)
 8101458:	4293      	cmp	r3, r2
 810145a:	d14b      	bne.n	81014f4 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 810145c:	687b      	ldr	r3, [r7, #4]
 810145e:	681b      	ldr	r3, [r3, #0]
 8101460:	4a2a      	ldr	r2, [pc, #168]	@ (810150c <HAL_ADC_ConfigChannel+0x694>)
 8101462:	4293      	cmp	r3, r2
 8101464:	d004      	beq.n	8101470 <HAL_ADC_ConfigChannel+0x5f8>
 8101466:	687b      	ldr	r3, [r7, #4]
 8101468:	681b      	ldr	r3, [r3, #0]
 810146a:	4a29      	ldr	r2, [pc, #164]	@ (8101510 <HAL_ADC_ConfigChannel+0x698>)
 810146c:	4293      	cmp	r3, r2
 810146e:	d101      	bne.n	8101474 <HAL_ADC_ConfigChannel+0x5fc>
 8101470:	4a2a      	ldr	r2, [pc, #168]	@ (810151c <HAL_ADC_ConfigChannel+0x6a4>)
 8101472:	e000      	b.n	8101476 <HAL_ADC_ConfigChannel+0x5fe>
 8101474:	4a24      	ldr	r2, [pc, #144]	@ (8101508 <HAL_ADC_ConfigChannel+0x690>)
 8101476:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8101478:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 810147c:	4619      	mov	r1, r3
 810147e:	4610      	mov	r0, r2
 8101480:	f7ff f9df 	bl	8100842 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8101484:	e036      	b.n	81014f4 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8101486:	683b      	ldr	r3, [r7, #0]
 8101488:	681b      	ldr	r3, [r3, #0]
 810148a:	4a28      	ldr	r2, [pc, #160]	@ (810152c <HAL_ADC_ConfigChannel+0x6b4>)
 810148c:	4293      	cmp	r3, r2
 810148e:	d131      	bne.n	81014f4 <HAL_ADC_ConfigChannel+0x67c>
 8101490:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8101492:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8101496:	2b00      	cmp	r3, #0
 8101498:	d12c      	bne.n	81014f4 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 810149a:	687b      	ldr	r3, [r7, #4]
 810149c:	681b      	ldr	r3, [r3, #0]
 810149e:	4a1d      	ldr	r2, [pc, #116]	@ (8101514 <HAL_ADC_ConfigChannel+0x69c>)
 81014a0:	4293      	cmp	r3, r2
 81014a2:	d127      	bne.n	81014f4 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 81014a4:	687b      	ldr	r3, [r7, #4]
 81014a6:	681b      	ldr	r3, [r3, #0]
 81014a8:	4a18      	ldr	r2, [pc, #96]	@ (810150c <HAL_ADC_ConfigChannel+0x694>)
 81014aa:	4293      	cmp	r3, r2
 81014ac:	d004      	beq.n	81014b8 <HAL_ADC_ConfigChannel+0x640>
 81014ae:	687b      	ldr	r3, [r7, #4]
 81014b0:	681b      	ldr	r3, [r3, #0]
 81014b2:	4a17      	ldr	r2, [pc, #92]	@ (8101510 <HAL_ADC_ConfigChannel+0x698>)
 81014b4:	4293      	cmp	r3, r2
 81014b6:	d101      	bne.n	81014bc <HAL_ADC_ConfigChannel+0x644>
 81014b8:	4a18      	ldr	r2, [pc, #96]	@ (810151c <HAL_ADC_ConfigChannel+0x6a4>)
 81014ba:	e000      	b.n	81014be <HAL_ADC_ConfigChannel+0x646>
 81014bc:	4a12      	ldr	r2, [pc, #72]	@ (8101508 <HAL_ADC_ConfigChannel+0x690>)
 81014be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 81014c0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 81014c4:	4619      	mov	r1, r3
 81014c6:	4610      	mov	r0, r2
 81014c8:	f7ff f9bb 	bl	8100842 <LL_ADC_SetCommonPathInternalCh>
 81014cc:	e012      	b.n	81014f4 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 81014ce:	687b      	ldr	r3, [r7, #4]
 81014d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81014d2:	f043 0220 	orr.w	r2, r3, #32
 81014d6:	687b      	ldr	r3, [r7, #4]
 81014d8:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 81014da:	2301      	movs	r3, #1
 81014dc:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 81014e0:	e008      	b.n	81014f4 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 81014e2:	687b      	ldr	r3, [r7, #4]
 81014e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81014e6:	f043 0220 	orr.w	r2, r3, #32
 81014ea:	687b      	ldr	r3, [r7, #4]
 81014ec:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 81014ee:	2301      	movs	r3, #1
 81014f0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 81014f4:	687b      	ldr	r3, [r7, #4]
 81014f6:	2200      	movs	r2, #0
 81014f8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 81014fc:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8101500:	4618      	mov	r0, r3
 8101502:	3784      	adds	r7, #132	@ 0x84
 8101504:	46bd      	mov	sp, r7
 8101506:	bd90      	pop	{r4, r7, pc}
 8101508:	58026300 	.word	0x58026300
 810150c:	40022000 	.word	0x40022000
 8101510:	40022100 	.word	0x40022100
 8101514:	58026000 	.word	0x58026000
 8101518:	cb840000 	.word	0xcb840000
 810151c:	40022300 	.word	0x40022300
 8101520:	10000000 	.word	0x10000000
 8101524:	053e2d63 	.word	0x053e2d63
 8101528:	c7520000 	.word	0xc7520000
 810152c:	cfb80000 	.word	0xcfb80000

08101530 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8101530:	b580      	push	{r7, lr}
 8101532:	b084      	sub	sp, #16
 8101534:	af00      	add	r7, sp, #0
 8101536:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8101538:	687b      	ldr	r3, [r7, #4]
 810153a:	681b      	ldr	r3, [r3, #0]
 810153c:	4a7a      	ldr	r2, [pc, #488]	@ (8101728 <ADC_ConfigureBoostMode+0x1f8>)
 810153e:	4293      	cmp	r3, r2
 8101540:	d004      	beq.n	810154c <ADC_ConfigureBoostMode+0x1c>
 8101542:	687b      	ldr	r3, [r7, #4]
 8101544:	681b      	ldr	r3, [r3, #0]
 8101546:	4a79      	ldr	r2, [pc, #484]	@ (810172c <ADC_ConfigureBoostMode+0x1fc>)
 8101548:	4293      	cmp	r3, r2
 810154a:	d109      	bne.n	8101560 <ADC_ConfigureBoostMode+0x30>
 810154c:	4b78      	ldr	r3, [pc, #480]	@ (8101730 <ADC_ConfigureBoostMode+0x200>)
 810154e:	689b      	ldr	r3, [r3, #8]
 8101550:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8101554:	2b00      	cmp	r3, #0
 8101556:	bf14      	ite	ne
 8101558:	2301      	movne	r3, #1
 810155a:	2300      	moveq	r3, #0
 810155c:	b2db      	uxtb	r3, r3
 810155e:	e008      	b.n	8101572 <ADC_ConfigureBoostMode+0x42>
 8101560:	4b74      	ldr	r3, [pc, #464]	@ (8101734 <ADC_ConfigureBoostMode+0x204>)
 8101562:	689b      	ldr	r3, [r3, #8]
 8101564:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8101568:	2b00      	cmp	r3, #0
 810156a:	bf14      	ite	ne
 810156c:	2301      	movne	r3, #1
 810156e:	2300      	moveq	r3, #0
 8101570:	b2db      	uxtb	r3, r3
 8101572:	2b00      	cmp	r3, #0
 8101574:	d01c      	beq.n	81015b0 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8101576:	f000 fcfb 	bl	8101f70 <HAL_RCC_GetHCLKFreq>
 810157a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 810157c:	687b      	ldr	r3, [r7, #4]
 810157e:	685b      	ldr	r3, [r3, #4]
 8101580:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8101584:	d010      	beq.n	81015a8 <ADC_ConfigureBoostMode+0x78>
 8101586:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 810158a:	d873      	bhi.n	8101674 <ADC_ConfigureBoostMode+0x144>
 810158c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8101590:	d002      	beq.n	8101598 <ADC_ConfigureBoostMode+0x68>
 8101592:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8101596:	d16d      	bne.n	8101674 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8101598:	687b      	ldr	r3, [r7, #4]
 810159a:	685b      	ldr	r3, [r3, #4]
 810159c:	0c1b      	lsrs	r3, r3, #16
 810159e:	68fa      	ldr	r2, [r7, #12]
 81015a0:	fbb2 f3f3 	udiv	r3, r2, r3
 81015a4:	60fb      	str	r3, [r7, #12]
        break;
 81015a6:	e068      	b.n	810167a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 81015a8:	68fb      	ldr	r3, [r7, #12]
 81015aa:	089b      	lsrs	r3, r3, #2
 81015ac:	60fb      	str	r3, [r7, #12]
        break;
 81015ae:	e064      	b.n	810167a <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 81015b0:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 81015b4:	f04f 0100 	mov.w	r1, #0
 81015b8:	f001 ff6c 	bl	8103494 <HAL_RCCEx_GetPeriphCLKFreq>
 81015bc:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 81015be:	687b      	ldr	r3, [r7, #4]
 81015c0:	685b      	ldr	r3, [r3, #4]
 81015c2:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 81015c6:	d051      	beq.n	810166c <ADC_ConfigureBoostMode+0x13c>
 81015c8:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 81015cc:	d854      	bhi.n	8101678 <ADC_ConfigureBoostMode+0x148>
 81015ce:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 81015d2:	d047      	beq.n	8101664 <ADC_ConfigureBoostMode+0x134>
 81015d4:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 81015d8:	d84e      	bhi.n	8101678 <ADC_ConfigureBoostMode+0x148>
 81015da:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 81015de:	d03d      	beq.n	810165c <ADC_ConfigureBoostMode+0x12c>
 81015e0:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 81015e4:	d848      	bhi.n	8101678 <ADC_ConfigureBoostMode+0x148>
 81015e6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 81015ea:	d033      	beq.n	8101654 <ADC_ConfigureBoostMode+0x124>
 81015ec:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 81015f0:	d842      	bhi.n	8101678 <ADC_ConfigureBoostMode+0x148>
 81015f2:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 81015f6:	d029      	beq.n	810164c <ADC_ConfigureBoostMode+0x11c>
 81015f8:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 81015fc:	d83c      	bhi.n	8101678 <ADC_ConfigureBoostMode+0x148>
 81015fe:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8101602:	d01a      	beq.n	810163a <ADC_ConfigureBoostMode+0x10a>
 8101604:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8101608:	d836      	bhi.n	8101678 <ADC_ConfigureBoostMode+0x148>
 810160a:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 810160e:	d014      	beq.n	810163a <ADC_ConfigureBoostMode+0x10a>
 8101610:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8101614:	d830      	bhi.n	8101678 <ADC_ConfigureBoostMode+0x148>
 8101616:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 810161a:	d00e      	beq.n	810163a <ADC_ConfigureBoostMode+0x10a>
 810161c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8101620:	d82a      	bhi.n	8101678 <ADC_ConfigureBoostMode+0x148>
 8101622:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8101626:	d008      	beq.n	810163a <ADC_ConfigureBoostMode+0x10a>
 8101628:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 810162c:	d824      	bhi.n	8101678 <ADC_ConfigureBoostMode+0x148>
 810162e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8101632:	d002      	beq.n	810163a <ADC_ConfigureBoostMode+0x10a>
 8101634:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8101638:	d11e      	bne.n	8101678 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 810163a:	687b      	ldr	r3, [r7, #4]
 810163c:	685b      	ldr	r3, [r3, #4]
 810163e:	0c9b      	lsrs	r3, r3, #18
 8101640:	005b      	lsls	r3, r3, #1
 8101642:	68fa      	ldr	r2, [r7, #12]
 8101644:	fbb2 f3f3 	udiv	r3, r2, r3
 8101648:	60fb      	str	r3, [r7, #12]
        break;
 810164a:	e016      	b.n	810167a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 810164c:	68fb      	ldr	r3, [r7, #12]
 810164e:	091b      	lsrs	r3, r3, #4
 8101650:	60fb      	str	r3, [r7, #12]
        break;
 8101652:	e012      	b.n	810167a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8101654:	68fb      	ldr	r3, [r7, #12]
 8101656:	095b      	lsrs	r3, r3, #5
 8101658:	60fb      	str	r3, [r7, #12]
        break;
 810165a:	e00e      	b.n	810167a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 810165c:	68fb      	ldr	r3, [r7, #12]
 810165e:	099b      	lsrs	r3, r3, #6
 8101660:	60fb      	str	r3, [r7, #12]
        break;
 8101662:	e00a      	b.n	810167a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8101664:	68fb      	ldr	r3, [r7, #12]
 8101666:	09db      	lsrs	r3, r3, #7
 8101668:	60fb      	str	r3, [r7, #12]
        break;
 810166a:	e006      	b.n	810167a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 810166c:	68fb      	ldr	r3, [r7, #12]
 810166e:	0a1b      	lsrs	r3, r3, #8
 8101670:	60fb      	str	r3, [r7, #12]
        break;
 8101672:	e002      	b.n	810167a <ADC_ConfigureBoostMode+0x14a>
        break;
 8101674:	bf00      	nop
 8101676:	e000      	b.n	810167a <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8101678:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 810167a:	f7ff f8ad 	bl	81007d8 <HAL_GetREVID>
 810167e:	4603      	mov	r3, r0
 8101680:	f241 0203 	movw	r2, #4099	@ 0x1003
 8101684:	4293      	cmp	r3, r2
 8101686:	d815      	bhi.n	81016b4 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8101688:	68fb      	ldr	r3, [r7, #12]
 810168a:	4a2b      	ldr	r2, [pc, #172]	@ (8101738 <ADC_ConfigureBoostMode+0x208>)
 810168c:	4293      	cmp	r3, r2
 810168e:	d908      	bls.n	81016a2 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8101690:	687b      	ldr	r3, [r7, #4]
 8101692:	681b      	ldr	r3, [r3, #0]
 8101694:	689a      	ldr	r2, [r3, #8]
 8101696:	687b      	ldr	r3, [r7, #4]
 8101698:	681b      	ldr	r3, [r3, #0]
 810169a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 810169e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 81016a0:	e03e      	b.n	8101720 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 81016a2:	687b      	ldr	r3, [r7, #4]
 81016a4:	681b      	ldr	r3, [r3, #0]
 81016a6:	689a      	ldr	r2, [r3, #8]
 81016a8:	687b      	ldr	r3, [r7, #4]
 81016aa:	681b      	ldr	r3, [r3, #0]
 81016ac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 81016b0:	609a      	str	r2, [r3, #8]
}
 81016b2:	e035      	b.n	8101720 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 81016b4:	68fb      	ldr	r3, [r7, #12]
 81016b6:	085b      	lsrs	r3, r3, #1
 81016b8:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 81016ba:	68fb      	ldr	r3, [r7, #12]
 81016bc:	4a1f      	ldr	r2, [pc, #124]	@ (810173c <ADC_ConfigureBoostMode+0x20c>)
 81016be:	4293      	cmp	r3, r2
 81016c0:	d808      	bhi.n	81016d4 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 81016c2:	687b      	ldr	r3, [r7, #4]
 81016c4:	681b      	ldr	r3, [r3, #0]
 81016c6:	689a      	ldr	r2, [r3, #8]
 81016c8:	687b      	ldr	r3, [r7, #4]
 81016ca:	681b      	ldr	r3, [r3, #0]
 81016cc:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 81016d0:	609a      	str	r2, [r3, #8]
}
 81016d2:	e025      	b.n	8101720 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 81016d4:	68fb      	ldr	r3, [r7, #12]
 81016d6:	4a1a      	ldr	r2, [pc, #104]	@ (8101740 <ADC_ConfigureBoostMode+0x210>)
 81016d8:	4293      	cmp	r3, r2
 81016da:	d80a      	bhi.n	81016f2 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 81016dc:	687b      	ldr	r3, [r7, #4]
 81016de:	681b      	ldr	r3, [r3, #0]
 81016e0:	689b      	ldr	r3, [r3, #8]
 81016e2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 81016e6:	687b      	ldr	r3, [r7, #4]
 81016e8:	681b      	ldr	r3, [r3, #0]
 81016ea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 81016ee:	609a      	str	r2, [r3, #8]
}
 81016f0:	e016      	b.n	8101720 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 81016f2:	68fb      	ldr	r3, [r7, #12]
 81016f4:	4a13      	ldr	r2, [pc, #76]	@ (8101744 <ADC_ConfigureBoostMode+0x214>)
 81016f6:	4293      	cmp	r3, r2
 81016f8:	d80a      	bhi.n	8101710 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 81016fa:	687b      	ldr	r3, [r7, #4]
 81016fc:	681b      	ldr	r3, [r3, #0]
 81016fe:	689b      	ldr	r3, [r3, #8]
 8101700:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8101704:	687b      	ldr	r3, [r7, #4]
 8101706:	681b      	ldr	r3, [r3, #0]
 8101708:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 810170c:	609a      	str	r2, [r3, #8]
}
 810170e:	e007      	b.n	8101720 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8101710:	687b      	ldr	r3, [r7, #4]
 8101712:	681b      	ldr	r3, [r3, #0]
 8101714:	689a      	ldr	r2, [r3, #8]
 8101716:	687b      	ldr	r3, [r7, #4]
 8101718:	681b      	ldr	r3, [r3, #0]
 810171a:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 810171e:	609a      	str	r2, [r3, #8]
}
 8101720:	bf00      	nop
 8101722:	3710      	adds	r7, #16
 8101724:	46bd      	mov	sp, r7
 8101726:	bd80      	pop	{r7, pc}
 8101728:	40022000 	.word	0x40022000
 810172c:	40022100 	.word	0x40022100
 8101730:	40022300 	.word	0x40022300
 8101734:	58026300 	.word	0x58026300
 8101738:	01312d00 	.word	0x01312d00
 810173c:	005f5e10 	.word	0x005f5e10
 8101740:	00bebc20 	.word	0x00bebc20
 8101744:	017d7840 	.word	0x017d7840

08101748 <LL_ADC_IsEnabled>:
{
 8101748:	b480      	push	{r7}
 810174a:	b083      	sub	sp, #12
 810174c:	af00      	add	r7, sp, #0
 810174e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8101750:	687b      	ldr	r3, [r7, #4]
 8101752:	689b      	ldr	r3, [r3, #8]
 8101754:	f003 0301 	and.w	r3, r3, #1
 8101758:	2b01      	cmp	r3, #1
 810175a:	d101      	bne.n	8101760 <LL_ADC_IsEnabled+0x18>
 810175c:	2301      	movs	r3, #1
 810175e:	e000      	b.n	8101762 <LL_ADC_IsEnabled+0x1a>
 8101760:	2300      	movs	r3, #0
}
 8101762:	4618      	mov	r0, r3
 8101764:	370c      	adds	r7, #12
 8101766:	46bd      	mov	sp, r7
 8101768:	f85d 7b04 	ldr.w	r7, [sp], #4
 810176c:	4770      	bx	lr

0810176e <LL_ADC_REG_IsConversionOngoing>:
{
 810176e:	b480      	push	{r7}
 8101770:	b083      	sub	sp, #12
 8101772:	af00      	add	r7, sp, #0
 8101774:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8101776:	687b      	ldr	r3, [r7, #4]
 8101778:	689b      	ldr	r3, [r3, #8]
 810177a:	f003 0304 	and.w	r3, r3, #4
 810177e:	2b04      	cmp	r3, #4
 8101780:	d101      	bne.n	8101786 <LL_ADC_REG_IsConversionOngoing+0x18>
 8101782:	2301      	movs	r3, #1
 8101784:	e000      	b.n	8101788 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8101786:	2300      	movs	r3, #0
}
 8101788:	4618      	mov	r0, r3
 810178a:	370c      	adds	r7, #12
 810178c:	46bd      	mov	sp, r7
 810178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101792:	4770      	bx	lr

08101794 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8101794:	b590      	push	{r4, r7, lr}
 8101796:	b09f      	sub	sp, #124	@ 0x7c
 8101798:	af00      	add	r7, sp, #0
 810179a:	6078      	str	r0, [r7, #4]
 810179c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 810179e:	2300      	movs	r3, #0
 81017a0:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 81017a4:	687b      	ldr	r3, [r7, #4]
 81017a6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 81017aa:	2b01      	cmp	r3, #1
 81017ac:	d101      	bne.n	81017b2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 81017ae:	2302      	movs	r3, #2
 81017b0:	e0c4      	b.n	810193c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
 81017b2:	687b      	ldr	r3, [r7, #4]
 81017b4:	2201      	movs	r2, #1
 81017b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 81017ba:	2300      	movs	r3, #0
 81017bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 81017be:	2300      	movs	r3, #0
 81017c0:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 81017c2:	687b      	ldr	r3, [r7, #4]
 81017c4:	681b      	ldr	r3, [r3, #0]
 81017c6:	4a5f      	ldr	r2, [pc, #380]	@ (8101944 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 81017c8:	4293      	cmp	r3, r2
 81017ca:	d102      	bne.n	81017d2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 81017cc:	4b5e      	ldr	r3, [pc, #376]	@ (8101948 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 81017ce:	60bb      	str	r3, [r7, #8]
 81017d0:	e001      	b.n	81017d6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 81017d2:	2300      	movs	r3, #0
 81017d4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 81017d6:	68bb      	ldr	r3, [r7, #8]
 81017d8:	2b00      	cmp	r3, #0
 81017da:	d10b      	bne.n	81017f4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 81017dc:	687b      	ldr	r3, [r7, #4]
 81017de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81017e0:	f043 0220 	orr.w	r2, r3, #32
 81017e4:	687b      	ldr	r3, [r7, #4]
 81017e6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 81017e8:	687b      	ldr	r3, [r7, #4]
 81017ea:	2200      	movs	r2, #0
 81017ec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 81017f0:	2301      	movs	r3, #1
 81017f2:	e0a3      	b.n	810193c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 81017f4:	68bb      	ldr	r3, [r7, #8]
 81017f6:	4618      	mov	r0, r3
 81017f8:	f7ff ffb9 	bl	810176e <LL_ADC_REG_IsConversionOngoing>
 81017fc:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 81017fe:	687b      	ldr	r3, [r7, #4]
 8101800:	681b      	ldr	r3, [r3, #0]
 8101802:	4618      	mov	r0, r3
 8101804:	f7ff ffb3 	bl	810176e <LL_ADC_REG_IsConversionOngoing>
 8101808:	4603      	mov	r3, r0
 810180a:	2b00      	cmp	r3, #0
 810180c:	f040 8085 	bne.w	810191a <HAL_ADCEx_MultiModeConfigChannel+0x186>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8101810:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8101812:	2b00      	cmp	r3, #0
 8101814:	f040 8081 	bne.w	810191a <HAL_ADCEx_MultiModeConfigChannel+0x186>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8101818:	687b      	ldr	r3, [r7, #4]
 810181a:	681b      	ldr	r3, [r3, #0]
 810181c:	4a49      	ldr	r2, [pc, #292]	@ (8101944 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 810181e:	4293      	cmp	r3, r2
 8101820:	d004      	beq.n	810182c <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8101822:	687b      	ldr	r3, [r7, #4]
 8101824:	681b      	ldr	r3, [r3, #0]
 8101826:	4a48      	ldr	r2, [pc, #288]	@ (8101948 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8101828:	4293      	cmp	r3, r2
 810182a:	d101      	bne.n	8101830 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 810182c:	4b47      	ldr	r3, [pc, #284]	@ (810194c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 810182e:	e000      	b.n	8101832 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8101830:	4b47      	ldr	r3, [pc, #284]	@ (8101950 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8101832:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8101834:	683b      	ldr	r3, [r7, #0]
 8101836:	681b      	ldr	r3, [r3, #0]
 8101838:	2b00      	cmp	r3, #0
 810183a:	d03b      	beq.n	81018b4 <HAL_ADCEx_MultiModeConfigChannel+0x120>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 810183c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 810183e:	689b      	ldr	r3, [r3, #8]
 8101840:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8101844:	683b      	ldr	r3, [r7, #0]
 8101846:	685b      	ldr	r3, [r3, #4]
 8101848:	431a      	orrs	r2, r3
 810184a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 810184c:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 810184e:	687b      	ldr	r3, [r7, #4]
 8101850:	681b      	ldr	r3, [r3, #0]
 8101852:	4a3c      	ldr	r2, [pc, #240]	@ (8101944 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8101854:	4293      	cmp	r3, r2
 8101856:	d004      	beq.n	8101862 <HAL_ADCEx_MultiModeConfigChannel+0xce>
 8101858:	687b      	ldr	r3, [r7, #4]
 810185a:	681b      	ldr	r3, [r3, #0]
 810185c:	4a3a      	ldr	r2, [pc, #232]	@ (8101948 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 810185e:	4293      	cmp	r3, r2
 8101860:	d10e      	bne.n	8101880 <HAL_ADCEx_MultiModeConfigChannel+0xec>
 8101862:	4838      	ldr	r0, [pc, #224]	@ (8101944 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8101864:	f7ff ff70 	bl	8101748 <LL_ADC_IsEnabled>
 8101868:	4604      	mov	r4, r0
 810186a:	4837      	ldr	r0, [pc, #220]	@ (8101948 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 810186c:	f7ff ff6c 	bl	8101748 <LL_ADC_IsEnabled>
 8101870:	4603      	mov	r3, r0
 8101872:	4323      	orrs	r3, r4
 8101874:	2b00      	cmp	r3, #0
 8101876:	bf0c      	ite	eq
 8101878:	2301      	moveq	r3, #1
 810187a:	2300      	movne	r3, #0
 810187c:	b2db      	uxtb	r3, r3
 810187e:	e008      	b.n	8101892 <HAL_ADCEx_MultiModeConfigChannel+0xfe>
 8101880:	4834      	ldr	r0, [pc, #208]	@ (8101954 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8101882:	f7ff ff61 	bl	8101748 <LL_ADC_IsEnabled>
 8101886:	4603      	mov	r3, r0
 8101888:	2b00      	cmp	r3, #0
 810188a:	bf0c      	ite	eq
 810188c:	2301      	moveq	r3, #1
 810188e:	2300      	movne	r3, #0
 8101890:	b2db      	uxtb	r3, r3
 8101892:	2b00      	cmp	r3, #0
 8101894:	d04b      	beq.n	810192e <HAL_ADCEx_MultiModeConfigChannel+0x19a>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8101896:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8101898:	689b      	ldr	r3, [r3, #8]
 810189a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 810189e:	f023 030f 	bic.w	r3, r3, #15
 81018a2:	683a      	ldr	r2, [r7, #0]
 81018a4:	6811      	ldr	r1, [r2, #0]
 81018a6:	683a      	ldr	r2, [r7, #0]
 81018a8:	6892      	ldr	r2, [r2, #8]
 81018aa:	430a      	orrs	r2, r1
 81018ac:	431a      	orrs	r2, r3
 81018ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 81018b0:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 81018b2:	e03c      	b.n	810192e <HAL_ADCEx_MultiModeConfigChannel+0x19a>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 81018b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 81018b6:	689b      	ldr	r3, [r3, #8]
 81018b8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 81018bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 81018be:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 81018c0:	687b      	ldr	r3, [r7, #4]
 81018c2:	681b      	ldr	r3, [r3, #0]
 81018c4:	4a1f      	ldr	r2, [pc, #124]	@ (8101944 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 81018c6:	4293      	cmp	r3, r2
 81018c8:	d004      	beq.n	81018d4 <HAL_ADCEx_MultiModeConfigChannel+0x140>
 81018ca:	687b      	ldr	r3, [r7, #4]
 81018cc:	681b      	ldr	r3, [r3, #0]
 81018ce:	4a1e      	ldr	r2, [pc, #120]	@ (8101948 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 81018d0:	4293      	cmp	r3, r2
 81018d2:	d10e      	bne.n	81018f2 <HAL_ADCEx_MultiModeConfigChannel+0x15e>
 81018d4:	481b      	ldr	r0, [pc, #108]	@ (8101944 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 81018d6:	f7ff ff37 	bl	8101748 <LL_ADC_IsEnabled>
 81018da:	4604      	mov	r4, r0
 81018dc:	481a      	ldr	r0, [pc, #104]	@ (8101948 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 81018de:	f7ff ff33 	bl	8101748 <LL_ADC_IsEnabled>
 81018e2:	4603      	mov	r3, r0
 81018e4:	4323      	orrs	r3, r4
 81018e6:	2b00      	cmp	r3, #0
 81018e8:	bf0c      	ite	eq
 81018ea:	2301      	moveq	r3, #1
 81018ec:	2300      	movne	r3, #0
 81018ee:	b2db      	uxtb	r3, r3
 81018f0:	e008      	b.n	8101904 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 81018f2:	4818      	ldr	r0, [pc, #96]	@ (8101954 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 81018f4:	f7ff ff28 	bl	8101748 <LL_ADC_IsEnabled>
 81018f8:	4603      	mov	r3, r0
 81018fa:	2b00      	cmp	r3, #0
 81018fc:	bf0c      	ite	eq
 81018fe:	2301      	moveq	r3, #1
 8101900:	2300      	movne	r3, #0
 8101902:	b2db      	uxtb	r3, r3
 8101904:	2b00      	cmp	r3, #0
 8101906:	d012      	beq.n	810192e <HAL_ADCEx_MultiModeConfigChannel+0x19a>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8101908:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 810190a:	689b      	ldr	r3, [r3, #8]
 810190c:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8101910:	f023 030f 	bic.w	r3, r3, #15
 8101914:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8101916:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8101918:	e009      	b.n	810192e <HAL_ADCEx_MultiModeConfigChannel+0x19a>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 810191a:	687b      	ldr	r3, [r7, #4]
 810191c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810191e:	f043 0220 	orr.w	r2, r3, #32
 8101922:	687b      	ldr	r3, [r7, #4]
 8101924:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8101926:	2301      	movs	r3, #1
 8101928:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 810192c:	e000      	b.n	8101930 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 810192e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8101930:	687b      	ldr	r3, [r7, #4]
 8101932:	2200      	movs	r2, #0
 8101934:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8101938:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 810193c:	4618      	mov	r0, r3
 810193e:	377c      	adds	r7, #124	@ 0x7c
 8101940:	46bd      	mov	sp, r7
 8101942:	bd90      	pop	{r4, r7, pc}
 8101944:	40022000 	.word	0x40022000
 8101948:	40022100 	.word	0x40022100
 810194c:	40022300 	.word	0x40022300
 8101950:	58026300 	.word	0x58026300
 8101954:	58026000 	.word	0x58026000

08101958 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8101958:	b480      	push	{r7}
 810195a:	b085      	sub	sp, #20
 810195c:	af00      	add	r7, sp, #0
 810195e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8101960:	687b      	ldr	r3, [r7, #4]
 8101962:	f003 0307 	and.w	r3, r3, #7
 8101966:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8101968:	4b0c      	ldr	r3, [pc, #48]	@ (810199c <__NVIC_SetPriorityGrouping+0x44>)
 810196a:	68db      	ldr	r3, [r3, #12]
 810196c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 810196e:	68ba      	ldr	r2, [r7, #8]
 8101970:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8101974:	4013      	ands	r3, r2
 8101976:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8101978:	68fb      	ldr	r3, [r7, #12]
 810197a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 810197c:	68bb      	ldr	r3, [r7, #8]
 810197e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8101980:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8101984:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8101988:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 810198a:	4a04      	ldr	r2, [pc, #16]	@ (810199c <__NVIC_SetPriorityGrouping+0x44>)
 810198c:	68bb      	ldr	r3, [r7, #8]
 810198e:	60d3      	str	r3, [r2, #12]
}
 8101990:	bf00      	nop
 8101992:	3714      	adds	r7, #20
 8101994:	46bd      	mov	sp, r7
 8101996:	f85d 7b04 	ldr.w	r7, [sp], #4
 810199a:	4770      	bx	lr
 810199c:	e000ed00 	.word	0xe000ed00

081019a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 81019a0:	b480      	push	{r7}
 81019a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 81019a4:	4b04      	ldr	r3, [pc, #16]	@ (81019b8 <__NVIC_GetPriorityGrouping+0x18>)
 81019a6:	68db      	ldr	r3, [r3, #12]
 81019a8:	0a1b      	lsrs	r3, r3, #8
 81019aa:	f003 0307 	and.w	r3, r3, #7
}
 81019ae:	4618      	mov	r0, r3
 81019b0:	46bd      	mov	sp, r7
 81019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81019b6:	4770      	bx	lr
 81019b8:	e000ed00 	.word	0xe000ed00

081019bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 81019bc:	b480      	push	{r7}
 81019be:	b083      	sub	sp, #12
 81019c0:	af00      	add	r7, sp, #0
 81019c2:	4603      	mov	r3, r0
 81019c4:	6039      	str	r1, [r7, #0]
 81019c6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 81019c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81019cc:	2b00      	cmp	r3, #0
 81019ce:	db0a      	blt.n	81019e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81019d0:	683b      	ldr	r3, [r7, #0]
 81019d2:	b2da      	uxtb	r2, r3
 81019d4:	490c      	ldr	r1, [pc, #48]	@ (8101a08 <__NVIC_SetPriority+0x4c>)
 81019d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81019da:	0112      	lsls	r2, r2, #4
 81019dc:	b2d2      	uxtb	r2, r2
 81019de:	440b      	add	r3, r1
 81019e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 81019e4:	e00a      	b.n	81019fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81019e6:	683b      	ldr	r3, [r7, #0]
 81019e8:	b2da      	uxtb	r2, r3
 81019ea:	4908      	ldr	r1, [pc, #32]	@ (8101a0c <__NVIC_SetPriority+0x50>)
 81019ec:	88fb      	ldrh	r3, [r7, #6]
 81019ee:	f003 030f 	and.w	r3, r3, #15
 81019f2:	3b04      	subs	r3, #4
 81019f4:	0112      	lsls	r2, r2, #4
 81019f6:	b2d2      	uxtb	r2, r2
 81019f8:	440b      	add	r3, r1
 81019fa:	761a      	strb	r2, [r3, #24]
}
 81019fc:	bf00      	nop
 81019fe:	370c      	adds	r7, #12
 8101a00:	46bd      	mov	sp, r7
 8101a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101a06:	4770      	bx	lr
 8101a08:	e000e100 	.word	0xe000e100
 8101a0c:	e000ed00 	.word	0xe000ed00

08101a10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8101a10:	b480      	push	{r7}
 8101a12:	b089      	sub	sp, #36	@ 0x24
 8101a14:	af00      	add	r7, sp, #0
 8101a16:	60f8      	str	r0, [r7, #12]
 8101a18:	60b9      	str	r1, [r7, #8]
 8101a1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8101a1c:	68fb      	ldr	r3, [r7, #12]
 8101a1e:	f003 0307 	and.w	r3, r3, #7
 8101a22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8101a24:	69fb      	ldr	r3, [r7, #28]
 8101a26:	f1c3 0307 	rsb	r3, r3, #7
 8101a2a:	2b04      	cmp	r3, #4
 8101a2c:	bf28      	it	cs
 8101a2e:	2304      	movcs	r3, #4
 8101a30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8101a32:	69fb      	ldr	r3, [r7, #28]
 8101a34:	3304      	adds	r3, #4
 8101a36:	2b06      	cmp	r3, #6
 8101a38:	d902      	bls.n	8101a40 <NVIC_EncodePriority+0x30>
 8101a3a:	69fb      	ldr	r3, [r7, #28]
 8101a3c:	3b03      	subs	r3, #3
 8101a3e:	e000      	b.n	8101a42 <NVIC_EncodePriority+0x32>
 8101a40:	2300      	movs	r3, #0
 8101a42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8101a44:	f04f 32ff 	mov.w	r2, #4294967295
 8101a48:	69bb      	ldr	r3, [r7, #24]
 8101a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8101a4e:	43da      	mvns	r2, r3
 8101a50:	68bb      	ldr	r3, [r7, #8]
 8101a52:	401a      	ands	r2, r3
 8101a54:	697b      	ldr	r3, [r7, #20]
 8101a56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8101a58:	f04f 31ff 	mov.w	r1, #4294967295
 8101a5c:	697b      	ldr	r3, [r7, #20]
 8101a5e:	fa01 f303 	lsl.w	r3, r1, r3
 8101a62:	43d9      	mvns	r1, r3
 8101a64:	687b      	ldr	r3, [r7, #4]
 8101a66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8101a68:	4313      	orrs	r3, r2
         );
}
 8101a6a:	4618      	mov	r0, r3
 8101a6c:	3724      	adds	r7, #36	@ 0x24
 8101a6e:	46bd      	mov	sp, r7
 8101a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101a74:	4770      	bx	lr
	...

08101a78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8101a78:	b580      	push	{r7, lr}
 8101a7a:	b082      	sub	sp, #8
 8101a7c:	af00      	add	r7, sp, #0
 8101a7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8101a80:	687b      	ldr	r3, [r7, #4]
 8101a82:	3b01      	subs	r3, #1
 8101a84:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8101a88:	d301      	bcc.n	8101a8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8101a8a:	2301      	movs	r3, #1
 8101a8c:	e00f      	b.n	8101aae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8101a8e:	4a0a      	ldr	r2, [pc, #40]	@ (8101ab8 <SysTick_Config+0x40>)
 8101a90:	687b      	ldr	r3, [r7, #4]
 8101a92:	3b01      	subs	r3, #1
 8101a94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8101a96:	210f      	movs	r1, #15
 8101a98:	f04f 30ff 	mov.w	r0, #4294967295
 8101a9c:	f7ff ff8e 	bl	81019bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8101aa0:	4b05      	ldr	r3, [pc, #20]	@ (8101ab8 <SysTick_Config+0x40>)
 8101aa2:	2200      	movs	r2, #0
 8101aa4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8101aa6:	4b04      	ldr	r3, [pc, #16]	@ (8101ab8 <SysTick_Config+0x40>)
 8101aa8:	2207      	movs	r2, #7
 8101aaa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8101aac:	2300      	movs	r3, #0
}
 8101aae:	4618      	mov	r0, r3
 8101ab0:	3708      	adds	r7, #8
 8101ab2:	46bd      	mov	sp, r7
 8101ab4:	bd80      	pop	{r7, pc}
 8101ab6:	bf00      	nop
 8101ab8:	e000e010 	.word	0xe000e010

08101abc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8101abc:	b580      	push	{r7, lr}
 8101abe:	b082      	sub	sp, #8
 8101ac0:	af00      	add	r7, sp, #0
 8101ac2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8101ac4:	6878      	ldr	r0, [r7, #4]
 8101ac6:	f7ff ff47 	bl	8101958 <__NVIC_SetPriorityGrouping>
}
 8101aca:	bf00      	nop
 8101acc:	3708      	adds	r7, #8
 8101ace:	46bd      	mov	sp, r7
 8101ad0:	bd80      	pop	{r7, pc}

08101ad2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8101ad2:	b580      	push	{r7, lr}
 8101ad4:	b086      	sub	sp, #24
 8101ad6:	af00      	add	r7, sp, #0
 8101ad8:	4603      	mov	r3, r0
 8101ada:	60b9      	str	r1, [r7, #8]
 8101adc:	607a      	str	r2, [r7, #4]
 8101ade:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8101ae0:	f7ff ff5e 	bl	81019a0 <__NVIC_GetPriorityGrouping>
 8101ae4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8101ae6:	687a      	ldr	r2, [r7, #4]
 8101ae8:	68b9      	ldr	r1, [r7, #8]
 8101aea:	6978      	ldr	r0, [r7, #20]
 8101aec:	f7ff ff90 	bl	8101a10 <NVIC_EncodePriority>
 8101af0:	4602      	mov	r2, r0
 8101af2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8101af6:	4611      	mov	r1, r2
 8101af8:	4618      	mov	r0, r3
 8101afa:	f7ff ff5f 	bl	81019bc <__NVIC_SetPriority>
}
 8101afe:	bf00      	nop
 8101b00:	3718      	adds	r7, #24
 8101b02:	46bd      	mov	sp, r7
 8101b04:	bd80      	pop	{r7, pc}

08101b06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8101b06:	b580      	push	{r7, lr}
 8101b08:	b082      	sub	sp, #8
 8101b0a:	af00      	add	r7, sp, #0
 8101b0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8101b0e:	6878      	ldr	r0, [r7, #4]
 8101b10:	f7ff ffb2 	bl	8101a78 <SysTick_Config>
 8101b14:	4603      	mov	r3, r0
}
 8101b16:	4618      	mov	r0, r3
 8101b18:	3708      	adds	r7, #8
 8101b1a:	46bd      	mov	sp, r7
 8101b1c:	bd80      	pop	{r7, pc}
	...

08101b20 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8101b20:	b480      	push	{r7}
 8101b22:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8101b24:	4b07      	ldr	r3, [pc, #28]	@ (8101b44 <HAL_GetCurrentCPUID+0x24>)
 8101b26:	681b      	ldr	r3, [r3, #0]
 8101b28:	091b      	lsrs	r3, r3, #4
 8101b2a:	f003 030f 	and.w	r3, r3, #15
 8101b2e:	2b07      	cmp	r3, #7
 8101b30:	d101      	bne.n	8101b36 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8101b32:	2303      	movs	r3, #3
 8101b34:	e000      	b.n	8101b38 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8101b36:	2301      	movs	r3, #1
  }
}
 8101b38:	4618      	mov	r0, r3
 8101b3a:	46bd      	mov	sp, r7
 8101b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101b40:	4770      	bx	lr
 8101b42:	bf00      	nop
 8101b44:	e000ed00 	.word	0xe000ed00

08101b48 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8101b48:	b480      	push	{r7}
 8101b4a:	b083      	sub	sp, #12
 8101b4c:	af00      	add	r7, sp, #0
 8101b4e:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8101b50:	4b05      	ldr	r3, [pc, #20]	@ (8101b68 <HAL_HSEM_ActivateNotification+0x20>)
 8101b52:	681a      	ldr	r2, [r3, #0]
 8101b54:	4904      	ldr	r1, [pc, #16]	@ (8101b68 <HAL_HSEM_ActivateNotification+0x20>)
 8101b56:	687b      	ldr	r3, [r7, #4]
 8101b58:	4313      	orrs	r3, r2
 8101b5a:	600b      	str	r3, [r1, #0]
#endif
}
 8101b5c:	bf00      	nop
 8101b5e:	370c      	adds	r7, #12
 8101b60:	46bd      	mov	sp, r7
 8101b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101b66:	4770      	bx	lr
 8101b68:	58026510 	.word	0x58026510

08101b6c <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8101b6c:	b580      	push	{r7, lr}
 8101b6e:	b084      	sub	sp, #16
 8101b70:	af00      	add	r7, sp, #0
 8101b72:	60f8      	str	r0, [r7, #12]
 8101b74:	460b      	mov	r3, r1
 8101b76:	607a      	str	r2, [r7, #4]
 8101b78:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8101b7a:	4b37      	ldr	r3, [pc, #220]	@ (8101c58 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101b7c:	681b      	ldr	r3, [r3, #0]
 8101b7e:	f023 0201 	bic.w	r2, r3, #1
 8101b82:	4935      	ldr	r1, [pc, #212]	@ (8101c58 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101b84:	68fb      	ldr	r3, [r7, #12]
 8101b86:	4313      	orrs	r3, r2
 8101b88:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8101b8a:	687b      	ldr	r3, [r7, #4]
 8101b8c:	2b00      	cmp	r3, #0
 8101b8e:	d123      	bne.n	8101bd8 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8101b90:	f7ff ffc6 	bl	8101b20 <HAL_GetCurrentCPUID>
 8101b94:	4603      	mov	r3, r0
 8101b96:	2b03      	cmp	r3, #3
 8101b98:	d158      	bne.n	8101c4c <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8101b9a:	4b2f      	ldr	r3, [pc, #188]	@ (8101c58 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101b9c:	691b      	ldr	r3, [r3, #16]
 8101b9e:	4a2e      	ldr	r2, [pc, #184]	@ (8101c58 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101ba0:	f023 0301 	bic.w	r3, r3, #1
 8101ba4:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8101ba6:	4b2d      	ldr	r3, [pc, #180]	@ (8101c5c <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101ba8:	691b      	ldr	r3, [r3, #16]
 8101baa:	4a2c      	ldr	r2, [pc, #176]	@ (8101c5c <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101bac:	f043 0304 	orr.w	r3, r3, #4
 8101bb0:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8101bb2:	f3bf 8f4f 	dsb	sy
}
 8101bb6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8101bb8:	f3bf 8f6f 	isb	sy
}
 8101bbc:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8101bbe:	7afb      	ldrb	r3, [r7, #11]
 8101bc0:	2b01      	cmp	r3, #1
 8101bc2:	d101      	bne.n	8101bc8 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8101bc4:	bf30      	wfi
 8101bc6:	e000      	b.n	8101bca <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8101bc8:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8101bca:	4b24      	ldr	r3, [pc, #144]	@ (8101c5c <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101bcc:	691b      	ldr	r3, [r3, #16]
 8101bce:	4a23      	ldr	r2, [pc, #140]	@ (8101c5c <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101bd0:	f023 0304 	bic.w	r3, r3, #4
 8101bd4:	6113      	str	r3, [r2, #16]
 8101bd6:	e03c      	b.n	8101c52 <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8101bd8:	687b      	ldr	r3, [r7, #4]
 8101bda:	2b01      	cmp	r3, #1
 8101bdc:	d123      	bne.n	8101c26 <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8101bde:	f7ff ff9f 	bl	8101b20 <HAL_GetCurrentCPUID>
 8101be2:	4603      	mov	r3, r0
 8101be4:	2b01      	cmp	r3, #1
 8101be6:	d133      	bne.n	8101c50 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8101be8:	4b1b      	ldr	r3, [pc, #108]	@ (8101c58 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101bea:	695b      	ldr	r3, [r3, #20]
 8101bec:	4a1a      	ldr	r2, [pc, #104]	@ (8101c58 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101bee:	f023 0302 	bic.w	r3, r3, #2
 8101bf2:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8101bf4:	4b19      	ldr	r3, [pc, #100]	@ (8101c5c <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101bf6:	691b      	ldr	r3, [r3, #16]
 8101bf8:	4a18      	ldr	r2, [pc, #96]	@ (8101c5c <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101bfa:	f043 0304 	orr.w	r3, r3, #4
 8101bfe:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8101c00:	f3bf 8f4f 	dsb	sy
}
 8101c04:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8101c06:	f3bf 8f6f 	isb	sy
}
 8101c0a:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8101c0c:	7afb      	ldrb	r3, [r7, #11]
 8101c0e:	2b01      	cmp	r3, #1
 8101c10:	d101      	bne.n	8101c16 <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8101c12:	bf30      	wfi
 8101c14:	e000      	b.n	8101c18 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8101c16:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8101c18:	4b10      	ldr	r3, [pc, #64]	@ (8101c5c <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101c1a:	691b      	ldr	r3, [r3, #16]
 8101c1c:	4a0f      	ldr	r2, [pc, #60]	@ (8101c5c <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101c1e:	f023 0304 	bic.w	r3, r3, #4
 8101c22:	6113      	str	r3, [r2, #16]
 8101c24:	e015      	b.n	8101c52 <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8101c26:	f7ff ff7b 	bl	8101b20 <HAL_GetCurrentCPUID>
 8101c2a:	4603      	mov	r3, r0
 8101c2c:	2b03      	cmp	r3, #3
 8101c2e:	d106      	bne.n	8101c3e <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8101c30:	4b09      	ldr	r3, [pc, #36]	@ (8101c58 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101c32:	691b      	ldr	r3, [r3, #16]
 8101c34:	4a08      	ldr	r2, [pc, #32]	@ (8101c58 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101c36:	f023 0304 	bic.w	r3, r3, #4
 8101c3a:	6113      	str	r3, [r2, #16]
 8101c3c:	e009      	b.n	8101c52 <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8101c3e:	4b06      	ldr	r3, [pc, #24]	@ (8101c58 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101c40:	695b      	ldr	r3, [r3, #20]
 8101c42:	4a05      	ldr	r2, [pc, #20]	@ (8101c58 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101c44:	f023 0304 	bic.w	r3, r3, #4
 8101c48:	6153      	str	r3, [r2, #20]
 8101c4a:	e002      	b.n	8101c52 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8101c4c:	bf00      	nop
 8101c4e:	e000      	b.n	8101c52 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8101c50:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8101c52:	3710      	adds	r7, #16
 8101c54:	46bd      	mov	sp, r7
 8101c56:	bd80      	pop	{r7, pc}
 8101c58:	58024800 	.word	0x58024800
 8101c5c:	e000ed00 	.word	0xe000ed00

08101c60 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8101c60:	b580      	push	{r7, lr}
 8101c62:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8101c64:	f7ff ff5c 	bl	8101b20 <HAL_GetCurrentCPUID>
 8101c68:	4603      	mov	r3, r0
 8101c6a:	2b03      	cmp	r3, #3
 8101c6c:	d101      	bne.n	8101c72 <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8101c6e:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8101c70:	e001      	b.n	8101c76 <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8101c72:	bf40      	sev
    __WFE ();
 8101c74:	bf20      	wfe
}
 8101c76:	bf00      	nop
 8101c78:	bd80      	pop	{r7, pc}
	...

08101c7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8101c7c:	b480      	push	{r7}
 8101c7e:	b089      	sub	sp, #36	@ 0x24
 8101c80:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8101c82:	4bb3      	ldr	r3, [pc, #716]	@ (8101f50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101c84:	691b      	ldr	r3, [r3, #16]
 8101c86:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8101c8a:	2b18      	cmp	r3, #24
 8101c8c:	f200 8155 	bhi.w	8101f3a <HAL_RCC_GetSysClockFreq+0x2be>
 8101c90:	a201      	add	r2, pc, #4	@ (adr r2, 8101c98 <HAL_RCC_GetSysClockFreq+0x1c>)
 8101c92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8101c96:	bf00      	nop
 8101c98:	08101cfd 	.word	0x08101cfd
 8101c9c:	08101f3b 	.word	0x08101f3b
 8101ca0:	08101f3b 	.word	0x08101f3b
 8101ca4:	08101f3b 	.word	0x08101f3b
 8101ca8:	08101f3b 	.word	0x08101f3b
 8101cac:	08101f3b 	.word	0x08101f3b
 8101cb0:	08101f3b 	.word	0x08101f3b
 8101cb4:	08101f3b 	.word	0x08101f3b
 8101cb8:	08101d23 	.word	0x08101d23
 8101cbc:	08101f3b 	.word	0x08101f3b
 8101cc0:	08101f3b 	.word	0x08101f3b
 8101cc4:	08101f3b 	.word	0x08101f3b
 8101cc8:	08101f3b 	.word	0x08101f3b
 8101ccc:	08101f3b 	.word	0x08101f3b
 8101cd0:	08101f3b 	.word	0x08101f3b
 8101cd4:	08101f3b 	.word	0x08101f3b
 8101cd8:	08101d29 	.word	0x08101d29
 8101cdc:	08101f3b 	.word	0x08101f3b
 8101ce0:	08101f3b 	.word	0x08101f3b
 8101ce4:	08101f3b 	.word	0x08101f3b
 8101ce8:	08101f3b 	.word	0x08101f3b
 8101cec:	08101f3b 	.word	0x08101f3b
 8101cf0:	08101f3b 	.word	0x08101f3b
 8101cf4:	08101f3b 	.word	0x08101f3b
 8101cf8:	08101d2f 	.word	0x08101d2f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8101cfc:	4b94      	ldr	r3, [pc, #592]	@ (8101f50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101cfe:	681b      	ldr	r3, [r3, #0]
 8101d00:	f003 0320 	and.w	r3, r3, #32
 8101d04:	2b00      	cmp	r3, #0
 8101d06:	d009      	beq.n	8101d1c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8101d08:	4b91      	ldr	r3, [pc, #580]	@ (8101f50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101d0a:	681b      	ldr	r3, [r3, #0]
 8101d0c:	08db      	lsrs	r3, r3, #3
 8101d0e:	f003 0303 	and.w	r3, r3, #3
 8101d12:	4a90      	ldr	r2, [pc, #576]	@ (8101f54 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8101d14:	fa22 f303 	lsr.w	r3, r2, r3
 8101d18:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8101d1a:	e111      	b.n	8101f40 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8101d1c:	4b8d      	ldr	r3, [pc, #564]	@ (8101f54 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8101d1e:	61bb      	str	r3, [r7, #24]
      break;
 8101d20:	e10e      	b.n	8101f40 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8101d22:	4b8d      	ldr	r3, [pc, #564]	@ (8101f58 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8101d24:	61bb      	str	r3, [r7, #24]
      break;
 8101d26:	e10b      	b.n	8101f40 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8101d28:	4b8c      	ldr	r3, [pc, #560]	@ (8101f5c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8101d2a:	61bb      	str	r3, [r7, #24]
      break;
 8101d2c:	e108      	b.n	8101f40 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8101d2e:	4b88      	ldr	r3, [pc, #544]	@ (8101f50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101d30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8101d32:	f003 0303 	and.w	r3, r3, #3
 8101d36:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8101d38:	4b85      	ldr	r3, [pc, #532]	@ (8101f50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101d3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8101d3c:	091b      	lsrs	r3, r3, #4
 8101d3e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8101d42:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8101d44:	4b82      	ldr	r3, [pc, #520]	@ (8101f50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101d46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8101d48:	f003 0301 	and.w	r3, r3, #1
 8101d4c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8101d4e:	4b80      	ldr	r3, [pc, #512]	@ (8101f50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101d50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8101d52:	08db      	lsrs	r3, r3, #3
 8101d54:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8101d58:	68fa      	ldr	r2, [r7, #12]
 8101d5a:	fb02 f303 	mul.w	r3, r2, r3
 8101d5e:	ee07 3a90 	vmov	s15, r3
 8101d62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101d66:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8101d6a:	693b      	ldr	r3, [r7, #16]
 8101d6c:	2b00      	cmp	r3, #0
 8101d6e:	f000 80e1 	beq.w	8101f34 <HAL_RCC_GetSysClockFreq+0x2b8>
 8101d72:	697b      	ldr	r3, [r7, #20]
 8101d74:	2b02      	cmp	r3, #2
 8101d76:	f000 8083 	beq.w	8101e80 <HAL_RCC_GetSysClockFreq+0x204>
 8101d7a:	697b      	ldr	r3, [r7, #20]
 8101d7c:	2b02      	cmp	r3, #2
 8101d7e:	f200 80a1 	bhi.w	8101ec4 <HAL_RCC_GetSysClockFreq+0x248>
 8101d82:	697b      	ldr	r3, [r7, #20]
 8101d84:	2b00      	cmp	r3, #0
 8101d86:	d003      	beq.n	8101d90 <HAL_RCC_GetSysClockFreq+0x114>
 8101d88:	697b      	ldr	r3, [r7, #20]
 8101d8a:	2b01      	cmp	r3, #1
 8101d8c:	d056      	beq.n	8101e3c <HAL_RCC_GetSysClockFreq+0x1c0>
 8101d8e:	e099      	b.n	8101ec4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8101d90:	4b6f      	ldr	r3, [pc, #444]	@ (8101f50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101d92:	681b      	ldr	r3, [r3, #0]
 8101d94:	f003 0320 	and.w	r3, r3, #32
 8101d98:	2b00      	cmp	r3, #0
 8101d9a:	d02d      	beq.n	8101df8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8101d9c:	4b6c      	ldr	r3, [pc, #432]	@ (8101f50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101d9e:	681b      	ldr	r3, [r3, #0]
 8101da0:	08db      	lsrs	r3, r3, #3
 8101da2:	f003 0303 	and.w	r3, r3, #3
 8101da6:	4a6b      	ldr	r2, [pc, #428]	@ (8101f54 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8101da8:	fa22 f303 	lsr.w	r3, r2, r3
 8101dac:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8101dae:	687b      	ldr	r3, [r7, #4]
 8101db0:	ee07 3a90 	vmov	s15, r3
 8101db4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101db8:	693b      	ldr	r3, [r7, #16]
 8101dba:	ee07 3a90 	vmov	s15, r3
 8101dbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101dc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101dc6:	4b62      	ldr	r3, [pc, #392]	@ (8101f50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8101dca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101dce:	ee07 3a90 	vmov	s15, r3
 8101dd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101dd6:	ed97 6a02 	vldr	s12, [r7, #8]
 8101dda:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8101f60 <HAL_RCC_GetSysClockFreq+0x2e4>
 8101dde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101de2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101de6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8101dea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101dee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101df2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8101df6:	e087      	b.n	8101f08 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8101df8:	693b      	ldr	r3, [r7, #16]
 8101dfa:	ee07 3a90 	vmov	s15, r3
 8101dfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101e02:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8101f64 <HAL_RCC_GetSysClockFreq+0x2e8>
 8101e06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101e0a:	4b51      	ldr	r3, [pc, #324]	@ (8101f50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101e0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8101e0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101e12:	ee07 3a90 	vmov	s15, r3
 8101e16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101e1a:	ed97 6a02 	vldr	s12, [r7, #8]
 8101e1e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8101f60 <HAL_RCC_GetSysClockFreq+0x2e4>
 8101e22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101e26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101e2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8101e2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101e32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101e36:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8101e3a:	e065      	b.n	8101f08 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8101e3c:	693b      	ldr	r3, [r7, #16]
 8101e3e:	ee07 3a90 	vmov	s15, r3
 8101e42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101e46:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8101f68 <HAL_RCC_GetSysClockFreq+0x2ec>
 8101e4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101e4e:	4b40      	ldr	r3, [pc, #256]	@ (8101f50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8101e52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101e56:	ee07 3a90 	vmov	s15, r3
 8101e5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101e5e:	ed97 6a02 	vldr	s12, [r7, #8]
 8101e62:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8101f60 <HAL_RCC_GetSysClockFreq+0x2e4>
 8101e66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101e6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101e6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8101e72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101e76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101e7a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8101e7e:	e043      	b.n	8101f08 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8101e80:	693b      	ldr	r3, [r7, #16]
 8101e82:	ee07 3a90 	vmov	s15, r3
 8101e86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101e8a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8101f6c <HAL_RCC_GetSysClockFreq+0x2f0>
 8101e8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101e92:	4b2f      	ldr	r3, [pc, #188]	@ (8101f50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8101e96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101e9a:	ee07 3a90 	vmov	s15, r3
 8101e9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101ea2:	ed97 6a02 	vldr	s12, [r7, #8]
 8101ea6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8101f60 <HAL_RCC_GetSysClockFreq+0x2e4>
 8101eaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101eae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101eb2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8101eb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101eba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101ebe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8101ec2:	e021      	b.n	8101f08 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8101ec4:	693b      	ldr	r3, [r7, #16]
 8101ec6:	ee07 3a90 	vmov	s15, r3
 8101eca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101ece:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8101f68 <HAL_RCC_GetSysClockFreq+0x2ec>
 8101ed2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101ed6:	4b1e      	ldr	r3, [pc, #120]	@ (8101f50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101ed8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8101eda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101ede:	ee07 3a90 	vmov	s15, r3
 8101ee2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101ee6:	ed97 6a02 	vldr	s12, [r7, #8]
 8101eea:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8101f60 <HAL_RCC_GetSysClockFreq+0x2e4>
 8101eee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101ef2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101ef6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8101efa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101efe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101f02:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8101f06:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8101f08:	4b11      	ldr	r3, [pc, #68]	@ (8101f50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101f0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8101f0c:	0a5b      	lsrs	r3, r3, #9
 8101f0e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8101f12:	3301      	adds	r3, #1
 8101f14:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8101f16:	683b      	ldr	r3, [r7, #0]
 8101f18:	ee07 3a90 	vmov	s15, r3
 8101f1c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8101f20:	edd7 6a07 	vldr	s13, [r7, #28]
 8101f24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8101f28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8101f2c:	ee17 3a90 	vmov	r3, s15
 8101f30:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8101f32:	e005      	b.n	8101f40 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8101f34:	2300      	movs	r3, #0
 8101f36:	61bb      	str	r3, [r7, #24]
      break;
 8101f38:	e002      	b.n	8101f40 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8101f3a:	4b07      	ldr	r3, [pc, #28]	@ (8101f58 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8101f3c:	61bb      	str	r3, [r7, #24]
      break;
 8101f3e:	bf00      	nop
  }

  return sysclockfreq;
 8101f40:	69bb      	ldr	r3, [r7, #24]
}
 8101f42:	4618      	mov	r0, r3
 8101f44:	3724      	adds	r7, #36	@ 0x24
 8101f46:	46bd      	mov	sp, r7
 8101f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f4c:	4770      	bx	lr
 8101f4e:	bf00      	nop
 8101f50:	58024400 	.word	0x58024400
 8101f54:	03d09000 	.word	0x03d09000
 8101f58:	003d0900 	.word	0x003d0900
 8101f5c:	017d7840 	.word	0x017d7840
 8101f60:	46000000 	.word	0x46000000
 8101f64:	4c742400 	.word	0x4c742400
 8101f68:	4a742400 	.word	0x4a742400
 8101f6c:	4bbebc20 	.word	0x4bbebc20

08101f70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8101f70:	b580      	push	{r7, lr}
 8101f72:	b082      	sub	sp, #8
 8101f74:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8101f76:	f7ff fe81 	bl	8101c7c <HAL_RCC_GetSysClockFreq>
 8101f7a:	4602      	mov	r2, r0
 8101f7c:	4b11      	ldr	r3, [pc, #68]	@ (8101fc4 <HAL_RCC_GetHCLKFreq+0x54>)
 8101f7e:	699b      	ldr	r3, [r3, #24]
 8101f80:	0a1b      	lsrs	r3, r3, #8
 8101f82:	f003 030f 	and.w	r3, r3, #15
 8101f86:	4910      	ldr	r1, [pc, #64]	@ (8101fc8 <HAL_RCC_GetHCLKFreq+0x58>)
 8101f88:	5ccb      	ldrb	r3, [r1, r3]
 8101f8a:	f003 031f 	and.w	r3, r3, #31
 8101f8e:	fa22 f303 	lsr.w	r3, r2, r3
 8101f92:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8101f94:	4b0b      	ldr	r3, [pc, #44]	@ (8101fc4 <HAL_RCC_GetHCLKFreq+0x54>)
 8101f96:	699b      	ldr	r3, [r3, #24]
 8101f98:	f003 030f 	and.w	r3, r3, #15
 8101f9c:	4a0a      	ldr	r2, [pc, #40]	@ (8101fc8 <HAL_RCC_GetHCLKFreq+0x58>)
 8101f9e:	5cd3      	ldrb	r3, [r2, r3]
 8101fa0:	f003 031f 	and.w	r3, r3, #31
 8101fa4:	687a      	ldr	r2, [r7, #4]
 8101fa6:	fa22 f303 	lsr.w	r3, r2, r3
 8101faa:	4a08      	ldr	r2, [pc, #32]	@ (8101fcc <HAL_RCC_GetHCLKFreq+0x5c>)
 8101fac:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8101fae:	4b07      	ldr	r3, [pc, #28]	@ (8101fcc <HAL_RCC_GetHCLKFreq+0x5c>)
 8101fb0:	681b      	ldr	r3, [r3, #0]
 8101fb2:	4a07      	ldr	r2, [pc, #28]	@ (8101fd0 <HAL_RCC_GetHCLKFreq+0x60>)
 8101fb4:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8101fb6:	4b05      	ldr	r3, [pc, #20]	@ (8101fcc <HAL_RCC_GetHCLKFreq+0x5c>)
 8101fb8:	681b      	ldr	r3, [r3, #0]
}
 8101fba:	4618      	mov	r0, r3
 8101fbc:	3708      	adds	r7, #8
 8101fbe:	46bd      	mov	sp, r7
 8101fc0:	bd80      	pop	{r7, pc}
 8101fc2:	bf00      	nop
 8101fc4:	58024400 	.word	0x58024400
 8101fc8:	08104aec 	.word	0x08104aec
 8101fcc:	10000004 	.word	0x10000004
 8101fd0:	10000000 	.word	0x10000000

08101fd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8101fd4:	b580      	push	{r7, lr}
 8101fd6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8101fd8:	f7ff ffca 	bl	8101f70 <HAL_RCC_GetHCLKFreq>
 8101fdc:	4602      	mov	r2, r0
 8101fde:	4b06      	ldr	r3, [pc, #24]	@ (8101ff8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8101fe0:	69db      	ldr	r3, [r3, #28]
 8101fe2:	091b      	lsrs	r3, r3, #4
 8101fe4:	f003 0307 	and.w	r3, r3, #7
 8101fe8:	4904      	ldr	r1, [pc, #16]	@ (8101ffc <HAL_RCC_GetPCLK1Freq+0x28>)
 8101fea:	5ccb      	ldrb	r3, [r1, r3]
 8101fec:	f003 031f 	and.w	r3, r3, #31
 8101ff0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8101ff4:	4618      	mov	r0, r3
 8101ff6:	bd80      	pop	{r7, pc}
 8101ff8:	58024400 	.word	0x58024400
 8101ffc:	08104aec 	.word	0x08104aec

08102000 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8102000:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8102004:	b0cc      	sub	sp, #304	@ 0x130
 8102006:	af00      	add	r7, sp, #0
 8102008:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 810200c:	2300      	movs	r3, #0
 810200e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8102012:	2300      	movs	r3, #0
 8102014:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8102018:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810201c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102020:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8102024:	2500      	movs	r5, #0
 8102026:	ea54 0305 	orrs.w	r3, r4, r5
 810202a:	d049      	beq.n	81020c0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 810202c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102030:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8102032:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8102036:	d02f      	beq.n	8102098 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8102038:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 810203c:	d828      	bhi.n	8102090 <HAL_RCCEx_PeriphCLKConfig+0x90>
 810203e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8102042:	d01a      	beq.n	810207a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8102044:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8102048:	d822      	bhi.n	8102090 <HAL_RCCEx_PeriphCLKConfig+0x90>
 810204a:	2b00      	cmp	r3, #0
 810204c:	d003      	beq.n	8102056 <HAL_RCCEx_PeriphCLKConfig+0x56>
 810204e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8102052:	d007      	beq.n	8102064 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8102054:	e01c      	b.n	8102090 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102056:	4bb8      	ldr	r3, [pc, #736]	@ (8102338 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102058:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810205a:	4ab7      	ldr	r2, [pc, #732]	@ (8102338 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810205c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8102060:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8102062:	e01a      	b.n	810209a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8102064:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102068:	3308      	adds	r3, #8
 810206a:	2102      	movs	r1, #2
 810206c:	4618      	mov	r0, r3
 810206e:	f002 fba1 	bl	81047b4 <RCCEx_PLL2_Config>
 8102072:	4603      	mov	r3, r0
 8102074:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8102078:	e00f      	b.n	810209a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810207a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810207e:	3328      	adds	r3, #40	@ 0x28
 8102080:	2102      	movs	r1, #2
 8102082:	4618      	mov	r0, r3
 8102084:	f002 fc48 	bl	8104918 <RCCEx_PLL3_Config>
 8102088:	4603      	mov	r3, r0
 810208a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 810208e:	e004      	b.n	810209a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102090:	2301      	movs	r3, #1
 8102092:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8102096:	e000      	b.n	810209a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8102098:	bf00      	nop
    }

    if (ret == HAL_OK)
 810209a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810209e:	2b00      	cmp	r3, #0
 81020a0:	d10a      	bne.n	81020b8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 81020a2:	4ba5      	ldr	r3, [pc, #660]	@ (8102338 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81020a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81020a6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 81020aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81020ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 81020b0:	4aa1      	ldr	r2, [pc, #644]	@ (8102338 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81020b2:	430b      	orrs	r3, r1
 81020b4:	6513      	str	r3, [r2, #80]	@ 0x50
 81020b6:	e003      	b.n	81020c0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81020b8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81020bc:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 81020c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81020c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 81020c8:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 81020cc:	f04f 0900 	mov.w	r9, #0
 81020d0:	ea58 0309 	orrs.w	r3, r8, r9
 81020d4:	d047      	beq.n	8102166 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 81020d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81020da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81020dc:	2b04      	cmp	r3, #4
 81020de:	d82a      	bhi.n	8102136 <HAL_RCCEx_PeriphCLKConfig+0x136>
 81020e0:	a201      	add	r2, pc, #4	@ (adr r2, 81020e8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 81020e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81020e6:	bf00      	nop
 81020e8:	081020fd 	.word	0x081020fd
 81020ec:	0810210b 	.word	0x0810210b
 81020f0:	08102121 	.word	0x08102121
 81020f4:	0810213f 	.word	0x0810213f
 81020f8:	0810213f 	.word	0x0810213f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81020fc:	4b8e      	ldr	r3, [pc, #568]	@ (8102338 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81020fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102100:	4a8d      	ldr	r2, [pc, #564]	@ (8102338 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102102:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8102106:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8102108:	e01a      	b.n	8102140 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810210a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810210e:	3308      	adds	r3, #8
 8102110:	2100      	movs	r1, #0
 8102112:	4618      	mov	r0, r3
 8102114:	f002 fb4e 	bl	81047b4 <RCCEx_PLL2_Config>
 8102118:	4603      	mov	r3, r0
 810211a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810211e:	e00f      	b.n	8102140 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8102120:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102124:	3328      	adds	r3, #40	@ 0x28
 8102126:	2100      	movs	r1, #0
 8102128:	4618      	mov	r0, r3
 810212a:	f002 fbf5 	bl	8104918 <RCCEx_PLL3_Config>
 810212e:	4603      	mov	r3, r0
 8102130:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8102134:	e004      	b.n	8102140 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102136:	2301      	movs	r3, #1
 8102138:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810213c:	e000      	b.n	8102140 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 810213e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102140:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8102144:	2b00      	cmp	r3, #0
 8102146:	d10a      	bne.n	810215e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8102148:	4b7b      	ldr	r3, [pc, #492]	@ (8102338 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810214a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810214c:	f023 0107 	bic.w	r1, r3, #7
 8102150:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102154:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8102156:	4a78      	ldr	r2, [pc, #480]	@ (8102338 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102158:	430b      	orrs	r3, r1
 810215a:	6513      	str	r3, [r2, #80]	@ 0x50
 810215c:	e003      	b.n	8102166 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810215e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8102162:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8102166:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810216a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810216e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8102172:	f04f 0b00 	mov.w	fp, #0
 8102176:	ea5a 030b 	orrs.w	r3, sl, fp
 810217a:	d04c      	beq.n	8102216 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 810217c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102180:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8102182:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8102186:	d030      	beq.n	81021ea <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8102188:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810218c:	d829      	bhi.n	81021e2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 810218e:	2bc0      	cmp	r3, #192	@ 0xc0
 8102190:	d02d      	beq.n	81021ee <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8102192:	2bc0      	cmp	r3, #192	@ 0xc0
 8102194:	d825      	bhi.n	81021e2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8102196:	2b80      	cmp	r3, #128	@ 0x80
 8102198:	d018      	beq.n	81021cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 810219a:	2b80      	cmp	r3, #128	@ 0x80
 810219c:	d821      	bhi.n	81021e2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 810219e:	2b00      	cmp	r3, #0
 81021a0:	d002      	beq.n	81021a8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 81021a2:	2b40      	cmp	r3, #64	@ 0x40
 81021a4:	d007      	beq.n	81021b6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 81021a6:	e01c      	b.n	81021e2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81021a8:	4b63      	ldr	r3, [pc, #396]	@ (8102338 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81021aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81021ac:	4a62      	ldr	r2, [pc, #392]	@ (8102338 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81021ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81021b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 81021b4:	e01c      	b.n	81021f0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81021b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81021ba:	3308      	adds	r3, #8
 81021bc:	2100      	movs	r1, #0
 81021be:	4618      	mov	r0, r3
 81021c0:	f002 faf8 	bl	81047b4 <RCCEx_PLL2_Config>
 81021c4:	4603      	mov	r3, r0
 81021c6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 81021ca:	e011      	b.n	81021f0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81021cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81021d0:	3328      	adds	r3, #40	@ 0x28
 81021d2:	2100      	movs	r1, #0
 81021d4:	4618      	mov	r0, r3
 81021d6:	f002 fb9f 	bl	8104918 <RCCEx_PLL3_Config>
 81021da:	4603      	mov	r3, r0
 81021dc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 81021e0:	e006      	b.n	81021f0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81021e2:	2301      	movs	r3, #1
 81021e4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 81021e8:	e002      	b.n	81021f0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 81021ea:	bf00      	nop
 81021ec:	e000      	b.n	81021f0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 81021ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 81021f0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81021f4:	2b00      	cmp	r3, #0
 81021f6:	d10a      	bne.n	810220e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 81021f8:	4b4f      	ldr	r3, [pc, #316]	@ (8102338 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81021fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81021fc:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8102200:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102204:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8102206:	4a4c      	ldr	r2, [pc, #304]	@ (8102338 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102208:	430b      	orrs	r3, r1
 810220a:	6513      	str	r3, [r2, #80]	@ 0x50
 810220c:	e003      	b.n	8102216 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810220e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8102212:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8102216:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810221a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810221e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8102222:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8102226:	2300      	movs	r3, #0
 8102228:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 810222c:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 8102230:	460b      	mov	r3, r1
 8102232:	4313      	orrs	r3, r2
 8102234:	d053      	beq.n	81022de <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8102236:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810223a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 810223e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8102242:	d035      	beq.n	81022b0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8102244:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8102248:	d82e      	bhi.n	81022a8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 810224a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 810224e:	d031      	beq.n	81022b4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8102250:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8102254:	d828      	bhi.n	81022a8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8102256:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 810225a:	d01a      	beq.n	8102292 <HAL_RCCEx_PeriphCLKConfig+0x292>
 810225c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8102260:	d822      	bhi.n	81022a8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8102262:	2b00      	cmp	r3, #0
 8102264:	d003      	beq.n	810226e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8102266:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 810226a:	d007      	beq.n	810227c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 810226c:	e01c      	b.n	81022a8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810226e:	4b32      	ldr	r3, [pc, #200]	@ (8102338 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102270:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102272:	4a31      	ldr	r2, [pc, #196]	@ (8102338 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102274:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8102278:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810227a:	e01c      	b.n	81022b6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810227c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102280:	3308      	adds	r3, #8
 8102282:	2100      	movs	r1, #0
 8102284:	4618      	mov	r0, r3
 8102286:	f002 fa95 	bl	81047b4 <RCCEx_PLL2_Config>
 810228a:	4603      	mov	r3, r0
 810228c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8102290:	e011      	b.n	81022b6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8102292:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102296:	3328      	adds	r3, #40	@ 0x28
 8102298:	2100      	movs	r1, #0
 810229a:	4618      	mov	r0, r3
 810229c:	f002 fb3c 	bl	8104918 <RCCEx_PLL3_Config>
 81022a0:	4603      	mov	r3, r0
 81022a2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81022a6:	e006      	b.n	81022b6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 81022a8:	2301      	movs	r3, #1
 81022aa:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 81022ae:	e002      	b.n	81022b6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 81022b0:	bf00      	nop
 81022b2:	e000      	b.n	81022b6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 81022b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 81022b6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81022ba:	2b00      	cmp	r3, #0
 81022bc:	d10b      	bne.n	81022d6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 81022be:	4b1e      	ldr	r3, [pc, #120]	@ (8102338 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81022c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81022c2:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 81022c6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81022ca:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 81022ce:	4a1a      	ldr	r2, [pc, #104]	@ (8102338 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81022d0:	430b      	orrs	r3, r1
 81022d2:	6593      	str	r3, [r2, #88]	@ 0x58
 81022d4:	e003      	b.n	81022de <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81022d6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81022da:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 81022de:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81022e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 81022e6:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 81022ea:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 81022ee:	2300      	movs	r3, #0
 81022f0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 81022f4:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 81022f8:	460b      	mov	r3, r1
 81022fa:	4313      	orrs	r3, r2
 81022fc:	d056      	beq.n	81023ac <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 81022fe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102302:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8102306:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 810230a:	d038      	beq.n	810237e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 810230c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8102310:	d831      	bhi.n	8102376 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8102312:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8102316:	d034      	beq.n	8102382 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8102318:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 810231c:	d82b      	bhi.n	8102376 <HAL_RCCEx_PeriphCLKConfig+0x376>
 810231e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8102322:	d01d      	beq.n	8102360 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8102324:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8102328:	d825      	bhi.n	8102376 <HAL_RCCEx_PeriphCLKConfig+0x376>
 810232a:	2b00      	cmp	r3, #0
 810232c:	d006      	beq.n	810233c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 810232e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8102332:	d00a      	beq.n	810234a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8102334:	e01f      	b.n	8102376 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8102336:	bf00      	nop
 8102338:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810233c:	4ba2      	ldr	r3, [pc, #648]	@ (81025c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810233e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102340:	4aa1      	ldr	r2, [pc, #644]	@ (81025c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8102342:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8102346:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8102348:	e01c      	b.n	8102384 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810234a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810234e:	3308      	adds	r3, #8
 8102350:	2100      	movs	r1, #0
 8102352:	4618      	mov	r0, r3
 8102354:	f002 fa2e 	bl	81047b4 <RCCEx_PLL2_Config>
 8102358:	4603      	mov	r3, r0
 810235a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 810235e:	e011      	b.n	8102384 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8102360:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102364:	3328      	adds	r3, #40	@ 0x28
 8102366:	2100      	movs	r1, #0
 8102368:	4618      	mov	r0, r3
 810236a:	f002 fad5 	bl	8104918 <RCCEx_PLL3_Config>
 810236e:	4603      	mov	r3, r0
 8102370:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8102374:	e006      	b.n	8102384 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8102376:	2301      	movs	r3, #1
 8102378:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810237c:	e002      	b.n	8102384 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 810237e:	bf00      	nop
 8102380:	e000      	b.n	8102384 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8102382:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102384:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8102388:	2b00      	cmp	r3, #0
 810238a:	d10b      	bne.n	81023a4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 810238c:	4b8e      	ldr	r3, [pc, #568]	@ (81025c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810238e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8102390:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8102394:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102398:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 810239c:	4a8a      	ldr	r2, [pc, #552]	@ (81025c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810239e:	430b      	orrs	r3, r1
 81023a0:	6593      	str	r3, [r2, #88]	@ 0x58
 81023a2:	e003      	b.n	81023ac <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81023a4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81023a8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 81023ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81023b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81023b4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 81023b8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 81023bc:	2300      	movs	r3, #0
 81023be:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 81023c2:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 81023c6:	460b      	mov	r3, r1
 81023c8:	4313      	orrs	r3, r2
 81023ca:	d03a      	beq.n	8102442 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 81023cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81023d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81023d2:	2b30      	cmp	r3, #48	@ 0x30
 81023d4:	d01f      	beq.n	8102416 <HAL_RCCEx_PeriphCLKConfig+0x416>
 81023d6:	2b30      	cmp	r3, #48	@ 0x30
 81023d8:	d819      	bhi.n	810240e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 81023da:	2b20      	cmp	r3, #32
 81023dc:	d00c      	beq.n	81023f8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 81023de:	2b20      	cmp	r3, #32
 81023e0:	d815      	bhi.n	810240e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 81023e2:	2b00      	cmp	r3, #0
 81023e4:	d019      	beq.n	810241a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 81023e6:	2b10      	cmp	r3, #16
 81023e8:	d111      	bne.n	810240e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81023ea:	4b77      	ldr	r3, [pc, #476]	@ (81025c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81023ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81023ee:	4a76      	ldr	r2, [pc, #472]	@ (81025c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81023f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81023f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 81023f6:	e011      	b.n	810241c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 81023f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81023fc:	3308      	adds	r3, #8
 81023fe:	2102      	movs	r1, #2
 8102400:	4618      	mov	r0, r3
 8102402:	f002 f9d7 	bl	81047b4 <RCCEx_PLL2_Config>
 8102406:	4603      	mov	r3, r0
 8102408:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 810240c:	e006      	b.n	810241c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 810240e:	2301      	movs	r3, #1
 8102410:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8102414:	e002      	b.n	810241c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8102416:	bf00      	nop
 8102418:	e000      	b.n	810241c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 810241a:	bf00      	nop
    }

    if (ret == HAL_OK)
 810241c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8102420:	2b00      	cmp	r3, #0
 8102422:	d10a      	bne.n	810243a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8102424:	4b68      	ldr	r3, [pc, #416]	@ (81025c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8102426:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8102428:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 810242c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102430:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8102432:	4a65      	ldr	r2, [pc, #404]	@ (81025c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8102434:	430b      	orrs	r3, r1
 8102436:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8102438:	e003      	b.n	8102442 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810243a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810243e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8102442:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102446:	e9d3 2300 	ldrd	r2, r3, [r3]
 810244a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 810244e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8102452:	2300      	movs	r3, #0
 8102454:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8102458:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 810245c:	460b      	mov	r3, r1
 810245e:	4313      	orrs	r3, r2
 8102460:	d051      	beq.n	8102506 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8102462:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102466:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8102468:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 810246c:	d035      	beq.n	81024da <HAL_RCCEx_PeriphCLKConfig+0x4da>
 810246e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8102472:	d82e      	bhi.n	81024d2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8102474:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8102478:	d031      	beq.n	81024de <HAL_RCCEx_PeriphCLKConfig+0x4de>
 810247a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 810247e:	d828      	bhi.n	81024d2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8102480:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8102484:	d01a      	beq.n	81024bc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8102486:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 810248a:	d822      	bhi.n	81024d2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 810248c:	2b00      	cmp	r3, #0
 810248e:	d003      	beq.n	8102498 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8102490:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8102494:	d007      	beq.n	81024a6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8102496:	e01c      	b.n	81024d2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102498:	4b4b      	ldr	r3, [pc, #300]	@ (81025c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810249a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810249c:	4a4a      	ldr	r2, [pc, #296]	@ (81025c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810249e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81024a2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 81024a4:	e01c      	b.n	81024e0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81024a6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81024aa:	3308      	adds	r3, #8
 81024ac:	2100      	movs	r1, #0
 81024ae:	4618      	mov	r0, r3
 81024b0:	f002 f980 	bl	81047b4 <RCCEx_PLL2_Config>
 81024b4:	4603      	mov	r3, r0
 81024b6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 81024ba:	e011      	b.n	81024e0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81024bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81024c0:	3328      	adds	r3, #40	@ 0x28
 81024c2:	2100      	movs	r1, #0
 81024c4:	4618      	mov	r0, r3
 81024c6:	f002 fa27 	bl	8104918 <RCCEx_PLL3_Config>
 81024ca:	4603      	mov	r3, r0
 81024cc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 81024d0:	e006      	b.n	81024e0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81024d2:	2301      	movs	r3, #1
 81024d4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 81024d8:	e002      	b.n	81024e0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 81024da:	bf00      	nop
 81024dc:	e000      	b.n	81024e0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 81024de:	bf00      	nop
    }

    if (ret == HAL_OK)
 81024e0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81024e4:	2b00      	cmp	r3, #0
 81024e6:	d10a      	bne.n	81024fe <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 81024e8:	4b37      	ldr	r3, [pc, #220]	@ (81025c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81024ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81024ec:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 81024f0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81024f4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81024f6:	4a34      	ldr	r2, [pc, #208]	@ (81025c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81024f8:	430b      	orrs	r3, r1
 81024fa:	6513      	str	r3, [r2, #80]	@ 0x50
 81024fc:	e003      	b.n	8102506 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81024fe:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8102502:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8102506:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810250a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810250e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8102512:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8102516:	2300      	movs	r3, #0
 8102518:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 810251c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8102520:	460b      	mov	r3, r1
 8102522:	4313      	orrs	r3, r2
 8102524:	d056      	beq.n	81025d4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8102526:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810252a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 810252c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8102530:	d033      	beq.n	810259a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8102532:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8102536:	d82c      	bhi.n	8102592 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8102538:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 810253c:	d02f      	beq.n	810259e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 810253e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8102542:	d826      	bhi.n	8102592 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8102544:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8102548:	d02b      	beq.n	81025a2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 810254a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 810254e:	d820      	bhi.n	8102592 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8102550:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8102554:	d012      	beq.n	810257c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8102556:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810255a:	d81a      	bhi.n	8102592 <HAL_RCCEx_PeriphCLKConfig+0x592>
 810255c:	2b00      	cmp	r3, #0
 810255e:	d022      	beq.n	81025a6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8102560:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8102564:	d115      	bne.n	8102592 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8102566:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810256a:	3308      	adds	r3, #8
 810256c:	2101      	movs	r1, #1
 810256e:	4618      	mov	r0, r3
 8102570:	f002 f920 	bl	81047b4 <RCCEx_PLL2_Config>
 8102574:	4603      	mov	r3, r0
 8102576:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 810257a:	e015      	b.n	81025a8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810257c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102580:	3328      	adds	r3, #40	@ 0x28
 8102582:	2101      	movs	r1, #1
 8102584:	4618      	mov	r0, r3
 8102586:	f002 f9c7 	bl	8104918 <RCCEx_PLL3_Config>
 810258a:	4603      	mov	r3, r0
 810258c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8102590:	e00a      	b.n	81025a8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102592:	2301      	movs	r3, #1
 8102594:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8102598:	e006      	b.n	81025a8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 810259a:	bf00      	nop
 810259c:	e004      	b.n	81025a8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 810259e:	bf00      	nop
 81025a0:	e002      	b.n	81025a8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 81025a2:	bf00      	nop
 81025a4:	e000      	b.n	81025a8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 81025a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 81025a8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81025ac:	2b00      	cmp	r3, #0
 81025ae:	d10d      	bne.n	81025cc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 81025b0:	4b05      	ldr	r3, [pc, #20]	@ (81025c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81025b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81025b4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 81025b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81025bc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 81025be:	4a02      	ldr	r2, [pc, #8]	@ (81025c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81025c0:	430b      	orrs	r3, r1
 81025c2:	6513      	str	r3, [r2, #80]	@ 0x50
 81025c4:	e006      	b.n	81025d4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 81025c6:	bf00      	nop
 81025c8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 81025cc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81025d0:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 81025d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81025d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 81025dc:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 81025e0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 81025e4:	2300      	movs	r3, #0
 81025e6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 81025ea:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 81025ee:	460b      	mov	r3, r1
 81025f0:	4313      	orrs	r3, r2
 81025f2:	d055      	beq.n	81026a0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 81025f4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81025f8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 81025fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8102600:	d033      	beq.n	810266a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8102602:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8102606:	d82c      	bhi.n	8102662 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8102608:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810260c:	d02f      	beq.n	810266e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 810260e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8102612:	d826      	bhi.n	8102662 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8102614:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8102618:	d02b      	beq.n	8102672 <HAL_RCCEx_PeriphCLKConfig+0x672>
 810261a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 810261e:	d820      	bhi.n	8102662 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8102620:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8102624:	d012      	beq.n	810264c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8102626:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810262a:	d81a      	bhi.n	8102662 <HAL_RCCEx_PeriphCLKConfig+0x662>
 810262c:	2b00      	cmp	r3, #0
 810262e:	d022      	beq.n	8102676 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8102630:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8102634:	d115      	bne.n	8102662 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8102636:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810263a:	3308      	adds	r3, #8
 810263c:	2101      	movs	r1, #1
 810263e:	4618      	mov	r0, r3
 8102640:	f002 f8b8 	bl	81047b4 <RCCEx_PLL2_Config>
 8102644:	4603      	mov	r3, r0
 8102646:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 810264a:	e015      	b.n	8102678 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810264c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102650:	3328      	adds	r3, #40	@ 0x28
 8102652:	2101      	movs	r1, #1
 8102654:	4618      	mov	r0, r3
 8102656:	f002 f95f 	bl	8104918 <RCCEx_PLL3_Config>
 810265a:	4603      	mov	r3, r0
 810265c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8102660:	e00a      	b.n	8102678 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8102662:	2301      	movs	r3, #1
 8102664:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8102668:	e006      	b.n	8102678 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 810266a:	bf00      	nop
 810266c:	e004      	b.n	8102678 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 810266e:	bf00      	nop
 8102670:	e002      	b.n	8102678 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8102672:	bf00      	nop
 8102674:	e000      	b.n	8102678 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8102676:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102678:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810267c:	2b00      	cmp	r3, #0
 810267e:	d10b      	bne.n	8102698 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8102680:	4bb7      	ldr	r3, [pc, #732]	@ (8102960 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8102682:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8102684:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8102688:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810268c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8102690:	4ab3      	ldr	r2, [pc, #716]	@ (8102960 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8102692:	430b      	orrs	r3, r1
 8102694:	6593      	str	r3, [r2, #88]	@ 0x58
 8102696:	e003      	b.n	81026a0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102698:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810269c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 81026a0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81026a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 81026a8:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 81026ac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 81026b0:	2300      	movs	r3, #0
 81026b2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 81026b6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 81026ba:	460b      	mov	r3, r1
 81026bc:	4313      	orrs	r3, r2
 81026be:	d02a      	beq.n	8102716 <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 81026c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81026c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81026c6:	2b00      	cmp	r3, #0
 81026c8:	d011      	beq.n	81026ee <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 81026ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81026ce:	d10a      	bne.n	81026e6 <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81026d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81026d4:	3308      	adds	r3, #8
 81026d6:	2101      	movs	r1, #1
 81026d8:	4618      	mov	r0, r3
 81026da:	f002 f86b 	bl	81047b4 <RCCEx_PLL2_Config>
 81026de:	4603      	mov	r3, r0
 81026e0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 81026e4:	e004      	b.n	81026f0 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81026e6:	2301      	movs	r3, #1
 81026e8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 81026ec:	e000      	b.n	81026f0 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 81026ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 81026f0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81026f4:	2b00      	cmp	r3, #0
 81026f6:	d10a      	bne.n	810270e <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 81026f8:	4b99      	ldr	r3, [pc, #612]	@ (8102960 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81026fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81026fc:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8102700:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102704:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8102706:	4a96      	ldr	r2, [pc, #600]	@ (8102960 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8102708:	430b      	orrs	r3, r1
 810270a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 810270c:	e003      	b.n	8102716 <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810270e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8102712:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8102716:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810271a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810271e:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8102722:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8102726:	2300      	movs	r3, #0
 8102728:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 810272c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8102730:	460b      	mov	r3, r1
 8102732:	4313      	orrs	r3, r2
 8102734:	d037      	beq.n	81027a6 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8102736:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810273a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 810273c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8102740:	d00e      	beq.n	8102760 <HAL_RCCEx_PeriphCLKConfig+0x760>
 8102742:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8102746:	d816      	bhi.n	8102776 <HAL_RCCEx_PeriphCLKConfig+0x776>
 8102748:	2b00      	cmp	r3, #0
 810274a:	d018      	beq.n	810277e <HAL_RCCEx_PeriphCLKConfig+0x77e>
 810274c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8102750:	d111      	bne.n	8102776 <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102752:	4b83      	ldr	r3, [pc, #524]	@ (8102960 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8102754:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102756:	4a82      	ldr	r2, [pc, #520]	@ (8102960 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8102758:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810275c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 810275e:	e00f      	b.n	8102780 <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8102760:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102764:	3308      	adds	r3, #8
 8102766:	2101      	movs	r1, #1
 8102768:	4618      	mov	r0, r3
 810276a:	f002 f823 	bl	81047b4 <RCCEx_PLL2_Config>
 810276e:	4603      	mov	r3, r0
 8102770:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8102774:	e004      	b.n	8102780 <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102776:	2301      	movs	r3, #1
 8102778:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810277c:	e000      	b.n	8102780 <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 810277e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102780:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8102784:	2b00      	cmp	r3, #0
 8102786:	d10a      	bne.n	810279e <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8102788:	4b75      	ldr	r3, [pc, #468]	@ (8102960 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810278a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810278c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8102790:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102794:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8102796:	4a72      	ldr	r2, [pc, #456]	@ (8102960 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8102798:	430b      	orrs	r3, r1
 810279a:	6513      	str	r3, [r2, #80]	@ 0x50
 810279c:	e003      	b.n	81027a6 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810279e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81027a2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 81027a6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81027aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 81027ae:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 81027b2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 81027b6:	2300      	movs	r3, #0
 81027b8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 81027bc:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 81027c0:	460b      	mov	r3, r1
 81027c2:	4313      	orrs	r3, r2
 81027c4:	d03a      	beq.n	810283c <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 81027c6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81027ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 81027cc:	2b03      	cmp	r3, #3
 81027ce:	d81d      	bhi.n	810280c <HAL_RCCEx_PeriphCLKConfig+0x80c>
 81027d0:	a201      	add	r2, pc, #4	@ (adr r2, 81027d8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 81027d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81027d6:	bf00      	nop
 81027d8:	08102815 	.word	0x08102815
 81027dc:	081027e9 	.word	0x081027e9
 81027e0:	081027f7 	.word	0x081027f7
 81027e4:	08102815 	.word	0x08102815
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81027e8:	4b5d      	ldr	r3, [pc, #372]	@ (8102960 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81027ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81027ec:	4a5c      	ldr	r2, [pc, #368]	@ (8102960 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81027ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81027f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 81027f4:	e00f      	b.n	8102816 <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 81027f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81027fa:	3308      	adds	r3, #8
 81027fc:	2102      	movs	r1, #2
 81027fe:	4618      	mov	r0, r3
 8102800:	f001 ffd8 	bl	81047b4 <RCCEx_PLL2_Config>
 8102804:	4603      	mov	r3, r0
 8102806:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 810280a:	e004      	b.n	8102816 <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 810280c:	2301      	movs	r3, #1
 810280e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8102812:	e000      	b.n	8102816 <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 8102814:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102816:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810281a:	2b00      	cmp	r3, #0
 810281c:	d10a      	bne.n	8102834 <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 810281e:	4b50      	ldr	r3, [pc, #320]	@ (8102960 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8102820:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8102822:	f023 0103 	bic.w	r1, r3, #3
 8102826:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810282a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 810282c:	4a4c      	ldr	r2, [pc, #304]	@ (8102960 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810282e:	430b      	orrs	r3, r1
 8102830:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8102832:	e003      	b.n	810283c <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102834:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8102838:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 810283c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102844:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8102848:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 810284c:	2300      	movs	r3, #0
 810284e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8102852:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8102856:	460b      	mov	r3, r1
 8102858:	4313      	orrs	r3, r2
 810285a:	f000 80a0 	beq.w	810299e <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 810285e:	4b41      	ldr	r3, [pc, #260]	@ (8102964 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8102860:	681b      	ldr	r3, [r3, #0]
 8102862:	4a40      	ldr	r2, [pc, #256]	@ (8102964 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8102864:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8102868:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 810286a:	f7fd ffa9 	bl	81007c0 <HAL_GetTick>
 810286e:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8102872:	e00b      	b.n	810288c <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8102874:	f7fd ffa4 	bl	81007c0 <HAL_GetTick>
 8102878:	4602      	mov	r2, r0
 810287a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 810287e:	1ad3      	subs	r3, r2, r3
 8102880:	2b64      	cmp	r3, #100	@ 0x64
 8102882:	d903      	bls.n	810288c <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 8102884:	2303      	movs	r3, #3
 8102886:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810288a:	e005      	b.n	8102898 <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 810288c:	4b35      	ldr	r3, [pc, #212]	@ (8102964 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 810288e:	681b      	ldr	r3, [r3, #0]
 8102890:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8102894:	2b00      	cmp	r3, #0
 8102896:	d0ed      	beq.n	8102874 <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 8102898:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810289c:	2b00      	cmp	r3, #0
 810289e:	d17a      	bne.n	8102996 <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 81028a0:	4b2f      	ldr	r3, [pc, #188]	@ (8102960 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81028a2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 81028a4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81028a8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 81028ac:	4053      	eors	r3, r2
 81028ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 81028b2:	2b00      	cmp	r3, #0
 81028b4:	d015      	beq.n	81028e2 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 81028b6:	4b2a      	ldr	r3, [pc, #168]	@ (8102960 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81028b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81028ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 81028be:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 81028c2:	4b27      	ldr	r3, [pc, #156]	@ (8102960 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81028c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81028c6:	4a26      	ldr	r2, [pc, #152]	@ (8102960 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81028c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 81028cc:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 81028ce:	4b24      	ldr	r3, [pc, #144]	@ (8102960 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81028d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81028d2:	4a23      	ldr	r2, [pc, #140]	@ (8102960 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81028d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 81028d8:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 81028da:	4a21      	ldr	r2, [pc, #132]	@ (8102960 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81028dc:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 81028e0:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 81028e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81028e6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 81028ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81028ee:	d118      	bne.n	8102922 <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 81028f0:	f7fd ff66 	bl	81007c0 <HAL_GetTick>
 81028f4:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 81028f8:	e00d      	b.n	8102916 <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 81028fa:	f7fd ff61 	bl	81007c0 <HAL_GetTick>
 81028fe:	4602      	mov	r2, r0
 8102900:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8102904:	1ad2      	subs	r2, r2, r3
 8102906:	f241 3388 	movw	r3, #5000	@ 0x1388
 810290a:	429a      	cmp	r2, r3
 810290c:	d903      	bls.n	8102916 <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 810290e:	2303      	movs	r3, #3
 8102910:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
            break;
 8102914:	e005      	b.n	8102922 <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8102916:	4b12      	ldr	r3, [pc, #72]	@ (8102960 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8102918:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810291a:	f003 0302 	and.w	r3, r3, #2
 810291e:	2b00      	cmp	r3, #0
 8102920:	d0eb      	beq.n	81028fa <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 8102922:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8102926:	2b00      	cmp	r3, #0
 8102928:	d130      	bne.n	810298c <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 810292a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810292e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8102932:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8102936:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 810293a:	d115      	bne.n	8102968 <HAL_RCCEx_PeriphCLKConfig+0x968>
 810293c:	4b08      	ldr	r3, [pc, #32]	@ (8102960 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810293e:	691b      	ldr	r3, [r3, #16]
 8102940:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8102944:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102948:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 810294c:	091b      	lsrs	r3, r3, #4
 810294e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8102952:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8102956:	4a02      	ldr	r2, [pc, #8]	@ (8102960 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8102958:	430b      	orrs	r3, r1
 810295a:	6113      	str	r3, [r2, #16]
 810295c:	e00a      	b.n	8102974 <HAL_RCCEx_PeriphCLKConfig+0x974>
 810295e:	bf00      	nop
 8102960:	58024400 	.word	0x58024400
 8102964:	58024800 	.word	0x58024800
 8102968:	4bd4      	ldr	r3, [pc, #848]	@ (8102cbc <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 810296a:	691b      	ldr	r3, [r3, #16]
 810296c:	4ad3      	ldr	r2, [pc, #844]	@ (8102cbc <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 810296e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8102972:	6113      	str	r3, [r2, #16]
 8102974:	4bd1      	ldr	r3, [pc, #836]	@ (8102cbc <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8102976:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8102978:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810297c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8102980:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8102984:	4acd      	ldr	r2, [pc, #820]	@ (8102cbc <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8102986:	430b      	orrs	r3, r1
 8102988:	6713      	str	r3, [r2, #112]	@ 0x70
 810298a:	e008      	b.n	810299e <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 810298c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8102990:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
 8102994:	e003      	b.n	810299e <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102996:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810299a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 810299e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81029a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 81029a6:	f002 0301 	and.w	r3, r2, #1
 81029aa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 81029ae:	2300      	movs	r3, #0
 81029b0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 81029b4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 81029b8:	460b      	mov	r3, r1
 81029ba:	4313      	orrs	r3, r2
 81029bc:	f000 808b 	beq.w	8102ad6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 81029c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81029c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 81029c8:	2b28      	cmp	r3, #40	@ 0x28
 81029ca:	d86b      	bhi.n	8102aa4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 81029cc:	a201      	add	r2, pc, #4	@ (adr r2, 81029d4 <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 81029ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81029d2:	bf00      	nop
 81029d4:	08102aad 	.word	0x08102aad
 81029d8:	08102aa5 	.word	0x08102aa5
 81029dc:	08102aa5 	.word	0x08102aa5
 81029e0:	08102aa5 	.word	0x08102aa5
 81029e4:	08102aa5 	.word	0x08102aa5
 81029e8:	08102aa5 	.word	0x08102aa5
 81029ec:	08102aa5 	.word	0x08102aa5
 81029f0:	08102aa5 	.word	0x08102aa5
 81029f4:	08102a79 	.word	0x08102a79
 81029f8:	08102aa5 	.word	0x08102aa5
 81029fc:	08102aa5 	.word	0x08102aa5
 8102a00:	08102aa5 	.word	0x08102aa5
 8102a04:	08102aa5 	.word	0x08102aa5
 8102a08:	08102aa5 	.word	0x08102aa5
 8102a0c:	08102aa5 	.word	0x08102aa5
 8102a10:	08102aa5 	.word	0x08102aa5
 8102a14:	08102a8f 	.word	0x08102a8f
 8102a18:	08102aa5 	.word	0x08102aa5
 8102a1c:	08102aa5 	.word	0x08102aa5
 8102a20:	08102aa5 	.word	0x08102aa5
 8102a24:	08102aa5 	.word	0x08102aa5
 8102a28:	08102aa5 	.word	0x08102aa5
 8102a2c:	08102aa5 	.word	0x08102aa5
 8102a30:	08102aa5 	.word	0x08102aa5
 8102a34:	08102aad 	.word	0x08102aad
 8102a38:	08102aa5 	.word	0x08102aa5
 8102a3c:	08102aa5 	.word	0x08102aa5
 8102a40:	08102aa5 	.word	0x08102aa5
 8102a44:	08102aa5 	.word	0x08102aa5
 8102a48:	08102aa5 	.word	0x08102aa5
 8102a4c:	08102aa5 	.word	0x08102aa5
 8102a50:	08102aa5 	.word	0x08102aa5
 8102a54:	08102aad 	.word	0x08102aad
 8102a58:	08102aa5 	.word	0x08102aa5
 8102a5c:	08102aa5 	.word	0x08102aa5
 8102a60:	08102aa5 	.word	0x08102aa5
 8102a64:	08102aa5 	.word	0x08102aa5
 8102a68:	08102aa5 	.word	0x08102aa5
 8102a6c:	08102aa5 	.word	0x08102aa5
 8102a70:	08102aa5 	.word	0x08102aa5
 8102a74:	08102aad 	.word	0x08102aad
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8102a78:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102a7c:	3308      	adds	r3, #8
 8102a7e:	2101      	movs	r1, #1
 8102a80:	4618      	mov	r0, r3
 8102a82:	f001 fe97 	bl	81047b4 <RCCEx_PLL2_Config>
 8102a86:	4603      	mov	r3, r0
 8102a88:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8102a8c:	e00f      	b.n	8102aae <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8102a8e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102a92:	3328      	adds	r3, #40	@ 0x28
 8102a94:	2101      	movs	r1, #1
 8102a96:	4618      	mov	r0, r3
 8102a98:	f001 ff3e 	bl	8104918 <RCCEx_PLL3_Config>
 8102a9c:	4603      	mov	r3, r0
 8102a9e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8102aa2:	e004      	b.n	8102aae <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102aa4:	2301      	movs	r3, #1
 8102aa6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8102aaa:	e000      	b.n	8102aae <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 8102aac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102aae:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8102ab2:	2b00      	cmp	r3, #0
 8102ab4:	d10b      	bne.n	8102ace <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8102ab6:	4b81      	ldr	r3, [pc, #516]	@ (8102cbc <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8102ab8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8102aba:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8102abe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102ac2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8102ac6:	4a7d      	ldr	r2, [pc, #500]	@ (8102cbc <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8102ac8:	430b      	orrs	r3, r1
 8102aca:	6553      	str	r3, [r2, #84]	@ 0x54
 8102acc:	e003      	b.n	8102ad6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102ace:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8102ad2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8102ad6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102ade:	f002 0302 	and.w	r3, r2, #2
 8102ae2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8102ae6:	2300      	movs	r3, #0
 8102ae8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8102aec:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8102af0:	460b      	mov	r3, r1
 8102af2:	4313      	orrs	r3, r2
 8102af4:	d042      	beq.n	8102b7c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8102af6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102afa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8102afc:	2b05      	cmp	r3, #5
 8102afe:	d825      	bhi.n	8102b4c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 8102b00:	a201      	add	r2, pc, #4	@ (adr r2, 8102b08 <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 8102b02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8102b06:	bf00      	nop
 8102b08:	08102b55 	.word	0x08102b55
 8102b0c:	08102b21 	.word	0x08102b21
 8102b10:	08102b37 	.word	0x08102b37
 8102b14:	08102b55 	.word	0x08102b55
 8102b18:	08102b55 	.word	0x08102b55
 8102b1c:	08102b55 	.word	0x08102b55
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8102b20:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102b24:	3308      	adds	r3, #8
 8102b26:	2101      	movs	r1, #1
 8102b28:	4618      	mov	r0, r3
 8102b2a:	f001 fe43 	bl	81047b4 <RCCEx_PLL2_Config>
 8102b2e:	4603      	mov	r3, r0
 8102b30:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8102b34:	e00f      	b.n	8102b56 <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8102b36:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102b3a:	3328      	adds	r3, #40	@ 0x28
 8102b3c:	2101      	movs	r1, #1
 8102b3e:	4618      	mov	r0, r3
 8102b40:	f001 feea 	bl	8104918 <RCCEx_PLL3_Config>
 8102b44:	4603      	mov	r3, r0
 8102b46:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8102b4a:	e004      	b.n	8102b56 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102b4c:	2301      	movs	r3, #1
 8102b4e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8102b52:	e000      	b.n	8102b56 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 8102b54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102b56:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8102b5a:	2b00      	cmp	r3, #0
 8102b5c:	d10a      	bne.n	8102b74 <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8102b5e:	4b57      	ldr	r3, [pc, #348]	@ (8102cbc <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8102b60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8102b62:	f023 0107 	bic.w	r1, r3, #7
 8102b66:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102b6a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8102b6c:	4a53      	ldr	r2, [pc, #332]	@ (8102cbc <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8102b6e:	430b      	orrs	r3, r1
 8102b70:	6553      	str	r3, [r2, #84]	@ 0x54
 8102b72:	e003      	b.n	8102b7c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102b74:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8102b78:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8102b7c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102b84:	f002 0304 	and.w	r3, r2, #4
 8102b88:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8102b8c:	2300      	movs	r3, #0
 8102b8e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8102b92:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8102b96:	460b      	mov	r3, r1
 8102b98:	4313      	orrs	r3, r2
 8102b9a:	d044      	beq.n	8102c26 <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8102b9c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102ba0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8102ba4:	2b05      	cmp	r3, #5
 8102ba6:	d825      	bhi.n	8102bf4 <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 8102ba8:	a201      	add	r2, pc, #4	@ (adr r2, 8102bb0 <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 8102baa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8102bae:	bf00      	nop
 8102bb0:	08102bfd 	.word	0x08102bfd
 8102bb4:	08102bc9 	.word	0x08102bc9
 8102bb8:	08102bdf 	.word	0x08102bdf
 8102bbc:	08102bfd 	.word	0x08102bfd
 8102bc0:	08102bfd 	.word	0x08102bfd
 8102bc4:	08102bfd 	.word	0x08102bfd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8102bc8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102bcc:	3308      	adds	r3, #8
 8102bce:	2101      	movs	r1, #1
 8102bd0:	4618      	mov	r0, r3
 8102bd2:	f001 fdef 	bl	81047b4 <RCCEx_PLL2_Config>
 8102bd6:	4603      	mov	r3, r0
 8102bd8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8102bdc:	e00f      	b.n	8102bfe <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8102bde:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102be2:	3328      	adds	r3, #40	@ 0x28
 8102be4:	2101      	movs	r1, #1
 8102be6:	4618      	mov	r0, r3
 8102be8:	f001 fe96 	bl	8104918 <RCCEx_PLL3_Config>
 8102bec:	4603      	mov	r3, r0
 8102bee:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8102bf2:	e004      	b.n	8102bfe <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102bf4:	2301      	movs	r3, #1
 8102bf6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8102bfa:	e000      	b.n	8102bfe <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 8102bfc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102bfe:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8102c02:	2b00      	cmp	r3, #0
 8102c04:	d10b      	bne.n	8102c1e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8102c06:	4b2d      	ldr	r3, [pc, #180]	@ (8102cbc <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8102c08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8102c0a:	f023 0107 	bic.w	r1, r3, #7
 8102c0e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102c12:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8102c16:	4a29      	ldr	r2, [pc, #164]	@ (8102cbc <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8102c18:	430b      	orrs	r3, r1
 8102c1a:	6593      	str	r3, [r2, #88]	@ 0x58
 8102c1c:	e003      	b.n	8102c26 <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102c1e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8102c22:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8102c26:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102c2e:	f002 0320 	and.w	r3, r2, #32
 8102c32:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8102c36:	2300      	movs	r3, #0
 8102c38:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8102c3c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8102c40:	460b      	mov	r3, r1
 8102c42:	4313      	orrs	r3, r2
 8102c44:	d057      	beq.n	8102cf6 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8102c46:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102c4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8102c4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8102c52:	d035      	beq.n	8102cc0 <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 8102c54:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8102c58:	d82c      	bhi.n	8102cb4 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8102c5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8102c5e:	d031      	beq.n	8102cc4 <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 8102c60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8102c64:	d826      	bhi.n	8102cb4 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8102c66:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8102c6a:	d02d      	beq.n	8102cc8 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 8102c6c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8102c70:	d820      	bhi.n	8102cb4 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8102c72:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8102c76:	d012      	beq.n	8102c9e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 8102c78:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8102c7c:	d81a      	bhi.n	8102cb4 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8102c7e:	2b00      	cmp	r3, #0
 8102c80:	d024      	beq.n	8102ccc <HAL_RCCEx_PeriphCLKConfig+0xccc>
 8102c82:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8102c86:	d115      	bne.n	8102cb4 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8102c88:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102c8c:	3308      	adds	r3, #8
 8102c8e:	2100      	movs	r1, #0
 8102c90:	4618      	mov	r0, r3
 8102c92:	f001 fd8f 	bl	81047b4 <RCCEx_PLL2_Config>
 8102c96:	4603      	mov	r3, r0
 8102c98:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8102c9c:	e017      	b.n	8102cce <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8102c9e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102ca2:	3328      	adds	r3, #40	@ 0x28
 8102ca4:	2102      	movs	r1, #2
 8102ca6:	4618      	mov	r0, r3
 8102ca8:	f001 fe36 	bl	8104918 <RCCEx_PLL3_Config>
 8102cac:	4603      	mov	r3, r0
 8102cae:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8102cb2:	e00c      	b.n	8102cce <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102cb4:	2301      	movs	r3, #1
 8102cb6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8102cba:	e008      	b.n	8102cce <HAL_RCCEx_PeriphCLKConfig+0xcce>
 8102cbc:	58024400 	.word	0x58024400
        break;
 8102cc0:	bf00      	nop
 8102cc2:	e004      	b.n	8102cce <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8102cc4:	bf00      	nop
 8102cc6:	e002      	b.n	8102cce <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8102cc8:	bf00      	nop
 8102cca:	e000      	b.n	8102cce <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8102ccc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102cce:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8102cd2:	2b00      	cmp	r3, #0
 8102cd4:	d10b      	bne.n	8102cee <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8102cd6:	4bc2      	ldr	r3, [pc, #776]	@ (8102fe0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8102cd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8102cda:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8102cde:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102ce2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8102ce6:	4abe      	ldr	r2, [pc, #760]	@ (8102fe0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8102ce8:	430b      	orrs	r3, r1
 8102cea:	6553      	str	r3, [r2, #84]	@ 0x54
 8102cec:	e003      	b.n	8102cf6 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102cee:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8102cf2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8102cf6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102cfe:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8102d02:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8102d06:	2300      	movs	r3, #0
 8102d08:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8102d0c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8102d10:	460b      	mov	r3, r1
 8102d12:	4313      	orrs	r3, r2
 8102d14:	d055      	beq.n	8102dc2 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8102d16:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102d1a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8102d1e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8102d22:	d033      	beq.n	8102d8c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 8102d24:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8102d28:	d82c      	bhi.n	8102d84 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8102d2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8102d2e:	d02f      	beq.n	8102d90 <HAL_RCCEx_PeriphCLKConfig+0xd90>
 8102d30:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8102d34:	d826      	bhi.n	8102d84 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8102d36:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8102d3a:	d02b      	beq.n	8102d94 <HAL_RCCEx_PeriphCLKConfig+0xd94>
 8102d3c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8102d40:	d820      	bhi.n	8102d84 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8102d42:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8102d46:	d012      	beq.n	8102d6e <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 8102d48:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8102d4c:	d81a      	bhi.n	8102d84 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8102d4e:	2b00      	cmp	r3, #0
 8102d50:	d022      	beq.n	8102d98 <HAL_RCCEx_PeriphCLKConfig+0xd98>
 8102d52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8102d56:	d115      	bne.n	8102d84 <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8102d58:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102d5c:	3308      	adds	r3, #8
 8102d5e:	2100      	movs	r1, #0
 8102d60:	4618      	mov	r0, r3
 8102d62:	f001 fd27 	bl	81047b4 <RCCEx_PLL2_Config>
 8102d66:	4603      	mov	r3, r0
 8102d68:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8102d6c:	e015      	b.n	8102d9a <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8102d6e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102d72:	3328      	adds	r3, #40	@ 0x28
 8102d74:	2102      	movs	r1, #2
 8102d76:	4618      	mov	r0, r3
 8102d78:	f001 fdce 	bl	8104918 <RCCEx_PLL3_Config>
 8102d7c:	4603      	mov	r3, r0
 8102d7e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8102d82:	e00a      	b.n	8102d9a <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102d84:	2301      	movs	r3, #1
 8102d86:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8102d8a:	e006      	b.n	8102d9a <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8102d8c:	bf00      	nop
 8102d8e:	e004      	b.n	8102d9a <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8102d90:	bf00      	nop
 8102d92:	e002      	b.n	8102d9a <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8102d94:	bf00      	nop
 8102d96:	e000      	b.n	8102d9a <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8102d98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102d9a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8102d9e:	2b00      	cmp	r3, #0
 8102da0:	d10b      	bne.n	8102dba <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8102da2:	4b8f      	ldr	r3, [pc, #572]	@ (8102fe0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8102da4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8102da6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8102daa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102dae:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8102db2:	4a8b      	ldr	r2, [pc, #556]	@ (8102fe0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8102db4:	430b      	orrs	r3, r1
 8102db6:	6593      	str	r3, [r2, #88]	@ 0x58
 8102db8:	e003      	b.n	8102dc2 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102dba:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8102dbe:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8102dc2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102dca:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8102dce:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8102dd2:	2300      	movs	r3, #0
 8102dd4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8102dd8:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8102ddc:	460b      	mov	r3, r1
 8102dde:	4313      	orrs	r3, r2
 8102de0:	d055      	beq.n	8102e8e <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8102de2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102de6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8102dea:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8102dee:	d033      	beq.n	8102e58 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8102df0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8102df4:	d82c      	bhi.n	8102e50 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8102df6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8102dfa:	d02f      	beq.n	8102e5c <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8102dfc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8102e00:	d826      	bhi.n	8102e50 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8102e02:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8102e06:	d02b      	beq.n	8102e60 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8102e08:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8102e0c:	d820      	bhi.n	8102e50 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8102e0e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8102e12:	d012      	beq.n	8102e3a <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 8102e14:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8102e18:	d81a      	bhi.n	8102e50 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8102e1a:	2b00      	cmp	r3, #0
 8102e1c:	d022      	beq.n	8102e64 <HAL_RCCEx_PeriphCLKConfig+0xe64>
 8102e1e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8102e22:	d115      	bne.n	8102e50 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8102e24:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102e28:	3308      	adds	r3, #8
 8102e2a:	2100      	movs	r1, #0
 8102e2c:	4618      	mov	r0, r3
 8102e2e:	f001 fcc1 	bl	81047b4 <RCCEx_PLL2_Config>
 8102e32:	4603      	mov	r3, r0
 8102e34:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8102e38:	e015      	b.n	8102e66 <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8102e3a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102e3e:	3328      	adds	r3, #40	@ 0x28
 8102e40:	2102      	movs	r1, #2
 8102e42:	4618      	mov	r0, r3
 8102e44:	f001 fd68 	bl	8104918 <RCCEx_PLL3_Config>
 8102e48:	4603      	mov	r3, r0
 8102e4a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8102e4e:	e00a      	b.n	8102e66 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102e50:	2301      	movs	r3, #1
 8102e52:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8102e56:	e006      	b.n	8102e66 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8102e58:	bf00      	nop
 8102e5a:	e004      	b.n	8102e66 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8102e5c:	bf00      	nop
 8102e5e:	e002      	b.n	8102e66 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8102e60:	bf00      	nop
 8102e62:	e000      	b.n	8102e66 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8102e64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102e66:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8102e6a:	2b00      	cmp	r3, #0
 8102e6c:	d10b      	bne.n	8102e86 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8102e6e:	4b5c      	ldr	r3, [pc, #368]	@ (8102fe0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8102e70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8102e72:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8102e76:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102e7a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8102e7e:	4a58      	ldr	r2, [pc, #352]	@ (8102fe0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8102e80:	430b      	orrs	r3, r1
 8102e82:	6593      	str	r3, [r2, #88]	@ 0x58
 8102e84:	e003      	b.n	8102e8e <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102e86:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8102e8a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8102e8e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102e96:	f002 0308 	and.w	r3, r2, #8
 8102e9a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8102e9e:	2300      	movs	r3, #0
 8102ea0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8102ea4:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8102ea8:	460b      	mov	r3, r1
 8102eaa:	4313      	orrs	r3, r2
 8102eac:	d01e      	beq.n	8102eec <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8102eae:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8102eb6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8102eba:	d10c      	bne.n	8102ed6 <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8102ebc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102ec0:	3328      	adds	r3, #40	@ 0x28
 8102ec2:	2102      	movs	r1, #2
 8102ec4:	4618      	mov	r0, r3
 8102ec6:	f001 fd27 	bl	8104918 <RCCEx_PLL3_Config>
 8102eca:	4603      	mov	r3, r0
 8102ecc:	2b00      	cmp	r3, #0
 8102ece:	d002      	beq.n	8102ed6 <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 8102ed0:	2301      	movs	r3, #1
 8102ed2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8102ed6:	4b42      	ldr	r3, [pc, #264]	@ (8102fe0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8102ed8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8102eda:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8102ede:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8102ee6:	4a3e      	ldr	r2, [pc, #248]	@ (8102fe0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8102ee8:	430b      	orrs	r3, r1
 8102eea:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8102eec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102ef4:	f002 0310 	and.w	r3, r2, #16
 8102ef8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8102efc:	2300      	movs	r3, #0
 8102efe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8102f02:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8102f06:	460b      	mov	r3, r1
 8102f08:	4313      	orrs	r3, r2
 8102f0a:	d01e      	beq.n	8102f4a <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8102f0c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102f10:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8102f14:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8102f18:	d10c      	bne.n	8102f34 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8102f1a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102f1e:	3328      	adds	r3, #40	@ 0x28
 8102f20:	2102      	movs	r1, #2
 8102f22:	4618      	mov	r0, r3
 8102f24:	f001 fcf8 	bl	8104918 <RCCEx_PLL3_Config>
 8102f28:	4603      	mov	r3, r0
 8102f2a:	2b00      	cmp	r3, #0
 8102f2c:	d002      	beq.n	8102f34 <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 8102f2e:	2301      	movs	r3, #1
 8102f30:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8102f34:	4b2a      	ldr	r3, [pc, #168]	@ (8102fe0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8102f36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8102f38:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8102f3c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102f40:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8102f44:	4a26      	ldr	r2, [pc, #152]	@ (8102fe0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8102f46:	430b      	orrs	r3, r1
 8102f48:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8102f4a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102f52:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8102f56:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8102f5a:	2300      	movs	r3, #0
 8102f5c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8102f60:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8102f64:	460b      	mov	r3, r1
 8102f66:	4313      	orrs	r3, r2
 8102f68:	d040      	beq.n	8102fec <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8102f6a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102f6e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8102f72:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8102f76:	d022      	beq.n	8102fbe <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 8102f78:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8102f7c:	d81b      	bhi.n	8102fb6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8102f7e:	2b00      	cmp	r3, #0
 8102f80:	d003      	beq.n	8102f8a <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 8102f82:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8102f86:	d00b      	beq.n	8102fa0 <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 8102f88:	e015      	b.n	8102fb6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8102f8a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102f8e:	3308      	adds	r3, #8
 8102f90:	2100      	movs	r1, #0
 8102f92:	4618      	mov	r0, r3
 8102f94:	f001 fc0e 	bl	81047b4 <RCCEx_PLL2_Config>
 8102f98:	4603      	mov	r3, r0
 8102f9a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8102f9e:	e00f      	b.n	8102fc0 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8102fa0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102fa4:	3328      	adds	r3, #40	@ 0x28
 8102fa6:	2102      	movs	r1, #2
 8102fa8:	4618      	mov	r0, r3
 8102faa:	f001 fcb5 	bl	8104918 <RCCEx_PLL3_Config>
 8102fae:	4603      	mov	r3, r0
 8102fb0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8102fb4:	e004      	b.n	8102fc0 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102fb6:	2301      	movs	r3, #1
 8102fb8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8102fbc:	e000      	b.n	8102fc0 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 8102fbe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102fc0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8102fc4:	2b00      	cmp	r3, #0
 8102fc6:	d10d      	bne.n	8102fe4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8102fc8:	4b05      	ldr	r3, [pc, #20]	@ (8102fe0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8102fca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8102fcc:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8102fd0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102fd4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8102fd8:	4a01      	ldr	r2, [pc, #4]	@ (8102fe0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8102fda:	430b      	orrs	r3, r1
 8102fdc:	6593      	str	r3, [r2, #88]	@ 0x58
 8102fde:	e005      	b.n	8102fec <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8102fe0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102fe4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8102fe8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8102fec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102ff4:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8102ff8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8102ffa:	2300      	movs	r3, #0
 8102ffc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8102ffe:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8103002:	460b      	mov	r3, r1
 8103004:	4313      	orrs	r3, r2
 8103006:	d03b      	beq.n	8103080 <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8103008:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810300c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8103010:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8103014:	d01f      	beq.n	8103056 <HAL_RCCEx_PeriphCLKConfig+0x1056>
 8103016:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 810301a:	d818      	bhi.n	810304e <HAL_RCCEx_PeriphCLKConfig+0x104e>
 810301c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8103020:	d003      	beq.n	810302a <HAL_RCCEx_PeriphCLKConfig+0x102a>
 8103022:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8103026:	d007      	beq.n	8103038 <HAL_RCCEx_PeriphCLKConfig+0x1038>
 8103028:	e011      	b.n	810304e <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810302a:	4b64      	ldr	r3, [pc, #400]	@ (81031bc <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 810302c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810302e:	4a63      	ldr	r2, [pc, #396]	@ (81031bc <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8103030:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8103034:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8103036:	e00f      	b.n	8103058 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8103038:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810303c:	3328      	adds	r3, #40	@ 0x28
 810303e:	2101      	movs	r1, #1
 8103040:	4618      	mov	r0, r3
 8103042:	f001 fc69 	bl	8104918 <RCCEx_PLL3_Config>
 8103046:	4603      	mov	r3, r0
 8103048:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 810304c:	e004      	b.n	8103058 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810304e:	2301      	movs	r3, #1
 8103050:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8103054:	e000      	b.n	8103058 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 8103056:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103058:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810305c:	2b00      	cmp	r3, #0
 810305e:	d10b      	bne.n	8103078 <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8103060:	4b56      	ldr	r3, [pc, #344]	@ (81031bc <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8103062:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103064:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8103068:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810306c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8103070:	4a52      	ldr	r2, [pc, #328]	@ (81031bc <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8103072:	430b      	orrs	r3, r1
 8103074:	6553      	str	r3, [r2, #84]	@ 0x54
 8103076:	e003      	b.n	8103080 <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103078:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810307c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8103080:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103088:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 810308c:	673b      	str	r3, [r7, #112]	@ 0x70
 810308e:	2300      	movs	r3, #0
 8103090:	677b      	str	r3, [r7, #116]	@ 0x74
 8103092:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8103096:	460b      	mov	r3, r1
 8103098:	4313      	orrs	r3, r2
 810309a:	d031      	beq.n	8103100 <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 810309c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81030a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81030a2:	2b00      	cmp	r3, #0
 81030a4:	d003      	beq.n	81030ae <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 81030a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 81030aa:	d007      	beq.n	81030bc <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 81030ac:	e011      	b.n	81030d2 <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81030ae:	4b43      	ldr	r3, [pc, #268]	@ (81031bc <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 81030b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81030b2:	4a42      	ldr	r2, [pc, #264]	@ (81031bc <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 81030b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81030b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 81030ba:	e00e      	b.n	81030da <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 81030bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81030c0:	3308      	adds	r3, #8
 81030c2:	2102      	movs	r1, #2
 81030c4:	4618      	mov	r0, r3
 81030c6:	f001 fb75 	bl	81047b4 <RCCEx_PLL2_Config>
 81030ca:	4603      	mov	r3, r0
 81030cc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 81030d0:	e003      	b.n	81030da <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 81030d2:	2301      	movs	r3, #1
 81030d4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 81030d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 81030da:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81030de:	2b00      	cmp	r3, #0
 81030e0:	d10a      	bne.n	81030f8 <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 81030e2:	4b36      	ldr	r3, [pc, #216]	@ (81031bc <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 81030e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81030e6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 81030ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81030ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81030f0:	4a32      	ldr	r2, [pc, #200]	@ (81031bc <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 81030f2:	430b      	orrs	r3, r1
 81030f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 81030f6:	e003      	b.n	8103100 <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81030f8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81030fc:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8103100:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103108:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 810310c:	66bb      	str	r3, [r7, #104]	@ 0x68
 810310e:	2300      	movs	r3, #0
 8103110:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8103112:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8103116:	460b      	mov	r3, r1
 8103118:	4313      	orrs	r3, r2
 810311a:	d00c      	beq.n	8103136 <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 810311c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103120:	3328      	adds	r3, #40	@ 0x28
 8103122:	2102      	movs	r1, #2
 8103124:	4618      	mov	r0, r3
 8103126:	f001 fbf7 	bl	8104918 <RCCEx_PLL3_Config>
 810312a:	4603      	mov	r3, r0
 810312c:	2b00      	cmp	r3, #0
 810312e:	d002      	beq.n	8103136 <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 8103130:	2301      	movs	r3, #1
 8103132:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8103136:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810313a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810313e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8103142:	663b      	str	r3, [r7, #96]	@ 0x60
 8103144:	2300      	movs	r3, #0
 8103146:	667b      	str	r3, [r7, #100]	@ 0x64
 8103148:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 810314c:	460b      	mov	r3, r1
 810314e:	4313      	orrs	r3, r2
 8103150:	d03a      	beq.n	81031c8 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 8103152:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103156:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 810315a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 810315e:	d018      	beq.n	8103192 <HAL_RCCEx_PeriphCLKConfig+0x1192>
 8103160:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8103164:	d811      	bhi.n	810318a <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8103166:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 810316a:	d014      	beq.n	8103196 <HAL_RCCEx_PeriphCLKConfig+0x1196>
 810316c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8103170:	d80b      	bhi.n	810318a <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8103172:	2b00      	cmp	r3, #0
 8103174:	d011      	beq.n	810319a <HAL_RCCEx_PeriphCLKConfig+0x119a>
 8103176:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810317a:	d106      	bne.n	810318a <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810317c:	4b0f      	ldr	r3, [pc, #60]	@ (81031bc <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 810317e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103180:	4a0e      	ldr	r2, [pc, #56]	@ (81031bc <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8103182:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8103186:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8103188:	e008      	b.n	810319c <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810318a:	2301      	movs	r3, #1
 810318c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8103190:	e004      	b.n	810319c <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8103192:	bf00      	nop
 8103194:	e002      	b.n	810319c <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8103196:	bf00      	nop
 8103198:	e000      	b.n	810319c <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 810319a:	bf00      	nop
    }

    if (ret == HAL_OK)
 810319c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81031a0:	2b00      	cmp	r3, #0
 81031a2:	d10d      	bne.n	81031c0 <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 81031a4:	4b05      	ldr	r3, [pc, #20]	@ (81031bc <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 81031a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81031a8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 81031ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81031b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 81031b4:	4a01      	ldr	r2, [pc, #4]	@ (81031bc <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 81031b6:	430b      	orrs	r3, r1
 81031b8:	6553      	str	r3, [r2, #84]	@ 0x54
 81031ba:	e005      	b.n	81031c8 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 81031bc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 81031c0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81031c4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 81031c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81031cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 81031d0:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 81031d4:	65bb      	str	r3, [r7, #88]	@ 0x58
 81031d6:	2300      	movs	r3, #0
 81031d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 81031da:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 81031de:	460b      	mov	r3, r1
 81031e0:	4313      	orrs	r3, r2
 81031e2:	d009      	beq.n	81031f8 <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 81031e4:	4baa      	ldr	r3, [pc, #680]	@ (8103490 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 81031e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81031e8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 81031ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81031f0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 81031f2:	4aa7      	ldr	r2, [pc, #668]	@ (8103490 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 81031f4:	430b      	orrs	r3, r1
 81031f6:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 81031f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81031fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103200:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8103204:	653b      	str	r3, [r7, #80]	@ 0x50
 8103206:	2300      	movs	r3, #0
 8103208:	657b      	str	r3, [r7, #84]	@ 0x54
 810320a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 810320e:	460b      	mov	r3, r1
 8103210:	4313      	orrs	r3, r2
 8103212:	d00a      	beq.n	810322a <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8103214:	4b9e      	ldr	r3, [pc, #632]	@ (8103490 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8103216:	691b      	ldr	r3, [r3, #16]
 8103218:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 810321c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103220:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8103224:	4a9a      	ldr	r2, [pc, #616]	@ (8103490 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8103226:	430b      	orrs	r3, r1
 8103228:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 810322a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810322e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103232:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8103236:	64bb      	str	r3, [r7, #72]	@ 0x48
 8103238:	2300      	movs	r3, #0
 810323a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 810323c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8103240:	460b      	mov	r3, r1
 8103242:	4313      	orrs	r3, r2
 8103244:	d009      	beq.n	810325a <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8103246:	4b92      	ldr	r3, [pc, #584]	@ (8103490 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8103248:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810324a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 810324e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103252:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8103254:	4a8e      	ldr	r2, [pc, #568]	@ (8103490 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8103256:	430b      	orrs	r3, r1
 8103258:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 810325a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810325e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103262:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8103266:	643b      	str	r3, [r7, #64]	@ 0x40
 8103268:	2300      	movs	r3, #0
 810326a:	647b      	str	r3, [r7, #68]	@ 0x44
 810326c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8103270:	460b      	mov	r3, r1
 8103272:	4313      	orrs	r3, r2
 8103274:	d00e      	beq.n	8103294 <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8103276:	4b86      	ldr	r3, [pc, #536]	@ (8103490 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8103278:	691b      	ldr	r3, [r3, #16]
 810327a:	4a85      	ldr	r2, [pc, #532]	@ (8103490 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810327c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8103280:	6113      	str	r3, [r2, #16]
 8103282:	4b83      	ldr	r3, [pc, #524]	@ (8103490 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8103284:	6919      	ldr	r1, [r3, #16]
 8103286:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810328a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 810328e:	4a80      	ldr	r2, [pc, #512]	@ (8103490 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8103290:	430b      	orrs	r3, r1
 8103292:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8103294:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103298:	e9d3 2300 	ldrd	r2, r3, [r3]
 810329c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 81032a0:	63bb      	str	r3, [r7, #56]	@ 0x38
 81032a2:	2300      	movs	r3, #0
 81032a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81032a6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 81032aa:	460b      	mov	r3, r1
 81032ac:	4313      	orrs	r3, r2
 81032ae:	d009      	beq.n	81032c4 <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 81032b0:	4b77      	ldr	r3, [pc, #476]	@ (8103490 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 81032b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81032b4:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 81032b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81032bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81032be:	4a74      	ldr	r2, [pc, #464]	@ (8103490 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 81032c0:	430b      	orrs	r3, r1
 81032c2:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 81032c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81032c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 81032cc:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 81032d0:	633b      	str	r3, [r7, #48]	@ 0x30
 81032d2:	2300      	movs	r3, #0
 81032d4:	637b      	str	r3, [r7, #52]	@ 0x34
 81032d6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 81032da:	460b      	mov	r3, r1
 81032dc:	4313      	orrs	r3, r2
 81032de:	d00a      	beq.n	81032f6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 81032e0:	4b6b      	ldr	r3, [pc, #428]	@ (8103490 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 81032e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81032e4:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 81032e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81032ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 81032f0:	4a67      	ldr	r2, [pc, #412]	@ (8103490 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 81032f2:	430b      	orrs	r3, r1
 81032f4:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 81032f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81032fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 81032fe:	2100      	movs	r1, #0
 8103300:	62b9      	str	r1, [r7, #40]	@ 0x28
 8103302:	f003 0301 	and.w	r3, r3, #1
 8103306:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8103308:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 810330c:	460b      	mov	r3, r1
 810330e:	4313      	orrs	r3, r2
 8103310:	d011      	beq.n	8103336 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8103312:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103316:	3308      	adds	r3, #8
 8103318:	2100      	movs	r1, #0
 810331a:	4618      	mov	r0, r3
 810331c:	f001 fa4a 	bl	81047b4 <RCCEx_PLL2_Config>
 8103320:	4603      	mov	r3, r0
 8103322:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8103326:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810332a:	2b00      	cmp	r3, #0
 810332c:	d003      	beq.n	8103336 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810332e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103332:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8103336:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810333a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810333e:	2100      	movs	r1, #0
 8103340:	6239      	str	r1, [r7, #32]
 8103342:	f003 0302 	and.w	r3, r3, #2
 8103346:	627b      	str	r3, [r7, #36]	@ 0x24
 8103348:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 810334c:	460b      	mov	r3, r1
 810334e:	4313      	orrs	r3, r2
 8103350:	d011      	beq.n	8103376 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8103352:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103356:	3308      	adds	r3, #8
 8103358:	2101      	movs	r1, #1
 810335a:	4618      	mov	r0, r3
 810335c:	f001 fa2a 	bl	81047b4 <RCCEx_PLL2_Config>
 8103360:	4603      	mov	r3, r0
 8103362:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8103366:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810336a:	2b00      	cmp	r3, #0
 810336c:	d003      	beq.n	8103376 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810336e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103372:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8103376:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810337a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810337e:	2100      	movs	r1, #0
 8103380:	61b9      	str	r1, [r7, #24]
 8103382:	f003 0304 	and.w	r3, r3, #4
 8103386:	61fb      	str	r3, [r7, #28]
 8103388:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 810338c:	460b      	mov	r3, r1
 810338e:	4313      	orrs	r3, r2
 8103390:	d011      	beq.n	81033b6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8103392:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103396:	3308      	adds	r3, #8
 8103398:	2102      	movs	r1, #2
 810339a:	4618      	mov	r0, r3
 810339c:	f001 fa0a 	bl	81047b4 <RCCEx_PLL2_Config>
 81033a0:	4603      	mov	r3, r0
 81033a2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 81033a6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81033aa:	2b00      	cmp	r3, #0
 81033ac:	d003      	beq.n	81033b6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 81033ae:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81033b2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 81033b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81033ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 81033be:	2100      	movs	r1, #0
 81033c0:	6139      	str	r1, [r7, #16]
 81033c2:	f003 0308 	and.w	r3, r3, #8
 81033c6:	617b      	str	r3, [r7, #20]
 81033c8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 81033cc:	460b      	mov	r3, r1
 81033ce:	4313      	orrs	r3, r2
 81033d0:	d011      	beq.n	81033f6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81033d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81033d6:	3328      	adds	r3, #40	@ 0x28
 81033d8:	2100      	movs	r1, #0
 81033da:	4618      	mov	r0, r3
 81033dc:	f001 fa9c 	bl	8104918 <RCCEx_PLL3_Config>
 81033e0:	4603      	mov	r3, r0
 81033e2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  
    if (ret == HAL_OK)
 81033e6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81033ea:	2b00      	cmp	r3, #0
 81033ec:	d003      	beq.n	81033f6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 81033ee:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81033f2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 81033f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81033fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 81033fe:	2100      	movs	r1, #0
 8103400:	60b9      	str	r1, [r7, #8]
 8103402:	f003 0310 	and.w	r3, r3, #16
 8103406:	60fb      	str	r3, [r7, #12]
 8103408:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 810340c:	460b      	mov	r3, r1
 810340e:	4313      	orrs	r3, r2
 8103410:	d011      	beq.n	8103436 <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8103412:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103416:	3328      	adds	r3, #40	@ 0x28
 8103418:	2101      	movs	r1, #1
 810341a:	4618      	mov	r0, r3
 810341c:	f001 fa7c 	bl	8104918 <RCCEx_PLL3_Config>
 8103420:	4603      	mov	r3, r0
 8103422:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8103426:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810342a:	2b00      	cmp	r3, #0
 810342c:	d003      	beq.n	8103436 <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810342e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103432:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8103436:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810343a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810343e:	2100      	movs	r1, #0
 8103440:	6039      	str	r1, [r7, #0]
 8103442:	f003 0320 	and.w	r3, r3, #32
 8103446:	607b      	str	r3, [r7, #4]
 8103448:	e9d7 1200 	ldrd	r1, r2, [r7]
 810344c:	460b      	mov	r3, r1
 810344e:	4313      	orrs	r3, r2
 8103450:	d011      	beq.n	8103476 <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8103452:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103456:	3328      	adds	r3, #40	@ 0x28
 8103458:	2102      	movs	r1, #2
 810345a:	4618      	mov	r0, r3
 810345c:	f001 fa5c 	bl	8104918 <RCCEx_PLL3_Config>
 8103460:	4603      	mov	r3, r0
 8103462:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8103466:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810346a:	2b00      	cmp	r3, #0
 810346c:	d003      	beq.n	8103476 <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810346e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8103472:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }

  if (status == HAL_OK)
 8103476:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 810347a:	2b00      	cmp	r3, #0
 810347c:	d101      	bne.n	8103482 <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 810347e:	2300      	movs	r3, #0
 8103480:	e000      	b.n	8103484 <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 8103482:	2301      	movs	r3, #1
}
 8103484:	4618      	mov	r0, r3
 8103486:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 810348a:	46bd      	mov	sp, r7
 810348c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8103490:	58024400 	.word	0x58024400

08103494 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8103494:	b580      	push	{r7, lr}
 8103496:	b090      	sub	sp, #64	@ 0x40
 8103498:	af00      	add	r7, sp, #0
 810349a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 810349e:	e9d7 2300 	ldrd	r2, r3, [r7]
 81034a2:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 81034a6:	430b      	orrs	r3, r1
 81034a8:	f040 8094 	bne.w	81035d4 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 81034ac:	4b9e      	ldr	r3, [pc, #632]	@ (8103728 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81034ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81034b0:	f003 0307 	and.w	r3, r3, #7
 81034b4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 81034b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81034b8:	2b04      	cmp	r3, #4
 81034ba:	f200 8087 	bhi.w	81035cc <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 81034be:	a201      	add	r2, pc, #4	@ (adr r2, 81034c4 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 81034c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81034c4:	081034d9 	.word	0x081034d9
 81034c8:	08103501 	.word	0x08103501
 81034cc:	08103529 	.word	0x08103529
 81034d0:	081035c5 	.word	0x081035c5
 81034d4:	08103551 	.word	0x08103551
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 81034d8:	4b93      	ldr	r3, [pc, #588]	@ (8103728 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81034da:	681b      	ldr	r3, [r3, #0]
 81034dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 81034e0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 81034e4:	d108      	bne.n	81034f8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 81034e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 81034ea:	4618      	mov	r0, r3
 81034ec:	f001 f810 	bl	8104510 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 81034f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81034f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81034f4:	f000 bd45 	b.w	8103f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81034f8:	2300      	movs	r3, #0
 81034fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81034fc:	f000 bd41 	b.w	8103f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8103500:	4b89      	ldr	r3, [pc, #548]	@ (8103728 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8103502:	681b      	ldr	r3, [r3, #0]
 8103504:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8103508:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 810350c:	d108      	bne.n	8103520 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810350e:	f107 0318 	add.w	r3, r7, #24
 8103512:	4618      	mov	r0, r3
 8103514:	f000 fd54 	bl	8103fc0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8103518:	69bb      	ldr	r3, [r7, #24]
 810351a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810351c:	f000 bd31 	b.w	8103f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8103520:	2300      	movs	r3, #0
 8103522:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8103524:	f000 bd2d 	b.w	8103f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8103528:	4b7f      	ldr	r3, [pc, #508]	@ (8103728 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810352a:	681b      	ldr	r3, [r3, #0]
 810352c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8103530:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8103534:	d108      	bne.n	8103548 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8103536:	f107 030c 	add.w	r3, r7, #12
 810353a:	4618      	mov	r0, r3
 810353c:	f000 fe94 	bl	8104268 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8103540:	68fb      	ldr	r3, [r7, #12]
 8103542:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8103544:	f000 bd1d 	b.w	8103f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8103548:	2300      	movs	r3, #0
 810354a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810354c:	f000 bd19 	b.w	8103f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8103550:	4b75      	ldr	r3, [pc, #468]	@ (8103728 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8103552:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8103554:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8103558:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 810355a:	4b73      	ldr	r3, [pc, #460]	@ (8103728 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810355c:	681b      	ldr	r3, [r3, #0]
 810355e:	f003 0304 	and.w	r3, r3, #4
 8103562:	2b04      	cmp	r3, #4
 8103564:	d10c      	bne.n	8103580 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8103566:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8103568:	2b00      	cmp	r3, #0
 810356a:	d109      	bne.n	8103580 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810356c:	4b6e      	ldr	r3, [pc, #440]	@ (8103728 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810356e:	681b      	ldr	r3, [r3, #0]
 8103570:	08db      	lsrs	r3, r3, #3
 8103572:	f003 0303 	and.w	r3, r3, #3
 8103576:	4a6d      	ldr	r2, [pc, #436]	@ (810372c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8103578:	fa22 f303 	lsr.w	r3, r2, r3
 810357c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810357e:	e01f      	b.n	81035c0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8103580:	4b69      	ldr	r3, [pc, #420]	@ (8103728 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8103582:	681b      	ldr	r3, [r3, #0]
 8103584:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8103588:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810358c:	d106      	bne.n	810359c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 810358e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8103590:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8103594:	d102      	bne.n	810359c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8103596:	4b66      	ldr	r3, [pc, #408]	@ (8103730 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8103598:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810359a:	e011      	b.n	81035c0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 810359c:	4b62      	ldr	r3, [pc, #392]	@ (8103728 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810359e:	681b      	ldr	r3, [r3, #0]
 81035a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 81035a4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81035a8:	d106      	bne.n	81035b8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 81035aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81035ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81035b0:	d102      	bne.n	81035b8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 81035b2:	4b60      	ldr	r3, [pc, #384]	@ (8103734 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 81035b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81035b6:	e003      	b.n	81035c0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 81035b8:	2300      	movs	r3, #0
 81035ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 81035bc:	f000 bce1 	b.w	8103f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 81035c0:	f000 bcdf 	b.w	8103f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 81035c4:	4b5c      	ldr	r3, [pc, #368]	@ (8103738 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 81035c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81035c8:	f000 bcdb 	b.w	8103f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 81035cc:	2300      	movs	r3, #0
 81035ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81035d0:	f000 bcd7 	b.w	8103f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 81035d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 81035d8:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 81035dc:	430b      	orrs	r3, r1
 81035de:	f040 80ad 	bne.w	810373c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 81035e2:	4b51      	ldr	r3, [pc, #324]	@ (8103728 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81035e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81035e6:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 81035ea:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 81035ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81035ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81035f2:	d056      	beq.n	81036a2 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 81035f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81035f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81035fa:	f200 8090 	bhi.w	810371e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 81035fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8103600:	2bc0      	cmp	r3, #192	@ 0xc0
 8103602:	f000 8088 	beq.w	8103716 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8103606:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8103608:	2bc0      	cmp	r3, #192	@ 0xc0
 810360a:	f200 8088 	bhi.w	810371e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 810360e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8103610:	2b80      	cmp	r3, #128	@ 0x80
 8103612:	d032      	beq.n	810367a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8103614:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8103616:	2b80      	cmp	r3, #128	@ 0x80
 8103618:	f200 8081 	bhi.w	810371e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 810361c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810361e:	2b00      	cmp	r3, #0
 8103620:	d003      	beq.n	810362a <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8103622:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8103624:	2b40      	cmp	r3, #64	@ 0x40
 8103626:	d014      	beq.n	8103652 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8103628:	e079      	b.n	810371e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 810362a:	4b3f      	ldr	r3, [pc, #252]	@ (8103728 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810362c:	681b      	ldr	r3, [r3, #0]
 810362e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8103632:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8103636:	d108      	bne.n	810364a <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8103638:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810363c:	4618      	mov	r0, r3
 810363e:	f000 ff67 	bl	8104510 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8103642:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8103644:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8103646:	f000 bc9c 	b.w	8103f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810364a:	2300      	movs	r3, #0
 810364c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810364e:	f000 bc98 	b.w	8103f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8103652:	4b35      	ldr	r3, [pc, #212]	@ (8103728 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8103654:	681b      	ldr	r3, [r3, #0]
 8103656:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810365a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 810365e:	d108      	bne.n	8103672 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8103660:	f107 0318 	add.w	r3, r7, #24
 8103664:	4618      	mov	r0, r3
 8103666:	f000 fcab 	bl	8103fc0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 810366a:	69bb      	ldr	r3, [r7, #24]
 810366c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810366e:	f000 bc88 	b.w	8103f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8103672:	2300      	movs	r3, #0
 8103674:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8103676:	f000 bc84 	b.w	8103f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 810367a:	4b2b      	ldr	r3, [pc, #172]	@ (8103728 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810367c:	681b      	ldr	r3, [r3, #0]
 810367e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8103682:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8103686:	d108      	bne.n	810369a <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8103688:	f107 030c 	add.w	r3, r7, #12
 810368c:	4618      	mov	r0, r3
 810368e:	f000 fdeb 	bl	8104268 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8103692:	68fb      	ldr	r3, [r7, #12]
 8103694:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8103696:	f000 bc74 	b.w	8103f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810369a:	2300      	movs	r3, #0
 810369c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810369e:	f000 bc70 	b.w	8103f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 81036a2:	4b21      	ldr	r3, [pc, #132]	@ (8103728 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81036a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81036a6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 81036aa:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 81036ac:	4b1e      	ldr	r3, [pc, #120]	@ (8103728 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81036ae:	681b      	ldr	r3, [r3, #0]
 81036b0:	f003 0304 	and.w	r3, r3, #4
 81036b4:	2b04      	cmp	r3, #4
 81036b6:	d10c      	bne.n	81036d2 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 81036b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81036ba:	2b00      	cmp	r3, #0
 81036bc:	d109      	bne.n	81036d2 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81036be:	4b1a      	ldr	r3, [pc, #104]	@ (8103728 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81036c0:	681b      	ldr	r3, [r3, #0]
 81036c2:	08db      	lsrs	r3, r3, #3
 81036c4:	f003 0303 	and.w	r3, r3, #3
 81036c8:	4a18      	ldr	r2, [pc, #96]	@ (810372c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 81036ca:	fa22 f303 	lsr.w	r3, r2, r3
 81036ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81036d0:	e01f      	b.n	8103712 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 81036d2:	4b15      	ldr	r3, [pc, #84]	@ (8103728 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81036d4:	681b      	ldr	r3, [r3, #0]
 81036d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 81036da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81036de:	d106      	bne.n	81036ee <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 81036e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81036e2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 81036e6:	d102      	bne.n	81036ee <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 81036e8:	4b11      	ldr	r3, [pc, #68]	@ (8103730 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 81036ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81036ec:	e011      	b.n	8103712 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 81036ee:	4b0e      	ldr	r3, [pc, #56]	@ (8103728 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81036f0:	681b      	ldr	r3, [r3, #0]
 81036f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 81036f6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81036fa:	d106      	bne.n	810370a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 81036fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81036fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8103702:	d102      	bne.n	810370a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8103704:	4b0b      	ldr	r3, [pc, #44]	@ (8103734 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8103706:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8103708:	e003      	b.n	8103712 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 810370a:	2300      	movs	r3, #0
 810370c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 810370e:	f000 bc38 	b.w	8103f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8103712:	f000 bc36 	b.w	8103f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8103716:	4b08      	ldr	r3, [pc, #32]	@ (8103738 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8103718:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810371a:	f000 bc32 	b.w	8103f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 810371e:	2300      	movs	r3, #0
 8103720:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8103722:	f000 bc2e 	b.w	8103f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8103726:	bf00      	nop
 8103728:	58024400 	.word	0x58024400
 810372c:	03d09000 	.word	0x03d09000
 8103730:	003d0900 	.word	0x003d0900
 8103734:	017d7840 	.word	0x017d7840
 8103738:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 810373c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8103740:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8103744:	430b      	orrs	r3, r1
 8103746:	f040 809c 	bne.w	8103882 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 810374a:	4b9e      	ldr	r3, [pc, #632]	@ (81039c4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810374c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810374e:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8103752:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8103754:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8103756:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 810375a:	d054      	beq.n	8103806 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 810375c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810375e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8103762:	f200 808b 	bhi.w	810387c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8103766:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8103768:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 810376c:	f000 8083 	beq.w	8103876 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8103770:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8103772:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8103776:	f200 8081 	bhi.w	810387c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 810377a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810377c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8103780:	d02f      	beq.n	81037e2 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8103782:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8103784:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8103788:	d878      	bhi.n	810387c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 810378a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810378c:	2b00      	cmp	r3, #0
 810378e:	d004      	beq.n	810379a <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8103790:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8103792:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8103796:	d012      	beq.n	81037be <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8103798:	e070      	b.n	810387c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 810379a:	4b8a      	ldr	r3, [pc, #552]	@ (81039c4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810379c:	681b      	ldr	r3, [r3, #0]
 810379e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 81037a2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 81037a6:	d107      	bne.n	81037b8 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 81037a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 81037ac:	4618      	mov	r0, r3
 81037ae:	f000 feaf 	bl	8104510 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 81037b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81037b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81037b6:	e3e4      	b.n	8103f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81037b8:	2300      	movs	r3, #0
 81037ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81037bc:	e3e1      	b.n	8103f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81037be:	4b81      	ldr	r3, [pc, #516]	@ (81039c4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81037c0:	681b      	ldr	r3, [r3, #0]
 81037c2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 81037c6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 81037ca:	d107      	bne.n	81037dc <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81037cc:	f107 0318 	add.w	r3, r7, #24
 81037d0:	4618      	mov	r0, r3
 81037d2:	f000 fbf5 	bl	8103fc0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 81037d6:	69bb      	ldr	r3, [r7, #24]
 81037d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81037da:	e3d2      	b.n	8103f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81037dc:	2300      	movs	r3, #0
 81037de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81037e0:	e3cf      	b.n	8103f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 81037e2:	4b78      	ldr	r3, [pc, #480]	@ (81039c4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81037e4:	681b      	ldr	r3, [r3, #0]
 81037e6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 81037ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81037ee:	d107      	bne.n	8103800 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81037f0:	f107 030c 	add.w	r3, r7, #12
 81037f4:	4618      	mov	r0, r3
 81037f6:	f000 fd37 	bl	8104268 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 81037fa:	68fb      	ldr	r3, [r7, #12]
 81037fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81037fe:	e3c0      	b.n	8103f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8103800:	2300      	movs	r3, #0
 8103802:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8103804:	e3bd      	b.n	8103f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8103806:	4b6f      	ldr	r3, [pc, #444]	@ (81039c4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8103808:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810380a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 810380e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8103810:	4b6c      	ldr	r3, [pc, #432]	@ (81039c4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8103812:	681b      	ldr	r3, [r3, #0]
 8103814:	f003 0304 	and.w	r3, r3, #4
 8103818:	2b04      	cmp	r3, #4
 810381a:	d10c      	bne.n	8103836 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 810381c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810381e:	2b00      	cmp	r3, #0
 8103820:	d109      	bne.n	8103836 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8103822:	4b68      	ldr	r3, [pc, #416]	@ (81039c4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8103824:	681b      	ldr	r3, [r3, #0]
 8103826:	08db      	lsrs	r3, r3, #3
 8103828:	f003 0303 	and.w	r3, r3, #3
 810382c:	4a66      	ldr	r2, [pc, #408]	@ (81039c8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 810382e:	fa22 f303 	lsr.w	r3, r2, r3
 8103832:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8103834:	e01e      	b.n	8103874 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8103836:	4b63      	ldr	r3, [pc, #396]	@ (81039c4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8103838:	681b      	ldr	r3, [r3, #0]
 810383a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810383e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8103842:	d106      	bne.n	8103852 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8103844:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8103846:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810384a:	d102      	bne.n	8103852 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 810384c:	4b5f      	ldr	r3, [pc, #380]	@ (81039cc <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 810384e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8103850:	e010      	b.n	8103874 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8103852:	4b5c      	ldr	r3, [pc, #368]	@ (81039c4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8103854:	681b      	ldr	r3, [r3, #0]
 8103856:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 810385a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810385e:	d106      	bne.n	810386e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8103860:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8103862:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8103866:	d102      	bne.n	810386e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8103868:	4b59      	ldr	r3, [pc, #356]	@ (81039d0 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 810386a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810386c:	e002      	b.n	8103874 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 810386e:	2300      	movs	r3, #0
 8103870:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8103872:	e386      	b.n	8103f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8103874:	e385      	b.n	8103f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8103876:	4b57      	ldr	r3, [pc, #348]	@ (81039d4 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8103878:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810387a:	e382      	b.n	8103f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 810387c:	2300      	movs	r3, #0
 810387e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8103880:	e37f      	b.n	8103f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8103882:	e9d7 2300 	ldrd	r2, r3, [r7]
 8103886:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 810388a:	430b      	orrs	r3, r1
 810388c:	f040 80a7 	bne.w	81039de <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8103890:	4b4c      	ldr	r3, [pc, #304]	@ (81039c4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8103892:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8103894:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8103898:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 810389a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810389c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 81038a0:	d055      	beq.n	810394e <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 81038a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81038a4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 81038a8:	f200 8096 	bhi.w	81039d8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 81038ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81038ae:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 81038b2:	f000 8084 	beq.w	81039be <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 81038b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81038b8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 81038bc:	f200 808c 	bhi.w	81039d8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 81038c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81038c2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 81038c6:	d030      	beq.n	810392a <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 81038c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81038ca:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 81038ce:	f200 8083 	bhi.w	81039d8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 81038d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81038d4:	2b00      	cmp	r3, #0
 81038d6:	d004      	beq.n	81038e2 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 81038d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81038da:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 81038de:	d012      	beq.n	8103906 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 81038e0:	e07a      	b.n	81039d8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 81038e2:	4b38      	ldr	r3, [pc, #224]	@ (81039c4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81038e4:	681b      	ldr	r3, [r3, #0]
 81038e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 81038ea:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 81038ee:	d107      	bne.n	8103900 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 81038f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 81038f4:	4618      	mov	r0, r3
 81038f6:	f000 fe0b 	bl	8104510 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 81038fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81038fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81038fe:	e340      	b.n	8103f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8103900:	2300      	movs	r3, #0
 8103902:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8103904:	e33d      	b.n	8103f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8103906:	4b2f      	ldr	r3, [pc, #188]	@ (81039c4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8103908:	681b      	ldr	r3, [r3, #0]
 810390a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810390e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8103912:	d107      	bne.n	8103924 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8103914:	f107 0318 	add.w	r3, r7, #24
 8103918:	4618      	mov	r0, r3
 810391a:	f000 fb51 	bl	8103fc0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 810391e:	69bb      	ldr	r3, [r7, #24]
 8103920:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8103922:	e32e      	b.n	8103f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8103924:	2300      	movs	r3, #0
 8103926:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8103928:	e32b      	b.n	8103f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 810392a:	4b26      	ldr	r3, [pc, #152]	@ (81039c4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810392c:	681b      	ldr	r3, [r3, #0]
 810392e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8103932:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8103936:	d107      	bne.n	8103948 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8103938:	f107 030c 	add.w	r3, r7, #12
 810393c:	4618      	mov	r0, r3
 810393e:	f000 fc93 	bl	8104268 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8103942:	68fb      	ldr	r3, [r7, #12]
 8103944:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8103946:	e31c      	b.n	8103f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8103948:	2300      	movs	r3, #0
 810394a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810394c:	e319      	b.n	8103f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 810394e:	4b1d      	ldr	r3, [pc, #116]	@ (81039c4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8103950:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8103952:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8103956:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8103958:	4b1a      	ldr	r3, [pc, #104]	@ (81039c4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810395a:	681b      	ldr	r3, [r3, #0]
 810395c:	f003 0304 	and.w	r3, r3, #4
 8103960:	2b04      	cmp	r3, #4
 8103962:	d10c      	bne.n	810397e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8103964:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8103966:	2b00      	cmp	r3, #0
 8103968:	d109      	bne.n	810397e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810396a:	4b16      	ldr	r3, [pc, #88]	@ (81039c4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810396c:	681b      	ldr	r3, [r3, #0]
 810396e:	08db      	lsrs	r3, r3, #3
 8103970:	f003 0303 	and.w	r3, r3, #3
 8103974:	4a14      	ldr	r2, [pc, #80]	@ (81039c8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8103976:	fa22 f303 	lsr.w	r3, r2, r3
 810397a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810397c:	e01e      	b.n	81039bc <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 810397e:	4b11      	ldr	r3, [pc, #68]	@ (81039c4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8103980:	681b      	ldr	r3, [r3, #0]
 8103982:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8103986:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810398a:	d106      	bne.n	810399a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 810398c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810398e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8103992:	d102      	bne.n	810399a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8103994:	4b0d      	ldr	r3, [pc, #52]	@ (81039cc <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8103996:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8103998:	e010      	b.n	81039bc <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 810399a:	4b0a      	ldr	r3, [pc, #40]	@ (81039c4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810399c:	681b      	ldr	r3, [r3, #0]
 810399e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 81039a2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81039a6:	d106      	bne.n	81039b6 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 81039a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81039aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81039ae:	d102      	bne.n	81039b6 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 81039b0:	4b07      	ldr	r3, [pc, #28]	@ (81039d0 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 81039b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81039b4:	e002      	b.n	81039bc <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 81039b6:	2300      	movs	r3, #0
 81039b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 81039ba:	e2e2      	b.n	8103f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 81039bc:	e2e1      	b.n	8103f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 81039be:	4b05      	ldr	r3, [pc, #20]	@ (81039d4 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 81039c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81039c2:	e2de      	b.n	8103f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 81039c4:	58024400 	.word	0x58024400
 81039c8:	03d09000 	.word	0x03d09000
 81039cc:	003d0900 	.word	0x003d0900
 81039d0:	017d7840 	.word	0x017d7840
 81039d4:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 81039d8:	2300      	movs	r3, #0
 81039da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81039dc:	e2d1      	b.n	8103f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 81039de:	e9d7 2300 	ldrd	r2, r3, [r7]
 81039e2:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 81039e6:	430b      	orrs	r3, r1
 81039e8:	f040 809c 	bne.w	8103b24 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 81039ec:	4b93      	ldr	r3, [pc, #588]	@ (8103c3c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81039ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81039f0:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 81039f4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 81039f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81039f8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 81039fc:	d054      	beq.n	8103aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 81039fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8103a00:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8103a04:	f200 808b 	bhi.w	8103b1e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8103a08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8103a0a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8103a0e:	f000 8083 	beq.w	8103b18 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8103a12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8103a14:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8103a18:	f200 8081 	bhi.w	8103b1e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8103a1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8103a1e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8103a22:	d02f      	beq.n	8103a84 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8103a24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8103a26:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8103a2a:	d878      	bhi.n	8103b1e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8103a2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8103a2e:	2b00      	cmp	r3, #0
 8103a30:	d004      	beq.n	8103a3c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8103a32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8103a34:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8103a38:	d012      	beq.n	8103a60 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8103a3a:	e070      	b.n	8103b1e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8103a3c:	4b7f      	ldr	r3, [pc, #508]	@ (8103c3c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8103a3e:	681b      	ldr	r3, [r3, #0]
 8103a40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8103a44:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8103a48:	d107      	bne.n	8103a5a <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8103a4a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8103a4e:	4618      	mov	r0, r3
 8103a50:	f000 fd5e 	bl	8104510 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8103a54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8103a56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8103a58:	e293      	b.n	8103f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8103a5a:	2300      	movs	r3, #0
 8103a5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8103a5e:	e290      	b.n	8103f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8103a60:	4b76      	ldr	r3, [pc, #472]	@ (8103c3c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8103a62:	681b      	ldr	r3, [r3, #0]
 8103a64:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8103a68:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8103a6c:	d107      	bne.n	8103a7e <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8103a6e:	f107 0318 	add.w	r3, r7, #24
 8103a72:	4618      	mov	r0, r3
 8103a74:	f000 faa4 	bl	8103fc0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8103a78:	69bb      	ldr	r3, [r7, #24]
 8103a7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8103a7c:	e281      	b.n	8103f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8103a7e:	2300      	movs	r3, #0
 8103a80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8103a82:	e27e      	b.n	8103f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8103a84:	4b6d      	ldr	r3, [pc, #436]	@ (8103c3c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8103a86:	681b      	ldr	r3, [r3, #0]
 8103a88:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8103a8c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8103a90:	d107      	bne.n	8103aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8103a92:	f107 030c 	add.w	r3, r7, #12
 8103a96:	4618      	mov	r0, r3
 8103a98:	f000 fbe6 	bl	8104268 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8103a9c:	68fb      	ldr	r3, [r7, #12]
 8103a9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8103aa0:	e26f      	b.n	8103f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8103aa2:	2300      	movs	r3, #0
 8103aa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8103aa6:	e26c      	b.n	8103f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8103aa8:	4b64      	ldr	r3, [pc, #400]	@ (8103c3c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8103aaa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8103aac:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8103ab0:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8103ab2:	4b62      	ldr	r3, [pc, #392]	@ (8103c3c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8103ab4:	681b      	ldr	r3, [r3, #0]
 8103ab6:	f003 0304 	and.w	r3, r3, #4
 8103aba:	2b04      	cmp	r3, #4
 8103abc:	d10c      	bne.n	8103ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8103abe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8103ac0:	2b00      	cmp	r3, #0
 8103ac2:	d109      	bne.n	8103ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8103ac4:	4b5d      	ldr	r3, [pc, #372]	@ (8103c3c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8103ac6:	681b      	ldr	r3, [r3, #0]
 8103ac8:	08db      	lsrs	r3, r3, #3
 8103aca:	f003 0303 	and.w	r3, r3, #3
 8103ace:	4a5c      	ldr	r2, [pc, #368]	@ (8103c40 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8103ad0:	fa22 f303 	lsr.w	r3, r2, r3
 8103ad4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8103ad6:	e01e      	b.n	8103b16 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8103ad8:	4b58      	ldr	r3, [pc, #352]	@ (8103c3c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8103ada:	681b      	ldr	r3, [r3, #0]
 8103adc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8103ae0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8103ae4:	d106      	bne.n	8103af4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8103ae6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8103ae8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8103aec:	d102      	bne.n	8103af4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8103aee:	4b55      	ldr	r3, [pc, #340]	@ (8103c44 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8103af0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8103af2:	e010      	b.n	8103b16 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8103af4:	4b51      	ldr	r3, [pc, #324]	@ (8103c3c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8103af6:	681b      	ldr	r3, [r3, #0]
 8103af8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8103afc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8103b00:	d106      	bne.n	8103b10 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8103b02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8103b04:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8103b08:	d102      	bne.n	8103b10 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8103b0a:	4b4f      	ldr	r3, [pc, #316]	@ (8103c48 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8103b0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8103b0e:	e002      	b.n	8103b16 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8103b10:	2300      	movs	r3, #0
 8103b12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8103b14:	e235      	b.n	8103f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8103b16:	e234      	b.n	8103f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8103b18:	4b4c      	ldr	r3, [pc, #304]	@ (8103c4c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8103b1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8103b1c:	e231      	b.n	8103f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8103b1e:	2300      	movs	r3, #0
 8103b20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8103b22:	e22e      	b.n	8103f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8103b24:	e9d7 2300 	ldrd	r2, r3, [r7]
 8103b28:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8103b2c:	430b      	orrs	r3, r1
 8103b2e:	f040 808f 	bne.w	8103c50 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8103b32:	4b42      	ldr	r3, [pc, #264]	@ (8103c3c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8103b34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8103b36:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8103b3a:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8103b3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8103b3e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8103b42:	d06b      	beq.n	8103c1c <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8103b44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8103b46:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8103b4a:	d874      	bhi.n	8103c36 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8103b4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8103b4e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8103b52:	d056      	beq.n	8103c02 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8103b54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8103b56:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8103b5a:	d86c      	bhi.n	8103c36 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8103b5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8103b5e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8103b62:	d03b      	beq.n	8103bdc <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8103b64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8103b66:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8103b6a:	d864      	bhi.n	8103c36 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8103b6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8103b6e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8103b72:	d021      	beq.n	8103bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8103b74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8103b76:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8103b7a:	d85c      	bhi.n	8103c36 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8103b7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8103b7e:	2b00      	cmp	r3, #0
 8103b80:	d004      	beq.n	8103b8c <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8103b82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8103b84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8103b88:	d004      	beq.n	8103b94 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8103b8a:	e054      	b.n	8103c36 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8103b8c:	f7fe fa22 	bl	8101fd4 <HAL_RCC_GetPCLK1Freq>
 8103b90:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8103b92:	e1f6      	b.n	8103f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8103b94:	4b29      	ldr	r3, [pc, #164]	@ (8103c3c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8103b96:	681b      	ldr	r3, [r3, #0]
 8103b98:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8103b9c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8103ba0:	d107      	bne.n	8103bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8103ba2:	f107 0318 	add.w	r3, r7, #24
 8103ba6:	4618      	mov	r0, r3
 8103ba8:	f000 fa0a 	bl	8103fc0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8103bac:	69fb      	ldr	r3, [r7, #28]
 8103bae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8103bb0:	e1e7      	b.n	8103f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8103bb2:	2300      	movs	r3, #0
 8103bb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8103bb6:	e1e4      	b.n	8103f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8103bb8:	4b20      	ldr	r3, [pc, #128]	@ (8103c3c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8103bba:	681b      	ldr	r3, [r3, #0]
 8103bbc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8103bc0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8103bc4:	d107      	bne.n	8103bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8103bc6:	f107 030c 	add.w	r3, r7, #12
 8103bca:	4618      	mov	r0, r3
 8103bcc:	f000 fb4c 	bl	8104268 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8103bd0:	693b      	ldr	r3, [r7, #16]
 8103bd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8103bd4:	e1d5      	b.n	8103f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8103bd6:	2300      	movs	r3, #0
 8103bd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8103bda:	e1d2      	b.n	8103f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8103bdc:	4b17      	ldr	r3, [pc, #92]	@ (8103c3c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8103bde:	681b      	ldr	r3, [r3, #0]
 8103be0:	f003 0304 	and.w	r3, r3, #4
 8103be4:	2b04      	cmp	r3, #4
 8103be6:	d109      	bne.n	8103bfc <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8103be8:	4b14      	ldr	r3, [pc, #80]	@ (8103c3c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8103bea:	681b      	ldr	r3, [r3, #0]
 8103bec:	08db      	lsrs	r3, r3, #3
 8103bee:	f003 0303 	and.w	r3, r3, #3
 8103bf2:	4a13      	ldr	r2, [pc, #76]	@ (8103c40 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8103bf4:	fa22 f303 	lsr.w	r3, r2, r3
 8103bf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8103bfa:	e1c2      	b.n	8103f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8103bfc:	2300      	movs	r3, #0
 8103bfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8103c00:	e1bf      	b.n	8103f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8103c02:	4b0e      	ldr	r3, [pc, #56]	@ (8103c3c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8103c04:	681b      	ldr	r3, [r3, #0]
 8103c06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8103c0a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8103c0e:	d102      	bne.n	8103c16 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8103c10:	4b0c      	ldr	r3, [pc, #48]	@ (8103c44 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8103c12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8103c14:	e1b5      	b.n	8103f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8103c16:	2300      	movs	r3, #0
 8103c18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8103c1a:	e1b2      	b.n	8103f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8103c1c:	4b07      	ldr	r3, [pc, #28]	@ (8103c3c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8103c1e:	681b      	ldr	r3, [r3, #0]
 8103c20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8103c24:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8103c28:	d102      	bne.n	8103c30 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8103c2a:	4b07      	ldr	r3, [pc, #28]	@ (8103c48 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8103c2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8103c2e:	e1a8      	b.n	8103f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8103c30:	2300      	movs	r3, #0
 8103c32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8103c34:	e1a5      	b.n	8103f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8103c36:	2300      	movs	r3, #0
 8103c38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8103c3a:	e1a2      	b.n	8103f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8103c3c:	58024400 	.word	0x58024400
 8103c40:	03d09000 	.word	0x03d09000
 8103c44:	003d0900 	.word	0x003d0900
 8103c48:	017d7840 	.word	0x017d7840
 8103c4c:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8103c50:	e9d7 2300 	ldrd	r2, r3, [r7]
 8103c54:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8103c58:	430b      	orrs	r3, r1
 8103c5a:	d173      	bne.n	8103d44 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8103c5c:	4b9c      	ldr	r3, [pc, #624]	@ (8103ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8103c5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8103c60:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8103c64:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8103c66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8103c68:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8103c6c:	d02f      	beq.n	8103cce <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8103c6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8103c70:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8103c74:	d863      	bhi.n	8103d3e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8103c76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8103c78:	2b00      	cmp	r3, #0
 8103c7a:	d004      	beq.n	8103c86 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8103c7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8103c7e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8103c82:	d012      	beq.n	8103caa <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8103c84:	e05b      	b.n	8103d3e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8103c86:	4b92      	ldr	r3, [pc, #584]	@ (8103ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8103c88:	681b      	ldr	r3, [r3, #0]
 8103c8a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8103c8e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8103c92:	d107      	bne.n	8103ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8103c94:	f107 0318 	add.w	r3, r7, #24
 8103c98:	4618      	mov	r0, r3
 8103c9a:	f000 f991 	bl	8103fc0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8103c9e:	69bb      	ldr	r3, [r7, #24]
 8103ca0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8103ca2:	e16e      	b.n	8103f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8103ca4:	2300      	movs	r3, #0
 8103ca6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8103ca8:	e16b      	b.n	8103f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8103caa:	4b89      	ldr	r3, [pc, #548]	@ (8103ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8103cac:	681b      	ldr	r3, [r3, #0]
 8103cae:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8103cb2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8103cb6:	d107      	bne.n	8103cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8103cb8:	f107 030c 	add.w	r3, r7, #12
 8103cbc:	4618      	mov	r0, r3
 8103cbe:	f000 fad3 	bl	8104268 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8103cc2:	697b      	ldr	r3, [r7, #20]
 8103cc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8103cc6:	e15c      	b.n	8103f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8103cc8:	2300      	movs	r3, #0
 8103cca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8103ccc:	e159      	b.n	8103f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8103cce:	4b80      	ldr	r3, [pc, #512]	@ (8103ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8103cd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8103cd2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8103cd6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8103cd8:	4b7d      	ldr	r3, [pc, #500]	@ (8103ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8103cda:	681b      	ldr	r3, [r3, #0]
 8103cdc:	f003 0304 	and.w	r3, r3, #4
 8103ce0:	2b04      	cmp	r3, #4
 8103ce2:	d10c      	bne.n	8103cfe <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8103ce4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8103ce6:	2b00      	cmp	r3, #0
 8103ce8:	d109      	bne.n	8103cfe <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8103cea:	4b79      	ldr	r3, [pc, #484]	@ (8103ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8103cec:	681b      	ldr	r3, [r3, #0]
 8103cee:	08db      	lsrs	r3, r3, #3
 8103cf0:	f003 0303 	and.w	r3, r3, #3
 8103cf4:	4a77      	ldr	r2, [pc, #476]	@ (8103ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8103cf6:	fa22 f303 	lsr.w	r3, r2, r3
 8103cfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8103cfc:	e01e      	b.n	8103d3c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8103cfe:	4b74      	ldr	r3, [pc, #464]	@ (8103ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8103d00:	681b      	ldr	r3, [r3, #0]
 8103d02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8103d06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8103d0a:	d106      	bne.n	8103d1a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8103d0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8103d0e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8103d12:	d102      	bne.n	8103d1a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8103d14:	4b70      	ldr	r3, [pc, #448]	@ (8103ed8 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8103d16:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8103d18:	e010      	b.n	8103d3c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8103d1a:	4b6d      	ldr	r3, [pc, #436]	@ (8103ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8103d1c:	681b      	ldr	r3, [r3, #0]
 8103d1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8103d22:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8103d26:	d106      	bne.n	8103d36 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8103d28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8103d2a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8103d2e:	d102      	bne.n	8103d36 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8103d30:	4b6a      	ldr	r3, [pc, #424]	@ (8103edc <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8103d32:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8103d34:	e002      	b.n	8103d3c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8103d36:	2300      	movs	r3, #0
 8103d38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8103d3a:	e122      	b.n	8103f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8103d3c:	e121      	b.n	8103f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8103d3e:	2300      	movs	r3, #0
 8103d40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8103d42:	e11e      	b.n	8103f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8103d44:	e9d7 2300 	ldrd	r2, r3, [r7]
 8103d48:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8103d4c:	430b      	orrs	r3, r1
 8103d4e:	d133      	bne.n	8103db8 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8103d50:	4b5f      	ldr	r3, [pc, #380]	@ (8103ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8103d52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8103d54:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8103d58:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8103d5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8103d5c:	2b00      	cmp	r3, #0
 8103d5e:	d004      	beq.n	8103d6a <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8103d60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8103d62:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8103d66:	d012      	beq.n	8103d8e <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8103d68:	e023      	b.n	8103db2 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8103d6a:	4b59      	ldr	r3, [pc, #356]	@ (8103ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8103d6c:	681b      	ldr	r3, [r3, #0]
 8103d6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8103d72:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8103d76:	d107      	bne.n	8103d88 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8103d78:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8103d7c:	4618      	mov	r0, r3
 8103d7e:	f000 fbc7 	bl	8104510 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8103d82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8103d84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8103d86:	e0fc      	b.n	8103f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8103d88:	2300      	movs	r3, #0
 8103d8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8103d8c:	e0f9      	b.n	8103f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8103d8e:	4b50      	ldr	r3, [pc, #320]	@ (8103ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8103d90:	681b      	ldr	r3, [r3, #0]
 8103d92:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8103d96:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8103d9a:	d107      	bne.n	8103dac <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8103d9c:	f107 0318 	add.w	r3, r7, #24
 8103da0:	4618      	mov	r0, r3
 8103da2:	f000 f90d 	bl	8103fc0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8103da6:	6a3b      	ldr	r3, [r7, #32]
 8103da8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8103daa:	e0ea      	b.n	8103f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8103dac:	2300      	movs	r3, #0
 8103dae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8103db0:	e0e7      	b.n	8103f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8103db2:	2300      	movs	r3, #0
 8103db4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8103db6:	e0e4      	b.n	8103f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8103db8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8103dbc:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8103dc0:	430b      	orrs	r3, r1
 8103dc2:	f040 808d 	bne.w	8103ee0 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8103dc6:	4b42      	ldr	r3, [pc, #264]	@ (8103ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8103dc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8103dca:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8103dce:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8103dd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8103dd2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8103dd6:	d06b      	beq.n	8103eb0 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8103dd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8103dda:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8103dde:	d874      	bhi.n	8103eca <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8103de0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8103de2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8103de6:	d056      	beq.n	8103e96 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8103de8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8103dea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8103dee:	d86c      	bhi.n	8103eca <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8103df0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8103df2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8103df6:	d03b      	beq.n	8103e70 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8103df8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8103dfa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8103dfe:	d864      	bhi.n	8103eca <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8103e00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8103e02:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8103e06:	d021      	beq.n	8103e4c <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8103e08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8103e0a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8103e0e:	d85c      	bhi.n	8103eca <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8103e10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8103e12:	2b00      	cmp	r3, #0
 8103e14:	d004      	beq.n	8103e20 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8103e16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8103e18:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8103e1c:	d004      	beq.n	8103e28 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8103e1e:	e054      	b.n	8103eca <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8103e20:	f000 f8b8 	bl	8103f94 <HAL_RCCEx_GetD3PCLK1Freq>
 8103e24:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8103e26:	e0ac      	b.n	8103f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8103e28:	4b29      	ldr	r3, [pc, #164]	@ (8103ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8103e2a:	681b      	ldr	r3, [r3, #0]
 8103e2c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8103e30:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8103e34:	d107      	bne.n	8103e46 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8103e36:	f107 0318 	add.w	r3, r7, #24
 8103e3a:	4618      	mov	r0, r3
 8103e3c:	f000 f8c0 	bl	8103fc0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8103e40:	69fb      	ldr	r3, [r7, #28]
 8103e42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8103e44:	e09d      	b.n	8103f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8103e46:	2300      	movs	r3, #0
 8103e48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8103e4a:	e09a      	b.n	8103f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8103e4c:	4b20      	ldr	r3, [pc, #128]	@ (8103ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8103e4e:	681b      	ldr	r3, [r3, #0]
 8103e50:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8103e54:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8103e58:	d107      	bne.n	8103e6a <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8103e5a:	f107 030c 	add.w	r3, r7, #12
 8103e5e:	4618      	mov	r0, r3
 8103e60:	f000 fa02 	bl	8104268 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8103e64:	693b      	ldr	r3, [r7, #16]
 8103e66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8103e68:	e08b      	b.n	8103f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8103e6a:	2300      	movs	r3, #0
 8103e6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8103e6e:	e088      	b.n	8103f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8103e70:	4b17      	ldr	r3, [pc, #92]	@ (8103ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8103e72:	681b      	ldr	r3, [r3, #0]
 8103e74:	f003 0304 	and.w	r3, r3, #4
 8103e78:	2b04      	cmp	r3, #4
 8103e7a:	d109      	bne.n	8103e90 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8103e7c:	4b14      	ldr	r3, [pc, #80]	@ (8103ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8103e7e:	681b      	ldr	r3, [r3, #0]
 8103e80:	08db      	lsrs	r3, r3, #3
 8103e82:	f003 0303 	and.w	r3, r3, #3
 8103e86:	4a13      	ldr	r2, [pc, #76]	@ (8103ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8103e88:	fa22 f303 	lsr.w	r3, r2, r3
 8103e8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8103e8e:	e078      	b.n	8103f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8103e90:	2300      	movs	r3, #0
 8103e92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8103e94:	e075      	b.n	8103f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8103e96:	4b0e      	ldr	r3, [pc, #56]	@ (8103ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8103e98:	681b      	ldr	r3, [r3, #0]
 8103e9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8103e9e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8103ea2:	d102      	bne.n	8103eaa <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8103ea4:	4b0c      	ldr	r3, [pc, #48]	@ (8103ed8 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8103ea6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8103ea8:	e06b      	b.n	8103f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8103eaa:	2300      	movs	r3, #0
 8103eac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8103eae:	e068      	b.n	8103f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8103eb0:	4b07      	ldr	r3, [pc, #28]	@ (8103ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8103eb2:	681b      	ldr	r3, [r3, #0]
 8103eb4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8103eb8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8103ebc:	d102      	bne.n	8103ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8103ebe:	4b07      	ldr	r3, [pc, #28]	@ (8103edc <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8103ec0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8103ec2:	e05e      	b.n	8103f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8103ec4:	2300      	movs	r3, #0
 8103ec6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8103ec8:	e05b      	b.n	8103f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8103eca:	2300      	movs	r3, #0
 8103ecc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8103ece:	e058      	b.n	8103f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8103ed0:	58024400 	.word	0x58024400
 8103ed4:	03d09000 	.word	0x03d09000
 8103ed8:	003d0900 	.word	0x003d0900
 8103edc:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8103ee0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8103ee4:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8103ee8:	430b      	orrs	r3, r1
 8103eea:	d148      	bne.n	8103f7e <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8103eec:	4b27      	ldr	r3, [pc, #156]	@ (8103f8c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8103eee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8103ef0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8103ef4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8103ef6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8103ef8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8103efc:	d02a      	beq.n	8103f54 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8103efe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8103f00:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8103f04:	d838      	bhi.n	8103f78 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8103f06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8103f08:	2b00      	cmp	r3, #0
 8103f0a:	d004      	beq.n	8103f16 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8103f0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8103f0e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8103f12:	d00d      	beq.n	8103f30 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8103f14:	e030      	b.n	8103f78 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8103f16:	4b1d      	ldr	r3, [pc, #116]	@ (8103f8c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8103f18:	681b      	ldr	r3, [r3, #0]
 8103f1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8103f1e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8103f22:	d102      	bne.n	8103f2a <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8103f24:	4b1a      	ldr	r3, [pc, #104]	@ (8103f90 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8103f26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8103f28:	e02b      	b.n	8103f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8103f2a:	2300      	movs	r3, #0
 8103f2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8103f2e:	e028      	b.n	8103f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8103f30:	4b16      	ldr	r3, [pc, #88]	@ (8103f8c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8103f32:	681b      	ldr	r3, [r3, #0]
 8103f34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8103f38:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8103f3c:	d107      	bne.n	8103f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8103f3e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8103f42:	4618      	mov	r0, r3
 8103f44:	f000 fae4 	bl	8104510 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8103f48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8103f4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8103f4c:	e019      	b.n	8103f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8103f4e:	2300      	movs	r3, #0
 8103f50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8103f52:	e016      	b.n	8103f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8103f54:	4b0d      	ldr	r3, [pc, #52]	@ (8103f8c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8103f56:	681b      	ldr	r3, [r3, #0]
 8103f58:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8103f5c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8103f60:	d107      	bne.n	8103f72 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8103f62:	f107 0318 	add.w	r3, r7, #24
 8103f66:	4618      	mov	r0, r3
 8103f68:	f000 f82a 	bl	8103fc0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8103f6c:	69fb      	ldr	r3, [r7, #28]
 8103f6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8103f70:	e007      	b.n	8103f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8103f72:	2300      	movs	r3, #0
 8103f74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8103f76:	e004      	b.n	8103f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8103f78:	2300      	movs	r3, #0
 8103f7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8103f7c:	e001      	b.n	8103f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8103f7e:	2300      	movs	r3, #0
 8103f80:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8103f82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8103f84:	4618      	mov	r0, r3
 8103f86:	3740      	adds	r7, #64	@ 0x40
 8103f88:	46bd      	mov	sp, r7
 8103f8a:	bd80      	pop	{r7, pc}
 8103f8c:	58024400 	.word	0x58024400
 8103f90:	017d7840 	.word	0x017d7840

08103f94 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8103f94:	b580      	push	{r7, lr}
 8103f96:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8103f98:	f7fd ffea 	bl	8101f70 <HAL_RCC_GetHCLKFreq>
 8103f9c:	4602      	mov	r2, r0
 8103f9e:	4b06      	ldr	r3, [pc, #24]	@ (8103fb8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8103fa0:	6a1b      	ldr	r3, [r3, #32]
 8103fa2:	091b      	lsrs	r3, r3, #4
 8103fa4:	f003 0307 	and.w	r3, r3, #7
 8103fa8:	4904      	ldr	r1, [pc, #16]	@ (8103fbc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8103faa:	5ccb      	ldrb	r3, [r1, r3]
 8103fac:	f003 031f 	and.w	r3, r3, #31
 8103fb0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8103fb4:	4618      	mov	r0, r3
 8103fb6:	bd80      	pop	{r7, pc}
 8103fb8:	58024400 	.word	0x58024400
 8103fbc:	08104aec 	.word	0x08104aec

08103fc0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8103fc0:	b480      	push	{r7}
 8103fc2:	b089      	sub	sp, #36	@ 0x24
 8103fc4:	af00      	add	r7, sp, #0
 8103fc6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8103fc8:	4ba1      	ldr	r3, [pc, #644]	@ (8104250 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103fca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8103fcc:	f003 0303 	and.w	r3, r3, #3
 8103fd0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8103fd2:	4b9f      	ldr	r3, [pc, #636]	@ (8104250 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103fd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8103fd6:	0b1b      	lsrs	r3, r3, #12
 8103fd8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8103fdc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8103fde:	4b9c      	ldr	r3, [pc, #624]	@ (8104250 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103fe0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103fe2:	091b      	lsrs	r3, r3, #4
 8103fe4:	f003 0301 	and.w	r3, r3, #1
 8103fe8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8103fea:	4b99      	ldr	r3, [pc, #612]	@ (8104250 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103fec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8103fee:	08db      	lsrs	r3, r3, #3
 8103ff0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8103ff4:	693a      	ldr	r2, [r7, #16]
 8103ff6:	fb02 f303 	mul.w	r3, r2, r3
 8103ffa:	ee07 3a90 	vmov	s15, r3
 8103ffe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104002:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8104006:	697b      	ldr	r3, [r7, #20]
 8104008:	2b00      	cmp	r3, #0
 810400a:	f000 8111 	beq.w	8104230 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 810400e:	69bb      	ldr	r3, [r7, #24]
 8104010:	2b02      	cmp	r3, #2
 8104012:	f000 8083 	beq.w	810411c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8104016:	69bb      	ldr	r3, [r7, #24]
 8104018:	2b02      	cmp	r3, #2
 810401a:	f200 80a1 	bhi.w	8104160 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 810401e:	69bb      	ldr	r3, [r7, #24]
 8104020:	2b00      	cmp	r3, #0
 8104022:	d003      	beq.n	810402c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8104024:	69bb      	ldr	r3, [r7, #24]
 8104026:	2b01      	cmp	r3, #1
 8104028:	d056      	beq.n	81040d8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 810402a:	e099      	b.n	8104160 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810402c:	4b88      	ldr	r3, [pc, #544]	@ (8104250 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810402e:	681b      	ldr	r3, [r3, #0]
 8104030:	f003 0320 	and.w	r3, r3, #32
 8104034:	2b00      	cmp	r3, #0
 8104036:	d02d      	beq.n	8104094 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8104038:	4b85      	ldr	r3, [pc, #532]	@ (8104250 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810403a:	681b      	ldr	r3, [r3, #0]
 810403c:	08db      	lsrs	r3, r3, #3
 810403e:	f003 0303 	and.w	r3, r3, #3
 8104042:	4a84      	ldr	r2, [pc, #528]	@ (8104254 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8104044:	fa22 f303 	lsr.w	r3, r2, r3
 8104048:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 810404a:	68bb      	ldr	r3, [r7, #8]
 810404c:	ee07 3a90 	vmov	s15, r3
 8104050:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104054:	697b      	ldr	r3, [r7, #20]
 8104056:	ee07 3a90 	vmov	s15, r3
 810405a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810405e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104062:	4b7b      	ldr	r3, [pc, #492]	@ (8104250 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104064:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8104066:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810406a:	ee07 3a90 	vmov	s15, r3
 810406e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104072:	ed97 6a03 	vldr	s12, [r7, #12]
 8104076:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8104258 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810407a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810407e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104082:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8104086:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810408a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810408e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8104092:	e087      	b.n	81041a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8104094:	697b      	ldr	r3, [r7, #20]
 8104096:	ee07 3a90 	vmov	s15, r3
 810409a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810409e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 810425c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 81040a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81040a6:	4b6a      	ldr	r3, [pc, #424]	@ (8104250 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81040a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81040aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81040ae:	ee07 3a90 	vmov	s15, r3
 81040b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81040b6:	ed97 6a03 	vldr	s12, [r7, #12]
 81040ba:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8104258 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81040be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81040c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81040c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81040ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81040ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 81040d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81040d6:	e065      	b.n	81041a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 81040d8:	697b      	ldr	r3, [r7, #20]
 81040da:	ee07 3a90 	vmov	s15, r3
 81040de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81040e2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8104260 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 81040e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81040ea:	4b59      	ldr	r3, [pc, #356]	@ (8104250 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81040ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81040ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81040f2:	ee07 3a90 	vmov	s15, r3
 81040f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81040fa:	ed97 6a03 	vldr	s12, [r7, #12]
 81040fe:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8104258 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8104102:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104106:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810410a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810410e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104112:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104116:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810411a:	e043      	b.n	81041a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 810411c:	697b      	ldr	r3, [r7, #20]
 810411e:	ee07 3a90 	vmov	s15, r3
 8104122:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104126:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8104264 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 810412a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810412e:	4b48      	ldr	r3, [pc, #288]	@ (8104250 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104130:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8104132:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104136:	ee07 3a90 	vmov	s15, r3
 810413a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810413e:	ed97 6a03 	vldr	s12, [r7, #12]
 8104142:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8104258 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8104146:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810414a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810414e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8104152:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104156:	ee67 7a27 	vmul.f32	s15, s14, s15
 810415a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810415e:	e021      	b.n	81041a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8104160:	697b      	ldr	r3, [r7, #20]
 8104162:	ee07 3a90 	vmov	s15, r3
 8104166:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810416a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8104260 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 810416e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104172:	4b37      	ldr	r3, [pc, #220]	@ (8104250 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104174:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8104176:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810417a:	ee07 3a90 	vmov	s15, r3
 810417e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104182:	ed97 6a03 	vldr	s12, [r7, #12]
 8104186:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8104258 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810418a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810418e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104192:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8104196:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810419a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810419e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81041a2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 81041a4:	4b2a      	ldr	r3, [pc, #168]	@ (8104250 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81041a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81041a8:	0a5b      	lsrs	r3, r3, #9
 81041aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 81041ae:	ee07 3a90 	vmov	s15, r3
 81041b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81041b6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 81041ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 81041be:	edd7 6a07 	vldr	s13, [r7, #28]
 81041c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81041c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81041ca:	ee17 2a90 	vmov	r2, s15
 81041ce:	687b      	ldr	r3, [r7, #4]
 81041d0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 81041d2:	4b1f      	ldr	r3, [pc, #124]	@ (8104250 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81041d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81041d6:	0c1b      	lsrs	r3, r3, #16
 81041d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 81041dc:	ee07 3a90 	vmov	s15, r3
 81041e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81041e4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 81041e8:	ee37 7a87 	vadd.f32	s14, s15, s14
 81041ec:	edd7 6a07 	vldr	s13, [r7, #28]
 81041f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81041f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81041f8:	ee17 2a90 	vmov	r2, s15
 81041fc:	687b      	ldr	r3, [r7, #4]
 81041fe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8104200:	4b13      	ldr	r3, [pc, #76]	@ (8104250 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104202:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8104204:	0e1b      	lsrs	r3, r3, #24
 8104206:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810420a:	ee07 3a90 	vmov	s15, r3
 810420e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104212:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8104216:	ee37 7a87 	vadd.f32	s14, s15, s14
 810421a:	edd7 6a07 	vldr	s13, [r7, #28]
 810421e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8104222:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8104226:	ee17 2a90 	vmov	r2, s15
 810422a:	687b      	ldr	r3, [r7, #4]
 810422c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 810422e:	e008      	b.n	8104242 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8104230:	687b      	ldr	r3, [r7, #4]
 8104232:	2200      	movs	r2, #0
 8104234:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8104236:	687b      	ldr	r3, [r7, #4]
 8104238:	2200      	movs	r2, #0
 810423a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 810423c:	687b      	ldr	r3, [r7, #4]
 810423e:	2200      	movs	r2, #0
 8104240:	609a      	str	r2, [r3, #8]
}
 8104242:	bf00      	nop
 8104244:	3724      	adds	r7, #36	@ 0x24
 8104246:	46bd      	mov	sp, r7
 8104248:	f85d 7b04 	ldr.w	r7, [sp], #4
 810424c:	4770      	bx	lr
 810424e:	bf00      	nop
 8104250:	58024400 	.word	0x58024400
 8104254:	03d09000 	.word	0x03d09000
 8104258:	46000000 	.word	0x46000000
 810425c:	4c742400 	.word	0x4c742400
 8104260:	4a742400 	.word	0x4a742400
 8104264:	4bbebc20 	.word	0x4bbebc20

08104268 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8104268:	b480      	push	{r7}
 810426a:	b089      	sub	sp, #36	@ 0x24
 810426c:	af00      	add	r7, sp, #0
 810426e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8104270:	4ba1      	ldr	r3, [pc, #644]	@ (81044f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104272:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8104274:	f003 0303 	and.w	r3, r3, #3
 8104278:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 810427a:	4b9f      	ldr	r3, [pc, #636]	@ (81044f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810427c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810427e:	0d1b      	lsrs	r3, r3, #20
 8104280:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8104284:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8104286:	4b9c      	ldr	r3, [pc, #624]	@ (81044f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104288:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810428a:	0a1b      	lsrs	r3, r3, #8
 810428c:	f003 0301 	and.w	r3, r3, #1
 8104290:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8104292:	4b99      	ldr	r3, [pc, #612]	@ (81044f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104294:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8104296:	08db      	lsrs	r3, r3, #3
 8104298:	f3c3 030c 	ubfx	r3, r3, #0, #13
 810429c:	693a      	ldr	r2, [r7, #16]
 810429e:	fb02 f303 	mul.w	r3, r2, r3
 81042a2:	ee07 3a90 	vmov	s15, r3
 81042a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81042aa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 81042ae:	697b      	ldr	r3, [r7, #20]
 81042b0:	2b00      	cmp	r3, #0
 81042b2:	f000 8111 	beq.w	81044d8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 81042b6:	69bb      	ldr	r3, [r7, #24]
 81042b8:	2b02      	cmp	r3, #2
 81042ba:	f000 8083 	beq.w	81043c4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 81042be:	69bb      	ldr	r3, [r7, #24]
 81042c0:	2b02      	cmp	r3, #2
 81042c2:	f200 80a1 	bhi.w	8104408 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 81042c6:	69bb      	ldr	r3, [r7, #24]
 81042c8:	2b00      	cmp	r3, #0
 81042ca:	d003      	beq.n	81042d4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 81042cc:	69bb      	ldr	r3, [r7, #24]
 81042ce:	2b01      	cmp	r3, #1
 81042d0:	d056      	beq.n	8104380 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 81042d2:	e099      	b.n	8104408 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81042d4:	4b88      	ldr	r3, [pc, #544]	@ (81044f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81042d6:	681b      	ldr	r3, [r3, #0]
 81042d8:	f003 0320 	and.w	r3, r3, #32
 81042dc:	2b00      	cmp	r3, #0
 81042de:	d02d      	beq.n	810433c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81042e0:	4b85      	ldr	r3, [pc, #532]	@ (81044f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81042e2:	681b      	ldr	r3, [r3, #0]
 81042e4:	08db      	lsrs	r3, r3, #3
 81042e6:	f003 0303 	and.w	r3, r3, #3
 81042ea:	4a84      	ldr	r2, [pc, #528]	@ (81044fc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 81042ec:	fa22 f303 	lsr.w	r3, r2, r3
 81042f0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 81042f2:	68bb      	ldr	r3, [r7, #8]
 81042f4:	ee07 3a90 	vmov	s15, r3
 81042f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81042fc:	697b      	ldr	r3, [r7, #20]
 81042fe:	ee07 3a90 	vmov	s15, r3
 8104302:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104306:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810430a:	4b7b      	ldr	r3, [pc, #492]	@ (81044f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810430c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810430e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104312:	ee07 3a90 	vmov	s15, r3
 8104316:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810431a:	ed97 6a03 	vldr	s12, [r7, #12]
 810431e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8104500 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8104322:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104326:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810432a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810432e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104332:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104336:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 810433a:	e087      	b.n	810444c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 810433c:	697b      	ldr	r3, [r7, #20]
 810433e:	ee07 3a90 	vmov	s15, r3
 8104342:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104346:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8104504 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 810434a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810434e:	4b6a      	ldr	r3, [pc, #424]	@ (81044f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8104352:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104356:	ee07 3a90 	vmov	s15, r3
 810435a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810435e:	ed97 6a03 	vldr	s12, [r7, #12]
 8104362:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8104500 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8104366:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810436a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810436e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8104372:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104376:	ee67 7a27 	vmul.f32	s15, s14, s15
 810437a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810437e:	e065      	b.n	810444c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8104380:	697b      	ldr	r3, [r7, #20]
 8104382:	ee07 3a90 	vmov	s15, r3
 8104386:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810438a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8104508 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 810438e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104392:	4b59      	ldr	r3, [pc, #356]	@ (81044f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104394:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8104396:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810439a:	ee07 3a90 	vmov	s15, r3
 810439e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81043a2:	ed97 6a03 	vldr	s12, [r7, #12]
 81043a6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8104500 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81043aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81043ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81043b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81043b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81043ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 81043be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81043c2:	e043      	b.n	810444c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 81043c4:	697b      	ldr	r3, [r7, #20]
 81043c6:	ee07 3a90 	vmov	s15, r3
 81043ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81043ce:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 810450c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 81043d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81043d6:	4b48      	ldr	r3, [pc, #288]	@ (81044f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81043d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81043da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81043de:	ee07 3a90 	vmov	s15, r3
 81043e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81043e6:	ed97 6a03 	vldr	s12, [r7, #12]
 81043ea:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8104500 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81043ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81043f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81043f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81043fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81043fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104402:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8104406:	e021      	b.n	810444c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8104408:	697b      	ldr	r3, [r7, #20]
 810440a:	ee07 3a90 	vmov	s15, r3
 810440e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104412:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8104508 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8104416:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810441a:	4b37      	ldr	r3, [pc, #220]	@ (81044f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810441c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810441e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104422:	ee07 3a90 	vmov	s15, r3
 8104426:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810442a:	ed97 6a03 	vldr	s12, [r7, #12]
 810442e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8104500 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8104432:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104436:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810443a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810443e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104442:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104446:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810444a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 810444c:	4b2a      	ldr	r3, [pc, #168]	@ (81044f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810444e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8104450:	0a5b      	lsrs	r3, r3, #9
 8104452:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8104456:	ee07 3a90 	vmov	s15, r3
 810445a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810445e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8104462:	ee37 7a87 	vadd.f32	s14, s15, s14
 8104466:	edd7 6a07 	vldr	s13, [r7, #28]
 810446a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810446e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8104472:	ee17 2a90 	vmov	r2, s15
 8104476:	687b      	ldr	r3, [r7, #4]
 8104478:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 810447a:	4b1f      	ldr	r3, [pc, #124]	@ (81044f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810447c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810447e:	0c1b      	lsrs	r3, r3, #16
 8104480:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8104484:	ee07 3a90 	vmov	s15, r3
 8104488:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810448c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8104490:	ee37 7a87 	vadd.f32	s14, s15, s14
 8104494:	edd7 6a07 	vldr	s13, [r7, #28]
 8104498:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810449c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81044a0:	ee17 2a90 	vmov	r2, s15
 81044a4:	687b      	ldr	r3, [r7, #4]
 81044a6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 81044a8:	4b13      	ldr	r3, [pc, #76]	@ (81044f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81044aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81044ac:	0e1b      	lsrs	r3, r3, #24
 81044ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 81044b2:	ee07 3a90 	vmov	s15, r3
 81044b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81044ba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 81044be:	ee37 7a87 	vadd.f32	s14, s15, s14
 81044c2:	edd7 6a07 	vldr	s13, [r7, #28]
 81044c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81044ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81044ce:	ee17 2a90 	vmov	r2, s15
 81044d2:	687b      	ldr	r3, [r7, #4]
 81044d4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 81044d6:	e008      	b.n	81044ea <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 81044d8:	687b      	ldr	r3, [r7, #4]
 81044da:	2200      	movs	r2, #0
 81044dc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 81044de:	687b      	ldr	r3, [r7, #4]
 81044e0:	2200      	movs	r2, #0
 81044e2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 81044e4:	687b      	ldr	r3, [r7, #4]
 81044e6:	2200      	movs	r2, #0
 81044e8:	609a      	str	r2, [r3, #8]
}
 81044ea:	bf00      	nop
 81044ec:	3724      	adds	r7, #36	@ 0x24
 81044ee:	46bd      	mov	sp, r7
 81044f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81044f4:	4770      	bx	lr
 81044f6:	bf00      	nop
 81044f8:	58024400 	.word	0x58024400
 81044fc:	03d09000 	.word	0x03d09000
 8104500:	46000000 	.word	0x46000000
 8104504:	4c742400 	.word	0x4c742400
 8104508:	4a742400 	.word	0x4a742400
 810450c:	4bbebc20 	.word	0x4bbebc20

08104510 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8104510:	b480      	push	{r7}
 8104512:	b089      	sub	sp, #36	@ 0x24
 8104514:	af00      	add	r7, sp, #0
 8104516:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8104518:	4ba0      	ldr	r3, [pc, #640]	@ (810479c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810451a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810451c:	f003 0303 	and.w	r3, r3, #3
 8104520:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8104522:	4b9e      	ldr	r3, [pc, #632]	@ (810479c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8104524:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8104526:	091b      	lsrs	r3, r3, #4
 8104528:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 810452c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 810452e:	4b9b      	ldr	r3, [pc, #620]	@ (810479c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8104530:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104532:	f003 0301 	and.w	r3, r3, #1
 8104536:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8104538:	4b98      	ldr	r3, [pc, #608]	@ (810479c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810453a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810453c:	08db      	lsrs	r3, r3, #3
 810453e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8104542:	693a      	ldr	r2, [r7, #16]
 8104544:	fb02 f303 	mul.w	r3, r2, r3
 8104548:	ee07 3a90 	vmov	s15, r3
 810454c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104550:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8104554:	697b      	ldr	r3, [r7, #20]
 8104556:	2b00      	cmp	r3, #0
 8104558:	f000 8111 	beq.w	810477e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 810455c:	69bb      	ldr	r3, [r7, #24]
 810455e:	2b02      	cmp	r3, #2
 8104560:	f000 8083 	beq.w	810466a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8104564:	69bb      	ldr	r3, [r7, #24]
 8104566:	2b02      	cmp	r3, #2
 8104568:	f200 80a1 	bhi.w	81046ae <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 810456c:	69bb      	ldr	r3, [r7, #24]
 810456e:	2b00      	cmp	r3, #0
 8104570:	d003      	beq.n	810457a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8104572:	69bb      	ldr	r3, [r7, #24]
 8104574:	2b01      	cmp	r3, #1
 8104576:	d056      	beq.n	8104626 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8104578:	e099      	b.n	81046ae <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810457a:	4b88      	ldr	r3, [pc, #544]	@ (810479c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810457c:	681b      	ldr	r3, [r3, #0]
 810457e:	f003 0320 	and.w	r3, r3, #32
 8104582:	2b00      	cmp	r3, #0
 8104584:	d02d      	beq.n	81045e2 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8104586:	4b85      	ldr	r3, [pc, #532]	@ (810479c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8104588:	681b      	ldr	r3, [r3, #0]
 810458a:	08db      	lsrs	r3, r3, #3
 810458c:	f003 0303 	and.w	r3, r3, #3
 8104590:	4a83      	ldr	r2, [pc, #524]	@ (81047a0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8104592:	fa22 f303 	lsr.w	r3, r2, r3
 8104596:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8104598:	68bb      	ldr	r3, [r7, #8]
 810459a:	ee07 3a90 	vmov	s15, r3
 810459e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81045a2:	697b      	ldr	r3, [r7, #20]
 81045a4:	ee07 3a90 	vmov	s15, r3
 81045a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81045ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81045b0:	4b7a      	ldr	r3, [pc, #488]	@ (810479c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81045b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81045b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81045b8:	ee07 3a90 	vmov	s15, r3
 81045bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81045c0:	ed97 6a03 	vldr	s12, [r7, #12]
 81045c4:	eddf 5a77 	vldr	s11, [pc, #476]	@ 81047a4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 81045c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81045cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81045d0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81045d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81045d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 81045dc:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 81045e0:	e087      	b.n	81046f2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81045e2:	697b      	ldr	r3, [r7, #20]
 81045e4:	ee07 3a90 	vmov	s15, r3
 81045e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81045ec:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 81047a8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 81045f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81045f4:	4b69      	ldr	r3, [pc, #420]	@ (810479c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81045f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81045f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81045fc:	ee07 3a90 	vmov	s15, r3
 8104600:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104604:	ed97 6a03 	vldr	s12, [r7, #12]
 8104608:	eddf 5a66 	vldr	s11, [pc, #408]	@ 81047a4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 810460c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104610:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104614:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8104618:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810461c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104620:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8104624:	e065      	b.n	81046f2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8104626:	697b      	ldr	r3, [r7, #20]
 8104628:	ee07 3a90 	vmov	s15, r3
 810462c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104630:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 81047ac <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8104634:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104638:	4b58      	ldr	r3, [pc, #352]	@ (810479c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810463a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810463c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104640:	ee07 3a90 	vmov	s15, r3
 8104644:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104648:	ed97 6a03 	vldr	s12, [r7, #12]
 810464c:	eddf 5a55 	vldr	s11, [pc, #340]	@ 81047a4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8104650:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104654:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104658:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810465c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104660:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104664:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8104668:	e043      	b.n	81046f2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810466a:	697b      	ldr	r3, [r7, #20]
 810466c:	ee07 3a90 	vmov	s15, r3
 8104670:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104674:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 81047b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8104678:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810467c:	4b47      	ldr	r3, [pc, #284]	@ (810479c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810467e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8104680:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104684:	ee07 3a90 	vmov	s15, r3
 8104688:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810468c:	ed97 6a03 	vldr	s12, [r7, #12]
 8104690:	eddf 5a44 	vldr	s11, [pc, #272]	@ 81047a4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8104694:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104698:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810469c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81046a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81046a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 81046a8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81046ac:	e021      	b.n	81046f2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81046ae:	697b      	ldr	r3, [r7, #20]
 81046b0:	ee07 3a90 	vmov	s15, r3
 81046b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81046b8:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 81047a8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 81046bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81046c0:	4b36      	ldr	r3, [pc, #216]	@ (810479c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81046c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81046c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81046c8:	ee07 3a90 	vmov	s15, r3
 81046cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81046d0:	ed97 6a03 	vldr	s12, [r7, #12]
 81046d4:	eddf 5a33 	vldr	s11, [pc, #204]	@ 81047a4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 81046d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81046dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81046e0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81046e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81046e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 81046ec:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81046f0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 81046f2:	4b2a      	ldr	r3, [pc, #168]	@ (810479c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81046f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81046f6:	0a5b      	lsrs	r3, r3, #9
 81046f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 81046fc:	ee07 3a90 	vmov	s15, r3
 8104700:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104704:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8104708:	ee37 7a87 	vadd.f32	s14, s15, s14
 810470c:	edd7 6a07 	vldr	s13, [r7, #28]
 8104710:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8104714:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8104718:	ee17 2a90 	vmov	r2, s15
 810471c:	687b      	ldr	r3, [r7, #4]
 810471e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8104720:	4b1e      	ldr	r3, [pc, #120]	@ (810479c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8104722:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8104724:	0c1b      	lsrs	r3, r3, #16
 8104726:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810472a:	ee07 3a90 	vmov	s15, r3
 810472e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104732:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8104736:	ee37 7a87 	vadd.f32	s14, s15, s14
 810473a:	edd7 6a07 	vldr	s13, [r7, #28]
 810473e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8104742:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8104746:	ee17 2a90 	vmov	r2, s15
 810474a:	687b      	ldr	r3, [r7, #4]
 810474c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 810474e:	4b13      	ldr	r3, [pc, #76]	@ (810479c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8104750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8104752:	0e1b      	lsrs	r3, r3, #24
 8104754:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8104758:	ee07 3a90 	vmov	s15, r3
 810475c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104760:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8104764:	ee37 7a87 	vadd.f32	s14, s15, s14
 8104768:	edd7 6a07 	vldr	s13, [r7, #28]
 810476c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8104770:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8104774:	ee17 2a90 	vmov	r2, s15
 8104778:	687b      	ldr	r3, [r7, #4]
 810477a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 810477c:	e008      	b.n	8104790 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 810477e:	687b      	ldr	r3, [r7, #4]
 8104780:	2200      	movs	r2, #0
 8104782:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8104784:	687b      	ldr	r3, [r7, #4]
 8104786:	2200      	movs	r2, #0
 8104788:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 810478a:	687b      	ldr	r3, [r7, #4]
 810478c:	2200      	movs	r2, #0
 810478e:	609a      	str	r2, [r3, #8]
}
 8104790:	bf00      	nop
 8104792:	3724      	adds	r7, #36	@ 0x24
 8104794:	46bd      	mov	sp, r7
 8104796:	f85d 7b04 	ldr.w	r7, [sp], #4
 810479a:	4770      	bx	lr
 810479c:	58024400 	.word	0x58024400
 81047a0:	03d09000 	.word	0x03d09000
 81047a4:	46000000 	.word	0x46000000
 81047a8:	4c742400 	.word	0x4c742400
 81047ac:	4a742400 	.word	0x4a742400
 81047b0:	4bbebc20 	.word	0x4bbebc20

081047b4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 81047b4:	b580      	push	{r7, lr}
 81047b6:	b084      	sub	sp, #16
 81047b8:	af00      	add	r7, sp, #0
 81047ba:	6078      	str	r0, [r7, #4]
 81047bc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 81047be:	2300      	movs	r3, #0
 81047c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 81047c2:	4b54      	ldr	r3, [pc, #336]	@ (8104914 <RCCEx_PLL2_Config+0x160>)
 81047c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81047c6:	f003 0303 	and.w	r3, r3, #3
 81047ca:	2b03      	cmp	r3, #3
 81047cc:	d101      	bne.n	81047d2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 81047ce:	2301      	movs	r3, #1
 81047d0:	e09b      	b.n	810490a <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 81047d2:	4b50      	ldr	r3, [pc, #320]	@ (8104914 <RCCEx_PLL2_Config+0x160>)
 81047d4:	681b      	ldr	r3, [r3, #0]
 81047d6:	4a4f      	ldr	r2, [pc, #316]	@ (8104914 <RCCEx_PLL2_Config+0x160>)
 81047d8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 81047dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81047de:	f7fb ffef 	bl	81007c0 <HAL_GetTick>
 81047e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 81047e4:	e008      	b.n	81047f8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 81047e6:	f7fb ffeb 	bl	81007c0 <HAL_GetTick>
 81047ea:	4602      	mov	r2, r0
 81047ec:	68bb      	ldr	r3, [r7, #8]
 81047ee:	1ad3      	subs	r3, r2, r3
 81047f0:	2b02      	cmp	r3, #2
 81047f2:	d901      	bls.n	81047f8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 81047f4:	2303      	movs	r3, #3
 81047f6:	e088      	b.n	810490a <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 81047f8:	4b46      	ldr	r3, [pc, #280]	@ (8104914 <RCCEx_PLL2_Config+0x160>)
 81047fa:	681b      	ldr	r3, [r3, #0]
 81047fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8104800:	2b00      	cmp	r3, #0
 8104802:	d1f0      	bne.n	81047e6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8104804:	4b43      	ldr	r3, [pc, #268]	@ (8104914 <RCCEx_PLL2_Config+0x160>)
 8104806:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8104808:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 810480c:	687b      	ldr	r3, [r7, #4]
 810480e:	681b      	ldr	r3, [r3, #0]
 8104810:	031b      	lsls	r3, r3, #12
 8104812:	4940      	ldr	r1, [pc, #256]	@ (8104914 <RCCEx_PLL2_Config+0x160>)
 8104814:	4313      	orrs	r3, r2
 8104816:	628b      	str	r3, [r1, #40]	@ 0x28
 8104818:	687b      	ldr	r3, [r7, #4]
 810481a:	685b      	ldr	r3, [r3, #4]
 810481c:	3b01      	subs	r3, #1
 810481e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8104822:	687b      	ldr	r3, [r7, #4]
 8104824:	689b      	ldr	r3, [r3, #8]
 8104826:	3b01      	subs	r3, #1
 8104828:	025b      	lsls	r3, r3, #9
 810482a:	b29b      	uxth	r3, r3
 810482c:	431a      	orrs	r2, r3
 810482e:	687b      	ldr	r3, [r7, #4]
 8104830:	68db      	ldr	r3, [r3, #12]
 8104832:	3b01      	subs	r3, #1
 8104834:	041b      	lsls	r3, r3, #16
 8104836:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 810483a:	431a      	orrs	r2, r3
 810483c:	687b      	ldr	r3, [r7, #4]
 810483e:	691b      	ldr	r3, [r3, #16]
 8104840:	3b01      	subs	r3, #1
 8104842:	061b      	lsls	r3, r3, #24
 8104844:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8104848:	4932      	ldr	r1, [pc, #200]	@ (8104914 <RCCEx_PLL2_Config+0x160>)
 810484a:	4313      	orrs	r3, r2
 810484c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 810484e:	4b31      	ldr	r3, [pc, #196]	@ (8104914 <RCCEx_PLL2_Config+0x160>)
 8104850:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104852:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8104856:	687b      	ldr	r3, [r7, #4]
 8104858:	695b      	ldr	r3, [r3, #20]
 810485a:	492e      	ldr	r1, [pc, #184]	@ (8104914 <RCCEx_PLL2_Config+0x160>)
 810485c:	4313      	orrs	r3, r2
 810485e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8104860:	4b2c      	ldr	r3, [pc, #176]	@ (8104914 <RCCEx_PLL2_Config+0x160>)
 8104862:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104864:	f023 0220 	bic.w	r2, r3, #32
 8104868:	687b      	ldr	r3, [r7, #4]
 810486a:	699b      	ldr	r3, [r3, #24]
 810486c:	4929      	ldr	r1, [pc, #164]	@ (8104914 <RCCEx_PLL2_Config+0x160>)
 810486e:	4313      	orrs	r3, r2
 8104870:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8104872:	4b28      	ldr	r3, [pc, #160]	@ (8104914 <RCCEx_PLL2_Config+0x160>)
 8104874:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104876:	4a27      	ldr	r2, [pc, #156]	@ (8104914 <RCCEx_PLL2_Config+0x160>)
 8104878:	f023 0310 	bic.w	r3, r3, #16
 810487c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 810487e:	4b25      	ldr	r3, [pc, #148]	@ (8104914 <RCCEx_PLL2_Config+0x160>)
 8104880:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8104882:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8104886:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 810488a:	687a      	ldr	r2, [r7, #4]
 810488c:	69d2      	ldr	r2, [r2, #28]
 810488e:	00d2      	lsls	r2, r2, #3
 8104890:	4920      	ldr	r1, [pc, #128]	@ (8104914 <RCCEx_PLL2_Config+0x160>)
 8104892:	4313      	orrs	r3, r2
 8104894:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8104896:	4b1f      	ldr	r3, [pc, #124]	@ (8104914 <RCCEx_PLL2_Config+0x160>)
 8104898:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810489a:	4a1e      	ldr	r2, [pc, #120]	@ (8104914 <RCCEx_PLL2_Config+0x160>)
 810489c:	f043 0310 	orr.w	r3, r3, #16
 81048a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 81048a2:	683b      	ldr	r3, [r7, #0]
 81048a4:	2b00      	cmp	r3, #0
 81048a6:	d106      	bne.n	81048b6 <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 81048a8:	4b1a      	ldr	r3, [pc, #104]	@ (8104914 <RCCEx_PLL2_Config+0x160>)
 81048aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81048ac:	4a19      	ldr	r2, [pc, #100]	@ (8104914 <RCCEx_PLL2_Config+0x160>)
 81048ae:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 81048b2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 81048b4:	e00f      	b.n	81048d6 <RCCEx_PLL2_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 81048b6:	683b      	ldr	r3, [r7, #0]
 81048b8:	2b01      	cmp	r3, #1
 81048ba:	d106      	bne.n	81048ca <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 81048bc:	4b15      	ldr	r3, [pc, #84]	@ (8104914 <RCCEx_PLL2_Config+0x160>)
 81048be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81048c0:	4a14      	ldr	r2, [pc, #80]	@ (8104914 <RCCEx_PLL2_Config+0x160>)
 81048c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 81048c6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 81048c8:	e005      	b.n	81048d6 <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 81048ca:	4b12      	ldr	r3, [pc, #72]	@ (8104914 <RCCEx_PLL2_Config+0x160>)
 81048cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81048ce:	4a11      	ldr	r2, [pc, #68]	@ (8104914 <RCCEx_PLL2_Config+0x160>)
 81048d0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 81048d4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 81048d6:	4b0f      	ldr	r3, [pc, #60]	@ (8104914 <RCCEx_PLL2_Config+0x160>)
 81048d8:	681b      	ldr	r3, [r3, #0]
 81048da:	4a0e      	ldr	r2, [pc, #56]	@ (8104914 <RCCEx_PLL2_Config+0x160>)
 81048dc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 81048e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81048e2:	f7fb ff6d 	bl	81007c0 <HAL_GetTick>
 81048e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 81048e8:	e008      	b.n	81048fc <RCCEx_PLL2_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 81048ea:	f7fb ff69 	bl	81007c0 <HAL_GetTick>
 81048ee:	4602      	mov	r2, r0
 81048f0:	68bb      	ldr	r3, [r7, #8]
 81048f2:	1ad3      	subs	r3, r2, r3
 81048f4:	2b02      	cmp	r3, #2
 81048f6:	d901      	bls.n	81048fc <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 81048f8:	2303      	movs	r3, #3
 81048fa:	e006      	b.n	810490a <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 81048fc:	4b05      	ldr	r3, [pc, #20]	@ (8104914 <RCCEx_PLL2_Config+0x160>)
 81048fe:	681b      	ldr	r3, [r3, #0]
 8104900:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8104904:	2b00      	cmp	r3, #0
 8104906:	d0f0      	beq.n	81048ea <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 8104908:	7bfb      	ldrb	r3, [r7, #15]
}
 810490a:	4618      	mov	r0, r3
 810490c:	3710      	adds	r7, #16
 810490e:	46bd      	mov	sp, r7
 8104910:	bd80      	pop	{r7, pc}
 8104912:	bf00      	nop
 8104914:	58024400 	.word	0x58024400

08104918 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8104918:	b580      	push	{r7, lr}
 810491a:	b084      	sub	sp, #16
 810491c:	af00      	add	r7, sp, #0
 810491e:	6078      	str	r0, [r7, #4]
 8104920:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8104922:	2300      	movs	r3, #0
 8104924:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8104926:	4b54      	ldr	r3, [pc, #336]	@ (8104a78 <RCCEx_PLL3_Config+0x160>)
 8104928:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810492a:	f003 0303 	and.w	r3, r3, #3
 810492e:	2b03      	cmp	r3, #3
 8104930:	d101      	bne.n	8104936 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8104932:	2301      	movs	r3, #1
 8104934:	e09b      	b.n	8104a6e <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8104936:	4b50      	ldr	r3, [pc, #320]	@ (8104a78 <RCCEx_PLL3_Config+0x160>)
 8104938:	681b      	ldr	r3, [r3, #0]
 810493a:	4a4f      	ldr	r2, [pc, #316]	@ (8104a78 <RCCEx_PLL3_Config+0x160>)
 810493c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8104940:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8104942:	f7fb ff3d 	bl	81007c0 <HAL_GetTick>
 8104946:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8104948:	e008      	b.n	810495c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 810494a:	f7fb ff39 	bl	81007c0 <HAL_GetTick>
 810494e:	4602      	mov	r2, r0
 8104950:	68bb      	ldr	r3, [r7, #8]
 8104952:	1ad3      	subs	r3, r2, r3
 8104954:	2b02      	cmp	r3, #2
 8104956:	d901      	bls.n	810495c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8104958:	2303      	movs	r3, #3
 810495a:	e088      	b.n	8104a6e <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 810495c:	4b46      	ldr	r3, [pc, #280]	@ (8104a78 <RCCEx_PLL3_Config+0x160>)
 810495e:	681b      	ldr	r3, [r3, #0]
 8104960:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8104964:	2b00      	cmp	r3, #0
 8104966:	d1f0      	bne.n	810494a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8104968:	4b43      	ldr	r3, [pc, #268]	@ (8104a78 <RCCEx_PLL3_Config+0x160>)
 810496a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810496c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8104970:	687b      	ldr	r3, [r7, #4]
 8104972:	681b      	ldr	r3, [r3, #0]
 8104974:	051b      	lsls	r3, r3, #20
 8104976:	4940      	ldr	r1, [pc, #256]	@ (8104a78 <RCCEx_PLL3_Config+0x160>)
 8104978:	4313      	orrs	r3, r2
 810497a:	628b      	str	r3, [r1, #40]	@ 0x28
 810497c:	687b      	ldr	r3, [r7, #4]
 810497e:	685b      	ldr	r3, [r3, #4]
 8104980:	3b01      	subs	r3, #1
 8104982:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8104986:	687b      	ldr	r3, [r7, #4]
 8104988:	689b      	ldr	r3, [r3, #8]
 810498a:	3b01      	subs	r3, #1
 810498c:	025b      	lsls	r3, r3, #9
 810498e:	b29b      	uxth	r3, r3
 8104990:	431a      	orrs	r2, r3
 8104992:	687b      	ldr	r3, [r7, #4]
 8104994:	68db      	ldr	r3, [r3, #12]
 8104996:	3b01      	subs	r3, #1
 8104998:	041b      	lsls	r3, r3, #16
 810499a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 810499e:	431a      	orrs	r2, r3
 81049a0:	687b      	ldr	r3, [r7, #4]
 81049a2:	691b      	ldr	r3, [r3, #16]
 81049a4:	3b01      	subs	r3, #1
 81049a6:	061b      	lsls	r3, r3, #24
 81049a8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 81049ac:	4932      	ldr	r1, [pc, #200]	@ (8104a78 <RCCEx_PLL3_Config+0x160>)
 81049ae:	4313      	orrs	r3, r2
 81049b0:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 81049b2:	4b31      	ldr	r3, [pc, #196]	@ (8104a78 <RCCEx_PLL3_Config+0x160>)
 81049b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81049b6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 81049ba:	687b      	ldr	r3, [r7, #4]
 81049bc:	695b      	ldr	r3, [r3, #20]
 81049be:	492e      	ldr	r1, [pc, #184]	@ (8104a78 <RCCEx_PLL3_Config+0x160>)
 81049c0:	4313      	orrs	r3, r2
 81049c2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 81049c4:	4b2c      	ldr	r3, [pc, #176]	@ (8104a78 <RCCEx_PLL3_Config+0x160>)
 81049c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81049c8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 81049cc:	687b      	ldr	r3, [r7, #4]
 81049ce:	699b      	ldr	r3, [r3, #24]
 81049d0:	4929      	ldr	r1, [pc, #164]	@ (8104a78 <RCCEx_PLL3_Config+0x160>)
 81049d2:	4313      	orrs	r3, r2
 81049d4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 81049d6:	4b28      	ldr	r3, [pc, #160]	@ (8104a78 <RCCEx_PLL3_Config+0x160>)
 81049d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81049da:	4a27      	ldr	r2, [pc, #156]	@ (8104a78 <RCCEx_PLL3_Config+0x160>)
 81049dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 81049e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 81049e2:	4b25      	ldr	r3, [pc, #148]	@ (8104a78 <RCCEx_PLL3_Config+0x160>)
 81049e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81049e6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 81049ea:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 81049ee:	687a      	ldr	r2, [r7, #4]
 81049f0:	69d2      	ldr	r2, [r2, #28]
 81049f2:	00d2      	lsls	r2, r2, #3
 81049f4:	4920      	ldr	r1, [pc, #128]	@ (8104a78 <RCCEx_PLL3_Config+0x160>)
 81049f6:	4313      	orrs	r3, r2
 81049f8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 81049fa:	4b1f      	ldr	r3, [pc, #124]	@ (8104a78 <RCCEx_PLL3_Config+0x160>)
 81049fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81049fe:	4a1e      	ldr	r2, [pc, #120]	@ (8104a78 <RCCEx_PLL3_Config+0x160>)
 8104a00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8104a04:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8104a06:	683b      	ldr	r3, [r7, #0]
 8104a08:	2b00      	cmp	r3, #0
 8104a0a:	d106      	bne.n	8104a1a <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8104a0c:	4b1a      	ldr	r3, [pc, #104]	@ (8104a78 <RCCEx_PLL3_Config+0x160>)
 8104a0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104a10:	4a19      	ldr	r2, [pc, #100]	@ (8104a78 <RCCEx_PLL3_Config+0x160>)
 8104a12:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8104a16:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8104a18:	e00f      	b.n	8104a3a <RCCEx_PLL3_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8104a1a:	683b      	ldr	r3, [r7, #0]
 8104a1c:	2b01      	cmp	r3, #1
 8104a1e:	d106      	bne.n	8104a2e <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8104a20:	4b15      	ldr	r3, [pc, #84]	@ (8104a78 <RCCEx_PLL3_Config+0x160>)
 8104a22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104a24:	4a14      	ldr	r2, [pc, #80]	@ (8104a78 <RCCEx_PLL3_Config+0x160>)
 8104a26:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8104a2a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8104a2c:	e005      	b.n	8104a3a <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8104a2e:	4b12      	ldr	r3, [pc, #72]	@ (8104a78 <RCCEx_PLL3_Config+0x160>)
 8104a30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104a32:	4a11      	ldr	r2, [pc, #68]	@ (8104a78 <RCCEx_PLL3_Config+0x160>)
 8104a34:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8104a38:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8104a3a:	4b0f      	ldr	r3, [pc, #60]	@ (8104a78 <RCCEx_PLL3_Config+0x160>)
 8104a3c:	681b      	ldr	r3, [r3, #0]
 8104a3e:	4a0e      	ldr	r2, [pc, #56]	@ (8104a78 <RCCEx_PLL3_Config+0x160>)
 8104a40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8104a44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8104a46:	f7fb febb 	bl	81007c0 <HAL_GetTick>
 8104a4a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8104a4c:	e008      	b.n	8104a60 <RCCEx_PLL3_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8104a4e:	f7fb feb7 	bl	81007c0 <HAL_GetTick>
 8104a52:	4602      	mov	r2, r0
 8104a54:	68bb      	ldr	r3, [r7, #8]
 8104a56:	1ad3      	subs	r3, r2, r3
 8104a58:	2b02      	cmp	r3, #2
 8104a5a:	d901      	bls.n	8104a60 <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 8104a5c:	2303      	movs	r3, #3
 8104a5e:	e006      	b.n	8104a6e <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8104a60:	4b05      	ldr	r3, [pc, #20]	@ (8104a78 <RCCEx_PLL3_Config+0x160>)
 8104a62:	681b      	ldr	r3, [r3, #0]
 8104a64:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8104a68:	2b00      	cmp	r3, #0
 8104a6a:	d0f0      	beq.n	8104a4e <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 8104a6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8104a6e:	4618      	mov	r0, r3
 8104a70:	3710      	adds	r7, #16
 8104a72:	46bd      	mov	sp, r7
 8104a74:	bd80      	pop	{r7, pc}
 8104a76:	bf00      	nop
 8104a78:	58024400 	.word	0x58024400

08104a7c <memset>:
 8104a7c:	4402      	add	r2, r0
 8104a7e:	4603      	mov	r3, r0
 8104a80:	4293      	cmp	r3, r2
 8104a82:	d100      	bne.n	8104a86 <memset+0xa>
 8104a84:	4770      	bx	lr
 8104a86:	f803 1b01 	strb.w	r1, [r3], #1
 8104a8a:	e7f9      	b.n	8104a80 <memset+0x4>

08104a8c <__libc_init_array>:
 8104a8c:	b570      	push	{r4, r5, r6, lr}
 8104a8e:	4d0d      	ldr	r5, [pc, #52]	@ (8104ac4 <__libc_init_array+0x38>)
 8104a90:	4c0d      	ldr	r4, [pc, #52]	@ (8104ac8 <__libc_init_array+0x3c>)
 8104a92:	1b64      	subs	r4, r4, r5
 8104a94:	10a4      	asrs	r4, r4, #2
 8104a96:	2600      	movs	r6, #0
 8104a98:	42a6      	cmp	r6, r4
 8104a9a:	d109      	bne.n	8104ab0 <__libc_init_array+0x24>
 8104a9c:	4d0b      	ldr	r5, [pc, #44]	@ (8104acc <__libc_init_array+0x40>)
 8104a9e:	4c0c      	ldr	r4, [pc, #48]	@ (8104ad0 <__libc_init_array+0x44>)
 8104aa0:	f000 f818 	bl	8104ad4 <_init>
 8104aa4:	1b64      	subs	r4, r4, r5
 8104aa6:	10a4      	asrs	r4, r4, #2
 8104aa8:	2600      	movs	r6, #0
 8104aaa:	42a6      	cmp	r6, r4
 8104aac:	d105      	bne.n	8104aba <__libc_init_array+0x2e>
 8104aae:	bd70      	pop	{r4, r5, r6, pc}
 8104ab0:	f855 3b04 	ldr.w	r3, [r5], #4
 8104ab4:	4798      	blx	r3
 8104ab6:	3601      	adds	r6, #1
 8104ab8:	e7ee      	b.n	8104a98 <__libc_init_array+0xc>
 8104aba:	f855 3b04 	ldr.w	r3, [r5], #4
 8104abe:	4798      	blx	r3
 8104ac0:	3601      	adds	r6, #1
 8104ac2:	e7f2      	b.n	8104aaa <__libc_init_array+0x1e>
 8104ac4:	08104afc 	.word	0x08104afc
 8104ac8:	08104afc 	.word	0x08104afc
 8104acc:	08104afc 	.word	0x08104afc
 8104ad0:	08104b00 	.word	0x08104b00

08104ad4 <_init>:
 8104ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8104ad6:	bf00      	nop
 8104ad8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8104ada:	bc08      	pop	{r3}
 8104adc:	469e      	mov	lr, r3
 8104ade:	4770      	bx	lr

08104ae0 <_fini>:
 8104ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8104ae2:	bf00      	nop
 8104ae4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8104ae6:	bc08      	pop	{r3}
 8104ae8:	469e      	mov	lr, r3
 8104aea:	4770      	bx	lr
