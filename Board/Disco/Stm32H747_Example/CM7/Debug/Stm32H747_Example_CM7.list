
Stm32H747_Example_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005080  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08005318  08005318  00006318  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005350  08005350  00007010  2**0
                  CONTENTS
  4 .ARM          00000008  08005350  08005350  00006350  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005358  08005358  00007010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005358  08005358  00006358  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800535c  0800535c  0000635c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  24000000  08005360  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  24000010  08005370  00007010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  240000c4  08005370  000070c4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fd32  00000000  00000000  0000703e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e60  00000000  00000000  00016d70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b08  00000000  00000000  00018bd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000878  00000000  00000000  000196d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003e1a2  00000000  00000000  00019f50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f0e7  00000000  00000000  000580f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00193ea9  00000000  00000000  000671d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001fb082  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d28  00000000  00000000  001fb0c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  001fddf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08005300 	.word	0x08005300

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08005300 	.word	0x08005300

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96a 	b.w	80005c4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	460c      	mov	r4, r1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14e      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000314:	4694      	mov	ip, r2
 8000316:	458c      	cmp	ip, r1
 8000318:	4686      	mov	lr, r0
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	d962      	bls.n	80003e6 <__udivmoddi4+0xde>
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0320 	rsb	r3, r2, #32
 8000326:	4091      	lsls	r1, r2
 8000328:	fa20 f303 	lsr.w	r3, r0, r3
 800032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000330:	4319      	orrs	r1, r3
 8000332:	fa00 fe02 	lsl.w	lr, r0, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f f68c 	uxth.w	r6, ip
 800033e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000346:	fb07 1114 	mls	r1, r7, r4, r1
 800034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034e:	fb04 f106 	mul.w	r1, r4, r6
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f104 30ff 	add.w	r0, r4, #4294967295
 800035e:	f080 8112 	bcs.w	8000586 <__udivmoddi4+0x27e>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 810f 	bls.w	8000586 <__udivmoddi4+0x27e>
 8000368:	3c02      	subs	r4, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb1 f0f7 	udiv	r0, r1, r7
 8000376:	fb07 1110 	mls	r1, r7, r0, r1
 800037a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037e:	fb00 f606 	mul.w	r6, r0, r6
 8000382:	429e      	cmp	r6, r3
 8000384:	d90a      	bls.n	800039c <__udivmoddi4+0x94>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 31ff 	add.w	r1, r0, #4294967295
 800038e:	f080 80fc 	bcs.w	800058a <__udivmoddi4+0x282>
 8000392:	429e      	cmp	r6, r3
 8000394:	f240 80f9 	bls.w	800058a <__udivmoddi4+0x282>
 8000398:	4463      	add	r3, ip
 800039a:	3802      	subs	r0, #2
 800039c:	1b9b      	subs	r3, r3, r6
 800039e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003a2:	2100      	movs	r1, #0
 80003a4:	b11d      	cbz	r5, 80003ae <__udivmoddi4+0xa6>
 80003a6:	40d3      	lsrs	r3, r2
 80003a8:	2200      	movs	r2, #0
 80003aa:	e9c5 3200 	strd	r3, r2, [r5]
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d905      	bls.n	80003c2 <__udivmoddi4+0xba>
 80003b6:	b10d      	cbz	r5, 80003bc <__udivmoddi4+0xb4>
 80003b8:	e9c5 0100 	strd	r0, r1, [r5]
 80003bc:	2100      	movs	r1, #0
 80003be:	4608      	mov	r0, r1
 80003c0:	e7f5      	b.n	80003ae <__udivmoddi4+0xa6>
 80003c2:	fab3 f183 	clz	r1, r3
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d146      	bne.n	8000458 <__udivmoddi4+0x150>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xcc>
 80003ce:	4290      	cmp	r0, r2
 80003d0:	f0c0 80f0 	bcc.w	80005b4 <__udivmoddi4+0x2ac>
 80003d4:	1a86      	subs	r6, r0, r2
 80003d6:	eb64 0303 	sbc.w	r3, r4, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	2d00      	cmp	r5, #0
 80003de:	d0e6      	beq.n	80003ae <__udivmoddi4+0xa6>
 80003e0:	e9c5 6300 	strd	r6, r3, [r5]
 80003e4:	e7e3      	b.n	80003ae <__udivmoddi4+0xa6>
 80003e6:	2a00      	cmp	r2, #0
 80003e8:	f040 8090 	bne.w	800050c <__udivmoddi4+0x204>
 80003ec:	eba1 040c 	sub.w	r4, r1, ip
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	fa1f f78c 	uxth.w	r7, ip
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000402:	fb08 4416 	mls	r4, r8, r6, r4
 8000406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040a:	fb07 f006 	mul.w	r0, r7, r6
 800040e:	4298      	cmp	r0, r3
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x11c>
 8000412:	eb1c 0303 	adds.w	r3, ip, r3
 8000416:	f106 34ff 	add.w	r4, r6, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x11a>
 800041c:	4298      	cmp	r0, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 8000422:	4626      	mov	r6, r4
 8000424:	1a1c      	subs	r4, r3, r0
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb4 f0f8 	udiv	r0, r4, r8
 800042e:	fb08 4410 	mls	r4, r8, r0, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb00 f707 	mul.w	r7, r0, r7
 800043a:	429f      	cmp	r7, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x148>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 34ff 	add.w	r4, r0, #4294967295
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x146>
 8000448:	429f      	cmp	r7, r3
 800044a:	f200 80b0 	bhi.w	80005ae <__udivmoddi4+0x2a6>
 800044e:	4620      	mov	r0, r4
 8000450:	1bdb      	subs	r3, r3, r7
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	e7a5      	b.n	80003a4 <__udivmoddi4+0x9c>
 8000458:	f1c1 0620 	rsb	r6, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 f706 	lsr.w	r7, r2, r6
 8000462:	431f      	orrs	r7, r3
 8000464:	fa20 fc06 	lsr.w	ip, r0, r6
 8000468:	fa04 f301 	lsl.w	r3, r4, r1
 800046c:	ea43 030c 	orr.w	r3, r3, ip
 8000470:	40f4      	lsrs	r4, r6
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	0c38      	lsrs	r0, r7, #16
 8000478:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800047c:	fbb4 fef0 	udiv	lr, r4, r0
 8000480:	fa1f fc87 	uxth.w	ip, r7
 8000484:	fb00 441e 	mls	r4, r0, lr, r4
 8000488:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048c:	fb0e f90c 	mul.w	r9, lr, ip
 8000490:	45a1      	cmp	r9, r4
 8000492:	fa02 f201 	lsl.w	r2, r2, r1
 8000496:	d90a      	bls.n	80004ae <__udivmoddi4+0x1a6>
 8000498:	193c      	adds	r4, r7, r4
 800049a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800049e:	f080 8084 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 80004a2:	45a1      	cmp	r9, r4
 80004a4:	f240 8081 	bls.w	80005aa <__udivmoddi4+0x2a2>
 80004a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	eba4 0409 	sub.w	r4, r4, r9
 80004b2:	fa1f f983 	uxth.w	r9, r3
 80004b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ba:	fb00 4413 	mls	r4, r0, r3, r4
 80004be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x1d2>
 80004ca:	193c      	adds	r4, r7, r4
 80004cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d0:	d267      	bcs.n	80005a2 <__udivmoddi4+0x29a>
 80004d2:	45a4      	cmp	ip, r4
 80004d4:	d965      	bls.n	80005a2 <__udivmoddi4+0x29a>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	443c      	add	r4, r7
 80004da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004de:	fba0 9302 	umull	r9, r3, r0, r2
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	429c      	cmp	r4, r3
 80004e8:	46ce      	mov	lr, r9
 80004ea:	469c      	mov	ip, r3
 80004ec:	d351      	bcc.n	8000592 <__udivmoddi4+0x28a>
 80004ee:	d04e      	beq.n	800058e <__udivmoddi4+0x286>
 80004f0:	b155      	cbz	r5, 8000508 <__udivmoddi4+0x200>
 80004f2:	ebb8 030e 	subs.w	r3, r8, lr
 80004f6:	eb64 040c 	sbc.w	r4, r4, ip
 80004fa:	fa04 f606 	lsl.w	r6, r4, r6
 80004fe:	40cb      	lsrs	r3, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	e9c5 6400 	strd	r6, r4, [r5]
 8000508:	2100      	movs	r1, #0
 800050a:	e750      	b.n	80003ae <__udivmoddi4+0xa6>
 800050c:	f1c2 0320 	rsb	r3, r2, #32
 8000510:	fa20 f103 	lsr.w	r1, r0, r3
 8000514:	fa0c fc02 	lsl.w	ip, ip, r2
 8000518:	fa24 f303 	lsr.w	r3, r4, r3
 800051c:	4094      	lsls	r4, r2
 800051e:	430c      	orrs	r4, r1
 8000520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000524:	fa00 fe02 	lsl.w	lr, r0, r2
 8000528:	fa1f f78c 	uxth.w	r7, ip
 800052c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000530:	fb08 3110 	mls	r1, r8, r0, r3
 8000534:	0c23      	lsrs	r3, r4, #16
 8000536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053a:	fb00 f107 	mul.w	r1, r0, r7
 800053e:	4299      	cmp	r1, r3
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x24c>
 8000542:	eb1c 0303 	adds.w	r3, ip, r3
 8000546:	f100 36ff 	add.w	r6, r0, #4294967295
 800054a:	d22c      	bcs.n	80005a6 <__udivmoddi4+0x29e>
 800054c:	4299      	cmp	r1, r3
 800054e:	d92a      	bls.n	80005a6 <__udivmoddi4+0x29e>
 8000550:	3802      	subs	r0, #2
 8000552:	4463      	add	r3, ip
 8000554:	1a5b      	subs	r3, r3, r1
 8000556:	b2a4      	uxth	r4, r4
 8000558:	fbb3 f1f8 	udiv	r1, r3, r8
 800055c:	fb08 3311 	mls	r3, r8, r1, r3
 8000560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000564:	fb01 f307 	mul.w	r3, r1, r7
 8000568:	42a3      	cmp	r3, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x276>
 800056c:	eb1c 0404 	adds.w	r4, ip, r4
 8000570:	f101 36ff 	add.w	r6, r1, #4294967295
 8000574:	d213      	bcs.n	800059e <__udivmoddi4+0x296>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d911      	bls.n	800059e <__udivmoddi4+0x296>
 800057a:	3902      	subs	r1, #2
 800057c:	4464      	add	r4, ip
 800057e:	1ae4      	subs	r4, r4, r3
 8000580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000584:	e739      	b.n	80003fa <__udivmoddi4+0xf2>
 8000586:	4604      	mov	r4, r0
 8000588:	e6f0      	b.n	800036c <__udivmoddi4+0x64>
 800058a:	4608      	mov	r0, r1
 800058c:	e706      	b.n	800039c <__udivmoddi4+0x94>
 800058e:	45c8      	cmp	r8, r9
 8000590:	d2ae      	bcs.n	80004f0 <__udivmoddi4+0x1e8>
 8000592:	ebb9 0e02 	subs.w	lr, r9, r2
 8000596:	eb63 0c07 	sbc.w	ip, r3, r7
 800059a:	3801      	subs	r0, #1
 800059c:	e7a8      	b.n	80004f0 <__udivmoddi4+0x1e8>
 800059e:	4631      	mov	r1, r6
 80005a0:	e7ed      	b.n	800057e <__udivmoddi4+0x276>
 80005a2:	4603      	mov	r3, r0
 80005a4:	e799      	b.n	80004da <__udivmoddi4+0x1d2>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e7d4      	b.n	8000554 <__udivmoddi4+0x24c>
 80005aa:	46d6      	mov	lr, sl
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1a6>
 80005ae:	4463      	add	r3, ip
 80005b0:	3802      	subs	r0, #2
 80005b2:	e74d      	b.n	8000450 <__udivmoddi4+0x148>
 80005b4:	4606      	mov	r6, r0
 80005b6:	4623      	mov	r3, r4
 80005b8:	4608      	mov	r0, r1
 80005ba:	e70f      	b.n	80003dc <__udivmoddi4+0xd4>
 80005bc:	3e02      	subs	r6, #2
 80005be:	4463      	add	r3, ip
 80005c0:	e730      	b.n	8000424 <__udivmoddi4+0x11c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005cc:	4b3d      	ldr	r3, [pc, #244]	@ (80006c4 <SystemInit+0xfc>)
 80005ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80005d2:	4a3c      	ldr	r2, [pc, #240]	@ (80006c4 <SystemInit+0xfc>)
 80005d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80005d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005dc:	4b39      	ldr	r3, [pc, #228]	@ (80006c4 <SystemInit+0xfc>)
 80005de:	691b      	ldr	r3, [r3, #16]
 80005e0:	4a38      	ldr	r2, [pc, #224]	@ (80006c4 <SystemInit+0xfc>)
 80005e2:	f043 0310 	orr.w	r3, r3, #16
 80005e6:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005e8:	4b37      	ldr	r3, [pc, #220]	@ (80006c8 <SystemInit+0x100>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f003 030f 	and.w	r3, r3, #15
 80005f0:	2b06      	cmp	r3, #6
 80005f2:	d807      	bhi.n	8000604 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80005f4:	4b34      	ldr	r3, [pc, #208]	@ (80006c8 <SystemInit+0x100>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f023 030f 	bic.w	r3, r3, #15
 80005fc:	4a32      	ldr	r2, [pc, #200]	@ (80006c8 <SystemInit+0x100>)
 80005fe:	f043 0307 	orr.w	r3, r3, #7
 8000602:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000604:	4b31      	ldr	r3, [pc, #196]	@ (80006cc <SystemInit+0x104>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a30      	ldr	r2, [pc, #192]	@ (80006cc <SystemInit+0x104>)
 800060a:	f043 0301 	orr.w	r3, r3, #1
 800060e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000610:	4b2e      	ldr	r3, [pc, #184]	@ (80006cc <SystemInit+0x104>)
 8000612:	2200      	movs	r2, #0
 8000614:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000616:	4b2d      	ldr	r3, [pc, #180]	@ (80006cc <SystemInit+0x104>)
 8000618:	681a      	ldr	r2, [r3, #0]
 800061a:	492c      	ldr	r1, [pc, #176]	@ (80006cc <SystemInit+0x104>)
 800061c:	4b2c      	ldr	r3, [pc, #176]	@ (80006d0 <SystemInit+0x108>)
 800061e:	4013      	ands	r3, r2
 8000620:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000622:	4b29      	ldr	r3, [pc, #164]	@ (80006c8 <SystemInit+0x100>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	f003 0308 	and.w	r3, r3, #8
 800062a:	2b00      	cmp	r3, #0
 800062c:	d007      	beq.n	800063e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800062e:	4b26      	ldr	r3, [pc, #152]	@ (80006c8 <SystemInit+0x100>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	f023 030f 	bic.w	r3, r3, #15
 8000636:	4a24      	ldr	r2, [pc, #144]	@ (80006c8 <SystemInit+0x100>)
 8000638:	f043 0307 	orr.w	r3, r3, #7
 800063c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800063e:	4b23      	ldr	r3, [pc, #140]	@ (80006cc <SystemInit+0x104>)
 8000640:	2200      	movs	r2, #0
 8000642:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000644:	4b21      	ldr	r3, [pc, #132]	@ (80006cc <SystemInit+0x104>)
 8000646:	2200      	movs	r2, #0
 8000648:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800064a:	4b20      	ldr	r3, [pc, #128]	@ (80006cc <SystemInit+0x104>)
 800064c:	2200      	movs	r2, #0
 800064e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000650:	4b1e      	ldr	r3, [pc, #120]	@ (80006cc <SystemInit+0x104>)
 8000652:	4a20      	ldr	r2, [pc, #128]	@ (80006d4 <SystemInit+0x10c>)
 8000654:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000656:	4b1d      	ldr	r3, [pc, #116]	@ (80006cc <SystemInit+0x104>)
 8000658:	4a1f      	ldr	r2, [pc, #124]	@ (80006d8 <SystemInit+0x110>)
 800065a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800065c:	4b1b      	ldr	r3, [pc, #108]	@ (80006cc <SystemInit+0x104>)
 800065e:	4a1f      	ldr	r2, [pc, #124]	@ (80006dc <SystemInit+0x114>)
 8000660:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000662:	4b1a      	ldr	r3, [pc, #104]	@ (80006cc <SystemInit+0x104>)
 8000664:	2200      	movs	r2, #0
 8000666:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000668:	4b18      	ldr	r3, [pc, #96]	@ (80006cc <SystemInit+0x104>)
 800066a:	4a1c      	ldr	r2, [pc, #112]	@ (80006dc <SystemInit+0x114>)
 800066c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800066e:	4b17      	ldr	r3, [pc, #92]	@ (80006cc <SystemInit+0x104>)
 8000670:	2200      	movs	r2, #0
 8000672:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000674:	4b15      	ldr	r3, [pc, #84]	@ (80006cc <SystemInit+0x104>)
 8000676:	4a19      	ldr	r2, [pc, #100]	@ (80006dc <SystemInit+0x114>)
 8000678:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800067a:	4b14      	ldr	r3, [pc, #80]	@ (80006cc <SystemInit+0x104>)
 800067c:	2200      	movs	r2, #0
 800067e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000680:	4b12      	ldr	r3, [pc, #72]	@ (80006cc <SystemInit+0x104>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a11      	ldr	r2, [pc, #68]	@ (80006cc <SystemInit+0x104>)
 8000686:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800068a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800068c:	4b0f      	ldr	r3, [pc, #60]	@ (80006cc <SystemInit+0x104>)
 800068e:	2200      	movs	r2, #0
 8000690:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000692:	4b13      	ldr	r3, [pc, #76]	@ (80006e0 <SystemInit+0x118>)
 8000694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000696:	4a12      	ldr	r2, [pc, #72]	@ (80006e0 <SystemInit+0x118>)
 8000698:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800069c:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800069e:	4b11      	ldr	r3, [pc, #68]	@ (80006e4 <SystemInit+0x11c>)
 80006a0:	681a      	ldr	r2, [r3, #0]
 80006a2:	4b11      	ldr	r3, [pc, #68]	@ (80006e8 <SystemInit+0x120>)
 80006a4:	4013      	ands	r3, r2
 80006a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80006aa:	d202      	bcs.n	80006b2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006ac:	4b0f      	ldr	r3, [pc, #60]	@ (80006ec <SystemInit+0x124>)
 80006ae:	2201      	movs	r2, #1
 80006b0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006b2:	4b0f      	ldr	r3, [pc, #60]	@ (80006f0 <SystemInit+0x128>)
 80006b4:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80006b8:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006ba:	bf00      	nop
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr
 80006c4:	e000ed00 	.word	0xe000ed00
 80006c8:	52002000 	.word	0x52002000
 80006cc:	58024400 	.word	0x58024400
 80006d0:	eaf6ed7f 	.word	0xeaf6ed7f
 80006d4:	02020200 	.word	0x02020200
 80006d8:	01ff0000 	.word	0x01ff0000
 80006dc:	01010280 	.word	0x01010280
 80006e0:	580000c0 	.word	0x580000c0
 80006e4:	5c001000 	.word	0x5c001000
 80006e8:	ffff0000 	.word	0xffff0000
 80006ec:	51008108 	.word	0x51008108
 80006f0:	52004000 	.word	0x52004000

080006f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80006fa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80006fe:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000700:	bf00      	nop
 8000702:	4b23      	ldr	r3, [pc, #140]	@ (8000790 <main+0x9c>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800070a:	2b00      	cmp	r3, #0
 800070c:	d004      	beq.n	8000718 <main+0x24>
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	1e5a      	subs	r2, r3, #1
 8000712:	607a      	str	r2, [r7, #4]
 8000714:	2b00      	cmp	r3, #0
 8000716:	dcf4      	bgt.n	8000702 <main+0xe>
  if ( timeout < 0 )
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	2b00      	cmp	r3, #0
 800071c:	da01      	bge.n	8000722 <main+0x2e>
  {
  Error_Handler();
 800071e:	f000 f98d 	bl	8000a3c <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000722:	f000 fa6f 	bl	8000c04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000726:	f000 f835 	bl	8000794 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800072a:	f000 f8b9 	bl	80008a0 <PeriphCommonClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800072e:	4b18      	ldr	r3, [pc, #96]	@ (8000790 <main+0x9c>)
 8000730:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000734:	4a16      	ldr	r2, [pc, #88]	@ (8000790 <main+0x9c>)
 8000736:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800073a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800073e:	4b14      	ldr	r3, [pc, #80]	@ (8000790 <main+0x9c>)
 8000740:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000744:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000748:	603b      	str	r3, [r7, #0]
 800074a:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 800074c:	2000      	movs	r0, #0
 800074e:	f000 fd8b 	bl	8001268 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000752:	2100      	movs	r1, #0
 8000754:	2000      	movs	r0, #0
 8000756:	f000 fda1 	bl	800129c <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800075a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800075e:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000760:	bf00      	nop
 8000762:	4b0b      	ldr	r3, [pc, #44]	@ (8000790 <main+0x9c>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800076a:	2b00      	cmp	r3, #0
 800076c:	d104      	bne.n	8000778 <main+0x84>
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	1e5a      	subs	r2, r3, #1
 8000772:	607a      	str	r2, [r7, #4]
 8000774:	2b00      	cmp	r3, #0
 8000776:	dcf4      	bgt.n	8000762 <main+0x6e>
if ( timeout < 0 )
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	2b00      	cmp	r3, #0
 800077c:	da01      	bge.n	8000782 <main+0x8e>
{
Error_Handler();
 800077e:	f000 f95d 	bl	8000a3c <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000782:	f000 f909 	bl	8000998 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000786:	f000 f8bb 	bl	8000900 <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800078a:	bf00      	nop
 800078c:	e7fd      	b.n	800078a <main+0x96>
 800078e:	bf00      	nop
 8000790:	58024400 	.word	0x58024400

08000794 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b09c      	sub	sp, #112	@ 0x70
 8000798:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800079a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800079e:	224c      	movs	r2, #76	@ 0x4c
 80007a0:	2100      	movs	r1, #0
 80007a2:	4618      	mov	r0, r3
 80007a4:	f004 fd80 	bl	80052a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007a8:	1d3b      	adds	r3, r7, #4
 80007aa:	2220      	movs	r2, #32
 80007ac:	2100      	movs	r1, #0
 80007ae:	4618      	mov	r0, r3
 80007b0:	f004 fd7a 	bl	80052a8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80007b4:	2004      	movs	r0, #4
 80007b6:	f000 fd85 	bl	80012c4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007ba:	2300      	movs	r3, #0
 80007bc:	603b      	str	r3, [r7, #0]
 80007be:	4b36      	ldr	r3, [pc, #216]	@ (8000898 <SystemClock_Config+0x104>)
 80007c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80007c2:	4a35      	ldr	r2, [pc, #212]	@ (8000898 <SystemClock_Config+0x104>)
 80007c4:	f023 0301 	bic.w	r3, r3, #1
 80007c8:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80007ca:	4b33      	ldr	r3, [pc, #204]	@ (8000898 <SystemClock_Config+0x104>)
 80007cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80007ce:	f003 0301 	and.w	r3, r3, #1
 80007d2:	603b      	str	r3, [r7, #0]
 80007d4:	4b31      	ldr	r3, [pc, #196]	@ (800089c <SystemClock_Config+0x108>)
 80007d6:	699b      	ldr	r3, [r3, #24]
 80007d8:	4a30      	ldr	r2, [pc, #192]	@ (800089c <SystemClock_Config+0x108>)
 80007da:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80007de:	6193      	str	r3, [r2, #24]
 80007e0:	4b2e      	ldr	r3, [pc, #184]	@ (800089c <SystemClock_Config+0x108>)
 80007e2:	699b      	ldr	r3, [r3, #24]
 80007e4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007e8:	603b      	str	r3, [r7, #0]
 80007ea:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80007ec:	bf00      	nop
 80007ee:	4b2b      	ldr	r3, [pc, #172]	@ (800089c <SystemClock_Config+0x108>)
 80007f0:	699b      	ldr	r3, [r3, #24]
 80007f2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80007f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80007fa:	d1f8      	bne.n	80007ee <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 80007fc:	230b      	movs	r3, #11
 80007fe:	627b      	str	r3, [r7, #36]	@ 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000800:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000804:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000806:	2301      	movs	r3, #1
 8000808:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800080a:	2340      	movs	r3, #64	@ 0x40
 800080c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800080e:	2301      	movs	r3, #1
 8000810:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000812:	2302      	movs	r3, #2
 8000814:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000816:	2302      	movs	r3, #2
 8000818:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 800081a:	2305      	movs	r3, #5
 800081c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 48;
 800081e:	2330      	movs	r3, #48	@ 0x30
 8000820:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000822:	2302      	movs	r3, #2
 8000824:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000826:	2305      	movs	r3, #5
 8000828:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800082a:	2302      	movs	r3, #2
 800082c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800082e:	2308      	movs	r3, #8
 8000830:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000832:	2300      	movs	r3, #0
 8000834:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000836:	2300      	movs	r3, #0
 8000838:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800083a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800083e:	4618      	mov	r0, r3
 8000840:	f000 fd9a 	bl	8001378 <HAL_RCC_OscConfig>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <SystemClock_Config+0xba>
  {
    Error_Handler();
 800084a:	f000 f8f7 	bl	8000a3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800084e:	233f      	movs	r3, #63	@ 0x3f
 8000850:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000852:	2300      	movs	r3, #0
 8000854:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000856:	2300      	movs	r3, #0
 8000858:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800085a:	2300      	movs	r3, #0
 800085c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800085e:	2300      	movs	r3, #0
 8000860:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000862:	2300      	movs	r3, #0
 8000864:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000866:	2300      	movs	r3, #0
 8000868:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800086a:	2300      	movs	r3, #0
 800086c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800086e:	1d3b      	adds	r3, r7, #4
 8000870:	2100      	movs	r1, #0
 8000872:	4618      	mov	r0, r3
 8000874:	f001 f9da 	bl	8001c2c <HAL_RCC_ClockConfig>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <SystemClock_Config+0xee>
  {
    Error_Handler();
 800087e:	f000 f8dd 	bl	8000a3c <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8000882:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000886:	2100      	movs	r1, #0
 8000888:	2000      	movs	r0, #0
 800088a:	f001 fb85 	bl	8001f98 <HAL_RCC_MCOConfig>
}
 800088e:	bf00      	nop
 8000890:	3770      	adds	r7, #112	@ 0x70
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	58000400 	.word	0x58000400
 800089c:	58024800 	.word	0x58024800

080008a0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b0b2      	sub	sp, #200	@ 0xc8
 80008a4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008a6:	463b      	mov	r3, r7
 80008a8:	22c8      	movs	r2, #200	@ 0xc8
 80008aa:	2100      	movs	r1, #0
 80008ac:	4618      	mov	r0, r3
 80008ae:	f004 fcfb 	bl	80052a8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80008b2:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80008b6:	f04f 0300 	mov.w	r3, #0
 80008ba:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 80008be:	2302      	movs	r3, #2
 80008c0:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 80008c2:	230c      	movs	r3, #12
 80008c4:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 80008c6:	2302      	movs	r3, #2
 80008c8:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80008ca:	2302      	movs	r3, #2
 80008cc:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80008ce:	2302      	movs	r3, #2
 80008d0:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80008d2:	23c0      	movs	r3, #192	@ 0xc0
 80008d4:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80008d6:	2320      	movs	r3, #32
 80008d8:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80008da:	2300      	movs	r3, #0
 80008dc:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80008de:	2300      	movs	r3, #0
 80008e0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008e4:	463b      	mov	r3, r7
 80008e6:	4618      	mov	r0, r3
 80008e8:	f001 fd96 	bl	8002418 <HAL_RCCEx_PeriphCLKConfig>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 80008f2:	f000 f8a3 	bl	8000a3c <Error_Handler>
  }
}
 80008f6:	bf00      	nop
 80008f8:	37c8      	adds	r7, #200	@ 0xc8
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
	...

08000900 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000904:	4b22      	ldr	r3, [pc, #136]	@ (8000990 <MX_USART1_UART_Init+0x90>)
 8000906:	4a23      	ldr	r2, [pc, #140]	@ (8000994 <MX_USART1_UART_Init+0x94>)
 8000908:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800090a:	4b21      	ldr	r3, [pc, #132]	@ (8000990 <MX_USART1_UART_Init+0x90>)
 800090c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000910:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000912:	4b1f      	ldr	r3, [pc, #124]	@ (8000990 <MX_USART1_UART_Init+0x90>)
 8000914:	2200      	movs	r2, #0
 8000916:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000918:	4b1d      	ldr	r3, [pc, #116]	@ (8000990 <MX_USART1_UART_Init+0x90>)
 800091a:	2200      	movs	r2, #0
 800091c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800091e:	4b1c      	ldr	r3, [pc, #112]	@ (8000990 <MX_USART1_UART_Init+0x90>)
 8000920:	2200      	movs	r2, #0
 8000922:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000924:	4b1a      	ldr	r3, [pc, #104]	@ (8000990 <MX_USART1_UART_Init+0x90>)
 8000926:	220c      	movs	r2, #12
 8000928:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800092a:	4b19      	ldr	r3, [pc, #100]	@ (8000990 <MX_USART1_UART_Init+0x90>)
 800092c:	2200      	movs	r2, #0
 800092e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000930:	4b17      	ldr	r3, [pc, #92]	@ (8000990 <MX_USART1_UART_Init+0x90>)
 8000932:	2200      	movs	r2, #0
 8000934:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000936:	4b16      	ldr	r3, [pc, #88]	@ (8000990 <MX_USART1_UART_Init+0x90>)
 8000938:	2200      	movs	r2, #0
 800093a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800093c:	4b14      	ldr	r3, [pc, #80]	@ (8000990 <MX_USART1_UART_Init+0x90>)
 800093e:	2200      	movs	r2, #0
 8000940:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000942:	4b13      	ldr	r3, [pc, #76]	@ (8000990 <MX_USART1_UART_Init+0x90>)
 8000944:	2200      	movs	r2, #0
 8000946:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000948:	4811      	ldr	r0, [pc, #68]	@ (8000990 <MX_USART1_UART_Init+0x90>)
 800094a:	f003 fbd1 	bl	80040f0 <HAL_UART_Init>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000954:	f000 f872 	bl	8000a3c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000958:	2100      	movs	r1, #0
 800095a:	480d      	ldr	r0, [pc, #52]	@ (8000990 <MX_USART1_UART_Init+0x90>)
 800095c:	f004 fbd9 	bl	8005112 <HAL_UARTEx_SetTxFifoThreshold>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000966:	f000 f869 	bl	8000a3c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800096a:	2100      	movs	r1, #0
 800096c:	4808      	ldr	r0, [pc, #32]	@ (8000990 <MX_USART1_UART_Init+0x90>)
 800096e:	f004 fc0e 	bl	800518e <HAL_UARTEx_SetRxFifoThreshold>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000978:	f000 f860 	bl	8000a3c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800097c:	4804      	ldr	r0, [pc, #16]	@ (8000990 <MX_USART1_UART_Init+0x90>)
 800097e:	f004 fb8f 	bl	80050a0 <HAL_UARTEx_DisableFifoMode>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000988:	f000 f858 	bl	8000a3c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800098c:	bf00      	nop
 800098e:	bd80      	pop	{r7, pc}
 8000990:	2400002c 	.word	0x2400002c
 8000994:	40011000 	.word	0x40011000

08000998 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b088      	sub	sp, #32
 800099c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800099e:	f107 030c 	add.w	r3, r7, #12
 80009a2:	2200      	movs	r2, #0
 80009a4:	601a      	str	r2, [r3, #0]
 80009a6:	605a      	str	r2, [r3, #4]
 80009a8:	609a      	str	r2, [r3, #8]
 80009aa:	60da      	str	r2, [r3, #12]
 80009ac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ae:	4b21      	ldr	r3, [pc, #132]	@ (8000a34 <MX_GPIO_Init+0x9c>)
 80009b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009b4:	4a1f      	ldr	r2, [pc, #124]	@ (8000a34 <MX_GPIO_Init+0x9c>)
 80009b6:	f043 0304 	orr.w	r3, r3, #4
 80009ba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009be:	4b1d      	ldr	r3, [pc, #116]	@ (8000a34 <MX_GPIO_Init+0x9c>)
 80009c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009c4:	f003 0304 	and.w	r3, r3, #4
 80009c8:	60bb      	str	r3, [r7, #8]
 80009ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009cc:	4b19      	ldr	r3, [pc, #100]	@ (8000a34 <MX_GPIO_Init+0x9c>)
 80009ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009d2:	4a18      	ldr	r2, [pc, #96]	@ (8000a34 <MX_GPIO_Init+0x9c>)
 80009d4:	f043 0301 	orr.w	r3, r3, #1
 80009d8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009dc:	4b15      	ldr	r3, [pc, #84]	@ (8000a34 <MX_GPIO_Init+0x9c>)
 80009de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009e2:	f003 0301 	and.w	r3, r3, #1
 80009e6:	607b      	str	r3, [r7, #4]
 80009e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009ea:	4b12      	ldr	r3, [pc, #72]	@ (8000a34 <MX_GPIO_Init+0x9c>)
 80009ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009f0:	4a10      	ldr	r2, [pc, #64]	@ (8000a34 <MX_GPIO_Init+0x9c>)
 80009f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009f6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009fa:	4b0e      	ldr	r3, [pc, #56]	@ (8000a34 <MX_GPIO_Init+0x9c>)
 80009fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a04:	603b      	str	r3, [r7, #0]
 8000a06:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : CEC_CK_MCO1_Pin */
  GPIO_InitStruct.Pin = CEC_CK_MCO1_Pin;
 8000a08:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a0c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a0e:	2302      	movs	r3, #2
 8000a10:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a12:	2300      	movs	r3, #0
 8000a14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a16:	2300      	movs	r3, #0
 8000a18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CEC_CK_MCO1_GPIO_Port, &GPIO_InitStruct);
 8000a1e:	f107 030c 	add.w	r3, r7, #12
 8000a22:	4619      	mov	r1, r3
 8000a24:	4804      	ldr	r0, [pc, #16]	@ (8000a38 <MX_GPIO_Init+0xa0>)
 8000a26:	f000 fa6f 	bl	8000f08 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a2a:	bf00      	nop
 8000a2c:	3720      	adds	r7, #32
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	58024400 	.word	0x58024400
 8000a38:	58020000 	.word	0x58020000

08000a3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a40:	b672      	cpsid	i
}
 8000a42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a44:	bf00      	nop
 8000a46:	e7fd      	b.n	8000a44 <Error_Handler+0x8>

08000a48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a4e:	4b0a      	ldr	r3, [pc, #40]	@ (8000a78 <HAL_MspInit+0x30>)
 8000a50:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000a54:	4a08      	ldr	r2, [pc, #32]	@ (8000a78 <HAL_MspInit+0x30>)
 8000a56:	f043 0302 	orr.w	r3, r3, #2
 8000a5a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000a5e:	4b06      	ldr	r3, [pc, #24]	@ (8000a78 <HAL_MspInit+0x30>)
 8000a60:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000a64:	f003 0302 	and.w	r3, r3, #2
 8000a68:	607b      	str	r3, [r7, #4]
 8000a6a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a6c:	bf00      	nop
 8000a6e:	370c      	adds	r7, #12
 8000a70:	46bd      	mov	sp, r7
 8000a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a76:	4770      	bx	lr
 8000a78:	58024400 	.word	0x58024400

08000a7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b0bc      	sub	sp, #240	@ 0xf0
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a84:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
 8000a8c:	605a      	str	r2, [r3, #4]
 8000a8e:	609a      	str	r2, [r3, #8]
 8000a90:	60da      	str	r2, [r3, #12]
 8000a92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a94:	f107 0310 	add.w	r3, r7, #16
 8000a98:	22c8      	movs	r2, #200	@ 0xc8
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f004 fc03 	bl	80052a8 <memset>
  if(huart->Instance==USART1)
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	4a27      	ldr	r2, [pc, #156]	@ (8000b44 <HAL_UART_MspInit+0xc8>)
 8000aa8:	4293      	cmp	r3, r2
 8000aaa:	d146      	bne.n	8000b3a <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000aac:	f04f 0201 	mov.w	r2, #1
 8000ab0:	f04f 0300 	mov.w	r3, #0
 8000ab4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000abe:	f107 0310 	add.w	r3, r7, #16
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f001 fca8 	bl	8002418 <HAL_RCCEx_PeriphCLKConfig>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000ace:	f7ff ffb5 	bl	8000a3c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ad2:	4b1d      	ldr	r3, [pc, #116]	@ (8000b48 <HAL_UART_MspInit+0xcc>)
 8000ad4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000ad8:	4a1b      	ldr	r2, [pc, #108]	@ (8000b48 <HAL_UART_MspInit+0xcc>)
 8000ada:	f043 0310 	orr.w	r3, r3, #16
 8000ade:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000ae2:	4b19      	ldr	r3, [pc, #100]	@ (8000b48 <HAL_UART_MspInit+0xcc>)
 8000ae4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000ae8:	f003 0310 	and.w	r3, r3, #16
 8000aec:	60fb      	str	r3, [r7, #12]
 8000aee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af0:	4b15      	ldr	r3, [pc, #84]	@ (8000b48 <HAL_UART_MspInit+0xcc>)
 8000af2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000af6:	4a14      	ldr	r2, [pc, #80]	@ (8000b48 <HAL_UART_MspInit+0xcc>)
 8000af8:	f043 0301 	orr.w	r3, r3, #1
 8000afc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b00:	4b11      	ldr	r3, [pc, #68]	@ (8000b48 <HAL_UART_MspInit+0xcc>)
 8000b02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b06:	f003 0301 	and.w	r3, r3, #1
 8000b0a:	60bb      	str	r3, [r7, #8]
 8000b0c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8000b0e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000b12:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b16:	2302      	movs	r3, #2
 8000b18:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b22:	2300      	movs	r3, #0
 8000b24:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b28:	2307      	movs	r3, #7
 8000b2a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b2e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000b32:	4619      	mov	r1, r3
 8000b34:	4805      	ldr	r0, [pc, #20]	@ (8000b4c <HAL_UART_MspInit+0xd0>)
 8000b36:	f000 f9e7 	bl	8000f08 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000b3a:	bf00      	nop
 8000b3c:	37f0      	adds	r7, #240	@ 0xf0
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	40011000 	.word	0x40011000
 8000b48:	58024400 	.word	0x58024400
 8000b4c:	58020000 	.word	0x58020000

08000b50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b54:	bf00      	nop
 8000b56:	e7fd      	b.n	8000b54 <NMI_Handler+0x4>

08000b58 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b5c:	bf00      	nop
 8000b5e:	e7fd      	b.n	8000b5c <HardFault_Handler+0x4>

08000b60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b64:	bf00      	nop
 8000b66:	e7fd      	b.n	8000b64 <MemManage_Handler+0x4>

08000b68 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b6c:	bf00      	nop
 8000b6e:	e7fd      	b.n	8000b6c <BusFault_Handler+0x4>

08000b70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b74:	bf00      	nop
 8000b76:	e7fd      	b.n	8000b74 <UsageFault_Handler+0x4>

08000b78 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b7c:	bf00      	nop
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr

08000b86 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b86:	b480      	push	{r7}
 8000b88:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b8a:	bf00      	nop
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr

08000b94 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b98:	bf00      	nop
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr

08000ba2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ba2:	b580      	push	{r7, lr}
 8000ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ba6:	f000 f89f 	bl	8000ce8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000baa:	bf00      	nop
 8000bac:	bd80      	pop	{r7, pc}
	...

08000bb0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000bb0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000be8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000bb4:	f7ff fd08 	bl	80005c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bb8:	480c      	ldr	r0, [pc, #48]	@ (8000bec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000bba:	490d      	ldr	r1, [pc, #52]	@ (8000bf0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000bbc:	4a0d      	ldr	r2, [pc, #52]	@ (8000bf4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000bbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bc0:	e002      	b.n	8000bc8 <LoopCopyDataInit>

08000bc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bc6:	3304      	adds	r3, #4

08000bc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bcc:	d3f9      	bcc.n	8000bc2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bce:	4a0a      	ldr	r2, [pc, #40]	@ (8000bf8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000bd0:	4c0a      	ldr	r4, [pc, #40]	@ (8000bfc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000bd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bd4:	e001      	b.n	8000bda <LoopFillZerobss>

08000bd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bd8:	3204      	adds	r2, #4

08000bda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bdc:	d3fb      	bcc.n	8000bd6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bde:	f004 fb6b 	bl	80052b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000be2:	f7ff fd87 	bl	80006f4 <main>
  bx  lr
 8000be6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000be8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000bec:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000bf0:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000bf4:	08005360 	.word	0x08005360
  ldr r2, =_sbss
 8000bf8:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000bfc:	240000c4 	.word	0x240000c4

08000c00 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c00:	e7fe      	b.n	8000c00 <ADC3_IRQHandler>
	...

08000c04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c0a:	2003      	movs	r0, #3
 8000c0c:	f000 f94a 	bl	8000ea4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000c10:	f001 fa2c 	bl	800206c <HAL_RCC_GetSysClockFreq>
 8000c14:	4602      	mov	r2, r0
 8000c16:	4b15      	ldr	r3, [pc, #84]	@ (8000c6c <HAL_Init+0x68>)
 8000c18:	699b      	ldr	r3, [r3, #24]
 8000c1a:	0a1b      	lsrs	r3, r3, #8
 8000c1c:	f003 030f 	and.w	r3, r3, #15
 8000c20:	4913      	ldr	r1, [pc, #76]	@ (8000c70 <HAL_Init+0x6c>)
 8000c22:	5ccb      	ldrb	r3, [r1, r3]
 8000c24:	f003 031f 	and.w	r3, r3, #31
 8000c28:	fa22 f303 	lsr.w	r3, r2, r3
 8000c2c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000c2e:	4b0f      	ldr	r3, [pc, #60]	@ (8000c6c <HAL_Init+0x68>)
 8000c30:	699b      	ldr	r3, [r3, #24]
 8000c32:	f003 030f 	and.w	r3, r3, #15
 8000c36:	4a0e      	ldr	r2, [pc, #56]	@ (8000c70 <HAL_Init+0x6c>)
 8000c38:	5cd3      	ldrb	r3, [r2, r3]
 8000c3a:	f003 031f 	and.w	r3, r3, #31
 8000c3e:	687a      	ldr	r2, [r7, #4]
 8000c40:	fa22 f303 	lsr.w	r3, r2, r3
 8000c44:	4a0b      	ldr	r2, [pc, #44]	@ (8000c74 <HAL_Init+0x70>)
 8000c46:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000c48:	4a0b      	ldr	r2, [pc, #44]	@ (8000c78 <HAL_Init+0x74>)
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c4e:	2000      	movs	r0, #0
 8000c50:	f000 f814 	bl	8000c7c <HAL_InitTick>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	e002      	b.n	8000c64 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000c5e:	f7ff fef3 	bl	8000a48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c62:	2300      	movs	r3, #0
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	3708      	adds	r7, #8
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	58024400 	.word	0x58024400
 8000c70:	08005318 	.word	0x08005318
 8000c74:	24000004 	.word	0x24000004
 8000c78:	24000000 	.word	0x24000000

08000c7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000c84:	4b15      	ldr	r3, [pc, #84]	@ (8000cdc <HAL_InitTick+0x60>)
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d101      	bne.n	8000c90 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	e021      	b.n	8000cd4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000c90:	4b13      	ldr	r3, [pc, #76]	@ (8000ce0 <HAL_InitTick+0x64>)
 8000c92:	681a      	ldr	r2, [r3, #0]
 8000c94:	4b11      	ldr	r3, [pc, #68]	@ (8000cdc <HAL_InitTick+0x60>)
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	4619      	mov	r1, r3
 8000c9a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ca2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f000 f921 	bl	8000eee <HAL_SYSTICK_Config>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	e00e      	b.n	8000cd4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	2b0f      	cmp	r3, #15
 8000cba:	d80a      	bhi.n	8000cd2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	6879      	ldr	r1, [r7, #4]
 8000cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000cc4:	f000 f8f9 	bl	8000eba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cc8:	4a06      	ldr	r2, [pc, #24]	@ (8000ce4 <HAL_InitTick+0x68>)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	e000      	b.n	8000cd4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000cd2:	2301      	movs	r3, #1
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	3708      	adds	r7, #8
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	2400000c 	.word	0x2400000c
 8000ce0:	24000000 	.word	0x24000000
 8000ce4:	24000008 	.word	0x24000008

08000ce8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000cec:	4b06      	ldr	r3, [pc, #24]	@ (8000d08 <HAL_IncTick+0x20>)
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	461a      	mov	r2, r3
 8000cf2:	4b06      	ldr	r3, [pc, #24]	@ (8000d0c <HAL_IncTick+0x24>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	4413      	add	r3, r2
 8000cf8:	4a04      	ldr	r2, [pc, #16]	@ (8000d0c <HAL_IncTick+0x24>)
 8000cfa:	6013      	str	r3, [r2, #0]
}
 8000cfc:	bf00      	nop
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop
 8000d08:	2400000c 	.word	0x2400000c
 8000d0c:	240000c0 	.word	0x240000c0

08000d10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  return uwTick;
 8000d14:	4b03      	ldr	r3, [pc, #12]	@ (8000d24 <HAL_GetTick+0x14>)
 8000d16:	681b      	ldr	r3, [r3, #0]
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	240000c0 	.word	0x240000c0

08000d28 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000d2c:	4b03      	ldr	r3, [pc, #12]	@ (8000d3c <HAL_GetREVID+0x14>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	0c1b      	lsrs	r3, r3, #16
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr
 8000d3c:	5c001000 	.word	0x5c001000

08000d40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b085      	sub	sp, #20
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	f003 0307 	and.w	r3, r3, #7
 8000d4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d50:	4b0b      	ldr	r3, [pc, #44]	@ (8000d80 <__NVIC_SetPriorityGrouping+0x40>)
 8000d52:	68db      	ldr	r3, [r3, #12]
 8000d54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d56:	68ba      	ldr	r2, [r7, #8]
 8000d58:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000d68:	4b06      	ldr	r3, [pc, #24]	@ (8000d84 <__NVIC_SetPriorityGrouping+0x44>)
 8000d6a:	4313      	orrs	r3, r2
 8000d6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d6e:	4a04      	ldr	r2, [pc, #16]	@ (8000d80 <__NVIC_SetPriorityGrouping+0x40>)
 8000d70:	68bb      	ldr	r3, [r7, #8]
 8000d72:	60d3      	str	r3, [r2, #12]
}
 8000d74:	bf00      	nop
 8000d76:	3714      	adds	r7, #20
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr
 8000d80:	e000ed00 	.word	0xe000ed00
 8000d84:	05fa0000 	.word	0x05fa0000

08000d88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d8c:	4b04      	ldr	r3, [pc, #16]	@ (8000da0 <__NVIC_GetPriorityGrouping+0x18>)
 8000d8e:	68db      	ldr	r3, [r3, #12]
 8000d90:	0a1b      	lsrs	r3, r3, #8
 8000d92:	f003 0307 	and.w	r3, r3, #7
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr
 8000da0:	e000ed00 	.word	0xe000ed00

08000da4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b083      	sub	sp, #12
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	4603      	mov	r3, r0
 8000dac:	6039      	str	r1, [r7, #0]
 8000dae:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000db0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	db0a      	blt.n	8000dce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	b2da      	uxtb	r2, r3
 8000dbc:	490c      	ldr	r1, [pc, #48]	@ (8000df0 <__NVIC_SetPriority+0x4c>)
 8000dbe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000dc2:	0112      	lsls	r2, r2, #4
 8000dc4:	b2d2      	uxtb	r2, r2
 8000dc6:	440b      	add	r3, r1
 8000dc8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dcc:	e00a      	b.n	8000de4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	b2da      	uxtb	r2, r3
 8000dd2:	4908      	ldr	r1, [pc, #32]	@ (8000df4 <__NVIC_SetPriority+0x50>)
 8000dd4:	88fb      	ldrh	r3, [r7, #6]
 8000dd6:	f003 030f 	and.w	r3, r3, #15
 8000dda:	3b04      	subs	r3, #4
 8000ddc:	0112      	lsls	r2, r2, #4
 8000dde:	b2d2      	uxtb	r2, r2
 8000de0:	440b      	add	r3, r1
 8000de2:	761a      	strb	r2, [r3, #24]
}
 8000de4:	bf00      	nop
 8000de6:	370c      	adds	r7, #12
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr
 8000df0:	e000e100 	.word	0xe000e100
 8000df4:	e000ed00 	.word	0xe000ed00

08000df8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b089      	sub	sp, #36	@ 0x24
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	60f8      	str	r0, [r7, #12]
 8000e00:	60b9      	str	r1, [r7, #8]
 8000e02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	f003 0307 	and.w	r3, r3, #7
 8000e0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e0c:	69fb      	ldr	r3, [r7, #28]
 8000e0e:	f1c3 0307 	rsb	r3, r3, #7
 8000e12:	2b04      	cmp	r3, #4
 8000e14:	bf28      	it	cs
 8000e16:	2304      	movcs	r3, #4
 8000e18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e1a:	69fb      	ldr	r3, [r7, #28]
 8000e1c:	3304      	adds	r3, #4
 8000e1e:	2b06      	cmp	r3, #6
 8000e20:	d902      	bls.n	8000e28 <NVIC_EncodePriority+0x30>
 8000e22:	69fb      	ldr	r3, [r7, #28]
 8000e24:	3b03      	subs	r3, #3
 8000e26:	e000      	b.n	8000e2a <NVIC_EncodePriority+0x32>
 8000e28:	2300      	movs	r3, #0
 8000e2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e2c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e30:	69bb      	ldr	r3, [r7, #24]
 8000e32:	fa02 f303 	lsl.w	r3, r2, r3
 8000e36:	43da      	mvns	r2, r3
 8000e38:	68bb      	ldr	r3, [r7, #8]
 8000e3a:	401a      	ands	r2, r3
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e40:	f04f 31ff 	mov.w	r1, #4294967295
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	fa01 f303 	lsl.w	r3, r1, r3
 8000e4a:	43d9      	mvns	r1, r3
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e50:	4313      	orrs	r3, r2
         );
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	3724      	adds	r7, #36	@ 0x24
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr
	...

08000e60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	3b01      	subs	r3, #1
 8000e6c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e70:	d301      	bcc.n	8000e76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e72:	2301      	movs	r3, #1
 8000e74:	e00f      	b.n	8000e96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e76:	4a0a      	ldr	r2, [pc, #40]	@ (8000ea0 <SysTick_Config+0x40>)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	3b01      	subs	r3, #1
 8000e7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e7e:	210f      	movs	r1, #15
 8000e80:	f04f 30ff 	mov.w	r0, #4294967295
 8000e84:	f7ff ff8e 	bl	8000da4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e88:	4b05      	ldr	r3, [pc, #20]	@ (8000ea0 <SysTick_Config+0x40>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e8e:	4b04      	ldr	r3, [pc, #16]	@ (8000ea0 <SysTick_Config+0x40>)
 8000e90:	2207      	movs	r2, #7
 8000e92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e94:	2300      	movs	r3, #0
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3708      	adds	r7, #8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	e000e010 	.word	0xe000e010

08000ea4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000eac:	6878      	ldr	r0, [r7, #4]
 8000eae:	f7ff ff47 	bl	8000d40 <__NVIC_SetPriorityGrouping>
}
 8000eb2:	bf00      	nop
 8000eb4:	3708      	adds	r7, #8
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}

08000eba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eba:	b580      	push	{r7, lr}
 8000ebc:	b086      	sub	sp, #24
 8000ebe:	af00      	add	r7, sp, #0
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	60b9      	str	r1, [r7, #8]
 8000ec4:	607a      	str	r2, [r7, #4]
 8000ec6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ec8:	f7ff ff5e 	bl	8000d88 <__NVIC_GetPriorityGrouping>
 8000ecc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ece:	687a      	ldr	r2, [r7, #4]
 8000ed0:	68b9      	ldr	r1, [r7, #8]
 8000ed2:	6978      	ldr	r0, [r7, #20]
 8000ed4:	f7ff ff90 	bl	8000df8 <NVIC_EncodePriority>
 8000ed8:	4602      	mov	r2, r0
 8000eda:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000ede:	4611      	mov	r1, r2
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f7ff ff5f 	bl	8000da4 <__NVIC_SetPriority>
}
 8000ee6:	bf00      	nop
 8000ee8:	3718      	adds	r7, #24
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}

08000eee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eee:	b580      	push	{r7, lr}
 8000ef0:	b082      	sub	sp, #8
 8000ef2:	af00      	add	r7, sp, #0
 8000ef4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ef6:	6878      	ldr	r0, [r7, #4]
 8000ef8:	f7ff ffb2 	bl	8000e60 <SysTick_Config>
 8000efc:	4603      	mov	r3, r0
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	3708      	adds	r7, #8
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
	...

08000f08 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b089      	sub	sp, #36	@ 0x24
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
 8000f10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000f12:	2300      	movs	r3, #0
 8000f14:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000f16:	4b89      	ldr	r3, [pc, #548]	@ (800113c <HAL_GPIO_Init+0x234>)
 8000f18:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000f1a:	e194      	b.n	8001246 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	681a      	ldr	r2, [r3, #0]
 8000f20:	2101      	movs	r1, #1
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	fa01 f303 	lsl.w	r3, r1, r3
 8000f28:	4013      	ands	r3, r2
 8000f2a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000f2c:	693b      	ldr	r3, [r7, #16]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	f000 8186 	beq.w	8001240 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	f003 0303 	and.w	r3, r3, #3
 8000f3c:	2b01      	cmp	r3, #1
 8000f3e:	d005      	beq.n	8000f4c <HAL_GPIO_Init+0x44>
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	f003 0303 	and.w	r3, r3, #3
 8000f48:	2b02      	cmp	r3, #2
 8000f4a:	d130      	bne.n	8000fae <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	689b      	ldr	r3, [r3, #8]
 8000f50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	005b      	lsls	r3, r3, #1
 8000f56:	2203      	movs	r2, #3
 8000f58:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5c:	43db      	mvns	r3, r3
 8000f5e:	69ba      	ldr	r2, [r7, #24]
 8000f60:	4013      	ands	r3, r2
 8000f62:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	68da      	ldr	r2, [r3, #12]
 8000f68:	69fb      	ldr	r3, [r7, #28]
 8000f6a:	005b      	lsls	r3, r3, #1
 8000f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f70:	69ba      	ldr	r2, [r7, #24]
 8000f72:	4313      	orrs	r3, r2
 8000f74:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	69ba      	ldr	r2, [r7, #24]
 8000f7a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f82:	2201      	movs	r2, #1
 8000f84:	69fb      	ldr	r3, [r7, #28]
 8000f86:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8a:	43db      	mvns	r3, r3
 8000f8c:	69ba      	ldr	r2, [r7, #24]
 8000f8e:	4013      	ands	r3, r2
 8000f90:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	091b      	lsrs	r3, r3, #4
 8000f98:	f003 0201 	and.w	r2, r3, #1
 8000f9c:	69fb      	ldr	r3, [r7, #28]
 8000f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa2:	69ba      	ldr	r2, [r7, #24]
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	69ba      	ldr	r2, [r7, #24]
 8000fac:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	f003 0303 	and.w	r3, r3, #3
 8000fb6:	2b03      	cmp	r3, #3
 8000fb8:	d017      	beq.n	8000fea <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	68db      	ldr	r3, [r3, #12]
 8000fbe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000fc0:	69fb      	ldr	r3, [r7, #28]
 8000fc2:	005b      	lsls	r3, r3, #1
 8000fc4:	2203      	movs	r2, #3
 8000fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fca:	43db      	mvns	r3, r3
 8000fcc:	69ba      	ldr	r2, [r7, #24]
 8000fce:	4013      	ands	r3, r2
 8000fd0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	689a      	ldr	r2, [r3, #8]
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	005b      	lsls	r3, r3, #1
 8000fda:	fa02 f303 	lsl.w	r3, r2, r3
 8000fde:	69ba      	ldr	r2, [r7, #24]
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	69ba      	ldr	r2, [r7, #24]
 8000fe8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	f003 0303 	and.w	r3, r3, #3
 8000ff2:	2b02      	cmp	r3, #2
 8000ff4:	d123      	bne.n	800103e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	08da      	lsrs	r2, r3, #3
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	3208      	adds	r2, #8
 8000ffe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001002:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001004:	69fb      	ldr	r3, [r7, #28]
 8001006:	f003 0307 	and.w	r3, r3, #7
 800100a:	009b      	lsls	r3, r3, #2
 800100c:	220f      	movs	r2, #15
 800100e:	fa02 f303 	lsl.w	r3, r2, r3
 8001012:	43db      	mvns	r3, r3
 8001014:	69ba      	ldr	r2, [r7, #24]
 8001016:	4013      	ands	r3, r2
 8001018:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	691a      	ldr	r2, [r3, #16]
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	f003 0307 	and.w	r3, r3, #7
 8001024:	009b      	lsls	r3, r3, #2
 8001026:	fa02 f303 	lsl.w	r3, r2, r3
 800102a:	69ba      	ldr	r2, [r7, #24]
 800102c:	4313      	orrs	r3, r2
 800102e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001030:	69fb      	ldr	r3, [r7, #28]
 8001032:	08da      	lsrs	r2, r3, #3
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	3208      	adds	r2, #8
 8001038:	69b9      	ldr	r1, [r7, #24]
 800103a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001044:	69fb      	ldr	r3, [r7, #28]
 8001046:	005b      	lsls	r3, r3, #1
 8001048:	2203      	movs	r2, #3
 800104a:	fa02 f303 	lsl.w	r3, r2, r3
 800104e:	43db      	mvns	r3, r3
 8001050:	69ba      	ldr	r2, [r7, #24]
 8001052:	4013      	ands	r3, r2
 8001054:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	f003 0203 	and.w	r2, r3, #3
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	005b      	lsls	r3, r3, #1
 8001062:	fa02 f303 	lsl.w	r3, r2, r3
 8001066:	69ba      	ldr	r2, [r7, #24]
 8001068:	4313      	orrs	r3, r2
 800106a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	69ba      	ldr	r2, [r7, #24]
 8001070:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800107a:	2b00      	cmp	r3, #0
 800107c:	f000 80e0 	beq.w	8001240 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001080:	4b2f      	ldr	r3, [pc, #188]	@ (8001140 <HAL_GPIO_Init+0x238>)
 8001082:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001086:	4a2e      	ldr	r2, [pc, #184]	@ (8001140 <HAL_GPIO_Init+0x238>)
 8001088:	f043 0302 	orr.w	r3, r3, #2
 800108c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001090:	4b2b      	ldr	r3, [pc, #172]	@ (8001140 <HAL_GPIO_Init+0x238>)
 8001092:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001096:	f003 0302 	and.w	r3, r3, #2
 800109a:	60fb      	str	r3, [r7, #12]
 800109c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800109e:	4a29      	ldr	r2, [pc, #164]	@ (8001144 <HAL_GPIO_Init+0x23c>)
 80010a0:	69fb      	ldr	r3, [r7, #28]
 80010a2:	089b      	lsrs	r3, r3, #2
 80010a4:	3302      	adds	r3, #2
 80010a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80010ac:	69fb      	ldr	r3, [r7, #28]
 80010ae:	f003 0303 	and.w	r3, r3, #3
 80010b2:	009b      	lsls	r3, r3, #2
 80010b4:	220f      	movs	r2, #15
 80010b6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ba:	43db      	mvns	r3, r3
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	4013      	ands	r3, r2
 80010c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4a20      	ldr	r2, [pc, #128]	@ (8001148 <HAL_GPIO_Init+0x240>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d052      	beq.n	8001170 <HAL_GPIO_Init+0x268>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4a1f      	ldr	r2, [pc, #124]	@ (800114c <HAL_GPIO_Init+0x244>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d031      	beq.n	8001136 <HAL_GPIO_Init+0x22e>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4a1e      	ldr	r2, [pc, #120]	@ (8001150 <HAL_GPIO_Init+0x248>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d02b      	beq.n	8001132 <HAL_GPIO_Init+0x22a>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4a1d      	ldr	r2, [pc, #116]	@ (8001154 <HAL_GPIO_Init+0x24c>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d025      	beq.n	800112e <HAL_GPIO_Init+0x226>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4a1c      	ldr	r2, [pc, #112]	@ (8001158 <HAL_GPIO_Init+0x250>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d01f      	beq.n	800112a <HAL_GPIO_Init+0x222>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4a1b      	ldr	r2, [pc, #108]	@ (800115c <HAL_GPIO_Init+0x254>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d019      	beq.n	8001126 <HAL_GPIO_Init+0x21e>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4a1a      	ldr	r2, [pc, #104]	@ (8001160 <HAL_GPIO_Init+0x258>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d013      	beq.n	8001122 <HAL_GPIO_Init+0x21a>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4a19      	ldr	r2, [pc, #100]	@ (8001164 <HAL_GPIO_Init+0x25c>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d00d      	beq.n	800111e <HAL_GPIO_Init+0x216>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4a18      	ldr	r2, [pc, #96]	@ (8001168 <HAL_GPIO_Init+0x260>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d007      	beq.n	800111a <HAL_GPIO_Init+0x212>
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4a17      	ldr	r2, [pc, #92]	@ (800116c <HAL_GPIO_Init+0x264>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d101      	bne.n	8001116 <HAL_GPIO_Init+0x20e>
 8001112:	2309      	movs	r3, #9
 8001114:	e02d      	b.n	8001172 <HAL_GPIO_Init+0x26a>
 8001116:	230a      	movs	r3, #10
 8001118:	e02b      	b.n	8001172 <HAL_GPIO_Init+0x26a>
 800111a:	2308      	movs	r3, #8
 800111c:	e029      	b.n	8001172 <HAL_GPIO_Init+0x26a>
 800111e:	2307      	movs	r3, #7
 8001120:	e027      	b.n	8001172 <HAL_GPIO_Init+0x26a>
 8001122:	2306      	movs	r3, #6
 8001124:	e025      	b.n	8001172 <HAL_GPIO_Init+0x26a>
 8001126:	2305      	movs	r3, #5
 8001128:	e023      	b.n	8001172 <HAL_GPIO_Init+0x26a>
 800112a:	2304      	movs	r3, #4
 800112c:	e021      	b.n	8001172 <HAL_GPIO_Init+0x26a>
 800112e:	2303      	movs	r3, #3
 8001130:	e01f      	b.n	8001172 <HAL_GPIO_Init+0x26a>
 8001132:	2302      	movs	r3, #2
 8001134:	e01d      	b.n	8001172 <HAL_GPIO_Init+0x26a>
 8001136:	2301      	movs	r3, #1
 8001138:	e01b      	b.n	8001172 <HAL_GPIO_Init+0x26a>
 800113a:	bf00      	nop
 800113c:	58000080 	.word	0x58000080
 8001140:	58024400 	.word	0x58024400
 8001144:	58000400 	.word	0x58000400
 8001148:	58020000 	.word	0x58020000
 800114c:	58020400 	.word	0x58020400
 8001150:	58020800 	.word	0x58020800
 8001154:	58020c00 	.word	0x58020c00
 8001158:	58021000 	.word	0x58021000
 800115c:	58021400 	.word	0x58021400
 8001160:	58021800 	.word	0x58021800
 8001164:	58021c00 	.word	0x58021c00
 8001168:	58022000 	.word	0x58022000
 800116c:	58022400 	.word	0x58022400
 8001170:	2300      	movs	r3, #0
 8001172:	69fa      	ldr	r2, [r7, #28]
 8001174:	f002 0203 	and.w	r2, r2, #3
 8001178:	0092      	lsls	r2, r2, #2
 800117a:	4093      	lsls	r3, r2
 800117c:	69ba      	ldr	r2, [r7, #24]
 800117e:	4313      	orrs	r3, r2
 8001180:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001182:	4938      	ldr	r1, [pc, #224]	@ (8001264 <HAL_GPIO_Init+0x35c>)
 8001184:	69fb      	ldr	r3, [r7, #28]
 8001186:	089b      	lsrs	r3, r3, #2
 8001188:	3302      	adds	r3, #2
 800118a:	69ba      	ldr	r2, [r7, #24]
 800118c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001190:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	43db      	mvns	r3, r3
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	4013      	ands	r3, r2
 80011a0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d003      	beq.n	80011b6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80011ae:	69ba      	ldr	r2, [r7, #24]
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	4313      	orrs	r3, r2
 80011b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80011b6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80011ba:	69bb      	ldr	r3, [r7, #24]
 80011bc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80011be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80011c6:	693b      	ldr	r3, [r7, #16]
 80011c8:	43db      	mvns	r3, r3
 80011ca:	69ba      	ldr	r2, [r7, #24]
 80011cc:	4013      	ands	r3, r2
 80011ce:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d003      	beq.n	80011e4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80011dc:	69ba      	ldr	r2, [r7, #24]
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	4313      	orrs	r3, r2
 80011e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80011e4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80011e8:	69bb      	ldr	r3, [r7, #24]
 80011ea:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	43db      	mvns	r3, r3
 80011f6:	69ba      	ldr	r2, [r7, #24]
 80011f8:	4013      	ands	r3, r2
 80011fa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001204:	2b00      	cmp	r3, #0
 8001206:	d003      	beq.n	8001210 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	693b      	ldr	r3, [r7, #16]
 800120c:	4313      	orrs	r3, r2
 800120e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	69ba      	ldr	r2, [r7, #24]
 8001214:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	43db      	mvns	r3, r3
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	4013      	ands	r3, r2
 8001224:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800122e:	2b00      	cmp	r3, #0
 8001230:	d003      	beq.n	800123a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001232:	69ba      	ldr	r2, [r7, #24]
 8001234:	693b      	ldr	r3, [r7, #16]
 8001236:	4313      	orrs	r3, r2
 8001238:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001240:	69fb      	ldr	r3, [r7, #28]
 8001242:	3301      	adds	r3, #1
 8001244:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	fa22 f303 	lsr.w	r3, r2, r3
 8001250:	2b00      	cmp	r3, #0
 8001252:	f47f ae63 	bne.w	8000f1c <HAL_GPIO_Init+0x14>
  }
}
 8001256:	bf00      	nop
 8001258:	bf00      	nop
 800125a:	3724      	adds	r7, #36	@ 0x24
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr
 8001264:	58000400 	.word	0x58000400

08001268 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001270:	4a08      	ldr	r2, [pc, #32]	@ (8001294 <HAL_HSEM_FastTake+0x2c>)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	3320      	adds	r3, #32
 8001276:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800127a:	4a07      	ldr	r2, [pc, #28]	@ (8001298 <HAL_HSEM_FastTake+0x30>)
 800127c:	4293      	cmp	r3, r2
 800127e:	d101      	bne.n	8001284 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8001280:	2300      	movs	r3, #0
 8001282:	e000      	b.n	8001286 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001284:	2301      	movs	r3, #1
}
 8001286:	4618      	mov	r0, r3
 8001288:	370c      	adds	r7, #12
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	58026400 	.word	0x58026400
 8001298:	80000300 	.word	0x80000300

0800129c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
 80012a4:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80012a6:	4906      	ldr	r1, [pc, #24]	@ (80012c0 <HAL_HSEM_Release+0x24>)
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80012b4:	bf00      	nop
 80012b6:	370c      	adds	r7, #12
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr
 80012c0:	58026400 	.word	0x58026400

080012c4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80012cc:	4b29      	ldr	r3, [pc, #164]	@ (8001374 <HAL_PWREx_ConfigSupply+0xb0>)
 80012ce:	68db      	ldr	r3, [r3, #12]
 80012d0:	f003 0307 	and.w	r3, r3, #7
 80012d4:	2b06      	cmp	r3, #6
 80012d6:	d00a      	beq.n	80012ee <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80012d8:	4b26      	ldr	r3, [pc, #152]	@ (8001374 <HAL_PWREx_ConfigSupply+0xb0>)
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80012e0:	687a      	ldr	r2, [r7, #4]
 80012e2:	429a      	cmp	r2, r3
 80012e4:	d001      	beq.n	80012ea <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80012e6:	2301      	movs	r3, #1
 80012e8:	e040      	b.n	800136c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80012ea:	2300      	movs	r3, #0
 80012ec:	e03e      	b.n	800136c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80012ee:	4b21      	ldr	r3, [pc, #132]	@ (8001374 <HAL_PWREx_ConfigSupply+0xb0>)
 80012f0:	68db      	ldr	r3, [r3, #12]
 80012f2:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80012f6:	491f      	ldr	r1, [pc, #124]	@ (8001374 <HAL_PWREx_ConfigSupply+0xb0>)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	4313      	orrs	r3, r2
 80012fc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80012fe:	f7ff fd07 	bl	8000d10 <HAL_GetTick>
 8001302:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001304:	e009      	b.n	800131a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001306:	f7ff fd03 	bl	8000d10 <HAL_GetTick>
 800130a:	4602      	mov	r2, r0
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	1ad3      	subs	r3, r2, r3
 8001310:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001314:	d901      	bls.n	800131a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001316:	2301      	movs	r3, #1
 8001318:	e028      	b.n	800136c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800131a:	4b16      	ldr	r3, [pc, #88]	@ (8001374 <HAL_PWREx_ConfigSupply+0xb0>)
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001322:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001326:	d1ee      	bne.n	8001306 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2b1e      	cmp	r3, #30
 800132c:	d008      	beq.n	8001340 <HAL_PWREx_ConfigSupply+0x7c>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2b2e      	cmp	r3, #46	@ 0x2e
 8001332:	d005      	beq.n	8001340 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2b1d      	cmp	r3, #29
 8001338:	d002      	beq.n	8001340 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2b2d      	cmp	r3, #45	@ 0x2d
 800133e:	d114      	bne.n	800136a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001340:	f7ff fce6 	bl	8000d10 <HAL_GetTick>
 8001344:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001346:	e009      	b.n	800135c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001348:	f7ff fce2 	bl	8000d10 <HAL_GetTick>
 800134c:	4602      	mov	r2, r0
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001356:	d901      	bls.n	800135c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001358:	2301      	movs	r3, #1
 800135a:	e007      	b.n	800136c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800135c:	4b05      	ldr	r3, [pc, #20]	@ (8001374 <HAL_PWREx_ConfigSupply+0xb0>)
 800135e:	68db      	ldr	r3, [r3, #12]
 8001360:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001364:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001368:	d1ee      	bne.n	8001348 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800136a:	2300      	movs	r3, #0
}
 800136c:	4618      	mov	r0, r3
 800136e:	3710      	adds	r7, #16
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	58024800 	.word	0x58024800

08001378 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b08c      	sub	sp, #48	@ 0x30
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d102      	bne.n	800138c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	f000 bc48 	b.w	8001c1c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f003 0301 	and.w	r3, r3, #1
 8001394:	2b00      	cmp	r3, #0
 8001396:	f000 8088 	beq.w	80014aa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800139a:	4b99      	ldr	r3, [pc, #612]	@ (8001600 <HAL_RCC_OscConfig+0x288>)
 800139c:	691b      	ldr	r3, [r3, #16]
 800139e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80013a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80013a4:	4b96      	ldr	r3, [pc, #600]	@ (8001600 <HAL_RCC_OscConfig+0x288>)
 80013a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013a8:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80013aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013ac:	2b10      	cmp	r3, #16
 80013ae:	d007      	beq.n	80013c0 <HAL_RCC_OscConfig+0x48>
 80013b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013b2:	2b18      	cmp	r3, #24
 80013b4:	d111      	bne.n	80013da <HAL_RCC_OscConfig+0x62>
 80013b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013b8:	f003 0303 	and.w	r3, r3, #3
 80013bc:	2b02      	cmp	r3, #2
 80013be:	d10c      	bne.n	80013da <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013c0:	4b8f      	ldr	r3, [pc, #572]	@ (8001600 <HAL_RCC_OscConfig+0x288>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d06d      	beq.n	80014a8 <HAL_RCC_OscConfig+0x130>
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d169      	bne.n	80014a8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80013d4:	2301      	movs	r3, #1
 80013d6:	f000 bc21 	b.w	8001c1c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80013e2:	d106      	bne.n	80013f2 <HAL_RCC_OscConfig+0x7a>
 80013e4:	4b86      	ldr	r3, [pc, #536]	@ (8001600 <HAL_RCC_OscConfig+0x288>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a85      	ldr	r2, [pc, #532]	@ (8001600 <HAL_RCC_OscConfig+0x288>)
 80013ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013ee:	6013      	str	r3, [r2, #0]
 80013f0:	e02e      	b.n	8001450 <HAL_RCC_OscConfig+0xd8>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d10c      	bne.n	8001414 <HAL_RCC_OscConfig+0x9c>
 80013fa:	4b81      	ldr	r3, [pc, #516]	@ (8001600 <HAL_RCC_OscConfig+0x288>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4a80      	ldr	r2, [pc, #512]	@ (8001600 <HAL_RCC_OscConfig+0x288>)
 8001400:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001404:	6013      	str	r3, [r2, #0]
 8001406:	4b7e      	ldr	r3, [pc, #504]	@ (8001600 <HAL_RCC_OscConfig+0x288>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4a7d      	ldr	r2, [pc, #500]	@ (8001600 <HAL_RCC_OscConfig+0x288>)
 800140c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001410:	6013      	str	r3, [r2, #0]
 8001412:	e01d      	b.n	8001450 <HAL_RCC_OscConfig+0xd8>
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800141c:	d10c      	bne.n	8001438 <HAL_RCC_OscConfig+0xc0>
 800141e:	4b78      	ldr	r3, [pc, #480]	@ (8001600 <HAL_RCC_OscConfig+0x288>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a77      	ldr	r2, [pc, #476]	@ (8001600 <HAL_RCC_OscConfig+0x288>)
 8001424:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001428:	6013      	str	r3, [r2, #0]
 800142a:	4b75      	ldr	r3, [pc, #468]	@ (8001600 <HAL_RCC_OscConfig+0x288>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a74      	ldr	r2, [pc, #464]	@ (8001600 <HAL_RCC_OscConfig+0x288>)
 8001430:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001434:	6013      	str	r3, [r2, #0]
 8001436:	e00b      	b.n	8001450 <HAL_RCC_OscConfig+0xd8>
 8001438:	4b71      	ldr	r3, [pc, #452]	@ (8001600 <HAL_RCC_OscConfig+0x288>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a70      	ldr	r2, [pc, #448]	@ (8001600 <HAL_RCC_OscConfig+0x288>)
 800143e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001442:	6013      	str	r3, [r2, #0]
 8001444:	4b6e      	ldr	r3, [pc, #440]	@ (8001600 <HAL_RCC_OscConfig+0x288>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a6d      	ldr	r2, [pc, #436]	@ (8001600 <HAL_RCC_OscConfig+0x288>)
 800144a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800144e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d013      	beq.n	8001480 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001458:	f7ff fc5a 	bl	8000d10 <HAL_GetTick>
 800145c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800145e:	e008      	b.n	8001472 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001460:	f7ff fc56 	bl	8000d10 <HAL_GetTick>
 8001464:	4602      	mov	r2, r0
 8001466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	2b64      	cmp	r3, #100	@ 0x64
 800146c:	d901      	bls.n	8001472 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800146e:	2303      	movs	r3, #3
 8001470:	e3d4      	b.n	8001c1c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001472:	4b63      	ldr	r3, [pc, #396]	@ (8001600 <HAL_RCC_OscConfig+0x288>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800147a:	2b00      	cmp	r3, #0
 800147c:	d0f0      	beq.n	8001460 <HAL_RCC_OscConfig+0xe8>
 800147e:	e014      	b.n	80014aa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001480:	f7ff fc46 	bl	8000d10 <HAL_GetTick>
 8001484:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001486:	e008      	b.n	800149a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001488:	f7ff fc42 	bl	8000d10 <HAL_GetTick>
 800148c:	4602      	mov	r2, r0
 800148e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001490:	1ad3      	subs	r3, r2, r3
 8001492:	2b64      	cmp	r3, #100	@ 0x64
 8001494:	d901      	bls.n	800149a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001496:	2303      	movs	r3, #3
 8001498:	e3c0      	b.n	8001c1c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800149a:	4b59      	ldr	r3, [pc, #356]	@ (8001600 <HAL_RCC_OscConfig+0x288>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d1f0      	bne.n	8001488 <HAL_RCC_OscConfig+0x110>
 80014a6:	e000      	b.n	80014aa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f003 0302 	and.w	r3, r3, #2
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	f000 80ca 	beq.w	800164c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014b8:	4b51      	ldr	r3, [pc, #324]	@ (8001600 <HAL_RCC_OscConfig+0x288>)
 80014ba:	691b      	ldr	r3, [r3, #16]
 80014bc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80014c0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80014c2:	4b4f      	ldr	r3, [pc, #316]	@ (8001600 <HAL_RCC_OscConfig+0x288>)
 80014c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014c6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80014c8:	6a3b      	ldr	r3, [r7, #32]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d007      	beq.n	80014de <HAL_RCC_OscConfig+0x166>
 80014ce:	6a3b      	ldr	r3, [r7, #32]
 80014d0:	2b18      	cmp	r3, #24
 80014d2:	d156      	bne.n	8001582 <HAL_RCC_OscConfig+0x20a>
 80014d4:	69fb      	ldr	r3, [r7, #28]
 80014d6:	f003 0303 	and.w	r3, r3, #3
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d151      	bne.n	8001582 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014de:	4b48      	ldr	r3, [pc, #288]	@ (8001600 <HAL_RCC_OscConfig+0x288>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f003 0304 	and.w	r3, r3, #4
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d005      	beq.n	80014f6 <HAL_RCC_OscConfig+0x17e>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	68db      	ldr	r3, [r3, #12]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d101      	bne.n	80014f6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	e392      	b.n	8001c1c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80014f6:	4b42      	ldr	r3, [pc, #264]	@ (8001600 <HAL_RCC_OscConfig+0x288>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f023 0219 	bic.w	r2, r3, #25
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	68db      	ldr	r3, [r3, #12]
 8001502:	493f      	ldr	r1, [pc, #252]	@ (8001600 <HAL_RCC_OscConfig+0x288>)
 8001504:	4313      	orrs	r3, r2
 8001506:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001508:	f7ff fc02 	bl	8000d10 <HAL_GetTick>
 800150c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800150e:	e008      	b.n	8001522 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001510:	f7ff fbfe 	bl	8000d10 <HAL_GetTick>
 8001514:	4602      	mov	r2, r0
 8001516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	2b02      	cmp	r3, #2
 800151c:	d901      	bls.n	8001522 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800151e:	2303      	movs	r3, #3
 8001520:	e37c      	b.n	8001c1c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001522:	4b37      	ldr	r3, [pc, #220]	@ (8001600 <HAL_RCC_OscConfig+0x288>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f003 0304 	and.w	r3, r3, #4
 800152a:	2b00      	cmp	r3, #0
 800152c:	d0f0      	beq.n	8001510 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800152e:	f7ff fbfb 	bl	8000d28 <HAL_GetREVID>
 8001532:	4603      	mov	r3, r0
 8001534:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001538:	4293      	cmp	r3, r2
 800153a:	d817      	bhi.n	800156c <HAL_RCC_OscConfig+0x1f4>
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	691b      	ldr	r3, [r3, #16]
 8001540:	2b40      	cmp	r3, #64	@ 0x40
 8001542:	d108      	bne.n	8001556 <HAL_RCC_OscConfig+0x1de>
 8001544:	4b2e      	ldr	r3, [pc, #184]	@ (8001600 <HAL_RCC_OscConfig+0x288>)
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800154c:	4a2c      	ldr	r2, [pc, #176]	@ (8001600 <HAL_RCC_OscConfig+0x288>)
 800154e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001552:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001554:	e07a      	b.n	800164c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001556:	4b2a      	ldr	r3, [pc, #168]	@ (8001600 <HAL_RCC_OscConfig+0x288>)
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	691b      	ldr	r3, [r3, #16]
 8001562:	031b      	lsls	r3, r3, #12
 8001564:	4926      	ldr	r1, [pc, #152]	@ (8001600 <HAL_RCC_OscConfig+0x288>)
 8001566:	4313      	orrs	r3, r2
 8001568:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800156a:	e06f      	b.n	800164c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800156c:	4b24      	ldr	r3, [pc, #144]	@ (8001600 <HAL_RCC_OscConfig+0x288>)
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	691b      	ldr	r3, [r3, #16]
 8001578:	061b      	lsls	r3, r3, #24
 800157a:	4921      	ldr	r1, [pc, #132]	@ (8001600 <HAL_RCC_OscConfig+0x288>)
 800157c:	4313      	orrs	r3, r2
 800157e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001580:	e064      	b.n	800164c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	68db      	ldr	r3, [r3, #12]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d047      	beq.n	800161a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800158a:	4b1d      	ldr	r3, [pc, #116]	@ (8001600 <HAL_RCC_OscConfig+0x288>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f023 0219 	bic.w	r2, r3, #25
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	68db      	ldr	r3, [r3, #12]
 8001596:	491a      	ldr	r1, [pc, #104]	@ (8001600 <HAL_RCC_OscConfig+0x288>)
 8001598:	4313      	orrs	r3, r2
 800159a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800159c:	f7ff fbb8 	bl	8000d10 <HAL_GetTick>
 80015a0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80015a2:	e008      	b.n	80015b6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015a4:	f7ff fbb4 	bl	8000d10 <HAL_GetTick>
 80015a8:	4602      	mov	r2, r0
 80015aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	2b02      	cmp	r3, #2
 80015b0:	d901      	bls.n	80015b6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80015b2:	2303      	movs	r3, #3
 80015b4:	e332      	b.n	8001c1c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80015b6:	4b12      	ldr	r3, [pc, #72]	@ (8001600 <HAL_RCC_OscConfig+0x288>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f003 0304 	and.w	r3, r3, #4
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d0f0      	beq.n	80015a4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015c2:	f7ff fbb1 	bl	8000d28 <HAL_GetREVID>
 80015c6:	4603      	mov	r3, r0
 80015c8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d819      	bhi.n	8001604 <HAL_RCC_OscConfig+0x28c>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	691b      	ldr	r3, [r3, #16]
 80015d4:	2b40      	cmp	r3, #64	@ 0x40
 80015d6:	d108      	bne.n	80015ea <HAL_RCC_OscConfig+0x272>
 80015d8:	4b09      	ldr	r3, [pc, #36]	@ (8001600 <HAL_RCC_OscConfig+0x288>)
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80015e0:	4a07      	ldr	r2, [pc, #28]	@ (8001600 <HAL_RCC_OscConfig+0x288>)
 80015e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015e6:	6053      	str	r3, [r2, #4]
 80015e8:	e030      	b.n	800164c <HAL_RCC_OscConfig+0x2d4>
 80015ea:	4b05      	ldr	r3, [pc, #20]	@ (8001600 <HAL_RCC_OscConfig+0x288>)
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	691b      	ldr	r3, [r3, #16]
 80015f6:	031b      	lsls	r3, r3, #12
 80015f8:	4901      	ldr	r1, [pc, #4]	@ (8001600 <HAL_RCC_OscConfig+0x288>)
 80015fa:	4313      	orrs	r3, r2
 80015fc:	604b      	str	r3, [r1, #4]
 80015fe:	e025      	b.n	800164c <HAL_RCC_OscConfig+0x2d4>
 8001600:	58024400 	.word	0x58024400
 8001604:	4b9a      	ldr	r3, [pc, #616]	@ (8001870 <HAL_RCC_OscConfig+0x4f8>)
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	691b      	ldr	r3, [r3, #16]
 8001610:	061b      	lsls	r3, r3, #24
 8001612:	4997      	ldr	r1, [pc, #604]	@ (8001870 <HAL_RCC_OscConfig+0x4f8>)
 8001614:	4313      	orrs	r3, r2
 8001616:	604b      	str	r3, [r1, #4]
 8001618:	e018      	b.n	800164c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800161a:	4b95      	ldr	r3, [pc, #596]	@ (8001870 <HAL_RCC_OscConfig+0x4f8>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a94      	ldr	r2, [pc, #592]	@ (8001870 <HAL_RCC_OscConfig+0x4f8>)
 8001620:	f023 0301 	bic.w	r3, r3, #1
 8001624:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001626:	f7ff fb73 	bl	8000d10 <HAL_GetTick>
 800162a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800162c:	e008      	b.n	8001640 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800162e:	f7ff fb6f 	bl	8000d10 <HAL_GetTick>
 8001632:	4602      	mov	r2, r0
 8001634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001636:	1ad3      	subs	r3, r2, r3
 8001638:	2b02      	cmp	r3, #2
 800163a:	d901      	bls.n	8001640 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800163c:	2303      	movs	r3, #3
 800163e:	e2ed      	b.n	8001c1c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001640:	4b8b      	ldr	r3, [pc, #556]	@ (8001870 <HAL_RCC_OscConfig+0x4f8>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f003 0304 	and.w	r3, r3, #4
 8001648:	2b00      	cmp	r3, #0
 800164a:	d1f0      	bne.n	800162e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f003 0310 	and.w	r3, r3, #16
 8001654:	2b00      	cmp	r3, #0
 8001656:	f000 80a9 	beq.w	80017ac <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800165a:	4b85      	ldr	r3, [pc, #532]	@ (8001870 <HAL_RCC_OscConfig+0x4f8>)
 800165c:	691b      	ldr	r3, [r3, #16]
 800165e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001662:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001664:	4b82      	ldr	r3, [pc, #520]	@ (8001870 <HAL_RCC_OscConfig+0x4f8>)
 8001666:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001668:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800166a:	69bb      	ldr	r3, [r7, #24]
 800166c:	2b08      	cmp	r3, #8
 800166e:	d007      	beq.n	8001680 <HAL_RCC_OscConfig+0x308>
 8001670:	69bb      	ldr	r3, [r7, #24]
 8001672:	2b18      	cmp	r3, #24
 8001674:	d13a      	bne.n	80016ec <HAL_RCC_OscConfig+0x374>
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	f003 0303 	and.w	r3, r3, #3
 800167c:	2b01      	cmp	r3, #1
 800167e:	d135      	bne.n	80016ec <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001680:	4b7b      	ldr	r3, [pc, #492]	@ (8001870 <HAL_RCC_OscConfig+0x4f8>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001688:	2b00      	cmp	r3, #0
 800168a:	d005      	beq.n	8001698 <HAL_RCC_OscConfig+0x320>
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	69db      	ldr	r3, [r3, #28]
 8001690:	2b80      	cmp	r3, #128	@ 0x80
 8001692:	d001      	beq.n	8001698 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001694:	2301      	movs	r3, #1
 8001696:	e2c1      	b.n	8001c1c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001698:	f7ff fb46 	bl	8000d28 <HAL_GetREVID>
 800169c:	4603      	mov	r3, r0
 800169e:	f241 0203 	movw	r2, #4099	@ 0x1003
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d817      	bhi.n	80016d6 <HAL_RCC_OscConfig+0x35e>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6a1b      	ldr	r3, [r3, #32]
 80016aa:	2b20      	cmp	r3, #32
 80016ac:	d108      	bne.n	80016c0 <HAL_RCC_OscConfig+0x348>
 80016ae:	4b70      	ldr	r3, [pc, #448]	@ (8001870 <HAL_RCC_OscConfig+0x4f8>)
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80016b6:	4a6e      	ldr	r2, [pc, #440]	@ (8001870 <HAL_RCC_OscConfig+0x4f8>)
 80016b8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80016bc:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80016be:	e075      	b.n	80017ac <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80016c0:	4b6b      	ldr	r3, [pc, #428]	@ (8001870 <HAL_RCC_OscConfig+0x4f8>)
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6a1b      	ldr	r3, [r3, #32]
 80016cc:	069b      	lsls	r3, r3, #26
 80016ce:	4968      	ldr	r1, [pc, #416]	@ (8001870 <HAL_RCC_OscConfig+0x4f8>)
 80016d0:	4313      	orrs	r3, r2
 80016d2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80016d4:	e06a      	b.n	80017ac <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80016d6:	4b66      	ldr	r3, [pc, #408]	@ (8001870 <HAL_RCC_OscConfig+0x4f8>)
 80016d8:	68db      	ldr	r3, [r3, #12]
 80016da:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6a1b      	ldr	r3, [r3, #32]
 80016e2:	061b      	lsls	r3, r3, #24
 80016e4:	4962      	ldr	r1, [pc, #392]	@ (8001870 <HAL_RCC_OscConfig+0x4f8>)
 80016e6:	4313      	orrs	r3, r2
 80016e8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80016ea:	e05f      	b.n	80017ac <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	69db      	ldr	r3, [r3, #28]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d042      	beq.n	800177a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80016f4:	4b5e      	ldr	r3, [pc, #376]	@ (8001870 <HAL_RCC_OscConfig+0x4f8>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a5d      	ldr	r2, [pc, #372]	@ (8001870 <HAL_RCC_OscConfig+0x4f8>)
 80016fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80016fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001700:	f7ff fb06 	bl	8000d10 <HAL_GetTick>
 8001704:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001706:	e008      	b.n	800171a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001708:	f7ff fb02 	bl	8000d10 <HAL_GetTick>
 800170c:	4602      	mov	r2, r0
 800170e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	2b02      	cmp	r3, #2
 8001714:	d901      	bls.n	800171a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001716:	2303      	movs	r3, #3
 8001718:	e280      	b.n	8001c1c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800171a:	4b55      	ldr	r3, [pc, #340]	@ (8001870 <HAL_RCC_OscConfig+0x4f8>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001722:	2b00      	cmp	r3, #0
 8001724:	d0f0      	beq.n	8001708 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001726:	f7ff faff 	bl	8000d28 <HAL_GetREVID>
 800172a:	4603      	mov	r3, r0
 800172c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001730:	4293      	cmp	r3, r2
 8001732:	d817      	bhi.n	8001764 <HAL_RCC_OscConfig+0x3ec>
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6a1b      	ldr	r3, [r3, #32]
 8001738:	2b20      	cmp	r3, #32
 800173a:	d108      	bne.n	800174e <HAL_RCC_OscConfig+0x3d6>
 800173c:	4b4c      	ldr	r3, [pc, #304]	@ (8001870 <HAL_RCC_OscConfig+0x4f8>)
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001744:	4a4a      	ldr	r2, [pc, #296]	@ (8001870 <HAL_RCC_OscConfig+0x4f8>)
 8001746:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800174a:	6053      	str	r3, [r2, #4]
 800174c:	e02e      	b.n	80017ac <HAL_RCC_OscConfig+0x434>
 800174e:	4b48      	ldr	r3, [pc, #288]	@ (8001870 <HAL_RCC_OscConfig+0x4f8>)
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6a1b      	ldr	r3, [r3, #32]
 800175a:	069b      	lsls	r3, r3, #26
 800175c:	4944      	ldr	r1, [pc, #272]	@ (8001870 <HAL_RCC_OscConfig+0x4f8>)
 800175e:	4313      	orrs	r3, r2
 8001760:	604b      	str	r3, [r1, #4]
 8001762:	e023      	b.n	80017ac <HAL_RCC_OscConfig+0x434>
 8001764:	4b42      	ldr	r3, [pc, #264]	@ (8001870 <HAL_RCC_OscConfig+0x4f8>)
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6a1b      	ldr	r3, [r3, #32]
 8001770:	061b      	lsls	r3, r3, #24
 8001772:	493f      	ldr	r1, [pc, #252]	@ (8001870 <HAL_RCC_OscConfig+0x4f8>)
 8001774:	4313      	orrs	r3, r2
 8001776:	60cb      	str	r3, [r1, #12]
 8001778:	e018      	b.n	80017ac <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800177a:	4b3d      	ldr	r3, [pc, #244]	@ (8001870 <HAL_RCC_OscConfig+0x4f8>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a3c      	ldr	r2, [pc, #240]	@ (8001870 <HAL_RCC_OscConfig+0x4f8>)
 8001780:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001784:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001786:	f7ff fac3 	bl	8000d10 <HAL_GetTick>
 800178a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800178c:	e008      	b.n	80017a0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800178e:	f7ff fabf 	bl	8000d10 <HAL_GetTick>
 8001792:	4602      	mov	r2, r0
 8001794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001796:	1ad3      	subs	r3, r2, r3
 8001798:	2b02      	cmp	r3, #2
 800179a:	d901      	bls.n	80017a0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800179c:	2303      	movs	r3, #3
 800179e:	e23d      	b.n	8001c1c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80017a0:	4b33      	ldr	r3, [pc, #204]	@ (8001870 <HAL_RCC_OscConfig+0x4f8>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d1f0      	bne.n	800178e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f003 0308 	and.w	r3, r3, #8
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d036      	beq.n	8001826 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	695b      	ldr	r3, [r3, #20]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d019      	beq.n	80017f4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017c0:	4b2b      	ldr	r3, [pc, #172]	@ (8001870 <HAL_RCC_OscConfig+0x4f8>)
 80017c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80017c4:	4a2a      	ldr	r2, [pc, #168]	@ (8001870 <HAL_RCC_OscConfig+0x4f8>)
 80017c6:	f043 0301 	orr.w	r3, r3, #1
 80017ca:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017cc:	f7ff faa0 	bl	8000d10 <HAL_GetTick>
 80017d0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80017d2:	e008      	b.n	80017e6 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017d4:	f7ff fa9c 	bl	8000d10 <HAL_GetTick>
 80017d8:	4602      	mov	r2, r0
 80017da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017dc:	1ad3      	subs	r3, r2, r3
 80017de:	2b02      	cmp	r3, #2
 80017e0:	d901      	bls.n	80017e6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80017e2:	2303      	movs	r3, #3
 80017e4:	e21a      	b.n	8001c1c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80017e6:	4b22      	ldr	r3, [pc, #136]	@ (8001870 <HAL_RCC_OscConfig+0x4f8>)
 80017e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80017ea:	f003 0302 	and.w	r3, r3, #2
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d0f0      	beq.n	80017d4 <HAL_RCC_OscConfig+0x45c>
 80017f2:	e018      	b.n	8001826 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017f4:	4b1e      	ldr	r3, [pc, #120]	@ (8001870 <HAL_RCC_OscConfig+0x4f8>)
 80017f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80017f8:	4a1d      	ldr	r2, [pc, #116]	@ (8001870 <HAL_RCC_OscConfig+0x4f8>)
 80017fa:	f023 0301 	bic.w	r3, r3, #1
 80017fe:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001800:	f7ff fa86 	bl	8000d10 <HAL_GetTick>
 8001804:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001806:	e008      	b.n	800181a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001808:	f7ff fa82 	bl	8000d10 <HAL_GetTick>
 800180c:	4602      	mov	r2, r0
 800180e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	2b02      	cmp	r3, #2
 8001814:	d901      	bls.n	800181a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001816:	2303      	movs	r3, #3
 8001818:	e200      	b.n	8001c1c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800181a:	4b15      	ldr	r3, [pc, #84]	@ (8001870 <HAL_RCC_OscConfig+0x4f8>)
 800181c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800181e:	f003 0302 	and.w	r3, r3, #2
 8001822:	2b00      	cmp	r3, #0
 8001824:	d1f0      	bne.n	8001808 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f003 0320 	and.w	r3, r3, #32
 800182e:	2b00      	cmp	r3, #0
 8001830:	d039      	beq.n	80018a6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	699b      	ldr	r3, [r3, #24]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d01c      	beq.n	8001874 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800183a:	4b0d      	ldr	r3, [pc, #52]	@ (8001870 <HAL_RCC_OscConfig+0x4f8>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a0c      	ldr	r2, [pc, #48]	@ (8001870 <HAL_RCC_OscConfig+0x4f8>)
 8001840:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001844:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001846:	f7ff fa63 	bl	8000d10 <HAL_GetTick>
 800184a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800184c:	e008      	b.n	8001860 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800184e:	f7ff fa5f 	bl	8000d10 <HAL_GetTick>
 8001852:	4602      	mov	r2, r0
 8001854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001856:	1ad3      	subs	r3, r2, r3
 8001858:	2b02      	cmp	r3, #2
 800185a:	d901      	bls.n	8001860 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800185c:	2303      	movs	r3, #3
 800185e:	e1dd      	b.n	8001c1c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001860:	4b03      	ldr	r3, [pc, #12]	@ (8001870 <HAL_RCC_OscConfig+0x4f8>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001868:	2b00      	cmp	r3, #0
 800186a:	d0f0      	beq.n	800184e <HAL_RCC_OscConfig+0x4d6>
 800186c:	e01b      	b.n	80018a6 <HAL_RCC_OscConfig+0x52e>
 800186e:	bf00      	nop
 8001870:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001874:	4b9b      	ldr	r3, [pc, #620]	@ (8001ae4 <HAL_RCC_OscConfig+0x76c>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a9a      	ldr	r2, [pc, #616]	@ (8001ae4 <HAL_RCC_OscConfig+0x76c>)
 800187a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800187e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001880:	f7ff fa46 	bl	8000d10 <HAL_GetTick>
 8001884:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001886:	e008      	b.n	800189a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001888:	f7ff fa42 	bl	8000d10 <HAL_GetTick>
 800188c:	4602      	mov	r2, r0
 800188e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	2b02      	cmp	r3, #2
 8001894:	d901      	bls.n	800189a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001896:	2303      	movs	r3, #3
 8001898:	e1c0      	b.n	8001c1c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800189a:	4b92      	ldr	r3, [pc, #584]	@ (8001ae4 <HAL_RCC_OscConfig+0x76c>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d1f0      	bne.n	8001888 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 0304 	and.w	r3, r3, #4
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	f000 8081 	beq.w	80019b6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80018b4:	4b8c      	ldr	r3, [pc, #560]	@ (8001ae8 <HAL_RCC_OscConfig+0x770>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a8b      	ldr	r2, [pc, #556]	@ (8001ae8 <HAL_RCC_OscConfig+0x770>)
 80018ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018be:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80018c0:	f7ff fa26 	bl	8000d10 <HAL_GetTick>
 80018c4:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80018c6:	e008      	b.n	80018da <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018c8:	f7ff fa22 	bl	8000d10 <HAL_GetTick>
 80018cc:	4602      	mov	r2, r0
 80018ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	2b64      	cmp	r3, #100	@ 0x64
 80018d4:	d901      	bls.n	80018da <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80018d6:	2303      	movs	r3, #3
 80018d8:	e1a0      	b.n	8001c1c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80018da:	4b83      	ldr	r3, [pc, #524]	@ (8001ae8 <HAL_RCC_OscConfig+0x770>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d0f0      	beq.n	80018c8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	2b01      	cmp	r3, #1
 80018ec:	d106      	bne.n	80018fc <HAL_RCC_OscConfig+0x584>
 80018ee:	4b7d      	ldr	r3, [pc, #500]	@ (8001ae4 <HAL_RCC_OscConfig+0x76c>)
 80018f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018f2:	4a7c      	ldr	r2, [pc, #496]	@ (8001ae4 <HAL_RCC_OscConfig+0x76c>)
 80018f4:	f043 0301 	orr.w	r3, r3, #1
 80018f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80018fa:	e02d      	b.n	8001958 <HAL_RCC_OscConfig+0x5e0>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d10c      	bne.n	800191e <HAL_RCC_OscConfig+0x5a6>
 8001904:	4b77      	ldr	r3, [pc, #476]	@ (8001ae4 <HAL_RCC_OscConfig+0x76c>)
 8001906:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001908:	4a76      	ldr	r2, [pc, #472]	@ (8001ae4 <HAL_RCC_OscConfig+0x76c>)
 800190a:	f023 0301 	bic.w	r3, r3, #1
 800190e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001910:	4b74      	ldr	r3, [pc, #464]	@ (8001ae4 <HAL_RCC_OscConfig+0x76c>)
 8001912:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001914:	4a73      	ldr	r2, [pc, #460]	@ (8001ae4 <HAL_RCC_OscConfig+0x76c>)
 8001916:	f023 0304 	bic.w	r3, r3, #4
 800191a:	6713      	str	r3, [r2, #112]	@ 0x70
 800191c:	e01c      	b.n	8001958 <HAL_RCC_OscConfig+0x5e0>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	2b05      	cmp	r3, #5
 8001924:	d10c      	bne.n	8001940 <HAL_RCC_OscConfig+0x5c8>
 8001926:	4b6f      	ldr	r3, [pc, #444]	@ (8001ae4 <HAL_RCC_OscConfig+0x76c>)
 8001928:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800192a:	4a6e      	ldr	r2, [pc, #440]	@ (8001ae4 <HAL_RCC_OscConfig+0x76c>)
 800192c:	f043 0304 	orr.w	r3, r3, #4
 8001930:	6713      	str	r3, [r2, #112]	@ 0x70
 8001932:	4b6c      	ldr	r3, [pc, #432]	@ (8001ae4 <HAL_RCC_OscConfig+0x76c>)
 8001934:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001936:	4a6b      	ldr	r2, [pc, #428]	@ (8001ae4 <HAL_RCC_OscConfig+0x76c>)
 8001938:	f043 0301 	orr.w	r3, r3, #1
 800193c:	6713      	str	r3, [r2, #112]	@ 0x70
 800193e:	e00b      	b.n	8001958 <HAL_RCC_OscConfig+0x5e0>
 8001940:	4b68      	ldr	r3, [pc, #416]	@ (8001ae4 <HAL_RCC_OscConfig+0x76c>)
 8001942:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001944:	4a67      	ldr	r2, [pc, #412]	@ (8001ae4 <HAL_RCC_OscConfig+0x76c>)
 8001946:	f023 0301 	bic.w	r3, r3, #1
 800194a:	6713      	str	r3, [r2, #112]	@ 0x70
 800194c:	4b65      	ldr	r3, [pc, #404]	@ (8001ae4 <HAL_RCC_OscConfig+0x76c>)
 800194e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001950:	4a64      	ldr	r2, [pc, #400]	@ (8001ae4 <HAL_RCC_OscConfig+0x76c>)
 8001952:	f023 0304 	bic.w	r3, r3, #4
 8001956:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d015      	beq.n	800198c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001960:	f7ff f9d6 	bl	8000d10 <HAL_GetTick>
 8001964:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001966:	e00a      	b.n	800197e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001968:	f7ff f9d2 	bl	8000d10 <HAL_GetTick>
 800196c:	4602      	mov	r2, r0
 800196e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001976:	4293      	cmp	r3, r2
 8001978:	d901      	bls.n	800197e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800197a:	2303      	movs	r3, #3
 800197c:	e14e      	b.n	8001c1c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800197e:	4b59      	ldr	r3, [pc, #356]	@ (8001ae4 <HAL_RCC_OscConfig+0x76c>)
 8001980:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001982:	f003 0302 	and.w	r3, r3, #2
 8001986:	2b00      	cmp	r3, #0
 8001988:	d0ee      	beq.n	8001968 <HAL_RCC_OscConfig+0x5f0>
 800198a:	e014      	b.n	80019b6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800198c:	f7ff f9c0 	bl	8000d10 <HAL_GetTick>
 8001990:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001992:	e00a      	b.n	80019aa <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001994:	f7ff f9bc 	bl	8000d10 <HAL_GetTick>
 8001998:	4602      	mov	r2, r0
 800199a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d901      	bls.n	80019aa <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80019a6:	2303      	movs	r3, #3
 80019a8:	e138      	b.n	8001c1c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80019aa:	4b4e      	ldr	r3, [pc, #312]	@ (8001ae4 <HAL_RCC_OscConfig+0x76c>)
 80019ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019ae:	f003 0302 	and.w	r3, r3, #2
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d1ee      	bne.n	8001994 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	f000 812d 	beq.w	8001c1a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80019c0:	4b48      	ldr	r3, [pc, #288]	@ (8001ae4 <HAL_RCC_OscConfig+0x76c>)
 80019c2:	691b      	ldr	r3, [r3, #16]
 80019c4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80019c8:	2b18      	cmp	r3, #24
 80019ca:	f000 80bd 	beq.w	8001b48 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019d2:	2b02      	cmp	r3, #2
 80019d4:	f040 809e 	bne.w	8001b14 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019d8:	4b42      	ldr	r3, [pc, #264]	@ (8001ae4 <HAL_RCC_OscConfig+0x76c>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a41      	ldr	r2, [pc, #260]	@ (8001ae4 <HAL_RCC_OscConfig+0x76c>)
 80019de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80019e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019e4:	f7ff f994 	bl	8000d10 <HAL_GetTick>
 80019e8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80019ea:	e008      	b.n	80019fe <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019ec:	f7ff f990 	bl	8000d10 <HAL_GetTick>
 80019f0:	4602      	mov	r2, r0
 80019f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	2b02      	cmp	r3, #2
 80019f8:	d901      	bls.n	80019fe <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80019fa:	2303      	movs	r3, #3
 80019fc:	e10e      	b.n	8001c1c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80019fe:	4b39      	ldr	r3, [pc, #228]	@ (8001ae4 <HAL_RCC_OscConfig+0x76c>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d1f0      	bne.n	80019ec <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a0a:	4b36      	ldr	r3, [pc, #216]	@ (8001ae4 <HAL_RCC_OscConfig+0x76c>)
 8001a0c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001a0e:	4b37      	ldr	r3, [pc, #220]	@ (8001aec <HAL_RCC_OscConfig+0x774>)
 8001a10:	4013      	ands	r3, r2
 8001a12:	687a      	ldr	r2, [r7, #4]
 8001a14:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8001a16:	687a      	ldr	r2, [r7, #4]
 8001a18:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001a1a:	0112      	lsls	r2, r2, #4
 8001a1c:	430a      	orrs	r2, r1
 8001a1e:	4931      	ldr	r1, [pc, #196]	@ (8001ae4 <HAL_RCC_OscConfig+0x76c>)
 8001a20:	4313      	orrs	r3, r2
 8001a22:	628b      	str	r3, [r1, #40]	@ 0x28
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a28:	3b01      	subs	r3, #1
 8001a2a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a32:	3b01      	subs	r3, #1
 8001a34:	025b      	lsls	r3, r3, #9
 8001a36:	b29b      	uxth	r3, r3
 8001a38:	431a      	orrs	r2, r3
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a3e:	3b01      	subs	r3, #1
 8001a40:	041b      	lsls	r3, r3, #16
 8001a42:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001a46:	431a      	orrs	r2, r3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a4c:	3b01      	subs	r3, #1
 8001a4e:	061b      	lsls	r3, r3, #24
 8001a50:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8001a54:	4923      	ldr	r1, [pc, #140]	@ (8001ae4 <HAL_RCC_OscConfig+0x76c>)
 8001a56:	4313      	orrs	r3, r2
 8001a58:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001a5a:	4b22      	ldr	r3, [pc, #136]	@ (8001ae4 <HAL_RCC_OscConfig+0x76c>)
 8001a5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a5e:	4a21      	ldr	r2, [pc, #132]	@ (8001ae4 <HAL_RCC_OscConfig+0x76c>)
 8001a60:	f023 0301 	bic.w	r3, r3, #1
 8001a64:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001a66:	4b1f      	ldr	r3, [pc, #124]	@ (8001ae4 <HAL_RCC_OscConfig+0x76c>)
 8001a68:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001a6a:	4b21      	ldr	r3, [pc, #132]	@ (8001af0 <HAL_RCC_OscConfig+0x778>)
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	687a      	ldr	r2, [r7, #4]
 8001a70:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001a72:	00d2      	lsls	r2, r2, #3
 8001a74:	491b      	ldr	r1, [pc, #108]	@ (8001ae4 <HAL_RCC_OscConfig+0x76c>)
 8001a76:	4313      	orrs	r3, r2
 8001a78:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001a7a:	4b1a      	ldr	r3, [pc, #104]	@ (8001ae4 <HAL_RCC_OscConfig+0x76c>)
 8001a7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a7e:	f023 020c 	bic.w	r2, r3, #12
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a86:	4917      	ldr	r1, [pc, #92]	@ (8001ae4 <HAL_RCC_OscConfig+0x76c>)
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001a8c:	4b15      	ldr	r3, [pc, #84]	@ (8001ae4 <HAL_RCC_OscConfig+0x76c>)
 8001a8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a90:	f023 0202 	bic.w	r2, r3, #2
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a98:	4912      	ldr	r1, [pc, #72]	@ (8001ae4 <HAL_RCC_OscConfig+0x76c>)
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001a9e:	4b11      	ldr	r3, [pc, #68]	@ (8001ae4 <HAL_RCC_OscConfig+0x76c>)
 8001aa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001aa2:	4a10      	ldr	r2, [pc, #64]	@ (8001ae4 <HAL_RCC_OscConfig+0x76c>)
 8001aa4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001aa8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001aaa:	4b0e      	ldr	r3, [pc, #56]	@ (8001ae4 <HAL_RCC_OscConfig+0x76c>)
 8001aac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001aae:	4a0d      	ldr	r2, [pc, #52]	@ (8001ae4 <HAL_RCC_OscConfig+0x76c>)
 8001ab0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ab4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001ab6:	4b0b      	ldr	r3, [pc, #44]	@ (8001ae4 <HAL_RCC_OscConfig+0x76c>)
 8001ab8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001aba:	4a0a      	ldr	r2, [pc, #40]	@ (8001ae4 <HAL_RCC_OscConfig+0x76c>)
 8001abc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ac0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001ac2:	4b08      	ldr	r3, [pc, #32]	@ (8001ae4 <HAL_RCC_OscConfig+0x76c>)
 8001ac4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ac6:	4a07      	ldr	r2, [pc, #28]	@ (8001ae4 <HAL_RCC_OscConfig+0x76c>)
 8001ac8:	f043 0301 	orr.w	r3, r3, #1
 8001acc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ace:	4b05      	ldr	r3, [pc, #20]	@ (8001ae4 <HAL_RCC_OscConfig+0x76c>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a04      	ldr	r2, [pc, #16]	@ (8001ae4 <HAL_RCC_OscConfig+0x76c>)
 8001ad4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001ad8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ada:	f7ff f919 	bl	8000d10 <HAL_GetTick>
 8001ade:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001ae0:	e011      	b.n	8001b06 <HAL_RCC_OscConfig+0x78e>
 8001ae2:	bf00      	nop
 8001ae4:	58024400 	.word	0x58024400
 8001ae8:	58024800 	.word	0x58024800
 8001aec:	fffffc0c 	.word	0xfffffc0c
 8001af0:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001af4:	f7ff f90c 	bl	8000d10 <HAL_GetTick>
 8001af8:	4602      	mov	r2, r0
 8001afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	2b02      	cmp	r3, #2
 8001b00:	d901      	bls.n	8001b06 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8001b02:	2303      	movs	r3, #3
 8001b04:	e08a      	b.n	8001c1c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001b06:	4b47      	ldr	r3, [pc, #284]	@ (8001c24 <HAL_RCC_OscConfig+0x8ac>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d0f0      	beq.n	8001af4 <HAL_RCC_OscConfig+0x77c>
 8001b12:	e082      	b.n	8001c1a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b14:	4b43      	ldr	r3, [pc, #268]	@ (8001c24 <HAL_RCC_OscConfig+0x8ac>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a42      	ldr	r2, [pc, #264]	@ (8001c24 <HAL_RCC_OscConfig+0x8ac>)
 8001b1a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001b1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b20:	f7ff f8f6 	bl	8000d10 <HAL_GetTick>
 8001b24:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001b26:	e008      	b.n	8001b3a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b28:	f7ff f8f2 	bl	8000d10 <HAL_GetTick>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	2b02      	cmp	r3, #2
 8001b34:	d901      	bls.n	8001b3a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8001b36:	2303      	movs	r3, #3
 8001b38:	e070      	b.n	8001c1c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001b3a:	4b3a      	ldr	r3, [pc, #232]	@ (8001c24 <HAL_RCC_OscConfig+0x8ac>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d1f0      	bne.n	8001b28 <HAL_RCC_OscConfig+0x7b0>
 8001b46:	e068      	b.n	8001c1a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001b48:	4b36      	ldr	r3, [pc, #216]	@ (8001c24 <HAL_RCC_OscConfig+0x8ac>)
 8001b4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b4c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001b4e:	4b35      	ldr	r3, [pc, #212]	@ (8001c24 <HAL_RCC_OscConfig+0x8ac>)
 8001b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b52:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d031      	beq.n	8001bc0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	f003 0203 	and.w	r2, r3, #3
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b66:	429a      	cmp	r2, r3
 8001b68:	d12a      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	091b      	lsrs	r3, r3, #4
 8001b6e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b76:	429a      	cmp	r2, r3
 8001b78:	d122      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b84:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b86:	429a      	cmp	r2, r3
 8001b88:	d11a      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	0a5b      	lsrs	r3, r3, #9
 8001b8e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b96:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d111      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	0c1b      	lsrs	r3, r3, #16
 8001ba0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ba8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001baa:	429a      	cmp	r2, r3
 8001bac:	d108      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	0e1b      	lsrs	r3, r3, #24
 8001bb2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001bba:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d001      	beq.n	8001bc4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e02b      	b.n	8001c1c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001bc4:	4b17      	ldr	r3, [pc, #92]	@ (8001c24 <HAL_RCC_OscConfig+0x8ac>)
 8001bc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001bc8:	08db      	lsrs	r3, r3, #3
 8001bca:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001bce:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001bd4:	693a      	ldr	r2, [r7, #16]
 8001bd6:	429a      	cmp	r2, r3
 8001bd8:	d01f      	beq.n	8001c1a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8001bda:	4b12      	ldr	r3, [pc, #72]	@ (8001c24 <HAL_RCC_OscConfig+0x8ac>)
 8001bdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bde:	4a11      	ldr	r2, [pc, #68]	@ (8001c24 <HAL_RCC_OscConfig+0x8ac>)
 8001be0:	f023 0301 	bic.w	r3, r3, #1
 8001be4:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001be6:	f7ff f893 	bl	8000d10 <HAL_GetTick>
 8001bea:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8001bec:	bf00      	nop
 8001bee:	f7ff f88f 	bl	8000d10 <HAL_GetTick>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d0f9      	beq.n	8001bee <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001bfa:	4b0a      	ldr	r3, [pc, #40]	@ (8001c24 <HAL_RCC_OscConfig+0x8ac>)
 8001bfc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001bfe:	4b0a      	ldr	r3, [pc, #40]	@ (8001c28 <HAL_RCC_OscConfig+0x8b0>)
 8001c00:	4013      	ands	r3, r2
 8001c02:	687a      	ldr	r2, [r7, #4]
 8001c04:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001c06:	00d2      	lsls	r2, r2, #3
 8001c08:	4906      	ldr	r1, [pc, #24]	@ (8001c24 <HAL_RCC_OscConfig+0x8ac>)
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8001c0e:	4b05      	ldr	r3, [pc, #20]	@ (8001c24 <HAL_RCC_OscConfig+0x8ac>)
 8001c10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c12:	4a04      	ldr	r2, [pc, #16]	@ (8001c24 <HAL_RCC_OscConfig+0x8ac>)
 8001c14:	f043 0301 	orr.w	r3, r3, #1
 8001c18:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8001c1a:	2300      	movs	r3, #0
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3730      	adds	r7, #48	@ 0x30
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	58024400 	.word	0x58024400
 8001c28:	ffff0007 	.word	0xffff0007

08001c2c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b086      	sub	sp, #24
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d101      	bne.n	8001c40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e19c      	b.n	8001f7a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c40:	4b8a      	ldr	r3, [pc, #552]	@ (8001e6c <HAL_RCC_ClockConfig+0x240>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f003 030f 	and.w	r3, r3, #15
 8001c48:	683a      	ldr	r2, [r7, #0]
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	d910      	bls.n	8001c70 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c4e:	4b87      	ldr	r3, [pc, #540]	@ (8001e6c <HAL_RCC_ClockConfig+0x240>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f023 020f 	bic.w	r2, r3, #15
 8001c56:	4985      	ldr	r1, [pc, #532]	@ (8001e6c <HAL_RCC_ClockConfig+0x240>)
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c5e:	4b83      	ldr	r3, [pc, #524]	@ (8001e6c <HAL_RCC_ClockConfig+0x240>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 030f 	and.w	r3, r3, #15
 8001c66:	683a      	ldr	r2, [r7, #0]
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d001      	beq.n	8001c70 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	e184      	b.n	8001f7a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f003 0304 	and.w	r3, r3, #4
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d010      	beq.n	8001c9e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	691a      	ldr	r2, [r3, #16]
 8001c80:	4b7b      	ldr	r3, [pc, #492]	@ (8001e70 <HAL_RCC_ClockConfig+0x244>)
 8001c82:	699b      	ldr	r3, [r3, #24]
 8001c84:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d908      	bls.n	8001c9e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001c8c:	4b78      	ldr	r3, [pc, #480]	@ (8001e70 <HAL_RCC_ClockConfig+0x244>)
 8001c8e:	699b      	ldr	r3, [r3, #24]
 8001c90:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	691b      	ldr	r3, [r3, #16]
 8001c98:	4975      	ldr	r1, [pc, #468]	@ (8001e70 <HAL_RCC_ClockConfig+0x244>)
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 0308 	and.w	r3, r3, #8
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d010      	beq.n	8001ccc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	695a      	ldr	r2, [r3, #20]
 8001cae:	4b70      	ldr	r3, [pc, #448]	@ (8001e70 <HAL_RCC_ClockConfig+0x244>)
 8001cb0:	69db      	ldr	r3, [r3, #28]
 8001cb2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001cb6:	429a      	cmp	r2, r3
 8001cb8:	d908      	bls.n	8001ccc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001cba:	4b6d      	ldr	r3, [pc, #436]	@ (8001e70 <HAL_RCC_ClockConfig+0x244>)
 8001cbc:	69db      	ldr	r3, [r3, #28]
 8001cbe:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	695b      	ldr	r3, [r3, #20]
 8001cc6:	496a      	ldr	r1, [pc, #424]	@ (8001e70 <HAL_RCC_ClockConfig+0x244>)
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 0310 	and.w	r3, r3, #16
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d010      	beq.n	8001cfa <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	699a      	ldr	r2, [r3, #24]
 8001cdc:	4b64      	ldr	r3, [pc, #400]	@ (8001e70 <HAL_RCC_ClockConfig+0x244>)
 8001cde:	69db      	ldr	r3, [r3, #28]
 8001ce0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d908      	bls.n	8001cfa <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001ce8:	4b61      	ldr	r3, [pc, #388]	@ (8001e70 <HAL_RCC_ClockConfig+0x244>)
 8001cea:	69db      	ldr	r3, [r3, #28]
 8001cec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	699b      	ldr	r3, [r3, #24]
 8001cf4:	495e      	ldr	r1, [pc, #376]	@ (8001e70 <HAL_RCC_ClockConfig+0x244>)
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 0320 	and.w	r3, r3, #32
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d010      	beq.n	8001d28 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	69da      	ldr	r2, [r3, #28]
 8001d0a:	4b59      	ldr	r3, [pc, #356]	@ (8001e70 <HAL_RCC_ClockConfig+0x244>)
 8001d0c:	6a1b      	ldr	r3, [r3, #32]
 8001d0e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001d12:	429a      	cmp	r2, r3
 8001d14:	d908      	bls.n	8001d28 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001d16:	4b56      	ldr	r3, [pc, #344]	@ (8001e70 <HAL_RCC_ClockConfig+0x244>)
 8001d18:	6a1b      	ldr	r3, [r3, #32]
 8001d1a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	69db      	ldr	r3, [r3, #28]
 8001d22:	4953      	ldr	r1, [pc, #332]	@ (8001e70 <HAL_RCC_ClockConfig+0x244>)
 8001d24:	4313      	orrs	r3, r2
 8001d26:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 0302 	and.w	r3, r3, #2
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d010      	beq.n	8001d56 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	68da      	ldr	r2, [r3, #12]
 8001d38:	4b4d      	ldr	r3, [pc, #308]	@ (8001e70 <HAL_RCC_ClockConfig+0x244>)
 8001d3a:	699b      	ldr	r3, [r3, #24]
 8001d3c:	f003 030f 	and.w	r3, r3, #15
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d908      	bls.n	8001d56 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d44:	4b4a      	ldr	r3, [pc, #296]	@ (8001e70 <HAL_RCC_ClockConfig+0x244>)
 8001d46:	699b      	ldr	r3, [r3, #24]
 8001d48:	f023 020f 	bic.w	r2, r3, #15
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	4947      	ldr	r1, [pc, #284]	@ (8001e70 <HAL_RCC_ClockConfig+0x244>)
 8001d52:	4313      	orrs	r3, r2
 8001d54:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 0301 	and.w	r3, r3, #1
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d055      	beq.n	8001e0e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001d62:	4b43      	ldr	r3, [pc, #268]	@ (8001e70 <HAL_RCC_ClockConfig+0x244>)
 8001d64:	699b      	ldr	r3, [r3, #24]
 8001d66:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	4940      	ldr	r1, [pc, #256]	@ (8001e70 <HAL_RCC_ClockConfig+0x244>)
 8001d70:	4313      	orrs	r3, r2
 8001d72:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	2b02      	cmp	r3, #2
 8001d7a:	d107      	bne.n	8001d8c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001d7c:	4b3c      	ldr	r3, [pc, #240]	@ (8001e70 <HAL_RCC_ClockConfig+0x244>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d121      	bne.n	8001dcc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e0f6      	b.n	8001f7a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	2b03      	cmp	r3, #3
 8001d92:	d107      	bne.n	8001da4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001d94:	4b36      	ldr	r3, [pc, #216]	@ (8001e70 <HAL_RCC_ClockConfig+0x244>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d115      	bne.n	8001dcc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
 8001da2:	e0ea      	b.n	8001f7a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	d107      	bne.n	8001dbc <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001dac:	4b30      	ldr	r3, [pc, #192]	@ (8001e70 <HAL_RCC_ClockConfig+0x244>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d109      	bne.n	8001dcc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	e0de      	b.n	8001f7a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001dbc:	4b2c      	ldr	r3, [pc, #176]	@ (8001e70 <HAL_RCC_ClockConfig+0x244>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 0304 	and.w	r3, r3, #4
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d101      	bne.n	8001dcc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e0d6      	b.n	8001f7a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001dcc:	4b28      	ldr	r3, [pc, #160]	@ (8001e70 <HAL_RCC_ClockConfig+0x244>)
 8001dce:	691b      	ldr	r3, [r3, #16]
 8001dd0:	f023 0207 	bic.w	r2, r3, #7
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	4925      	ldr	r1, [pc, #148]	@ (8001e70 <HAL_RCC_ClockConfig+0x244>)
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001dde:	f7fe ff97 	bl	8000d10 <HAL_GetTick>
 8001de2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001de4:	e00a      	b.n	8001dfc <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001de6:	f7fe ff93 	bl	8000d10 <HAL_GetTick>
 8001dea:	4602      	mov	r2, r0
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	1ad3      	subs	r3, r2, r3
 8001df0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d901      	bls.n	8001dfc <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8001df8:	2303      	movs	r3, #3
 8001dfa:	e0be      	b.n	8001f7a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dfc:	4b1c      	ldr	r3, [pc, #112]	@ (8001e70 <HAL_RCC_ClockConfig+0x244>)
 8001dfe:	691b      	ldr	r3, [r3, #16]
 8001e00:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	00db      	lsls	r3, r3, #3
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	d1eb      	bne.n	8001de6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 0302 	and.w	r3, r3, #2
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d010      	beq.n	8001e3c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	68da      	ldr	r2, [r3, #12]
 8001e1e:	4b14      	ldr	r3, [pc, #80]	@ (8001e70 <HAL_RCC_ClockConfig+0x244>)
 8001e20:	699b      	ldr	r3, [r3, #24]
 8001e22:	f003 030f 	and.w	r3, r3, #15
 8001e26:	429a      	cmp	r2, r3
 8001e28:	d208      	bcs.n	8001e3c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e2a:	4b11      	ldr	r3, [pc, #68]	@ (8001e70 <HAL_RCC_ClockConfig+0x244>)
 8001e2c:	699b      	ldr	r3, [r3, #24]
 8001e2e:	f023 020f 	bic.w	r2, r3, #15
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	68db      	ldr	r3, [r3, #12]
 8001e36:	490e      	ldr	r1, [pc, #56]	@ (8001e70 <HAL_RCC_ClockConfig+0x244>)
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e3c:	4b0b      	ldr	r3, [pc, #44]	@ (8001e6c <HAL_RCC_ClockConfig+0x240>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 030f 	and.w	r3, r3, #15
 8001e44:	683a      	ldr	r2, [r7, #0]
 8001e46:	429a      	cmp	r2, r3
 8001e48:	d214      	bcs.n	8001e74 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e4a:	4b08      	ldr	r3, [pc, #32]	@ (8001e6c <HAL_RCC_ClockConfig+0x240>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f023 020f 	bic.w	r2, r3, #15
 8001e52:	4906      	ldr	r1, [pc, #24]	@ (8001e6c <HAL_RCC_ClockConfig+0x240>)
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	4313      	orrs	r3, r2
 8001e58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e5a:	4b04      	ldr	r3, [pc, #16]	@ (8001e6c <HAL_RCC_ClockConfig+0x240>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 030f 	and.w	r3, r3, #15
 8001e62:	683a      	ldr	r2, [r7, #0]
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d005      	beq.n	8001e74 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e086      	b.n	8001f7a <HAL_RCC_ClockConfig+0x34e>
 8001e6c:	52002000 	.word	0x52002000
 8001e70:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 0304 	and.w	r3, r3, #4
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d010      	beq.n	8001ea2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	691a      	ldr	r2, [r3, #16]
 8001e84:	4b3f      	ldr	r3, [pc, #252]	@ (8001f84 <HAL_RCC_ClockConfig+0x358>)
 8001e86:	699b      	ldr	r3, [r3, #24]
 8001e88:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d208      	bcs.n	8001ea2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001e90:	4b3c      	ldr	r3, [pc, #240]	@ (8001f84 <HAL_RCC_ClockConfig+0x358>)
 8001e92:	699b      	ldr	r3, [r3, #24]
 8001e94:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	691b      	ldr	r3, [r3, #16]
 8001e9c:	4939      	ldr	r1, [pc, #228]	@ (8001f84 <HAL_RCC_ClockConfig+0x358>)
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 0308 	and.w	r3, r3, #8
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d010      	beq.n	8001ed0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	695a      	ldr	r2, [r3, #20]
 8001eb2:	4b34      	ldr	r3, [pc, #208]	@ (8001f84 <HAL_RCC_ClockConfig+0x358>)
 8001eb4:	69db      	ldr	r3, [r3, #28]
 8001eb6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	d208      	bcs.n	8001ed0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001ebe:	4b31      	ldr	r3, [pc, #196]	@ (8001f84 <HAL_RCC_ClockConfig+0x358>)
 8001ec0:	69db      	ldr	r3, [r3, #28]
 8001ec2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	695b      	ldr	r3, [r3, #20]
 8001eca:	492e      	ldr	r1, [pc, #184]	@ (8001f84 <HAL_RCC_ClockConfig+0x358>)
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f003 0310 	and.w	r3, r3, #16
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d010      	beq.n	8001efe <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	699a      	ldr	r2, [r3, #24]
 8001ee0:	4b28      	ldr	r3, [pc, #160]	@ (8001f84 <HAL_RCC_ClockConfig+0x358>)
 8001ee2:	69db      	ldr	r3, [r3, #28]
 8001ee4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d208      	bcs.n	8001efe <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001eec:	4b25      	ldr	r3, [pc, #148]	@ (8001f84 <HAL_RCC_ClockConfig+0x358>)
 8001eee:	69db      	ldr	r3, [r3, #28]
 8001ef0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	699b      	ldr	r3, [r3, #24]
 8001ef8:	4922      	ldr	r1, [pc, #136]	@ (8001f84 <HAL_RCC_ClockConfig+0x358>)
 8001efa:	4313      	orrs	r3, r2
 8001efc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 0320 	and.w	r3, r3, #32
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d010      	beq.n	8001f2c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	69da      	ldr	r2, [r3, #28]
 8001f0e:	4b1d      	ldr	r3, [pc, #116]	@ (8001f84 <HAL_RCC_ClockConfig+0x358>)
 8001f10:	6a1b      	ldr	r3, [r3, #32]
 8001f12:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001f16:	429a      	cmp	r2, r3
 8001f18:	d208      	bcs.n	8001f2c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001f1a:	4b1a      	ldr	r3, [pc, #104]	@ (8001f84 <HAL_RCC_ClockConfig+0x358>)
 8001f1c:	6a1b      	ldr	r3, [r3, #32]
 8001f1e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	69db      	ldr	r3, [r3, #28]
 8001f26:	4917      	ldr	r1, [pc, #92]	@ (8001f84 <HAL_RCC_ClockConfig+0x358>)
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001f2c:	f000 f89e 	bl	800206c <HAL_RCC_GetSysClockFreq>
 8001f30:	4602      	mov	r2, r0
 8001f32:	4b14      	ldr	r3, [pc, #80]	@ (8001f84 <HAL_RCC_ClockConfig+0x358>)
 8001f34:	699b      	ldr	r3, [r3, #24]
 8001f36:	0a1b      	lsrs	r3, r3, #8
 8001f38:	f003 030f 	and.w	r3, r3, #15
 8001f3c:	4912      	ldr	r1, [pc, #72]	@ (8001f88 <HAL_RCC_ClockConfig+0x35c>)
 8001f3e:	5ccb      	ldrb	r3, [r1, r3]
 8001f40:	f003 031f 	and.w	r3, r3, #31
 8001f44:	fa22 f303 	lsr.w	r3, r2, r3
 8001f48:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001f4a:	4b0e      	ldr	r3, [pc, #56]	@ (8001f84 <HAL_RCC_ClockConfig+0x358>)
 8001f4c:	699b      	ldr	r3, [r3, #24]
 8001f4e:	f003 030f 	and.w	r3, r3, #15
 8001f52:	4a0d      	ldr	r2, [pc, #52]	@ (8001f88 <HAL_RCC_ClockConfig+0x35c>)
 8001f54:	5cd3      	ldrb	r3, [r2, r3]
 8001f56:	f003 031f 	and.w	r3, r3, #31
 8001f5a:	693a      	ldr	r2, [r7, #16]
 8001f5c:	fa22 f303 	lsr.w	r3, r2, r3
 8001f60:	4a0a      	ldr	r2, [pc, #40]	@ (8001f8c <HAL_RCC_ClockConfig+0x360>)
 8001f62:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001f64:	4a0a      	ldr	r2, [pc, #40]	@ (8001f90 <HAL_RCC_ClockConfig+0x364>)
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8001f6a:	4b0a      	ldr	r3, [pc, #40]	@ (8001f94 <HAL_RCC_ClockConfig+0x368>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f7fe fe84 	bl	8000c7c <HAL_InitTick>
 8001f74:	4603      	mov	r3, r0
 8001f76:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001f78:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3718      	adds	r7, #24
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	58024400 	.word	0x58024400
 8001f88:	08005318 	.word	0x08005318
 8001f8c:	24000004 	.word	0x24000004
 8001f90:	24000000 	.word	0x24000000
 8001f94:	24000008 	.word	0x24000008

08001f98 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b08c      	sub	sp, #48	@ 0x30
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	60f8      	str	r0, [r7, #12]
 8001fa0:	60b9      	str	r1, [r7, #8]
 8001fa2:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d12a      	bne.n	8002000 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8001faa:	4b2d      	ldr	r3, [pc, #180]	@ (8002060 <HAL_RCC_MCOConfig+0xc8>)
 8001fac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fb0:	4a2b      	ldr	r2, [pc, #172]	@ (8002060 <HAL_RCC_MCOConfig+0xc8>)
 8001fb2:	f043 0301 	orr.w	r3, r3, #1
 8001fb6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001fba:	4b29      	ldr	r3, [pc, #164]	@ (8002060 <HAL_RCC_MCOConfig+0xc8>)
 8001fbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fc0:	f003 0301 	and.w	r3, r3, #1
 8001fc4:	61bb      	str	r3, [r7, #24]
 8001fc6:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8001fc8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001fcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fce:	2302      	movs	r3, #2
 8001fd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8001fde:	f107 031c 	add.w	r3, r7, #28
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	481f      	ldr	r0, [pc, #124]	@ (8002064 <HAL_RCC_MCOConfig+0xcc>)
 8001fe6:	f7fe ff8f 	bl	8000f08 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8001fea:	4b1d      	ldr	r3, [pc, #116]	@ (8002060 <HAL_RCC_MCOConfig+0xc8>)
 8001fec:	691b      	ldr	r3, [r3, #16]
 8001fee:	f023 72fe 	bic.w	r2, r3, #33292288	@ 0x1fc0000
 8001ff2:	68b9      	ldr	r1, [r7, #8]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	430b      	orrs	r3, r1
 8001ff8:	4919      	ldr	r1, [pc, #100]	@ (8002060 <HAL_RCC_MCOConfig+0xc8>)
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 8001ffe:	e02a      	b.n	8002056 <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8002000:	4b17      	ldr	r3, [pc, #92]	@ (8002060 <HAL_RCC_MCOConfig+0xc8>)
 8002002:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002006:	4a16      	ldr	r2, [pc, #88]	@ (8002060 <HAL_RCC_MCOConfig+0xc8>)
 8002008:	f043 0304 	orr.w	r3, r3, #4
 800200c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002010:	4b13      	ldr	r3, [pc, #76]	@ (8002060 <HAL_RCC_MCOConfig+0xc8>)
 8002012:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002016:	f003 0304 	and.w	r3, r3, #4
 800201a:	617b      	str	r3, [r7, #20]
 800201c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800201e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002022:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002024:	2302      	movs	r3, #2
 8002026:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002028:	2303      	movs	r3, #3
 800202a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800202c:	2300      	movs	r3, #0
 800202e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002030:	2300      	movs	r3, #0
 8002032:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8002034:	f107 031c 	add.w	r3, r7, #28
 8002038:	4619      	mov	r1, r3
 800203a:	480b      	ldr	r0, [pc, #44]	@ (8002068 <HAL_RCC_MCOConfig+0xd0>)
 800203c:	f7fe ff64 	bl	8000f08 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8002040:	4b07      	ldr	r3, [pc, #28]	@ (8002060 <HAL_RCC_MCOConfig+0xc8>)
 8002042:	691b      	ldr	r3, [r3, #16]
 8002044:	f023 427e 	bic.w	r2, r3, #4261412864	@ 0xfe000000
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	01d9      	lsls	r1, r3, #7
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	430b      	orrs	r3, r1
 8002050:	4903      	ldr	r1, [pc, #12]	@ (8002060 <HAL_RCC_MCOConfig+0xc8>)
 8002052:	4313      	orrs	r3, r2
 8002054:	610b      	str	r3, [r1, #16]
}
 8002056:	bf00      	nop
 8002058:	3730      	adds	r7, #48	@ 0x30
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	58024400 	.word	0x58024400
 8002064:	58020000 	.word	0x58020000
 8002068:	58020800 	.word	0x58020800

0800206c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800206c:	b480      	push	{r7}
 800206e:	b089      	sub	sp, #36	@ 0x24
 8002070:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002072:	4bb3      	ldr	r3, [pc, #716]	@ (8002340 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002074:	691b      	ldr	r3, [r3, #16]
 8002076:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800207a:	2b18      	cmp	r3, #24
 800207c:	f200 8155 	bhi.w	800232a <HAL_RCC_GetSysClockFreq+0x2be>
 8002080:	a201      	add	r2, pc, #4	@ (adr r2, 8002088 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002086:	bf00      	nop
 8002088:	080020ed 	.word	0x080020ed
 800208c:	0800232b 	.word	0x0800232b
 8002090:	0800232b 	.word	0x0800232b
 8002094:	0800232b 	.word	0x0800232b
 8002098:	0800232b 	.word	0x0800232b
 800209c:	0800232b 	.word	0x0800232b
 80020a0:	0800232b 	.word	0x0800232b
 80020a4:	0800232b 	.word	0x0800232b
 80020a8:	08002113 	.word	0x08002113
 80020ac:	0800232b 	.word	0x0800232b
 80020b0:	0800232b 	.word	0x0800232b
 80020b4:	0800232b 	.word	0x0800232b
 80020b8:	0800232b 	.word	0x0800232b
 80020bc:	0800232b 	.word	0x0800232b
 80020c0:	0800232b 	.word	0x0800232b
 80020c4:	0800232b 	.word	0x0800232b
 80020c8:	08002119 	.word	0x08002119
 80020cc:	0800232b 	.word	0x0800232b
 80020d0:	0800232b 	.word	0x0800232b
 80020d4:	0800232b 	.word	0x0800232b
 80020d8:	0800232b 	.word	0x0800232b
 80020dc:	0800232b 	.word	0x0800232b
 80020e0:	0800232b 	.word	0x0800232b
 80020e4:	0800232b 	.word	0x0800232b
 80020e8:	0800211f 	.word	0x0800211f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80020ec:	4b94      	ldr	r3, [pc, #592]	@ (8002340 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 0320 	and.w	r3, r3, #32
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d009      	beq.n	800210c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80020f8:	4b91      	ldr	r3, [pc, #580]	@ (8002340 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	08db      	lsrs	r3, r3, #3
 80020fe:	f003 0303 	and.w	r3, r3, #3
 8002102:	4a90      	ldr	r2, [pc, #576]	@ (8002344 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002104:	fa22 f303 	lsr.w	r3, r2, r3
 8002108:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800210a:	e111      	b.n	8002330 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800210c:	4b8d      	ldr	r3, [pc, #564]	@ (8002344 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800210e:	61bb      	str	r3, [r7, #24]
      break;
 8002110:	e10e      	b.n	8002330 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002112:	4b8d      	ldr	r3, [pc, #564]	@ (8002348 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002114:	61bb      	str	r3, [r7, #24]
      break;
 8002116:	e10b      	b.n	8002330 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002118:	4b8c      	ldr	r3, [pc, #560]	@ (800234c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800211a:	61bb      	str	r3, [r7, #24]
      break;
 800211c:	e108      	b.n	8002330 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800211e:	4b88      	ldr	r3, [pc, #544]	@ (8002340 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002120:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002122:	f003 0303 	and.w	r3, r3, #3
 8002126:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002128:	4b85      	ldr	r3, [pc, #532]	@ (8002340 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800212a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800212c:	091b      	lsrs	r3, r3, #4
 800212e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002132:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002134:	4b82      	ldr	r3, [pc, #520]	@ (8002340 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002136:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002138:	f003 0301 	and.w	r3, r3, #1
 800213c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800213e:	4b80      	ldr	r3, [pc, #512]	@ (8002340 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002140:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002142:	08db      	lsrs	r3, r3, #3
 8002144:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002148:	68fa      	ldr	r2, [r7, #12]
 800214a:	fb02 f303 	mul.w	r3, r2, r3
 800214e:	ee07 3a90 	vmov	s15, r3
 8002152:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002156:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	2b00      	cmp	r3, #0
 800215e:	f000 80e1 	beq.w	8002324 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	2b02      	cmp	r3, #2
 8002166:	f000 8083 	beq.w	8002270 <HAL_RCC_GetSysClockFreq+0x204>
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	2b02      	cmp	r3, #2
 800216e:	f200 80a1 	bhi.w	80022b4 <HAL_RCC_GetSysClockFreq+0x248>
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d003      	beq.n	8002180 <HAL_RCC_GetSysClockFreq+0x114>
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	2b01      	cmp	r3, #1
 800217c:	d056      	beq.n	800222c <HAL_RCC_GetSysClockFreq+0x1c0>
 800217e:	e099      	b.n	80022b4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002180:	4b6f      	ldr	r3, [pc, #444]	@ (8002340 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0320 	and.w	r3, r3, #32
 8002188:	2b00      	cmp	r3, #0
 800218a:	d02d      	beq.n	80021e8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800218c:	4b6c      	ldr	r3, [pc, #432]	@ (8002340 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	08db      	lsrs	r3, r3, #3
 8002192:	f003 0303 	and.w	r3, r3, #3
 8002196:	4a6b      	ldr	r2, [pc, #428]	@ (8002344 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002198:	fa22 f303 	lsr.w	r3, r2, r3
 800219c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	ee07 3a90 	vmov	s15, r3
 80021a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	ee07 3a90 	vmov	s15, r3
 80021ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80021b6:	4b62      	ldr	r3, [pc, #392]	@ (8002340 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021be:	ee07 3a90 	vmov	s15, r3
 80021c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80021c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80021ca:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8002350 <HAL_RCC_GetSysClockFreq+0x2e4>
 80021ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80021d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80021d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80021da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80021de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021e2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80021e6:	e087      	b.n	80022f8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	ee07 3a90 	vmov	s15, r3
 80021ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021f2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8002354 <HAL_RCC_GetSysClockFreq+0x2e8>
 80021f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80021fa:	4b51      	ldr	r3, [pc, #324]	@ (8002340 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002202:	ee07 3a90 	vmov	s15, r3
 8002206:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800220a:	ed97 6a02 	vldr	s12, [r7, #8]
 800220e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8002350 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002212:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002216:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800221a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800221e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002222:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002226:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800222a:	e065      	b.n	80022f8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	ee07 3a90 	vmov	s15, r3
 8002232:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002236:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8002358 <HAL_RCC_GetSysClockFreq+0x2ec>
 800223a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800223e:	4b40      	ldr	r3, [pc, #256]	@ (8002340 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002242:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002246:	ee07 3a90 	vmov	s15, r3
 800224a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800224e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002252:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002350 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002256:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800225a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800225e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002262:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002266:	ee67 7a27 	vmul.f32	s15, s14, s15
 800226a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800226e:	e043      	b.n	80022f8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	ee07 3a90 	vmov	s15, r3
 8002276:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800227a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800235c <HAL_RCC_GetSysClockFreq+0x2f0>
 800227e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002282:	4b2f      	ldr	r3, [pc, #188]	@ (8002340 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002286:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800228a:	ee07 3a90 	vmov	s15, r3
 800228e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002292:	ed97 6a02 	vldr	s12, [r7, #8]
 8002296:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8002350 <HAL_RCC_GetSysClockFreq+0x2e4>
 800229a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800229e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80022a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80022a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80022aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022ae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80022b2:	e021      	b.n	80022f8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	ee07 3a90 	vmov	s15, r3
 80022ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022be:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002358 <HAL_RCC_GetSysClockFreq+0x2ec>
 80022c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80022c6:	4b1e      	ldr	r3, [pc, #120]	@ (8002340 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022ce:	ee07 3a90 	vmov	s15, r3
 80022d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80022d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80022da:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8002350 <HAL_RCC_GetSysClockFreq+0x2e4>
 80022de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80022e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80022e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80022ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80022ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022f2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80022f6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80022f8:	4b11      	ldr	r3, [pc, #68]	@ (8002340 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022fc:	0a5b      	lsrs	r3, r3, #9
 80022fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002302:	3301      	adds	r3, #1
 8002304:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	ee07 3a90 	vmov	s15, r3
 800230c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002310:	edd7 6a07 	vldr	s13, [r7, #28]
 8002314:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002318:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800231c:	ee17 3a90 	vmov	r3, s15
 8002320:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002322:	e005      	b.n	8002330 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002324:	2300      	movs	r3, #0
 8002326:	61bb      	str	r3, [r7, #24]
      break;
 8002328:	e002      	b.n	8002330 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800232a:	4b07      	ldr	r3, [pc, #28]	@ (8002348 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800232c:	61bb      	str	r3, [r7, #24]
      break;
 800232e:	bf00      	nop
  }

  return sysclockfreq;
 8002330:	69bb      	ldr	r3, [r7, #24]
}
 8002332:	4618      	mov	r0, r3
 8002334:	3724      	adds	r7, #36	@ 0x24
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr
 800233e:	bf00      	nop
 8002340:	58024400 	.word	0x58024400
 8002344:	03d09000 	.word	0x03d09000
 8002348:	003d0900 	.word	0x003d0900
 800234c:	017d7840 	.word	0x017d7840
 8002350:	46000000 	.word	0x46000000
 8002354:	4c742400 	.word	0x4c742400
 8002358:	4a742400 	.word	0x4a742400
 800235c:	4bbebc20 	.word	0x4bbebc20

08002360 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002366:	f7ff fe81 	bl	800206c <HAL_RCC_GetSysClockFreq>
 800236a:	4602      	mov	r2, r0
 800236c:	4b10      	ldr	r3, [pc, #64]	@ (80023b0 <HAL_RCC_GetHCLKFreq+0x50>)
 800236e:	699b      	ldr	r3, [r3, #24]
 8002370:	0a1b      	lsrs	r3, r3, #8
 8002372:	f003 030f 	and.w	r3, r3, #15
 8002376:	490f      	ldr	r1, [pc, #60]	@ (80023b4 <HAL_RCC_GetHCLKFreq+0x54>)
 8002378:	5ccb      	ldrb	r3, [r1, r3]
 800237a:	f003 031f 	and.w	r3, r3, #31
 800237e:	fa22 f303 	lsr.w	r3, r2, r3
 8002382:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002384:	4b0a      	ldr	r3, [pc, #40]	@ (80023b0 <HAL_RCC_GetHCLKFreq+0x50>)
 8002386:	699b      	ldr	r3, [r3, #24]
 8002388:	f003 030f 	and.w	r3, r3, #15
 800238c:	4a09      	ldr	r2, [pc, #36]	@ (80023b4 <HAL_RCC_GetHCLKFreq+0x54>)
 800238e:	5cd3      	ldrb	r3, [r2, r3]
 8002390:	f003 031f 	and.w	r3, r3, #31
 8002394:	687a      	ldr	r2, [r7, #4]
 8002396:	fa22 f303 	lsr.w	r3, r2, r3
 800239a:	4a07      	ldr	r2, [pc, #28]	@ (80023b8 <HAL_RCC_GetHCLKFreq+0x58>)
 800239c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800239e:	4a07      	ldr	r2, [pc, #28]	@ (80023bc <HAL_RCC_GetHCLKFreq+0x5c>)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80023a4:	4b04      	ldr	r3, [pc, #16]	@ (80023b8 <HAL_RCC_GetHCLKFreq+0x58>)
 80023a6:	681b      	ldr	r3, [r3, #0]
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3708      	adds	r7, #8
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	58024400 	.word	0x58024400
 80023b4:	08005318 	.word	0x08005318
 80023b8:	24000004 	.word	0x24000004
 80023bc:	24000000 	.word	0x24000000

080023c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80023c4:	f7ff ffcc 	bl	8002360 <HAL_RCC_GetHCLKFreq>
 80023c8:	4602      	mov	r2, r0
 80023ca:	4b06      	ldr	r3, [pc, #24]	@ (80023e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023cc:	69db      	ldr	r3, [r3, #28]
 80023ce:	091b      	lsrs	r3, r3, #4
 80023d0:	f003 0307 	and.w	r3, r3, #7
 80023d4:	4904      	ldr	r1, [pc, #16]	@ (80023e8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80023d6:	5ccb      	ldrb	r3, [r1, r3]
 80023d8:	f003 031f 	and.w	r3, r3, #31
 80023dc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	58024400 	.word	0x58024400
 80023e8:	08005318 	.word	0x08005318

080023ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80023f0:	f7ff ffb6 	bl	8002360 <HAL_RCC_GetHCLKFreq>
 80023f4:	4602      	mov	r2, r0
 80023f6:	4b06      	ldr	r3, [pc, #24]	@ (8002410 <HAL_RCC_GetPCLK2Freq+0x24>)
 80023f8:	69db      	ldr	r3, [r3, #28]
 80023fa:	0a1b      	lsrs	r3, r3, #8
 80023fc:	f003 0307 	and.w	r3, r3, #7
 8002400:	4904      	ldr	r1, [pc, #16]	@ (8002414 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002402:	5ccb      	ldrb	r3, [r1, r3]
 8002404:	f003 031f 	and.w	r3, r3, #31
 8002408:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800240c:	4618      	mov	r0, r3
 800240e:	bd80      	pop	{r7, pc}
 8002410:	58024400 	.word	0x58024400
 8002414:	08005318 	.word	0x08005318

08002418 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002418:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800241c:	b0cc      	sub	sp, #304	@ 0x130
 800241e:	af00      	add	r7, sp, #0
 8002420:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002424:	2300      	movs	r3, #0
 8002426:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800242a:	2300      	movs	r3, #0
 800242c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002430:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002438:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800243c:	2500      	movs	r5, #0
 800243e:	ea54 0305 	orrs.w	r3, r4, r5
 8002442:	d049      	beq.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002444:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002448:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800244a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800244e:	d02f      	beq.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002450:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002454:	d828      	bhi.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002456:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800245a:	d01a      	beq.n	8002492 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800245c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002460:	d822      	bhi.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002462:	2b00      	cmp	r3, #0
 8002464:	d003      	beq.n	800246e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002466:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800246a:	d007      	beq.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800246c:	e01c      	b.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800246e:	4bb8      	ldr	r3, [pc, #736]	@ (8002750 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002470:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002472:	4ab7      	ldr	r2, [pc, #732]	@ (8002750 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002474:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002478:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800247a:	e01a      	b.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800247c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002480:	3308      	adds	r3, #8
 8002482:	2102      	movs	r1, #2
 8002484:	4618      	mov	r0, r3
 8002486:	f001 fccf 	bl	8003e28 <RCCEx_PLL2_Config>
 800248a:	4603      	mov	r3, r0
 800248c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002490:	e00f      	b.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002492:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002496:	3328      	adds	r3, #40	@ 0x28
 8002498:	2102      	movs	r1, #2
 800249a:	4618      	mov	r0, r3
 800249c:	f001 fd76 	bl	8003f8c <RCCEx_PLL3_Config>
 80024a0:	4603      	mov	r3, r0
 80024a2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80024a6:	e004      	b.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80024ae:	e000      	b.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80024b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80024b2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d10a      	bne.n	80024d0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80024ba:	4ba5      	ldr	r3, [pc, #660]	@ (8002750 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80024bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024be:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80024c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80024c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80024c8:	4aa1      	ldr	r2, [pc, #644]	@ (8002750 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80024ca:	430b      	orrs	r3, r1
 80024cc:	6513      	str	r3, [r2, #80]	@ 0x50
 80024ce:	e003      	b.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024d0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80024d4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80024d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80024dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024e0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80024e4:	f04f 0900 	mov.w	r9, #0
 80024e8:	ea58 0309 	orrs.w	r3, r8, r9
 80024ec:	d047      	beq.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80024ee:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80024f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024f4:	2b04      	cmp	r3, #4
 80024f6:	d82a      	bhi.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x136>
 80024f8:	a201      	add	r2, pc, #4	@ (adr r2, 8002500 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80024fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024fe:	bf00      	nop
 8002500:	08002515 	.word	0x08002515
 8002504:	08002523 	.word	0x08002523
 8002508:	08002539 	.word	0x08002539
 800250c:	08002557 	.word	0x08002557
 8002510:	08002557 	.word	0x08002557
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002514:	4b8e      	ldr	r3, [pc, #568]	@ (8002750 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002516:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002518:	4a8d      	ldr	r2, [pc, #564]	@ (8002750 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800251a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800251e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002520:	e01a      	b.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002522:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002526:	3308      	adds	r3, #8
 8002528:	2100      	movs	r1, #0
 800252a:	4618      	mov	r0, r3
 800252c:	f001 fc7c 	bl	8003e28 <RCCEx_PLL2_Config>
 8002530:	4603      	mov	r3, r0
 8002532:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002536:	e00f      	b.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002538:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800253c:	3328      	adds	r3, #40	@ 0x28
 800253e:	2100      	movs	r1, #0
 8002540:	4618      	mov	r0, r3
 8002542:	f001 fd23 	bl	8003f8c <RCCEx_PLL3_Config>
 8002546:	4603      	mov	r3, r0
 8002548:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800254c:	e004      	b.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002554:	e000      	b.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002556:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002558:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800255c:	2b00      	cmp	r3, #0
 800255e:	d10a      	bne.n	8002576 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002560:	4b7b      	ldr	r3, [pc, #492]	@ (8002750 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002562:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002564:	f023 0107 	bic.w	r1, r3, #7
 8002568:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800256c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800256e:	4a78      	ldr	r2, [pc, #480]	@ (8002750 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002570:	430b      	orrs	r3, r1
 8002572:	6513      	str	r3, [r2, #80]	@ 0x50
 8002574:	e003      	b.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002576:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800257a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800257e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002586:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800258a:	f04f 0b00 	mov.w	fp, #0
 800258e:	ea5a 030b 	orrs.w	r3, sl, fp
 8002592:	d04c      	beq.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8002594:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002598:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800259a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800259e:	d030      	beq.n	8002602 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80025a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80025a4:	d829      	bhi.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80025a6:	2bc0      	cmp	r3, #192	@ 0xc0
 80025a8:	d02d      	beq.n	8002606 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80025aa:	2bc0      	cmp	r3, #192	@ 0xc0
 80025ac:	d825      	bhi.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80025ae:	2b80      	cmp	r3, #128	@ 0x80
 80025b0:	d018      	beq.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80025b2:	2b80      	cmp	r3, #128	@ 0x80
 80025b4:	d821      	bhi.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d002      	beq.n	80025c0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80025ba:	2b40      	cmp	r3, #64	@ 0x40
 80025bc:	d007      	beq.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80025be:	e01c      	b.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80025c0:	4b63      	ldr	r3, [pc, #396]	@ (8002750 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80025c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025c4:	4a62      	ldr	r2, [pc, #392]	@ (8002750 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80025c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80025cc:	e01c      	b.n	8002608 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80025ce:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80025d2:	3308      	adds	r3, #8
 80025d4:	2100      	movs	r1, #0
 80025d6:	4618      	mov	r0, r3
 80025d8:	f001 fc26 	bl	8003e28 <RCCEx_PLL2_Config>
 80025dc:	4603      	mov	r3, r0
 80025de:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80025e2:	e011      	b.n	8002608 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80025e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80025e8:	3328      	adds	r3, #40	@ 0x28
 80025ea:	2100      	movs	r1, #0
 80025ec:	4618      	mov	r0, r3
 80025ee:	f001 fccd 	bl	8003f8c <RCCEx_PLL3_Config>
 80025f2:	4603      	mov	r3, r0
 80025f4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80025f8:	e006      	b.n	8002608 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002600:	e002      	b.n	8002608 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002602:	bf00      	nop
 8002604:	e000      	b.n	8002608 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002606:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002608:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800260c:	2b00      	cmp	r3, #0
 800260e:	d10a      	bne.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002610:	4b4f      	ldr	r3, [pc, #316]	@ (8002750 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002612:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002614:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8002618:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800261c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800261e:	4a4c      	ldr	r2, [pc, #304]	@ (8002750 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002620:	430b      	orrs	r3, r1
 8002622:	6513      	str	r3, [r2, #80]	@ 0x50
 8002624:	e003      	b.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002626:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800262a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800262e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002636:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800263a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 800263e:	2300      	movs	r3, #0
 8002640:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8002644:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 8002648:	460b      	mov	r3, r1
 800264a:	4313      	orrs	r3, r2
 800264c:	d053      	beq.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800264e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002652:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002656:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800265a:	d035      	beq.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800265c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002660:	d82e      	bhi.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002662:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002666:	d031      	beq.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8002668:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800266c:	d828      	bhi.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800266e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002672:	d01a      	beq.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0x292>
 8002674:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002678:	d822      	bhi.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800267a:	2b00      	cmp	r3, #0
 800267c:	d003      	beq.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800267e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002682:	d007      	beq.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8002684:	e01c      	b.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002686:	4b32      	ldr	r3, [pc, #200]	@ (8002750 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002688:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800268a:	4a31      	ldr	r2, [pc, #196]	@ (8002750 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800268c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002690:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002692:	e01c      	b.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002694:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002698:	3308      	adds	r3, #8
 800269a:	2100      	movs	r1, #0
 800269c:	4618      	mov	r0, r3
 800269e:	f001 fbc3 	bl	8003e28 <RCCEx_PLL2_Config>
 80026a2:	4603      	mov	r3, r0
 80026a4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80026a8:	e011      	b.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80026aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80026ae:	3328      	adds	r3, #40	@ 0x28
 80026b0:	2100      	movs	r1, #0
 80026b2:	4618      	mov	r0, r3
 80026b4:	f001 fc6a 	bl	8003f8c <RCCEx_PLL3_Config>
 80026b8:	4603      	mov	r3, r0
 80026ba:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80026be:	e006      	b.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80026c6:	e002      	b.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80026c8:	bf00      	nop
 80026ca:	e000      	b.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80026cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80026ce:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d10b      	bne.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80026d6:	4b1e      	ldr	r3, [pc, #120]	@ (8002750 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80026d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026da:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80026de:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80026e2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80026e6:	4a1a      	ldr	r2, [pc, #104]	@ (8002750 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80026e8:	430b      	orrs	r3, r1
 80026ea:	6593      	str	r3, [r2, #88]	@ 0x58
 80026ec:	e003      	b.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026ee:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80026f2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80026f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80026fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026fe:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8002702:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8002706:	2300      	movs	r3, #0
 8002708:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800270c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8002710:	460b      	mov	r3, r1
 8002712:	4313      	orrs	r3, r2
 8002714:	d056      	beq.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8002716:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800271a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800271e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002722:	d038      	beq.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8002724:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002728:	d831      	bhi.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800272a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800272e:	d034      	beq.n	800279a <HAL_RCCEx_PeriphCLKConfig+0x382>
 8002730:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002734:	d82b      	bhi.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002736:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800273a:	d01d      	beq.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800273c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002740:	d825      	bhi.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002742:	2b00      	cmp	r3, #0
 8002744:	d006      	beq.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8002746:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800274a:	d00a      	beq.n	8002762 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800274c:	e01f      	b.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800274e:	bf00      	nop
 8002750:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002754:	4ba2      	ldr	r3, [pc, #648]	@ (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002756:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002758:	4aa1      	ldr	r2, [pc, #644]	@ (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800275a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800275e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002760:	e01c      	b.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002762:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002766:	3308      	adds	r3, #8
 8002768:	2100      	movs	r1, #0
 800276a:	4618      	mov	r0, r3
 800276c:	f001 fb5c 	bl	8003e28 <RCCEx_PLL2_Config>
 8002770:	4603      	mov	r3, r0
 8002772:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002776:	e011      	b.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002778:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800277c:	3328      	adds	r3, #40	@ 0x28
 800277e:	2100      	movs	r1, #0
 8002780:	4618      	mov	r0, r3
 8002782:	f001 fc03 	bl	8003f8c <RCCEx_PLL3_Config>
 8002786:	4603      	mov	r3, r0
 8002788:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800278c:	e006      	b.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002794:	e002      	b.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002796:	bf00      	nop
 8002798:	e000      	b.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800279a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800279c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d10b      	bne.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80027a4:	4b8e      	ldr	r3, [pc, #568]	@ (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80027a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027a8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80027ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80027b0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80027b4:	4a8a      	ldr	r2, [pc, #552]	@ (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80027b6:	430b      	orrs	r3, r1
 80027b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80027ba:	e003      	b.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027bc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80027c0:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80027c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80027c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027cc:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80027d0:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80027d4:	2300      	movs	r3, #0
 80027d6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80027da:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80027de:	460b      	mov	r3, r1
 80027e0:	4313      	orrs	r3, r2
 80027e2:	d03a      	beq.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80027e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80027e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027ea:	2b30      	cmp	r3, #48	@ 0x30
 80027ec:	d01f      	beq.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x416>
 80027ee:	2b30      	cmp	r3, #48	@ 0x30
 80027f0:	d819      	bhi.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80027f2:	2b20      	cmp	r3, #32
 80027f4:	d00c      	beq.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80027f6:	2b20      	cmp	r3, #32
 80027f8:	d815      	bhi.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d019      	beq.n	8002832 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80027fe:	2b10      	cmp	r3, #16
 8002800:	d111      	bne.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002802:	4b77      	ldr	r3, [pc, #476]	@ (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002804:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002806:	4a76      	ldr	r2, [pc, #472]	@ (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002808:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800280c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800280e:	e011      	b.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002810:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002814:	3308      	adds	r3, #8
 8002816:	2102      	movs	r1, #2
 8002818:	4618      	mov	r0, r3
 800281a:	f001 fb05 	bl	8003e28 <RCCEx_PLL2_Config>
 800281e:	4603      	mov	r3, r0
 8002820:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002824:	e006      	b.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800282c:	e002      	b.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800282e:	bf00      	nop
 8002830:	e000      	b.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002832:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002834:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002838:	2b00      	cmp	r3, #0
 800283a:	d10a      	bne.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800283c:	4b68      	ldr	r3, [pc, #416]	@ (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800283e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002840:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8002844:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002848:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800284a:	4a65      	ldr	r2, [pc, #404]	@ (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800284c:	430b      	orrs	r3, r1
 800284e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002850:	e003      	b.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002852:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002856:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800285a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800285e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002862:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8002866:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800286a:	2300      	movs	r3, #0
 800286c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8002870:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8002874:	460b      	mov	r3, r1
 8002876:	4313      	orrs	r3, r2
 8002878:	d051      	beq.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800287a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800287e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002880:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002884:	d035      	beq.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8002886:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800288a:	d82e      	bhi.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800288c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002890:	d031      	beq.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8002892:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002896:	d828      	bhi.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002898:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800289c:	d01a      	beq.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800289e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80028a2:	d822      	bhi.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d003      	beq.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80028a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80028ac:	d007      	beq.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80028ae:	e01c      	b.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80028b0:	4b4b      	ldr	r3, [pc, #300]	@ (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80028b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028b4:	4a4a      	ldr	r2, [pc, #296]	@ (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80028b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80028ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80028bc:	e01c      	b.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80028be:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80028c2:	3308      	adds	r3, #8
 80028c4:	2100      	movs	r1, #0
 80028c6:	4618      	mov	r0, r3
 80028c8:	f001 faae 	bl	8003e28 <RCCEx_PLL2_Config>
 80028cc:	4603      	mov	r3, r0
 80028ce:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80028d2:	e011      	b.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80028d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80028d8:	3328      	adds	r3, #40	@ 0x28
 80028da:	2100      	movs	r1, #0
 80028dc:	4618      	mov	r0, r3
 80028de:	f001 fb55 	bl	8003f8c <RCCEx_PLL3_Config>
 80028e2:	4603      	mov	r3, r0
 80028e4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80028e8:	e006      	b.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80028f0:	e002      	b.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80028f2:	bf00      	nop
 80028f4:	e000      	b.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80028f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80028f8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d10a      	bne.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002900:	4b37      	ldr	r3, [pc, #220]	@ (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002902:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002904:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8002908:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800290c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800290e:	4a34      	ldr	r2, [pc, #208]	@ (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002910:	430b      	orrs	r3, r1
 8002912:	6513      	str	r3, [r2, #80]	@ 0x50
 8002914:	e003      	b.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002916:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800291a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800291e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002926:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800292a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800292e:	2300      	movs	r3, #0
 8002930:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8002934:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8002938:	460b      	mov	r3, r1
 800293a:	4313      	orrs	r3, r2
 800293c:	d056      	beq.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800293e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002942:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002944:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002948:	d033      	beq.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800294a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800294e:	d82c      	bhi.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002950:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002954:	d02f      	beq.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8002956:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800295a:	d826      	bhi.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x592>
 800295c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002960:	d02b      	beq.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8002962:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002966:	d820      	bhi.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002968:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800296c:	d012      	beq.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800296e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002972:	d81a      	bhi.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002974:	2b00      	cmp	r3, #0
 8002976:	d022      	beq.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8002978:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800297c:	d115      	bne.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800297e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002982:	3308      	adds	r3, #8
 8002984:	2101      	movs	r1, #1
 8002986:	4618      	mov	r0, r3
 8002988:	f001 fa4e 	bl	8003e28 <RCCEx_PLL2_Config>
 800298c:	4603      	mov	r3, r0
 800298e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002992:	e015      	b.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002994:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002998:	3328      	adds	r3, #40	@ 0x28
 800299a:	2101      	movs	r1, #1
 800299c:	4618      	mov	r0, r3
 800299e:	f001 faf5 	bl	8003f8c <RCCEx_PLL3_Config>
 80029a2:	4603      	mov	r3, r0
 80029a4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80029a8:	e00a      	b.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80029b0:	e006      	b.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80029b2:	bf00      	nop
 80029b4:	e004      	b.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80029b6:	bf00      	nop
 80029b8:	e002      	b.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80029ba:	bf00      	nop
 80029bc:	e000      	b.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80029be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80029c0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d10d      	bne.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80029c8:	4b05      	ldr	r3, [pc, #20]	@ (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80029ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80029cc:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80029d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80029d4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80029d6:	4a02      	ldr	r2, [pc, #8]	@ (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80029d8:	430b      	orrs	r3, r1
 80029da:	6513      	str	r3, [r2, #80]	@ 0x50
 80029dc:	e006      	b.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80029de:	bf00      	nop
 80029e0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029e4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80029e8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80029ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80029f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029f4:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80029f8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80029fc:	2300      	movs	r3, #0
 80029fe:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8002a02:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8002a06:	460b      	mov	r3, r1
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	d055      	beq.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8002a0c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002a10:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002a14:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002a18:	d033      	beq.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8002a1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002a1e:	d82c      	bhi.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002a20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a24:	d02f      	beq.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8002a26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a2a:	d826      	bhi.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002a2c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002a30:	d02b      	beq.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8002a32:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002a36:	d820      	bhi.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002a38:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002a3c:	d012      	beq.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8002a3e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002a42:	d81a      	bhi.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d022      	beq.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8002a48:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002a4c:	d115      	bne.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002a4e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002a52:	3308      	adds	r3, #8
 8002a54:	2101      	movs	r1, #1
 8002a56:	4618      	mov	r0, r3
 8002a58:	f001 f9e6 	bl	8003e28 <RCCEx_PLL2_Config>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002a62:	e015      	b.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002a64:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002a68:	3328      	adds	r3, #40	@ 0x28
 8002a6a:	2101      	movs	r1, #1
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f001 fa8d 	bl	8003f8c <RCCEx_PLL3_Config>
 8002a72:	4603      	mov	r3, r0
 8002a74:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002a78:	e00a      	b.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002a80:	e006      	b.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002a82:	bf00      	nop
 8002a84:	e004      	b.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002a86:	bf00      	nop
 8002a88:	e002      	b.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002a8a:	bf00      	nop
 8002a8c:	e000      	b.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002a8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a90:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d10b      	bne.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002a98:	4bb6      	ldr	r3, [pc, #728]	@ (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002a9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a9c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8002aa0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002aa4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002aa8:	4ab2      	ldr	r2, [pc, #712]	@ (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002aaa:	430b      	orrs	r3, r1
 8002aac:	6593      	str	r3, [r2, #88]	@ 0x58
 8002aae:	e003      	b.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ab0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002ab4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8002ab8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ac0:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8002ac4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002ac8:	2300      	movs	r3, #0
 8002aca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002ace:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8002ad2:	460b      	mov	r3, r1
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	d02a      	beq.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 8002ad8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002adc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d011      	beq.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8002ae2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ae6:	d10a      	bne.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002ae8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002aec:	3308      	adds	r3, #8
 8002aee:	2101      	movs	r1, #1
 8002af0:	4618      	mov	r0, r3
 8002af2:	f001 f999 	bl	8003e28 <RCCEx_PLL2_Config>
 8002af6:	4603      	mov	r3, r0
 8002af8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 8002afc:	e004      	b.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002b04:	e000      	b.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 8002b06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b08:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d10a      	bne.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8002b10:	4b98      	ldr	r3, [pc, #608]	@ (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002b12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b14:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8002b18:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002b1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b1e:	4a95      	ldr	r2, [pc, #596]	@ (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002b20:	430b      	orrs	r3, r1
 8002b22:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002b24:	e003      	b.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b26:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002b2a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002b2e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b36:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8002b3a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002b3e:	2300      	movs	r3, #0
 8002b40:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8002b44:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002b48:	460b      	mov	r3, r1
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	d037      	beq.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8002b4e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002b52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b54:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002b58:	d00e      	beq.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x760>
 8002b5a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002b5e:	d816      	bhi.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x776>
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d018      	beq.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8002b64:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002b68:	d111      	bne.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b6a:	4b82      	ldr	r3, [pc, #520]	@ (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002b6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b6e:	4a81      	ldr	r2, [pc, #516]	@ (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002b70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b74:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002b76:	e00f      	b.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002b78:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002b7c:	3308      	adds	r3, #8
 8002b7e:	2101      	movs	r1, #1
 8002b80:	4618      	mov	r0, r3
 8002b82:	f001 f951 	bl	8003e28 <RCCEx_PLL2_Config>
 8002b86:	4603      	mov	r3, r0
 8002b88:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002b8c:	e004      	b.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002b94:	e000      	b.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 8002b96:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b98:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d10a      	bne.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002ba0:	4b74      	ldr	r3, [pc, #464]	@ (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002ba2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ba4:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8002ba8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002bac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bae:	4a71      	ldr	r2, [pc, #452]	@ (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002bb0:	430b      	orrs	r3, r1
 8002bb2:	6513      	str	r3, [r2, #80]	@ 0x50
 8002bb4:	e003      	b.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bb6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002bba:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002bbe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bc6:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8002bca:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002bce:	2300      	movs	r3, #0
 8002bd0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8002bd4:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8002bd8:	460b      	mov	r3, r1
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	d03a      	beq.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8002bde:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002be2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002be4:	2b03      	cmp	r3, #3
 8002be6:	d81d      	bhi.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x80c>
 8002be8:	a201      	add	r2, pc, #4	@ (adr r2, 8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002bea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bee:	bf00      	nop
 8002bf0:	08002c2d 	.word	0x08002c2d
 8002bf4:	08002c01 	.word	0x08002c01
 8002bf8:	08002c0f 	.word	0x08002c0f
 8002bfc:	08002c2d 	.word	0x08002c2d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c00:	4b5c      	ldr	r3, [pc, #368]	@ (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002c02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c04:	4a5b      	ldr	r2, [pc, #364]	@ (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002c06:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c0a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002c0c:	e00f      	b.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002c0e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002c12:	3308      	adds	r3, #8
 8002c14:	2102      	movs	r1, #2
 8002c16:	4618      	mov	r0, r3
 8002c18:	f001 f906 	bl	8003e28 <RCCEx_PLL2_Config>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002c22:	e004      	b.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002c2a:	e000      	b.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 8002c2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c2e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d10a      	bne.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002c36:	4b4f      	ldr	r3, [pc, #316]	@ (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002c38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c3a:	f023 0103 	bic.w	r1, r3, #3
 8002c3e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002c42:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c44:	4a4b      	ldr	r2, [pc, #300]	@ (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002c46:	430b      	orrs	r3, r1
 8002c48:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c4a:	e003      	b.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c4c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002c50:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c54:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c5c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8002c60:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002c64:	2300      	movs	r3, #0
 8002c66:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002c6a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8002c6e:	460b      	mov	r3, r1
 8002c70:	4313      	orrs	r3, r2
 8002c72:	f000 80a0 	beq.w	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c76:	4b40      	ldr	r3, [pc, #256]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a3f      	ldr	r2, [pc, #252]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8002c7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c80:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c82:	f7fe f845 	bl	8000d10 <HAL_GetTick>
 8002c86:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c8a:	e00b      	b.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c8c:	f7fe f840 	bl	8000d10 <HAL_GetTick>
 8002c90:	4602      	mov	r2, r0
 8002c92:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002c96:	1ad3      	subs	r3, r2, r3
 8002c98:	2b64      	cmp	r3, #100	@ 0x64
 8002c9a:	d903      	bls.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 8002c9c:	2303      	movs	r3, #3
 8002c9e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002ca2:	e005      	b.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ca4:	4b34      	ldr	r3, [pc, #208]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d0ed      	beq.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 8002cb0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d17a      	bne.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002cb8:	4b2e      	ldr	r3, [pc, #184]	@ (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002cba:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002cbc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002cc0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8002cc4:	4053      	eors	r3, r2
 8002cc6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d015      	beq.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002cce:	4b29      	ldr	r3, [pc, #164]	@ (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002cd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cd2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002cd6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002cda:	4b26      	ldr	r3, [pc, #152]	@ (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002cdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cde:	4a25      	ldr	r2, [pc, #148]	@ (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002ce0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ce4:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002ce6:	4b23      	ldr	r3, [pc, #140]	@ (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002ce8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cea:	4a22      	ldr	r2, [pc, #136]	@ (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002cec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002cf0:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002cf2:	4a20      	ldr	r2, [pc, #128]	@ (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002cf4:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002cf8:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002cfa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002cfe:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8002d02:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d06:	d118      	bne.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d08:	f7fe f802 	bl	8000d10 <HAL_GetTick>
 8002d0c:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002d10:	e00d      	b.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d12:	f7fd fffd 	bl	8000d10 <HAL_GetTick>
 8002d16:	4602      	mov	r2, r0
 8002d18:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002d1c:	1ad2      	subs	r2, r2, r3
 8002d1e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d903      	bls.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 8002d26:	2303      	movs	r3, #3
 8002d28:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
            break;
 8002d2c:	e005      	b.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002d2e:	4b11      	ldr	r3, [pc, #68]	@ (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002d30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d32:	f003 0302 	and.w	r3, r3, #2
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d0eb      	beq.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 8002d3a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d130      	bne.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d42:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002d46:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8002d4a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d4e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002d52:	d115      	bne.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x968>
 8002d54:	4b07      	ldr	r3, [pc, #28]	@ (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002d56:	691b      	ldr	r3, [r3, #16]
 8002d58:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8002d5c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002d60:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8002d64:	091a      	lsrs	r2, r3, #4
 8002d66:	4b05      	ldr	r3, [pc, #20]	@ (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8002d68:	4013      	ands	r3, r2
 8002d6a:	4a02      	ldr	r2, [pc, #8]	@ (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002d6c:	430b      	orrs	r3, r1
 8002d6e:	6113      	str	r3, [r2, #16]
 8002d70:	e00c      	b.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x974>
 8002d72:	bf00      	nop
 8002d74:	58024400 	.word	0x58024400
 8002d78:	58024800 	.word	0x58024800
 8002d7c:	00ffffcf 	.word	0x00ffffcf
 8002d80:	4bd4      	ldr	r3, [pc, #848]	@ (80030d4 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8002d82:	691b      	ldr	r3, [r3, #16]
 8002d84:	4ad3      	ldr	r2, [pc, #844]	@ (80030d4 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8002d86:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002d8a:	6113      	str	r3, [r2, #16]
 8002d8c:	4bd1      	ldr	r3, [pc, #836]	@ (80030d4 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8002d8e:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8002d90:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002d94:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8002d98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d9c:	4acd      	ldr	r2, [pc, #820]	@ (80030d4 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8002d9e:	430b      	orrs	r3, r1
 8002da0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002da2:	e008      	b.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002da4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002da8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
 8002dac:	e003      	b.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dae:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002db2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002db6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dbe:	f002 0301 	and.w	r3, r2, #1
 8002dc2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002dcc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002dd0:	460b      	mov	r3, r1
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	f000 808b 	beq.w	8002eee <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8002dd8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002ddc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002de0:	2b28      	cmp	r3, #40	@ 0x28
 8002de2:	d86b      	bhi.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8002de4:	a201      	add	r2, pc, #4	@ (adr r2, 8002dec <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 8002de6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dea:	bf00      	nop
 8002dec:	08002ec5 	.word	0x08002ec5
 8002df0:	08002ebd 	.word	0x08002ebd
 8002df4:	08002ebd 	.word	0x08002ebd
 8002df8:	08002ebd 	.word	0x08002ebd
 8002dfc:	08002ebd 	.word	0x08002ebd
 8002e00:	08002ebd 	.word	0x08002ebd
 8002e04:	08002ebd 	.word	0x08002ebd
 8002e08:	08002ebd 	.word	0x08002ebd
 8002e0c:	08002e91 	.word	0x08002e91
 8002e10:	08002ebd 	.word	0x08002ebd
 8002e14:	08002ebd 	.word	0x08002ebd
 8002e18:	08002ebd 	.word	0x08002ebd
 8002e1c:	08002ebd 	.word	0x08002ebd
 8002e20:	08002ebd 	.word	0x08002ebd
 8002e24:	08002ebd 	.word	0x08002ebd
 8002e28:	08002ebd 	.word	0x08002ebd
 8002e2c:	08002ea7 	.word	0x08002ea7
 8002e30:	08002ebd 	.word	0x08002ebd
 8002e34:	08002ebd 	.word	0x08002ebd
 8002e38:	08002ebd 	.word	0x08002ebd
 8002e3c:	08002ebd 	.word	0x08002ebd
 8002e40:	08002ebd 	.word	0x08002ebd
 8002e44:	08002ebd 	.word	0x08002ebd
 8002e48:	08002ebd 	.word	0x08002ebd
 8002e4c:	08002ec5 	.word	0x08002ec5
 8002e50:	08002ebd 	.word	0x08002ebd
 8002e54:	08002ebd 	.word	0x08002ebd
 8002e58:	08002ebd 	.word	0x08002ebd
 8002e5c:	08002ebd 	.word	0x08002ebd
 8002e60:	08002ebd 	.word	0x08002ebd
 8002e64:	08002ebd 	.word	0x08002ebd
 8002e68:	08002ebd 	.word	0x08002ebd
 8002e6c:	08002ec5 	.word	0x08002ec5
 8002e70:	08002ebd 	.word	0x08002ebd
 8002e74:	08002ebd 	.word	0x08002ebd
 8002e78:	08002ebd 	.word	0x08002ebd
 8002e7c:	08002ebd 	.word	0x08002ebd
 8002e80:	08002ebd 	.word	0x08002ebd
 8002e84:	08002ebd 	.word	0x08002ebd
 8002e88:	08002ebd 	.word	0x08002ebd
 8002e8c:	08002ec5 	.word	0x08002ec5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002e90:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002e94:	3308      	adds	r3, #8
 8002e96:	2101      	movs	r1, #1
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f000 ffc5 	bl	8003e28 <RCCEx_PLL2_Config>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002ea4:	e00f      	b.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002ea6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002eaa:	3328      	adds	r3, #40	@ 0x28
 8002eac:	2101      	movs	r1, #1
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f001 f86c 	bl	8003f8c <RCCEx_PLL3_Config>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002eba:	e004      	b.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002ec2:	e000      	b.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 8002ec4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ec6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d10b      	bne.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002ece:	4b81      	ldr	r3, [pc, #516]	@ (80030d4 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8002ed0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ed2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8002ed6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002eda:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002ede:	4a7d      	ldr	r2, [pc, #500]	@ (80030d4 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8002ee0:	430b      	orrs	r3, r1
 8002ee2:	6553      	str	r3, [r2, #84]	@ 0x54
 8002ee4:	e003      	b.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ee6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002eea:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002eee:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ef6:	f002 0302 	and.w	r3, r2, #2
 8002efa:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002efe:	2300      	movs	r3, #0
 8002f00:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8002f04:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8002f08:	460b      	mov	r3, r1
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	d042      	beq.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8002f0e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002f12:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002f14:	2b05      	cmp	r3, #5
 8002f16:	d825      	bhi.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 8002f18:	a201      	add	r2, pc, #4	@ (adr r2, 8002f20 <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 8002f1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f1e:	bf00      	nop
 8002f20:	08002f6d 	.word	0x08002f6d
 8002f24:	08002f39 	.word	0x08002f39
 8002f28:	08002f4f 	.word	0x08002f4f
 8002f2c:	08002f6d 	.word	0x08002f6d
 8002f30:	08002f6d 	.word	0x08002f6d
 8002f34:	08002f6d 	.word	0x08002f6d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002f38:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002f3c:	3308      	adds	r3, #8
 8002f3e:	2101      	movs	r1, #1
 8002f40:	4618      	mov	r0, r3
 8002f42:	f000 ff71 	bl	8003e28 <RCCEx_PLL2_Config>
 8002f46:	4603      	mov	r3, r0
 8002f48:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8002f4c:	e00f      	b.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002f4e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002f52:	3328      	adds	r3, #40	@ 0x28
 8002f54:	2101      	movs	r1, #1
 8002f56:	4618      	mov	r0, r3
 8002f58:	f001 f818 	bl	8003f8c <RCCEx_PLL3_Config>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8002f62:	e004      	b.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002f6a:	e000      	b.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 8002f6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f6e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d10a      	bne.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002f76:	4b57      	ldr	r3, [pc, #348]	@ (80030d4 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8002f78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f7a:	f023 0107 	bic.w	r1, r3, #7
 8002f7e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002f82:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002f84:	4a53      	ldr	r2, [pc, #332]	@ (80030d4 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8002f86:	430b      	orrs	r3, r1
 8002f88:	6553      	str	r3, [r2, #84]	@ 0x54
 8002f8a:	e003      	b.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f8c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002f90:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002f94:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f9c:	f002 0304 	and.w	r3, r2, #4
 8002fa0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002faa:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8002fae:	460b      	mov	r3, r1
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	d044      	beq.n	800303e <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8002fb4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002fb8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002fbc:	2b05      	cmp	r3, #5
 8002fbe:	d825      	bhi.n	800300c <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 8002fc0:	a201      	add	r2, pc, #4	@ (adr r2, 8002fc8 <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 8002fc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fc6:	bf00      	nop
 8002fc8:	08003015 	.word	0x08003015
 8002fcc:	08002fe1 	.word	0x08002fe1
 8002fd0:	08002ff7 	.word	0x08002ff7
 8002fd4:	08003015 	.word	0x08003015
 8002fd8:	08003015 	.word	0x08003015
 8002fdc:	08003015 	.word	0x08003015
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002fe0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002fe4:	3308      	adds	r3, #8
 8002fe6:	2101      	movs	r1, #1
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f000 ff1d 	bl	8003e28 <RCCEx_PLL2_Config>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8002ff4:	e00f      	b.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002ff6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002ffa:	3328      	adds	r3, #40	@ 0x28
 8002ffc:	2101      	movs	r1, #1
 8002ffe:	4618      	mov	r0, r3
 8003000:	f000 ffc4 	bl	8003f8c <RCCEx_PLL3_Config>
 8003004:	4603      	mov	r3, r0
 8003006:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800300a:	e004      	b.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003012:	e000      	b.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 8003014:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003016:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800301a:	2b00      	cmp	r3, #0
 800301c:	d10b      	bne.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800301e:	4b2d      	ldr	r3, [pc, #180]	@ (80030d4 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8003020:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003022:	f023 0107 	bic.w	r1, r3, #7
 8003026:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800302a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800302e:	4a29      	ldr	r2, [pc, #164]	@ (80030d4 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8003030:	430b      	orrs	r3, r1
 8003032:	6593      	str	r3, [r2, #88]	@ 0x58
 8003034:	e003      	b.n	800303e <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003036:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800303a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800303e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003046:	f002 0320 	and.w	r3, r2, #32
 800304a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800304e:	2300      	movs	r3, #0
 8003050:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003054:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003058:	460b      	mov	r3, r1
 800305a:	4313      	orrs	r3, r2
 800305c:	d057      	beq.n	800310e <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800305e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003062:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003066:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800306a:	d035      	beq.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 800306c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003070:	d82c      	bhi.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8003072:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003076:	d031      	beq.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 8003078:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800307c:	d826      	bhi.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 800307e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003082:	d02d      	beq.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 8003084:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003088:	d820      	bhi.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 800308a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800308e:	d012      	beq.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 8003090:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003094:	d81a      	bhi.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8003096:	2b00      	cmp	r3, #0
 8003098:	d024      	beq.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0xccc>
 800309a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800309e:	d115      	bne.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80030a0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80030a4:	3308      	adds	r3, #8
 80030a6:	2100      	movs	r1, #0
 80030a8:	4618      	mov	r0, r3
 80030aa:	f000 febd 	bl	8003e28 <RCCEx_PLL2_Config>
 80030ae:	4603      	mov	r3, r0
 80030b0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80030b4:	e017      	b.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80030b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80030ba:	3328      	adds	r3, #40	@ 0x28
 80030bc:	2102      	movs	r1, #2
 80030be:	4618      	mov	r0, r3
 80030c0:	f000 ff64 	bl	8003f8c <RCCEx_PLL3_Config>
 80030c4:	4603      	mov	r3, r0
 80030c6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80030ca:	e00c      	b.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80030d2:	e008      	b.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0xcce>
 80030d4:	58024400 	.word	0x58024400
        break;
 80030d8:	bf00      	nop
 80030da:	e004      	b.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 80030dc:	bf00      	nop
 80030de:	e002      	b.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 80030e0:	bf00      	nop
 80030e2:	e000      	b.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 80030e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030e6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d10b      	bne.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80030ee:	4bc2      	ldr	r3, [pc, #776]	@ (80033f8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80030f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030f2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80030f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80030fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80030fe:	4abe      	ldr	r2, [pc, #760]	@ (80033f8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003100:	430b      	orrs	r3, r1
 8003102:	6553      	str	r3, [r2, #84]	@ 0x54
 8003104:	e003      	b.n	800310e <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003106:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800310a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800310e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003116:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800311a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800311e:	2300      	movs	r3, #0
 8003120:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003124:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003128:	460b      	mov	r3, r1
 800312a:	4313      	orrs	r3, r2
 800312c:	d055      	beq.n	80031da <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800312e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003132:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003136:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800313a:	d033      	beq.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 800313c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003140:	d82c      	bhi.n	800319c <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8003142:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003146:	d02f      	beq.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
 8003148:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800314c:	d826      	bhi.n	800319c <HAL_RCCEx_PeriphCLKConfig+0xd84>
 800314e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003152:	d02b      	beq.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0xd94>
 8003154:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003158:	d820      	bhi.n	800319c <HAL_RCCEx_PeriphCLKConfig+0xd84>
 800315a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800315e:	d012      	beq.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 8003160:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003164:	d81a      	bhi.n	800319c <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8003166:	2b00      	cmp	r3, #0
 8003168:	d022      	beq.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0xd98>
 800316a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800316e:	d115      	bne.n	800319c <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003170:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003174:	3308      	adds	r3, #8
 8003176:	2100      	movs	r1, #0
 8003178:	4618      	mov	r0, r3
 800317a:	f000 fe55 	bl	8003e28 <RCCEx_PLL2_Config>
 800317e:	4603      	mov	r3, r0
 8003180:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003184:	e015      	b.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003186:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800318a:	3328      	adds	r3, #40	@ 0x28
 800318c:	2102      	movs	r1, #2
 800318e:	4618      	mov	r0, r3
 8003190:	f000 fefc 	bl	8003f8c <RCCEx_PLL3_Config>
 8003194:	4603      	mov	r3, r0
 8003196:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800319a:	e00a      	b.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80031a2:	e006      	b.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 80031a4:	bf00      	nop
 80031a6:	e004      	b.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 80031a8:	bf00      	nop
 80031aa:	e002      	b.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 80031ac:	bf00      	nop
 80031ae:	e000      	b.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 80031b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031b2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d10b      	bne.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80031ba:	4b8f      	ldr	r3, [pc, #572]	@ (80033f8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80031bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031be:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80031c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80031c6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80031ca:	4a8b      	ldr	r2, [pc, #556]	@ (80033f8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80031cc:	430b      	orrs	r3, r1
 80031ce:	6593      	str	r3, [r2, #88]	@ 0x58
 80031d0:	e003      	b.n	80031da <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031d2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80031d6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80031da:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80031de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031e2:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80031e6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80031ea:	2300      	movs	r3, #0
 80031ec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80031f0:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80031f4:	460b      	mov	r3, r1
 80031f6:	4313      	orrs	r3, r2
 80031f8:	d055      	beq.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80031fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80031fe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003202:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003206:	d033      	beq.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8003208:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800320c:	d82c      	bhi.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 800320e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003212:	d02f      	beq.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8003214:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003218:	d826      	bhi.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 800321a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800321e:	d02b      	beq.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8003220:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003224:	d820      	bhi.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8003226:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800322a:	d012      	beq.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 800322c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003230:	d81a      	bhi.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8003232:	2b00      	cmp	r3, #0
 8003234:	d022      	beq.n	800327c <HAL_RCCEx_PeriphCLKConfig+0xe64>
 8003236:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800323a:	d115      	bne.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800323c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003240:	3308      	adds	r3, #8
 8003242:	2100      	movs	r1, #0
 8003244:	4618      	mov	r0, r3
 8003246:	f000 fdef 	bl	8003e28 <RCCEx_PLL2_Config>
 800324a:	4603      	mov	r3, r0
 800324c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003250:	e015      	b.n	800327e <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003252:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003256:	3328      	adds	r3, #40	@ 0x28
 8003258:	2102      	movs	r1, #2
 800325a:	4618      	mov	r0, r3
 800325c:	f000 fe96 	bl	8003f8c <RCCEx_PLL3_Config>
 8003260:	4603      	mov	r3, r0
 8003262:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003266:	e00a      	b.n	800327e <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800326e:	e006      	b.n	800327e <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8003270:	bf00      	nop
 8003272:	e004      	b.n	800327e <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8003274:	bf00      	nop
 8003276:	e002      	b.n	800327e <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8003278:	bf00      	nop
 800327a:	e000      	b.n	800327e <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 800327c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800327e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003282:	2b00      	cmp	r3, #0
 8003284:	d10b      	bne.n	800329e <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003286:	4b5c      	ldr	r3, [pc, #368]	@ (80033f8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003288:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800328a:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800328e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003292:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003296:	4a58      	ldr	r2, [pc, #352]	@ (80033f8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003298:	430b      	orrs	r3, r1
 800329a:	6593      	str	r3, [r2, #88]	@ 0x58
 800329c:	e003      	b.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800329e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80032a2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80032a6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80032aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032ae:	f002 0308 	and.w	r3, r2, #8
 80032b2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80032b6:	2300      	movs	r3, #0
 80032b8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80032bc:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80032c0:	460b      	mov	r3, r1
 80032c2:	4313      	orrs	r3, r2
 80032c4:	d01e      	beq.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80032c6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80032ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80032d2:	d10c      	bne.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80032d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80032d8:	3328      	adds	r3, #40	@ 0x28
 80032da:	2102      	movs	r1, #2
 80032dc:	4618      	mov	r0, r3
 80032de:	f000 fe55 	bl	8003f8c <RCCEx_PLL3_Config>
 80032e2:	4603      	mov	r3, r0
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d002      	beq.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80032ee:	4b42      	ldr	r3, [pc, #264]	@ (80033f8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80032f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032f2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80032f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80032fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032fe:	4a3e      	ldr	r2, [pc, #248]	@ (80033f8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003300:	430b      	orrs	r3, r1
 8003302:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003304:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800330c:	f002 0310 	and.w	r3, r2, #16
 8003310:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003314:	2300      	movs	r3, #0
 8003316:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800331a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800331e:	460b      	mov	r3, r1
 8003320:	4313      	orrs	r3, r2
 8003322:	d01e      	beq.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003324:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003328:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800332c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003330:	d10c      	bne.n	800334c <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003332:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003336:	3328      	adds	r3, #40	@ 0x28
 8003338:	2102      	movs	r1, #2
 800333a:	4618      	mov	r0, r3
 800333c:	f000 fe26 	bl	8003f8c <RCCEx_PLL3_Config>
 8003340:	4603      	mov	r3, r0
 8003342:	2b00      	cmp	r3, #0
 8003344:	d002      	beq.n	800334c <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800334c:	4b2a      	ldr	r3, [pc, #168]	@ (80033f8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800334e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003350:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003354:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003358:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800335c:	4a26      	ldr	r2, [pc, #152]	@ (80033f8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800335e:	430b      	orrs	r3, r1
 8003360:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003362:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800336a:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800336e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003372:	2300      	movs	r3, #0
 8003374:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003378:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800337c:	460b      	mov	r3, r1
 800337e:	4313      	orrs	r3, r2
 8003380:	d040      	beq.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003382:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003386:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800338a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800338e:	d022      	beq.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 8003390:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003394:	d81b      	bhi.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8003396:	2b00      	cmp	r3, #0
 8003398:	d003      	beq.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 800339a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800339e:	d00b      	beq.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 80033a0:	e015      	b.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80033a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80033a6:	3308      	adds	r3, #8
 80033a8:	2100      	movs	r1, #0
 80033aa:	4618      	mov	r0, r3
 80033ac:	f000 fd3c 	bl	8003e28 <RCCEx_PLL2_Config>
 80033b0:	4603      	mov	r3, r0
 80033b2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80033b6:	e00f      	b.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80033b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80033bc:	3328      	adds	r3, #40	@ 0x28
 80033be:	2102      	movs	r1, #2
 80033c0:	4618      	mov	r0, r3
 80033c2:	f000 fde3 	bl	8003f8c <RCCEx_PLL3_Config>
 80033c6:	4603      	mov	r3, r0
 80033c8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80033cc:	e004      	b.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80033d4:	e000      	b.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 80033d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033d8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d10d      	bne.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80033e0:	4b05      	ldr	r3, [pc, #20]	@ (80033f8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80033e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033e4:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80033e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80033ec:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80033f0:	4a01      	ldr	r2, [pc, #4]	@ (80033f8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80033f2:	430b      	orrs	r3, r1
 80033f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80033f6:	e005      	b.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 80033f8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033fc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003400:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003404:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800340c:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8003410:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003412:	2300      	movs	r3, #0
 8003414:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003416:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800341a:	460b      	mov	r3, r1
 800341c:	4313      	orrs	r3, r2
 800341e:	d03b      	beq.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003420:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003424:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003428:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800342c:	d01f      	beq.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x1056>
 800342e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003432:	d818      	bhi.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x104e>
 8003434:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003438:	d003      	beq.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x102a>
 800343a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800343e:	d007      	beq.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x1038>
 8003440:	e011      	b.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003442:	4b64      	ldr	r3, [pc, #400]	@ (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003444:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003446:	4a63      	ldr	r2, [pc, #396]	@ (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003448:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800344c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800344e:	e00f      	b.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003450:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003454:	3328      	adds	r3, #40	@ 0x28
 8003456:	2101      	movs	r1, #1
 8003458:	4618      	mov	r0, r3
 800345a:	f000 fd97 	bl	8003f8c <RCCEx_PLL3_Config>
 800345e:	4603      	mov	r3, r0
 8003460:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 8003464:	e004      	b.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800346c:	e000      	b.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 800346e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003470:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003474:	2b00      	cmp	r3, #0
 8003476:	d10b      	bne.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003478:	4b56      	ldr	r3, [pc, #344]	@ (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800347a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800347c:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003480:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003484:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003488:	4a52      	ldr	r2, [pc, #328]	@ (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800348a:	430b      	orrs	r3, r1
 800348c:	6553      	str	r3, [r2, #84]	@ 0x54
 800348e:	e003      	b.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003490:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003494:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003498:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800349c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034a0:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80034a4:	673b      	str	r3, [r7, #112]	@ 0x70
 80034a6:	2300      	movs	r3, #0
 80034a8:	677b      	str	r3, [r7, #116]	@ 0x74
 80034aa:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80034ae:	460b      	mov	r3, r1
 80034b0:	4313      	orrs	r3, r2
 80034b2:	d031      	beq.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80034b4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80034b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d003      	beq.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 80034be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034c2:	d007      	beq.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 80034c4:	e011      	b.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034c6:	4b43      	ldr	r3, [pc, #268]	@ (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80034c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034ca:	4a42      	ldr	r2, [pc, #264]	@ (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80034cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80034d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80034d2:	e00e      	b.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80034d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80034d8:	3308      	adds	r3, #8
 80034da:	2102      	movs	r1, #2
 80034dc:	4618      	mov	r0, r3
 80034de:	f000 fca3 	bl	8003e28 <RCCEx_PLL2_Config>
 80034e2:	4603      	mov	r3, r0
 80034e4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80034e8:	e003      	b.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80034f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034f2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d10a      	bne.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80034fa:	4b36      	ldr	r3, [pc, #216]	@ (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80034fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034fe:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003502:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003506:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003508:	4a32      	ldr	r2, [pc, #200]	@ (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800350a:	430b      	orrs	r3, r1
 800350c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800350e:	e003      	b.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003510:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003514:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003518:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800351c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003520:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8003524:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003526:	2300      	movs	r3, #0
 8003528:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800352a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800352e:	460b      	mov	r3, r1
 8003530:	4313      	orrs	r3, r2
 8003532:	d00c      	beq.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003534:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003538:	3328      	adds	r3, #40	@ 0x28
 800353a:	2102      	movs	r1, #2
 800353c:	4618      	mov	r0, r3
 800353e:	f000 fd25 	bl	8003f8c <RCCEx_PLL3_Config>
 8003542:	4603      	mov	r3, r0
 8003544:	2b00      	cmp	r3, #0
 8003546:	d002      	beq.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800354e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003556:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800355a:	663b      	str	r3, [r7, #96]	@ 0x60
 800355c:	2300      	movs	r3, #0
 800355e:	667b      	str	r3, [r7, #100]	@ 0x64
 8003560:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8003564:	460b      	mov	r3, r1
 8003566:	4313      	orrs	r3, r2
 8003568:	d03a      	beq.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 800356a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800356e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003572:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003576:	d018      	beq.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x1192>
 8003578:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800357c:	d811      	bhi.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 800357e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003582:	d014      	beq.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x1196>
 8003584:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003588:	d80b      	bhi.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 800358a:	2b00      	cmp	r3, #0
 800358c:	d011      	beq.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x119a>
 800358e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003592:	d106      	bne.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003594:	4b0f      	ldr	r3, [pc, #60]	@ (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003596:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003598:	4a0e      	ldr	r2, [pc, #56]	@ (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800359a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800359e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80035a0:	e008      	b.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80035a8:	e004      	b.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 80035aa:	bf00      	nop
 80035ac:	e002      	b.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 80035ae:	bf00      	nop
 80035b0:	e000      	b.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 80035b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035b4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d10d      	bne.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80035bc:	4b05      	ldr	r3, [pc, #20]	@ (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80035be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035c0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80035c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80035c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80035cc:	4a01      	ldr	r2, [pc, #4]	@ (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80035ce:	430b      	orrs	r3, r1
 80035d0:	6553      	str	r3, [r2, #84]	@ 0x54
 80035d2:	e005      	b.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 80035d4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035d8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80035dc:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80035e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80035e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035e8:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80035ec:	65bb      	str	r3, [r7, #88]	@ 0x58
 80035ee:	2300      	movs	r3, #0
 80035f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80035f2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80035f6:	460b      	mov	r3, r1
 80035f8:	4313      	orrs	r3, r2
 80035fa:	d009      	beq.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80035fc:	4baa      	ldr	r3, [pc, #680]	@ (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80035fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003600:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8003604:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003608:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800360a:	4aa7      	ldr	r2, [pc, #668]	@ (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800360c:	430b      	orrs	r3, r1
 800360e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003610:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003618:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800361c:	653b      	str	r3, [r7, #80]	@ 0x50
 800361e:	2300      	movs	r3, #0
 8003620:	657b      	str	r3, [r7, #84]	@ 0x54
 8003622:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8003626:	460b      	mov	r3, r1
 8003628:	4313      	orrs	r3, r2
 800362a:	d00a      	beq.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800362c:	4b9e      	ldr	r3, [pc, #632]	@ (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800362e:	691b      	ldr	r3, [r3, #16]
 8003630:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8003634:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003638:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800363c:	4a9a      	ldr	r2, [pc, #616]	@ (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800363e:	430b      	orrs	r3, r1
 8003640:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003642:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800364a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800364e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003650:	2300      	movs	r3, #0
 8003652:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003654:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8003658:	460b      	mov	r3, r1
 800365a:	4313      	orrs	r3, r2
 800365c:	d009      	beq.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800365e:	4b92      	ldr	r3, [pc, #584]	@ (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003660:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003662:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8003666:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800366a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800366c:	4a8e      	ldr	r2, [pc, #568]	@ (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800366e:	430b      	orrs	r3, r1
 8003670:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003672:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800367a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800367e:	643b      	str	r3, [r7, #64]	@ 0x40
 8003680:	2300      	movs	r3, #0
 8003682:	647b      	str	r3, [r7, #68]	@ 0x44
 8003684:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8003688:	460b      	mov	r3, r1
 800368a:	4313      	orrs	r3, r2
 800368c:	d00e      	beq.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800368e:	4b86      	ldr	r3, [pc, #536]	@ (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003690:	691b      	ldr	r3, [r3, #16]
 8003692:	4a85      	ldr	r2, [pc, #532]	@ (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003694:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003698:	6113      	str	r3, [r2, #16]
 800369a:	4b83      	ldr	r3, [pc, #524]	@ (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800369c:	6919      	ldr	r1, [r3, #16]
 800369e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80036a2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80036a6:	4a80      	ldr	r2, [pc, #512]	@ (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80036a8:	430b      	orrs	r3, r1
 80036aa:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80036ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80036b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036b4:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80036b8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80036ba:	2300      	movs	r3, #0
 80036bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80036be:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80036c2:	460b      	mov	r3, r1
 80036c4:	4313      	orrs	r3, r2
 80036c6:	d009      	beq.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80036c8:	4b77      	ldr	r3, [pc, #476]	@ (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80036ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036cc:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80036d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80036d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036d6:	4a74      	ldr	r2, [pc, #464]	@ (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80036d8:	430b      	orrs	r3, r1
 80036da:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80036dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80036e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036e4:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80036e8:	633b      	str	r3, [r7, #48]	@ 0x30
 80036ea:	2300      	movs	r3, #0
 80036ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80036ee:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80036f2:	460b      	mov	r3, r1
 80036f4:	4313      	orrs	r3, r2
 80036f6:	d00a      	beq.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80036f8:	4b6b      	ldr	r3, [pc, #428]	@ (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80036fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036fc:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8003700:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003704:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003708:	4a67      	ldr	r2, [pc, #412]	@ (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800370a:	430b      	orrs	r3, r1
 800370c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800370e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003716:	2100      	movs	r1, #0
 8003718:	62b9      	str	r1, [r7, #40]	@ 0x28
 800371a:	f003 0301 	and.w	r3, r3, #1
 800371e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003720:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8003724:	460b      	mov	r3, r1
 8003726:	4313      	orrs	r3, r2
 8003728:	d011      	beq.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800372a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800372e:	3308      	adds	r3, #8
 8003730:	2100      	movs	r1, #0
 8003732:	4618      	mov	r0, r3
 8003734:	f000 fb78 	bl	8003e28 <RCCEx_PLL2_Config>
 8003738:	4603      	mov	r3, r0
 800373a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 800373e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003742:	2b00      	cmp	r3, #0
 8003744:	d003      	beq.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003746:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800374a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800374e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003756:	2100      	movs	r1, #0
 8003758:	6239      	str	r1, [r7, #32]
 800375a:	f003 0302 	and.w	r3, r3, #2
 800375e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003760:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003764:	460b      	mov	r3, r1
 8003766:	4313      	orrs	r3, r2
 8003768:	d011      	beq.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800376a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800376e:	3308      	adds	r3, #8
 8003770:	2101      	movs	r1, #1
 8003772:	4618      	mov	r0, r3
 8003774:	f000 fb58 	bl	8003e28 <RCCEx_PLL2_Config>
 8003778:	4603      	mov	r3, r0
 800377a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 800377e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003782:	2b00      	cmp	r3, #0
 8003784:	d003      	beq.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003786:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800378a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800378e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003796:	2100      	movs	r1, #0
 8003798:	61b9      	str	r1, [r7, #24]
 800379a:	f003 0304 	and.w	r3, r3, #4
 800379e:	61fb      	str	r3, [r7, #28]
 80037a0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80037a4:	460b      	mov	r3, r1
 80037a6:	4313      	orrs	r3, r2
 80037a8:	d011      	beq.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80037aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80037ae:	3308      	adds	r3, #8
 80037b0:	2102      	movs	r1, #2
 80037b2:	4618      	mov	r0, r3
 80037b4:	f000 fb38 	bl	8003e28 <RCCEx_PLL2_Config>
 80037b8:	4603      	mov	r3, r0
 80037ba:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 80037be:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d003      	beq.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037c6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80037ca:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80037ce:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80037d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037d6:	2100      	movs	r1, #0
 80037d8:	6139      	str	r1, [r7, #16]
 80037da:	f003 0308 	and.w	r3, r3, #8
 80037de:	617b      	str	r3, [r7, #20]
 80037e0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80037e4:	460b      	mov	r3, r1
 80037e6:	4313      	orrs	r3, r2
 80037e8:	d011      	beq.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80037ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80037ee:	3328      	adds	r3, #40	@ 0x28
 80037f0:	2100      	movs	r1, #0
 80037f2:	4618      	mov	r0, r3
 80037f4:	f000 fbca 	bl	8003f8c <RCCEx_PLL3_Config>
 80037f8:	4603      	mov	r3, r0
 80037fa:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  
    if (ret == HAL_OK)
 80037fe:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003802:	2b00      	cmp	r3, #0
 8003804:	d003      	beq.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003806:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800380a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800380e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003816:	2100      	movs	r1, #0
 8003818:	60b9      	str	r1, [r7, #8]
 800381a:	f003 0310 	and.w	r3, r3, #16
 800381e:	60fb      	str	r3, [r7, #12]
 8003820:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003824:	460b      	mov	r3, r1
 8003826:	4313      	orrs	r3, r2
 8003828:	d011      	beq.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800382a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800382e:	3328      	adds	r3, #40	@ 0x28
 8003830:	2101      	movs	r1, #1
 8003832:	4618      	mov	r0, r3
 8003834:	f000 fbaa 	bl	8003f8c <RCCEx_PLL3_Config>
 8003838:	4603      	mov	r3, r0
 800383a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 800383e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003842:	2b00      	cmp	r3, #0
 8003844:	d003      	beq.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003846:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800384a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800384e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003856:	2100      	movs	r1, #0
 8003858:	6039      	str	r1, [r7, #0]
 800385a:	f003 0320 	and.w	r3, r3, #32
 800385e:	607b      	str	r3, [r7, #4]
 8003860:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003864:	460b      	mov	r3, r1
 8003866:	4313      	orrs	r3, r2
 8003868:	d011      	beq.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800386a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800386e:	3328      	adds	r3, #40	@ 0x28
 8003870:	2102      	movs	r1, #2
 8003872:	4618      	mov	r0, r3
 8003874:	f000 fb8a 	bl	8003f8c <RCCEx_PLL3_Config>
 8003878:	4603      	mov	r3, r0
 800387a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 800387e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003882:	2b00      	cmp	r3, #0
 8003884:	d003      	beq.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003886:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800388a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }

  if (status == HAL_OK)
 800388e:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 8003892:	2b00      	cmp	r3, #0
 8003894:	d101      	bne.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 8003896:	2300      	movs	r3, #0
 8003898:	e000      	b.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
}
 800389c:	4618      	mov	r0, r3
 800389e:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80038a2:	46bd      	mov	sp, r7
 80038a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038a8:	58024400 	.word	0x58024400

080038ac <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80038b0:	f7fe fd56 	bl	8002360 <HAL_RCC_GetHCLKFreq>
 80038b4:	4602      	mov	r2, r0
 80038b6:	4b06      	ldr	r3, [pc, #24]	@ (80038d0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80038b8:	6a1b      	ldr	r3, [r3, #32]
 80038ba:	091b      	lsrs	r3, r3, #4
 80038bc:	f003 0307 	and.w	r3, r3, #7
 80038c0:	4904      	ldr	r1, [pc, #16]	@ (80038d4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80038c2:	5ccb      	ldrb	r3, [r1, r3]
 80038c4:	f003 031f 	and.w	r3, r3, #31
 80038c8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	bd80      	pop	{r7, pc}
 80038d0:	58024400 	.word	0x58024400
 80038d4:	08005318 	.word	0x08005318

080038d8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80038d8:	b480      	push	{r7}
 80038da:	b089      	sub	sp, #36	@ 0x24
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80038e0:	4ba1      	ldr	r3, [pc, #644]	@ (8003b68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80038e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038e4:	f003 0303 	and.w	r3, r3, #3
 80038e8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80038ea:	4b9f      	ldr	r3, [pc, #636]	@ (8003b68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80038ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038ee:	0b1b      	lsrs	r3, r3, #12
 80038f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80038f4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80038f6:	4b9c      	ldr	r3, [pc, #624]	@ (8003b68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80038f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038fa:	091b      	lsrs	r3, r3, #4
 80038fc:	f003 0301 	and.w	r3, r3, #1
 8003900:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8003902:	4b99      	ldr	r3, [pc, #612]	@ (8003b68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003904:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003906:	08db      	lsrs	r3, r3, #3
 8003908:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800390c:	693a      	ldr	r2, [r7, #16]
 800390e:	fb02 f303 	mul.w	r3, r2, r3
 8003912:	ee07 3a90 	vmov	s15, r3
 8003916:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800391a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	2b00      	cmp	r3, #0
 8003922:	f000 8111 	beq.w	8003b48 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003926:	69bb      	ldr	r3, [r7, #24]
 8003928:	2b02      	cmp	r3, #2
 800392a:	f000 8083 	beq.w	8003a34 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800392e:	69bb      	ldr	r3, [r7, #24]
 8003930:	2b02      	cmp	r3, #2
 8003932:	f200 80a1 	bhi.w	8003a78 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003936:	69bb      	ldr	r3, [r7, #24]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d003      	beq.n	8003944 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800393c:	69bb      	ldr	r3, [r7, #24]
 800393e:	2b01      	cmp	r3, #1
 8003940:	d056      	beq.n	80039f0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003942:	e099      	b.n	8003a78 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003944:	4b88      	ldr	r3, [pc, #544]	@ (8003b68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f003 0320 	and.w	r3, r3, #32
 800394c:	2b00      	cmp	r3, #0
 800394e:	d02d      	beq.n	80039ac <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003950:	4b85      	ldr	r3, [pc, #532]	@ (8003b68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	08db      	lsrs	r3, r3, #3
 8003956:	f003 0303 	and.w	r3, r3, #3
 800395a:	4a84      	ldr	r2, [pc, #528]	@ (8003b6c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800395c:	fa22 f303 	lsr.w	r3, r2, r3
 8003960:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	ee07 3a90 	vmov	s15, r3
 8003968:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	ee07 3a90 	vmov	s15, r3
 8003972:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003976:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800397a:	4b7b      	ldr	r3, [pc, #492]	@ (8003b68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800397c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800397e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003982:	ee07 3a90 	vmov	s15, r3
 8003986:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800398a:	ed97 6a03 	vldr	s12, [r7, #12]
 800398e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8003b70 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003992:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003996:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800399a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800399e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039a6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80039aa:	e087      	b.n	8003abc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	ee07 3a90 	vmov	s15, r3
 80039b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039b6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8003b74 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80039ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039be:	4b6a      	ldr	r3, [pc, #424]	@ (8003b68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80039c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039c6:	ee07 3a90 	vmov	s15, r3
 80039ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80039d2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8003b70 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80039d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80039e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80039ee:	e065      	b.n	8003abc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	ee07 3a90 	vmov	s15, r3
 80039f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039fa:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8003b78 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80039fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a02:	4b59      	ldr	r3, [pc, #356]	@ (8003b68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a0a:	ee07 3a90 	vmov	s15, r3
 8003a0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a12:	ed97 6a03 	vldr	s12, [r7, #12]
 8003a16:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8003b70 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003a1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003a26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003a32:	e043      	b.n	8003abc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	ee07 3a90 	vmov	s15, r3
 8003a3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a3e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8003b7c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003a42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a46:	4b48      	ldr	r3, [pc, #288]	@ (8003b68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a4e:	ee07 3a90 	vmov	s15, r3
 8003a52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a56:	ed97 6a03 	vldr	s12, [r7, #12]
 8003a5a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8003b70 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003a5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003a6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003a76:	e021      	b.n	8003abc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	ee07 3a90 	vmov	s15, r3
 8003a7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a82:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8003b78 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003a86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a8a:	4b37      	ldr	r3, [pc, #220]	@ (8003b68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a92:	ee07 3a90 	vmov	s15, r3
 8003a96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003a9e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8003b70 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003aa2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003aa6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003aaa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003aae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ab2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ab6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003aba:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8003abc:	4b2a      	ldr	r3, [pc, #168]	@ (8003b68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003abe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ac0:	0a5b      	lsrs	r3, r3, #9
 8003ac2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003ac6:	ee07 3a90 	vmov	s15, r3
 8003aca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ace:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003ad2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003ad6:	edd7 6a07 	vldr	s13, [r7, #28]
 8003ada:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ade:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ae2:	ee17 2a90 	vmov	r2, s15
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8003aea:	4b1f      	ldr	r3, [pc, #124]	@ (8003b68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003aec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003aee:	0c1b      	lsrs	r3, r3, #16
 8003af0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003af4:	ee07 3a90 	vmov	s15, r3
 8003af8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003afc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003b00:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003b04:	edd7 6a07 	vldr	s13, [r7, #28]
 8003b08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b10:	ee17 2a90 	vmov	r2, s15
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8003b18:	4b13      	ldr	r3, [pc, #76]	@ (8003b68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b1c:	0e1b      	lsrs	r3, r3, #24
 8003b1e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003b22:	ee07 3a90 	vmov	s15, r3
 8003b26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b2a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003b2e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003b32:	edd7 6a07 	vldr	s13, [r7, #28]
 8003b36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b3e:	ee17 2a90 	vmov	r2, s15
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003b46:	e008      	b.n	8003b5a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2200      	movs	r2, #0
 8003b52:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2200      	movs	r2, #0
 8003b58:	609a      	str	r2, [r3, #8]
}
 8003b5a:	bf00      	nop
 8003b5c:	3724      	adds	r7, #36	@ 0x24
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b64:	4770      	bx	lr
 8003b66:	bf00      	nop
 8003b68:	58024400 	.word	0x58024400
 8003b6c:	03d09000 	.word	0x03d09000
 8003b70:	46000000 	.word	0x46000000
 8003b74:	4c742400 	.word	0x4c742400
 8003b78:	4a742400 	.word	0x4a742400
 8003b7c:	4bbebc20 	.word	0x4bbebc20

08003b80 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b089      	sub	sp, #36	@ 0x24
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003b88:	4ba1      	ldr	r3, [pc, #644]	@ (8003e10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b8c:	f003 0303 	and.w	r3, r3, #3
 8003b90:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8003b92:	4b9f      	ldr	r3, [pc, #636]	@ (8003e10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b96:	0d1b      	lsrs	r3, r3, #20
 8003b98:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003b9c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003b9e:	4b9c      	ldr	r3, [pc, #624]	@ (8003e10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ba0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ba2:	0a1b      	lsrs	r3, r3, #8
 8003ba4:	f003 0301 	and.w	r3, r3, #1
 8003ba8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8003baa:	4b99      	ldr	r3, [pc, #612]	@ (8003e10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003bac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bae:	08db      	lsrs	r3, r3, #3
 8003bb0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003bb4:	693a      	ldr	r2, [r7, #16]
 8003bb6:	fb02 f303 	mul.w	r3, r2, r3
 8003bba:	ee07 3a90 	vmov	s15, r3
 8003bbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bc2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	f000 8111 	beq.w	8003df0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8003bce:	69bb      	ldr	r3, [r7, #24]
 8003bd0:	2b02      	cmp	r3, #2
 8003bd2:	f000 8083 	beq.w	8003cdc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8003bd6:	69bb      	ldr	r3, [r7, #24]
 8003bd8:	2b02      	cmp	r3, #2
 8003bda:	f200 80a1 	bhi.w	8003d20 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8003bde:	69bb      	ldr	r3, [r7, #24]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d003      	beq.n	8003bec <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003be4:	69bb      	ldr	r3, [r7, #24]
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d056      	beq.n	8003c98 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8003bea:	e099      	b.n	8003d20 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003bec:	4b88      	ldr	r3, [pc, #544]	@ (8003e10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f003 0320 	and.w	r3, r3, #32
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d02d      	beq.n	8003c54 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003bf8:	4b85      	ldr	r3, [pc, #532]	@ (8003e10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	08db      	lsrs	r3, r3, #3
 8003bfe:	f003 0303 	and.w	r3, r3, #3
 8003c02:	4a84      	ldr	r2, [pc, #528]	@ (8003e14 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003c04:	fa22 f303 	lsr.w	r3, r2, r3
 8003c08:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	ee07 3a90 	vmov	s15, r3
 8003c10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	ee07 3a90 	vmov	s15, r3
 8003c1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c22:	4b7b      	ldr	r3, [pc, #492]	@ (8003e10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c2a:	ee07 3a90 	vmov	s15, r3
 8003c2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c32:	ed97 6a03 	vldr	s12, [r7, #12]
 8003c36:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8003e18 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003c3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003c46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c4e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003c52:	e087      	b.n	8003d64 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	ee07 3a90 	vmov	s15, r3
 8003c5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c5e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8003e1c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003c62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c66:	4b6a      	ldr	r3, [pc, #424]	@ (8003e10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c6e:	ee07 3a90 	vmov	s15, r3
 8003c72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c76:	ed97 6a03 	vldr	s12, [r7, #12]
 8003c7a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8003e18 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003c7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003c8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c92:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003c96:	e065      	b.n	8003d64 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	ee07 3a90 	vmov	s15, r3
 8003c9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ca2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8003e20 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003ca6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003caa:	4b59      	ldr	r3, [pc, #356]	@ (8003e10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cb2:	ee07 3a90 	vmov	s15, r3
 8003cb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cba:	ed97 6a03 	vldr	s12, [r7, #12]
 8003cbe:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8003e18 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003cc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003cc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003cca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003cce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003cd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cd6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003cda:	e043      	b.n	8003d64 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	ee07 3a90 	vmov	s15, r3
 8003ce2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ce6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8003e24 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8003cea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003cee:	4b48      	ldr	r3, [pc, #288]	@ (8003e10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003cf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cf6:	ee07 3a90 	vmov	s15, r3
 8003cfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cfe:	ed97 6a03 	vldr	s12, [r7, #12]
 8003d02:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8003e18 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003d06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003d12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003d1e:	e021      	b.n	8003d64 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	ee07 3a90 	vmov	s15, r3
 8003d26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d2a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8003e20 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003d2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d32:	4b37      	ldr	r3, [pc, #220]	@ (8003e10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d3a:	ee07 3a90 	vmov	s15, r3
 8003d3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d42:	ed97 6a03 	vldr	s12, [r7, #12]
 8003d46:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8003e18 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003d4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003d56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003d62:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8003d64:	4b2a      	ldr	r3, [pc, #168]	@ (8003e10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d68:	0a5b      	lsrs	r3, r3, #9
 8003d6a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003d6e:	ee07 3a90 	vmov	s15, r3
 8003d72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d76:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003d7a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003d7e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003d82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d8a:	ee17 2a90 	vmov	r2, s15
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8003d92:	4b1f      	ldr	r3, [pc, #124]	@ (8003e10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d96:	0c1b      	lsrs	r3, r3, #16
 8003d98:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003d9c:	ee07 3a90 	vmov	s15, r3
 8003da0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003da4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003da8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003dac:	edd7 6a07 	vldr	s13, [r7, #28]
 8003db0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003db4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003db8:	ee17 2a90 	vmov	r2, s15
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8003dc0:	4b13      	ldr	r3, [pc, #76]	@ (8003e10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003dc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dc4:	0e1b      	lsrs	r3, r3, #24
 8003dc6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003dca:	ee07 3a90 	vmov	s15, r3
 8003dce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dd2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003dd6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003dda:	edd7 6a07 	vldr	s13, [r7, #28]
 8003dde:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003de2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003de6:	ee17 2a90 	vmov	r2, s15
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003dee:	e008      	b.n	8003e02 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2200      	movs	r2, #0
 8003df4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	609a      	str	r2, [r3, #8]
}
 8003e02:	bf00      	nop
 8003e04:	3724      	adds	r7, #36	@ 0x24
 8003e06:	46bd      	mov	sp, r7
 8003e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0c:	4770      	bx	lr
 8003e0e:	bf00      	nop
 8003e10:	58024400 	.word	0x58024400
 8003e14:	03d09000 	.word	0x03d09000
 8003e18:	46000000 	.word	0x46000000
 8003e1c:	4c742400 	.word	0x4c742400
 8003e20:	4a742400 	.word	0x4a742400
 8003e24:	4bbebc20 	.word	0x4bbebc20

08003e28 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b084      	sub	sp, #16
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
 8003e30:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003e32:	2300      	movs	r3, #0
 8003e34:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003e36:	4b53      	ldr	r3, [pc, #332]	@ (8003f84 <RCCEx_PLL2_Config+0x15c>)
 8003e38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e3a:	f003 0303 	and.w	r3, r3, #3
 8003e3e:	2b03      	cmp	r3, #3
 8003e40:	d101      	bne.n	8003e46 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	e099      	b.n	8003f7a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003e46:	4b4f      	ldr	r3, [pc, #316]	@ (8003f84 <RCCEx_PLL2_Config+0x15c>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a4e      	ldr	r2, [pc, #312]	@ (8003f84 <RCCEx_PLL2_Config+0x15c>)
 8003e4c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003e50:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e52:	f7fc ff5d 	bl	8000d10 <HAL_GetTick>
 8003e56:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003e58:	e008      	b.n	8003e6c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003e5a:	f7fc ff59 	bl	8000d10 <HAL_GetTick>
 8003e5e:	4602      	mov	r2, r0
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	1ad3      	subs	r3, r2, r3
 8003e64:	2b02      	cmp	r3, #2
 8003e66:	d901      	bls.n	8003e6c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003e68:	2303      	movs	r3, #3
 8003e6a:	e086      	b.n	8003f7a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003e6c:	4b45      	ldr	r3, [pc, #276]	@ (8003f84 <RCCEx_PLL2_Config+0x15c>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d1f0      	bne.n	8003e5a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003e78:	4b42      	ldr	r3, [pc, #264]	@ (8003f84 <RCCEx_PLL2_Config+0x15c>)
 8003e7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e7c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	031b      	lsls	r3, r3, #12
 8003e86:	493f      	ldr	r1, [pc, #252]	@ (8003f84 <RCCEx_PLL2_Config+0x15c>)
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	628b      	str	r3, [r1, #40]	@ 0x28
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	3b01      	subs	r3, #1
 8003e92:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	3b01      	subs	r3, #1
 8003e9c:	025b      	lsls	r3, r3, #9
 8003e9e:	b29b      	uxth	r3, r3
 8003ea0:	431a      	orrs	r2, r3
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	68db      	ldr	r3, [r3, #12]
 8003ea6:	3b01      	subs	r3, #1
 8003ea8:	041b      	lsls	r3, r3, #16
 8003eaa:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003eae:	431a      	orrs	r2, r3
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	691b      	ldr	r3, [r3, #16]
 8003eb4:	3b01      	subs	r3, #1
 8003eb6:	061b      	lsls	r3, r3, #24
 8003eb8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003ebc:	4931      	ldr	r1, [pc, #196]	@ (8003f84 <RCCEx_PLL2_Config+0x15c>)
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003ec2:	4b30      	ldr	r3, [pc, #192]	@ (8003f84 <RCCEx_PLL2_Config+0x15c>)
 8003ec4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ec6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	695b      	ldr	r3, [r3, #20]
 8003ece:	492d      	ldr	r1, [pc, #180]	@ (8003f84 <RCCEx_PLL2_Config+0x15c>)
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003ed4:	4b2b      	ldr	r3, [pc, #172]	@ (8003f84 <RCCEx_PLL2_Config+0x15c>)
 8003ed6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ed8:	f023 0220 	bic.w	r2, r3, #32
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	699b      	ldr	r3, [r3, #24]
 8003ee0:	4928      	ldr	r1, [pc, #160]	@ (8003f84 <RCCEx_PLL2_Config+0x15c>)
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003ee6:	4b27      	ldr	r3, [pc, #156]	@ (8003f84 <RCCEx_PLL2_Config+0x15c>)
 8003ee8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eea:	4a26      	ldr	r2, [pc, #152]	@ (8003f84 <RCCEx_PLL2_Config+0x15c>)
 8003eec:	f023 0310 	bic.w	r3, r3, #16
 8003ef0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003ef2:	4b24      	ldr	r3, [pc, #144]	@ (8003f84 <RCCEx_PLL2_Config+0x15c>)
 8003ef4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003ef6:	4b24      	ldr	r3, [pc, #144]	@ (8003f88 <RCCEx_PLL2_Config+0x160>)
 8003ef8:	4013      	ands	r3, r2
 8003efa:	687a      	ldr	r2, [r7, #4]
 8003efc:	69d2      	ldr	r2, [r2, #28]
 8003efe:	00d2      	lsls	r2, r2, #3
 8003f00:	4920      	ldr	r1, [pc, #128]	@ (8003f84 <RCCEx_PLL2_Config+0x15c>)
 8003f02:	4313      	orrs	r3, r2
 8003f04:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003f06:	4b1f      	ldr	r3, [pc, #124]	@ (8003f84 <RCCEx_PLL2_Config+0x15c>)
 8003f08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f0a:	4a1e      	ldr	r2, [pc, #120]	@ (8003f84 <RCCEx_PLL2_Config+0x15c>)
 8003f0c:	f043 0310 	orr.w	r3, r3, #16
 8003f10:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d106      	bne.n	8003f26 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003f18:	4b1a      	ldr	r3, [pc, #104]	@ (8003f84 <RCCEx_PLL2_Config+0x15c>)
 8003f1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f1c:	4a19      	ldr	r2, [pc, #100]	@ (8003f84 <RCCEx_PLL2_Config+0x15c>)
 8003f1e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003f22:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8003f24:	e00f      	b.n	8003f46 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	d106      	bne.n	8003f3a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003f2c:	4b15      	ldr	r3, [pc, #84]	@ (8003f84 <RCCEx_PLL2_Config+0x15c>)
 8003f2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f30:	4a14      	ldr	r2, [pc, #80]	@ (8003f84 <RCCEx_PLL2_Config+0x15c>)
 8003f32:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003f36:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8003f38:	e005      	b.n	8003f46 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003f3a:	4b12      	ldr	r3, [pc, #72]	@ (8003f84 <RCCEx_PLL2_Config+0x15c>)
 8003f3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f3e:	4a11      	ldr	r2, [pc, #68]	@ (8003f84 <RCCEx_PLL2_Config+0x15c>)
 8003f40:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003f44:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003f46:	4b0f      	ldr	r3, [pc, #60]	@ (8003f84 <RCCEx_PLL2_Config+0x15c>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a0e      	ldr	r2, [pc, #56]	@ (8003f84 <RCCEx_PLL2_Config+0x15c>)
 8003f4c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003f50:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f52:	f7fc fedd 	bl	8000d10 <HAL_GetTick>
 8003f56:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003f58:	e008      	b.n	8003f6c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003f5a:	f7fc fed9 	bl	8000d10 <HAL_GetTick>
 8003f5e:	4602      	mov	r2, r0
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	1ad3      	subs	r3, r2, r3
 8003f64:	2b02      	cmp	r3, #2
 8003f66:	d901      	bls.n	8003f6c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003f68:	2303      	movs	r3, #3
 8003f6a:	e006      	b.n	8003f7a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003f6c:	4b05      	ldr	r3, [pc, #20]	@ (8003f84 <RCCEx_PLL2_Config+0x15c>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d0f0      	beq.n	8003f5a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003f78:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3710      	adds	r7, #16
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}
 8003f82:	bf00      	nop
 8003f84:	58024400 	.word	0x58024400
 8003f88:	ffff0007 	.word	0xffff0007

08003f8c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b084      	sub	sp, #16
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
 8003f94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003f96:	2300      	movs	r3, #0
 8003f98:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003f9a:	4b53      	ldr	r3, [pc, #332]	@ (80040e8 <RCCEx_PLL3_Config+0x15c>)
 8003f9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f9e:	f003 0303 	and.w	r3, r3, #3
 8003fa2:	2b03      	cmp	r3, #3
 8003fa4:	d101      	bne.n	8003faa <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e099      	b.n	80040de <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003faa:	4b4f      	ldr	r3, [pc, #316]	@ (80040e8 <RCCEx_PLL3_Config+0x15c>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a4e      	ldr	r2, [pc, #312]	@ (80040e8 <RCCEx_PLL3_Config+0x15c>)
 8003fb0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003fb4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fb6:	f7fc feab 	bl	8000d10 <HAL_GetTick>
 8003fba:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003fbc:	e008      	b.n	8003fd0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003fbe:	f7fc fea7 	bl	8000d10 <HAL_GetTick>
 8003fc2:	4602      	mov	r2, r0
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	1ad3      	subs	r3, r2, r3
 8003fc8:	2b02      	cmp	r3, #2
 8003fca:	d901      	bls.n	8003fd0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003fcc:	2303      	movs	r3, #3
 8003fce:	e086      	b.n	80040de <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003fd0:	4b45      	ldr	r3, [pc, #276]	@ (80040e8 <RCCEx_PLL3_Config+0x15c>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d1f0      	bne.n	8003fbe <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003fdc:	4b42      	ldr	r3, [pc, #264]	@ (80040e8 <RCCEx_PLL3_Config+0x15c>)
 8003fde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fe0:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	051b      	lsls	r3, r3, #20
 8003fea:	493f      	ldr	r1, [pc, #252]	@ (80040e8 <RCCEx_PLL3_Config+0x15c>)
 8003fec:	4313      	orrs	r3, r2
 8003fee:	628b      	str	r3, [r1, #40]	@ 0x28
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	3b01      	subs	r3, #1
 8003ff6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	3b01      	subs	r3, #1
 8004000:	025b      	lsls	r3, r3, #9
 8004002:	b29b      	uxth	r3, r3
 8004004:	431a      	orrs	r2, r3
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	68db      	ldr	r3, [r3, #12]
 800400a:	3b01      	subs	r3, #1
 800400c:	041b      	lsls	r3, r3, #16
 800400e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004012:	431a      	orrs	r2, r3
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	691b      	ldr	r3, [r3, #16]
 8004018:	3b01      	subs	r3, #1
 800401a:	061b      	lsls	r3, r3, #24
 800401c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004020:	4931      	ldr	r1, [pc, #196]	@ (80040e8 <RCCEx_PLL3_Config+0x15c>)
 8004022:	4313      	orrs	r3, r2
 8004024:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004026:	4b30      	ldr	r3, [pc, #192]	@ (80040e8 <RCCEx_PLL3_Config+0x15c>)
 8004028:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800402a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	695b      	ldr	r3, [r3, #20]
 8004032:	492d      	ldr	r1, [pc, #180]	@ (80040e8 <RCCEx_PLL3_Config+0x15c>)
 8004034:	4313      	orrs	r3, r2
 8004036:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004038:	4b2b      	ldr	r3, [pc, #172]	@ (80040e8 <RCCEx_PLL3_Config+0x15c>)
 800403a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800403c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	699b      	ldr	r3, [r3, #24]
 8004044:	4928      	ldr	r1, [pc, #160]	@ (80040e8 <RCCEx_PLL3_Config+0x15c>)
 8004046:	4313      	orrs	r3, r2
 8004048:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800404a:	4b27      	ldr	r3, [pc, #156]	@ (80040e8 <RCCEx_PLL3_Config+0x15c>)
 800404c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800404e:	4a26      	ldr	r2, [pc, #152]	@ (80040e8 <RCCEx_PLL3_Config+0x15c>)
 8004050:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004054:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004056:	4b24      	ldr	r3, [pc, #144]	@ (80040e8 <RCCEx_PLL3_Config+0x15c>)
 8004058:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800405a:	4b24      	ldr	r3, [pc, #144]	@ (80040ec <RCCEx_PLL3_Config+0x160>)
 800405c:	4013      	ands	r3, r2
 800405e:	687a      	ldr	r2, [r7, #4]
 8004060:	69d2      	ldr	r2, [r2, #28]
 8004062:	00d2      	lsls	r2, r2, #3
 8004064:	4920      	ldr	r1, [pc, #128]	@ (80040e8 <RCCEx_PLL3_Config+0x15c>)
 8004066:	4313      	orrs	r3, r2
 8004068:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800406a:	4b1f      	ldr	r3, [pc, #124]	@ (80040e8 <RCCEx_PLL3_Config+0x15c>)
 800406c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800406e:	4a1e      	ldr	r2, [pc, #120]	@ (80040e8 <RCCEx_PLL3_Config+0x15c>)
 8004070:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004074:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d106      	bne.n	800408a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800407c:	4b1a      	ldr	r3, [pc, #104]	@ (80040e8 <RCCEx_PLL3_Config+0x15c>)
 800407e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004080:	4a19      	ldr	r2, [pc, #100]	@ (80040e8 <RCCEx_PLL3_Config+0x15c>)
 8004082:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004086:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004088:	e00f      	b.n	80040aa <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	2b01      	cmp	r3, #1
 800408e:	d106      	bne.n	800409e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004090:	4b15      	ldr	r3, [pc, #84]	@ (80040e8 <RCCEx_PLL3_Config+0x15c>)
 8004092:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004094:	4a14      	ldr	r2, [pc, #80]	@ (80040e8 <RCCEx_PLL3_Config+0x15c>)
 8004096:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800409a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800409c:	e005      	b.n	80040aa <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800409e:	4b12      	ldr	r3, [pc, #72]	@ (80040e8 <RCCEx_PLL3_Config+0x15c>)
 80040a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040a2:	4a11      	ldr	r2, [pc, #68]	@ (80040e8 <RCCEx_PLL3_Config+0x15c>)
 80040a4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80040a8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80040aa:	4b0f      	ldr	r3, [pc, #60]	@ (80040e8 <RCCEx_PLL3_Config+0x15c>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a0e      	ldr	r2, [pc, #56]	@ (80040e8 <RCCEx_PLL3_Config+0x15c>)
 80040b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80040b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040b6:	f7fc fe2b 	bl	8000d10 <HAL_GetTick>
 80040ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80040bc:	e008      	b.n	80040d0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80040be:	f7fc fe27 	bl	8000d10 <HAL_GetTick>
 80040c2:	4602      	mov	r2, r0
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	1ad3      	subs	r3, r2, r3
 80040c8:	2b02      	cmp	r3, #2
 80040ca:	d901      	bls.n	80040d0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80040cc:	2303      	movs	r3, #3
 80040ce:	e006      	b.n	80040de <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80040d0:	4b05      	ldr	r3, [pc, #20]	@ (80040e8 <RCCEx_PLL3_Config+0x15c>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d0f0      	beq.n	80040be <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80040dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80040de:	4618      	mov	r0, r3
 80040e0:	3710      	adds	r7, #16
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}
 80040e6:	bf00      	nop
 80040e8:	58024400 	.word	0x58024400
 80040ec:	ffff0007 	.word	0xffff0007

080040f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b082      	sub	sp, #8
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d101      	bne.n	8004102 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	e042      	b.n	8004188 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004108:	2b00      	cmp	r3, #0
 800410a:	d106      	bne.n	800411a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2200      	movs	r2, #0
 8004110:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	f7fc fcb1 	bl	8000a7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2224      	movs	r2, #36	@ 0x24
 800411e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f022 0201 	bic.w	r2, r2, #1
 8004130:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004136:	2b00      	cmp	r3, #0
 8004138:	d002      	beq.n	8004140 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f000 fd90 	bl	8004c60 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004140:	6878      	ldr	r0, [r7, #4]
 8004142:	f000 f825 	bl	8004190 <UART_SetConfig>
 8004146:	4603      	mov	r3, r0
 8004148:	2b01      	cmp	r3, #1
 800414a:	d101      	bne.n	8004150 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800414c:	2301      	movs	r3, #1
 800414e:	e01b      	b.n	8004188 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	685a      	ldr	r2, [r3, #4]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800415e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	689a      	ldr	r2, [r3, #8]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800416e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f042 0201 	orr.w	r2, r2, #1
 800417e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	f000 fe0f 	bl	8004da4 <UART_CheckIdleState>
 8004186:	4603      	mov	r3, r0
}
 8004188:	4618      	mov	r0, r3
 800418a:	3708      	adds	r7, #8
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}

08004190 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004190:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004194:	b092      	sub	sp, #72	@ 0x48
 8004196:	af00      	add	r7, sp, #0
 8004198:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800419a:	2300      	movs	r3, #0
 800419c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	689a      	ldr	r2, [r3, #8]
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	691b      	ldr	r3, [r3, #16]
 80041a8:	431a      	orrs	r2, r3
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	695b      	ldr	r3, [r3, #20]
 80041ae:	431a      	orrs	r2, r3
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	69db      	ldr	r3, [r3, #28]
 80041b4:	4313      	orrs	r3, r2
 80041b6:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	4bbe      	ldr	r3, [pc, #760]	@ (80044b8 <UART_SetConfig+0x328>)
 80041c0:	4013      	ands	r3, r2
 80041c2:	697a      	ldr	r2, [r7, #20]
 80041c4:	6812      	ldr	r2, [r2, #0]
 80041c6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80041c8:	430b      	orrs	r3, r1
 80041ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	68da      	ldr	r2, [r3, #12]
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	430a      	orrs	r2, r1
 80041e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	699b      	ldr	r3, [r3, #24]
 80041e6:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4ab3      	ldr	r2, [pc, #716]	@ (80044bc <UART_SetConfig+0x32c>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d004      	beq.n	80041fc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	6a1b      	ldr	r3, [r3, #32]
 80041f6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80041f8:	4313      	orrs	r3, r2
 80041fa:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	689a      	ldr	r2, [r3, #8]
 8004202:	4baf      	ldr	r3, [pc, #700]	@ (80044c0 <UART_SetConfig+0x330>)
 8004204:	4013      	ands	r3, r2
 8004206:	697a      	ldr	r2, [r7, #20]
 8004208:	6812      	ldr	r2, [r2, #0]
 800420a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800420c:	430b      	orrs	r3, r1
 800420e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004216:	f023 010f 	bic.w	r1, r3, #15
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	430a      	orrs	r2, r1
 8004224:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4aa6      	ldr	r2, [pc, #664]	@ (80044c4 <UART_SetConfig+0x334>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d177      	bne.n	8004320 <UART_SetConfig+0x190>
 8004230:	4ba5      	ldr	r3, [pc, #660]	@ (80044c8 <UART_SetConfig+0x338>)
 8004232:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004234:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004238:	2b28      	cmp	r3, #40	@ 0x28
 800423a:	d86d      	bhi.n	8004318 <UART_SetConfig+0x188>
 800423c:	a201      	add	r2, pc, #4	@ (adr r2, 8004244 <UART_SetConfig+0xb4>)
 800423e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004242:	bf00      	nop
 8004244:	080042e9 	.word	0x080042e9
 8004248:	08004319 	.word	0x08004319
 800424c:	08004319 	.word	0x08004319
 8004250:	08004319 	.word	0x08004319
 8004254:	08004319 	.word	0x08004319
 8004258:	08004319 	.word	0x08004319
 800425c:	08004319 	.word	0x08004319
 8004260:	08004319 	.word	0x08004319
 8004264:	080042f1 	.word	0x080042f1
 8004268:	08004319 	.word	0x08004319
 800426c:	08004319 	.word	0x08004319
 8004270:	08004319 	.word	0x08004319
 8004274:	08004319 	.word	0x08004319
 8004278:	08004319 	.word	0x08004319
 800427c:	08004319 	.word	0x08004319
 8004280:	08004319 	.word	0x08004319
 8004284:	080042f9 	.word	0x080042f9
 8004288:	08004319 	.word	0x08004319
 800428c:	08004319 	.word	0x08004319
 8004290:	08004319 	.word	0x08004319
 8004294:	08004319 	.word	0x08004319
 8004298:	08004319 	.word	0x08004319
 800429c:	08004319 	.word	0x08004319
 80042a0:	08004319 	.word	0x08004319
 80042a4:	08004301 	.word	0x08004301
 80042a8:	08004319 	.word	0x08004319
 80042ac:	08004319 	.word	0x08004319
 80042b0:	08004319 	.word	0x08004319
 80042b4:	08004319 	.word	0x08004319
 80042b8:	08004319 	.word	0x08004319
 80042bc:	08004319 	.word	0x08004319
 80042c0:	08004319 	.word	0x08004319
 80042c4:	08004309 	.word	0x08004309
 80042c8:	08004319 	.word	0x08004319
 80042cc:	08004319 	.word	0x08004319
 80042d0:	08004319 	.word	0x08004319
 80042d4:	08004319 	.word	0x08004319
 80042d8:	08004319 	.word	0x08004319
 80042dc:	08004319 	.word	0x08004319
 80042e0:	08004319 	.word	0x08004319
 80042e4:	08004311 	.word	0x08004311
 80042e8:	2301      	movs	r3, #1
 80042ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80042ee:	e222      	b.n	8004736 <UART_SetConfig+0x5a6>
 80042f0:	2304      	movs	r3, #4
 80042f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80042f6:	e21e      	b.n	8004736 <UART_SetConfig+0x5a6>
 80042f8:	2308      	movs	r3, #8
 80042fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80042fe:	e21a      	b.n	8004736 <UART_SetConfig+0x5a6>
 8004300:	2310      	movs	r3, #16
 8004302:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004306:	e216      	b.n	8004736 <UART_SetConfig+0x5a6>
 8004308:	2320      	movs	r3, #32
 800430a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800430e:	e212      	b.n	8004736 <UART_SetConfig+0x5a6>
 8004310:	2340      	movs	r3, #64	@ 0x40
 8004312:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004316:	e20e      	b.n	8004736 <UART_SetConfig+0x5a6>
 8004318:	2380      	movs	r3, #128	@ 0x80
 800431a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800431e:	e20a      	b.n	8004736 <UART_SetConfig+0x5a6>
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a69      	ldr	r2, [pc, #420]	@ (80044cc <UART_SetConfig+0x33c>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d130      	bne.n	800438c <UART_SetConfig+0x1fc>
 800432a:	4b67      	ldr	r3, [pc, #412]	@ (80044c8 <UART_SetConfig+0x338>)
 800432c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800432e:	f003 0307 	and.w	r3, r3, #7
 8004332:	2b05      	cmp	r3, #5
 8004334:	d826      	bhi.n	8004384 <UART_SetConfig+0x1f4>
 8004336:	a201      	add	r2, pc, #4	@ (adr r2, 800433c <UART_SetConfig+0x1ac>)
 8004338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800433c:	08004355 	.word	0x08004355
 8004340:	0800435d 	.word	0x0800435d
 8004344:	08004365 	.word	0x08004365
 8004348:	0800436d 	.word	0x0800436d
 800434c:	08004375 	.word	0x08004375
 8004350:	0800437d 	.word	0x0800437d
 8004354:	2300      	movs	r3, #0
 8004356:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800435a:	e1ec      	b.n	8004736 <UART_SetConfig+0x5a6>
 800435c:	2304      	movs	r3, #4
 800435e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004362:	e1e8      	b.n	8004736 <UART_SetConfig+0x5a6>
 8004364:	2308      	movs	r3, #8
 8004366:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800436a:	e1e4      	b.n	8004736 <UART_SetConfig+0x5a6>
 800436c:	2310      	movs	r3, #16
 800436e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004372:	e1e0      	b.n	8004736 <UART_SetConfig+0x5a6>
 8004374:	2320      	movs	r3, #32
 8004376:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800437a:	e1dc      	b.n	8004736 <UART_SetConfig+0x5a6>
 800437c:	2340      	movs	r3, #64	@ 0x40
 800437e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004382:	e1d8      	b.n	8004736 <UART_SetConfig+0x5a6>
 8004384:	2380      	movs	r3, #128	@ 0x80
 8004386:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800438a:	e1d4      	b.n	8004736 <UART_SetConfig+0x5a6>
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a4f      	ldr	r2, [pc, #316]	@ (80044d0 <UART_SetConfig+0x340>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d130      	bne.n	80043f8 <UART_SetConfig+0x268>
 8004396:	4b4c      	ldr	r3, [pc, #304]	@ (80044c8 <UART_SetConfig+0x338>)
 8004398:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800439a:	f003 0307 	and.w	r3, r3, #7
 800439e:	2b05      	cmp	r3, #5
 80043a0:	d826      	bhi.n	80043f0 <UART_SetConfig+0x260>
 80043a2:	a201      	add	r2, pc, #4	@ (adr r2, 80043a8 <UART_SetConfig+0x218>)
 80043a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043a8:	080043c1 	.word	0x080043c1
 80043ac:	080043c9 	.word	0x080043c9
 80043b0:	080043d1 	.word	0x080043d1
 80043b4:	080043d9 	.word	0x080043d9
 80043b8:	080043e1 	.word	0x080043e1
 80043bc:	080043e9 	.word	0x080043e9
 80043c0:	2300      	movs	r3, #0
 80043c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80043c6:	e1b6      	b.n	8004736 <UART_SetConfig+0x5a6>
 80043c8:	2304      	movs	r3, #4
 80043ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80043ce:	e1b2      	b.n	8004736 <UART_SetConfig+0x5a6>
 80043d0:	2308      	movs	r3, #8
 80043d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80043d6:	e1ae      	b.n	8004736 <UART_SetConfig+0x5a6>
 80043d8:	2310      	movs	r3, #16
 80043da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80043de:	e1aa      	b.n	8004736 <UART_SetConfig+0x5a6>
 80043e0:	2320      	movs	r3, #32
 80043e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80043e6:	e1a6      	b.n	8004736 <UART_SetConfig+0x5a6>
 80043e8:	2340      	movs	r3, #64	@ 0x40
 80043ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80043ee:	e1a2      	b.n	8004736 <UART_SetConfig+0x5a6>
 80043f0:	2380      	movs	r3, #128	@ 0x80
 80043f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80043f6:	e19e      	b.n	8004736 <UART_SetConfig+0x5a6>
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a35      	ldr	r2, [pc, #212]	@ (80044d4 <UART_SetConfig+0x344>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d130      	bne.n	8004464 <UART_SetConfig+0x2d4>
 8004402:	4b31      	ldr	r3, [pc, #196]	@ (80044c8 <UART_SetConfig+0x338>)
 8004404:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004406:	f003 0307 	and.w	r3, r3, #7
 800440a:	2b05      	cmp	r3, #5
 800440c:	d826      	bhi.n	800445c <UART_SetConfig+0x2cc>
 800440e:	a201      	add	r2, pc, #4	@ (adr r2, 8004414 <UART_SetConfig+0x284>)
 8004410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004414:	0800442d 	.word	0x0800442d
 8004418:	08004435 	.word	0x08004435
 800441c:	0800443d 	.word	0x0800443d
 8004420:	08004445 	.word	0x08004445
 8004424:	0800444d 	.word	0x0800444d
 8004428:	08004455 	.word	0x08004455
 800442c:	2300      	movs	r3, #0
 800442e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004432:	e180      	b.n	8004736 <UART_SetConfig+0x5a6>
 8004434:	2304      	movs	r3, #4
 8004436:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800443a:	e17c      	b.n	8004736 <UART_SetConfig+0x5a6>
 800443c:	2308      	movs	r3, #8
 800443e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004442:	e178      	b.n	8004736 <UART_SetConfig+0x5a6>
 8004444:	2310      	movs	r3, #16
 8004446:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800444a:	e174      	b.n	8004736 <UART_SetConfig+0x5a6>
 800444c:	2320      	movs	r3, #32
 800444e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004452:	e170      	b.n	8004736 <UART_SetConfig+0x5a6>
 8004454:	2340      	movs	r3, #64	@ 0x40
 8004456:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800445a:	e16c      	b.n	8004736 <UART_SetConfig+0x5a6>
 800445c:	2380      	movs	r3, #128	@ 0x80
 800445e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004462:	e168      	b.n	8004736 <UART_SetConfig+0x5a6>
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a1b      	ldr	r2, [pc, #108]	@ (80044d8 <UART_SetConfig+0x348>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d142      	bne.n	80044f4 <UART_SetConfig+0x364>
 800446e:	4b16      	ldr	r3, [pc, #88]	@ (80044c8 <UART_SetConfig+0x338>)
 8004470:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004472:	f003 0307 	and.w	r3, r3, #7
 8004476:	2b05      	cmp	r3, #5
 8004478:	d838      	bhi.n	80044ec <UART_SetConfig+0x35c>
 800447a:	a201      	add	r2, pc, #4	@ (adr r2, 8004480 <UART_SetConfig+0x2f0>)
 800447c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004480:	08004499 	.word	0x08004499
 8004484:	080044a1 	.word	0x080044a1
 8004488:	080044a9 	.word	0x080044a9
 800448c:	080044b1 	.word	0x080044b1
 8004490:	080044dd 	.word	0x080044dd
 8004494:	080044e5 	.word	0x080044e5
 8004498:	2300      	movs	r3, #0
 800449a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800449e:	e14a      	b.n	8004736 <UART_SetConfig+0x5a6>
 80044a0:	2304      	movs	r3, #4
 80044a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80044a6:	e146      	b.n	8004736 <UART_SetConfig+0x5a6>
 80044a8:	2308      	movs	r3, #8
 80044aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80044ae:	e142      	b.n	8004736 <UART_SetConfig+0x5a6>
 80044b0:	2310      	movs	r3, #16
 80044b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80044b6:	e13e      	b.n	8004736 <UART_SetConfig+0x5a6>
 80044b8:	cfff69f3 	.word	0xcfff69f3
 80044bc:	58000c00 	.word	0x58000c00
 80044c0:	11fff4ff 	.word	0x11fff4ff
 80044c4:	40011000 	.word	0x40011000
 80044c8:	58024400 	.word	0x58024400
 80044cc:	40004400 	.word	0x40004400
 80044d0:	40004800 	.word	0x40004800
 80044d4:	40004c00 	.word	0x40004c00
 80044d8:	40005000 	.word	0x40005000
 80044dc:	2320      	movs	r3, #32
 80044de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80044e2:	e128      	b.n	8004736 <UART_SetConfig+0x5a6>
 80044e4:	2340      	movs	r3, #64	@ 0x40
 80044e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80044ea:	e124      	b.n	8004736 <UART_SetConfig+0x5a6>
 80044ec:	2380      	movs	r3, #128	@ 0x80
 80044ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80044f2:	e120      	b.n	8004736 <UART_SetConfig+0x5a6>
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4acb      	ldr	r2, [pc, #812]	@ (8004828 <UART_SetConfig+0x698>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d176      	bne.n	80045ec <UART_SetConfig+0x45c>
 80044fe:	4bcb      	ldr	r3, [pc, #812]	@ (800482c <UART_SetConfig+0x69c>)
 8004500:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004502:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004506:	2b28      	cmp	r3, #40	@ 0x28
 8004508:	d86c      	bhi.n	80045e4 <UART_SetConfig+0x454>
 800450a:	a201      	add	r2, pc, #4	@ (adr r2, 8004510 <UART_SetConfig+0x380>)
 800450c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004510:	080045b5 	.word	0x080045b5
 8004514:	080045e5 	.word	0x080045e5
 8004518:	080045e5 	.word	0x080045e5
 800451c:	080045e5 	.word	0x080045e5
 8004520:	080045e5 	.word	0x080045e5
 8004524:	080045e5 	.word	0x080045e5
 8004528:	080045e5 	.word	0x080045e5
 800452c:	080045e5 	.word	0x080045e5
 8004530:	080045bd 	.word	0x080045bd
 8004534:	080045e5 	.word	0x080045e5
 8004538:	080045e5 	.word	0x080045e5
 800453c:	080045e5 	.word	0x080045e5
 8004540:	080045e5 	.word	0x080045e5
 8004544:	080045e5 	.word	0x080045e5
 8004548:	080045e5 	.word	0x080045e5
 800454c:	080045e5 	.word	0x080045e5
 8004550:	080045c5 	.word	0x080045c5
 8004554:	080045e5 	.word	0x080045e5
 8004558:	080045e5 	.word	0x080045e5
 800455c:	080045e5 	.word	0x080045e5
 8004560:	080045e5 	.word	0x080045e5
 8004564:	080045e5 	.word	0x080045e5
 8004568:	080045e5 	.word	0x080045e5
 800456c:	080045e5 	.word	0x080045e5
 8004570:	080045cd 	.word	0x080045cd
 8004574:	080045e5 	.word	0x080045e5
 8004578:	080045e5 	.word	0x080045e5
 800457c:	080045e5 	.word	0x080045e5
 8004580:	080045e5 	.word	0x080045e5
 8004584:	080045e5 	.word	0x080045e5
 8004588:	080045e5 	.word	0x080045e5
 800458c:	080045e5 	.word	0x080045e5
 8004590:	080045d5 	.word	0x080045d5
 8004594:	080045e5 	.word	0x080045e5
 8004598:	080045e5 	.word	0x080045e5
 800459c:	080045e5 	.word	0x080045e5
 80045a0:	080045e5 	.word	0x080045e5
 80045a4:	080045e5 	.word	0x080045e5
 80045a8:	080045e5 	.word	0x080045e5
 80045ac:	080045e5 	.word	0x080045e5
 80045b0:	080045dd 	.word	0x080045dd
 80045b4:	2301      	movs	r3, #1
 80045b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80045ba:	e0bc      	b.n	8004736 <UART_SetConfig+0x5a6>
 80045bc:	2304      	movs	r3, #4
 80045be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80045c2:	e0b8      	b.n	8004736 <UART_SetConfig+0x5a6>
 80045c4:	2308      	movs	r3, #8
 80045c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80045ca:	e0b4      	b.n	8004736 <UART_SetConfig+0x5a6>
 80045cc:	2310      	movs	r3, #16
 80045ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80045d2:	e0b0      	b.n	8004736 <UART_SetConfig+0x5a6>
 80045d4:	2320      	movs	r3, #32
 80045d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80045da:	e0ac      	b.n	8004736 <UART_SetConfig+0x5a6>
 80045dc:	2340      	movs	r3, #64	@ 0x40
 80045de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80045e2:	e0a8      	b.n	8004736 <UART_SetConfig+0x5a6>
 80045e4:	2380      	movs	r3, #128	@ 0x80
 80045e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80045ea:	e0a4      	b.n	8004736 <UART_SetConfig+0x5a6>
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a8f      	ldr	r2, [pc, #572]	@ (8004830 <UART_SetConfig+0x6a0>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d130      	bne.n	8004658 <UART_SetConfig+0x4c8>
 80045f6:	4b8d      	ldr	r3, [pc, #564]	@ (800482c <UART_SetConfig+0x69c>)
 80045f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045fa:	f003 0307 	and.w	r3, r3, #7
 80045fe:	2b05      	cmp	r3, #5
 8004600:	d826      	bhi.n	8004650 <UART_SetConfig+0x4c0>
 8004602:	a201      	add	r2, pc, #4	@ (adr r2, 8004608 <UART_SetConfig+0x478>)
 8004604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004608:	08004621 	.word	0x08004621
 800460c:	08004629 	.word	0x08004629
 8004610:	08004631 	.word	0x08004631
 8004614:	08004639 	.word	0x08004639
 8004618:	08004641 	.word	0x08004641
 800461c:	08004649 	.word	0x08004649
 8004620:	2300      	movs	r3, #0
 8004622:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004626:	e086      	b.n	8004736 <UART_SetConfig+0x5a6>
 8004628:	2304      	movs	r3, #4
 800462a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800462e:	e082      	b.n	8004736 <UART_SetConfig+0x5a6>
 8004630:	2308      	movs	r3, #8
 8004632:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004636:	e07e      	b.n	8004736 <UART_SetConfig+0x5a6>
 8004638:	2310      	movs	r3, #16
 800463a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800463e:	e07a      	b.n	8004736 <UART_SetConfig+0x5a6>
 8004640:	2320      	movs	r3, #32
 8004642:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004646:	e076      	b.n	8004736 <UART_SetConfig+0x5a6>
 8004648:	2340      	movs	r3, #64	@ 0x40
 800464a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800464e:	e072      	b.n	8004736 <UART_SetConfig+0x5a6>
 8004650:	2380      	movs	r3, #128	@ 0x80
 8004652:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004656:	e06e      	b.n	8004736 <UART_SetConfig+0x5a6>
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a75      	ldr	r2, [pc, #468]	@ (8004834 <UART_SetConfig+0x6a4>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d130      	bne.n	80046c4 <UART_SetConfig+0x534>
 8004662:	4b72      	ldr	r3, [pc, #456]	@ (800482c <UART_SetConfig+0x69c>)
 8004664:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004666:	f003 0307 	and.w	r3, r3, #7
 800466a:	2b05      	cmp	r3, #5
 800466c:	d826      	bhi.n	80046bc <UART_SetConfig+0x52c>
 800466e:	a201      	add	r2, pc, #4	@ (adr r2, 8004674 <UART_SetConfig+0x4e4>)
 8004670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004674:	0800468d 	.word	0x0800468d
 8004678:	08004695 	.word	0x08004695
 800467c:	0800469d 	.word	0x0800469d
 8004680:	080046a5 	.word	0x080046a5
 8004684:	080046ad 	.word	0x080046ad
 8004688:	080046b5 	.word	0x080046b5
 800468c:	2300      	movs	r3, #0
 800468e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004692:	e050      	b.n	8004736 <UART_SetConfig+0x5a6>
 8004694:	2304      	movs	r3, #4
 8004696:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800469a:	e04c      	b.n	8004736 <UART_SetConfig+0x5a6>
 800469c:	2308      	movs	r3, #8
 800469e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046a2:	e048      	b.n	8004736 <UART_SetConfig+0x5a6>
 80046a4:	2310      	movs	r3, #16
 80046a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046aa:	e044      	b.n	8004736 <UART_SetConfig+0x5a6>
 80046ac:	2320      	movs	r3, #32
 80046ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046b2:	e040      	b.n	8004736 <UART_SetConfig+0x5a6>
 80046b4:	2340      	movs	r3, #64	@ 0x40
 80046b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046ba:	e03c      	b.n	8004736 <UART_SetConfig+0x5a6>
 80046bc:	2380      	movs	r3, #128	@ 0x80
 80046be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046c2:	e038      	b.n	8004736 <UART_SetConfig+0x5a6>
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a5b      	ldr	r2, [pc, #364]	@ (8004838 <UART_SetConfig+0x6a8>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d130      	bne.n	8004730 <UART_SetConfig+0x5a0>
 80046ce:	4b57      	ldr	r3, [pc, #348]	@ (800482c <UART_SetConfig+0x69c>)
 80046d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046d2:	f003 0307 	and.w	r3, r3, #7
 80046d6:	2b05      	cmp	r3, #5
 80046d8:	d826      	bhi.n	8004728 <UART_SetConfig+0x598>
 80046da:	a201      	add	r2, pc, #4	@ (adr r2, 80046e0 <UART_SetConfig+0x550>)
 80046dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046e0:	080046f9 	.word	0x080046f9
 80046e4:	08004701 	.word	0x08004701
 80046e8:	08004709 	.word	0x08004709
 80046ec:	08004711 	.word	0x08004711
 80046f0:	08004719 	.word	0x08004719
 80046f4:	08004721 	.word	0x08004721
 80046f8:	2302      	movs	r3, #2
 80046fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046fe:	e01a      	b.n	8004736 <UART_SetConfig+0x5a6>
 8004700:	2304      	movs	r3, #4
 8004702:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004706:	e016      	b.n	8004736 <UART_SetConfig+0x5a6>
 8004708:	2308      	movs	r3, #8
 800470a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800470e:	e012      	b.n	8004736 <UART_SetConfig+0x5a6>
 8004710:	2310      	movs	r3, #16
 8004712:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004716:	e00e      	b.n	8004736 <UART_SetConfig+0x5a6>
 8004718:	2320      	movs	r3, #32
 800471a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800471e:	e00a      	b.n	8004736 <UART_SetConfig+0x5a6>
 8004720:	2340      	movs	r3, #64	@ 0x40
 8004722:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004726:	e006      	b.n	8004736 <UART_SetConfig+0x5a6>
 8004728:	2380      	movs	r3, #128	@ 0x80
 800472a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800472e:	e002      	b.n	8004736 <UART_SetConfig+0x5a6>
 8004730:	2380      	movs	r3, #128	@ 0x80
 8004732:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a3f      	ldr	r2, [pc, #252]	@ (8004838 <UART_SetConfig+0x6a8>)
 800473c:	4293      	cmp	r3, r2
 800473e:	f040 80f8 	bne.w	8004932 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004742:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8004746:	2b20      	cmp	r3, #32
 8004748:	dc46      	bgt.n	80047d8 <UART_SetConfig+0x648>
 800474a:	2b02      	cmp	r3, #2
 800474c:	f2c0 8082 	blt.w	8004854 <UART_SetConfig+0x6c4>
 8004750:	3b02      	subs	r3, #2
 8004752:	2b1e      	cmp	r3, #30
 8004754:	d87e      	bhi.n	8004854 <UART_SetConfig+0x6c4>
 8004756:	a201      	add	r2, pc, #4	@ (adr r2, 800475c <UART_SetConfig+0x5cc>)
 8004758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800475c:	080047df 	.word	0x080047df
 8004760:	08004855 	.word	0x08004855
 8004764:	080047e7 	.word	0x080047e7
 8004768:	08004855 	.word	0x08004855
 800476c:	08004855 	.word	0x08004855
 8004770:	08004855 	.word	0x08004855
 8004774:	080047f7 	.word	0x080047f7
 8004778:	08004855 	.word	0x08004855
 800477c:	08004855 	.word	0x08004855
 8004780:	08004855 	.word	0x08004855
 8004784:	08004855 	.word	0x08004855
 8004788:	08004855 	.word	0x08004855
 800478c:	08004855 	.word	0x08004855
 8004790:	08004855 	.word	0x08004855
 8004794:	08004807 	.word	0x08004807
 8004798:	08004855 	.word	0x08004855
 800479c:	08004855 	.word	0x08004855
 80047a0:	08004855 	.word	0x08004855
 80047a4:	08004855 	.word	0x08004855
 80047a8:	08004855 	.word	0x08004855
 80047ac:	08004855 	.word	0x08004855
 80047b0:	08004855 	.word	0x08004855
 80047b4:	08004855 	.word	0x08004855
 80047b8:	08004855 	.word	0x08004855
 80047bc:	08004855 	.word	0x08004855
 80047c0:	08004855 	.word	0x08004855
 80047c4:	08004855 	.word	0x08004855
 80047c8:	08004855 	.word	0x08004855
 80047cc:	08004855 	.word	0x08004855
 80047d0:	08004855 	.word	0x08004855
 80047d4:	08004847 	.word	0x08004847
 80047d8:	2b40      	cmp	r3, #64	@ 0x40
 80047da:	d037      	beq.n	800484c <UART_SetConfig+0x6bc>
 80047dc:	e03a      	b.n	8004854 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80047de:	f7ff f865 	bl	80038ac <HAL_RCCEx_GetD3PCLK1Freq>
 80047e2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80047e4:	e03c      	b.n	8004860 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80047e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80047ea:	4618      	mov	r0, r3
 80047ec:	f7ff f874 	bl	80038d8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80047f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80047f4:	e034      	b.n	8004860 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80047f6:	f107 0318 	add.w	r3, r7, #24
 80047fa:	4618      	mov	r0, r3
 80047fc:	f7ff f9c0 	bl	8003b80 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004800:	69fb      	ldr	r3, [r7, #28]
 8004802:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004804:	e02c      	b.n	8004860 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004806:	4b09      	ldr	r3, [pc, #36]	@ (800482c <UART_SetConfig+0x69c>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f003 0320 	and.w	r3, r3, #32
 800480e:	2b00      	cmp	r3, #0
 8004810:	d016      	beq.n	8004840 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004812:	4b06      	ldr	r3, [pc, #24]	@ (800482c <UART_SetConfig+0x69c>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	08db      	lsrs	r3, r3, #3
 8004818:	f003 0303 	and.w	r3, r3, #3
 800481c:	4a07      	ldr	r2, [pc, #28]	@ (800483c <UART_SetConfig+0x6ac>)
 800481e:	fa22 f303 	lsr.w	r3, r2, r3
 8004822:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004824:	e01c      	b.n	8004860 <UART_SetConfig+0x6d0>
 8004826:	bf00      	nop
 8004828:	40011400 	.word	0x40011400
 800482c:	58024400 	.word	0x58024400
 8004830:	40007800 	.word	0x40007800
 8004834:	40007c00 	.word	0x40007c00
 8004838:	58000c00 	.word	0x58000c00
 800483c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8004840:	4b9d      	ldr	r3, [pc, #628]	@ (8004ab8 <UART_SetConfig+0x928>)
 8004842:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004844:	e00c      	b.n	8004860 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004846:	4b9d      	ldr	r3, [pc, #628]	@ (8004abc <UART_SetConfig+0x92c>)
 8004848:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800484a:	e009      	b.n	8004860 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800484c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004850:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004852:	e005      	b.n	8004860 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8004854:	2300      	movs	r3, #0
 8004856:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8004858:	2301      	movs	r3, #1
 800485a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800485e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004860:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004862:	2b00      	cmp	r3, #0
 8004864:	f000 81de 	beq.w	8004c24 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800486c:	4a94      	ldr	r2, [pc, #592]	@ (8004ac0 <UART_SetConfig+0x930>)
 800486e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004872:	461a      	mov	r2, r3
 8004874:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004876:	fbb3 f3f2 	udiv	r3, r3, r2
 800487a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	685a      	ldr	r2, [r3, #4]
 8004880:	4613      	mov	r3, r2
 8004882:	005b      	lsls	r3, r3, #1
 8004884:	4413      	add	r3, r2
 8004886:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004888:	429a      	cmp	r2, r3
 800488a:	d305      	bcc.n	8004898 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004892:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004894:	429a      	cmp	r2, r3
 8004896:	d903      	bls.n	80048a0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8004898:	2301      	movs	r3, #1
 800489a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800489e:	e1c1      	b.n	8004c24 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80048a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80048a2:	2200      	movs	r2, #0
 80048a4:	60bb      	str	r3, [r7, #8]
 80048a6:	60fa      	str	r2, [r7, #12]
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048ac:	4a84      	ldr	r2, [pc, #528]	@ (8004ac0 <UART_SetConfig+0x930>)
 80048ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80048b2:	b29b      	uxth	r3, r3
 80048b4:	2200      	movs	r2, #0
 80048b6:	603b      	str	r3, [r7, #0]
 80048b8:	607a      	str	r2, [r7, #4]
 80048ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80048be:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80048c2:	f7fb fd09 	bl	80002d8 <__aeabi_uldivmod>
 80048c6:	4602      	mov	r2, r0
 80048c8:	460b      	mov	r3, r1
 80048ca:	4610      	mov	r0, r2
 80048cc:	4619      	mov	r1, r3
 80048ce:	f04f 0200 	mov.w	r2, #0
 80048d2:	f04f 0300 	mov.w	r3, #0
 80048d6:	020b      	lsls	r3, r1, #8
 80048d8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80048dc:	0202      	lsls	r2, r0, #8
 80048de:	6979      	ldr	r1, [r7, #20]
 80048e0:	6849      	ldr	r1, [r1, #4]
 80048e2:	0849      	lsrs	r1, r1, #1
 80048e4:	2000      	movs	r0, #0
 80048e6:	460c      	mov	r4, r1
 80048e8:	4605      	mov	r5, r0
 80048ea:	eb12 0804 	adds.w	r8, r2, r4
 80048ee:	eb43 0905 	adc.w	r9, r3, r5
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	2200      	movs	r2, #0
 80048f8:	469a      	mov	sl, r3
 80048fa:	4693      	mov	fp, r2
 80048fc:	4652      	mov	r2, sl
 80048fe:	465b      	mov	r3, fp
 8004900:	4640      	mov	r0, r8
 8004902:	4649      	mov	r1, r9
 8004904:	f7fb fce8 	bl	80002d8 <__aeabi_uldivmod>
 8004908:	4602      	mov	r2, r0
 800490a:	460b      	mov	r3, r1
 800490c:	4613      	mov	r3, r2
 800490e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004910:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004912:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004916:	d308      	bcc.n	800492a <UART_SetConfig+0x79a>
 8004918:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800491a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800491e:	d204      	bcs.n	800492a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004926:	60da      	str	r2, [r3, #12]
 8004928:	e17c      	b.n	8004c24 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8004930:	e178      	b.n	8004c24 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	69db      	ldr	r3, [r3, #28]
 8004936:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800493a:	f040 80c5 	bne.w	8004ac8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800493e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8004942:	2b20      	cmp	r3, #32
 8004944:	dc48      	bgt.n	80049d8 <UART_SetConfig+0x848>
 8004946:	2b00      	cmp	r3, #0
 8004948:	db7b      	blt.n	8004a42 <UART_SetConfig+0x8b2>
 800494a:	2b20      	cmp	r3, #32
 800494c:	d879      	bhi.n	8004a42 <UART_SetConfig+0x8b2>
 800494e:	a201      	add	r2, pc, #4	@ (adr r2, 8004954 <UART_SetConfig+0x7c4>)
 8004950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004954:	080049df 	.word	0x080049df
 8004958:	080049e7 	.word	0x080049e7
 800495c:	08004a43 	.word	0x08004a43
 8004960:	08004a43 	.word	0x08004a43
 8004964:	080049ef 	.word	0x080049ef
 8004968:	08004a43 	.word	0x08004a43
 800496c:	08004a43 	.word	0x08004a43
 8004970:	08004a43 	.word	0x08004a43
 8004974:	080049ff 	.word	0x080049ff
 8004978:	08004a43 	.word	0x08004a43
 800497c:	08004a43 	.word	0x08004a43
 8004980:	08004a43 	.word	0x08004a43
 8004984:	08004a43 	.word	0x08004a43
 8004988:	08004a43 	.word	0x08004a43
 800498c:	08004a43 	.word	0x08004a43
 8004990:	08004a43 	.word	0x08004a43
 8004994:	08004a0f 	.word	0x08004a0f
 8004998:	08004a43 	.word	0x08004a43
 800499c:	08004a43 	.word	0x08004a43
 80049a0:	08004a43 	.word	0x08004a43
 80049a4:	08004a43 	.word	0x08004a43
 80049a8:	08004a43 	.word	0x08004a43
 80049ac:	08004a43 	.word	0x08004a43
 80049b0:	08004a43 	.word	0x08004a43
 80049b4:	08004a43 	.word	0x08004a43
 80049b8:	08004a43 	.word	0x08004a43
 80049bc:	08004a43 	.word	0x08004a43
 80049c0:	08004a43 	.word	0x08004a43
 80049c4:	08004a43 	.word	0x08004a43
 80049c8:	08004a43 	.word	0x08004a43
 80049cc:	08004a43 	.word	0x08004a43
 80049d0:	08004a43 	.word	0x08004a43
 80049d4:	08004a35 	.word	0x08004a35
 80049d8:	2b40      	cmp	r3, #64	@ 0x40
 80049da:	d02e      	beq.n	8004a3a <UART_SetConfig+0x8aa>
 80049dc:	e031      	b.n	8004a42 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049de:	f7fd fcef 	bl	80023c0 <HAL_RCC_GetPCLK1Freq>
 80049e2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80049e4:	e033      	b.n	8004a4e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80049e6:	f7fd fd01 	bl	80023ec <HAL_RCC_GetPCLK2Freq>
 80049ea:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80049ec:	e02f      	b.n	8004a4e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80049ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80049f2:	4618      	mov	r0, r3
 80049f4:	f7fe ff70 	bl	80038d8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80049f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80049fc:	e027      	b.n	8004a4e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80049fe:	f107 0318 	add.w	r3, r7, #24
 8004a02:	4618      	mov	r0, r3
 8004a04:	f7ff f8bc 	bl	8003b80 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004a08:	69fb      	ldr	r3, [r7, #28]
 8004a0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004a0c:	e01f      	b.n	8004a4e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a0e:	4b2d      	ldr	r3, [pc, #180]	@ (8004ac4 <UART_SetConfig+0x934>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f003 0320 	and.w	r3, r3, #32
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d009      	beq.n	8004a2e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004a1a:	4b2a      	ldr	r3, [pc, #168]	@ (8004ac4 <UART_SetConfig+0x934>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	08db      	lsrs	r3, r3, #3
 8004a20:	f003 0303 	and.w	r3, r3, #3
 8004a24:	4a24      	ldr	r2, [pc, #144]	@ (8004ab8 <UART_SetConfig+0x928>)
 8004a26:	fa22 f303 	lsr.w	r3, r2, r3
 8004a2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004a2c:	e00f      	b.n	8004a4e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8004a2e:	4b22      	ldr	r3, [pc, #136]	@ (8004ab8 <UART_SetConfig+0x928>)
 8004a30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004a32:	e00c      	b.n	8004a4e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004a34:	4b21      	ldr	r3, [pc, #132]	@ (8004abc <UART_SetConfig+0x92c>)
 8004a36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004a38:	e009      	b.n	8004a4e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a3a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004a3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004a40:	e005      	b.n	8004a4e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8004a42:	2300      	movs	r3, #0
 8004a44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8004a4c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004a4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	f000 80e7 	beq.w	8004c24 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a5a:	4a19      	ldr	r2, [pc, #100]	@ (8004ac0 <UART_SetConfig+0x930>)
 8004a5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a60:	461a      	mov	r2, r3
 8004a62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a64:	fbb3 f3f2 	udiv	r3, r3, r2
 8004a68:	005a      	lsls	r2, r3, #1
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	085b      	lsrs	r3, r3, #1
 8004a70:	441a      	add	r2, r3
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a7a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a7e:	2b0f      	cmp	r3, #15
 8004a80:	d916      	bls.n	8004ab0 <UART_SetConfig+0x920>
 8004a82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a88:	d212      	bcs.n	8004ab0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004a8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a8c:	b29b      	uxth	r3, r3
 8004a8e:	f023 030f 	bic.w	r3, r3, #15
 8004a92:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004a94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a96:	085b      	lsrs	r3, r3, #1
 8004a98:	b29b      	uxth	r3, r3
 8004a9a:	f003 0307 	and.w	r3, r3, #7
 8004a9e:	b29a      	uxth	r2, r3
 8004aa0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8004aac:	60da      	str	r2, [r3, #12]
 8004aae:	e0b9      	b.n	8004c24 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8004ab6:	e0b5      	b.n	8004c24 <UART_SetConfig+0xa94>
 8004ab8:	03d09000 	.word	0x03d09000
 8004abc:	003d0900 	.word	0x003d0900
 8004ac0:	08005328 	.word	0x08005328
 8004ac4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8004ac8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8004acc:	2b20      	cmp	r3, #32
 8004ace:	dc49      	bgt.n	8004b64 <UART_SetConfig+0x9d4>
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	db7c      	blt.n	8004bce <UART_SetConfig+0xa3e>
 8004ad4:	2b20      	cmp	r3, #32
 8004ad6:	d87a      	bhi.n	8004bce <UART_SetConfig+0xa3e>
 8004ad8:	a201      	add	r2, pc, #4	@ (adr r2, 8004ae0 <UART_SetConfig+0x950>)
 8004ada:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ade:	bf00      	nop
 8004ae0:	08004b6b 	.word	0x08004b6b
 8004ae4:	08004b73 	.word	0x08004b73
 8004ae8:	08004bcf 	.word	0x08004bcf
 8004aec:	08004bcf 	.word	0x08004bcf
 8004af0:	08004b7b 	.word	0x08004b7b
 8004af4:	08004bcf 	.word	0x08004bcf
 8004af8:	08004bcf 	.word	0x08004bcf
 8004afc:	08004bcf 	.word	0x08004bcf
 8004b00:	08004b8b 	.word	0x08004b8b
 8004b04:	08004bcf 	.word	0x08004bcf
 8004b08:	08004bcf 	.word	0x08004bcf
 8004b0c:	08004bcf 	.word	0x08004bcf
 8004b10:	08004bcf 	.word	0x08004bcf
 8004b14:	08004bcf 	.word	0x08004bcf
 8004b18:	08004bcf 	.word	0x08004bcf
 8004b1c:	08004bcf 	.word	0x08004bcf
 8004b20:	08004b9b 	.word	0x08004b9b
 8004b24:	08004bcf 	.word	0x08004bcf
 8004b28:	08004bcf 	.word	0x08004bcf
 8004b2c:	08004bcf 	.word	0x08004bcf
 8004b30:	08004bcf 	.word	0x08004bcf
 8004b34:	08004bcf 	.word	0x08004bcf
 8004b38:	08004bcf 	.word	0x08004bcf
 8004b3c:	08004bcf 	.word	0x08004bcf
 8004b40:	08004bcf 	.word	0x08004bcf
 8004b44:	08004bcf 	.word	0x08004bcf
 8004b48:	08004bcf 	.word	0x08004bcf
 8004b4c:	08004bcf 	.word	0x08004bcf
 8004b50:	08004bcf 	.word	0x08004bcf
 8004b54:	08004bcf 	.word	0x08004bcf
 8004b58:	08004bcf 	.word	0x08004bcf
 8004b5c:	08004bcf 	.word	0x08004bcf
 8004b60:	08004bc1 	.word	0x08004bc1
 8004b64:	2b40      	cmp	r3, #64	@ 0x40
 8004b66:	d02e      	beq.n	8004bc6 <UART_SetConfig+0xa36>
 8004b68:	e031      	b.n	8004bce <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b6a:	f7fd fc29 	bl	80023c0 <HAL_RCC_GetPCLK1Freq>
 8004b6e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004b70:	e033      	b.n	8004bda <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b72:	f7fd fc3b 	bl	80023ec <HAL_RCC_GetPCLK2Freq>
 8004b76:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004b78:	e02f      	b.n	8004bda <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004b7a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f7fe feaa 	bl	80038d8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004b84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004b88:	e027      	b.n	8004bda <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004b8a:	f107 0318 	add.w	r3, r7, #24
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f7fe fff6 	bl	8003b80 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004b94:	69fb      	ldr	r3, [r7, #28]
 8004b96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004b98:	e01f      	b.n	8004bda <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004b9a:	4b2d      	ldr	r3, [pc, #180]	@ (8004c50 <UART_SetConfig+0xac0>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f003 0320 	and.w	r3, r3, #32
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d009      	beq.n	8004bba <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004ba6:	4b2a      	ldr	r3, [pc, #168]	@ (8004c50 <UART_SetConfig+0xac0>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	08db      	lsrs	r3, r3, #3
 8004bac:	f003 0303 	and.w	r3, r3, #3
 8004bb0:	4a28      	ldr	r2, [pc, #160]	@ (8004c54 <UART_SetConfig+0xac4>)
 8004bb2:	fa22 f303 	lsr.w	r3, r2, r3
 8004bb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004bb8:	e00f      	b.n	8004bda <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8004bba:	4b26      	ldr	r3, [pc, #152]	@ (8004c54 <UART_SetConfig+0xac4>)
 8004bbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004bbe:	e00c      	b.n	8004bda <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004bc0:	4b25      	ldr	r3, [pc, #148]	@ (8004c58 <UART_SetConfig+0xac8>)
 8004bc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004bc4:	e009      	b.n	8004bda <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004bc6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004bca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004bcc:	e005      	b.n	8004bda <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8004bd8:	bf00      	nop
    }

    if (pclk != 0U)
 8004bda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d021      	beq.n	8004c24 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004be4:	4a1d      	ldr	r2, [pc, #116]	@ (8004c5c <UART_SetConfig+0xacc>)
 8004be6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004bea:	461a      	mov	r2, r3
 8004bec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004bee:	fbb3 f2f2 	udiv	r2, r3, r2
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	085b      	lsrs	r3, r3, #1
 8004bf8:	441a      	add	r2, r3
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c02:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c06:	2b0f      	cmp	r3, #15
 8004c08:	d909      	bls.n	8004c1e <UART_SetConfig+0xa8e>
 8004c0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c10:	d205      	bcs.n	8004c1e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004c12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c14:	b29a      	uxth	r2, r3
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	60da      	str	r2, [r3, #12]
 8004c1c:	e002      	b.n	8004c24 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	2201      	movs	r2, #1
 8004c28:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	2201      	movs	r2, #1
 8004c30:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	2200      	movs	r2, #0
 8004c38:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004c40:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	3748      	adds	r7, #72	@ 0x48
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c4e:	bf00      	nop
 8004c50:	58024400 	.word	0x58024400
 8004c54:	03d09000 	.word	0x03d09000
 8004c58:	003d0900 	.word	0x003d0900
 8004c5c:	08005328 	.word	0x08005328

08004c60 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b083      	sub	sp, #12
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c6c:	f003 0308 	and.w	r3, r3, #8
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d00a      	beq.n	8004c8a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	430a      	orrs	r2, r1
 8004c88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c8e:	f003 0301 	and.w	r3, r3, #1
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d00a      	beq.n	8004cac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	430a      	orrs	r2, r1
 8004caa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cb0:	f003 0302 	and.w	r3, r3, #2
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d00a      	beq.n	8004cce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	430a      	orrs	r2, r1
 8004ccc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cd2:	f003 0304 	and.w	r3, r3, #4
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d00a      	beq.n	8004cf0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	430a      	orrs	r2, r1
 8004cee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cf4:	f003 0310 	and.w	r3, r3, #16
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d00a      	beq.n	8004d12 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	430a      	orrs	r2, r1
 8004d10:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d16:	f003 0320 	and.w	r3, r3, #32
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d00a      	beq.n	8004d34 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	430a      	orrs	r2, r1
 8004d32:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d01a      	beq.n	8004d76 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	430a      	orrs	r2, r1
 8004d54:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d5a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004d5e:	d10a      	bne.n	8004d76 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	430a      	orrs	r2, r1
 8004d74:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d00a      	beq.n	8004d98 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	430a      	orrs	r2, r1
 8004d96:	605a      	str	r2, [r3, #4]
  }
}
 8004d98:	bf00      	nop
 8004d9a:	370c      	adds	r7, #12
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da2:	4770      	bx	lr

08004da4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b098      	sub	sp, #96	@ 0x60
 8004da8:	af02      	add	r7, sp, #8
 8004daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2200      	movs	r2, #0
 8004db0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004db4:	f7fb ffac 	bl	8000d10 <HAL_GetTick>
 8004db8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f003 0308 	and.w	r3, r3, #8
 8004dc4:	2b08      	cmp	r3, #8
 8004dc6:	d12f      	bne.n	8004e28 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004dc8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004dcc:	9300      	str	r3, [sp, #0]
 8004dce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	f000 f88e 	bl	8004ef8 <UART_WaitOnFlagUntilTimeout>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d022      	beq.n	8004e28 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004de8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dea:	e853 3f00 	ldrex	r3, [r3]
 8004dee:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004df0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004df2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004df6:	653b      	str	r3, [r7, #80]	@ 0x50
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	461a      	mov	r2, r3
 8004dfe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004e00:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e02:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e04:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004e06:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004e08:	e841 2300 	strex	r3, r2, [r1]
 8004e0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004e0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d1e6      	bne.n	8004de2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2220      	movs	r2, #32
 8004e18:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e24:	2303      	movs	r3, #3
 8004e26:	e063      	b.n	8004ef0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f003 0304 	and.w	r3, r3, #4
 8004e32:	2b04      	cmp	r3, #4
 8004e34:	d149      	bne.n	8004eca <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e36:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004e3a:	9300      	str	r3, [sp, #0]
 8004e3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e3e:	2200      	movs	r2, #0
 8004e40:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004e44:	6878      	ldr	r0, [r7, #4]
 8004e46:	f000 f857 	bl	8004ef8 <UART_WaitOnFlagUntilTimeout>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d03c      	beq.n	8004eca <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e58:	e853 3f00 	ldrex	r3, [r3]
 8004e5c:	623b      	str	r3, [r7, #32]
   return(result);
 8004e5e:	6a3b      	ldr	r3, [r7, #32]
 8004e60:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004e64:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	461a      	mov	r2, r3
 8004e6c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004e6e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004e70:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e72:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004e74:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e76:	e841 2300 	strex	r3, r2, [r1]
 8004e7a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004e7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d1e6      	bne.n	8004e50 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	3308      	adds	r3, #8
 8004e88:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	e853 3f00 	ldrex	r3, [r3]
 8004e90:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	f023 0301 	bic.w	r3, r3, #1
 8004e98:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	3308      	adds	r3, #8
 8004ea0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004ea2:	61fa      	str	r2, [r7, #28]
 8004ea4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ea6:	69b9      	ldr	r1, [r7, #24]
 8004ea8:	69fa      	ldr	r2, [r7, #28]
 8004eaa:	e841 2300 	strex	r3, r2, [r1]
 8004eae:	617b      	str	r3, [r7, #20]
   return(result);
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d1e5      	bne.n	8004e82 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2220      	movs	r2, #32
 8004eba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ec6:	2303      	movs	r3, #3
 8004ec8:	e012      	b.n	8004ef0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2220      	movs	r2, #32
 8004ece:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2220      	movs	r2, #32
 8004ed6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2200      	movs	r2, #0
 8004ede:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004eee:	2300      	movs	r3, #0
}
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	3758      	adds	r7, #88	@ 0x58
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bd80      	pop	{r7, pc}

08004ef8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b084      	sub	sp, #16
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	60f8      	str	r0, [r7, #12]
 8004f00:	60b9      	str	r1, [r7, #8]
 8004f02:	603b      	str	r3, [r7, #0]
 8004f04:	4613      	mov	r3, r2
 8004f06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f08:	e04f      	b.n	8004faa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f0a:	69bb      	ldr	r3, [r7, #24]
 8004f0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f10:	d04b      	beq.n	8004faa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f12:	f7fb fefd 	bl	8000d10 <HAL_GetTick>
 8004f16:	4602      	mov	r2, r0
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	1ad3      	subs	r3, r2, r3
 8004f1c:	69ba      	ldr	r2, [r7, #24]
 8004f1e:	429a      	cmp	r2, r3
 8004f20:	d302      	bcc.n	8004f28 <UART_WaitOnFlagUntilTimeout+0x30>
 8004f22:	69bb      	ldr	r3, [r7, #24]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d101      	bne.n	8004f2c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004f28:	2303      	movs	r3, #3
 8004f2a:	e04e      	b.n	8004fca <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f003 0304 	and.w	r3, r3, #4
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d037      	beq.n	8004faa <UART_WaitOnFlagUntilTimeout+0xb2>
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	2b80      	cmp	r3, #128	@ 0x80
 8004f3e:	d034      	beq.n	8004faa <UART_WaitOnFlagUntilTimeout+0xb2>
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	2b40      	cmp	r3, #64	@ 0x40
 8004f44:	d031      	beq.n	8004faa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	69db      	ldr	r3, [r3, #28]
 8004f4c:	f003 0308 	and.w	r3, r3, #8
 8004f50:	2b08      	cmp	r3, #8
 8004f52:	d110      	bne.n	8004f76 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	2208      	movs	r2, #8
 8004f5a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004f5c:	68f8      	ldr	r0, [r7, #12]
 8004f5e:	f000 f839 	bl	8004fd4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2208      	movs	r2, #8
 8004f66:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8004f72:	2301      	movs	r3, #1
 8004f74:	e029      	b.n	8004fca <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	69db      	ldr	r3, [r3, #28]
 8004f7c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f80:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f84:	d111      	bne.n	8004faa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004f8e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004f90:	68f8      	ldr	r0, [r7, #12]
 8004f92:	f000 f81f 	bl	8004fd4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	2220      	movs	r2, #32
 8004f9a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8004fa6:	2303      	movs	r3, #3
 8004fa8:	e00f      	b.n	8004fca <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	69da      	ldr	r2, [r3, #28]
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	4013      	ands	r3, r2
 8004fb4:	68ba      	ldr	r2, [r7, #8]
 8004fb6:	429a      	cmp	r2, r3
 8004fb8:	bf0c      	ite	eq
 8004fba:	2301      	moveq	r3, #1
 8004fbc:	2300      	movne	r3, #0
 8004fbe:	b2db      	uxtb	r3, r3
 8004fc0:	461a      	mov	r2, r3
 8004fc2:	79fb      	ldrb	r3, [r7, #7]
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	d0a0      	beq.n	8004f0a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004fc8:	2300      	movs	r3, #0
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	3710      	adds	r7, #16
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}
	...

08004fd4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b095      	sub	sp, #84	@ 0x54
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fe2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fe4:	e853 3f00 	ldrex	r3, [r3]
 8004fe8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004fea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004ff0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	461a      	mov	r2, r3
 8004ff8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004ffa:	643b      	str	r3, [r7, #64]	@ 0x40
 8004ffc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ffe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005000:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005002:	e841 2300 	strex	r3, r2, [r1]
 8005006:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005008:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800500a:	2b00      	cmp	r3, #0
 800500c:	d1e6      	bne.n	8004fdc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	3308      	adds	r3, #8
 8005014:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005016:	6a3b      	ldr	r3, [r7, #32]
 8005018:	e853 3f00 	ldrex	r3, [r3]
 800501c:	61fb      	str	r3, [r7, #28]
   return(result);
 800501e:	69fa      	ldr	r2, [r7, #28]
 8005020:	4b1e      	ldr	r3, [pc, #120]	@ (800509c <UART_EndRxTransfer+0xc8>)
 8005022:	4013      	ands	r3, r2
 8005024:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	3308      	adds	r3, #8
 800502c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800502e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005030:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005032:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005034:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005036:	e841 2300 	strex	r3, r2, [r1]
 800503a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800503c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800503e:	2b00      	cmp	r3, #0
 8005040:	d1e5      	bne.n	800500e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005046:	2b01      	cmp	r3, #1
 8005048:	d118      	bne.n	800507c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	e853 3f00 	ldrex	r3, [r3]
 8005056:	60bb      	str	r3, [r7, #8]
   return(result);
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	f023 0310 	bic.w	r3, r3, #16
 800505e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	461a      	mov	r2, r3
 8005066:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005068:	61bb      	str	r3, [r7, #24]
 800506a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800506c:	6979      	ldr	r1, [r7, #20]
 800506e:	69ba      	ldr	r2, [r7, #24]
 8005070:	e841 2300 	strex	r3, r2, [r1]
 8005074:	613b      	str	r3, [r7, #16]
   return(result);
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d1e6      	bne.n	800504a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2220      	movs	r2, #32
 8005080:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2200      	movs	r2, #0
 8005088:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2200      	movs	r2, #0
 800508e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005090:	bf00      	nop
 8005092:	3754      	adds	r7, #84	@ 0x54
 8005094:	46bd      	mov	sp, r7
 8005096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509a:	4770      	bx	lr
 800509c:	effffffe 	.word	0xeffffffe

080050a0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b085      	sub	sp, #20
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80050ae:	2b01      	cmp	r3, #1
 80050b0:	d101      	bne.n	80050b6 <HAL_UARTEx_DisableFifoMode+0x16>
 80050b2:	2302      	movs	r3, #2
 80050b4:	e027      	b.n	8005106 <HAL_UARTEx_DisableFifoMode+0x66>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2201      	movs	r2, #1
 80050ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2224      	movs	r2, #36	@ 0x24
 80050c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	681a      	ldr	r2, [r3, #0]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f022 0201 	bic.w	r2, r2, #1
 80050dc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80050e4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2200      	movs	r2, #0
 80050ea:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	68fa      	ldr	r2, [r7, #12]
 80050f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2220      	movs	r2, #32
 80050f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2200      	movs	r2, #0
 8005100:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005104:	2300      	movs	r3, #0
}
 8005106:	4618      	mov	r0, r3
 8005108:	3714      	adds	r7, #20
 800510a:	46bd      	mov	sp, r7
 800510c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005110:	4770      	bx	lr

08005112 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005112:	b580      	push	{r7, lr}
 8005114:	b084      	sub	sp, #16
 8005116:	af00      	add	r7, sp, #0
 8005118:	6078      	str	r0, [r7, #4]
 800511a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005122:	2b01      	cmp	r3, #1
 8005124:	d101      	bne.n	800512a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005126:	2302      	movs	r3, #2
 8005128:	e02d      	b.n	8005186 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2201      	movs	r2, #1
 800512e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2224      	movs	r2, #36	@ 0x24
 8005136:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	681a      	ldr	r2, [r3, #0]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f022 0201 	bic.w	r2, r2, #1
 8005150:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	689b      	ldr	r3, [r3, #8]
 8005158:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	683a      	ldr	r2, [r7, #0]
 8005162:	430a      	orrs	r2, r1
 8005164:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f000 f850 	bl	800520c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	68fa      	ldr	r2, [r7, #12]
 8005172:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2220      	movs	r2, #32
 8005178:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2200      	movs	r2, #0
 8005180:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005184:	2300      	movs	r3, #0
}
 8005186:	4618      	mov	r0, r3
 8005188:	3710      	adds	r7, #16
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}

0800518e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800518e:	b580      	push	{r7, lr}
 8005190:	b084      	sub	sp, #16
 8005192:	af00      	add	r7, sp, #0
 8005194:	6078      	str	r0, [r7, #4]
 8005196:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800519e:	2b01      	cmp	r3, #1
 80051a0:	d101      	bne.n	80051a6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80051a2:	2302      	movs	r3, #2
 80051a4:	e02d      	b.n	8005202 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2201      	movs	r2, #1
 80051aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2224      	movs	r2, #36	@ 0x24
 80051b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	681a      	ldr	r2, [r3, #0]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f022 0201 	bic.w	r2, r2, #1
 80051cc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	689b      	ldr	r3, [r3, #8]
 80051d4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	683a      	ldr	r2, [r7, #0]
 80051de:	430a      	orrs	r2, r1
 80051e0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	f000 f812 	bl	800520c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	68fa      	ldr	r2, [r7, #12]
 80051ee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2220      	movs	r2, #32
 80051f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2200      	movs	r2, #0
 80051fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005200:	2300      	movs	r3, #0
}
 8005202:	4618      	mov	r0, r3
 8005204:	3710      	adds	r7, #16
 8005206:	46bd      	mov	sp, r7
 8005208:	bd80      	pop	{r7, pc}
	...

0800520c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800520c:	b480      	push	{r7}
 800520e:	b085      	sub	sp, #20
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005218:	2b00      	cmp	r3, #0
 800521a:	d108      	bne.n	800522e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2201      	movs	r2, #1
 8005220:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2201      	movs	r2, #1
 8005228:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800522c:	e031      	b.n	8005292 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800522e:	2310      	movs	r3, #16
 8005230:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005232:	2310      	movs	r3, #16
 8005234:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	0e5b      	lsrs	r3, r3, #25
 800523e:	b2db      	uxtb	r3, r3
 8005240:	f003 0307 	and.w	r3, r3, #7
 8005244:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	689b      	ldr	r3, [r3, #8]
 800524c:	0f5b      	lsrs	r3, r3, #29
 800524e:	b2db      	uxtb	r3, r3
 8005250:	f003 0307 	and.w	r3, r3, #7
 8005254:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005256:	7bbb      	ldrb	r3, [r7, #14]
 8005258:	7b3a      	ldrb	r2, [r7, #12]
 800525a:	4911      	ldr	r1, [pc, #68]	@ (80052a0 <UARTEx_SetNbDataToProcess+0x94>)
 800525c:	5c8a      	ldrb	r2, [r1, r2]
 800525e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005262:	7b3a      	ldrb	r2, [r7, #12]
 8005264:	490f      	ldr	r1, [pc, #60]	@ (80052a4 <UARTEx_SetNbDataToProcess+0x98>)
 8005266:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005268:	fb93 f3f2 	sdiv	r3, r3, r2
 800526c:	b29a      	uxth	r2, r3
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005274:	7bfb      	ldrb	r3, [r7, #15]
 8005276:	7b7a      	ldrb	r2, [r7, #13]
 8005278:	4909      	ldr	r1, [pc, #36]	@ (80052a0 <UARTEx_SetNbDataToProcess+0x94>)
 800527a:	5c8a      	ldrb	r2, [r1, r2]
 800527c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005280:	7b7a      	ldrb	r2, [r7, #13]
 8005282:	4908      	ldr	r1, [pc, #32]	@ (80052a4 <UARTEx_SetNbDataToProcess+0x98>)
 8005284:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005286:	fb93 f3f2 	sdiv	r3, r3, r2
 800528a:	b29a      	uxth	r2, r3
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005292:	bf00      	nop
 8005294:	3714      	adds	r7, #20
 8005296:	46bd      	mov	sp, r7
 8005298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529c:	4770      	bx	lr
 800529e:	bf00      	nop
 80052a0:	08005340 	.word	0x08005340
 80052a4:	08005348 	.word	0x08005348

080052a8 <memset>:
 80052a8:	4402      	add	r2, r0
 80052aa:	4603      	mov	r3, r0
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d100      	bne.n	80052b2 <memset+0xa>
 80052b0:	4770      	bx	lr
 80052b2:	f803 1b01 	strb.w	r1, [r3], #1
 80052b6:	e7f9      	b.n	80052ac <memset+0x4>

080052b8 <__libc_init_array>:
 80052b8:	b570      	push	{r4, r5, r6, lr}
 80052ba:	4d0d      	ldr	r5, [pc, #52]	@ (80052f0 <__libc_init_array+0x38>)
 80052bc:	4c0d      	ldr	r4, [pc, #52]	@ (80052f4 <__libc_init_array+0x3c>)
 80052be:	1b64      	subs	r4, r4, r5
 80052c0:	10a4      	asrs	r4, r4, #2
 80052c2:	2600      	movs	r6, #0
 80052c4:	42a6      	cmp	r6, r4
 80052c6:	d109      	bne.n	80052dc <__libc_init_array+0x24>
 80052c8:	4d0b      	ldr	r5, [pc, #44]	@ (80052f8 <__libc_init_array+0x40>)
 80052ca:	4c0c      	ldr	r4, [pc, #48]	@ (80052fc <__libc_init_array+0x44>)
 80052cc:	f000 f818 	bl	8005300 <_init>
 80052d0:	1b64      	subs	r4, r4, r5
 80052d2:	10a4      	asrs	r4, r4, #2
 80052d4:	2600      	movs	r6, #0
 80052d6:	42a6      	cmp	r6, r4
 80052d8:	d105      	bne.n	80052e6 <__libc_init_array+0x2e>
 80052da:	bd70      	pop	{r4, r5, r6, pc}
 80052dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80052e0:	4798      	blx	r3
 80052e2:	3601      	adds	r6, #1
 80052e4:	e7ee      	b.n	80052c4 <__libc_init_array+0xc>
 80052e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80052ea:	4798      	blx	r3
 80052ec:	3601      	adds	r6, #1
 80052ee:	e7f2      	b.n	80052d6 <__libc_init_array+0x1e>
 80052f0:	08005358 	.word	0x08005358
 80052f4:	08005358 	.word	0x08005358
 80052f8:	08005358 	.word	0x08005358
 80052fc:	0800535c 	.word	0x0800535c

08005300 <_init>:
 8005300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005302:	bf00      	nop
 8005304:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005306:	bc08      	pop	{r3}
 8005308:	469e      	mov	lr, r3
 800530a:	4770      	bx	lr

0800530c <_fini>:
 800530c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800530e:	bf00      	nop
 8005310:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005312:	bc08      	pop	{r3}
 8005314:	469e      	mov	lr, r3
 8005316:	4770      	bx	lr
