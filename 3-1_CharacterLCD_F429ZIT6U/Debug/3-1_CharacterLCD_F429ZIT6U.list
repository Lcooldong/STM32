
3-1_CharacterLCD_F429ZIT6U.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a60  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004ec  08008c10  08008c10  00018c10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080090fc  080090fc  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  080090fc  080090fc  000190fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009104  08009104  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009104  08009104  00019104  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009108  08009108  00019108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800910c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e0  2**0
                  CONTENTS
 10 .bss          000000dc  200001e0  200001e0  000201e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200002bc  200002bc  000201e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010203  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000261a  00000000  00000000  00030413  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b58  00000000  00000000  00032a30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000a78  00000000  00000000  00033588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024904  00000000  00000000  00034000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000fb4a  00000000  00000000  00058904  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d59ab  00000000  00000000  0006844e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0013ddf9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000428c  00000000  00000000  0013de4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08008bf8 	.word	0x08008bf8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001e4 	.word	0x200001e4
 80001ec:	08008bf8 	.word	0x08008bf8

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9a4 	b.w	8001008 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468c      	mov	ip, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	f040 8083 	bne.w	8000e5a <__udivmoddi4+0x116>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4617      	mov	r7, r2
 8000d58:	d947      	bls.n	8000dea <__udivmoddi4+0xa6>
 8000d5a:	fab2 f282 	clz	r2, r2
 8000d5e:	b142      	cbz	r2, 8000d72 <__udivmoddi4+0x2e>
 8000d60:	f1c2 0020 	rsb	r0, r2, #32
 8000d64:	fa24 f000 	lsr.w	r0, r4, r0
 8000d68:	4091      	lsls	r1, r2
 8000d6a:	4097      	lsls	r7, r2
 8000d6c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d70:	4094      	lsls	r4, r2
 8000d72:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d76:	0c23      	lsrs	r3, r4, #16
 8000d78:	fbbc f6f8 	udiv	r6, ip, r8
 8000d7c:	fa1f fe87 	uxth.w	lr, r7
 8000d80:	fb08 c116 	mls	r1, r8, r6, ip
 8000d84:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d88:	fb06 f10e 	mul.w	r1, r6, lr
 8000d8c:	4299      	cmp	r1, r3
 8000d8e:	d909      	bls.n	8000da4 <__udivmoddi4+0x60>
 8000d90:	18fb      	adds	r3, r7, r3
 8000d92:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d96:	f080 8119 	bcs.w	8000fcc <__udivmoddi4+0x288>
 8000d9a:	4299      	cmp	r1, r3
 8000d9c:	f240 8116 	bls.w	8000fcc <__udivmoddi4+0x288>
 8000da0:	3e02      	subs	r6, #2
 8000da2:	443b      	add	r3, r7
 8000da4:	1a5b      	subs	r3, r3, r1
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dac:	fb08 3310 	mls	r3, r8, r0, r3
 8000db0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d909      	bls.n	8000dd0 <__udivmoddi4+0x8c>
 8000dbc:	193c      	adds	r4, r7, r4
 8000dbe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc2:	f080 8105 	bcs.w	8000fd0 <__udivmoddi4+0x28c>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f240 8102 	bls.w	8000fd0 <__udivmoddi4+0x28c>
 8000dcc:	3802      	subs	r0, #2
 8000dce:	443c      	add	r4, r7
 8000dd0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd4:	eba4 040e 	sub.w	r4, r4, lr
 8000dd8:	2600      	movs	r6, #0
 8000dda:	b11d      	cbz	r5, 8000de4 <__udivmoddi4+0xa0>
 8000ddc:	40d4      	lsrs	r4, r2
 8000dde:	2300      	movs	r3, #0
 8000de0:	e9c5 4300 	strd	r4, r3, [r5]
 8000de4:	4631      	mov	r1, r6
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	b902      	cbnz	r2, 8000dee <__udivmoddi4+0xaa>
 8000dec:	deff      	udf	#255	; 0xff
 8000dee:	fab2 f282 	clz	r2, r2
 8000df2:	2a00      	cmp	r2, #0
 8000df4:	d150      	bne.n	8000e98 <__udivmoddi4+0x154>
 8000df6:	1bcb      	subs	r3, r1, r7
 8000df8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dfc:	fa1f f887 	uxth.w	r8, r7
 8000e00:	2601      	movs	r6, #1
 8000e02:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e06:	0c21      	lsrs	r1, r4, #16
 8000e08:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e10:	fb08 f30c 	mul.w	r3, r8, ip
 8000e14:	428b      	cmp	r3, r1
 8000e16:	d907      	bls.n	8000e28 <__udivmoddi4+0xe4>
 8000e18:	1879      	adds	r1, r7, r1
 8000e1a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e1e:	d202      	bcs.n	8000e26 <__udivmoddi4+0xe2>
 8000e20:	428b      	cmp	r3, r1
 8000e22:	f200 80e9 	bhi.w	8000ff8 <__udivmoddi4+0x2b4>
 8000e26:	4684      	mov	ip, r0
 8000e28:	1ac9      	subs	r1, r1, r3
 8000e2a:	b2a3      	uxth	r3, r4
 8000e2c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e30:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e34:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e38:	fb08 f800 	mul.w	r8, r8, r0
 8000e3c:	45a0      	cmp	r8, r4
 8000e3e:	d907      	bls.n	8000e50 <__udivmoddi4+0x10c>
 8000e40:	193c      	adds	r4, r7, r4
 8000e42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x10a>
 8000e48:	45a0      	cmp	r8, r4
 8000e4a:	f200 80d9 	bhi.w	8001000 <__udivmoddi4+0x2bc>
 8000e4e:	4618      	mov	r0, r3
 8000e50:	eba4 0408 	sub.w	r4, r4, r8
 8000e54:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e58:	e7bf      	b.n	8000dda <__udivmoddi4+0x96>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d909      	bls.n	8000e72 <__udivmoddi4+0x12e>
 8000e5e:	2d00      	cmp	r5, #0
 8000e60:	f000 80b1 	beq.w	8000fc6 <__udivmoddi4+0x282>
 8000e64:	2600      	movs	r6, #0
 8000e66:	e9c5 0100 	strd	r0, r1, [r5]
 8000e6a:	4630      	mov	r0, r6
 8000e6c:	4631      	mov	r1, r6
 8000e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e72:	fab3 f683 	clz	r6, r3
 8000e76:	2e00      	cmp	r6, #0
 8000e78:	d14a      	bne.n	8000f10 <__udivmoddi4+0x1cc>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d302      	bcc.n	8000e84 <__udivmoddi4+0x140>
 8000e7e:	4282      	cmp	r2, r0
 8000e80:	f200 80b8 	bhi.w	8000ff4 <__udivmoddi4+0x2b0>
 8000e84:	1a84      	subs	r4, r0, r2
 8000e86:	eb61 0103 	sbc.w	r1, r1, r3
 8000e8a:	2001      	movs	r0, #1
 8000e8c:	468c      	mov	ip, r1
 8000e8e:	2d00      	cmp	r5, #0
 8000e90:	d0a8      	beq.n	8000de4 <__udivmoddi4+0xa0>
 8000e92:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e96:	e7a5      	b.n	8000de4 <__udivmoddi4+0xa0>
 8000e98:	f1c2 0320 	rsb	r3, r2, #32
 8000e9c:	fa20 f603 	lsr.w	r6, r0, r3
 8000ea0:	4097      	lsls	r7, r2
 8000ea2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ea6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eaa:	40d9      	lsrs	r1, r3
 8000eac:	4330      	orrs	r0, r6
 8000eae:	0c03      	lsrs	r3, r0, #16
 8000eb0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000eb4:	fa1f f887 	uxth.w	r8, r7
 8000eb8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ebc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ec0:	fb06 f108 	mul.w	r1, r6, r8
 8000ec4:	4299      	cmp	r1, r3
 8000ec6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eca:	d909      	bls.n	8000ee0 <__udivmoddi4+0x19c>
 8000ecc:	18fb      	adds	r3, r7, r3
 8000ece:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ed2:	f080 808d 	bcs.w	8000ff0 <__udivmoddi4+0x2ac>
 8000ed6:	4299      	cmp	r1, r3
 8000ed8:	f240 808a 	bls.w	8000ff0 <__udivmoddi4+0x2ac>
 8000edc:	3e02      	subs	r6, #2
 8000ede:	443b      	add	r3, r7
 8000ee0:	1a5b      	subs	r3, r3, r1
 8000ee2:	b281      	uxth	r1, r0
 8000ee4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ee8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef0:	fb00 f308 	mul.w	r3, r0, r8
 8000ef4:	428b      	cmp	r3, r1
 8000ef6:	d907      	bls.n	8000f08 <__udivmoddi4+0x1c4>
 8000ef8:	1879      	adds	r1, r7, r1
 8000efa:	f100 3cff 	add.w	ip, r0, #4294967295
 8000efe:	d273      	bcs.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f00:	428b      	cmp	r3, r1
 8000f02:	d971      	bls.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f04:	3802      	subs	r0, #2
 8000f06:	4439      	add	r1, r7
 8000f08:	1acb      	subs	r3, r1, r3
 8000f0a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f0e:	e778      	b.n	8000e02 <__udivmoddi4+0xbe>
 8000f10:	f1c6 0c20 	rsb	ip, r6, #32
 8000f14:	fa03 f406 	lsl.w	r4, r3, r6
 8000f18:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f1c:	431c      	orrs	r4, r3
 8000f1e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f22:	fa01 f306 	lsl.w	r3, r1, r6
 8000f26:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f2a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f2e:	431f      	orrs	r7, r3
 8000f30:	0c3b      	lsrs	r3, r7, #16
 8000f32:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f36:	fa1f f884 	uxth.w	r8, r4
 8000f3a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f3e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f42:	fb09 fa08 	mul.w	sl, r9, r8
 8000f46:	458a      	cmp	sl, r1
 8000f48:	fa02 f206 	lsl.w	r2, r2, r6
 8000f4c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f50:	d908      	bls.n	8000f64 <__udivmoddi4+0x220>
 8000f52:	1861      	adds	r1, r4, r1
 8000f54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f58:	d248      	bcs.n	8000fec <__udivmoddi4+0x2a8>
 8000f5a:	458a      	cmp	sl, r1
 8000f5c:	d946      	bls.n	8000fec <__udivmoddi4+0x2a8>
 8000f5e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f62:	4421      	add	r1, r4
 8000f64:	eba1 010a 	sub.w	r1, r1, sl
 8000f68:	b2bf      	uxth	r7, r7
 8000f6a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f6e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f72:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f76:	fb00 f808 	mul.w	r8, r0, r8
 8000f7a:	45b8      	cmp	r8, r7
 8000f7c:	d907      	bls.n	8000f8e <__udivmoddi4+0x24a>
 8000f7e:	19e7      	adds	r7, r4, r7
 8000f80:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f84:	d22e      	bcs.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f86:	45b8      	cmp	r8, r7
 8000f88:	d92c      	bls.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f8a:	3802      	subs	r0, #2
 8000f8c:	4427      	add	r7, r4
 8000f8e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f92:	eba7 0708 	sub.w	r7, r7, r8
 8000f96:	fba0 8902 	umull	r8, r9, r0, r2
 8000f9a:	454f      	cmp	r7, r9
 8000f9c:	46c6      	mov	lr, r8
 8000f9e:	4649      	mov	r1, r9
 8000fa0:	d31a      	bcc.n	8000fd8 <__udivmoddi4+0x294>
 8000fa2:	d017      	beq.n	8000fd4 <__udivmoddi4+0x290>
 8000fa4:	b15d      	cbz	r5, 8000fbe <__udivmoddi4+0x27a>
 8000fa6:	ebb3 020e 	subs.w	r2, r3, lr
 8000faa:	eb67 0701 	sbc.w	r7, r7, r1
 8000fae:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fb2:	40f2      	lsrs	r2, r6
 8000fb4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fb8:	40f7      	lsrs	r7, r6
 8000fba:	e9c5 2700 	strd	r2, r7, [r5]
 8000fbe:	2600      	movs	r6, #0
 8000fc0:	4631      	mov	r1, r6
 8000fc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e70b      	b.n	8000de4 <__udivmoddi4+0xa0>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e9      	b.n	8000da4 <__udivmoddi4+0x60>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6fd      	b.n	8000dd0 <__udivmoddi4+0x8c>
 8000fd4:	4543      	cmp	r3, r8
 8000fd6:	d2e5      	bcs.n	8000fa4 <__udivmoddi4+0x260>
 8000fd8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fdc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7df      	b.n	8000fa4 <__udivmoddi4+0x260>
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e7d2      	b.n	8000f8e <__udivmoddi4+0x24a>
 8000fe8:	4660      	mov	r0, ip
 8000fea:	e78d      	b.n	8000f08 <__udivmoddi4+0x1c4>
 8000fec:	4681      	mov	r9, r0
 8000fee:	e7b9      	b.n	8000f64 <__udivmoddi4+0x220>
 8000ff0:	4666      	mov	r6, ip
 8000ff2:	e775      	b.n	8000ee0 <__udivmoddi4+0x19c>
 8000ff4:	4630      	mov	r0, r6
 8000ff6:	e74a      	b.n	8000e8e <__udivmoddi4+0x14a>
 8000ff8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ffc:	4439      	add	r1, r7
 8000ffe:	e713      	b.n	8000e28 <__udivmoddi4+0xe4>
 8001000:	3802      	subs	r0, #2
 8001002:	443c      	add	r4, r7
 8001004:	e724      	b.n	8000e50 <__udivmoddi4+0x10c>
 8001006:	bf00      	nop

08001008 <__aeabi_idiv0>:
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop

0800100c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b088      	sub	sp, #32
 8001010:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001012:	f107 030c 	add.w	r3, r7, #12
 8001016:	2200      	movs	r2, #0
 8001018:	601a      	str	r2, [r3, #0]
 800101a:	605a      	str	r2, [r3, #4]
 800101c:	609a      	str	r2, [r3, #8]
 800101e:	60da      	str	r2, [r3, #12]
 8001020:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001022:	2300      	movs	r3, #0
 8001024:	60bb      	str	r3, [r7, #8]
 8001026:	4b20      	ldr	r3, [pc, #128]	; (80010a8 <MX_GPIO_Init+0x9c>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102a:	4a1f      	ldr	r2, [pc, #124]	; (80010a8 <MX_GPIO_Init+0x9c>)
 800102c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001030:	6313      	str	r3, [r2, #48]	; 0x30
 8001032:	4b1d      	ldr	r3, [pc, #116]	; (80010a8 <MX_GPIO_Init+0x9c>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001036:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800103a:	60bb      	str	r3, [r7, #8]
 800103c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800103e:	2300      	movs	r3, #0
 8001040:	607b      	str	r3, [r7, #4]
 8001042:	4b19      	ldr	r3, [pc, #100]	; (80010a8 <MX_GPIO_Init+0x9c>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001046:	4a18      	ldr	r2, [pc, #96]	; (80010a8 <MX_GPIO_Init+0x9c>)
 8001048:	f043 0302 	orr.w	r3, r3, #2
 800104c:	6313      	str	r3, [r2, #48]	; 0x30
 800104e:	4b16      	ldr	r3, [pc, #88]	; (80010a8 <MX_GPIO_Init+0x9c>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001052:	f003 0302 	and.w	r3, r3, #2
 8001056:	607b      	str	r3, [r7, #4]
 8001058:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800105a:	2300      	movs	r3, #0
 800105c:	603b      	str	r3, [r7, #0]
 800105e:	4b12      	ldr	r3, [pc, #72]	; (80010a8 <MX_GPIO_Init+0x9c>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001062:	4a11      	ldr	r2, [pc, #68]	; (80010a8 <MX_GPIO_Init+0x9c>)
 8001064:	f043 0308 	orr.w	r3, r3, #8
 8001068:	6313      	str	r3, [r2, #48]	; 0x30
 800106a:	4b0f      	ldr	r3, [pc, #60]	; (80010a8 <MX_GPIO_Init+0x9c>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106e:	f003 0308 	and.w	r3, r3, #8
 8001072:	603b      	str	r3, [r7, #0]
 8001074:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 8001076:	2200      	movs	r2, #0
 8001078:	f244 0181 	movw	r1, #16513	; 0x4081
 800107c:	480b      	ldr	r0, [pc, #44]	; (80010ac <MX_GPIO_Init+0xa0>)
 800107e:	f000 fff9 	bl	8002074 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB14 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7;
 8001082:	f244 0381 	movw	r3, #16513	; 0x4081
 8001086:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001088:	2301      	movs	r3, #1
 800108a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108c:	2300      	movs	r3, #0
 800108e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001090:	2300      	movs	r3, #0
 8001092:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001094:	f107 030c 	add.w	r3, r7, #12
 8001098:	4619      	mov	r1, r3
 800109a:	4804      	ldr	r0, [pc, #16]	; (80010ac <MX_GPIO_Init+0xa0>)
 800109c:	f000 fe3e 	bl	8001d1c <HAL_GPIO_Init>

}
 80010a0:	bf00      	nop
 80010a2:	3720      	adds	r7, #32
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	40023800 	.word	0x40023800
 80010ac:	40020400 	.word	0x40020400

080010b0 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b086      	sub	sp, #24
 80010b4:	af02      	add	r7, sp, #8
 80010b6:	4603      	mov	r3, r0
 80010b8:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80010ba:	79fb      	ldrb	r3, [r7, #7]
 80010bc:	f023 030f 	bic.w	r3, r3, #15
 80010c0:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 80010c2:	79fb      	ldrb	r3, [r7, #7]
 80010c4:	011b      	lsls	r3, r3, #4
 80010c6:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80010c8:	7bfb      	ldrb	r3, [r7, #15]
 80010ca:	f043 030c 	orr.w	r3, r3, #12
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80010d2:	7bfb      	ldrb	r3, [r7, #15]
 80010d4:	f043 0308 	orr.w	r3, r3, #8
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80010dc:	7bbb      	ldrb	r3, [r7, #14]
 80010de:	f043 030c 	orr.w	r3, r3, #12
 80010e2:	b2db      	uxtb	r3, r3
 80010e4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80010e6:	7bbb      	ldrb	r3, [r7, #14]
 80010e8:	f043 0308 	orr.w	r3, r3, #8
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80010f0:	f107 0208 	add.w	r2, r7, #8
 80010f4:	2364      	movs	r3, #100	; 0x64
 80010f6:	9300      	str	r3, [sp, #0]
 80010f8:	2304      	movs	r3, #4
 80010fa:	214e      	movs	r1, #78	; 0x4e
 80010fc:	4803      	ldr	r0, [pc, #12]	; (800110c <lcd_send_cmd+0x5c>)
 80010fe:	f001 f917 	bl	8002330 <HAL_I2C_Master_Transmit>
}
 8001102:	bf00      	nop
 8001104:	3710      	adds	r7, #16
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	20000208 	.word	0x20000208

08001110 <lcd_send_data>:

void lcd_send_data (char data)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b086      	sub	sp, #24
 8001114:	af02      	add	r7, sp, #8
 8001116:	4603      	mov	r3, r0
 8001118:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 800111a:	79fb      	ldrb	r3, [r7, #7]
 800111c:	f023 030f 	bic.w	r3, r3, #15
 8001120:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8001122:	79fb      	ldrb	r3, [r7, #7]
 8001124:	011b      	lsls	r3, r3, #4
 8001126:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001128:	7bfb      	ldrb	r3, [r7, #15]
 800112a:	f043 030d 	orr.w	r3, r3, #13
 800112e:	b2db      	uxtb	r3, r3
 8001130:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001132:	7bfb      	ldrb	r3, [r7, #15]
 8001134:	f043 0309 	orr.w	r3, r3, #9
 8001138:	b2db      	uxtb	r3, r3
 800113a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800113c:	7bbb      	ldrb	r3, [r7, #14]
 800113e:	f043 030d 	orr.w	r3, r3, #13
 8001142:	b2db      	uxtb	r3, r3
 8001144:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001146:	7bbb      	ldrb	r3, [r7, #14]
 8001148:	f043 0309 	orr.w	r3, r3, #9
 800114c:	b2db      	uxtb	r3, r3
 800114e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001150:	f107 0208 	add.w	r2, r7, #8
 8001154:	2364      	movs	r3, #100	; 0x64
 8001156:	9300      	str	r3, [sp, #0]
 8001158:	2304      	movs	r3, #4
 800115a:	214e      	movs	r1, #78	; 0x4e
 800115c:	4803      	ldr	r0, [pc, #12]	; (800116c <lcd_send_data+0x5c>)
 800115e:	f001 f8e7 	bl	8002330 <HAL_I2C_Master_Transmit>
}
 8001162:	bf00      	nop
 8001164:	3710      	adds	r7, #16
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	20000208 	.word	0x20000208

08001170 <lcd_put_cur>:
		lcd_send_data (' ');
	}
}

void lcd_put_cur(int row, int col)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
 8001178:	6039      	str	r1, [r7, #0]
    switch (row)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d003      	beq.n	8001188 <lcd_put_cur+0x18>
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2b01      	cmp	r3, #1
 8001184:	d005      	beq.n	8001192 <lcd_put_cur+0x22>
 8001186:	e009      	b.n	800119c <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800118e:	603b      	str	r3, [r7, #0]
            break;
 8001190:	e004      	b.n	800119c <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001198:	603b      	str	r3, [r7, #0]
            break;
 800119a:	bf00      	nop
    }

    lcd_send_cmd (col);
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7ff ff85 	bl	80010b0 <lcd_send_cmd>
}
 80011a6:	bf00      	nop
 80011a8:	3708      	adds	r7, #8
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}

080011ae <lcd_init>:


void lcd_init (void)
{
 80011ae:	b580      	push	{r7, lr}
 80011b0:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 80011b2:	2032      	movs	r0, #50	; 0x32
 80011b4:	f000 fbea 	bl	800198c <HAL_Delay>
	lcd_send_cmd (0x30);
 80011b8:	2030      	movs	r0, #48	; 0x30
 80011ba:	f7ff ff79 	bl	80010b0 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 80011be:	2005      	movs	r0, #5
 80011c0:	f000 fbe4 	bl	800198c <HAL_Delay>
	lcd_send_cmd (0x30);
 80011c4:	2030      	movs	r0, #48	; 0x30
 80011c6:	f7ff ff73 	bl	80010b0 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 80011ca:	2001      	movs	r0, #1
 80011cc:	f000 fbde 	bl	800198c <HAL_Delay>
	lcd_send_cmd (0x30);
 80011d0:	2030      	movs	r0, #48	; 0x30
 80011d2:	f7ff ff6d 	bl	80010b0 <lcd_send_cmd>
	HAL_Delay(10);
 80011d6:	200a      	movs	r0, #10
 80011d8:	f000 fbd8 	bl	800198c <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 80011dc:	2020      	movs	r0, #32
 80011de:	f7ff ff67 	bl	80010b0 <lcd_send_cmd>
	HAL_Delay(10);
 80011e2:	200a      	movs	r0, #10
 80011e4:	f000 fbd2 	bl	800198c <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80011e8:	2028      	movs	r0, #40	; 0x28
 80011ea:	f7ff ff61 	bl	80010b0 <lcd_send_cmd>
	HAL_Delay(1);
 80011ee:	2001      	movs	r0, #1
 80011f0:	f000 fbcc 	bl	800198c <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 80011f4:	2008      	movs	r0, #8
 80011f6:	f7ff ff5b 	bl	80010b0 <lcd_send_cmd>
	HAL_Delay(1);
 80011fa:	2001      	movs	r0, #1
 80011fc:	f000 fbc6 	bl	800198c <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8001200:	2001      	movs	r0, #1
 8001202:	f7ff ff55 	bl	80010b0 <lcd_send_cmd>
	HAL_Delay(1);
 8001206:	2001      	movs	r0, #1
 8001208:	f000 fbc0 	bl	800198c <HAL_Delay>
	HAL_Delay(1);
 800120c:	2001      	movs	r0, #1
 800120e:	f000 fbbd 	bl	800198c <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8001212:	2006      	movs	r0, #6
 8001214:	f7ff ff4c 	bl	80010b0 <lcd_send_cmd>
	HAL_Delay(1);
 8001218:	2001      	movs	r0, #1
 800121a:	f000 fbb7 	bl	800198c <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 800121e:	200c      	movs	r0, #12
 8001220:	f7ff ff46 	bl	80010b0 <lcd_send_cmd>
}
 8001224:	bf00      	nop
 8001226:	bd80      	pop	{r7, pc}

08001228 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8001230:	e006      	b.n	8001240 <lcd_send_string+0x18>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	1c5a      	adds	r2, r3, #1
 8001236:	607a      	str	r2, [r7, #4]
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	4618      	mov	r0, r3
 800123c:	f7ff ff68 	bl	8001110 <lcd_send_data>
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d1f4      	bne.n	8001232 <lcd_send_string+0xa>
}
 8001248:	bf00      	nop
 800124a:	bf00      	nop
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
	...

08001254 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001258:	4b1b      	ldr	r3, [pc, #108]	; (80012c8 <MX_I2C1_Init+0x74>)
 800125a:	4a1c      	ldr	r2, [pc, #112]	; (80012cc <MX_I2C1_Init+0x78>)
 800125c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800125e:	4b1a      	ldr	r3, [pc, #104]	; (80012c8 <MX_I2C1_Init+0x74>)
 8001260:	4a1b      	ldr	r2, [pc, #108]	; (80012d0 <MX_I2C1_Init+0x7c>)
 8001262:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001264:	4b18      	ldr	r3, [pc, #96]	; (80012c8 <MX_I2C1_Init+0x74>)
 8001266:	2200      	movs	r2, #0
 8001268:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800126a:	4b17      	ldr	r3, [pc, #92]	; (80012c8 <MX_I2C1_Init+0x74>)
 800126c:	2200      	movs	r2, #0
 800126e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001270:	4b15      	ldr	r3, [pc, #84]	; (80012c8 <MX_I2C1_Init+0x74>)
 8001272:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001276:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001278:	4b13      	ldr	r3, [pc, #76]	; (80012c8 <MX_I2C1_Init+0x74>)
 800127a:	2200      	movs	r2, #0
 800127c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800127e:	4b12      	ldr	r3, [pc, #72]	; (80012c8 <MX_I2C1_Init+0x74>)
 8001280:	2200      	movs	r2, #0
 8001282:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001284:	4b10      	ldr	r3, [pc, #64]	; (80012c8 <MX_I2C1_Init+0x74>)
 8001286:	2200      	movs	r2, #0
 8001288:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800128a:	4b0f      	ldr	r3, [pc, #60]	; (80012c8 <MX_I2C1_Init+0x74>)
 800128c:	2200      	movs	r2, #0
 800128e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001290:	480d      	ldr	r0, [pc, #52]	; (80012c8 <MX_I2C1_Init+0x74>)
 8001292:	f000 ff09 	bl	80020a8 <HAL_I2C_Init>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800129c:	f000 f942 	bl	8001524 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80012a0:	2100      	movs	r1, #0
 80012a2:	4809      	ldr	r0, [pc, #36]	; (80012c8 <MX_I2C1_Init+0x74>)
 80012a4:	f001 fb4b 	bl	800293e <HAL_I2CEx_ConfigAnalogFilter>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80012ae:	f000 f939 	bl	8001524 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80012b2:	2100      	movs	r1, #0
 80012b4:	4804      	ldr	r0, [pc, #16]	; (80012c8 <MX_I2C1_Init+0x74>)
 80012b6:	f001 fb7e 	bl	80029b6 <HAL_I2CEx_ConfigDigitalFilter>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80012c0:	f000 f930 	bl	8001524 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012c4:	bf00      	nop
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	20000208 	.word	0x20000208
 80012cc:	40005400 	.word	0x40005400
 80012d0:	000186a0 	.word	0x000186a0

080012d4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b08a      	sub	sp, #40	; 0x28
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012dc:	f107 0314 	add.w	r3, r7, #20
 80012e0:	2200      	movs	r2, #0
 80012e2:	601a      	str	r2, [r3, #0]
 80012e4:	605a      	str	r2, [r3, #4]
 80012e6:	609a      	str	r2, [r3, #8]
 80012e8:	60da      	str	r2, [r3, #12]
 80012ea:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a19      	ldr	r2, [pc, #100]	; (8001358 <HAL_I2C_MspInit+0x84>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d12c      	bne.n	8001350 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012f6:	2300      	movs	r3, #0
 80012f8:	613b      	str	r3, [r7, #16]
 80012fa:	4b18      	ldr	r3, [pc, #96]	; (800135c <HAL_I2C_MspInit+0x88>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fe:	4a17      	ldr	r2, [pc, #92]	; (800135c <HAL_I2C_MspInit+0x88>)
 8001300:	f043 0302 	orr.w	r3, r3, #2
 8001304:	6313      	str	r3, [r2, #48]	; 0x30
 8001306:	4b15      	ldr	r3, [pc, #84]	; (800135c <HAL_I2C_MspInit+0x88>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130a:	f003 0302 	and.w	r3, r3, #2
 800130e:	613b      	str	r3, [r7, #16]
 8001310:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8001312:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001316:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001318:	2312      	movs	r3, #18
 800131a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131c:	2300      	movs	r3, #0
 800131e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001320:	2303      	movs	r3, #3
 8001322:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001324:	2304      	movs	r3, #4
 8001326:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001328:	f107 0314 	add.w	r3, r7, #20
 800132c:	4619      	mov	r1, r3
 800132e:	480c      	ldr	r0, [pc, #48]	; (8001360 <HAL_I2C_MspInit+0x8c>)
 8001330:	f000 fcf4 	bl	8001d1c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001334:	2300      	movs	r3, #0
 8001336:	60fb      	str	r3, [r7, #12]
 8001338:	4b08      	ldr	r3, [pc, #32]	; (800135c <HAL_I2C_MspInit+0x88>)
 800133a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133c:	4a07      	ldr	r2, [pc, #28]	; (800135c <HAL_I2C_MspInit+0x88>)
 800133e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001342:	6413      	str	r3, [r2, #64]	; 0x40
 8001344:	4b05      	ldr	r3, [pc, #20]	; (800135c <HAL_I2C_MspInit+0x88>)
 8001346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001348:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800134c:	60fb      	str	r3, [r7, #12]
 800134e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001350:	bf00      	nop
 8001352:	3728      	adds	r7, #40	; 0x28
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	40005400 	.word	0x40005400
 800135c:	40023800 	.word	0x40023800
 8001360:	40020400 	.word	0x40020400

08001364 <_write>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
int _write(int file, uint8_t* p, int len)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af00      	add	r7, sp, #0
 800136a:	60f8      	str	r0, [r7, #12]
 800136c:	60b9      	str	r1, [r7, #8]
 800136e:	607a      	str	r2, [r7, #4]
	if(HAL_UART_Transmit(&huart3, p, len, 10) == HAL_OK) return len;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	b29a      	uxth	r2, r3
 8001374:	230a      	movs	r3, #10
 8001376:	68b9      	ldr	r1, [r7, #8]
 8001378:	4806      	ldr	r0, [pc, #24]	; (8001394 <_write+0x30>)
 800137a:	f002 f86c 	bl	8003456 <HAL_UART_Transmit>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d101      	bne.n	8001388 <_write+0x24>
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	e000      	b.n	800138a <_write+0x26>
	else return 0;
 8001388:	2300      	movs	r3, #0
	//HAL_UART_Transmit(&huart3, p, len, 10);
	//return len;
}
 800138a:	4618      	mov	r0, r3
 800138c:	3710      	adds	r7, #16
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	20000264 	.word	0x20000264

08001398 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800139c:	f000 fa84 	bl	80018a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013a0:	f000 f824 	bl	80013ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013a4:	f7ff fe32 	bl	800100c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80013a8:	f000 f9da 	bl	8001760 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 80013ac:	f7ff ff52 	bl	8001254 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  //HAL_UART_Receive_IT(&huart3, &rx3_data, 1);
  lcd_init();
 80013b0:	f7ff fefd 	bl	80011ae <lcd_init>
  HAL_UART_Receive_IT(&huart3, rx3_data, RX__BUFF_SIZE);
 80013b4:	2205      	movs	r2, #5
 80013b6:	4909      	ldr	r1, [pc, #36]	; (80013dc <main+0x44>)
 80013b8:	4809      	ldr	r0, [pc, #36]	; (80013e0 <main+0x48>)
 80013ba:	f002 f8de 	bl	800357a <HAL_UART_Receive_IT>

  lcd_send_string("HELLO WORLD");
 80013be:	4809      	ldr	r0, [pc, #36]	; (80013e4 <main+0x4c>)
 80013c0:	f7ff ff32 	bl	8001228 <lcd_send_string>
  HAL_Delay(1000);
 80013c4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013c8:	f000 fae0 	bl	800198c <HAL_Delay>
  lcd_put_cur(1, 0);
 80013cc:	2100      	movs	r1, #0
 80013ce:	2001      	movs	r0, #1
 80013d0:	f7ff fece 	bl	8001170 <lcd_put_cur>
  lcd_send_string("LIM DONG HEE");
 80013d4:	4804      	ldr	r0, [pc, #16]	; (80013e8 <main+0x50>)
 80013d6:	f7ff ff27 	bl	8001228 <lcd_send_string>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //uint32_t a = 0;
  while (1)
 80013da:	e7fe      	b.n	80013da <main+0x42>
 80013dc:	2000025c 	.word	0x2000025c
 80013e0:	20000264 	.word	0x20000264
 80013e4:	08008c10 	.word	0x08008c10
 80013e8:	08008c1c 	.word	0x08008c1c

080013ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b094      	sub	sp, #80	; 0x50
 80013f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013f2:	f107 0320 	add.w	r3, r7, #32
 80013f6:	2230      	movs	r2, #48	; 0x30
 80013f8:	2100      	movs	r1, #0
 80013fa:	4618      	mov	r0, r3
 80013fc:	f002 ffd0 	bl	80043a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001400:	f107 030c 	add.w	r3, r7, #12
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	605a      	str	r2, [r3, #4]
 800140a:	609a      	str	r2, [r3, #8]
 800140c:	60da      	str	r2, [r3, #12]
 800140e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001410:	2300      	movs	r3, #0
 8001412:	60bb      	str	r3, [r7, #8]
 8001414:	4b2b      	ldr	r3, [pc, #172]	; (80014c4 <SystemClock_Config+0xd8>)
 8001416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001418:	4a2a      	ldr	r2, [pc, #168]	; (80014c4 <SystemClock_Config+0xd8>)
 800141a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800141e:	6413      	str	r3, [r2, #64]	; 0x40
 8001420:	4b28      	ldr	r3, [pc, #160]	; (80014c4 <SystemClock_Config+0xd8>)
 8001422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001424:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001428:	60bb      	str	r3, [r7, #8]
 800142a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800142c:	2300      	movs	r3, #0
 800142e:	607b      	str	r3, [r7, #4]
 8001430:	4b25      	ldr	r3, [pc, #148]	; (80014c8 <SystemClock_Config+0xdc>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a24      	ldr	r2, [pc, #144]	; (80014c8 <SystemClock_Config+0xdc>)
 8001436:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800143a:	6013      	str	r3, [r2, #0]
 800143c:	4b22      	ldr	r3, [pc, #136]	; (80014c8 <SystemClock_Config+0xdc>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001444:	607b      	str	r3, [r7, #4]
 8001446:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001448:	2301      	movs	r3, #1
 800144a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800144c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001450:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001452:	2302      	movs	r3, #2
 8001454:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001456:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800145a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800145c:	2304      	movs	r3, #4
 800145e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001460:	23b4      	movs	r3, #180	; 0xb4
 8001462:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001464:	2302      	movs	r3, #2
 8001466:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001468:	2304      	movs	r3, #4
 800146a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800146c:	f107 0320 	add.w	r3, r7, #32
 8001470:	4618      	mov	r0, r3
 8001472:	f001 fb2f 	bl	8002ad4 <HAL_RCC_OscConfig>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800147c:	f000 f852 	bl	8001524 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001480:	f001 fad8 	bl	8002a34 <HAL_PWREx_EnableOverDrive>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800148a:	f000 f84b 	bl	8001524 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800148e:	230f      	movs	r3, #15
 8001490:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001492:	2302      	movs	r3, #2
 8001494:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001496:	2300      	movs	r3, #0
 8001498:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800149a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800149e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80014a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014a4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80014a6:	f107 030c 	add.w	r3, r7, #12
 80014aa:	2105      	movs	r1, #5
 80014ac:	4618      	mov	r0, r3
 80014ae:	f001 fd89 	bl	8002fc4 <HAL_RCC_ClockConfig>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80014b8:	f000 f834 	bl	8001524 <Error_Handler>
  }
}
 80014bc:	bf00      	nop
 80014be:	3750      	adds	r7, #80	; 0x50
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	40023800 	.word	0x40023800
 80014c8:	40007000 	.word	0x40007000

080014cc <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)		// ?��?��?��?�� ?��?��
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b084      	sub	sp, #16
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART3)	// huart3.Instance
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a0f      	ldr	r2, [pc, #60]	; (8001518 <HAL_UART_RxCpltCallback+0x4c>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d118      	bne.n	8001510 <HAL_UART_RxCpltCallback+0x44>
	{
		//HAL_UART_Receive_IT(&huart3, &rx3_data, 1);	// 1byte 받을 ?��마다 rx3_data?�� ???��
		//HAL_UART_Transmit(&huart3, &rx3_data, 1, 10);
		HAL_UART_Receive_IT(&huart3, rx3_data, RX__BUFF_SIZE);	// 5byte 받을 ?�� ?��?��, IRQHandler ?�� 1byte
 80014de:	2205      	movs	r2, #5
 80014e0:	490e      	ldr	r1, [pc, #56]	; (800151c <HAL_UART_RxCpltCallback+0x50>)
 80014e2:	480f      	ldr	r0, [pc, #60]	; (8001520 <HAL_UART_RxCpltCallback+0x54>)
 80014e4:	f002 f849 	bl	800357a <HAL_UART_Receive_IT>
		HAL_UART_Transmit(&huart3, (uint8_t *)rx3_data, RX__BUFF_SIZE, 100);
 80014e8:	2364      	movs	r3, #100	; 0x64
 80014ea:	2205      	movs	r2, #5
 80014ec:	490b      	ldr	r1, [pc, #44]	; (800151c <HAL_UART_RxCpltCallback+0x50>)
 80014ee:	480c      	ldr	r0, [pc, #48]	; (8001520 <HAL_UART_RxCpltCallback+0x54>)
 80014f0:	f001 ffb1 	bl	8003456 <HAL_UART_Transmit>
		for(int i = 0; i< RX__BUFF_SIZE; i++)
 80014f4:	2300      	movs	r3, #0
 80014f6:	60fb      	str	r3, [r7, #12]
 80014f8:	e007      	b.n	800150a <HAL_UART_RxCpltCallback+0x3e>
		{
			rx3_data[i] = 0;
 80014fa:	4a08      	ldr	r2, [pc, #32]	; (800151c <HAL_UART_RxCpltCallback+0x50>)
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	4413      	add	r3, r2
 8001500:	2200      	movs	r2, #0
 8001502:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i< RX__BUFF_SIZE; i++)
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	3301      	adds	r3, #1
 8001508:	60fb      	str	r3, [r7, #12]
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	2b04      	cmp	r3, #4
 800150e:	ddf4      	ble.n	80014fa <HAL_UART_RxCpltCallback+0x2e>
		}
	}
}
 8001510:	bf00      	nop
 8001512:	3710      	adds	r7, #16
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	40004800 	.word	0x40004800
 800151c:	2000025c 	.word	0x2000025c
 8001520:	20000264 	.word	0x20000264

08001524 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001528:	b672      	cpsid	i
}
 800152a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800152c:	e7fe      	b.n	800152c <Error_Handler+0x8>
	...

08001530 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001530:	b480      	push	{r7}
 8001532:	b083      	sub	sp, #12
 8001534:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001536:	2300      	movs	r3, #0
 8001538:	607b      	str	r3, [r7, #4]
 800153a:	4b10      	ldr	r3, [pc, #64]	; (800157c <HAL_MspInit+0x4c>)
 800153c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800153e:	4a0f      	ldr	r2, [pc, #60]	; (800157c <HAL_MspInit+0x4c>)
 8001540:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001544:	6453      	str	r3, [r2, #68]	; 0x44
 8001546:	4b0d      	ldr	r3, [pc, #52]	; (800157c <HAL_MspInit+0x4c>)
 8001548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800154a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800154e:	607b      	str	r3, [r7, #4]
 8001550:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001552:	2300      	movs	r3, #0
 8001554:	603b      	str	r3, [r7, #0]
 8001556:	4b09      	ldr	r3, [pc, #36]	; (800157c <HAL_MspInit+0x4c>)
 8001558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155a:	4a08      	ldr	r2, [pc, #32]	; (800157c <HAL_MspInit+0x4c>)
 800155c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001560:	6413      	str	r3, [r2, #64]	; 0x40
 8001562:	4b06      	ldr	r3, [pc, #24]	; (800157c <HAL_MspInit+0x4c>)
 8001564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001566:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800156a:	603b      	str	r3, [r7, #0]
 800156c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800156e:	bf00      	nop
 8001570:	370c      	adds	r7, #12
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
 800157a:	bf00      	nop
 800157c:	40023800 	.word	0x40023800

08001580 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001584:	e7fe      	b.n	8001584 <NMI_Handler+0x4>

08001586 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001586:	b480      	push	{r7}
 8001588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800158a:	e7fe      	b.n	800158a <HardFault_Handler+0x4>

0800158c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001590:	e7fe      	b.n	8001590 <MemManage_Handler+0x4>

08001592 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001592:	b480      	push	{r7}
 8001594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001596:	e7fe      	b.n	8001596 <BusFault_Handler+0x4>

08001598 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800159c:	e7fe      	b.n	800159c <UsageFault_Handler+0x4>

0800159e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800159e:	b480      	push	{r7}
 80015a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015a2:	bf00      	nop
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr

080015ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015b0:	bf00      	nop
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr

080015ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015ba:	b480      	push	{r7}
 80015bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015be:	bf00      	nop
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr

080015c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015cc:	f000 f9be 	bl	800194c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015d0:	bf00      	nop
 80015d2:	bd80      	pop	{r7, pc}

080015d4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80015d8:	4802      	ldr	r0, [pc, #8]	; (80015e4 <USART3_IRQHandler+0x10>)
 80015da:	f001 ffff 	bl	80035dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80015de:	bf00      	nop
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	20000264 	.word	0x20000264

080015e8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
	return 1;
 80015ec:	2301      	movs	r3, #1
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr

080015f8 <_kill>:

int _kill(int pid, int sig)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
 8001600:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001602:	f002 fea3 	bl	800434c <__errno>
 8001606:	4603      	mov	r3, r0
 8001608:	2216      	movs	r2, #22
 800160a:	601a      	str	r2, [r3, #0]
	return -1;
 800160c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001610:	4618      	mov	r0, r3
 8001612:	3708      	adds	r7, #8
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}

08001618 <_exit>:

void _exit (int status)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001620:	f04f 31ff 	mov.w	r1, #4294967295
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	f7ff ffe7 	bl	80015f8 <_kill>
	while (1) {}		/* Make sure we hang here */
 800162a:	e7fe      	b.n	800162a <_exit+0x12>

0800162c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b086      	sub	sp, #24
 8001630:	af00      	add	r7, sp, #0
 8001632:	60f8      	str	r0, [r7, #12]
 8001634:	60b9      	str	r1, [r7, #8]
 8001636:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001638:	2300      	movs	r3, #0
 800163a:	617b      	str	r3, [r7, #20]
 800163c:	e00a      	b.n	8001654 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800163e:	f3af 8000 	nop.w
 8001642:	4601      	mov	r1, r0
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	1c5a      	adds	r2, r3, #1
 8001648:	60ba      	str	r2, [r7, #8]
 800164a:	b2ca      	uxtb	r2, r1
 800164c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	3301      	adds	r3, #1
 8001652:	617b      	str	r3, [r7, #20]
 8001654:	697a      	ldr	r2, [r7, #20]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	429a      	cmp	r2, r3
 800165a:	dbf0      	blt.n	800163e <_read+0x12>
	}

return len;
 800165c:	687b      	ldr	r3, [r7, #4]
}
 800165e:	4618      	mov	r0, r3
 8001660:	3718      	adds	r7, #24
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}

08001666 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001666:	b480      	push	{r7}
 8001668:	b083      	sub	sp, #12
 800166a:	af00      	add	r7, sp, #0
 800166c:	6078      	str	r0, [r7, #4]
	return -1;
 800166e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001672:	4618      	mov	r0, r3
 8001674:	370c      	adds	r7, #12
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr

0800167e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800167e:	b480      	push	{r7}
 8001680:	b083      	sub	sp, #12
 8001682:	af00      	add	r7, sp, #0
 8001684:	6078      	str	r0, [r7, #4]
 8001686:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800168e:	605a      	str	r2, [r3, #4]
	return 0;
 8001690:	2300      	movs	r3, #0
}
 8001692:	4618      	mov	r0, r3
 8001694:	370c      	adds	r7, #12
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr

0800169e <_isatty>:

int _isatty(int file)
{
 800169e:	b480      	push	{r7}
 80016a0:	b083      	sub	sp, #12
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	6078      	str	r0, [r7, #4]
	return 1;
 80016a6:	2301      	movs	r3, #1
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	370c      	adds	r7, #12
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr

080016b4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b085      	sub	sp, #20
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	60f8      	str	r0, [r7, #12]
 80016bc:	60b9      	str	r1, [r7, #8]
 80016be:	607a      	str	r2, [r7, #4]
	return 0;
 80016c0:	2300      	movs	r3, #0
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3714      	adds	r7, #20
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
	...

080016d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b086      	sub	sp, #24
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016d8:	4a14      	ldr	r2, [pc, #80]	; (800172c <_sbrk+0x5c>)
 80016da:	4b15      	ldr	r3, [pc, #84]	; (8001730 <_sbrk+0x60>)
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016e4:	4b13      	ldr	r3, [pc, #76]	; (8001734 <_sbrk+0x64>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d102      	bne.n	80016f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016ec:	4b11      	ldr	r3, [pc, #68]	; (8001734 <_sbrk+0x64>)
 80016ee:	4a12      	ldr	r2, [pc, #72]	; (8001738 <_sbrk+0x68>)
 80016f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016f2:	4b10      	ldr	r3, [pc, #64]	; (8001734 <_sbrk+0x64>)
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	4413      	add	r3, r2
 80016fa:	693a      	ldr	r2, [r7, #16]
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d207      	bcs.n	8001710 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001700:	f002 fe24 	bl	800434c <__errno>
 8001704:	4603      	mov	r3, r0
 8001706:	220c      	movs	r2, #12
 8001708:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800170a:	f04f 33ff 	mov.w	r3, #4294967295
 800170e:	e009      	b.n	8001724 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001710:	4b08      	ldr	r3, [pc, #32]	; (8001734 <_sbrk+0x64>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001716:	4b07      	ldr	r3, [pc, #28]	; (8001734 <_sbrk+0x64>)
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	4413      	add	r3, r2
 800171e:	4a05      	ldr	r2, [pc, #20]	; (8001734 <_sbrk+0x64>)
 8001720:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001722:	68fb      	ldr	r3, [r7, #12]
}
 8001724:	4618      	mov	r0, r3
 8001726:	3718      	adds	r7, #24
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	20030000 	.word	0x20030000
 8001730:	00000400 	.word	0x00000400
 8001734:	200001fc 	.word	0x200001fc
 8001738:	200002c0 	.word	0x200002c0

0800173c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001740:	4b06      	ldr	r3, [pc, #24]	; (800175c <SystemInit+0x20>)
 8001742:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001746:	4a05      	ldr	r2, [pc, #20]	; (800175c <SystemInit+0x20>)
 8001748:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800174c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001750:	bf00      	nop
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	e000ed00 	.word	0xe000ed00

08001760 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001764:	4b11      	ldr	r3, [pc, #68]	; (80017ac <MX_USART3_UART_Init+0x4c>)
 8001766:	4a12      	ldr	r2, [pc, #72]	; (80017b0 <MX_USART3_UART_Init+0x50>)
 8001768:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800176a:	4b10      	ldr	r3, [pc, #64]	; (80017ac <MX_USART3_UART_Init+0x4c>)
 800176c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001770:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001772:	4b0e      	ldr	r3, [pc, #56]	; (80017ac <MX_USART3_UART_Init+0x4c>)
 8001774:	2200      	movs	r2, #0
 8001776:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001778:	4b0c      	ldr	r3, [pc, #48]	; (80017ac <MX_USART3_UART_Init+0x4c>)
 800177a:	2200      	movs	r2, #0
 800177c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800177e:	4b0b      	ldr	r3, [pc, #44]	; (80017ac <MX_USART3_UART_Init+0x4c>)
 8001780:	2200      	movs	r2, #0
 8001782:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001784:	4b09      	ldr	r3, [pc, #36]	; (80017ac <MX_USART3_UART_Init+0x4c>)
 8001786:	220c      	movs	r2, #12
 8001788:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800178a:	4b08      	ldr	r3, [pc, #32]	; (80017ac <MX_USART3_UART_Init+0x4c>)
 800178c:	2200      	movs	r2, #0
 800178e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001790:	4b06      	ldr	r3, [pc, #24]	; (80017ac <MX_USART3_UART_Init+0x4c>)
 8001792:	2200      	movs	r2, #0
 8001794:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001796:	4805      	ldr	r0, [pc, #20]	; (80017ac <MX_USART3_UART_Init+0x4c>)
 8001798:	f001 fe10 	bl	80033bc <HAL_UART_Init>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80017a2:	f7ff febf 	bl	8001524 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80017a6:	bf00      	nop
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	20000264 	.word	0x20000264
 80017b0:	40004800 	.word	0x40004800

080017b4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b08a      	sub	sp, #40	; 0x28
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017bc:	f107 0314 	add.w	r3, r7, #20
 80017c0:	2200      	movs	r2, #0
 80017c2:	601a      	str	r2, [r3, #0]
 80017c4:	605a      	str	r2, [r3, #4]
 80017c6:	609a      	str	r2, [r3, #8]
 80017c8:	60da      	str	r2, [r3, #12]
 80017ca:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a1d      	ldr	r2, [pc, #116]	; (8001848 <HAL_UART_MspInit+0x94>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d134      	bne.n	8001840 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80017d6:	2300      	movs	r3, #0
 80017d8:	613b      	str	r3, [r7, #16]
 80017da:	4b1c      	ldr	r3, [pc, #112]	; (800184c <HAL_UART_MspInit+0x98>)
 80017dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017de:	4a1b      	ldr	r2, [pc, #108]	; (800184c <HAL_UART_MspInit+0x98>)
 80017e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017e4:	6413      	str	r3, [r2, #64]	; 0x40
 80017e6:	4b19      	ldr	r3, [pc, #100]	; (800184c <HAL_UART_MspInit+0x98>)
 80017e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017ee:	613b      	str	r3, [r7, #16]
 80017f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80017f2:	2300      	movs	r3, #0
 80017f4:	60fb      	str	r3, [r7, #12]
 80017f6:	4b15      	ldr	r3, [pc, #84]	; (800184c <HAL_UART_MspInit+0x98>)
 80017f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fa:	4a14      	ldr	r2, [pc, #80]	; (800184c <HAL_UART_MspInit+0x98>)
 80017fc:	f043 0308 	orr.w	r3, r3, #8
 8001800:	6313      	str	r3, [r2, #48]	; 0x30
 8001802:	4b12      	ldr	r3, [pc, #72]	; (800184c <HAL_UART_MspInit+0x98>)
 8001804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001806:	f003 0308 	and.w	r3, r3, #8
 800180a:	60fb      	str	r3, [r7, #12]
 800180c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800180e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001812:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001814:	2302      	movs	r3, #2
 8001816:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001818:	2300      	movs	r3, #0
 800181a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800181c:	2303      	movs	r3, #3
 800181e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001820:	2307      	movs	r3, #7
 8001822:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001824:	f107 0314 	add.w	r3, r7, #20
 8001828:	4619      	mov	r1, r3
 800182a:	4809      	ldr	r0, [pc, #36]	; (8001850 <HAL_UART_MspInit+0x9c>)
 800182c:	f000 fa76 	bl	8001d1c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001830:	2200      	movs	r2, #0
 8001832:	2100      	movs	r1, #0
 8001834:	2027      	movs	r0, #39	; 0x27
 8001836:	f000 f9a8 	bl	8001b8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800183a:	2027      	movs	r0, #39	; 0x27
 800183c:	f000 f9c1 	bl	8001bc2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001840:	bf00      	nop
 8001842:	3728      	adds	r7, #40	; 0x28
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	40004800 	.word	0x40004800
 800184c:	40023800 	.word	0x40023800
 8001850:	40020c00 	.word	0x40020c00

08001854 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001854:	f8df d034 	ldr.w	sp, [pc, #52]	; 800188c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001858:	480d      	ldr	r0, [pc, #52]	; (8001890 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800185a:	490e      	ldr	r1, [pc, #56]	; (8001894 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800185c:	4a0e      	ldr	r2, [pc, #56]	; (8001898 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800185e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001860:	e002      	b.n	8001868 <LoopCopyDataInit>

08001862 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001862:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001864:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001866:	3304      	adds	r3, #4

08001868 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001868:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800186a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800186c:	d3f9      	bcc.n	8001862 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800186e:	4a0b      	ldr	r2, [pc, #44]	; (800189c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001870:	4c0b      	ldr	r4, [pc, #44]	; (80018a0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001872:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001874:	e001      	b.n	800187a <LoopFillZerobss>

08001876 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001876:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001878:	3204      	adds	r2, #4

0800187a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800187a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800187c:	d3fb      	bcc.n	8001876 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800187e:	f7ff ff5d 	bl	800173c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001882:	f002 fd69 	bl	8004358 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001886:	f7ff fd87 	bl	8001398 <main>
  bx  lr    
 800188a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800188c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001890:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001894:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001898:	0800910c 	.word	0x0800910c
  ldr r2, =_sbss
 800189c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80018a0:	200002bc 	.word	0x200002bc

080018a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018a4:	e7fe      	b.n	80018a4 <ADC_IRQHandler>
	...

080018a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018ac:	4b0e      	ldr	r3, [pc, #56]	; (80018e8 <HAL_Init+0x40>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a0d      	ldr	r2, [pc, #52]	; (80018e8 <HAL_Init+0x40>)
 80018b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018b8:	4b0b      	ldr	r3, [pc, #44]	; (80018e8 <HAL_Init+0x40>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a0a      	ldr	r2, [pc, #40]	; (80018e8 <HAL_Init+0x40>)
 80018be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018c4:	4b08      	ldr	r3, [pc, #32]	; (80018e8 <HAL_Init+0x40>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a07      	ldr	r2, [pc, #28]	; (80018e8 <HAL_Init+0x40>)
 80018ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018d0:	2003      	movs	r0, #3
 80018d2:	f000 f94f 	bl	8001b74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018d6:	200f      	movs	r0, #15
 80018d8:	f000 f808 	bl	80018ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018dc:	f7ff fe28 	bl	8001530 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018e0:	2300      	movs	r3, #0
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	40023c00 	.word	0x40023c00

080018ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018f4:	4b12      	ldr	r3, [pc, #72]	; (8001940 <HAL_InitTick+0x54>)
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	4b12      	ldr	r3, [pc, #72]	; (8001944 <HAL_InitTick+0x58>)
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	4619      	mov	r1, r3
 80018fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001902:	fbb3 f3f1 	udiv	r3, r3, r1
 8001906:	fbb2 f3f3 	udiv	r3, r2, r3
 800190a:	4618      	mov	r0, r3
 800190c:	f000 f967 	bl	8001bde <HAL_SYSTICK_Config>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d001      	beq.n	800191a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e00e      	b.n	8001938 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2b0f      	cmp	r3, #15
 800191e:	d80a      	bhi.n	8001936 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001920:	2200      	movs	r2, #0
 8001922:	6879      	ldr	r1, [r7, #4]
 8001924:	f04f 30ff 	mov.w	r0, #4294967295
 8001928:	f000 f92f 	bl	8001b8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800192c:	4a06      	ldr	r2, [pc, #24]	; (8001948 <HAL_InitTick+0x5c>)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001932:	2300      	movs	r3, #0
 8001934:	e000      	b.n	8001938 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
}
 8001938:	4618      	mov	r0, r3
 800193a:	3708      	adds	r7, #8
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	20000000 	.word	0x20000000
 8001944:	20000008 	.word	0x20000008
 8001948:	20000004 	.word	0x20000004

0800194c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001950:	4b06      	ldr	r3, [pc, #24]	; (800196c <HAL_IncTick+0x20>)
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	461a      	mov	r2, r3
 8001956:	4b06      	ldr	r3, [pc, #24]	; (8001970 <HAL_IncTick+0x24>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4413      	add	r3, r2
 800195c:	4a04      	ldr	r2, [pc, #16]	; (8001970 <HAL_IncTick+0x24>)
 800195e:	6013      	str	r3, [r2, #0]
}
 8001960:	bf00      	nop
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	20000008 	.word	0x20000008
 8001970:	200002a8 	.word	0x200002a8

08001974 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  return uwTick;
 8001978:	4b03      	ldr	r3, [pc, #12]	; (8001988 <HAL_GetTick+0x14>)
 800197a:	681b      	ldr	r3, [r3, #0]
}
 800197c:	4618      	mov	r0, r3
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop
 8001988:	200002a8 	.word	0x200002a8

0800198c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b084      	sub	sp, #16
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001994:	f7ff ffee 	bl	8001974 <HAL_GetTick>
 8001998:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019a4:	d005      	beq.n	80019b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019a6:	4b0a      	ldr	r3, [pc, #40]	; (80019d0 <HAL_Delay+0x44>)
 80019a8:	781b      	ldrb	r3, [r3, #0]
 80019aa:	461a      	mov	r2, r3
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	4413      	add	r3, r2
 80019b0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80019b2:	bf00      	nop
 80019b4:	f7ff ffde 	bl	8001974 <HAL_GetTick>
 80019b8:	4602      	mov	r2, r0
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	68fa      	ldr	r2, [r7, #12]
 80019c0:	429a      	cmp	r2, r3
 80019c2:	d8f7      	bhi.n	80019b4 <HAL_Delay+0x28>
  {
  }
}
 80019c4:	bf00      	nop
 80019c6:	bf00      	nop
 80019c8:	3710      	adds	r7, #16
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	20000008 	.word	0x20000008

080019d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b085      	sub	sp, #20
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	f003 0307 	and.w	r3, r3, #7
 80019e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019e4:	4b0c      	ldr	r3, [pc, #48]	; (8001a18 <__NVIC_SetPriorityGrouping+0x44>)
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019ea:	68ba      	ldr	r2, [r7, #8]
 80019ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019f0:	4013      	ands	r3, r2
 80019f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a06:	4a04      	ldr	r2, [pc, #16]	; (8001a18 <__NVIC_SetPriorityGrouping+0x44>)
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	60d3      	str	r3, [r2, #12]
}
 8001a0c:	bf00      	nop
 8001a0e:	3714      	adds	r7, #20
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr
 8001a18:	e000ed00 	.word	0xe000ed00

08001a1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a20:	4b04      	ldr	r3, [pc, #16]	; (8001a34 <__NVIC_GetPriorityGrouping+0x18>)
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	0a1b      	lsrs	r3, r3, #8
 8001a26:	f003 0307 	and.w	r3, r3, #7
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr
 8001a34:	e000ed00 	.word	0xe000ed00

08001a38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	4603      	mov	r3, r0
 8001a40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	db0b      	blt.n	8001a62 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a4a:	79fb      	ldrb	r3, [r7, #7]
 8001a4c:	f003 021f 	and.w	r2, r3, #31
 8001a50:	4907      	ldr	r1, [pc, #28]	; (8001a70 <__NVIC_EnableIRQ+0x38>)
 8001a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a56:	095b      	lsrs	r3, r3, #5
 8001a58:	2001      	movs	r0, #1
 8001a5a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a62:	bf00      	nop
 8001a64:	370c      	adds	r7, #12
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	e000e100 	.word	0xe000e100

08001a74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	6039      	str	r1, [r7, #0]
 8001a7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	db0a      	blt.n	8001a9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	b2da      	uxtb	r2, r3
 8001a8c:	490c      	ldr	r1, [pc, #48]	; (8001ac0 <__NVIC_SetPriority+0x4c>)
 8001a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a92:	0112      	lsls	r2, r2, #4
 8001a94:	b2d2      	uxtb	r2, r2
 8001a96:	440b      	add	r3, r1
 8001a98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a9c:	e00a      	b.n	8001ab4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	b2da      	uxtb	r2, r3
 8001aa2:	4908      	ldr	r1, [pc, #32]	; (8001ac4 <__NVIC_SetPriority+0x50>)
 8001aa4:	79fb      	ldrb	r3, [r7, #7]
 8001aa6:	f003 030f 	and.w	r3, r3, #15
 8001aaa:	3b04      	subs	r3, #4
 8001aac:	0112      	lsls	r2, r2, #4
 8001aae:	b2d2      	uxtb	r2, r2
 8001ab0:	440b      	add	r3, r1
 8001ab2:	761a      	strb	r2, [r3, #24]
}
 8001ab4:	bf00      	nop
 8001ab6:	370c      	adds	r7, #12
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr
 8001ac0:	e000e100 	.word	0xe000e100
 8001ac4:	e000ed00 	.word	0xe000ed00

08001ac8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b089      	sub	sp, #36	; 0x24
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	60f8      	str	r0, [r7, #12]
 8001ad0:	60b9      	str	r1, [r7, #8]
 8001ad2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	f003 0307 	and.w	r3, r3, #7
 8001ada:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	f1c3 0307 	rsb	r3, r3, #7
 8001ae2:	2b04      	cmp	r3, #4
 8001ae4:	bf28      	it	cs
 8001ae6:	2304      	movcs	r3, #4
 8001ae8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	3304      	adds	r3, #4
 8001aee:	2b06      	cmp	r3, #6
 8001af0:	d902      	bls.n	8001af8 <NVIC_EncodePriority+0x30>
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	3b03      	subs	r3, #3
 8001af6:	e000      	b.n	8001afa <NVIC_EncodePriority+0x32>
 8001af8:	2300      	movs	r3, #0
 8001afa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001afc:	f04f 32ff 	mov.w	r2, #4294967295
 8001b00:	69bb      	ldr	r3, [r7, #24]
 8001b02:	fa02 f303 	lsl.w	r3, r2, r3
 8001b06:	43da      	mvns	r2, r3
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	401a      	ands	r2, r3
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b10:	f04f 31ff 	mov.w	r1, #4294967295
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	fa01 f303 	lsl.w	r3, r1, r3
 8001b1a:	43d9      	mvns	r1, r3
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b20:	4313      	orrs	r3, r2
         );
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3724      	adds	r7, #36	; 0x24
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
	...

08001b30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	3b01      	subs	r3, #1
 8001b3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b40:	d301      	bcc.n	8001b46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b42:	2301      	movs	r3, #1
 8001b44:	e00f      	b.n	8001b66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b46:	4a0a      	ldr	r2, [pc, #40]	; (8001b70 <SysTick_Config+0x40>)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	3b01      	subs	r3, #1
 8001b4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b4e:	210f      	movs	r1, #15
 8001b50:	f04f 30ff 	mov.w	r0, #4294967295
 8001b54:	f7ff ff8e 	bl	8001a74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b58:	4b05      	ldr	r3, [pc, #20]	; (8001b70 <SysTick_Config+0x40>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b5e:	4b04      	ldr	r3, [pc, #16]	; (8001b70 <SysTick_Config+0x40>)
 8001b60:	2207      	movs	r2, #7
 8001b62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b64:	2300      	movs	r3, #0
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3708      	adds	r7, #8
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	e000e010 	.word	0xe000e010

08001b74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	f7ff ff29 	bl	80019d4 <__NVIC_SetPriorityGrouping>
}
 8001b82:	bf00      	nop
 8001b84:	3708      	adds	r7, #8
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}

08001b8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b8a:	b580      	push	{r7, lr}
 8001b8c:	b086      	sub	sp, #24
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	4603      	mov	r3, r0
 8001b92:	60b9      	str	r1, [r7, #8]
 8001b94:	607a      	str	r2, [r7, #4]
 8001b96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b9c:	f7ff ff3e 	bl	8001a1c <__NVIC_GetPriorityGrouping>
 8001ba0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ba2:	687a      	ldr	r2, [r7, #4]
 8001ba4:	68b9      	ldr	r1, [r7, #8]
 8001ba6:	6978      	ldr	r0, [r7, #20]
 8001ba8:	f7ff ff8e 	bl	8001ac8 <NVIC_EncodePriority>
 8001bac:	4602      	mov	r2, r0
 8001bae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bb2:	4611      	mov	r1, r2
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f7ff ff5d 	bl	8001a74 <__NVIC_SetPriority>
}
 8001bba:	bf00      	nop
 8001bbc:	3718      	adds	r7, #24
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}

08001bc2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bc2:	b580      	push	{r7, lr}
 8001bc4:	b082      	sub	sp, #8
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	4603      	mov	r3, r0
 8001bca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7ff ff31 	bl	8001a38 <__NVIC_EnableIRQ>
}
 8001bd6:	bf00      	nop
 8001bd8:	3708      	adds	r7, #8
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}

08001bde <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bde:	b580      	push	{r7, lr}
 8001be0:	b082      	sub	sp, #8
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	f7ff ffa2 	bl	8001b30 <SysTick_Config>
 8001bec:	4603      	mov	r3, r0
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3708      	adds	r7, #8
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}

08001bf6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001bf6:	b580      	push	{r7, lr}
 8001bf8:	b084      	sub	sp, #16
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c02:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001c04:	f7ff feb6 	bl	8001974 <HAL_GetTick>
 8001c08:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	2b02      	cmp	r3, #2
 8001c14:	d008      	beq.n	8001c28 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2280      	movs	r2, #128	; 0x80
 8001c1a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2200      	movs	r2, #0
 8001c20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	e052      	b.n	8001cce <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f022 0216 	bic.w	r2, r2, #22
 8001c36:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	695a      	ldr	r2, [r3, #20]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c46:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d103      	bne.n	8001c58 <HAL_DMA_Abort+0x62>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d007      	beq.n	8001c68 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f022 0208 	bic.w	r2, r2, #8
 8001c66:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f022 0201 	bic.w	r2, r2, #1
 8001c76:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c78:	e013      	b.n	8001ca2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c7a:	f7ff fe7b 	bl	8001974 <HAL_GetTick>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	1ad3      	subs	r3, r2, r3
 8001c84:	2b05      	cmp	r3, #5
 8001c86:	d90c      	bls.n	8001ca2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2220      	movs	r2, #32
 8001c8c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2203      	movs	r2, #3
 8001c92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	e015      	b.n	8001cce <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 0301 	and.w	r3, r3, #1
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d1e4      	bne.n	8001c7a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cb4:	223f      	movs	r2, #63	; 0x3f
 8001cb6:	409a      	lsls	r2, r3
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001ccc:	2300      	movs	r3, #0
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3710      	adds	r7, #16
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}

08001cd6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001cd6:	b480      	push	{r7}
 8001cd8:	b083      	sub	sp, #12
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	2b02      	cmp	r3, #2
 8001ce8:	d004      	beq.n	8001cf4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2280      	movs	r2, #128	; 0x80
 8001cee:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e00c      	b.n	8001d0e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2205      	movs	r2, #5
 8001cf8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f022 0201 	bic.w	r2, r2, #1
 8001d0a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001d0c:	2300      	movs	r3, #0
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	370c      	adds	r7, #12
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
	...

08001d1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b089      	sub	sp, #36	; 0x24
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
 8001d24:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d26:	2300      	movs	r3, #0
 8001d28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d32:	2300      	movs	r3, #0
 8001d34:	61fb      	str	r3, [r7, #28]
 8001d36:	e177      	b.n	8002028 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d38:	2201      	movs	r2, #1
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	697a      	ldr	r2, [r7, #20]
 8001d48:	4013      	ands	r3, r2
 8001d4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d4c:	693a      	ldr	r2, [r7, #16]
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	429a      	cmp	r2, r3
 8001d52:	f040 8166 	bne.w	8002022 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	f003 0303 	and.w	r3, r3, #3
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d005      	beq.n	8001d6e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d130      	bne.n	8001dd0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d74:	69fb      	ldr	r3, [r7, #28]
 8001d76:	005b      	lsls	r3, r3, #1
 8001d78:	2203      	movs	r2, #3
 8001d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7e:	43db      	mvns	r3, r3
 8001d80:	69ba      	ldr	r2, [r7, #24]
 8001d82:	4013      	ands	r3, r2
 8001d84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	68da      	ldr	r2, [r3, #12]
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	005b      	lsls	r3, r3, #1
 8001d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d92:	69ba      	ldr	r2, [r7, #24]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	69ba      	ldr	r2, [r7, #24]
 8001d9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001da4:	2201      	movs	r2, #1
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dac:	43db      	mvns	r3, r3
 8001dae:	69ba      	ldr	r2, [r7, #24]
 8001db0:	4013      	ands	r3, r2
 8001db2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	091b      	lsrs	r3, r3, #4
 8001dba:	f003 0201 	and.w	r2, r3, #1
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc4:	69ba      	ldr	r2, [r7, #24]
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	69ba      	ldr	r2, [r7, #24]
 8001dce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f003 0303 	and.w	r3, r3, #3
 8001dd8:	2b03      	cmp	r3, #3
 8001dda:	d017      	beq.n	8001e0c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	005b      	lsls	r3, r3, #1
 8001de6:	2203      	movs	r2, #3
 8001de8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dec:	43db      	mvns	r3, r3
 8001dee:	69ba      	ldr	r2, [r7, #24]
 8001df0:	4013      	ands	r3, r2
 8001df2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	689a      	ldr	r2, [r3, #8]
 8001df8:	69fb      	ldr	r3, [r7, #28]
 8001dfa:	005b      	lsls	r3, r3, #1
 8001dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001e00:	69ba      	ldr	r2, [r7, #24]
 8001e02:	4313      	orrs	r3, r2
 8001e04:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	69ba      	ldr	r2, [r7, #24]
 8001e0a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f003 0303 	and.w	r3, r3, #3
 8001e14:	2b02      	cmp	r3, #2
 8001e16:	d123      	bne.n	8001e60 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	08da      	lsrs	r2, r3, #3
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	3208      	adds	r2, #8
 8001e20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e24:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	f003 0307 	and.w	r3, r3, #7
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	220f      	movs	r2, #15
 8001e30:	fa02 f303 	lsl.w	r3, r2, r3
 8001e34:	43db      	mvns	r3, r3
 8001e36:	69ba      	ldr	r2, [r7, #24]
 8001e38:	4013      	ands	r3, r2
 8001e3a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	691a      	ldr	r2, [r3, #16]
 8001e40:	69fb      	ldr	r3, [r7, #28]
 8001e42:	f003 0307 	and.w	r3, r3, #7
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4c:	69ba      	ldr	r2, [r7, #24]
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e52:	69fb      	ldr	r3, [r7, #28]
 8001e54:	08da      	lsrs	r2, r3, #3
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	3208      	adds	r2, #8
 8001e5a:	69b9      	ldr	r1, [r7, #24]
 8001e5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	005b      	lsls	r3, r3, #1
 8001e6a:	2203      	movs	r2, #3
 8001e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e70:	43db      	mvns	r3, r3
 8001e72:	69ba      	ldr	r2, [r7, #24]
 8001e74:	4013      	ands	r3, r2
 8001e76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f003 0203 	and.w	r2, r3, #3
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	005b      	lsls	r3, r3, #1
 8001e84:	fa02 f303 	lsl.w	r3, r2, r3
 8001e88:	69ba      	ldr	r2, [r7, #24]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	69ba      	ldr	r2, [r7, #24]
 8001e92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	f000 80c0 	beq.w	8002022 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	60fb      	str	r3, [r7, #12]
 8001ea6:	4b66      	ldr	r3, [pc, #408]	; (8002040 <HAL_GPIO_Init+0x324>)
 8001ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eaa:	4a65      	ldr	r2, [pc, #404]	; (8002040 <HAL_GPIO_Init+0x324>)
 8001eac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001eb0:	6453      	str	r3, [r2, #68]	; 0x44
 8001eb2:	4b63      	ldr	r3, [pc, #396]	; (8002040 <HAL_GPIO_Init+0x324>)
 8001eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001eba:	60fb      	str	r3, [r7, #12]
 8001ebc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ebe:	4a61      	ldr	r2, [pc, #388]	; (8002044 <HAL_GPIO_Init+0x328>)
 8001ec0:	69fb      	ldr	r3, [r7, #28]
 8001ec2:	089b      	lsrs	r3, r3, #2
 8001ec4:	3302      	adds	r3, #2
 8001ec6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ecc:	69fb      	ldr	r3, [r7, #28]
 8001ece:	f003 0303 	and.w	r3, r3, #3
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	220f      	movs	r2, #15
 8001ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eda:	43db      	mvns	r3, r3
 8001edc:	69ba      	ldr	r2, [r7, #24]
 8001ede:	4013      	ands	r3, r2
 8001ee0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4a58      	ldr	r2, [pc, #352]	; (8002048 <HAL_GPIO_Init+0x32c>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d037      	beq.n	8001f5a <HAL_GPIO_Init+0x23e>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4a57      	ldr	r2, [pc, #348]	; (800204c <HAL_GPIO_Init+0x330>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d031      	beq.n	8001f56 <HAL_GPIO_Init+0x23a>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	4a56      	ldr	r2, [pc, #344]	; (8002050 <HAL_GPIO_Init+0x334>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d02b      	beq.n	8001f52 <HAL_GPIO_Init+0x236>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4a55      	ldr	r2, [pc, #340]	; (8002054 <HAL_GPIO_Init+0x338>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d025      	beq.n	8001f4e <HAL_GPIO_Init+0x232>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4a54      	ldr	r2, [pc, #336]	; (8002058 <HAL_GPIO_Init+0x33c>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d01f      	beq.n	8001f4a <HAL_GPIO_Init+0x22e>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4a53      	ldr	r2, [pc, #332]	; (800205c <HAL_GPIO_Init+0x340>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d019      	beq.n	8001f46 <HAL_GPIO_Init+0x22a>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4a52      	ldr	r2, [pc, #328]	; (8002060 <HAL_GPIO_Init+0x344>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d013      	beq.n	8001f42 <HAL_GPIO_Init+0x226>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4a51      	ldr	r2, [pc, #324]	; (8002064 <HAL_GPIO_Init+0x348>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d00d      	beq.n	8001f3e <HAL_GPIO_Init+0x222>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4a50      	ldr	r2, [pc, #320]	; (8002068 <HAL_GPIO_Init+0x34c>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d007      	beq.n	8001f3a <HAL_GPIO_Init+0x21e>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4a4f      	ldr	r2, [pc, #316]	; (800206c <HAL_GPIO_Init+0x350>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d101      	bne.n	8001f36 <HAL_GPIO_Init+0x21a>
 8001f32:	2309      	movs	r3, #9
 8001f34:	e012      	b.n	8001f5c <HAL_GPIO_Init+0x240>
 8001f36:	230a      	movs	r3, #10
 8001f38:	e010      	b.n	8001f5c <HAL_GPIO_Init+0x240>
 8001f3a:	2308      	movs	r3, #8
 8001f3c:	e00e      	b.n	8001f5c <HAL_GPIO_Init+0x240>
 8001f3e:	2307      	movs	r3, #7
 8001f40:	e00c      	b.n	8001f5c <HAL_GPIO_Init+0x240>
 8001f42:	2306      	movs	r3, #6
 8001f44:	e00a      	b.n	8001f5c <HAL_GPIO_Init+0x240>
 8001f46:	2305      	movs	r3, #5
 8001f48:	e008      	b.n	8001f5c <HAL_GPIO_Init+0x240>
 8001f4a:	2304      	movs	r3, #4
 8001f4c:	e006      	b.n	8001f5c <HAL_GPIO_Init+0x240>
 8001f4e:	2303      	movs	r3, #3
 8001f50:	e004      	b.n	8001f5c <HAL_GPIO_Init+0x240>
 8001f52:	2302      	movs	r3, #2
 8001f54:	e002      	b.n	8001f5c <HAL_GPIO_Init+0x240>
 8001f56:	2301      	movs	r3, #1
 8001f58:	e000      	b.n	8001f5c <HAL_GPIO_Init+0x240>
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	69fa      	ldr	r2, [r7, #28]
 8001f5e:	f002 0203 	and.w	r2, r2, #3
 8001f62:	0092      	lsls	r2, r2, #2
 8001f64:	4093      	lsls	r3, r2
 8001f66:	69ba      	ldr	r2, [r7, #24]
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f6c:	4935      	ldr	r1, [pc, #212]	; (8002044 <HAL_GPIO_Init+0x328>)
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	089b      	lsrs	r3, r3, #2
 8001f72:	3302      	adds	r3, #2
 8001f74:	69ba      	ldr	r2, [r7, #24]
 8001f76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f7a:	4b3d      	ldr	r3, [pc, #244]	; (8002070 <HAL_GPIO_Init+0x354>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	43db      	mvns	r3, r3
 8001f84:	69ba      	ldr	r2, [r7, #24]
 8001f86:	4013      	ands	r3, r2
 8001f88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d003      	beq.n	8001f9e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001f96:	69ba      	ldr	r2, [r7, #24]
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f9e:	4a34      	ldr	r2, [pc, #208]	; (8002070 <HAL_GPIO_Init+0x354>)
 8001fa0:	69bb      	ldr	r3, [r7, #24]
 8001fa2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001fa4:	4b32      	ldr	r3, [pc, #200]	; (8002070 <HAL_GPIO_Init+0x354>)
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	43db      	mvns	r3, r3
 8001fae:	69ba      	ldr	r2, [r7, #24]
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d003      	beq.n	8001fc8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001fc0:	69ba      	ldr	r2, [r7, #24]
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001fc8:	4a29      	ldr	r2, [pc, #164]	; (8002070 <HAL_GPIO_Init+0x354>)
 8001fca:	69bb      	ldr	r3, [r7, #24]
 8001fcc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001fce:	4b28      	ldr	r3, [pc, #160]	; (8002070 <HAL_GPIO_Init+0x354>)
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	43db      	mvns	r3, r3
 8001fd8:	69ba      	ldr	r2, [r7, #24]
 8001fda:	4013      	ands	r3, r2
 8001fdc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d003      	beq.n	8001ff2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001fea:	69ba      	ldr	r2, [r7, #24]
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ff2:	4a1f      	ldr	r2, [pc, #124]	; (8002070 <HAL_GPIO_Init+0x354>)
 8001ff4:	69bb      	ldr	r3, [r7, #24]
 8001ff6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ff8:	4b1d      	ldr	r3, [pc, #116]	; (8002070 <HAL_GPIO_Init+0x354>)
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	43db      	mvns	r3, r3
 8002002:	69ba      	ldr	r2, [r7, #24]
 8002004:	4013      	ands	r3, r2
 8002006:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002010:	2b00      	cmp	r3, #0
 8002012:	d003      	beq.n	800201c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002014:	69ba      	ldr	r2, [r7, #24]
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	4313      	orrs	r3, r2
 800201a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800201c:	4a14      	ldr	r2, [pc, #80]	; (8002070 <HAL_GPIO_Init+0x354>)
 800201e:	69bb      	ldr	r3, [r7, #24]
 8002020:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	3301      	adds	r3, #1
 8002026:	61fb      	str	r3, [r7, #28]
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	2b0f      	cmp	r3, #15
 800202c:	f67f ae84 	bls.w	8001d38 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002030:	bf00      	nop
 8002032:	bf00      	nop
 8002034:	3724      	adds	r7, #36	; 0x24
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr
 800203e:	bf00      	nop
 8002040:	40023800 	.word	0x40023800
 8002044:	40013800 	.word	0x40013800
 8002048:	40020000 	.word	0x40020000
 800204c:	40020400 	.word	0x40020400
 8002050:	40020800 	.word	0x40020800
 8002054:	40020c00 	.word	0x40020c00
 8002058:	40021000 	.word	0x40021000
 800205c:	40021400 	.word	0x40021400
 8002060:	40021800 	.word	0x40021800
 8002064:	40021c00 	.word	0x40021c00
 8002068:	40022000 	.word	0x40022000
 800206c:	40022400 	.word	0x40022400
 8002070:	40013c00 	.word	0x40013c00

08002074 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	460b      	mov	r3, r1
 800207e:	807b      	strh	r3, [r7, #2]
 8002080:	4613      	mov	r3, r2
 8002082:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002084:	787b      	ldrb	r3, [r7, #1]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d003      	beq.n	8002092 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800208a:	887a      	ldrh	r2, [r7, #2]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002090:	e003      	b.n	800209a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002092:	887b      	ldrh	r3, [r7, #2]
 8002094:	041a      	lsls	r2, r3, #16
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	619a      	str	r2, [r3, #24]
}
 800209a:	bf00      	nop
 800209c:	370c      	adds	r7, #12
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr
	...

080020a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b084      	sub	sp, #16
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d101      	bne.n	80020ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e12b      	b.n	8002312 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d106      	bne.n	80020d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2200      	movs	r2, #0
 80020ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f7ff f900 	bl	80012d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2224      	movs	r2, #36	; 0x24
 80020d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f022 0201 	bic.w	r2, r2, #1
 80020ea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80020fa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800210a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800210c:	f001 f92e 	bl	800336c <HAL_RCC_GetPCLK1Freq>
 8002110:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	4a81      	ldr	r2, [pc, #516]	; (800231c <HAL_I2C_Init+0x274>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d807      	bhi.n	800212c <HAL_I2C_Init+0x84>
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	4a80      	ldr	r2, [pc, #512]	; (8002320 <HAL_I2C_Init+0x278>)
 8002120:	4293      	cmp	r3, r2
 8002122:	bf94      	ite	ls
 8002124:	2301      	movls	r3, #1
 8002126:	2300      	movhi	r3, #0
 8002128:	b2db      	uxtb	r3, r3
 800212a:	e006      	b.n	800213a <HAL_I2C_Init+0x92>
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	4a7d      	ldr	r2, [pc, #500]	; (8002324 <HAL_I2C_Init+0x27c>)
 8002130:	4293      	cmp	r3, r2
 8002132:	bf94      	ite	ls
 8002134:	2301      	movls	r3, #1
 8002136:	2300      	movhi	r3, #0
 8002138:	b2db      	uxtb	r3, r3
 800213a:	2b00      	cmp	r3, #0
 800213c:	d001      	beq.n	8002142 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e0e7      	b.n	8002312 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	4a78      	ldr	r2, [pc, #480]	; (8002328 <HAL_I2C_Init+0x280>)
 8002146:	fba2 2303 	umull	r2, r3, r2, r3
 800214a:	0c9b      	lsrs	r3, r3, #18
 800214c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	68ba      	ldr	r2, [r7, #8]
 800215e:	430a      	orrs	r2, r1
 8002160:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	6a1b      	ldr	r3, [r3, #32]
 8002168:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	4a6a      	ldr	r2, [pc, #424]	; (800231c <HAL_I2C_Init+0x274>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d802      	bhi.n	800217c <HAL_I2C_Init+0xd4>
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	3301      	adds	r3, #1
 800217a:	e009      	b.n	8002190 <HAL_I2C_Init+0xe8>
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002182:	fb02 f303 	mul.w	r3, r2, r3
 8002186:	4a69      	ldr	r2, [pc, #420]	; (800232c <HAL_I2C_Init+0x284>)
 8002188:	fba2 2303 	umull	r2, r3, r2, r3
 800218c:	099b      	lsrs	r3, r3, #6
 800218e:	3301      	adds	r3, #1
 8002190:	687a      	ldr	r2, [r7, #4]
 8002192:	6812      	ldr	r2, [r2, #0]
 8002194:	430b      	orrs	r3, r1
 8002196:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	69db      	ldr	r3, [r3, #28]
 800219e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80021a2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	495c      	ldr	r1, [pc, #368]	; (800231c <HAL_I2C_Init+0x274>)
 80021ac:	428b      	cmp	r3, r1
 80021ae:	d819      	bhi.n	80021e4 <HAL_I2C_Init+0x13c>
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	1e59      	subs	r1, r3, #1
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	005b      	lsls	r3, r3, #1
 80021ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80021be:	1c59      	adds	r1, r3, #1
 80021c0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80021c4:	400b      	ands	r3, r1
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d00a      	beq.n	80021e0 <HAL_I2C_Init+0x138>
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	1e59      	subs	r1, r3, #1
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	005b      	lsls	r3, r3, #1
 80021d4:	fbb1 f3f3 	udiv	r3, r1, r3
 80021d8:	3301      	adds	r3, #1
 80021da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021de:	e051      	b.n	8002284 <HAL_I2C_Init+0x1dc>
 80021e0:	2304      	movs	r3, #4
 80021e2:	e04f      	b.n	8002284 <HAL_I2C_Init+0x1dc>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d111      	bne.n	8002210 <HAL_I2C_Init+0x168>
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	1e58      	subs	r0, r3, #1
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6859      	ldr	r1, [r3, #4]
 80021f4:	460b      	mov	r3, r1
 80021f6:	005b      	lsls	r3, r3, #1
 80021f8:	440b      	add	r3, r1
 80021fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80021fe:	3301      	adds	r3, #1
 8002200:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002204:	2b00      	cmp	r3, #0
 8002206:	bf0c      	ite	eq
 8002208:	2301      	moveq	r3, #1
 800220a:	2300      	movne	r3, #0
 800220c:	b2db      	uxtb	r3, r3
 800220e:	e012      	b.n	8002236 <HAL_I2C_Init+0x18e>
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	1e58      	subs	r0, r3, #1
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6859      	ldr	r1, [r3, #4]
 8002218:	460b      	mov	r3, r1
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	440b      	add	r3, r1
 800221e:	0099      	lsls	r1, r3, #2
 8002220:	440b      	add	r3, r1
 8002222:	fbb0 f3f3 	udiv	r3, r0, r3
 8002226:	3301      	adds	r3, #1
 8002228:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800222c:	2b00      	cmp	r3, #0
 800222e:	bf0c      	ite	eq
 8002230:	2301      	moveq	r3, #1
 8002232:	2300      	movne	r3, #0
 8002234:	b2db      	uxtb	r3, r3
 8002236:	2b00      	cmp	r3, #0
 8002238:	d001      	beq.n	800223e <HAL_I2C_Init+0x196>
 800223a:	2301      	movs	r3, #1
 800223c:	e022      	b.n	8002284 <HAL_I2C_Init+0x1dc>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d10e      	bne.n	8002264 <HAL_I2C_Init+0x1bc>
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	1e58      	subs	r0, r3, #1
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6859      	ldr	r1, [r3, #4]
 800224e:	460b      	mov	r3, r1
 8002250:	005b      	lsls	r3, r3, #1
 8002252:	440b      	add	r3, r1
 8002254:	fbb0 f3f3 	udiv	r3, r0, r3
 8002258:	3301      	adds	r3, #1
 800225a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800225e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002262:	e00f      	b.n	8002284 <HAL_I2C_Init+0x1dc>
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	1e58      	subs	r0, r3, #1
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6859      	ldr	r1, [r3, #4]
 800226c:	460b      	mov	r3, r1
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	440b      	add	r3, r1
 8002272:	0099      	lsls	r1, r3, #2
 8002274:	440b      	add	r3, r1
 8002276:	fbb0 f3f3 	udiv	r3, r0, r3
 800227a:	3301      	adds	r3, #1
 800227c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002280:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002284:	6879      	ldr	r1, [r7, #4]
 8002286:	6809      	ldr	r1, [r1, #0]
 8002288:	4313      	orrs	r3, r2
 800228a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	69da      	ldr	r2, [r3, #28]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6a1b      	ldr	r3, [r3, #32]
 800229e:	431a      	orrs	r2, r3
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	430a      	orrs	r2, r1
 80022a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80022b2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80022b6:	687a      	ldr	r2, [r7, #4]
 80022b8:	6911      	ldr	r1, [r2, #16]
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	68d2      	ldr	r2, [r2, #12]
 80022be:	4311      	orrs	r1, r2
 80022c0:	687a      	ldr	r2, [r7, #4]
 80022c2:	6812      	ldr	r2, [r2, #0]
 80022c4:	430b      	orrs	r3, r1
 80022c6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	68db      	ldr	r3, [r3, #12]
 80022ce:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	695a      	ldr	r2, [r3, #20]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	699b      	ldr	r3, [r3, #24]
 80022da:	431a      	orrs	r2, r3
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	430a      	orrs	r2, r1
 80022e2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f042 0201 	orr.w	r2, r2, #1
 80022f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2200      	movs	r2, #0
 80022f8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2220      	movs	r2, #32
 80022fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2200      	movs	r2, #0
 8002306:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2200      	movs	r2, #0
 800230c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002310:	2300      	movs	r3, #0
}
 8002312:	4618      	mov	r0, r3
 8002314:	3710      	adds	r7, #16
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	000186a0 	.word	0x000186a0
 8002320:	001e847f 	.word	0x001e847f
 8002324:	003d08ff 	.word	0x003d08ff
 8002328:	431bde83 	.word	0x431bde83
 800232c:	10624dd3 	.word	0x10624dd3

08002330 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b088      	sub	sp, #32
 8002334:	af02      	add	r7, sp, #8
 8002336:	60f8      	str	r0, [r7, #12]
 8002338:	607a      	str	r2, [r7, #4]
 800233a:	461a      	mov	r2, r3
 800233c:	460b      	mov	r3, r1
 800233e:	817b      	strh	r3, [r7, #10]
 8002340:	4613      	mov	r3, r2
 8002342:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002344:	f7ff fb16 	bl	8001974 <HAL_GetTick>
 8002348:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002350:	b2db      	uxtb	r3, r3
 8002352:	2b20      	cmp	r3, #32
 8002354:	f040 80e0 	bne.w	8002518 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	9300      	str	r3, [sp, #0]
 800235c:	2319      	movs	r3, #25
 800235e:	2201      	movs	r2, #1
 8002360:	4970      	ldr	r1, [pc, #448]	; (8002524 <HAL_I2C_Master_Transmit+0x1f4>)
 8002362:	68f8      	ldr	r0, [r7, #12]
 8002364:	f000 f964 	bl	8002630 <I2C_WaitOnFlagUntilTimeout>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d001      	beq.n	8002372 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800236e:	2302      	movs	r3, #2
 8002370:	e0d3      	b.n	800251a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002378:	2b01      	cmp	r3, #1
 800237a:	d101      	bne.n	8002380 <HAL_I2C_Master_Transmit+0x50>
 800237c:	2302      	movs	r3, #2
 800237e:	e0cc      	b.n	800251a <HAL_I2C_Master_Transmit+0x1ea>
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2201      	movs	r2, #1
 8002384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 0301 	and.w	r3, r3, #1
 8002392:	2b01      	cmp	r3, #1
 8002394:	d007      	beq.n	80023a6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f042 0201 	orr.w	r2, r2, #1
 80023a4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023b4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	2221      	movs	r2, #33	; 0x21
 80023ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	2210      	movs	r2, #16
 80023c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2200      	movs	r2, #0
 80023ca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	687a      	ldr	r2, [r7, #4]
 80023d0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	893a      	ldrh	r2, [r7, #8]
 80023d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023dc:	b29a      	uxth	r2, r3
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	4a50      	ldr	r2, [pc, #320]	; (8002528 <HAL_I2C_Master_Transmit+0x1f8>)
 80023e6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80023e8:	8979      	ldrh	r1, [r7, #10]
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	6a3a      	ldr	r2, [r7, #32]
 80023ee:	68f8      	ldr	r0, [r7, #12]
 80023f0:	f000 f89c 	bl	800252c <I2C_MasterRequestWrite>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d001      	beq.n	80023fe <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e08d      	b.n	800251a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023fe:	2300      	movs	r3, #0
 8002400:	613b      	str	r3, [r7, #16]
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	695b      	ldr	r3, [r3, #20]
 8002408:	613b      	str	r3, [r7, #16]
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	699b      	ldr	r3, [r3, #24]
 8002410:	613b      	str	r3, [r7, #16]
 8002412:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002414:	e066      	b.n	80024e4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002416:	697a      	ldr	r2, [r7, #20]
 8002418:	6a39      	ldr	r1, [r7, #32]
 800241a:	68f8      	ldr	r0, [r7, #12]
 800241c:	f000 f9de 	bl	80027dc <I2C_WaitOnTXEFlagUntilTimeout>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d00d      	beq.n	8002442 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242a:	2b04      	cmp	r3, #4
 800242c:	d107      	bne.n	800243e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800243c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e06b      	b.n	800251a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002446:	781a      	ldrb	r2, [r3, #0]
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002452:	1c5a      	adds	r2, r3, #1
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800245c:	b29b      	uxth	r3, r3
 800245e:	3b01      	subs	r3, #1
 8002460:	b29a      	uxth	r2, r3
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800246a:	3b01      	subs	r3, #1
 800246c:	b29a      	uxth	r2, r3
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	695b      	ldr	r3, [r3, #20]
 8002478:	f003 0304 	and.w	r3, r3, #4
 800247c:	2b04      	cmp	r3, #4
 800247e:	d11b      	bne.n	80024b8 <HAL_I2C_Master_Transmit+0x188>
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002484:	2b00      	cmp	r3, #0
 8002486:	d017      	beq.n	80024b8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800248c:	781a      	ldrb	r2, [r3, #0]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002498:	1c5a      	adds	r2, r3, #1
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024a2:	b29b      	uxth	r3, r3
 80024a4:	3b01      	subs	r3, #1
 80024a6:	b29a      	uxth	r2, r3
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024b0:	3b01      	subs	r3, #1
 80024b2:	b29a      	uxth	r2, r3
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024b8:	697a      	ldr	r2, [r7, #20]
 80024ba:	6a39      	ldr	r1, [r7, #32]
 80024bc:	68f8      	ldr	r0, [r7, #12]
 80024be:	f000 f9ce 	bl	800285e <I2C_WaitOnBTFFlagUntilTimeout>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d00d      	beq.n	80024e4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024cc:	2b04      	cmp	r3, #4
 80024ce:	d107      	bne.n	80024e0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024de:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	e01a      	b.n	800251a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d194      	bne.n	8002416 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2220      	movs	r2, #32
 8002500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2200      	movs	r2, #0
 8002508:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2200      	movs	r2, #0
 8002510:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002514:	2300      	movs	r3, #0
 8002516:	e000      	b.n	800251a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002518:	2302      	movs	r3, #2
  }
}
 800251a:	4618      	mov	r0, r3
 800251c:	3718      	adds	r7, #24
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	00100002 	.word	0x00100002
 8002528:	ffff0000 	.word	0xffff0000

0800252c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b088      	sub	sp, #32
 8002530:	af02      	add	r7, sp, #8
 8002532:	60f8      	str	r0, [r7, #12]
 8002534:	607a      	str	r2, [r7, #4]
 8002536:	603b      	str	r3, [r7, #0]
 8002538:	460b      	mov	r3, r1
 800253a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002540:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	2b08      	cmp	r3, #8
 8002546:	d006      	beq.n	8002556 <I2C_MasterRequestWrite+0x2a>
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	2b01      	cmp	r3, #1
 800254c:	d003      	beq.n	8002556 <I2C_MasterRequestWrite+0x2a>
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002554:	d108      	bne.n	8002568 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002564:	601a      	str	r2, [r3, #0]
 8002566:	e00b      	b.n	8002580 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256c:	2b12      	cmp	r3, #18
 800256e:	d107      	bne.n	8002580 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800257e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	9300      	str	r3, [sp, #0]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2200      	movs	r2, #0
 8002588:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800258c:	68f8      	ldr	r0, [r7, #12]
 800258e:	f000 f84f 	bl	8002630 <I2C_WaitOnFlagUntilTimeout>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d00d      	beq.n	80025b4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025a6:	d103      	bne.n	80025b0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025ae:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80025b0:	2303      	movs	r3, #3
 80025b2:	e035      	b.n	8002620 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	691b      	ldr	r3, [r3, #16]
 80025b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80025bc:	d108      	bne.n	80025d0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80025be:	897b      	ldrh	r3, [r7, #10]
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	461a      	mov	r2, r3
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80025cc:	611a      	str	r2, [r3, #16]
 80025ce:	e01b      	b.n	8002608 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80025d0:	897b      	ldrh	r3, [r7, #10]
 80025d2:	11db      	asrs	r3, r3, #7
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	f003 0306 	and.w	r3, r3, #6
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	f063 030f 	orn	r3, r3, #15
 80025e0:	b2da      	uxtb	r2, r3
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	687a      	ldr	r2, [r7, #4]
 80025ec:	490e      	ldr	r1, [pc, #56]	; (8002628 <I2C_MasterRequestWrite+0xfc>)
 80025ee:	68f8      	ldr	r0, [r7, #12]
 80025f0:	f000 f875 	bl	80026de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d001      	beq.n	80025fe <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e010      	b.n	8002620 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80025fe:	897b      	ldrh	r3, [r7, #10]
 8002600:	b2da      	uxtb	r2, r3
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	687a      	ldr	r2, [r7, #4]
 800260c:	4907      	ldr	r1, [pc, #28]	; (800262c <I2C_MasterRequestWrite+0x100>)
 800260e:	68f8      	ldr	r0, [r7, #12]
 8002610:	f000 f865 	bl	80026de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d001      	beq.n	800261e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e000      	b.n	8002620 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800261e:	2300      	movs	r3, #0
}
 8002620:	4618      	mov	r0, r3
 8002622:	3718      	adds	r7, #24
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}
 8002628:	00010008 	.word	0x00010008
 800262c:	00010002 	.word	0x00010002

08002630 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b084      	sub	sp, #16
 8002634:	af00      	add	r7, sp, #0
 8002636:	60f8      	str	r0, [r7, #12]
 8002638:	60b9      	str	r1, [r7, #8]
 800263a:	603b      	str	r3, [r7, #0]
 800263c:	4613      	mov	r3, r2
 800263e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002640:	e025      	b.n	800268e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002648:	d021      	beq.n	800268e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800264a:	f7ff f993 	bl	8001974 <HAL_GetTick>
 800264e:	4602      	mov	r2, r0
 8002650:	69bb      	ldr	r3, [r7, #24]
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	683a      	ldr	r2, [r7, #0]
 8002656:	429a      	cmp	r2, r3
 8002658:	d302      	bcc.n	8002660 <I2C_WaitOnFlagUntilTimeout+0x30>
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d116      	bne.n	800268e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2200      	movs	r2, #0
 8002664:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	2220      	movs	r2, #32
 800266a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2200      	movs	r2, #0
 8002672:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267a:	f043 0220 	orr.w	r2, r3, #32
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2200      	movs	r2, #0
 8002686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e023      	b.n	80026d6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	0c1b      	lsrs	r3, r3, #16
 8002692:	b2db      	uxtb	r3, r3
 8002694:	2b01      	cmp	r3, #1
 8002696:	d10d      	bne.n	80026b4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	695b      	ldr	r3, [r3, #20]
 800269e:	43da      	mvns	r2, r3
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	4013      	ands	r3, r2
 80026a4:	b29b      	uxth	r3, r3
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	bf0c      	ite	eq
 80026aa:	2301      	moveq	r3, #1
 80026ac:	2300      	movne	r3, #0
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	461a      	mov	r2, r3
 80026b2:	e00c      	b.n	80026ce <I2C_WaitOnFlagUntilTimeout+0x9e>
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	699b      	ldr	r3, [r3, #24]
 80026ba:	43da      	mvns	r2, r3
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	4013      	ands	r3, r2
 80026c0:	b29b      	uxth	r3, r3
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	bf0c      	ite	eq
 80026c6:	2301      	moveq	r3, #1
 80026c8:	2300      	movne	r3, #0
 80026ca:	b2db      	uxtb	r3, r3
 80026cc:	461a      	mov	r2, r3
 80026ce:	79fb      	ldrb	r3, [r7, #7]
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d0b6      	beq.n	8002642 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80026d4:	2300      	movs	r3, #0
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3710      	adds	r7, #16
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}

080026de <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80026de:	b580      	push	{r7, lr}
 80026e0:	b084      	sub	sp, #16
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	60f8      	str	r0, [r7, #12]
 80026e6:	60b9      	str	r1, [r7, #8]
 80026e8:	607a      	str	r2, [r7, #4]
 80026ea:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80026ec:	e051      	b.n	8002792 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	695b      	ldr	r3, [r3, #20]
 80026f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026fc:	d123      	bne.n	8002746 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800270c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002716:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	2200      	movs	r2, #0
 800271c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	2220      	movs	r2, #32
 8002722:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2200      	movs	r2, #0
 800272a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002732:	f043 0204 	orr.w	r2, r3, #4
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2200      	movs	r2, #0
 800273e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e046      	b.n	80027d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	f1b3 3fff 	cmp.w	r3, #4294967295
 800274c:	d021      	beq.n	8002792 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800274e:	f7ff f911 	bl	8001974 <HAL_GetTick>
 8002752:	4602      	mov	r2, r0
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	1ad3      	subs	r3, r2, r3
 8002758:	687a      	ldr	r2, [r7, #4]
 800275a:	429a      	cmp	r2, r3
 800275c:	d302      	bcc.n	8002764 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d116      	bne.n	8002792 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2200      	movs	r2, #0
 8002768:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2220      	movs	r2, #32
 800276e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	2200      	movs	r2, #0
 8002776:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277e:	f043 0220 	orr.w	r2, r3, #32
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2200      	movs	r2, #0
 800278a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e020      	b.n	80027d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	0c1b      	lsrs	r3, r3, #16
 8002796:	b2db      	uxtb	r3, r3
 8002798:	2b01      	cmp	r3, #1
 800279a:	d10c      	bne.n	80027b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	695b      	ldr	r3, [r3, #20]
 80027a2:	43da      	mvns	r2, r3
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	4013      	ands	r3, r2
 80027a8:	b29b      	uxth	r3, r3
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	bf14      	ite	ne
 80027ae:	2301      	movne	r3, #1
 80027b0:	2300      	moveq	r3, #0
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	e00b      	b.n	80027ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	699b      	ldr	r3, [r3, #24]
 80027bc:	43da      	mvns	r2, r3
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	4013      	ands	r3, r2
 80027c2:	b29b      	uxth	r3, r3
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	bf14      	ite	ne
 80027c8:	2301      	movne	r3, #1
 80027ca:	2300      	moveq	r3, #0
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d18d      	bne.n	80026ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80027d2:	2300      	movs	r3, #0
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	3710      	adds	r7, #16
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}

080027dc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b084      	sub	sp, #16
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	60f8      	str	r0, [r7, #12]
 80027e4:	60b9      	str	r1, [r7, #8]
 80027e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80027e8:	e02d      	b.n	8002846 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80027ea:	68f8      	ldr	r0, [r7, #12]
 80027ec:	f000 f878 	bl	80028e0 <I2C_IsAcknowledgeFailed>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d001      	beq.n	80027fa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e02d      	b.n	8002856 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002800:	d021      	beq.n	8002846 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002802:	f7ff f8b7 	bl	8001974 <HAL_GetTick>
 8002806:	4602      	mov	r2, r0
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	68ba      	ldr	r2, [r7, #8]
 800280e:	429a      	cmp	r2, r3
 8002810:	d302      	bcc.n	8002818 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d116      	bne.n	8002846 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2200      	movs	r2, #0
 800281c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	2220      	movs	r2, #32
 8002822:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	2200      	movs	r2, #0
 800282a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002832:	f043 0220 	orr.w	r2, r3, #32
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	2200      	movs	r2, #0
 800283e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e007      	b.n	8002856 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	695b      	ldr	r3, [r3, #20]
 800284c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002850:	2b80      	cmp	r3, #128	; 0x80
 8002852:	d1ca      	bne.n	80027ea <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002854:	2300      	movs	r3, #0
}
 8002856:	4618      	mov	r0, r3
 8002858:	3710      	adds	r7, #16
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}

0800285e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800285e:	b580      	push	{r7, lr}
 8002860:	b084      	sub	sp, #16
 8002862:	af00      	add	r7, sp, #0
 8002864:	60f8      	str	r0, [r7, #12]
 8002866:	60b9      	str	r1, [r7, #8]
 8002868:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800286a:	e02d      	b.n	80028c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800286c:	68f8      	ldr	r0, [r7, #12]
 800286e:	f000 f837 	bl	80028e0 <I2C_IsAcknowledgeFailed>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d001      	beq.n	800287c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	e02d      	b.n	80028d8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002882:	d021      	beq.n	80028c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002884:	f7ff f876 	bl	8001974 <HAL_GetTick>
 8002888:	4602      	mov	r2, r0
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	68ba      	ldr	r2, [r7, #8]
 8002890:	429a      	cmp	r2, r3
 8002892:	d302      	bcc.n	800289a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d116      	bne.n	80028c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2200      	movs	r2, #0
 800289e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2220      	movs	r2, #32
 80028a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	2200      	movs	r2, #0
 80028ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b4:	f043 0220 	orr.w	r2, r3, #32
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2200      	movs	r2, #0
 80028c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	e007      	b.n	80028d8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	695b      	ldr	r3, [r3, #20]
 80028ce:	f003 0304 	and.w	r3, r3, #4
 80028d2:	2b04      	cmp	r3, #4
 80028d4:	d1ca      	bne.n	800286c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80028d6:	2300      	movs	r3, #0
}
 80028d8:	4618      	mov	r0, r3
 80028da:	3710      	adds	r7, #16
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}

080028e0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b083      	sub	sp, #12
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	695b      	ldr	r3, [r3, #20]
 80028ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028f6:	d11b      	bne.n	8002930 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002900:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2200      	movs	r2, #0
 8002906:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2220      	movs	r2, #32
 800290c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2200      	movs	r2, #0
 8002914:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291c:	f043 0204 	orr.w	r2, r3, #4
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2200      	movs	r2, #0
 8002928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	e000      	b.n	8002932 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002930:	2300      	movs	r3, #0
}
 8002932:	4618      	mov	r0, r3
 8002934:	370c      	adds	r7, #12
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr

0800293e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800293e:	b480      	push	{r7}
 8002940:	b083      	sub	sp, #12
 8002942:	af00      	add	r7, sp, #0
 8002944:	6078      	str	r0, [r7, #4]
 8002946:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800294e:	b2db      	uxtb	r3, r3
 8002950:	2b20      	cmp	r3, #32
 8002952:	d129      	bne.n	80029a8 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2224      	movs	r2, #36	; 0x24
 8002958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f022 0201 	bic.w	r2, r2, #1
 800296a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f022 0210 	bic.w	r2, r2, #16
 800297a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	683a      	ldr	r2, [r7, #0]
 8002988:	430a      	orrs	r2, r1
 800298a:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f042 0201 	orr.w	r2, r2, #1
 800299a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2220      	movs	r2, #32
 80029a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80029a4:	2300      	movs	r3, #0
 80029a6:	e000      	b.n	80029aa <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80029a8:	2302      	movs	r3, #2
  }
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	370c      	adds	r7, #12
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr

080029b6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80029b6:	b480      	push	{r7}
 80029b8:	b085      	sub	sp, #20
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	6078      	str	r0, [r7, #4]
 80029be:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80029c0:	2300      	movs	r3, #0
 80029c2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	2b20      	cmp	r3, #32
 80029ce:	d12a      	bne.n	8002a26 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2224      	movs	r2, #36	; 0x24
 80029d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f022 0201 	bic.w	r2, r2, #1
 80029e6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ee:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80029f0:	89fb      	ldrh	r3, [r7, #14]
 80029f2:	f023 030f 	bic.w	r3, r3, #15
 80029f6:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	b29a      	uxth	r2, r3
 80029fc:	89fb      	ldrh	r3, [r7, #14]
 80029fe:	4313      	orrs	r3, r2
 8002a00:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	89fa      	ldrh	r2, [r7, #14]
 8002a08:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f042 0201 	orr.w	r2, r2, #1
 8002a18:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2220      	movs	r2, #32
 8002a1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002a22:	2300      	movs	r3, #0
 8002a24:	e000      	b.n	8002a28 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8002a26:	2302      	movs	r3, #2
  }
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	3714      	adds	r7, #20
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr

08002a34 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b082      	sub	sp, #8
 8002a38:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002a3e:	2300      	movs	r3, #0
 8002a40:	603b      	str	r3, [r7, #0]
 8002a42:	4b20      	ldr	r3, [pc, #128]	; (8002ac4 <HAL_PWREx_EnableOverDrive+0x90>)
 8002a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a46:	4a1f      	ldr	r2, [pc, #124]	; (8002ac4 <HAL_PWREx_EnableOverDrive+0x90>)
 8002a48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a4c:	6413      	str	r3, [r2, #64]	; 0x40
 8002a4e:	4b1d      	ldr	r3, [pc, #116]	; (8002ac4 <HAL_PWREx_EnableOverDrive+0x90>)
 8002a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a56:	603b      	str	r3, [r7, #0]
 8002a58:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002a5a:	4b1b      	ldr	r3, [pc, #108]	; (8002ac8 <HAL_PWREx_EnableOverDrive+0x94>)
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a60:	f7fe ff88 	bl	8001974 <HAL_GetTick>
 8002a64:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002a66:	e009      	b.n	8002a7c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002a68:	f7fe ff84 	bl	8001974 <HAL_GetTick>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a76:	d901      	bls.n	8002a7c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002a78:	2303      	movs	r3, #3
 8002a7a:	e01f      	b.n	8002abc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002a7c:	4b13      	ldr	r3, [pc, #76]	; (8002acc <HAL_PWREx_EnableOverDrive+0x98>)
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a88:	d1ee      	bne.n	8002a68 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002a8a:	4b11      	ldr	r3, [pc, #68]	; (8002ad0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a90:	f7fe ff70 	bl	8001974 <HAL_GetTick>
 8002a94:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002a96:	e009      	b.n	8002aac <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002a98:	f7fe ff6c 	bl	8001974 <HAL_GetTick>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	1ad3      	subs	r3, r2, r3
 8002aa2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002aa6:	d901      	bls.n	8002aac <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002aa8:	2303      	movs	r3, #3
 8002aaa:	e007      	b.n	8002abc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002aac:	4b07      	ldr	r3, [pc, #28]	; (8002acc <HAL_PWREx_EnableOverDrive+0x98>)
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ab4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002ab8:	d1ee      	bne.n	8002a98 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002aba:	2300      	movs	r3, #0
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	3708      	adds	r7, #8
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	40023800 	.word	0x40023800
 8002ac8:	420e0040 	.word	0x420e0040
 8002acc:	40007000 	.word	0x40007000
 8002ad0:	420e0044 	.word	0x420e0044

08002ad4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b086      	sub	sp, #24
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d101      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e264      	b.n	8002fb0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 0301 	and.w	r3, r3, #1
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d075      	beq.n	8002bde <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002af2:	4ba3      	ldr	r3, [pc, #652]	; (8002d80 <HAL_RCC_OscConfig+0x2ac>)
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	f003 030c 	and.w	r3, r3, #12
 8002afa:	2b04      	cmp	r3, #4
 8002afc:	d00c      	beq.n	8002b18 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002afe:	4ba0      	ldr	r3, [pc, #640]	; (8002d80 <HAL_RCC_OscConfig+0x2ac>)
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b06:	2b08      	cmp	r3, #8
 8002b08:	d112      	bne.n	8002b30 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b0a:	4b9d      	ldr	r3, [pc, #628]	; (8002d80 <HAL_RCC_OscConfig+0x2ac>)
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b12:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b16:	d10b      	bne.n	8002b30 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b18:	4b99      	ldr	r3, [pc, #612]	; (8002d80 <HAL_RCC_OscConfig+0x2ac>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d05b      	beq.n	8002bdc <HAL_RCC_OscConfig+0x108>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d157      	bne.n	8002bdc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e23f      	b.n	8002fb0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b38:	d106      	bne.n	8002b48 <HAL_RCC_OscConfig+0x74>
 8002b3a:	4b91      	ldr	r3, [pc, #580]	; (8002d80 <HAL_RCC_OscConfig+0x2ac>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a90      	ldr	r2, [pc, #576]	; (8002d80 <HAL_RCC_OscConfig+0x2ac>)
 8002b40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b44:	6013      	str	r3, [r2, #0]
 8002b46:	e01d      	b.n	8002b84 <HAL_RCC_OscConfig+0xb0>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b50:	d10c      	bne.n	8002b6c <HAL_RCC_OscConfig+0x98>
 8002b52:	4b8b      	ldr	r3, [pc, #556]	; (8002d80 <HAL_RCC_OscConfig+0x2ac>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a8a      	ldr	r2, [pc, #552]	; (8002d80 <HAL_RCC_OscConfig+0x2ac>)
 8002b58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b5c:	6013      	str	r3, [r2, #0]
 8002b5e:	4b88      	ldr	r3, [pc, #544]	; (8002d80 <HAL_RCC_OscConfig+0x2ac>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a87      	ldr	r2, [pc, #540]	; (8002d80 <HAL_RCC_OscConfig+0x2ac>)
 8002b64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b68:	6013      	str	r3, [r2, #0]
 8002b6a:	e00b      	b.n	8002b84 <HAL_RCC_OscConfig+0xb0>
 8002b6c:	4b84      	ldr	r3, [pc, #528]	; (8002d80 <HAL_RCC_OscConfig+0x2ac>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a83      	ldr	r2, [pc, #524]	; (8002d80 <HAL_RCC_OscConfig+0x2ac>)
 8002b72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b76:	6013      	str	r3, [r2, #0]
 8002b78:	4b81      	ldr	r3, [pc, #516]	; (8002d80 <HAL_RCC_OscConfig+0x2ac>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a80      	ldr	r2, [pc, #512]	; (8002d80 <HAL_RCC_OscConfig+0x2ac>)
 8002b7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d013      	beq.n	8002bb4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b8c:	f7fe fef2 	bl	8001974 <HAL_GetTick>
 8002b90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b92:	e008      	b.n	8002ba6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b94:	f7fe feee 	bl	8001974 <HAL_GetTick>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	2b64      	cmp	r3, #100	; 0x64
 8002ba0:	d901      	bls.n	8002ba6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	e204      	b.n	8002fb0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ba6:	4b76      	ldr	r3, [pc, #472]	; (8002d80 <HAL_RCC_OscConfig+0x2ac>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d0f0      	beq.n	8002b94 <HAL_RCC_OscConfig+0xc0>
 8002bb2:	e014      	b.n	8002bde <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bb4:	f7fe fede 	bl	8001974 <HAL_GetTick>
 8002bb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bba:	e008      	b.n	8002bce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bbc:	f7fe feda 	bl	8001974 <HAL_GetTick>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	2b64      	cmp	r3, #100	; 0x64
 8002bc8:	d901      	bls.n	8002bce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002bca:	2303      	movs	r3, #3
 8002bcc:	e1f0      	b.n	8002fb0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bce:	4b6c      	ldr	r3, [pc, #432]	; (8002d80 <HAL_RCC_OscConfig+0x2ac>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d1f0      	bne.n	8002bbc <HAL_RCC_OscConfig+0xe8>
 8002bda:	e000      	b.n	8002bde <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bdc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 0302 	and.w	r3, r3, #2
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d063      	beq.n	8002cb2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002bea:	4b65      	ldr	r3, [pc, #404]	; (8002d80 <HAL_RCC_OscConfig+0x2ac>)
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	f003 030c 	and.w	r3, r3, #12
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d00b      	beq.n	8002c0e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bf6:	4b62      	ldr	r3, [pc, #392]	; (8002d80 <HAL_RCC_OscConfig+0x2ac>)
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002bfe:	2b08      	cmp	r3, #8
 8002c00:	d11c      	bne.n	8002c3c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c02:	4b5f      	ldr	r3, [pc, #380]	; (8002d80 <HAL_RCC_OscConfig+0x2ac>)
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d116      	bne.n	8002c3c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c0e:	4b5c      	ldr	r3, [pc, #368]	; (8002d80 <HAL_RCC_OscConfig+0x2ac>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 0302 	and.w	r3, r3, #2
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d005      	beq.n	8002c26 <HAL_RCC_OscConfig+0x152>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	68db      	ldr	r3, [r3, #12]
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d001      	beq.n	8002c26 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e1c4      	b.n	8002fb0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c26:	4b56      	ldr	r3, [pc, #344]	; (8002d80 <HAL_RCC_OscConfig+0x2ac>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	691b      	ldr	r3, [r3, #16]
 8002c32:	00db      	lsls	r3, r3, #3
 8002c34:	4952      	ldr	r1, [pc, #328]	; (8002d80 <HAL_RCC_OscConfig+0x2ac>)
 8002c36:	4313      	orrs	r3, r2
 8002c38:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c3a:	e03a      	b.n	8002cb2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d020      	beq.n	8002c86 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c44:	4b4f      	ldr	r3, [pc, #316]	; (8002d84 <HAL_RCC_OscConfig+0x2b0>)
 8002c46:	2201      	movs	r2, #1
 8002c48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c4a:	f7fe fe93 	bl	8001974 <HAL_GetTick>
 8002c4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c50:	e008      	b.n	8002c64 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c52:	f7fe fe8f 	bl	8001974 <HAL_GetTick>
 8002c56:	4602      	mov	r2, r0
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	1ad3      	subs	r3, r2, r3
 8002c5c:	2b02      	cmp	r3, #2
 8002c5e:	d901      	bls.n	8002c64 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002c60:	2303      	movs	r3, #3
 8002c62:	e1a5      	b.n	8002fb0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c64:	4b46      	ldr	r3, [pc, #280]	; (8002d80 <HAL_RCC_OscConfig+0x2ac>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 0302 	and.w	r3, r3, #2
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d0f0      	beq.n	8002c52 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c70:	4b43      	ldr	r3, [pc, #268]	; (8002d80 <HAL_RCC_OscConfig+0x2ac>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	691b      	ldr	r3, [r3, #16]
 8002c7c:	00db      	lsls	r3, r3, #3
 8002c7e:	4940      	ldr	r1, [pc, #256]	; (8002d80 <HAL_RCC_OscConfig+0x2ac>)
 8002c80:	4313      	orrs	r3, r2
 8002c82:	600b      	str	r3, [r1, #0]
 8002c84:	e015      	b.n	8002cb2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c86:	4b3f      	ldr	r3, [pc, #252]	; (8002d84 <HAL_RCC_OscConfig+0x2b0>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c8c:	f7fe fe72 	bl	8001974 <HAL_GetTick>
 8002c90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c92:	e008      	b.n	8002ca6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c94:	f7fe fe6e 	bl	8001974 <HAL_GetTick>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	2b02      	cmp	r3, #2
 8002ca0:	d901      	bls.n	8002ca6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	e184      	b.n	8002fb0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ca6:	4b36      	ldr	r3, [pc, #216]	; (8002d80 <HAL_RCC_OscConfig+0x2ac>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 0302 	and.w	r3, r3, #2
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d1f0      	bne.n	8002c94 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0308 	and.w	r3, r3, #8
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d030      	beq.n	8002d20 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	695b      	ldr	r3, [r3, #20]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d016      	beq.n	8002cf4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cc6:	4b30      	ldr	r3, [pc, #192]	; (8002d88 <HAL_RCC_OscConfig+0x2b4>)
 8002cc8:	2201      	movs	r2, #1
 8002cca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ccc:	f7fe fe52 	bl	8001974 <HAL_GetTick>
 8002cd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cd2:	e008      	b.n	8002ce6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cd4:	f7fe fe4e 	bl	8001974 <HAL_GetTick>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	1ad3      	subs	r3, r2, r3
 8002cde:	2b02      	cmp	r3, #2
 8002ce0:	d901      	bls.n	8002ce6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	e164      	b.n	8002fb0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ce6:	4b26      	ldr	r3, [pc, #152]	; (8002d80 <HAL_RCC_OscConfig+0x2ac>)
 8002ce8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cea:	f003 0302 	and.w	r3, r3, #2
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d0f0      	beq.n	8002cd4 <HAL_RCC_OscConfig+0x200>
 8002cf2:	e015      	b.n	8002d20 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cf4:	4b24      	ldr	r3, [pc, #144]	; (8002d88 <HAL_RCC_OscConfig+0x2b4>)
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cfa:	f7fe fe3b 	bl	8001974 <HAL_GetTick>
 8002cfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d00:	e008      	b.n	8002d14 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d02:	f7fe fe37 	bl	8001974 <HAL_GetTick>
 8002d06:	4602      	mov	r2, r0
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	1ad3      	subs	r3, r2, r3
 8002d0c:	2b02      	cmp	r3, #2
 8002d0e:	d901      	bls.n	8002d14 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002d10:	2303      	movs	r3, #3
 8002d12:	e14d      	b.n	8002fb0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d14:	4b1a      	ldr	r3, [pc, #104]	; (8002d80 <HAL_RCC_OscConfig+0x2ac>)
 8002d16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d18:	f003 0302 	and.w	r3, r3, #2
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d1f0      	bne.n	8002d02 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 0304 	and.w	r3, r3, #4
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	f000 80a0 	beq.w	8002e6e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d32:	4b13      	ldr	r3, [pc, #76]	; (8002d80 <HAL_RCC_OscConfig+0x2ac>)
 8002d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d10f      	bne.n	8002d5e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d3e:	2300      	movs	r3, #0
 8002d40:	60bb      	str	r3, [r7, #8]
 8002d42:	4b0f      	ldr	r3, [pc, #60]	; (8002d80 <HAL_RCC_OscConfig+0x2ac>)
 8002d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d46:	4a0e      	ldr	r2, [pc, #56]	; (8002d80 <HAL_RCC_OscConfig+0x2ac>)
 8002d48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d4c:	6413      	str	r3, [r2, #64]	; 0x40
 8002d4e:	4b0c      	ldr	r3, [pc, #48]	; (8002d80 <HAL_RCC_OscConfig+0x2ac>)
 8002d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d56:	60bb      	str	r3, [r7, #8]
 8002d58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d5e:	4b0b      	ldr	r3, [pc, #44]	; (8002d8c <HAL_RCC_OscConfig+0x2b8>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d121      	bne.n	8002dae <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d6a:	4b08      	ldr	r3, [pc, #32]	; (8002d8c <HAL_RCC_OscConfig+0x2b8>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a07      	ldr	r2, [pc, #28]	; (8002d8c <HAL_RCC_OscConfig+0x2b8>)
 8002d70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d76:	f7fe fdfd 	bl	8001974 <HAL_GetTick>
 8002d7a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d7c:	e011      	b.n	8002da2 <HAL_RCC_OscConfig+0x2ce>
 8002d7e:	bf00      	nop
 8002d80:	40023800 	.word	0x40023800
 8002d84:	42470000 	.word	0x42470000
 8002d88:	42470e80 	.word	0x42470e80
 8002d8c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d90:	f7fe fdf0 	bl	8001974 <HAL_GetTick>
 8002d94:	4602      	mov	r2, r0
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d901      	bls.n	8002da2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	e106      	b.n	8002fb0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002da2:	4b85      	ldr	r3, [pc, #532]	; (8002fb8 <HAL_RCC_OscConfig+0x4e4>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d0f0      	beq.n	8002d90 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d106      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x2f0>
 8002db6:	4b81      	ldr	r3, [pc, #516]	; (8002fbc <HAL_RCC_OscConfig+0x4e8>)
 8002db8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dba:	4a80      	ldr	r2, [pc, #512]	; (8002fbc <HAL_RCC_OscConfig+0x4e8>)
 8002dbc:	f043 0301 	orr.w	r3, r3, #1
 8002dc0:	6713      	str	r3, [r2, #112]	; 0x70
 8002dc2:	e01c      	b.n	8002dfe <HAL_RCC_OscConfig+0x32a>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	2b05      	cmp	r3, #5
 8002dca:	d10c      	bne.n	8002de6 <HAL_RCC_OscConfig+0x312>
 8002dcc:	4b7b      	ldr	r3, [pc, #492]	; (8002fbc <HAL_RCC_OscConfig+0x4e8>)
 8002dce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dd0:	4a7a      	ldr	r2, [pc, #488]	; (8002fbc <HAL_RCC_OscConfig+0x4e8>)
 8002dd2:	f043 0304 	orr.w	r3, r3, #4
 8002dd6:	6713      	str	r3, [r2, #112]	; 0x70
 8002dd8:	4b78      	ldr	r3, [pc, #480]	; (8002fbc <HAL_RCC_OscConfig+0x4e8>)
 8002dda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ddc:	4a77      	ldr	r2, [pc, #476]	; (8002fbc <HAL_RCC_OscConfig+0x4e8>)
 8002dde:	f043 0301 	orr.w	r3, r3, #1
 8002de2:	6713      	str	r3, [r2, #112]	; 0x70
 8002de4:	e00b      	b.n	8002dfe <HAL_RCC_OscConfig+0x32a>
 8002de6:	4b75      	ldr	r3, [pc, #468]	; (8002fbc <HAL_RCC_OscConfig+0x4e8>)
 8002de8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dea:	4a74      	ldr	r2, [pc, #464]	; (8002fbc <HAL_RCC_OscConfig+0x4e8>)
 8002dec:	f023 0301 	bic.w	r3, r3, #1
 8002df0:	6713      	str	r3, [r2, #112]	; 0x70
 8002df2:	4b72      	ldr	r3, [pc, #456]	; (8002fbc <HAL_RCC_OscConfig+0x4e8>)
 8002df4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002df6:	4a71      	ldr	r2, [pc, #452]	; (8002fbc <HAL_RCC_OscConfig+0x4e8>)
 8002df8:	f023 0304 	bic.w	r3, r3, #4
 8002dfc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d015      	beq.n	8002e32 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e06:	f7fe fdb5 	bl	8001974 <HAL_GetTick>
 8002e0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e0c:	e00a      	b.n	8002e24 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e0e:	f7fe fdb1 	bl	8001974 <HAL_GetTick>
 8002e12:	4602      	mov	r2, r0
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	1ad3      	subs	r3, r2, r3
 8002e18:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d901      	bls.n	8002e24 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002e20:	2303      	movs	r3, #3
 8002e22:	e0c5      	b.n	8002fb0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e24:	4b65      	ldr	r3, [pc, #404]	; (8002fbc <HAL_RCC_OscConfig+0x4e8>)
 8002e26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e28:	f003 0302 	and.w	r3, r3, #2
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d0ee      	beq.n	8002e0e <HAL_RCC_OscConfig+0x33a>
 8002e30:	e014      	b.n	8002e5c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e32:	f7fe fd9f 	bl	8001974 <HAL_GetTick>
 8002e36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e38:	e00a      	b.n	8002e50 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e3a:	f7fe fd9b 	bl	8001974 <HAL_GetTick>
 8002e3e:	4602      	mov	r2, r0
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	1ad3      	subs	r3, r2, r3
 8002e44:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d901      	bls.n	8002e50 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002e4c:	2303      	movs	r3, #3
 8002e4e:	e0af      	b.n	8002fb0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e50:	4b5a      	ldr	r3, [pc, #360]	; (8002fbc <HAL_RCC_OscConfig+0x4e8>)
 8002e52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e54:	f003 0302 	and.w	r3, r3, #2
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d1ee      	bne.n	8002e3a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e5c:	7dfb      	ldrb	r3, [r7, #23]
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d105      	bne.n	8002e6e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e62:	4b56      	ldr	r3, [pc, #344]	; (8002fbc <HAL_RCC_OscConfig+0x4e8>)
 8002e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e66:	4a55      	ldr	r2, [pc, #340]	; (8002fbc <HAL_RCC_OscConfig+0x4e8>)
 8002e68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e6c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	699b      	ldr	r3, [r3, #24]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	f000 809b 	beq.w	8002fae <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e78:	4b50      	ldr	r3, [pc, #320]	; (8002fbc <HAL_RCC_OscConfig+0x4e8>)
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	f003 030c 	and.w	r3, r3, #12
 8002e80:	2b08      	cmp	r3, #8
 8002e82:	d05c      	beq.n	8002f3e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	699b      	ldr	r3, [r3, #24]
 8002e88:	2b02      	cmp	r3, #2
 8002e8a:	d141      	bne.n	8002f10 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e8c:	4b4c      	ldr	r3, [pc, #304]	; (8002fc0 <HAL_RCC_OscConfig+0x4ec>)
 8002e8e:	2200      	movs	r2, #0
 8002e90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e92:	f7fe fd6f 	bl	8001974 <HAL_GetTick>
 8002e96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e98:	e008      	b.n	8002eac <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e9a:	f7fe fd6b 	bl	8001974 <HAL_GetTick>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	1ad3      	subs	r3, r2, r3
 8002ea4:	2b02      	cmp	r3, #2
 8002ea6:	d901      	bls.n	8002eac <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002ea8:	2303      	movs	r3, #3
 8002eaa:	e081      	b.n	8002fb0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eac:	4b43      	ldr	r3, [pc, #268]	; (8002fbc <HAL_RCC_OscConfig+0x4e8>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d1f0      	bne.n	8002e9a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	69da      	ldr	r2, [r3, #28]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6a1b      	ldr	r3, [r3, #32]
 8002ec0:	431a      	orrs	r2, r3
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec6:	019b      	lsls	r3, r3, #6
 8002ec8:	431a      	orrs	r2, r3
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ece:	085b      	lsrs	r3, r3, #1
 8002ed0:	3b01      	subs	r3, #1
 8002ed2:	041b      	lsls	r3, r3, #16
 8002ed4:	431a      	orrs	r2, r3
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eda:	061b      	lsls	r3, r3, #24
 8002edc:	4937      	ldr	r1, [pc, #220]	; (8002fbc <HAL_RCC_OscConfig+0x4e8>)
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ee2:	4b37      	ldr	r3, [pc, #220]	; (8002fc0 <HAL_RCC_OscConfig+0x4ec>)
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ee8:	f7fe fd44 	bl	8001974 <HAL_GetTick>
 8002eec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002eee:	e008      	b.n	8002f02 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ef0:	f7fe fd40 	bl	8001974 <HAL_GetTick>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	2b02      	cmp	r3, #2
 8002efc:	d901      	bls.n	8002f02 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002efe:	2303      	movs	r3, #3
 8002f00:	e056      	b.n	8002fb0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f02:	4b2e      	ldr	r3, [pc, #184]	; (8002fbc <HAL_RCC_OscConfig+0x4e8>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d0f0      	beq.n	8002ef0 <HAL_RCC_OscConfig+0x41c>
 8002f0e:	e04e      	b.n	8002fae <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f10:	4b2b      	ldr	r3, [pc, #172]	; (8002fc0 <HAL_RCC_OscConfig+0x4ec>)
 8002f12:	2200      	movs	r2, #0
 8002f14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f16:	f7fe fd2d 	bl	8001974 <HAL_GetTick>
 8002f1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f1c:	e008      	b.n	8002f30 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f1e:	f7fe fd29 	bl	8001974 <HAL_GetTick>
 8002f22:	4602      	mov	r2, r0
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	1ad3      	subs	r3, r2, r3
 8002f28:	2b02      	cmp	r3, #2
 8002f2a:	d901      	bls.n	8002f30 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002f2c:	2303      	movs	r3, #3
 8002f2e:	e03f      	b.n	8002fb0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f30:	4b22      	ldr	r3, [pc, #136]	; (8002fbc <HAL_RCC_OscConfig+0x4e8>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d1f0      	bne.n	8002f1e <HAL_RCC_OscConfig+0x44a>
 8002f3c:	e037      	b.n	8002fae <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	699b      	ldr	r3, [r3, #24]
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d101      	bne.n	8002f4a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e032      	b.n	8002fb0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002f4a:	4b1c      	ldr	r3, [pc, #112]	; (8002fbc <HAL_RCC_OscConfig+0x4e8>)
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	699b      	ldr	r3, [r3, #24]
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d028      	beq.n	8002faa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f62:	429a      	cmp	r2, r3
 8002f64:	d121      	bne.n	8002faa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d11a      	bne.n	8002faa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f74:	68fa      	ldr	r2, [r7, #12]
 8002f76:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	687a      	ldr	r2, [r7, #4]
 8002f7e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002f80:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d111      	bne.n	8002faa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f90:	085b      	lsrs	r3, r3, #1
 8002f92:	3b01      	subs	r3, #1
 8002f94:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d107      	bne.n	8002faa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fa4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d001      	beq.n	8002fae <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e000      	b.n	8002fb0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002fae:	2300      	movs	r3, #0
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3718      	adds	r7, #24
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}
 8002fb8:	40007000 	.word	0x40007000
 8002fbc:	40023800 	.word	0x40023800
 8002fc0:	42470060 	.word	0x42470060

08002fc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b084      	sub	sp, #16
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
 8002fcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d101      	bne.n	8002fd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e0cc      	b.n	8003172 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002fd8:	4b68      	ldr	r3, [pc, #416]	; (800317c <HAL_RCC_ClockConfig+0x1b8>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 030f 	and.w	r3, r3, #15
 8002fe0:	683a      	ldr	r2, [r7, #0]
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d90c      	bls.n	8003000 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fe6:	4b65      	ldr	r3, [pc, #404]	; (800317c <HAL_RCC_ClockConfig+0x1b8>)
 8002fe8:	683a      	ldr	r2, [r7, #0]
 8002fea:	b2d2      	uxtb	r2, r2
 8002fec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fee:	4b63      	ldr	r3, [pc, #396]	; (800317c <HAL_RCC_ClockConfig+0x1b8>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 030f 	and.w	r3, r3, #15
 8002ff6:	683a      	ldr	r2, [r7, #0]
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d001      	beq.n	8003000 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e0b8      	b.n	8003172 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 0302 	and.w	r3, r3, #2
 8003008:	2b00      	cmp	r3, #0
 800300a:	d020      	beq.n	800304e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 0304 	and.w	r3, r3, #4
 8003014:	2b00      	cmp	r3, #0
 8003016:	d005      	beq.n	8003024 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003018:	4b59      	ldr	r3, [pc, #356]	; (8003180 <HAL_RCC_ClockConfig+0x1bc>)
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	4a58      	ldr	r2, [pc, #352]	; (8003180 <HAL_RCC_ClockConfig+0x1bc>)
 800301e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003022:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 0308 	and.w	r3, r3, #8
 800302c:	2b00      	cmp	r3, #0
 800302e:	d005      	beq.n	800303c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003030:	4b53      	ldr	r3, [pc, #332]	; (8003180 <HAL_RCC_ClockConfig+0x1bc>)
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	4a52      	ldr	r2, [pc, #328]	; (8003180 <HAL_RCC_ClockConfig+0x1bc>)
 8003036:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800303a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800303c:	4b50      	ldr	r3, [pc, #320]	; (8003180 <HAL_RCC_ClockConfig+0x1bc>)
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	494d      	ldr	r1, [pc, #308]	; (8003180 <HAL_RCC_ClockConfig+0x1bc>)
 800304a:	4313      	orrs	r3, r2
 800304c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0301 	and.w	r3, r3, #1
 8003056:	2b00      	cmp	r3, #0
 8003058:	d044      	beq.n	80030e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	2b01      	cmp	r3, #1
 8003060:	d107      	bne.n	8003072 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003062:	4b47      	ldr	r3, [pc, #284]	; (8003180 <HAL_RCC_ClockConfig+0x1bc>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800306a:	2b00      	cmp	r3, #0
 800306c:	d119      	bne.n	80030a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e07f      	b.n	8003172 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	2b02      	cmp	r3, #2
 8003078:	d003      	beq.n	8003082 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800307e:	2b03      	cmp	r3, #3
 8003080:	d107      	bne.n	8003092 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003082:	4b3f      	ldr	r3, [pc, #252]	; (8003180 <HAL_RCC_ClockConfig+0x1bc>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800308a:	2b00      	cmp	r3, #0
 800308c:	d109      	bne.n	80030a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e06f      	b.n	8003172 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003092:	4b3b      	ldr	r3, [pc, #236]	; (8003180 <HAL_RCC_ClockConfig+0x1bc>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0302 	and.w	r3, r3, #2
 800309a:	2b00      	cmp	r3, #0
 800309c:	d101      	bne.n	80030a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e067      	b.n	8003172 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030a2:	4b37      	ldr	r3, [pc, #220]	; (8003180 <HAL_RCC_ClockConfig+0x1bc>)
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	f023 0203 	bic.w	r2, r3, #3
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	4934      	ldr	r1, [pc, #208]	; (8003180 <HAL_RCC_ClockConfig+0x1bc>)
 80030b0:	4313      	orrs	r3, r2
 80030b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030b4:	f7fe fc5e 	bl	8001974 <HAL_GetTick>
 80030b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030ba:	e00a      	b.n	80030d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030bc:	f7fe fc5a 	bl	8001974 <HAL_GetTick>
 80030c0:	4602      	mov	r2, r0
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d901      	bls.n	80030d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80030ce:	2303      	movs	r3, #3
 80030d0:	e04f      	b.n	8003172 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030d2:	4b2b      	ldr	r3, [pc, #172]	; (8003180 <HAL_RCC_ClockConfig+0x1bc>)
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	f003 020c 	and.w	r2, r3, #12
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d1eb      	bne.n	80030bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030e4:	4b25      	ldr	r3, [pc, #148]	; (800317c <HAL_RCC_ClockConfig+0x1b8>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 030f 	and.w	r3, r3, #15
 80030ec:	683a      	ldr	r2, [r7, #0]
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d20c      	bcs.n	800310c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030f2:	4b22      	ldr	r3, [pc, #136]	; (800317c <HAL_RCC_ClockConfig+0x1b8>)
 80030f4:	683a      	ldr	r2, [r7, #0]
 80030f6:	b2d2      	uxtb	r2, r2
 80030f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030fa:	4b20      	ldr	r3, [pc, #128]	; (800317c <HAL_RCC_ClockConfig+0x1b8>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 030f 	and.w	r3, r3, #15
 8003102:	683a      	ldr	r2, [r7, #0]
 8003104:	429a      	cmp	r2, r3
 8003106:	d001      	beq.n	800310c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e032      	b.n	8003172 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 0304 	and.w	r3, r3, #4
 8003114:	2b00      	cmp	r3, #0
 8003116:	d008      	beq.n	800312a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003118:	4b19      	ldr	r3, [pc, #100]	; (8003180 <HAL_RCC_ClockConfig+0x1bc>)
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	4916      	ldr	r1, [pc, #88]	; (8003180 <HAL_RCC_ClockConfig+0x1bc>)
 8003126:	4313      	orrs	r3, r2
 8003128:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 0308 	and.w	r3, r3, #8
 8003132:	2b00      	cmp	r3, #0
 8003134:	d009      	beq.n	800314a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003136:	4b12      	ldr	r3, [pc, #72]	; (8003180 <HAL_RCC_ClockConfig+0x1bc>)
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	691b      	ldr	r3, [r3, #16]
 8003142:	00db      	lsls	r3, r3, #3
 8003144:	490e      	ldr	r1, [pc, #56]	; (8003180 <HAL_RCC_ClockConfig+0x1bc>)
 8003146:	4313      	orrs	r3, r2
 8003148:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800314a:	f000 f821 	bl	8003190 <HAL_RCC_GetSysClockFreq>
 800314e:	4602      	mov	r2, r0
 8003150:	4b0b      	ldr	r3, [pc, #44]	; (8003180 <HAL_RCC_ClockConfig+0x1bc>)
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	091b      	lsrs	r3, r3, #4
 8003156:	f003 030f 	and.w	r3, r3, #15
 800315a:	490a      	ldr	r1, [pc, #40]	; (8003184 <HAL_RCC_ClockConfig+0x1c0>)
 800315c:	5ccb      	ldrb	r3, [r1, r3]
 800315e:	fa22 f303 	lsr.w	r3, r2, r3
 8003162:	4a09      	ldr	r2, [pc, #36]	; (8003188 <HAL_RCC_ClockConfig+0x1c4>)
 8003164:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003166:	4b09      	ldr	r3, [pc, #36]	; (800318c <HAL_RCC_ClockConfig+0x1c8>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4618      	mov	r0, r3
 800316c:	f7fe fbbe 	bl	80018ec <HAL_InitTick>

  return HAL_OK;
 8003170:	2300      	movs	r3, #0
}
 8003172:	4618      	mov	r0, r3
 8003174:	3710      	adds	r7, #16
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}
 800317a:	bf00      	nop
 800317c:	40023c00 	.word	0x40023c00
 8003180:	40023800 	.word	0x40023800
 8003184:	08008c2c 	.word	0x08008c2c
 8003188:	20000000 	.word	0x20000000
 800318c:	20000004 	.word	0x20000004

08003190 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003190:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003194:	b084      	sub	sp, #16
 8003196:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003198:	2300      	movs	r3, #0
 800319a:	607b      	str	r3, [r7, #4]
 800319c:	2300      	movs	r3, #0
 800319e:	60fb      	str	r3, [r7, #12]
 80031a0:	2300      	movs	r3, #0
 80031a2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80031a4:	2300      	movs	r3, #0
 80031a6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031a8:	4b67      	ldr	r3, [pc, #412]	; (8003348 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	f003 030c 	and.w	r3, r3, #12
 80031b0:	2b08      	cmp	r3, #8
 80031b2:	d00d      	beq.n	80031d0 <HAL_RCC_GetSysClockFreq+0x40>
 80031b4:	2b08      	cmp	r3, #8
 80031b6:	f200 80bd 	bhi.w	8003334 <HAL_RCC_GetSysClockFreq+0x1a4>
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d002      	beq.n	80031c4 <HAL_RCC_GetSysClockFreq+0x34>
 80031be:	2b04      	cmp	r3, #4
 80031c0:	d003      	beq.n	80031ca <HAL_RCC_GetSysClockFreq+0x3a>
 80031c2:	e0b7      	b.n	8003334 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80031c4:	4b61      	ldr	r3, [pc, #388]	; (800334c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80031c6:	60bb      	str	r3, [r7, #8]
       break;
 80031c8:	e0b7      	b.n	800333a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80031ca:	4b61      	ldr	r3, [pc, #388]	; (8003350 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80031cc:	60bb      	str	r3, [r7, #8]
      break;
 80031ce:	e0b4      	b.n	800333a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80031d0:	4b5d      	ldr	r3, [pc, #372]	; (8003348 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80031d8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80031da:	4b5b      	ldr	r3, [pc, #364]	; (8003348 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d04d      	beq.n	8003282 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031e6:	4b58      	ldr	r3, [pc, #352]	; (8003348 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	099b      	lsrs	r3, r3, #6
 80031ec:	461a      	mov	r2, r3
 80031ee:	f04f 0300 	mov.w	r3, #0
 80031f2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80031f6:	f04f 0100 	mov.w	r1, #0
 80031fa:	ea02 0800 	and.w	r8, r2, r0
 80031fe:	ea03 0901 	and.w	r9, r3, r1
 8003202:	4640      	mov	r0, r8
 8003204:	4649      	mov	r1, r9
 8003206:	f04f 0200 	mov.w	r2, #0
 800320a:	f04f 0300 	mov.w	r3, #0
 800320e:	014b      	lsls	r3, r1, #5
 8003210:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003214:	0142      	lsls	r2, r0, #5
 8003216:	4610      	mov	r0, r2
 8003218:	4619      	mov	r1, r3
 800321a:	ebb0 0008 	subs.w	r0, r0, r8
 800321e:	eb61 0109 	sbc.w	r1, r1, r9
 8003222:	f04f 0200 	mov.w	r2, #0
 8003226:	f04f 0300 	mov.w	r3, #0
 800322a:	018b      	lsls	r3, r1, #6
 800322c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003230:	0182      	lsls	r2, r0, #6
 8003232:	1a12      	subs	r2, r2, r0
 8003234:	eb63 0301 	sbc.w	r3, r3, r1
 8003238:	f04f 0000 	mov.w	r0, #0
 800323c:	f04f 0100 	mov.w	r1, #0
 8003240:	00d9      	lsls	r1, r3, #3
 8003242:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003246:	00d0      	lsls	r0, r2, #3
 8003248:	4602      	mov	r2, r0
 800324a:	460b      	mov	r3, r1
 800324c:	eb12 0208 	adds.w	r2, r2, r8
 8003250:	eb43 0309 	adc.w	r3, r3, r9
 8003254:	f04f 0000 	mov.w	r0, #0
 8003258:	f04f 0100 	mov.w	r1, #0
 800325c:	0259      	lsls	r1, r3, #9
 800325e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003262:	0250      	lsls	r0, r2, #9
 8003264:	4602      	mov	r2, r0
 8003266:	460b      	mov	r3, r1
 8003268:	4610      	mov	r0, r2
 800326a:	4619      	mov	r1, r3
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	461a      	mov	r2, r3
 8003270:	f04f 0300 	mov.w	r3, #0
 8003274:	f7fd fd18 	bl	8000ca8 <__aeabi_uldivmod>
 8003278:	4602      	mov	r2, r0
 800327a:	460b      	mov	r3, r1
 800327c:	4613      	mov	r3, r2
 800327e:	60fb      	str	r3, [r7, #12]
 8003280:	e04a      	b.n	8003318 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003282:	4b31      	ldr	r3, [pc, #196]	; (8003348 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	099b      	lsrs	r3, r3, #6
 8003288:	461a      	mov	r2, r3
 800328a:	f04f 0300 	mov.w	r3, #0
 800328e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003292:	f04f 0100 	mov.w	r1, #0
 8003296:	ea02 0400 	and.w	r4, r2, r0
 800329a:	ea03 0501 	and.w	r5, r3, r1
 800329e:	4620      	mov	r0, r4
 80032a0:	4629      	mov	r1, r5
 80032a2:	f04f 0200 	mov.w	r2, #0
 80032a6:	f04f 0300 	mov.w	r3, #0
 80032aa:	014b      	lsls	r3, r1, #5
 80032ac:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80032b0:	0142      	lsls	r2, r0, #5
 80032b2:	4610      	mov	r0, r2
 80032b4:	4619      	mov	r1, r3
 80032b6:	1b00      	subs	r0, r0, r4
 80032b8:	eb61 0105 	sbc.w	r1, r1, r5
 80032bc:	f04f 0200 	mov.w	r2, #0
 80032c0:	f04f 0300 	mov.w	r3, #0
 80032c4:	018b      	lsls	r3, r1, #6
 80032c6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80032ca:	0182      	lsls	r2, r0, #6
 80032cc:	1a12      	subs	r2, r2, r0
 80032ce:	eb63 0301 	sbc.w	r3, r3, r1
 80032d2:	f04f 0000 	mov.w	r0, #0
 80032d6:	f04f 0100 	mov.w	r1, #0
 80032da:	00d9      	lsls	r1, r3, #3
 80032dc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80032e0:	00d0      	lsls	r0, r2, #3
 80032e2:	4602      	mov	r2, r0
 80032e4:	460b      	mov	r3, r1
 80032e6:	1912      	adds	r2, r2, r4
 80032e8:	eb45 0303 	adc.w	r3, r5, r3
 80032ec:	f04f 0000 	mov.w	r0, #0
 80032f0:	f04f 0100 	mov.w	r1, #0
 80032f4:	0299      	lsls	r1, r3, #10
 80032f6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80032fa:	0290      	lsls	r0, r2, #10
 80032fc:	4602      	mov	r2, r0
 80032fe:	460b      	mov	r3, r1
 8003300:	4610      	mov	r0, r2
 8003302:	4619      	mov	r1, r3
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	461a      	mov	r2, r3
 8003308:	f04f 0300 	mov.w	r3, #0
 800330c:	f7fd fccc 	bl	8000ca8 <__aeabi_uldivmod>
 8003310:	4602      	mov	r2, r0
 8003312:	460b      	mov	r3, r1
 8003314:	4613      	mov	r3, r2
 8003316:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003318:	4b0b      	ldr	r3, [pc, #44]	; (8003348 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	0c1b      	lsrs	r3, r3, #16
 800331e:	f003 0303 	and.w	r3, r3, #3
 8003322:	3301      	adds	r3, #1
 8003324:	005b      	lsls	r3, r3, #1
 8003326:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003328:	68fa      	ldr	r2, [r7, #12]
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003330:	60bb      	str	r3, [r7, #8]
      break;
 8003332:	e002      	b.n	800333a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003334:	4b05      	ldr	r3, [pc, #20]	; (800334c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003336:	60bb      	str	r3, [r7, #8]
      break;
 8003338:	bf00      	nop
    }
  }
  return sysclockfreq;
 800333a:	68bb      	ldr	r3, [r7, #8]
}
 800333c:	4618      	mov	r0, r3
 800333e:	3710      	adds	r7, #16
 8003340:	46bd      	mov	sp, r7
 8003342:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003346:	bf00      	nop
 8003348:	40023800 	.word	0x40023800
 800334c:	00f42400 	.word	0x00f42400
 8003350:	007a1200 	.word	0x007a1200

08003354 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003354:	b480      	push	{r7}
 8003356:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003358:	4b03      	ldr	r3, [pc, #12]	; (8003368 <HAL_RCC_GetHCLKFreq+0x14>)
 800335a:	681b      	ldr	r3, [r3, #0]
}
 800335c:	4618      	mov	r0, r3
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr
 8003366:	bf00      	nop
 8003368:	20000000 	.word	0x20000000

0800336c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003370:	f7ff fff0 	bl	8003354 <HAL_RCC_GetHCLKFreq>
 8003374:	4602      	mov	r2, r0
 8003376:	4b05      	ldr	r3, [pc, #20]	; (800338c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	0a9b      	lsrs	r3, r3, #10
 800337c:	f003 0307 	and.w	r3, r3, #7
 8003380:	4903      	ldr	r1, [pc, #12]	; (8003390 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003382:	5ccb      	ldrb	r3, [r1, r3]
 8003384:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003388:	4618      	mov	r0, r3
 800338a:	bd80      	pop	{r7, pc}
 800338c:	40023800 	.word	0x40023800
 8003390:	08008c3c 	.word	0x08008c3c

08003394 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003398:	f7ff ffdc 	bl	8003354 <HAL_RCC_GetHCLKFreq>
 800339c:	4602      	mov	r2, r0
 800339e:	4b05      	ldr	r3, [pc, #20]	; (80033b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	0b5b      	lsrs	r3, r3, #13
 80033a4:	f003 0307 	and.w	r3, r3, #7
 80033a8:	4903      	ldr	r1, [pc, #12]	; (80033b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80033aa:	5ccb      	ldrb	r3, [r1, r3]
 80033ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	bd80      	pop	{r7, pc}
 80033b4:	40023800 	.word	0x40023800
 80033b8:	08008c3c 	.word	0x08008c3c

080033bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b082      	sub	sp, #8
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d101      	bne.n	80033ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e03f      	b.n	800344e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d106      	bne.n	80033e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2200      	movs	r2, #0
 80033de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f7fe f9e6 	bl	80017b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2224      	movs	r2, #36	; 0x24
 80033ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	68da      	ldr	r2, [r3, #12]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80033fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	f000 fddb 	bl	8003fbc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	691a      	ldr	r2, [r3, #16]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003414:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	695a      	ldr	r2, [r3, #20]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003424:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	68da      	ldr	r2, [r3, #12]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003434:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2200      	movs	r2, #0
 800343a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2220      	movs	r2, #32
 8003440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2220      	movs	r2, #32
 8003448:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800344c:	2300      	movs	r3, #0
}
 800344e:	4618      	mov	r0, r3
 8003450:	3708      	adds	r7, #8
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}

08003456 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003456:	b580      	push	{r7, lr}
 8003458:	b08a      	sub	sp, #40	; 0x28
 800345a:	af02      	add	r7, sp, #8
 800345c:	60f8      	str	r0, [r7, #12]
 800345e:	60b9      	str	r1, [r7, #8]
 8003460:	603b      	str	r3, [r7, #0]
 8003462:	4613      	mov	r3, r2
 8003464:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003466:	2300      	movs	r3, #0
 8003468:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003470:	b2db      	uxtb	r3, r3
 8003472:	2b20      	cmp	r3, #32
 8003474:	d17c      	bne.n	8003570 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d002      	beq.n	8003482 <HAL_UART_Transmit+0x2c>
 800347c:	88fb      	ldrh	r3, [r7, #6]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d101      	bne.n	8003486 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e075      	b.n	8003572 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800348c:	2b01      	cmp	r3, #1
 800348e:	d101      	bne.n	8003494 <HAL_UART_Transmit+0x3e>
 8003490:	2302      	movs	r3, #2
 8003492:	e06e      	b.n	8003572 <HAL_UART_Transmit+0x11c>
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2201      	movs	r2, #1
 8003498:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2200      	movs	r2, #0
 80034a0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2221      	movs	r2, #33	; 0x21
 80034a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80034aa:	f7fe fa63 	bl	8001974 <HAL_GetTick>
 80034ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	88fa      	ldrh	r2, [r7, #6]
 80034b4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	88fa      	ldrh	r2, [r7, #6]
 80034ba:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034c4:	d108      	bne.n	80034d8 <HAL_UART_Transmit+0x82>
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	691b      	ldr	r3, [r3, #16]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d104      	bne.n	80034d8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80034ce:	2300      	movs	r3, #0
 80034d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	61bb      	str	r3, [r7, #24]
 80034d6:	e003      	b.n	80034e0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80034dc:	2300      	movs	r3, #0
 80034de:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2200      	movs	r2, #0
 80034e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80034e8:	e02a      	b.n	8003540 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	9300      	str	r3, [sp, #0]
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	2200      	movs	r2, #0
 80034f2:	2180      	movs	r1, #128	; 0x80
 80034f4:	68f8      	ldr	r0, [r7, #12]
 80034f6:	f000 fb1f 	bl	8003b38 <UART_WaitOnFlagUntilTimeout>
 80034fa:	4603      	mov	r3, r0
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d001      	beq.n	8003504 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003500:	2303      	movs	r3, #3
 8003502:	e036      	b.n	8003572 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003504:	69fb      	ldr	r3, [r7, #28]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d10b      	bne.n	8003522 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800350a:	69bb      	ldr	r3, [r7, #24]
 800350c:	881b      	ldrh	r3, [r3, #0]
 800350e:	461a      	mov	r2, r3
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003518:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800351a:	69bb      	ldr	r3, [r7, #24]
 800351c:	3302      	adds	r3, #2
 800351e:	61bb      	str	r3, [r7, #24]
 8003520:	e007      	b.n	8003532 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003522:	69fb      	ldr	r3, [r7, #28]
 8003524:	781a      	ldrb	r2, [r3, #0]
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800352c:	69fb      	ldr	r3, [r7, #28]
 800352e:	3301      	adds	r3, #1
 8003530:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003536:	b29b      	uxth	r3, r3
 8003538:	3b01      	subs	r3, #1
 800353a:	b29a      	uxth	r2, r3
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003544:	b29b      	uxth	r3, r3
 8003546:	2b00      	cmp	r3, #0
 8003548:	d1cf      	bne.n	80034ea <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	9300      	str	r3, [sp, #0]
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	2200      	movs	r2, #0
 8003552:	2140      	movs	r1, #64	; 0x40
 8003554:	68f8      	ldr	r0, [r7, #12]
 8003556:	f000 faef 	bl	8003b38 <UART_WaitOnFlagUntilTimeout>
 800355a:	4603      	mov	r3, r0
 800355c:	2b00      	cmp	r3, #0
 800355e:	d001      	beq.n	8003564 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003560:	2303      	movs	r3, #3
 8003562:	e006      	b.n	8003572 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2220      	movs	r2, #32
 8003568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800356c:	2300      	movs	r3, #0
 800356e:	e000      	b.n	8003572 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003570:	2302      	movs	r3, #2
  }
}
 8003572:	4618      	mov	r0, r3
 8003574:	3720      	adds	r7, #32
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}

0800357a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800357a:	b580      	push	{r7, lr}
 800357c:	b084      	sub	sp, #16
 800357e:	af00      	add	r7, sp, #0
 8003580:	60f8      	str	r0, [r7, #12]
 8003582:	60b9      	str	r1, [r7, #8]
 8003584:	4613      	mov	r3, r2
 8003586:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800358e:	b2db      	uxtb	r3, r3
 8003590:	2b20      	cmp	r3, #32
 8003592:	d11d      	bne.n	80035d0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d002      	beq.n	80035a0 <HAL_UART_Receive_IT+0x26>
 800359a:	88fb      	ldrh	r3, [r7, #6]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d101      	bne.n	80035a4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	e016      	b.n	80035d2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d101      	bne.n	80035b2 <HAL_UART_Receive_IT+0x38>
 80035ae:	2302      	movs	r3, #2
 80035b0:	e00f      	b.n	80035d2 <HAL_UART_Receive_IT+0x58>
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2201      	movs	r2, #1
 80035b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2200      	movs	r2, #0
 80035be:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80035c0:	88fb      	ldrh	r3, [r7, #6]
 80035c2:	461a      	mov	r2, r3
 80035c4:	68b9      	ldr	r1, [r7, #8]
 80035c6:	68f8      	ldr	r0, [r7, #12]
 80035c8:	f000 fb24 	bl	8003c14 <UART_Start_Receive_IT>
 80035cc:	4603      	mov	r3, r0
 80035ce:	e000      	b.n	80035d2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80035d0:	2302      	movs	r3, #2
  }
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3710      	adds	r7, #16
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}
	...

080035dc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b0ba      	sub	sp, #232	; 0xe8
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	68db      	ldr	r3, [r3, #12]
 80035f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	695b      	ldr	r3, [r3, #20]
 80035fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003602:	2300      	movs	r3, #0
 8003604:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003608:	2300      	movs	r3, #0
 800360a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800360e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003612:	f003 030f 	and.w	r3, r3, #15
 8003616:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800361a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800361e:	2b00      	cmp	r3, #0
 8003620:	d10f      	bne.n	8003642 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003622:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003626:	f003 0320 	and.w	r3, r3, #32
 800362a:	2b00      	cmp	r3, #0
 800362c:	d009      	beq.n	8003642 <HAL_UART_IRQHandler+0x66>
 800362e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003632:	f003 0320 	and.w	r3, r3, #32
 8003636:	2b00      	cmp	r3, #0
 8003638:	d003      	beq.n	8003642 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f000 fc03 	bl	8003e46 <UART_Receive_IT>
      return;
 8003640:	e256      	b.n	8003af0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003642:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003646:	2b00      	cmp	r3, #0
 8003648:	f000 80de 	beq.w	8003808 <HAL_UART_IRQHandler+0x22c>
 800364c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003650:	f003 0301 	and.w	r3, r3, #1
 8003654:	2b00      	cmp	r3, #0
 8003656:	d106      	bne.n	8003666 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003658:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800365c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003660:	2b00      	cmp	r3, #0
 8003662:	f000 80d1 	beq.w	8003808 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003666:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800366a:	f003 0301 	and.w	r3, r3, #1
 800366e:	2b00      	cmp	r3, #0
 8003670:	d00b      	beq.n	800368a <HAL_UART_IRQHandler+0xae>
 8003672:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003676:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800367a:	2b00      	cmp	r3, #0
 800367c:	d005      	beq.n	800368a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003682:	f043 0201 	orr.w	r2, r3, #1
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800368a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800368e:	f003 0304 	and.w	r3, r3, #4
 8003692:	2b00      	cmp	r3, #0
 8003694:	d00b      	beq.n	80036ae <HAL_UART_IRQHandler+0xd2>
 8003696:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800369a:	f003 0301 	and.w	r3, r3, #1
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d005      	beq.n	80036ae <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a6:	f043 0202 	orr.w	r2, r3, #2
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80036ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036b2:	f003 0302 	and.w	r3, r3, #2
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d00b      	beq.n	80036d2 <HAL_UART_IRQHandler+0xf6>
 80036ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80036be:	f003 0301 	and.w	r3, r3, #1
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d005      	beq.n	80036d2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ca:	f043 0204 	orr.w	r2, r3, #4
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80036d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036d6:	f003 0308 	and.w	r3, r3, #8
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d011      	beq.n	8003702 <HAL_UART_IRQHandler+0x126>
 80036de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036e2:	f003 0320 	and.w	r3, r3, #32
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d105      	bne.n	80036f6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80036ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80036ee:	f003 0301 	and.w	r3, r3, #1
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d005      	beq.n	8003702 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fa:	f043 0208 	orr.w	r2, r3, #8
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003706:	2b00      	cmp	r3, #0
 8003708:	f000 81ed 	beq.w	8003ae6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800370c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003710:	f003 0320 	and.w	r3, r3, #32
 8003714:	2b00      	cmp	r3, #0
 8003716:	d008      	beq.n	800372a <HAL_UART_IRQHandler+0x14e>
 8003718:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800371c:	f003 0320 	and.w	r3, r3, #32
 8003720:	2b00      	cmp	r3, #0
 8003722:	d002      	beq.n	800372a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003724:	6878      	ldr	r0, [r7, #4]
 8003726:	f000 fb8e 	bl	8003e46 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	695b      	ldr	r3, [r3, #20]
 8003730:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003734:	2b40      	cmp	r3, #64	; 0x40
 8003736:	bf0c      	ite	eq
 8003738:	2301      	moveq	r3, #1
 800373a:	2300      	movne	r3, #0
 800373c:	b2db      	uxtb	r3, r3
 800373e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003746:	f003 0308 	and.w	r3, r3, #8
 800374a:	2b00      	cmp	r3, #0
 800374c:	d103      	bne.n	8003756 <HAL_UART_IRQHandler+0x17a>
 800374e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003752:	2b00      	cmp	r3, #0
 8003754:	d04f      	beq.n	80037f6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f000 fa96 	bl	8003c88 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	695b      	ldr	r3, [r3, #20]
 8003762:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003766:	2b40      	cmp	r3, #64	; 0x40
 8003768:	d141      	bne.n	80037ee <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	3314      	adds	r3, #20
 8003770:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003774:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003778:	e853 3f00 	ldrex	r3, [r3]
 800377c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003780:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003784:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003788:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	3314      	adds	r3, #20
 8003792:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003796:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800379a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800379e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80037a2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80037a6:	e841 2300 	strex	r3, r2, [r1]
 80037aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80037ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d1d9      	bne.n	800376a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d013      	beq.n	80037e6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037c2:	4a7d      	ldr	r2, [pc, #500]	; (80039b8 <HAL_UART_IRQHandler+0x3dc>)
 80037c4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ca:	4618      	mov	r0, r3
 80037cc:	f7fe fa83 	bl	8001cd6 <HAL_DMA_Abort_IT>
 80037d0:	4603      	mov	r3, r0
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d016      	beq.n	8003804 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037dc:	687a      	ldr	r2, [r7, #4]
 80037de:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80037e0:	4610      	mov	r0, r2
 80037e2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037e4:	e00e      	b.n	8003804 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f000 f990 	bl	8003b0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037ec:	e00a      	b.n	8003804 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f000 f98c 	bl	8003b0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037f4:	e006      	b.n	8003804 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f000 f988 	bl	8003b0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2200      	movs	r2, #0
 8003800:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003802:	e170      	b.n	8003ae6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003804:	bf00      	nop
    return;
 8003806:	e16e      	b.n	8003ae6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800380c:	2b01      	cmp	r3, #1
 800380e:	f040 814a 	bne.w	8003aa6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003812:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003816:	f003 0310 	and.w	r3, r3, #16
 800381a:	2b00      	cmp	r3, #0
 800381c:	f000 8143 	beq.w	8003aa6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003820:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003824:	f003 0310 	and.w	r3, r3, #16
 8003828:	2b00      	cmp	r3, #0
 800382a:	f000 813c 	beq.w	8003aa6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800382e:	2300      	movs	r3, #0
 8003830:	60bb      	str	r3, [r7, #8]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	60bb      	str	r3, [r7, #8]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	60bb      	str	r3, [r7, #8]
 8003842:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	695b      	ldr	r3, [r3, #20]
 800384a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800384e:	2b40      	cmp	r3, #64	; 0x40
 8003850:	f040 80b4 	bne.w	80039bc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003860:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003864:	2b00      	cmp	r3, #0
 8003866:	f000 8140 	beq.w	8003aea <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800386e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003872:	429a      	cmp	r2, r3
 8003874:	f080 8139 	bcs.w	8003aea <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800387e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003884:	69db      	ldr	r3, [r3, #28]
 8003886:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800388a:	f000 8088 	beq.w	800399e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	330c      	adds	r3, #12
 8003894:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003898:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800389c:	e853 3f00 	ldrex	r3, [r3]
 80038a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80038a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80038a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	330c      	adds	r3, #12
 80038b6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80038ba:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80038be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038c2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80038c6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80038ca:	e841 2300 	strex	r3, r2, [r1]
 80038ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80038d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d1d9      	bne.n	800388e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	3314      	adds	r3, #20
 80038e0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80038e4:	e853 3f00 	ldrex	r3, [r3]
 80038e8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80038ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80038ec:	f023 0301 	bic.w	r3, r3, #1
 80038f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	3314      	adds	r3, #20
 80038fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80038fe:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003902:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003904:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003906:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800390a:	e841 2300 	strex	r3, r2, [r1]
 800390e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003910:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003912:	2b00      	cmp	r3, #0
 8003914:	d1e1      	bne.n	80038da <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	3314      	adds	r3, #20
 800391c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800391e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003920:	e853 3f00 	ldrex	r3, [r3]
 8003924:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003926:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003928:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800392c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	3314      	adds	r3, #20
 8003936:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800393a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800393c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800393e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003940:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003942:	e841 2300 	strex	r3, r2, [r1]
 8003946:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003948:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800394a:	2b00      	cmp	r3, #0
 800394c:	d1e3      	bne.n	8003916 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2220      	movs	r2, #32
 8003952:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2200      	movs	r2, #0
 800395a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	330c      	adds	r3, #12
 8003962:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003964:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003966:	e853 3f00 	ldrex	r3, [r3]
 800396a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800396c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800396e:	f023 0310 	bic.w	r3, r3, #16
 8003972:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	330c      	adds	r3, #12
 800397c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003980:	65ba      	str	r2, [r7, #88]	; 0x58
 8003982:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003984:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003986:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003988:	e841 2300 	strex	r3, r2, [r1]
 800398c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800398e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003990:	2b00      	cmp	r3, #0
 8003992:	d1e3      	bne.n	800395c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003998:	4618      	mov	r0, r3
 800399a:	f7fe f92c 	bl	8001bf6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80039a6:	b29b      	uxth	r3, r3
 80039a8:	1ad3      	subs	r3, r2, r3
 80039aa:	b29b      	uxth	r3, r3
 80039ac:	4619      	mov	r1, r3
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f000 f8b6 	bl	8003b20 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80039b4:	e099      	b.n	8003aea <HAL_UART_IRQHandler+0x50e>
 80039b6:	bf00      	nop
 80039b8:	08003d4f 	.word	0x08003d4f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80039c4:	b29b      	uxth	r3, r3
 80039c6:	1ad3      	subs	r3, r2, r3
 80039c8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80039d0:	b29b      	uxth	r3, r3
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	f000 808b 	beq.w	8003aee <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80039d8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80039dc:	2b00      	cmp	r3, #0
 80039de:	f000 8086 	beq.w	8003aee <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	330c      	adds	r3, #12
 80039e8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039ec:	e853 3f00 	ldrex	r3, [r3]
 80039f0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80039f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039f4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80039f8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	330c      	adds	r3, #12
 8003a02:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003a06:	647a      	str	r2, [r7, #68]	; 0x44
 8003a08:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a0a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003a0c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003a0e:	e841 2300 	strex	r3, r2, [r1]
 8003a12:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003a14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d1e3      	bne.n	80039e2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	3314      	adds	r3, #20
 8003a20:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a24:	e853 3f00 	ldrex	r3, [r3]
 8003a28:	623b      	str	r3, [r7, #32]
   return(result);
 8003a2a:	6a3b      	ldr	r3, [r7, #32]
 8003a2c:	f023 0301 	bic.w	r3, r3, #1
 8003a30:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	3314      	adds	r3, #20
 8003a3a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003a3e:	633a      	str	r2, [r7, #48]	; 0x30
 8003a40:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a42:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003a44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a46:	e841 2300 	strex	r3, r2, [r1]
 8003a4a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d1e3      	bne.n	8003a1a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2220      	movs	r2, #32
 8003a56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	330c      	adds	r3, #12
 8003a66:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	e853 3f00 	ldrex	r3, [r3]
 8003a6e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	f023 0310 	bic.w	r3, r3, #16
 8003a76:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	330c      	adds	r3, #12
 8003a80:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003a84:	61fa      	str	r2, [r7, #28]
 8003a86:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a88:	69b9      	ldr	r1, [r7, #24]
 8003a8a:	69fa      	ldr	r2, [r7, #28]
 8003a8c:	e841 2300 	strex	r3, r2, [r1]
 8003a90:	617b      	str	r3, [r7, #20]
   return(result);
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d1e3      	bne.n	8003a60 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003a98:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003a9c:	4619      	mov	r1, r3
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f000 f83e 	bl	8003b20 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003aa4:	e023      	b.n	8003aee <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003aa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003aaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d009      	beq.n	8003ac6 <HAL_UART_IRQHandler+0x4ea>
 8003ab2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ab6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d003      	beq.n	8003ac6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f000 f959 	bl	8003d76 <UART_Transmit_IT>
    return;
 8003ac4:	e014      	b.n	8003af0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003ac6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003aca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d00e      	beq.n	8003af0 <HAL_UART_IRQHandler+0x514>
 8003ad2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ad6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d008      	beq.n	8003af0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f000 f999 	bl	8003e16 <UART_EndTransmit_IT>
    return;
 8003ae4:	e004      	b.n	8003af0 <HAL_UART_IRQHandler+0x514>
    return;
 8003ae6:	bf00      	nop
 8003ae8:	e002      	b.n	8003af0 <HAL_UART_IRQHandler+0x514>
      return;
 8003aea:	bf00      	nop
 8003aec:	e000      	b.n	8003af0 <HAL_UART_IRQHandler+0x514>
      return;
 8003aee:	bf00      	nop
  }
}
 8003af0:	37e8      	adds	r7, #232	; 0xe8
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}
 8003af6:	bf00      	nop

08003af8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b083      	sub	sp, #12
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003b00:	bf00      	nop
 8003b02:	370c      	adds	r7, #12
 8003b04:	46bd      	mov	sp, r7
 8003b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0a:	4770      	bx	lr

08003b0c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b083      	sub	sp, #12
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003b14:	bf00      	nop
 8003b16:	370c      	adds	r7, #12
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr

08003b20 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b083      	sub	sp, #12
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
 8003b28:	460b      	mov	r3, r1
 8003b2a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003b2c:	bf00      	nop
 8003b2e:	370c      	adds	r7, #12
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr

08003b38 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b090      	sub	sp, #64	; 0x40
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	60f8      	str	r0, [r7, #12]
 8003b40:	60b9      	str	r1, [r7, #8]
 8003b42:	603b      	str	r3, [r7, #0]
 8003b44:	4613      	mov	r3, r2
 8003b46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b48:	e050      	b.n	8003bec <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b50:	d04c      	beq.n	8003bec <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003b52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d007      	beq.n	8003b68 <UART_WaitOnFlagUntilTimeout+0x30>
 8003b58:	f7fd ff0c 	bl	8001974 <HAL_GetTick>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	1ad3      	subs	r3, r2, r3
 8003b62:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d241      	bcs.n	8003bec <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	330c      	adds	r3, #12
 8003b6e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b72:	e853 3f00 	ldrex	r3, [r3]
 8003b76:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b7a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003b7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	330c      	adds	r3, #12
 8003b86:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003b88:	637a      	str	r2, [r7, #52]	; 0x34
 8003b8a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b8c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003b8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b90:	e841 2300 	strex	r3, r2, [r1]
 8003b94:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d1e5      	bne.n	8003b68 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	3314      	adds	r3, #20
 8003ba2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	e853 3f00 	ldrex	r3, [r3]
 8003baa:	613b      	str	r3, [r7, #16]
   return(result);
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	f023 0301 	bic.w	r3, r3, #1
 8003bb2:	63bb      	str	r3, [r7, #56]	; 0x38
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	3314      	adds	r3, #20
 8003bba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003bbc:	623a      	str	r2, [r7, #32]
 8003bbe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bc0:	69f9      	ldr	r1, [r7, #28]
 8003bc2:	6a3a      	ldr	r2, [r7, #32]
 8003bc4:	e841 2300 	strex	r3, r2, [r1]
 8003bc8:	61bb      	str	r3, [r7, #24]
   return(result);
 8003bca:	69bb      	ldr	r3, [r7, #24]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d1e5      	bne.n	8003b9c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2220      	movs	r2, #32
 8003bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2220      	movs	r2, #32
 8003bdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2200      	movs	r2, #0
 8003be4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003be8:	2303      	movs	r3, #3
 8003bea:	e00f      	b.n	8003c0c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	4013      	ands	r3, r2
 8003bf6:	68ba      	ldr	r2, [r7, #8]
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	bf0c      	ite	eq
 8003bfc:	2301      	moveq	r3, #1
 8003bfe:	2300      	movne	r3, #0
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	461a      	mov	r2, r3
 8003c04:	79fb      	ldrb	r3, [r7, #7]
 8003c06:	429a      	cmp	r2, r3
 8003c08:	d09f      	beq.n	8003b4a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003c0a:	2300      	movs	r3, #0
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3740      	adds	r7, #64	; 0x40
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}

08003c14 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b085      	sub	sp, #20
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	60f8      	str	r0, [r7, #12]
 8003c1c:	60b9      	str	r1, [r7, #8]
 8003c1e:	4613      	mov	r3, r2
 8003c20:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	68ba      	ldr	r2, [r7, #8]
 8003c26:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	88fa      	ldrh	r2, [r7, #6]
 8003c2c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	88fa      	ldrh	r2, [r7, #6]
 8003c32:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2200      	movs	r2, #0
 8003c38:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2222      	movs	r2, #34	; 0x22
 8003c3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2200      	movs	r2, #0
 8003c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	68da      	ldr	r2, [r3, #12]
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c58:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	695a      	ldr	r2, [r3, #20]
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f042 0201 	orr.w	r2, r2, #1
 8003c68:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	68da      	ldr	r2, [r3, #12]
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f042 0220 	orr.w	r2, r2, #32
 8003c78:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003c7a:	2300      	movs	r3, #0
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3714      	adds	r7, #20
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr

08003c88 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b095      	sub	sp, #84	; 0x54
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	330c      	adds	r3, #12
 8003c96:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c9a:	e853 3f00 	ldrex	r3, [r3]
 8003c9e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ca2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003ca6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	330c      	adds	r3, #12
 8003cae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003cb0:	643a      	str	r2, [r7, #64]	; 0x40
 8003cb2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cb4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003cb6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003cb8:	e841 2300 	strex	r3, r2, [r1]
 8003cbc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d1e5      	bne.n	8003c90 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	3314      	adds	r3, #20
 8003cca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ccc:	6a3b      	ldr	r3, [r7, #32]
 8003cce:	e853 3f00 	ldrex	r3, [r3]
 8003cd2:	61fb      	str	r3, [r7, #28]
   return(result);
 8003cd4:	69fb      	ldr	r3, [r7, #28]
 8003cd6:	f023 0301 	bic.w	r3, r3, #1
 8003cda:	64bb      	str	r3, [r7, #72]	; 0x48
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	3314      	adds	r3, #20
 8003ce2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ce4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ce6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ce8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003cea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003cec:	e841 2300 	strex	r3, r2, [r1]
 8003cf0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d1e5      	bne.n	8003cc4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d119      	bne.n	8003d34 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	330c      	adds	r3, #12
 8003d06:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	e853 3f00 	ldrex	r3, [r3]
 8003d0e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	f023 0310 	bic.w	r3, r3, #16
 8003d16:	647b      	str	r3, [r7, #68]	; 0x44
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	330c      	adds	r3, #12
 8003d1e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003d20:	61ba      	str	r2, [r7, #24]
 8003d22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d24:	6979      	ldr	r1, [r7, #20]
 8003d26:	69ba      	ldr	r2, [r7, #24]
 8003d28:	e841 2300 	strex	r3, r2, [r1]
 8003d2c:	613b      	str	r3, [r7, #16]
   return(result);
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d1e5      	bne.n	8003d00 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2220      	movs	r2, #32
 8003d38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003d42:	bf00      	nop
 8003d44:	3754      	adds	r7, #84	; 0x54
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr

08003d4e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003d4e:	b580      	push	{r7, lr}
 8003d50:	b084      	sub	sp, #16
 8003d52:	af00      	add	r7, sp, #0
 8003d54:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d5a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2200      	movs	r2, #0
 8003d66:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003d68:	68f8      	ldr	r0, [r7, #12]
 8003d6a:	f7ff fecf 	bl	8003b0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d6e:	bf00      	nop
 8003d70:	3710      	adds	r7, #16
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}

08003d76 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003d76:	b480      	push	{r7}
 8003d78:	b085      	sub	sp, #20
 8003d7a:	af00      	add	r7, sp, #0
 8003d7c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d84:	b2db      	uxtb	r3, r3
 8003d86:	2b21      	cmp	r3, #33	; 0x21
 8003d88:	d13e      	bne.n	8003e08 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d92:	d114      	bne.n	8003dbe <UART_Transmit_IT+0x48>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	691b      	ldr	r3, [r3, #16]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d110      	bne.n	8003dbe <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6a1b      	ldr	r3, [r3, #32]
 8003da0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	881b      	ldrh	r3, [r3, #0]
 8003da6:	461a      	mov	r2, r3
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003db0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6a1b      	ldr	r3, [r3, #32]
 8003db6:	1c9a      	adds	r2, r3, #2
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	621a      	str	r2, [r3, #32]
 8003dbc:	e008      	b.n	8003dd0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6a1b      	ldr	r3, [r3, #32]
 8003dc2:	1c59      	adds	r1, r3, #1
 8003dc4:	687a      	ldr	r2, [r7, #4]
 8003dc6:	6211      	str	r1, [r2, #32]
 8003dc8:	781a      	ldrb	r2, [r3, #0]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003dd4:	b29b      	uxth	r3, r3
 8003dd6:	3b01      	subs	r3, #1
 8003dd8:	b29b      	uxth	r3, r3
 8003dda:	687a      	ldr	r2, [r7, #4]
 8003ddc:	4619      	mov	r1, r3
 8003dde:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d10f      	bne.n	8003e04 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	68da      	ldr	r2, [r3, #12]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003df2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	68da      	ldr	r2, [r3, #12]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e02:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003e04:	2300      	movs	r3, #0
 8003e06:	e000      	b.n	8003e0a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003e08:	2302      	movs	r3, #2
  }
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3714      	adds	r7, #20
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e14:	4770      	bx	lr

08003e16 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003e16:	b580      	push	{r7, lr}
 8003e18:	b082      	sub	sp, #8
 8003e1a:	af00      	add	r7, sp, #0
 8003e1c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	68da      	ldr	r2, [r3, #12]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e2c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2220      	movs	r2, #32
 8003e32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f7ff fe5e 	bl	8003af8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003e3c:	2300      	movs	r3, #0
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3708      	adds	r7, #8
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}

08003e46 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003e46:	b580      	push	{r7, lr}
 8003e48:	b08c      	sub	sp, #48	; 0x30
 8003e4a:	af00      	add	r7, sp, #0
 8003e4c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	2b22      	cmp	r3, #34	; 0x22
 8003e58:	f040 80ab 	bne.w	8003fb2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e64:	d117      	bne.n	8003e96 <UART_Receive_IT+0x50>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	691b      	ldr	r3, [r3, #16]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d113      	bne.n	8003e96 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e76:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	b29b      	uxth	r3, r3
 8003e80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e84:	b29a      	uxth	r2, r3
 8003e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e88:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e8e:	1c9a      	adds	r2, r3, #2
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	629a      	str	r2, [r3, #40]	; 0x28
 8003e94:	e026      	b.n	8003ee4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ea8:	d007      	beq.n	8003eba <UART_Receive_IT+0x74>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d10a      	bne.n	8003ec8 <UART_Receive_IT+0x82>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	691b      	ldr	r3, [r3, #16]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d106      	bne.n	8003ec8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	b2da      	uxtb	r2, r3
 8003ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ec4:	701a      	strb	r2, [r3, #0]
 8003ec6:	e008      	b.n	8003eda <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	b2db      	uxtb	r3, r3
 8003ed0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ed4:	b2da      	uxtb	r2, r3
 8003ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ed8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ede:	1c5a      	adds	r2, r3, #1
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ee8:	b29b      	uxth	r3, r3
 8003eea:	3b01      	subs	r3, #1
 8003eec:	b29b      	uxth	r3, r3
 8003eee:	687a      	ldr	r2, [r7, #4]
 8003ef0:	4619      	mov	r1, r3
 8003ef2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d15a      	bne.n	8003fae <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	68da      	ldr	r2, [r3, #12]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f022 0220 	bic.w	r2, r2, #32
 8003f06:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	68da      	ldr	r2, [r3, #12]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f16:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	695a      	ldr	r2, [r3, #20]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f022 0201 	bic.w	r2, r2, #1
 8003f26:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2220      	movs	r2, #32
 8003f2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d135      	bne.n	8003fa4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	330c      	adds	r3, #12
 8003f44:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	e853 3f00 	ldrex	r3, [r3]
 8003f4c:	613b      	str	r3, [r7, #16]
   return(result);
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	f023 0310 	bic.w	r3, r3, #16
 8003f54:	627b      	str	r3, [r7, #36]	; 0x24
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	330c      	adds	r3, #12
 8003f5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f5e:	623a      	str	r2, [r7, #32]
 8003f60:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f62:	69f9      	ldr	r1, [r7, #28]
 8003f64:	6a3a      	ldr	r2, [r7, #32]
 8003f66:	e841 2300 	strex	r3, r2, [r1]
 8003f6a:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f6c:	69bb      	ldr	r3, [r7, #24]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d1e5      	bne.n	8003f3e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 0310 	and.w	r3, r3, #16
 8003f7c:	2b10      	cmp	r3, #16
 8003f7e:	d10a      	bne.n	8003f96 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003f80:	2300      	movs	r3, #0
 8003f82:	60fb      	str	r3, [r7, #12]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	60fb      	str	r3, [r7, #12]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	60fb      	str	r3, [r7, #12]
 8003f94:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003f9a:	4619      	mov	r1, r3
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	f7ff fdbf 	bl	8003b20 <HAL_UARTEx_RxEventCallback>
 8003fa2:	e002      	b.n	8003faa <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003fa4:	6878      	ldr	r0, [r7, #4]
 8003fa6:	f7fd fa91 	bl	80014cc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003faa:	2300      	movs	r3, #0
 8003fac:	e002      	b.n	8003fb4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	e000      	b.n	8003fb4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003fb2:	2302      	movs	r3, #2
  }
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	3730      	adds	r7, #48	; 0x30
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}

08003fbc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003fbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fc0:	b09f      	sub	sp, #124	; 0x7c
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	691b      	ldr	r3, [r3, #16]
 8003fcc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003fd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fd2:	68d9      	ldr	r1, [r3, #12]
 8003fd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	ea40 0301 	orr.w	r3, r0, r1
 8003fdc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003fde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fe0:	689a      	ldr	r2, [r3, #8]
 8003fe2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fe4:	691b      	ldr	r3, [r3, #16]
 8003fe6:	431a      	orrs	r2, r3
 8003fe8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fea:	695b      	ldr	r3, [r3, #20]
 8003fec:	431a      	orrs	r2, r3
 8003fee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ff0:	69db      	ldr	r3, [r3, #28]
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003ff6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	68db      	ldr	r3, [r3, #12]
 8003ffc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004000:	f021 010c 	bic.w	r1, r1, #12
 8004004:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800400a:	430b      	orrs	r3, r1
 800400c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800400e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	695b      	ldr	r3, [r3, #20]
 8004014:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004018:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800401a:	6999      	ldr	r1, [r3, #24]
 800401c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	ea40 0301 	orr.w	r3, r0, r1
 8004024:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004026:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	4bc5      	ldr	r3, [pc, #788]	; (8004340 <UART_SetConfig+0x384>)
 800402c:	429a      	cmp	r2, r3
 800402e:	d004      	beq.n	800403a <UART_SetConfig+0x7e>
 8004030:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	4bc3      	ldr	r3, [pc, #780]	; (8004344 <UART_SetConfig+0x388>)
 8004036:	429a      	cmp	r2, r3
 8004038:	d103      	bne.n	8004042 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800403a:	f7ff f9ab 	bl	8003394 <HAL_RCC_GetPCLK2Freq>
 800403e:	6778      	str	r0, [r7, #116]	; 0x74
 8004040:	e002      	b.n	8004048 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004042:	f7ff f993 	bl	800336c <HAL_RCC_GetPCLK1Freq>
 8004046:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004048:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800404a:	69db      	ldr	r3, [r3, #28]
 800404c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004050:	f040 80b6 	bne.w	80041c0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004054:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004056:	461c      	mov	r4, r3
 8004058:	f04f 0500 	mov.w	r5, #0
 800405c:	4622      	mov	r2, r4
 800405e:	462b      	mov	r3, r5
 8004060:	1891      	adds	r1, r2, r2
 8004062:	6439      	str	r1, [r7, #64]	; 0x40
 8004064:	415b      	adcs	r3, r3
 8004066:	647b      	str	r3, [r7, #68]	; 0x44
 8004068:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800406c:	1912      	adds	r2, r2, r4
 800406e:	eb45 0303 	adc.w	r3, r5, r3
 8004072:	f04f 0000 	mov.w	r0, #0
 8004076:	f04f 0100 	mov.w	r1, #0
 800407a:	00d9      	lsls	r1, r3, #3
 800407c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004080:	00d0      	lsls	r0, r2, #3
 8004082:	4602      	mov	r2, r0
 8004084:	460b      	mov	r3, r1
 8004086:	1911      	adds	r1, r2, r4
 8004088:	6639      	str	r1, [r7, #96]	; 0x60
 800408a:	416b      	adcs	r3, r5
 800408c:	667b      	str	r3, [r7, #100]	; 0x64
 800408e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	461a      	mov	r2, r3
 8004094:	f04f 0300 	mov.w	r3, #0
 8004098:	1891      	adds	r1, r2, r2
 800409a:	63b9      	str	r1, [r7, #56]	; 0x38
 800409c:	415b      	adcs	r3, r3
 800409e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040a0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80040a4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80040a8:	f7fc fdfe 	bl	8000ca8 <__aeabi_uldivmod>
 80040ac:	4602      	mov	r2, r0
 80040ae:	460b      	mov	r3, r1
 80040b0:	4ba5      	ldr	r3, [pc, #660]	; (8004348 <UART_SetConfig+0x38c>)
 80040b2:	fba3 2302 	umull	r2, r3, r3, r2
 80040b6:	095b      	lsrs	r3, r3, #5
 80040b8:	011e      	lsls	r6, r3, #4
 80040ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040bc:	461c      	mov	r4, r3
 80040be:	f04f 0500 	mov.w	r5, #0
 80040c2:	4622      	mov	r2, r4
 80040c4:	462b      	mov	r3, r5
 80040c6:	1891      	adds	r1, r2, r2
 80040c8:	6339      	str	r1, [r7, #48]	; 0x30
 80040ca:	415b      	adcs	r3, r3
 80040cc:	637b      	str	r3, [r7, #52]	; 0x34
 80040ce:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80040d2:	1912      	adds	r2, r2, r4
 80040d4:	eb45 0303 	adc.w	r3, r5, r3
 80040d8:	f04f 0000 	mov.w	r0, #0
 80040dc:	f04f 0100 	mov.w	r1, #0
 80040e0:	00d9      	lsls	r1, r3, #3
 80040e2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80040e6:	00d0      	lsls	r0, r2, #3
 80040e8:	4602      	mov	r2, r0
 80040ea:	460b      	mov	r3, r1
 80040ec:	1911      	adds	r1, r2, r4
 80040ee:	65b9      	str	r1, [r7, #88]	; 0x58
 80040f0:	416b      	adcs	r3, r5
 80040f2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80040f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	461a      	mov	r2, r3
 80040fa:	f04f 0300 	mov.w	r3, #0
 80040fe:	1891      	adds	r1, r2, r2
 8004100:	62b9      	str	r1, [r7, #40]	; 0x28
 8004102:	415b      	adcs	r3, r3
 8004104:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004106:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800410a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800410e:	f7fc fdcb 	bl	8000ca8 <__aeabi_uldivmod>
 8004112:	4602      	mov	r2, r0
 8004114:	460b      	mov	r3, r1
 8004116:	4b8c      	ldr	r3, [pc, #560]	; (8004348 <UART_SetConfig+0x38c>)
 8004118:	fba3 1302 	umull	r1, r3, r3, r2
 800411c:	095b      	lsrs	r3, r3, #5
 800411e:	2164      	movs	r1, #100	; 0x64
 8004120:	fb01 f303 	mul.w	r3, r1, r3
 8004124:	1ad3      	subs	r3, r2, r3
 8004126:	00db      	lsls	r3, r3, #3
 8004128:	3332      	adds	r3, #50	; 0x32
 800412a:	4a87      	ldr	r2, [pc, #540]	; (8004348 <UART_SetConfig+0x38c>)
 800412c:	fba2 2303 	umull	r2, r3, r2, r3
 8004130:	095b      	lsrs	r3, r3, #5
 8004132:	005b      	lsls	r3, r3, #1
 8004134:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004138:	441e      	add	r6, r3
 800413a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800413c:	4618      	mov	r0, r3
 800413e:	f04f 0100 	mov.w	r1, #0
 8004142:	4602      	mov	r2, r0
 8004144:	460b      	mov	r3, r1
 8004146:	1894      	adds	r4, r2, r2
 8004148:	623c      	str	r4, [r7, #32]
 800414a:	415b      	adcs	r3, r3
 800414c:	627b      	str	r3, [r7, #36]	; 0x24
 800414e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004152:	1812      	adds	r2, r2, r0
 8004154:	eb41 0303 	adc.w	r3, r1, r3
 8004158:	f04f 0400 	mov.w	r4, #0
 800415c:	f04f 0500 	mov.w	r5, #0
 8004160:	00dd      	lsls	r5, r3, #3
 8004162:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004166:	00d4      	lsls	r4, r2, #3
 8004168:	4622      	mov	r2, r4
 800416a:	462b      	mov	r3, r5
 800416c:	1814      	adds	r4, r2, r0
 800416e:	653c      	str	r4, [r7, #80]	; 0x50
 8004170:	414b      	adcs	r3, r1
 8004172:	657b      	str	r3, [r7, #84]	; 0x54
 8004174:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	461a      	mov	r2, r3
 800417a:	f04f 0300 	mov.w	r3, #0
 800417e:	1891      	adds	r1, r2, r2
 8004180:	61b9      	str	r1, [r7, #24]
 8004182:	415b      	adcs	r3, r3
 8004184:	61fb      	str	r3, [r7, #28]
 8004186:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800418a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800418e:	f7fc fd8b 	bl	8000ca8 <__aeabi_uldivmod>
 8004192:	4602      	mov	r2, r0
 8004194:	460b      	mov	r3, r1
 8004196:	4b6c      	ldr	r3, [pc, #432]	; (8004348 <UART_SetConfig+0x38c>)
 8004198:	fba3 1302 	umull	r1, r3, r3, r2
 800419c:	095b      	lsrs	r3, r3, #5
 800419e:	2164      	movs	r1, #100	; 0x64
 80041a0:	fb01 f303 	mul.w	r3, r1, r3
 80041a4:	1ad3      	subs	r3, r2, r3
 80041a6:	00db      	lsls	r3, r3, #3
 80041a8:	3332      	adds	r3, #50	; 0x32
 80041aa:	4a67      	ldr	r2, [pc, #412]	; (8004348 <UART_SetConfig+0x38c>)
 80041ac:	fba2 2303 	umull	r2, r3, r2, r3
 80041b0:	095b      	lsrs	r3, r3, #5
 80041b2:	f003 0207 	and.w	r2, r3, #7
 80041b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4432      	add	r2, r6
 80041bc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80041be:	e0b9      	b.n	8004334 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80041c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041c2:	461c      	mov	r4, r3
 80041c4:	f04f 0500 	mov.w	r5, #0
 80041c8:	4622      	mov	r2, r4
 80041ca:	462b      	mov	r3, r5
 80041cc:	1891      	adds	r1, r2, r2
 80041ce:	6139      	str	r1, [r7, #16]
 80041d0:	415b      	adcs	r3, r3
 80041d2:	617b      	str	r3, [r7, #20]
 80041d4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80041d8:	1912      	adds	r2, r2, r4
 80041da:	eb45 0303 	adc.w	r3, r5, r3
 80041de:	f04f 0000 	mov.w	r0, #0
 80041e2:	f04f 0100 	mov.w	r1, #0
 80041e6:	00d9      	lsls	r1, r3, #3
 80041e8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80041ec:	00d0      	lsls	r0, r2, #3
 80041ee:	4602      	mov	r2, r0
 80041f0:	460b      	mov	r3, r1
 80041f2:	eb12 0804 	adds.w	r8, r2, r4
 80041f6:	eb43 0905 	adc.w	r9, r3, r5
 80041fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	4618      	mov	r0, r3
 8004200:	f04f 0100 	mov.w	r1, #0
 8004204:	f04f 0200 	mov.w	r2, #0
 8004208:	f04f 0300 	mov.w	r3, #0
 800420c:	008b      	lsls	r3, r1, #2
 800420e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004212:	0082      	lsls	r2, r0, #2
 8004214:	4640      	mov	r0, r8
 8004216:	4649      	mov	r1, r9
 8004218:	f7fc fd46 	bl	8000ca8 <__aeabi_uldivmod>
 800421c:	4602      	mov	r2, r0
 800421e:	460b      	mov	r3, r1
 8004220:	4b49      	ldr	r3, [pc, #292]	; (8004348 <UART_SetConfig+0x38c>)
 8004222:	fba3 2302 	umull	r2, r3, r3, r2
 8004226:	095b      	lsrs	r3, r3, #5
 8004228:	011e      	lsls	r6, r3, #4
 800422a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800422c:	4618      	mov	r0, r3
 800422e:	f04f 0100 	mov.w	r1, #0
 8004232:	4602      	mov	r2, r0
 8004234:	460b      	mov	r3, r1
 8004236:	1894      	adds	r4, r2, r2
 8004238:	60bc      	str	r4, [r7, #8]
 800423a:	415b      	adcs	r3, r3
 800423c:	60fb      	str	r3, [r7, #12]
 800423e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004242:	1812      	adds	r2, r2, r0
 8004244:	eb41 0303 	adc.w	r3, r1, r3
 8004248:	f04f 0400 	mov.w	r4, #0
 800424c:	f04f 0500 	mov.w	r5, #0
 8004250:	00dd      	lsls	r5, r3, #3
 8004252:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004256:	00d4      	lsls	r4, r2, #3
 8004258:	4622      	mov	r2, r4
 800425a:	462b      	mov	r3, r5
 800425c:	1814      	adds	r4, r2, r0
 800425e:	64bc      	str	r4, [r7, #72]	; 0x48
 8004260:	414b      	adcs	r3, r1
 8004262:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004264:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	4618      	mov	r0, r3
 800426a:	f04f 0100 	mov.w	r1, #0
 800426e:	f04f 0200 	mov.w	r2, #0
 8004272:	f04f 0300 	mov.w	r3, #0
 8004276:	008b      	lsls	r3, r1, #2
 8004278:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800427c:	0082      	lsls	r2, r0, #2
 800427e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004282:	f7fc fd11 	bl	8000ca8 <__aeabi_uldivmod>
 8004286:	4602      	mov	r2, r0
 8004288:	460b      	mov	r3, r1
 800428a:	4b2f      	ldr	r3, [pc, #188]	; (8004348 <UART_SetConfig+0x38c>)
 800428c:	fba3 1302 	umull	r1, r3, r3, r2
 8004290:	095b      	lsrs	r3, r3, #5
 8004292:	2164      	movs	r1, #100	; 0x64
 8004294:	fb01 f303 	mul.w	r3, r1, r3
 8004298:	1ad3      	subs	r3, r2, r3
 800429a:	011b      	lsls	r3, r3, #4
 800429c:	3332      	adds	r3, #50	; 0x32
 800429e:	4a2a      	ldr	r2, [pc, #168]	; (8004348 <UART_SetConfig+0x38c>)
 80042a0:	fba2 2303 	umull	r2, r3, r2, r3
 80042a4:	095b      	lsrs	r3, r3, #5
 80042a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042aa:	441e      	add	r6, r3
 80042ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80042ae:	4618      	mov	r0, r3
 80042b0:	f04f 0100 	mov.w	r1, #0
 80042b4:	4602      	mov	r2, r0
 80042b6:	460b      	mov	r3, r1
 80042b8:	1894      	adds	r4, r2, r2
 80042ba:	603c      	str	r4, [r7, #0]
 80042bc:	415b      	adcs	r3, r3
 80042be:	607b      	str	r3, [r7, #4]
 80042c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80042c4:	1812      	adds	r2, r2, r0
 80042c6:	eb41 0303 	adc.w	r3, r1, r3
 80042ca:	f04f 0400 	mov.w	r4, #0
 80042ce:	f04f 0500 	mov.w	r5, #0
 80042d2:	00dd      	lsls	r5, r3, #3
 80042d4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80042d8:	00d4      	lsls	r4, r2, #3
 80042da:	4622      	mov	r2, r4
 80042dc:	462b      	mov	r3, r5
 80042de:	eb12 0a00 	adds.w	sl, r2, r0
 80042e2:	eb43 0b01 	adc.w	fp, r3, r1
 80042e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	4618      	mov	r0, r3
 80042ec:	f04f 0100 	mov.w	r1, #0
 80042f0:	f04f 0200 	mov.w	r2, #0
 80042f4:	f04f 0300 	mov.w	r3, #0
 80042f8:	008b      	lsls	r3, r1, #2
 80042fa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80042fe:	0082      	lsls	r2, r0, #2
 8004300:	4650      	mov	r0, sl
 8004302:	4659      	mov	r1, fp
 8004304:	f7fc fcd0 	bl	8000ca8 <__aeabi_uldivmod>
 8004308:	4602      	mov	r2, r0
 800430a:	460b      	mov	r3, r1
 800430c:	4b0e      	ldr	r3, [pc, #56]	; (8004348 <UART_SetConfig+0x38c>)
 800430e:	fba3 1302 	umull	r1, r3, r3, r2
 8004312:	095b      	lsrs	r3, r3, #5
 8004314:	2164      	movs	r1, #100	; 0x64
 8004316:	fb01 f303 	mul.w	r3, r1, r3
 800431a:	1ad3      	subs	r3, r2, r3
 800431c:	011b      	lsls	r3, r3, #4
 800431e:	3332      	adds	r3, #50	; 0x32
 8004320:	4a09      	ldr	r2, [pc, #36]	; (8004348 <UART_SetConfig+0x38c>)
 8004322:	fba2 2303 	umull	r2, r3, r2, r3
 8004326:	095b      	lsrs	r3, r3, #5
 8004328:	f003 020f 	and.w	r2, r3, #15
 800432c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4432      	add	r2, r6
 8004332:	609a      	str	r2, [r3, #8]
}
 8004334:	bf00      	nop
 8004336:	377c      	adds	r7, #124	; 0x7c
 8004338:	46bd      	mov	sp, r7
 800433a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800433e:	bf00      	nop
 8004340:	40011000 	.word	0x40011000
 8004344:	40011400 	.word	0x40011400
 8004348:	51eb851f 	.word	0x51eb851f

0800434c <__errno>:
 800434c:	4b01      	ldr	r3, [pc, #4]	; (8004354 <__errno+0x8>)
 800434e:	6818      	ldr	r0, [r3, #0]
 8004350:	4770      	bx	lr
 8004352:	bf00      	nop
 8004354:	2000000c 	.word	0x2000000c

08004358 <__libc_init_array>:
 8004358:	b570      	push	{r4, r5, r6, lr}
 800435a:	4d0d      	ldr	r5, [pc, #52]	; (8004390 <__libc_init_array+0x38>)
 800435c:	4c0d      	ldr	r4, [pc, #52]	; (8004394 <__libc_init_array+0x3c>)
 800435e:	1b64      	subs	r4, r4, r5
 8004360:	10a4      	asrs	r4, r4, #2
 8004362:	2600      	movs	r6, #0
 8004364:	42a6      	cmp	r6, r4
 8004366:	d109      	bne.n	800437c <__libc_init_array+0x24>
 8004368:	4d0b      	ldr	r5, [pc, #44]	; (8004398 <__libc_init_array+0x40>)
 800436a:	4c0c      	ldr	r4, [pc, #48]	; (800439c <__libc_init_array+0x44>)
 800436c:	f004 fc44 	bl	8008bf8 <_init>
 8004370:	1b64      	subs	r4, r4, r5
 8004372:	10a4      	asrs	r4, r4, #2
 8004374:	2600      	movs	r6, #0
 8004376:	42a6      	cmp	r6, r4
 8004378:	d105      	bne.n	8004386 <__libc_init_array+0x2e>
 800437a:	bd70      	pop	{r4, r5, r6, pc}
 800437c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004380:	4798      	blx	r3
 8004382:	3601      	adds	r6, #1
 8004384:	e7ee      	b.n	8004364 <__libc_init_array+0xc>
 8004386:	f855 3b04 	ldr.w	r3, [r5], #4
 800438a:	4798      	blx	r3
 800438c:	3601      	adds	r6, #1
 800438e:	e7f2      	b.n	8004376 <__libc_init_array+0x1e>
 8004390:	08009104 	.word	0x08009104
 8004394:	08009104 	.word	0x08009104
 8004398:	08009104 	.word	0x08009104
 800439c:	08009108 	.word	0x08009108

080043a0 <memset>:
 80043a0:	4402      	add	r2, r0
 80043a2:	4603      	mov	r3, r0
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d100      	bne.n	80043aa <memset+0xa>
 80043a8:	4770      	bx	lr
 80043aa:	f803 1b01 	strb.w	r1, [r3], #1
 80043ae:	e7f9      	b.n	80043a4 <memset+0x4>

080043b0 <__cvt>:
 80043b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80043b4:	ec55 4b10 	vmov	r4, r5, d0
 80043b8:	2d00      	cmp	r5, #0
 80043ba:	460e      	mov	r6, r1
 80043bc:	4619      	mov	r1, r3
 80043be:	462b      	mov	r3, r5
 80043c0:	bfbb      	ittet	lt
 80043c2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80043c6:	461d      	movlt	r5, r3
 80043c8:	2300      	movge	r3, #0
 80043ca:	232d      	movlt	r3, #45	; 0x2d
 80043cc:	700b      	strb	r3, [r1, #0]
 80043ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80043d0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80043d4:	4691      	mov	r9, r2
 80043d6:	f023 0820 	bic.w	r8, r3, #32
 80043da:	bfbc      	itt	lt
 80043dc:	4622      	movlt	r2, r4
 80043de:	4614      	movlt	r4, r2
 80043e0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80043e4:	d005      	beq.n	80043f2 <__cvt+0x42>
 80043e6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80043ea:	d100      	bne.n	80043ee <__cvt+0x3e>
 80043ec:	3601      	adds	r6, #1
 80043ee:	2102      	movs	r1, #2
 80043f0:	e000      	b.n	80043f4 <__cvt+0x44>
 80043f2:	2103      	movs	r1, #3
 80043f4:	ab03      	add	r3, sp, #12
 80043f6:	9301      	str	r3, [sp, #4]
 80043f8:	ab02      	add	r3, sp, #8
 80043fa:	9300      	str	r3, [sp, #0]
 80043fc:	ec45 4b10 	vmov	d0, r4, r5
 8004400:	4653      	mov	r3, sl
 8004402:	4632      	mov	r2, r6
 8004404:	f001 fdb4 	bl	8005f70 <_dtoa_r>
 8004408:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800440c:	4607      	mov	r7, r0
 800440e:	d102      	bne.n	8004416 <__cvt+0x66>
 8004410:	f019 0f01 	tst.w	r9, #1
 8004414:	d022      	beq.n	800445c <__cvt+0xac>
 8004416:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800441a:	eb07 0906 	add.w	r9, r7, r6
 800441e:	d110      	bne.n	8004442 <__cvt+0x92>
 8004420:	783b      	ldrb	r3, [r7, #0]
 8004422:	2b30      	cmp	r3, #48	; 0x30
 8004424:	d10a      	bne.n	800443c <__cvt+0x8c>
 8004426:	2200      	movs	r2, #0
 8004428:	2300      	movs	r3, #0
 800442a:	4620      	mov	r0, r4
 800442c:	4629      	mov	r1, r5
 800442e:	f7fc fb5b 	bl	8000ae8 <__aeabi_dcmpeq>
 8004432:	b918      	cbnz	r0, 800443c <__cvt+0x8c>
 8004434:	f1c6 0601 	rsb	r6, r6, #1
 8004438:	f8ca 6000 	str.w	r6, [sl]
 800443c:	f8da 3000 	ldr.w	r3, [sl]
 8004440:	4499      	add	r9, r3
 8004442:	2200      	movs	r2, #0
 8004444:	2300      	movs	r3, #0
 8004446:	4620      	mov	r0, r4
 8004448:	4629      	mov	r1, r5
 800444a:	f7fc fb4d 	bl	8000ae8 <__aeabi_dcmpeq>
 800444e:	b108      	cbz	r0, 8004454 <__cvt+0xa4>
 8004450:	f8cd 900c 	str.w	r9, [sp, #12]
 8004454:	2230      	movs	r2, #48	; 0x30
 8004456:	9b03      	ldr	r3, [sp, #12]
 8004458:	454b      	cmp	r3, r9
 800445a:	d307      	bcc.n	800446c <__cvt+0xbc>
 800445c:	9b03      	ldr	r3, [sp, #12]
 800445e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004460:	1bdb      	subs	r3, r3, r7
 8004462:	4638      	mov	r0, r7
 8004464:	6013      	str	r3, [r2, #0]
 8004466:	b004      	add	sp, #16
 8004468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800446c:	1c59      	adds	r1, r3, #1
 800446e:	9103      	str	r1, [sp, #12]
 8004470:	701a      	strb	r2, [r3, #0]
 8004472:	e7f0      	b.n	8004456 <__cvt+0xa6>

08004474 <__exponent>:
 8004474:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004476:	4603      	mov	r3, r0
 8004478:	2900      	cmp	r1, #0
 800447a:	bfb8      	it	lt
 800447c:	4249      	neglt	r1, r1
 800447e:	f803 2b02 	strb.w	r2, [r3], #2
 8004482:	bfb4      	ite	lt
 8004484:	222d      	movlt	r2, #45	; 0x2d
 8004486:	222b      	movge	r2, #43	; 0x2b
 8004488:	2909      	cmp	r1, #9
 800448a:	7042      	strb	r2, [r0, #1]
 800448c:	dd2a      	ble.n	80044e4 <__exponent+0x70>
 800448e:	f10d 0407 	add.w	r4, sp, #7
 8004492:	46a4      	mov	ip, r4
 8004494:	270a      	movs	r7, #10
 8004496:	46a6      	mov	lr, r4
 8004498:	460a      	mov	r2, r1
 800449a:	fb91 f6f7 	sdiv	r6, r1, r7
 800449e:	fb07 1516 	mls	r5, r7, r6, r1
 80044a2:	3530      	adds	r5, #48	; 0x30
 80044a4:	2a63      	cmp	r2, #99	; 0x63
 80044a6:	f104 34ff 	add.w	r4, r4, #4294967295
 80044aa:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80044ae:	4631      	mov	r1, r6
 80044b0:	dcf1      	bgt.n	8004496 <__exponent+0x22>
 80044b2:	3130      	adds	r1, #48	; 0x30
 80044b4:	f1ae 0502 	sub.w	r5, lr, #2
 80044b8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80044bc:	1c44      	adds	r4, r0, #1
 80044be:	4629      	mov	r1, r5
 80044c0:	4561      	cmp	r1, ip
 80044c2:	d30a      	bcc.n	80044da <__exponent+0x66>
 80044c4:	f10d 0209 	add.w	r2, sp, #9
 80044c8:	eba2 020e 	sub.w	r2, r2, lr
 80044cc:	4565      	cmp	r5, ip
 80044ce:	bf88      	it	hi
 80044d0:	2200      	movhi	r2, #0
 80044d2:	4413      	add	r3, r2
 80044d4:	1a18      	subs	r0, r3, r0
 80044d6:	b003      	add	sp, #12
 80044d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80044da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80044de:	f804 2f01 	strb.w	r2, [r4, #1]!
 80044e2:	e7ed      	b.n	80044c0 <__exponent+0x4c>
 80044e4:	2330      	movs	r3, #48	; 0x30
 80044e6:	3130      	adds	r1, #48	; 0x30
 80044e8:	7083      	strb	r3, [r0, #2]
 80044ea:	70c1      	strb	r1, [r0, #3]
 80044ec:	1d03      	adds	r3, r0, #4
 80044ee:	e7f1      	b.n	80044d4 <__exponent+0x60>

080044f0 <_printf_float>:
 80044f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044f4:	ed2d 8b02 	vpush	{d8}
 80044f8:	b08d      	sub	sp, #52	; 0x34
 80044fa:	460c      	mov	r4, r1
 80044fc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004500:	4616      	mov	r6, r2
 8004502:	461f      	mov	r7, r3
 8004504:	4605      	mov	r5, r0
 8004506:	f002 fe8f 	bl	8007228 <_localeconv_r>
 800450a:	f8d0 a000 	ldr.w	sl, [r0]
 800450e:	4650      	mov	r0, sl
 8004510:	f7fb fe6e 	bl	80001f0 <strlen>
 8004514:	2300      	movs	r3, #0
 8004516:	930a      	str	r3, [sp, #40]	; 0x28
 8004518:	6823      	ldr	r3, [r4, #0]
 800451a:	9305      	str	r3, [sp, #20]
 800451c:	f8d8 3000 	ldr.w	r3, [r8]
 8004520:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004524:	3307      	adds	r3, #7
 8004526:	f023 0307 	bic.w	r3, r3, #7
 800452a:	f103 0208 	add.w	r2, r3, #8
 800452e:	f8c8 2000 	str.w	r2, [r8]
 8004532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004536:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800453a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800453e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004542:	9307      	str	r3, [sp, #28]
 8004544:	f8cd 8018 	str.w	r8, [sp, #24]
 8004548:	ee08 0a10 	vmov	s16, r0
 800454c:	4b9f      	ldr	r3, [pc, #636]	; (80047cc <_printf_float+0x2dc>)
 800454e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004552:	f04f 32ff 	mov.w	r2, #4294967295
 8004556:	f7fc faf9 	bl	8000b4c <__aeabi_dcmpun>
 800455a:	bb88      	cbnz	r0, 80045c0 <_printf_float+0xd0>
 800455c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004560:	4b9a      	ldr	r3, [pc, #616]	; (80047cc <_printf_float+0x2dc>)
 8004562:	f04f 32ff 	mov.w	r2, #4294967295
 8004566:	f7fc fad3 	bl	8000b10 <__aeabi_dcmple>
 800456a:	bb48      	cbnz	r0, 80045c0 <_printf_float+0xd0>
 800456c:	2200      	movs	r2, #0
 800456e:	2300      	movs	r3, #0
 8004570:	4640      	mov	r0, r8
 8004572:	4649      	mov	r1, r9
 8004574:	f7fc fac2 	bl	8000afc <__aeabi_dcmplt>
 8004578:	b110      	cbz	r0, 8004580 <_printf_float+0x90>
 800457a:	232d      	movs	r3, #45	; 0x2d
 800457c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004580:	4b93      	ldr	r3, [pc, #588]	; (80047d0 <_printf_float+0x2e0>)
 8004582:	4894      	ldr	r0, [pc, #592]	; (80047d4 <_printf_float+0x2e4>)
 8004584:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004588:	bf94      	ite	ls
 800458a:	4698      	movls	r8, r3
 800458c:	4680      	movhi	r8, r0
 800458e:	2303      	movs	r3, #3
 8004590:	6123      	str	r3, [r4, #16]
 8004592:	9b05      	ldr	r3, [sp, #20]
 8004594:	f023 0204 	bic.w	r2, r3, #4
 8004598:	6022      	str	r2, [r4, #0]
 800459a:	f04f 0900 	mov.w	r9, #0
 800459e:	9700      	str	r7, [sp, #0]
 80045a0:	4633      	mov	r3, r6
 80045a2:	aa0b      	add	r2, sp, #44	; 0x2c
 80045a4:	4621      	mov	r1, r4
 80045a6:	4628      	mov	r0, r5
 80045a8:	f000 f9d8 	bl	800495c <_printf_common>
 80045ac:	3001      	adds	r0, #1
 80045ae:	f040 8090 	bne.w	80046d2 <_printf_float+0x1e2>
 80045b2:	f04f 30ff 	mov.w	r0, #4294967295
 80045b6:	b00d      	add	sp, #52	; 0x34
 80045b8:	ecbd 8b02 	vpop	{d8}
 80045bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045c0:	4642      	mov	r2, r8
 80045c2:	464b      	mov	r3, r9
 80045c4:	4640      	mov	r0, r8
 80045c6:	4649      	mov	r1, r9
 80045c8:	f7fc fac0 	bl	8000b4c <__aeabi_dcmpun>
 80045cc:	b140      	cbz	r0, 80045e0 <_printf_float+0xf0>
 80045ce:	464b      	mov	r3, r9
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	bfbc      	itt	lt
 80045d4:	232d      	movlt	r3, #45	; 0x2d
 80045d6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80045da:	487f      	ldr	r0, [pc, #508]	; (80047d8 <_printf_float+0x2e8>)
 80045dc:	4b7f      	ldr	r3, [pc, #508]	; (80047dc <_printf_float+0x2ec>)
 80045de:	e7d1      	b.n	8004584 <_printf_float+0x94>
 80045e0:	6863      	ldr	r3, [r4, #4]
 80045e2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80045e6:	9206      	str	r2, [sp, #24]
 80045e8:	1c5a      	adds	r2, r3, #1
 80045ea:	d13f      	bne.n	800466c <_printf_float+0x17c>
 80045ec:	2306      	movs	r3, #6
 80045ee:	6063      	str	r3, [r4, #4]
 80045f0:	9b05      	ldr	r3, [sp, #20]
 80045f2:	6861      	ldr	r1, [r4, #4]
 80045f4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80045f8:	2300      	movs	r3, #0
 80045fa:	9303      	str	r3, [sp, #12]
 80045fc:	ab0a      	add	r3, sp, #40	; 0x28
 80045fe:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004602:	ab09      	add	r3, sp, #36	; 0x24
 8004604:	ec49 8b10 	vmov	d0, r8, r9
 8004608:	9300      	str	r3, [sp, #0]
 800460a:	6022      	str	r2, [r4, #0]
 800460c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004610:	4628      	mov	r0, r5
 8004612:	f7ff fecd 	bl	80043b0 <__cvt>
 8004616:	9b06      	ldr	r3, [sp, #24]
 8004618:	9909      	ldr	r1, [sp, #36]	; 0x24
 800461a:	2b47      	cmp	r3, #71	; 0x47
 800461c:	4680      	mov	r8, r0
 800461e:	d108      	bne.n	8004632 <_printf_float+0x142>
 8004620:	1cc8      	adds	r0, r1, #3
 8004622:	db02      	blt.n	800462a <_printf_float+0x13a>
 8004624:	6863      	ldr	r3, [r4, #4]
 8004626:	4299      	cmp	r1, r3
 8004628:	dd41      	ble.n	80046ae <_printf_float+0x1be>
 800462a:	f1ab 0b02 	sub.w	fp, fp, #2
 800462e:	fa5f fb8b 	uxtb.w	fp, fp
 8004632:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004636:	d820      	bhi.n	800467a <_printf_float+0x18a>
 8004638:	3901      	subs	r1, #1
 800463a:	465a      	mov	r2, fp
 800463c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004640:	9109      	str	r1, [sp, #36]	; 0x24
 8004642:	f7ff ff17 	bl	8004474 <__exponent>
 8004646:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004648:	1813      	adds	r3, r2, r0
 800464a:	2a01      	cmp	r2, #1
 800464c:	4681      	mov	r9, r0
 800464e:	6123      	str	r3, [r4, #16]
 8004650:	dc02      	bgt.n	8004658 <_printf_float+0x168>
 8004652:	6822      	ldr	r2, [r4, #0]
 8004654:	07d2      	lsls	r2, r2, #31
 8004656:	d501      	bpl.n	800465c <_printf_float+0x16c>
 8004658:	3301      	adds	r3, #1
 800465a:	6123      	str	r3, [r4, #16]
 800465c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004660:	2b00      	cmp	r3, #0
 8004662:	d09c      	beq.n	800459e <_printf_float+0xae>
 8004664:	232d      	movs	r3, #45	; 0x2d
 8004666:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800466a:	e798      	b.n	800459e <_printf_float+0xae>
 800466c:	9a06      	ldr	r2, [sp, #24]
 800466e:	2a47      	cmp	r2, #71	; 0x47
 8004670:	d1be      	bne.n	80045f0 <_printf_float+0x100>
 8004672:	2b00      	cmp	r3, #0
 8004674:	d1bc      	bne.n	80045f0 <_printf_float+0x100>
 8004676:	2301      	movs	r3, #1
 8004678:	e7b9      	b.n	80045ee <_printf_float+0xfe>
 800467a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800467e:	d118      	bne.n	80046b2 <_printf_float+0x1c2>
 8004680:	2900      	cmp	r1, #0
 8004682:	6863      	ldr	r3, [r4, #4]
 8004684:	dd0b      	ble.n	800469e <_printf_float+0x1ae>
 8004686:	6121      	str	r1, [r4, #16]
 8004688:	b913      	cbnz	r3, 8004690 <_printf_float+0x1a0>
 800468a:	6822      	ldr	r2, [r4, #0]
 800468c:	07d0      	lsls	r0, r2, #31
 800468e:	d502      	bpl.n	8004696 <_printf_float+0x1a6>
 8004690:	3301      	adds	r3, #1
 8004692:	440b      	add	r3, r1
 8004694:	6123      	str	r3, [r4, #16]
 8004696:	65a1      	str	r1, [r4, #88]	; 0x58
 8004698:	f04f 0900 	mov.w	r9, #0
 800469c:	e7de      	b.n	800465c <_printf_float+0x16c>
 800469e:	b913      	cbnz	r3, 80046a6 <_printf_float+0x1b6>
 80046a0:	6822      	ldr	r2, [r4, #0]
 80046a2:	07d2      	lsls	r2, r2, #31
 80046a4:	d501      	bpl.n	80046aa <_printf_float+0x1ba>
 80046a6:	3302      	adds	r3, #2
 80046a8:	e7f4      	b.n	8004694 <_printf_float+0x1a4>
 80046aa:	2301      	movs	r3, #1
 80046ac:	e7f2      	b.n	8004694 <_printf_float+0x1a4>
 80046ae:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80046b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80046b4:	4299      	cmp	r1, r3
 80046b6:	db05      	blt.n	80046c4 <_printf_float+0x1d4>
 80046b8:	6823      	ldr	r3, [r4, #0]
 80046ba:	6121      	str	r1, [r4, #16]
 80046bc:	07d8      	lsls	r0, r3, #31
 80046be:	d5ea      	bpl.n	8004696 <_printf_float+0x1a6>
 80046c0:	1c4b      	adds	r3, r1, #1
 80046c2:	e7e7      	b.n	8004694 <_printf_float+0x1a4>
 80046c4:	2900      	cmp	r1, #0
 80046c6:	bfd4      	ite	le
 80046c8:	f1c1 0202 	rsble	r2, r1, #2
 80046cc:	2201      	movgt	r2, #1
 80046ce:	4413      	add	r3, r2
 80046d0:	e7e0      	b.n	8004694 <_printf_float+0x1a4>
 80046d2:	6823      	ldr	r3, [r4, #0]
 80046d4:	055a      	lsls	r2, r3, #21
 80046d6:	d407      	bmi.n	80046e8 <_printf_float+0x1f8>
 80046d8:	6923      	ldr	r3, [r4, #16]
 80046da:	4642      	mov	r2, r8
 80046dc:	4631      	mov	r1, r6
 80046de:	4628      	mov	r0, r5
 80046e0:	47b8      	blx	r7
 80046e2:	3001      	adds	r0, #1
 80046e4:	d12c      	bne.n	8004740 <_printf_float+0x250>
 80046e6:	e764      	b.n	80045b2 <_printf_float+0xc2>
 80046e8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80046ec:	f240 80e0 	bls.w	80048b0 <_printf_float+0x3c0>
 80046f0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80046f4:	2200      	movs	r2, #0
 80046f6:	2300      	movs	r3, #0
 80046f8:	f7fc f9f6 	bl	8000ae8 <__aeabi_dcmpeq>
 80046fc:	2800      	cmp	r0, #0
 80046fe:	d034      	beq.n	800476a <_printf_float+0x27a>
 8004700:	4a37      	ldr	r2, [pc, #220]	; (80047e0 <_printf_float+0x2f0>)
 8004702:	2301      	movs	r3, #1
 8004704:	4631      	mov	r1, r6
 8004706:	4628      	mov	r0, r5
 8004708:	47b8      	blx	r7
 800470a:	3001      	adds	r0, #1
 800470c:	f43f af51 	beq.w	80045b2 <_printf_float+0xc2>
 8004710:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004714:	429a      	cmp	r2, r3
 8004716:	db02      	blt.n	800471e <_printf_float+0x22e>
 8004718:	6823      	ldr	r3, [r4, #0]
 800471a:	07d8      	lsls	r0, r3, #31
 800471c:	d510      	bpl.n	8004740 <_printf_float+0x250>
 800471e:	ee18 3a10 	vmov	r3, s16
 8004722:	4652      	mov	r2, sl
 8004724:	4631      	mov	r1, r6
 8004726:	4628      	mov	r0, r5
 8004728:	47b8      	blx	r7
 800472a:	3001      	adds	r0, #1
 800472c:	f43f af41 	beq.w	80045b2 <_printf_float+0xc2>
 8004730:	f04f 0800 	mov.w	r8, #0
 8004734:	f104 091a 	add.w	r9, r4, #26
 8004738:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800473a:	3b01      	subs	r3, #1
 800473c:	4543      	cmp	r3, r8
 800473e:	dc09      	bgt.n	8004754 <_printf_float+0x264>
 8004740:	6823      	ldr	r3, [r4, #0]
 8004742:	079b      	lsls	r3, r3, #30
 8004744:	f100 8105 	bmi.w	8004952 <_printf_float+0x462>
 8004748:	68e0      	ldr	r0, [r4, #12]
 800474a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800474c:	4298      	cmp	r0, r3
 800474e:	bfb8      	it	lt
 8004750:	4618      	movlt	r0, r3
 8004752:	e730      	b.n	80045b6 <_printf_float+0xc6>
 8004754:	2301      	movs	r3, #1
 8004756:	464a      	mov	r2, r9
 8004758:	4631      	mov	r1, r6
 800475a:	4628      	mov	r0, r5
 800475c:	47b8      	blx	r7
 800475e:	3001      	adds	r0, #1
 8004760:	f43f af27 	beq.w	80045b2 <_printf_float+0xc2>
 8004764:	f108 0801 	add.w	r8, r8, #1
 8004768:	e7e6      	b.n	8004738 <_printf_float+0x248>
 800476a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800476c:	2b00      	cmp	r3, #0
 800476e:	dc39      	bgt.n	80047e4 <_printf_float+0x2f4>
 8004770:	4a1b      	ldr	r2, [pc, #108]	; (80047e0 <_printf_float+0x2f0>)
 8004772:	2301      	movs	r3, #1
 8004774:	4631      	mov	r1, r6
 8004776:	4628      	mov	r0, r5
 8004778:	47b8      	blx	r7
 800477a:	3001      	adds	r0, #1
 800477c:	f43f af19 	beq.w	80045b2 <_printf_float+0xc2>
 8004780:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004784:	4313      	orrs	r3, r2
 8004786:	d102      	bne.n	800478e <_printf_float+0x29e>
 8004788:	6823      	ldr	r3, [r4, #0]
 800478a:	07d9      	lsls	r1, r3, #31
 800478c:	d5d8      	bpl.n	8004740 <_printf_float+0x250>
 800478e:	ee18 3a10 	vmov	r3, s16
 8004792:	4652      	mov	r2, sl
 8004794:	4631      	mov	r1, r6
 8004796:	4628      	mov	r0, r5
 8004798:	47b8      	blx	r7
 800479a:	3001      	adds	r0, #1
 800479c:	f43f af09 	beq.w	80045b2 <_printf_float+0xc2>
 80047a0:	f04f 0900 	mov.w	r9, #0
 80047a4:	f104 0a1a 	add.w	sl, r4, #26
 80047a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047aa:	425b      	negs	r3, r3
 80047ac:	454b      	cmp	r3, r9
 80047ae:	dc01      	bgt.n	80047b4 <_printf_float+0x2c4>
 80047b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80047b2:	e792      	b.n	80046da <_printf_float+0x1ea>
 80047b4:	2301      	movs	r3, #1
 80047b6:	4652      	mov	r2, sl
 80047b8:	4631      	mov	r1, r6
 80047ba:	4628      	mov	r0, r5
 80047bc:	47b8      	blx	r7
 80047be:	3001      	adds	r0, #1
 80047c0:	f43f aef7 	beq.w	80045b2 <_printf_float+0xc2>
 80047c4:	f109 0901 	add.w	r9, r9, #1
 80047c8:	e7ee      	b.n	80047a8 <_printf_float+0x2b8>
 80047ca:	bf00      	nop
 80047cc:	7fefffff 	.word	0x7fefffff
 80047d0:	08008c48 	.word	0x08008c48
 80047d4:	08008c4c 	.word	0x08008c4c
 80047d8:	08008c54 	.word	0x08008c54
 80047dc:	08008c50 	.word	0x08008c50
 80047e0:	08008c58 	.word	0x08008c58
 80047e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80047e6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80047e8:	429a      	cmp	r2, r3
 80047ea:	bfa8      	it	ge
 80047ec:	461a      	movge	r2, r3
 80047ee:	2a00      	cmp	r2, #0
 80047f0:	4691      	mov	r9, r2
 80047f2:	dc37      	bgt.n	8004864 <_printf_float+0x374>
 80047f4:	f04f 0b00 	mov.w	fp, #0
 80047f8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80047fc:	f104 021a 	add.w	r2, r4, #26
 8004800:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004802:	9305      	str	r3, [sp, #20]
 8004804:	eba3 0309 	sub.w	r3, r3, r9
 8004808:	455b      	cmp	r3, fp
 800480a:	dc33      	bgt.n	8004874 <_printf_float+0x384>
 800480c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004810:	429a      	cmp	r2, r3
 8004812:	db3b      	blt.n	800488c <_printf_float+0x39c>
 8004814:	6823      	ldr	r3, [r4, #0]
 8004816:	07da      	lsls	r2, r3, #31
 8004818:	d438      	bmi.n	800488c <_printf_float+0x39c>
 800481a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800481c:	9b05      	ldr	r3, [sp, #20]
 800481e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004820:	1ad3      	subs	r3, r2, r3
 8004822:	eba2 0901 	sub.w	r9, r2, r1
 8004826:	4599      	cmp	r9, r3
 8004828:	bfa8      	it	ge
 800482a:	4699      	movge	r9, r3
 800482c:	f1b9 0f00 	cmp.w	r9, #0
 8004830:	dc35      	bgt.n	800489e <_printf_float+0x3ae>
 8004832:	f04f 0800 	mov.w	r8, #0
 8004836:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800483a:	f104 0a1a 	add.w	sl, r4, #26
 800483e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004842:	1a9b      	subs	r3, r3, r2
 8004844:	eba3 0309 	sub.w	r3, r3, r9
 8004848:	4543      	cmp	r3, r8
 800484a:	f77f af79 	ble.w	8004740 <_printf_float+0x250>
 800484e:	2301      	movs	r3, #1
 8004850:	4652      	mov	r2, sl
 8004852:	4631      	mov	r1, r6
 8004854:	4628      	mov	r0, r5
 8004856:	47b8      	blx	r7
 8004858:	3001      	adds	r0, #1
 800485a:	f43f aeaa 	beq.w	80045b2 <_printf_float+0xc2>
 800485e:	f108 0801 	add.w	r8, r8, #1
 8004862:	e7ec      	b.n	800483e <_printf_float+0x34e>
 8004864:	4613      	mov	r3, r2
 8004866:	4631      	mov	r1, r6
 8004868:	4642      	mov	r2, r8
 800486a:	4628      	mov	r0, r5
 800486c:	47b8      	blx	r7
 800486e:	3001      	adds	r0, #1
 8004870:	d1c0      	bne.n	80047f4 <_printf_float+0x304>
 8004872:	e69e      	b.n	80045b2 <_printf_float+0xc2>
 8004874:	2301      	movs	r3, #1
 8004876:	4631      	mov	r1, r6
 8004878:	4628      	mov	r0, r5
 800487a:	9205      	str	r2, [sp, #20]
 800487c:	47b8      	blx	r7
 800487e:	3001      	adds	r0, #1
 8004880:	f43f ae97 	beq.w	80045b2 <_printf_float+0xc2>
 8004884:	9a05      	ldr	r2, [sp, #20]
 8004886:	f10b 0b01 	add.w	fp, fp, #1
 800488a:	e7b9      	b.n	8004800 <_printf_float+0x310>
 800488c:	ee18 3a10 	vmov	r3, s16
 8004890:	4652      	mov	r2, sl
 8004892:	4631      	mov	r1, r6
 8004894:	4628      	mov	r0, r5
 8004896:	47b8      	blx	r7
 8004898:	3001      	adds	r0, #1
 800489a:	d1be      	bne.n	800481a <_printf_float+0x32a>
 800489c:	e689      	b.n	80045b2 <_printf_float+0xc2>
 800489e:	9a05      	ldr	r2, [sp, #20]
 80048a0:	464b      	mov	r3, r9
 80048a2:	4442      	add	r2, r8
 80048a4:	4631      	mov	r1, r6
 80048a6:	4628      	mov	r0, r5
 80048a8:	47b8      	blx	r7
 80048aa:	3001      	adds	r0, #1
 80048ac:	d1c1      	bne.n	8004832 <_printf_float+0x342>
 80048ae:	e680      	b.n	80045b2 <_printf_float+0xc2>
 80048b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80048b2:	2a01      	cmp	r2, #1
 80048b4:	dc01      	bgt.n	80048ba <_printf_float+0x3ca>
 80048b6:	07db      	lsls	r3, r3, #31
 80048b8:	d538      	bpl.n	800492c <_printf_float+0x43c>
 80048ba:	2301      	movs	r3, #1
 80048bc:	4642      	mov	r2, r8
 80048be:	4631      	mov	r1, r6
 80048c0:	4628      	mov	r0, r5
 80048c2:	47b8      	blx	r7
 80048c4:	3001      	adds	r0, #1
 80048c6:	f43f ae74 	beq.w	80045b2 <_printf_float+0xc2>
 80048ca:	ee18 3a10 	vmov	r3, s16
 80048ce:	4652      	mov	r2, sl
 80048d0:	4631      	mov	r1, r6
 80048d2:	4628      	mov	r0, r5
 80048d4:	47b8      	blx	r7
 80048d6:	3001      	adds	r0, #1
 80048d8:	f43f ae6b 	beq.w	80045b2 <_printf_float+0xc2>
 80048dc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80048e0:	2200      	movs	r2, #0
 80048e2:	2300      	movs	r3, #0
 80048e4:	f7fc f900 	bl	8000ae8 <__aeabi_dcmpeq>
 80048e8:	b9d8      	cbnz	r0, 8004922 <_printf_float+0x432>
 80048ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80048ec:	f108 0201 	add.w	r2, r8, #1
 80048f0:	3b01      	subs	r3, #1
 80048f2:	4631      	mov	r1, r6
 80048f4:	4628      	mov	r0, r5
 80048f6:	47b8      	blx	r7
 80048f8:	3001      	adds	r0, #1
 80048fa:	d10e      	bne.n	800491a <_printf_float+0x42a>
 80048fc:	e659      	b.n	80045b2 <_printf_float+0xc2>
 80048fe:	2301      	movs	r3, #1
 8004900:	4652      	mov	r2, sl
 8004902:	4631      	mov	r1, r6
 8004904:	4628      	mov	r0, r5
 8004906:	47b8      	blx	r7
 8004908:	3001      	adds	r0, #1
 800490a:	f43f ae52 	beq.w	80045b2 <_printf_float+0xc2>
 800490e:	f108 0801 	add.w	r8, r8, #1
 8004912:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004914:	3b01      	subs	r3, #1
 8004916:	4543      	cmp	r3, r8
 8004918:	dcf1      	bgt.n	80048fe <_printf_float+0x40e>
 800491a:	464b      	mov	r3, r9
 800491c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004920:	e6dc      	b.n	80046dc <_printf_float+0x1ec>
 8004922:	f04f 0800 	mov.w	r8, #0
 8004926:	f104 0a1a 	add.w	sl, r4, #26
 800492a:	e7f2      	b.n	8004912 <_printf_float+0x422>
 800492c:	2301      	movs	r3, #1
 800492e:	4642      	mov	r2, r8
 8004930:	e7df      	b.n	80048f2 <_printf_float+0x402>
 8004932:	2301      	movs	r3, #1
 8004934:	464a      	mov	r2, r9
 8004936:	4631      	mov	r1, r6
 8004938:	4628      	mov	r0, r5
 800493a:	47b8      	blx	r7
 800493c:	3001      	adds	r0, #1
 800493e:	f43f ae38 	beq.w	80045b2 <_printf_float+0xc2>
 8004942:	f108 0801 	add.w	r8, r8, #1
 8004946:	68e3      	ldr	r3, [r4, #12]
 8004948:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800494a:	1a5b      	subs	r3, r3, r1
 800494c:	4543      	cmp	r3, r8
 800494e:	dcf0      	bgt.n	8004932 <_printf_float+0x442>
 8004950:	e6fa      	b.n	8004748 <_printf_float+0x258>
 8004952:	f04f 0800 	mov.w	r8, #0
 8004956:	f104 0919 	add.w	r9, r4, #25
 800495a:	e7f4      	b.n	8004946 <_printf_float+0x456>

0800495c <_printf_common>:
 800495c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004960:	4616      	mov	r6, r2
 8004962:	4699      	mov	r9, r3
 8004964:	688a      	ldr	r2, [r1, #8]
 8004966:	690b      	ldr	r3, [r1, #16]
 8004968:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800496c:	4293      	cmp	r3, r2
 800496e:	bfb8      	it	lt
 8004970:	4613      	movlt	r3, r2
 8004972:	6033      	str	r3, [r6, #0]
 8004974:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004978:	4607      	mov	r7, r0
 800497a:	460c      	mov	r4, r1
 800497c:	b10a      	cbz	r2, 8004982 <_printf_common+0x26>
 800497e:	3301      	adds	r3, #1
 8004980:	6033      	str	r3, [r6, #0]
 8004982:	6823      	ldr	r3, [r4, #0]
 8004984:	0699      	lsls	r1, r3, #26
 8004986:	bf42      	ittt	mi
 8004988:	6833      	ldrmi	r3, [r6, #0]
 800498a:	3302      	addmi	r3, #2
 800498c:	6033      	strmi	r3, [r6, #0]
 800498e:	6825      	ldr	r5, [r4, #0]
 8004990:	f015 0506 	ands.w	r5, r5, #6
 8004994:	d106      	bne.n	80049a4 <_printf_common+0x48>
 8004996:	f104 0a19 	add.w	sl, r4, #25
 800499a:	68e3      	ldr	r3, [r4, #12]
 800499c:	6832      	ldr	r2, [r6, #0]
 800499e:	1a9b      	subs	r3, r3, r2
 80049a0:	42ab      	cmp	r3, r5
 80049a2:	dc26      	bgt.n	80049f2 <_printf_common+0x96>
 80049a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80049a8:	1e13      	subs	r3, r2, #0
 80049aa:	6822      	ldr	r2, [r4, #0]
 80049ac:	bf18      	it	ne
 80049ae:	2301      	movne	r3, #1
 80049b0:	0692      	lsls	r2, r2, #26
 80049b2:	d42b      	bmi.n	8004a0c <_printf_common+0xb0>
 80049b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80049b8:	4649      	mov	r1, r9
 80049ba:	4638      	mov	r0, r7
 80049bc:	47c0      	blx	r8
 80049be:	3001      	adds	r0, #1
 80049c0:	d01e      	beq.n	8004a00 <_printf_common+0xa4>
 80049c2:	6823      	ldr	r3, [r4, #0]
 80049c4:	68e5      	ldr	r5, [r4, #12]
 80049c6:	6832      	ldr	r2, [r6, #0]
 80049c8:	f003 0306 	and.w	r3, r3, #6
 80049cc:	2b04      	cmp	r3, #4
 80049ce:	bf08      	it	eq
 80049d0:	1aad      	subeq	r5, r5, r2
 80049d2:	68a3      	ldr	r3, [r4, #8]
 80049d4:	6922      	ldr	r2, [r4, #16]
 80049d6:	bf0c      	ite	eq
 80049d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80049dc:	2500      	movne	r5, #0
 80049de:	4293      	cmp	r3, r2
 80049e0:	bfc4      	itt	gt
 80049e2:	1a9b      	subgt	r3, r3, r2
 80049e4:	18ed      	addgt	r5, r5, r3
 80049e6:	2600      	movs	r6, #0
 80049e8:	341a      	adds	r4, #26
 80049ea:	42b5      	cmp	r5, r6
 80049ec:	d11a      	bne.n	8004a24 <_printf_common+0xc8>
 80049ee:	2000      	movs	r0, #0
 80049f0:	e008      	b.n	8004a04 <_printf_common+0xa8>
 80049f2:	2301      	movs	r3, #1
 80049f4:	4652      	mov	r2, sl
 80049f6:	4649      	mov	r1, r9
 80049f8:	4638      	mov	r0, r7
 80049fa:	47c0      	blx	r8
 80049fc:	3001      	adds	r0, #1
 80049fe:	d103      	bne.n	8004a08 <_printf_common+0xac>
 8004a00:	f04f 30ff 	mov.w	r0, #4294967295
 8004a04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a08:	3501      	adds	r5, #1
 8004a0a:	e7c6      	b.n	800499a <_printf_common+0x3e>
 8004a0c:	18e1      	adds	r1, r4, r3
 8004a0e:	1c5a      	adds	r2, r3, #1
 8004a10:	2030      	movs	r0, #48	; 0x30
 8004a12:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004a16:	4422      	add	r2, r4
 8004a18:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004a1c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004a20:	3302      	adds	r3, #2
 8004a22:	e7c7      	b.n	80049b4 <_printf_common+0x58>
 8004a24:	2301      	movs	r3, #1
 8004a26:	4622      	mov	r2, r4
 8004a28:	4649      	mov	r1, r9
 8004a2a:	4638      	mov	r0, r7
 8004a2c:	47c0      	blx	r8
 8004a2e:	3001      	adds	r0, #1
 8004a30:	d0e6      	beq.n	8004a00 <_printf_common+0xa4>
 8004a32:	3601      	adds	r6, #1
 8004a34:	e7d9      	b.n	80049ea <_printf_common+0x8e>
	...

08004a38 <_printf_i>:
 8004a38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004a3c:	460c      	mov	r4, r1
 8004a3e:	4691      	mov	r9, r2
 8004a40:	7e27      	ldrb	r7, [r4, #24]
 8004a42:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004a44:	2f78      	cmp	r7, #120	; 0x78
 8004a46:	4680      	mov	r8, r0
 8004a48:	469a      	mov	sl, r3
 8004a4a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004a4e:	d807      	bhi.n	8004a60 <_printf_i+0x28>
 8004a50:	2f62      	cmp	r7, #98	; 0x62
 8004a52:	d80a      	bhi.n	8004a6a <_printf_i+0x32>
 8004a54:	2f00      	cmp	r7, #0
 8004a56:	f000 80d8 	beq.w	8004c0a <_printf_i+0x1d2>
 8004a5a:	2f58      	cmp	r7, #88	; 0x58
 8004a5c:	f000 80a3 	beq.w	8004ba6 <_printf_i+0x16e>
 8004a60:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004a64:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004a68:	e03a      	b.n	8004ae0 <_printf_i+0xa8>
 8004a6a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004a6e:	2b15      	cmp	r3, #21
 8004a70:	d8f6      	bhi.n	8004a60 <_printf_i+0x28>
 8004a72:	a001      	add	r0, pc, #4	; (adr r0, 8004a78 <_printf_i+0x40>)
 8004a74:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004a78:	08004ad1 	.word	0x08004ad1
 8004a7c:	08004ae5 	.word	0x08004ae5
 8004a80:	08004a61 	.word	0x08004a61
 8004a84:	08004a61 	.word	0x08004a61
 8004a88:	08004a61 	.word	0x08004a61
 8004a8c:	08004a61 	.word	0x08004a61
 8004a90:	08004ae5 	.word	0x08004ae5
 8004a94:	08004a61 	.word	0x08004a61
 8004a98:	08004a61 	.word	0x08004a61
 8004a9c:	08004a61 	.word	0x08004a61
 8004aa0:	08004a61 	.word	0x08004a61
 8004aa4:	08004bf1 	.word	0x08004bf1
 8004aa8:	08004b15 	.word	0x08004b15
 8004aac:	08004bd3 	.word	0x08004bd3
 8004ab0:	08004a61 	.word	0x08004a61
 8004ab4:	08004a61 	.word	0x08004a61
 8004ab8:	08004c13 	.word	0x08004c13
 8004abc:	08004a61 	.word	0x08004a61
 8004ac0:	08004b15 	.word	0x08004b15
 8004ac4:	08004a61 	.word	0x08004a61
 8004ac8:	08004a61 	.word	0x08004a61
 8004acc:	08004bdb 	.word	0x08004bdb
 8004ad0:	680b      	ldr	r3, [r1, #0]
 8004ad2:	1d1a      	adds	r2, r3, #4
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	600a      	str	r2, [r1, #0]
 8004ad8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004adc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	e0a3      	b.n	8004c2c <_printf_i+0x1f4>
 8004ae4:	6825      	ldr	r5, [r4, #0]
 8004ae6:	6808      	ldr	r0, [r1, #0]
 8004ae8:	062e      	lsls	r6, r5, #24
 8004aea:	f100 0304 	add.w	r3, r0, #4
 8004aee:	d50a      	bpl.n	8004b06 <_printf_i+0xce>
 8004af0:	6805      	ldr	r5, [r0, #0]
 8004af2:	600b      	str	r3, [r1, #0]
 8004af4:	2d00      	cmp	r5, #0
 8004af6:	da03      	bge.n	8004b00 <_printf_i+0xc8>
 8004af8:	232d      	movs	r3, #45	; 0x2d
 8004afa:	426d      	negs	r5, r5
 8004afc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b00:	485e      	ldr	r0, [pc, #376]	; (8004c7c <_printf_i+0x244>)
 8004b02:	230a      	movs	r3, #10
 8004b04:	e019      	b.n	8004b3a <_printf_i+0x102>
 8004b06:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004b0a:	6805      	ldr	r5, [r0, #0]
 8004b0c:	600b      	str	r3, [r1, #0]
 8004b0e:	bf18      	it	ne
 8004b10:	b22d      	sxthne	r5, r5
 8004b12:	e7ef      	b.n	8004af4 <_printf_i+0xbc>
 8004b14:	680b      	ldr	r3, [r1, #0]
 8004b16:	6825      	ldr	r5, [r4, #0]
 8004b18:	1d18      	adds	r0, r3, #4
 8004b1a:	6008      	str	r0, [r1, #0]
 8004b1c:	0628      	lsls	r0, r5, #24
 8004b1e:	d501      	bpl.n	8004b24 <_printf_i+0xec>
 8004b20:	681d      	ldr	r5, [r3, #0]
 8004b22:	e002      	b.n	8004b2a <_printf_i+0xf2>
 8004b24:	0669      	lsls	r1, r5, #25
 8004b26:	d5fb      	bpl.n	8004b20 <_printf_i+0xe8>
 8004b28:	881d      	ldrh	r5, [r3, #0]
 8004b2a:	4854      	ldr	r0, [pc, #336]	; (8004c7c <_printf_i+0x244>)
 8004b2c:	2f6f      	cmp	r7, #111	; 0x6f
 8004b2e:	bf0c      	ite	eq
 8004b30:	2308      	moveq	r3, #8
 8004b32:	230a      	movne	r3, #10
 8004b34:	2100      	movs	r1, #0
 8004b36:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004b3a:	6866      	ldr	r6, [r4, #4]
 8004b3c:	60a6      	str	r6, [r4, #8]
 8004b3e:	2e00      	cmp	r6, #0
 8004b40:	bfa2      	ittt	ge
 8004b42:	6821      	ldrge	r1, [r4, #0]
 8004b44:	f021 0104 	bicge.w	r1, r1, #4
 8004b48:	6021      	strge	r1, [r4, #0]
 8004b4a:	b90d      	cbnz	r5, 8004b50 <_printf_i+0x118>
 8004b4c:	2e00      	cmp	r6, #0
 8004b4e:	d04d      	beq.n	8004bec <_printf_i+0x1b4>
 8004b50:	4616      	mov	r6, r2
 8004b52:	fbb5 f1f3 	udiv	r1, r5, r3
 8004b56:	fb03 5711 	mls	r7, r3, r1, r5
 8004b5a:	5dc7      	ldrb	r7, [r0, r7]
 8004b5c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004b60:	462f      	mov	r7, r5
 8004b62:	42bb      	cmp	r3, r7
 8004b64:	460d      	mov	r5, r1
 8004b66:	d9f4      	bls.n	8004b52 <_printf_i+0x11a>
 8004b68:	2b08      	cmp	r3, #8
 8004b6a:	d10b      	bne.n	8004b84 <_printf_i+0x14c>
 8004b6c:	6823      	ldr	r3, [r4, #0]
 8004b6e:	07df      	lsls	r7, r3, #31
 8004b70:	d508      	bpl.n	8004b84 <_printf_i+0x14c>
 8004b72:	6923      	ldr	r3, [r4, #16]
 8004b74:	6861      	ldr	r1, [r4, #4]
 8004b76:	4299      	cmp	r1, r3
 8004b78:	bfde      	ittt	le
 8004b7a:	2330      	movle	r3, #48	; 0x30
 8004b7c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004b80:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004b84:	1b92      	subs	r2, r2, r6
 8004b86:	6122      	str	r2, [r4, #16]
 8004b88:	f8cd a000 	str.w	sl, [sp]
 8004b8c:	464b      	mov	r3, r9
 8004b8e:	aa03      	add	r2, sp, #12
 8004b90:	4621      	mov	r1, r4
 8004b92:	4640      	mov	r0, r8
 8004b94:	f7ff fee2 	bl	800495c <_printf_common>
 8004b98:	3001      	adds	r0, #1
 8004b9a:	d14c      	bne.n	8004c36 <_printf_i+0x1fe>
 8004b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8004ba0:	b004      	add	sp, #16
 8004ba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ba6:	4835      	ldr	r0, [pc, #212]	; (8004c7c <_printf_i+0x244>)
 8004ba8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004bac:	6823      	ldr	r3, [r4, #0]
 8004bae:	680e      	ldr	r6, [r1, #0]
 8004bb0:	061f      	lsls	r7, r3, #24
 8004bb2:	f856 5b04 	ldr.w	r5, [r6], #4
 8004bb6:	600e      	str	r6, [r1, #0]
 8004bb8:	d514      	bpl.n	8004be4 <_printf_i+0x1ac>
 8004bba:	07d9      	lsls	r1, r3, #31
 8004bbc:	bf44      	itt	mi
 8004bbe:	f043 0320 	orrmi.w	r3, r3, #32
 8004bc2:	6023      	strmi	r3, [r4, #0]
 8004bc4:	b91d      	cbnz	r5, 8004bce <_printf_i+0x196>
 8004bc6:	6823      	ldr	r3, [r4, #0]
 8004bc8:	f023 0320 	bic.w	r3, r3, #32
 8004bcc:	6023      	str	r3, [r4, #0]
 8004bce:	2310      	movs	r3, #16
 8004bd0:	e7b0      	b.n	8004b34 <_printf_i+0xfc>
 8004bd2:	6823      	ldr	r3, [r4, #0]
 8004bd4:	f043 0320 	orr.w	r3, r3, #32
 8004bd8:	6023      	str	r3, [r4, #0]
 8004bda:	2378      	movs	r3, #120	; 0x78
 8004bdc:	4828      	ldr	r0, [pc, #160]	; (8004c80 <_printf_i+0x248>)
 8004bde:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004be2:	e7e3      	b.n	8004bac <_printf_i+0x174>
 8004be4:	065e      	lsls	r6, r3, #25
 8004be6:	bf48      	it	mi
 8004be8:	b2ad      	uxthmi	r5, r5
 8004bea:	e7e6      	b.n	8004bba <_printf_i+0x182>
 8004bec:	4616      	mov	r6, r2
 8004bee:	e7bb      	b.n	8004b68 <_printf_i+0x130>
 8004bf0:	680b      	ldr	r3, [r1, #0]
 8004bf2:	6826      	ldr	r6, [r4, #0]
 8004bf4:	6960      	ldr	r0, [r4, #20]
 8004bf6:	1d1d      	adds	r5, r3, #4
 8004bf8:	600d      	str	r5, [r1, #0]
 8004bfa:	0635      	lsls	r5, r6, #24
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	d501      	bpl.n	8004c04 <_printf_i+0x1cc>
 8004c00:	6018      	str	r0, [r3, #0]
 8004c02:	e002      	b.n	8004c0a <_printf_i+0x1d2>
 8004c04:	0671      	lsls	r1, r6, #25
 8004c06:	d5fb      	bpl.n	8004c00 <_printf_i+0x1c8>
 8004c08:	8018      	strh	r0, [r3, #0]
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	6123      	str	r3, [r4, #16]
 8004c0e:	4616      	mov	r6, r2
 8004c10:	e7ba      	b.n	8004b88 <_printf_i+0x150>
 8004c12:	680b      	ldr	r3, [r1, #0]
 8004c14:	1d1a      	adds	r2, r3, #4
 8004c16:	600a      	str	r2, [r1, #0]
 8004c18:	681e      	ldr	r6, [r3, #0]
 8004c1a:	6862      	ldr	r2, [r4, #4]
 8004c1c:	2100      	movs	r1, #0
 8004c1e:	4630      	mov	r0, r6
 8004c20:	f7fb faee 	bl	8000200 <memchr>
 8004c24:	b108      	cbz	r0, 8004c2a <_printf_i+0x1f2>
 8004c26:	1b80      	subs	r0, r0, r6
 8004c28:	6060      	str	r0, [r4, #4]
 8004c2a:	6863      	ldr	r3, [r4, #4]
 8004c2c:	6123      	str	r3, [r4, #16]
 8004c2e:	2300      	movs	r3, #0
 8004c30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c34:	e7a8      	b.n	8004b88 <_printf_i+0x150>
 8004c36:	6923      	ldr	r3, [r4, #16]
 8004c38:	4632      	mov	r2, r6
 8004c3a:	4649      	mov	r1, r9
 8004c3c:	4640      	mov	r0, r8
 8004c3e:	47d0      	blx	sl
 8004c40:	3001      	adds	r0, #1
 8004c42:	d0ab      	beq.n	8004b9c <_printf_i+0x164>
 8004c44:	6823      	ldr	r3, [r4, #0]
 8004c46:	079b      	lsls	r3, r3, #30
 8004c48:	d413      	bmi.n	8004c72 <_printf_i+0x23a>
 8004c4a:	68e0      	ldr	r0, [r4, #12]
 8004c4c:	9b03      	ldr	r3, [sp, #12]
 8004c4e:	4298      	cmp	r0, r3
 8004c50:	bfb8      	it	lt
 8004c52:	4618      	movlt	r0, r3
 8004c54:	e7a4      	b.n	8004ba0 <_printf_i+0x168>
 8004c56:	2301      	movs	r3, #1
 8004c58:	4632      	mov	r2, r6
 8004c5a:	4649      	mov	r1, r9
 8004c5c:	4640      	mov	r0, r8
 8004c5e:	47d0      	blx	sl
 8004c60:	3001      	adds	r0, #1
 8004c62:	d09b      	beq.n	8004b9c <_printf_i+0x164>
 8004c64:	3501      	adds	r5, #1
 8004c66:	68e3      	ldr	r3, [r4, #12]
 8004c68:	9903      	ldr	r1, [sp, #12]
 8004c6a:	1a5b      	subs	r3, r3, r1
 8004c6c:	42ab      	cmp	r3, r5
 8004c6e:	dcf2      	bgt.n	8004c56 <_printf_i+0x21e>
 8004c70:	e7eb      	b.n	8004c4a <_printf_i+0x212>
 8004c72:	2500      	movs	r5, #0
 8004c74:	f104 0619 	add.w	r6, r4, #25
 8004c78:	e7f5      	b.n	8004c66 <_printf_i+0x22e>
 8004c7a:	bf00      	nop
 8004c7c:	08008c5a 	.word	0x08008c5a
 8004c80:	08008c6b 	.word	0x08008c6b

08004c84 <_scanf_float>:
 8004c84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c88:	b087      	sub	sp, #28
 8004c8a:	4617      	mov	r7, r2
 8004c8c:	9303      	str	r3, [sp, #12]
 8004c8e:	688b      	ldr	r3, [r1, #8]
 8004c90:	1e5a      	subs	r2, r3, #1
 8004c92:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8004c96:	bf83      	ittte	hi
 8004c98:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8004c9c:	195b      	addhi	r3, r3, r5
 8004c9e:	9302      	strhi	r3, [sp, #8]
 8004ca0:	2300      	movls	r3, #0
 8004ca2:	bf86      	itte	hi
 8004ca4:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004ca8:	608b      	strhi	r3, [r1, #8]
 8004caa:	9302      	strls	r3, [sp, #8]
 8004cac:	680b      	ldr	r3, [r1, #0]
 8004cae:	468b      	mov	fp, r1
 8004cb0:	2500      	movs	r5, #0
 8004cb2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8004cb6:	f84b 3b1c 	str.w	r3, [fp], #28
 8004cba:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8004cbe:	4680      	mov	r8, r0
 8004cc0:	460c      	mov	r4, r1
 8004cc2:	465e      	mov	r6, fp
 8004cc4:	46aa      	mov	sl, r5
 8004cc6:	46a9      	mov	r9, r5
 8004cc8:	9501      	str	r5, [sp, #4]
 8004cca:	68a2      	ldr	r2, [r4, #8]
 8004ccc:	b152      	cbz	r2, 8004ce4 <_scanf_float+0x60>
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	781b      	ldrb	r3, [r3, #0]
 8004cd2:	2b4e      	cmp	r3, #78	; 0x4e
 8004cd4:	d864      	bhi.n	8004da0 <_scanf_float+0x11c>
 8004cd6:	2b40      	cmp	r3, #64	; 0x40
 8004cd8:	d83c      	bhi.n	8004d54 <_scanf_float+0xd0>
 8004cda:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8004cde:	b2c8      	uxtb	r0, r1
 8004ce0:	280e      	cmp	r0, #14
 8004ce2:	d93a      	bls.n	8004d5a <_scanf_float+0xd6>
 8004ce4:	f1b9 0f00 	cmp.w	r9, #0
 8004ce8:	d003      	beq.n	8004cf2 <_scanf_float+0x6e>
 8004cea:	6823      	ldr	r3, [r4, #0]
 8004cec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004cf0:	6023      	str	r3, [r4, #0]
 8004cf2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004cf6:	f1ba 0f01 	cmp.w	sl, #1
 8004cfa:	f200 8113 	bhi.w	8004f24 <_scanf_float+0x2a0>
 8004cfe:	455e      	cmp	r6, fp
 8004d00:	f200 8105 	bhi.w	8004f0e <_scanf_float+0x28a>
 8004d04:	2501      	movs	r5, #1
 8004d06:	4628      	mov	r0, r5
 8004d08:	b007      	add	sp, #28
 8004d0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d0e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8004d12:	2a0d      	cmp	r2, #13
 8004d14:	d8e6      	bhi.n	8004ce4 <_scanf_float+0x60>
 8004d16:	a101      	add	r1, pc, #4	; (adr r1, 8004d1c <_scanf_float+0x98>)
 8004d18:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004d1c:	08004e5b 	.word	0x08004e5b
 8004d20:	08004ce5 	.word	0x08004ce5
 8004d24:	08004ce5 	.word	0x08004ce5
 8004d28:	08004ce5 	.word	0x08004ce5
 8004d2c:	08004ebb 	.word	0x08004ebb
 8004d30:	08004e93 	.word	0x08004e93
 8004d34:	08004ce5 	.word	0x08004ce5
 8004d38:	08004ce5 	.word	0x08004ce5
 8004d3c:	08004e69 	.word	0x08004e69
 8004d40:	08004ce5 	.word	0x08004ce5
 8004d44:	08004ce5 	.word	0x08004ce5
 8004d48:	08004ce5 	.word	0x08004ce5
 8004d4c:	08004ce5 	.word	0x08004ce5
 8004d50:	08004e21 	.word	0x08004e21
 8004d54:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8004d58:	e7db      	b.n	8004d12 <_scanf_float+0x8e>
 8004d5a:	290e      	cmp	r1, #14
 8004d5c:	d8c2      	bhi.n	8004ce4 <_scanf_float+0x60>
 8004d5e:	a001      	add	r0, pc, #4	; (adr r0, 8004d64 <_scanf_float+0xe0>)
 8004d60:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8004d64:	08004e13 	.word	0x08004e13
 8004d68:	08004ce5 	.word	0x08004ce5
 8004d6c:	08004e13 	.word	0x08004e13
 8004d70:	08004ea7 	.word	0x08004ea7
 8004d74:	08004ce5 	.word	0x08004ce5
 8004d78:	08004dc1 	.word	0x08004dc1
 8004d7c:	08004dfd 	.word	0x08004dfd
 8004d80:	08004dfd 	.word	0x08004dfd
 8004d84:	08004dfd 	.word	0x08004dfd
 8004d88:	08004dfd 	.word	0x08004dfd
 8004d8c:	08004dfd 	.word	0x08004dfd
 8004d90:	08004dfd 	.word	0x08004dfd
 8004d94:	08004dfd 	.word	0x08004dfd
 8004d98:	08004dfd 	.word	0x08004dfd
 8004d9c:	08004dfd 	.word	0x08004dfd
 8004da0:	2b6e      	cmp	r3, #110	; 0x6e
 8004da2:	d809      	bhi.n	8004db8 <_scanf_float+0x134>
 8004da4:	2b60      	cmp	r3, #96	; 0x60
 8004da6:	d8b2      	bhi.n	8004d0e <_scanf_float+0x8a>
 8004da8:	2b54      	cmp	r3, #84	; 0x54
 8004daa:	d077      	beq.n	8004e9c <_scanf_float+0x218>
 8004dac:	2b59      	cmp	r3, #89	; 0x59
 8004dae:	d199      	bne.n	8004ce4 <_scanf_float+0x60>
 8004db0:	2d07      	cmp	r5, #7
 8004db2:	d197      	bne.n	8004ce4 <_scanf_float+0x60>
 8004db4:	2508      	movs	r5, #8
 8004db6:	e029      	b.n	8004e0c <_scanf_float+0x188>
 8004db8:	2b74      	cmp	r3, #116	; 0x74
 8004dba:	d06f      	beq.n	8004e9c <_scanf_float+0x218>
 8004dbc:	2b79      	cmp	r3, #121	; 0x79
 8004dbe:	e7f6      	b.n	8004dae <_scanf_float+0x12a>
 8004dc0:	6821      	ldr	r1, [r4, #0]
 8004dc2:	05c8      	lsls	r0, r1, #23
 8004dc4:	d51a      	bpl.n	8004dfc <_scanf_float+0x178>
 8004dc6:	9b02      	ldr	r3, [sp, #8]
 8004dc8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8004dcc:	6021      	str	r1, [r4, #0]
 8004dce:	f109 0901 	add.w	r9, r9, #1
 8004dd2:	b11b      	cbz	r3, 8004ddc <_scanf_float+0x158>
 8004dd4:	3b01      	subs	r3, #1
 8004dd6:	3201      	adds	r2, #1
 8004dd8:	9302      	str	r3, [sp, #8]
 8004dda:	60a2      	str	r2, [r4, #8]
 8004ddc:	68a3      	ldr	r3, [r4, #8]
 8004dde:	3b01      	subs	r3, #1
 8004de0:	60a3      	str	r3, [r4, #8]
 8004de2:	6923      	ldr	r3, [r4, #16]
 8004de4:	3301      	adds	r3, #1
 8004de6:	6123      	str	r3, [r4, #16]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	3b01      	subs	r3, #1
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	607b      	str	r3, [r7, #4]
 8004df0:	f340 8084 	ble.w	8004efc <_scanf_float+0x278>
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	3301      	adds	r3, #1
 8004df8:	603b      	str	r3, [r7, #0]
 8004dfa:	e766      	b.n	8004cca <_scanf_float+0x46>
 8004dfc:	eb1a 0f05 	cmn.w	sl, r5
 8004e00:	f47f af70 	bne.w	8004ce4 <_scanf_float+0x60>
 8004e04:	6822      	ldr	r2, [r4, #0]
 8004e06:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8004e0a:	6022      	str	r2, [r4, #0]
 8004e0c:	f806 3b01 	strb.w	r3, [r6], #1
 8004e10:	e7e4      	b.n	8004ddc <_scanf_float+0x158>
 8004e12:	6822      	ldr	r2, [r4, #0]
 8004e14:	0610      	lsls	r0, r2, #24
 8004e16:	f57f af65 	bpl.w	8004ce4 <_scanf_float+0x60>
 8004e1a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004e1e:	e7f4      	b.n	8004e0a <_scanf_float+0x186>
 8004e20:	f1ba 0f00 	cmp.w	sl, #0
 8004e24:	d10e      	bne.n	8004e44 <_scanf_float+0x1c0>
 8004e26:	f1b9 0f00 	cmp.w	r9, #0
 8004e2a:	d10e      	bne.n	8004e4a <_scanf_float+0x1c6>
 8004e2c:	6822      	ldr	r2, [r4, #0]
 8004e2e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004e32:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004e36:	d108      	bne.n	8004e4a <_scanf_float+0x1c6>
 8004e38:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004e3c:	6022      	str	r2, [r4, #0]
 8004e3e:	f04f 0a01 	mov.w	sl, #1
 8004e42:	e7e3      	b.n	8004e0c <_scanf_float+0x188>
 8004e44:	f1ba 0f02 	cmp.w	sl, #2
 8004e48:	d055      	beq.n	8004ef6 <_scanf_float+0x272>
 8004e4a:	2d01      	cmp	r5, #1
 8004e4c:	d002      	beq.n	8004e54 <_scanf_float+0x1d0>
 8004e4e:	2d04      	cmp	r5, #4
 8004e50:	f47f af48 	bne.w	8004ce4 <_scanf_float+0x60>
 8004e54:	3501      	adds	r5, #1
 8004e56:	b2ed      	uxtb	r5, r5
 8004e58:	e7d8      	b.n	8004e0c <_scanf_float+0x188>
 8004e5a:	f1ba 0f01 	cmp.w	sl, #1
 8004e5e:	f47f af41 	bne.w	8004ce4 <_scanf_float+0x60>
 8004e62:	f04f 0a02 	mov.w	sl, #2
 8004e66:	e7d1      	b.n	8004e0c <_scanf_float+0x188>
 8004e68:	b97d      	cbnz	r5, 8004e8a <_scanf_float+0x206>
 8004e6a:	f1b9 0f00 	cmp.w	r9, #0
 8004e6e:	f47f af3c 	bne.w	8004cea <_scanf_float+0x66>
 8004e72:	6822      	ldr	r2, [r4, #0]
 8004e74:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004e78:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004e7c:	f47f af39 	bne.w	8004cf2 <_scanf_float+0x6e>
 8004e80:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004e84:	6022      	str	r2, [r4, #0]
 8004e86:	2501      	movs	r5, #1
 8004e88:	e7c0      	b.n	8004e0c <_scanf_float+0x188>
 8004e8a:	2d03      	cmp	r5, #3
 8004e8c:	d0e2      	beq.n	8004e54 <_scanf_float+0x1d0>
 8004e8e:	2d05      	cmp	r5, #5
 8004e90:	e7de      	b.n	8004e50 <_scanf_float+0x1cc>
 8004e92:	2d02      	cmp	r5, #2
 8004e94:	f47f af26 	bne.w	8004ce4 <_scanf_float+0x60>
 8004e98:	2503      	movs	r5, #3
 8004e9a:	e7b7      	b.n	8004e0c <_scanf_float+0x188>
 8004e9c:	2d06      	cmp	r5, #6
 8004e9e:	f47f af21 	bne.w	8004ce4 <_scanf_float+0x60>
 8004ea2:	2507      	movs	r5, #7
 8004ea4:	e7b2      	b.n	8004e0c <_scanf_float+0x188>
 8004ea6:	6822      	ldr	r2, [r4, #0]
 8004ea8:	0591      	lsls	r1, r2, #22
 8004eaa:	f57f af1b 	bpl.w	8004ce4 <_scanf_float+0x60>
 8004eae:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8004eb2:	6022      	str	r2, [r4, #0]
 8004eb4:	f8cd 9004 	str.w	r9, [sp, #4]
 8004eb8:	e7a8      	b.n	8004e0c <_scanf_float+0x188>
 8004eba:	6822      	ldr	r2, [r4, #0]
 8004ebc:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8004ec0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8004ec4:	d006      	beq.n	8004ed4 <_scanf_float+0x250>
 8004ec6:	0550      	lsls	r0, r2, #21
 8004ec8:	f57f af0c 	bpl.w	8004ce4 <_scanf_float+0x60>
 8004ecc:	f1b9 0f00 	cmp.w	r9, #0
 8004ed0:	f43f af0f 	beq.w	8004cf2 <_scanf_float+0x6e>
 8004ed4:	0591      	lsls	r1, r2, #22
 8004ed6:	bf58      	it	pl
 8004ed8:	9901      	ldrpl	r1, [sp, #4]
 8004eda:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004ede:	bf58      	it	pl
 8004ee0:	eba9 0101 	subpl.w	r1, r9, r1
 8004ee4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8004ee8:	bf58      	it	pl
 8004eea:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8004eee:	6022      	str	r2, [r4, #0]
 8004ef0:	f04f 0900 	mov.w	r9, #0
 8004ef4:	e78a      	b.n	8004e0c <_scanf_float+0x188>
 8004ef6:	f04f 0a03 	mov.w	sl, #3
 8004efa:	e787      	b.n	8004e0c <_scanf_float+0x188>
 8004efc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004f00:	4639      	mov	r1, r7
 8004f02:	4640      	mov	r0, r8
 8004f04:	4798      	blx	r3
 8004f06:	2800      	cmp	r0, #0
 8004f08:	f43f aedf 	beq.w	8004cca <_scanf_float+0x46>
 8004f0c:	e6ea      	b.n	8004ce4 <_scanf_float+0x60>
 8004f0e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004f12:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004f16:	463a      	mov	r2, r7
 8004f18:	4640      	mov	r0, r8
 8004f1a:	4798      	blx	r3
 8004f1c:	6923      	ldr	r3, [r4, #16]
 8004f1e:	3b01      	subs	r3, #1
 8004f20:	6123      	str	r3, [r4, #16]
 8004f22:	e6ec      	b.n	8004cfe <_scanf_float+0x7a>
 8004f24:	1e6b      	subs	r3, r5, #1
 8004f26:	2b06      	cmp	r3, #6
 8004f28:	d825      	bhi.n	8004f76 <_scanf_float+0x2f2>
 8004f2a:	2d02      	cmp	r5, #2
 8004f2c:	d836      	bhi.n	8004f9c <_scanf_float+0x318>
 8004f2e:	455e      	cmp	r6, fp
 8004f30:	f67f aee8 	bls.w	8004d04 <_scanf_float+0x80>
 8004f34:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004f38:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004f3c:	463a      	mov	r2, r7
 8004f3e:	4640      	mov	r0, r8
 8004f40:	4798      	blx	r3
 8004f42:	6923      	ldr	r3, [r4, #16]
 8004f44:	3b01      	subs	r3, #1
 8004f46:	6123      	str	r3, [r4, #16]
 8004f48:	e7f1      	b.n	8004f2e <_scanf_float+0x2aa>
 8004f4a:	9802      	ldr	r0, [sp, #8]
 8004f4c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004f50:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8004f54:	9002      	str	r0, [sp, #8]
 8004f56:	463a      	mov	r2, r7
 8004f58:	4640      	mov	r0, r8
 8004f5a:	4798      	blx	r3
 8004f5c:	6923      	ldr	r3, [r4, #16]
 8004f5e:	3b01      	subs	r3, #1
 8004f60:	6123      	str	r3, [r4, #16]
 8004f62:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004f66:	fa5f fa8a 	uxtb.w	sl, sl
 8004f6a:	f1ba 0f02 	cmp.w	sl, #2
 8004f6e:	d1ec      	bne.n	8004f4a <_scanf_float+0x2c6>
 8004f70:	3d03      	subs	r5, #3
 8004f72:	b2ed      	uxtb	r5, r5
 8004f74:	1b76      	subs	r6, r6, r5
 8004f76:	6823      	ldr	r3, [r4, #0]
 8004f78:	05da      	lsls	r2, r3, #23
 8004f7a:	d52f      	bpl.n	8004fdc <_scanf_float+0x358>
 8004f7c:	055b      	lsls	r3, r3, #21
 8004f7e:	d510      	bpl.n	8004fa2 <_scanf_float+0x31e>
 8004f80:	455e      	cmp	r6, fp
 8004f82:	f67f aebf 	bls.w	8004d04 <_scanf_float+0x80>
 8004f86:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004f8a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004f8e:	463a      	mov	r2, r7
 8004f90:	4640      	mov	r0, r8
 8004f92:	4798      	blx	r3
 8004f94:	6923      	ldr	r3, [r4, #16]
 8004f96:	3b01      	subs	r3, #1
 8004f98:	6123      	str	r3, [r4, #16]
 8004f9a:	e7f1      	b.n	8004f80 <_scanf_float+0x2fc>
 8004f9c:	46aa      	mov	sl, r5
 8004f9e:	9602      	str	r6, [sp, #8]
 8004fa0:	e7df      	b.n	8004f62 <_scanf_float+0x2de>
 8004fa2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8004fa6:	6923      	ldr	r3, [r4, #16]
 8004fa8:	2965      	cmp	r1, #101	; 0x65
 8004faa:	f103 33ff 	add.w	r3, r3, #4294967295
 8004fae:	f106 35ff 	add.w	r5, r6, #4294967295
 8004fb2:	6123      	str	r3, [r4, #16]
 8004fb4:	d00c      	beq.n	8004fd0 <_scanf_float+0x34c>
 8004fb6:	2945      	cmp	r1, #69	; 0x45
 8004fb8:	d00a      	beq.n	8004fd0 <_scanf_float+0x34c>
 8004fba:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004fbe:	463a      	mov	r2, r7
 8004fc0:	4640      	mov	r0, r8
 8004fc2:	4798      	blx	r3
 8004fc4:	6923      	ldr	r3, [r4, #16]
 8004fc6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8004fca:	3b01      	subs	r3, #1
 8004fcc:	1eb5      	subs	r5, r6, #2
 8004fce:	6123      	str	r3, [r4, #16]
 8004fd0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004fd4:	463a      	mov	r2, r7
 8004fd6:	4640      	mov	r0, r8
 8004fd8:	4798      	blx	r3
 8004fda:	462e      	mov	r6, r5
 8004fdc:	6825      	ldr	r5, [r4, #0]
 8004fde:	f015 0510 	ands.w	r5, r5, #16
 8004fe2:	d158      	bne.n	8005096 <_scanf_float+0x412>
 8004fe4:	7035      	strb	r5, [r6, #0]
 8004fe6:	6823      	ldr	r3, [r4, #0]
 8004fe8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004fec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ff0:	d11c      	bne.n	800502c <_scanf_float+0x3a8>
 8004ff2:	9b01      	ldr	r3, [sp, #4]
 8004ff4:	454b      	cmp	r3, r9
 8004ff6:	eba3 0209 	sub.w	r2, r3, r9
 8004ffa:	d124      	bne.n	8005046 <_scanf_float+0x3c2>
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	4659      	mov	r1, fp
 8005000:	4640      	mov	r0, r8
 8005002:	f000 fe9b 	bl	8005d3c <_strtod_r>
 8005006:	9b03      	ldr	r3, [sp, #12]
 8005008:	6821      	ldr	r1, [r4, #0]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f011 0f02 	tst.w	r1, #2
 8005010:	ec57 6b10 	vmov	r6, r7, d0
 8005014:	f103 0204 	add.w	r2, r3, #4
 8005018:	d020      	beq.n	800505c <_scanf_float+0x3d8>
 800501a:	9903      	ldr	r1, [sp, #12]
 800501c:	600a      	str	r2, [r1, #0]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	e9c3 6700 	strd	r6, r7, [r3]
 8005024:	68e3      	ldr	r3, [r4, #12]
 8005026:	3301      	adds	r3, #1
 8005028:	60e3      	str	r3, [r4, #12]
 800502a:	e66c      	b.n	8004d06 <_scanf_float+0x82>
 800502c:	9b04      	ldr	r3, [sp, #16]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d0e4      	beq.n	8004ffc <_scanf_float+0x378>
 8005032:	9905      	ldr	r1, [sp, #20]
 8005034:	230a      	movs	r3, #10
 8005036:	462a      	mov	r2, r5
 8005038:	3101      	adds	r1, #1
 800503a:	4640      	mov	r0, r8
 800503c:	f000 ff08 	bl	8005e50 <_strtol_r>
 8005040:	9b04      	ldr	r3, [sp, #16]
 8005042:	9e05      	ldr	r6, [sp, #20]
 8005044:	1ac2      	subs	r2, r0, r3
 8005046:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800504a:	429e      	cmp	r6, r3
 800504c:	bf28      	it	cs
 800504e:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8005052:	4912      	ldr	r1, [pc, #72]	; (800509c <_scanf_float+0x418>)
 8005054:	4630      	mov	r0, r6
 8005056:	f000 f82b 	bl	80050b0 <siprintf>
 800505a:	e7cf      	b.n	8004ffc <_scanf_float+0x378>
 800505c:	f011 0f04 	tst.w	r1, #4
 8005060:	9903      	ldr	r1, [sp, #12]
 8005062:	600a      	str	r2, [r1, #0]
 8005064:	d1db      	bne.n	800501e <_scanf_float+0x39a>
 8005066:	f8d3 8000 	ldr.w	r8, [r3]
 800506a:	ee10 2a10 	vmov	r2, s0
 800506e:	ee10 0a10 	vmov	r0, s0
 8005072:	463b      	mov	r3, r7
 8005074:	4639      	mov	r1, r7
 8005076:	f7fb fd69 	bl	8000b4c <__aeabi_dcmpun>
 800507a:	b128      	cbz	r0, 8005088 <_scanf_float+0x404>
 800507c:	4808      	ldr	r0, [pc, #32]	; (80050a0 <_scanf_float+0x41c>)
 800507e:	f000 f811 	bl	80050a4 <nanf>
 8005082:	ed88 0a00 	vstr	s0, [r8]
 8005086:	e7cd      	b.n	8005024 <_scanf_float+0x3a0>
 8005088:	4630      	mov	r0, r6
 800508a:	4639      	mov	r1, r7
 800508c:	f7fb fdbc 	bl	8000c08 <__aeabi_d2f>
 8005090:	f8c8 0000 	str.w	r0, [r8]
 8005094:	e7c6      	b.n	8005024 <_scanf_float+0x3a0>
 8005096:	2500      	movs	r5, #0
 8005098:	e635      	b.n	8004d06 <_scanf_float+0x82>
 800509a:	bf00      	nop
 800509c:	08008c7c 	.word	0x08008c7c
 80050a0:	08009098 	.word	0x08009098

080050a4 <nanf>:
 80050a4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80050ac <nanf+0x8>
 80050a8:	4770      	bx	lr
 80050aa:	bf00      	nop
 80050ac:	7fc00000 	.word	0x7fc00000

080050b0 <siprintf>:
 80050b0:	b40e      	push	{r1, r2, r3}
 80050b2:	b500      	push	{lr}
 80050b4:	b09c      	sub	sp, #112	; 0x70
 80050b6:	ab1d      	add	r3, sp, #116	; 0x74
 80050b8:	9002      	str	r0, [sp, #8]
 80050ba:	9006      	str	r0, [sp, #24]
 80050bc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80050c0:	4809      	ldr	r0, [pc, #36]	; (80050e8 <siprintf+0x38>)
 80050c2:	9107      	str	r1, [sp, #28]
 80050c4:	9104      	str	r1, [sp, #16]
 80050c6:	4909      	ldr	r1, [pc, #36]	; (80050ec <siprintf+0x3c>)
 80050c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80050cc:	9105      	str	r1, [sp, #20]
 80050ce:	6800      	ldr	r0, [r0, #0]
 80050d0:	9301      	str	r3, [sp, #4]
 80050d2:	a902      	add	r1, sp, #8
 80050d4:	f002 fea4 	bl	8007e20 <_svfiprintf_r>
 80050d8:	9b02      	ldr	r3, [sp, #8]
 80050da:	2200      	movs	r2, #0
 80050dc:	701a      	strb	r2, [r3, #0]
 80050de:	b01c      	add	sp, #112	; 0x70
 80050e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80050e4:	b003      	add	sp, #12
 80050e6:	4770      	bx	lr
 80050e8:	2000000c 	.word	0x2000000c
 80050ec:	ffff0208 	.word	0xffff0208

080050f0 <sulp>:
 80050f0:	b570      	push	{r4, r5, r6, lr}
 80050f2:	4604      	mov	r4, r0
 80050f4:	460d      	mov	r5, r1
 80050f6:	ec45 4b10 	vmov	d0, r4, r5
 80050fa:	4616      	mov	r6, r2
 80050fc:	f002 fc2c 	bl	8007958 <__ulp>
 8005100:	ec51 0b10 	vmov	r0, r1, d0
 8005104:	b17e      	cbz	r6, 8005126 <sulp+0x36>
 8005106:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800510a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800510e:	2b00      	cmp	r3, #0
 8005110:	dd09      	ble.n	8005126 <sulp+0x36>
 8005112:	051b      	lsls	r3, r3, #20
 8005114:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005118:	2400      	movs	r4, #0
 800511a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800511e:	4622      	mov	r2, r4
 8005120:	462b      	mov	r3, r5
 8005122:	f7fb fa79 	bl	8000618 <__aeabi_dmul>
 8005126:	bd70      	pop	{r4, r5, r6, pc}

08005128 <_strtod_l>:
 8005128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800512c:	b0a3      	sub	sp, #140	; 0x8c
 800512e:	461f      	mov	r7, r3
 8005130:	2300      	movs	r3, #0
 8005132:	931e      	str	r3, [sp, #120]	; 0x78
 8005134:	4ba4      	ldr	r3, [pc, #656]	; (80053c8 <_strtod_l+0x2a0>)
 8005136:	9219      	str	r2, [sp, #100]	; 0x64
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	9307      	str	r3, [sp, #28]
 800513c:	4604      	mov	r4, r0
 800513e:	4618      	mov	r0, r3
 8005140:	4688      	mov	r8, r1
 8005142:	f7fb f855 	bl	80001f0 <strlen>
 8005146:	f04f 0a00 	mov.w	sl, #0
 800514a:	4605      	mov	r5, r0
 800514c:	f04f 0b00 	mov.w	fp, #0
 8005150:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8005154:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005156:	781a      	ldrb	r2, [r3, #0]
 8005158:	2a2b      	cmp	r2, #43	; 0x2b
 800515a:	d04c      	beq.n	80051f6 <_strtod_l+0xce>
 800515c:	d839      	bhi.n	80051d2 <_strtod_l+0xaa>
 800515e:	2a0d      	cmp	r2, #13
 8005160:	d832      	bhi.n	80051c8 <_strtod_l+0xa0>
 8005162:	2a08      	cmp	r2, #8
 8005164:	d832      	bhi.n	80051cc <_strtod_l+0xa4>
 8005166:	2a00      	cmp	r2, #0
 8005168:	d03c      	beq.n	80051e4 <_strtod_l+0xbc>
 800516a:	2300      	movs	r3, #0
 800516c:	930e      	str	r3, [sp, #56]	; 0x38
 800516e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8005170:	7833      	ldrb	r3, [r6, #0]
 8005172:	2b30      	cmp	r3, #48	; 0x30
 8005174:	f040 80b4 	bne.w	80052e0 <_strtod_l+0x1b8>
 8005178:	7873      	ldrb	r3, [r6, #1]
 800517a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800517e:	2b58      	cmp	r3, #88	; 0x58
 8005180:	d16c      	bne.n	800525c <_strtod_l+0x134>
 8005182:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005184:	9301      	str	r3, [sp, #4]
 8005186:	ab1e      	add	r3, sp, #120	; 0x78
 8005188:	9702      	str	r7, [sp, #8]
 800518a:	9300      	str	r3, [sp, #0]
 800518c:	4a8f      	ldr	r2, [pc, #572]	; (80053cc <_strtod_l+0x2a4>)
 800518e:	ab1f      	add	r3, sp, #124	; 0x7c
 8005190:	a91d      	add	r1, sp, #116	; 0x74
 8005192:	4620      	mov	r0, r4
 8005194:	f001 fd40 	bl	8006c18 <__gethex>
 8005198:	f010 0707 	ands.w	r7, r0, #7
 800519c:	4605      	mov	r5, r0
 800519e:	d005      	beq.n	80051ac <_strtod_l+0x84>
 80051a0:	2f06      	cmp	r7, #6
 80051a2:	d12a      	bne.n	80051fa <_strtod_l+0xd2>
 80051a4:	3601      	adds	r6, #1
 80051a6:	2300      	movs	r3, #0
 80051a8:	961d      	str	r6, [sp, #116]	; 0x74
 80051aa:	930e      	str	r3, [sp, #56]	; 0x38
 80051ac:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	f040 8596 	bne.w	8005ce0 <_strtod_l+0xbb8>
 80051b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80051b6:	b1db      	cbz	r3, 80051f0 <_strtod_l+0xc8>
 80051b8:	4652      	mov	r2, sl
 80051ba:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80051be:	ec43 2b10 	vmov	d0, r2, r3
 80051c2:	b023      	add	sp, #140	; 0x8c
 80051c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051c8:	2a20      	cmp	r2, #32
 80051ca:	d1ce      	bne.n	800516a <_strtod_l+0x42>
 80051cc:	3301      	adds	r3, #1
 80051ce:	931d      	str	r3, [sp, #116]	; 0x74
 80051d0:	e7c0      	b.n	8005154 <_strtod_l+0x2c>
 80051d2:	2a2d      	cmp	r2, #45	; 0x2d
 80051d4:	d1c9      	bne.n	800516a <_strtod_l+0x42>
 80051d6:	2201      	movs	r2, #1
 80051d8:	920e      	str	r2, [sp, #56]	; 0x38
 80051da:	1c5a      	adds	r2, r3, #1
 80051dc:	921d      	str	r2, [sp, #116]	; 0x74
 80051de:	785b      	ldrb	r3, [r3, #1]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d1c4      	bne.n	800516e <_strtod_l+0x46>
 80051e4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80051e6:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	f040 8576 	bne.w	8005cdc <_strtod_l+0xbb4>
 80051f0:	4652      	mov	r2, sl
 80051f2:	465b      	mov	r3, fp
 80051f4:	e7e3      	b.n	80051be <_strtod_l+0x96>
 80051f6:	2200      	movs	r2, #0
 80051f8:	e7ee      	b.n	80051d8 <_strtod_l+0xb0>
 80051fa:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80051fc:	b13a      	cbz	r2, 800520e <_strtod_l+0xe6>
 80051fe:	2135      	movs	r1, #53	; 0x35
 8005200:	a820      	add	r0, sp, #128	; 0x80
 8005202:	f002 fcb4 	bl	8007b6e <__copybits>
 8005206:	991e      	ldr	r1, [sp, #120]	; 0x78
 8005208:	4620      	mov	r0, r4
 800520a:	f002 f879 	bl	8007300 <_Bfree>
 800520e:	3f01      	subs	r7, #1
 8005210:	2f05      	cmp	r7, #5
 8005212:	d807      	bhi.n	8005224 <_strtod_l+0xfc>
 8005214:	e8df f007 	tbb	[pc, r7]
 8005218:	1d180b0e 	.word	0x1d180b0e
 800521c:	030e      	.short	0x030e
 800521e:	f04f 0b00 	mov.w	fp, #0
 8005222:	46da      	mov	sl, fp
 8005224:	0728      	lsls	r0, r5, #28
 8005226:	d5c1      	bpl.n	80051ac <_strtod_l+0x84>
 8005228:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800522c:	e7be      	b.n	80051ac <_strtod_l+0x84>
 800522e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8005232:	e7f7      	b.n	8005224 <_strtod_l+0xfc>
 8005234:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8005238:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800523a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800523e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8005242:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8005246:	e7ed      	b.n	8005224 <_strtod_l+0xfc>
 8005248:	f8df b184 	ldr.w	fp, [pc, #388]	; 80053d0 <_strtod_l+0x2a8>
 800524c:	f04f 0a00 	mov.w	sl, #0
 8005250:	e7e8      	b.n	8005224 <_strtod_l+0xfc>
 8005252:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8005256:	f04f 3aff 	mov.w	sl, #4294967295
 800525a:	e7e3      	b.n	8005224 <_strtod_l+0xfc>
 800525c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800525e:	1c5a      	adds	r2, r3, #1
 8005260:	921d      	str	r2, [sp, #116]	; 0x74
 8005262:	785b      	ldrb	r3, [r3, #1]
 8005264:	2b30      	cmp	r3, #48	; 0x30
 8005266:	d0f9      	beq.n	800525c <_strtod_l+0x134>
 8005268:	2b00      	cmp	r3, #0
 800526a:	d09f      	beq.n	80051ac <_strtod_l+0x84>
 800526c:	2301      	movs	r3, #1
 800526e:	f04f 0900 	mov.w	r9, #0
 8005272:	9304      	str	r3, [sp, #16]
 8005274:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005276:	930a      	str	r3, [sp, #40]	; 0x28
 8005278:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800527c:	464f      	mov	r7, r9
 800527e:	220a      	movs	r2, #10
 8005280:	981d      	ldr	r0, [sp, #116]	; 0x74
 8005282:	7806      	ldrb	r6, [r0, #0]
 8005284:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8005288:	b2d9      	uxtb	r1, r3
 800528a:	2909      	cmp	r1, #9
 800528c:	d92a      	bls.n	80052e4 <_strtod_l+0x1bc>
 800528e:	9907      	ldr	r1, [sp, #28]
 8005290:	462a      	mov	r2, r5
 8005292:	f002 fedd 	bl	8008050 <strncmp>
 8005296:	b398      	cbz	r0, 8005300 <_strtod_l+0x1d8>
 8005298:	2000      	movs	r0, #0
 800529a:	4633      	mov	r3, r6
 800529c:	463d      	mov	r5, r7
 800529e:	9007      	str	r0, [sp, #28]
 80052a0:	4602      	mov	r2, r0
 80052a2:	2b65      	cmp	r3, #101	; 0x65
 80052a4:	d001      	beq.n	80052aa <_strtod_l+0x182>
 80052a6:	2b45      	cmp	r3, #69	; 0x45
 80052a8:	d118      	bne.n	80052dc <_strtod_l+0x1b4>
 80052aa:	b91d      	cbnz	r5, 80052b4 <_strtod_l+0x18c>
 80052ac:	9b04      	ldr	r3, [sp, #16]
 80052ae:	4303      	orrs	r3, r0
 80052b0:	d098      	beq.n	80051e4 <_strtod_l+0xbc>
 80052b2:	2500      	movs	r5, #0
 80052b4:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 80052b8:	f108 0301 	add.w	r3, r8, #1
 80052bc:	931d      	str	r3, [sp, #116]	; 0x74
 80052be:	f898 3001 	ldrb.w	r3, [r8, #1]
 80052c2:	2b2b      	cmp	r3, #43	; 0x2b
 80052c4:	d075      	beq.n	80053b2 <_strtod_l+0x28a>
 80052c6:	2b2d      	cmp	r3, #45	; 0x2d
 80052c8:	d07b      	beq.n	80053c2 <_strtod_l+0x29a>
 80052ca:	f04f 0c00 	mov.w	ip, #0
 80052ce:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80052d2:	2909      	cmp	r1, #9
 80052d4:	f240 8082 	bls.w	80053dc <_strtod_l+0x2b4>
 80052d8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80052dc:	2600      	movs	r6, #0
 80052de:	e09d      	b.n	800541c <_strtod_l+0x2f4>
 80052e0:	2300      	movs	r3, #0
 80052e2:	e7c4      	b.n	800526e <_strtod_l+0x146>
 80052e4:	2f08      	cmp	r7, #8
 80052e6:	bfd8      	it	le
 80052e8:	9909      	ldrle	r1, [sp, #36]	; 0x24
 80052ea:	f100 0001 	add.w	r0, r0, #1
 80052ee:	bfda      	itte	le
 80052f0:	fb02 3301 	mlale	r3, r2, r1, r3
 80052f4:	9309      	strle	r3, [sp, #36]	; 0x24
 80052f6:	fb02 3909 	mlagt	r9, r2, r9, r3
 80052fa:	3701      	adds	r7, #1
 80052fc:	901d      	str	r0, [sp, #116]	; 0x74
 80052fe:	e7bf      	b.n	8005280 <_strtod_l+0x158>
 8005300:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005302:	195a      	adds	r2, r3, r5
 8005304:	921d      	str	r2, [sp, #116]	; 0x74
 8005306:	5d5b      	ldrb	r3, [r3, r5]
 8005308:	2f00      	cmp	r7, #0
 800530a:	d037      	beq.n	800537c <_strtod_l+0x254>
 800530c:	9007      	str	r0, [sp, #28]
 800530e:	463d      	mov	r5, r7
 8005310:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8005314:	2a09      	cmp	r2, #9
 8005316:	d912      	bls.n	800533e <_strtod_l+0x216>
 8005318:	2201      	movs	r2, #1
 800531a:	e7c2      	b.n	80052a2 <_strtod_l+0x17a>
 800531c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800531e:	1c5a      	adds	r2, r3, #1
 8005320:	921d      	str	r2, [sp, #116]	; 0x74
 8005322:	785b      	ldrb	r3, [r3, #1]
 8005324:	3001      	adds	r0, #1
 8005326:	2b30      	cmp	r3, #48	; 0x30
 8005328:	d0f8      	beq.n	800531c <_strtod_l+0x1f4>
 800532a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800532e:	2a08      	cmp	r2, #8
 8005330:	f200 84db 	bhi.w	8005cea <_strtod_l+0xbc2>
 8005334:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8005336:	9007      	str	r0, [sp, #28]
 8005338:	2000      	movs	r0, #0
 800533a:	920a      	str	r2, [sp, #40]	; 0x28
 800533c:	4605      	mov	r5, r0
 800533e:	3b30      	subs	r3, #48	; 0x30
 8005340:	f100 0201 	add.w	r2, r0, #1
 8005344:	d014      	beq.n	8005370 <_strtod_l+0x248>
 8005346:	9907      	ldr	r1, [sp, #28]
 8005348:	4411      	add	r1, r2
 800534a:	9107      	str	r1, [sp, #28]
 800534c:	462a      	mov	r2, r5
 800534e:	eb00 0e05 	add.w	lr, r0, r5
 8005352:	210a      	movs	r1, #10
 8005354:	4572      	cmp	r2, lr
 8005356:	d113      	bne.n	8005380 <_strtod_l+0x258>
 8005358:	182a      	adds	r2, r5, r0
 800535a:	2a08      	cmp	r2, #8
 800535c:	f105 0501 	add.w	r5, r5, #1
 8005360:	4405      	add	r5, r0
 8005362:	dc1c      	bgt.n	800539e <_strtod_l+0x276>
 8005364:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005366:	220a      	movs	r2, #10
 8005368:	fb02 3301 	mla	r3, r2, r1, r3
 800536c:	9309      	str	r3, [sp, #36]	; 0x24
 800536e:	2200      	movs	r2, #0
 8005370:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005372:	1c59      	adds	r1, r3, #1
 8005374:	911d      	str	r1, [sp, #116]	; 0x74
 8005376:	785b      	ldrb	r3, [r3, #1]
 8005378:	4610      	mov	r0, r2
 800537a:	e7c9      	b.n	8005310 <_strtod_l+0x1e8>
 800537c:	4638      	mov	r0, r7
 800537e:	e7d2      	b.n	8005326 <_strtod_l+0x1fe>
 8005380:	2a08      	cmp	r2, #8
 8005382:	dc04      	bgt.n	800538e <_strtod_l+0x266>
 8005384:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8005386:	434e      	muls	r6, r1
 8005388:	9609      	str	r6, [sp, #36]	; 0x24
 800538a:	3201      	adds	r2, #1
 800538c:	e7e2      	b.n	8005354 <_strtod_l+0x22c>
 800538e:	f102 0c01 	add.w	ip, r2, #1
 8005392:	f1bc 0f10 	cmp.w	ip, #16
 8005396:	bfd8      	it	le
 8005398:	fb01 f909 	mulle.w	r9, r1, r9
 800539c:	e7f5      	b.n	800538a <_strtod_l+0x262>
 800539e:	2d10      	cmp	r5, #16
 80053a0:	bfdc      	itt	le
 80053a2:	220a      	movle	r2, #10
 80053a4:	fb02 3909 	mlale	r9, r2, r9, r3
 80053a8:	e7e1      	b.n	800536e <_strtod_l+0x246>
 80053aa:	2300      	movs	r3, #0
 80053ac:	9307      	str	r3, [sp, #28]
 80053ae:	2201      	movs	r2, #1
 80053b0:	e77c      	b.n	80052ac <_strtod_l+0x184>
 80053b2:	f04f 0c00 	mov.w	ip, #0
 80053b6:	f108 0302 	add.w	r3, r8, #2
 80053ba:	931d      	str	r3, [sp, #116]	; 0x74
 80053bc:	f898 3002 	ldrb.w	r3, [r8, #2]
 80053c0:	e785      	b.n	80052ce <_strtod_l+0x1a6>
 80053c2:	f04f 0c01 	mov.w	ip, #1
 80053c6:	e7f6      	b.n	80053b6 <_strtod_l+0x28e>
 80053c8:	08008ed8 	.word	0x08008ed8
 80053cc:	08008c84 	.word	0x08008c84
 80053d0:	7ff00000 	.word	0x7ff00000
 80053d4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80053d6:	1c59      	adds	r1, r3, #1
 80053d8:	911d      	str	r1, [sp, #116]	; 0x74
 80053da:	785b      	ldrb	r3, [r3, #1]
 80053dc:	2b30      	cmp	r3, #48	; 0x30
 80053de:	d0f9      	beq.n	80053d4 <_strtod_l+0x2ac>
 80053e0:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 80053e4:	2908      	cmp	r1, #8
 80053e6:	f63f af79 	bhi.w	80052dc <_strtod_l+0x1b4>
 80053ea:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80053ee:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80053f0:	9308      	str	r3, [sp, #32]
 80053f2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80053f4:	1c59      	adds	r1, r3, #1
 80053f6:	911d      	str	r1, [sp, #116]	; 0x74
 80053f8:	785b      	ldrb	r3, [r3, #1]
 80053fa:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 80053fe:	2e09      	cmp	r6, #9
 8005400:	d937      	bls.n	8005472 <_strtod_l+0x34a>
 8005402:	9e08      	ldr	r6, [sp, #32]
 8005404:	1b89      	subs	r1, r1, r6
 8005406:	2908      	cmp	r1, #8
 8005408:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800540c:	dc02      	bgt.n	8005414 <_strtod_l+0x2ec>
 800540e:	4576      	cmp	r6, lr
 8005410:	bfa8      	it	ge
 8005412:	4676      	movge	r6, lr
 8005414:	f1bc 0f00 	cmp.w	ip, #0
 8005418:	d000      	beq.n	800541c <_strtod_l+0x2f4>
 800541a:	4276      	negs	r6, r6
 800541c:	2d00      	cmp	r5, #0
 800541e:	d14f      	bne.n	80054c0 <_strtod_l+0x398>
 8005420:	9904      	ldr	r1, [sp, #16]
 8005422:	4301      	orrs	r1, r0
 8005424:	f47f aec2 	bne.w	80051ac <_strtod_l+0x84>
 8005428:	2a00      	cmp	r2, #0
 800542a:	f47f aedb 	bne.w	80051e4 <_strtod_l+0xbc>
 800542e:	2b69      	cmp	r3, #105	; 0x69
 8005430:	d027      	beq.n	8005482 <_strtod_l+0x35a>
 8005432:	dc24      	bgt.n	800547e <_strtod_l+0x356>
 8005434:	2b49      	cmp	r3, #73	; 0x49
 8005436:	d024      	beq.n	8005482 <_strtod_l+0x35a>
 8005438:	2b4e      	cmp	r3, #78	; 0x4e
 800543a:	f47f aed3 	bne.w	80051e4 <_strtod_l+0xbc>
 800543e:	499e      	ldr	r1, [pc, #632]	; (80056b8 <_strtod_l+0x590>)
 8005440:	a81d      	add	r0, sp, #116	; 0x74
 8005442:	f001 fe41 	bl	80070c8 <__match>
 8005446:	2800      	cmp	r0, #0
 8005448:	f43f aecc 	beq.w	80051e4 <_strtod_l+0xbc>
 800544c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800544e:	781b      	ldrb	r3, [r3, #0]
 8005450:	2b28      	cmp	r3, #40	; 0x28
 8005452:	d12d      	bne.n	80054b0 <_strtod_l+0x388>
 8005454:	4999      	ldr	r1, [pc, #612]	; (80056bc <_strtod_l+0x594>)
 8005456:	aa20      	add	r2, sp, #128	; 0x80
 8005458:	a81d      	add	r0, sp, #116	; 0x74
 800545a:	f001 fe49 	bl	80070f0 <__hexnan>
 800545e:	2805      	cmp	r0, #5
 8005460:	d126      	bne.n	80054b0 <_strtod_l+0x388>
 8005462:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005464:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8005468:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800546c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8005470:	e69c      	b.n	80051ac <_strtod_l+0x84>
 8005472:	210a      	movs	r1, #10
 8005474:	fb01 3e0e 	mla	lr, r1, lr, r3
 8005478:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800547c:	e7b9      	b.n	80053f2 <_strtod_l+0x2ca>
 800547e:	2b6e      	cmp	r3, #110	; 0x6e
 8005480:	e7db      	b.n	800543a <_strtod_l+0x312>
 8005482:	498f      	ldr	r1, [pc, #572]	; (80056c0 <_strtod_l+0x598>)
 8005484:	a81d      	add	r0, sp, #116	; 0x74
 8005486:	f001 fe1f 	bl	80070c8 <__match>
 800548a:	2800      	cmp	r0, #0
 800548c:	f43f aeaa 	beq.w	80051e4 <_strtod_l+0xbc>
 8005490:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005492:	498c      	ldr	r1, [pc, #560]	; (80056c4 <_strtod_l+0x59c>)
 8005494:	3b01      	subs	r3, #1
 8005496:	a81d      	add	r0, sp, #116	; 0x74
 8005498:	931d      	str	r3, [sp, #116]	; 0x74
 800549a:	f001 fe15 	bl	80070c8 <__match>
 800549e:	b910      	cbnz	r0, 80054a6 <_strtod_l+0x37e>
 80054a0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80054a2:	3301      	adds	r3, #1
 80054a4:	931d      	str	r3, [sp, #116]	; 0x74
 80054a6:	f8df b22c 	ldr.w	fp, [pc, #556]	; 80056d4 <_strtod_l+0x5ac>
 80054aa:	f04f 0a00 	mov.w	sl, #0
 80054ae:	e67d      	b.n	80051ac <_strtod_l+0x84>
 80054b0:	4885      	ldr	r0, [pc, #532]	; (80056c8 <_strtod_l+0x5a0>)
 80054b2:	f002 fdb5 	bl	8008020 <nan>
 80054b6:	ed8d 0b04 	vstr	d0, [sp, #16]
 80054ba:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80054be:	e675      	b.n	80051ac <_strtod_l+0x84>
 80054c0:	9b07      	ldr	r3, [sp, #28]
 80054c2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80054c4:	1af3      	subs	r3, r6, r3
 80054c6:	2f00      	cmp	r7, #0
 80054c8:	bf08      	it	eq
 80054ca:	462f      	moveq	r7, r5
 80054cc:	2d10      	cmp	r5, #16
 80054ce:	9308      	str	r3, [sp, #32]
 80054d0:	46a8      	mov	r8, r5
 80054d2:	bfa8      	it	ge
 80054d4:	f04f 0810 	movge.w	r8, #16
 80054d8:	f7fb f824 	bl	8000524 <__aeabi_ui2d>
 80054dc:	2d09      	cmp	r5, #9
 80054de:	4682      	mov	sl, r0
 80054e0:	468b      	mov	fp, r1
 80054e2:	dd13      	ble.n	800550c <_strtod_l+0x3e4>
 80054e4:	4b79      	ldr	r3, [pc, #484]	; (80056cc <_strtod_l+0x5a4>)
 80054e6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80054ea:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80054ee:	f7fb f893 	bl	8000618 <__aeabi_dmul>
 80054f2:	4682      	mov	sl, r0
 80054f4:	4648      	mov	r0, r9
 80054f6:	468b      	mov	fp, r1
 80054f8:	f7fb f814 	bl	8000524 <__aeabi_ui2d>
 80054fc:	4602      	mov	r2, r0
 80054fe:	460b      	mov	r3, r1
 8005500:	4650      	mov	r0, sl
 8005502:	4659      	mov	r1, fp
 8005504:	f7fa fed2 	bl	80002ac <__adddf3>
 8005508:	4682      	mov	sl, r0
 800550a:	468b      	mov	fp, r1
 800550c:	2d0f      	cmp	r5, #15
 800550e:	dc38      	bgt.n	8005582 <_strtod_l+0x45a>
 8005510:	9b08      	ldr	r3, [sp, #32]
 8005512:	2b00      	cmp	r3, #0
 8005514:	f43f ae4a 	beq.w	80051ac <_strtod_l+0x84>
 8005518:	dd24      	ble.n	8005564 <_strtod_l+0x43c>
 800551a:	2b16      	cmp	r3, #22
 800551c:	dc0b      	bgt.n	8005536 <_strtod_l+0x40e>
 800551e:	4d6b      	ldr	r5, [pc, #428]	; (80056cc <_strtod_l+0x5a4>)
 8005520:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8005524:	e9d5 0100 	ldrd	r0, r1, [r5]
 8005528:	4652      	mov	r2, sl
 800552a:	465b      	mov	r3, fp
 800552c:	f7fb f874 	bl	8000618 <__aeabi_dmul>
 8005530:	4682      	mov	sl, r0
 8005532:	468b      	mov	fp, r1
 8005534:	e63a      	b.n	80051ac <_strtod_l+0x84>
 8005536:	9a08      	ldr	r2, [sp, #32]
 8005538:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800553c:	4293      	cmp	r3, r2
 800553e:	db20      	blt.n	8005582 <_strtod_l+0x45a>
 8005540:	4c62      	ldr	r4, [pc, #392]	; (80056cc <_strtod_l+0x5a4>)
 8005542:	f1c5 050f 	rsb	r5, r5, #15
 8005546:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800554a:	4652      	mov	r2, sl
 800554c:	465b      	mov	r3, fp
 800554e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005552:	f7fb f861 	bl	8000618 <__aeabi_dmul>
 8005556:	9b08      	ldr	r3, [sp, #32]
 8005558:	1b5d      	subs	r5, r3, r5
 800555a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800555e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8005562:	e7e3      	b.n	800552c <_strtod_l+0x404>
 8005564:	9b08      	ldr	r3, [sp, #32]
 8005566:	3316      	adds	r3, #22
 8005568:	db0b      	blt.n	8005582 <_strtod_l+0x45a>
 800556a:	9b07      	ldr	r3, [sp, #28]
 800556c:	4a57      	ldr	r2, [pc, #348]	; (80056cc <_strtod_l+0x5a4>)
 800556e:	1b9e      	subs	r6, r3, r6
 8005570:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8005574:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005578:	4650      	mov	r0, sl
 800557a:	4659      	mov	r1, fp
 800557c:	f7fb f976 	bl	800086c <__aeabi_ddiv>
 8005580:	e7d6      	b.n	8005530 <_strtod_l+0x408>
 8005582:	9b08      	ldr	r3, [sp, #32]
 8005584:	eba5 0808 	sub.w	r8, r5, r8
 8005588:	4498      	add	r8, r3
 800558a:	f1b8 0f00 	cmp.w	r8, #0
 800558e:	dd71      	ble.n	8005674 <_strtod_l+0x54c>
 8005590:	f018 030f 	ands.w	r3, r8, #15
 8005594:	d00a      	beq.n	80055ac <_strtod_l+0x484>
 8005596:	494d      	ldr	r1, [pc, #308]	; (80056cc <_strtod_l+0x5a4>)
 8005598:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800559c:	4652      	mov	r2, sl
 800559e:	465b      	mov	r3, fp
 80055a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80055a4:	f7fb f838 	bl	8000618 <__aeabi_dmul>
 80055a8:	4682      	mov	sl, r0
 80055aa:	468b      	mov	fp, r1
 80055ac:	f038 080f 	bics.w	r8, r8, #15
 80055b0:	d04d      	beq.n	800564e <_strtod_l+0x526>
 80055b2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80055b6:	dd22      	ble.n	80055fe <_strtod_l+0x4d6>
 80055b8:	2500      	movs	r5, #0
 80055ba:	462e      	mov	r6, r5
 80055bc:	9509      	str	r5, [sp, #36]	; 0x24
 80055be:	9507      	str	r5, [sp, #28]
 80055c0:	2322      	movs	r3, #34	; 0x22
 80055c2:	f8df b110 	ldr.w	fp, [pc, #272]	; 80056d4 <_strtod_l+0x5ac>
 80055c6:	6023      	str	r3, [r4, #0]
 80055c8:	f04f 0a00 	mov.w	sl, #0
 80055cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	f43f adec 	beq.w	80051ac <_strtod_l+0x84>
 80055d4:	991e      	ldr	r1, [sp, #120]	; 0x78
 80055d6:	4620      	mov	r0, r4
 80055d8:	f001 fe92 	bl	8007300 <_Bfree>
 80055dc:	9907      	ldr	r1, [sp, #28]
 80055de:	4620      	mov	r0, r4
 80055e0:	f001 fe8e 	bl	8007300 <_Bfree>
 80055e4:	4631      	mov	r1, r6
 80055e6:	4620      	mov	r0, r4
 80055e8:	f001 fe8a 	bl	8007300 <_Bfree>
 80055ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 80055ee:	4620      	mov	r0, r4
 80055f0:	f001 fe86 	bl	8007300 <_Bfree>
 80055f4:	4629      	mov	r1, r5
 80055f6:	4620      	mov	r0, r4
 80055f8:	f001 fe82 	bl	8007300 <_Bfree>
 80055fc:	e5d6      	b.n	80051ac <_strtod_l+0x84>
 80055fe:	2300      	movs	r3, #0
 8005600:	ea4f 1828 	mov.w	r8, r8, asr #4
 8005604:	4650      	mov	r0, sl
 8005606:	4659      	mov	r1, fp
 8005608:	4699      	mov	r9, r3
 800560a:	f1b8 0f01 	cmp.w	r8, #1
 800560e:	dc21      	bgt.n	8005654 <_strtod_l+0x52c>
 8005610:	b10b      	cbz	r3, 8005616 <_strtod_l+0x4ee>
 8005612:	4682      	mov	sl, r0
 8005614:	468b      	mov	fp, r1
 8005616:	4b2e      	ldr	r3, [pc, #184]	; (80056d0 <_strtod_l+0x5a8>)
 8005618:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800561c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8005620:	4652      	mov	r2, sl
 8005622:	465b      	mov	r3, fp
 8005624:	e9d9 0100 	ldrd	r0, r1, [r9]
 8005628:	f7fa fff6 	bl	8000618 <__aeabi_dmul>
 800562c:	4b29      	ldr	r3, [pc, #164]	; (80056d4 <_strtod_l+0x5ac>)
 800562e:	460a      	mov	r2, r1
 8005630:	400b      	ands	r3, r1
 8005632:	4929      	ldr	r1, [pc, #164]	; (80056d8 <_strtod_l+0x5b0>)
 8005634:	428b      	cmp	r3, r1
 8005636:	4682      	mov	sl, r0
 8005638:	d8be      	bhi.n	80055b8 <_strtod_l+0x490>
 800563a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800563e:	428b      	cmp	r3, r1
 8005640:	bf86      	itte	hi
 8005642:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80056dc <_strtod_l+0x5b4>
 8005646:	f04f 3aff 	movhi.w	sl, #4294967295
 800564a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800564e:	2300      	movs	r3, #0
 8005650:	9304      	str	r3, [sp, #16]
 8005652:	e081      	b.n	8005758 <_strtod_l+0x630>
 8005654:	f018 0f01 	tst.w	r8, #1
 8005658:	d007      	beq.n	800566a <_strtod_l+0x542>
 800565a:	4b1d      	ldr	r3, [pc, #116]	; (80056d0 <_strtod_l+0x5a8>)
 800565c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8005660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005664:	f7fa ffd8 	bl	8000618 <__aeabi_dmul>
 8005668:	2301      	movs	r3, #1
 800566a:	f109 0901 	add.w	r9, r9, #1
 800566e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005672:	e7ca      	b.n	800560a <_strtod_l+0x4e2>
 8005674:	d0eb      	beq.n	800564e <_strtod_l+0x526>
 8005676:	f1c8 0800 	rsb	r8, r8, #0
 800567a:	f018 020f 	ands.w	r2, r8, #15
 800567e:	d00a      	beq.n	8005696 <_strtod_l+0x56e>
 8005680:	4b12      	ldr	r3, [pc, #72]	; (80056cc <_strtod_l+0x5a4>)
 8005682:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005686:	4650      	mov	r0, sl
 8005688:	4659      	mov	r1, fp
 800568a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800568e:	f7fb f8ed 	bl	800086c <__aeabi_ddiv>
 8005692:	4682      	mov	sl, r0
 8005694:	468b      	mov	fp, r1
 8005696:	ea5f 1828 	movs.w	r8, r8, asr #4
 800569a:	d0d8      	beq.n	800564e <_strtod_l+0x526>
 800569c:	f1b8 0f1f 	cmp.w	r8, #31
 80056a0:	dd1e      	ble.n	80056e0 <_strtod_l+0x5b8>
 80056a2:	2500      	movs	r5, #0
 80056a4:	462e      	mov	r6, r5
 80056a6:	9509      	str	r5, [sp, #36]	; 0x24
 80056a8:	9507      	str	r5, [sp, #28]
 80056aa:	2322      	movs	r3, #34	; 0x22
 80056ac:	f04f 0a00 	mov.w	sl, #0
 80056b0:	f04f 0b00 	mov.w	fp, #0
 80056b4:	6023      	str	r3, [r4, #0]
 80056b6:	e789      	b.n	80055cc <_strtod_l+0x4a4>
 80056b8:	08008c55 	.word	0x08008c55
 80056bc:	08008c98 	.word	0x08008c98
 80056c0:	08008c4d 	.word	0x08008c4d
 80056c4:	08008ddc 	.word	0x08008ddc
 80056c8:	08009098 	.word	0x08009098
 80056cc:	08008f78 	.word	0x08008f78
 80056d0:	08008f50 	.word	0x08008f50
 80056d4:	7ff00000 	.word	0x7ff00000
 80056d8:	7ca00000 	.word	0x7ca00000
 80056dc:	7fefffff 	.word	0x7fefffff
 80056e0:	f018 0310 	ands.w	r3, r8, #16
 80056e4:	bf18      	it	ne
 80056e6:	236a      	movne	r3, #106	; 0x6a
 80056e8:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8005aa0 <_strtod_l+0x978>
 80056ec:	9304      	str	r3, [sp, #16]
 80056ee:	4650      	mov	r0, sl
 80056f0:	4659      	mov	r1, fp
 80056f2:	2300      	movs	r3, #0
 80056f4:	f018 0f01 	tst.w	r8, #1
 80056f8:	d004      	beq.n	8005704 <_strtod_l+0x5dc>
 80056fa:	e9d9 2300 	ldrd	r2, r3, [r9]
 80056fe:	f7fa ff8b 	bl	8000618 <__aeabi_dmul>
 8005702:	2301      	movs	r3, #1
 8005704:	ea5f 0868 	movs.w	r8, r8, asr #1
 8005708:	f109 0908 	add.w	r9, r9, #8
 800570c:	d1f2      	bne.n	80056f4 <_strtod_l+0x5cc>
 800570e:	b10b      	cbz	r3, 8005714 <_strtod_l+0x5ec>
 8005710:	4682      	mov	sl, r0
 8005712:	468b      	mov	fp, r1
 8005714:	9b04      	ldr	r3, [sp, #16]
 8005716:	b1bb      	cbz	r3, 8005748 <_strtod_l+0x620>
 8005718:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800571c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005720:	2b00      	cmp	r3, #0
 8005722:	4659      	mov	r1, fp
 8005724:	dd10      	ble.n	8005748 <_strtod_l+0x620>
 8005726:	2b1f      	cmp	r3, #31
 8005728:	f340 8128 	ble.w	800597c <_strtod_l+0x854>
 800572c:	2b34      	cmp	r3, #52	; 0x34
 800572e:	bfde      	ittt	le
 8005730:	3b20      	suble	r3, #32
 8005732:	f04f 32ff 	movle.w	r2, #4294967295
 8005736:	fa02 f303 	lslle.w	r3, r2, r3
 800573a:	f04f 0a00 	mov.w	sl, #0
 800573e:	bfcc      	ite	gt
 8005740:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8005744:	ea03 0b01 	andle.w	fp, r3, r1
 8005748:	2200      	movs	r2, #0
 800574a:	2300      	movs	r3, #0
 800574c:	4650      	mov	r0, sl
 800574e:	4659      	mov	r1, fp
 8005750:	f7fb f9ca 	bl	8000ae8 <__aeabi_dcmpeq>
 8005754:	2800      	cmp	r0, #0
 8005756:	d1a4      	bne.n	80056a2 <_strtod_l+0x57a>
 8005758:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800575a:	9300      	str	r3, [sp, #0]
 800575c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800575e:	462b      	mov	r3, r5
 8005760:	463a      	mov	r2, r7
 8005762:	4620      	mov	r0, r4
 8005764:	f001 fe38 	bl	80073d8 <__s2b>
 8005768:	9009      	str	r0, [sp, #36]	; 0x24
 800576a:	2800      	cmp	r0, #0
 800576c:	f43f af24 	beq.w	80055b8 <_strtod_l+0x490>
 8005770:	9b07      	ldr	r3, [sp, #28]
 8005772:	1b9e      	subs	r6, r3, r6
 8005774:	9b08      	ldr	r3, [sp, #32]
 8005776:	2b00      	cmp	r3, #0
 8005778:	bfb4      	ite	lt
 800577a:	4633      	movlt	r3, r6
 800577c:	2300      	movge	r3, #0
 800577e:	9310      	str	r3, [sp, #64]	; 0x40
 8005780:	9b08      	ldr	r3, [sp, #32]
 8005782:	2500      	movs	r5, #0
 8005784:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005788:	9318      	str	r3, [sp, #96]	; 0x60
 800578a:	462e      	mov	r6, r5
 800578c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800578e:	4620      	mov	r0, r4
 8005790:	6859      	ldr	r1, [r3, #4]
 8005792:	f001 fd75 	bl	8007280 <_Balloc>
 8005796:	9007      	str	r0, [sp, #28]
 8005798:	2800      	cmp	r0, #0
 800579a:	f43f af11 	beq.w	80055c0 <_strtod_l+0x498>
 800579e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057a0:	691a      	ldr	r2, [r3, #16]
 80057a2:	3202      	adds	r2, #2
 80057a4:	f103 010c 	add.w	r1, r3, #12
 80057a8:	0092      	lsls	r2, r2, #2
 80057aa:	300c      	adds	r0, #12
 80057ac:	f001 fd5a 	bl	8007264 <memcpy>
 80057b0:	ec4b ab10 	vmov	d0, sl, fp
 80057b4:	aa20      	add	r2, sp, #128	; 0x80
 80057b6:	a91f      	add	r1, sp, #124	; 0x7c
 80057b8:	4620      	mov	r0, r4
 80057ba:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80057be:	f002 f947 	bl	8007a50 <__d2b>
 80057c2:	901e      	str	r0, [sp, #120]	; 0x78
 80057c4:	2800      	cmp	r0, #0
 80057c6:	f43f aefb 	beq.w	80055c0 <_strtod_l+0x498>
 80057ca:	2101      	movs	r1, #1
 80057cc:	4620      	mov	r0, r4
 80057ce:	f001 fe9d 	bl	800750c <__i2b>
 80057d2:	4606      	mov	r6, r0
 80057d4:	2800      	cmp	r0, #0
 80057d6:	f43f aef3 	beq.w	80055c0 <_strtod_l+0x498>
 80057da:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80057dc:	9904      	ldr	r1, [sp, #16]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	bfab      	itete	ge
 80057e2:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 80057e4:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 80057e6:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 80057e8:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 80057ec:	bfac      	ite	ge
 80057ee:	eb03 0902 	addge.w	r9, r3, r2
 80057f2:	1ad7      	sublt	r7, r2, r3
 80057f4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80057f6:	eba3 0801 	sub.w	r8, r3, r1
 80057fa:	4490      	add	r8, r2
 80057fc:	4ba3      	ldr	r3, [pc, #652]	; (8005a8c <_strtod_l+0x964>)
 80057fe:	f108 38ff 	add.w	r8, r8, #4294967295
 8005802:	4598      	cmp	r8, r3
 8005804:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8005808:	f280 80cc 	bge.w	80059a4 <_strtod_l+0x87c>
 800580c:	eba3 0308 	sub.w	r3, r3, r8
 8005810:	2b1f      	cmp	r3, #31
 8005812:	eba2 0203 	sub.w	r2, r2, r3
 8005816:	f04f 0101 	mov.w	r1, #1
 800581a:	f300 80b6 	bgt.w	800598a <_strtod_l+0x862>
 800581e:	fa01 f303 	lsl.w	r3, r1, r3
 8005822:	9311      	str	r3, [sp, #68]	; 0x44
 8005824:	2300      	movs	r3, #0
 8005826:	930c      	str	r3, [sp, #48]	; 0x30
 8005828:	eb09 0802 	add.w	r8, r9, r2
 800582c:	9b04      	ldr	r3, [sp, #16]
 800582e:	45c1      	cmp	r9, r8
 8005830:	4417      	add	r7, r2
 8005832:	441f      	add	r7, r3
 8005834:	464b      	mov	r3, r9
 8005836:	bfa8      	it	ge
 8005838:	4643      	movge	r3, r8
 800583a:	42bb      	cmp	r3, r7
 800583c:	bfa8      	it	ge
 800583e:	463b      	movge	r3, r7
 8005840:	2b00      	cmp	r3, #0
 8005842:	bfc2      	ittt	gt
 8005844:	eba8 0803 	subgt.w	r8, r8, r3
 8005848:	1aff      	subgt	r7, r7, r3
 800584a:	eba9 0903 	subgt.w	r9, r9, r3
 800584e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005850:	2b00      	cmp	r3, #0
 8005852:	dd17      	ble.n	8005884 <_strtod_l+0x75c>
 8005854:	4631      	mov	r1, r6
 8005856:	461a      	mov	r2, r3
 8005858:	4620      	mov	r0, r4
 800585a:	f001 ff13 	bl	8007684 <__pow5mult>
 800585e:	4606      	mov	r6, r0
 8005860:	2800      	cmp	r0, #0
 8005862:	f43f aead 	beq.w	80055c0 <_strtod_l+0x498>
 8005866:	4601      	mov	r1, r0
 8005868:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800586a:	4620      	mov	r0, r4
 800586c:	f001 fe64 	bl	8007538 <__multiply>
 8005870:	900f      	str	r0, [sp, #60]	; 0x3c
 8005872:	2800      	cmp	r0, #0
 8005874:	f43f aea4 	beq.w	80055c0 <_strtod_l+0x498>
 8005878:	991e      	ldr	r1, [sp, #120]	; 0x78
 800587a:	4620      	mov	r0, r4
 800587c:	f001 fd40 	bl	8007300 <_Bfree>
 8005880:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005882:	931e      	str	r3, [sp, #120]	; 0x78
 8005884:	f1b8 0f00 	cmp.w	r8, #0
 8005888:	f300 8091 	bgt.w	80059ae <_strtod_l+0x886>
 800588c:	9b08      	ldr	r3, [sp, #32]
 800588e:	2b00      	cmp	r3, #0
 8005890:	dd08      	ble.n	80058a4 <_strtod_l+0x77c>
 8005892:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8005894:	9907      	ldr	r1, [sp, #28]
 8005896:	4620      	mov	r0, r4
 8005898:	f001 fef4 	bl	8007684 <__pow5mult>
 800589c:	9007      	str	r0, [sp, #28]
 800589e:	2800      	cmp	r0, #0
 80058a0:	f43f ae8e 	beq.w	80055c0 <_strtod_l+0x498>
 80058a4:	2f00      	cmp	r7, #0
 80058a6:	dd08      	ble.n	80058ba <_strtod_l+0x792>
 80058a8:	9907      	ldr	r1, [sp, #28]
 80058aa:	463a      	mov	r2, r7
 80058ac:	4620      	mov	r0, r4
 80058ae:	f001 ff43 	bl	8007738 <__lshift>
 80058b2:	9007      	str	r0, [sp, #28]
 80058b4:	2800      	cmp	r0, #0
 80058b6:	f43f ae83 	beq.w	80055c0 <_strtod_l+0x498>
 80058ba:	f1b9 0f00 	cmp.w	r9, #0
 80058be:	dd08      	ble.n	80058d2 <_strtod_l+0x7aa>
 80058c0:	4631      	mov	r1, r6
 80058c2:	464a      	mov	r2, r9
 80058c4:	4620      	mov	r0, r4
 80058c6:	f001 ff37 	bl	8007738 <__lshift>
 80058ca:	4606      	mov	r6, r0
 80058cc:	2800      	cmp	r0, #0
 80058ce:	f43f ae77 	beq.w	80055c0 <_strtod_l+0x498>
 80058d2:	9a07      	ldr	r2, [sp, #28]
 80058d4:	991e      	ldr	r1, [sp, #120]	; 0x78
 80058d6:	4620      	mov	r0, r4
 80058d8:	f001 ffb6 	bl	8007848 <__mdiff>
 80058dc:	4605      	mov	r5, r0
 80058de:	2800      	cmp	r0, #0
 80058e0:	f43f ae6e 	beq.w	80055c0 <_strtod_l+0x498>
 80058e4:	68c3      	ldr	r3, [r0, #12]
 80058e6:	930f      	str	r3, [sp, #60]	; 0x3c
 80058e8:	2300      	movs	r3, #0
 80058ea:	60c3      	str	r3, [r0, #12]
 80058ec:	4631      	mov	r1, r6
 80058ee:	f001 ff8f 	bl	8007810 <__mcmp>
 80058f2:	2800      	cmp	r0, #0
 80058f4:	da65      	bge.n	80059c2 <_strtod_l+0x89a>
 80058f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80058f8:	ea53 030a 	orrs.w	r3, r3, sl
 80058fc:	f040 8087 	bne.w	8005a0e <_strtod_l+0x8e6>
 8005900:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005904:	2b00      	cmp	r3, #0
 8005906:	f040 8082 	bne.w	8005a0e <_strtod_l+0x8e6>
 800590a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800590e:	0d1b      	lsrs	r3, r3, #20
 8005910:	051b      	lsls	r3, r3, #20
 8005912:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8005916:	d97a      	bls.n	8005a0e <_strtod_l+0x8e6>
 8005918:	696b      	ldr	r3, [r5, #20]
 800591a:	b913      	cbnz	r3, 8005922 <_strtod_l+0x7fa>
 800591c:	692b      	ldr	r3, [r5, #16]
 800591e:	2b01      	cmp	r3, #1
 8005920:	dd75      	ble.n	8005a0e <_strtod_l+0x8e6>
 8005922:	4629      	mov	r1, r5
 8005924:	2201      	movs	r2, #1
 8005926:	4620      	mov	r0, r4
 8005928:	f001 ff06 	bl	8007738 <__lshift>
 800592c:	4631      	mov	r1, r6
 800592e:	4605      	mov	r5, r0
 8005930:	f001 ff6e 	bl	8007810 <__mcmp>
 8005934:	2800      	cmp	r0, #0
 8005936:	dd6a      	ble.n	8005a0e <_strtod_l+0x8e6>
 8005938:	9904      	ldr	r1, [sp, #16]
 800593a:	4a55      	ldr	r2, [pc, #340]	; (8005a90 <_strtod_l+0x968>)
 800593c:	465b      	mov	r3, fp
 800593e:	2900      	cmp	r1, #0
 8005940:	f000 8085 	beq.w	8005a4e <_strtod_l+0x926>
 8005944:	ea02 010b 	and.w	r1, r2, fp
 8005948:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800594c:	dc7f      	bgt.n	8005a4e <_strtod_l+0x926>
 800594e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8005952:	f77f aeaa 	ble.w	80056aa <_strtod_l+0x582>
 8005956:	4a4f      	ldr	r2, [pc, #316]	; (8005a94 <_strtod_l+0x96c>)
 8005958:	2300      	movs	r3, #0
 800595a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800595e:	4650      	mov	r0, sl
 8005960:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8005964:	4659      	mov	r1, fp
 8005966:	f7fa fe57 	bl	8000618 <__aeabi_dmul>
 800596a:	460b      	mov	r3, r1
 800596c:	4303      	orrs	r3, r0
 800596e:	bf08      	it	eq
 8005970:	2322      	moveq	r3, #34	; 0x22
 8005972:	4682      	mov	sl, r0
 8005974:	468b      	mov	fp, r1
 8005976:	bf08      	it	eq
 8005978:	6023      	streq	r3, [r4, #0]
 800597a:	e62b      	b.n	80055d4 <_strtod_l+0x4ac>
 800597c:	f04f 32ff 	mov.w	r2, #4294967295
 8005980:	fa02 f303 	lsl.w	r3, r2, r3
 8005984:	ea03 0a0a 	and.w	sl, r3, sl
 8005988:	e6de      	b.n	8005748 <_strtod_l+0x620>
 800598a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800598e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8005992:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8005996:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800599a:	fa01 f308 	lsl.w	r3, r1, r8
 800599e:	930c      	str	r3, [sp, #48]	; 0x30
 80059a0:	9111      	str	r1, [sp, #68]	; 0x44
 80059a2:	e741      	b.n	8005828 <_strtod_l+0x700>
 80059a4:	2300      	movs	r3, #0
 80059a6:	930c      	str	r3, [sp, #48]	; 0x30
 80059a8:	2301      	movs	r3, #1
 80059aa:	9311      	str	r3, [sp, #68]	; 0x44
 80059ac:	e73c      	b.n	8005828 <_strtod_l+0x700>
 80059ae:	991e      	ldr	r1, [sp, #120]	; 0x78
 80059b0:	4642      	mov	r2, r8
 80059b2:	4620      	mov	r0, r4
 80059b4:	f001 fec0 	bl	8007738 <__lshift>
 80059b8:	901e      	str	r0, [sp, #120]	; 0x78
 80059ba:	2800      	cmp	r0, #0
 80059bc:	f47f af66 	bne.w	800588c <_strtod_l+0x764>
 80059c0:	e5fe      	b.n	80055c0 <_strtod_l+0x498>
 80059c2:	465f      	mov	r7, fp
 80059c4:	d16e      	bne.n	8005aa4 <_strtod_l+0x97c>
 80059c6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80059c8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80059cc:	b342      	cbz	r2, 8005a20 <_strtod_l+0x8f8>
 80059ce:	4a32      	ldr	r2, [pc, #200]	; (8005a98 <_strtod_l+0x970>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d128      	bne.n	8005a26 <_strtod_l+0x8fe>
 80059d4:	9b04      	ldr	r3, [sp, #16]
 80059d6:	4650      	mov	r0, sl
 80059d8:	b1eb      	cbz	r3, 8005a16 <_strtod_l+0x8ee>
 80059da:	4a2d      	ldr	r2, [pc, #180]	; (8005a90 <_strtod_l+0x968>)
 80059dc:	403a      	ands	r2, r7
 80059de:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80059e2:	f04f 31ff 	mov.w	r1, #4294967295
 80059e6:	d819      	bhi.n	8005a1c <_strtod_l+0x8f4>
 80059e8:	0d12      	lsrs	r2, r2, #20
 80059ea:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80059ee:	fa01 f303 	lsl.w	r3, r1, r3
 80059f2:	4298      	cmp	r0, r3
 80059f4:	d117      	bne.n	8005a26 <_strtod_l+0x8fe>
 80059f6:	4b29      	ldr	r3, [pc, #164]	; (8005a9c <_strtod_l+0x974>)
 80059f8:	429f      	cmp	r7, r3
 80059fa:	d102      	bne.n	8005a02 <_strtod_l+0x8da>
 80059fc:	3001      	adds	r0, #1
 80059fe:	f43f addf 	beq.w	80055c0 <_strtod_l+0x498>
 8005a02:	4b23      	ldr	r3, [pc, #140]	; (8005a90 <_strtod_l+0x968>)
 8005a04:	403b      	ands	r3, r7
 8005a06:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8005a0a:	f04f 0a00 	mov.w	sl, #0
 8005a0e:	9b04      	ldr	r3, [sp, #16]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d1a0      	bne.n	8005956 <_strtod_l+0x82e>
 8005a14:	e5de      	b.n	80055d4 <_strtod_l+0x4ac>
 8005a16:	f04f 33ff 	mov.w	r3, #4294967295
 8005a1a:	e7ea      	b.n	80059f2 <_strtod_l+0x8ca>
 8005a1c:	460b      	mov	r3, r1
 8005a1e:	e7e8      	b.n	80059f2 <_strtod_l+0x8ca>
 8005a20:	ea53 030a 	orrs.w	r3, r3, sl
 8005a24:	d088      	beq.n	8005938 <_strtod_l+0x810>
 8005a26:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005a28:	b1db      	cbz	r3, 8005a62 <_strtod_l+0x93a>
 8005a2a:	423b      	tst	r3, r7
 8005a2c:	d0ef      	beq.n	8005a0e <_strtod_l+0x8e6>
 8005a2e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005a30:	9a04      	ldr	r2, [sp, #16]
 8005a32:	4650      	mov	r0, sl
 8005a34:	4659      	mov	r1, fp
 8005a36:	b1c3      	cbz	r3, 8005a6a <_strtod_l+0x942>
 8005a38:	f7ff fb5a 	bl	80050f0 <sulp>
 8005a3c:	4602      	mov	r2, r0
 8005a3e:	460b      	mov	r3, r1
 8005a40:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005a44:	f7fa fc32 	bl	80002ac <__adddf3>
 8005a48:	4682      	mov	sl, r0
 8005a4a:	468b      	mov	fp, r1
 8005a4c:	e7df      	b.n	8005a0e <_strtod_l+0x8e6>
 8005a4e:	4013      	ands	r3, r2
 8005a50:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8005a54:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8005a58:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8005a5c:	f04f 3aff 	mov.w	sl, #4294967295
 8005a60:	e7d5      	b.n	8005a0e <_strtod_l+0x8e6>
 8005a62:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005a64:	ea13 0f0a 	tst.w	r3, sl
 8005a68:	e7e0      	b.n	8005a2c <_strtod_l+0x904>
 8005a6a:	f7ff fb41 	bl	80050f0 <sulp>
 8005a6e:	4602      	mov	r2, r0
 8005a70:	460b      	mov	r3, r1
 8005a72:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005a76:	f7fa fc17 	bl	80002a8 <__aeabi_dsub>
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	4682      	mov	sl, r0
 8005a80:	468b      	mov	fp, r1
 8005a82:	f7fb f831 	bl	8000ae8 <__aeabi_dcmpeq>
 8005a86:	2800      	cmp	r0, #0
 8005a88:	d0c1      	beq.n	8005a0e <_strtod_l+0x8e6>
 8005a8a:	e60e      	b.n	80056aa <_strtod_l+0x582>
 8005a8c:	fffffc02 	.word	0xfffffc02
 8005a90:	7ff00000 	.word	0x7ff00000
 8005a94:	39500000 	.word	0x39500000
 8005a98:	000fffff 	.word	0x000fffff
 8005a9c:	7fefffff 	.word	0x7fefffff
 8005aa0:	08008cb0 	.word	0x08008cb0
 8005aa4:	4631      	mov	r1, r6
 8005aa6:	4628      	mov	r0, r5
 8005aa8:	f002 f82e 	bl	8007b08 <__ratio>
 8005aac:	ec59 8b10 	vmov	r8, r9, d0
 8005ab0:	ee10 0a10 	vmov	r0, s0
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005aba:	4649      	mov	r1, r9
 8005abc:	f7fb f828 	bl	8000b10 <__aeabi_dcmple>
 8005ac0:	2800      	cmp	r0, #0
 8005ac2:	d07c      	beq.n	8005bbe <_strtod_l+0xa96>
 8005ac4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d04c      	beq.n	8005b64 <_strtod_l+0xa3c>
 8005aca:	4b95      	ldr	r3, [pc, #596]	; (8005d20 <_strtod_l+0xbf8>)
 8005acc:	2200      	movs	r2, #0
 8005ace:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8005ad2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8005d20 <_strtod_l+0xbf8>
 8005ad6:	f04f 0800 	mov.w	r8, #0
 8005ada:	4b92      	ldr	r3, [pc, #584]	; (8005d24 <_strtod_l+0xbfc>)
 8005adc:	403b      	ands	r3, r7
 8005ade:	9311      	str	r3, [sp, #68]	; 0x44
 8005ae0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005ae2:	4b91      	ldr	r3, [pc, #580]	; (8005d28 <_strtod_l+0xc00>)
 8005ae4:	429a      	cmp	r2, r3
 8005ae6:	f040 80b2 	bne.w	8005c4e <_strtod_l+0xb26>
 8005aea:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005aee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005af2:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8005af6:	ec4b ab10 	vmov	d0, sl, fp
 8005afa:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8005afe:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005b02:	f001 ff29 	bl	8007958 <__ulp>
 8005b06:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005b0a:	ec53 2b10 	vmov	r2, r3, d0
 8005b0e:	f7fa fd83 	bl	8000618 <__aeabi_dmul>
 8005b12:	4652      	mov	r2, sl
 8005b14:	465b      	mov	r3, fp
 8005b16:	f7fa fbc9 	bl	80002ac <__adddf3>
 8005b1a:	460b      	mov	r3, r1
 8005b1c:	4981      	ldr	r1, [pc, #516]	; (8005d24 <_strtod_l+0xbfc>)
 8005b1e:	4a83      	ldr	r2, [pc, #524]	; (8005d2c <_strtod_l+0xc04>)
 8005b20:	4019      	ands	r1, r3
 8005b22:	4291      	cmp	r1, r2
 8005b24:	4682      	mov	sl, r0
 8005b26:	d95e      	bls.n	8005be6 <_strtod_l+0xabe>
 8005b28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b2a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d103      	bne.n	8005b3a <_strtod_l+0xa12>
 8005b32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b34:	3301      	adds	r3, #1
 8005b36:	f43f ad43 	beq.w	80055c0 <_strtod_l+0x498>
 8005b3a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8005d38 <_strtod_l+0xc10>
 8005b3e:	f04f 3aff 	mov.w	sl, #4294967295
 8005b42:	991e      	ldr	r1, [sp, #120]	; 0x78
 8005b44:	4620      	mov	r0, r4
 8005b46:	f001 fbdb 	bl	8007300 <_Bfree>
 8005b4a:	9907      	ldr	r1, [sp, #28]
 8005b4c:	4620      	mov	r0, r4
 8005b4e:	f001 fbd7 	bl	8007300 <_Bfree>
 8005b52:	4631      	mov	r1, r6
 8005b54:	4620      	mov	r0, r4
 8005b56:	f001 fbd3 	bl	8007300 <_Bfree>
 8005b5a:	4629      	mov	r1, r5
 8005b5c:	4620      	mov	r0, r4
 8005b5e:	f001 fbcf 	bl	8007300 <_Bfree>
 8005b62:	e613      	b.n	800578c <_strtod_l+0x664>
 8005b64:	f1ba 0f00 	cmp.w	sl, #0
 8005b68:	d11b      	bne.n	8005ba2 <_strtod_l+0xa7a>
 8005b6a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005b6e:	b9f3      	cbnz	r3, 8005bae <_strtod_l+0xa86>
 8005b70:	4b6b      	ldr	r3, [pc, #428]	; (8005d20 <_strtod_l+0xbf8>)
 8005b72:	2200      	movs	r2, #0
 8005b74:	4640      	mov	r0, r8
 8005b76:	4649      	mov	r1, r9
 8005b78:	f7fa ffc0 	bl	8000afc <__aeabi_dcmplt>
 8005b7c:	b9d0      	cbnz	r0, 8005bb4 <_strtod_l+0xa8c>
 8005b7e:	4640      	mov	r0, r8
 8005b80:	4649      	mov	r1, r9
 8005b82:	4b6b      	ldr	r3, [pc, #428]	; (8005d30 <_strtod_l+0xc08>)
 8005b84:	2200      	movs	r2, #0
 8005b86:	f7fa fd47 	bl	8000618 <__aeabi_dmul>
 8005b8a:	4680      	mov	r8, r0
 8005b8c:	4689      	mov	r9, r1
 8005b8e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005b92:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8005b96:	931b      	str	r3, [sp, #108]	; 0x6c
 8005b98:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8005b9c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8005ba0:	e79b      	b.n	8005ada <_strtod_l+0x9b2>
 8005ba2:	f1ba 0f01 	cmp.w	sl, #1
 8005ba6:	d102      	bne.n	8005bae <_strtod_l+0xa86>
 8005ba8:	2f00      	cmp	r7, #0
 8005baa:	f43f ad7e 	beq.w	80056aa <_strtod_l+0x582>
 8005bae:	4b61      	ldr	r3, [pc, #388]	; (8005d34 <_strtod_l+0xc0c>)
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	e78c      	b.n	8005ace <_strtod_l+0x9a6>
 8005bb4:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8005d30 <_strtod_l+0xc08>
 8005bb8:	f04f 0800 	mov.w	r8, #0
 8005bbc:	e7e7      	b.n	8005b8e <_strtod_l+0xa66>
 8005bbe:	4b5c      	ldr	r3, [pc, #368]	; (8005d30 <_strtod_l+0xc08>)
 8005bc0:	4640      	mov	r0, r8
 8005bc2:	4649      	mov	r1, r9
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	f7fa fd27 	bl	8000618 <__aeabi_dmul>
 8005bca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005bcc:	4680      	mov	r8, r0
 8005bce:	4689      	mov	r9, r1
 8005bd0:	b933      	cbnz	r3, 8005be0 <_strtod_l+0xab8>
 8005bd2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005bd6:	9012      	str	r0, [sp, #72]	; 0x48
 8005bd8:	9313      	str	r3, [sp, #76]	; 0x4c
 8005bda:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8005bde:	e7dd      	b.n	8005b9c <_strtod_l+0xa74>
 8005be0:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8005be4:	e7f9      	b.n	8005bda <_strtod_l+0xab2>
 8005be6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8005bea:	9b04      	ldr	r3, [sp, #16]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d1a8      	bne.n	8005b42 <_strtod_l+0xa1a>
 8005bf0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005bf4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005bf6:	0d1b      	lsrs	r3, r3, #20
 8005bf8:	051b      	lsls	r3, r3, #20
 8005bfa:	429a      	cmp	r2, r3
 8005bfc:	d1a1      	bne.n	8005b42 <_strtod_l+0xa1a>
 8005bfe:	4640      	mov	r0, r8
 8005c00:	4649      	mov	r1, r9
 8005c02:	f7fb f869 	bl	8000cd8 <__aeabi_d2lz>
 8005c06:	f7fa fcd9 	bl	80005bc <__aeabi_l2d>
 8005c0a:	4602      	mov	r2, r0
 8005c0c:	460b      	mov	r3, r1
 8005c0e:	4640      	mov	r0, r8
 8005c10:	4649      	mov	r1, r9
 8005c12:	f7fa fb49 	bl	80002a8 <__aeabi_dsub>
 8005c16:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005c18:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005c1c:	ea43 030a 	orr.w	r3, r3, sl
 8005c20:	4313      	orrs	r3, r2
 8005c22:	4680      	mov	r8, r0
 8005c24:	4689      	mov	r9, r1
 8005c26:	d053      	beq.n	8005cd0 <_strtod_l+0xba8>
 8005c28:	a335      	add	r3, pc, #212	; (adr r3, 8005d00 <_strtod_l+0xbd8>)
 8005c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c2e:	f7fa ff65 	bl	8000afc <__aeabi_dcmplt>
 8005c32:	2800      	cmp	r0, #0
 8005c34:	f47f acce 	bne.w	80055d4 <_strtod_l+0x4ac>
 8005c38:	a333      	add	r3, pc, #204	; (adr r3, 8005d08 <_strtod_l+0xbe0>)
 8005c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c3e:	4640      	mov	r0, r8
 8005c40:	4649      	mov	r1, r9
 8005c42:	f7fa ff79 	bl	8000b38 <__aeabi_dcmpgt>
 8005c46:	2800      	cmp	r0, #0
 8005c48:	f43f af7b 	beq.w	8005b42 <_strtod_l+0xa1a>
 8005c4c:	e4c2      	b.n	80055d4 <_strtod_l+0x4ac>
 8005c4e:	9b04      	ldr	r3, [sp, #16]
 8005c50:	b333      	cbz	r3, 8005ca0 <_strtod_l+0xb78>
 8005c52:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005c54:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005c58:	d822      	bhi.n	8005ca0 <_strtod_l+0xb78>
 8005c5a:	a32d      	add	r3, pc, #180	; (adr r3, 8005d10 <_strtod_l+0xbe8>)
 8005c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c60:	4640      	mov	r0, r8
 8005c62:	4649      	mov	r1, r9
 8005c64:	f7fa ff54 	bl	8000b10 <__aeabi_dcmple>
 8005c68:	b1a0      	cbz	r0, 8005c94 <_strtod_l+0xb6c>
 8005c6a:	4649      	mov	r1, r9
 8005c6c:	4640      	mov	r0, r8
 8005c6e:	f7fa ffab 	bl	8000bc8 <__aeabi_d2uiz>
 8005c72:	2801      	cmp	r0, #1
 8005c74:	bf38      	it	cc
 8005c76:	2001      	movcc	r0, #1
 8005c78:	f7fa fc54 	bl	8000524 <__aeabi_ui2d>
 8005c7c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005c7e:	4680      	mov	r8, r0
 8005c80:	4689      	mov	r9, r1
 8005c82:	bb13      	cbnz	r3, 8005cca <_strtod_l+0xba2>
 8005c84:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005c88:	9014      	str	r0, [sp, #80]	; 0x50
 8005c8a:	9315      	str	r3, [sp, #84]	; 0x54
 8005c8c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8005c90:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8005c94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005c96:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005c98:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8005c9c:	1a9b      	subs	r3, r3, r2
 8005c9e:	930d      	str	r3, [sp, #52]	; 0x34
 8005ca0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005ca4:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8005ca8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005cac:	f001 fe54 	bl	8007958 <__ulp>
 8005cb0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005cb4:	ec53 2b10 	vmov	r2, r3, d0
 8005cb8:	f7fa fcae 	bl	8000618 <__aeabi_dmul>
 8005cbc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005cc0:	f7fa faf4 	bl	80002ac <__adddf3>
 8005cc4:	4682      	mov	sl, r0
 8005cc6:	468b      	mov	fp, r1
 8005cc8:	e78f      	b.n	8005bea <_strtod_l+0xac2>
 8005cca:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8005cce:	e7dd      	b.n	8005c8c <_strtod_l+0xb64>
 8005cd0:	a311      	add	r3, pc, #68	; (adr r3, 8005d18 <_strtod_l+0xbf0>)
 8005cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cd6:	f7fa ff11 	bl	8000afc <__aeabi_dcmplt>
 8005cda:	e7b4      	b.n	8005c46 <_strtod_l+0xb1e>
 8005cdc:	2300      	movs	r3, #0
 8005cde:	930e      	str	r3, [sp, #56]	; 0x38
 8005ce0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005ce2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005ce4:	6013      	str	r3, [r2, #0]
 8005ce6:	f7ff ba65 	b.w	80051b4 <_strtod_l+0x8c>
 8005cea:	2b65      	cmp	r3, #101	; 0x65
 8005cec:	f43f ab5d 	beq.w	80053aa <_strtod_l+0x282>
 8005cf0:	2b45      	cmp	r3, #69	; 0x45
 8005cf2:	f43f ab5a 	beq.w	80053aa <_strtod_l+0x282>
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	f7ff bb92 	b.w	8005420 <_strtod_l+0x2f8>
 8005cfc:	f3af 8000 	nop.w
 8005d00:	94a03595 	.word	0x94a03595
 8005d04:	3fdfffff 	.word	0x3fdfffff
 8005d08:	35afe535 	.word	0x35afe535
 8005d0c:	3fe00000 	.word	0x3fe00000
 8005d10:	ffc00000 	.word	0xffc00000
 8005d14:	41dfffff 	.word	0x41dfffff
 8005d18:	94a03595 	.word	0x94a03595
 8005d1c:	3fcfffff 	.word	0x3fcfffff
 8005d20:	3ff00000 	.word	0x3ff00000
 8005d24:	7ff00000 	.word	0x7ff00000
 8005d28:	7fe00000 	.word	0x7fe00000
 8005d2c:	7c9fffff 	.word	0x7c9fffff
 8005d30:	3fe00000 	.word	0x3fe00000
 8005d34:	bff00000 	.word	0xbff00000
 8005d38:	7fefffff 	.word	0x7fefffff

08005d3c <_strtod_r>:
 8005d3c:	4b01      	ldr	r3, [pc, #4]	; (8005d44 <_strtod_r+0x8>)
 8005d3e:	f7ff b9f3 	b.w	8005128 <_strtod_l>
 8005d42:	bf00      	nop
 8005d44:	20000074 	.word	0x20000074

08005d48 <_strtol_l.isra.0>:
 8005d48:	2b01      	cmp	r3, #1
 8005d4a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d4e:	d001      	beq.n	8005d54 <_strtol_l.isra.0+0xc>
 8005d50:	2b24      	cmp	r3, #36	; 0x24
 8005d52:	d906      	bls.n	8005d62 <_strtol_l.isra.0+0x1a>
 8005d54:	f7fe fafa 	bl	800434c <__errno>
 8005d58:	2316      	movs	r3, #22
 8005d5a:	6003      	str	r3, [r0, #0]
 8005d5c:	2000      	movs	r0, #0
 8005d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d62:	4f3a      	ldr	r7, [pc, #232]	; (8005e4c <_strtol_l.isra.0+0x104>)
 8005d64:	468e      	mov	lr, r1
 8005d66:	4676      	mov	r6, lr
 8005d68:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8005d6c:	5de5      	ldrb	r5, [r4, r7]
 8005d6e:	f015 0508 	ands.w	r5, r5, #8
 8005d72:	d1f8      	bne.n	8005d66 <_strtol_l.isra.0+0x1e>
 8005d74:	2c2d      	cmp	r4, #45	; 0x2d
 8005d76:	d134      	bne.n	8005de2 <_strtol_l.isra.0+0x9a>
 8005d78:	f89e 4000 	ldrb.w	r4, [lr]
 8005d7c:	f04f 0801 	mov.w	r8, #1
 8005d80:	f106 0e02 	add.w	lr, r6, #2
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d05c      	beq.n	8005e42 <_strtol_l.isra.0+0xfa>
 8005d88:	2b10      	cmp	r3, #16
 8005d8a:	d10c      	bne.n	8005da6 <_strtol_l.isra.0+0x5e>
 8005d8c:	2c30      	cmp	r4, #48	; 0x30
 8005d8e:	d10a      	bne.n	8005da6 <_strtol_l.isra.0+0x5e>
 8005d90:	f89e 4000 	ldrb.w	r4, [lr]
 8005d94:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8005d98:	2c58      	cmp	r4, #88	; 0x58
 8005d9a:	d14d      	bne.n	8005e38 <_strtol_l.isra.0+0xf0>
 8005d9c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8005da0:	2310      	movs	r3, #16
 8005da2:	f10e 0e02 	add.w	lr, lr, #2
 8005da6:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8005daa:	f10c 3cff 	add.w	ip, ip, #4294967295
 8005dae:	2600      	movs	r6, #0
 8005db0:	fbbc f9f3 	udiv	r9, ip, r3
 8005db4:	4635      	mov	r5, r6
 8005db6:	fb03 ca19 	mls	sl, r3, r9, ip
 8005dba:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8005dbe:	2f09      	cmp	r7, #9
 8005dc0:	d818      	bhi.n	8005df4 <_strtol_l.isra.0+0xac>
 8005dc2:	463c      	mov	r4, r7
 8005dc4:	42a3      	cmp	r3, r4
 8005dc6:	dd24      	ble.n	8005e12 <_strtol_l.isra.0+0xca>
 8005dc8:	2e00      	cmp	r6, #0
 8005dca:	db1f      	blt.n	8005e0c <_strtol_l.isra.0+0xc4>
 8005dcc:	45a9      	cmp	r9, r5
 8005dce:	d31d      	bcc.n	8005e0c <_strtol_l.isra.0+0xc4>
 8005dd0:	d101      	bne.n	8005dd6 <_strtol_l.isra.0+0x8e>
 8005dd2:	45a2      	cmp	sl, r4
 8005dd4:	db1a      	blt.n	8005e0c <_strtol_l.isra.0+0xc4>
 8005dd6:	fb05 4503 	mla	r5, r5, r3, r4
 8005dda:	2601      	movs	r6, #1
 8005ddc:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8005de0:	e7eb      	b.n	8005dba <_strtol_l.isra.0+0x72>
 8005de2:	2c2b      	cmp	r4, #43	; 0x2b
 8005de4:	bf08      	it	eq
 8005de6:	f89e 4000 	ldrbeq.w	r4, [lr]
 8005dea:	46a8      	mov	r8, r5
 8005dec:	bf08      	it	eq
 8005dee:	f106 0e02 	addeq.w	lr, r6, #2
 8005df2:	e7c7      	b.n	8005d84 <_strtol_l.isra.0+0x3c>
 8005df4:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8005df8:	2f19      	cmp	r7, #25
 8005dfa:	d801      	bhi.n	8005e00 <_strtol_l.isra.0+0xb8>
 8005dfc:	3c37      	subs	r4, #55	; 0x37
 8005dfe:	e7e1      	b.n	8005dc4 <_strtol_l.isra.0+0x7c>
 8005e00:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8005e04:	2f19      	cmp	r7, #25
 8005e06:	d804      	bhi.n	8005e12 <_strtol_l.isra.0+0xca>
 8005e08:	3c57      	subs	r4, #87	; 0x57
 8005e0a:	e7db      	b.n	8005dc4 <_strtol_l.isra.0+0x7c>
 8005e0c:	f04f 36ff 	mov.w	r6, #4294967295
 8005e10:	e7e4      	b.n	8005ddc <_strtol_l.isra.0+0x94>
 8005e12:	2e00      	cmp	r6, #0
 8005e14:	da05      	bge.n	8005e22 <_strtol_l.isra.0+0xda>
 8005e16:	2322      	movs	r3, #34	; 0x22
 8005e18:	6003      	str	r3, [r0, #0]
 8005e1a:	4665      	mov	r5, ip
 8005e1c:	b942      	cbnz	r2, 8005e30 <_strtol_l.isra.0+0xe8>
 8005e1e:	4628      	mov	r0, r5
 8005e20:	e79d      	b.n	8005d5e <_strtol_l.isra.0+0x16>
 8005e22:	f1b8 0f00 	cmp.w	r8, #0
 8005e26:	d000      	beq.n	8005e2a <_strtol_l.isra.0+0xe2>
 8005e28:	426d      	negs	r5, r5
 8005e2a:	2a00      	cmp	r2, #0
 8005e2c:	d0f7      	beq.n	8005e1e <_strtol_l.isra.0+0xd6>
 8005e2e:	b10e      	cbz	r6, 8005e34 <_strtol_l.isra.0+0xec>
 8005e30:	f10e 31ff 	add.w	r1, lr, #4294967295
 8005e34:	6011      	str	r1, [r2, #0]
 8005e36:	e7f2      	b.n	8005e1e <_strtol_l.isra.0+0xd6>
 8005e38:	2430      	movs	r4, #48	; 0x30
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d1b3      	bne.n	8005da6 <_strtol_l.isra.0+0x5e>
 8005e3e:	2308      	movs	r3, #8
 8005e40:	e7b1      	b.n	8005da6 <_strtol_l.isra.0+0x5e>
 8005e42:	2c30      	cmp	r4, #48	; 0x30
 8005e44:	d0a4      	beq.n	8005d90 <_strtol_l.isra.0+0x48>
 8005e46:	230a      	movs	r3, #10
 8005e48:	e7ad      	b.n	8005da6 <_strtol_l.isra.0+0x5e>
 8005e4a:	bf00      	nop
 8005e4c:	08008cd9 	.word	0x08008cd9

08005e50 <_strtol_r>:
 8005e50:	f7ff bf7a 	b.w	8005d48 <_strtol_l.isra.0>

08005e54 <quorem>:
 8005e54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e58:	6903      	ldr	r3, [r0, #16]
 8005e5a:	690c      	ldr	r4, [r1, #16]
 8005e5c:	42a3      	cmp	r3, r4
 8005e5e:	4607      	mov	r7, r0
 8005e60:	f2c0 8081 	blt.w	8005f66 <quorem+0x112>
 8005e64:	3c01      	subs	r4, #1
 8005e66:	f101 0814 	add.w	r8, r1, #20
 8005e6a:	f100 0514 	add.w	r5, r0, #20
 8005e6e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005e72:	9301      	str	r3, [sp, #4]
 8005e74:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005e78:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005e7c:	3301      	adds	r3, #1
 8005e7e:	429a      	cmp	r2, r3
 8005e80:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005e84:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005e88:	fbb2 f6f3 	udiv	r6, r2, r3
 8005e8c:	d331      	bcc.n	8005ef2 <quorem+0x9e>
 8005e8e:	f04f 0e00 	mov.w	lr, #0
 8005e92:	4640      	mov	r0, r8
 8005e94:	46ac      	mov	ip, r5
 8005e96:	46f2      	mov	sl, lr
 8005e98:	f850 2b04 	ldr.w	r2, [r0], #4
 8005e9c:	b293      	uxth	r3, r2
 8005e9e:	fb06 e303 	mla	r3, r6, r3, lr
 8005ea2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005ea6:	b29b      	uxth	r3, r3
 8005ea8:	ebaa 0303 	sub.w	r3, sl, r3
 8005eac:	0c12      	lsrs	r2, r2, #16
 8005eae:	f8dc a000 	ldr.w	sl, [ip]
 8005eb2:	fb06 e202 	mla	r2, r6, r2, lr
 8005eb6:	fa13 f38a 	uxtah	r3, r3, sl
 8005eba:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005ebe:	fa1f fa82 	uxth.w	sl, r2
 8005ec2:	f8dc 2000 	ldr.w	r2, [ip]
 8005ec6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8005eca:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005ece:	b29b      	uxth	r3, r3
 8005ed0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005ed4:	4581      	cmp	r9, r0
 8005ed6:	f84c 3b04 	str.w	r3, [ip], #4
 8005eda:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005ede:	d2db      	bcs.n	8005e98 <quorem+0x44>
 8005ee0:	f855 300b 	ldr.w	r3, [r5, fp]
 8005ee4:	b92b      	cbnz	r3, 8005ef2 <quorem+0x9e>
 8005ee6:	9b01      	ldr	r3, [sp, #4]
 8005ee8:	3b04      	subs	r3, #4
 8005eea:	429d      	cmp	r5, r3
 8005eec:	461a      	mov	r2, r3
 8005eee:	d32e      	bcc.n	8005f4e <quorem+0xfa>
 8005ef0:	613c      	str	r4, [r7, #16]
 8005ef2:	4638      	mov	r0, r7
 8005ef4:	f001 fc8c 	bl	8007810 <__mcmp>
 8005ef8:	2800      	cmp	r0, #0
 8005efa:	db24      	blt.n	8005f46 <quorem+0xf2>
 8005efc:	3601      	adds	r6, #1
 8005efe:	4628      	mov	r0, r5
 8005f00:	f04f 0c00 	mov.w	ip, #0
 8005f04:	f858 2b04 	ldr.w	r2, [r8], #4
 8005f08:	f8d0 e000 	ldr.w	lr, [r0]
 8005f0c:	b293      	uxth	r3, r2
 8005f0e:	ebac 0303 	sub.w	r3, ip, r3
 8005f12:	0c12      	lsrs	r2, r2, #16
 8005f14:	fa13 f38e 	uxtah	r3, r3, lr
 8005f18:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005f1c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005f20:	b29b      	uxth	r3, r3
 8005f22:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005f26:	45c1      	cmp	r9, r8
 8005f28:	f840 3b04 	str.w	r3, [r0], #4
 8005f2c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005f30:	d2e8      	bcs.n	8005f04 <quorem+0xb0>
 8005f32:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005f36:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005f3a:	b922      	cbnz	r2, 8005f46 <quorem+0xf2>
 8005f3c:	3b04      	subs	r3, #4
 8005f3e:	429d      	cmp	r5, r3
 8005f40:	461a      	mov	r2, r3
 8005f42:	d30a      	bcc.n	8005f5a <quorem+0x106>
 8005f44:	613c      	str	r4, [r7, #16]
 8005f46:	4630      	mov	r0, r6
 8005f48:	b003      	add	sp, #12
 8005f4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f4e:	6812      	ldr	r2, [r2, #0]
 8005f50:	3b04      	subs	r3, #4
 8005f52:	2a00      	cmp	r2, #0
 8005f54:	d1cc      	bne.n	8005ef0 <quorem+0x9c>
 8005f56:	3c01      	subs	r4, #1
 8005f58:	e7c7      	b.n	8005eea <quorem+0x96>
 8005f5a:	6812      	ldr	r2, [r2, #0]
 8005f5c:	3b04      	subs	r3, #4
 8005f5e:	2a00      	cmp	r2, #0
 8005f60:	d1f0      	bne.n	8005f44 <quorem+0xf0>
 8005f62:	3c01      	subs	r4, #1
 8005f64:	e7eb      	b.n	8005f3e <quorem+0xea>
 8005f66:	2000      	movs	r0, #0
 8005f68:	e7ee      	b.n	8005f48 <quorem+0xf4>
 8005f6a:	0000      	movs	r0, r0
 8005f6c:	0000      	movs	r0, r0
	...

08005f70 <_dtoa_r>:
 8005f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f74:	ed2d 8b02 	vpush	{d8}
 8005f78:	ec57 6b10 	vmov	r6, r7, d0
 8005f7c:	b095      	sub	sp, #84	; 0x54
 8005f7e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005f80:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005f84:	9105      	str	r1, [sp, #20]
 8005f86:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8005f8a:	4604      	mov	r4, r0
 8005f8c:	9209      	str	r2, [sp, #36]	; 0x24
 8005f8e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005f90:	b975      	cbnz	r5, 8005fb0 <_dtoa_r+0x40>
 8005f92:	2010      	movs	r0, #16
 8005f94:	f001 f94c 	bl	8007230 <malloc>
 8005f98:	4602      	mov	r2, r0
 8005f9a:	6260      	str	r0, [r4, #36]	; 0x24
 8005f9c:	b920      	cbnz	r0, 8005fa8 <_dtoa_r+0x38>
 8005f9e:	4bb2      	ldr	r3, [pc, #712]	; (8006268 <_dtoa_r+0x2f8>)
 8005fa0:	21ea      	movs	r1, #234	; 0xea
 8005fa2:	48b2      	ldr	r0, [pc, #712]	; (800626c <_dtoa_r+0x2fc>)
 8005fa4:	f002 f874 	bl	8008090 <__assert_func>
 8005fa8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005fac:	6005      	str	r5, [r0, #0]
 8005fae:	60c5      	str	r5, [r0, #12]
 8005fb0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005fb2:	6819      	ldr	r1, [r3, #0]
 8005fb4:	b151      	cbz	r1, 8005fcc <_dtoa_r+0x5c>
 8005fb6:	685a      	ldr	r2, [r3, #4]
 8005fb8:	604a      	str	r2, [r1, #4]
 8005fba:	2301      	movs	r3, #1
 8005fbc:	4093      	lsls	r3, r2
 8005fbe:	608b      	str	r3, [r1, #8]
 8005fc0:	4620      	mov	r0, r4
 8005fc2:	f001 f99d 	bl	8007300 <_Bfree>
 8005fc6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005fc8:	2200      	movs	r2, #0
 8005fca:	601a      	str	r2, [r3, #0]
 8005fcc:	1e3b      	subs	r3, r7, #0
 8005fce:	bfb9      	ittee	lt
 8005fd0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005fd4:	9303      	strlt	r3, [sp, #12]
 8005fd6:	2300      	movge	r3, #0
 8005fd8:	f8c8 3000 	strge.w	r3, [r8]
 8005fdc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8005fe0:	4ba3      	ldr	r3, [pc, #652]	; (8006270 <_dtoa_r+0x300>)
 8005fe2:	bfbc      	itt	lt
 8005fe4:	2201      	movlt	r2, #1
 8005fe6:	f8c8 2000 	strlt.w	r2, [r8]
 8005fea:	ea33 0309 	bics.w	r3, r3, r9
 8005fee:	d11b      	bne.n	8006028 <_dtoa_r+0xb8>
 8005ff0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005ff2:	f242 730f 	movw	r3, #9999	; 0x270f
 8005ff6:	6013      	str	r3, [r2, #0]
 8005ff8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005ffc:	4333      	orrs	r3, r6
 8005ffe:	f000 857a 	beq.w	8006af6 <_dtoa_r+0xb86>
 8006002:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006004:	b963      	cbnz	r3, 8006020 <_dtoa_r+0xb0>
 8006006:	4b9b      	ldr	r3, [pc, #620]	; (8006274 <_dtoa_r+0x304>)
 8006008:	e024      	b.n	8006054 <_dtoa_r+0xe4>
 800600a:	4b9b      	ldr	r3, [pc, #620]	; (8006278 <_dtoa_r+0x308>)
 800600c:	9300      	str	r3, [sp, #0]
 800600e:	3308      	adds	r3, #8
 8006010:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006012:	6013      	str	r3, [r2, #0]
 8006014:	9800      	ldr	r0, [sp, #0]
 8006016:	b015      	add	sp, #84	; 0x54
 8006018:	ecbd 8b02 	vpop	{d8}
 800601c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006020:	4b94      	ldr	r3, [pc, #592]	; (8006274 <_dtoa_r+0x304>)
 8006022:	9300      	str	r3, [sp, #0]
 8006024:	3303      	adds	r3, #3
 8006026:	e7f3      	b.n	8006010 <_dtoa_r+0xa0>
 8006028:	ed9d 7b02 	vldr	d7, [sp, #8]
 800602c:	2200      	movs	r2, #0
 800602e:	ec51 0b17 	vmov	r0, r1, d7
 8006032:	2300      	movs	r3, #0
 8006034:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8006038:	f7fa fd56 	bl	8000ae8 <__aeabi_dcmpeq>
 800603c:	4680      	mov	r8, r0
 800603e:	b158      	cbz	r0, 8006058 <_dtoa_r+0xe8>
 8006040:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006042:	2301      	movs	r3, #1
 8006044:	6013      	str	r3, [r2, #0]
 8006046:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006048:	2b00      	cmp	r3, #0
 800604a:	f000 8551 	beq.w	8006af0 <_dtoa_r+0xb80>
 800604e:	488b      	ldr	r0, [pc, #556]	; (800627c <_dtoa_r+0x30c>)
 8006050:	6018      	str	r0, [r3, #0]
 8006052:	1e43      	subs	r3, r0, #1
 8006054:	9300      	str	r3, [sp, #0]
 8006056:	e7dd      	b.n	8006014 <_dtoa_r+0xa4>
 8006058:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800605c:	aa12      	add	r2, sp, #72	; 0x48
 800605e:	a913      	add	r1, sp, #76	; 0x4c
 8006060:	4620      	mov	r0, r4
 8006062:	f001 fcf5 	bl	8007a50 <__d2b>
 8006066:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800606a:	4683      	mov	fp, r0
 800606c:	2d00      	cmp	r5, #0
 800606e:	d07c      	beq.n	800616a <_dtoa_r+0x1fa>
 8006070:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006072:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8006076:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800607a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800607e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006082:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006086:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800608a:	4b7d      	ldr	r3, [pc, #500]	; (8006280 <_dtoa_r+0x310>)
 800608c:	2200      	movs	r2, #0
 800608e:	4630      	mov	r0, r6
 8006090:	4639      	mov	r1, r7
 8006092:	f7fa f909 	bl	80002a8 <__aeabi_dsub>
 8006096:	a36e      	add	r3, pc, #440	; (adr r3, 8006250 <_dtoa_r+0x2e0>)
 8006098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800609c:	f7fa fabc 	bl	8000618 <__aeabi_dmul>
 80060a0:	a36d      	add	r3, pc, #436	; (adr r3, 8006258 <_dtoa_r+0x2e8>)
 80060a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060a6:	f7fa f901 	bl	80002ac <__adddf3>
 80060aa:	4606      	mov	r6, r0
 80060ac:	4628      	mov	r0, r5
 80060ae:	460f      	mov	r7, r1
 80060b0:	f7fa fa48 	bl	8000544 <__aeabi_i2d>
 80060b4:	a36a      	add	r3, pc, #424	; (adr r3, 8006260 <_dtoa_r+0x2f0>)
 80060b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ba:	f7fa faad 	bl	8000618 <__aeabi_dmul>
 80060be:	4602      	mov	r2, r0
 80060c0:	460b      	mov	r3, r1
 80060c2:	4630      	mov	r0, r6
 80060c4:	4639      	mov	r1, r7
 80060c6:	f7fa f8f1 	bl	80002ac <__adddf3>
 80060ca:	4606      	mov	r6, r0
 80060cc:	460f      	mov	r7, r1
 80060ce:	f7fa fd53 	bl	8000b78 <__aeabi_d2iz>
 80060d2:	2200      	movs	r2, #0
 80060d4:	4682      	mov	sl, r0
 80060d6:	2300      	movs	r3, #0
 80060d8:	4630      	mov	r0, r6
 80060da:	4639      	mov	r1, r7
 80060dc:	f7fa fd0e 	bl	8000afc <__aeabi_dcmplt>
 80060e0:	b148      	cbz	r0, 80060f6 <_dtoa_r+0x186>
 80060e2:	4650      	mov	r0, sl
 80060e4:	f7fa fa2e 	bl	8000544 <__aeabi_i2d>
 80060e8:	4632      	mov	r2, r6
 80060ea:	463b      	mov	r3, r7
 80060ec:	f7fa fcfc 	bl	8000ae8 <__aeabi_dcmpeq>
 80060f0:	b908      	cbnz	r0, 80060f6 <_dtoa_r+0x186>
 80060f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80060f6:	f1ba 0f16 	cmp.w	sl, #22
 80060fa:	d854      	bhi.n	80061a6 <_dtoa_r+0x236>
 80060fc:	4b61      	ldr	r3, [pc, #388]	; (8006284 <_dtoa_r+0x314>)
 80060fe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006106:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800610a:	f7fa fcf7 	bl	8000afc <__aeabi_dcmplt>
 800610e:	2800      	cmp	r0, #0
 8006110:	d04b      	beq.n	80061aa <_dtoa_r+0x23a>
 8006112:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006116:	2300      	movs	r3, #0
 8006118:	930e      	str	r3, [sp, #56]	; 0x38
 800611a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800611c:	1b5d      	subs	r5, r3, r5
 800611e:	1e6b      	subs	r3, r5, #1
 8006120:	9304      	str	r3, [sp, #16]
 8006122:	bf43      	ittte	mi
 8006124:	2300      	movmi	r3, #0
 8006126:	f1c5 0801 	rsbmi	r8, r5, #1
 800612a:	9304      	strmi	r3, [sp, #16]
 800612c:	f04f 0800 	movpl.w	r8, #0
 8006130:	f1ba 0f00 	cmp.w	sl, #0
 8006134:	db3b      	blt.n	80061ae <_dtoa_r+0x23e>
 8006136:	9b04      	ldr	r3, [sp, #16]
 8006138:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800613c:	4453      	add	r3, sl
 800613e:	9304      	str	r3, [sp, #16]
 8006140:	2300      	movs	r3, #0
 8006142:	9306      	str	r3, [sp, #24]
 8006144:	9b05      	ldr	r3, [sp, #20]
 8006146:	2b09      	cmp	r3, #9
 8006148:	d869      	bhi.n	800621e <_dtoa_r+0x2ae>
 800614a:	2b05      	cmp	r3, #5
 800614c:	bfc4      	itt	gt
 800614e:	3b04      	subgt	r3, #4
 8006150:	9305      	strgt	r3, [sp, #20]
 8006152:	9b05      	ldr	r3, [sp, #20]
 8006154:	f1a3 0302 	sub.w	r3, r3, #2
 8006158:	bfcc      	ite	gt
 800615a:	2500      	movgt	r5, #0
 800615c:	2501      	movle	r5, #1
 800615e:	2b03      	cmp	r3, #3
 8006160:	d869      	bhi.n	8006236 <_dtoa_r+0x2c6>
 8006162:	e8df f003 	tbb	[pc, r3]
 8006166:	4e2c      	.short	0x4e2c
 8006168:	5a4c      	.short	0x5a4c
 800616a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800616e:	441d      	add	r5, r3
 8006170:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006174:	2b20      	cmp	r3, #32
 8006176:	bfc1      	itttt	gt
 8006178:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800617c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006180:	fa09 f303 	lslgt.w	r3, r9, r3
 8006184:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006188:	bfda      	itte	le
 800618a:	f1c3 0320 	rsble	r3, r3, #32
 800618e:	fa06 f003 	lslle.w	r0, r6, r3
 8006192:	4318      	orrgt	r0, r3
 8006194:	f7fa f9c6 	bl	8000524 <__aeabi_ui2d>
 8006198:	2301      	movs	r3, #1
 800619a:	4606      	mov	r6, r0
 800619c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80061a0:	3d01      	subs	r5, #1
 80061a2:	9310      	str	r3, [sp, #64]	; 0x40
 80061a4:	e771      	b.n	800608a <_dtoa_r+0x11a>
 80061a6:	2301      	movs	r3, #1
 80061a8:	e7b6      	b.n	8006118 <_dtoa_r+0x1a8>
 80061aa:	900e      	str	r0, [sp, #56]	; 0x38
 80061ac:	e7b5      	b.n	800611a <_dtoa_r+0x1aa>
 80061ae:	f1ca 0300 	rsb	r3, sl, #0
 80061b2:	9306      	str	r3, [sp, #24]
 80061b4:	2300      	movs	r3, #0
 80061b6:	eba8 080a 	sub.w	r8, r8, sl
 80061ba:	930d      	str	r3, [sp, #52]	; 0x34
 80061bc:	e7c2      	b.n	8006144 <_dtoa_r+0x1d4>
 80061be:	2300      	movs	r3, #0
 80061c0:	9308      	str	r3, [sp, #32]
 80061c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	dc39      	bgt.n	800623c <_dtoa_r+0x2cc>
 80061c8:	f04f 0901 	mov.w	r9, #1
 80061cc:	f8cd 9004 	str.w	r9, [sp, #4]
 80061d0:	464b      	mov	r3, r9
 80061d2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80061d6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80061d8:	2200      	movs	r2, #0
 80061da:	6042      	str	r2, [r0, #4]
 80061dc:	2204      	movs	r2, #4
 80061de:	f102 0614 	add.w	r6, r2, #20
 80061e2:	429e      	cmp	r6, r3
 80061e4:	6841      	ldr	r1, [r0, #4]
 80061e6:	d92f      	bls.n	8006248 <_dtoa_r+0x2d8>
 80061e8:	4620      	mov	r0, r4
 80061ea:	f001 f849 	bl	8007280 <_Balloc>
 80061ee:	9000      	str	r0, [sp, #0]
 80061f0:	2800      	cmp	r0, #0
 80061f2:	d14b      	bne.n	800628c <_dtoa_r+0x31c>
 80061f4:	4b24      	ldr	r3, [pc, #144]	; (8006288 <_dtoa_r+0x318>)
 80061f6:	4602      	mov	r2, r0
 80061f8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80061fc:	e6d1      	b.n	8005fa2 <_dtoa_r+0x32>
 80061fe:	2301      	movs	r3, #1
 8006200:	e7de      	b.n	80061c0 <_dtoa_r+0x250>
 8006202:	2300      	movs	r3, #0
 8006204:	9308      	str	r3, [sp, #32]
 8006206:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006208:	eb0a 0903 	add.w	r9, sl, r3
 800620c:	f109 0301 	add.w	r3, r9, #1
 8006210:	2b01      	cmp	r3, #1
 8006212:	9301      	str	r3, [sp, #4]
 8006214:	bfb8      	it	lt
 8006216:	2301      	movlt	r3, #1
 8006218:	e7dd      	b.n	80061d6 <_dtoa_r+0x266>
 800621a:	2301      	movs	r3, #1
 800621c:	e7f2      	b.n	8006204 <_dtoa_r+0x294>
 800621e:	2501      	movs	r5, #1
 8006220:	2300      	movs	r3, #0
 8006222:	9305      	str	r3, [sp, #20]
 8006224:	9508      	str	r5, [sp, #32]
 8006226:	f04f 39ff 	mov.w	r9, #4294967295
 800622a:	2200      	movs	r2, #0
 800622c:	f8cd 9004 	str.w	r9, [sp, #4]
 8006230:	2312      	movs	r3, #18
 8006232:	9209      	str	r2, [sp, #36]	; 0x24
 8006234:	e7cf      	b.n	80061d6 <_dtoa_r+0x266>
 8006236:	2301      	movs	r3, #1
 8006238:	9308      	str	r3, [sp, #32]
 800623a:	e7f4      	b.n	8006226 <_dtoa_r+0x2b6>
 800623c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8006240:	f8cd 9004 	str.w	r9, [sp, #4]
 8006244:	464b      	mov	r3, r9
 8006246:	e7c6      	b.n	80061d6 <_dtoa_r+0x266>
 8006248:	3101      	adds	r1, #1
 800624a:	6041      	str	r1, [r0, #4]
 800624c:	0052      	lsls	r2, r2, #1
 800624e:	e7c6      	b.n	80061de <_dtoa_r+0x26e>
 8006250:	636f4361 	.word	0x636f4361
 8006254:	3fd287a7 	.word	0x3fd287a7
 8006258:	8b60c8b3 	.word	0x8b60c8b3
 800625c:	3fc68a28 	.word	0x3fc68a28
 8006260:	509f79fb 	.word	0x509f79fb
 8006264:	3fd34413 	.word	0x3fd34413
 8006268:	08008de6 	.word	0x08008de6
 800626c:	08008dfd 	.word	0x08008dfd
 8006270:	7ff00000 	.word	0x7ff00000
 8006274:	08008de2 	.word	0x08008de2
 8006278:	08008dd9 	.word	0x08008dd9
 800627c:	08008c59 	.word	0x08008c59
 8006280:	3ff80000 	.word	0x3ff80000
 8006284:	08008f78 	.word	0x08008f78
 8006288:	08008e5c 	.word	0x08008e5c
 800628c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800628e:	9a00      	ldr	r2, [sp, #0]
 8006290:	601a      	str	r2, [r3, #0]
 8006292:	9b01      	ldr	r3, [sp, #4]
 8006294:	2b0e      	cmp	r3, #14
 8006296:	f200 80ad 	bhi.w	80063f4 <_dtoa_r+0x484>
 800629a:	2d00      	cmp	r5, #0
 800629c:	f000 80aa 	beq.w	80063f4 <_dtoa_r+0x484>
 80062a0:	f1ba 0f00 	cmp.w	sl, #0
 80062a4:	dd36      	ble.n	8006314 <_dtoa_r+0x3a4>
 80062a6:	4ac3      	ldr	r2, [pc, #780]	; (80065b4 <_dtoa_r+0x644>)
 80062a8:	f00a 030f 	and.w	r3, sl, #15
 80062ac:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80062b0:	ed93 7b00 	vldr	d7, [r3]
 80062b4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80062b8:	ea4f 172a 	mov.w	r7, sl, asr #4
 80062bc:	eeb0 8a47 	vmov.f32	s16, s14
 80062c0:	eef0 8a67 	vmov.f32	s17, s15
 80062c4:	d016      	beq.n	80062f4 <_dtoa_r+0x384>
 80062c6:	4bbc      	ldr	r3, [pc, #752]	; (80065b8 <_dtoa_r+0x648>)
 80062c8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80062cc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80062d0:	f7fa facc 	bl	800086c <__aeabi_ddiv>
 80062d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80062d8:	f007 070f 	and.w	r7, r7, #15
 80062dc:	2503      	movs	r5, #3
 80062de:	4eb6      	ldr	r6, [pc, #728]	; (80065b8 <_dtoa_r+0x648>)
 80062e0:	b957      	cbnz	r7, 80062f8 <_dtoa_r+0x388>
 80062e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80062e6:	ec53 2b18 	vmov	r2, r3, d8
 80062ea:	f7fa fabf 	bl	800086c <__aeabi_ddiv>
 80062ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80062f2:	e029      	b.n	8006348 <_dtoa_r+0x3d8>
 80062f4:	2502      	movs	r5, #2
 80062f6:	e7f2      	b.n	80062de <_dtoa_r+0x36e>
 80062f8:	07f9      	lsls	r1, r7, #31
 80062fa:	d508      	bpl.n	800630e <_dtoa_r+0x39e>
 80062fc:	ec51 0b18 	vmov	r0, r1, d8
 8006300:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006304:	f7fa f988 	bl	8000618 <__aeabi_dmul>
 8006308:	ec41 0b18 	vmov	d8, r0, r1
 800630c:	3501      	adds	r5, #1
 800630e:	107f      	asrs	r7, r7, #1
 8006310:	3608      	adds	r6, #8
 8006312:	e7e5      	b.n	80062e0 <_dtoa_r+0x370>
 8006314:	f000 80a6 	beq.w	8006464 <_dtoa_r+0x4f4>
 8006318:	f1ca 0600 	rsb	r6, sl, #0
 800631c:	4ba5      	ldr	r3, [pc, #660]	; (80065b4 <_dtoa_r+0x644>)
 800631e:	4fa6      	ldr	r7, [pc, #664]	; (80065b8 <_dtoa_r+0x648>)
 8006320:	f006 020f 	and.w	r2, r6, #15
 8006324:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800632c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006330:	f7fa f972 	bl	8000618 <__aeabi_dmul>
 8006334:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006338:	1136      	asrs	r6, r6, #4
 800633a:	2300      	movs	r3, #0
 800633c:	2502      	movs	r5, #2
 800633e:	2e00      	cmp	r6, #0
 8006340:	f040 8085 	bne.w	800644e <_dtoa_r+0x4de>
 8006344:	2b00      	cmp	r3, #0
 8006346:	d1d2      	bne.n	80062ee <_dtoa_r+0x37e>
 8006348:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800634a:	2b00      	cmp	r3, #0
 800634c:	f000 808c 	beq.w	8006468 <_dtoa_r+0x4f8>
 8006350:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006354:	4b99      	ldr	r3, [pc, #612]	; (80065bc <_dtoa_r+0x64c>)
 8006356:	2200      	movs	r2, #0
 8006358:	4630      	mov	r0, r6
 800635a:	4639      	mov	r1, r7
 800635c:	f7fa fbce 	bl	8000afc <__aeabi_dcmplt>
 8006360:	2800      	cmp	r0, #0
 8006362:	f000 8081 	beq.w	8006468 <_dtoa_r+0x4f8>
 8006366:	9b01      	ldr	r3, [sp, #4]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d07d      	beq.n	8006468 <_dtoa_r+0x4f8>
 800636c:	f1b9 0f00 	cmp.w	r9, #0
 8006370:	dd3c      	ble.n	80063ec <_dtoa_r+0x47c>
 8006372:	f10a 33ff 	add.w	r3, sl, #4294967295
 8006376:	9307      	str	r3, [sp, #28]
 8006378:	2200      	movs	r2, #0
 800637a:	4b91      	ldr	r3, [pc, #580]	; (80065c0 <_dtoa_r+0x650>)
 800637c:	4630      	mov	r0, r6
 800637e:	4639      	mov	r1, r7
 8006380:	f7fa f94a 	bl	8000618 <__aeabi_dmul>
 8006384:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006388:	3501      	adds	r5, #1
 800638a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800638e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006392:	4628      	mov	r0, r5
 8006394:	f7fa f8d6 	bl	8000544 <__aeabi_i2d>
 8006398:	4632      	mov	r2, r6
 800639a:	463b      	mov	r3, r7
 800639c:	f7fa f93c 	bl	8000618 <__aeabi_dmul>
 80063a0:	4b88      	ldr	r3, [pc, #544]	; (80065c4 <_dtoa_r+0x654>)
 80063a2:	2200      	movs	r2, #0
 80063a4:	f7f9 ff82 	bl	80002ac <__adddf3>
 80063a8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80063ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80063b0:	9303      	str	r3, [sp, #12]
 80063b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d15c      	bne.n	8006472 <_dtoa_r+0x502>
 80063b8:	4b83      	ldr	r3, [pc, #524]	; (80065c8 <_dtoa_r+0x658>)
 80063ba:	2200      	movs	r2, #0
 80063bc:	4630      	mov	r0, r6
 80063be:	4639      	mov	r1, r7
 80063c0:	f7f9 ff72 	bl	80002a8 <__aeabi_dsub>
 80063c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80063c8:	4606      	mov	r6, r0
 80063ca:	460f      	mov	r7, r1
 80063cc:	f7fa fbb4 	bl	8000b38 <__aeabi_dcmpgt>
 80063d0:	2800      	cmp	r0, #0
 80063d2:	f040 8296 	bne.w	8006902 <_dtoa_r+0x992>
 80063d6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80063da:	4630      	mov	r0, r6
 80063dc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80063e0:	4639      	mov	r1, r7
 80063e2:	f7fa fb8b 	bl	8000afc <__aeabi_dcmplt>
 80063e6:	2800      	cmp	r0, #0
 80063e8:	f040 8288 	bne.w	80068fc <_dtoa_r+0x98c>
 80063ec:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80063f0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80063f4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	f2c0 8158 	blt.w	80066ac <_dtoa_r+0x73c>
 80063fc:	f1ba 0f0e 	cmp.w	sl, #14
 8006400:	f300 8154 	bgt.w	80066ac <_dtoa_r+0x73c>
 8006404:	4b6b      	ldr	r3, [pc, #428]	; (80065b4 <_dtoa_r+0x644>)
 8006406:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800640a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800640e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006410:	2b00      	cmp	r3, #0
 8006412:	f280 80e3 	bge.w	80065dc <_dtoa_r+0x66c>
 8006416:	9b01      	ldr	r3, [sp, #4]
 8006418:	2b00      	cmp	r3, #0
 800641a:	f300 80df 	bgt.w	80065dc <_dtoa_r+0x66c>
 800641e:	f040 826d 	bne.w	80068fc <_dtoa_r+0x98c>
 8006422:	4b69      	ldr	r3, [pc, #420]	; (80065c8 <_dtoa_r+0x658>)
 8006424:	2200      	movs	r2, #0
 8006426:	4640      	mov	r0, r8
 8006428:	4649      	mov	r1, r9
 800642a:	f7fa f8f5 	bl	8000618 <__aeabi_dmul>
 800642e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006432:	f7fa fb77 	bl	8000b24 <__aeabi_dcmpge>
 8006436:	9e01      	ldr	r6, [sp, #4]
 8006438:	4637      	mov	r7, r6
 800643a:	2800      	cmp	r0, #0
 800643c:	f040 8243 	bne.w	80068c6 <_dtoa_r+0x956>
 8006440:	9d00      	ldr	r5, [sp, #0]
 8006442:	2331      	movs	r3, #49	; 0x31
 8006444:	f805 3b01 	strb.w	r3, [r5], #1
 8006448:	f10a 0a01 	add.w	sl, sl, #1
 800644c:	e23f      	b.n	80068ce <_dtoa_r+0x95e>
 800644e:	07f2      	lsls	r2, r6, #31
 8006450:	d505      	bpl.n	800645e <_dtoa_r+0x4ee>
 8006452:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006456:	f7fa f8df 	bl	8000618 <__aeabi_dmul>
 800645a:	3501      	adds	r5, #1
 800645c:	2301      	movs	r3, #1
 800645e:	1076      	asrs	r6, r6, #1
 8006460:	3708      	adds	r7, #8
 8006462:	e76c      	b.n	800633e <_dtoa_r+0x3ce>
 8006464:	2502      	movs	r5, #2
 8006466:	e76f      	b.n	8006348 <_dtoa_r+0x3d8>
 8006468:	9b01      	ldr	r3, [sp, #4]
 800646a:	f8cd a01c 	str.w	sl, [sp, #28]
 800646e:	930c      	str	r3, [sp, #48]	; 0x30
 8006470:	e78d      	b.n	800638e <_dtoa_r+0x41e>
 8006472:	9900      	ldr	r1, [sp, #0]
 8006474:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006476:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006478:	4b4e      	ldr	r3, [pc, #312]	; (80065b4 <_dtoa_r+0x644>)
 800647a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800647e:	4401      	add	r1, r0
 8006480:	9102      	str	r1, [sp, #8]
 8006482:	9908      	ldr	r1, [sp, #32]
 8006484:	eeb0 8a47 	vmov.f32	s16, s14
 8006488:	eef0 8a67 	vmov.f32	s17, s15
 800648c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006490:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006494:	2900      	cmp	r1, #0
 8006496:	d045      	beq.n	8006524 <_dtoa_r+0x5b4>
 8006498:	494c      	ldr	r1, [pc, #304]	; (80065cc <_dtoa_r+0x65c>)
 800649a:	2000      	movs	r0, #0
 800649c:	f7fa f9e6 	bl	800086c <__aeabi_ddiv>
 80064a0:	ec53 2b18 	vmov	r2, r3, d8
 80064a4:	f7f9 ff00 	bl	80002a8 <__aeabi_dsub>
 80064a8:	9d00      	ldr	r5, [sp, #0]
 80064aa:	ec41 0b18 	vmov	d8, r0, r1
 80064ae:	4639      	mov	r1, r7
 80064b0:	4630      	mov	r0, r6
 80064b2:	f7fa fb61 	bl	8000b78 <__aeabi_d2iz>
 80064b6:	900c      	str	r0, [sp, #48]	; 0x30
 80064b8:	f7fa f844 	bl	8000544 <__aeabi_i2d>
 80064bc:	4602      	mov	r2, r0
 80064be:	460b      	mov	r3, r1
 80064c0:	4630      	mov	r0, r6
 80064c2:	4639      	mov	r1, r7
 80064c4:	f7f9 fef0 	bl	80002a8 <__aeabi_dsub>
 80064c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80064ca:	3330      	adds	r3, #48	; 0x30
 80064cc:	f805 3b01 	strb.w	r3, [r5], #1
 80064d0:	ec53 2b18 	vmov	r2, r3, d8
 80064d4:	4606      	mov	r6, r0
 80064d6:	460f      	mov	r7, r1
 80064d8:	f7fa fb10 	bl	8000afc <__aeabi_dcmplt>
 80064dc:	2800      	cmp	r0, #0
 80064de:	d165      	bne.n	80065ac <_dtoa_r+0x63c>
 80064e0:	4632      	mov	r2, r6
 80064e2:	463b      	mov	r3, r7
 80064e4:	4935      	ldr	r1, [pc, #212]	; (80065bc <_dtoa_r+0x64c>)
 80064e6:	2000      	movs	r0, #0
 80064e8:	f7f9 fede 	bl	80002a8 <__aeabi_dsub>
 80064ec:	ec53 2b18 	vmov	r2, r3, d8
 80064f0:	f7fa fb04 	bl	8000afc <__aeabi_dcmplt>
 80064f4:	2800      	cmp	r0, #0
 80064f6:	f040 80b9 	bne.w	800666c <_dtoa_r+0x6fc>
 80064fa:	9b02      	ldr	r3, [sp, #8]
 80064fc:	429d      	cmp	r5, r3
 80064fe:	f43f af75 	beq.w	80063ec <_dtoa_r+0x47c>
 8006502:	4b2f      	ldr	r3, [pc, #188]	; (80065c0 <_dtoa_r+0x650>)
 8006504:	ec51 0b18 	vmov	r0, r1, d8
 8006508:	2200      	movs	r2, #0
 800650a:	f7fa f885 	bl	8000618 <__aeabi_dmul>
 800650e:	4b2c      	ldr	r3, [pc, #176]	; (80065c0 <_dtoa_r+0x650>)
 8006510:	ec41 0b18 	vmov	d8, r0, r1
 8006514:	2200      	movs	r2, #0
 8006516:	4630      	mov	r0, r6
 8006518:	4639      	mov	r1, r7
 800651a:	f7fa f87d 	bl	8000618 <__aeabi_dmul>
 800651e:	4606      	mov	r6, r0
 8006520:	460f      	mov	r7, r1
 8006522:	e7c4      	b.n	80064ae <_dtoa_r+0x53e>
 8006524:	ec51 0b17 	vmov	r0, r1, d7
 8006528:	f7fa f876 	bl	8000618 <__aeabi_dmul>
 800652c:	9b02      	ldr	r3, [sp, #8]
 800652e:	9d00      	ldr	r5, [sp, #0]
 8006530:	930c      	str	r3, [sp, #48]	; 0x30
 8006532:	ec41 0b18 	vmov	d8, r0, r1
 8006536:	4639      	mov	r1, r7
 8006538:	4630      	mov	r0, r6
 800653a:	f7fa fb1d 	bl	8000b78 <__aeabi_d2iz>
 800653e:	9011      	str	r0, [sp, #68]	; 0x44
 8006540:	f7fa f800 	bl	8000544 <__aeabi_i2d>
 8006544:	4602      	mov	r2, r0
 8006546:	460b      	mov	r3, r1
 8006548:	4630      	mov	r0, r6
 800654a:	4639      	mov	r1, r7
 800654c:	f7f9 feac 	bl	80002a8 <__aeabi_dsub>
 8006550:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006552:	3330      	adds	r3, #48	; 0x30
 8006554:	f805 3b01 	strb.w	r3, [r5], #1
 8006558:	9b02      	ldr	r3, [sp, #8]
 800655a:	429d      	cmp	r5, r3
 800655c:	4606      	mov	r6, r0
 800655e:	460f      	mov	r7, r1
 8006560:	f04f 0200 	mov.w	r2, #0
 8006564:	d134      	bne.n	80065d0 <_dtoa_r+0x660>
 8006566:	4b19      	ldr	r3, [pc, #100]	; (80065cc <_dtoa_r+0x65c>)
 8006568:	ec51 0b18 	vmov	r0, r1, d8
 800656c:	f7f9 fe9e 	bl	80002ac <__adddf3>
 8006570:	4602      	mov	r2, r0
 8006572:	460b      	mov	r3, r1
 8006574:	4630      	mov	r0, r6
 8006576:	4639      	mov	r1, r7
 8006578:	f7fa fade 	bl	8000b38 <__aeabi_dcmpgt>
 800657c:	2800      	cmp	r0, #0
 800657e:	d175      	bne.n	800666c <_dtoa_r+0x6fc>
 8006580:	ec53 2b18 	vmov	r2, r3, d8
 8006584:	4911      	ldr	r1, [pc, #68]	; (80065cc <_dtoa_r+0x65c>)
 8006586:	2000      	movs	r0, #0
 8006588:	f7f9 fe8e 	bl	80002a8 <__aeabi_dsub>
 800658c:	4602      	mov	r2, r0
 800658e:	460b      	mov	r3, r1
 8006590:	4630      	mov	r0, r6
 8006592:	4639      	mov	r1, r7
 8006594:	f7fa fab2 	bl	8000afc <__aeabi_dcmplt>
 8006598:	2800      	cmp	r0, #0
 800659a:	f43f af27 	beq.w	80063ec <_dtoa_r+0x47c>
 800659e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80065a0:	1e6b      	subs	r3, r5, #1
 80065a2:	930c      	str	r3, [sp, #48]	; 0x30
 80065a4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80065a8:	2b30      	cmp	r3, #48	; 0x30
 80065aa:	d0f8      	beq.n	800659e <_dtoa_r+0x62e>
 80065ac:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80065b0:	e04a      	b.n	8006648 <_dtoa_r+0x6d8>
 80065b2:	bf00      	nop
 80065b4:	08008f78 	.word	0x08008f78
 80065b8:	08008f50 	.word	0x08008f50
 80065bc:	3ff00000 	.word	0x3ff00000
 80065c0:	40240000 	.word	0x40240000
 80065c4:	401c0000 	.word	0x401c0000
 80065c8:	40140000 	.word	0x40140000
 80065cc:	3fe00000 	.word	0x3fe00000
 80065d0:	4baf      	ldr	r3, [pc, #700]	; (8006890 <_dtoa_r+0x920>)
 80065d2:	f7fa f821 	bl	8000618 <__aeabi_dmul>
 80065d6:	4606      	mov	r6, r0
 80065d8:	460f      	mov	r7, r1
 80065da:	e7ac      	b.n	8006536 <_dtoa_r+0x5c6>
 80065dc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80065e0:	9d00      	ldr	r5, [sp, #0]
 80065e2:	4642      	mov	r2, r8
 80065e4:	464b      	mov	r3, r9
 80065e6:	4630      	mov	r0, r6
 80065e8:	4639      	mov	r1, r7
 80065ea:	f7fa f93f 	bl	800086c <__aeabi_ddiv>
 80065ee:	f7fa fac3 	bl	8000b78 <__aeabi_d2iz>
 80065f2:	9002      	str	r0, [sp, #8]
 80065f4:	f7f9 ffa6 	bl	8000544 <__aeabi_i2d>
 80065f8:	4642      	mov	r2, r8
 80065fa:	464b      	mov	r3, r9
 80065fc:	f7fa f80c 	bl	8000618 <__aeabi_dmul>
 8006600:	4602      	mov	r2, r0
 8006602:	460b      	mov	r3, r1
 8006604:	4630      	mov	r0, r6
 8006606:	4639      	mov	r1, r7
 8006608:	f7f9 fe4e 	bl	80002a8 <__aeabi_dsub>
 800660c:	9e02      	ldr	r6, [sp, #8]
 800660e:	9f01      	ldr	r7, [sp, #4]
 8006610:	3630      	adds	r6, #48	; 0x30
 8006612:	f805 6b01 	strb.w	r6, [r5], #1
 8006616:	9e00      	ldr	r6, [sp, #0]
 8006618:	1bae      	subs	r6, r5, r6
 800661a:	42b7      	cmp	r7, r6
 800661c:	4602      	mov	r2, r0
 800661e:	460b      	mov	r3, r1
 8006620:	d137      	bne.n	8006692 <_dtoa_r+0x722>
 8006622:	f7f9 fe43 	bl	80002ac <__adddf3>
 8006626:	4642      	mov	r2, r8
 8006628:	464b      	mov	r3, r9
 800662a:	4606      	mov	r6, r0
 800662c:	460f      	mov	r7, r1
 800662e:	f7fa fa83 	bl	8000b38 <__aeabi_dcmpgt>
 8006632:	b9c8      	cbnz	r0, 8006668 <_dtoa_r+0x6f8>
 8006634:	4642      	mov	r2, r8
 8006636:	464b      	mov	r3, r9
 8006638:	4630      	mov	r0, r6
 800663a:	4639      	mov	r1, r7
 800663c:	f7fa fa54 	bl	8000ae8 <__aeabi_dcmpeq>
 8006640:	b110      	cbz	r0, 8006648 <_dtoa_r+0x6d8>
 8006642:	9b02      	ldr	r3, [sp, #8]
 8006644:	07d9      	lsls	r1, r3, #31
 8006646:	d40f      	bmi.n	8006668 <_dtoa_r+0x6f8>
 8006648:	4620      	mov	r0, r4
 800664a:	4659      	mov	r1, fp
 800664c:	f000 fe58 	bl	8007300 <_Bfree>
 8006650:	2300      	movs	r3, #0
 8006652:	702b      	strb	r3, [r5, #0]
 8006654:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006656:	f10a 0001 	add.w	r0, sl, #1
 800665a:	6018      	str	r0, [r3, #0]
 800665c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800665e:	2b00      	cmp	r3, #0
 8006660:	f43f acd8 	beq.w	8006014 <_dtoa_r+0xa4>
 8006664:	601d      	str	r5, [r3, #0]
 8006666:	e4d5      	b.n	8006014 <_dtoa_r+0xa4>
 8006668:	f8cd a01c 	str.w	sl, [sp, #28]
 800666c:	462b      	mov	r3, r5
 800666e:	461d      	mov	r5, r3
 8006670:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006674:	2a39      	cmp	r2, #57	; 0x39
 8006676:	d108      	bne.n	800668a <_dtoa_r+0x71a>
 8006678:	9a00      	ldr	r2, [sp, #0]
 800667a:	429a      	cmp	r2, r3
 800667c:	d1f7      	bne.n	800666e <_dtoa_r+0x6fe>
 800667e:	9a07      	ldr	r2, [sp, #28]
 8006680:	9900      	ldr	r1, [sp, #0]
 8006682:	3201      	adds	r2, #1
 8006684:	9207      	str	r2, [sp, #28]
 8006686:	2230      	movs	r2, #48	; 0x30
 8006688:	700a      	strb	r2, [r1, #0]
 800668a:	781a      	ldrb	r2, [r3, #0]
 800668c:	3201      	adds	r2, #1
 800668e:	701a      	strb	r2, [r3, #0]
 8006690:	e78c      	b.n	80065ac <_dtoa_r+0x63c>
 8006692:	4b7f      	ldr	r3, [pc, #508]	; (8006890 <_dtoa_r+0x920>)
 8006694:	2200      	movs	r2, #0
 8006696:	f7f9 ffbf 	bl	8000618 <__aeabi_dmul>
 800669a:	2200      	movs	r2, #0
 800669c:	2300      	movs	r3, #0
 800669e:	4606      	mov	r6, r0
 80066a0:	460f      	mov	r7, r1
 80066a2:	f7fa fa21 	bl	8000ae8 <__aeabi_dcmpeq>
 80066a6:	2800      	cmp	r0, #0
 80066a8:	d09b      	beq.n	80065e2 <_dtoa_r+0x672>
 80066aa:	e7cd      	b.n	8006648 <_dtoa_r+0x6d8>
 80066ac:	9a08      	ldr	r2, [sp, #32]
 80066ae:	2a00      	cmp	r2, #0
 80066b0:	f000 80c4 	beq.w	800683c <_dtoa_r+0x8cc>
 80066b4:	9a05      	ldr	r2, [sp, #20]
 80066b6:	2a01      	cmp	r2, #1
 80066b8:	f300 80a8 	bgt.w	800680c <_dtoa_r+0x89c>
 80066bc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80066be:	2a00      	cmp	r2, #0
 80066c0:	f000 80a0 	beq.w	8006804 <_dtoa_r+0x894>
 80066c4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80066c8:	9e06      	ldr	r6, [sp, #24]
 80066ca:	4645      	mov	r5, r8
 80066cc:	9a04      	ldr	r2, [sp, #16]
 80066ce:	2101      	movs	r1, #1
 80066d0:	441a      	add	r2, r3
 80066d2:	4620      	mov	r0, r4
 80066d4:	4498      	add	r8, r3
 80066d6:	9204      	str	r2, [sp, #16]
 80066d8:	f000 ff18 	bl	800750c <__i2b>
 80066dc:	4607      	mov	r7, r0
 80066de:	2d00      	cmp	r5, #0
 80066e0:	dd0b      	ble.n	80066fa <_dtoa_r+0x78a>
 80066e2:	9b04      	ldr	r3, [sp, #16]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	dd08      	ble.n	80066fa <_dtoa_r+0x78a>
 80066e8:	42ab      	cmp	r3, r5
 80066ea:	9a04      	ldr	r2, [sp, #16]
 80066ec:	bfa8      	it	ge
 80066ee:	462b      	movge	r3, r5
 80066f0:	eba8 0803 	sub.w	r8, r8, r3
 80066f4:	1aed      	subs	r5, r5, r3
 80066f6:	1ad3      	subs	r3, r2, r3
 80066f8:	9304      	str	r3, [sp, #16]
 80066fa:	9b06      	ldr	r3, [sp, #24]
 80066fc:	b1fb      	cbz	r3, 800673e <_dtoa_r+0x7ce>
 80066fe:	9b08      	ldr	r3, [sp, #32]
 8006700:	2b00      	cmp	r3, #0
 8006702:	f000 809f 	beq.w	8006844 <_dtoa_r+0x8d4>
 8006706:	2e00      	cmp	r6, #0
 8006708:	dd11      	ble.n	800672e <_dtoa_r+0x7be>
 800670a:	4639      	mov	r1, r7
 800670c:	4632      	mov	r2, r6
 800670e:	4620      	mov	r0, r4
 8006710:	f000 ffb8 	bl	8007684 <__pow5mult>
 8006714:	465a      	mov	r2, fp
 8006716:	4601      	mov	r1, r0
 8006718:	4607      	mov	r7, r0
 800671a:	4620      	mov	r0, r4
 800671c:	f000 ff0c 	bl	8007538 <__multiply>
 8006720:	4659      	mov	r1, fp
 8006722:	9007      	str	r0, [sp, #28]
 8006724:	4620      	mov	r0, r4
 8006726:	f000 fdeb 	bl	8007300 <_Bfree>
 800672a:	9b07      	ldr	r3, [sp, #28]
 800672c:	469b      	mov	fp, r3
 800672e:	9b06      	ldr	r3, [sp, #24]
 8006730:	1b9a      	subs	r2, r3, r6
 8006732:	d004      	beq.n	800673e <_dtoa_r+0x7ce>
 8006734:	4659      	mov	r1, fp
 8006736:	4620      	mov	r0, r4
 8006738:	f000 ffa4 	bl	8007684 <__pow5mult>
 800673c:	4683      	mov	fp, r0
 800673e:	2101      	movs	r1, #1
 8006740:	4620      	mov	r0, r4
 8006742:	f000 fee3 	bl	800750c <__i2b>
 8006746:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006748:	2b00      	cmp	r3, #0
 800674a:	4606      	mov	r6, r0
 800674c:	dd7c      	ble.n	8006848 <_dtoa_r+0x8d8>
 800674e:	461a      	mov	r2, r3
 8006750:	4601      	mov	r1, r0
 8006752:	4620      	mov	r0, r4
 8006754:	f000 ff96 	bl	8007684 <__pow5mult>
 8006758:	9b05      	ldr	r3, [sp, #20]
 800675a:	2b01      	cmp	r3, #1
 800675c:	4606      	mov	r6, r0
 800675e:	dd76      	ble.n	800684e <_dtoa_r+0x8de>
 8006760:	2300      	movs	r3, #0
 8006762:	9306      	str	r3, [sp, #24]
 8006764:	6933      	ldr	r3, [r6, #16]
 8006766:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800676a:	6918      	ldr	r0, [r3, #16]
 800676c:	f000 fe7e 	bl	800746c <__hi0bits>
 8006770:	f1c0 0020 	rsb	r0, r0, #32
 8006774:	9b04      	ldr	r3, [sp, #16]
 8006776:	4418      	add	r0, r3
 8006778:	f010 001f 	ands.w	r0, r0, #31
 800677c:	f000 8086 	beq.w	800688c <_dtoa_r+0x91c>
 8006780:	f1c0 0320 	rsb	r3, r0, #32
 8006784:	2b04      	cmp	r3, #4
 8006786:	dd7f      	ble.n	8006888 <_dtoa_r+0x918>
 8006788:	f1c0 001c 	rsb	r0, r0, #28
 800678c:	9b04      	ldr	r3, [sp, #16]
 800678e:	4403      	add	r3, r0
 8006790:	4480      	add	r8, r0
 8006792:	4405      	add	r5, r0
 8006794:	9304      	str	r3, [sp, #16]
 8006796:	f1b8 0f00 	cmp.w	r8, #0
 800679a:	dd05      	ble.n	80067a8 <_dtoa_r+0x838>
 800679c:	4659      	mov	r1, fp
 800679e:	4642      	mov	r2, r8
 80067a0:	4620      	mov	r0, r4
 80067a2:	f000 ffc9 	bl	8007738 <__lshift>
 80067a6:	4683      	mov	fp, r0
 80067a8:	9b04      	ldr	r3, [sp, #16]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	dd05      	ble.n	80067ba <_dtoa_r+0x84a>
 80067ae:	4631      	mov	r1, r6
 80067b0:	461a      	mov	r2, r3
 80067b2:	4620      	mov	r0, r4
 80067b4:	f000 ffc0 	bl	8007738 <__lshift>
 80067b8:	4606      	mov	r6, r0
 80067ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d069      	beq.n	8006894 <_dtoa_r+0x924>
 80067c0:	4631      	mov	r1, r6
 80067c2:	4658      	mov	r0, fp
 80067c4:	f001 f824 	bl	8007810 <__mcmp>
 80067c8:	2800      	cmp	r0, #0
 80067ca:	da63      	bge.n	8006894 <_dtoa_r+0x924>
 80067cc:	2300      	movs	r3, #0
 80067ce:	4659      	mov	r1, fp
 80067d0:	220a      	movs	r2, #10
 80067d2:	4620      	mov	r0, r4
 80067d4:	f000 fdb6 	bl	8007344 <__multadd>
 80067d8:	9b08      	ldr	r3, [sp, #32]
 80067da:	f10a 3aff 	add.w	sl, sl, #4294967295
 80067de:	4683      	mov	fp, r0
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	f000 818f 	beq.w	8006b04 <_dtoa_r+0xb94>
 80067e6:	4639      	mov	r1, r7
 80067e8:	2300      	movs	r3, #0
 80067ea:	220a      	movs	r2, #10
 80067ec:	4620      	mov	r0, r4
 80067ee:	f000 fda9 	bl	8007344 <__multadd>
 80067f2:	f1b9 0f00 	cmp.w	r9, #0
 80067f6:	4607      	mov	r7, r0
 80067f8:	f300 808e 	bgt.w	8006918 <_dtoa_r+0x9a8>
 80067fc:	9b05      	ldr	r3, [sp, #20]
 80067fe:	2b02      	cmp	r3, #2
 8006800:	dc50      	bgt.n	80068a4 <_dtoa_r+0x934>
 8006802:	e089      	b.n	8006918 <_dtoa_r+0x9a8>
 8006804:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006806:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800680a:	e75d      	b.n	80066c8 <_dtoa_r+0x758>
 800680c:	9b01      	ldr	r3, [sp, #4]
 800680e:	1e5e      	subs	r6, r3, #1
 8006810:	9b06      	ldr	r3, [sp, #24]
 8006812:	42b3      	cmp	r3, r6
 8006814:	bfbf      	itttt	lt
 8006816:	9b06      	ldrlt	r3, [sp, #24]
 8006818:	9606      	strlt	r6, [sp, #24]
 800681a:	1af2      	sublt	r2, r6, r3
 800681c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800681e:	bfb6      	itet	lt
 8006820:	189b      	addlt	r3, r3, r2
 8006822:	1b9e      	subge	r6, r3, r6
 8006824:	930d      	strlt	r3, [sp, #52]	; 0x34
 8006826:	9b01      	ldr	r3, [sp, #4]
 8006828:	bfb8      	it	lt
 800682a:	2600      	movlt	r6, #0
 800682c:	2b00      	cmp	r3, #0
 800682e:	bfb5      	itete	lt
 8006830:	eba8 0503 	sublt.w	r5, r8, r3
 8006834:	9b01      	ldrge	r3, [sp, #4]
 8006836:	2300      	movlt	r3, #0
 8006838:	4645      	movge	r5, r8
 800683a:	e747      	b.n	80066cc <_dtoa_r+0x75c>
 800683c:	9e06      	ldr	r6, [sp, #24]
 800683e:	9f08      	ldr	r7, [sp, #32]
 8006840:	4645      	mov	r5, r8
 8006842:	e74c      	b.n	80066de <_dtoa_r+0x76e>
 8006844:	9a06      	ldr	r2, [sp, #24]
 8006846:	e775      	b.n	8006734 <_dtoa_r+0x7c4>
 8006848:	9b05      	ldr	r3, [sp, #20]
 800684a:	2b01      	cmp	r3, #1
 800684c:	dc18      	bgt.n	8006880 <_dtoa_r+0x910>
 800684e:	9b02      	ldr	r3, [sp, #8]
 8006850:	b9b3      	cbnz	r3, 8006880 <_dtoa_r+0x910>
 8006852:	9b03      	ldr	r3, [sp, #12]
 8006854:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006858:	b9a3      	cbnz	r3, 8006884 <_dtoa_r+0x914>
 800685a:	9b03      	ldr	r3, [sp, #12]
 800685c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006860:	0d1b      	lsrs	r3, r3, #20
 8006862:	051b      	lsls	r3, r3, #20
 8006864:	b12b      	cbz	r3, 8006872 <_dtoa_r+0x902>
 8006866:	9b04      	ldr	r3, [sp, #16]
 8006868:	3301      	adds	r3, #1
 800686a:	9304      	str	r3, [sp, #16]
 800686c:	f108 0801 	add.w	r8, r8, #1
 8006870:	2301      	movs	r3, #1
 8006872:	9306      	str	r3, [sp, #24]
 8006874:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006876:	2b00      	cmp	r3, #0
 8006878:	f47f af74 	bne.w	8006764 <_dtoa_r+0x7f4>
 800687c:	2001      	movs	r0, #1
 800687e:	e779      	b.n	8006774 <_dtoa_r+0x804>
 8006880:	2300      	movs	r3, #0
 8006882:	e7f6      	b.n	8006872 <_dtoa_r+0x902>
 8006884:	9b02      	ldr	r3, [sp, #8]
 8006886:	e7f4      	b.n	8006872 <_dtoa_r+0x902>
 8006888:	d085      	beq.n	8006796 <_dtoa_r+0x826>
 800688a:	4618      	mov	r0, r3
 800688c:	301c      	adds	r0, #28
 800688e:	e77d      	b.n	800678c <_dtoa_r+0x81c>
 8006890:	40240000 	.word	0x40240000
 8006894:	9b01      	ldr	r3, [sp, #4]
 8006896:	2b00      	cmp	r3, #0
 8006898:	dc38      	bgt.n	800690c <_dtoa_r+0x99c>
 800689a:	9b05      	ldr	r3, [sp, #20]
 800689c:	2b02      	cmp	r3, #2
 800689e:	dd35      	ble.n	800690c <_dtoa_r+0x99c>
 80068a0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80068a4:	f1b9 0f00 	cmp.w	r9, #0
 80068a8:	d10d      	bne.n	80068c6 <_dtoa_r+0x956>
 80068aa:	4631      	mov	r1, r6
 80068ac:	464b      	mov	r3, r9
 80068ae:	2205      	movs	r2, #5
 80068b0:	4620      	mov	r0, r4
 80068b2:	f000 fd47 	bl	8007344 <__multadd>
 80068b6:	4601      	mov	r1, r0
 80068b8:	4606      	mov	r6, r0
 80068ba:	4658      	mov	r0, fp
 80068bc:	f000 ffa8 	bl	8007810 <__mcmp>
 80068c0:	2800      	cmp	r0, #0
 80068c2:	f73f adbd 	bgt.w	8006440 <_dtoa_r+0x4d0>
 80068c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068c8:	9d00      	ldr	r5, [sp, #0]
 80068ca:	ea6f 0a03 	mvn.w	sl, r3
 80068ce:	f04f 0800 	mov.w	r8, #0
 80068d2:	4631      	mov	r1, r6
 80068d4:	4620      	mov	r0, r4
 80068d6:	f000 fd13 	bl	8007300 <_Bfree>
 80068da:	2f00      	cmp	r7, #0
 80068dc:	f43f aeb4 	beq.w	8006648 <_dtoa_r+0x6d8>
 80068e0:	f1b8 0f00 	cmp.w	r8, #0
 80068e4:	d005      	beq.n	80068f2 <_dtoa_r+0x982>
 80068e6:	45b8      	cmp	r8, r7
 80068e8:	d003      	beq.n	80068f2 <_dtoa_r+0x982>
 80068ea:	4641      	mov	r1, r8
 80068ec:	4620      	mov	r0, r4
 80068ee:	f000 fd07 	bl	8007300 <_Bfree>
 80068f2:	4639      	mov	r1, r7
 80068f4:	4620      	mov	r0, r4
 80068f6:	f000 fd03 	bl	8007300 <_Bfree>
 80068fa:	e6a5      	b.n	8006648 <_dtoa_r+0x6d8>
 80068fc:	2600      	movs	r6, #0
 80068fe:	4637      	mov	r7, r6
 8006900:	e7e1      	b.n	80068c6 <_dtoa_r+0x956>
 8006902:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8006904:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006908:	4637      	mov	r7, r6
 800690a:	e599      	b.n	8006440 <_dtoa_r+0x4d0>
 800690c:	9b08      	ldr	r3, [sp, #32]
 800690e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8006912:	2b00      	cmp	r3, #0
 8006914:	f000 80fd 	beq.w	8006b12 <_dtoa_r+0xba2>
 8006918:	2d00      	cmp	r5, #0
 800691a:	dd05      	ble.n	8006928 <_dtoa_r+0x9b8>
 800691c:	4639      	mov	r1, r7
 800691e:	462a      	mov	r2, r5
 8006920:	4620      	mov	r0, r4
 8006922:	f000 ff09 	bl	8007738 <__lshift>
 8006926:	4607      	mov	r7, r0
 8006928:	9b06      	ldr	r3, [sp, #24]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d05c      	beq.n	80069e8 <_dtoa_r+0xa78>
 800692e:	6879      	ldr	r1, [r7, #4]
 8006930:	4620      	mov	r0, r4
 8006932:	f000 fca5 	bl	8007280 <_Balloc>
 8006936:	4605      	mov	r5, r0
 8006938:	b928      	cbnz	r0, 8006946 <_dtoa_r+0x9d6>
 800693a:	4b80      	ldr	r3, [pc, #512]	; (8006b3c <_dtoa_r+0xbcc>)
 800693c:	4602      	mov	r2, r0
 800693e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006942:	f7ff bb2e 	b.w	8005fa2 <_dtoa_r+0x32>
 8006946:	693a      	ldr	r2, [r7, #16]
 8006948:	3202      	adds	r2, #2
 800694a:	0092      	lsls	r2, r2, #2
 800694c:	f107 010c 	add.w	r1, r7, #12
 8006950:	300c      	adds	r0, #12
 8006952:	f000 fc87 	bl	8007264 <memcpy>
 8006956:	2201      	movs	r2, #1
 8006958:	4629      	mov	r1, r5
 800695a:	4620      	mov	r0, r4
 800695c:	f000 feec 	bl	8007738 <__lshift>
 8006960:	9b00      	ldr	r3, [sp, #0]
 8006962:	3301      	adds	r3, #1
 8006964:	9301      	str	r3, [sp, #4]
 8006966:	9b00      	ldr	r3, [sp, #0]
 8006968:	444b      	add	r3, r9
 800696a:	9307      	str	r3, [sp, #28]
 800696c:	9b02      	ldr	r3, [sp, #8]
 800696e:	f003 0301 	and.w	r3, r3, #1
 8006972:	46b8      	mov	r8, r7
 8006974:	9306      	str	r3, [sp, #24]
 8006976:	4607      	mov	r7, r0
 8006978:	9b01      	ldr	r3, [sp, #4]
 800697a:	4631      	mov	r1, r6
 800697c:	3b01      	subs	r3, #1
 800697e:	4658      	mov	r0, fp
 8006980:	9302      	str	r3, [sp, #8]
 8006982:	f7ff fa67 	bl	8005e54 <quorem>
 8006986:	4603      	mov	r3, r0
 8006988:	3330      	adds	r3, #48	; 0x30
 800698a:	9004      	str	r0, [sp, #16]
 800698c:	4641      	mov	r1, r8
 800698e:	4658      	mov	r0, fp
 8006990:	9308      	str	r3, [sp, #32]
 8006992:	f000 ff3d 	bl	8007810 <__mcmp>
 8006996:	463a      	mov	r2, r7
 8006998:	4681      	mov	r9, r0
 800699a:	4631      	mov	r1, r6
 800699c:	4620      	mov	r0, r4
 800699e:	f000 ff53 	bl	8007848 <__mdiff>
 80069a2:	68c2      	ldr	r2, [r0, #12]
 80069a4:	9b08      	ldr	r3, [sp, #32]
 80069a6:	4605      	mov	r5, r0
 80069a8:	bb02      	cbnz	r2, 80069ec <_dtoa_r+0xa7c>
 80069aa:	4601      	mov	r1, r0
 80069ac:	4658      	mov	r0, fp
 80069ae:	f000 ff2f 	bl	8007810 <__mcmp>
 80069b2:	9b08      	ldr	r3, [sp, #32]
 80069b4:	4602      	mov	r2, r0
 80069b6:	4629      	mov	r1, r5
 80069b8:	4620      	mov	r0, r4
 80069ba:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80069be:	f000 fc9f 	bl	8007300 <_Bfree>
 80069c2:	9b05      	ldr	r3, [sp, #20]
 80069c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80069c6:	9d01      	ldr	r5, [sp, #4]
 80069c8:	ea43 0102 	orr.w	r1, r3, r2
 80069cc:	9b06      	ldr	r3, [sp, #24]
 80069ce:	430b      	orrs	r3, r1
 80069d0:	9b08      	ldr	r3, [sp, #32]
 80069d2:	d10d      	bne.n	80069f0 <_dtoa_r+0xa80>
 80069d4:	2b39      	cmp	r3, #57	; 0x39
 80069d6:	d029      	beq.n	8006a2c <_dtoa_r+0xabc>
 80069d8:	f1b9 0f00 	cmp.w	r9, #0
 80069dc:	dd01      	ble.n	80069e2 <_dtoa_r+0xa72>
 80069de:	9b04      	ldr	r3, [sp, #16]
 80069e0:	3331      	adds	r3, #49	; 0x31
 80069e2:	9a02      	ldr	r2, [sp, #8]
 80069e4:	7013      	strb	r3, [r2, #0]
 80069e6:	e774      	b.n	80068d2 <_dtoa_r+0x962>
 80069e8:	4638      	mov	r0, r7
 80069ea:	e7b9      	b.n	8006960 <_dtoa_r+0x9f0>
 80069ec:	2201      	movs	r2, #1
 80069ee:	e7e2      	b.n	80069b6 <_dtoa_r+0xa46>
 80069f0:	f1b9 0f00 	cmp.w	r9, #0
 80069f4:	db06      	blt.n	8006a04 <_dtoa_r+0xa94>
 80069f6:	9905      	ldr	r1, [sp, #20]
 80069f8:	ea41 0909 	orr.w	r9, r1, r9
 80069fc:	9906      	ldr	r1, [sp, #24]
 80069fe:	ea59 0101 	orrs.w	r1, r9, r1
 8006a02:	d120      	bne.n	8006a46 <_dtoa_r+0xad6>
 8006a04:	2a00      	cmp	r2, #0
 8006a06:	ddec      	ble.n	80069e2 <_dtoa_r+0xa72>
 8006a08:	4659      	mov	r1, fp
 8006a0a:	2201      	movs	r2, #1
 8006a0c:	4620      	mov	r0, r4
 8006a0e:	9301      	str	r3, [sp, #4]
 8006a10:	f000 fe92 	bl	8007738 <__lshift>
 8006a14:	4631      	mov	r1, r6
 8006a16:	4683      	mov	fp, r0
 8006a18:	f000 fefa 	bl	8007810 <__mcmp>
 8006a1c:	2800      	cmp	r0, #0
 8006a1e:	9b01      	ldr	r3, [sp, #4]
 8006a20:	dc02      	bgt.n	8006a28 <_dtoa_r+0xab8>
 8006a22:	d1de      	bne.n	80069e2 <_dtoa_r+0xa72>
 8006a24:	07da      	lsls	r2, r3, #31
 8006a26:	d5dc      	bpl.n	80069e2 <_dtoa_r+0xa72>
 8006a28:	2b39      	cmp	r3, #57	; 0x39
 8006a2a:	d1d8      	bne.n	80069de <_dtoa_r+0xa6e>
 8006a2c:	9a02      	ldr	r2, [sp, #8]
 8006a2e:	2339      	movs	r3, #57	; 0x39
 8006a30:	7013      	strb	r3, [r2, #0]
 8006a32:	462b      	mov	r3, r5
 8006a34:	461d      	mov	r5, r3
 8006a36:	3b01      	subs	r3, #1
 8006a38:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006a3c:	2a39      	cmp	r2, #57	; 0x39
 8006a3e:	d050      	beq.n	8006ae2 <_dtoa_r+0xb72>
 8006a40:	3201      	adds	r2, #1
 8006a42:	701a      	strb	r2, [r3, #0]
 8006a44:	e745      	b.n	80068d2 <_dtoa_r+0x962>
 8006a46:	2a00      	cmp	r2, #0
 8006a48:	dd03      	ble.n	8006a52 <_dtoa_r+0xae2>
 8006a4a:	2b39      	cmp	r3, #57	; 0x39
 8006a4c:	d0ee      	beq.n	8006a2c <_dtoa_r+0xabc>
 8006a4e:	3301      	adds	r3, #1
 8006a50:	e7c7      	b.n	80069e2 <_dtoa_r+0xa72>
 8006a52:	9a01      	ldr	r2, [sp, #4]
 8006a54:	9907      	ldr	r1, [sp, #28]
 8006a56:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006a5a:	428a      	cmp	r2, r1
 8006a5c:	d02a      	beq.n	8006ab4 <_dtoa_r+0xb44>
 8006a5e:	4659      	mov	r1, fp
 8006a60:	2300      	movs	r3, #0
 8006a62:	220a      	movs	r2, #10
 8006a64:	4620      	mov	r0, r4
 8006a66:	f000 fc6d 	bl	8007344 <__multadd>
 8006a6a:	45b8      	cmp	r8, r7
 8006a6c:	4683      	mov	fp, r0
 8006a6e:	f04f 0300 	mov.w	r3, #0
 8006a72:	f04f 020a 	mov.w	r2, #10
 8006a76:	4641      	mov	r1, r8
 8006a78:	4620      	mov	r0, r4
 8006a7a:	d107      	bne.n	8006a8c <_dtoa_r+0xb1c>
 8006a7c:	f000 fc62 	bl	8007344 <__multadd>
 8006a80:	4680      	mov	r8, r0
 8006a82:	4607      	mov	r7, r0
 8006a84:	9b01      	ldr	r3, [sp, #4]
 8006a86:	3301      	adds	r3, #1
 8006a88:	9301      	str	r3, [sp, #4]
 8006a8a:	e775      	b.n	8006978 <_dtoa_r+0xa08>
 8006a8c:	f000 fc5a 	bl	8007344 <__multadd>
 8006a90:	4639      	mov	r1, r7
 8006a92:	4680      	mov	r8, r0
 8006a94:	2300      	movs	r3, #0
 8006a96:	220a      	movs	r2, #10
 8006a98:	4620      	mov	r0, r4
 8006a9a:	f000 fc53 	bl	8007344 <__multadd>
 8006a9e:	4607      	mov	r7, r0
 8006aa0:	e7f0      	b.n	8006a84 <_dtoa_r+0xb14>
 8006aa2:	f1b9 0f00 	cmp.w	r9, #0
 8006aa6:	9a00      	ldr	r2, [sp, #0]
 8006aa8:	bfcc      	ite	gt
 8006aaa:	464d      	movgt	r5, r9
 8006aac:	2501      	movle	r5, #1
 8006aae:	4415      	add	r5, r2
 8006ab0:	f04f 0800 	mov.w	r8, #0
 8006ab4:	4659      	mov	r1, fp
 8006ab6:	2201      	movs	r2, #1
 8006ab8:	4620      	mov	r0, r4
 8006aba:	9301      	str	r3, [sp, #4]
 8006abc:	f000 fe3c 	bl	8007738 <__lshift>
 8006ac0:	4631      	mov	r1, r6
 8006ac2:	4683      	mov	fp, r0
 8006ac4:	f000 fea4 	bl	8007810 <__mcmp>
 8006ac8:	2800      	cmp	r0, #0
 8006aca:	dcb2      	bgt.n	8006a32 <_dtoa_r+0xac2>
 8006acc:	d102      	bne.n	8006ad4 <_dtoa_r+0xb64>
 8006ace:	9b01      	ldr	r3, [sp, #4]
 8006ad0:	07db      	lsls	r3, r3, #31
 8006ad2:	d4ae      	bmi.n	8006a32 <_dtoa_r+0xac2>
 8006ad4:	462b      	mov	r3, r5
 8006ad6:	461d      	mov	r5, r3
 8006ad8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006adc:	2a30      	cmp	r2, #48	; 0x30
 8006ade:	d0fa      	beq.n	8006ad6 <_dtoa_r+0xb66>
 8006ae0:	e6f7      	b.n	80068d2 <_dtoa_r+0x962>
 8006ae2:	9a00      	ldr	r2, [sp, #0]
 8006ae4:	429a      	cmp	r2, r3
 8006ae6:	d1a5      	bne.n	8006a34 <_dtoa_r+0xac4>
 8006ae8:	f10a 0a01 	add.w	sl, sl, #1
 8006aec:	2331      	movs	r3, #49	; 0x31
 8006aee:	e779      	b.n	80069e4 <_dtoa_r+0xa74>
 8006af0:	4b13      	ldr	r3, [pc, #76]	; (8006b40 <_dtoa_r+0xbd0>)
 8006af2:	f7ff baaf 	b.w	8006054 <_dtoa_r+0xe4>
 8006af6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	f47f aa86 	bne.w	800600a <_dtoa_r+0x9a>
 8006afe:	4b11      	ldr	r3, [pc, #68]	; (8006b44 <_dtoa_r+0xbd4>)
 8006b00:	f7ff baa8 	b.w	8006054 <_dtoa_r+0xe4>
 8006b04:	f1b9 0f00 	cmp.w	r9, #0
 8006b08:	dc03      	bgt.n	8006b12 <_dtoa_r+0xba2>
 8006b0a:	9b05      	ldr	r3, [sp, #20]
 8006b0c:	2b02      	cmp	r3, #2
 8006b0e:	f73f aec9 	bgt.w	80068a4 <_dtoa_r+0x934>
 8006b12:	9d00      	ldr	r5, [sp, #0]
 8006b14:	4631      	mov	r1, r6
 8006b16:	4658      	mov	r0, fp
 8006b18:	f7ff f99c 	bl	8005e54 <quorem>
 8006b1c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006b20:	f805 3b01 	strb.w	r3, [r5], #1
 8006b24:	9a00      	ldr	r2, [sp, #0]
 8006b26:	1aaa      	subs	r2, r5, r2
 8006b28:	4591      	cmp	r9, r2
 8006b2a:	ddba      	ble.n	8006aa2 <_dtoa_r+0xb32>
 8006b2c:	4659      	mov	r1, fp
 8006b2e:	2300      	movs	r3, #0
 8006b30:	220a      	movs	r2, #10
 8006b32:	4620      	mov	r0, r4
 8006b34:	f000 fc06 	bl	8007344 <__multadd>
 8006b38:	4683      	mov	fp, r0
 8006b3a:	e7eb      	b.n	8006b14 <_dtoa_r+0xba4>
 8006b3c:	08008e5c 	.word	0x08008e5c
 8006b40:	08008c58 	.word	0x08008c58
 8006b44:	08008dd9 	.word	0x08008dd9

08006b48 <rshift>:
 8006b48:	6903      	ldr	r3, [r0, #16]
 8006b4a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8006b4e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006b52:	ea4f 1261 	mov.w	r2, r1, asr #5
 8006b56:	f100 0414 	add.w	r4, r0, #20
 8006b5a:	dd45      	ble.n	8006be8 <rshift+0xa0>
 8006b5c:	f011 011f 	ands.w	r1, r1, #31
 8006b60:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8006b64:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8006b68:	d10c      	bne.n	8006b84 <rshift+0x3c>
 8006b6a:	f100 0710 	add.w	r7, r0, #16
 8006b6e:	4629      	mov	r1, r5
 8006b70:	42b1      	cmp	r1, r6
 8006b72:	d334      	bcc.n	8006bde <rshift+0x96>
 8006b74:	1a9b      	subs	r3, r3, r2
 8006b76:	009b      	lsls	r3, r3, #2
 8006b78:	1eea      	subs	r2, r5, #3
 8006b7a:	4296      	cmp	r6, r2
 8006b7c:	bf38      	it	cc
 8006b7e:	2300      	movcc	r3, #0
 8006b80:	4423      	add	r3, r4
 8006b82:	e015      	b.n	8006bb0 <rshift+0x68>
 8006b84:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8006b88:	f1c1 0820 	rsb	r8, r1, #32
 8006b8c:	40cf      	lsrs	r7, r1
 8006b8e:	f105 0e04 	add.w	lr, r5, #4
 8006b92:	46a1      	mov	r9, r4
 8006b94:	4576      	cmp	r6, lr
 8006b96:	46f4      	mov	ip, lr
 8006b98:	d815      	bhi.n	8006bc6 <rshift+0x7e>
 8006b9a:	1a9b      	subs	r3, r3, r2
 8006b9c:	009a      	lsls	r2, r3, #2
 8006b9e:	3a04      	subs	r2, #4
 8006ba0:	3501      	adds	r5, #1
 8006ba2:	42ae      	cmp	r6, r5
 8006ba4:	bf38      	it	cc
 8006ba6:	2200      	movcc	r2, #0
 8006ba8:	18a3      	adds	r3, r4, r2
 8006baa:	50a7      	str	r7, [r4, r2]
 8006bac:	b107      	cbz	r7, 8006bb0 <rshift+0x68>
 8006bae:	3304      	adds	r3, #4
 8006bb0:	1b1a      	subs	r2, r3, r4
 8006bb2:	42a3      	cmp	r3, r4
 8006bb4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006bb8:	bf08      	it	eq
 8006bba:	2300      	moveq	r3, #0
 8006bbc:	6102      	str	r2, [r0, #16]
 8006bbe:	bf08      	it	eq
 8006bc0:	6143      	streq	r3, [r0, #20]
 8006bc2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006bc6:	f8dc c000 	ldr.w	ip, [ip]
 8006bca:	fa0c fc08 	lsl.w	ip, ip, r8
 8006bce:	ea4c 0707 	orr.w	r7, ip, r7
 8006bd2:	f849 7b04 	str.w	r7, [r9], #4
 8006bd6:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006bda:	40cf      	lsrs	r7, r1
 8006bdc:	e7da      	b.n	8006b94 <rshift+0x4c>
 8006bde:	f851 cb04 	ldr.w	ip, [r1], #4
 8006be2:	f847 cf04 	str.w	ip, [r7, #4]!
 8006be6:	e7c3      	b.n	8006b70 <rshift+0x28>
 8006be8:	4623      	mov	r3, r4
 8006bea:	e7e1      	b.n	8006bb0 <rshift+0x68>

08006bec <__hexdig_fun>:
 8006bec:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8006bf0:	2b09      	cmp	r3, #9
 8006bf2:	d802      	bhi.n	8006bfa <__hexdig_fun+0xe>
 8006bf4:	3820      	subs	r0, #32
 8006bf6:	b2c0      	uxtb	r0, r0
 8006bf8:	4770      	bx	lr
 8006bfa:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8006bfe:	2b05      	cmp	r3, #5
 8006c00:	d801      	bhi.n	8006c06 <__hexdig_fun+0x1a>
 8006c02:	3847      	subs	r0, #71	; 0x47
 8006c04:	e7f7      	b.n	8006bf6 <__hexdig_fun+0xa>
 8006c06:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8006c0a:	2b05      	cmp	r3, #5
 8006c0c:	d801      	bhi.n	8006c12 <__hexdig_fun+0x26>
 8006c0e:	3827      	subs	r0, #39	; 0x27
 8006c10:	e7f1      	b.n	8006bf6 <__hexdig_fun+0xa>
 8006c12:	2000      	movs	r0, #0
 8006c14:	4770      	bx	lr
	...

08006c18 <__gethex>:
 8006c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c1c:	ed2d 8b02 	vpush	{d8}
 8006c20:	b089      	sub	sp, #36	; 0x24
 8006c22:	ee08 0a10 	vmov	s16, r0
 8006c26:	9304      	str	r3, [sp, #16]
 8006c28:	4bbc      	ldr	r3, [pc, #752]	; (8006f1c <__gethex+0x304>)
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	9301      	str	r3, [sp, #4]
 8006c2e:	4618      	mov	r0, r3
 8006c30:	468b      	mov	fp, r1
 8006c32:	4690      	mov	r8, r2
 8006c34:	f7f9 fadc 	bl	80001f0 <strlen>
 8006c38:	9b01      	ldr	r3, [sp, #4]
 8006c3a:	f8db 2000 	ldr.w	r2, [fp]
 8006c3e:	4403      	add	r3, r0
 8006c40:	4682      	mov	sl, r0
 8006c42:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8006c46:	9305      	str	r3, [sp, #20]
 8006c48:	1c93      	adds	r3, r2, #2
 8006c4a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8006c4e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8006c52:	32fe      	adds	r2, #254	; 0xfe
 8006c54:	18d1      	adds	r1, r2, r3
 8006c56:	461f      	mov	r7, r3
 8006c58:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006c5c:	9100      	str	r1, [sp, #0]
 8006c5e:	2830      	cmp	r0, #48	; 0x30
 8006c60:	d0f8      	beq.n	8006c54 <__gethex+0x3c>
 8006c62:	f7ff ffc3 	bl	8006bec <__hexdig_fun>
 8006c66:	4604      	mov	r4, r0
 8006c68:	2800      	cmp	r0, #0
 8006c6a:	d13a      	bne.n	8006ce2 <__gethex+0xca>
 8006c6c:	9901      	ldr	r1, [sp, #4]
 8006c6e:	4652      	mov	r2, sl
 8006c70:	4638      	mov	r0, r7
 8006c72:	f001 f9ed 	bl	8008050 <strncmp>
 8006c76:	4605      	mov	r5, r0
 8006c78:	2800      	cmp	r0, #0
 8006c7a:	d168      	bne.n	8006d4e <__gethex+0x136>
 8006c7c:	f817 000a 	ldrb.w	r0, [r7, sl]
 8006c80:	eb07 060a 	add.w	r6, r7, sl
 8006c84:	f7ff ffb2 	bl	8006bec <__hexdig_fun>
 8006c88:	2800      	cmp	r0, #0
 8006c8a:	d062      	beq.n	8006d52 <__gethex+0x13a>
 8006c8c:	4633      	mov	r3, r6
 8006c8e:	7818      	ldrb	r0, [r3, #0]
 8006c90:	2830      	cmp	r0, #48	; 0x30
 8006c92:	461f      	mov	r7, r3
 8006c94:	f103 0301 	add.w	r3, r3, #1
 8006c98:	d0f9      	beq.n	8006c8e <__gethex+0x76>
 8006c9a:	f7ff ffa7 	bl	8006bec <__hexdig_fun>
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	fab0 f480 	clz	r4, r0
 8006ca4:	0964      	lsrs	r4, r4, #5
 8006ca6:	4635      	mov	r5, r6
 8006ca8:	9300      	str	r3, [sp, #0]
 8006caa:	463a      	mov	r2, r7
 8006cac:	4616      	mov	r6, r2
 8006cae:	3201      	adds	r2, #1
 8006cb0:	7830      	ldrb	r0, [r6, #0]
 8006cb2:	f7ff ff9b 	bl	8006bec <__hexdig_fun>
 8006cb6:	2800      	cmp	r0, #0
 8006cb8:	d1f8      	bne.n	8006cac <__gethex+0x94>
 8006cba:	9901      	ldr	r1, [sp, #4]
 8006cbc:	4652      	mov	r2, sl
 8006cbe:	4630      	mov	r0, r6
 8006cc0:	f001 f9c6 	bl	8008050 <strncmp>
 8006cc4:	b980      	cbnz	r0, 8006ce8 <__gethex+0xd0>
 8006cc6:	b94d      	cbnz	r5, 8006cdc <__gethex+0xc4>
 8006cc8:	eb06 050a 	add.w	r5, r6, sl
 8006ccc:	462a      	mov	r2, r5
 8006cce:	4616      	mov	r6, r2
 8006cd0:	3201      	adds	r2, #1
 8006cd2:	7830      	ldrb	r0, [r6, #0]
 8006cd4:	f7ff ff8a 	bl	8006bec <__hexdig_fun>
 8006cd8:	2800      	cmp	r0, #0
 8006cda:	d1f8      	bne.n	8006cce <__gethex+0xb6>
 8006cdc:	1bad      	subs	r5, r5, r6
 8006cde:	00ad      	lsls	r5, r5, #2
 8006ce0:	e004      	b.n	8006cec <__gethex+0xd4>
 8006ce2:	2400      	movs	r4, #0
 8006ce4:	4625      	mov	r5, r4
 8006ce6:	e7e0      	b.n	8006caa <__gethex+0x92>
 8006ce8:	2d00      	cmp	r5, #0
 8006cea:	d1f7      	bne.n	8006cdc <__gethex+0xc4>
 8006cec:	7833      	ldrb	r3, [r6, #0]
 8006cee:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006cf2:	2b50      	cmp	r3, #80	; 0x50
 8006cf4:	d13b      	bne.n	8006d6e <__gethex+0x156>
 8006cf6:	7873      	ldrb	r3, [r6, #1]
 8006cf8:	2b2b      	cmp	r3, #43	; 0x2b
 8006cfa:	d02c      	beq.n	8006d56 <__gethex+0x13e>
 8006cfc:	2b2d      	cmp	r3, #45	; 0x2d
 8006cfe:	d02e      	beq.n	8006d5e <__gethex+0x146>
 8006d00:	1c71      	adds	r1, r6, #1
 8006d02:	f04f 0900 	mov.w	r9, #0
 8006d06:	7808      	ldrb	r0, [r1, #0]
 8006d08:	f7ff ff70 	bl	8006bec <__hexdig_fun>
 8006d0c:	1e43      	subs	r3, r0, #1
 8006d0e:	b2db      	uxtb	r3, r3
 8006d10:	2b18      	cmp	r3, #24
 8006d12:	d82c      	bhi.n	8006d6e <__gethex+0x156>
 8006d14:	f1a0 0210 	sub.w	r2, r0, #16
 8006d18:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006d1c:	f7ff ff66 	bl	8006bec <__hexdig_fun>
 8006d20:	1e43      	subs	r3, r0, #1
 8006d22:	b2db      	uxtb	r3, r3
 8006d24:	2b18      	cmp	r3, #24
 8006d26:	d91d      	bls.n	8006d64 <__gethex+0x14c>
 8006d28:	f1b9 0f00 	cmp.w	r9, #0
 8006d2c:	d000      	beq.n	8006d30 <__gethex+0x118>
 8006d2e:	4252      	negs	r2, r2
 8006d30:	4415      	add	r5, r2
 8006d32:	f8cb 1000 	str.w	r1, [fp]
 8006d36:	b1e4      	cbz	r4, 8006d72 <__gethex+0x15a>
 8006d38:	9b00      	ldr	r3, [sp, #0]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	bf14      	ite	ne
 8006d3e:	2700      	movne	r7, #0
 8006d40:	2706      	moveq	r7, #6
 8006d42:	4638      	mov	r0, r7
 8006d44:	b009      	add	sp, #36	; 0x24
 8006d46:	ecbd 8b02 	vpop	{d8}
 8006d4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d4e:	463e      	mov	r6, r7
 8006d50:	4625      	mov	r5, r4
 8006d52:	2401      	movs	r4, #1
 8006d54:	e7ca      	b.n	8006cec <__gethex+0xd4>
 8006d56:	f04f 0900 	mov.w	r9, #0
 8006d5a:	1cb1      	adds	r1, r6, #2
 8006d5c:	e7d3      	b.n	8006d06 <__gethex+0xee>
 8006d5e:	f04f 0901 	mov.w	r9, #1
 8006d62:	e7fa      	b.n	8006d5a <__gethex+0x142>
 8006d64:	230a      	movs	r3, #10
 8006d66:	fb03 0202 	mla	r2, r3, r2, r0
 8006d6a:	3a10      	subs	r2, #16
 8006d6c:	e7d4      	b.n	8006d18 <__gethex+0x100>
 8006d6e:	4631      	mov	r1, r6
 8006d70:	e7df      	b.n	8006d32 <__gethex+0x11a>
 8006d72:	1bf3      	subs	r3, r6, r7
 8006d74:	3b01      	subs	r3, #1
 8006d76:	4621      	mov	r1, r4
 8006d78:	2b07      	cmp	r3, #7
 8006d7a:	dc0b      	bgt.n	8006d94 <__gethex+0x17c>
 8006d7c:	ee18 0a10 	vmov	r0, s16
 8006d80:	f000 fa7e 	bl	8007280 <_Balloc>
 8006d84:	4604      	mov	r4, r0
 8006d86:	b940      	cbnz	r0, 8006d9a <__gethex+0x182>
 8006d88:	4b65      	ldr	r3, [pc, #404]	; (8006f20 <__gethex+0x308>)
 8006d8a:	4602      	mov	r2, r0
 8006d8c:	21de      	movs	r1, #222	; 0xde
 8006d8e:	4865      	ldr	r0, [pc, #404]	; (8006f24 <__gethex+0x30c>)
 8006d90:	f001 f97e 	bl	8008090 <__assert_func>
 8006d94:	3101      	adds	r1, #1
 8006d96:	105b      	asrs	r3, r3, #1
 8006d98:	e7ee      	b.n	8006d78 <__gethex+0x160>
 8006d9a:	f100 0914 	add.w	r9, r0, #20
 8006d9e:	f04f 0b00 	mov.w	fp, #0
 8006da2:	f1ca 0301 	rsb	r3, sl, #1
 8006da6:	f8cd 9008 	str.w	r9, [sp, #8]
 8006daa:	f8cd b000 	str.w	fp, [sp]
 8006dae:	9306      	str	r3, [sp, #24]
 8006db0:	42b7      	cmp	r7, r6
 8006db2:	d340      	bcc.n	8006e36 <__gethex+0x21e>
 8006db4:	9802      	ldr	r0, [sp, #8]
 8006db6:	9b00      	ldr	r3, [sp, #0]
 8006db8:	f840 3b04 	str.w	r3, [r0], #4
 8006dbc:	eba0 0009 	sub.w	r0, r0, r9
 8006dc0:	1080      	asrs	r0, r0, #2
 8006dc2:	0146      	lsls	r6, r0, #5
 8006dc4:	6120      	str	r0, [r4, #16]
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	f000 fb50 	bl	800746c <__hi0bits>
 8006dcc:	1a30      	subs	r0, r6, r0
 8006dce:	f8d8 6000 	ldr.w	r6, [r8]
 8006dd2:	42b0      	cmp	r0, r6
 8006dd4:	dd63      	ble.n	8006e9e <__gethex+0x286>
 8006dd6:	1b87      	subs	r7, r0, r6
 8006dd8:	4639      	mov	r1, r7
 8006dda:	4620      	mov	r0, r4
 8006ddc:	f000 feea 	bl	8007bb4 <__any_on>
 8006de0:	4682      	mov	sl, r0
 8006de2:	b1a8      	cbz	r0, 8006e10 <__gethex+0x1f8>
 8006de4:	1e7b      	subs	r3, r7, #1
 8006de6:	1159      	asrs	r1, r3, #5
 8006de8:	f003 021f 	and.w	r2, r3, #31
 8006dec:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8006df0:	f04f 0a01 	mov.w	sl, #1
 8006df4:	fa0a f202 	lsl.w	r2, sl, r2
 8006df8:	420a      	tst	r2, r1
 8006dfa:	d009      	beq.n	8006e10 <__gethex+0x1f8>
 8006dfc:	4553      	cmp	r3, sl
 8006dfe:	dd05      	ble.n	8006e0c <__gethex+0x1f4>
 8006e00:	1eb9      	subs	r1, r7, #2
 8006e02:	4620      	mov	r0, r4
 8006e04:	f000 fed6 	bl	8007bb4 <__any_on>
 8006e08:	2800      	cmp	r0, #0
 8006e0a:	d145      	bne.n	8006e98 <__gethex+0x280>
 8006e0c:	f04f 0a02 	mov.w	sl, #2
 8006e10:	4639      	mov	r1, r7
 8006e12:	4620      	mov	r0, r4
 8006e14:	f7ff fe98 	bl	8006b48 <rshift>
 8006e18:	443d      	add	r5, r7
 8006e1a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006e1e:	42ab      	cmp	r3, r5
 8006e20:	da4c      	bge.n	8006ebc <__gethex+0x2a4>
 8006e22:	ee18 0a10 	vmov	r0, s16
 8006e26:	4621      	mov	r1, r4
 8006e28:	f000 fa6a 	bl	8007300 <_Bfree>
 8006e2c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006e2e:	2300      	movs	r3, #0
 8006e30:	6013      	str	r3, [r2, #0]
 8006e32:	27a3      	movs	r7, #163	; 0xa3
 8006e34:	e785      	b.n	8006d42 <__gethex+0x12a>
 8006e36:	1e73      	subs	r3, r6, #1
 8006e38:	9a05      	ldr	r2, [sp, #20]
 8006e3a:	9303      	str	r3, [sp, #12]
 8006e3c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d019      	beq.n	8006e78 <__gethex+0x260>
 8006e44:	f1bb 0f20 	cmp.w	fp, #32
 8006e48:	d107      	bne.n	8006e5a <__gethex+0x242>
 8006e4a:	9b02      	ldr	r3, [sp, #8]
 8006e4c:	9a00      	ldr	r2, [sp, #0]
 8006e4e:	f843 2b04 	str.w	r2, [r3], #4
 8006e52:	9302      	str	r3, [sp, #8]
 8006e54:	2300      	movs	r3, #0
 8006e56:	9300      	str	r3, [sp, #0]
 8006e58:	469b      	mov	fp, r3
 8006e5a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8006e5e:	f7ff fec5 	bl	8006bec <__hexdig_fun>
 8006e62:	9b00      	ldr	r3, [sp, #0]
 8006e64:	f000 000f 	and.w	r0, r0, #15
 8006e68:	fa00 f00b 	lsl.w	r0, r0, fp
 8006e6c:	4303      	orrs	r3, r0
 8006e6e:	9300      	str	r3, [sp, #0]
 8006e70:	f10b 0b04 	add.w	fp, fp, #4
 8006e74:	9b03      	ldr	r3, [sp, #12]
 8006e76:	e00d      	b.n	8006e94 <__gethex+0x27c>
 8006e78:	9b03      	ldr	r3, [sp, #12]
 8006e7a:	9a06      	ldr	r2, [sp, #24]
 8006e7c:	4413      	add	r3, r2
 8006e7e:	42bb      	cmp	r3, r7
 8006e80:	d3e0      	bcc.n	8006e44 <__gethex+0x22c>
 8006e82:	4618      	mov	r0, r3
 8006e84:	9901      	ldr	r1, [sp, #4]
 8006e86:	9307      	str	r3, [sp, #28]
 8006e88:	4652      	mov	r2, sl
 8006e8a:	f001 f8e1 	bl	8008050 <strncmp>
 8006e8e:	9b07      	ldr	r3, [sp, #28]
 8006e90:	2800      	cmp	r0, #0
 8006e92:	d1d7      	bne.n	8006e44 <__gethex+0x22c>
 8006e94:	461e      	mov	r6, r3
 8006e96:	e78b      	b.n	8006db0 <__gethex+0x198>
 8006e98:	f04f 0a03 	mov.w	sl, #3
 8006e9c:	e7b8      	b.n	8006e10 <__gethex+0x1f8>
 8006e9e:	da0a      	bge.n	8006eb6 <__gethex+0x29e>
 8006ea0:	1a37      	subs	r7, r6, r0
 8006ea2:	4621      	mov	r1, r4
 8006ea4:	ee18 0a10 	vmov	r0, s16
 8006ea8:	463a      	mov	r2, r7
 8006eaa:	f000 fc45 	bl	8007738 <__lshift>
 8006eae:	1bed      	subs	r5, r5, r7
 8006eb0:	4604      	mov	r4, r0
 8006eb2:	f100 0914 	add.w	r9, r0, #20
 8006eb6:	f04f 0a00 	mov.w	sl, #0
 8006eba:	e7ae      	b.n	8006e1a <__gethex+0x202>
 8006ebc:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8006ec0:	42a8      	cmp	r0, r5
 8006ec2:	dd72      	ble.n	8006faa <__gethex+0x392>
 8006ec4:	1b45      	subs	r5, r0, r5
 8006ec6:	42ae      	cmp	r6, r5
 8006ec8:	dc36      	bgt.n	8006f38 <__gethex+0x320>
 8006eca:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006ece:	2b02      	cmp	r3, #2
 8006ed0:	d02a      	beq.n	8006f28 <__gethex+0x310>
 8006ed2:	2b03      	cmp	r3, #3
 8006ed4:	d02c      	beq.n	8006f30 <__gethex+0x318>
 8006ed6:	2b01      	cmp	r3, #1
 8006ed8:	d115      	bne.n	8006f06 <__gethex+0x2ee>
 8006eda:	42ae      	cmp	r6, r5
 8006edc:	d113      	bne.n	8006f06 <__gethex+0x2ee>
 8006ede:	2e01      	cmp	r6, #1
 8006ee0:	d10b      	bne.n	8006efa <__gethex+0x2e2>
 8006ee2:	9a04      	ldr	r2, [sp, #16]
 8006ee4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006ee8:	6013      	str	r3, [r2, #0]
 8006eea:	2301      	movs	r3, #1
 8006eec:	6123      	str	r3, [r4, #16]
 8006eee:	f8c9 3000 	str.w	r3, [r9]
 8006ef2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006ef4:	2762      	movs	r7, #98	; 0x62
 8006ef6:	601c      	str	r4, [r3, #0]
 8006ef8:	e723      	b.n	8006d42 <__gethex+0x12a>
 8006efa:	1e71      	subs	r1, r6, #1
 8006efc:	4620      	mov	r0, r4
 8006efe:	f000 fe59 	bl	8007bb4 <__any_on>
 8006f02:	2800      	cmp	r0, #0
 8006f04:	d1ed      	bne.n	8006ee2 <__gethex+0x2ca>
 8006f06:	ee18 0a10 	vmov	r0, s16
 8006f0a:	4621      	mov	r1, r4
 8006f0c:	f000 f9f8 	bl	8007300 <_Bfree>
 8006f10:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006f12:	2300      	movs	r3, #0
 8006f14:	6013      	str	r3, [r2, #0]
 8006f16:	2750      	movs	r7, #80	; 0x50
 8006f18:	e713      	b.n	8006d42 <__gethex+0x12a>
 8006f1a:	bf00      	nop
 8006f1c:	08008ed8 	.word	0x08008ed8
 8006f20:	08008e5c 	.word	0x08008e5c
 8006f24:	08008e6d 	.word	0x08008e6d
 8006f28:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d1eb      	bne.n	8006f06 <__gethex+0x2ee>
 8006f2e:	e7d8      	b.n	8006ee2 <__gethex+0x2ca>
 8006f30:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d1d5      	bne.n	8006ee2 <__gethex+0x2ca>
 8006f36:	e7e6      	b.n	8006f06 <__gethex+0x2ee>
 8006f38:	1e6f      	subs	r7, r5, #1
 8006f3a:	f1ba 0f00 	cmp.w	sl, #0
 8006f3e:	d131      	bne.n	8006fa4 <__gethex+0x38c>
 8006f40:	b127      	cbz	r7, 8006f4c <__gethex+0x334>
 8006f42:	4639      	mov	r1, r7
 8006f44:	4620      	mov	r0, r4
 8006f46:	f000 fe35 	bl	8007bb4 <__any_on>
 8006f4a:	4682      	mov	sl, r0
 8006f4c:	117b      	asrs	r3, r7, #5
 8006f4e:	2101      	movs	r1, #1
 8006f50:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8006f54:	f007 071f 	and.w	r7, r7, #31
 8006f58:	fa01 f707 	lsl.w	r7, r1, r7
 8006f5c:	421f      	tst	r7, r3
 8006f5e:	4629      	mov	r1, r5
 8006f60:	4620      	mov	r0, r4
 8006f62:	bf18      	it	ne
 8006f64:	f04a 0a02 	orrne.w	sl, sl, #2
 8006f68:	1b76      	subs	r6, r6, r5
 8006f6a:	f7ff fded 	bl	8006b48 <rshift>
 8006f6e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8006f72:	2702      	movs	r7, #2
 8006f74:	f1ba 0f00 	cmp.w	sl, #0
 8006f78:	d048      	beq.n	800700c <__gethex+0x3f4>
 8006f7a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006f7e:	2b02      	cmp	r3, #2
 8006f80:	d015      	beq.n	8006fae <__gethex+0x396>
 8006f82:	2b03      	cmp	r3, #3
 8006f84:	d017      	beq.n	8006fb6 <__gethex+0x39e>
 8006f86:	2b01      	cmp	r3, #1
 8006f88:	d109      	bne.n	8006f9e <__gethex+0x386>
 8006f8a:	f01a 0f02 	tst.w	sl, #2
 8006f8e:	d006      	beq.n	8006f9e <__gethex+0x386>
 8006f90:	f8d9 0000 	ldr.w	r0, [r9]
 8006f94:	ea4a 0a00 	orr.w	sl, sl, r0
 8006f98:	f01a 0f01 	tst.w	sl, #1
 8006f9c:	d10e      	bne.n	8006fbc <__gethex+0x3a4>
 8006f9e:	f047 0710 	orr.w	r7, r7, #16
 8006fa2:	e033      	b.n	800700c <__gethex+0x3f4>
 8006fa4:	f04f 0a01 	mov.w	sl, #1
 8006fa8:	e7d0      	b.n	8006f4c <__gethex+0x334>
 8006faa:	2701      	movs	r7, #1
 8006fac:	e7e2      	b.n	8006f74 <__gethex+0x35c>
 8006fae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006fb0:	f1c3 0301 	rsb	r3, r3, #1
 8006fb4:	9315      	str	r3, [sp, #84]	; 0x54
 8006fb6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d0f0      	beq.n	8006f9e <__gethex+0x386>
 8006fbc:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8006fc0:	f104 0314 	add.w	r3, r4, #20
 8006fc4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8006fc8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8006fcc:	f04f 0c00 	mov.w	ip, #0
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	f853 2b04 	ldr.w	r2, [r3], #4
 8006fd6:	f1b2 3fff 	cmp.w	r2, #4294967295
 8006fda:	d01c      	beq.n	8007016 <__gethex+0x3fe>
 8006fdc:	3201      	adds	r2, #1
 8006fde:	6002      	str	r2, [r0, #0]
 8006fe0:	2f02      	cmp	r7, #2
 8006fe2:	f104 0314 	add.w	r3, r4, #20
 8006fe6:	d13f      	bne.n	8007068 <__gethex+0x450>
 8006fe8:	f8d8 2000 	ldr.w	r2, [r8]
 8006fec:	3a01      	subs	r2, #1
 8006fee:	42b2      	cmp	r2, r6
 8006ff0:	d10a      	bne.n	8007008 <__gethex+0x3f0>
 8006ff2:	1171      	asrs	r1, r6, #5
 8006ff4:	2201      	movs	r2, #1
 8006ff6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006ffa:	f006 061f 	and.w	r6, r6, #31
 8006ffe:	fa02 f606 	lsl.w	r6, r2, r6
 8007002:	421e      	tst	r6, r3
 8007004:	bf18      	it	ne
 8007006:	4617      	movne	r7, r2
 8007008:	f047 0720 	orr.w	r7, r7, #32
 800700c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800700e:	601c      	str	r4, [r3, #0]
 8007010:	9b04      	ldr	r3, [sp, #16]
 8007012:	601d      	str	r5, [r3, #0]
 8007014:	e695      	b.n	8006d42 <__gethex+0x12a>
 8007016:	4299      	cmp	r1, r3
 8007018:	f843 cc04 	str.w	ip, [r3, #-4]
 800701c:	d8d8      	bhi.n	8006fd0 <__gethex+0x3b8>
 800701e:	68a3      	ldr	r3, [r4, #8]
 8007020:	459b      	cmp	fp, r3
 8007022:	db19      	blt.n	8007058 <__gethex+0x440>
 8007024:	6861      	ldr	r1, [r4, #4]
 8007026:	ee18 0a10 	vmov	r0, s16
 800702a:	3101      	adds	r1, #1
 800702c:	f000 f928 	bl	8007280 <_Balloc>
 8007030:	4681      	mov	r9, r0
 8007032:	b918      	cbnz	r0, 800703c <__gethex+0x424>
 8007034:	4b1a      	ldr	r3, [pc, #104]	; (80070a0 <__gethex+0x488>)
 8007036:	4602      	mov	r2, r0
 8007038:	2184      	movs	r1, #132	; 0x84
 800703a:	e6a8      	b.n	8006d8e <__gethex+0x176>
 800703c:	6922      	ldr	r2, [r4, #16]
 800703e:	3202      	adds	r2, #2
 8007040:	f104 010c 	add.w	r1, r4, #12
 8007044:	0092      	lsls	r2, r2, #2
 8007046:	300c      	adds	r0, #12
 8007048:	f000 f90c 	bl	8007264 <memcpy>
 800704c:	4621      	mov	r1, r4
 800704e:	ee18 0a10 	vmov	r0, s16
 8007052:	f000 f955 	bl	8007300 <_Bfree>
 8007056:	464c      	mov	r4, r9
 8007058:	6923      	ldr	r3, [r4, #16]
 800705a:	1c5a      	adds	r2, r3, #1
 800705c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007060:	6122      	str	r2, [r4, #16]
 8007062:	2201      	movs	r2, #1
 8007064:	615a      	str	r2, [r3, #20]
 8007066:	e7bb      	b.n	8006fe0 <__gethex+0x3c8>
 8007068:	6922      	ldr	r2, [r4, #16]
 800706a:	455a      	cmp	r2, fp
 800706c:	dd0b      	ble.n	8007086 <__gethex+0x46e>
 800706e:	2101      	movs	r1, #1
 8007070:	4620      	mov	r0, r4
 8007072:	f7ff fd69 	bl	8006b48 <rshift>
 8007076:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800707a:	3501      	adds	r5, #1
 800707c:	42ab      	cmp	r3, r5
 800707e:	f6ff aed0 	blt.w	8006e22 <__gethex+0x20a>
 8007082:	2701      	movs	r7, #1
 8007084:	e7c0      	b.n	8007008 <__gethex+0x3f0>
 8007086:	f016 061f 	ands.w	r6, r6, #31
 800708a:	d0fa      	beq.n	8007082 <__gethex+0x46a>
 800708c:	449a      	add	sl, r3
 800708e:	f1c6 0620 	rsb	r6, r6, #32
 8007092:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8007096:	f000 f9e9 	bl	800746c <__hi0bits>
 800709a:	42b0      	cmp	r0, r6
 800709c:	dbe7      	blt.n	800706e <__gethex+0x456>
 800709e:	e7f0      	b.n	8007082 <__gethex+0x46a>
 80070a0:	08008e5c 	.word	0x08008e5c

080070a4 <L_shift>:
 80070a4:	f1c2 0208 	rsb	r2, r2, #8
 80070a8:	0092      	lsls	r2, r2, #2
 80070aa:	b570      	push	{r4, r5, r6, lr}
 80070ac:	f1c2 0620 	rsb	r6, r2, #32
 80070b0:	6843      	ldr	r3, [r0, #4]
 80070b2:	6804      	ldr	r4, [r0, #0]
 80070b4:	fa03 f506 	lsl.w	r5, r3, r6
 80070b8:	432c      	orrs	r4, r5
 80070ba:	40d3      	lsrs	r3, r2
 80070bc:	6004      	str	r4, [r0, #0]
 80070be:	f840 3f04 	str.w	r3, [r0, #4]!
 80070c2:	4288      	cmp	r0, r1
 80070c4:	d3f4      	bcc.n	80070b0 <L_shift+0xc>
 80070c6:	bd70      	pop	{r4, r5, r6, pc}

080070c8 <__match>:
 80070c8:	b530      	push	{r4, r5, lr}
 80070ca:	6803      	ldr	r3, [r0, #0]
 80070cc:	3301      	adds	r3, #1
 80070ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80070d2:	b914      	cbnz	r4, 80070da <__match+0x12>
 80070d4:	6003      	str	r3, [r0, #0]
 80070d6:	2001      	movs	r0, #1
 80070d8:	bd30      	pop	{r4, r5, pc}
 80070da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80070de:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80070e2:	2d19      	cmp	r5, #25
 80070e4:	bf98      	it	ls
 80070e6:	3220      	addls	r2, #32
 80070e8:	42a2      	cmp	r2, r4
 80070ea:	d0f0      	beq.n	80070ce <__match+0x6>
 80070ec:	2000      	movs	r0, #0
 80070ee:	e7f3      	b.n	80070d8 <__match+0x10>

080070f0 <__hexnan>:
 80070f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070f4:	680b      	ldr	r3, [r1, #0]
 80070f6:	6801      	ldr	r1, [r0, #0]
 80070f8:	115e      	asrs	r6, r3, #5
 80070fa:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80070fe:	f013 031f 	ands.w	r3, r3, #31
 8007102:	b087      	sub	sp, #28
 8007104:	bf18      	it	ne
 8007106:	3604      	addne	r6, #4
 8007108:	2500      	movs	r5, #0
 800710a:	1f37      	subs	r7, r6, #4
 800710c:	4682      	mov	sl, r0
 800710e:	4690      	mov	r8, r2
 8007110:	9301      	str	r3, [sp, #4]
 8007112:	f846 5c04 	str.w	r5, [r6, #-4]
 8007116:	46b9      	mov	r9, r7
 8007118:	463c      	mov	r4, r7
 800711a:	9502      	str	r5, [sp, #8]
 800711c:	46ab      	mov	fp, r5
 800711e:	784a      	ldrb	r2, [r1, #1]
 8007120:	1c4b      	adds	r3, r1, #1
 8007122:	9303      	str	r3, [sp, #12]
 8007124:	b342      	cbz	r2, 8007178 <__hexnan+0x88>
 8007126:	4610      	mov	r0, r2
 8007128:	9105      	str	r1, [sp, #20]
 800712a:	9204      	str	r2, [sp, #16]
 800712c:	f7ff fd5e 	bl	8006bec <__hexdig_fun>
 8007130:	2800      	cmp	r0, #0
 8007132:	d14f      	bne.n	80071d4 <__hexnan+0xe4>
 8007134:	9a04      	ldr	r2, [sp, #16]
 8007136:	9905      	ldr	r1, [sp, #20]
 8007138:	2a20      	cmp	r2, #32
 800713a:	d818      	bhi.n	800716e <__hexnan+0x7e>
 800713c:	9b02      	ldr	r3, [sp, #8]
 800713e:	459b      	cmp	fp, r3
 8007140:	dd13      	ble.n	800716a <__hexnan+0x7a>
 8007142:	454c      	cmp	r4, r9
 8007144:	d206      	bcs.n	8007154 <__hexnan+0x64>
 8007146:	2d07      	cmp	r5, #7
 8007148:	dc04      	bgt.n	8007154 <__hexnan+0x64>
 800714a:	462a      	mov	r2, r5
 800714c:	4649      	mov	r1, r9
 800714e:	4620      	mov	r0, r4
 8007150:	f7ff ffa8 	bl	80070a4 <L_shift>
 8007154:	4544      	cmp	r4, r8
 8007156:	d950      	bls.n	80071fa <__hexnan+0x10a>
 8007158:	2300      	movs	r3, #0
 800715a:	f1a4 0904 	sub.w	r9, r4, #4
 800715e:	f844 3c04 	str.w	r3, [r4, #-4]
 8007162:	f8cd b008 	str.w	fp, [sp, #8]
 8007166:	464c      	mov	r4, r9
 8007168:	461d      	mov	r5, r3
 800716a:	9903      	ldr	r1, [sp, #12]
 800716c:	e7d7      	b.n	800711e <__hexnan+0x2e>
 800716e:	2a29      	cmp	r2, #41	; 0x29
 8007170:	d156      	bne.n	8007220 <__hexnan+0x130>
 8007172:	3102      	adds	r1, #2
 8007174:	f8ca 1000 	str.w	r1, [sl]
 8007178:	f1bb 0f00 	cmp.w	fp, #0
 800717c:	d050      	beq.n	8007220 <__hexnan+0x130>
 800717e:	454c      	cmp	r4, r9
 8007180:	d206      	bcs.n	8007190 <__hexnan+0xa0>
 8007182:	2d07      	cmp	r5, #7
 8007184:	dc04      	bgt.n	8007190 <__hexnan+0xa0>
 8007186:	462a      	mov	r2, r5
 8007188:	4649      	mov	r1, r9
 800718a:	4620      	mov	r0, r4
 800718c:	f7ff ff8a 	bl	80070a4 <L_shift>
 8007190:	4544      	cmp	r4, r8
 8007192:	d934      	bls.n	80071fe <__hexnan+0x10e>
 8007194:	f1a8 0204 	sub.w	r2, r8, #4
 8007198:	4623      	mov	r3, r4
 800719a:	f853 1b04 	ldr.w	r1, [r3], #4
 800719e:	f842 1f04 	str.w	r1, [r2, #4]!
 80071a2:	429f      	cmp	r7, r3
 80071a4:	d2f9      	bcs.n	800719a <__hexnan+0xaa>
 80071a6:	1b3b      	subs	r3, r7, r4
 80071a8:	f023 0303 	bic.w	r3, r3, #3
 80071ac:	3304      	adds	r3, #4
 80071ae:	3401      	adds	r4, #1
 80071b0:	3e03      	subs	r6, #3
 80071b2:	42b4      	cmp	r4, r6
 80071b4:	bf88      	it	hi
 80071b6:	2304      	movhi	r3, #4
 80071b8:	4443      	add	r3, r8
 80071ba:	2200      	movs	r2, #0
 80071bc:	f843 2b04 	str.w	r2, [r3], #4
 80071c0:	429f      	cmp	r7, r3
 80071c2:	d2fb      	bcs.n	80071bc <__hexnan+0xcc>
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	b91b      	cbnz	r3, 80071d0 <__hexnan+0xe0>
 80071c8:	4547      	cmp	r7, r8
 80071ca:	d127      	bne.n	800721c <__hexnan+0x12c>
 80071cc:	2301      	movs	r3, #1
 80071ce:	603b      	str	r3, [r7, #0]
 80071d0:	2005      	movs	r0, #5
 80071d2:	e026      	b.n	8007222 <__hexnan+0x132>
 80071d4:	3501      	adds	r5, #1
 80071d6:	2d08      	cmp	r5, #8
 80071d8:	f10b 0b01 	add.w	fp, fp, #1
 80071dc:	dd06      	ble.n	80071ec <__hexnan+0xfc>
 80071de:	4544      	cmp	r4, r8
 80071e0:	d9c3      	bls.n	800716a <__hexnan+0x7a>
 80071e2:	2300      	movs	r3, #0
 80071e4:	f844 3c04 	str.w	r3, [r4, #-4]
 80071e8:	2501      	movs	r5, #1
 80071ea:	3c04      	subs	r4, #4
 80071ec:	6822      	ldr	r2, [r4, #0]
 80071ee:	f000 000f 	and.w	r0, r0, #15
 80071f2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80071f6:	6022      	str	r2, [r4, #0]
 80071f8:	e7b7      	b.n	800716a <__hexnan+0x7a>
 80071fa:	2508      	movs	r5, #8
 80071fc:	e7b5      	b.n	800716a <__hexnan+0x7a>
 80071fe:	9b01      	ldr	r3, [sp, #4]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d0df      	beq.n	80071c4 <__hexnan+0xd4>
 8007204:	f04f 32ff 	mov.w	r2, #4294967295
 8007208:	f1c3 0320 	rsb	r3, r3, #32
 800720c:	fa22 f303 	lsr.w	r3, r2, r3
 8007210:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007214:	401a      	ands	r2, r3
 8007216:	f846 2c04 	str.w	r2, [r6, #-4]
 800721a:	e7d3      	b.n	80071c4 <__hexnan+0xd4>
 800721c:	3f04      	subs	r7, #4
 800721e:	e7d1      	b.n	80071c4 <__hexnan+0xd4>
 8007220:	2004      	movs	r0, #4
 8007222:	b007      	add	sp, #28
 8007224:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007228 <_localeconv_r>:
 8007228:	4800      	ldr	r0, [pc, #0]	; (800722c <_localeconv_r+0x4>)
 800722a:	4770      	bx	lr
 800722c:	20000164 	.word	0x20000164

08007230 <malloc>:
 8007230:	4b02      	ldr	r3, [pc, #8]	; (800723c <malloc+0xc>)
 8007232:	4601      	mov	r1, r0
 8007234:	6818      	ldr	r0, [r3, #0]
 8007236:	f000 bd3d 	b.w	8007cb4 <_malloc_r>
 800723a:	bf00      	nop
 800723c:	2000000c 	.word	0x2000000c

08007240 <__ascii_mbtowc>:
 8007240:	b082      	sub	sp, #8
 8007242:	b901      	cbnz	r1, 8007246 <__ascii_mbtowc+0x6>
 8007244:	a901      	add	r1, sp, #4
 8007246:	b142      	cbz	r2, 800725a <__ascii_mbtowc+0x1a>
 8007248:	b14b      	cbz	r3, 800725e <__ascii_mbtowc+0x1e>
 800724a:	7813      	ldrb	r3, [r2, #0]
 800724c:	600b      	str	r3, [r1, #0]
 800724e:	7812      	ldrb	r2, [r2, #0]
 8007250:	1e10      	subs	r0, r2, #0
 8007252:	bf18      	it	ne
 8007254:	2001      	movne	r0, #1
 8007256:	b002      	add	sp, #8
 8007258:	4770      	bx	lr
 800725a:	4610      	mov	r0, r2
 800725c:	e7fb      	b.n	8007256 <__ascii_mbtowc+0x16>
 800725e:	f06f 0001 	mvn.w	r0, #1
 8007262:	e7f8      	b.n	8007256 <__ascii_mbtowc+0x16>

08007264 <memcpy>:
 8007264:	440a      	add	r2, r1
 8007266:	4291      	cmp	r1, r2
 8007268:	f100 33ff 	add.w	r3, r0, #4294967295
 800726c:	d100      	bne.n	8007270 <memcpy+0xc>
 800726e:	4770      	bx	lr
 8007270:	b510      	push	{r4, lr}
 8007272:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007276:	f803 4f01 	strb.w	r4, [r3, #1]!
 800727a:	4291      	cmp	r1, r2
 800727c:	d1f9      	bne.n	8007272 <memcpy+0xe>
 800727e:	bd10      	pop	{r4, pc}

08007280 <_Balloc>:
 8007280:	b570      	push	{r4, r5, r6, lr}
 8007282:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007284:	4604      	mov	r4, r0
 8007286:	460d      	mov	r5, r1
 8007288:	b976      	cbnz	r6, 80072a8 <_Balloc+0x28>
 800728a:	2010      	movs	r0, #16
 800728c:	f7ff ffd0 	bl	8007230 <malloc>
 8007290:	4602      	mov	r2, r0
 8007292:	6260      	str	r0, [r4, #36]	; 0x24
 8007294:	b920      	cbnz	r0, 80072a0 <_Balloc+0x20>
 8007296:	4b18      	ldr	r3, [pc, #96]	; (80072f8 <_Balloc+0x78>)
 8007298:	4818      	ldr	r0, [pc, #96]	; (80072fc <_Balloc+0x7c>)
 800729a:	2166      	movs	r1, #102	; 0x66
 800729c:	f000 fef8 	bl	8008090 <__assert_func>
 80072a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80072a4:	6006      	str	r6, [r0, #0]
 80072a6:	60c6      	str	r6, [r0, #12]
 80072a8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80072aa:	68f3      	ldr	r3, [r6, #12]
 80072ac:	b183      	cbz	r3, 80072d0 <_Balloc+0x50>
 80072ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80072b0:	68db      	ldr	r3, [r3, #12]
 80072b2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80072b6:	b9b8      	cbnz	r0, 80072e8 <_Balloc+0x68>
 80072b8:	2101      	movs	r1, #1
 80072ba:	fa01 f605 	lsl.w	r6, r1, r5
 80072be:	1d72      	adds	r2, r6, #5
 80072c0:	0092      	lsls	r2, r2, #2
 80072c2:	4620      	mov	r0, r4
 80072c4:	f000 fc97 	bl	8007bf6 <_calloc_r>
 80072c8:	b160      	cbz	r0, 80072e4 <_Balloc+0x64>
 80072ca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80072ce:	e00e      	b.n	80072ee <_Balloc+0x6e>
 80072d0:	2221      	movs	r2, #33	; 0x21
 80072d2:	2104      	movs	r1, #4
 80072d4:	4620      	mov	r0, r4
 80072d6:	f000 fc8e 	bl	8007bf6 <_calloc_r>
 80072da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80072dc:	60f0      	str	r0, [r6, #12]
 80072de:	68db      	ldr	r3, [r3, #12]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d1e4      	bne.n	80072ae <_Balloc+0x2e>
 80072e4:	2000      	movs	r0, #0
 80072e6:	bd70      	pop	{r4, r5, r6, pc}
 80072e8:	6802      	ldr	r2, [r0, #0]
 80072ea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80072ee:	2300      	movs	r3, #0
 80072f0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80072f4:	e7f7      	b.n	80072e6 <_Balloc+0x66>
 80072f6:	bf00      	nop
 80072f8:	08008de6 	.word	0x08008de6
 80072fc:	08008eec 	.word	0x08008eec

08007300 <_Bfree>:
 8007300:	b570      	push	{r4, r5, r6, lr}
 8007302:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007304:	4605      	mov	r5, r0
 8007306:	460c      	mov	r4, r1
 8007308:	b976      	cbnz	r6, 8007328 <_Bfree+0x28>
 800730a:	2010      	movs	r0, #16
 800730c:	f7ff ff90 	bl	8007230 <malloc>
 8007310:	4602      	mov	r2, r0
 8007312:	6268      	str	r0, [r5, #36]	; 0x24
 8007314:	b920      	cbnz	r0, 8007320 <_Bfree+0x20>
 8007316:	4b09      	ldr	r3, [pc, #36]	; (800733c <_Bfree+0x3c>)
 8007318:	4809      	ldr	r0, [pc, #36]	; (8007340 <_Bfree+0x40>)
 800731a:	218a      	movs	r1, #138	; 0x8a
 800731c:	f000 feb8 	bl	8008090 <__assert_func>
 8007320:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007324:	6006      	str	r6, [r0, #0]
 8007326:	60c6      	str	r6, [r0, #12]
 8007328:	b13c      	cbz	r4, 800733a <_Bfree+0x3a>
 800732a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800732c:	6862      	ldr	r2, [r4, #4]
 800732e:	68db      	ldr	r3, [r3, #12]
 8007330:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007334:	6021      	str	r1, [r4, #0]
 8007336:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800733a:	bd70      	pop	{r4, r5, r6, pc}
 800733c:	08008de6 	.word	0x08008de6
 8007340:	08008eec 	.word	0x08008eec

08007344 <__multadd>:
 8007344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007348:	690e      	ldr	r6, [r1, #16]
 800734a:	4607      	mov	r7, r0
 800734c:	4698      	mov	r8, r3
 800734e:	460c      	mov	r4, r1
 8007350:	f101 0014 	add.w	r0, r1, #20
 8007354:	2300      	movs	r3, #0
 8007356:	6805      	ldr	r5, [r0, #0]
 8007358:	b2a9      	uxth	r1, r5
 800735a:	fb02 8101 	mla	r1, r2, r1, r8
 800735e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8007362:	0c2d      	lsrs	r5, r5, #16
 8007364:	fb02 c505 	mla	r5, r2, r5, ip
 8007368:	b289      	uxth	r1, r1
 800736a:	3301      	adds	r3, #1
 800736c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8007370:	429e      	cmp	r6, r3
 8007372:	f840 1b04 	str.w	r1, [r0], #4
 8007376:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800737a:	dcec      	bgt.n	8007356 <__multadd+0x12>
 800737c:	f1b8 0f00 	cmp.w	r8, #0
 8007380:	d022      	beq.n	80073c8 <__multadd+0x84>
 8007382:	68a3      	ldr	r3, [r4, #8]
 8007384:	42b3      	cmp	r3, r6
 8007386:	dc19      	bgt.n	80073bc <__multadd+0x78>
 8007388:	6861      	ldr	r1, [r4, #4]
 800738a:	4638      	mov	r0, r7
 800738c:	3101      	adds	r1, #1
 800738e:	f7ff ff77 	bl	8007280 <_Balloc>
 8007392:	4605      	mov	r5, r0
 8007394:	b928      	cbnz	r0, 80073a2 <__multadd+0x5e>
 8007396:	4602      	mov	r2, r0
 8007398:	4b0d      	ldr	r3, [pc, #52]	; (80073d0 <__multadd+0x8c>)
 800739a:	480e      	ldr	r0, [pc, #56]	; (80073d4 <__multadd+0x90>)
 800739c:	21b5      	movs	r1, #181	; 0xb5
 800739e:	f000 fe77 	bl	8008090 <__assert_func>
 80073a2:	6922      	ldr	r2, [r4, #16]
 80073a4:	3202      	adds	r2, #2
 80073a6:	f104 010c 	add.w	r1, r4, #12
 80073aa:	0092      	lsls	r2, r2, #2
 80073ac:	300c      	adds	r0, #12
 80073ae:	f7ff ff59 	bl	8007264 <memcpy>
 80073b2:	4621      	mov	r1, r4
 80073b4:	4638      	mov	r0, r7
 80073b6:	f7ff ffa3 	bl	8007300 <_Bfree>
 80073ba:	462c      	mov	r4, r5
 80073bc:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80073c0:	3601      	adds	r6, #1
 80073c2:	f8c3 8014 	str.w	r8, [r3, #20]
 80073c6:	6126      	str	r6, [r4, #16]
 80073c8:	4620      	mov	r0, r4
 80073ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073ce:	bf00      	nop
 80073d0:	08008e5c 	.word	0x08008e5c
 80073d4:	08008eec 	.word	0x08008eec

080073d8 <__s2b>:
 80073d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073dc:	460c      	mov	r4, r1
 80073de:	4615      	mov	r5, r2
 80073e0:	461f      	mov	r7, r3
 80073e2:	2209      	movs	r2, #9
 80073e4:	3308      	adds	r3, #8
 80073e6:	4606      	mov	r6, r0
 80073e8:	fb93 f3f2 	sdiv	r3, r3, r2
 80073ec:	2100      	movs	r1, #0
 80073ee:	2201      	movs	r2, #1
 80073f0:	429a      	cmp	r2, r3
 80073f2:	db09      	blt.n	8007408 <__s2b+0x30>
 80073f4:	4630      	mov	r0, r6
 80073f6:	f7ff ff43 	bl	8007280 <_Balloc>
 80073fa:	b940      	cbnz	r0, 800740e <__s2b+0x36>
 80073fc:	4602      	mov	r2, r0
 80073fe:	4b19      	ldr	r3, [pc, #100]	; (8007464 <__s2b+0x8c>)
 8007400:	4819      	ldr	r0, [pc, #100]	; (8007468 <__s2b+0x90>)
 8007402:	21ce      	movs	r1, #206	; 0xce
 8007404:	f000 fe44 	bl	8008090 <__assert_func>
 8007408:	0052      	lsls	r2, r2, #1
 800740a:	3101      	adds	r1, #1
 800740c:	e7f0      	b.n	80073f0 <__s2b+0x18>
 800740e:	9b08      	ldr	r3, [sp, #32]
 8007410:	6143      	str	r3, [r0, #20]
 8007412:	2d09      	cmp	r5, #9
 8007414:	f04f 0301 	mov.w	r3, #1
 8007418:	6103      	str	r3, [r0, #16]
 800741a:	dd16      	ble.n	800744a <__s2b+0x72>
 800741c:	f104 0909 	add.w	r9, r4, #9
 8007420:	46c8      	mov	r8, r9
 8007422:	442c      	add	r4, r5
 8007424:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007428:	4601      	mov	r1, r0
 800742a:	3b30      	subs	r3, #48	; 0x30
 800742c:	220a      	movs	r2, #10
 800742e:	4630      	mov	r0, r6
 8007430:	f7ff ff88 	bl	8007344 <__multadd>
 8007434:	45a0      	cmp	r8, r4
 8007436:	d1f5      	bne.n	8007424 <__s2b+0x4c>
 8007438:	f1a5 0408 	sub.w	r4, r5, #8
 800743c:	444c      	add	r4, r9
 800743e:	1b2d      	subs	r5, r5, r4
 8007440:	1963      	adds	r3, r4, r5
 8007442:	42bb      	cmp	r3, r7
 8007444:	db04      	blt.n	8007450 <__s2b+0x78>
 8007446:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800744a:	340a      	adds	r4, #10
 800744c:	2509      	movs	r5, #9
 800744e:	e7f6      	b.n	800743e <__s2b+0x66>
 8007450:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007454:	4601      	mov	r1, r0
 8007456:	3b30      	subs	r3, #48	; 0x30
 8007458:	220a      	movs	r2, #10
 800745a:	4630      	mov	r0, r6
 800745c:	f7ff ff72 	bl	8007344 <__multadd>
 8007460:	e7ee      	b.n	8007440 <__s2b+0x68>
 8007462:	bf00      	nop
 8007464:	08008e5c 	.word	0x08008e5c
 8007468:	08008eec 	.word	0x08008eec

0800746c <__hi0bits>:
 800746c:	0c03      	lsrs	r3, r0, #16
 800746e:	041b      	lsls	r3, r3, #16
 8007470:	b9d3      	cbnz	r3, 80074a8 <__hi0bits+0x3c>
 8007472:	0400      	lsls	r0, r0, #16
 8007474:	2310      	movs	r3, #16
 8007476:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800747a:	bf04      	itt	eq
 800747c:	0200      	lsleq	r0, r0, #8
 800747e:	3308      	addeq	r3, #8
 8007480:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007484:	bf04      	itt	eq
 8007486:	0100      	lsleq	r0, r0, #4
 8007488:	3304      	addeq	r3, #4
 800748a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800748e:	bf04      	itt	eq
 8007490:	0080      	lsleq	r0, r0, #2
 8007492:	3302      	addeq	r3, #2
 8007494:	2800      	cmp	r0, #0
 8007496:	db05      	blt.n	80074a4 <__hi0bits+0x38>
 8007498:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800749c:	f103 0301 	add.w	r3, r3, #1
 80074a0:	bf08      	it	eq
 80074a2:	2320      	moveq	r3, #32
 80074a4:	4618      	mov	r0, r3
 80074a6:	4770      	bx	lr
 80074a8:	2300      	movs	r3, #0
 80074aa:	e7e4      	b.n	8007476 <__hi0bits+0xa>

080074ac <__lo0bits>:
 80074ac:	6803      	ldr	r3, [r0, #0]
 80074ae:	f013 0207 	ands.w	r2, r3, #7
 80074b2:	4601      	mov	r1, r0
 80074b4:	d00b      	beq.n	80074ce <__lo0bits+0x22>
 80074b6:	07da      	lsls	r2, r3, #31
 80074b8:	d424      	bmi.n	8007504 <__lo0bits+0x58>
 80074ba:	0798      	lsls	r0, r3, #30
 80074bc:	bf49      	itett	mi
 80074be:	085b      	lsrmi	r3, r3, #1
 80074c0:	089b      	lsrpl	r3, r3, #2
 80074c2:	2001      	movmi	r0, #1
 80074c4:	600b      	strmi	r3, [r1, #0]
 80074c6:	bf5c      	itt	pl
 80074c8:	600b      	strpl	r3, [r1, #0]
 80074ca:	2002      	movpl	r0, #2
 80074cc:	4770      	bx	lr
 80074ce:	b298      	uxth	r0, r3
 80074d0:	b9b0      	cbnz	r0, 8007500 <__lo0bits+0x54>
 80074d2:	0c1b      	lsrs	r3, r3, #16
 80074d4:	2010      	movs	r0, #16
 80074d6:	f013 0fff 	tst.w	r3, #255	; 0xff
 80074da:	bf04      	itt	eq
 80074dc:	0a1b      	lsreq	r3, r3, #8
 80074de:	3008      	addeq	r0, #8
 80074e0:	071a      	lsls	r2, r3, #28
 80074e2:	bf04      	itt	eq
 80074e4:	091b      	lsreq	r3, r3, #4
 80074e6:	3004      	addeq	r0, #4
 80074e8:	079a      	lsls	r2, r3, #30
 80074ea:	bf04      	itt	eq
 80074ec:	089b      	lsreq	r3, r3, #2
 80074ee:	3002      	addeq	r0, #2
 80074f0:	07da      	lsls	r2, r3, #31
 80074f2:	d403      	bmi.n	80074fc <__lo0bits+0x50>
 80074f4:	085b      	lsrs	r3, r3, #1
 80074f6:	f100 0001 	add.w	r0, r0, #1
 80074fa:	d005      	beq.n	8007508 <__lo0bits+0x5c>
 80074fc:	600b      	str	r3, [r1, #0]
 80074fe:	4770      	bx	lr
 8007500:	4610      	mov	r0, r2
 8007502:	e7e8      	b.n	80074d6 <__lo0bits+0x2a>
 8007504:	2000      	movs	r0, #0
 8007506:	4770      	bx	lr
 8007508:	2020      	movs	r0, #32
 800750a:	4770      	bx	lr

0800750c <__i2b>:
 800750c:	b510      	push	{r4, lr}
 800750e:	460c      	mov	r4, r1
 8007510:	2101      	movs	r1, #1
 8007512:	f7ff feb5 	bl	8007280 <_Balloc>
 8007516:	4602      	mov	r2, r0
 8007518:	b928      	cbnz	r0, 8007526 <__i2b+0x1a>
 800751a:	4b05      	ldr	r3, [pc, #20]	; (8007530 <__i2b+0x24>)
 800751c:	4805      	ldr	r0, [pc, #20]	; (8007534 <__i2b+0x28>)
 800751e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007522:	f000 fdb5 	bl	8008090 <__assert_func>
 8007526:	2301      	movs	r3, #1
 8007528:	6144      	str	r4, [r0, #20]
 800752a:	6103      	str	r3, [r0, #16]
 800752c:	bd10      	pop	{r4, pc}
 800752e:	bf00      	nop
 8007530:	08008e5c 	.word	0x08008e5c
 8007534:	08008eec 	.word	0x08008eec

08007538 <__multiply>:
 8007538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800753c:	4614      	mov	r4, r2
 800753e:	690a      	ldr	r2, [r1, #16]
 8007540:	6923      	ldr	r3, [r4, #16]
 8007542:	429a      	cmp	r2, r3
 8007544:	bfb8      	it	lt
 8007546:	460b      	movlt	r3, r1
 8007548:	460d      	mov	r5, r1
 800754a:	bfbc      	itt	lt
 800754c:	4625      	movlt	r5, r4
 800754e:	461c      	movlt	r4, r3
 8007550:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8007554:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007558:	68ab      	ldr	r3, [r5, #8]
 800755a:	6869      	ldr	r1, [r5, #4]
 800755c:	eb0a 0709 	add.w	r7, sl, r9
 8007560:	42bb      	cmp	r3, r7
 8007562:	b085      	sub	sp, #20
 8007564:	bfb8      	it	lt
 8007566:	3101      	addlt	r1, #1
 8007568:	f7ff fe8a 	bl	8007280 <_Balloc>
 800756c:	b930      	cbnz	r0, 800757c <__multiply+0x44>
 800756e:	4602      	mov	r2, r0
 8007570:	4b42      	ldr	r3, [pc, #264]	; (800767c <__multiply+0x144>)
 8007572:	4843      	ldr	r0, [pc, #268]	; (8007680 <__multiply+0x148>)
 8007574:	f240 115d 	movw	r1, #349	; 0x15d
 8007578:	f000 fd8a 	bl	8008090 <__assert_func>
 800757c:	f100 0614 	add.w	r6, r0, #20
 8007580:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8007584:	4633      	mov	r3, r6
 8007586:	2200      	movs	r2, #0
 8007588:	4543      	cmp	r3, r8
 800758a:	d31e      	bcc.n	80075ca <__multiply+0x92>
 800758c:	f105 0c14 	add.w	ip, r5, #20
 8007590:	f104 0314 	add.w	r3, r4, #20
 8007594:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8007598:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800759c:	9202      	str	r2, [sp, #8]
 800759e:	ebac 0205 	sub.w	r2, ip, r5
 80075a2:	3a15      	subs	r2, #21
 80075a4:	f022 0203 	bic.w	r2, r2, #3
 80075a8:	3204      	adds	r2, #4
 80075aa:	f105 0115 	add.w	r1, r5, #21
 80075ae:	458c      	cmp	ip, r1
 80075b0:	bf38      	it	cc
 80075b2:	2204      	movcc	r2, #4
 80075b4:	9201      	str	r2, [sp, #4]
 80075b6:	9a02      	ldr	r2, [sp, #8]
 80075b8:	9303      	str	r3, [sp, #12]
 80075ba:	429a      	cmp	r2, r3
 80075bc:	d808      	bhi.n	80075d0 <__multiply+0x98>
 80075be:	2f00      	cmp	r7, #0
 80075c0:	dc55      	bgt.n	800766e <__multiply+0x136>
 80075c2:	6107      	str	r7, [r0, #16]
 80075c4:	b005      	add	sp, #20
 80075c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075ca:	f843 2b04 	str.w	r2, [r3], #4
 80075ce:	e7db      	b.n	8007588 <__multiply+0x50>
 80075d0:	f8b3 a000 	ldrh.w	sl, [r3]
 80075d4:	f1ba 0f00 	cmp.w	sl, #0
 80075d8:	d020      	beq.n	800761c <__multiply+0xe4>
 80075da:	f105 0e14 	add.w	lr, r5, #20
 80075de:	46b1      	mov	r9, r6
 80075e0:	2200      	movs	r2, #0
 80075e2:	f85e 4b04 	ldr.w	r4, [lr], #4
 80075e6:	f8d9 b000 	ldr.w	fp, [r9]
 80075ea:	b2a1      	uxth	r1, r4
 80075ec:	fa1f fb8b 	uxth.w	fp, fp
 80075f0:	fb0a b101 	mla	r1, sl, r1, fp
 80075f4:	4411      	add	r1, r2
 80075f6:	f8d9 2000 	ldr.w	r2, [r9]
 80075fa:	0c24      	lsrs	r4, r4, #16
 80075fc:	0c12      	lsrs	r2, r2, #16
 80075fe:	fb0a 2404 	mla	r4, sl, r4, r2
 8007602:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8007606:	b289      	uxth	r1, r1
 8007608:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800760c:	45f4      	cmp	ip, lr
 800760e:	f849 1b04 	str.w	r1, [r9], #4
 8007612:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8007616:	d8e4      	bhi.n	80075e2 <__multiply+0xaa>
 8007618:	9901      	ldr	r1, [sp, #4]
 800761a:	5072      	str	r2, [r6, r1]
 800761c:	9a03      	ldr	r2, [sp, #12]
 800761e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007622:	3304      	adds	r3, #4
 8007624:	f1b9 0f00 	cmp.w	r9, #0
 8007628:	d01f      	beq.n	800766a <__multiply+0x132>
 800762a:	6834      	ldr	r4, [r6, #0]
 800762c:	f105 0114 	add.w	r1, r5, #20
 8007630:	46b6      	mov	lr, r6
 8007632:	f04f 0a00 	mov.w	sl, #0
 8007636:	880a      	ldrh	r2, [r1, #0]
 8007638:	f8be b002 	ldrh.w	fp, [lr, #2]
 800763c:	fb09 b202 	mla	r2, r9, r2, fp
 8007640:	4492      	add	sl, r2
 8007642:	b2a4      	uxth	r4, r4
 8007644:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8007648:	f84e 4b04 	str.w	r4, [lr], #4
 800764c:	f851 4b04 	ldr.w	r4, [r1], #4
 8007650:	f8be 2000 	ldrh.w	r2, [lr]
 8007654:	0c24      	lsrs	r4, r4, #16
 8007656:	fb09 2404 	mla	r4, r9, r4, r2
 800765a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800765e:	458c      	cmp	ip, r1
 8007660:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007664:	d8e7      	bhi.n	8007636 <__multiply+0xfe>
 8007666:	9a01      	ldr	r2, [sp, #4]
 8007668:	50b4      	str	r4, [r6, r2]
 800766a:	3604      	adds	r6, #4
 800766c:	e7a3      	b.n	80075b6 <__multiply+0x7e>
 800766e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007672:	2b00      	cmp	r3, #0
 8007674:	d1a5      	bne.n	80075c2 <__multiply+0x8a>
 8007676:	3f01      	subs	r7, #1
 8007678:	e7a1      	b.n	80075be <__multiply+0x86>
 800767a:	bf00      	nop
 800767c:	08008e5c 	.word	0x08008e5c
 8007680:	08008eec 	.word	0x08008eec

08007684 <__pow5mult>:
 8007684:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007688:	4615      	mov	r5, r2
 800768a:	f012 0203 	ands.w	r2, r2, #3
 800768e:	4606      	mov	r6, r0
 8007690:	460f      	mov	r7, r1
 8007692:	d007      	beq.n	80076a4 <__pow5mult+0x20>
 8007694:	4c25      	ldr	r4, [pc, #148]	; (800772c <__pow5mult+0xa8>)
 8007696:	3a01      	subs	r2, #1
 8007698:	2300      	movs	r3, #0
 800769a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800769e:	f7ff fe51 	bl	8007344 <__multadd>
 80076a2:	4607      	mov	r7, r0
 80076a4:	10ad      	asrs	r5, r5, #2
 80076a6:	d03d      	beq.n	8007724 <__pow5mult+0xa0>
 80076a8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80076aa:	b97c      	cbnz	r4, 80076cc <__pow5mult+0x48>
 80076ac:	2010      	movs	r0, #16
 80076ae:	f7ff fdbf 	bl	8007230 <malloc>
 80076b2:	4602      	mov	r2, r0
 80076b4:	6270      	str	r0, [r6, #36]	; 0x24
 80076b6:	b928      	cbnz	r0, 80076c4 <__pow5mult+0x40>
 80076b8:	4b1d      	ldr	r3, [pc, #116]	; (8007730 <__pow5mult+0xac>)
 80076ba:	481e      	ldr	r0, [pc, #120]	; (8007734 <__pow5mult+0xb0>)
 80076bc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80076c0:	f000 fce6 	bl	8008090 <__assert_func>
 80076c4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80076c8:	6004      	str	r4, [r0, #0]
 80076ca:	60c4      	str	r4, [r0, #12]
 80076cc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80076d0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80076d4:	b94c      	cbnz	r4, 80076ea <__pow5mult+0x66>
 80076d6:	f240 2171 	movw	r1, #625	; 0x271
 80076da:	4630      	mov	r0, r6
 80076dc:	f7ff ff16 	bl	800750c <__i2b>
 80076e0:	2300      	movs	r3, #0
 80076e2:	f8c8 0008 	str.w	r0, [r8, #8]
 80076e6:	4604      	mov	r4, r0
 80076e8:	6003      	str	r3, [r0, #0]
 80076ea:	f04f 0900 	mov.w	r9, #0
 80076ee:	07eb      	lsls	r3, r5, #31
 80076f0:	d50a      	bpl.n	8007708 <__pow5mult+0x84>
 80076f2:	4639      	mov	r1, r7
 80076f4:	4622      	mov	r2, r4
 80076f6:	4630      	mov	r0, r6
 80076f8:	f7ff ff1e 	bl	8007538 <__multiply>
 80076fc:	4639      	mov	r1, r7
 80076fe:	4680      	mov	r8, r0
 8007700:	4630      	mov	r0, r6
 8007702:	f7ff fdfd 	bl	8007300 <_Bfree>
 8007706:	4647      	mov	r7, r8
 8007708:	106d      	asrs	r5, r5, #1
 800770a:	d00b      	beq.n	8007724 <__pow5mult+0xa0>
 800770c:	6820      	ldr	r0, [r4, #0]
 800770e:	b938      	cbnz	r0, 8007720 <__pow5mult+0x9c>
 8007710:	4622      	mov	r2, r4
 8007712:	4621      	mov	r1, r4
 8007714:	4630      	mov	r0, r6
 8007716:	f7ff ff0f 	bl	8007538 <__multiply>
 800771a:	6020      	str	r0, [r4, #0]
 800771c:	f8c0 9000 	str.w	r9, [r0]
 8007720:	4604      	mov	r4, r0
 8007722:	e7e4      	b.n	80076ee <__pow5mult+0x6a>
 8007724:	4638      	mov	r0, r7
 8007726:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800772a:	bf00      	nop
 800772c:	08009040 	.word	0x08009040
 8007730:	08008de6 	.word	0x08008de6
 8007734:	08008eec 	.word	0x08008eec

08007738 <__lshift>:
 8007738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800773c:	460c      	mov	r4, r1
 800773e:	6849      	ldr	r1, [r1, #4]
 8007740:	6923      	ldr	r3, [r4, #16]
 8007742:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007746:	68a3      	ldr	r3, [r4, #8]
 8007748:	4607      	mov	r7, r0
 800774a:	4691      	mov	r9, r2
 800774c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007750:	f108 0601 	add.w	r6, r8, #1
 8007754:	42b3      	cmp	r3, r6
 8007756:	db0b      	blt.n	8007770 <__lshift+0x38>
 8007758:	4638      	mov	r0, r7
 800775a:	f7ff fd91 	bl	8007280 <_Balloc>
 800775e:	4605      	mov	r5, r0
 8007760:	b948      	cbnz	r0, 8007776 <__lshift+0x3e>
 8007762:	4602      	mov	r2, r0
 8007764:	4b28      	ldr	r3, [pc, #160]	; (8007808 <__lshift+0xd0>)
 8007766:	4829      	ldr	r0, [pc, #164]	; (800780c <__lshift+0xd4>)
 8007768:	f240 11d9 	movw	r1, #473	; 0x1d9
 800776c:	f000 fc90 	bl	8008090 <__assert_func>
 8007770:	3101      	adds	r1, #1
 8007772:	005b      	lsls	r3, r3, #1
 8007774:	e7ee      	b.n	8007754 <__lshift+0x1c>
 8007776:	2300      	movs	r3, #0
 8007778:	f100 0114 	add.w	r1, r0, #20
 800777c:	f100 0210 	add.w	r2, r0, #16
 8007780:	4618      	mov	r0, r3
 8007782:	4553      	cmp	r3, sl
 8007784:	db33      	blt.n	80077ee <__lshift+0xb6>
 8007786:	6920      	ldr	r0, [r4, #16]
 8007788:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800778c:	f104 0314 	add.w	r3, r4, #20
 8007790:	f019 091f 	ands.w	r9, r9, #31
 8007794:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007798:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800779c:	d02b      	beq.n	80077f6 <__lshift+0xbe>
 800779e:	f1c9 0e20 	rsb	lr, r9, #32
 80077a2:	468a      	mov	sl, r1
 80077a4:	2200      	movs	r2, #0
 80077a6:	6818      	ldr	r0, [r3, #0]
 80077a8:	fa00 f009 	lsl.w	r0, r0, r9
 80077ac:	4302      	orrs	r2, r0
 80077ae:	f84a 2b04 	str.w	r2, [sl], #4
 80077b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80077b6:	459c      	cmp	ip, r3
 80077b8:	fa22 f20e 	lsr.w	r2, r2, lr
 80077bc:	d8f3      	bhi.n	80077a6 <__lshift+0x6e>
 80077be:	ebac 0304 	sub.w	r3, ip, r4
 80077c2:	3b15      	subs	r3, #21
 80077c4:	f023 0303 	bic.w	r3, r3, #3
 80077c8:	3304      	adds	r3, #4
 80077ca:	f104 0015 	add.w	r0, r4, #21
 80077ce:	4584      	cmp	ip, r0
 80077d0:	bf38      	it	cc
 80077d2:	2304      	movcc	r3, #4
 80077d4:	50ca      	str	r2, [r1, r3]
 80077d6:	b10a      	cbz	r2, 80077dc <__lshift+0xa4>
 80077d8:	f108 0602 	add.w	r6, r8, #2
 80077dc:	3e01      	subs	r6, #1
 80077de:	4638      	mov	r0, r7
 80077e0:	612e      	str	r6, [r5, #16]
 80077e2:	4621      	mov	r1, r4
 80077e4:	f7ff fd8c 	bl	8007300 <_Bfree>
 80077e8:	4628      	mov	r0, r5
 80077ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077ee:	f842 0f04 	str.w	r0, [r2, #4]!
 80077f2:	3301      	adds	r3, #1
 80077f4:	e7c5      	b.n	8007782 <__lshift+0x4a>
 80077f6:	3904      	subs	r1, #4
 80077f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80077fc:	f841 2f04 	str.w	r2, [r1, #4]!
 8007800:	459c      	cmp	ip, r3
 8007802:	d8f9      	bhi.n	80077f8 <__lshift+0xc0>
 8007804:	e7ea      	b.n	80077dc <__lshift+0xa4>
 8007806:	bf00      	nop
 8007808:	08008e5c 	.word	0x08008e5c
 800780c:	08008eec 	.word	0x08008eec

08007810 <__mcmp>:
 8007810:	b530      	push	{r4, r5, lr}
 8007812:	6902      	ldr	r2, [r0, #16]
 8007814:	690c      	ldr	r4, [r1, #16]
 8007816:	1b12      	subs	r2, r2, r4
 8007818:	d10e      	bne.n	8007838 <__mcmp+0x28>
 800781a:	f100 0314 	add.w	r3, r0, #20
 800781e:	3114      	adds	r1, #20
 8007820:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007824:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007828:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800782c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007830:	42a5      	cmp	r5, r4
 8007832:	d003      	beq.n	800783c <__mcmp+0x2c>
 8007834:	d305      	bcc.n	8007842 <__mcmp+0x32>
 8007836:	2201      	movs	r2, #1
 8007838:	4610      	mov	r0, r2
 800783a:	bd30      	pop	{r4, r5, pc}
 800783c:	4283      	cmp	r3, r0
 800783e:	d3f3      	bcc.n	8007828 <__mcmp+0x18>
 8007840:	e7fa      	b.n	8007838 <__mcmp+0x28>
 8007842:	f04f 32ff 	mov.w	r2, #4294967295
 8007846:	e7f7      	b.n	8007838 <__mcmp+0x28>

08007848 <__mdiff>:
 8007848:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800784c:	460c      	mov	r4, r1
 800784e:	4606      	mov	r6, r0
 8007850:	4611      	mov	r1, r2
 8007852:	4620      	mov	r0, r4
 8007854:	4617      	mov	r7, r2
 8007856:	f7ff ffdb 	bl	8007810 <__mcmp>
 800785a:	1e05      	subs	r5, r0, #0
 800785c:	d110      	bne.n	8007880 <__mdiff+0x38>
 800785e:	4629      	mov	r1, r5
 8007860:	4630      	mov	r0, r6
 8007862:	f7ff fd0d 	bl	8007280 <_Balloc>
 8007866:	b930      	cbnz	r0, 8007876 <__mdiff+0x2e>
 8007868:	4b39      	ldr	r3, [pc, #228]	; (8007950 <__mdiff+0x108>)
 800786a:	4602      	mov	r2, r0
 800786c:	f240 2132 	movw	r1, #562	; 0x232
 8007870:	4838      	ldr	r0, [pc, #224]	; (8007954 <__mdiff+0x10c>)
 8007872:	f000 fc0d 	bl	8008090 <__assert_func>
 8007876:	2301      	movs	r3, #1
 8007878:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800787c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007880:	bfa4      	itt	ge
 8007882:	463b      	movge	r3, r7
 8007884:	4627      	movge	r7, r4
 8007886:	4630      	mov	r0, r6
 8007888:	6879      	ldr	r1, [r7, #4]
 800788a:	bfa6      	itte	ge
 800788c:	461c      	movge	r4, r3
 800788e:	2500      	movge	r5, #0
 8007890:	2501      	movlt	r5, #1
 8007892:	f7ff fcf5 	bl	8007280 <_Balloc>
 8007896:	b920      	cbnz	r0, 80078a2 <__mdiff+0x5a>
 8007898:	4b2d      	ldr	r3, [pc, #180]	; (8007950 <__mdiff+0x108>)
 800789a:	4602      	mov	r2, r0
 800789c:	f44f 7110 	mov.w	r1, #576	; 0x240
 80078a0:	e7e6      	b.n	8007870 <__mdiff+0x28>
 80078a2:	693e      	ldr	r6, [r7, #16]
 80078a4:	60c5      	str	r5, [r0, #12]
 80078a6:	6925      	ldr	r5, [r4, #16]
 80078a8:	f107 0114 	add.w	r1, r7, #20
 80078ac:	f104 0914 	add.w	r9, r4, #20
 80078b0:	f100 0e14 	add.w	lr, r0, #20
 80078b4:	f107 0210 	add.w	r2, r7, #16
 80078b8:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80078bc:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80078c0:	46f2      	mov	sl, lr
 80078c2:	2700      	movs	r7, #0
 80078c4:	f859 3b04 	ldr.w	r3, [r9], #4
 80078c8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80078cc:	fa1f f883 	uxth.w	r8, r3
 80078d0:	fa17 f78b 	uxtah	r7, r7, fp
 80078d4:	0c1b      	lsrs	r3, r3, #16
 80078d6:	eba7 0808 	sub.w	r8, r7, r8
 80078da:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80078de:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80078e2:	fa1f f888 	uxth.w	r8, r8
 80078e6:	141f      	asrs	r7, r3, #16
 80078e8:	454d      	cmp	r5, r9
 80078ea:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80078ee:	f84a 3b04 	str.w	r3, [sl], #4
 80078f2:	d8e7      	bhi.n	80078c4 <__mdiff+0x7c>
 80078f4:	1b2b      	subs	r3, r5, r4
 80078f6:	3b15      	subs	r3, #21
 80078f8:	f023 0303 	bic.w	r3, r3, #3
 80078fc:	3304      	adds	r3, #4
 80078fe:	3415      	adds	r4, #21
 8007900:	42a5      	cmp	r5, r4
 8007902:	bf38      	it	cc
 8007904:	2304      	movcc	r3, #4
 8007906:	4419      	add	r1, r3
 8007908:	4473      	add	r3, lr
 800790a:	469e      	mov	lr, r3
 800790c:	460d      	mov	r5, r1
 800790e:	4565      	cmp	r5, ip
 8007910:	d30e      	bcc.n	8007930 <__mdiff+0xe8>
 8007912:	f10c 0203 	add.w	r2, ip, #3
 8007916:	1a52      	subs	r2, r2, r1
 8007918:	f022 0203 	bic.w	r2, r2, #3
 800791c:	3903      	subs	r1, #3
 800791e:	458c      	cmp	ip, r1
 8007920:	bf38      	it	cc
 8007922:	2200      	movcc	r2, #0
 8007924:	441a      	add	r2, r3
 8007926:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800792a:	b17b      	cbz	r3, 800794c <__mdiff+0x104>
 800792c:	6106      	str	r6, [r0, #16]
 800792e:	e7a5      	b.n	800787c <__mdiff+0x34>
 8007930:	f855 8b04 	ldr.w	r8, [r5], #4
 8007934:	fa17 f488 	uxtah	r4, r7, r8
 8007938:	1422      	asrs	r2, r4, #16
 800793a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800793e:	b2a4      	uxth	r4, r4
 8007940:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8007944:	f84e 4b04 	str.w	r4, [lr], #4
 8007948:	1417      	asrs	r7, r2, #16
 800794a:	e7e0      	b.n	800790e <__mdiff+0xc6>
 800794c:	3e01      	subs	r6, #1
 800794e:	e7ea      	b.n	8007926 <__mdiff+0xde>
 8007950:	08008e5c 	.word	0x08008e5c
 8007954:	08008eec 	.word	0x08008eec

08007958 <__ulp>:
 8007958:	b082      	sub	sp, #8
 800795a:	ed8d 0b00 	vstr	d0, [sp]
 800795e:	9b01      	ldr	r3, [sp, #4]
 8007960:	4912      	ldr	r1, [pc, #72]	; (80079ac <__ulp+0x54>)
 8007962:	4019      	ands	r1, r3
 8007964:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8007968:	2900      	cmp	r1, #0
 800796a:	dd05      	ble.n	8007978 <__ulp+0x20>
 800796c:	2200      	movs	r2, #0
 800796e:	460b      	mov	r3, r1
 8007970:	ec43 2b10 	vmov	d0, r2, r3
 8007974:	b002      	add	sp, #8
 8007976:	4770      	bx	lr
 8007978:	4249      	negs	r1, r1
 800797a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800797e:	ea4f 5021 	mov.w	r0, r1, asr #20
 8007982:	f04f 0200 	mov.w	r2, #0
 8007986:	f04f 0300 	mov.w	r3, #0
 800798a:	da04      	bge.n	8007996 <__ulp+0x3e>
 800798c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8007990:	fa41 f300 	asr.w	r3, r1, r0
 8007994:	e7ec      	b.n	8007970 <__ulp+0x18>
 8007996:	f1a0 0114 	sub.w	r1, r0, #20
 800799a:	291e      	cmp	r1, #30
 800799c:	bfda      	itte	le
 800799e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80079a2:	fa20 f101 	lsrle.w	r1, r0, r1
 80079a6:	2101      	movgt	r1, #1
 80079a8:	460a      	mov	r2, r1
 80079aa:	e7e1      	b.n	8007970 <__ulp+0x18>
 80079ac:	7ff00000 	.word	0x7ff00000

080079b0 <__b2d>:
 80079b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079b2:	6905      	ldr	r5, [r0, #16]
 80079b4:	f100 0714 	add.w	r7, r0, #20
 80079b8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80079bc:	1f2e      	subs	r6, r5, #4
 80079be:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80079c2:	4620      	mov	r0, r4
 80079c4:	f7ff fd52 	bl	800746c <__hi0bits>
 80079c8:	f1c0 0320 	rsb	r3, r0, #32
 80079cc:	280a      	cmp	r0, #10
 80079ce:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8007a4c <__b2d+0x9c>
 80079d2:	600b      	str	r3, [r1, #0]
 80079d4:	dc14      	bgt.n	8007a00 <__b2d+0x50>
 80079d6:	f1c0 0e0b 	rsb	lr, r0, #11
 80079da:	fa24 f10e 	lsr.w	r1, r4, lr
 80079de:	42b7      	cmp	r7, r6
 80079e0:	ea41 030c 	orr.w	r3, r1, ip
 80079e4:	bf34      	ite	cc
 80079e6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80079ea:	2100      	movcs	r1, #0
 80079ec:	3015      	adds	r0, #21
 80079ee:	fa04 f000 	lsl.w	r0, r4, r0
 80079f2:	fa21 f10e 	lsr.w	r1, r1, lr
 80079f6:	ea40 0201 	orr.w	r2, r0, r1
 80079fa:	ec43 2b10 	vmov	d0, r2, r3
 80079fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a00:	42b7      	cmp	r7, r6
 8007a02:	bf3a      	itte	cc
 8007a04:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8007a08:	f1a5 0608 	subcc.w	r6, r5, #8
 8007a0c:	2100      	movcs	r1, #0
 8007a0e:	380b      	subs	r0, #11
 8007a10:	d017      	beq.n	8007a42 <__b2d+0x92>
 8007a12:	f1c0 0c20 	rsb	ip, r0, #32
 8007a16:	fa04 f500 	lsl.w	r5, r4, r0
 8007a1a:	42be      	cmp	r6, r7
 8007a1c:	fa21 f40c 	lsr.w	r4, r1, ip
 8007a20:	ea45 0504 	orr.w	r5, r5, r4
 8007a24:	bf8c      	ite	hi
 8007a26:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8007a2a:	2400      	movls	r4, #0
 8007a2c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8007a30:	fa01 f000 	lsl.w	r0, r1, r0
 8007a34:	fa24 f40c 	lsr.w	r4, r4, ip
 8007a38:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007a3c:	ea40 0204 	orr.w	r2, r0, r4
 8007a40:	e7db      	b.n	80079fa <__b2d+0x4a>
 8007a42:	ea44 030c 	orr.w	r3, r4, ip
 8007a46:	460a      	mov	r2, r1
 8007a48:	e7d7      	b.n	80079fa <__b2d+0x4a>
 8007a4a:	bf00      	nop
 8007a4c:	3ff00000 	.word	0x3ff00000

08007a50 <__d2b>:
 8007a50:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007a54:	4689      	mov	r9, r1
 8007a56:	2101      	movs	r1, #1
 8007a58:	ec57 6b10 	vmov	r6, r7, d0
 8007a5c:	4690      	mov	r8, r2
 8007a5e:	f7ff fc0f 	bl	8007280 <_Balloc>
 8007a62:	4604      	mov	r4, r0
 8007a64:	b930      	cbnz	r0, 8007a74 <__d2b+0x24>
 8007a66:	4602      	mov	r2, r0
 8007a68:	4b25      	ldr	r3, [pc, #148]	; (8007b00 <__d2b+0xb0>)
 8007a6a:	4826      	ldr	r0, [pc, #152]	; (8007b04 <__d2b+0xb4>)
 8007a6c:	f240 310a 	movw	r1, #778	; 0x30a
 8007a70:	f000 fb0e 	bl	8008090 <__assert_func>
 8007a74:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007a78:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007a7c:	bb35      	cbnz	r5, 8007acc <__d2b+0x7c>
 8007a7e:	2e00      	cmp	r6, #0
 8007a80:	9301      	str	r3, [sp, #4]
 8007a82:	d028      	beq.n	8007ad6 <__d2b+0x86>
 8007a84:	4668      	mov	r0, sp
 8007a86:	9600      	str	r6, [sp, #0]
 8007a88:	f7ff fd10 	bl	80074ac <__lo0bits>
 8007a8c:	9900      	ldr	r1, [sp, #0]
 8007a8e:	b300      	cbz	r0, 8007ad2 <__d2b+0x82>
 8007a90:	9a01      	ldr	r2, [sp, #4]
 8007a92:	f1c0 0320 	rsb	r3, r0, #32
 8007a96:	fa02 f303 	lsl.w	r3, r2, r3
 8007a9a:	430b      	orrs	r3, r1
 8007a9c:	40c2      	lsrs	r2, r0
 8007a9e:	6163      	str	r3, [r4, #20]
 8007aa0:	9201      	str	r2, [sp, #4]
 8007aa2:	9b01      	ldr	r3, [sp, #4]
 8007aa4:	61a3      	str	r3, [r4, #24]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	bf14      	ite	ne
 8007aaa:	2202      	movne	r2, #2
 8007aac:	2201      	moveq	r2, #1
 8007aae:	6122      	str	r2, [r4, #16]
 8007ab0:	b1d5      	cbz	r5, 8007ae8 <__d2b+0x98>
 8007ab2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007ab6:	4405      	add	r5, r0
 8007ab8:	f8c9 5000 	str.w	r5, [r9]
 8007abc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007ac0:	f8c8 0000 	str.w	r0, [r8]
 8007ac4:	4620      	mov	r0, r4
 8007ac6:	b003      	add	sp, #12
 8007ac8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007acc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007ad0:	e7d5      	b.n	8007a7e <__d2b+0x2e>
 8007ad2:	6161      	str	r1, [r4, #20]
 8007ad4:	e7e5      	b.n	8007aa2 <__d2b+0x52>
 8007ad6:	a801      	add	r0, sp, #4
 8007ad8:	f7ff fce8 	bl	80074ac <__lo0bits>
 8007adc:	9b01      	ldr	r3, [sp, #4]
 8007ade:	6163      	str	r3, [r4, #20]
 8007ae0:	2201      	movs	r2, #1
 8007ae2:	6122      	str	r2, [r4, #16]
 8007ae4:	3020      	adds	r0, #32
 8007ae6:	e7e3      	b.n	8007ab0 <__d2b+0x60>
 8007ae8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007aec:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007af0:	f8c9 0000 	str.w	r0, [r9]
 8007af4:	6918      	ldr	r0, [r3, #16]
 8007af6:	f7ff fcb9 	bl	800746c <__hi0bits>
 8007afa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007afe:	e7df      	b.n	8007ac0 <__d2b+0x70>
 8007b00:	08008e5c 	.word	0x08008e5c
 8007b04:	08008eec 	.word	0x08008eec

08007b08 <__ratio>:
 8007b08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b0c:	4688      	mov	r8, r1
 8007b0e:	4669      	mov	r1, sp
 8007b10:	4681      	mov	r9, r0
 8007b12:	f7ff ff4d 	bl	80079b0 <__b2d>
 8007b16:	a901      	add	r1, sp, #4
 8007b18:	4640      	mov	r0, r8
 8007b1a:	ec55 4b10 	vmov	r4, r5, d0
 8007b1e:	f7ff ff47 	bl	80079b0 <__b2d>
 8007b22:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007b26:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007b2a:	eba3 0c02 	sub.w	ip, r3, r2
 8007b2e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007b32:	1a9b      	subs	r3, r3, r2
 8007b34:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007b38:	ec51 0b10 	vmov	r0, r1, d0
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	bfd6      	itet	le
 8007b40:	460a      	movle	r2, r1
 8007b42:	462a      	movgt	r2, r5
 8007b44:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007b48:	468b      	mov	fp, r1
 8007b4a:	462f      	mov	r7, r5
 8007b4c:	bfd4      	ite	le
 8007b4e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8007b52:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007b56:	4620      	mov	r0, r4
 8007b58:	ee10 2a10 	vmov	r2, s0
 8007b5c:	465b      	mov	r3, fp
 8007b5e:	4639      	mov	r1, r7
 8007b60:	f7f8 fe84 	bl	800086c <__aeabi_ddiv>
 8007b64:	ec41 0b10 	vmov	d0, r0, r1
 8007b68:	b003      	add	sp, #12
 8007b6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007b6e <__copybits>:
 8007b6e:	3901      	subs	r1, #1
 8007b70:	b570      	push	{r4, r5, r6, lr}
 8007b72:	1149      	asrs	r1, r1, #5
 8007b74:	6914      	ldr	r4, [r2, #16]
 8007b76:	3101      	adds	r1, #1
 8007b78:	f102 0314 	add.w	r3, r2, #20
 8007b7c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007b80:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007b84:	1f05      	subs	r5, r0, #4
 8007b86:	42a3      	cmp	r3, r4
 8007b88:	d30c      	bcc.n	8007ba4 <__copybits+0x36>
 8007b8a:	1aa3      	subs	r3, r4, r2
 8007b8c:	3b11      	subs	r3, #17
 8007b8e:	f023 0303 	bic.w	r3, r3, #3
 8007b92:	3211      	adds	r2, #17
 8007b94:	42a2      	cmp	r2, r4
 8007b96:	bf88      	it	hi
 8007b98:	2300      	movhi	r3, #0
 8007b9a:	4418      	add	r0, r3
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	4288      	cmp	r0, r1
 8007ba0:	d305      	bcc.n	8007bae <__copybits+0x40>
 8007ba2:	bd70      	pop	{r4, r5, r6, pc}
 8007ba4:	f853 6b04 	ldr.w	r6, [r3], #4
 8007ba8:	f845 6f04 	str.w	r6, [r5, #4]!
 8007bac:	e7eb      	b.n	8007b86 <__copybits+0x18>
 8007bae:	f840 3b04 	str.w	r3, [r0], #4
 8007bb2:	e7f4      	b.n	8007b9e <__copybits+0x30>

08007bb4 <__any_on>:
 8007bb4:	f100 0214 	add.w	r2, r0, #20
 8007bb8:	6900      	ldr	r0, [r0, #16]
 8007bba:	114b      	asrs	r3, r1, #5
 8007bbc:	4298      	cmp	r0, r3
 8007bbe:	b510      	push	{r4, lr}
 8007bc0:	db11      	blt.n	8007be6 <__any_on+0x32>
 8007bc2:	dd0a      	ble.n	8007bda <__any_on+0x26>
 8007bc4:	f011 011f 	ands.w	r1, r1, #31
 8007bc8:	d007      	beq.n	8007bda <__any_on+0x26>
 8007bca:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007bce:	fa24 f001 	lsr.w	r0, r4, r1
 8007bd2:	fa00 f101 	lsl.w	r1, r0, r1
 8007bd6:	428c      	cmp	r4, r1
 8007bd8:	d10b      	bne.n	8007bf2 <__any_on+0x3e>
 8007bda:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007bde:	4293      	cmp	r3, r2
 8007be0:	d803      	bhi.n	8007bea <__any_on+0x36>
 8007be2:	2000      	movs	r0, #0
 8007be4:	bd10      	pop	{r4, pc}
 8007be6:	4603      	mov	r3, r0
 8007be8:	e7f7      	b.n	8007bda <__any_on+0x26>
 8007bea:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007bee:	2900      	cmp	r1, #0
 8007bf0:	d0f5      	beq.n	8007bde <__any_on+0x2a>
 8007bf2:	2001      	movs	r0, #1
 8007bf4:	e7f6      	b.n	8007be4 <__any_on+0x30>

08007bf6 <_calloc_r>:
 8007bf6:	b513      	push	{r0, r1, r4, lr}
 8007bf8:	434a      	muls	r2, r1
 8007bfa:	4611      	mov	r1, r2
 8007bfc:	9201      	str	r2, [sp, #4]
 8007bfe:	f000 f859 	bl	8007cb4 <_malloc_r>
 8007c02:	4604      	mov	r4, r0
 8007c04:	b118      	cbz	r0, 8007c0e <_calloc_r+0x18>
 8007c06:	9a01      	ldr	r2, [sp, #4]
 8007c08:	2100      	movs	r1, #0
 8007c0a:	f7fc fbc9 	bl	80043a0 <memset>
 8007c0e:	4620      	mov	r0, r4
 8007c10:	b002      	add	sp, #8
 8007c12:	bd10      	pop	{r4, pc}

08007c14 <_free_r>:
 8007c14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007c16:	2900      	cmp	r1, #0
 8007c18:	d048      	beq.n	8007cac <_free_r+0x98>
 8007c1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c1e:	9001      	str	r0, [sp, #4]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	f1a1 0404 	sub.w	r4, r1, #4
 8007c26:	bfb8      	it	lt
 8007c28:	18e4      	addlt	r4, r4, r3
 8007c2a:	f000 fa7b 	bl	8008124 <__malloc_lock>
 8007c2e:	4a20      	ldr	r2, [pc, #128]	; (8007cb0 <_free_r+0x9c>)
 8007c30:	9801      	ldr	r0, [sp, #4]
 8007c32:	6813      	ldr	r3, [r2, #0]
 8007c34:	4615      	mov	r5, r2
 8007c36:	b933      	cbnz	r3, 8007c46 <_free_r+0x32>
 8007c38:	6063      	str	r3, [r4, #4]
 8007c3a:	6014      	str	r4, [r2, #0]
 8007c3c:	b003      	add	sp, #12
 8007c3e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007c42:	f000 ba75 	b.w	8008130 <__malloc_unlock>
 8007c46:	42a3      	cmp	r3, r4
 8007c48:	d90b      	bls.n	8007c62 <_free_r+0x4e>
 8007c4a:	6821      	ldr	r1, [r4, #0]
 8007c4c:	1862      	adds	r2, r4, r1
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	bf04      	itt	eq
 8007c52:	681a      	ldreq	r2, [r3, #0]
 8007c54:	685b      	ldreq	r3, [r3, #4]
 8007c56:	6063      	str	r3, [r4, #4]
 8007c58:	bf04      	itt	eq
 8007c5a:	1852      	addeq	r2, r2, r1
 8007c5c:	6022      	streq	r2, [r4, #0]
 8007c5e:	602c      	str	r4, [r5, #0]
 8007c60:	e7ec      	b.n	8007c3c <_free_r+0x28>
 8007c62:	461a      	mov	r2, r3
 8007c64:	685b      	ldr	r3, [r3, #4]
 8007c66:	b10b      	cbz	r3, 8007c6c <_free_r+0x58>
 8007c68:	42a3      	cmp	r3, r4
 8007c6a:	d9fa      	bls.n	8007c62 <_free_r+0x4e>
 8007c6c:	6811      	ldr	r1, [r2, #0]
 8007c6e:	1855      	adds	r5, r2, r1
 8007c70:	42a5      	cmp	r5, r4
 8007c72:	d10b      	bne.n	8007c8c <_free_r+0x78>
 8007c74:	6824      	ldr	r4, [r4, #0]
 8007c76:	4421      	add	r1, r4
 8007c78:	1854      	adds	r4, r2, r1
 8007c7a:	42a3      	cmp	r3, r4
 8007c7c:	6011      	str	r1, [r2, #0]
 8007c7e:	d1dd      	bne.n	8007c3c <_free_r+0x28>
 8007c80:	681c      	ldr	r4, [r3, #0]
 8007c82:	685b      	ldr	r3, [r3, #4]
 8007c84:	6053      	str	r3, [r2, #4]
 8007c86:	4421      	add	r1, r4
 8007c88:	6011      	str	r1, [r2, #0]
 8007c8a:	e7d7      	b.n	8007c3c <_free_r+0x28>
 8007c8c:	d902      	bls.n	8007c94 <_free_r+0x80>
 8007c8e:	230c      	movs	r3, #12
 8007c90:	6003      	str	r3, [r0, #0]
 8007c92:	e7d3      	b.n	8007c3c <_free_r+0x28>
 8007c94:	6825      	ldr	r5, [r4, #0]
 8007c96:	1961      	adds	r1, r4, r5
 8007c98:	428b      	cmp	r3, r1
 8007c9a:	bf04      	itt	eq
 8007c9c:	6819      	ldreq	r1, [r3, #0]
 8007c9e:	685b      	ldreq	r3, [r3, #4]
 8007ca0:	6063      	str	r3, [r4, #4]
 8007ca2:	bf04      	itt	eq
 8007ca4:	1949      	addeq	r1, r1, r5
 8007ca6:	6021      	streq	r1, [r4, #0]
 8007ca8:	6054      	str	r4, [r2, #4]
 8007caa:	e7c7      	b.n	8007c3c <_free_r+0x28>
 8007cac:	b003      	add	sp, #12
 8007cae:	bd30      	pop	{r4, r5, pc}
 8007cb0:	20000200 	.word	0x20000200

08007cb4 <_malloc_r>:
 8007cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cb6:	1ccd      	adds	r5, r1, #3
 8007cb8:	f025 0503 	bic.w	r5, r5, #3
 8007cbc:	3508      	adds	r5, #8
 8007cbe:	2d0c      	cmp	r5, #12
 8007cc0:	bf38      	it	cc
 8007cc2:	250c      	movcc	r5, #12
 8007cc4:	2d00      	cmp	r5, #0
 8007cc6:	4606      	mov	r6, r0
 8007cc8:	db01      	blt.n	8007cce <_malloc_r+0x1a>
 8007cca:	42a9      	cmp	r1, r5
 8007ccc:	d903      	bls.n	8007cd6 <_malloc_r+0x22>
 8007cce:	230c      	movs	r3, #12
 8007cd0:	6033      	str	r3, [r6, #0]
 8007cd2:	2000      	movs	r0, #0
 8007cd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007cd6:	f000 fa25 	bl	8008124 <__malloc_lock>
 8007cda:	4921      	ldr	r1, [pc, #132]	; (8007d60 <_malloc_r+0xac>)
 8007cdc:	680a      	ldr	r2, [r1, #0]
 8007cde:	4614      	mov	r4, r2
 8007ce0:	b99c      	cbnz	r4, 8007d0a <_malloc_r+0x56>
 8007ce2:	4f20      	ldr	r7, [pc, #128]	; (8007d64 <_malloc_r+0xb0>)
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	b923      	cbnz	r3, 8007cf2 <_malloc_r+0x3e>
 8007ce8:	4621      	mov	r1, r4
 8007cea:	4630      	mov	r0, r6
 8007cec:	f000 f9a0 	bl	8008030 <_sbrk_r>
 8007cf0:	6038      	str	r0, [r7, #0]
 8007cf2:	4629      	mov	r1, r5
 8007cf4:	4630      	mov	r0, r6
 8007cf6:	f000 f99b 	bl	8008030 <_sbrk_r>
 8007cfa:	1c43      	adds	r3, r0, #1
 8007cfc:	d123      	bne.n	8007d46 <_malloc_r+0x92>
 8007cfe:	230c      	movs	r3, #12
 8007d00:	6033      	str	r3, [r6, #0]
 8007d02:	4630      	mov	r0, r6
 8007d04:	f000 fa14 	bl	8008130 <__malloc_unlock>
 8007d08:	e7e3      	b.n	8007cd2 <_malloc_r+0x1e>
 8007d0a:	6823      	ldr	r3, [r4, #0]
 8007d0c:	1b5b      	subs	r3, r3, r5
 8007d0e:	d417      	bmi.n	8007d40 <_malloc_r+0x8c>
 8007d10:	2b0b      	cmp	r3, #11
 8007d12:	d903      	bls.n	8007d1c <_malloc_r+0x68>
 8007d14:	6023      	str	r3, [r4, #0]
 8007d16:	441c      	add	r4, r3
 8007d18:	6025      	str	r5, [r4, #0]
 8007d1a:	e004      	b.n	8007d26 <_malloc_r+0x72>
 8007d1c:	6863      	ldr	r3, [r4, #4]
 8007d1e:	42a2      	cmp	r2, r4
 8007d20:	bf0c      	ite	eq
 8007d22:	600b      	streq	r3, [r1, #0]
 8007d24:	6053      	strne	r3, [r2, #4]
 8007d26:	4630      	mov	r0, r6
 8007d28:	f000 fa02 	bl	8008130 <__malloc_unlock>
 8007d2c:	f104 000b 	add.w	r0, r4, #11
 8007d30:	1d23      	adds	r3, r4, #4
 8007d32:	f020 0007 	bic.w	r0, r0, #7
 8007d36:	1ac2      	subs	r2, r0, r3
 8007d38:	d0cc      	beq.n	8007cd4 <_malloc_r+0x20>
 8007d3a:	1a1b      	subs	r3, r3, r0
 8007d3c:	50a3      	str	r3, [r4, r2]
 8007d3e:	e7c9      	b.n	8007cd4 <_malloc_r+0x20>
 8007d40:	4622      	mov	r2, r4
 8007d42:	6864      	ldr	r4, [r4, #4]
 8007d44:	e7cc      	b.n	8007ce0 <_malloc_r+0x2c>
 8007d46:	1cc4      	adds	r4, r0, #3
 8007d48:	f024 0403 	bic.w	r4, r4, #3
 8007d4c:	42a0      	cmp	r0, r4
 8007d4e:	d0e3      	beq.n	8007d18 <_malloc_r+0x64>
 8007d50:	1a21      	subs	r1, r4, r0
 8007d52:	4630      	mov	r0, r6
 8007d54:	f000 f96c 	bl	8008030 <_sbrk_r>
 8007d58:	3001      	adds	r0, #1
 8007d5a:	d1dd      	bne.n	8007d18 <_malloc_r+0x64>
 8007d5c:	e7cf      	b.n	8007cfe <_malloc_r+0x4a>
 8007d5e:	bf00      	nop
 8007d60:	20000200 	.word	0x20000200
 8007d64:	20000204 	.word	0x20000204

08007d68 <__ssputs_r>:
 8007d68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d6c:	688e      	ldr	r6, [r1, #8]
 8007d6e:	429e      	cmp	r6, r3
 8007d70:	4682      	mov	sl, r0
 8007d72:	460c      	mov	r4, r1
 8007d74:	4690      	mov	r8, r2
 8007d76:	461f      	mov	r7, r3
 8007d78:	d838      	bhi.n	8007dec <__ssputs_r+0x84>
 8007d7a:	898a      	ldrh	r2, [r1, #12]
 8007d7c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007d80:	d032      	beq.n	8007de8 <__ssputs_r+0x80>
 8007d82:	6825      	ldr	r5, [r4, #0]
 8007d84:	6909      	ldr	r1, [r1, #16]
 8007d86:	eba5 0901 	sub.w	r9, r5, r1
 8007d8a:	6965      	ldr	r5, [r4, #20]
 8007d8c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007d90:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007d94:	3301      	adds	r3, #1
 8007d96:	444b      	add	r3, r9
 8007d98:	106d      	asrs	r5, r5, #1
 8007d9a:	429d      	cmp	r5, r3
 8007d9c:	bf38      	it	cc
 8007d9e:	461d      	movcc	r5, r3
 8007da0:	0553      	lsls	r3, r2, #21
 8007da2:	d531      	bpl.n	8007e08 <__ssputs_r+0xa0>
 8007da4:	4629      	mov	r1, r5
 8007da6:	f7ff ff85 	bl	8007cb4 <_malloc_r>
 8007daa:	4606      	mov	r6, r0
 8007dac:	b950      	cbnz	r0, 8007dc4 <__ssputs_r+0x5c>
 8007dae:	230c      	movs	r3, #12
 8007db0:	f8ca 3000 	str.w	r3, [sl]
 8007db4:	89a3      	ldrh	r3, [r4, #12]
 8007db6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007dba:	81a3      	strh	r3, [r4, #12]
 8007dbc:	f04f 30ff 	mov.w	r0, #4294967295
 8007dc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007dc4:	6921      	ldr	r1, [r4, #16]
 8007dc6:	464a      	mov	r2, r9
 8007dc8:	f7ff fa4c 	bl	8007264 <memcpy>
 8007dcc:	89a3      	ldrh	r3, [r4, #12]
 8007dce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007dd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007dd6:	81a3      	strh	r3, [r4, #12]
 8007dd8:	6126      	str	r6, [r4, #16]
 8007dda:	6165      	str	r5, [r4, #20]
 8007ddc:	444e      	add	r6, r9
 8007dde:	eba5 0509 	sub.w	r5, r5, r9
 8007de2:	6026      	str	r6, [r4, #0]
 8007de4:	60a5      	str	r5, [r4, #8]
 8007de6:	463e      	mov	r6, r7
 8007de8:	42be      	cmp	r6, r7
 8007dea:	d900      	bls.n	8007dee <__ssputs_r+0x86>
 8007dec:	463e      	mov	r6, r7
 8007dee:	4632      	mov	r2, r6
 8007df0:	6820      	ldr	r0, [r4, #0]
 8007df2:	4641      	mov	r1, r8
 8007df4:	f000 f97c 	bl	80080f0 <memmove>
 8007df8:	68a3      	ldr	r3, [r4, #8]
 8007dfa:	6822      	ldr	r2, [r4, #0]
 8007dfc:	1b9b      	subs	r3, r3, r6
 8007dfe:	4432      	add	r2, r6
 8007e00:	60a3      	str	r3, [r4, #8]
 8007e02:	6022      	str	r2, [r4, #0]
 8007e04:	2000      	movs	r0, #0
 8007e06:	e7db      	b.n	8007dc0 <__ssputs_r+0x58>
 8007e08:	462a      	mov	r2, r5
 8007e0a:	f000 f997 	bl	800813c <_realloc_r>
 8007e0e:	4606      	mov	r6, r0
 8007e10:	2800      	cmp	r0, #0
 8007e12:	d1e1      	bne.n	8007dd8 <__ssputs_r+0x70>
 8007e14:	6921      	ldr	r1, [r4, #16]
 8007e16:	4650      	mov	r0, sl
 8007e18:	f7ff fefc 	bl	8007c14 <_free_r>
 8007e1c:	e7c7      	b.n	8007dae <__ssputs_r+0x46>
	...

08007e20 <_svfiprintf_r>:
 8007e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e24:	4698      	mov	r8, r3
 8007e26:	898b      	ldrh	r3, [r1, #12]
 8007e28:	061b      	lsls	r3, r3, #24
 8007e2a:	b09d      	sub	sp, #116	; 0x74
 8007e2c:	4607      	mov	r7, r0
 8007e2e:	460d      	mov	r5, r1
 8007e30:	4614      	mov	r4, r2
 8007e32:	d50e      	bpl.n	8007e52 <_svfiprintf_r+0x32>
 8007e34:	690b      	ldr	r3, [r1, #16]
 8007e36:	b963      	cbnz	r3, 8007e52 <_svfiprintf_r+0x32>
 8007e38:	2140      	movs	r1, #64	; 0x40
 8007e3a:	f7ff ff3b 	bl	8007cb4 <_malloc_r>
 8007e3e:	6028      	str	r0, [r5, #0]
 8007e40:	6128      	str	r0, [r5, #16]
 8007e42:	b920      	cbnz	r0, 8007e4e <_svfiprintf_r+0x2e>
 8007e44:	230c      	movs	r3, #12
 8007e46:	603b      	str	r3, [r7, #0]
 8007e48:	f04f 30ff 	mov.w	r0, #4294967295
 8007e4c:	e0d1      	b.n	8007ff2 <_svfiprintf_r+0x1d2>
 8007e4e:	2340      	movs	r3, #64	; 0x40
 8007e50:	616b      	str	r3, [r5, #20]
 8007e52:	2300      	movs	r3, #0
 8007e54:	9309      	str	r3, [sp, #36]	; 0x24
 8007e56:	2320      	movs	r3, #32
 8007e58:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007e5c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007e60:	2330      	movs	r3, #48	; 0x30
 8007e62:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800800c <_svfiprintf_r+0x1ec>
 8007e66:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007e6a:	f04f 0901 	mov.w	r9, #1
 8007e6e:	4623      	mov	r3, r4
 8007e70:	469a      	mov	sl, r3
 8007e72:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007e76:	b10a      	cbz	r2, 8007e7c <_svfiprintf_r+0x5c>
 8007e78:	2a25      	cmp	r2, #37	; 0x25
 8007e7a:	d1f9      	bne.n	8007e70 <_svfiprintf_r+0x50>
 8007e7c:	ebba 0b04 	subs.w	fp, sl, r4
 8007e80:	d00b      	beq.n	8007e9a <_svfiprintf_r+0x7a>
 8007e82:	465b      	mov	r3, fp
 8007e84:	4622      	mov	r2, r4
 8007e86:	4629      	mov	r1, r5
 8007e88:	4638      	mov	r0, r7
 8007e8a:	f7ff ff6d 	bl	8007d68 <__ssputs_r>
 8007e8e:	3001      	adds	r0, #1
 8007e90:	f000 80aa 	beq.w	8007fe8 <_svfiprintf_r+0x1c8>
 8007e94:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007e96:	445a      	add	r2, fp
 8007e98:	9209      	str	r2, [sp, #36]	; 0x24
 8007e9a:	f89a 3000 	ldrb.w	r3, [sl]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	f000 80a2 	beq.w	8007fe8 <_svfiprintf_r+0x1c8>
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	f04f 32ff 	mov.w	r2, #4294967295
 8007eaa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007eae:	f10a 0a01 	add.w	sl, sl, #1
 8007eb2:	9304      	str	r3, [sp, #16]
 8007eb4:	9307      	str	r3, [sp, #28]
 8007eb6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007eba:	931a      	str	r3, [sp, #104]	; 0x68
 8007ebc:	4654      	mov	r4, sl
 8007ebe:	2205      	movs	r2, #5
 8007ec0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ec4:	4851      	ldr	r0, [pc, #324]	; (800800c <_svfiprintf_r+0x1ec>)
 8007ec6:	f7f8 f99b 	bl	8000200 <memchr>
 8007eca:	9a04      	ldr	r2, [sp, #16]
 8007ecc:	b9d8      	cbnz	r0, 8007f06 <_svfiprintf_r+0xe6>
 8007ece:	06d0      	lsls	r0, r2, #27
 8007ed0:	bf44      	itt	mi
 8007ed2:	2320      	movmi	r3, #32
 8007ed4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ed8:	0711      	lsls	r1, r2, #28
 8007eda:	bf44      	itt	mi
 8007edc:	232b      	movmi	r3, #43	; 0x2b
 8007ede:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ee2:	f89a 3000 	ldrb.w	r3, [sl]
 8007ee6:	2b2a      	cmp	r3, #42	; 0x2a
 8007ee8:	d015      	beq.n	8007f16 <_svfiprintf_r+0xf6>
 8007eea:	9a07      	ldr	r2, [sp, #28]
 8007eec:	4654      	mov	r4, sl
 8007eee:	2000      	movs	r0, #0
 8007ef0:	f04f 0c0a 	mov.w	ip, #10
 8007ef4:	4621      	mov	r1, r4
 8007ef6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007efa:	3b30      	subs	r3, #48	; 0x30
 8007efc:	2b09      	cmp	r3, #9
 8007efe:	d94e      	bls.n	8007f9e <_svfiprintf_r+0x17e>
 8007f00:	b1b0      	cbz	r0, 8007f30 <_svfiprintf_r+0x110>
 8007f02:	9207      	str	r2, [sp, #28]
 8007f04:	e014      	b.n	8007f30 <_svfiprintf_r+0x110>
 8007f06:	eba0 0308 	sub.w	r3, r0, r8
 8007f0a:	fa09 f303 	lsl.w	r3, r9, r3
 8007f0e:	4313      	orrs	r3, r2
 8007f10:	9304      	str	r3, [sp, #16]
 8007f12:	46a2      	mov	sl, r4
 8007f14:	e7d2      	b.n	8007ebc <_svfiprintf_r+0x9c>
 8007f16:	9b03      	ldr	r3, [sp, #12]
 8007f18:	1d19      	adds	r1, r3, #4
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	9103      	str	r1, [sp, #12]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	bfbb      	ittet	lt
 8007f22:	425b      	neglt	r3, r3
 8007f24:	f042 0202 	orrlt.w	r2, r2, #2
 8007f28:	9307      	strge	r3, [sp, #28]
 8007f2a:	9307      	strlt	r3, [sp, #28]
 8007f2c:	bfb8      	it	lt
 8007f2e:	9204      	strlt	r2, [sp, #16]
 8007f30:	7823      	ldrb	r3, [r4, #0]
 8007f32:	2b2e      	cmp	r3, #46	; 0x2e
 8007f34:	d10c      	bne.n	8007f50 <_svfiprintf_r+0x130>
 8007f36:	7863      	ldrb	r3, [r4, #1]
 8007f38:	2b2a      	cmp	r3, #42	; 0x2a
 8007f3a:	d135      	bne.n	8007fa8 <_svfiprintf_r+0x188>
 8007f3c:	9b03      	ldr	r3, [sp, #12]
 8007f3e:	1d1a      	adds	r2, r3, #4
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	9203      	str	r2, [sp, #12]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	bfb8      	it	lt
 8007f48:	f04f 33ff 	movlt.w	r3, #4294967295
 8007f4c:	3402      	adds	r4, #2
 8007f4e:	9305      	str	r3, [sp, #20]
 8007f50:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800801c <_svfiprintf_r+0x1fc>
 8007f54:	7821      	ldrb	r1, [r4, #0]
 8007f56:	2203      	movs	r2, #3
 8007f58:	4650      	mov	r0, sl
 8007f5a:	f7f8 f951 	bl	8000200 <memchr>
 8007f5e:	b140      	cbz	r0, 8007f72 <_svfiprintf_r+0x152>
 8007f60:	2340      	movs	r3, #64	; 0x40
 8007f62:	eba0 000a 	sub.w	r0, r0, sl
 8007f66:	fa03 f000 	lsl.w	r0, r3, r0
 8007f6a:	9b04      	ldr	r3, [sp, #16]
 8007f6c:	4303      	orrs	r3, r0
 8007f6e:	3401      	adds	r4, #1
 8007f70:	9304      	str	r3, [sp, #16]
 8007f72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f76:	4826      	ldr	r0, [pc, #152]	; (8008010 <_svfiprintf_r+0x1f0>)
 8007f78:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007f7c:	2206      	movs	r2, #6
 8007f7e:	f7f8 f93f 	bl	8000200 <memchr>
 8007f82:	2800      	cmp	r0, #0
 8007f84:	d038      	beq.n	8007ff8 <_svfiprintf_r+0x1d8>
 8007f86:	4b23      	ldr	r3, [pc, #140]	; (8008014 <_svfiprintf_r+0x1f4>)
 8007f88:	bb1b      	cbnz	r3, 8007fd2 <_svfiprintf_r+0x1b2>
 8007f8a:	9b03      	ldr	r3, [sp, #12]
 8007f8c:	3307      	adds	r3, #7
 8007f8e:	f023 0307 	bic.w	r3, r3, #7
 8007f92:	3308      	adds	r3, #8
 8007f94:	9303      	str	r3, [sp, #12]
 8007f96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f98:	4433      	add	r3, r6
 8007f9a:	9309      	str	r3, [sp, #36]	; 0x24
 8007f9c:	e767      	b.n	8007e6e <_svfiprintf_r+0x4e>
 8007f9e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007fa2:	460c      	mov	r4, r1
 8007fa4:	2001      	movs	r0, #1
 8007fa6:	e7a5      	b.n	8007ef4 <_svfiprintf_r+0xd4>
 8007fa8:	2300      	movs	r3, #0
 8007faa:	3401      	adds	r4, #1
 8007fac:	9305      	str	r3, [sp, #20]
 8007fae:	4619      	mov	r1, r3
 8007fb0:	f04f 0c0a 	mov.w	ip, #10
 8007fb4:	4620      	mov	r0, r4
 8007fb6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007fba:	3a30      	subs	r2, #48	; 0x30
 8007fbc:	2a09      	cmp	r2, #9
 8007fbe:	d903      	bls.n	8007fc8 <_svfiprintf_r+0x1a8>
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d0c5      	beq.n	8007f50 <_svfiprintf_r+0x130>
 8007fc4:	9105      	str	r1, [sp, #20]
 8007fc6:	e7c3      	b.n	8007f50 <_svfiprintf_r+0x130>
 8007fc8:	fb0c 2101 	mla	r1, ip, r1, r2
 8007fcc:	4604      	mov	r4, r0
 8007fce:	2301      	movs	r3, #1
 8007fd0:	e7f0      	b.n	8007fb4 <_svfiprintf_r+0x194>
 8007fd2:	ab03      	add	r3, sp, #12
 8007fd4:	9300      	str	r3, [sp, #0]
 8007fd6:	462a      	mov	r2, r5
 8007fd8:	4b0f      	ldr	r3, [pc, #60]	; (8008018 <_svfiprintf_r+0x1f8>)
 8007fda:	a904      	add	r1, sp, #16
 8007fdc:	4638      	mov	r0, r7
 8007fde:	f7fc fa87 	bl	80044f0 <_printf_float>
 8007fe2:	1c42      	adds	r2, r0, #1
 8007fe4:	4606      	mov	r6, r0
 8007fe6:	d1d6      	bne.n	8007f96 <_svfiprintf_r+0x176>
 8007fe8:	89ab      	ldrh	r3, [r5, #12]
 8007fea:	065b      	lsls	r3, r3, #25
 8007fec:	f53f af2c 	bmi.w	8007e48 <_svfiprintf_r+0x28>
 8007ff0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007ff2:	b01d      	add	sp, #116	; 0x74
 8007ff4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ff8:	ab03      	add	r3, sp, #12
 8007ffa:	9300      	str	r3, [sp, #0]
 8007ffc:	462a      	mov	r2, r5
 8007ffe:	4b06      	ldr	r3, [pc, #24]	; (8008018 <_svfiprintf_r+0x1f8>)
 8008000:	a904      	add	r1, sp, #16
 8008002:	4638      	mov	r0, r7
 8008004:	f7fc fd18 	bl	8004a38 <_printf_i>
 8008008:	e7eb      	b.n	8007fe2 <_svfiprintf_r+0x1c2>
 800800a:	bf00      	nop
 800800c:	0800904c 	.word	0x0800904c
 8008010:	08009056 	.word	0x08009056
 8008014:	080044f1 	.word	0x080044f1
 8008018:	08007d69 	.word	0x08007d69
 800801c:	08009052 	.word	0x08009052

08008020 <nan>:
 8008020:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008028 <nan+0x8>
 8008024:	4770      	bx	lr
 8008026:	bf00      	nop
 8008028:	00000000 	.word	0x00000000
 800802c:	7ff80000 	.word	0x7ff80000

08008030 <_sbrk_r>:
 8008030:	b538      	push	{r3, r4, r5, lr}
 8008032:	4d06      	ldr	r5, [pc, #24]	; (800804c <_sbrk_r+0x1c>)
 8008034:	2300      	movs	r3, #0
 8008036:	4604      	mov	r4, r0
 8008038:	4608      	mov	r0, r1
 800803a:	602b      	str	r3, [r5, #0]
 800803c:	f7f9 fb48 	bl	80016d0 <_sbrk>
 8008040:	1c43      	adds	r3, r0, #1
 8008042:	d102      	bne.n	800804a <_sbrk_r+0x1a>
 8008044:	682b      	ldr	r3, [r5, #0]
 8008046:	b103      	cbz	r3, 800804a <_sbrk_r+0x1a>
 8008048:	6023      	str	r3, [r4, #0]
 800804a:	bd38      	pop	{r3, r4, r5, pc}
 800804c:	200002ac 	.word	0x200002ac

08008050 <strncmp>:
 8008050:	b510      	push	{r4, lr}
 8008052:	b16a      	cbz	r2, 8008070 <strncmp+0x20>
 8008054:	3901      	subs	r1, #1
 8008056:	1884      	adds	r4, r0, r2
 8008058:	f810 3b01 	ldrb.w	r3, [r0], #1
 800805c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008060:	4293      	cmp	r3, r2
 8008062:	d103      	bne.n	800806c <strncmp+0x1c>
 8008064:	42a0      	cmp	r0, r4
 8008066:	d001      	beq.n	800806c <strncmp+0x1c>
 8008068:	2b00      	cmp	r3, #0
 800806a:	d1f5      	bne.n	8008058 <strncmp+0x8>
 800806c:	1a98      	subs	r0, r3, r2
 800806e:	bd10      	pop	{r4, pc}
 8008070:	4610      	mov	r0, r2
 8008072:	e7fc      	b.n	800806e <strncmp+0x1e>

08008074 <__ascii_wctomb>:
 8008074:	b149      	cbz	r1, 800808a <__ascii_wctomb+0x16>
 8008076:	2aff      	cmp	r2, #255	; 0xff
 8008078:	bf85      	ittet	hi
 800807a:	238a      	movhi	r3, #138	; 0x8a
 800807c:	6003      	strhi	r3, [r0, #0]
 800807e:	700a      	strbls	r2, [r1, #0]
 8008080:	f04f 30ff 	movhi.w	r0, #4294967295
 8008084:	bf98      	it	ls
 8008086:	2001      	movls	r0, #1
 8008088:	4770      	bx	lr
 800808a:	4608      	mov	r0, r1
 800808c:	4770      	bx	lr
	...

08008090 <__assert_func>:
 8008090:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008092:	4614      	mov	r4, r2
 8008094:	461a      	mov	r2, r3
 8008096:	4b09      	ldr	r3, [pc, #36]	; (80080bc <__assert_func+0x2c>)
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	4605      	mov	r5, r0
 800809c:	68d8      	ldr	r0, [r3, #12]
 800809e:	b14c      	cbz	r4, 80080b4 <__assert_func+0x24>
 80080a0:	4b07      	ldr	r3, [pc, #28]	; (80080c0 <__assert_func+0x30>)
 80080a2:	9100      	str	r1, [sp, #0]
 80080a4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80080a8:	4906      	ldr	r1, [pc, #24]	; (80080c4 <__assert_func+0x34>)
 80080aa:	462b      	mov	r3, r5
 80080ac:	f000 f80e 	bl	80080cc <fiprintf>
 80080b0:	f000 fa84 	bl	80085bc <abort>
 80080b4:	4b04      	ldr	r3, [pc, #16]	; (80080c8 <__assert_func+0x38>)
 80080b6:	461c      	mov	r4, r3
 80080b8:	e7f3      	b.n	80080a2 <__assert_func+0x12>
 80080ba:	bf00      	nop
 80080bc:	2000000c 	.word	0x2000000c
 80080c0:	0800905d 	.word	0x0800905d
 80080c4:	0800906a 	.word	0x0800906a
 80080c8:	08009098 	.word	0x08009098

080080cc <fiprintf>:
 80080cc:	b40e      	push	{r1, r2, r3}
 80080ce:	b503      	push	{r0, r1, lr}
 80080d0:	4601      	mov	r1, r0
 80080d2:	ab03      	add	r3, sp, #12
 80080d4:	4805      	ldr	r0, [pc, #20]	; (80080ec <fiprintf+0x20>)
 80080d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80080da:	6800      	ldr	r0, [r0, #0]
 80080dc:	9301      	str	r3, [sp, #4]
 80080de:	f000 f87d 	bl	80081dc <_vfiprintf_r>
 80080e2:	b002      	add	sp, #8
 80080e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80080e8:	b003      	add	sp, #12
 80080ea:	4770      	bx	lr
 80080ec:	2000000c 	.word	0x2000000c

080080f0 <memmove>:
 80080f0:	4288      	cmp	r0, r1
 80080f2:	b510      	push	{r4, lr}
 80080f4:	eb01 0402 	add.w	r4, r1, r2
 80080f8:	d902      	bls.n	8008100 <memmove+0x10>
 80080fa:	4284      	cmp	r4, r0
 80080fc:	4623      	mov	r3, r4
 80080fe:	d807      	bhi.n	8008110 <memmove+0x20>
 8008100:	1e43      	subs	r3, r0, #1
 8008102:	42a1      	cmp	r1, r4
 8008104:	d008      	beq.n	8008118 <memmove+0x28>
 8008106:	f811 2b01 	ldrb.w	r2, [r1], #1
 800810a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800810e:	e7f8      	b.n	8008102 <memmove+0x12>
 8008110:	4402      	add	r2, r0
 8008112:	4601      	mov	r1, r0
 8008114:	428a      	cmp	r2, r1
 8008116:	d100      	bne.n	800811a <memmove+0x2a>
 8008118:	bd10      	pop	{r4, pc}
 800811a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800811e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008122:	e7f7      	b.n	8008114 <memmove+0x24>

08008124 <__malloc_lock>:
 8008124:	4801      	ldr	r0, [pc, #4]	; (800812c <__malloc_lock+0x8>)
 8008126:	f000 bc09 	b.w	800893c <__retarget_lock_acquire_recursive>
 800812a:	bf00      	nop
 800812c:	200002b4 	.word	0x200002b4

08008130 <__malloc_unlock>:
 8008130:	4801      	ldr	r0, [pc, #4]	; (8008138 <__malloc_unlock+0x8>)
 8008132:	f000 bc04 	b.w	800893e <__retarget_lock_release_recursive>
 8008136:	bf00      	nop
 8008138:	200002b4 	.word	0x200002b4

0800813c <_realloc_r>:
 800813c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800813e:	4607      	mov	r7, r0
 8008140:	4614      	mov	r4, r2
 8008142:	460e      	mov	r6, r1
 8008144:	b921      	cbnz	r1, 8008150 <_realloc_r+0x14>
 8008146:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800814a:	4611      	mov	r1, r2
 800814c:	f7ff bdb2 	b.w	8007cb4 <_malloc_r>
 8008150:	b922      	cbnz	r2, 800815c <_realloc_r+0x20>
 8008152:	f7ff fd5f 	bl	8007c14 <_free_r>
 8008156:	4625      	mov	r5, r4
 8008158:	4628      	mov	r0, r5
 800815a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800815c:	f000 fc54 	bl	8008a08 <_malloc_usable_size_r>
 8008160:	42a0      	cmp	r0, r4
 8008162:	d20f      	bcs.n	8008184 <_realloc_r+0x48>
 8008164:	4621      	mov	r1, r4
 8008166:	4638      	mov	r0, r7
 8008168:	f7ff fda4 	bl	8007cb4 <_malloc_r>
 800816c:	4605      	mov	r5, r0
 800816e:	2800      	cmp	r0, #0
 8008170:	d0f2      	beq.n	8008158 <_realloc_r+0x1c>
 8008172:	4631      	mov	r1, r6
 8008174:	4622      	mov	r2, r4
 8008176:	f7ff f875 	bl	8007264 <memcpy>
 800817a:	4631      	mov	r1, r6
 800817c:	4638      	mov	r0, r7
 800817e:	f7ff fd49 	bl	8007c14 <_free_r>
 8008182:	e7e9      	b.n	8008158 <_realloc_r+0x1c>
 8008184:	4635      	mov	r5, r6
 8008186:	e7e7      	b.n	8008158 <_realloc_r+0x1c>

08008188 <__sfputc_r>:
 8008188:	6893      	ldr	r3, [r2, #8]
 800818a:	3b01      	subs	r3, #1
 800818c:	2b00      	cmp	r3, #0
 800818e:	b410      	push	{r4}
 8008190:	6093      	str	r3, [r2, #8]
 8008192:	da08      	bge.n	80081a6 <__sfputc_r+0x1e>
 8008194:	6994      	ldr	r4, [r2, #24]
 8008196:	42a3      	cmp	r3, r4
 8008198:	db01      	blt.n	800819e <__sfputc_r+0x16>
 800819a:	290a      	cmp	r1, #10
 800819c:	d103      	bne.n	80081a6 <__sfputc_r+0x1e>
 800819e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80081a2:	f000 b94b 	b.w	800843c <__swbuf_r>
 80081a6:	6813      	ldr	r3, [r2, #0]
 80081a8:	1c58      	adds	r0, r3, #1
 80081aa:	6010      	str	r0, [r2, #0]
 80081ac:	7019      	strb	r1, [r3, #0]
 80081ae:	4608      	mov	r0, r1
 80081b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80081b4:	4770      	bx	lr

080081b6 <__sfputs_r>:
 80081b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081b8:	4606      	mov	r6, r0
 80081ba:	460f      	mov	r7, r1
 80081bc:	4614      	mov	r4, r2
 80081be:	18d5      	adds	r5, r2, r3
 80081c0:	42ac      	cmp	r4, r5
 80081c2:	d101      	bne.n	80081c8 <__sfputs_r+0x12>
 80081c4:	2000      	movs	r0, #0
 80081c6:	e007      	b.n	80081d8 <__sfputs_r+0x22>
 80081c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081cc:	463a      	mov	r2, r7
 80081ce:	4630      	mov	r0, r6
 80081d0:	f7ff ffda 	bl	8008188 <__sfputc_r>
 80081d4:	1c43      	adds	r3, r0, #1
 80081d6:	d1f3      	bne.n	80081c0 <__sfputs_r+0xa>
 80081d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080081dc <_vfiprintf_r>:
 80081dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081e0:	460d      	mov	r5, r1
 80081e2:	b09d      	sub	sp, #116	; 0x74
 80081e4:	4614      	mov	r4, r2
 80081e6:	4698      	mov	r8, r3
 80081e8:	4606      	mov	r6, r0
 80081ea:	b118      	cbz	r0, 80081f4 <_vfiprintf_r+0x18>
 80081ec:	6983      	ldr	r3, [r0, #24]
 80081ee:	b90b      	cbnz	r3, 80081f4 <_vfiprintf_r+0x18>
 80081f0:	f000 fb06 	bl	8008800 <__sinit>
 80081f4:	4b89      	ldr	r3, [pc, #548]	; (800841c <_vfiprintf_r+0x240>)
 80081f6:	429d      	cmp	r5, r3
 80081f8:	d11b      	bne.n	8008232 <_vfiprintf_r+0x56>
 80081fa:	6875      	ldr	r5, [r6, #4]
 80081fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80081fe:	07d9      	lsls	r1, r3, #31
 8008200:	d405      	bmi.n	800820e <_vfiprintf_r+0x32>
 8008202:	89ab      	ldrh	r3, [r5, #12]
 8008204:	059a      	lsls	r2, r3, #22
 8008206:	d402      	bmi.n	800820e <_vfiprintf_r+0x32>
 8008208:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800820a:	f000 fb97 	bl	800893c <__retarget_lock_acquire_recursive>
 800820e:	89ab      	ldrh	r3, [r5, #12]
 8008210:	071b      	lsls	r3, r3, #28
 8008212:	d501      	bpl.n	8008218 <_vfiprintf_r+0x3c>
 8008214:	692b      	ldr	r3, [r5, #16]
 8008216:	b9eb      	cbnz	r3, 8008254 <_vfiprintf_r+0x78>
 8008218:	4629      	mov	r1, r5
 800821a:	4630      	mov	r0, r6
 800821c:	f000 f960 	bl	80084e0 <__swsetup_r>
 8008220:	b1c0      	cbz	r0, 8008254 <_vfiprintf_r+0x78>
 8008222:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008224:	07dc      	lsls	r4, r3, #31
 8008226:	d50e      	bpl.n	8008246 <_vfiprintf_r+0x6a>
 8008228:	f04f 30ff 	mov.w	r0, #4294967295
 800822c:	b01d      	add	sp, #116	; 0x74
 800822e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008232:	4b7b      	ldr	r3, [pc, #492]	; (8008420 <_vfiprintf_r+0x244>)
 8008234:	429d      	cmp	r5, r3
 8008236:	d101      	bne.n	800823c <_vfiprintf_r+0x60>
 8008238:	68b5      	ldr	r5, [r6, #8]
 800823a:	e7df      	b.n	80081fc <_vfiprintf_r+0x20>
 800823c:	4b79      	ldr	r3, [pc, #484]	; (8008424 <_vfiprintf_r+0x248>)
 800823e:	429d      	cmp	r5, r3
 8008240:	bf08      	it	eq
 8008242:	68f5      	ldreq	r5, [r6, #12]
 8008244:	e7da      	b.n	80081fc <_vfiprintf_r+0x20>
 8008246:	89ab      	ldrh	r3, [r5, #12]
 8008248:	0598      	lsls	r0, r3, #22
 800824a:	d4ed      	bmi.n	8008228 <_vfiprintf_r+0x4c>
 800824c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800824e:	f000 fb76 	bl	800893e <__retarget_lock_release_recursive>
 8008252:	e7e9      	b.n	8008228 <_vfiprintf_r+0x4c>
 8008254:	2300      	movs	r3, #0
 8008256:	9309      	str	r3, [sp, #36]	; 0x24
 8008258:	2320      	movs	r3, #32
 800825a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800825e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008262:	2330      	movs	r3, #48	; 0x30
 8008264:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008428 <_vfiprintf_r+0x24c>
 8008268:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800826c:	f04f 0901 	mov.w	r9, #1
 8008270:	4623      	mov	r3, r4
 8008272:	469a      	mov	sl, r3
 8008274:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008278:	b10a      	cbz	r2, 800827e <_vfiprintf_r+0xa2>
 800827a:	2a25      	cmp	r2, #37	; 0x25
 800827c:	d1f9      	bne.n	8008272 <_vfiprintf_r+0x96>
 800827e:	ebba 0b04 	subs.w	fp, sl, r4
 8008282:	d00b      	beq.n	800829c <_vfiprintf_r+0xc0>
 8008284:	465b      	mov	r3, fp
 8008286:	4622      	mov	r2, r4
 8008288:	4629      	mov	r1, r5
 800828a:	4630      	mov	r0, r6
 800828c:	f7ff ff93 	bl	80081b6 <__sfputs_r>
 8008290:	3001      	adds	r0, #1
 8008292:	f000 80aa 	beq.w	80083ea <_vfiprintf_r+0x20e>
 8008296:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008298:	445a      	add	r2, fp
 800829a:	9209      	str	r2, [sp, #36]	; 0x24
 800829c:	f89a 3000 	ldrb.w	r3, [sl]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	f000 80a2 	beq.w	80083ea <_vfiprintf_r+0x20e>
 80082a6:	2300      	movs	r3, #0
 80082a8:	f04f 32ff 	mov.w	r2, #4294967295
 80082ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80082b0:	f10a 0a01 	add.w	sl, sl, #1
 80082b4:	9304      	str	r3, [sp, #16]
 80082b6:	9307      	str	r3, [sp, #28]
 80082b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80082bc:	931a      	str	r3, [sp, #104]	; 0x68
 80082be:	4654      	mov	r4, sl
 80082c0:	2205      	movs	r2, #5
 80082c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082c6:	4858      	ldr	r0, [pc, #352]	; (8008428 <_vfiprintf_r+0x24c>)
 80082c8:	f7f7 ff9a 	bl	8000200 <memchr>
 80082cc:	9a04      	ldr	r2, [sp, #16]
 80082ce:	b9d8      	cbnz	r0, 8008308 <_vfiprintf_r+0x12c>
 80082d0:	06d1      	lsls	r1, r2, #27
 80082d2:	bf44      	itt	mi
 80082d4:	2320      	movmi	r3, #32
 80082d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80082da:	0713      	lsls	r3, r2, #28
 80082dc:	bf44      	itt	mi
 80082de:	232b      	movmi	r3, #43	; 0x2b
 80082e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80082e4:	f89a 3000 	ldrb.w	r3, [sl]
 80082e8:	2b2a      	cmp	r3, #42	; 0x2a
 80082ea:	d015      	beq.n	8008318 <_vfiprintf_r+0x13c>
 80082ec:	9a07      	ldr	r2, [sp, #28]
 80082ee:	4654      	mov	r4, sl
 80082f0:	2000      	movs	r0, #0
 80082f2:	f04f 0c0a 	mov.w	ip, #10
 80082f6:	4621      	mov	r1, r4
 80082f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80082fc:	3b30      	subs	r3, #48	; 0x30
 80082fe:	2b09      	cmp	r3, #9
 8008300:	d94e      	bls.n	80083a0 <_vfiprintf_r+0x1c4>
 8008302:	b1b0      	cbz	r0, 8008332 <_vfiprintf_r+0x156>
 8008304:	9207      	str	r2, [sp, #28]
 8008306:	e014      	b.n	8008332 <_vfiprintf_r+0x156>
 8008308:	eba0 0308 	sub.w	r3, r0, r8
 800830c:	fa09 f303 	lsl.w	r3, r9, r3
 8008310:	4313      	orrs	r3, r2
 8008312:	9304      	str	r3, [sp, #16]
 8008314:	46a2      	mov	sl, r4
 8008316:	e7d2      	b.n	80082be <_vfiprintf_r+0xe2>
 8008318:	9b03      	ldr	r3, [sp, #12]
 800831a:	1d19      	adds	r1, r3, #4
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	9103      	str	r1, [sp, #12]
 8008320:	2b00      	cmp	r3, #0
 8008322:	bfbb      	ittet	lt
 8008324:	425b      	neglt	r3, r3
 8008326:	f042 0202 	orrlt.w	r2, r2, #2
 800832a:	9307      	strge	r3, [sp, #28]
 800832c:	9307      	strlt	r3, [sp, #28]
 800832e:	bfb8      	it	lt
 8008330:	9204      	strlt	r2, [sp, #16]
 8008332:	7823      	ldrb	r3, [r4, #0]
 8008334:	2b2e      	cmp	r3, #46	; 0x2e
 8008336:	d10c      	bne.n	8008352 <_vfiprintf_r+0x176>
 8008338:	7863      	ldrb	r3, [r4, #1]
 800833a:	2b2a      	cmp	r3, #42	; 0x2a
 800833c:	d135      	bne.n	80083aa <_vfiprintf_r+0x1ce>
 800833e:	9b03      	ldr	r3, [sp, #12]
 8008340:	1d1a      	adds	r2, r3, #4
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	9203      	str	r2, [sp, #12]
 8008346:	2b00      	cmp	r3, #0
 8008348:	bfb8      	it	lt
 800834a:	f04f 33ff 	movlt.w	r3, #4294967295
 800834e:	3402      	adds	r4, #2
 8008350:	9305      	str	r3, [sp, #20]
 8008352:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008438 <_vfiprintf_r+0x25c>
 8008356:	7821      	ldrb	r1, [r4, #0]
 8008358:	2203      	movs	r2, #3
 800835a:	4650      	mov	r0, sl
 800835c:	f7f7 ff50 	bl	8000200 <memchr>
 8008360:	b140      	cbz	r0, 8008374 <_vfiprintf_r+0x198>
 8008362:	2340      	movs	r3, #64	; 0x40
 8008364:	eba0 000a 	sub.w	r0, r0, sl
 8008368:	fa03 f000 	lsl.w	r0, r3, r0
 800836c:	9b04      	ldr	r3, [sp, #16]
 800836e:	4303      	orrs	r3, r0
 8008370:	3401      	adds	r4, #1
 8008372:	9304      	str	r3, [sp, #16]
 8008374:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008378:	482c      	ldr	r0, [pc, #176]	; (800842c <_vfiprintf_r+0x250>)
 800837a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800837e:	2206      	movs	r2, #6
 8008380:	f7f7 ff3e 	bl	8000200 <memchr>
 8008384:	2800      	cmp	r0, #0
 8008386:	d03f      	beq.n	8008408 <_vfiprintf_r+0x22c>
 8008388:	4b29      	ldr	r3, [pc, #164]	; (8008430 <_vfiprintf_r+0x254>)
 800838a:	bb1b      	cbnz	r3, 80083d4 <_vfiprintf_r+0x1f8>
 800838c:	9b03      	ldr	r3, [sp, #12]
 800838e:	3307      	adds	r3, #7
 8008390:	f023 0307 	bic.w	r3, r3, #7
 8008394:	3308      	adds	r3, #8
 8008396:	9303      	str	r3, [sp, #12]
 8008398:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800839a:	443b      	add	r3, r7
 800839c:	9309      	str	r3, [sp, #36]	; 0x24
 800839e:	e767      	b.n	8008270 <_vfiprintf_r+0x94>
 80083a0:	fb0c 3202 	mla	r2, ip, r2, r3
 80083a4:	460c      	mov	r4, r1
 80083a6:	2001      	movs	r0, #1
 80083a8:	e7a5      	b.n	80082f6 <_vfiprintf_r+0x11a>
 80083aa:	2300      	movs	r3, #0
 80083ac:	3401      	adds	r4, #1
 80083ae:	9305      	str	r3, [sp, #20]
 80083b0:	4619      	mov	r1, r3
 80083b2:	f04f 0c0a 	mov.w	ip, #10
 80083b6:	4620      	mov	r0, r4
 80083b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80083bc:	3a30      	subs	r2, #48	; 0x30
 80083be:	2a09      	cmp	r2, #9
 80083c0:	d903      	bls.n	80083ca <_vfiprintf_r+0x1ee>
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d0c5      	beq.n	8008352 <_vfiprintf_r+0x176>
 80083c6:	9105      	str	r1, [sp, #20]
 80083c8:	e7c3      	b.n	8008352 <_vfiprintf_r+0x176>
 80083ca:	fb0c 2101 	mla	r1, ip, r1, r2
 80083ce:	4604      	mov	r4, r0
 80083d0:	2301      	movs	r3, #1
 80083d2:	e7f0      	b.n	80083b6 <_vfiprintf_r+0x1da>
 80083d4:	ab03      	add	r3, sp, #12
 80083d6:	9300      	str	r3, [sp, #0]
 80083d8:	462a      	mov	r2, r5
 80083da:	4b16      	ldr	r3, [pc, #88]	; (8008434 <_vfiprintf_r+0x258>)
 80083dc:	a904      	add	r1, sp, #16
 80083de:	4630      	mov	r0, r6
 80083e0:	f7fc f886 	bl	80044f0 <_printf_float>
 80083e4:	4607      	mov	r7, r0
 80083e6:	1c78      	adds	r0, r7, #1
 80083e8:	d1d6      	bne.n	8008398 <_vfiprintf_r+0x1bc>
 80083ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80083ec:	07d9      	lsls	r1, r3, #31
 80083ee:	d405      	bmi.n	80083fc <_vfiprintf_r+0x220>
 80083f0:	89ab      	ldrh	r3, [r5, #12]
 80083f2:	059a      	lsls	r2, r3, #22
 80083f4:	d402      	bmi.n	80083fc <_vfiprintf_r+0x220>
 80083f6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80083f8:	f000 faa1 	bl	800893e <__retarget_lock_release_recursive>
 80083fc:	89ab      	ldrh	r3, [r5, #12]
 80083fe:	065b      	lsls	r3, r3, #25
 8008400:	f53f af12 	bmi.w	8008228 <_vfiprintf_r+0x4c>
 8008404:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008406:	e711      	b.n	800822c <_vfiprintf_r+0x50>
 8008408:	ab03      	add	r3, sp, #12
 800840a:	9300      	str	r3, [sp, #0]
 800840c:	462a      	mov	r2, r5
 800840e:	4b09      	ldr	r3, [pc, #36]	; (8008434 <_vfiprintf_r+0x258>)
 8008410:	a904      	add	r1, sp, #16
 8008412:	4630      	mov	r0, r6
 8008414:	f7fc fb10 	bl	8004a38 <_printf_i>
 8008418:	e7e4      	b.n	80083e4 <_vfiprintf_r+0x208>
 800841a:	bf00      	nop
 800841c:	080090bc 	.word	0x080090bc
 8008420:	080090dc 	.word	0x080090dc
 8008424:	0800909c 	.word	0x0800909c
 8008428:	0800904c 	.word	0x0800904c
 800842c:	08009056 	.word	0x08009056
 8008430:	080044f1 	.word	0x080044f1
 8008434:	080081b7 	.word	0x080081b7
 8008438:	08009052 	.word	0x08009052

0800843c <__swbuf_r>:
 800843c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800843e:	460e      	mov	r6, r1
 8008440:	4614      	mov	r4, r2
 8008442:	4605      	mov	r5, r0
 8008444:	b118      	cbz	r0, 800844e <__swbuf_r+0x12>
 8008446:	6983      	ldr	r3, [r0, #24]
 8008448:	b90b      	cbnz	r3, 800844e <__swbuf_r+0x12>
 800844a:	f000 f9d9 	bl	8008800 <__sinit>
 800844e:	4b21      	ldr	r3, [pc, #132]	; (80084d4 <__swbuf_r+0x98>)
 8008450:	429c      	cmp	r4, r3
 8008452:	d12b      	bne.n	80084ac <__swbuf_r+0x70>
 8008454:	686c      	ldr	r4, [r5, #4]
 8008456:	69a3      	ldr	r3, [r4, #24]
 8008458:	60a3      	str	r3, [r4, #8]
 800845a:	89a3      	ldrh	r3, [r4, #12]
 800845c:	071a      	lsls	r2, r3, #28
 800845e:	d52f      	bpl.n	80084c0 <__swbuf_r+0x84>
 8008460:	6923      	ldr	r3, [r4, #16]
 8008462:	b36b      	cbz	r3, 80084c0 <__swbuf_r+0x84>
 8008464:	6923      	ldr	r3, [r4, #16]
 8008466:	6820      	ldr	r0, [r4, #0]
 8008468:	1ac0      	subs	r0, r0, r3
 800846a:	6963      	ldr	r3, [r4, #20]
 800846c:	b2f6      	uxtb	r6, r6
 800846e:	4283      	cmp	r3, r0
 8008470:	4637      	mov	r7, r6
 8008472:	dc04      	bgt.n	800847e <__swbuf_r+0x42>
 8008474:	4621      	mov	r1, r4
 8008476:	4628      	mov	r0, r5
 8008478:	f000 f92e 	bl	80086d8 <_fflush_r>
 800847c:	bb30      	cbnz	r0, 80084cc <__swbuf_r+0x90>
 800847e:	68a3      	ldr	r3, [r4, #8]
 8008480:	3b01      	subs	r3, #1
 8008482:	60a3      	str	r3, [r4, #8]
 8008484:	6823      	ldr	r3, [r4, #0]
 8008486:	1c5a      	adds	r2, r3, #1
 8008488:	6022      	str	r2, [r4, #0]
 800848a:	701e      	strb	r6, [r3, #0]
 800848c:	6963      	ldr	r3, [r4, #20]
 800848e:	3001      	adds	r0, #1
 8008490:	4283      	cmp	r3, r0
 8008492:	d004      	beq.n	800849e <__swbuf_r+0x62>
 8008494:	89a3      	ldrh	r3, [r4, #12]
 8008496:	07db      	lsls	r3, r3, #31
 8008498:	d506      	bpl.n	80084a8 <__swbuf_r+0x6c>
 800849a:	2e0a      	cmp	r6, #10
 800849c:	d104      	bne.n	80084a8 <__swbuf_r+0x6c>
 800849e:	4621      	mov	r1, r4
 80084a0:	4628      	mov	r0, r5
 80084a2:	f000 f919 	bl	80086d8 <_fflush_r>
 80084a6:	b988      	cbnz	r0, 80084cc <__swbuf_r+0x90>
 80084a8:	4638      	mov	r0, r7
 80084aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80084ac:	4b0a      	ldr	r3, [pc, #40]	; (80084d8 <__swbuf_r+0x9c>)
 80084ae:	429c      	cmp	r4, r3
 80084b0:	d101      	bne.n	80084b6 <__swbuf_r+0x7a>
 80084b2:	68ac      	ldr	r4, [r5, #8]
 80084b4:	e7cf      	b.n	8008456 <__swbuf_r+0x1a>
 80084b6:	4b09      	ldr	r3, [pc, #36]	; (80084dc <__swbuf_r+0xa0>)
 80084b8:	429c      	cmp	r4, r3
 80084ba:	bf08      	it	eq
 80084bc:	68ec      	ldreq	r4, [r5, #12]
 80084be:	e7ca      	b.n	8008456 <__swbuf_r+0x1a>
 80084c0:	4621      	mov	r1, r4
 80084c2:	4628      	mov	r0, r5
 80084c4:	f000 f80c 	bl	80084e0 <__swsetup_r>
 80084c8:	2800      	cmp	r0, #0
 80084ca:	d0cb      	beq.n	8008464 <__swbuf_r+0x28>
 80084cc:	f04f 37ff 	mov.w	r7, #4294967295
 80084d0:	e7ea      	b.n	80084a8 <__swbuf_r+0x6c>
 80084d2:	bf00      	nop
 80084d4:	080090bc 	.word	0x080090bc
 80084d8:	080090dc 	.word	0x080090dc
 80084dc:	0800909c 	.word	0x0800909c

080084e0 <__swsetup_r>:
 80084e0:	4b32      	ldr	r3, [pc, #200]	; (80085ac <__swsetup_r+0xcc>)
 80084e2:	b570      	push	{r4, r5, r6, lr}
 80084e4:	681d      	ldr	r5, [r3, #0]
 80084e6:	4606      	mov	r6, r0
 80084e8:	460c      	mov	r4, r1
 80084ea:	b125      	cbz	r5, 80084f6 <__swsetup_r+0x16>
 80084ec:	69ab      	ldr	r3, [r5, #24]
 80084ee:	b913      	cbnz	r3, 80084f6 <__swsetup_r+0x16>
 80084f0:	4628      	mov	r0, r5
 80084f2:	f000 f985 	bl	8008800 <__sinit>
 80084f6:	4b2e      	ldr	r3, [pc, #184]	; (80085b0 <__swsetup_r+0xd0>)
 80084f8:	429c      	cmp	r4, r3
 80084fa:	d10f      	bne.n	800851c <__swsetup_r+0x3c>
 80084fc:	686c      	ldr	r4, [r5, #4]
 80084fe:	89a3      	ldrh	r3, [r4, #12]
 8008500:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008504:	0719      	lsls	r1, r3, #28
 8008506:	d42c      	bmi.n	8008562 <__swsetup_r+0x82>
 8008508:	06dd      	lsls	r5, r3, #27
 800850a:	d411      	bmi.n	8008530 <__swsetup_r+0x50>
 800850c:	2309      	movs	r3, #9
 800850e:	6033      	str	r3, [r6, #0]
 8008510:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008514:	81a3      	strh	r3, [r4, #12]
 8008516:	f04f 30ff 	mov.w	r0, #4294967295
 800851a:	e03e      	b.n	800859a <__swsetup_r+0xba>
 800851c:	4b25      	ldr	r3, [pc, #148]	; (80085b4 <__swsetup_r+0xd4>)
 800851e:	429c      	cmp	r4, r3
 8008520:	d101      	bne.n	8008526 <__swsetup_r+0x46>
 8008522:	68ac      	ldr	r4, [r5, #8]
 8008524:	e7eb      	b.n	80084fe <__swsetup_r+0x1e>
 8008526:	4b24      	ldr	r3, [pc, #144]	; (80085b8 <__swsetup_r+0xd8>)
 8008528:	429c      	cmp	r4, r3
 800852a:	bf08      	it	eq
 800852c:	68ec      	ldreq	r4, [r5, #12]
 800852e:	e7e6      	b.n	80084fe <__swsetup_r+0x1e>
 8008530:	0758      	lsls	r0, r3, #29
 8008532:	d512      	bpl.n	800855a <__swsetup_r+0x7a>
 8008534:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008536:	b141      	cbz	r1, 800854a <__swsetup_r+0x6a>
 8008538:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800853c:	4299      	cmp	r1, r3
 800853e:	d002      	beq.n	8008546 <__swsetup_r+0x66>
 8008540:	4630      	mov	r0, r6
 8008542:	f7ff fb67 	bl	8007c14 <_free_r>
 8008546:	2300      	movs	r3, #0
 8008548:	6363      	str	r3, [r4, #52]	; 0x34
 800854a:	89a3      	ldrh	r3, [r4, #12]
 800854c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008550:	81a3      	strh	r3, [r4, #12]
 8008552:	2300      	movs	r3, #0
 8008554:	6063      	str	r3, [r4, #4]
 8008556:	6923      	ldr	r3, [r4, #16]
 8008558:	6023      	str	r3, [r4, #0]
 800855a:	89a3      	ldrh	r3, [r4, #12]
 800855c:	f043 0308 	orr.w	r3, r3, #8
 8008560:	81a3      	strh	r3, [r4, #12]
 8008562:	6923      	ldr	r3, [r4, #16]
 8008564:	b94b      	cbnz	r3, 800857a <__swsetup_r+0x9a>
 8008566:	89a3      	ldrh	r3, [r4, #12]
 8008568:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800856c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008570:	d003      	beq.n	800857a <__swsetup_r+0x9a>
 8008572:	4621      	mov	r1, r4
 8008574:	4630      	mov	r0, r6
 8008576:	f000 fa07 	bl	8008988 <__smakebuf_r>
 800857a:	89a0      	ldrh	r0, [r4, #12]
 800857c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008580:	f010 0301 	ands.w	r3, r0, #1
 8008584:	d00a      	beq.n	800859c <__swsetup_r+0xbc>
 8008586:	2300      	movs	r3, #0
 8008588:	60a3      	str	r3, [r4, #8]
 800858a:	6963      	ldr	r3, [r4, #20]
 800858c:	425b      	negs	r3, r3
 800858e:	61a3      	str	r3, [r4, #24]
 8008590:	6923      	ldr	r3, [r4, #16]
 8008592:	b943      	cbnz	r3, 80085a6 <__swsetup_r+0xc6>
 8008594:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008598:	d1ba      	bne.n	8008510 <__swsetup_r+0x30>
 800859a:	bd70      	pop	{r4, r5, r6, pc}
 800859c:	0781      	lsls	r1, r0, #30
 800859e:	bf58      	it	pl
 80085a0:	6963      	ldrpl	r3, [r4, #20]
 80085a2:	60a3      	str	r3, [r4, #8]
 80085a4:	e7f4      	b.n	8008590 <__swsetup_r+0xb0>
 80085a6:	2000      	movs	r0, #0
 80085a8:	e7f7      	b.n	800859a <__swsetup_r+0xba>
 80085aa:	bf00      	nop
 80085ac:	2000000c 	.word	0x2000000c
 80085b0:	080090bc 	.word	0x080090bc
 80085b4:	080090dc 	.word	0x080090dc
 80085b8:	0800909c 	.word	0x0800909c

080085bc <abort>:
 80085bc:	b508      	push	{r3, lr}
 80085be:	2006      	movs	r0, #6
 80085c0:	f000 fa52 	bl	8008a68 <raise>
 80085c4:	2001      	movs	r0, #1
 80085c6:	f7f9 f827 	bl	8001618 <_exit>
	...

080085cc <__sflush_r>:
 80085cc:	898a      	ldrh	r2, [r1, #12]
 80085ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085d2:	4605      	mov	r5, r0
 80085d4:	0710      	lsls	r0, r2, #28
 80085d6:	460c      	mov	r4, r1
 80085d8:	d458      	bmi.n	800868c <__sflush_r+0xc0>
 80085da:	684b      	ldr	r3, [r1, #4]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	dc05      	bgt.n	80085ec <__sflush_r+0x20>
 80085e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	dc02      	bgt.n	80085ec <__sflush_r+0x20>
 80085e6:	2000      	movs	r0, #0
 80085e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80085ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80085ee:	2e00      	cmp	r6, #0
 80085f0:	d0f9      	beq.n	80085e6 <__sflush_r+0x1a>
 80085f2:	2300      	movs	r3, #0
 80085f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80085f8:	682f      	ldr	r7, [r5, #0]
 80085fa:	602b      	str	r3, [r5, #0]
 80085fc:	d032      	beq.n	8008664 <__sflush_r+0x98>
 80085fe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008600:	89a3      	ldrh	r3, [r4, #12]
 8008602:	075a      	lsls	r2, r3, #29
 8008604:	d505      	bpl.n	8008612 <__sflush_r+0x46>
 8008606:	6863      	ldr	r3, [r4, #4]
 8008608:	1ac0      	subs	r0, r0, r3
 800860a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800860c:	b10b      	cbz	r3, 8008612 <__sflush_r+0x46>
 800860e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008610:	1ac0      	subs	r0, r0, r3
 8008612:	2300      	movs	r3, #0
 8008614:	4602      	mov	r2, r0
 8008616:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008618:	6a21      	ldr	r1, [r4, #32]
 800861a:	4628      	mov	r0, r5
 800861c:	47b0      	blx	r6
 800861e:	1c43      	adds	r3, r0, #1
 8008620:	89a3      	ldrh	r3, [r4, #12]
 8008622:	d106      	bne.n	8008632 <__sflush_r+0x66>
 8008624:	6829      	ldr	r1, [r5, #0]
 8008626:	291d      	cmp	r1, #29
 8008628:	d82c      	bhi.n	8008684 <__sflush_r+0xb8>
 800862a:	4a2a      	ldr	r2, [pc, #168]	; (80086d4 <__sflush_r+0x108>)
 800862c:	40ca      	lsrs	r2, r1
 800862e:	07d6      	lsls	r6, r2, #31
 8008630:	d528      	bpl.n	8008684 <__sflush_r+0xb8>
 8008632:	2200      	movs	r2, #0
 8008634:	6062      	str	r2, [r4, #4]
 8008636:	04d9      	lsls	r1, r3, #19
 8008638:	6922      	ldr	r2, [r4, #16]
 800863a:	6022      	str	r2, [r4, #0]
 800863c:	d504      	bpl.n	8008648 <__sflush_r+0x7c>
 800863e:	1c42      	adds	r2, r0, #1
 8008640:	d101      	bne.n	8008646 <__sflush_r+0x7a>
 8008642:	682b      	ldr	r3, [r5, #0]
 8008644:	b903      	cbnz	r3, 8008648 <__sflush_r+0x7c>
 8008646:	6560      	str	r0, [r4, #84]	; 0x54
 8008648:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800864a:	602f      	str	r7, [r5, #0]
 800864c:	2900      	cmp	r1, #0
 800864e:	d0ca      	beq.n	80085e6 <__sflush_r+0x1a>
 8008650:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008654:	4299      	cmp	r1, r3
 8008656:	d002      	beq.n	800865e <__sflush_r+0x92>
 8008658:	4628      	mov	r0, r5
 800865a:	f7ff fadb 	bl	8007c14 <_free_r>
 800865e:	2000      	movs	r0, #0
 8008660:	6360      	str	r0, [r4, #52]	; 0x34
 8008662:	e7c1      	b.n	80085e8 <__sflush_r+0x1c>
 8008664:	6a21      	ldr	r1, [r4, #32]
 8008666:	2301      	movs	r3, #1
 8008668:	4628      	mov	r0, r5
 800866a:	47b0      	blx	r6
 800866c:	1c41      	adds	r1, r0, #1
 800866e:	d1c7      	bne.n	8008600 <__sflush_r+0x34>
 8008670:	682b      	ldr	r3, [r5, #0]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d0c4      	beq.n	8008600 <__sflush_r+0x34>
 8008676:	2b1d      	cmp	r3, #29
 8008678:	d001      	beq.n	800867e <__sflush_r+0xb2>
 800867a:	2b16      	cmp	r3, #22
 800867c:	d101      	bne.n	8008682 <__sflush_r+0xb6>
 800867e:	602f      	str	r7, [r5, #0]
 8008680:	e7b1      	b.n	80085e6 <__sflush_r+0x1a>
 8008682:	89a3      	ldrh	r3, [r4, #12]
 8008684:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008688:	81a3      	strh	r3, [r4, #12]
 800868a:	e7ad      	b.n	80085e8 <__sflush_r+0x1c>
 800868c:	690f      	ldr	r7, [r1, #16]
 800868e:	2f00      	cmp	r7, #0
 8008690:	d0a9      	beq.n	80085e6 <__sflush_r+0x1a>
 8008692:	0793      	lsls	r3, r2, #30
 8008694:	680e      	ldr	r6, [r1, #0]
 8008696:	bf08      	it	eq
 8008698:	694b      	ldreq	r3, [r1, #20]
 800869a:	600f      	str	r7, [r1, #0]
 800869c:	bf18      	it	ne
 800869e:	2300      	movne	r3, #0
 80086a0:	eba6 0807 	sub.w	r8, r6, r7
 80086a4:	608b      	str	r3, [r1, #8]
 80086a6:	f1b8 0f00 	cmp.w	r8, #0
 80086aa:	dd9c      	ble.n	80085e6 <__sflush_r+0x1a>
 80086ac:	6a21      	ldr	r1, [r4, #32]
 80086ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80086b0:	4643      	mov	r3, r8
 80086b2:	463a      	mov	r2, r7
 80086b4:	4628      	mov	r0, r5
 80086b6:	47b0      	blx	r6
 80086b8:	2800      	cmp	r0, #0
 80086ba:	dc06      	bgt.n	80086ca <__sflush_r+0xfe>
 80086bc:	89a3      	ldrh	r3, [r4, #12]
 80086be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80086c2:	81a3      	strh	r3, [r4, #12]
 80086c4:	f04f 30ff 	mov.w	r0, #4294967295
 80086c8:	e78e      	b.n	80085e8 <__sflush_r+0x1c>
 80086ca:	4407      	add	r7, r0
 80086cc:	eba8 0800 	sub.w	r8, r8, r0
 80086d0:	e7e9      	b.n	80086a6 <__sflush_r+0xda>
 80086d2:	bf00      	nop
 80086d4:	20400001 	.word	0x20400001

080086d8 <_fflush_r>:
 80086d8:	b538      	push	{r3, r4, r5, lr}
 80086da:	690b      	ldr	r3, [r1, #16]
 80086dc:	4605      	mov	r5, r0
 80086de:	460c      	mov	r4, r1
 80086e0:	b913      	cbnz	r3, 80086e8 <_fflush_r+0x10>
 80086e2:	2500      	movs	r5, #0
 80086e4:	4628      	mov	r0, r5
 80086e6:	bd38      	pop	{r3, r4, r5, pc}
 80086e8:	b118      	cbz	r0, 80086f2 <_fflush_r+0x1a>
 80086ea:	6983      	ldr	r3, [r0, #24]
 80086ec:	b90b      	cbnz	r3, 80086f2 <_fflush_r+0x1a>
 80086ee:	f000 f887 	bl	8008800 <__sinit>
 80086f2:	4b14      	ldr	r3, [pc, #80]	; (8008744 <_fflush_r+0x6c>)
 80086f4:	429c      	cmp	r4, r3
 80086f6:	d11b      	bne.n	8008730 <_fflush_r+0x58>
 80086f8:	686c      	ldr	r4, [r5, #4]
 80086fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d0ef      	beq.n	80086e2 <_fflush_r+0xa>
 8008702:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008704:	07d0      	lsls	r0, r2, #31
 8008706:	d404      	bmi.n	8008712 <_fflush_r+0x3a>
 8008708:	0599      	lsls	r1, r3, #22
 800870a:	d402      	bmi.n	8008712 <_fflush_r+0x3a>
 800870c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800870e:	f000 f915 	bl	800893c <__retarget_lock_acquire_recursive>
 8008712:	4628      	mov	r0, r5
 8008714:	4621      	mov	r1, r4
 8008716:	f7ff ff59 	bl	80085cc <__sflush_r>
 800871a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800871c:	07da      	lsls	r2, r3, #31
 800871e:	4605      	mov	r5, r0
 8008720:	d4e0      	bmi.n	80086e4 <_fflush_r+0xc>
 8008722:	89a3      	ldrh	r3, [r4, #12]
 8008724:	059b      	lsls	r3, r3, #22
 8008726:	d4dd      	bmi.n	80086e4 <_fflush_r+0xc>
 8008728:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800872a:	f000 f908 	bl	800893e <__retarget_lock_release_recursive>
 800872e:	e7d9      	b.n	80086e4 <_fflush_r+0xc>
 8008730:	4b05      	ldr	r3, [pc, #20]	; (8008748 <_fflush_r+0x70>)
 8008732:	429c      	cmp	r4, r3
 8008734:	d101      	bne.n	800873a <_fflush_r+0x62>
 8008736:	68ac      	ldr	r4, [r5, #8]
 8008738:	e7df      	b.n	80086fa <_fflush_r+0x22>
 800873a:	4b04      	ldr	r3, [pc, #16]	; (800874c <_fflush_r+0x74>)
 800873c:	429c      	cmp	r4, r3
 800873e:	bf08      	it	eq
 8008740:	68ec      	ldreq	r4, [r5, #12]
 8008742:	e7da      	b.n	80086fa <_fflush_r+0x22>
 8008744:	080090bc 	.word	0x080090bc
 8008748:	080090dc 	.word	0x080090dc
 800874c:	0800909c 	.word	0x0800909c

08008750 <std>:
 8008750:	2300      	movs	r3, #0
 8008752:	b510      	push	{r4, lr}
 8008754:	4604      	mov	r4, r0
 8008756:	e9c0 3300 	strd	r3, r3, [r0]
 800875a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800875e:	6083      	str	r3, [r0, #8]
 8008760:	8181      	strh	r1, [r0, #12]
 8008762:	6643      	str	r3, [r0, #100]	; 0x64
 8008764:	81c2      	strh	r2, [r0, #14]
 8008766:	6183      	str	r3, [r0, #24]
 8008768:	4619      	mov	r1, r3
 800876a:	2208      	movs	r2, #8
 800876c:	305c      	adds	r0, #92	; 0x5c
 800876e:	f7fb fe17 	bl	80043a0 <memset>
 8008772:	4b05      	ldr	r3, [pc, #20]	; (8008788 <std+0x38>)
 8008774:	6263      	str	r3, [r4, #36]	; 0x24
 8008776:	4b05      	ldr	r3, [pc, #20]	; (800878c <std+0x3c>)
 8008778:	62a3      	str	r3, [r4, #40]	; 0x28
 800877a:	4b05      	ldr	r3, [pc, #20]	; (8008790 <std+0x40>)
 800877c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800877e:	4b05      	ldr	r3, [pc, #20]	; (8008794 <std+0x44>)
 8008780:	6224      	str	r4, [r4, #32]
 8008782:	6323      	str	r3, [r4, #48]	; 0x30
 8008784:	bd10      	pop	{r4, pc}
 8008786:	bf00      	nop
 8008788:	08008aa1 	.word	0x08008aa1
 800878c:	08008ac3 	.word	0x08008ac3
 8008790:	08008afb 	.word	0x08008afb
 8008794:	08008b1f 	.word	0x08008b1f

08008798 <_cleanup_r>:
 8008798:	4901      	ldr	r1, [pc, #4]	; (80087a0 <_cleanup_r+0x8>)
 800879a:	f000 b8af 	b.w	80088fc <_fwalk_reent>
 800879e:	bf00      	nop
 80087a0:	080086d9 	.word	0x080086d9

080087a4 <__sfmoreglue>:
 80087a4:	b570      	push	{r4, r5, r6, lr}
 80087a6:	1e4a      	subs	r2, r1, #1
 80087a8:	2568      	movs	r5, #104	; 0x68
 80087aa:	4355      	muls	r5, r2
 80087ac:	460e      	mov	r6, r1
 80087ae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80087b2:	f7ff fa7f 	bl	8007cb4 <_malloc_r>
 80087b6:	4604      	mov	r4, r0
 80087b8:	b140      	cbz	r0, 80087cc <__sfmoreglue+0x28>
 80087ba:	2100      	movs	r1, #0
 80087bc:	e9c0 1600 	strd	r1, r6, [r0]
 80087c0:	300c      	adds	r0, #12
 80087c2:	60a0      	str	r0, [r4, #8]
 80087c4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80087c8:	f7fb fdea 	bl	80043a0 <memset>
 80087cc:	4620      	mov	r0, r4
 80087ce:	bd70      	pop	{r4, r5, r6, pc}

080087d0 <__sfp_lock_acquire>:
 80087d0:	4801      	ldr	r0, [pc, #4]	; (80087d8 <__sfp_lock_acquire+0x8>)
 80087d2:	f000 b8b3 	b.w	800893c <__retarget_lock_acquire_recursive>
 80087d6:	bf00      	nop
 80087d8:	200002b8 	.word	0x200002b8

080087dc <__sfp_lock_release>:
 80087dc:	4801      	ldr	r0, [pc, #4]	; (80087e4 <__sfp_lock_release+0x8>)
 80087de:	f000 b8ae 	b.w	800893e <__retarget_lock_release_recursive>
 80087e2:	bf00      	nop
 80087e4:	200002b8 	.word	0x200002b8

080087e8 <__sinit_lock_acquire>:
 80087e8:	4801      	ldr	r0, [pc, #4]	; (80087f0 <__sinit_lock_acquire+0x8>)
 80087ea:	f000 b8a7 	b.w	800893c <__retarget_lock_acquire_recursive>
 80087ee:	bf00      	nop
 80087f0:	200002b3 	.word	0x200002b3

080087f4 <__sinit_lock_release>:
 80087f4:	4801      	ldr	r0, [pc, #4]	; (80087fc <__sinit_lock_release+0x8>)
 80087f6:	f000 b8a2 	b.w	800893e <__retarget_lock_release_recursive>
 80087fa:	bf00      	nop
 80087fc:	200002b3 	.word	0x200002b3

08008800 <__sinit>:
 8008800:	b510      	push	{r4, lr}
 8008802:	4604      	mov	r4, r0
 8008804:	f7ff fff0 	bl	80087e8 <__sinit_lock_acquire>
 8008808:	69a3      	ldr	r3, [r4, #24]
 800880a:	b11b      	cbz	r3, 8008814 <__sinit+0x14>
 800880c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008810:	f7ff bff0 	b.w	80087f4 <__sinit_lock_release>
 8008814:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008818:	6523      	str	r3, [r4, #80]	; 0x50
 800881a:	4b13      	ldr	r3, [pc, #76]	; (8008868 <__sinit+0x68>)
 800881c:	4a13      	ldr	r2, [pc, #76]	; (800886c <__sinit+0x6c>)
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	62a2      	str	r2, [r4, #40]	; 0x28
 8008822:	42a3      	cmp	r3, r4
 8008824:	bf04      	itt	eq
 8008826:	2301      	moveq	r3, #1
 8008828:	61a3      	streq	r3, [r4, #24]
 800882a:	4620      	mov	r0, r4
 800882c:	f000 f820 	bl	8008870 <__sfp>
 8008830:	6060      	str	r0, [r4, #4]
 8008832:	4620      	mov	r0, r4
 8008834:	f000 f81c 	bl	8008870 <__sfp>
 8008838:	60a0      	str	r0, [r4, #8]
 800883a:	4620      	mov	r0, r4
 800883c:	f000 f818 	bl	8008870 <__sfp>
 8008840:	2200      	movs	r2, #0
 8008842:	60e0      	str	r0, [r4, #12]
 8008844:	2104      	movs	r1, #4
 8008846:	6860      	ldr	r0, [r4, #4]
 8008848:	f7ff ff82 	bl	8008750 <std>
 800884c:	68a0      	ldr	r0, [r4, #8]
 800884e:	2201      	movs	r2, #1
 8008850:	2109      	movs	r1, #9
 8008852:	f7ff ff7d 	bl	8008750 <std>
 8008856:	68e0      	ldr	r0, [r4, #12]
 8008858:	2202      	movs	r2, #2
 800885a:	2112      	movs	r1, #18
 800885c:	f7ff ff78 	bl	8008750 <std>
 8008860:	2301      	movs	r3, #1
 8008862:	61a3      	str	r3, [r4, #24]
 8008864:	e7d2      	b.n	800880c <__sinit+0xc>
 8008866:	bf00      	nop
 8008868:	08008c44 	.word	0x08008c44
 800886c:	08008799 	.word	0x08008799

08008870 <__sfp>:
 8008870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008872:	4607      	mov	r7, r0
 8008874:	f7ff ffac 	bl	80087d0 <__sfp_lock_acquire>
 8008878:	4b1e      	ldr	r3, [pc, #120]	; (80088f4 <__sfp+0x84>)
 800887a:	681e      	ldr	r6, [r3, #0]
 800887c:	69b3      	ldr	r3, [r6, #24]
 800887e:	b913      	cbnz	r3, 8008886 <__sfp+0x16>
 8008880:	4630      	mov	r0, r6
 8008882:	f7ff ffbd 	bl	8008800 <__sinit>
 8008886:	3648      	adds	r6, #72	; 0x48
 8008888:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800888c:	3b01      	subs	r3, #1
 800888e:	d503      	bpl.n	8008898 <__sfp+0x28>
 8008890:	6833      	ldr	r3, [r6, #0]
 8008892:	b30b      	cbz	r3, 80088d8 <__sfp+0x68>
 8008894:	6836      	ldr	r6, [r6, #0]
 8008896:	e7f7      	b.n	8008888 <__sfp+0x18>
 8008898:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800889c:	b9d5      	cbnz	r5, 80088d4 <__sfp+0x64>
 800889e:	4b16      	ldr	r3, [pc, #88]	; (80088f8 <__sfp+0x88>)
 80088a0:	60e3      	str	r3, [r4, #12]
 80088a2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80088a6:	6665      	str	r5, [r4, #100]	; 0x64
 80088a8:	f000 f847 	bl	800893a <__retarget_lock_init_recursive>
 80088ac:	f7ff ff96 	bl	80087dc <__sfp_lock_release>
 80088b0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80088b4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80088b8:	6025      	str	r5, [r4, #0]
 80088ba:	61a5      	str	r5, [r4, #24]
 80088bc:	2208      	movs	r2, #8
 80088be:	4629      	mov	r1, r5
 80088c0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80088c4:	f7fb fd6c 	bl	80043a0 <memset>
 80088c8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80088cc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80088d0:	4620      	mov	r0, r4
 80088d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80088d4:	3468      	adds	r4, #104	; 0x68
 80088d6:	e7d9      	b.n	800888c <__sfp+0x1c>
 80088d8:	2104      	movs	r1, #4
 80088da:	4638      	mov	r0, r7
 80088dc:	f7ff ff62 	bl	80087a4 <__sfmoreglue>
 80088e0:	4604      	mov	r4, r0
 80088e2:	6030      	str	r0, [r6, #0]
 80088e4:	2800      	cmp	r0, #0
 80088e6:	d1d5      	bne.n	8008894 <__sfp+0x24>
 80088e8:	f7ff ff78 	bl	80087dc <__sfp_lock_release>
 80088ec:	230c      	movs	r3, #12
 80088ee:	603b      	str	r3, [r7, #0]
 80088f0:	e7ee      	b.n	80088d0 <__sfp+0x60>
 80088f2:	bf00      	nop
 80088f4:	08008c44 	.word	0x08008c44
 80088f8:	ffff0001 	.word	0xffff0001

080088fc <_fwalk_reent>:
 80088fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008900:	4606      	mov	r6, r0
 8008902:	4688      	mov	r8, r1
 8008904:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008908:	2700      	movs	r7, #0
 800890a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800890e:	f1b9 0901 	subs.w	r9, r9, #1
 8008912:	d505      	bpl.n	8008920 <_fwalk_reent+0x24>
 8008914:	6824      	ldr	r4, [r4, #0]
 8008916:	2c00      	cmp	r4, #0
 8008918:	d1f7      	bne.n	800890a <_fwalk_reent+0xe>
 800891a:	4638      	mov	r0, r7
 800891c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008920:	89ab      	ldrh	r3, [r5, #12]
 8008922:	2b01      	cmp	r3, #1
 8008924:	d907      	bls.n	8008936 <_fwalk_reent+0x3a>
 8008926:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800892a:	3301      	adds	r3, #1
 800892c:	d003      	beq.n	8008936 <_fwalk_reent+0x3a>
 800892e:	4629      	mov	r1, r5
 8008930:	4630      	mov	r0, r6
 8008932:	47c0      	blx	r8
 8008934:	4307      	orrs	r7, r0
 8008936:	3568      	adds	r5, #104	; 0x68
 8008938:	e7e9      	b.n	800890e <_fwalk_reent+0x12>

0800893a <__retarget_lock_init_recursive>:
 800893a:	4770      	bx	lr

0800893c <__retarget_lock_acquire_recursive>:
 800893c:	4770      	bx	lr

0800893e <__retarget_lock_release_recursive>:
 800893e:	4770      	bx	lr

08008940 <__swhatbuf_r>:
 8008940:	b570      	push	{r4, r5, r6, lr}
 8008942:	460e      	mov	r6, r1
 8008944:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008948:	2900      	cmp	r1, #0
 800894a:	b096      	sub	sp, #88	; 0x58
 800894c:	4614      	mov	r4, r2
 800894e:	461d      	mov	r5, r3
 8008950:	da07      	bge.n	8008962 <__swhatbuf_r+0x22>
 8008952:	2300      	movs	r3, #0
 8008954:	602b      	str	r3, [r5, #0]
 8008956:	89b3      	ldrh	r3, [r6, #12]
 8008958:	061a      	lsls	r2, r3, #24
 800895a:	d410      	bmi.n	800897e <__swhatbuf_r+0x3e>
 800895c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008960:	e00e      	b.n	8008980 <__swhatbuf_r+0x40>
 8008962:	466a      	mov	r2, sp
 8008964:	f000 f902 	bl	8008b6c <_fstat_r>
 8008968:	2800      	cmp	r0, #0
 800896a:	dbf2      	blt.n	8008952 <__swhatbuf_r+0x12>
 800896c:	9a01      	ldr	r2, [sp, #4]
 800896e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008972:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008976:	425a      	negs	r2, r3
 8008978:	415a      	adcs	r2, r3
 800897a:	602a      	str	r2, [r5, #0]
 800897c:	e7ee      	b.n	800895c <__swhatbuf_r+0x1c>
 800897e:	2340      	movs	r3, #64	; 0x40
 8008980:	2000      	movs	r0, #0
 8008982:	6023      	str	r3, [r4, #0]
 8008984:	b016      	add	sp, #88	; 0x58
 8008986:	bd70      	pop	{r4, r5, r6, pc}

08008988 <__smakebuf_r>:
 8008988:	898b      	ldrh	r3, [r1, #12]
 800898a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800898c:	079d      	lsls	r5, r3, #30
 800898e:	4606      	mov	r6, r0
 8008990:	460c      	mov	r4, r1
 8008992:	d507      	bpl.n	80089a4 <__smakebuf_r+0x1c>
 8008994:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008998:	6023      	str	r3, [r4, #0]
 800899a:	6123      	str	r3, [r4, #16]
 800899c:	2301      	movs	r3, #1
 800899e:	6163      	str	r3, [r4, #20]
 80089a0:	b002      	add	sp, #8
 80089a2:	bd70      	pop	{r4, r5, r6, pc}
 80089a4:	ab01      	add	r3, sp, #4
 80089a6:	466a      	mov	r2, sp
 80089a8:	f7ff ffca 	bl	8008940 <__swhatbuf_r>
 80089ac:	9900      	ldr	r1, [sp, #0]
 80089ae:	4605      	mov	r5, r0
 80089b0:	4630      	mov	r0, r6
 80089b2:	f7ff f97f 	bl	8007cb4 <_malloc_r>
 80089b6:	b948      	cbnz	r0, 80089cc <__smakebuf_r+0x44>
 80089b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089bc:	059a      	lsls	r2, r3, #22
 80089be:	d4ef      	bmi.n	80089a0 <__smakebuf_r+0x18>
 80089c0:	f023 0303 	bic.w	r3, r3, #3
 80089c4:	f043 0302 	orr.w	r3, r3, #2
 80089c8:	81a3      	strh	r3, [r4, #12]
 80089ca:	e7e3      	b.n	8008994 <__smakebuf_r+0xc>
 80089cc:	4b0d      	ldr	r3, [pc, #52]	; (8008a04 <__smakebuf_r+0x7c>)
 80089ce:	62b3      	str	r3, [r6, #40]	; 0x28
 80089d0:	89a3      	ldrh	r3, [r4, #12]
 80089d2:	6020      	str	r0, [r4, #0]
 80089d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089d8:	81a3      	strh	r3, [r4, #12]
 80089da:	9b00      	ldr	r3, [sp, #0]
 80089dc:	6163      	str	r3, [r4, #20]
 80089de:	9b01      	ldr	r3, [sp, #4]
 80089e0:	6120      	str	r0, [r4, #16]
 80089e2:	b15b      	cbz	r3, 80089fc <__smakebuf_r+0x74>
 80089e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80089e8:	4630      	mov	r0, r6
 80089ea:	f000 f8d1 	bl	8008b90 <_isatty_r>
 80089ee:	b128      	cbz	r0, 80089fc <__smakebuf_r+0x74>
 80089f0:	89a3      	ldrh	r3, [r4, #12]
 80089f2:	f023 0303 	bic.w	r3, r3, #3
 80089f6:	f043 0301 	orr.w	r3, r3, #1
 80089fa:	81a3      	strh	r3, [r4, #12]
 80089fc:	89a0      	ldrh	r0, [r4, #12]
 80089fe:	4305      	orrs	r5, r0
 8008a00:	81a5      	strh	r5, [r4, #12]
 8008a02:	e7cd      	b.n	80089a0 <__smakebuf_r+0x18>
 8008a04:	08008799 	.word	0x08008799

08008a08 <_malloc_usable_size_r>:
 8008a08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a0c:	1f18      	subs	r0, r3, #4
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	bfbc      	itt	lt
 8008a12:	580b      	ldrlt	r3, [r1, r0]
 8008a14:	18c0      	addlt	r0, r0, r3
 8008a16:	4770      	bx	lr

08008a18 <_raise_r>:
 8008a18:	291f      	cmp	r1, #31
 8008a1a:	b538      	push	{r3, r4, r5, lr}
 8008a1c:	4604      	mov	r4, r0
 8008a1e:	460d      	mov	r5, r1
 8008a20:	d904      	bls.n	8008a2c <_raise_r+0x14>
 8008a22:	2316      	movs	r3, #22
 8008a24:	6003      	str	r3, [r0, #0]
 8008a26:	f04f 30ff 	mov.w	r0, #4294967295
 8008a2a:	bd38      	pop	{r3, r4, r5, pc}
 8008a2c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008a2e:	b112      	cbz	r2, 8008a36 <_raise_r+0x1e>
 8008a30:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008a34:	b94b      	cbnz	r3, 8008a4a <_raise_r+0x32>
 8008a36:	4620      	mov	r0, r4
 8008a38:	f000 f830 	bl	8008a9c <_getpid_r>
 8008a3c:	462a      	mov	r2, r5
 8008a3e:	4601      	mov	r1, r0
 8008a40:	4620      	mov	r0, r4
 8008a42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008a46:	f000 b817 	b.w	8008a78 <_kill_r>
 8008a4a:	2b01      	cmp	r3, #1
 8008a4c:	d00a      	beq.n	8008a64 <_raise_r+0x4c>
 8008a4e:	1c59      	adds	r1, r3, #1
 8008a50:	d103      	bne.n	8008a5a <_raise_r+0x42>
 8008a52:	2316      	movs	r3, #22
 8008a54:	6003      	str	r3, [r0, #0]
 8008a56:	2001      	movs	r0, #1
 8008a58:	e7e7      	b.n	8008a2a <_raise_r+0x12>
 8008a5a:	2400      	movs	r4, #0
 8008a5c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008a60:	4628      	mov	r0, r5
 8008a62:	4798      	blx	r3
 8008a64:	2000      	movs	r0, #0
 8008a66:	e7e0      	b.n	8008a2a <_raise_r+0x12>

08008a68 <raise>:
 8008a68:	4b02      	ldr	r3, [pc, #8]	; (8008a74 <raise+0xc>)
 8008a6a:	4601      	mov	r1, r0
 8008a6c:	6818      	ldr	r0, [r3, #0]
 8008a6e:	f7ff bfd3 	b.w	8008a18 <_raise_r>
 8008a72:	bf00      	nop
 8008a74:	2000000c 	.word	0x2000000c

08008a78 <_kill_r>:
 8008a78:	b538      	push	{r3, r4, r5, lr}
 8008a7a:	4d07      	ldr	r5, [pc, #28]	; (8008a98 <_kill_r+0x20>)
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	4604      	mov	r4, r0
 8008a80:	4608      	mov	r0, r1
 8008a82:	4611      	mov	r1, r2
 8008a84:	602b      	str	r3, [r5, #0]
 8008a86:	f7f8 fdb7 	bl	80015f8 <_kill>
 8008a8a:	1c43      	adds	r3, r0, #1
 8008a8c:	d102      	bne.n	8008a94 <_kill_r+0x1c>
 8008a8e:	682b      	ldr	r3, [r5, #0]
 8008a90:	b103      	cbz	r3, 8008a94 <_kill_r+0x1c>
 8008a92:	6023      	str	r3, [r4, #0]
 8008a94:	bd38      	pop	{r3, r4, r5, pc}
 8008a96:	bf00      	nop
 8008a98:	200002ac 	.word	0x200002ac

08008a9c <_getpid_r>:
 8008a9c:	f7f8 bda4 	b.w	80015e8 <_getpid>

08008aa0 <__sread>:
 8008aa0:	b510      	push	{r4, lr}
 8008aa2:	460c      	mov	r4, r1
 8008aa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008aa8:	f000 f894 	bl	8008bd4 <_read_r>
 8008aac:	2800      	cmp	r0, #0
 8008aae:	bfab      	itete	ge
 8008ab0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008ab2:	89a3      	ldrhlt	r3, [r4, #12]
 8008ab4:	181b      	addge	r3, r3, r0
 8008ab6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008aba:	bfac      	ite	ge
 8008abc:	6563      	strge	r3, [r4, #84]	; 0x54
 8008abe:	81a3      	strhlt	r3, [r4, #12]
 8008ac0:	bd10      	pop	{r4, pc}

08008ac2 <__swrite>:
 8008ac2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ac6:	461f      	mov	r7, r3
 8008ac8:	898b      	ldrh	r3, [r1, #12]
 8008aca:	05db      	lsls	r3, r3, #23
 8008acc:	4605      	mov	r5, r0
 8008ace:	460c      	mov	r4, r1
 8008ad0:	4616      	mov	r6, r2
 8008ad2:	d505      	bpl.n	8008ae0 <__swrite+0x1e>
 8008ad4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ad8:	2302      	movs	r3, #2
 8008ada:	2200      	movs	r2, #0
 8008adc:	f000 f868 	bl	8008bb0 <_lseek_r>
 8008ae0:	89a3      	ldrh	r3, [r4, #12]
 8008ae2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008ae6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008aea:	81a3      	strh	r3, [r4, #12]
 8008aec:	4632      	mov	r2, r6
 8008aee:	463b      	mov	r3, r7
 8008af0:	4628      	mov	r0, r5
 8008af2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008af6:	f000 b817 	b.w	8008b28 <_write_r>

08008afa <__sseek>:
 8008afa:	b510      	push	{r4, lr}
 8008afc:	460c      	mov	r4, r1
 8008afe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b02:	f000 f855 	bl	8008bb0 <_lseek_r>
 8008b06:	1c43      	adds	r3, r0, #1
 8008b08:	89a3      	ldrh	r3, [r4, #12]
 8008b0a:	bf15      	itete	ne
 8008b0c:	6560      	strne	r0, [r4, #84]	; 0x54
 8008b0e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008b12:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008b16:	81a3      	strheq	r3, [r4, #12]
 8008b18:	bf18      	it	ne
 8008b1a:	81a3      	strhne	r3, [r4, #12]
 8008b1c:	bd10      	pop	{r4, pc}

08008b1e <__sclose>:
 8008b1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b22:	f000 b813 	b.w	8008b4c <_close_r>
	...

08008b28 <_write_r>:
 8008b28:	b538      	push	{r3, r4, r5, lr}
 8008b2a:	4d07      	ldr	r5, [pc, #28]	; (8008b48 <_write_r+0x20>)
 8008b2c:	4604      	mov	r4, r0
 8008b2e:	4608      	mov	r0, r1
 8008b30:	4611      	mov	r1, r2
 8008b32:	2200      	movs	r2, #0
 8008b34:	602a      	str	r2, [r5, #0]
 8008b36:	461a      	mov	r2, r3
 8008b38:	f7f8 fc14 	bl	8001364 <_write>
 8008b3c:	1c43      	adds	r3, r0, #1
 8008b3e:	d102      	bne.n	8008b46 <_write_r+0x1e>
 8008b40:	682b      	ldr	r3, [r5, #0]
 8008b42:	b103      	cbz	r3, 8008b46 <_write_r+0x1e>
 8008b44:	6023      	str	r3, [r4, #0]
 8008b46:	bd38      	pop	{r3, r4, r5, pc}
 8008b48:	200002ac 	.word	0x200002ac

08008b4c <_close_r>:
 8008b4c:	b538      	push	{r3, r4, r5, lr}
 8008b4e:	4d06      	ldr	r5, [pc, #24]	; (8008b68 <_close_r+0x1c>)
 8008b50:	2300      	movs	r3, #0
 8008b52:	4604      	mov	r4, r0
 8008b54:	4608      	mov	r0, r1
 8008b56:	602b      	str	r3, [r5, #0]
 8008b58:	f7f8 fd85 	bl	8001666 <_close>
 8008b5c:	1c43      	adds	r3, r0, #1
 8008b5e:	d102      	bne.n	8008b66 <_close_r+0x1a>
 8008b60:	682b      	ldr	r3, [r5, #0]
 8008b62:	b103      	cbz	r3, 8008b66 <_close_r+0x1a>
 8008b64:	6023      	str	r3, [r4, #0]
 8008b66:	bd38      	pop	{r3, r4, r5, pc}
 8008b68:	200002ac 	.word	0x200002ac

08008b6c <_fstat_r>:
 8008b6c:	b538      	push	{r3, r4, r5, lr}
 8008b6e:	4d07      	ldr	r5, [pc, #28]	; (8008b8c <_fstat_r+0x20>)
 8008b70:	2300      	movs	r3, #0
 8008b72:	4604      	mov	r4, r0
 8008b74:	4608      	mov	r0, r1
 8008b76:	4611      	mov	r1, r2
 8008b78:	602b      	str	r3, [r5, #0]
 8008b7a:	f7f8 fd80 	bl	800167e <_fstat>
 8008b7e:	1c43      	adds	r3, r0, #1
 8008b80:	d102      	bne.n	8008b88 <_fstat_r+0x1c>
 8008b82:	682b      	ldr	r3, [r5, #0]
 8008b84:	b103      	cbz	r3, 8008b88 <_fstat_r+0x1c>
 8008b86:	6023      	str	r3, [r4, #0]
 8008b88:	bd38      	pop	{r3, r4, r5, pc}
 8008b8a:	bf00      	nop
 8008b8c:	200002ac 	.word	0x200002ac

08008b90 <_isatty_r>:
 8008b90:	b538      	push	{r3, r4, r5, lr}
 8008b92:	4d06      	ldr	r5, [pc, #24]	; (8008bac <_isatty_r+0x1c>)
 8008b94:	2300      	movs	r3, #0
 8008b96:	4604      	mov	r4, r0
 8008b98:	4608      	mov	r0, r1
 8008b9a:	602b      	str	r3, [r5, #0]
 8008b9c:	f7f8 fd7f 	bl	800169e <_isatty>
 8008ba0:	1c43      	adds	r3, r0, #1
 8008ba2:	d102      	bne.n	8008baa <_isatty_r+0x1a>
 8008ba4:	682b      	ldr	r3, [r5, #0]
 8008ba6:	b103      	cbz	r3, 8008baa <_isatty_r+0x1a>
 8008ba8:	6023      	str	r3, [r4, #0]
 8008baa:	bd38      	pop	{r3, r4, r5, pc}
 8008bac:	200002ac 	.word	0x200002ac

08008bb0 <_lseek_r>:
 8008bb0:	b538      	push	{r3, r4, r5, lr}
 8008bb2:	4d07      	ldr	r5, [pc, #28]	; (8008bd0 <_lseek_r+0x20>)
 8008bb4:	4604      	mov	r4, r0
 8008bb6:	4608      	mov	r0, r1
 8008bb8:	4611      	mov	r1, r2
 8008bba:	2200      	movs	r2, #0
 8008bbc:	602a      	str	r2, [r5, #0]
 8008bbe:	461a      	mov	r2, r3
 8008bc0:	f7f8 fd78 	bl	80016b4 <_lseek>
 8008bc4:	1c43      	adds	r3, r0, #1
 8008bc6:	d102      	bne.n	8008bce <_lseek_r+0x1e>
 8008bc8:	682b      	ldr	r3, [r5, #0]
 8008bca:	b103      	cbz	r3, 8008bce <_lseek_r+0x1e>
 8008bcc:	6023      	str	r3, [r4, #0]
 8008bce:	bd38      	pop	{r3, r4, r5, pc}
 8008bd0:	200002ac 	.word	0x200002ac

08008bd4 <_read_r>:
 8008bd4:	b538      	push	{r3, r4, r5, lr}
 8008bd6:	4d07      	ldr	r5, [pc, #28]	; (8008bf4 <_read_r+0x20>)
 8008bd8:	4604      	mov	r4, r0
 8008bda:	4608      	mov	r0, r1
 8008bdc:	4611      	mov	r1, r2
 8008bde:	2200      	movs	r2, #0
 8008be0:	602a      	str	r2, [r5, #0]
 8008be2:	461a      	mov	r2, r3
 8008be4:	f7f8 fd22 	bl	800162c <_read>
 8008be8:	1c43      	adds	r3, r0, #1
 8008bea:	d102      	bne.n	8008bf2 <_read_r+0x1e>
 8008bec:	682b      	ldr	r3, [r5, #0]
 8008bee:	b103      	cbz	r3, 8008bf2 <_read_r+0x1e>
 8008bf0:	6023      	str	r3, [r4, #0]
 8008bf2:	bd38      	pop	{r3, r4, r5, pc}
 8008bf4:	200002ac 	.word	0x200002ac

08008bf8 <_init>:
 8008bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bfa:	bf00      	nop
 8008bfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bfe:	bc08      	pop	{r3}
 8008c00:	469e      	mov	lr, r3
 8008c02:	4770      	bx	lr

08008c04 <_fini>:
 8008c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c06:	bf00      	nop
 8008c08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c0a:	bc08      	pop	{r3}
 8008c0c:	469e      	mov	lr, r3
 8008c0e:	4770      	bx	lr
