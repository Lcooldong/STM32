
10-1_SPI_F429ZIT6U.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d9c  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08005f48  08005f48  00015f48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f80  08005f80  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005f80  08005f80  00015f80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005f88  08005f88  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f88  08005f88  00015f88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005f8c  08005f8c  00015f8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005f90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000003d0  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200003dc  200003dc  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a6d1  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000036b6  00000000  00000000  0003a70d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014b8  00000000  00000000  0003ddc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001358  00000000  00000000  0003f280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027451  00000000  00000000  000405d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b762  00000000  00000000  00067a29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ec7cb  00000000  00000000  0008318b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0016f956  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000055ec  00000000  00000000  0016f9ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08005f30 	.word	0x08005f30

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	08005f30 	.word	0x08005f30

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b96e 	b.w	80004e0 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468c      	mov	ip, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	f040 8083 	bne.w	8000332 <__udivmoddi4+0x116>
 800022c:	428a      	cmp	r2, r1
 800022e:	4617      	mov	r7, r2
 8000230:	d947      	bls.n	80002c2 <__udivmoddi4+0xa6>
 8000232:	fab2 f282 	clz	r2, r2
 8000236:	b142      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000238:	f1c2 0020 	rsb	r0, r2, #32
 800023c:	fa24 f000 	lsr.w	r0, r4, r0
 8000240:	4091      	lsls	r1, r2
 8000242:	4097      	lsls	r7, r2
 8000244:	ea40 0c01 	orr.w	ip, r0, r1
 8000248:	4094      	lsls	r4, r2
 800024a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800024e:	0c23      	lsrs	r3, r4, #16
 8000250:	fbbc f6f8 	udiv	r6, ip, r8
 8000254:	fa1f fe87 	uxth.w	lr, r7
 8000258:	fb08 c116 	mls	r1, r8, r6, ip
 800025c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000260:	fb06 f10e 	mul.w	r1, r6, lr
 8000264:	4299      	cmp	r1, r3
 8000266:	d909      	bls.n	800027c <__udivmoddi4+0x60>
 8000268:	18fb      	adds	r3, r7, r3
 800026a:	f106 30ff 	add.w	r0, r6, #4294967295
 800026e:	f080 8119 	bcs.w	80004a4 <__udivmoddi4+0x288>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 8116 	bls.w	80004a4 <__udivmoddi4+0x288>
 8000278:	3e02      	subs	r6, #2
 800027a:	443b      	add	r3, r7
 800027c:	1a5b      	subs	r3, r3, r1
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb3 f0f8 	udiv	r0, r3, r8
 8000284:	fb08 3310 	mls	r3, r8, r0, r3
 8000288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000290:	45a6      	cmp	lr, r4
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x8c>
 8000294:	193c      	adds	r4, r7, r4
 8000296:	f100 33ff 	add.w	r3, r0, #4294967295
 800029a:	f080 8105 	bcs.w	80004a8 <__udivmoddi4+0x28c>
 800029e:	45a6      	cmp	lr, r4
 80002a0:	f240 8102 	bls.w	80004a8 <__udivmoddi4+0x28c>
 80002a4:	3802      	subs	r0, #2
 80002a6:	443c      	add	r4, r7
 80002a8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ac:	eba4 040e 	sub.w	r4, r4, lr
 80002b0:	2600      	movs	r6, #0
 80002b2:	b11d      	cbz	r5, 80002bc <__udivmoddi4+0xa0>
 80002b4:	40d4      	lsrs	r4, r2
 80002b6:	2300      	movs	r3, #0
 80002b8:	e9c5 4300 	strd	r4, r3, [r5]
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	b902      	cbnz	r2, 80002c6 <__udivmoddi4+0xaa>
 80002c4:	deff      	udf	#255	; 0xff
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	2a00      	cmp	r2, #0
 80002cc:	d150      	bne.n	8000370 <__udivmoddi4+0x154>
 80002ce:	1bcb      	subs	r3, r1, r7
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f f887 	uxth.w	r8, r7
 80002d8:	2601      	movs	r6, #1
 80002da:	fbb3 fcfe 	udiv	ip, r3, lr
 80002de:	0c21      	lsrs	r1, r4, #16
 80002e0:	fb0e 331c 	mls	r3, lr, ip, r3
 80002e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002e8:	fb08 f30c 	mul.w	r3, r8, ip
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d907      	bls.n	8000300 <__udivmoddi4+0xe4>
 80002f0:	1879      	adds	r1, r7, r1
 80002f2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002f6:	d202      	bcs.n	80002fe <__udivmoddi4+0xe2>
 80002f8:	428b      	cmp	r3, r1
 80002fa:	f200 80e9 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 80002fe:	4684      	mov	ip, r0
 8000300:	1ac9      	subs	r1, r1, r3
 8000302:	b2a3      	uxth	r3, r4
 8000304:	fbb1 f0fe 	udiv	r0, r1, lr
 8000308:	fb0e 1110 	mls	r1, lr, r0, r1
 800030c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000310:	fb08 f800 	mul.w	r8, r8, r0
 8000314:	45a0      	cmp	r8, r4
 8000316:	d907      	bls.n	8000328 <__udivmoddi4+0x10c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x10a>
 8000320:	45a0      	cmp	r8, r4
 8000322:	f200 80d9 	bhi.w	80004d8 <__udivmoddi4+0x2bc>
 8000326:	4618      	mov	r0, r3
 8000328:	eba4 0408 	sub.w	r4, r4, r8
 800032c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000330:	e7bf      	b.n	80002b2 <__udivmoddi4+0x96>
 8000332:	428b      	cmp	r3, r1
 8000334:	d909      	bls.n	800034a <__udivmoddi4+0x12e>
 8000336:	2d00      	cmp	r5, #0
 8000338:	f000 80b1 	beq.w	800049e <__udivmoddi4+0x282>
 800033c:	2600      	movs	r6, #0
 800033e:	e9c5 0100 	strd	r0, r1, [r5]
 8000342:	4630      	mov	r0, r6
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	fab3 f683 	clz	r6, r3
 800034e:	2e00      	cmp	r6, #0
 8000350:	d14a      	bne.n	80003e8 <__udivmoddi4+0x1cc>
 8000352:	428b      	cmp	r3, r1
 8000354:	d302      	bcc.n	800035c <__udivmoddi4+0x140>
 8000356:	4282      	cmp	r2, r0
 8000358:	f200 80b8 	bhi.w	80004cc <__udivmoddi4+0x2b0>
 800035c:	1a84      	subs	r4, r0, r2
 800035e:	eb61 0103 	sbc.w	r1, r1, r3
 8000362:	2001      	movs	r0, #1
 8000364:	468c      	mov	ip, r1
 8000366:	2d00      	cmp	r5, #0
 8000368:	d0a8      	beq.n	80002bc <__udivmoddi4+0xa0>
 800036a:	e9c5 4c00 	strd	r4, ip, [r5]
 800036e:	e7a5      	b.n	80002bc <__udivmoddi4+0xa0>
 8000370:	f1c2 0320 	rsb	r3, r2, #32
 8000374:	fa20 f603 	lsr.w	r6, r0, r3
 8000378:	4097      	lsls	r7, r2
 800037a:	fa01 f002 	lsl.w	r0, r1, r2
 800037e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000382:	40d9      	lsrs	r1, r3
 8000384:	4330      	orrs	r0, r6
 8000386:	0c03      	lsrs	r3, r0, #16
 8000388:	fbb1 f6fe 	udiv	r6, r1, lr
 800038c:	fa1f f887 	uxth.w	r8, r7
 8000390:	fb0e 1116 	mls	r1, lr, r6, r1
 8000394:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000398:	fb06 f108 	mul.w	r1, r6, r8
 800039c:	4299      	cmp	r1, r3
 800039e:	fa04 f402 	lsl.w	r4, r4, r2
 80003a2:	d909      	bls.n	80003b8 <__udivmoddi4+0x19c>
 80003a4:	18fb      	adds	r3, r7, r3
 80003a6:	f106 3cff 	add.w	ip, r6, #4294967295
 80003aa:	f080 808d 	bcs.w	80004c8 <__udivmoddi4+0x2ac>
 80003ae:	4299      	cmp	r1, r3
 80003b0:	f240 808a 	bls.w	80004c8 <__udivmoddi4+0x2ac>
 80003b4:	3e02      	subs	r6, #2
 80003b6:	443b      	add	r3, r7
 80003b8:	1a5b      	subs	r3, r3, r1
 80003ba:	b281      	uxth	r1, r0
 80003bc:	fbb3 f0fe 	udiv	r0, r3, lr
 80003c0:	fb0e 3310 	mls	r3, lr, r0, r3
 80003c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003c8:	fb00 f308 	mul.w	r3, r0, r8
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d907      	bls.n	80003e0 <__udivmoddi4+0x1c4>
 80003d0:	1879      	adds	r1, r7, r1
 80003d2:	f100 3cff 	add.w	ip, r0, #4294967295
 80003d6:	d273      	bcs.n	80004c0 <__udivmoddi4+0x2a4>
 80003d8:	428b      	cmp	r3, r1
 80003da:	d971      	bls.n	80004c0 <__udivmoddi4+0x2a4>
 80003dc:	3802      	subs	r0, #2
 80003de:	4439      	add	r1, r7
 80003e0:	1acb      	subs	r3, r1, r3
 80003e2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003e6:	e778      	b.n	80002da <__udivmoddi4+0xbe>
 80003e8:	f1c6 0c20 	rsb	ip, r6, #32
 80003ec:	fa03 f406 	lsl.w	r4, r3, r6
 80003f0:	fa22 f30c 	lsr.w	r3, r2, ip
 80003f4:	431c      	orrs	r4, r3
 80003f6:	fa20 f70c 	lsr.w	r7, r0, ip
 80003fa:	fa01 f306 	lsl.w	r3, r1, r6
 80003fe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000402:	fa21 f10c 	lsr.w	r1, r1, ip
 8000406:	431f      	orrs	r7, r3
 8000408:	0c3b      	lsrs	r3, r7, #16
 800040a:	fbb1 f9fe 	udiv	r9, r1, lr
 800040e:	fa1f f884 	uxth.w	r8, r4
 8000412:	fb0e 1119 	mls	r1, lr, r9, r1
 8000416:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800041a:	fb09 fa08 	mul.w	sl, r9, r8
 800041e:	458a      	cmp	sl, r1
 8000420:	fa02 f206 	lsl.w	r2, r2, r6
 8000424:	fa00 f306 	lsl.w	r3, r0, r6
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x220>
 800042a:	1861      	adds	r1, r4, r1
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000430:	d248      	bcs.n	80004c4 <__udivmoddi4+0x2a8>
 8000432:	458a      	cmp	sl, r1
 8000434:	d946      	bls.n	80004c4 <__udivmoddi4+0x2a8>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	4421      	add	r1, r4
 800043c:	eba1 010a 	sub.w	r1, r1, sl
 8000440:	b2bf      	uxth	r7, r7
 8000442:	fbb1 f0fe 	udiv	r0, r1, lr
 8000446:	fb0e 1110 	mls	r1, lr, r0, r1
 800044a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45b8      	cmp	r8, r7
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x24a>
 8000456:	19e7      	adds	r7, r4, r7
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d22e      	bcs.n	80004bc <__udivmoddi4+0x2a0>
 800045e:	45b8      	cmp	r8, r7
 8000460:	d92c      	bls.n	80004bc <__udivmoddi4+0x2a0>
 8000462:	3802      	subs	r0, #2
 8000464:	4427      	add	r7, r4
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba7 0708 	sub.w	r7, r7, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454f      	cmp	r7, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	4649      	mov	r1, r9
 8000478:	d31a      	bcc.n	80004b0 <__udivmoddi4+0x294>
 800047a:	d017      	beq.n	80004ac <__udivmoddi4+0x290>
 800047c:	b15d      	cbz	r5, 8000496 <__udivmoddi4+0x27a>
 800047e:	ebb3 020e 	subs.w	r2, r3, lr
 8000482:	eb67 0701 	sbc.w	r7, r7, r1
 8000486:	fa07 fc0c 	lsl.w	ip, r7, ip
 800048a:	40f2      	lsrs	r2, r6
 800048c:	ea4c 0202 	orr.w	r2, ip, r2
 8000490:	40f7      	lsrs	r7, r6
 8000492:	e9c5 2700 	strd	r2, r7, [r5]
 8000496:	2600      	movs	r6, #0
 8000498:	4631      	mov	r1, r6
 800049a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049e:	462e      	mov	r6, r5
 80004a0:	4628      	mov	r0, r5
 80004a2:	e70b      	b.n	80002bc <__udivmoddi4+0xa0>
 80004a4:	4606      	mov	r6, r0
 80004a6:	e6e9      	b.n	800027c <__udivmoddi4+0x60>
 80004a8:	4618      	mov	r0, r3
 80004aa:	e6fd      	b.n	80002a8 <__udivmoddi4+0x8c>
 80004ac:	4543      	cmp	r3, r8
 80004ae:	d2e5      	bcs.n	800047c <__udivmoddi4+0x260>
 80004b0:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b4:	eb69 0104 	sbc.w	r1, r9, r4
 80004b8:	3801      	subs	r0, #1
 80004ba:	e7df      	b.n	800047c <__udivmoddi4+0x260>
 80004bc:	4608      	mov	r0, r1
 80004be:	e7d2      	b.n	8000466 <__udivmoddi4+0x24a>
 80004c0:	4660      	mov	r0, ip
 80004c2:	e78d      	b.n	80003e0 <__udivmoddi4+0x1c4>
 80004c4:	4681      	mov	r9, r0
 80004c6:	e7b9      	b.n	800043c <__udivmoddi4+0x220>
 80004c8:	4666      	mov	r6, ip
 80004ca:	e775      	b.n	80003b8 <__udivmoddi4+0x19c>
 80004cc:	4630      	mov	r0, r6
 80004ce:	e74a      	b.n	8000366 <__udivmoddi4+0x14a>
 80004d0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d4:	4439      	add	r1, r7
 80004d6:	e713      	b.n	8000300 <__udivmoddi4+0xe4>
 80004d8:	3802      	subs	r0, #2
 80004da:	443c      	add	r4, r7
 80004dc:	e724      	b.n	8000328 <__udivmoddi4+0x10c>
 80004de:	bf00      	nop

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <VS1003_SPI_Init>:
uint8_t vs1003ram[5] = {0, 0, 0, 0, 250};

SPI_HandleTypeDef hspi2;

void VS1003_SPI_Init(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b082      	sub	sp, #8
 80004e8:	af00      	add	r7, sp, #0
    __HAL_RCC_SPI2_CLK_ENABLE();
 80004ea:	2300      	movs	r3, #0
 80004ec:	607b      	str	r3, [r7, #4]
 80004ee:	4b20      	ldr	r3, [pc, #128]	; (8000570 <VS1003_SPI_Init+0x8c>)
 80004f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80004f2:	4a1f      	ldr	r2, [pc, #124]	; (8000570 <VS1003_SPI_Init+0x8c>)
 80004f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004f8:	6413      	str	r3, [r2, #64]	; 0x40
 80004fa:	4b1d      	ldr	r3, [pc, #116]	; (8000570 <VS1003_SPI_Init+0x8c>)
 80004fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80004fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000502:	607b      	str	r3, [r7, #4]
 8000504:	687b      	ldr	r3, [r7, #4]

    hspi2.Instance = SPI2;
 8000506:	4b1b      	ldr	r3, [pc, #108]	; (8000574 <VS1003_SPI_Init+0x90>)
 8000508:	4a1b      	ldr	r2, [pc, #108]	; (8000578 <VS1003_SPI_Init+0x94>)
 800050a:	601a      	str	r2, [r3, #0]
    hspi2.Init.Mode = SPI_MODE_MASTER;
 800050c:	4b19      	ldr	r3, [pc, #100]	; (8000574 <VS1003_SPI_Init+0x90>)
 800050e:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000512:	605a      	str	r2, [r3, #4]
    hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000514:	4b17      	ldr	r3, [pc, #92]	; (8000574 <VS1003_SPI_Init+0x90>)
 8000516:	2200      	movs	r2, #0
 8000518:	609a      	str	r2, [r3, #8]
    hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800051a:	4b16      	ldr	r3, [pc, #88]	; (8000574 <VS1003_SPI_Init+0x90>)
 800051c:	2200      	movs	r2, #0
 800051e:	60da      	str	r2, [r3, #12]
    hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000520:	4b14      	ldr	r3, [pc, #80]	; (8000574 <VS1003_SPI_Init+0x90>)
 8000522:	2202      	movs	r2, #2
 8000524:	611a      	str	r2, [r3, #16]
    hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000526:	4b13      	ldr	r3, [pc, #76]	; (8000574 <VS1003_SPI_Init+0x90>)
 8000528:	2201      	movs	r2, #1
 800052a:	615a      	str	r2, [r3, #20]
    hspi2.Init.NSS = SPI_NSS_SOFT;
 800052c:	4b11      	ldr	r3, [pc, #68]	; (8000574 <VS1003_SPI_Init+0x90>)
 800052e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000532:	619a      	str	r2, [r3, #24]
    hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000534:	4b0f      	ldr	r3, [pc, #60]	; (8000574 <VS1003_SPI_Init+0x90>)
 8000536:	2210      	movs	r2, #16
 8000538:	61da      	str	r2, [r3, #28]
    hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800053a:	4b0e      	ldr	r3, [pc, #56]	; (8000574 <VS1003_SPI_Init+0x90>)
 800053c:	2200      	movs	r2, #0
 800053e:	621a      	str	r2, [r3, #32]
    hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000540:	4b0c      	ldr	r3, [pc, #48]	; (8000574 <VS1003_SPI_Init+0x90>)
 8000542:	2200      	movs	r2, #0
 8000544:	625a      	str	r2, [r3, #36]	; 0x24
    hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000546:	4b0b      	ldr	r3, [pc, #44]	; (8000574 <VS1003_SPI_Init+0x90>)
 8000548:	2200      	movs	r2, #0
 800054a:	629a      	str	r2, [r3, #40]	; 0x28
    hspi2.Init.CRCPolynomial = 0;
 800054c:	4b09      	ldr	r3, [pc, #36]	; (8000574 <VS1003_SPI_Init+0x90>)
 800054e:	2200      	movs	r2, #0
 8000550:	62da      	str	r2, [r3, #44]	; 0x2c

    if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000552:	4808      	ldr	r0, [pc, #32]	; (8000574 <VS1003_SPI_Init+0x90>)
 8000554:	f003 fc7c 	bl	8003e50 <HAL_SPI_Init>
 8000558:	4603      	mov	r3, r0
 800055a:	2b00      	cmp	r3, #0
 800055c:	d003      	beq.n	8000566 <VS1003_SPI_Init+0x82>
    {
    	Error_Handler(__FILE__, __LINE__);
 800055e:	211b      	movs	r1, #27
 8000560:	4806      	ldr	r0, [pc, #24]	; (800057c <VS1003_SPI_Init+0x98>)
 8000562:	f000 fe2d 	bl	80011c0 <Error_Handler>
    }
}
 8000566:	bf00      	nop
 8000568:	3708      	adds	r7, #8
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	40023800 	.word	0x40023800
 8000574:	20000028 	.word	0x20000028
 8000578:	40003800 	.word	0x40003800
 800057c:	08005f48 	.word	0x08005f48

08000580 <VS1003_Init>:


void VS1003_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b088      	sub	sp, #32
 8000584:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct;

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000586:	2300      	movs	r3, #0
 8000588:	60bb      	str	r3, [r7, #8]
 800058a:	4b40      	ldr	r3, [pc, #256]	; (800068c <VS1003_Init+0x10c>)
 800058c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058e:	4a3f      	ldr	r2, [pc, #252]	; (800068c <VS1003_Init+0x10c>)
 8000590:	f043 0301 	orr.w	r3, r3, #1
 8000594:	6313      	str	r3, [r2, #48]	; 0x30
 8000596:	4b3d      	ldr	r3, [pc, #244]	; (800068c <VS1003_Init+0x10c>)
 8000598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059a:	f003 0301 	and.w	r3, r3, #1
 800059e:	60bb      	str	r3, [r7, #8]
 80005a0:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005a2:	2300      	movs	r3, #0
 80005a4:	607b      	str	r3, [r7, #4]
 80005a6:	4b39      	ldr	r3, [pc, #228]	; (800068c <VS1003_Init+0x10c>)
 80005a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005aa:	4a38      	ldr	r2, [pc, #224]	; (800068c <VS1003_Init+0x10c>)
 80005ac:	f043 0302 	orr.w	r3, r3, #2
 80005b0:	6313      	str	r3, [r2, #48]	; 0x30
 80005b2:	4b36      	ldr	r3, [pc, #216]	; (800068c <VS1003_Init+0x10c>)
 80005b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b6:	f003 0302 	and.w	r3, r3, #2
 80005ba:	607b      	str	r3, [r7, #4]
 80005bc:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80005be:	2300      	movs	r3, #0
 80005c0:	603b      	str	r3, [r7, #0]
 80005c2:	4b32      	ldr	r3, [pc, #200]	; (800068c <VS1003_Init+0x10c>)
 80005c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c6:	4a31      	ldr	r2, [pc, #196]	; (800068c <VS1003_Init+0x10c>)
 80005c8:	f043 0304 	orr.w	r3, r3, #4
 80005cc:	6313      	str	r3, [r2, #48]	; 0x30
 80005ce:	4b2f      	ldr	r3, [pc, #188]	; (800068c <VS1003_Init+0x10c>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d2:	f003 0304 	and.w	r3, r3, #4
 80005d6:	603b      	str	r3, [r7, #0]
 80005d8:	683b      	ldr	r3, [r7, #0]

    /* /CS */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80005da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80005de:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005e0:	2301      	movs	r3, #1
 80005e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e4:	2300      	movs	r3, #0
 80005e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005e8:	2303      	movs	r3, #3
 80005ea:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005ec:	f107 030c 	add.w	r3, r7, #12
 80005f0:	4619      	mov	r1, r3
 80005f2:	4827      	ldr	r0, [pc, #156]	; (8000690 <VS1003_Init+0x110>)
 80005f4:	f002 fba6 	bl	8002d44 <HAL_GPIO_Init>


    /* XDCS */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80005f8:	2310      	movs	r3, #16
 80005fa:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005fc:	f107 030c 	add.w	r3, r7, #12
 8000600:	4619      	mov	r1, r3
 8000602:	4824      	ldr	r0, [pc, #144]	; (8000694 <VS1003_Init+0x114>)
 8000604:	f002 fb9e 	bl	8002d44 <HAL_GPIO_Init>

    /* XRESET */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000608:	2340      	movs	r3, #64	; 0x40
 800060a:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800060c:	f107 030c 	add.w	r3, r7, #12
 8000610:	4619      	mov	r1, r3
 8000612:	4820      	ldr	r0, [pc, #128]	; (8000694 <VS1003_Init+0x114>)
 8000614:	f002 fb96 	bl	8002d44 <HAL_GPIO_Init>

    /* DREQ */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000618:	2380      	movs	r3, #128	; 0x80
 800061a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800061c:	2300      	movs	r3, #0
 800061e:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000620:	f107 030c 	add.w	r3, r7, #12
 8000624:	4619      	mov	r1, r3
 8000626:	481c      	ldr	r0, [pc, #112]	; (8000698 <VS1003_Init+0x118>)
 8000628:	f002 fb8c 	bl	8002d44 <HAL_GPIO_Init>
    PB10  ----> SPI2_SCK
    PB14  ----> SPI2_MISO
    PB15  ----> SPI2_MOSI
    */

    GPIO_InitStruct.Pin = GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
 800062c:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8000630:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000632:	2302      	movs	r3, #2
 8000634:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000636:	2300      	movs	r3, #0
 8000638:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800063a:	2303      	movs	r3, #3
 800063c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800063e:	2305      	movs	r3, #5
 8000640:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000642:	f107 030c 	add.w	r3, r7, #12
 8000646:	4619      	mov	r1, r3
 8000648:	4811      	ldr	r0, [pc, #68]	; (8000690 <VS1003_Init+0x110>)
 800064a:	f002 fb7b 	bl	8002d44 <HAL_GPIO_Init>

    MP3_RESET(0);
 800064e:	2200      	movs	r2, #0
 8000650:	2140      	movs	r1, #64	; 0x40
 8000652:	4810      	ldr	r0, [pc, #64]	; (8000694 <VS1003_Init+0x114>)
 8000654:	f002 fd3a 	bl	80030cc <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8000658:	2001      	movs	r0, #1
 800065a:	f001 fbdf 	bl	8001e1c <HAL_Delay>
    MP3_RESET(1);
 800065e:	2201      	movs	r2, #1
 8000660:	2140      	movs	r1, #64	; 0x40
 8000662:	480c      	ldr	r0, [pc, #48]	; (8000694 <VS1003_Init+0x114>)
 8000664:	f002 fd32 	bl	80030cc <HAL_GPIO_WritePin>

    MP3_DCS(1);
 8000668:	2201      	movs	r2, #1
 800066a:	2110      	movs	r1, #16
 800066c:	4809      	ldr	r0, [pc, #36]	; (8000694 <VS1003_Init+0x114>)
 800066e:	f002 fd2d 	bl	80030cc <HAL_GPIO_WritePin>
    MP3_CCS(1);
 8000672:	2201      	movs	r2, #1
 8000674:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000678:	4805      	ldr	r0, [pc, #20]	; (8000690 <VS1003_Init+0x110>)
 800067a:	f002 fd27 	bl	80030cc <HAL_GPIO_WritePin>

    VS1003_SPI_Init();
 800067e:	f7ff ff31 	bl	80004e4 <VS1003_SPI_Init>
}
 8000682:	bf00      	nop
 8000684:	3720      	adds	r7, #32
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	40023800 	.word	0x40023800
 8000690:	40020400 	.word	0x40020400
 8000694:	40020000 	.word	0x40020000
 8000698:	40020800 	.word	0x40020800

0800069c <VS1003_SPI_SetSpeed>:


static void VS1003_SPI_SetSpeed(uint8_t SpeedSet)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	4603      	mov	r3, r0
 80006a4:	71fb      	strb	r3, [r7, #7]
    hspi2.Instance = SPI2;
 80006a6:	4b1d      	ldr	r3, [pc, #116]	; (800071c <VS1003_SPI_SetSpeed+0x80>)
 80006a8:	4a1d      	ldr	r2, [pc, #116]	; (8000720 <VS1003_SPI_SetSpeed+0x84>)
 80006aa:	601a      	str	r2, [r3, #0]
    hspi2.Init.Mode = SPI_MODE_MASTER;
 80006ac:	4b1b      	ldr	r3, [pc, #108]	; (800071c <VS1003_SPI_SetSpeed+0x80>)
 80006ae:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006b2:	605a      	str	r2, [r3, #4]
    hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80006b4:	4b19      	ldr	r3, [pc, #100]	; (800071c <VS1003_SPI_SetSpeed+0x80>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	609a      	str	r2, [r3, #8]
    hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80006ba:	4b18      	ldr	r3, [pc, #96]	; (800071c <VS1003_SPI_SetSpeed+0x80>)
 80006bc:	2200      	movs	r2, #0
 80006be:	60da      	str	r2, [r3, #12]
    hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80006c0:	4b16      	ldr	r3, [pc, #88]	; (800071c <VS1003_SPI_SetSpeed+0x80>)
 80006c2:	2202      	movs	r2, #2
 80006c4:	611a      	str	r2, [r3, #16]
    hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80006c6:	4b15      	ldr	r3, [pc, #84]	; (800071c <VS1003_SPI_SetSpeed+0x80>)
 80006c8:	2201      	movs	r2, #1
 80006ca:	615a      	str	r2, [r3, #20]
    hspi2.Init.NSS = SPI_NSS_SOFT;
 80006cc:	4b13      	ldr	r3, [pc, #76]	; (800071c <VS1003_SPI_SetSpeed+0x80>)
 80006ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006d2:	619a      	str	r2, [r3, #24]
    hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006d4:	4b11      	ldr	r3, [pc, #68]	; (800071c <VS1003_SPI_SetSpeed+0x80>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	621a      	str	r2, [r3, #32]
    hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80006da:	4b10      	ldr	r3, [pc, #64]	; (800071c <VS1003_SPI_SetSpeed+0x80>)
 80006dc:	2200      	movs	r2, #0
 80006de:	625a      	str	r2, [r3, #36]	; 0x24
    hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006e0:	4b0e      	ldr	r3, [pc, #56]	; (800071c <VS1003_SPI_SetSpeed+0x80>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	629a      	str	r2, [r3, #40]	; 0x28
    hspi2.Init.CRCPolynomial = 0;
 80006e6:	4b0d      	ldr	r3, [pc, #52]	; (800071c <VS1003_SPI_SetSpeed+0x80>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	62da      	str	r2, [r3, #44]	; 0x2c

    if (SpeedSet == SPI_SPEED_LOW)
 80006ec:	79fb      	ldrb	r3, [r7, #7]
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d103      	bne.n	80006fa <VS1003_SPI_SetSpeed+0x5e>
    {
        hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80006f2:	4b0a      	ldr	r3, [pc, #40]	; (800071c <VS1003_SPI_SetSpeed+0x80>)
 80006f4:	2218      	movs	r2, #24
 80006f6:	61da      	str	r2, [r3, #28]
 80006f8:	e002      	b.n	8000700 <VS1003_SPI_SetSpeed+0x64>
    }
    else
    {
        hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80006fa:	4b08      	ldr	r3, [pc, #32]	; (800071c <VS1003_SPI_SetSpeed+0x80>)
 80006fc:	2210      	movs	r2, #16
 80006fe:	61da      	str	r2, [r3, #28]
    }

    if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000700:	4806      	ldr	r0, [pc, #24]	; (800071c <VS1003_SPI_SetSpeed+0x80>)
 8000702:	f003 fba5 	bl	8003e50 <HAL_SPI_Init>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d003      	beq.n	8000714 <VS1003_SPI_SetSpeed+0x78>
    {
    	Error_Handler(__FILE__, __LINE__);
 800070c:	216f      	movs	r1, #111	; 0x6f
 800070e:	4805      	ldr	r0, [pc, #20]	; (8000724 <VS1003_SPI_SetSpeed+0x88>)
 8000710:	f000 fd56 	bl	80011c0 <Error_Handler>
    }
}
 8000714:	bf00      	nop
 8000716:	3708      	adds	r7, #8
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	20000028 	.word	0x20000028
 8000720:	40003800 	.word	0x40003800
 8000724:	08005f48 	.word	0x08005f48

08000728 <VS1003_SPI_ReadWriteByte>:


static uint16_t VS1003_SPI_ReadWriteByte(uint16_t TxData)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b086      	sub	sp, #24
 800072c:	af02      	add	r7, sp, #8
 800072e:	4603      	mov	r3, r0
 8000730:	80fb      	strh	r3, [r7, #6]
    uint8_t RxData;
    HAL_SPI_TransmitReceive(&hspi2, (uint8_t*)&TxData, &RxData, 1, 10);
 8000732:	f107 020f 	add.w	r2, r7, #15
 8000736:	1db9      	adds	r1, r7, #6
 8000738:	230a      	movs	r3, #10
 800073a:	9300      	str	r3, [sp, #0]
 800073c:	2301      	movs	r3, #1
 800073e:	4804      	ldr	r0, [pc, #16]	; (8000750 <VS1003_SPI_ReadWriteByte+0x28>)
 8000740:	f003 fc0f 	bl	8003f62 <HAL_SPI_TransmitReceive>
    return RxData;
 8000744:	7bfb      	ldrb	r3, [r7, #15]
 8000746:	b29b      	uxth	r3, r3
}
 8000748:	4618      	mov	r0, r3
 800074a:	3710      	adds	r7, #16
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	20000028 	.word	0x20000028

08000754 <VS1003_WriteReg>:

void VS1003_WriteReg(uint8_t reg, uint16_t value)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
 800075a:	4603      	mov	r3, r0
 800075c:	460a      	mov	r2, r1
 800075e:	71fb      	strb	r3, [r7, #7]
 8000760:	4613      	mov	r3, r2
 8000762:	80bb      	strh	r3, [r7, #4]
    while(MP3_DREQ == 0);
 8000764:	bf00      	nop
 8000766:	2180      	movs	r1, #128	; 0x80
 8000768:	4819      	ldr	r0, [pc, #100]	; (80007d0 <VS1003_WriteReg+0x7c>)
 800076a:	f002 fc97 	bl	800309c <HAL_GPIO_ReadPin>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d0f8      	beq.n	8000766 <VS1003_WriteReg+0x12>

    VS1003_SPI_SetSpeed(SPI_SPEED_LOW);
 8000774:	2000      	movs	r0, #0
 8000776:	f7ff ff91 	bl	800069c <VS1003_SPI_SetSpeed>
    MP3_DCS(1);
 800077a:	2201      	movs	r2, #1
 800077c:	2110      	movs	r1, #16
 800077e:	4815      	ldr	r0, [pc, #84]	; (80007d4 <VS1003_WriteReg+0x80>)
 8000780:	f002 fca4 	bl	80030cc <HAL_GPIO_WritePin>
    MP3_CCS(0);
 8000784:	2200      	movs	r2, #0
 8000786:	f44f 7100 	mov.w	r1, #512	; 0x200
 800078a:	4813      	ldr	r0, [pc, #76]	; (80007d8 <VS1003_WriteReg+0x84>)
 800078c:	f002 fc9e 	bl	80030cc <HAL_GPIO_WritePin>
    VS1003_SPI_ReadWriteByte(VS1003_WRITE_COMMAND);
 8000790:	2002      	movs	r0, #2
 8000792:	f7ff ffc9 	bl	8000728 <VS1003_SPI_ReadWriteByte>
    VS1003_SPI_ReadWriteByte(reg);
 8000796:	79fb      	ldrb	r3, [r7, #7]
 8000798:	b29b      	uxth	r3, r3
 800079a:	4618      	mov	r0, r3
 800079c:	f7ff ffc4 	bl	8000728 <VS1003_SPI_ReadWriteByte>
    VS1003_SPI_ReadWriteByte(value >> 8);
 80007a0:	88bb      	ldrh	r3, [r7, #4]
 80007a2:	0a1b      	lsrs	r3, r3, #8
 80007a4:	b29b      	uxth	r3, r3
 80007a6:	4618      	mov	r0, r3
 80007a8:	f7ff ffbe 	bl	8000728 <VS1003_SPI_ReadWriteByte>
    VS1003_SPI_ReadWriteByte(value);
 80007ac:	88bb      	ldrh	r3, [r7, #4]
 80007ae:	4618      	mov	r0, r3
 80007b0:	f7ff ffba 	bl	8000728 <VS1003_SPI_ReadWriteByte>
    MP3_CCS(1);
 80007b4:	2201      	movs	r2, #1
 80007b6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007ba:	4807      	ldr	r0, [pc, #28]	; (80007d8 <VS1003_WriteReg+0x84>)
 80007bc:	f002 fc86 	bl	80030cc <HAL_GPIO_WritePin>
    VS1003_SPI_SetSpeed(SPI_SPEED_HIGH);
 80007c0:	2001      	movs	r0, #1
 80007c2:	f7ff ff6b 	bl	800069c <VS1003_SPI_SetSpeed>
}
 80007c6:	bf00      	nop
 80007c8:	3708      	adds	r7, #8
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	40020800 	.word	0x40020800
 80007d4:	40020000 	.word	0x40020000
 80007d8:	40020400 	.word	0x40020400

080007dc <VS1003_ReadReg>:


uint16_t VS1003_ReadReg(uint8_t reg)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b084      	sub	sp, #16
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	4603      	mov	r3, r0
 80007e4:	71fb      	strb	r3, [r7, #7]
    uint16_t value;

    while(MP3_DREQ == 0);
 80007e6:	bf00      	nop
 80007e8:	2180      	movs	r1, #128	; 0x80
 80007ea:	481d      	ldr	r0, [pc, #116]	; (8000860 <VS1003_ReadReg+0x84>)
 80007ec:	f002 fc56 	bl	800309c <HAL_GPIO_ReadPin>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d0f8      	beq.n	80007e8 <VS1003_ReadReg+0xc>

    VS1003_SPI_SetSpeed(SPI_SPEED_LOW);
 80007f6:	2000      	movs	r0, #0
 80007f8:	f7ff ff50 	bl	800069c <VS1003_SPI_SetSpeed>
    MP3_DCS(1);
 80007fc:	2201      	movs	r2, #1
 80007fe:	2110      	movs	r1, #16
 8000800:	4818      	ldr	r0, [pc, #96]	; (8000864 <VS1003_ReadReg+0x88>)
 8000802:	f002 fc63 	bl	80030cc <HAL_GPIO_WritePin>
    MP3_CCS(0);
 8000806:	2200      	movs	r2, #0
 8000808:	f44f 7100 	mov.w	r1, #512	; 0x200
 800080c:	4816      	ldr	r0, [pc, #88]	; (8000868 <VS1003_ReadReg+0x8c>)
 800080e:	f002 fc5d 	bl	80030cc <HAL_GPIO_WritePin>
    VS1003_SPI_ReadWriteByte(VS1003_READ_COMMAND);
 8000812:	2003      	movs	r0, #3
 8000814:	f7ff ff88 	bl	8000728 <VS1003_SPI_ReadWriteByte>
    VS1003_SPI_ReadWriteByte(reg);
 8000818:	79fb      	ldrb	r3, [r7, #7]
 800081a:	b29b      	uxth	r3, r3
 800081c:	4618      	mov	r0, r3
 800081e:	f7ff ff83 	bl	8000728 <VS1003_SPI_ReadWriteByte>
    value = VS1003_SPI_ReadWriteByte(0xff);
 8000822:	20ff      	movs	r0, #255	; 0xff
 8000824:	f7ff ff80 	bl	8000728 <VS1003_SPI_ReadWriteByte>
 8000828:	4603      	mov	r3, r0
 800082a:	81fb      	strh	r3, [r7, #14]
    value = value << 8;
 800082c:	89fb      	ldrh	r3, [r7, #14]
 800082e:	021b      	lsls	r3, r3, #8
 8000830:	81fb      	strh	r3, [r7, #14]
    value |= VS1003_SPI_ReadWriteByte(0xff);
 8000832:	20ff      	movs	r0, #255	; 0xff
 8000834:	f7ff ff78 	bl	8000728 <VS1003_SPI_ReadWriteByte>
 8000838:	4603      	mov	r3, r0
 800083a:	461a      	mov	r2, r3
 800083c:	89fb      	ldrh	r3, [r7, #14]
 800083e:	4313      	orrs	r3, r2
 8000840:	81fb      	strh	r3, [r7, #14]
    MP3_CCS(1);
 8000842:	2201      	movs	r2, #1
 8000844:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000848:	4807      	ldr	r0, [pc, #28]	; (8000868 <VS1003_ReadReg+0x8c>)
 800084a:	f002 fc3f 	bl	80030cc <HAL_GPIO_WritePin>
    VS1003_SPI_SetSpeed(SPI_SPEED_HIGH);
 800084e:	2001      	movs	r0, #1
 8000850:	f7ff ff24 	bl	800069c <VS1003_SPI_SetSpeed>
    return value;
 8000854:	89fb      	ldrh	r3, [r7, #14]
}
 8000856:	4618      	mov	r0, r3
 8000858:	3710      	adds	r7, #16
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	40020800 	.word	0x40020800
 8000864:	40020000 	.word	0x40020000
 8000868:	40020400 	.word	0x40020400

0800086c <VS1003_ResetDecodeTime>:

void VS1003_ResetDecodeTime(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
    VS1003_WriteReg(SPI_DECODE_TIME, 0x0000);
 8000870:	2100      	movs	r1, #0
 8000872:	2004      	movs	r0, #4
 8000874:	f7ff ff6e 	bl	8000754 <VS1003_WriteReg>
    VS1003_WriteReg(SPI_DECODE_TIME, 0x0000);
 8000878:	2100      	movs	r1, #0
 800087a:	2004      	movs	r0, #4
 800087c:	f7ff ff6a 	bl	8000754 <VS1003_WriteReg>
}
 8000880:	bf00      	nop
 8000882:	bd80      	pop	{r7, pc}

08000884 <VS1003_SoftReset>:
}


// 구동시키기 위해 제일 먼저 초기화
void VS1003_SoftReset(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
    uint8_t retry;

    while(MP3_DREQ == 0);
 800088a:	bf00      	nop
 800088c:	2180      	movs	r1, #128	; 0x80
 800088e:	483e      	ldr	r0, [pc, #248]	; (8000988 <VS1003_SoftReset+0x104>)
 8000890:	f002 fc04 	bl	800309c <HAL_GPIO_ReadPin>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d0f8      	beq.n	800088c <VS1003_SoftReset+0x8>
    VS1003_SPI_ReadWriteByte(0xff);
 800089a:	20ff      	movs	r0, #255	; 0xff
 800089c:	f7ff ff44 	bl	8000728 <VS1003_SPI_ReadWriteByte>
    retry = 0;
 80008a0:	2300      	movs	r3, #0
 80008a2:	71fb      	strb	r3, [r7, #7]
    while(VS1003_ReadReg(SPI_MODE) != 0x0804)
 80008a4:	e00c      	b.n	80008c0 <VS1003_SoftReset+0x3c>
    {
        VS1003_WriteReg(SPI_MODE, 0x0804);
 80008a6:	f640 0104 	movw	r1, #2052	; 0x804
 80008aa:	2000      	movs	r0, #0
 80008ac:	f7ff ff52 	bl	8000754 <VS1003_WriteReg>
        HAL_Delay(2);
 80008b0:	2002      	movs	r0, #2
 80008b2:	f001 fab3 	bl	8001e1c <HAL_Delay>
        if(retry++ > 100)
 80008b6:	79fb      	ldrb	r3, [r7, #7]
 80008b8:	1c5a      	adds	r2, r3, #1
 80008ba:	71fa      	strb	r2, [r7, #7]
 80008bc:	2b64      	cmp	r3, #100	; 0x64
 80008be:	d809      	bhi.n	80008d4 <VS1003_SoftReset+0x50>
    while(VS1003_ReadReg(SPI_MODE) != 0x0804)
 80008c0:	2000      	movs	r0, #0
 80008c2:	f7ff ff8b 	bl	80007dc <VS1003_ReadReg>
 80008c6:	4603      	mov	r3, r0
 80008c8:	461a      	mov	r2, r3
 80008ca:	f640 0304 	movw	r3, #2052	; 0x804
 80008ce:	429a      	cmp	r2, r3
 80008d0:	d1e9      	bne.n	80008a6 <VS1003_SoftReset+0x22>
 80008d2:	e000      	b.n	80008d6 <VS1003_SoftReset+0x52>
        {
            break;
 80008d4:	bf00      	nop
        }
    }

    while(MP3_DREQ == 0);
 80008d6:	bf00      	nop
 80008d8:	2180      	movs	r1, #128	; 0x80
 80008da:	482b      	ldr	r0, [pc, #172]	; (8000988 <VS1003_SoftReset+0x104>)
 80008dc:	f002 fbde 	bl	800309c <HAL_GPIO_ReadPin>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d0f8      	beq.n	80008d8 <VS1003_SoftReset+0x54>
    retry = 0;
 80008e6:	2300      	movs	r3, #0
 80008e8:	71fb      	strb	r3, [r7, #7]
    while(VS1003_ReadReg(SPI_CLOCKF) != 0x9800)
 80008ea:	e009      	b.n	8000900 <VS1003_SoftReset+0x7c>
    {
        VS1003_WriteReg(SPI_CLOCKF, 0x9800);
 80008ec:	f44f 4118 	mov.w	r1, #38912	; 0x9800
 80008f0:	2003      	movs	r0, #3
 80008f2:	f7ff ff2f 	bl	8000754 <VS1003_WriteReg>
        if( retry++ > 100)
 80008f6:	79fb      	ldrb	r3, [r7, #7]
 80008f8:	1c5a      	adds	r2, r3, #1
 80008fa:	71fa      	strb	r2, [r7, #7]
 80008fc:	2b64      	cmp	r3, #100	; 0x64
 80008fe:	d807      	bhi.n	8000910 <VS1003_SoftReset+0x8c>
    while(VS1003_ReadReg(SPI_CLOCKF) != 0x9800)
 8000900:	2003      	movs	r0, #3
 8000902:	f7ff ff6b 	bl	80007dc <VS1003_ReadReg>
 8000906:	4603      	mov	r3, r0
 8000908:	f5b3 4f18 	cmp.w	r3, #38912	; 0x9800
 800090c:	d1ee      	bne.n	80008ec <VS1003_SoftReset+0x68>
 800090e:	e000      	b.n	8000912 <VS1003_SoftReset+0x8e>
        {
            break;
 8000910:	bf00      	nop
        }
    }

    retry = 0;
 8000912:	2300      	movs	r3, #0
 8000914:	71fb      	strb	r3, [r7, #7]
    while(VS1003_ReadReg(SPI_AUDATA) != 0xBB81)
 8000916:	e009      	b.n	800092c <VS1003_SoftReset+0xa8>
    {
        VS1003_WriteReg(SPI_AUDATA, 0xBB81);
 8000918:	f64b 3181 	movw	r1, #48001	; 0xbb81
 800091c:	2005      	movs	r0, #5
 800091e:	f7ff ff19 	bl	8000754 <VS1003_WriteReg>
        if(retry++ > 100)
 8000922:	79fb      	ldrb	r3, [r7, #7]
 8000924:	1c5a      	adds	r2, r3, #1
 8000926:	71fa      	strb	r2, [r7, #7]
 8000928:	2b64      	cmp	r3, #100	; 0x64
 800092a:	d809      	bhi.n	8000940 <VS1003_SoftReset+0xbc>
    while(VS1003_ReadReg(SPI_AUDATA) != 0xBB81)
 800092c:	2005      	movs	r0, #5
 800092e:	f7ff ff55 	bl	80007dc <VS1003_ReadReg>
 8000932:	4603      	mov	r3, r0
 8000934:	461a      	mov	r2, r3
 8000936:	f64b 3381 	movw	r3, #48001	; 0xbb81
 800093a:	429a      	cmp	r2, r3
 800093c:	d1ec      	bne.n	8000918 <VS1003_SoftReset+0x94>
 800093e:	e000      	b.n	8000942 <VS1003_SoftReset+0xbe>
        {
            break;
 8000940:	bf00      	nop
        }
    }

    VS1003_WriteReg(SPI_VOL, 0x0000);
 8000942:	2100      	movs	r1, #0
 8000944:	200b      	movs	r0, #11
 8000946:	f7ff ff05 	bl	8000754 <VS1003_WriteReg>
    VS1003_ResetDecodeTime();
 800094a:	f7ff ff8f 	bl	800086c <VS1003_ResetDecodeTime>

    MP3_DCS(0);
 800094e:	2200      	movs	r2, #0
 8000950:	2110      	movs	r1, #16
 8000952:	480e      	ldr	r0, [pc, #56]	; (800098c <VS1003_SoftReset+0x108>)
 8000954:	f002 fbba 	bl	80030cc <HAL_GPIO_WritePin>
    VS1003_SPI_ReadWriteByte(0xFF);
 8000958:	20ff      	movs	r0, #255	; 0xff
 800095a:	f7ff fee5 	bl	8000728 <VS1003_SPI_ReadWriteByte>
    VS1003_SPI_ReadWriteByte(0xFF);
 800095e:	20ff      	movs	r0, #255	; 0xff
 8000960:	f7ff fee2 	bl	8000728 <VS1003_SPI_ReadWriteByte>
    VS1003_SPI_ReadWriteByte(0xFF);
 8000964:	20ff      	movs	r0, #255	; 0xff
 8000966:	f7ff fedf 	bl	8000728 <VS1003_SPI_ReadWriteByte>
    VS1003_SPI_ReadWriteByte(0xFF);
 800096a:	20ff      	movs	r0, #255	; 0xff
 800096c:	f7ff fedc 	bl	8000728 <VS1003_SPI_ReadWriteByte>
    MP3_DCS(1);
 8000970:	2201      	movs	r2, #1
 8000972:	2110      	movs	r1, #16
 8000974:	4805      	ldr	r0, [pc, #20]	; (800098c <VS1003_SoftReset+0x108>)
 8000976:	f002 fba9 	bl	80030cc <HAL_GPIO_WritePin>
    HAL_Delay(20);
 800097a:	2014      	movs	r0, #20
 800097c:	f001 fa4e 	bl	8001e1c <HAL_Delay>
}
 8000980:	bf00      	nop
 8000982:	3708      	adds	r7, #8
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	40020800 	.word	0x40020800
 800098c:	40020000 	.word	0x40020000

08000990 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b084      	sub	sp, #16
 8000994:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000996:	463b      	mov	r3, r7
 8000998:	2200      	movs	r2, #0
 800099a:	601a      	str	r2, [r3, #0]
 800099c:	605a      	str	r2, [r3, #4]
 800099e:	609a      	str	r2, [r3, #8]
 80009a0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80009a2:	4b36      	ldr	r3, [pc, #216]	; (8000a7c <MX_ADC1_Init+0xec>)
 80009a4:	4a36      	ldr	r2, [pc, #216]	; (8000a80 <MX_ADC1_Init+0xf0>)
 80009a6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80009a8:	4b34      	ldr	r3, [pc, #208]	; (8000a7c <MX_ADC1_Init+0xec>)
 80009aa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80009ae:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80009b0:	4b32      	ldr	r3, [pc, #200]	; (8000a7c <MX_ADC1_Init+0xec>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80009b6:	4b31      	ldr	r3, [pc, #196]	; (8000a7c <MX_ADC1_Init+0xec>)
 80009b8:	2201      	movs	r2, #1
 80009ba:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80009bc:	4b2f      	ldr	r3, [pc, #188]	; (8000a7c <MX_ADC1_Init+0xec>)
 80009be:	2201      	movs	r2, #1
 80009c0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009c2:	4b2e      	ldr	r3, [pc, #184]	; (8000a7c <MX_ADC1_Init+0xec>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009ca:	4b2c      	ldr	r3, [pc, #176]	; (8000a7c <MX_ADC1_Init+0xec>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009d0:	4b2a      	ldr	r3, [pc, #168]	; (8000a7c <MX_ADC1_Init+0xec>)
 80009d2:	4a2c      	ldr	r2, [pc, #176]	; (8000a84 <MX_ADC1_Init+0xf4>)
 80009d4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009d6:	4b29      	ldr	r3, [pc, #164]	; (8000a7c <MX_ADC1_Init+0xec>)
 80009d8:	2200      	movs	r2, #0
 80009da:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 80009dc:	4b27      	ldr	r3, [pc, #156]	; (8000a7c <MX_ADC1_Init+0xec>)
 80009de:	2204      	movs	r2, #4
 80009e0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80009e2:	4b26      	ldr	r3, [pc, #152]	; (8000a7c <MX_ADC1_Init+0xec>)
 80009e4:	2201      	movs	r2, #1
 80009e6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009ea:	4b24      	ldr	r3, [pc, #144]	; (8000a7c <MX_ADC1_Init+0xec>)
 80009ec:	2201      	movs	r2, #1
 80009ee:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009f0:	4822      	ldr	r0, [pc, #136]	; (8000a7c <MX_ADC1_Init+0xec>)
 80009f2:	f001 fa37 	bl	8001e64 <HAL_ADC_Init>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80009fc:	f000 fbe0 	bl	80011c0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000a00:	230a      	movs	r3, #10
 8000a02:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000a04:	2301      	movs	r3, #1
 8000a06:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8000a08:	2304      	movs	r3, #4
 8000a0a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a0c:	463b      	mov	r3, r7
 8000a0e:	4619      	mov	r1, r3
 8000a10:	481a      	ldr	r0, [pc, #104]	; (8000a7c <MX_ADC1_Init+0xec>)
 8000a12:	f001 fa6b 	bl	8001eec <HAL_ADC_ConfigChannel>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000a1c:	f000 fbd0 	bl	80011c0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000a20:	230c      	movs	r3, #12
 8000a22:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000a24:	2302      	movs	r3, #2
 8000a26:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a28:	463b      	mov	r3, r7
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	4813      	ldr	r0, [pc, #76]	; (8000a7c <MX_ADC1_Init+0xec>)
 8000a2e:	f001 fa5d 	bl	8001eec <HAL_ADC_ConfigChannel>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000a38:	f000 fbc2 	bl	80011c0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000a3c:	230d      	movs	r3, #13
 8000a3e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000a40:	2303      	movs	r3, #3
 8000a42:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a44:	463b      	mov	r3, r7
 8000a46:	4619      	mov	r1, r3
 8000a48:	480c      	ldr	r0, [pc, #48]	; (8000a7c <MX_ADC1_Init+0xec>)
 8000a4a:	f001 fa4f 	bl	8001eec <HAL_ADC_ConfigChannel>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000a54:	f000 fbb4 	bl	80011c0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000a58:	2309      	movs	r3, #9
 8000a5a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000a5c:	2304      	movs	r3, #4
 8000a5e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a60:	463b      	mov	r3, r7
 8000a62:	4619      	mov	r1, r3
 8000a64:	4805      	ldr	r0, [pc, #20]	; (8000a7c <MX_ADC1_Init+0xec>)
 8000a66:	f001 fa41 	bl	8001eec <HAL_ADC_ConfigChannel>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000a70:	f000 fba6 	bl	80011c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a74:	bf00      	nop
 8000a76:	3710      	adds	r7, #16
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	20000080 	.word	0x20000080
 8000a80:	40012000 	.word	0x40012000
 8000a84:	0f000001 	.word	0x0f000001

08000a88 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b08a      	sub	sp, #40	; 0x28
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a90:	f107 0314 	add.w	r3, r7, #20
 8000a94:	2200      	movs	r2, #0
 8000a96:	601a      	str	r2, [r3, #0]
 8000a98:	605a      	str	r2, [r3, #4]
 8000a9a:	609a      	str	r2, [r3, #8]
 8000a9c:	60da      	str	r2, [r3, #12]
 8000a9e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4a3c      	ldr	r2, [pc, #240]	; (8000b98 <HAL_ADC_MspInit+0x110>)
 8000aa6:	4293      	cmp	r3, r2
 8000aa8:	d171      	bne.n	8000b8e <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000aaa:	2300      	movs	r3, #0
 8000aac:	613b      	str	r3, [r7, #16]
 8000aae:	4b3b      	ldr	r3, [pc, #236]	; (8000b9c <HAL_ADC_MspInit+0x114>)
 8000ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ab2:	4a3a      	ldr	r2, [pc, #232]	; (8000b9c <HAL_ADC_MspInit+0x114>)
 8000ab4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ab8:	6453      	str	r3, [r2, #68]	; 0x44
 8000aba:	4b38      	ldr	r3, [pc, #224]	; (8000b9c <HAL_ADC_MspInit+0x114>)
 8000abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000abe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ac2:	613b      	str	r3, [r7, #16]
 8000ac4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	60fb      	str	r3, [r7, #12]
 8000aca:	4b34      	ldr	r3, [pc, #208]	; (8000b9c <HAL_ADC_MspInit+0x114>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	4a33      	ldr	r2, [pc, #204]	; (8000b9c <HAL_ADC_MspInit+0x114>)
 8000ad0:	f043 0304 	orr.w	r3, r3, #4
 8000ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad6:	4b31      	ldr	r3, [pc, #196]	; (8000b9c <HAL_ADC_MspInit+0x114>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	f003 0304 	and.w	r3, r3, #4
 8000ade:	60fb      	str	r3, [r7, #12]
 8000ae0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	60bb      	str	r3, [r7, #8]
 8000ae6:	4b2d      	ldr	r3, [pc, #180]	; (8000b9c <HAL_ADC_MspInit+0x114>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aea:	4a2c      	ldr	r2, [pc, #176]	; (8000b9c <HAL_ADC_MspInit+0x114>)
 8000aec:	f043 0302 	orr.w	r3, r3, #2
 8000af0:	6313      	str	r3, [r2, #48]	; 0x30
 8000af2:	4b2a      	ldr	r3, [pc, #168]	; (8000b9c <HAL_ADC_MspInit+0x114>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	f003 0302 	and.w	r3, r3, #2
 8000afa:	60bb      	str	r3, [r7, #8]
 8000afc:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> ADC1_IN10
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 8000afe:	230d      	movs	r3, #13
 8000b00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b02:	2303      	movs	r3, #3
 8000b04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b06:	2300      	movs	r3, #0
 8000b08:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b0a:	f107 0314 	add.w	r3, r7, #20
 8000b0e:	4619      	mov	r1, r3
 8000b10:	4823      	ldr	r0, [pc, #140]	; (8000ba0 <HAL_ADC_MspInit+0x118>)
 8000b12:	f002 f917 	bl	8002d44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000b16:	2302      	movs	r3, #2
 8000b18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b1a:	2303      	movs	r3, #3
 8000b1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b22:	f107 0314 	add.w	r3, r7, #20
 8000b26:	4619      	mov	r1, r3
 8000b28:	481e      	ldr	r0, [pc, #120]	; (8000ba4 <HAL_ADC_MspInit+0x11c>)
 8000b2a:	f002 f90b 	bl	8002d44 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000b2e:	4b1e      	ldr	r3, [pc, #120]	; (8000ba8 <HAL_ADC_MspInit+0x120>)
 8000b30:	4a1e      	ldr	r2, [pc, #120]	; (8000bac <HAL_ADC_MspInit+0x124>)
 8000b32:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000b34:	4b1c      	ldr	r3, [pc, #112]	; (8000ba8 <HAL_ADC_MspInit+0x120>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b3a:	4b1b      	ldr	r3, [pc, #108]	; (8000ba8 <HAL_ADC_MspInit+0x120>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b40:	4b19      	ldr	r3, [pc, #100]	; (8000ba8 <HAL_ADC_MspInit+0x120>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000b46:	4b18      	ldr	r3, [pc, #96]	; (8000ba8 <HAL_ADC_MspInit+0x120>)
 8000b48:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b4c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b4e:	4b16      	ldr	r3, [pc, #88]	; (8000ba8 <HAL_ADC_MspInit+0x120>)
 8000b50:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b54:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b56:	4b14      	ldr	r3, [pc, #80]	; (8000ba8 <HAL_ADC_MspInit+0x120>)
 8000b58:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b5c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000b5e:	4b12      	ldr	r3, [pc, #72]	; (8000ba8 <HAL_ADC_MspInit+0x120>)
 8000b60:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b64:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000b66:	4b10      	ldr	r3, [pc, #64]	; (8000ba8 <HAL_ADC_MspInit+0x120>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b6c:	4b0e      	ldr	r3, [pc, #56]	; (8000ba8 <HAL_ADC_MspInit+0x120>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000b72:	480d      	ldr	r0, [pc, #52]	; (8000ba8 <HAL_ADC_MspInit+0x120>)
 8000b74:	f001 fd6a 	bl	800264c <HAL_DMA_Init>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8000b7e:	f000 fb1f 	bl	80011c0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	4a08      	ldr	r2, [pc, #32]	; (8000ba8 <HAL_ADC_MspInit+0x120>)
 8000b86:	639a      	str	r2, [r3, #56]	; 0x38
 8000b88:	4a07      	ldr	r2, [pc, #28]	; (8000ba8 <HAL_ADC_MspInit+0x120>)
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000b8e:	bf00      	nop
 8000b90:	3728      	adds	r7, #40	; 0x28
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	40012000 	.word	0x40012000
 8000b9c:	40023800 	.word	0x40023800
 8000ba0:	40020800 	.word	0x40020800
 8000ba4:	40020400 	.word	0x40020400
 8000ba8:	200000c8 	.word	0x200000c8
 8000bac:	40026410 	.word	0x40026410

08000bb0 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000bb6:	463b      	mov	r3, r7
 8000bb8:	2200      	movs	r2, #0
 8000bba:	601a      	str	r2, [r3, #0]
 8000bbc:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000bbe:	4b0f      	ldr	r3, [pc, #60]	; (8000bfc <MX_DAC_Init+0x4c>)
 8000bc0:	4a0f      	ldr	r2, [pc, #60]	; (8000c00 <MX_DAC_Init+0x50>)
 8000bc2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000bc4:	480d      	ldr	r0, [pc, #52]	; (8000bfc <MX_DAC_Init+0x4c>)
 8000bc6:	f001 fcd0 	bl	800256a <HAL_DAC_Init>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000bd0:	f000 faf6 	bl	80011c0 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000bdc:	463b      	mov	r3, r7
 8000bde:	2200      	movs	r2, #0
 8000be0:	4619      	mov	r1, r3
 8000be2:	4806      	ldr	r0, [pc, #24]	; (8000bfc <MX_DAC_Init+0x4c>)
 8000be4:	f001 fce3 	bl	80025ae <HAL_DAC_ConfigChannel>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000bee:	f000 fae7 	bl	80011c0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000bf2:	bf00      	nop
 8000bf4:	3708      	adds	r7, #8
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	20000128 	.word	0x20000128
 8000c00:	40007400 	.word	0x40007400

08000c04 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b08a      	sub	sp, #40	; 0x28
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c0c:	f107 0314 	add.w	r3, r7, #20
 8000c10:	2200      	movs	r2, #0
 8000c12:	601a      	str	r2, [r3, #0]
 8000c14:	605a      	str	r2, [r3, #4]
 8000c16:	609a      	str	r2, [r3, #8]
 8000c18:	60da      	str	r2, [r3, #12]
 8000c1a:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a17      	ldr	r2, [pc, #92]	; (8000c80 <HAL_DAC_MspInit+0x7c>)
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d127      	bne.n	8000c76 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000c26:	2300      	movs	r3, #0
 8000c28:	613b      	str	r3, [r7, #16]
 8000c2a:	4b16      	ldr	r3, [pc, #88]	; (8000c84 <HAL_DAC_MspInit+0x80>)
 8000c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c2e:	4a15      	ldr	r2, [pc, #84]	; (8000c84 <HAL_DAC_MspInit+0x80>)
 8000c30:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000c34:	6413      	str	r3, [r2, #64]	; 0x40
 8000c36:	4b13      	ldr	r3, [pc, #76]	; (8000c84 <HAL_DAC_MspInit+0x80>)
 8000c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000c3e:	613b      	str	r3, [r7, #16]
 8000c40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c42:	2300      	movs	r3, #0
 8000c44:	60fb      	str	r3, [r7, #12]
 8000c46:	4b0f      	ldr	r3, [pc, #60]	; (8000c84 <HAL_DAC_MspInit+0x80>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4a:	4a0e      	ldr	r2, [pc, #56]	; (8000c84 <HAL_DAC_MspInit+0x80>)
 8000c4c:	f043 0301 	orr.w	r3, r3, #1
 8000c50:	6313      	str	r3, [r2, #48]	; 0x30
 8000c52:	4b0c      	ldr	r3, [pc, #48]	; (8000c84 <HAL_DAC_MspInit+0x80>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	f003 0301 	and.w	r3, r3, #1
 8000c5a:	60fb      	str	r3, [r7, #12]
 8000c5c:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000c5e:	2310      	movs	r3, #16
 8000c60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c62:	2303      	movs	r3, #3
 8000c64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c66:	2300      	movs	r3, #0
 8000c68:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c6a:	f107 0314 	add.w	r3, r7, #20
 8000c6e:	4619      	mov	r1, r3
 8000c70:	4805      	ldr	r0, [pc, #20]	; (8000c88 <HAL_DAC_MspInit+0x84>)
 8000c72:	f002 f867 	bl	8002d44 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8000c76:	bf00      	nop
 8000c78:	3728      	adds	r7, #40	; 0x28
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	40007400 	.word	0x40007400
 8000c84:	40023800 	.word	0x40023800
 8000c88:	40020000 	.word	0x40020000

08000c8c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000c92:	2300      	movs	r3, #0
 8000c94:	607b      	str	r3, [r7, #4]
 8000c96:	4b0c      	ldr	r3, [pc, #48]	; (8000cc8 <MX_DMA_Init+0x3c>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	4a0b      	ldr	r2, [pc, #44]	; (8000cc8 <MX_DMA_Init+0x3c>)
 8000c9c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ca0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca2:	4b09      	ldr	r3, [pc, #36]	; (8000cc8 <MX_DMA_Init+0x3c>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000caa:	607b      	str	r3, [r7, #4]
 8000cac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000cae:	2200      	movs	r2, #0
 8000cb0:	2100      	movs	r1, #0
 8000cb2:	2038      	movs	r0, #56	; 0x38
 8000cb4:	f001 fc23 	bl	80024fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000cb8:	2038      	movs	r0, #56	; 0x38
 8000cba:	f001 fc3c 	bl	8002536 <HAL_NVIC_EnableIRQ>

}
 8000cbe:	bf00      	nop
 8000cc0:	3708      	adds	r7, #8
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	40023800 	.word	0x40023800

08000ccc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b08c      	sub	sp, #48	; 0x30
 8000cd0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd2:	f107 031c 	add.w	r3, r7, #28
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	601a      	str	r2, [r3, #0]
 8000cda:	605a      	str	r2, [r3, #4]
 8000cdc:	609a      	str	r2, [r3, #8]
 8000cde:	60da      	str	r2, [r3, #12]
 8000ce0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	61bb      	str	r3, [r7, #24]
 8000ce6:	4b61      	ldr	r3, [pc, #388]	; (8000e6c <MX_GPIO_Init+0x1a0>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cea:	4a60      	ldr	r2, [pc, #384]	; (8000e6c <MX_GPIO_Init+0x1a0>)
 8000cec:	f043 0310 	orr.w	r3, r3, #16
 8000cf0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf2:	4b5e      	ldr	r3, [pc, #376]	; (8000e6c <MX_GPIO_Init+0x1a0>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf6:	f003 0310 	and.w	r3, r3, #16
 8000cfa:	61bb      	str	r3, [r7, #24]
 8000cfc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000cfe:	2300      	movs	r3, #0
 8000d00:	617b      	str	r3, [r7, #20]
 8000d02:	4b5a      	ldr	r3, [pc, #360]	; (8000e6c <MX_GPIO_Init+0x1a0>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d06:	4a59      	ldr	r2, [pc, #356]	; (8000e6c <MX_GPIO_Init+0x1a0>)
 8000d08:	f043 0320 	orr.w	r3, r3, #32
 8000d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d0e:	4b57      	ldr	r3, [pc, #348]	; (8000e6c <MX_GPIO_Init+0x1a0>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d12:	f003 0320 	and.w	r3, r3, #32
 8000d16:	617b      	str	r3, [r7, #20]
 8000d18:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	613b      	str	r3, [r7, #16]
 8000d1e:	4b53      	ldr	r3, [pc, #332]	; (8000e6c <MX_GPIO_Init+0x1a0>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d22:	4a52      	ldr	r2, [pc, #328]	; (8000e6c <MX_GPIO_Init+0x1a0>)
 8000d24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d28:	6313      	str	r3, [r2, #48]	; 0x30
 8000d2a:	4b50      	ldr	r3, [pc, #320]	; (8000e6c <MX_GPIO_Init+0x1a0>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d32:	613b      	str	r3, [r7, #16]
 8000d34:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d36:	2300      	movs	r3, #0
 8000d38:	60fb      	str	r3, [r7, #12]
 8000d3a:	4b4c      	ldr	r3, [pc, #304]	; (8000e6c <MX_GPIO_Init+0x1a0>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3e:	4a4b      	ldr	r2, [pc, #300]	; (8000e6c <MX_GPIO_Init+0x1a0>)
 8000d40:	f043 0304 	orr.w	r3, r3, #4
 8000d44:	6313      	str	r3, [r2, #48]	; 0x30
 8000d46:	4b49      	ldr	r3, [pc, #292]	; (8000e6c <MX_GPIO_Init+0x1a0>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4a:	f003 0304 	and.w	r3, r3, #4
 8000d4e:	60fb      	str	r3, [r7, #12]
 8000d50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d52:	2300      	movs	r3, #0
 8000d54:	60bb      	str	r3, [r7, #8]
 8000d56:	4b45      	ldr	r3, [pc, #276]	; (8000e6c <MX_GPIO_Init+0x1a0>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5a:	4a44      	ldr	r2, [pc, #272]	; (8000e6c <MX_GPIO_Init+0x1a0>)
 8000d5c:	f043 0301 	orr.w	r3, r3, #1
 8000d60:	6313      	str	r3, [r2, #48]	; 0x30
 8000d62:	4b42      	ldr	r3, [pc, #264]	; (8000e6c <MX_GPIO_Init+0x1a0>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d66:	f003 0301 	and.w	r3, r3, #1
 8000d6a:	60bb      	str	r3, [r7, #8]
 8000d6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d6e:	2300      	movs	r3, #0
 8000d70:	607b      	str	r3, [r7, #4]
 8000d72:	4b3e      	ldr	r3, [pc, #248]	; (8000e6c <MX_GPIO_Init+0x1a0>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d76:	4a3d      	ldr	r2, [pc, #244]	; (8000e6c <MX_GPIO_Init+0x1a0>)
 8000d78:	f043 0302 	orr.w	r3, r3, #2
 8000d7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d7e:	4b3b      	ldr	r3, [pc, #236]	; (8000e6c <MX_GPIO_Init+0x1a0>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d82:	f003 0302 	and.w	r3, r3, #2
 8000d86:	607b      	str	r3, [r7, #4]
 8000d88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	603b      	str	r3, [r7, #0]
 8000d8e:	4b37      	ldr	r3, [pc, #220]	; (8000e6c <MX_GPIO_Init+0x1a0>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d92:	4a36      	ldr	r2, [pc, #216]	; (8000e6c <MX_GPIO_Init+0x1a0>)
 8000d94:	f043 0308 	orr.w	r3, r3, #8
 8000d98:	6313      	str	r3, [r2, #48]	; 0x30
 8000d9a:	4b34      	ldr	r3, [pc, #208]	; (8000e6c <MX_GPIO_Init+0x1a0>)
 8000d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9e:	f003 0308 	and.w	r3, r3, #8
 8000da2:	603b      	str	r3, [r7, #0]
 8000da4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000da6:	2200      	movs	r2, #0
 8000da8:	21c0      	movs	r1, #192	; 0xc0
 8000daa:	4831      	ldr	r0, [pc, #196]	; (8000e70 <MX_GPIO_Init+0x1a4>)
 8000dac:	f002 f98e 	bl	80030cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_11|GPIO_PIN_7, GPIO_PIN_RESET);
 8000db0:	2200      	movs	r2, #0
 8000db2:	f640 0181 	movw	r1, #2177	; 0x881
 8000db6:	482f      	ldr	r0, [pc, #188]	; (8000e74 <MX_GPIO_Init+0x1a8>)
 8000db8:	f002 f988 	bl	80030cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000dbc:	2308      	movs	r3, #8
 8000dbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000dc0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000dc4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000dca:	f107 031c 	add.w	r3, r7, #28
 8000dce:	4619      	mov	r1, r3
 8000dd0:	4829      	ldr	r0, [pc, #164]	; (8000e78 <MX_GPIO_Init+0x1ac>)
 8000dd2:	f001 ffb7 	bl	8002d44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000dd6:	23c0      	movs	r3, #192	; 0xc0
 8000dd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dde:	2300      	movs	r3, #0
 8000de0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de2:	2300      	movs	r3, #0
 8000de4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de6:	f107 031c 	add.w	r3, r7, #28
 8000dea:	4619      	mov	r1, r3
 8000dec:	4820      	ldr	r0, [pc, #128]	; (8000e70 <MX_GPIO_Init+0x1a4>)
 8000dee:	f001 ffa9 	bl	8002d44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB11 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_11|GPIO_PIN_7;
 8000df2:	f640 0381 	movw	r3, #2177	; 0x881
 8000df6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000df8:	2301      	movs	r3, #1
 8000dfa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e00:	2300      	movs	r3, #0
 8000e02:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e04:	f107 031c 	add.w	r3, r7, #28
 8000e08:	4619      	mov	r1, r3
 8000e0a:	481a      	ldr	r0, [pc, #104]	; (8000e74 <MX_GPIO_Init+0x1a8>)
 8000e0c:	f001 ff9a 	bl	8002d44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000e10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e16:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e1c:	2302      	movs	r3, #2
 8000e1e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e20:	f107 031c 	add.w	r3, r7, #28
 8000e24:	4619      	mov	r1, r3
 8000e26:	4815      	ldr	r0, [pc, #84]	; (8000e7c <MX_GPIO_Init+0x1b0>)
 8000e28:	f001 ff8c 	bl	8002d44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000e2c:	2380      	movs	r3, #128	; 0x80
 8000e2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e30:	2300      	movs	r3, #0
 8000e32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e34:	2300      	movs	r3, #0
 8000e36:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e38:	f107 031c 	add.w	r3, r7, #28
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	4810      	ldr	r0, [pc, #64]	; (8000e80 <MX_GPIO_Init+0x1b4>)
 8000e40:	f001 ff80 	bl	8002d44 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000e44:	2200      	movs	r2, #0
 8000e46:	2100      	movs	r1, #0
 8000e48:	2009      	movs	r0, #9
 8000e4a:	f001 fb58 	bl	80024fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000e4e:	2009      	movs	r0, #9
 8000e50:	f001 fb71 	bl	8002536 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000e54:	2200      	movs	r2, #0
 8000e56:	2100      	movs	r1, #0
 8000e58:	2028      	movs	r0, #40	; 0x28
 8000e5a:	f001 fb50 	bl	80024fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000e5e:	2028      	movs	r0, #40	; 0x28
 8000e60:	f001 fb69 	bl	8002536 <HAL_NVIC_EnableIRQ>

}
 8000e64:	bf00      	nop
 8000e66:	3730      	adds	r7, #48	; 0x30
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	40023800 	.word	0x40023800
 8000e70:	40020000 	.word	0x40020000
 8000e74:	40020400 	.word	0x40020400
 8000e78:	40021000 	.word	0x40021000
 8000e7c:	40020c00 	.word	0x40020c00
 8000e80:	40020800 	.word	0x40020800

08000e84 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e88:	4b1b      	ldr	r3, [pc, #108]	; (8000ef8 <MX_I2C1_Init+0x74>)
 8000e8a:	4a1c      	ldr	r2, [pc, #112]	; (8000efc <MX_I2C1_Init+0x78>)
 8000e8c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000e8e:	4b1a      	ldr	r3, [pc, #104]	; (8000ef8 <MX_I2C1_Init+0x74>)
 8000e90:	4a1b      	ldr	r2, [pc, #108]	; (8000f00 <MX_I2C1_Init+0x7c>)
 8000e92:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e94:	4b18      	ldr	r3, [pc, #96]	; (8000ef8 <MX_I2C1_Init+0x74>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000e9a:	4b17      	ldr	r3, [pc, #92]	; (8000ef8 <MX_I2C1_Init+0x74>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ea0:	4b15      	ldr	r3, [pc, #84]	; (8000ef8 <MX_I2C1_Init+0x74>)
 8000ea2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ea6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ea8:	4b13      	ldr	r3, [pc, #76]	; (8000ef8 <MX_I2C1_Init+0x74>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000eae:	4b12      	ldr	r3, [pc, #72]	; (8000ef8 <MX_I2C1_Init+0x74>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000eb4:	4b10      	ldr	r3, [pc, #64]	; (8000ef8 <MX_I2C1_Init+0x74>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000eba:	4b0f      	ldr	r3, [pc, #60]	; (8000ef8 <MX_I2C1_Init+0x74>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ec0:	480d      	ldr	r0, [pc, #52]	; (8000ef8 <MX_I2C1_Init+0x74>)
 8000ec2:	f002 f941 	bl	8003148 <HAL_I2C_Init>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ecc:	f000 f978 	bl	80011c0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	4809      	ldr	r0, [pc, #36]	; (8000ef8 <MX_I2C1_Init+0x74>)
 8000ed4:	f002 fa7c 	bl	80033d0 <HAL_I2CEx_ConfigAnalogFilter>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000ede:	f000 f96f 	bl	80011c0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	4804      	ldr	r0, [pc, #16]	; (8000ef8 <MX_I2C1_Init+0x74>)
 8000ee6:	f002 faaf 	bl	8003448 <HAL_I2CEx_ConfigDigitalFilter>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000ef0:	f000 f966 	bl	80011c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ef4:	bf00      	nop
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	2000013c 	.word	0x2000013c
 8000efc:	40005400 	.word	0x40005400
 8000f00:	00061a80 	.word	0x00061a80

08000f04 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000f08:	4b1b      	ldr	r3, [pc, #108]	; (8000f78 <MX_I2C2_Init+0x74>)
 8000f0a:	4a1c      	ldr	r2, [pc, #112]	; (8000f7c <MX_I2C2_Init+0x78>)
 8000f0c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000f0e:	4b1a      	ldr	r3, [pc, #104]	; (8000f78 <MX_I2C2_Init+0x74>)
 8000f10:	4a1b      	ldr	r2, [pc, #108]	; (8000f80 <MX_I2C2_Init+0x7c>)
 8000f12:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f14:	4b18      	ldr	r3, [pc, #96]	; (8000f78 <MX_I2C2_Init+0x74>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000f1a:	4b17      	ldr	r3, [pc, #92]	; (8000f78 <MX_I2C2_Init+0x74>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f20:	4b15      	ldr	r3, [pc, #84]	; (8000f78 <MX_I2C2_Init+0x74>)
 8000f22:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f26:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f28:	4b13      	ldr	r3, [pc, #76]	; (8000f78 <MX_I2C2_Init+0x74>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000f2e:	4b12      	ldr	r3, [pc, #72]	; (8000f78 <MX_I2C2_Init+0x74>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f34:	4b10      	ldr	r3, [pc, #64]	; (8000f78 <MX_I2C2_Init+0x74>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f3a:	4b0f      	ldr	r3, [pc, #60]	; (8000f78 <MX_I2C2_Init+0x74>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000f40:	480d      	ldr	r0, [pc, #52]	; (8000f78 <MX_I2C2_Init+0x74>)
 8000f42:	f002 f901 	bl	8003148 <HAL_I2C_Init>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000f4c:	f000 f938 	bl	80011c0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f50:	2100      	movs	r1, #0
 8000f52:	4809      	ldr	r0, [pc, #36]	; (8000f78 <MX_I2C2_Init+0x74>)
 8000f54:	f002 fa3c 	bl	80033d0 <HAL_I2CEx_ConfigAnalogFilter>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8000f5e:	f000 f92f 	bl	80011c0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000f62:	2100      	movs	r1, #0
 8000f64:	4804      	ldr	r0, [pc, #16]	; (8000f78 <MX_I2C2_Init+0x74>)
 8000f66:	f002 fa6f 	bl	8003448 <HAL_I2CEx_ConfigDigitalFilter>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000f70:	f000 f926 	bl	80011c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000f74:	bf00      	nop
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	20000190 	.word	0x20000190
 8000f7c:	40005800 	.word	0x40005800
 8000f80:	000186a0 	.word	0x000186a0

08000f84 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b08c      	sub	sp, #48	; 0x30
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f8c:	f107 031c 	add.w	r3, r7, #28
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]
 8000f94:	605a      	str	r2, [r3, #4]
 8000f96:	609a      	str	r2, [r3, #8]
 8000f98:	60da      	str	r2, [r3, #12]
 8000f9a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a32      	ldr	r2, [pc, #200]	; (800106c <HAL_I2C_MspInit+0xe8>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d12d      	bne.n	8001002 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	61bb      	str	r3, [r7, #24]
 8000faa:	4b31      	ldr	r3, [pc, #196]	; (8001070 <HAL_I2C_MspInit+0xec>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fae:	4a30      	ldr	r2, [pc, #192]	; (8001070 <HAL_I2C_MspInit+0xec>)
 8000fb0:	f043 0302 	orr.w	r3, r3, #2
 8000fb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fb6:	4b2e      	ldr	r3, [pc, #184]	; (8001070 <HAL_I2C_MspInit+0xec>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fba:	f003 0302 	and.w	r3, r3, #2
 8000fbe:	61bb      	str	r3, [r7, #24]
 8000fc0:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000fc2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000fc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fc8:	2312      	movs	r3, #18
 8000fca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fd0:	2303      	movs	r3, #3
 8000fd2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000fd4:	2304      	movs	r3, #4
 8000fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fd8:	f107 031c 	add.w	r3, r7, #28
 8000fdc:	4619      	mov	r1, r3
 8000fde:	4825      	ldr	r0, [pc, #148]	; (8001074 <HAL_I2C_MspInit+0xf0>)
 8000fe0:	f001 feb0 	bl	8002d44 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	617b      	str	r3, [r7, #20]
 8000fe8:	4b21      	ldr	r3, [pc, #132]	; (8001070 <HAL_I2C_MspInit+0xec>)
 8000fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fec:	4a20      	ldr	r2, [pc, #128]	; (8001070 <HAL_I2C_MspInit+0xec>)
 8000fee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ff2:	6413      	str	r3, [r2, #64]	; 0x40
 8000ff4:	4b1e      	ldr	r3, [pc, #120]	; (8001070 <HAL_I2C_MspInit+0xec>)
 8000ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ffc:	617b      	str	r3, [r7, #20]
 8000ffe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001000:	e030      	b.n	8001064 <HAL_I2C_MspInit+0xe0>
  else if(i2cHandle->Instance==I2C2)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4a1c      	ldr	r2, [pc, #112]	; (8001078 <HAL_I2C_MspInit+0xf4>)
 8001008:	4293      	cmp	r3, r2
 800100a:	d12b      	bne.n	8001064 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800100c:	2300      	movs	r3, #0
 800100e:	613b      	str	r3, [r7, #16]
 8001010:	4b17      	ldr	r3, [pc, #92]	; (8001070 <HAL_I2C_MspInit+0xec>)
 8001012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001014:	4a16      	ldr	r2, [pc, #88]	; (8001070 <HAL_I2C_MspInit+0xec>)
 8001016:	f043 0320 	orr.w	r3, r3, #32
 800101a:	6313      	str	r3, [r2, #48]	; 0x30
 800101c:	4b14      	ldr	r3, [pc, #80]	; (8001070 <HAL_I2C_MspInit+0xec>)
 800101e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001020:	f003 0320 	and.w	r3, r3, #32
 8001024:	613b      	str	r3, [r7, #16]
 8001026:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001028:	2303      	movs	r3, #3
 800102a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800102c:	2312      	movs	r3, #18
 800102e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001030:	2300      	movs	r3, #0
 8001032:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001034:	2303      	movs	r3, #3
 8001036:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001038:	2304      	movs	r3, #4
 800103a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800103c:	f107 031c 	add.w	r3, r7, #28
 8001040:	4619      	mov	r1, r3
 8001042:	480e      	ldr	r0, [pc, #56]	; (800107c <HAL_I2C_MspInit+0xf8>)
 8001044:	f001 fe7e 	bl	8002d44 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001048:	2300      	movs	r3, #0
 800104a:	60fb      	str	r3, [r7, #12]
 800104c:	4b08      	ldr	r3, [pc, #32]	; (8001070 <HAL_I2C_MspInit+0xec>)
 800104e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001050:	4a07      	ldr	r2, [pc, #28]	; (8001070 <HAL_I2C_MspInit+0xec>)
 8001052:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001056:	6413      	str	r3, [r2, #64]	; 0x40
 8001058:	4b05      	ldr	r3, [pc, #20]	; (8001070 <HAL_I2C_MspInit+0xec>)
 800105a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001060:	60fb      	str	r3, [r7, #12]
 8001062:	68fb      	ldr	r3, [r7, #12]
}
 8001064:	bf00      	nop
 8001066:	3730      	adds	r7, #48	; 0x30
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	40005400 	.word	0x40005400
 8001070:	40023800 	.word	0x40023800
 8001074:	40020400 	.word	0x40020400
 8001078:	40005800 	.word	0x40005800
 800107c:	40021400 	.word	0x40021400

08001080 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001086:	f000 fe57 	bl	8001d38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800108a:	f000 f829 	bl	80010e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800108e:	f7ff fe1d 	bl	8000ccc <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001092:	f000 fdad 	bl	8001bf0 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8001096:	f7ff fef5 	bl	8000e84 <MX_I2C1_Init>
  MX_TIM7_Init();
 800109a:	f000 fbb3 	bl	8001804 <MX_TIM7_Init>
  MX_TIM3_Init();
 800109e:	f000 fa25 	bl	80014ec <MX_TIM3_Init>
  MX_TIM4_Init();
 80010a2:	f000 fa99 	bl	80015d8 <MX_TIM4_Init>
  MX_TIM10_Init();
 80010a6:	f000 fbe3 	bl	8001870 <MX_TIM10_Init>
  MX_TIM2_Init();
 80010aa:	f000 f9a9 	bl	8001400 <MX_TIM2_Init>
  MX_DMA_Init();
 80010ae:	f7ff fded 	bl	8000c8c <MX_DMA_Init>
  MX_ADC1_Init();
 80010b2:	f7ff fc6d 	bl	8000990 <MX_ADC1_Init>
  MX_TIM5_Init();
 80010b6:	f000 fb23 	bl	8001700 <MX_TIM5_Init>
  MX_DAC_Init();
 80010ba:	f7ff fd79 	bl	8000bb0 <MX_DAC_Init>
  MX_I2C2_Init();
 80010be:	f7ff ff21 	bl	8000f04 <MX_I2C2_Init>
  MX_SPI2_Init();
 80010c2:	f000 f883 	bl	80011cc <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  VS1003_Init();
 80010c6:	f7ff fa5b 	bl	8000580 <VS1003_Init>
  VS1003_SoftReset();
 80010ca:	f7ff fbdb 	bl	8000884 <VS1003_SoftReset>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int i = 0;
 80010ce:	2300      	movs	r3, #0
 80010d0:	607b      	str	r3, [r7, #4]
  while (1)
  {
	  if(MP3_DREQ == 1)
 80010d2:	2180      	movs	r1, #128	; 0x80
 80010d4:	4801      	ldr	r0, [pc, #4]	; (80010dc <main+0x5c>)
 80010d6:	f001 ffe1 	bl	800309c <HAL_GPIO_ReadPin>
 80010da:	e7fa      	b.n	80010d2 <main+0x52>
 80010dc:	40020800 	.word	0x40020800

080010e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b094      	sub	sp, #80	; 0x50
 80010e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010e6:	f107 0320 	add.w	r3, r7, #32
 80010ea:	2230      	movs	r2, #48	; 0x30
 80010ec:	2100      	movs	r1, #0
 80010ee:	4618      	mov	r0, r3
 80010f0:	f004 ff16 	bl	8005f20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010f4:	f107 030c 	add.w	r3, r7, #12
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]
 80010fc:	605a      	str	r2, [r3, #4]
 80010fe:	609a      	str	r2, [r3, #8]
 8001100:	60da      	str	r2, [r3, #12]
 8001102:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001104:	2300      	movs	r3, #0
 8001106:	60bb      	str	r3, [r7, #8]
 8001108:	4b2b      	ldr	r3, [pc, #172]	; (80011b8 <SystemClock_Config+0xd8>)
 800110a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110c:	4a2a      	ldr	r2, [pc, #168]	; (80011b8 <SystemClock_Config+0xd8>)
 800110e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001112:	6413      	str	r3, [r2, #64]	; 0x40
 8001114:	4b28      	ldr	r3, [pc, #160]	; (80011b8 <SystemClock_Config+0xd8>)
 8001116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001118:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800111c:	60bb      	str	r3, [r7, #8]
 800111e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001120:	2300      	movs	r3, #0
 8001122:	607b      	str	r3, [r7, #4]
 8001124:	4b25      	ldr	r3, [pc, #148]	; (80011bc <SystemClock_Config+0xdc>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a24      	ldr	r2, [pc, #144]	; (80011bc <SystemClock_Config+0xdc>)
 800112a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800112e:	6013      	str	r3, [r2, #0]
 8001130:	4b22      	ldr	r3, [pc, #136]	; (80011bc <SystemClock_Config+0xdc>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001138:	607b      	str	r3, [r7, #4]
 800113a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800113c:	2301      	movs	r3, #1
 800113e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001140:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001144:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001146:	2302      	movs	r3, #2
 8001148:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800114a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800114e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001150:	2304      	movs	r3, #4
 8001152:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001154:	23b4      	movs	r3, #180	; 0xb4
 8001156:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001158:	2302      	movs	r3, #2
 800115a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800115c:	2304      	movs	r3, #4
 800115e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001160:	f107 0320 	add.w	r3, r7, #32
 8001164:	4618      	mov	r0, r3
 8001166:	f002 f9ff 	bl	8003568 <HAL_RCC_OscConfig>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001170:	f000 f826 	bl	80011c0 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001174:	f002 f9a8 	bl	80034c8 <HAL_PWREx_EnableOverDrive>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800117e:	f000 f81f 	bl	80011c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001182:	230f      	movs	r3, #15
 8001184:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001186:	2302      	movs	r3, #2
 8001188:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800118a:	2300      	movs	r3, #0
 800118c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800118e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001192:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001194:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001198:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800119a:	f107 030c 	add.w	r3, r7, #12
 800119e:	2105      	movs	r1, #5
 80011a0:	4618      	mov	r0, r3
 80011a2:	f002 fc59 	bl	8003a58 <HAL_RCC_ClockConfig>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80011ac:	f000 f808 	bl	80011c0 <Error_Handler>
  }
}
 80011b0:	bf00      	nop
 80011b2:	3750      	adds	r7, #80	; 0x50
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	40023800 	.word	0x40023800
 80011bc:	40007000 	.word	0x40007000

080011c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011c4:	b672      	cpsid	i
}
 80011c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011c8:	e7fe      	b.n	80011c8 <Error_Handler+0x8>
	...

080011cc <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80011d0:	4b17      	ldr	r3, [pc, #92]	; (8001230 <MX_SPI2_Init+0x64>)
 80011d2:	4a18      	ldr	r2, [pc, #96]	; (8001234 <MX_SPI2_Init+0x68>)
 80011d4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80011d6:	4b16      	ldr	r3, [pc, #88]	; (8001230 <MX_SPI2_Init+0x64>)
 80011d8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011dc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80011de:	4b14      	ldr	r3, [pc, #80]	; (8001230 <MX_SPI2_Init+0x64>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80011e4:	4b12      	ldr	r3, [pc, #72]	; (8001230 <MX_SPI2_Init+0x64>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80011ea:	4b11      	ldr	r3, [pc, #68]	; (8001230 <MX_SPI2_Init+0x64>)
 80011ec:	2202      	movs	r2, #2
 80011ee:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80011f0:	4b0f      	ldr	r3, [pc, #60]	; (8001230 <MX_SPI2_Init+0x64>)
 80011f2:	2201      	movs	r2, #1
 80011f4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80011f6:	4b0e      	ldr	r3, [pc, #56]	; (8001230 <MX_SPI2_Init+0x64>)
 80011f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011fc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80011fe:	4b0c      	ldr	r3, [pc, #48]	; (8001230 <MX_SPI2_Init+0x64>)
 8001200:	2210      	movs	r2, #16
 8001202:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001204:	4b0a      	ldr	r3, [pc, #40]	; (8001230 <MX_SPI2_Init+0x64>)
 8001206:	2200      	movs	r2, #0
 8001208:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800120a:	4b09      	ldr	r3, [pc, #36]	; (8001230 <MX_SPI2_Init+0x64>)
 800120c:	2200      	movs	r2, #0
 800120e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001210:	4b07      	ldr	r3, [pc, #28]	; (8001230 <MX_SPI2_Init+0x64>)
 8001212:	2200      	movs	r2, #0
 8001214:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001216:	4b06      	ldr	r3, [pc, #24]	; (8001230 <MX_SPI2_Init+0x64>)
 8001218:	220a      	movs	r2, #10
 800121a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800121c:	4804      	ldr	r0, [pc, #16]	; (8001230 <MX_SPI2_Init+0x64>)
 800121e:	f002 fe17 	bl	8003e50 <HAL_SPI_Init>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001228:	f7ff ffca 	bl	80011c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800122c:	bf00      	nop
 800122e:	bd80      	pop	{r7, pc}
 8001230:	20000028 	.word	0x20000028
 8001234:	40003800 	.word	0x40003800

08001238 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b08a      	sub	sp, #40	; 0x28
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001240:	f107 0314 	add.w	r3, r7, #20
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
 8001248:	605a      	str	r2, [r3, #4]
 800124a:	609a      	str	r2, [r3, #8]
 800124c:	60da      	str	r2, [r3, #12]
 800124e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a19      	ldr	r2, [pc, #100]	; (80012bc <HAL_SPI_MspInit+0x84>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d12c      	bne.n	80012b4 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800125a:	2300      	movs	r3, #0
 800125c:	613b      	str	r3, [r7, #16]
 800125e:	4b18      	ldr	r3, [pc, #96]	; (80012c0 <HAL_SPI_MspInit+0x88>)
 8001260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001262:	4a17      	ldr	r2, [pc, #92]	; (80012c0 <HAL_SPI_MspInit+0x88>)
 8001264:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001268:	6413      	str	r3, [r2, #64]	; 0x40
 800126a:	4b15      	ldr	r3, [pc, #84]	; (80012c0 <HAL_SPI_MspInit+0x88>)
 800126c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001272:	613b      	str	r3, [r7, #16]
 8001274:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001276:	2300      	movs	r3, #0
 8001278:	60fb      	str	r3, [r7, #12]
 800127a:	4b11      	ldr	r3, [pc, #68]	; (80012c0 <HAL_SPI_MspInit+0x88>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127e:	4a10      	ldr	r2, [pc, #64]	; (80012c0 <HAL_SPI_MspInit+0x88>)
 8001280:	f043 0302 	orr.w	r3, r3, #2
 8001284:	6313      	str	r3, [r2, #48]	; 0x30
 8001286:	4b0e      	ldr	r3, [pc, #56]	; (80012c0 <HAL_SPI_MspInit+0x88>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128a:	f003 0302 	and.w	r3, r3, #2
 800128e:	60fb      	str	r3, [r7, #12]
 8001290:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB10     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 8001292:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8001296:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001298:	2302      	movs	r3, #2
 800129a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129c:	2300      	movs	r3, #0
 800129e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012a0:	2303      	movs	r3, #3
 80012a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80012a4:	2305      	movs	r3, #5
 80012a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012a8:	f107 0314 	add.w	r3, r7, #20
 80012ac:	4619      	mov	r1, r3
 80012ae:	4805      	ldr	r0, [pc, #20]	; (80012c4 <HAL_SPI_MspInit+0x8c>)
 80012b0:	f001 fd48 	bl	8002d44 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80012b4:	bf00      	nop
 80012b6:	3728      	adds	r7, #40	; 0x28
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	40003800 	.word	0x40003800
 80012c0:	40023800 	.word	0x40023800
 80012c4:	40020400 	.word	0x40020400

080012c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ce:	2300      	movs	r3, #0
 80012d0:	607b      	str	r3, [r7, #4]
 80012d2:	4b10      	ldr	r3, [pc, #64]	; (8001314 <HAL_MspInit+0x4c>)
 80012d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d6:	4a0f      	ldr	r2, [pc, #60]	; (8001314 <HAL_MspInit+0x4c>)
 80012d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012dc:	6453      	str	r3, [r2, #68]	; 0x44
 80012de:	4b0d      	ldr	r3, [pc, #52]	; (8001314 <HAL_MspInit+0x4c>)
 80012e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012e6:	607b      	str	r3, [r7, #4]
 80012e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012ea:	2300      	movs	r3, #0
 80012ec:	603b      	str	r3, [r7, #0]
 80012ee:	4b09      	ldr	r3, [pc, #36]	; (8001314 <HAL_MspInit+0x4c>)
 80012f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f2:	4a08      	ldr	r2, [pc, #32]	; (8001314 <HAL_MspInit+0x4c>)
 80012f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012f8:	6413      	str	r3, [r2, #64]	; 0x40
 80012fa:	4b06      	ldr	r3, [pc, #24]	; (8001314 <HAL_MspInit+0x4c>)
 80012fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001302:	603b      	str	r3, [r7, #0]
 8001304:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001306:	bf00      	nop
 8001308:	370c      	adds	r7, #12
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	40023800 	.word	0x40023800

08001318 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800131c:	e7fe      	b.n	800131c <NMI_Handler+0x4>

0800131e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800131e:	b480      	push	{r7}
 8001320:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001322:	e7fe      	b.n	8001322 <HardFault_Handler+0x4>

08001324 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001328:	e7fe      	b.n	8001328 <MemManage_Handler+0x4>

0800132a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800132a:	b480      	push	{r7}
 800132c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800132e:	e7fe      	b.n	800132e <BusFault_Handler+0x4>

08001330 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001334:	e7fe      	b.n	8001334 <UsageFault_Handler+0x4>

08001336 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001336:	b480      	push	{r7}
 8001338:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800133a:	bf00      	nop
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr

08001344 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001348:	bf00      	nop
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr

08001352 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001352:	b480      	push	{r7}
 8001354:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001356:	bf00      	nop
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr

08001360 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001364:	f000 fd3a 	bl	8001ddc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001368:	bf00      	nop
 800136a:	bd80      	pop	{r7, pc}

0800136c <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001370:	2008      	movs	r0, #8
 8001372:	f001 fec5 	bl	8003100 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001376:	bf00      	nop
 8001378:	bd80      	pop	{r7, pc}
	...

0800137c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001380:	4802      	ldr	r0, [pc, #8]	; (800138c <TIM4_IRQHandler+0x10>)
 8001382:	f003 f903 	bl	800458c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001386:	bf00      	nop
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	200001e4 	.word	0x200001e4

08001390 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001394:	4802      	ldr	r0, [pc, #8]	; (80013a0 <USART3_IRQHandler+0x10>)
 8001396:	f003 ff85 	bl	80052a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800139a:	bf00      	nop
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	20000394 	.word	0x20000394

080013a4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80013a8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80013ac:	f001 fea8 	bl	8003100 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80013b0:	bf00      	nop
 80013b2:	bd80      	pop	{r7, pc}

080013b4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80013b8:	4802      	ldr	r0, [pc, #8]	; (80013c4 <TIM7_IRQHandler+0x10>)
 80013ba:	f003 f8e7 	bl	800458c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80013be:	bf00      	nop
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	2000034c 	.word	0x2000034c

080013c8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80013cc:	4802      	ldr	r0, [pc, #8]	; (80013d8 <DMA2_Stream0_IRQHandler+0x10>)
 80013ce:	f001 fa7d 	bl	80028cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80013d2:	bf00      	nop
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	200000c8 	.word	0x200000c8

080013dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013e0:	4b06      	ldr	r3, [pc, #24]	; (80013fc <SystemInit+0x20>)
 80013e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013e6:	4a05      	ldr	r2, [pc, #20]	; (80013fc <SystemInit+0x20>)
 80013e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013f0:	bf00      	nop
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	e000ed00 	.word	0xe000ed00

08001400 <MX_TIM2_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim10;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b08e      	sub	sp, #56	; 0x38
 8001404:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001406:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800140a:	2200      	movs	r2, #0
 800140c:	601a      	str	r2, [r3, #0]
 800140e:	605a      	str	r2, [r3, #4]
 8001410:	609a      	str	r2, [r3, #8]
 8001412:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001414:	f107 0320 	add.w	r3, r7, #32
 8001418:	2200      	movs	r2, #0
 800141a:	601a      	str	r2, [r3, #0]
 800141c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800141e:	1d3b      	adds	r3, r7, #4
 8001420:	2200      	movs	r2, #0
 8001422:	601a      	str	r2, [r3, #0]
 8001424:	605a      	str	r2, [r3, #4]
 8001426:	609a      	str	r2, [r3, #8]
 8001428:	60da      	str	r2, [r3, #12]
 800142a:	611a      	str	r2, [r3, #16]
 800142c:	615a      	str	r2, [r3, #20]
 800142e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001430:	4b2d      	ldr	r3, [pc, #180]	; (80014e8 <MX_TIM2_Init+0xe8>)
 8001432:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001436:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 180-1;
 8001438:	4b2b      	ldr	r3, [pc, #172]	; (80014e8 <MX_TIM2_Init+0xe8>)
 800143a:	22b3      	movs	r2, #179	; 0xb3
 800143c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800143e:	4b2a      	ldr	r3, [pc, #168]	; (80014e8 <MX_TIM2_Init+0xe8>)
 8001440:	2200      	movs	r2, #0
 8001442:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8001444:	4b28      	ldr	r3, [pc, #160]	; (80014e8 <MX_TIM2_Init+0xe8>)
 8001446:	f240 32e7 	movw	r2, #999	; 0x3e7
 800144a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800144c:	4b26      	ldr	r3, [pc, #152]	; (80014e8 <MX_TIM2_Init+0xe8>)
 800144e:	2200      	movs	r2, #0
 8001450:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001452:	4b25      	ldr	r3, [pc, #148]	; (80014e8 <MX_TIM2_Init+0xe8>)
 8001454:	2200      	movs	r2, #0
 8001456:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001458:	4823      	ldr	r0, [pc, #140]	; (80014e8 <MX_TIM2_Init+0xe8>)
 800145a:	f002 ffef 	bl	800443c <HAL_TIM_Base_Init>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001464:	f7ff feac 	bl	80011c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001468:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800146c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800146e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001472:	4619      	mov	r1, r3
 8001474:	481c      	ldr	r0, [pc, #112]	; (80014e8 <MX_TIM2_Init+0xe8>)
 8001476:	f003 fa53 	bl	8004920 <HAL_TIM_ConfigClockSource>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001480:	f7ff fe9e 	bl	80011c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001484:	4818      	ldr	r0, [pc, #96]	; (80014e8 <MX_TIM2_Init+0xe8>)
 8001486:	f003 f828 	bl	80044da <HAL_TIM_PWM_Init>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001490:	f7ff fe96 	bl	80011c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001494:	2300      	movs	r3, #0
 8001496:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001498:	2300      	movs	r3, #0
 800149a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800149c:	f107 0320 	add.w	r3, r7, #32
 80014a0:	4619      	mov	r1, r3
 80014a2:	4811      	ldr	r0, [pc, #68]	; (80014e8 <MX_TIM2_Init+0xe8>)
 80014a4:	f003 fe20 	bl	80050e8 <HAL_TIMEx_MasterConfigSynchronization>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80014ae:	f7ff fe87 	bl	80011c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014b2:	2360      	movs	r3, #96	; 0x60
 80014b4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 80014b6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80014ba:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014bc:	2300      	movs	r3, #0
 80014be:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014c0:	2300      	movs	r3, #0
 80014c2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014c4:	1d3b      	adds	r3, r7, #4
 80014c6:	2200      	movs	r2, #0
 80014c8:	4619      	mov	r1, r3
 80014ca:	4807      	ldr	r0, [pc, #28]	; (80014e8 <MX_TIM2_Init+0xe8>)
 80014cc:	f003 f966 	bl	800479c <HAL_TIM_PWM_ConfigChannel>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80014d6:	f7ff fe73 	bl	80011c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80014da:	4803      	ldr	r0, [pc, #12]	; (80014e8 <MX_TIM2_Init+0xe8>)
 80014dc:	f000 fab2 	bl	8001a44 <HAL_TIM_MspPostInit>

}
 80014e0:	bf00      	nop
 80014e2:	3738      	adds	r7, #56	; 0x38
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	20000304 	.word	0x20000304

080014ec <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b08e      	sub	sp, #56	; 0x38
 80014f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014f6:	2200      	movs	r2, #0
 80014f8:	601a      	str	r2, [r3, #0]
 80014fa:	605a      	str	r2, [r3, #4]
 80014fc:	609a      	str	r2, [r3, #8]
 80014fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001500:	f107 0320 	add.w	r3, r7, #32
 8001504:	2200      	movs	r2, #0
 8001506:	601a      	str	r2, [r3, #0]
 8001508:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800150a:	1d3b      	adds	r3, r7, #4
 800150c:	2200      	movs	r2, #0
 800150e:	601a      	str	r2, [r3, #0]
 8001510:	605a      	str	r2, [r3, #4]
 8001512:	609a      	str	r2, [r3, #8]
 8001514:	60da      	str	r2, [r3, #12]
 8001516:	611a      	str	r2, [r3, #16]
 8001518:	615a      	str	r2, [r3, #20]
 800151a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800151c:	4b2c      	ldr	r3, [pc, #176]	; (80015d0 <MX_TIM3_Init+0xe4>)
 800151e:	4a2d      	ldr	r2, [pc, #180]	; (80015d4 <MX_TIM3_Init+0xe8>)
 8001520:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9-1;
 8001522:	4b2b      	ldr	r3, [pc, #172]	; (80015d0 <MX_TIM3_Init+0xe4>)
 8001524:	2208      	movs	r2, #8
 8001526:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001528:	4b29      	ldr	r3, [pc, #164]	; (80015d0 <MX_TIM3_Init+0xe4>)
 800152a:	2200      	movs	r2, #0
 800152c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50000-1;
 800152e:	4b28      	ldr	r3, [pc, #160]	; (80015d0 <MX_TIM3_Init+0xe4>)
 8001530:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001534:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001536:	4b26      	ldr	r3, [pc, #152]	; (80015d0 <MX_TIM3_Init+0xe4>)
 8001538:	2200      	movs	r2, #0
 800153a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800153c:	4b24      	ldr	r3, [pc, #144]	; (80015d0 <MX_TIM3_Init+0xe4>)
 800153e:	2200      	movs	r2, #0
 8001540:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001542:	4823      	ldr	r0, [pc, #140]	; (80015d0 <MX_TIM3_Init+0xe4>)
 8001544:	f002 ff7a 	bl	800443c <HAL_TIM_Base_Init>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800154e:	f7ff fe37 	bl	80011c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001552:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001556:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001558:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800155c:	4619      	mov	r1, r3
 800155e:	481c      	ldr	r0, [pc, #112]	; (80015d0 <MX_TIM3_Init+0xe4>)
 8001560:	f003 f9de 	bl	8004920 <HAL_TIM_ConfigClockSource>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800156a:	f7ff fe29 	bl	80011c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800156e:	4818      	ldr	r0, [pc, #96]	; (80015d0 <MX_TIM3_Init+0xe4>)
 8001570:	f002 ffb3 	bl	80044da <HAL_TIM_PWM_Init>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800157a:	f7ff fe21 	bl	80011c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800157e:	2300      	movs	r3, #0
 8001580:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001582:	2300      	movs	r3, #0
 8001584:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001586:	f107 0320 	add.w	r3, r7, #32
 800158a:	4619      	mov	r1, r3
 800158c:	4810      	ldr	r0, [pc, #64]	; (80015d0 <MX_TIM3_Init+0xe4>)
 800158e:	f003 fdab 	bl	80050e8 <HAL_TIMEx_MasterConfigSynchronization>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001598:	f7ff fe12 	bl	80011c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800159c:	2360      	movs	r3, #96	; 0x60
 800159e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80015a0:	2300      	movs	r3, #0
 80015a2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015a4:	2300      	movs	r3, #0
 80015a6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015a8:	2300      	movs	r3, #0
 80015aa:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015ac:	1d3b      	adds	r3, r7, #4
 80015ae:	2200      	movs	r2, #0
 80015b0:	4619      	mov	r1, r3
 80015b2:	4807      	ldr	r0, [pc, #28]	; (80015d0 <MX_TIM3_Init+0xe4>)
 80015b4:	f003 f8f2 	bl	800479c <HAL_TIM_PWM_ConfigChannel>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80015be:	f7ff fdff 	bl	80011c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80015c2:	4803      	ldr	r0, [pc, #12]	; (80015d0 <MX_TIM3_Init+0xe4>)
 80015c4:	f000 fa3e 	bl	8001a44 <HAL_TIM_MspPostInit>

}
 80015c8:	bf00      	nop
 80015ca:	3738      	adds	r7, #56	; 0x38
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	200002bc 	.word	0x200002bc
 80015d4:	40000400 	.word	0x40000400

080015d8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b08e      	sub	sp, #56	; 0x38
 80015dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015e2:	2200      	movs	r2, #0
 80015e4:	601a      	str	r2, [r3, #0]
 80015e6:	605a      	str	r2, [r3, #4]
 80015e8:	609a      	str	r2, [r3, #8]
 80015ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015ec:	f107 0320 	add.w	r3, r7, #32
 80015f0:	2200      	movs	r2, #0
 80015f2:	601a      	str	r2, [r3, #0]
 80015f4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015f6:	1d3b      	adds	r3, r7, #4
 80015f8:	2200      	movs	r2, #0
 80015fa:	601a      	str	r2, [r3, #0]
 80015fc:	605a      	str	r2, [r3, #4]
 80015fe:	609a      	str	r2, [r3, #8]
 8001600:	60da      	str	r2, [r3, #12]
 8001602:	611a      	str	r2, [r3, #16]
 8001604:	615a      	str	r2, [r3, #20]
 8001606:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001608:	4b3b      	ldr	r3, [pc, #236]	; (80016f8 <MX_TIM4_Init+0x120>)
 800160a:	4a3c      	ldr	r2, [pc, #240]	; (80016fc <MX_TIM4_Init+0x124>)
 800160c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 18-1;
 800160e:	4b3a      	ldr	r3, [pc, #232]	; (80016f8 <MX_TIM4_Init+0x120>)
 8001610:	2211      	movs	r2, #17
 8001612:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001614:	4b38      	ldr	r3, [pc, #224]	; (80016f8 <MX_TIM4_Init+0x120>)
 8001616:	2200      	movs	r2, #0
 8001618:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 50000-1;
 800161a:	4b37      	ldr	r3, [pc, #220]	; (80016f8 <MX_TIM4_Init+0x120>)
 800161c:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001620:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001622:	4b35      	ldr	r3, [pc, #212]	; (80016f8 <MX_TIM4_Init+0x120>)
 8001624:	2200      	movs	r2, #0
 8001626:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001628:	4b33      	ldr	r3, [pc, #204]	; (80016f8 <MX_TIM4_Init+0x120>)
 800162a:	2200      	movs	r2, #0
 800162c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800162e:	4832      	ldr	r0, [pc, #200]	; (80016f8 <MX_TIM4_Init+0x120>)
 8001630:	f002 ff04 	bl	800443c <HAL_TIM_Base_Init>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 800163a:	f7ff fdc1 	bl	80011c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800163e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001642:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001644:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001648:	4619      	mov	r1, r3
 800164a:	482b      	ldr	r0, [pc, #172]	; (80016f8 <MX_TIM4_Init+0x120>)
 800164c:	f003 f968 	bl	8004920 <HAL_TIM_ConfigClockSource>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001656:	f7ff fdb3 	bl	80011c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800165a:	4827      	ldr	r0, [pc, #156]	; (80016f8 <MX_TIM4_Init+0x120>)
 800165c:	f002 ff3d 	bl	80044da <HAL_TIM_PWM_Init>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001666:	f7ff fdab 	bl	80011c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800166a:	2300      	movs	r3, #0
 800166c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800166e:	2300      	movs	r3, #0
 8001670:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001672:	f107 0320 	add.w	r3, r7, #32
 8001676:	4619      	mov	r1, r3
 8001678:	481f      	ldr	r0, [pc, #124]	; (80016f8 <MX_TIM4_Init+0x120>)
 800167a:	f003 fd35 	bl	80050e8 <HAL_TIMEx_MasterConfigSynchronization>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001684:	f7ff fd9c 	bl	80011c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001688:	2360      	movs	r3, #96	; 0x60
 800168a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 25000-1;
 800168c:	f246 13a7 	movw	r3, #24999	; 0x61a7
 8001690:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001692:	2300      	movs	r3, #0
 8001694:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001696:	2300      	movs	r3, #0
 8001698:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800169a:	1d3b      	adds	r3, r7, #4
 800169c:	2200      	movs	r2, #0
 800169e:	4619      	mov	r1, r3
 80016a0:	4815      	ldr	r0, [pc, #84]	; (80016f8 <MX_TIM4_Init+0x120>)
 80016a2:	f003 f87b 	bl	800479c <HAL_TIM_PWM_ConfigChannel>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 80016ac:	f7ff fd88 	bl	80011c0 <Error_Handler>
  }
  sConfigOC.Pulse = 12500-1;
 80016b0:	f243 03d3 	movw	r3, #12499	; 0x30d3
 80016b4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80016b6:	1d3b      	adds	r3, r7, #4
 80016b8:	2204      	movs	r2, #4
 80016ba:	4619      	mov	r1, r3
 80016bc:	480e      	ldr	r0, [pc, #56]	; (80016f8 <MX_TIM4_Init+0x120>)
 80016be:	f003 f86d 	bl	800479c <HAL_TIM_PWM_ConfigChannel>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <MX_TIM4_Init+0xf4>
  {
    Error_Handler();
 80016c8:	f7ff fd7a 	bl	80011c0 <Error_Handler>
  }
  sConfigOC.Pulse = 7250-1;
 80016cc:	f641 4351 	movw	r3, #7249	; 0x1c51
 80016d0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80016d2:	1d3b      	adds	r3, r7, #4
 80016d4:	2208      	movs	r2, #8
 80016d6:	4619      	mov	r1, r3
 80016d8:	4807      	ldr	r0, [pc, #28]	; (80016f8 <MX_TIM4_Init+0x120>)
 80016da:	f003 f85f 	bl	800479c <HAL_TIM_PWM_ConfigChannel>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <MX_TIM4_Init+0x110>
  {
    Error_Handler();
 80016e4:	f7ff fd6c 	bl	80011c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80016e8:	4803      	ldr	r0, [pc, #12]	; (80016f8 <MX_TIM4_Init+0x120>)
 80016ea:	f000 f9ab 	bl	8001a44 <HAL_TIM_MspPostInit>

}
 80016ee:	bf00      	nop
 80016f0:	3738      	adds	r7, #56	; 0x38
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	200001e4 	.word	0x200001e4
 80016fc:	40000800 	.word	0x40000800

08001700 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b08e      	sub	sp, #56	; 0x38
 8001704:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001706:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800170a:	2200      	movs	r2, #0
 800170c:	601a      	str	r2, [r3, #0]
 800170e:	605a      	str	r2, [r3, #4]
 8001710:	609a      	str	r2, [r3, #8]
 8001712:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001714:	f107 0320 	add.w	r3, r7, #32
 8001718:	2200      	movs	r2, #0
 800171a:	601a      	str	r2, [r3, #0]
 800171c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800171e:	1d3b      	adds	r3, r7, #4
 8001720:	2200      	movs	r2, #0
 8001722:	601a      	str	r2, [r3, #0]
 8001724:	605a      	str	r2, [r3, #4]
 8001726:	609a      	str	r2, [r3, #8]
 8001728:	60da      	str	r2, [r3, #12]
 800172a:	611a      	str	r2, [r3, #16]
 800172c:	615a      	str	r2, [r3, #20]
 800172e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001730:	4b31      	ldr	r3, [pc, #196]	; (80017f8 <MX_TIM5_Init+0xf8>)
 8001732:	4a32      	ldr	r2, [pc, #200]	; (80017fc <MX_TIM5_Init+0xfc>)
 8001734:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 9;
 8001736:	4b30      	ldr	r3, [pc, #192]	; (80017f8 <MX_TIM5_Init+0xf8>)
 8001738:	2209      	movs	r2, #9
 800173a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800173c:	4b2e      	ldr	r3, [pc, #184]	; (80017f8 <MX_TIM5_Init+0xf8>)
 800173e:	2200      	movs	r2, #0
 8001740:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 100000-1;
 8001742:	4b2d      	ldr	r3, [pc, #180]	; (80017f8 <MX_TIM5_Init+0xf8>)
 8001744:	4a2e      	ldr	r2, [pc, #184]	; (8001800 <MX_TIM5_Init+0x100>)
 8001746:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001748:	4b2b      	ldr	r3, [pc, #172]	; (80017f8 <MX_TIM5_Init+0xf8>)
 800174a:	2200      	movs	r2, #0
 800174c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800174e:	4b2a      	ldr	r3, [pc, #168]	; (80017f8 <MX_TIM5_Init+0xf8>)
 8001750:	2200      	movs	r2, #0
 8001752:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001754:	4828      	ldr	r0, [pc, #160]	; (80017f8 <MX_TIM5_Init+0xf8>)
 8001756:	f002 fe71 	bl	800443c <HAL_TIM_Base_Init>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <MX_TIM5_Init+0x64>
  {
    Error_Handler();
 8001760:	f7ff fd2e 	bl	80011c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001764:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001768:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800176a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800176e:	4619      	mov	r1, r3
 8001770:	4821      	ldr	r0, [pc, #132]	; (80017f8 <MX_TIM5_Init+0xf8>)
 8001772:	f003 f8d5 	bl	8004920 <HAL_TIM_ConfigClockSource>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <MX_TIM5_Init+0x80>
  {
    Error_Handler();
 800177c:	f7ff fd20 	bl	80011c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001780:	481d      	ldr	r0, [pc, #116]	; (80017f8 <MX_TIM5_Init+0xf8>)
 8001782:	f002 feaa 	bl	80044da <HAL_TIM_PWM_Init>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d001      	beq.n	8001790 <MX_TIM5_Init+0x90>
  {
    Error_Handler();
 800178c:	f7ff fd18 	bl	80011c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001790:	2300      	movs	r3, #0
 8001792:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001794:	2300      	movs	r3, #0
 8001796:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001798:	f107 0320 	add.w	r3, r7, #32
 800179c:	4619      	mov	r1, r3
 800179e:	4816      	ldr	r0, [pc, #88]	; (80017f8 <MX_TIM5_Init+0xf8>)
 80017a0:	f003 fca2 	bl	80050e8 <HAL_TIMEx_MasterConfigSynchronization>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <MX_TIM5_Init+0xae>
  {
    Error_Handler();
 80017aa:	f7ff fd09 	bl	80011c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017ae:	2360      	movs	r3, #96	; 0x60
 80017b0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80017b2:	2300      	movs	r3, #0
 80017b4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017b6:	2300      	movs	r3, #0
 80017b8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017ba:	2300      	movs	r3, #0
 80017bc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017be:	1d3b      	adds	r3, r7, #4
 80017c0:	2200      	movs	r2, #0
 80017c2:	4619      	mov	r1, r3
 80017c4:	480c      	ldr	r0, [pc, #48]	; (80017f8 <MX_TIM5_Init+0xf8>)
 80017c6:	f002 ffe9 	bl	800479c <HAL_TIM_PWM_ConfigChannel>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <MX_TIM5_Init+0xd4>
  {
    Error_Handler();
 80017d0:	f7ff fcf6 	bl	80011c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80017d4:	1d3b      	adds	r3, r7, #4
 80017d6:	220c      	movs	r2, #12
 80017d8:	4619      	mov	r1, r3
 80017da:	4807      	ldr	r0, [pc, #28]	; (80017f8 <MX_TIM5_Init+0xf8>)
 80017dc:	f002 ffde 	bl	800479c <HAL_TIM_PWM_ConfigChannel>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <MX_TIM5_Init+0xea>
  {
    Error_Handler();
 80017e6:	f7ff fceb 	bl	80011c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80017ea:	4803      	ldr	r0, [pc, #12]	; (80017f8 <MX_TIM5_Init+0xf8>)
 80017ec:	f000 f92a 	bl	8001a44 <HAL_TIM_MspPostInit>

}
 80017f0:	bf00      	nop
 80017f2:	3738      	adds	r7, #56	; 0x38
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	20000274 	.word	0x20000274
 80017fc:	40000c00 	.word	0x40000c00
 8001800:	0001869f 	.word	0x0001869f

08001804 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800180a:	463b      	mov	r3, r7
 800180c:	2200      	movs	r2, #0
 800180e:	601a      	str	r2, [r3, #0]
 8001810:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001812:	4b15      	ldr	r3, [pc, #84]	; (8001868 <MX_TIM7_Init+0x64>)
 8001814:	4a15      	ldr	r2, [pc, #84]	; (800186c <MX_TIM7_Init+0x68>)
 8001816:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 8;
 8001818:	4b13      	ldr	r3, [pc, #76]	; (8001868 <MX_TIM7_Init+0x64>)
 800181a:	2208      	movs	r2, #8
 800181c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800181e:	4b12      	ldr	r3, [pc, #72]	; (8001868 <MX_TIM7_Init+0x64>)
 8001820:	2200      	movs	r2, #0
 8001822:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9999;
 8001824:	4b10      	ldr	r3, [pc, #64]	; (8001868 <MX_TIM7_Init+0x64>)
 8001826:	f242 720f 	movw	r2, #9999	; 0x270f
 800182a:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800182c:	4b0e      	ldr	r3, [pc, #56]	; (8001868 <MX_TIM7_Init+0x64>)
 800182e:	2280      	movs	r2, #128	; 0x80
 8001830:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001832:	480d      	ldr	r0, [pc, #52]	; (8001868 <MX_TIM7_Init+0x64>)
 8001834:	f002 fe02 	bl	800443c <HAL_TIM_Base_Init>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 800183e:	f7ff fcbf 	bl	80011c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001842:	2300      	movs	r3, #0
 8001844:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001846:	2300      	movs	r3, #0
 8001848:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800184a:	463b      	mov	r3, r7
 800184c:	4619      	mov	r1, r3
 800184e:	4806      	ldr	r0, [pc, #24]	; (8001868 <MX_TIM7_Init+0x64>)
 8001850:	f003 fc4a 	bl	80050e8 <HAL_TIMEx_MasterConfigSynchronization>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 800185a:	f7ff fcb1 	bl	80011c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800185e:	bf00      	nop
 8001860:	3708      	adds	r7, #8
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	2000034c 	.word	0x2000034c
 800186c:	40001400 	.word	0x40001400

08001870 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b088      	sub	sp, #32
 8001874:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001876:	1d3b      	adds	r3, r7, #4
 8001878:	2200      	movs	r2, #0
 800187a:	601a      	str	r2, [r3, #0]
 800187c:	605a      	str	r2, [r3, #4]
 800187e:	609a      	str	r2, [r3, #8]
 8001880:	60da      	str	r2, [r3, #12]
 8001882:	611a      	str	r2, [r3, #16]
 8001884:	615a      	str	r2, [r3, #20]
 8001886:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001888:	4b1e      	ldr	r3, [pc, #120]	; (8001904 <MX_TIM10_Init+0x94>)
 800188a:	4a1f      	ldr	r2, [pc, #124]	; (8001908 <MX_TIM10_Init+0x98>)
 800188c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 72-1;
 800188e:	4b1d      	ldr	r3, [pc, #116]	; (8001904 <MX_TIM10_Init+0x94>)
 8001890:	2247      	movs	r2, #71	; 0x47
 8001892:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001894:	4b1b      	ldr	r3, [pc, #108]	; (8001904 <MX_TIM10_Init+0x94>)
 8001896:	2200      	movs	r2, #0
 8001898:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 50000-1;
 800189a:	4b1a      	ldr	r3, [pc, #104]	; (8001904 <MX_TIM10_Init+0x94>)
 800189c:	f24c 324f 	movw	r2, #49999	; 0xc34f
 80018a0:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018a2:	4b18      	ldr	r3, [pc, #96]	; (8001904 <MX_TIM10_Init+0x94>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018a8:	4b16      	ldr	r3, [pc, #88]	; (8001904 <MX_TIM10_Init+0x94>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80018ae:	4815      	ldr	r0, [pc, #84]	; (8001904 <MX_TIM10_Init+0x94>)
 80018b0:	f002 fdc4 	bl	800443c <HAL_TIM_Base_Init>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 80018ba:	f7ff fc81 	bl	80011c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 80018be:	4811      	ldr	r0, [pc, #68]	; (8001904 <MX_TIM10_Init+0x94>)
 80018c0:	f002 fe0b 	bl	80044da <HAL_TIM_PWM_Init>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 80018ca:	f7ff fc79 	bl	80011c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018ce:	2360      	movs	r3, #96	; 0x60
 80018d0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 80018d2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80018d6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018d8:	2300      	movs	r3, #0
 80018da:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018dc:	2300      	movs	r3, #0
 80018de:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018e0:	1d3b      	adds	r3, r7, #4
 80018e2:	2200      	movs	r2, #0
 80018e4:	4619      	mov	r1, r3
 80018e6:	4807      	ldr	r0, [pc, #28]	; (8001904 <MX_TIM10_Init+0x94>)
 80018e8:	f002 ff58 	bl	800479c <HAL_TIM_PWM_ConfigChannel>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <MX_TIM10_Init+0x86>
  {
    Error_Handler();
 80018f2:	f7ff fc65 	bl	80011c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 80018f6:	4803      	ldr	r0, [pc, #12]	; (8001904 <MX_TIM10_Init+0x94>)
 80018f8:	f000 f8a4 	bl	8001a44 <HAL_TIM_MspPostInit>

}
 80018fc:	bf00      	nop
 80018fe:	3720      	adds	r7, #32
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	2000022c 	.word	0x2000022c
 8001908:	40014400 	.word	0x40014400

0800190c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b088      	sub	sp, #32
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800191c:	d10e      	bne.n	800193c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800191e:	2300      	movs	r3, #0
 8001920:	61fb      	str	r3, [r7, #28]
 8001922:	4b42      	ldr	r3, [pc, #264]	; (8001a2c <HAL_TIM_Base_MspInit+0x120>)
 8001924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001926:	4a41      	ldr	r2, [pc, #260]	; (8001a2c <HAL_TIM_Base_MspInit+0x120>)
 8001928:	f043 0301 	orr.w	r3, r3, #1
 800192c:	6413      	str	r3, [r2, #64]	; 0x40
 800192e:	4b3f      	ldr	r3, [pc, #252]	; (8001a2c <HAL_TIM_Base_MspInit+0x120>)
 8001930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001932:	f003 0301 	and.w	r3, r3, #1
 8001936:	61fb      	str	r3, [r7, #28]
 8001938:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_TIM10_CLK_ENABLE();
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 800193a:	e072      	b.n	8001a22 <HAL_TIM_Base_MspInit+0x116>
  else if(tim_baseHandle->Instance==TIM3)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a3b      	ldr	r2, [pc, #236]	; (8001a30 <HAL_TIM_Base_MspInit+0x124>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d10e      	bne.n	8001964 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001946:	2300      	movs	r3, #0
 8001948:	61bb      	str	r3, [r7, #24]
 800194a:	4b38      	ldr	r3, [pc, #224]	; (8001a2c <HAL_TIM_Base_MspInit+0x120>)
 800194c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194e:	4a37      	ldr	r2, [pc, #220]	; (8001a2c <HAL_TIM_Base_MspInit+0x120>)
 8001950:	f043 0302 	orr.w	r3, r3, #2
 8001954:	6413      	str	r3, [r2, #64]	; 0x40
 8001956:	4b35      	ldr	r3, [pc, #212]	; (8001a2c <HAL_TIM_Base_MspInit+0x120>)
 8001958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195a:	f003 0302 	and.w	r3, r3, #2
 800195e:	61bb      	str	r3, [r7, #24]
 8001960:	69bb      	ldr	r3, [r7, #24]
}
 8001962:	e05e      	b.n	8001a22 <HAL_TIM_Base_MspInit+0x116>
  else if(tim_baseHandle->Instance==TIM4)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a32      	ldr	r2, [pc, #200]	; (8001a34 <HAL_TIM_Base_MspInit+0x128>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d116      	bne.n	800199c <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800196e:	2300      	movs	r3, #0
 8001970:	617b      	str	r3, [r7, #20]
 8001972:	4b2e      	ldr	r3, [pc, #184]	; (8001a2c <HAL_TIM_Base_MspInit+0x120>)
 8001974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001976:	4a2d      	ldr	r2, [pc, #180]	; (8001a2c <HAL_TIM_Base_MspInit+0x120>)
 8001978:	f043 0304 	orr.w	r3, r3, #4
 800197c:	6413      	str	r3, [r2, #64]	; 0x40
 800197e:	4b2b      	ldr	r3, [pc, #172]	; (8001a2c <HAL_TIM_Base_MspInit+0x120>)
 8001980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001982:	f003 0304 	and.w	r3, r3, #4
 8001986:	617b      	str	r3, [r7, #20]
 8001988:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800198a:	2200      	movs	r2, #0
 800198c:	2100      	movs	r1, #0
 800198e:	201e      	movs	r0, #30
 8001990:	f000 fdb5 	bl	80024fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001994:	201e      	movs	r0, #30
 8001996:	f000 fdce 	bl	8002536 <HAL_NVIC_EnableIRQ>
}
 800199a:	e042      	b.n	8001a22 <HAL_TIM_Base_MspInit+0x116>
  else if(tim_baseHandle->Instance==TIM5)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a25      	ldr	r2, [pc, #148]	; (8001a38 <HAL_TIM_Base_MspInit+0x12c>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d10e      	bne.n	80019c4 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80019a6:	2300      	movs	r3, #0
 80019a8:	613b      	str	r3, [r7, #16]
 80019aa:	4b20      	ldr	r3, [pc, #128]	; (8001a2c <HAL_TIM_Base_MspInit+0x120>)
 80019ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ae:	4a1f      	ldr	r2, [pc, #124]	; (8001a2c <HAL_TIM_Base_MspInit+0x120>)
 80019b0:	f043 0308 	orr.w	r3, r3, #8
 80019b4:	6413      	str	r3, [r2, #64]	; 0x40
 80019b6:	4b1d      	ldr	r3, [pc, #116]	; (8001a2c <HAL_TIM_Base_MspInit+0x120>)
 80019b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ba:	f003 0308 	and.w	r3, r3, #8
 80019be:	613b      	str	r3, [r7, #16]
 80019c0:	693b      	ldr	r3, [r7, #16]
}
 80019c2:	e02e      	b.n	8001a22 <HAL_TIM_Base_MspInit+0x116>
  else if(tim_baseHandle->Instance==TIM7)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a1c      	ldr	r2, [pc, #112]	; (8001a3c <HAL_TIM_Base_MspInit+0x130>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d116      	bne.n	80019fc <HAL_TIM_Base_MspInit+0xf0>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80019ce:	2300      	movs	r3, #0
 80019d0:	60fb      	str	r3, [r7, #12]
 80019d2:	4b16      	ldr	r3, [pc, #88]	; (8001a2c <HAL_TIM_Base_MspInit+0x120>)
 80019d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d6:	4a15      	ldr	r2, [pc, #84]	; (8001a2c <HAL_TIM_Base_MspInit+0x120>)
 80019d8:	f043 0320 	orr.w	r3, r3, #32
 80019dc:	6413      	str	r3, [r2, #64]	; 0x40
 80019de:	4b13      	ldr	r3, [pc, #76]	; (8001a2c <HAL_TIM_Base_MspInit+0x120>)
 80019e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e2:	f003 0320 	and.w	r3, r3, #32
 80019e6:	60fb      	str	r3, [r7, #12]
 80019e8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80019ea:	2200      	movs	r2, #0
 80019ec:	2100      	movs	r1, #0
 80019ee:	2037      	movs	r0, #55	; 0x37
 80019f0:	f000 fd85 	bl	80024fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80019f4:	2037      	movs	r0, #55	; 0x37
 80019f6:	f000 fd9e 	bl	8002536 <HAL_NVIC_EnableIRQ>
}
 80019fa:	e012      	b.n	8001a22 <HAL_TIM_Base_MspInit+0x116>
  else if(tim_baseHandle->Instance==TIM10)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a0f      	ldr	r2, [pc, #60]	; (8001a40 <HAL_TIM_Base_MspInit+0x134>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d10d      	bne.n	8001a22 <HAL_TIM_Base_MspInit+0x116>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001a06:	2300      	movs	r3, #0
 8001a08:	60bb      	str	r3, [r7, #8]
 8001a0a:	4b08      	ldr	r3, [pc, #32]	; (8001a2c <HAL_TIM_Base_MspInit+0x120>)
 8001a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a0e:	4a07      	ldr	r2, [pc, #28]	; (8001a2c <HAL_TIM_Base_MspInit+0x120>)
 8001a10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a14:	6453      	str	r3, [r2, #68]	; 0x44
 8001a16:	4b05      	ldr	r3, [pc, #20]	; (8001a2c <HAL_TIM_Base_MspInit+0x120>)
 8001a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a1e:	60bb      	str	r3, [r7, #8]
 8001a20:	68bb      	ldr	r3, [r7, #8]
}
 8001a22:	bf00      	nop
 8001a24:	3720      	adds	r7, #32
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	40023800 	.word	0x40023800
 8001a30:	40000400 	.word	0x40000400
 8001a34:	40000800 	.word	0x40000800
 8001a38:	40000c00 	.word	0x40000c00
 8001a3c:	40001400 	.word	0x40001400
 8001a40:	40014400 	.word	0x40014400

08001a44 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b08c      	sub	sp, #48	; 0x30
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a4c:	f107 031c 	add.w	r3, r7, #28
 8001a50:	2200      	movs	r2, #0
 8001a52:	601a      	str	r2, [r3, #0]
 8001a54:	605a      	str	r2, [r3, #4]
 8001a56:	609a      	str	r2, [r3, #8]
 8001a58:	60da      	str	r2, [r3, #12]
 8001a5a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a64:	d11e      	bne.n	8001aa4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a66:	2300      	movs	r3, #0
 8001a68:	61bb      	str	r3, [r7, #24]
 8001a6a:	4b58      	ldr	r3, [pc, #352]	; (8001bcc <HAL_TIM_MspPostInit+0x188>)
 8001a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6e:	4a57      	ldr	r2, [pc, #348]	; (8001bcc <HAL_TIM_MspPostInit+0x188>)
 8001a70:	f043 0301 	orr.w	r3, r3, #1
 8001a74:	6313      	str	r3, [r2, #48]	; 0x30
 8001a76:	4b55      	ldr	r3, [pc, #340]	; (8001bcc <HAL_TIM_MspPostInit+0x188>)
 8001a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7a:	f003 0301 	and.w	r3, r3, #1
 8001a7e:	61bb      	str	r3, [r7, #24]
 8001a80:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001a82:	2320      	movs	r3, #32
 8001a84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a86:	2302      	movs	r3, #2
 8001a88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001a92:	2301      	movs	r3, #1
 8001a94:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a96:	f107 031c 	add.w	r3, r7, #28
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	484c      	ldr	r0, [pc, #304]	; (8001bd0 <HAL_TIM_MspPostInit+0x18c>)
 8001a9e:	f001 f951 	bl	8002d44 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 8001aa2:	e08f      	b.n	8001bc4 <HAL_TIM_MspPostInit+0x180>
  else if(timHandle->Instance==TIM3)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a4a      	ldr	r2, [pc, #296]	; (8001bd4 <HAL_TIM_MspPostInit+0x190>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d11e      	bne.n	8001aec <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001aae:	2300      	movs	r3, #0
 8001ab0:	617b      	str	r3, [r7, #20]
 8001ab2:	4b46      	ldr	r3, [pc, #280]	; (8001bcc <HAL_TIM_MspPostInit+0x188>)
 8001ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab6:	4a45      	ldr	r2, [pc, #276]	; (8001bcc <HAL_TIM_MspPostInit+0x188>)
 8001ab8:	f043 0304 	orr.w	r3, r3, #4
 8001abc:	6313      	str	r3, [r2, #48]	; 0x30
 8001abe:	4b43      	ldr	r3, [pc, #268]	; (8001bcc <HAL_TIM_MspPostInit+0x188>)
 8001ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac2:	f003 0304 	and.w	r3, r3, #4
 8001ac6:	617b      	str	r3, [r7, #20]
 8001ac8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001aca:	2340      	movs	r3, #64	; 0x40
 8001acc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ace:	2302      	movs	r3, #2
 8001ad0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001ada:	2302      	movs	r3, #2
 8001adc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ade:	f107 031c 	add.w	r3, r7, #28
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	483c      	ldr	r0, [pc, #240]	; (8001bd8 <HAL_TIM_MspPostInit+0x194>)
 8001ae6:	f001 f92d 	bl	8002d44 <HAL_GPIO_Init>
}
 8001aea:	e06b      	b.n	8001bc4 <HAL_TIM_MspPostInit+0x180>
  else if(timHandle->Instance==TIM4)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a3a      	ldr	r2, [pc, #232]	; (8001bdc <HAL_TIM_MspPostInit+0x198>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d11f      	bne.n	8001b36 <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001af6:	2300      	movs	r3, #0
 8001af8:	613b      	str	r3, [r7, #16]
 8001afa:	4b34      	ldr	r3, [pc, #208]	; (8001bcc <HAL_TIM_MspPostInit+0x188>)
 8001afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afe:	4a33      	ldr	r2, [pc, #204]	; (8001bcc <HAL_TIM_MspPostInit+0x188>)
 8001b00:	f043 0308 	orr.w	r3, r3, #8
 8001b04:	6313      	str	r3, [r2, #48]	; 0x30
 8001b06:	4b31      	ldr	r3, [pc, #196]	; (8001bcc <HAL_TIM_MspPostInit+0x188>)
 8001b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0a:	f003 0308 	and.w	r3, r3, #8
 8001b0e:	613b      	str	r3, [r7, #16]
 8001b10:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8001b12:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8001b16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b18:	2302      	movs	r3, #2
 8001b1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b20:	2300      	movs	r3, #0
 8001b22:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001b24:	2302      	movs	r3, #2
 8001b26:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b28:	f107 031c 	add.w	r3, r7, #28
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	482c      	ldr	r0, [pc, #176]	; (8001be0 <HAL_TIM_MspPostInit+0x19c>)
 8001b30:	f001 f908 	bl	8002d44 <HAL_GPIO_Init>
}
 8001b34:	e046      	b.n	8001bc4 <HAL_TIM_MspPostInit+0x180>
  else if(timHandle->Instance==TIM5)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a2a      	ldr	r2, [pc, #168]	; (8001be4 <HAL_TIM_MspPostInit+0x1a0>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d11e      	bne.n	8001b7e <HAL_TIM_MspPostInit+0x13a>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b40:	2300      	movs	r3, #0
 8001b42:	60fb      	str	r3, [r7, #12]
 8001b44:	4b21      	ldr	r3, [pc, #132]	; (8001bcc <HAL_TIM_MspPostInit+0x188>)
 8001b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b48:	4a20      	ldr	r2, [pc, #128]	; (8001bcc <HAL_TIM_MspPostInit+0x188>)
 8001b4a:	f043 0301 	orr.w	r3, r3, #1
 8001b4e:	6313      	str	r3, [r2, #48]	; 0x30
 8001b50:	4b1e      	ldr	r3, [pc, #120]	; (8001bcc <HAL_TIM_MspPostInit+0x188>)
 8001b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b54:	f003 0301 	and.w	r3, r3, #1
 8001b58:	60fb      	str	r3, [r7, #12]
 8001b5a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8001b5c:	2309      	movs	r3, #9
 8001b5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b60:	2302      	movs	r3, #2
 8001b62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b64:	2300      	movs	r3, #0
 8001b66:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001b6c:	2302      	movs	r3, #2
 8001b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b70:	f107 031c 	add.w	r3, r7, #28
 8001b74:	4619      	mov	r1, r3
 8001b76:	4816      	ldr	r0, [pc, #88]	; (8001bd0 <HAL_TIM_MspPostInit+0x18c>)
 8001b78:	f001 f8e4 	bl	8002d44 <HAL_GPIO_Init>
}
 8001b7c:	e022      	b.n	8001bc4 <HAL_TIM_MspPostInit+0x180>
  else if(timHandle->Instance==TIM10)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a19      	ldr	r2, [pc, #100]	; (8001be8 <HAL_TIM_MspPostInit+0x1a4>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d11d      	bne.n	8001bc4 <HAL_TIM_MspPostInit+0x180>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b88:	2300      	movs	r3, #0
 8001b8a:	60bb      	str	r3, [r7, #8]
 8001b8c:	4b0f      	ldr	r3, [pc, #60]	; (8001bcc <HAL_TIM_MspPostInit+0x188>)
 8001b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b90:	4a0e      	ldr	r2, [pc, #56]	; (8001bcc <HAL_TIM_MspPostInit+0x188>)
 8001b92:	f043 0320 	orr.w	r3, r3, #32
 8001b96:	6313      	str	r3, [r2, #48]	; 0x30
 8001b98:	4b0c      	ldr	r3, [pc, #48]	; (8001bcc <HAL_TIM_MspPostInit+0x188>)
 8001b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9c:	f003 0320 	and.w	r3, r3, #32
 8001ba0:	60bb      	str	r3, [r7, #8]
 8001ba2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001ba4:	2340      	movs	r3, #64	; 0x40
 8001ba6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba8:	2302      	movs	r3, #2
 8001baa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bac:	2300      	movs	r3, #0
 8001bae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8001bb4:	2303      	movs	r3, #3
 8001bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001bb8:	f107 031c 	add.w	r3, r7, #28
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	480b      	ldr	r0, [pc, #44]	; (8001bec <HAL_TIM_MspPostInit+0x1a8>)
 8001bc0:	f001 f8c0 	bl	8002d44 <HAL_GPIO_Init>
}
 8001bc4:	bf00      	nop
 8001bc6:	3730      	adds	r7, #48	; 0x30
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	40023800 	.word	0x40023800
 8001bd0:	40020000 	.word	0x40020000
 8001bd4:	40000400 	.word	0x40000400
 8001bd8:	40020800 	.word	0x40020800
 8001bdc:	40000800 	.word	0x40000800
 8001be0:	40020c00 	.word	0x40020c00
 8001be4:	40000c00 	.word	0x40000c00
 8001be8:	40014400 	.word	0x40014400
 8001bec:	40021400 	.word	0x40021400

08001bf0 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001bf4:	4b11      	ldr	r3, [pc, #68]	; (8001c3c <MX_USART3_UART_Init+0x4c>)
 8001bf6:	4a12      	ldr	r2, [pc, #72]	; (8001c40 <MX_USART3_UART_Init+0x50>)
 8001bf8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001bfa:	4b10      	ldr	r3, [pc, #64]	; (8001c3c <MX_USART3_UART_Init+0x4c>)
 8001bfc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c00:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001c02:	4b0e      	ldr	r3, [pc, #56]	; (8001c3c <MX_USART3_UART_Init+0x4c>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001c08:	4b0c      	ldr	r3, [pc, #48]	; (8001c3c <MX_USART3_UART_Init+0x4c>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001c0e:	4b0b      	ldr	r3, [pc, #44]	; (8001c3c <MX_USART3_UART_Init+0x4c>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001c14:	4b09      	ldr	r3, [pc, #36]	; (8001c3c <MX_USART3_UART_Init+0x4c>)
 8001c16:	220c      	movs	r2, #12
 8001c18:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c1a:	4b08      	ldr	r3, [pc, #32]	; (8001c3c <MX_USART3_UART_Init+0x4c>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c20:	4b06      	ldr	r3, [pc, #24]	; (8001c3c <MX_USART3_UART_Init+0x4c>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001c26:	4805      	ldr	r0, [pc, #20]	; (8001c3c <MX_USART3_UART_Init+0x4c>)
 8001c28:	f003 faee 	bl	8005208 <HAL_UART_Init>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001c32:	f7ff fac5 	bl	80011c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001c36:	bf00      	nop
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	20000394 	.word	0x20000394
 8001c40:	40004800 	.word	0x40004800

08001c44 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b08a      	sub	sp, #40	; 0x28
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c4c:	f107 0314 	add.w	r3, r7, #20
 8001c50:	2200      	movs	r2, #0
 8001c52:	601a      	str	r2, [r3, #0]
 8001c54:	605a      	str	r2, [r3, #4]
 8001c56:	609a      	str	r2, [r3, #8]
 8001c58:	60da      	str	r2, [r3, #12]
 8001c5a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a1d      	ldr	r2, [pc, #116]	; (8001cd8 <HAL_UART_MspInit+0x94>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d134      	bne.n	8001cd0 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001c66:	2300      	movs	r3, #0
 8001c68:	613b      	str	r3, [r7, #16]
 8001c6a:	4b1c      	ldr	r3, [pc, #112]	; (8001cdc <HAL_UART_MspInit+0x98>)
 8001c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6e:	4a1b      	ldr	r2, [pc, #108]	; (8001cdc <HAL_UART_MspInit+0x98>)
 8001c70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c74:	6413      	str	r3, [r2, #64]	; 0x40
 8001c76:	4b19      	ldr	r3, [pc, #100]	; (8001cdc <HAL_UART_MspInit+0x98>)
 8001c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c7e:	613b      	str	r3, [r7, #16]
 8001c80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c82:	2300      	movs	r3, #0
 8001c84:	60fb      	str	r3, [r7, #12]
 8001c86:	4b15      	ldr	r3, [pc, #84]	; (8001cdc <HAL_UART_MspInit+0x98>)
 8001c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8a:	4a14      	ldr	r2, [pc, #80]	; (8001cdc <HAL_UART_MspInit+0x98>)
 8001c8c:	f043 0308 	orr.w	r3, r3, #8
 8001c90:	6313      	str	r3, [r2, #48]	; 0x30
 8001c92:	4b12      	ldr	r3, [pc, #72]	; (8001cdc <HAL_UART_MspInit+0x98>)
 8001c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c96:	f003 0308 	and.w	r3, r3, #8
 8001c9a:	60fb      	str	r3, [r7, #12]
 8001c9c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001c9e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ca2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca4:	2302      	movs	r3, #2
 8001ca6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cac:	2303      	movs	r3, #3
 8001cae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001cb0:	2307      	movs	r3, #7
 8001cb2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cb4:	f107 0314 	add.w	r3, r7, #20
 8001cb8:	4619      	mov	r1, r3
 8001cba:	4809      	ldr	r0, [pc, #36]	; (8001ce0 <HAL_UART_MspInit+0x9c>)
 8001cbc:	f001 f842 	bl	8002d44 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	2100      	movs	r1, #0
 8001cc4:	2027      	movs	r0, #39	; 0x27
 8001cc6:	f000 fc1a 	bl	80024fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001cca:	2027      	movs	r0, #39	; 0x27
 8001ccc:	f000 fc33 	bl	8002536 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001cd0:	bf00      	nop
 8001cd2:	3728      	adds	r7, #40	; 0x28
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	40004800 	.word	0x40004800
 8001cdc:	40023800 	.word	0x40023800
 8001ce0:	40020c00 	.word	0x40020c00

08001ce4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001ce4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d1c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ce8:	480d      	ldr	r0, [pc, #52]	; (8001d20 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001cea:	490e      	ldr	r1, [pc, #56]	; (8001d24 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001cec:	4a0e      	ldr	r2, [pc, #56]	; (8001d28 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001cee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cf0:	e002      	b.n	8001cf8 <LoopCopyDataInit>

08001cf2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cf2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cf4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cf6:	3304      	adds	r3, #4

08001cf8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cf8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cfa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cfc:	d3f9      	bcc.n	8001cf2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cfe:	4a0b      	ldr	r2, [pc, #44]	; (8001d2c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001d00:	4c0b      	ldr	r4, [pc, #44]	; (8001d30 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001d02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d04:	e001      	b.n	8001d0a <LoopFillZerobss>

08001d06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d08:	3204      	adds	r2, #4

08001d0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d0c:	d3fb      	bcc.n	8001d06 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001d0e:	f7ff fb65 	bl	80013dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d12:	f004 f8e1 	bl	8005ed8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d16:	f7ff f9b3 	bl	8001080 <main>
  bx  lr    
 8001d1a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001d1c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001d20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d24:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001d28:	08005f90 	.word	0x08005f90
  ldr r2, =_sbss
 8001d2c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001d30:	200003dc 	.word	0x200003dc

08001d34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d34:	e7fe      	b.n	8001d34 <ADC_IRQHandler>
	...

08001d38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d3c:	4b0e      	ldr	r3, [pc, #56]	; (8001d78 <HAL_Init+0x40>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a0d      	ldr	r2, [pc, #52]	; (8001d78 <HAL_Init+0x40>)
 8001d42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d46:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d48:	4b0b      	ldr	r3, [pc, #44]	; (8001d78 <HAL_Init+0x40>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a0a      	ldr	r2, [pc, #40]	; (8001d78 <HAL_Init+0x40>)
 8001d4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d52:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d54:	4b08      	ldr	r3, [pc, #32]	; (8001d78 <HAL_Init+0x40>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a07      	ldr	r2, [pc, #28]	; (8001d78 <HAL_Init+0x40>)
 8001d5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d60:	2003      	movs	r0, #3
 8001d62:	f000 fbc1 	bl	80024e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d66:	200f      	movs	r0, #15
 8001d68:	f000 f808 	bl	8001d7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d6c:	f7ff faac 	bl	80012c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d70:	2300      	movs	r3, #0
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	40023c00 	.word	0x40023c00

08001d7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d84:	4b12      	ldr	r3, [pc, #72]	; (8001dd0 <HAL_InitTick+0x54>)
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	4b12      	ldr	r3, [pc, #72]	; (8001dd4 <HAL_InitTick+0x58>)
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d92:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d96:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f000 fbd9 	bl	8002552 <HAL_SYSTICK_Config>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d001      	beq.n	8001daa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e00e      	b.n	8001dc8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2b0f      	cmp	r3, #15
 8001dae:	d80a      	bhi.n	8001dc6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001db0:	2200      	movs	r2, #0
 8001db2:	6879      	ldr	r1, [r7, #4]
 8001db4:	f04f 30ff 	mov.w	r0, #4294967295
 8001db8:	f000 fba1 	bl	80024fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001dbc:	4a06      	ldr	r2, [pc, #24]	; (8001dd8 <HAL_InitTick+0x5c>)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	e000      	b.n	8001dc8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3708      	adds	r7, #8
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	20000000 	.word	0x20000000
 8001dd4:	20000008 	.word	0x20000008
 8001dd8:	20000004 	.word	0x20000004

08001ddc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001de0:	4b06      	ldr	r3, [pc, #24]	; (8001dfc <HAL_IncTick+0x20>)
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	461a      	mov	r2, r3
 8001de6:	4b06      	ldr	r3, [pc, #24]	; (8001e00 <HAL_IncTick+0x24>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4413      	add	r3, r2
 8001dec:	4a04      	ldr	r2, [pc, #16]	; (8001e00 <HAL_IncTick+0x24>)
 8001dee:	6013      	str	r3, [r2, #0]
}
 8001df0:	bf00      	nop
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop
 8001dfc:	20000008 	.word	0x20000008
 8001e00:	200003d8 	.word	0x200003d8

08001e04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0
  return uwTick;
 8001e08:	4b03      	ldr	r3, [pc, #12]	; (8001e18 <HAL_GetTick+0x14>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	200003d8 	.word	0x200003d8

08001e1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b084      	sub	sp, #16
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e24:	f7ff ffee 	bl	8001e04 <HAL_GetTick>
 8001e28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e34:	d005      	beq.n	8001e42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e36:	4b0a      	ldr	r3, [pc, #40]	; (8001e60 <HAL_Delay+0x44>)
 8001e38:	781b      	ldrb	r3, [r3, #0]
 8001e3a:	461a      	mov	r2, r3
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	4413      	add	r3, r2
 8001e40:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e42:	bf00      	nop
 8001e44:	f7ff ffde 	bl	8001e04 <HAL_GetTick>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	68fa      	ldr	r2, [r7, #12]
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d8f7      	bhi.n	8001e44 <HAL_Delay+0x28>
  {
  }
}
 8001e54:	bf00      	nop
 8001e56:	bf00      	nop
 8001e58:	3710      	adds	r7, #16
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	20000008 	.word	0x20000008

08001e64 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b084      	sub	sp, #16
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d101      	bne.n	8001e7a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e033      	b.n	8001ee2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d109      	bne.n	8001e96 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f7fe fe00 	bl	8000a88 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2200      	movs	r2, #0
 8001e92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9a:	f003 0310 	and.w	r3, r3, #16
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d118      	bne.n	8001ed4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001eaa:	f023 0302 	bic.w	r3, r3, #2
 8001eae:	f043 0202 	orr.w	r2, r3, #2
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f000 f94a 	bl	8002150 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec6:	f023 0303 	bic.w	r3, r3, #3
 8001eca:	f043 0201 	orr.w	r2, r3, #1
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	641a      	str	r2, [r3, #64]	; 0x40
 8001ed2:	e001      	b.n	8001ed8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2200      	movs	r2, #0
 8001edc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001ee0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3710      	adds	r7, #16
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
	...

08001eec <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b085      	sub	sp, #20
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f00:	2b01      	cmp	r3, #1
 8001f02:	d101      	bne.n	8001f08 <HAL_ADC_ConfigChannel+0x1c>
 8001f04:	2302      	movs	r3, #2
 8001f06:	e113      	b.n	8002130 <HAL_ADC_ConfigChannel+0x244>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	2b09      	cmp	r3, #9
 8001f16:	d925      	bls.n	8001f64 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	68d9      	ldr	r1, [r3, #12]
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	b29b      	uxth	r3, r3
 8001f24:	461a      	mov	r2, r3
 8001f26:	4613      	mov	r3, r2
 8001f28:	005b      	lsls	r3, r3, #1
 8001f2a:	4413      	add	r3, r2
 8001f2c:	3b1e      	subs	r3, #30
 8001f2e:	2207      	movs	r2, #7
 8001f30:	fa02 f303 	lsl.w	r3, r2, r3
 8001f34:	43da      	mvns	r2, r3
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	400a      	ands	r2, r1
 8001f3c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	68d9      	ldr	r1, [r3, #12]
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	689a      	ldr	r2, [r3, #8]
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	b29b      	uxth	r3, r3
 8001f4e:	4618      	mov	r0, r3
 8001f50:	4603      	mov	r3, r0
 8001f52:	005b      	lsls	r3, r3, #1
 8001f54:	4403      	add	r3, r0
 8001f56:	3b1e      	subs	r3, #30
 8001f58:	409a      	lsls	r2, r3
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	430a      	orrs	r2, r1
 8001f60:	60da      	str	r2, [r3, #12]
 8001f62:	e022      	b.n	8001faa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	6919      	ldr	r1, [r3, #16]
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	b29b      	uxth	r3, r3
 8001f70:	461a      	mov	r2, r3
 8001f72:	4613      	mov	r3, r2
 8001f74:	005b      	lsls	r3, r3, #1
 8001f76:	4413      	add	r3, r2
 8001f78:	2207      	movs	r2, #7
 8001f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7e:	43da      	mvns	r2, r3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	400a      	ands	r2, r1
 8001f86:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	6919      	ldr	r1, [r3, #16]
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	689a      	ldr	r2, [r3, #8]
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	b29b      	uxth	r3, r3
 8001f98:	4618      	mov	r0, r3
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	005b      	lsls	r3, r3, #1
 8001f9e:	4403      	add	r3, r0
 8001fa0:	409a      	lsls	r2, r3
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	430a      	orrs	r2, r1
 8001fa8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	2b06      	cmp	r3, #6
 8001fb0:	d824      	bhi.n	8001ffc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	685a      	ldr	r2, [r3, #4]
 8001fbc:	4613      	mov	r3, r2
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	4413      	add	r3, r2
 8001fc2:	3b05      	subs	r3, #5
 8001fc4:	221f      	movs	r2, #31
 8001fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fca:	43da      	mvns	r2, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	400a      	ands	r2, r1
 8001fd2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	b29b      	uxth	r3, r3
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	685a      	ldr	r2, [r3, #4]
 8001fe6:	4613      	mov	r3, r2
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	4413      	add	r3, r2
 8001fec:	3b05      	subs	r3, #5
 8001fee:	fa00 f203 	lsl.w	r2, r0, r3
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	430a      	orrs	r2, r1
 8001ff8:	635a      	str	r2, [r3, #52]	; 0x34
 8001ffa:	e04c      	b.n	8002096 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	2b0c      	cmp	r3, #12
 8002002:	d824      	bhi.n	800204e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	685a      	ldr	r2, [r3, #4]
 800200e:	4613      	mov	r3, r2
 8002010:	009b      	lsls	r3, r3, #2
 8002012:	4413      	add	r3, r2
 8002014:	3b23      	subs	r3, #35	; 0x23
 8002016:	221f      	movs	r2, #31
 8002018:	fa02 f303 	lsl.w	r3, r2, r3
 800201c:	43da      	mvns	r2, r3
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	400a      	ands	r2, r1
 8002024:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	b29b      	uxth	r3, r3
 8002032:	4618      	mov	r0, r3
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	685a      	ldr	r2, [r3, #4]
 8002038:	4613      	mov	r3, r2
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	4413      	add	r3, r2
 800203e:	3b23      	subs	r3, #35	; 0x23
 8002040:	fa00 f203 	lsl.w	r2, r0, r3
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	430a      	orrs	r2, r1
 800204a:	631a      	str	r2, [r3, #48]	; 0x30
 800204c:	e023      	b.n	8002096 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	685a      	ldr	r2, [r3, #4]
 8002058:	4613      	mov	r3, r2
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	4413      	add	r3, r2
 800205e:	3b41      	subs	r3, #65	; 0x41
 8002060:	221f      	movs	r2, #31
 8002062:	fa02 f303 	lsl.w	r3, r2, r3
 8002066:	43da      	mvns	r2, r3
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	400a      	ands	r2, r1
 800206e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	b29b      	uxth	r3, r3
 800207c:	4618      	mov	r0, r3
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	685a      	ldr	r2, [r3, #4]
 8002082:	4613      	mov	r3, r2
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	4413      	add	r3, r2
 8002088:	3b41      	subs	r3, #65	; 0x41
 800208a:	fa00 f203 	lsl.w	r2, r0, r3
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	430a      	orrs	r2, r1
 8002094:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002096:	4b29      	ldr	r3, [pc, #164]	; (800213c <HAL_ADC_ConfigChannel+0x250>)
 8002098:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a28      	ldr	r2, [pc, #160]	; (8002140 <HAL_ADC_ConfigChannel+0x254>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d10f      	bne.n	80020c4 <HAL_ADC_ConfigChannel+0x1d8>
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	2b12      	cmp	r3, #18
 80020aa:	d10b      	bne.n	80020c4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a1d      	ldr	r2, [pc, #116]	; (8002140 <HAL_ADC_ConfigChannel+0x254>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d12b      	bne.n	8002126 <HAL_ADC_ConfigChannel+0x23a>
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a1c      	ldr	r2, [pc, #112]	; (8002144 <HAL_ADC_ConfigChannel+0x258>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d003      	beq.n	80020e0 <HAL_ADC_ConfigChannel+0x1f4>
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	2b11      	cmp	r3, #17
 80020de:	d122      	bne.n	8002126 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a11      	ldr	r2, [pc, #68]	; (8002144 <HAL_ADC_ConfigChannel+0x258>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d111      	bne.n	8002126 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002102:	4b11      	ldr	r3, [pc, #68]	; (8002148 <HAL_ADC_ConfigChannel+0x25c>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a11      	ldr	r2, [pc, #68]	; (800214c <HAL_ADC_ConfigChannel+0x260>)
 8002108:	fba2 2303 	umull	r2, r3, r2, r3
 800210c:	0c9a      	lsrs	r2, r3, #18
 800210e:	4613      	mov	r3, r2
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	4413      	add	r3, r2
 8002114:	005b      	lsls	r3, r3, #1
 8002116:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002118:	e002      	b.n	8002120 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	3b01      	subs	r3, #1
 800211e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d1f9      	bne.n	800211a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2200      	movs	r2, #0
 800212a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800212e:	2300      	movs	r3, #0
}
 8002130:	4618      	mov	r0, r3
 8002132:	3714      	adds	r7, #20
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr
 800213c:	40012300 	.word	0x40012300
 8002140:	40012000 	.word	0x40012000
 8002144:	10000012 	.word	0x10000012
 8002148:	20000000 	.word	0x20000000
 800214c:	431bde83 	.word	0x431bde83

08002150 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002150:	b480      	push	{r7}
 8002152:	b085      	sub	sp, #20
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002158:	4b79      	ldr	r3, [pc, #484]	; (8002340 <ADC_Init+0x1f0>)
 800215a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	685a      	ldr	r2, [r3, #4]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	431a      	orrs	r2, r3
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	685a      	ldr	r2, [r3, #4]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002184:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	6859      	ldr	r1, [r3, #4]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	691b      	ldr	r3, [r3, #16]
 8002190:	021a      	lsls	r2, r3, #8
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	430a      	orrs	r2, r1
 8002198:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	685a      	ldr	r2, [r3, #4]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80021a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	6859      	ldr	r1, [r3, #4]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	689a      	ldr	r2, [r3, #8]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	430a      	orrs	r2, r1
 80021ba:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	689a      	ldr	r2, [r3, #8]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	6899      	ldr	r1, [r3, #8]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	68da      	ldr	r2, [r3, #12]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	430a      	orrs	r2, r1
 80021dc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021e2:	4a58      	ldr	r2, [pc, #352]	; (8002344 <ADC_Init+0x1f4>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d022      	beq.n	800222e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	689a      	ldr	r2, [r3, #8]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80021f6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	6899      	ldr	r1, [r3, #8]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	430a      	orrs	r2, r1
 8002208:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	689a      	ldr	r2, [r3, #8]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002218:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	6899      	ldr	r1, [r3, #8]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	430a      	orrs	r2, r1
 800222a:	609a      	str	r2, [r3, #8]
 800222c:	e00f      	b.n	800224e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	689a      	ldr	r2, [r3, #8]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800223c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	689a      	ldr	r2, [r3, #8]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800224c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	689a      	ldr	r2, [r3, #8]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f022 0202 	bic.w	r2, r2, #2
 800225c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	6899      	ldr	r1, [r3, #8]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	7e1b      	ldrb	r3, [r3, #24]
 8002268:	005a      	lsls	r2, r3, #1
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	430a      	orrs	r2, r1
 8002270:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d01b      	beq.n	80022b4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	685a      	ldr	r2, [r3, #4]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800228a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	685a      	ldr	r2, [r3, #4]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800229a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	6859      	ldr	r1, [r3, #4]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a6:	3b01      	subs	r3, #1
 80022a8:	035a      	lsls	r2, r3, #13
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	430a      	orrs	r2, r1
 80022b0:	605a      	str	r2, [r3, #4]
 80022b2:	e007      	b.n	80022c4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	685a      	ldr	r2, [r3, #4]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022c2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80022d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	69db      	ldr	r3, [r3, #28]
 80022de:	3b01      	subs	r3, #1
 80022e0:	051a      	lsls	r2, r3, #20
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	430a      	orrs	r2, r1
 80022e8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	689a      	ldr	r2, [r3, #8]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80022f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	6899      	ldr	r1, [r3, #8]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002306:	025a      	lsls	r2, r3, #9
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	430a      	orrs	r2, r1
 800230e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	689a      	ldr	r2, [r3, #8]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800231e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	6899      	ldr	r1, [r3, #8]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	695b      	ldr	r3, [r3, #20]
 800232a:	029a      	lsls	r2, r3, #10
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	430a      	orrs	r2, r1
 8002332:	609a      	str	r2, [r3, #8]
}
 8002334:	bf00      	nop
 8002336:	3714      	adds	r7, #20
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr
 8002340:	40012300 	.word	0x40012300
 8002344:	0f000001 	.word	0x0f000001

08002348 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002348:	b480      	push	{r7}
 800234a:	b085      	sub	sp, #20
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	f003 0307 	and.w	r3, r3, #7
 8002356:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002358:	4b0c      	ldr	r3, [pc, #48]	; (800238c <__NVIC_SetPriorityGrouping+0x44>)
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800235e:	68ba      	ldr	r2, [r7, #8]
 8002360:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002364:	4013      	ands	r3, r2
 8002366:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002370:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002374:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002378:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800237a:	4a04      	ldr	r2, [pc, #16]	; (800238c <__NVIC_SetPriorityGrouping+0x44>)
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	60d3      	str	r3, [r2, #12]
}
 8002380:	bf00      	nop
 8002382:	3714      	adds	r7, #20
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr
 800238c:	e000ed00 	.word	0xe000ed00

08002390 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002390:	b480      	push	{r7}
 8002392:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002394:	4b04      	ldr	r3, [pc, #16]	; (80023a8 <__NVIC_GetPriorityGrouping+0x18>)
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	0a1b      	lsrs	r3, r3, #8
 800239a:	f003 0307 	and.w	r3, r3, #7
}
 800239e:	4618      	mov	r0, r3
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr
 80023a8:	e000ed00 	.word	0xe000ed00

080023ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b083      	sub	sp, #12
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	4603      	mov	r3, r0
 80023b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	db0b      	blt.n	80023d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023be:	79fb      	ldrb	r3, [r7, #7]
 80023c0:	f003 021f 	and.w	r2, r3, #31
 80023c4:	4907      	ldr	r1, [pc, #28]	; (80023e4 <__NVIC_EnableIRQ+0x38>)
 80023c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ca:	095b      	lsrs	r3, r3, #5
 80023cc:	2001      	movs	r0, #1
 80023ce:	fa00 f202 	lsl.w	r2, r0, r2
 80023d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023d6:	bf00      	nop
 80023d8:	370c      	adds	r7, #12
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr
 80023e2:	bf00      	nop
 80023e4:	e000e100 	.word	0xe000e100

080023e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	4603      	mov	r3, r0
 80023f0:	6039      	str	r1, [r7, #0]
 80023f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	db0a      	blt.n	8002412 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	b2da      	uxtb	r2, r3
 8002400:	490c      	ldr	r1, [pc, #48]	; (8002434 <__NVIC_SetPriority+0x4c>)
 8002402:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002406:	0112      	lsls	r2, r2, #4
 8002408:	b2d2      	uxtb	r2, r2
 800240a:	440b      	add	r3, r1
 800240c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002410:	e00a      	b.n	8002428 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	b2da      	uxtb	r2, r3
 8002416:	4908      	ldr	r1, [pc, #32]	; (8002438 <__NVIC_SetPriority+0x50>)
 8002418:	79fb      	ldrb	r3, [r7, #7]
 800241a:	f003 030f 	and.w	r3, r3, #15
 800241e:	3b04      	subs	r3, #4
 8002420:	0112      	lsls	r2, r2, #4
 8002422:	b2d2      	uxtb	r2, r2
 8002424:	440b      	add	r3, r1
 8002426:	761a      	strb	r2, [r3, #24]
}
 8002428:	bf00      	nop
 800242a:	370c      	adds	r7, #12
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr
 8002434:	e000e100 	.word	0xe000e100
 8002438:	e000ed00 	.word	0xe000ed00

0800243c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800243c:	b480      	push	{r7}
 800243e:	b089      	sub	sp, #36	; 0x24
 8002440:	af00      	add	r7, sp, #0
 8002442:	60f8      	str	r0, [r7, #12]
 8002444:	60b9      	str	r1, [r7, #8]
 8002446:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	f003 0307 	and.w	r3, r3, #7
 800244e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002450:	69fb      	ldr	r3, [r7, #28]
 8002452:	f1c3 0307 	rsb	r3, r3, #7
 8002456:	2b04      	cmp	r3, #4
 8002458:	bf28      	it	cs
 800245a:	2304      	movcs	r3, #4
 800245c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	3304      	adds	r3, #4
 8002462:	2b06      	cmp	r3, #6
 8002464:	d902      	bls.n	800246c <NVIC_EncodePriority+0x30>
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	3b03      	subs	r3, #3
 800246a:	e000      	b.n	800246e <NVIC_EncodePriority+0x32>
 800246c:	2300      	movs	r3, #0
 800246e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002470:	f04f 32ff 	mov.w	r2, #4294967295
 8002474:	69bb      	ldr	r3, [r7, #24]
 8002476:	fa02 f303 	lsl.w	r3, r2, r3
 800247a:	43da      	mvns	r2, r3
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	401a      	ands	r2, r3
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002484:	f04f 31ff 	mov.w	r1, #4294967295
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	fa01 f303 	lsl.w	r3, r1, r3
 800248e:	43d9      	mvns	r1, r3
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002494:	4313      	orrs	r3, r2
         );
}
 8002496:	4618      	mov	r0, r3
 8002498:	3724      	adds	r7, #36	; 0x24
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr
	...

080024a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b082      	sub	sp, #8
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	3b01      	subs	r3, #1
 80024b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024b4:	d301      	bcc.n	80024ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024b6:	2301      	movs	r3, #1
 80024b8:	e00f      	b.n	80024da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024ba:	4a0a      	ldr	r2, [pc, #40]	; (80024e4 <SysTick_Config+0x40>)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	3b01      	subs	r3, #1
 80024c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024c2:	210f      	movs	r1, #15
 80024c4:	f04f 30ff 	mov.w	r0, #4294967295
 80024c8:	f7ff ff8e 	bl	80023e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024cc:	4b05      	ldr	r3, [pc, #20]	; (80024e4 <SysTick_Config+0x40>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024d2:	4b04      	ldr	r3, [pc, #16]	; (80024e4 <SysTick_Config+0x40>)
 80024d4:	2207      	movs	r2, #7
 80024d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024d8:	2300      	movs	r3, #0
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3708      	adds	r7, #8
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	e000e010 	.word	0xe000e010

080024e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	f7ff ff29 	bl	8002348 <__NVIC_SetPriorityGrouping>
}
 80024f6:	bf00      	nop
 80024f8:	3708      	adds	r7, #8
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}

080024fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024fe:	b580      	push	{r7, lr}
 8002500:	b086      	sub	sp, #24
 8002502:	af00      	add	r7, sp, #0
 8002504:	4603      	mov	r3, r0
 8002506:	60b9      	str	r1, [r7, #8]
 8002508:	607a      	str	r2, [r7, #4]
 800250a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800250c:	2300      	movs	r3, #0
 800250e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002510:	f7ff ff3e 	bl	8002390 <__NVIC_GetPriorityGrouping>
 8002514:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002516:	687a      	ldr	r2, [r7, #4]
 8002518:	68b9      	ldr	r1, [r7, #8]
 800251a:	6978      	ldr	r0, [r7, #20]
 800251c:	f7ff ff8e 	bl	800243c <NVIC_EncodePriority>
 8002520:	4602      	mov	r2, r0
 8002522:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002526:	4611      	mov	r1, r2
 8002528:	4618      	mov	r0, r3
 800252a:	f7ff ff5d 	bl	80023e8 <__NVIC_SetPriority>
}
 800252e:	bf00      	nop
 8002530:	3718      	adds	r7, #24
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}

08002536 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002536:	b580      	push	{r7, lr}
 8002538:	b082      	sub	sp, #8
 800253a:	af00      	add	r7, sp, #0
 800253c:	4603      	mov	r3, r0
 800253e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002540:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002544:	4618      	mov	r0, r3
 8002546:	f7ff ff31 	bl	80023ac <__NVIC_EnableIRQ>
}
 800254a:	bf00      	nop
 800254c:	3708      	adds	r7, #8
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}

08002552 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002552:	b580      	push	{r7, lr}
 8002554:	b082      	sub	sp, #8
 8002556:	af00      	add	r7, sp, #0
 8002558:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f7ff ffa2 	bl	80024a4 <SysTick_Config>
 8002560:	4603      	mov	r3, r0
}
 8002562:	4618      	mov	r0, r3
 8002564:	3708      	adds	r7, #8
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}

0800256a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800256a:	b580      	push	{r7, lr}
 800256c:	b082      	sub	sp, #8
 800256e:	af00      	add	r7, sp, #0
 8002570:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d101      	bne.n	800257c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	e014      	b.n	80025a6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	791b      	ldrb	r3, [r3, #4]
 8002580:	b2db      	uxtb	r3, r3
 8002582:	2b00      	cmp	r3, #0
 8002584:	d105      	bne.n	8002592 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2200      	movs	r2, #0
 800258a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	f7fe fb39 	bl	8000c04 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2202      	movs	r2, #2
 8002596:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2200      	movs	r2, #0
 800259c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2201      	movs	r2, #1
 80025a2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80025a4:	2300      	movs	r3, #0
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3708      	adds	r7, #8
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}

080025ae <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80025ae:	b480      	push	{r7}
 80025b0:	b087      	sub	sp, #28
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	60f8      	str	r0, [r7, #12]
 80025b6:	60b9      	str	r1, [r7, #8]
 80025b8:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	795b      	ldrb	r3, [r3, #5]
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d101      	bne.n	80025c6 <HAL_DAC_ConfigChannel+0x18>
 80025c2:	2302      	movs	r3, #2
 80025c4:	e03c      	b.n	8002640 <HAL_DAC_ConfigChannel+0x92>
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	2201      	movs	r2, #1
 80025ca:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	2202      	movs	r2, #2
 80025d0:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	f003 0310 	and.w	r3, r3, #16
 80025e0:	f640 72fe 	movw	r2, #4094	; 0xffe
 80025e4:	fa02 f303 	lsl.w	r3, r2, r3
 80025e8:	43db      	mvns	r3, r3
 80025ea:	697a      	ldr	r2, [r7, #20]
 80025ec:	4013      	ands	r3, r2
 80025ee:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	4313      	orrs	r3, r2
 80025fa:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	f003 0310 	and.w	r3, r3, #16
 8002602:	693a      	ldr	r2, [r7, #16]
 8002604:	fa02 f303 	lsl.w	r3, r2, r3
 8002608:	697a      	ldr	r2, [r7, #20]
 800260a:	4313      	orrs	r3, r2
 800260c:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	697a      	ldr	r2, [r7, #20]
 8002614:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	6819      	ldr	r1, [r3, #0]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	f003 0310 	and.w	r3, r3, #16
 8002622:	22c0      	movs	r2, #192	; 0xc0
 8002624:	fa02 f303 	lsl.w	r3, r2, r3
 8002628:	43da      	mvns	r2, r3
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	400a      	ands	r2, r1
 8002630:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2201      	movs	r2, #1
 8002636:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2200      	movs	r2, #0
 800263c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800263e:	2300      	movs	r3, #0
}
 8002640:	4618      	mov	r0, r3
 8002642:	371c      	adds	r7, #28
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr

0800264c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b086      	sub	sp, #24
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002654:	2300      	movs	r3, #0
 8002656:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002658:	f7ff fbd4 	bl	8001e04 <HAL_GetTick>
 800265c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d101      	bne.n	8002668 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	e099      	b.n	800279c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2202      	movs	r2, #2
 800266c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2200      	movs	r2, #0
 8002674:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f022 0201 	bic.w	r2, r2, #1
 8002686:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002688:	e00f      	b.n	80026aa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800268a:	f7ff fbbb 	bl	8001e04 <HAL_GetTick>
 800268e:	4602      	mov	r2, r0
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	1ad3      	subs	r3, r2, r3
 8002694:	2b05      	cmp	r3, #5
 8002696:	d908      	bls.n	80026aa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2220      	movs	r2, #32
 800269c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2203      	movs	r2, #3
 80026a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80026a6:	2303      	movs	r3, #3
 80026a8:	e078      	b.n	800279c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 0301 	and.w	r3, r3, #1
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d1e8      	bne.n	800268a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80026c0:	697a      	ldr	r2, [r7, #20]
 80026c2:	4b38      	ldr	r3, [pc, #224]	; (80027a4 <HAL_DMA_Init+0x158>)
 80026c4:	4013      	ands	r3, r2
 80026c6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	685a      	ldr	r2, [r3, #4]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	691b      	ldr	r3, [r3, #16]
 80026dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	699b      	ldr	r3, [r3, #24]
 80026e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6a1b      	ldr	r3, [r3, #32]
 80026f4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026f6:	697a      	ldr	r2, [r7, #20]
 80026f8:	4313      	orrs	r3, r2
 80026fa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002700:	2b04      	cmp	r3, #4
 8002702:	d107      	bne.n	8002714 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270c:	4313      	orrs	r3, r2
 800270e:	697a      	ldr	r2, [r7, #20]
 8002710:	4313      	orrs	r3, r2
 8002712:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	697a      	ldr	r2, [r7, #20]
 800271a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	695b      	ldr	r3, [r3, #20]
 8002722:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	f023 0307 	bic.w	r3, r3, #7
 800272a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002730:	697a      	ldr	r2, [r7, #20]
 8002732:	4313      	orrs	r3, r2
 8002734:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800273a:	2b04      	cmp	r3, #4
 800273c:	d117      	bne.n	800276e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002742:	697a      	ldr	r2, [r7, #20]
 8002744:	4313      	orrs	r3, r2
 8002746:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800274c:	2b00      	cmp	r3, #0
 800274e:	d00e      	beq.n	800276e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002750:	6878      	ldr	r0, [r7, #4]
 8002752:	f000 fa7b 	bl	8002c4c <DMA_CheckFifoParam>
 8002756:	4603      	mov	r3, r0
 8002758:	2b00      	cmp	r3, #0
 800275a:	d008      	beq.n	800276e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2240      	movs	r2, #64	; 0x40
 8002760:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2201      	movs	r2, #1
 8002766:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800276a:	2301      	movs	r3, #1
 800276c:	e016      	b.n	800279c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	697a      	ldr	r2, [r7, #20]
 8002774:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f000 fa32 	bl	8002be0 <DMA_CalcBaseAndBitshift>
 800277c:	4603      	mov	r3, r0
 800277e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002784:	223f      	movs	r2, #63	; 0x3f
 8002786:	409a      	lsls	r2, r3
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2200      	movs	r2, #0
 8002790:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2201      	movs	r2, #1
 8002796:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800279a:	2300      	movs	r3, #0
}
 800279c:	4618      	mov	r0, r3
 800279e:	3718      	adds	r7, #24
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	f010803f 	.word	0xf010803f

080027a8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b084      	sub	sp, #16
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027b4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80027b6:	f7ff fb25 	bl	8001e04 <HAL_GetTick>
 80027ba:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	2b02      	cmp	r3, #2
 80027c6:	d008      	beq.n	80027da <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2280      	movs	r2, #128	; 0x80
 80027cc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2200      	movs	r2, #0
 80027d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e052      	b.n	8002880 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f022 0216 	bic.w	r2, r2, #22
 80027e8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	695a      	ldr	r2, [r3, #20]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80027f8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d103      	bne.n	800280a <HAL_DMA_Abort+0x62>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002806:	2b00      	cmp	r3, #0
 8002808:	d007      	beq.n	800281a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f022 0208 	bic.w	r2, r2, #8
 8002818:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f022 0201 	bic.w	r2, r2, #1
 8002828:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800282a:	e013      	b.n	8002854 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800282c:	f7ff faea 	bl	8001e04 <HAL_GetTick>
 8002830:	4602      	mov	r2, r0
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	2b05      	cmp	r3, #5
 8002838:	d90c      	bls.n	8002854 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2220      	movs	r2, #32
 800283e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2203      	movs	r2, #3
 8002844:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2200      	movs	r2, #0
 800284c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002850:	2303      	movs	r3, #3
 8002852:	e015      	b.n	8002880 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0301 	and.w	r3, r3, #1
 800285e:	2b00      	cmp	r3, #0
 8002860:	d1e4      	bne.n	800282c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002866:	223f      	movs	r2, #63	; 0x3f
 8002868:	409a      	lsls	r2, r3
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2201      	movs	r2, #1
 8002872:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2200      	movs	r2, #0
 800287a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800287e:	2300      	movs	r3, #0
}
 8002880:	4618      	mov	r0, r3
 8002882:	3710      	adds	r7, #16
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}

08002888 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002888:	b480      	push	{r7}
 800288a:	b083      	sub	sp, #12
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002896:	b2db      	uxtb	r3, r3
 8002898:	2b02      	cmp	r3, #2
 800289a:	d004      	beq.n	80028a6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2280      	movs	r2, #128	; 0x80
 80028a0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e00c      	b.n	80028c0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2205      	movs	r2, #5
 80028aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f022 0201 	bic.w	r2, r2, #1
 80028bc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80028be:	2300      	movs	r3, #0
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	370c      	adds	r7, #12
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr

080028cc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b086      	sub	sp, #24
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80028d4:	2300      	movs	r3, #0
 80028d6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80028d8:	4b92      	ldr	r3, [pc, #584]	; (8002b24 <HAL_DMA_IRQHandler+0x258>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a92      	ldr	r2, [pc, #584]	; (8002b28 <HAL_DMA_IRQHandler+0x25c>)
 80028de:	fba2 2303 	umull	r2, r3, r2, r3
 80028e2:	0a9b      	lsrs	r3, r3, #10
 80028e4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028ea:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028f6:	2208      	movs	r2, #8
 80028f8:	409a      	lsls	r2, r3
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	4013      	ands	r3, r2
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d01a      	beq.n	8002938 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 0304 	and.w	r3, r3, #4
 800290c:	2b00      	cmp	r3, #0
 800290e:	d013      	beq.n	8002938 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f022 0204 	bic.w	r2, r2, #4
 800291e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002924:	2208      	movs	r2, #8
 8002926:	409a      	lsls	r2, r3
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002930:	f043 0201 	orr.w	r2, r3, #1
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800293c:	2201      	movs	r2, #1
 800293e:	409a      	lsls	r2, r3
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	4013      	ands	r3, r2
 8002944:	2b00      	cmp	r3, #0
 8002946:	d012      	beq.n	800296e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	695b      	ldr	r3, [r3, #20]
 800294e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002952:	2b00      	cmp	r3, #0
 8002954:	d00b      	beq.n	800296e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800295a:	2201      	movs	r2, #1
 800295c:	409a      	lsls	r2, r3
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002966:	f043 0202 	orr.w	r2, r3, #2
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002972:	2204      	movs	r2, #4
 8002974:	409a      	lsls	r2, r3
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	4013      	ands	r3, r2
 800297a:	2b00      	cmp	r3, #0
 800297c:	d012      	beq.n	80029a4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 0302 	and.w	r3, r3, #2
 8002988:	2b00      	cmp	r3, #0
 800298a:	d00b      	beq.n	80029a4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002990:	2204      	movs	r2, #4
 8002992:	409a      	lsls	r2, r3
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800299c:	f043 0204 	orr.w	r2, r3, #4
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029a8:	2210      	movs	r2, #16
 80029aa:	409a      	lsls	r2, r3
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	4013      	ands	r3, r2
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d043      	beq.n	8002a3c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 0308 	and.w	r3, r3, #8
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d03c      	beq.n	8002a3c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029c6:	2210      	movs	r2, #16
 80029c8:	409a      	lsls	r2, r3
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d018      	beq.n	8002a0e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d108      	bne.n	80029fc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d024      	beq.n	8002a3c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	4798      	blx	r3
 80029fa:	e01f      	b.n	8002a3c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d01b      	beq.n	8002a3c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	4798      	blx	r3
 8002a0c:	e016      	b.n	8002a3c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d107      	bne.n	8002a2c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f022 0208 	bic.w	r2, r2, #8
 8002a2a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d003      	beq.n	8002a3c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a38:	6878      	ldr	r0, [r7, #4]
 8002a3a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a40:	2220      	movs	r2, #32
 8002a42:	409a      	lsls	r2, r3
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	4013      	ands	r3, r2
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	f000 808e 	beq.w	8002b6a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 0310 	and.w	r3, r3, #16
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	f000 8086 	beq.w	8002b6a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a62:	2220      	movs	r2, #32
 8002a64:	409a      	lsls	r2, r3
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	2b05      	cmp	r3, #5
 8002a74:	d136      	bne.n	8002ae4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f022 0216 	bic.w	r2, r2, #22
 8002a84:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	695a      	ldr	r2, [r3, #20]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a94:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d103      	bne.n	8002aa6 <HAL_DMA_IRQHandler+0x1da>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d007      	beq.n	8002ab6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f022 0208 	bic.w	r2, r2, #8
 8002ab4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aba:	223f      	movs	r2, #63	; 0x3f
 8002abc:	409a      	lsls	r2, r3
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2200      	movs	r2, #0
 8002ace:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d07d      	beq.n	8002bd6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	4798      	blx	r3
        }
        return;
 8002ae2:	e078      	b.n	8002bd6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d01c      	beq.n	8002b2c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d108      	bne.n	8002b12 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d030      	beq.n	8002b6a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b0c:	6878      	ldr	r0, [r7, #4]
 8002b0e:	4798      	blx	r3
 8002b10:	e02b      	b.n	8002b6a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d027      	beq.n	8002b6a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	4798      	blx	r3
 8002b22:	e022      	b.n	8002b6a <HAL_DMA_IRQHandler+0x29e>
 8002b24:	20000000 	.word	0x20000000
 8002b28:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d10f      	bne.n	8002b5a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f022 0210 	bic.w	r2, r2, #16
 8002b48:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2200      	movs	r2, #0
 8002b56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d003      	beq.n	8002b6a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d032      	beq.n	8002bd8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b76:	f003 0301 	and.w	r3, r3, #1
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d022      	beq.n	8002bc4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2205      	movs	r2, #5
 8002b82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f022 0201 	bic.w	r2, r2, #1
 8002b94:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	3301      	adds	r3, #1
 8002b9a:	60bb      	str	r3, [r7, #8]
 8002b9c:	697a      	ldr	r2, [r7, #20]
 8002b9e:	429a      	cmp	r2, r3
 8002ba0:	d307      	bcc.n	8002bb2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 0301 	and.w	r3, r3, #1
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d1f2      	bne.n	8002b96 <HAL_DMA_IRQHandler+0x2ca>
 8002bb0:	e000      	b.n	8002bb4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002bb2:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d005      	beq.n	8002bd8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bd0:	6878      	ldr	r0, [r7, #4]
 8002bd2:	4798      	blx	r3
 8002bd4:	e000      	b.n	8002bd8 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002bd6:	bf00      	nop
    }
  }
}
 8002bd8:	3718      	adds	r7, #24
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	bf00      	nop

08002be0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b085      	sub	sp, #20
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	3b10      	subs	r3, #16
 8002bf0:	4a14      	ldr	r2, [pc, #80]	; (8002c44 <DMA_CalcBaseAndBitshift+0x64>)
 8002bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8002bf6:	091b      	lsrs	r3, r3, #4
 8002bf8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002bfa:	4a13      	ldr	r2, [pc, #76]	; (8002c48 <DMA_CalcBaseAndBitshift+0x68>)
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	4413      	add	r3, r2
 8002c00:	781b      	ldrb	r3, [r3, #0]
 8002c02:	461a      	mov	r2, r3
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2b03      	cmp	r3, #3
 8002c0c:	d909      	bls.n	8002c22 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002c16:	f023 0303 	bic.w	r3, r3, #3
 8002c1a:	1d1a      	adds	r2, r3, #4
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	659a      	str	r2, [r3, #88]	; 0x58
 8002c20:	e007      	b.n	8002c32 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002c2a:	f023 0303 	bic.w	r3, r3, #3
 8002c2e:	687a      	ldr	r2, [r7, #4]
 8002c30:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3714      	adds	r7, #20
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr
 8002c42:	bf00      	nop
 8002c44:	aaaaaaab 	.word	0xaaaaaaab
 8002c48:	08005f78 	.word	0x08005f78

08002c4c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b085      	sub	sp, #20
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c54:	2300      	movs	r3, #0
 8002c56:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c5c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	699b      	ldr	r3, [r3, #24]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d11f      	bne.n	8002ca6 <DMA_CheckFifoParam+0x5a>
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	2b03      	cmp	r3, #3
 8002c6a:	d856      	bhi.n	8002d1a <DMA_CheckFifoParam+0xce>
 8002c6c:	a201      	add	r2, pc, #4	; (adr r2, 8002c74 <DMA_CheckFifoParam+0x28>)
 8002c6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c72:	bf00      	nop
 8002c74:	08002c85 	.word	0x08002c85
 8002c78:	08002c97 	.word	0x08002c97
 8002c7c:	08002c85 	.word	0x08002c85
 8002c80:	08002d1b 	.word	0x08002d1b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c88:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d046      	beq.n	8002d1e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c94:	e043      	b.n	8002d1e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c9a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002c9e:	d140      	bne.n	8002d22 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ca4:	e03d      	b.n	8002d22 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	699b      	ldr	r3, [r3, #24]
 8002caa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cae:	d121      	bne.n	8002cf4 <DMA_CheckFifoParam+0xa8>
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	2b03      	cmp	r3, #3
 8002cb4:	d837      	bhi.n	8002d26 <DMA_CheckFifoParam+0xda>
 8002cb6:	a201      	add	r2, pc, #4	; (adr r2, 8002cbc <DMA_CheckFifoParam+0x70>)
 8002cb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cbc:	08002ccd 	.word	0x08002ccd
 8002cc0:	08002cd3 	.word	0x08002cd3
 8002cc4:	08002ccd 	.word	0x08002ccd
 8002cc8:	08002ce5 	.word	0x08002ce5
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	73fb      	strb	r3, [r7, #15]
      break;
 8002cd0:	e030      	b.n	8002d34 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d025      	beq.n	8002d2a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ce2:	e022      	b.n	8002d2a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ce8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002cec:	d11f      	bne.n	8002d2e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002cf2:	e01c      	b.n	8002d2e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	2b02      	cmp	r3, #2
 8002cf8:	d903      	bls.n	8002d02 <DMA_CheckFifoParam+0xb6>
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	2b03      	cmp	r3, #3
 8002cfe:	d003      	beq.n	8002d08 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002d00:	e018      	b.n	8002d34 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	73fb      	strb	r3, [r7, #15]
      break;
 8002d06:	e015      	b.n	8002d34 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d00e      	beq.n	8002d32 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	73fb      	strb	r3, [r7, #15]
      break;
 8002d18:	e00b      	b.n	8002d32 <DMA_CheckFifoParam+0xe6>
      break;
 8002d1a:	bf00      	nop
 8002d1c:	e00a      	b.n	8002d34 <DMA_CheckFifoParam+0xe8>
      break;
 8002d1e:	bf00      	nop
 8002d20:	e008      	b.n	8002d34 <DMA_CheckFifoParam+0xe8>
      break;
 8002d22:	bf00      	nop
 8002d24:	e006      	b.n	8002d34 <DMA_CheckFifoParam+0xe8>
      break;
 8002d26:	bf00      	nop
 8002d28:	e004      	b.n	8002d34 <DMA_CheckFifoParam+0xe8>
      break;
 8002d2a:	bf00      	nop
 8002d2c:	e002      	b.n	8002d34 <DMA_CheckFifoParam+0xe8>
      break;   
 8002d2e:	bf00      	nop
 8002d30:	e000      	b.n	8002d34 <DMA_CheckFifoParam+0xe8>
      break;
 8002d32:	bf00      	nop
    }
  } 
  
  return status; 
 8002d34:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3714      	adds	r7, #20
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr
 8002d42:	bf00      	nop

08002d44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b089      	sub	sp, #36	; 0x24
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
 8002d4c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d52:	2300      	movs	r3, #0
 8002d54:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002d56:	2300      	movs	r3, #0
 8002d58:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	61fb      	str	r3, [r7, #28]
 8002d5e:	e177      	b.n	8003050 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d60:	2201      	movs	r2, #1
 8002d62:	69fb      	ldr	r3, [r7, #28]
 8002d64:	fa02 f303 	lsl.w	r3, r2, r3
 8002d68:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	697a      	ldr	r2, [r7, #20]
 8002d70:	4013      	ands	r3, r2
 8002d72:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d74:	693a      	ldr	r2, [r7, #16]
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	f040 8166 	bne.w	800304a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	f003 0303 	and.w	r3, r3, #3
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d005      	beq.n	8002d96 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d92:	2b02      	cmp	r3, #2
 8002d94:	d130      	bne.n	8002df8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d9c:	69fb      	ldr	r3, [r7, #28]
 8002d9e:	005b      	lsls	r3, r3, #1
 8002da0:	2203      	movs	r2, #3
 8002da2:	fa02 f303 	lsl.w	r3, r2, r3
 8002da6:	43db      	mvns	r3, r3
 8002da8:	69ba      	ldr	r2, [r7, #24]
 8002daa:	4013      	ands	r3, r2
 8002dac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	68da      	ldr	r2, [r3, #12]
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	005b      	lsls	r3, r3, #1
 8002db6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dba:	69ba      	ldr	r2, [r7, #24]
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	69ba      	ldr	r2, [r7, #24]
 8002dc4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002dcc:	2201      	movs	r2, #1
 8002dce:	69fb      	ldr	r3, [r7, #28]
 8002dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd4:	43db      	mvns	r3, r3
 8002dd6:	69ba      	ldr	r2, [r7, #24]
 8002dd8:	4013      	ands	r3, r2
 8002dda:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	091b      	lsrs	r3, r3, #4
 8002de2:	f003 0201 	and.w	r2, r3, #1
 8002de6:	69fb      	ldr	r3, [r7, #28]
 8002de8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dec:	69ba      	ldr	r2, [r7, #24]
 8002dee:	4313      	orrs	r3, r2
 8002df0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	69ba      	ldr	r2, [r7, #24]
 8002df6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	f003 0303 	and.w	r3, r3, #3
 8002e00:	2b03      	cmp	r3, #3
 8002e02:	d017      	beq.n	8002e34 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e0a:	69fb      	ldr	r3, [r7, #28]
 8002e0c:	005b      	lsls	r3, r3, #1
 8002e0e:	2203      	movs	r2, #3
 8002e10:	fa02 f303 	lsl.w	r3, r2, r3
 8002e14:	43db      	mvns	r3, r3
 8002e16:	69ba      	ldr	r2, [r7, #24]
 8002e18:	4013      	ands	r3, r2
 8002e1a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	689a      	ldr	r2, [r3, #8]
 8002e20:	69fb      	ldr	r3, [r7, #28]
 8002e22:	005b      	lsls	r3, r3, #1
 8002e24:	fa02 f303 	lsl.w	r3, r2, r3
 8002e28:	69ba      	ldr	r2, [r7, #24]
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	69ba      	ldr	r2, [r7, #24]
 8002e32:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	f003 0303 	and.w	r3, r3, #3
 8002e3c:	2b02      	cmp	r3, #2
 8002e3e:	d123      	bne.n	8002e88 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e40:	69fb      	ldr	r3, [r7, #28]
 8002e42:	08da      	lsrs	r2, r3, #3
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	3208      	adds	r2, #8
 8002e48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	f003 0307 	and.w	r3, r3, #7
 8002e54:	009b      	lsls	r3, r3, #2
 8002e56:	220f      	movs	r2, #15
 8002e58:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5c:	43db      	mvns	r3, r3
 8002e5e:	69ba      	ldr	r2, [r7, #24]
 8002e60:	4013      	ands	r3, r2
 8002e62:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	691a      	ldr	r2, [r3, #16]
 8002e68:	69fb      	ldr	r3, [r7, #28]
 8002e6a:	f003 0307 	and.w	r3, r3, #7
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	fa02 f303 	lsl.w	r3, r2, r3
 8002e74:	69ba      	ldr	r2, [r7, #24]
 8002e76:	4313      	orrs	r3, r2
 8002e78:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	08da      	lsrs	r2, r3, #3
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	3208      	adds	r2, #8
 8002e82:	69b9      	ldr	r1, [r7, #24]
 8002e84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e8e:	69fb      	ldr	r3, [r7, #28]
 8002e90:	005b      	lsls	r3, r3, #1
 8002e92:	2203      	movs	r2, #3
 8002e94:	fa02 f303 	lsl.w	r3, r2, r3
 8002e98:	43db      	mvns	r3, r3
 8002e9a:	69ba      	ldr	r2, [r7, #24]
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	f003 0203 	and.w	r2, r3, #3
 8002ea8:	69fb      	ldr	r3, [r7, #28]
 8002eaa:	005b      	lsls	r3, r3, #1
 8002eac:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb0:	69ba      	ldr	r2, [r7, #24]
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	69ba      	ldr	r2, [r7, #24]
 8002eba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	f000 80c0 	beq.w	800304a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002eca:	2300      	movs	r3, #0
 8002ecc:	60fb      	str	r3, [r7, #12]
 8002ece:	4b66      	ldr	r3, [pc, #408]	; (8003068 <HAL_GPIO_Init+0x324>)
 8002ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ed2:	4a65      	ldr	r2, [pc, #404]	; (8003068 <HAL_GPIO_Init+0x324>)
 8002ed4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ed8:	6453      	str	r3, [r2, #68]	; 0x44
 8002eda:	4b63      	ldr	r3, [pc, #396]	; (8003068 <HAL_GPIO_Init+0x324>)
 8002edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ede:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ee2:	60fb      	str	r3, [r7, #12]
 8002ee4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ee6:	4a61      	ldr	r2, [pc, #388]	; (800306c <HAL_GPIO_Init+0x328>)
 8002ee8:	69fb      	ldr	r3, [r7, #28]
 8002eea:	089b      	lsrs	r3, r3, #2
 8002eec:	3302      	adds	r3, #2
 8002eee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ef2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ef4:	69fb      	ldr	r3, [r7, #28]
 8002ef6:	f003 0303 	and.w	r3, r3, #3
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	220f      	movs	r2, #15
 8002efe:	fa02 f303 	lsl.w	r3, r2, r3
 8002f02:	43db      	mvns	r3, r3
 8002f04:	69ba      	ldr	r2, [r7, #24]
 8002f06:	4013      	ands	r3, r2
 8002f08:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4a58      	ldr	r2, [pc, #352]	; (8003070 <HAL_GPIO_Init+0x32c>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d037      	beq.n	8002f82 <HAL_GPIO_Init+0x23e>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4a57      	ldr	r2, [pc, #348]	; (8003074 <HAL_GPIO_Init+0x330>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d031      	beq.n	8002f7e <HAL_GPIO_Init+0x23a>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4a56      	ldr	r2, [pc, #344]	; (8003078 <HAL_GPIO_Init+0x334>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d02b      	beq.n	8002f7a <HAL_GPIO_Init+0x236>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	4a55      	ldr	r2, [pc, #340]	; (800307c <HAL_GPIO_Init+0x338>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d025      	beq.n	8002f76 <HAL_GPIO_Init+0x232>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	4a54      	ldr	r2, [pc, #336]	; (8003080 <HAL_GPIO_Init+0x33c>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d01f      	beq.n	8002f72 <HAL_GPIO_Init+0x22e>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	4a53      	ldr	r2, [pc, #332]	; (8003084 <HAL_GPIO_Init+0x340>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d019      	beq.n	8002f6e <HAL_GPIO_Init+0x22a>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	4a52      	ldr	r2, [pc, #328]	; (8003088 <HAL_GPIO_Init+0x344>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d013      	beq.n	8002f6a <HAL_GPIO_Init+0x226>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	4a51      	ldr	r2, [pc, #324]	; (800308c <HAL_GPIO_Init+0x348>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d00d      	beq.n	8002f66 <HAL_GPIO_Init+0x222>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	4a50      	ldr	r2, [pc, #320]	; (8003090 <HAL_GPIO_Init+0x34c>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d007      	beq.n	8002f62 <HAL_GPIO_Init+0x21e>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	4a4f      	ldr	r2, [pc, #316]	; (8003094 <HAL_GPIO_Init+0x350>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d101      	bne.n	8002f5e <HAL_GPIO_Init+0x21a>
 8002f5a:	2309      	movs	r3, #9
 8002f5c:	e012      	b.n	8002f84 <HAL_GPIO_Init+0x240>
 8002f5e:	230a      	movs	r3, #10
 8002f60:	e010      	b.n	8002f84 <HAL_GPIO_Init+0x240>
 8002f62:	2308      	movs	r3, #8
 8002f64:	e00e      	b.n	8002f84 <HAL_GPIO_Init+0x240>
 8002f66:	2307      	movs	r3, #7
 8002f68:	e00c      	b.n	8002f84 <HAL_GPIO_Init+0x240>
 8002f6a:	2306      	movs	r3, #6
 8002f6c:	e00a      	b.n	8002f84 <HAL_GPIO_Init+0x240>
 8002f6e:	2305      	movs	r3, #5
 8002f70:	e008      	b.n	8002f84 <HAL_GPIO_Init+0x240>
 8002f72:	2304      	movs	r3, #4
 8002f74:	e006      	b.n	8002f84 <HAL_GPIO_Init+0x240>
 8002f76:	2303      	movs	r3, #3
 8002f78:	e004      	b.n	8002f84 <HAL_GPIO_Init+0x240>
 8002f7a:	2302      	movs	r3, #2
 8002f7c:	e002      	b.n	8002f84 <HAL_GPIO_Init+0x240>
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e000      	b.n	8002f84 <HAL_GPIO_Init+0x240>
 8002f82:	2300      	movs	r3, #0
 8002f84:	69fa      	ldr	r2, [r7, #28]
 8002f86:	f002 0203 	and.w	r2, r2, #3
 8002f8a:	0092      	lsls	r2, r2, #2
 8002f8c:	4093      	lsls	r3, r2
 8002f8e:	69ba      	ldr	r2, [r7, #24]
 8002f90:	4313      	orrs	r3, r2
 8002f92:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f94:	4935      	ldr	r1, [pc, #212]	; (800306c <HAL_GPIO_Init+0x328>)
 8002f96:	69fb      	ldr	r3, [r7, #28]
 8002f98:	089b      	lsrs	r3, r3, #2
 8002f9a:	3302      	adds	r3, #2
 8002f9c:	69ba      	ldr	r2, [r7, #24]
 8002f9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002fa2:	4b3d      	ldr	r3, [pc, #244]	; (8003098 <HAL_GPIO_Init+0x354>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	43db      	mvns	r3, r3
 8002fac:	69ba      	ldr	r2, [r7, #24]
 8002fae:	4013      	ands	r3, r2
 8002fb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d003      	beq.n	8002fc6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002fbe:	69ba      	ldr	r2, [r7, #24]
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002fc6:	4a34      	ldr	r2, [pc, #208]	; (8003098 <HAL_GPIO_Init+0x354>)
 8002fc8:	69bb      	ldr	r3, [r7, #24]
 8002fca:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002fcc:	4b32      	ldr	r3, [pc, #200]	; (8003098 <HAL_GPIO_Init+0x354>)
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	43db      	mvns	r3, r3
 8002fd6:	69ba      	ldr	r2, [r7, #24]
 8002fd8:	4013      	ands	r3, r2
 8002fda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d003      	beq.n	8002ff0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002fe8:	69ba      	ldr	r2, [r7, #24]
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	4313      	orrs	r3, r2
 8002fee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ff0:	4a29      	ldr	r2, [pc, #164]	; (8003098 <HAL_GPIO_Init+0x354>)
 8002ff2:	69bb      	ldr	r3, [r7, #24]
 8002ff4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ff6:	4b28      	ldr	r3, [pc, #160]	; (8003098 <HAL_GPIO_Init+0x354>)
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	43db      	mvns	r3, r3
 8003000:	69ba      	ldr	r2, [r7, #24]
 8003002:	4013      	ands	r3, r2
 8003004:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800300e:	2b00      	cmp	r3, #0
 8003010:	d003      	beq.n	800301a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003012:	69ba      	ldr	r2, [r7, #24]
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	4313      	orrs	r3, r2
 8003018:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800301a:	4a1f      	ldr	r2, [pc, #124]	; (8003098 <HAL_GPIO_Init+0x354>)
 800301c:	69bb      	ldr	r3, [r7, #24]
 800301e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003020:	4b1d      	ldr	r3, [pc, #116]	; (8003098 <HAL_GPIO_Init+0x354>)
 8003022:	68db      	ldr	r3, [r3, #12]
 8003024:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	43db      	mvns	r3, r3
 800302a:	69ba      	ldr	r2, [r7, #24]
 800302c:	4013      	ands	r3, r2
 800302e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003038:	2b00      	cmp	r3, #0
 800303a:	d003      	beq.n	8003044 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800303c:	69ba      	ldr	r2, [r7, #24]
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	4313      	orrs	r3, r2
 8003042:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003044:	4a14      	ldr	r2, [pc, #80]	; (8003098 <HAL_GPIO_Init+0x354>)
 8003046:	69bb      	ldr	r3, [r7, #24]
 8003048:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800304a:	69fb      	ldr	r3, [r7, #28]
 800304c:	3301      	adds	r3, #1
 800304e:	61fb      	str	r3, [r7, #28]
 8003050:	69fb      	ldr	r3, [r7, #28]
 8003052:	2b0f      	cmp	r3, #15
 8003054:	f67f ae84 	bls.w	8002d60 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003058:	bf00      	nop
 800305a:	bf00      	nop
 800305c:	3724      	adds	r7, #36	; 0x24
 800305e:	46bd      	mov	sp, r7
 8003060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003064:	4770      	bx	lr
 8003066:	bf00      	nop
 8003068:	40023800 	.word	0x40023800
 800306c:	40013800 	.word	0x40013800
 8003070:	40020000 	.word	0x40020000
 8003074:	40020400 	.word	0x40020400
 8003078:	40020800 	.word	0x40020800
 800307c:	40020c00 	.word	0x40020c00
 8003080:	40021000 	.word	0x40021000
 8003084:	40021400 	.word	0x40021400
 8003088:	40021800 	.word	0x40021800
 800308c:	40021c00 	.word	0x40021c00
 8003090:	40022000 	.word	0x40022000
 8003094:	40022400 	.word	0x40022400
 8003098:	40013c00 	.word	0x40013c00

0800309c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800309c:	b480      	push	{r7}
 800309e:	b085      	sub	sp, #20
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
 80030a4:	460b      	mov	r3, r1
 80030a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	691a      	ldr	r2, [r3, #16]
 80030ac:	887b      	ldrh	r3, [r7, #2]
 80030ae:	4013      	ands	r3, r2
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d002      	beq.n	80030ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80030b4:	2301      	movs	r3, #1
 80030b6:	73fb      	strb	r3, [r7, #15]
 80030b8:	e001      	b.n	80030be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80030ba:	2300      	movs	r3, #0
 80030bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80030be:	7bfb      	ldrb	r3, [r7, #15]
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	3714      	adds	r7, #20
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr

080030cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b083      	sub	sp, #12
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
 80030d4:	460b      	mov	r3, r1
 80030d6:	807b      	strh	r3, [r7, #2]
 80030d8:	4613      	mov	r3, r2
 80030da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80030dc:	787b      	ldrb	r3, [r7, #1]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d003      	beq.n	80030ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030e2:	887a      	ldrh	r2, [r7, #2]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80030e8:	e003      	b.n	80030f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80030ea:	887b      	ldrh	r3, [r7, #2]
 80030ec:	041a      	lsls	r2, r3, #16
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	619a      	str	r2, [r3, #24]
}
 80030f2:	bf00      	nop
 80030f4:	370c      	adds	r7, #12
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr
	...

08003100 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b082      	sub	sp, #8
 8003104:	af00      	add	r7, sp, #0
 8003106:	4603      	mov	r3, r0
 8003108:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800310a:	4b08      	ldr	r3, [pc, #32]	; (800312c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800310c:	695a      	ldr	r2, [r3, #20]
 800310e:	88fb      	ldrh	r3, [r7, #6]
 8003110:	4013      	ands	r3, r2
 8003112:	2b00      	cmp	r3, #0
 8003114:	d006      	beq.n	8003124 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003116:	4a05      	ldr	r2, [pc, #20]	; (800312c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003118:	88fb      	ldrh	r3, [r7, #6]
 800311a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800311c:	88fb      	ldrh	r3, [r7, #6]
 800311e:	4618      	mov	r0, r3
 8003120:	f000 f806 	bl	8003130 <HAL_GPIO_EXTI_Callback>
  }
}
 8003124:	bf00      	nop
 8003126:	3708      	adds	r7, #8
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}
 800312c:	40013c00 	.word	0x40013c00

08003130 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003130:	b480      	push	{r7}
 8003132:	b083      	sub	sp, #12
 8003134:	af00      	add	r7, sp, #0
 8003136:	4603      	mov	r3, r0
 8003138:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800313a:	bf00      	nop
 800313c:	370c      	adds	r7, #12
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr
	...

08003148 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b084      	sub	sp, #16
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d101      	bne.n	800315a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e12b      	b.n	80033b2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003160:	b2db      	uxtb	r3, r3
 8003162:	2b00      	cmp	r3, #0
 8003164:	d106      	bne.n	8003174 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2200      	movs	r2, #0
 800316a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f7fd ff08 	bl	8000f84 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2224      	movs	r2, #36	; 0x24
 8003178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f022 0201 	bic.w	r2, r2, #1
 800318a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800319a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80031aa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80031ac:	f000 fe28 	bl	8003e00 <HAL_RCC_GetPCLK1Freq>
 80031b0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	4a81      	ldr	r2, [pc, #516]	; (80033bc <HAL_I2C_Init+0x274>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d807      	bhi.n	80031cc <HAL_I2C_Init+0x84>
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	4a80      	ldr	r2, [pc, #512]	; (80033c0 <HAL_I2C_Init+0x278>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	bf94      	ite	ls
 80031c4:	2301      	movls	r3, #1
 80031c6:	2300      	movhi	r3, #0
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	e006      	b.n	80031da <HAL_I2C_Init+0x92>
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	4a7d      	ldr	r2, [pc, #500]	; (80033c4 <HAL_I2C_Init+0x27c>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	bf94      	ite	ls
 80031d4:	2301      	movls	r3, #1
 80031d6:	2300      	movhi	r3, #0
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d001      	beq.n	80031e2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e0e7      	b.n	80033b2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	4a78      	ldr	r2, [pc, #480]	; (80033c8 <HAL_I2C_Init+0x280>)
 80031e6:	fba2 2303 	umull	r2, r3, r2, r3
 80031ea:	0c9b      	lsrs	r3, r3, #18
 80031ec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	68ba      	ldr	r2, [r7, #8]
 80031fe:	430a      	orrs	r2, r1
 8003200:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	6a1b      	ldr	r3, [r3, #32]
 8003208:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	4a6a      	ldr	r2, [pc, #424]	; (80033bc <HAL_I2C_Init+0x274>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d802      	bhi.n	800321c <HAL_I2C_Init+0xd4>
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	3301      	adds	r3, #1
 800321a:	e009      	b.n	8003230 <HAL_I2C_Init+0xe8>
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003222:	fb02 f303 	mul.w	r3, r2, r3
 8003226:	4a69      	ldr	r2, [pc, #420]	; (80033cc <HAL_I2C_Init+0x284>)
 8003228:	fba2 2303 	umull	r2, r3, r2, r3
 800322c:	099b      	lsrs	r3, r3, #6
 800322e:	3301      	adds	r3, #1
 8003230:	687a      	ldr	r2, [r7, #4]
 8003232:	6812      	ldr	r2, [r2, #0]
 8003234:	430b      	orrs	r3, r1
 8003236:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	69db      	ldr	r3, [r3, #28]
 800323e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003242:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	495c      	ldr	r1, [pc, #368]	; (80033bc <HAL_I2C_Init+0x274>)
 800324c:	428b      	cmp	r3, r1
 800324e:	d819      	bhi.n	8003284 <HAL_I2C_Init+0x13c>
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	1e59      	subs	r1, r3, #1
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	005b      	lsls	r3, r3, #1
 800325a:	fbb1 f3f3 	udiv	r3, r1, r3
 800325e:	1c59      	adds	r1, r3, #1
 8003260:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003264:	400b      	ands	r3, r1
 8003266:	2b00      	cmp	r3, #0
 8003268:	d00a      	beq.n	8003280 <HAL_I2C_Init+0x138>
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	1e59      	subs	r1, r3, #1
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	005b      	lsls	r3, r3, #1
 8003274:	fbb1 f3f3 	udiv	r3, r1, r3
 8003278:	3301      	adds	r3, #1
 800327a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800327e:	e051      	b.n	8003324 <HAL_I2C_Init+0x1dc>
 8003280:	2304      	movs	r3, #4
 8003282:	e04f      	b.n	8003324 <HAL_I2C_Init+0x1dc>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d111      	bne.n	80032b0 <HAL_I2C_Init+0x168>
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	1e58      	subs	r0, r3, #1
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6859      	ldr	r1, [r3, #4]
 8003294:	460b      	mov	r3, r1
 8003296:	005b      	lsls	r3, r3, #1
 8003298:	440b      	add	r3, r1
 800329a:	fbb0 f3f3 	udiv	r3, r0, r3
 800329e:	3301      	adds	r3, #1
 80032a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	bf0c      	ite	eq
 80032a8:	2301      	moveq	r3, #1
 80032aa:	2300      	movne	r3, #0
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	e012      	b.n	80032d6 <HAL_I2C_Init+0x18e>
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	1e58      	subs	r0, r3, #1
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6859      	ldr	r1, [r3, #4]
 80032b8:	460b      	mov	r3, r1
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	440b      	add	r3, r1
 80032be:	0099      	lsls	r1, r3, #2
 80032c0:	440b      	add	r3, r1
 80032c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80032c6:	3301      	adds	r3, #1
 80032c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	bf0c      	ite	eq
 80032d0:	2301      	moveq	r3, #1
 80032d2:	2300      	movne	r3, #0
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d001      	beq.n	80032de <HAL_I2C_Init+0x196>
 80032da:	2301      	movs	r3, #1
 80032dc:	e022      	b.n	8003324 <HAL_I2C_Init+0x1dc>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d10e      	bne.n	8003304 <HAL_I2C_Init+0x1bc>
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	1e58      	subs	r0, r3, #1
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6859      	ldr	r1, [r3, #4]
 80032ee:	460b      	mov	r3, r1
 80032f0:	005b      	lsls	r3, r3, #1
 80032f2:	440b      	add	r3, r1
 80032f4:	fbb0 f3f3 	udiv	r3, r0, r3
 80032f8:	3301      	adds	r3, #1
 80032fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003302:	e00f      	b.n	8003324 <HAL_I2C_Init+0x1dc>
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	1e58      	subs	r0, r3, #1
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6859      	ldr	r1, [r3, #4]
 800330c:	460b      	mov	r3, r1
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	440b      	add	r3, r1
 8003312:	0099      	lsls	r1, r3, #2
 8003314:	440b      	add	r3, r1
 8003316:	fbb0 f3f3 	udiv	r3, r0, r3
 800331a:	3301      	adds	r3, #1
 800331c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003320:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003324:	6879      	ldr	r1, [r7, #4]
 8003326:	6809      	ldr	r1, [r1, #0]
 8003328:	4313      	orrs	r3, r2
 800332a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	69da      	ldr	r2, [r3, #28]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6a1b      	ldr	r3, [r3, #32]
 800333e:	431a      	orrs	r2, r3
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	430a      	orrs	r2, r1
 8003346:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003352:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003356:	687a      	ldr	r2, [r7, #4]
 8003358:	6911      	ldr	r1, [r2, #16]
 800335a:	687a      	ldr	r2, [r7, #4]
 800335c:	68d2      	ldr	r2, [r2, #12]
 800335e:	4311      	orrs	r1, r2
 8003360:	687a      	ldr	r2, [r7, #4]
 8003362:	6812      	ldr	r2, [r2, #0]
 8003364:	430b      	orrs	r3, r1
 8003366:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	68db      	ldr	r3, [r3, #12]
 800336e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	695a      	ldr	r2, [r3, #20]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	699b      	ldr	r3, [r3, #24]
 800337a:	431a      	orrs	r2, r3
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	430a      	orrs	r2, r1
 8003382:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f042 0201 	orr.w	r2, r2, #1
 8003392:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2200      	movs	r2, #0
 8003398:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2220      	movs	r2, #32
 800339e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2200      	movs	r2, #0
 80033a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2200      	movs	r2, #0
 80033ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80033b0:	2300      	movs	r3, #0
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3710      	adds	r7, #16
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}
 80033ba:	bf00      	nop
 80033bc:	000186a0 	.word	0x000186a0
 80033c0:	001e847f 	.word	0x001e847f
 80033c4:	003d08ff 	.word	0x003d08ff
 80033c8:	431bde83 	.word	0x431bde83
 80033cc:	10624dd3 	.word	0x10624dd3

080033d0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b083      	sub	sp, #12
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
 80033d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033e0:	b2db      	uxtb	r3, r3
 80033e2:	2b20      	cmp	r3, #32
 80033e4:	d129      	bne.n	800343a <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2224      	movs	r2, #36	; 0x24
 80033ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f022 0201 	bic.w	r2, r2, #1
 80033fc:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f022 0210 	bic.w	r2, r2, #16
 800340c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	683a      	ldr	r2, [r7, #0]
 800341a:	430a      	orrs	r2, r1
 800341c:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	681a      	ldr	r2, [r3, #0]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f042 0201 	orr.w	r2, r2, #1
 800342c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2220      	movs	r2, #32
 8003432:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003436:	2300      	movs	r3, #0
 8003438:	e000      	b.n	800343c <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800343a:	2302      	movs	r3, #2
  }
}
 800343c:	4618      	mov	r0, r3
 800343e:	370c      	adds	r7, #12
 8003440:	46bd      	mov	sp, r7
 8003442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003446:	4770      	bx	lr

08003448 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003448:	b480      	push	{r7}
 800344a:	b085      	sub	sp, #20
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
 8003450:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003452:	2300      	movs	r3, #0
 8003454:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800345c:	b2db      	uxtb	r3, r3
 800345e:	2b20      	cmp	r3, #32
 8003460:	d12a      	bne.n	80034b8 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2224      	movs	r2, #36	; 0x24
 8003466:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f022 0201 	bic.w	r2, r2, #1
 8003478:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003480:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003482:	89fb      	ldrh	r3, [r7, #14]
 8003484:	f023 030f 	bic.w	r3, r3, #15
 8003488:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	b29a      	uxth	r2, r3
 800348e:	89fb      	ldrh	r3, [r7, #14]
 8003490:	4313      	orrs	r3, r2
 8003492:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	89fa      	ldrh	r2, [r7, #14]
 800349a:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f042 0201 	orr.w	r2, r2, #1
 80034aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2220      	movs	r2, #32
 80034b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80034b4:	2300      	movs	r3, #0
 80034b6:	e000      	b.n	80034ba <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80034b8:	2302      	movs	r3, #2
  }
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3714      	adds	r7, #20
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr
	...

080034c8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b082      	sub	sp, #8
 80034cc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80034ce:	2300      	movs	r3, #0
 80034d0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80034d2:	2300      	movs	r3, #0
 80034d4:	603b      	str	r3, [r7, #0]
 80034d6:	4b20      	ldr	r3, [pc, #128]	; (8003558 <HAL_PWREx_EnableOverDrive+0x90>)
 80034d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034da:	4a1f      	ldr	r2, [pc, #124]	; (8003558 <HAL_PWREx_EnableOverDrive+0x90>)
 80034dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034e0:	6413      	str	r3, [r2, #64]	; 0x40
 80034e2:	4b1d      	ldr	r3, [pc, #116]	; (8003558 <HAL_PWREx_EnableOverDrive+0x90>)
 80034e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034ea:	603b      	str	r3, [r7, #0]
 80034ec:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80034ee:	4b1b      	ldr	r3, [pc, #108]	; (800355c <HAL_PWREx_EnableOverDrive+0x94>)
 80034f0:	2201      	movs	r2, #1
 80034f2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80034f4:	f7fe fc86 	bl	8001e04 <HAL_GetTick>
 80034f8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80034fa:	e009      	b.n	8003510 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80034fc:	f7fe fc82 	bl	8001e04 <HAL_GetTick>
 8003500:	4602      	mov	r2, r0
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800350a:	d901      	bls.n	8003510 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800350c:	2303      	movs	r3, #3
 800350e:	e01f      	b.n	8003550 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003510:	4b13      	ldr	r3, [pc, #76]	; (8003560 <HAL_PWREx_EnableOverDrive+0x98>)
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003518:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800351c:	d1ee      	bne.n	80034fc <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800351e:	4b11      	ldr	r3, [pc, #68]	; (8003564 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003520:	2201      	movs	r2, #1
 8003522:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003524:	f7fe fc6e 	bl	8001e04 <HAL_GetTick>
 8003528:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800352a:	e009      	b.n	8003540 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800352c:	f7fe fc6a 	bl	8001e04 <HAL_GetTick>
 8003530:	4602      	mov	r2, r0
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	1ad3      	subs	r3, r2, r3
 8003536:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800353a:	d901      	bls.n	8003540 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800353c:	2303      	movs	r3, #3
 800353e:	e007      	b.n	8003550 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003540:	4b07      	ldr	r3, [pc, #28]	; (8003560 <HAL_PWREx_EnableOverDrive+0x98>)
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003548:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800354c:	d1ee      	bne.n	800352c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800354e:	2300      	movs	r3, #0
}
 8003550:	4618      	mov	r0, r3
 8003552:	3708      	adds	r7, #8
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}
 8003558:	40023800 	.word	0x40023800
 800355c:	420e0040 	.word	0x420e0040
 8003560:	40007000 	.word	0x40007000
 8003564:	420e0044 	.word	0x420e0044

08003568 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b086      	sub	sp, #24
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d101      	bne.n	800357a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e264      	b.n	8003a44 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 0301 	and.w	r3, r3, #1
 8003582:	2b00      	cmp	r3, #0
 8003584:	d075      	beq.n	8003672 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003586:	4ba3      	ldr	r3, [pc, #652]	; (8003814 <HAL_RCC_OscConfig+0x2ac>)
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	f003 030c 	and.w	r3, r3, #12
 800358e:	2b04      	cmp	r3, #4
 8003590:	d00c      	beq.n	80035ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003592:	4ba0      	ldr	r3, [pc, #640]	; (8003814 <HAL_RCC_OscConfig+0x2ac>)
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800359a:	2b08      	cmp	r3, #8
 800359c:	d112      	bne.n	80035c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800359e:	4b9d      	ldr	r3, [pc, #628]	; (8003814 <HAL_RCC_OscConfig+0x2ac>)
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035aa:	d10b      	bne.n	80035c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035ac:	4b99      	ldr	r3, [pc, #612]	; (8003814 <HAL_RCC_OscConfig+0x2ac>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d05b      	beq.n	8003670 <HAL_RCC_OscConfig+0x108>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d157      	bne.n	8003670 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e23f      	b.n	8003a44 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035cc:	d106      	bne.n	80035dc <HAL_RCC_OscConfig+0x74>
 80035ce:	4b91      	ldr	r3, [pc, #580]	; (8003814 <HAL_RCC_OscConfig+0x2ac>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a90      	ldr	r2, [pc, #576]	; (8003814 <HAL_RCC_OscConfig+0x2ac>)
 80035d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035d8:	6013      	str	r3, [r2, #0]
 80035da:	e01d      	b.n	8003618 <HAL_RCC_OscConfig+0xb0>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035e4:	d10c      	bne.n	8003600 <HAL_RCC_OscConfig+0x98>
 80035e6:	4b8b      	ldr	r3, [pc, #556]	; (8003814 <HAL_RCC_OscConfig+0x2ac>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a8a      	ldr	r2, [pc, #552]	; (8003814 <HAL_RCC_OscConfig+0x2ac>)
 80035ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035f0:	6013      	str	r3, [r2, #0]
 80035f2:	4b88      	ldr	r3, [pc, #544]	; (8003814 <HAL_RCC_OscConfig+0x2ac>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a87      	ldr	r2, [pc, #540]	; (8003814 <HAL_RCC_OscConfig+0x2ac>)
 80035f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035fc:	6013      	str	r3, [r2, #0]
 80035fe:	e00b      	b.n	8003618 <HAL_RCC_OscConfig+0xb0>
 8003600:	4b84      	ldr	r3, [pc, #528]	; (8003814 <HAL_RCC_OscConfig+0x2ac>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a83      	ldr	r2, [pc, #524]	; (8003814 <HAL_RCC_OscConfig+0x2ac>)
 8003606:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800360a:	6013      	str	r3, [r2, #0]
 800360c:	4b81      	ldr	r3, [pc, #516]	; (8003814 <HAL_RCC_OscConfig+0x2ac>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a80      	ldr	r2, [pc, #512]	; (8003814 <HAL_RCC_OscConfig+0x2ac>)
 8003612:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003616:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d013      	beq.n	8003648 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003620:	f7fe fbf0 	bl	8001e04 <HAL_GetTick>
 8003624:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003626:	e008      	b.n	800363a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003628:	f7fe fbec 	bl	8001e04 <HAL_GetTick>
 800362c:	4602      	mov	r2, r0
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	1ad3      	subs	r3, r2, r3
 8003632:	2b64      	cmp	r3, #100	; 0x64
 8003634:	d901      	bls.n	800363a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003636:	2303      	movs	r3, #3
 8003638:	e204      	b.n	8003a44 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800363a:	4b76      	ldr	r3, [pc, #472]	; (8003814 <HAL_RCC_OscConfig+0x2ac>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d0f0      	beq.n	8003628 <HAL_RCC_OscConfig+0xc0>
 8003646:	e014      	b.n	8003672 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003648:	f7fe fbdc 	bl	8001e04 <HAL_GetTick>
 800364c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800364e:	e008      	b.n	8003662 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003650:	f7fe fbd8 	bl	8001e04 <HAL_GetTick>
 8003654:	4602      	mov	r2, r0
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	1ad3      	subs	r3, r2, r3
 800365a:	2b64      	cmp	r3, #100	; 0x64
 800365c:	d901      	bls.n	8003662 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800365e:	2303      	movs	r3, #3
 8003660:	e1f0      	b.n	8003a44 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003662:	4b6c      	ldr	r3, [pc, #432]	; (8003814 <HAL_RCC_OscConfig+0x2ac>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800366a:	2b00      	cmp	r3, #0
 800366c:	d1f0      	bne.n	8003650 <HAL_RCC_OscConfig+0xe8>
 800366e:	e000      	b.n	8003672 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003670:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 0302 	and.w	r3, r3, #2
 800367a:	2b00      	cmp	r3, #0
 800367c:	d063      	beq.n	8003746 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800367e:	4b65      	ldr	r3, [pc, #404]	; (8003814 <HAL_RCC_OscConfig+0x2ac>)
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	f003 030c 	and.w	r3, r3, #12
 8003686:	2b00      	cmp	r3, #0
 8003688:	d00b      	beq.n	80036a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800368a:	4b62      	ldr	r3, [pc, #392]	; (8003814 <HAL_RCC_OscConfig+0x2ac>)
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003692:	2b08      	cmp	r3, #8
 8003694:	d11c      	bne.n	80036d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003696:	4b5f      	ldr	r3, [pc, #380]	; (8003814 <HAL_RCC_OscConfig+0x2ac>)
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d116      	bne.n	80036d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036a2:	4b5c      	ldr	r3, [pc, #368]	; (8003814 <HAL_RCC_OscConfig+0x2ac>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f003 0302 	and.w	r3, r3, #2
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d005      	beq.n	80036ba <HAL_RCC_OscConfig+0x152>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	68db      	ldr	r3, [r3, #12]
 80036b2:	2b01      	cmp	r3, #1
 80036b4:	d001      	beq.n	80036ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e1c4      	b.n	8003a44 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036ba:	4b56      	ldr	r3, [pc, #344]	; (8003814 <HAL_RCC_OscConfig+0x2ac>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	691b      	ldr	r3, [r3, #16]
 80036c6:	00db      	lsls	r3, r3, #3
 80036c8:	4952      	ldr	r1, [pc, #328]	; (8003814 <HAL_RCC_OscConfig+0x2ac>)
 80036ca:	4313      	orrs	r3, r2
 80036cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036ce:	e03a      	b.n	8003746 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	68db      	ldr	r3, [r3, #12]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d020      	beq.n	800371a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036d8:	4b4f      	ldr	r3, [pc, #316]	; (8003818 <HAL_RCC_OscConfig+0x2b0>)
 80036da:	2201      	movs	r2, #1
 80036dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036de:	f7fe fb91 	bl	8001e04 <HAL_GetTick>
 80036e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036e4:	e008      	b.n	80036f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036e6:	f7fe fb8d 	bl	8001e04 <HAL_GetTick>
 80036ea:	4602      	mov	r2, r0
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	1ad3      	subs	r3, r2, r3
 80036f0:	2b02      	cmp	r3, #2
 80036f2:	d901      	bls.n	80036f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80036f4:	2303      	movs	r3, #3
 80036f6:	e1a5      	b.n	8003a44 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036f8:	4b46      	ldr	r3, [pc, #280]	; (8003814 <HAL_RCC_OscConfig+0x2ac>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 0302 	and.w	r3, r3, #2
 8003700:	2b00      	cmp	r3, #0
 8003702:	d0f0      	beq.n	80036e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003704:	4b43      	ldr	r3, [pc, #268]	; (8003814 <HAL_RCC_OscConfig+0x2ac>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	691b      	ldr	r3, [r3, #16]
 8003710:	00db      	lsls	r3, r3, #3
 8003712:	4940      	ldr	r1, [pc, #256]	; (8003814 <HAL_RCC_OscConfig+0x2ac>)
 8003714:	4313      	orrs	r3, r2
 8003716:	600b      	str	r3, [r1, #0]
 8003718:	e015      	b.n	8003746 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800371a:	4b3f      	ldr	r3, [pc, #252]	; (8003818 <HAL_RCC_OscConfig+0x2b0>)
 800371c:	2200      	movs	r2, #0
 800371e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003720:	f7fe fb70 	bl	8001e04 <HAL_GetTick>
 8003724:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003726:	e008      	b.n	800373a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003728:	f7fe fb6c 	bl	8001e04 <HAL_GetTick>
 800372c:	4602      	mov	r2, r0
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	1ad3      	subs	r3, r2, r3
 8003732:	2b02      	cmp	r3, #2
 8003734:	d901      	bls.n	800373a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003736:	2303      	movs	r3, #3
 8003738:	e184      	b.n	8003a44 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800373a:	4b36      	ldr	r3, [pc, #216]	; (8003814 <HAL_RCC_OscConfig+0x2ac>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 0302 	and.w	r3, r3, #2
 8003742:	2b00      	cmp	r3, #0
 8003744:	d1f0      	bne.n	8003728 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 0308 	and.w	r3, r3, #8
 800374e:	2b00      	cmp	r3, #0
 8003750:	d030      	beq.n	80037b4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	695b      	ldr	r3, [r3, #20]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d016      	beq.n	8003788 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800375a:	4b30      	ldr	r3, [pc, #192]	; (800381c <HAL_RCC_OscConfig+0x2b4>)
 800375c:	2201      	movs	r2, #1
 800375e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003760:	f7fe fb50 	bl	8001e04 <HAL_GetTick>
 8003764:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003766:	e008      	b.n	800377a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003768:	f7fe fb4c 	bl	8001e04 <HAL_GetTick>
 800376c:	4602      	mov	r2, r0
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	1ad3      	subs	r3, r2, r3
 8003772:	2b02      	cmp	r3, #2
 8003774:	d901      	bls.n	800377a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003776:	2303      	movs	r3, #3
 8003778:	e164      	b.n	8003a44 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800377a:	4b26      	ldr	r3, [pc, #152]	; (8003814 <HAL_RCC_OscConfig+0x2ac>)
 800377c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800377e:	f003 0302 	and.w	r3, r3, #2
 8003782:	2b00      	cmp	r3, #0
 8003784:	d0f0      	beq.n	8003768 <HAL_RCC_OscConfig+0x200>
 8003786:	e015      	b.n	80037b4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003788:	4b24      	ldr	r3, [pc, #144]	; (800381c <HAL_RCC_OscConfig+0x2b4>)
 800378a:	2200      	movs	r2, #0
 800378c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800378e:	f7fe fb39 	bl	8001e04 <HAL_GetTick>
 8003792:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003794:	e008      	b.n	80037a8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003796:	f7fe fb35 	bl	8001e04 <HAL_GetTick>
 800379a:	4602      	mov	r2, r0
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	1ad3      	subs	r3, r2, r3
 80037a0:	2b02      	cmp	r3, #2
 80037a2:	d901      	bls.n	80037a8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80037a4:	2303      	movs	r3, #3
 80037a6:	e14d      	b.n	8003a44 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037a8:	4b1a      	ldr	r3, [pc, #104]	; (8003814 <HAL_RCC_OscConfig+0x2ac>)
 80037aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037ac:	f003 0302 	and.w	r3, r3, #2
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d1f0      	bne.n	8003796 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 0304 	and.w	r3, r3, #4
 80037bc:	2b00      	cmp	r3, #0
 80037be:	f000 80a0 	beq.w	8003902 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037c2:	2300      	movs	r3, #0
 80037c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037c6:	4b13      	ldr	r3, [pc, #76]	; (8003814 <HAL_RCC_OscConfig+0x2ac>)
 80037c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d10f      	bne.n	80037f2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037d2:	2300      	movs	r3, #0
 80037d4:	60bb      	str	r3, [r7, #8]
 80037d6:	4b0f      	ldr	r3, [pc, #60]	; (8003814 <HAL_RCC_OscConfig+0x2ac>)
 80037d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037da:	4a0e      	ldr	r2, [pc, #56]	; (8003814 <HAL_RCC_OscConfig+0x2ac>)
 80037dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037e0:	6413      	str	r3, [r2, #64]	; 0x40
 80037e2:	4b0c      	ldr	r3, [pc, #48]	; (8003814 <HAL_RCC_OscConfig+0x2ac>)
 80037e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037ea:	60bb      	str	r3, [r7, #8]
 80037ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037ee:	2301      	movs	r3, #1
 80037f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037f2:	4b0b      	ldr	r3, [pc, #44]	; (8003820 <HAL_RCC_OscConfig+0x2b8>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d121      	bne.n	8003842 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037fe:	4b08      	ldr	r3, [pc, #32]	; (8003820 <HAL_RCC_OscConfig+0x2b8>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a07      	ldr	r2, [pc, #28]	; (8003820 <HAL_RCC_OscConfig+0x2b8>)
 8003804:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003808:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800380a:	f7fe fafb 	bl	8001e04 <HAL_GetTick>
 800380e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003810:	e011      	b.n	8003836 <HAL_RCC_OscConfig+0x2ce>
 8003812:	bf00      	nop
 8003814:	40023800 	.word	0x40023800
 8003818:	42470000 	.word	0x42470000
 800381c:	42470e80 	.word	0x42470e80
 8003820:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003824:	f7fe faee 	bl	8001e04 <HAL_GetTick>
 8003828:	4602      	mov	r2, r0
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	1ad3      	subs	r3, r2, r3
 800382e:	2b02      	cmp	r3, #2
 8003830:	d901      	bls.n	8003836 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003832:	2303      	movs	r3, #3
 8003834:	e106      	b.n	8003a44 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003836:	4b85      	ldr	r3, [pc, #532]	; (8003a4c <HAL_RCC_OscConfig+0x4e4>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800383e:	2b00      	cmp	r3, #0
 8003840:	d0f0      	beq.n	8003824 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	2b01      	cmp	r3, #1
 8003848:	d106      	bne.n	8003858 <HAL_RCC_OscConfig+0x2f0>
 800384a:	4b81      	ldr	r3, [pc, #516]	; (8003a50 <HAL_RCC_OscConfig+0x4e8>)
 800384c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800384e:	4a80      	ldr	r2, [pc, #512]	; (8003a50 <HAL_RCC_OscConfig+0x4e8>)
 8003850:	f043 0301 	orr.w	r3, r3, #1
 8003854:	6713      	str	r3, [r2, #112]	; 0x70
 8003856:	e01c      	b.n	8003892 <HAL_RCC_OscConfig+0x32a>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	2b05      	cmp	r3, #5
 800385e:	d10c      	bne.n	800387a <HAL_RCC_OscConfig+0x312>
 8003860:	4b7b      	ldr	r3, [pc, #492]	; (8003a50 <HAL_RCC_OscConfig+0x4e8>)
 8003862:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003864:	4a7a      	ldr	r2, [pc, #488]	; (8003a50 <HAL_RCC_OscConfig+0x4e8>)
 8003866:	f043 0304 	orr.w	r3, r3, #4
 800386a:	6713      	str	r3, [r2, #112]	; 0x70
 800386c:	4b78      	ldr	r3, [pc, #480]	; (8003a50 <HAL_RCC_OscConfig+0x4e8>)
 800386e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003870:	4a77      	ldr	r2, [pc, #476]	; (8003a50 <HAL_RCC_OscConfig+0x4e8>)
 8003872:	f043 0301 	orr.w	r3, r3, #1
 8003876:	6713      	str	r3, [r2, #112]	; 0x70
 8003878:	e00b      	b.n	8003892 <HAL_RCC_OscConfig+0x32a>
 800387a:	4b75      	ldr	r3, [pc, #468]	; (8003a50 <HAL_RCC_OscConfig+0x4e8>)
 800387c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800387e:	4a74      	ldr	r2, [pc, #464]	; (8003a50 <HAL_RCC_OscConfig+0x4e8>)
 8003880:	f023 0301 	bic.w	r3, r3, #1
 8003884:	6713      	str	r3, [r2, #112]	; 0x70
 8003886:	4b72      	ldr	r3, [pc, #456]	; (8003a50 <HAL_RCC_OscConfig+0x4e8>)
 8003888:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800388a:	4a71      	ldr	r2, [pc, #452]	; (8003a50 <HAL_RCC_OscConfig+0x4e8>)
 800388c:	f023 0304 	bic.w	r3, r3, #4
 8003890:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d015      	beq.n	80038c6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800389a:	f7fe fab3 	bl	8001e04 <HAL_GetTick>
 800389e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038a0:	e00a      	b.n	80038b8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038a2:	f7fe faaf 	bl	8001e04 <HAL_GetTick>
 80038a6:	4602      	mov	r2, r0
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	1ad3      	subs	r3, r2, r3
 80038ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d901      	bls.n	80038b8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80038b4:	2303      	movs	r3, #3
 80038b6:	e0c5      	b.n	8003a44 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038b8:	4b65      	ldr	r3, [pc, #404]	; (8003a50 <HAL_RCC_OscConfig+0x4e8>)
 80038ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038bc:	f003 0302 	and.w	r3, r3, #2
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d0ee      	beq.n	80038a2 <HAL_RCC_OscConfig+0x33a>
 80038c4:	e014      	b.n	80038f0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038c6:	f7fe fa9d 	bl	8001e04 <HAL_GetTick>
 80038ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038cc:	e00a      	b.n	80038e4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038ce:	f7fe fa99 	bl	8001e04 <HAL_GetTick>
 80038d2:	4602      	mov	r2, r0
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	1ad3      	subs	r3, r2, r3
 80038d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80038dc:	4293      	cmp	r3, r2
 80038de:	d901      	bls.n	80038e4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80038e0:	2303      	movs	r3, #3
 80038e2:	e0af      	b.n	8003a44 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038e4:	4b5a      	ldr	r3, [pc, #360]	; (8003a50 <HAL_RCC_OscConfig+0x4e8>)
 80038e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038e8:	f003 0302 	and.w	r3, r3, #2
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d1ee      	bne.n	80038ce <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80038f0:	7dfb      	ldrb	r3, [r7, #23]
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d105      	bne.n	8003902 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038f6:	4b56      	ldr	r3, [pc, #344]	; (8003a50 <HAL_RCC_OscConfig+0x4e8>)
 80038f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fa:	4a55      	ldr	r2, [pc, #340]	; (8003a50 <HAL_RCC_OscConfig+0x4e8>)
 80038fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003900:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	699b      	ldr	r3, [r3, #24]
 8003906:	2b00      	cmp	r3, #0
 8003908:	f000 809b 	beq.w	8003a42 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800390c:	4b50      	ldr	r3, [pc, #320]	; (8003a50 <HAL_RCC_OscConfig+0x4e8>)
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	f003 030c 	and.w	r3, r3, #12
 8003914:	2b08      	cmp	r3, #8
 8003916:	d05c      	beq.n	80039d2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	699b      	ldr	r3, [r3, #24]
 800391c:	2b02      	cmp	r3, #2
 800391e:	d141      	bne.n	80039a4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003920:	4b4c      	ldr	r3, [pc, #304]	; (8003a54 <HAL_RCC_OscConfig+0x4ec>)
 8003922:	2200      	movs	r2, #0
 8003924:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003926:	f7fe fa6d 	bl	8001e04 <HAL_GetTick>
 800392a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800392c:	e008      	b.n	8003940 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800392e:	f7fe fa69 	bl	8001e04 <HAL_GetTick>
 8003932:	4602      	mov	r2, r0
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	1ad3      	subs	r3, r2, r3
 8003938:	2b02      	cmp	r3, #2
 800393a:	d901      	bls.n	8003940 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800393c:	2303      	movs	r3, #3
 800393e:	e081      	b.n	8003a44 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003940:	4b43      	ldr	r3, [pc, #268]	; (8003a50 <HAL_RCC_OscConfig+0x4e8>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003948:	2b00      	cmp	r3, #0
 800394a:	d1f0      	bne.n	800392e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	69da      	ldr	r2, [r3, #28]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6a1b      	ldr	r3, [r3, #32]
 8003954:	431a      	orrs	r2, r3
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800395a:	019b      	lsls	r3, r3, #6
 800395c:	431a      	orrs	r2, r3
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003962:	085b      	lsrs	r3, r3, #1
 8003964:	3b01      	subs	r3, #1
 8003966:	041b      	lsls	r3, r3, #16
 8003968:	431a      	orrs	r2, r3
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800396e:	061b      	lsls	r3, r3, #24
 8003970:	4937      	ldr	r1, [pc, #220]	; (8003a50 <HAL_RCC_OscConfig+0x4e8>)
 8003972:	4313      	orrs	r3, r2
 8003974:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003976:	4b37      	ldr	r3, [pc, #220]	; (8003a54 <HAL_RCC_OscConfig+0x4ec>)
 8003978:	2201      	movs	r2, #1
 800397a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800397c:	f7fe fa42 	bl	8001e04 <HAL_GetTick>
 8003980:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003982:	e008      	b.n	8003996 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003984:	f7fe fa3e 	bl	8001e04 <HAL_GetTick>
 8003988:	4602      	mov	r2, r0
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	1ad3      	subs	r3, r2, r3
 800398e:	2b02      	cmp	r3, #2
 8003990:	d901      	bls.n	8003996 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003992:	2303      	movs	r3, #3
 8003994:	e056      	b.n	8003a44 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003996:	4b2e      	ldr	r3, [pc, #184]	; (8003a50 <HAL_RCC_OscConfig+0x4e8>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d0f0      	beq.n	8003984 <HAL_RCC_OscConfig+0x41c>
 80039a2:	e04e      	b.n	8003a42 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039a4:	4b2b      	ldr	r3, [pc, #172]	; (8003a54 <HAL_RCC_OscConfig+0x4ec>)
 80039a6:	2200      	movs	r2, #0
 80039a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039aa:	f7fe fa2b 	bl	8001e04 <HAL_GetTick>
 80039ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039b0:	e008      	b.n	80039c4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039b2:	f7fe fa27 	bl	8001e04 <HAL_GetTick>
 80039b6:	4602      	mov	r2, r0
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	1ad3      	subs	r3, r2, r3
 80039bc:	2b02      	cmp	r3, #2
 80039be:	d901      	bls.n	80039c4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80039c0:	2303      	movs	r3, #3
 80039c2:	e03f      	b.n	8003a44 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039c4:	4b22      	ldr	r3, [pc, #136]	; (8003a50 <HAL_RCC_OscConfig+0x4e8>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d1f0      	bne.n	80039b2 <HAL_RCC_OscConfig+0x44a>
 80039d0:	e037      	b.n	8003a42 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	699b      	ldr	r3, [r3, #24]
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d101      	bne.n	80039de <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e032      	b.n	8003a44 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80039de:	4b1c      	ldr	r3, [pc, #112]	; (8003a50 <HAL_RCC_OscConfig+0x4e8>)
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	699b      	ldr	r3, [r3, #24]
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d028      	beq.n	8003a3e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039f6:	429a      	cmp	r2, r3
 80039f8:	d121      	bne.n	8003a3e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d11a      	bne.n	8003a3e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a08:	68fa      	ldr	r2, [r7, #12]
 8003a0a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003a0e:	4013      	ands	r3, r2
 8003a10:	687a      	ldr	r2, [r7, #4]
 8003a12:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003a14:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d111      	bne.n	8003a3e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a24:	085b      	lsrs	r3, r3, #1
 8003a26:	3b01      	subs	r3, #1
 8003a28:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	d107      	bne.n	8003a3e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a38:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d001      	beq.n	8003a42 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e000      	b.n	8003a44 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003a42:	2300      	movs	r3, #0
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	3718      	adds	r7, #24
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}
 8003a4c:	40007000 	.word	0x40007000
 8003a50:	40023800 	.word	0x40023800
 8003a54:	42470060 	.word	0x42470060

08003a58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b084      	sub	sp, #16
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
 8003a60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d101      	bne.n	8003a6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e0cc      	b.n	8003c06 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a6c:	4b68      	ldr	r3, [pc, #416]	; (8003c10 <HAL_RCC_ClockConfig+0x1b8>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f003 030f 	and.w	r3, r3, #15
 8003a74:	683a      	ldr	r2, [r7, #0]
 8003a76:	429a      	cmp	r2, r3
 8003a78:	d90c      	bls.n	8003a94 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a7a:	4b65      	ldr	r3, [pc, #404]	; (8003c10 <HAL_RCC_ClockConfig+0x1b8>)
 8003a7c:	683a      	ldr	r2, [r7, #0]
 8003a7e:	b2d2      	uxtb	r2, r2
 8003a80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a82:	4b63      	ldr	r3, [pc, #396]	; (8003c10 <HAL_RCC_ClockConfig+0x1b8>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 030f 	and.w	r3, r3, #15
 8003a8a:	683a      	ldr	r2, [r7, #0]
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d001      	beq.n	8003a94 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	e0b8      	b.n	8003c06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 0302 	and.w	r3, r3, #2
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d020      	beq.n	8003ae2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 0304 	and.w	r3, r3, #4
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d005      	beq.n	8003ab8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003aac:	4b59      	ldr	r3, [pc, #356]	; (8003c14 <HAL_RCC_ClockConfig+0x1bc>)
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	4a58      	ldr	r2, [pc, #352]	; (8003c14 <HAL_RCC_ClockConfig+0x1bc>)
 8003ab2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003ab6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 0308 	and.w	r3, r3, #8
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d005      	beq.n	8003ad0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ac4:	4b53      	ldr	r3, [pc, #332]	; (8003c14 <HAL_RCC_ClockConfig+0x1bc>)
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	4a52      	ldr	r2, [pc, #328]	; (8003c14 <HAL_RCC_ClockConfig+0x1bc>)
 8003aca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003ace:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ad0:	4b50      	ldr	r3, [pc, #320]	; (8003c14 <HAL_RCC_ClockConfig+0x1bc>)
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	494d      	ldr	r1, [pc, #308]	; (8003c14 <HAL_RCC_ClockConfig+0x1bc>)
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 0301 	and.w	r3, r3, #1
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d044      	beq.n	8003b78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	d107      	bne.n	8003b06 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003af6:	4b47      	ldr	r3, [pc, #284]	; (8003c14 <HAL_RCC_ClockConfig+0x1bc>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d119      	bne.n	8003b36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e07f      	b.n	8003c06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	2b02      	cmp	r3, #2
 8003b0c:	d003      	beq.n	8003b16 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b12:	2b03      	cmp	r3, #3
 8003b14:	d107      	bne.n	8003b26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b16:	4b3f      	ldr	r3, [pc, #252]	; (8003c14 <HAL_RCC_ClockConfig+0x1bc>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d109      	bne.n	8003b36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	e06f      	b.n	8003c06 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b26:	4b3b      	ldr	r3, [pc, #236]	; (8003c14 <HAL_RCC_ClockConfig+0x1bc>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 0302 	and.w	r3, r3, #2
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d101      	bne.n	8003b36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e067      	b.n	8003c06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b36:	4b37      	ldr	r3, [pc, #220]	; (8003c14 <HAL_RCC_ClockConfig+0x1bc>)
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	f023 0203 	bic.w	r2, r3, #3
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	4934      	ldr	r1, [pc, #208]	; (8003c14 <HAL_RCC_ClockConfig+0x1bc>)
 8003b44:	4313      	orrs	r3, r2
 8003b46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b48:	f7fe f95c 	bl	8001e04 <HAL_GetTick>
 8003b4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b4e:	e00a      	b.n	8003b66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b50:	f7fe f958 	bl	8001e04 <HAL_GetTick>
 8003b54:	4602      	mov	r2, r0
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	1ad3      	subs	r3, r2, r3
 8003b5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d901      	bls.n	8003b66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b62:	2303      	movs	r3, #3
 8003b64:	e04f      	b.n	8003c06 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b66:	4b2b      	ldr	r3, [pc, #172]	; (8003c14 <HAL_RCC_ClockConfig+0x1bc>)
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	f003 020c 	and.w	r2, r3, #12
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	009b      	lsls	r3, r3, #2
 8003b74:	429a      	cmp	r2, r3
 8003b76:	d1eb      	bne.n	8003b50 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b78:	4b25      	ldr	r3, [pc, #148]	; (8003c10 <HAL_RCC_ClockConfig+0x1b8>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f003 030f 	and.w	r3, r3, #15
 8003b80:	683a      	ldr	r2, [r7, #0]
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d20c      	bcs.n	8003ba0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b86:	4b22      	ldr	r3, [pc, #136]	; (8003c10 <HAL_RCC_ClockConfig+0x1b8>)
 8003b88:	683a      	ldr	r2, [r7, #0]
 8003b8a:	b2d2      	uxtb	r2, r2
 8003b8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b8e:	4b20      	ldr	r3, [pc, #128]	; (8003c10 <HAL_RCC_ClockConfig+0x1b8>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 030f 	and.w	r3, r3, #15
 8003b96:	683a      	ldr	r2, [r7, #0]
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	d001      	beq.n	8003ba0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	e032      	b.n	8003c06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f003 0304 	and.w	r3, r3, #4
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d008      	beq.n	8003bbe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bac:	4b19      	ldr	r3, [pc, #100]	; (8003c14 <HAL_RCC_ClockConfig+0x1bc>)
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	68db      	ldr	r3, [r3, #12]
 8003bb8:	4916      	ldr	r1, [pc, #88]	; (8003c14 <HAL_RCC_ClockConfig+0x1bc>)
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 0308 	and.w	r3, r3, #8
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d009      	beq.n	8003bde <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003bca:	4b12      	ldr	r3, [pc, #72]	; (8003c14 <HAL_RCC_ClockConfig+0x1bc>)
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	691b      	ldr	r3, [r3, #16]
 8003bd6:	00db      	lsls	r3, r3, #3
 8003bd8:	490e      	ldr	r1, [pc, #56]	; (8003c14 <HAL_RCC_ClockConfig+0x1bc>)
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003bde:	f000 f821 	bl	8003c24 <HAL_RCC_GetSysClockFreq>
 8003be2:	4602      	mov	r2, r0
 8003be4:	4b0b      	ldr	r3, [pc, #44]	; (8003c14 <HAL_RCC_ClockConfig+0x1bc>)
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	091b      	lsrs	r3, r3, #4
 8003bea:	f003 030f 	and.w	r3, r3, #15
 8003bee:	490a      	ldr	r1, [pc, #40]	; (8003c18 <HAL_RCC_ClockConfig+0x1c0>)
 8003bf0:	5ccb      	ldrb	r3, [r1, r3]
 8003bf2:	fa22 f303 	lsr.w	r3, r2, r3
 8003bf6:	4a09      	ldr	r2, [pc, #36]	; (8003c1c <HAL_RCC_ClockConfig+0x1c4>)
 8003bf8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003bfa:	4b09      	ldr	r3, [pc, #36]	; (8003c20 <HAL_RCC_ClockConfig+0x1c8>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f7fe f8bc 	bl	8001d7c <HAL_InitTick>

  return HAL_OK;
 8003c04:	2300      	movs	r3, #0
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3710      	adds	r7, #16
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}
 8003c0e:	bf00      	nop
 8003c10:	40023c00 	.word	0x40023c00
 8003c14:	40023800 	.word	0x40023800
 8003c18:	08005f60 	.word	0x08005f60
 8003c1c:	20000000 	.word	0x20000000
 8003c20:	20000004 	.word	0x20000004

08003c24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c24:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003c28:	b084      	sub	sp, #16
 8003c2a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	607b      	str	r3, [r7, #4]
 8003c30:	2300      	movs	r3, #0
 8003c32:	60fb      	str	r3, [r7, #12]
 8003c34:	2300      	movs	r3, #0
 8003c36:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c3c:	4b67      	ldr	r3, [pc, #412]	; (8003ddc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	f003 030c 	and.w	r3, r3, #12
 8003c44:	2b08      	cmp	r3, #8
 8003c46:	d00d      	beq.n	8003c64 <HAL_RCC_GetSysClockFreq+0x40>
 8003c48:	2b08      	cmp	r3, #8
 8003c4a:	f200 80bd 	bhi.w	8003dc8 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d002      	beq.n	8003c58 <HAL_RCC_GetSysClockFreq+0x34>
 8003c52:	2b04      	cmp	r3, #4
 8003c54:	d003      	beq.n	8003c5e <HAL_RCC_GetSysClockFreq+0x3a>
 8003c56:	e0b7      	b.n	8003dc8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c58:	4b61      	ldr	r3, [pc, #388]	; (8003de0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003c5a:	60bb      	str	r3, [r7, #8]
       break;
 8003c5c:	e0b7      	b.n	8003dce <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c5e:	4b61      	ldr	r3, [pc, #388]	; (8003de4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003c60:	60bb      	str	r3, [r7, #8]
      break;
 8003c62:	e0b4      	b.n	8003dce <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c64:	4b5d      	ldr	r3, [pc, #372]	; (8003ddc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c6c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c6e:	4b5b      	ldr	r3, [pc, #364]	; (8003ddc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d04d      	beq.n	8003d16 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c7a:	4b58      	ldr	r3, [pc, #352]	; (8003ddc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	099b      	lsrs	r3, r3, #6
 8003c80:	461a      	mov	r2, r3
 8003c82:	f04f 0300 	mov.w	r3, #0
 8003c86:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003c8a:	f04f 0100 	mov.w	r1, #0
 8003c8e:	ea02 0800 	and.w	r8, r2, r0
 8003c92:	ea03 0901 	and.w	r9, r3, r1
 8003c96:	4640      	mov	r0, r8
 8003c98:	4649      	mov	r1, r9
 8003c9a:	f04f 0200 	mov.w	r2, #0
 8003c9e:	f04f 0300 	mov.w	r3, #0
 8003ca2:	014b      	lsls	r3, r1, #5
 8003ca4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003ca8:	0142      	lsls	r2, r0, #5
 8003caa:	4610      	mov	r0, r2
 8003cac:	4619      	mov	r1, r3
 8003cae:	ebb0 0008 	subs.w	r0, r0, r8
 8003cb2:	eb61 0109 	sbc.w	r1, r1, r9
 8003cb6:	f04f 0200 	mov.w	r2, #0
 8003cba:	f04f 0300 	mov.w	r3, #0
 8003cbe:	018b      	lsls	r3, r1, #6
 8003cc0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003cc4:	0182      	lsls	r2, r0, #6
 8003cc6:	1a12      	subs	r2, r2, r0
 8003cc8:	eb63 0301 	sbc.w	r3, r3, r1
 8003ccc:	f04f 0000 	mov.w	r0, #0
 8003cd0:	f04f 0100 	mov.w	r1, #0
 8003cd4:	00d9      	lsls	r1, r3, #3
 8003cd6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003cda:	00d0      	lsls	r0, r2, #3
 8003cdc:	4602      	mov	r2, r0
 8003cde:	460b      	mov	r3, r1
 8003ce0:	eb12 0208 	adds.w	r2, r2, r8
 8003ce4:	eb43 0309 	adc.w	r3, r3, r9
 8003ce8:	f04f 0000 	mov.w	r0, #0
 8003cec:	f04f 0100 	mov.w	r1, #0
 8003cf0:	0259      	lsls	r1, r3, #9
 8003cf2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003cf6:	0250      	lsls	r0, r2, #9
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	460b      	mov	r3, r1
 8003cfc:	4610      	mov	r0, r2
 8003cfe:	4619      	mov	r1, r3
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	461a      	mov	r2, r3
 8003d04:	f04f 0300 	mov.w	r3, #0
 8003d08:	f7fc fa70 	bl	80001ec <__aeabi_uldivmod>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	460b      	mov	r3, r1
 8003d10:	4613      	mov	r3, r2
 8003d12:	60fb      	str	r3, [r7, #12]
 8003d14:	e04a      	b.n	8003dac <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d16:	4b31      	ldr	r3, [pc, #196]	; (8003ddc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	099b      	lsrs	r3, r3, #6
 8003d1c:	461a      	mov	r2, r3
 8003d1e:	f04f 0300 	mov.w	r3, #0
 8003d22:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003d26:	f04f 0100 	mov.w	r1, #0
 8003d2a:	ea02 0400 	and.w	r4, r2, r0
 8003d2e:	ea03 0501 	and.w	r5, r3, r1
 8003d32:	4620      	mov	r0, r4
 8003d34:	4629      	mov	r1, r5
 8003d36:	f04f 0200 	mov.w	r2, #0
 8003d3a:	f04f 0300 	mov.w	r3, #0
 8003d3e:	014b      	lsls	r3, r1, #5
 8003d40:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003d44:	0142      	lsls	r2, r0, #5
 8003d46:	4610      	mov	r0, r2
 8003d48:	4619      	mov	r1, r3
 8003d4a:	1b00      	subs	r0, r0, r4
 8003d4c:	eb61 0105 	sbc.w	r1, r1, r5
 8003d50:	f04f 0200 	mov.w	r2, #0
 8003d54:	f04f 0300 	mov.w	r3, #0
 8003d58:	018b      	lsls	r3, r1, #6
 8003d5a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003d5e:	0182      	lsls	r2, r0, #6
 8003d60:	1a12      	subs	r2, r2, r0
 8003d62:	eb63 0301 	sbc.w	r3, r3, r1
 8003d66:	f04f 0000 	mov.w	r0, #0
 8003d6a:	f04f 0100 	mov.w	r1, #0
 8003d6e:	00d9      	lsls	r1, r3, #3
 8003d70:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003d74:	00d0      	lsls	r0, r2, #3
 8003d76:	4602      	mov	r2, r0
 8003d78:	460b      	mov	r3, r1
 8003d7a:	1912      	adds	r2, r2, r4
 8003d7c:	eb45 0303 	adc.w	r3, r5, r3
 8003d80:	f04f 0000 	mov.w	r0, #0
 8003d84:	f04f 0100 	mov.w	r1, #0
 8003d88:	0299      	lsls	r1, r3, #10
 8003d8a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003d8e:	0290      	lsls	r0, r2, #10
 8003d90:	4602      	mov	r2, r0
 8003d92:	460b      	mov	r3, r1
 8003d94:	4610      	mov	r0, r2
 8003d96:	4619      	mov	r1, r3
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	461a      	mov	r2, r3
 8003d9c:	f04f 0300 	mov.w	r3, #0
 8003da0:	f7fc fa24 	bl	80001ec <__aeabi_uldivmod>
 8003da4:	4602      	mov	r2, r0
 8003da6:	460b      	mov	r3, r1
 8003da8:	4613      	mov	r3, r2
 8003daa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003dac:	4b0b      	ldr	r3, [pc, #44]	; (8003ddc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	0c1b      	lsrs	r3, r3, #16
 8003db2:	f003 0303 	and.w	r3, r3, #3
 8003db6:	3301      	adds	r3, #1
 8003db8:	005b      	lsls	r3, r3, #1
 8003dba:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003dbc:	68fa      	ldr	r2, [r7, #12]
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dc4:	60bb      	str	r3, [r7, #8]
      break;
 8003dc6:	e002      	b.n	8003dce <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003dc8:	4b05      	ldr	r3, [pc, #20]	; (8003de0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003dca:	60bb      	str	r3, [r7, #8]
      break;
 8003dcc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003dce:	68bb      	ldr	r3, [r7, #8]
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	3710      	adds	r7, #16
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003dda:	bf00      	nop
 8003ddc:	40023800 	.word	0x40023800
 8003de0:	00f42400 	.word	0x00f42400
 8003de4:	007a1200 	.word	0x007a1200

08003de8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003de8:	b480      	push	{r7}
 8003dea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003dec:	4b03      	ldr	r3, [pc, #12]	; (8003dfc <HAL_RCC_GetHCLKFreq+0x14>)
 8003dee:	681b      	ldr	r3, [r3, #0]
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	46bd      	mov	sp, r7
 8003df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df8:	4770      	bx	lr
 8003dfa:	bf00      	nop
 8003dfc:	20000000 	.word	0x20000000

08003e00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003e04:	f7ff fff0 	bl	8003de8 <HAL_RCC_GetHCLKFreq>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	4b05      	ldr	r3, [pc, #20]	; (8003e20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	0a9b      	lsrs	r3, r3, #10
 8003e10:	f003 0307 	and.w	r3, r3, #7
 8003e14:	4903      	ldr	r1, [pc, #12]	; (8003e24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e16:	5ccb      	ldrb	r3, [r1, r3]
 8003e18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	bd80      	pop	{r7, pc}
 8003e20:	40023800 	.word	0x40023800
 8003e24:	08005f70 	.word	0x08005f70

08003e28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003e2c:	f7ff ffdc 	bl	8003de8 <HAL_RCC_GetHCLKFreq>
 8003e30:	4602      	mov	r2, r0
 8003e32:	4b05      	ldr	r3, [pc, #20]	; (8003e48 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	0b5b      	lsrs	r3, r3, #13
 8003e38:	f003 0307 	and.w	r3, r3, #7
 8003e3c:	4903      	ldr	r1, [pc, #12]	; (8003e4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e3e:	5ccb      	ldrb	r3, [r1, r3]
 8003e40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	bd80      	pop	{r7, pc}
 8003e48:	40023800 	.word	0x40023800
 8003e4c:	08005f70 	.word	0x08005f70

08003e50 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b082      	sub	sp, #8
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d101      	bne.n	8003e62 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e07b      	b.n	8003f5a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d108      	bne.n	8003e7c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e72:	d009      	beq.n	8003e88 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2200      	movs	r2, #0
 8003e78:	61da      	str	r2, [r3, #28]
 8003e7a:	e005      	b.n	8003e88 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2200      	movs	r2, #0
 8003e86:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d106      	bne.n	8003ea8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	f7fd f9c8 	bl	8001238 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2202      	movs	r2, #2
 8003eac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ebe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003ed0:	431a      	orrs	r2, r3
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	68db      	ldr	r3, [r3, #12]
 8003ed6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003eda:	431a      	orrs	r2, r3
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	691b      	ldr	r3, [r3, #16]
 8003ee0:	f003 0302 	and.w	r3, r3, #2
 8003ee4:	431a      	orrs	r2, r3
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	695b      	ldr	r3, [r3, #20]
 8003eea:	f003 0301 	and.w	r3, r3, #1
 8003eee:	431a      	orrs	r2, r3
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	699b      	ldr	r3, [r3, #24]
 8003ef4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ef8:	431a      	orrs	r2, r3
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	69db      	ldr	r3, [r3, #28]
 8003efe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f02:	431a      	orrs	r2, r3
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6a1b      	ldr	r3, [r3, #32]
 8003f08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f0c:	ea42 0103 	orr.w	r1, r2, r3
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f14:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	430a      	orrs	r2, r1
 8003f1e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	699b      	ldr	r3, [r3, #24]
 8003f24:	0c1b      	lsrs	r3, r3, #16
 8003f26:	f003 0104 	and.w	r1, r3, #4
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2e:	f003 0210 	and.w	r2, r3, #16
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	430a      	orrs	r2, r1
 8003f38:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	69da      	ldr	r2, [r3, #28]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f48:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2201      	movs	r2, #1
 8003f54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003f58:	2300      	movs	r3, #0
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3708      	adds	r7, #8
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}

08003f62 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003f62:	b580      	push	{r7, lr}
 8003f64:	b08c      	sub	sp, #48	; 0x30
 8003f66:	af00      	add	r7, sp, #0
 8003f68:	60f8      	str	r0, [r7, #12]
 8003f6a:	60b9      	str	r1, [r7, #8]
 8003f6c:	607a      	str	r2, [r7, #4]
 8003f6e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003f70:	2301      	movs	r3, #1
 8003f72:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003f74:	2300      	movs	r3, #0
 8003f76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d101      	bne.n	8003f88 <HAL_SPI_TransmitReceive+0x26>
 8003f84:	2302      	movs	r3, #2
 8003f86:	e18a      	b.n	800429e <HAL_SPI_TransmitReceive+0x33c>
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003f90:	f7fd ff38 	bl	8001e04 <HAL_GetTick>
 8003f94:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f9c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003fa6:	887b      	ldrh	r3, [r7, #2]
 8003fa8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003faa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003fae:	2b01      	cmp	r3, #1
 8003fb0:	d00f      	beq.n	8003fd2 <HAL_SPI_TransmitReceive+0x70>
 8003fb2:	69fb      	ldr	r3, [r7, #28]
 8003fb4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003fb8:	d107      	bne.n	8003fca <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d103      	bne.n	8003fca <HAL_SPI_TransmitReceive+0x68>
 8003fc2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003fc6:	2b04      	cmp	r3, #4
 8003fc8:	d003      	beq.n	8003fd2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003fca:	2302      	movs	r3, #2
 8003fcc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003fd0:	e15b      	b.n	800428a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d005      	beq.n	8003fe4 <HAL_SPI_TransmitReceive+0x82>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d002      	beq.n	8003fe4 <HAL_SPI_TransmitReceive+0x82>
 8003fde:	887b      	ldrh	r3, [r7, #2]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d103      	bne.n	8003fec <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003fea:	e14e      	b.n	800428a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ff2:	b2db      	uxtb	r3, r3
 8003ff4:	2b04      	cmp	r3, #4
 8003ff6:	d003      	beq.n	8004000 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2205      	movs	r2, #5
 8003ffc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2200      	movs	r2, #0
 8004004:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	687a      	ldr	r2, [r7, #4]
 800400a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	887a      	ldrh	r2, [r7, #2]
 8004010:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	887a      	ldrh	r2, [r7, #2]
 8004016:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	68ba      	ldr	r2, [r7, #8]
 800401c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	887a      	ldrh	r2, [r7, #2]
 8004022:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	887a      	ldrh	r2, [r7, #2]
 8004028:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2200      	movs	r2, #0
 800402e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2200      	movs	r2, #0
 8004034:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004040:	2b40      	cmp	r3, #64	; 0x40
 8004042:	d007      	beq.n	8004054 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004052:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	68db      	ldr	r3, [r3, #12]
 8004058:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800405c:	d178      	bne.n	8004150 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d002      	beq.n	800406c <HAL_SPI_TransmitReceive+0x10a>
 8004066:	8b7b      	ldrh	r3, [r7, #26]
 8004068:	2b01      	cmp	r3, #1
 800406a:	d166      	bne.n	800413a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004070:	881a      	ldrh	r2, [r3, #0]
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800407c:	1c9a      	adds	r2, r3, #2
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004086:	b29b      	uxth	r3, r3
 8004088:	3b01      	subs	r3, #1
 800408a:	b29a      	uxth	r2, r3
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004090:	e053      	b.n	800413a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	f003 0302 	and.w	r3, r3, #2
 800409c:	2b02      	cmp	r3, #2
 800409e:	d11b      	bne.n	80040d8 <HAL_SPI_TransmitReceive+0x176>
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040a4:	b29b      	uxth	r3, r3
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d016      	beq.n	80040d8 <HAL_SPI_TransmitReceive+0x176>
 80040aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	d113      	bne.n	80040d8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040b4:	881a      	ldrh	r2, [r3, #0]
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040c0:	1c9a      	adds	r2, r3, #2
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040ca:	b29b      	uxth	r3, r3
 80040cc:	3b01      	subs	r3, #1
 80040ce:	b29a      	uxth	r2, r3
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80040d4:	2300      	movs	r3, #0
 80040d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	f003 0301 	and.w	r3, r3, #1
 80040e2:	2b01      	cmp	r3, #1
 80040e4:	d119      	bne.n	800411a <HAL_SPI_TransmitReceive+0x1b8>
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040ea:	b29b      	uxth	r3, r3
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d014      	beq.n	800411a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	68da      	ldr	r2, [r3, #12]
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040fa:	b292      	uxth	r2, r2
 80040fc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004102:	1c9a      	adds	r2, r3, #2
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800410c:	b29b      	uxth	r3, r3
 800410e:	3b01      	subs	r3, #1
 8004110:	b29a      	uxth	r2, r3
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004116:	2301      	movs	r3, #1
 8004118:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800411a:	f7fd fe73 	bl	8001e04 <HAL_GetTick>
 800411e:	4602      	mov	r2, r0
 8004120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004122:	1ad3      	subs	r3, r2, r3
 8004124:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004126:	429a      	cmp	r2, r3
 8004128:	d807      	bhi.n	800413a <HAL_SPI_TransmitReceive+0x1d8>
 800412a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800412c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004130:	d003      	beq.n	800413a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004132:	2303      	movs	r3, #3
 8004134:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004138:	e0a7      	b.n	800428a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800413e:	b29b      	uxth	r3, r3
 8004140:	2b00      	cmp	r3, #0
 8004142:	d1a6      	bne.n	8004092 <HAL_SPI_TransmitReceive+0x130>
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004148:	b29b      	uxth	r3, r3
 800414a:	2b00      	cmp	r3, #0
 800414c:	d1a1      	bne.n	8004092 <HAL_SPI_TransmitReceive+0x130>
 800414e:	e07c      	b.n	800424a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d002      	beq.n	800415e <HAL_SPI_TransmitReceive+0x1fc>
 8004158:	8b7b      	ldrh	r3, [r7, #26]
 800415a:	2b01      	cmp	r3, #1
 800415c:	d16b      	bne.n	8004236 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	330c      	adds	r3, #12
 8004168:	7812      	ldrb	r2, [r2, #0]
 800416a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004170:	1c5a      	adds	r2, r3, #1
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800417a:	b29b      	uxth	r3, r3
 800417c:	3b01      	subs	r3, #1
 800417e:	b29a      	uxth	r2, r3
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004184:	e057      	b.n	8004236 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	f003 0302 	and.w	r3, r3, #2
 8004190:	2b02      	cmp	r3, #2
 8004192:	d11c      	bne.n	80041ce <HAL_SPI_TransmitReceive+0x26c>
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004198:	b29b      	uxth	r3, r3
 800419a:	2b00      	cmp	r3, #0
 800419c:	d017      	beq.n	80041ce <HAL_SPI_TransmitReceive+0x26c>
 800419e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	d114      	bne.n	80041ce <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	330c      	adds	r3, #12
 80041ae:	7812      	ldrb	r2, [r2, #0]
 80041b0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041b6:	1c5a      	adds	r2, r3, #1
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041c0:	b29b      	uxth	r3, r3
 80041c2:	3b01      	subs	r3, #1
 80041c4:	b29a      	uxth	r2, r3
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80041ca:	2300      	movs	r3, #0
 80041cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	f003 0301 	and.w	r3, r3, #1
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d119      	bne.n	8004210 <HAL_SPI_TransmitReceive+0x2ae>
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041e0:	b29b      	uxth	r3, r3
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d014      	beq.n	8004210 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	68da      	ldr	r2, [r3, #12]
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041f0:	b2d2      	uxtb	r2, r2
 80041f2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041f8:	1c5a      	adds	r2, r3, #1
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004202:	b29b      	uxth	r3, r3
 8004204:	3b01      	subs	r3, #1
 8004206:	b29a      	uxth	r2, r3
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800420c:	2301      	movs	r3, #1
 800420e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004210:	f7fd fdf8 	bl	8001e04 <HAL_GetTick>
 8004214:	4602      	mov	r2, r0
 8004216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004218:	1ad3      	subs	r3, r2, r3
 800421a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800421c:	429a      	cmp	r2, r3
 800421e:	d803      	bhi.n	8004228 <HAL_SPI_TransmitReceive+0x2c6>
 8004220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004222:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004226:	d102      	bne.n	800422e <HAL_SPI_TransmitReceive+0x2cc>
 8004228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800422a:	2b00      	cmp	r3, #0
 800422c:	d103      	bne.n	8004236 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800422e:	2303      	movs	r3, #3
 8004230:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004234:	e029      	b.n	800428a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800423a:	b29b      	uxth	r3, r3
 800423c:	2b00      	cmp	r3, #0
 800423e:	d1a2      	bne.n	8004186 <HAL_SPI_TransmitReceive+0x224>
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004244:	b29b      	uxth	r3, r3
 8004246:	2b00      	cmp	r3, #0
 8004248:	d19d      	bne.n	8004186 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800424a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800424c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800424e:	68f8      	ldr	r0, [r7, #12]
 8004250:	f000 f8b2 	bl	80043b8 <SPI_EndRxTxTransaction>
 8004254:	4603      	mov	r3, r0
 8004256:	2b00      	cmp	r3, #0
 8004258:	d006      	beq.n	8004268 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	2220      	movs	r2, #32
 8004264:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004266:	e010      	b.n	800428a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d10b      	bne.n	8004288 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004270:	2300      	movs	r3, #0
 8004272:	617b      	str	r3, [r7, #20]
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	68db      	ldr	r3, [r3, #12]
 800427a:	617b      	str	r3, [r7, #20]
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	617b      	str	r3, [r7, #20]
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	e000      	b.n	800428a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004288:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	2201      	movs	r2, #1
 800428e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2200      	movs	r2, #0
 8004296:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800429a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800429e:	4618      	mov	r0, r3
 80042a0:	3730      	adds	r7, #48	; 0x30
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}
	...

080042a8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b088      	sub	sp, #32
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	60f8      	str	r0, [r7, #12]
 80042b0:	60b9      	str	r1, [r7, #8]
 80042b2:	603b      	str	r3, [r7, #0]
 80042b4:	4613      	mov	r3, r2
 80042b6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80042b8:	f7fd fda4 	bl	8001e04 <HAL_GetTick>
 80042bc:	4602      	mov	r2, r0
 80042be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042c0:	1a9b      	subs	r3, r3, r2
 80042c2:	683a      	ldr	r2, [r7, #0]
 80042c4:	4413      	add	r3, r2
 80042c6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80042c8:	f7fd fd9c 	bl	8001e04 <HAL_GetTick>
 80042cc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80042ce:	4b39      	ldr	r3, [pc, #228]	; (80043b4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	015b      	lsls	r3, r3, #5
 80042d4:	0d1b      	lsrs	r3, r3, #20
 80042d6:	69fa      	ldr	r2, [r7, #28]
 80042d8:	fb02 f303 	mul.w	r3, r2, r3
 80042dc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80042de:	e054      	b.n	800438a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042e6:	d050      	beq.n	800438a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80042e8:	f7fd fd8c 	bl	8001e04 <HAL_GetTick>
 80042ec:	4602      	mov	r2, r0
 80042ee:	69bb      	ldr	r3, [r7, #24]
 80042f0:	1ad3      	subs	r3, r2, r3
 80042f2:	69fa      	ldr	r2, [r7, #28]
 80042f4:	429a      	cmp	r2, r3
 80042f6:	d902      	bls.n	80042fe <SPI_WaitFlagStateUntilTimeout+0x56>
 80042f8:	69fb      	ldr	r3, [r7, #28]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d13d      	bne.n	800437a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	685a      	ldr	r2, [r3, #4]
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800430c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004316:	d111      	bne.n	800433c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004320:	d004      	beq.n	800432c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800432a:	d107      	bne.n	800433c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800433a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004340:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004344:	d10f      	bne.n	8004366 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004354:	601a      	str	r2, [r3, #0]
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	681a      	ldr	r2, [r3, #0]
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004364:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2201      	movs	r2, #1
 800436a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2200      	movs	r2, #0
 8004372:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004376:	2303      	movs	r3, #3
 8004378:	e017      	b.n	80043aa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d101      	bne.n	8004384 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004380:	2300      	movs	r3, #0
 8004382:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	3b01      	subs	r3, #1
 8004388:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	689a      	ldr	r2, [r3, #8]
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	4013      	ands	r3, r2
 8004394:	68ba      	ldr	r2, [r7, #8]
 8004396:	429a      	cmp	r2, r3
 8004398:	bf0c      	ite	eq
 800439a:	2301      	moveq	r3, #1
 800439c:	2300      	movne	r3, #0
 800439e:	b2db      	uxtb	r3, r3
 80043a0:	461a      	mov	r2, r3
 80043a2:	79fb      	ldrb	r3, [r7, #7]
 80043a4:	429a      	cmp	r2, r3
 80043a6:	d19b      	bne.n	80042e0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80043a8:	2300      	movs	r3, #0
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	3720      	adds	r7, #32
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}
 80043b2:	bf00      	nop
 80043b4:	20000000 	.word	0x20000000

080043b8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b088      	sub	sp, #32
 80043bc:	af02      	add	r7, sp, #8
 80043be:	60f8      	str	r0, [r7, #12]
 80043c0:	60b9      	str	r1, [r7, #8]
 80043c2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80043c4:	4b1b      	ldr	r3, [pc, #108]	; (8004434 <SPI_EndRxTxTransaction+0x7c>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a1b      	ldr	r2, [pc, #108]	; (8004438 <SPI_EndRxTxTransaction+0x80>)
 80043ca:	fba2 2303 	umull	r2, r3, r2, r3
 80043ce:	0d5b      	lsrs	r3, r3, #21
 80043d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80043d4:	fb02 f303 	mul.w	r3, r2, r3
 80043d8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80043e2:	d112      	bne.n	800440a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	9300      	str	r3, [sp, #0]
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	2200      	movs	r2, #0
 80043ec:	2180      	movs	r1, #128	; 0x80
 80043ee:	68f8      	ldr	r0, [r7, #12]
 80043f0:	f7ff ff5a 	bl	80042a8 <SPI_WaitFlagStateUntilTimeout>
 80043f4:	4603      	mov	r3, r0
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d016      	beq.n	8004428 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043fe:	f043 0220 	orr.w	r2, r3, #32
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004406:	2303      	movs	r3, #3
 8004408:	e00f      	b.n	800442a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d00a      	beq.n	8004426 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	3b01      	subs	r3, #1
 8004414:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004420:	2b80      	cmp	r3, #128	; 0x80
 8004422:	d0f2      	beq.n	800440a <SPI_EndRxTxTransaction+0x52>
 8004424:	e000      	b.n	8004428 <SPI_EndRxTxTransaction+0x70>
        break;
 8004426:	bf00      	nop
  }

  return HAL_OK;
 8004428:	2300      	movs	r3, #0
}
 800442a:	4618      	mov	r0, r3
 800442c:	3718      	adds	r7, #24
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}
 8004432:	bf00      	nop
 8004434:	20000000 	.word	0x20000000
 8004438:	165e9f81 	.word	0x165e9f81

0800443c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b082      	sub	sp, #8
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d101      	bne.n	800444e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	e041      	b.n	80044d2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004454:	b2db      	uxtb	r3, r3
 8004456:	2b00      	cmp	r3, #0
 8004458:	d106      	bne.n	8004468 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2200      	movs	r2, #0
 800445e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f7fd fa52 	bl	800190c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2202      	movs	r2, #2
 800446c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	3304      	adds	r3, #4
 8004478:	4619      	mov	r1, r3
 800447a:	4610      	mov	r0, r2
 800447c:	f000 fb4a 	bl	8004b14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2201      	movs	r2, #1
 8004484:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2201      	movs	r2, #1
 800448c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2201      	movs	r2, #1
 8004494:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2201      	movs	r2, #1
 800449c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2201      	movs	r2, #1
 80044a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2201      	movs	r2, #1
 80044ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2201      	movs	r2, #1
 80044b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2201      	movs	r2, #1
 80044bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2201      	movs	r2, #1
 80044c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2201      	movs	r2, #1
 80044cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80044d0:	2300      	movs	r3, #0
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3708      	adds	r7, #8
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}

080044da <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80044da:	b580      	push	{r7, lr}
 80044dc:	b082      	sub	sp, #8
 80044de:	af00      	add	r7, sp, #0
 80044e0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d101      	bne.n	80044ec <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80044e8:	2301      	movs	r3, #1
 80044ea:	e041      	b.n	8004570 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044f2:	b2db      	uxtb	r3, r3
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d106      	bne.n	8004506 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2200      	movs	r2, #0
 80044fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004500:	6878      	ldr	r0, [r7, #4]
 8004502:	f000 f839 	bl	8004578 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2202      	movs	r2, #2
 800450a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681a      	ldr	r2, [r3, #0]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	3304      	adds	r3, #4
 8004516:	4619      	mov	r1, r3
 8004518:	4610      	mov	r0, r2
 800451a:	f000 fafb 	bl	8004b14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2201      	movs	r2, #1
 8004522:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2201      	movs	r2, #1
 800452a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2201      	movs	r2, #1
 8004532:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2201      	movs	r2, #1
 800453a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2201      	movs	r2, #1
 8004542:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2201      	movs	r2, #1
 800454a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2201      	movs	r2, #1
 8004552:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2201      	movs	r2, #1
 800455a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2201      	movs	r2, #1
 8004562:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2201      	movs	r2, #1
 800456a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800456e:	2300      	movs	r3, #0
}
 8004570:	4618      	mov	r0, r3
 8004572:	3708      	adds	r7, #8
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}

08004578 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004578:	b480      	push	{r7}
 800457a:	b083      	sub	sp, #12
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004580:	bf00      	nop
 8004582:	370c      	adds	r7, #12
 8004584:	46bd      	mov	sp, r7
 8004586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458a:	4770      	bx	lr

0800458c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b082      	sub	sp, #8
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	691b      	ldr	r3, [r3, #16]
 800459a:	f003 0302 	and.w	r3, r3, #2
 800459e:	2b02      	cmp	r3, #2
 80045a0:	d122      	bne.n	80045e8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	68db      	ldr	r3, [r3, #12]
 80045a8:	f003 0302 	and.w	r3, r3, #2
 80045ac:	2b02      	cmp	r3, #2
 80045ae:	d11b      	bne.n	80045e8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f06f 0202 	mvn.w	r2, #2
 80045b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2201      	movs	r2, #1
 80045be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	699b      	ldr	r3, [r3, #24]
 80045c6:	f003 0303 	and.w	r3, r3, #3
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d003      	beq.n	80045d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80045ce:	6878      	ldr	r0, [r7, #4]
 80045d0:	f000 fa81 	bl	8004ad6 <HAL_TIM_IC_CaptureCallback>
 80045d4:	e005      	b.n	80045e2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f000 fa73 	bl	8004ac2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	f000 fa84 	bl	8004aea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2200      	movs	r2, #0
 80045e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	691b      	ldr	r3, [r3, #16]
 80045ee:	f003 0304 	and.w	r3, r3, #4
 80045f2:	2b04      	cmp	r3, #4
 80045f4:	d122      	bne.n	800463c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	68db      	ldr	r3, [r3, #12]
 80045fc:	f003 0304 	and.w	r3, r3, #4
 8004600:	2b04      	cmp	r3, #4
 8004602:	d11b      	bne.n	800463c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f06f 0204 	mvn.w	r2, #4
 800460c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2202      	movs	r2, #2
 8004612:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	699b      	ldr	r3, [r3, #24]
 800461a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800461e:	2b00      	cmp	r3, #0
 8004620:	d003      	beq.n	800462a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f000 fa57 	bl	8004ad6 <HAL_TIM_IC_CaptureCallback>
 8004628:	e005      	b.n	8004636 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f000 fa49 	bl	8004ac2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	f000 fa5a 	bl	8004aea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2200      	movs	r2, #0
 800463a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	691b      	ldr	r3, [r3, #16]
 8004642:	f003 0308 	and.w	r3, r3, #8
 8004646:	2b08      	cmp	r3, #8
 8004648:	d122      	bne.n	8004690 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	68db      	ldr	r3, [r3, #12]
 8004650:	f003 0308 	and.w	r3, r3, #8
 8004654:	2b08      	cmp	r3, #8
 8004656:	d11b      	bne.n	8004690 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f06f 0208 	mvn.w	r2, #8
 8004660:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2204      	movs	r2, #4
 8004666:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	69db      	ldr	r3, [r3, #28]
 800466e:	f003 0303 	and.w	r3, r3, #3
 8004672:	2b00      	cmp	r3, #0
 8004674:	d003      	beq.n	800467e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f000 fa2d 	bl	8004ad6 <HAL_TIM_IC_CaptureCallback>
 800467c:	e005      	b.n	800468a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	f000 fa1f 	bl	8004ac2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004684:	6878      	ldr	r0, [r7, #4]
 8004686:	f000 fa30 	bl	8004aea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2200      	movs	r2, #0
 800468e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	691b      	ldr	r3, [r3, #16]
 8004696:	f003 0310 	and.w	r3, r3, #16
 800469a:	2b10      	cmp	r3, #16
 800469c:	d122      	bne.n	80046e4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	68db      	ldr	r3, [r3, #12]
 80046a4:	f003 0310 	and.w	r3, r3, #16
 80046a8:	2b10      	cmp	r3, #16
 80046aa:	d11b      	bne.n	80046e4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f06f 0210 	mvn.w	r2, #16
 80046b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2208      	movs	r2, #8
 80046ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	69db      	ldr	r3, [r3, #28]
 80046c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d003      	beq.n	80046d2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f000 fa03 	bl	8004ad6 <HAL_TIM_IC_CaptureCallback>
 80046d0:	e005      	b.n	80046de <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f000 f9f5 	bl	8004ac2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046d8:	6878      	ldr	r0, [r7, #4]
 80046da:	f000 fa06 	bl	8004aea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2200      	movs	r2, #0
 80046e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	691b      	ldr	r3, [r3, #16]
 80046ea:	f003 0301 	and.w	r3, r3, #1
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d10e      	bne.n	8004710 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	68db      	ldr	r3, [r3, #12]
 80046f8:	f003 0301 	and.w	r3, r3, #1
 80046fc:	2b01      	cmp	r3, #1
 80046fe:	d107      	bne.n	8004710 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f06f 0201 	mvn.w	r2, #1
 8004708:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f000 f9cf 	bl	8004aae <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	691b      	ldr	r3, [r3, #16]
 8004716:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800471a:	2b80      	cmp	r3, #128	; 0x80
 800471c:	d10e      	bne.n	800473c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	68db      	ldr	r3, [r3, #12]
 8004724:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004728:	2b80      	cmp	r3, #128	; 0x80
 800472a:	d107      	bne.n	800473c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004734:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f000 fd5c 	bl	80051f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	691b      	ldr	r3, [r3, #16]
 8004742:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004746:	2b40      	cmp	r3, #64	; 0x40
 8004748:	d10e      	bne.n	8004768 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	68db      	ldr	r3, [r3, #12]
 8004750:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004754:	2b40      	cmp	r3, #64	; 0x40
 8004756:	d107      	bne.n	8004768 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004760:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	f000 f9cb 	bl	8004afe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	691b      	ldr	r3, [r3, #16]
 800476e:	f003 0320 	and.w	r3, r3, #32
 8004772:	2b20      	cmp	r3, #32
 8004774:	d10e      	bne.n	8004794 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	68db      	ldr	r3, [r3, #12]
 800477c:	f003 0320 	and.w	r3, r3, #32
 8004780:	2b20      	cmp	r3, #32
 8004782:	d107      	bne.n	8004794 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f06f 0220 	mvn.w	r2, #32
 800478c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f000 fd26 	bl	80051e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004794:	bf00      	nop
 8004796:	3708      	adds	r7, #8
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}

0800479c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b086      	sub	sp, #24
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	60f8      	str	r0, [r7, #12]
 80047a4:	60b9      	str	r1, [r7, #8]
 80047a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047a8:	2300      	movs	r3, #0
 80047aa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047b2:	2b01      	cmp	r3, #1
 80047b4:	d101      	bne.n	80047ba <HAL_TIM_PWM_ConfigChannel+0x1e>
 80047b6:	2302      	movs	r3, #2
 80047b8:	e0ae      	b.n	8004918 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2201      	movs	r2, #1
 80047be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2b0c      	cmp	r3, #12
 80047c6:	f200 809f 	bhi.w	8004908 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80047ca:	a201      	add	r2, pc, #4	; (adr r2, 80047d0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80047cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047d0:	08004805 	.word	0x08004805
 80047d4:	08004909 	.word	0x08004909
 80047d8:	08004909 	.word	0x08004909
 80047dc:	08004909 	.word	0x08004909
 80047e0:	08004845 	.word	0x08004845
 80047e4:	08004909 	.word	0x08004909
 80047e8:	08004909 	.word	0x08004909
 80047ec:	08004909 	.word	0x08004909
 80047f0:	08004887 	.word	0x08004887
 80047f4:	08004909 	.word	0x08004909
 80047f8:	08004909 	.word	0x08004909
 80047fc:	08004909 	.word	0x08004909
 8004800:	080048c7 	.word	0x080048c7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	68b9      	ldr	r1, [r7, #8]
 800480a:	4618      	mov	r0, r3
 800480c:	f000 fa22 	bl	8004c54 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	699a      	ldr	r2, [r3, #24]
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f042 0208 	orr.w	r2, r2, #8
 800481e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	699a      	ldr	r2, [r3, #24]
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f022 0204 	bic.w	r2, r2, #4
 800482e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	6999      	ldr	r1, [r3, #24]
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	691a      	ldr	r2, [r3, #16]
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	430a      	orrs	r2, r1
 8004840:	619a      	str	r2, [r3, #24]
      break;
 8004842:	e064      	b.n	800490e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	68b9      	ldr	r1, [r7, #8]
 800484a:	4618      	mov	r0, r3
 800484c:	f000 fa72 	bl	8004d34 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	699a      	ldr	r2, [r3, #24]
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800485e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	699a      	ldr	r2, [r3, #24]
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800486e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	6999      	ldr	r1, [r3, #24]
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	691b      	ldr	r3, [r3, #16]
 800487a:	021a      	lsls	r2, r3, #8
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	430a      	orrs	r2, r1
 8004882:	619a      	str	r2, [r3, #24]
      break;
 8004884:	e043      	b.n	800490e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	68b9      	ldr	r1, [r7, #8]
 800488c:	4618      	mov	r0, r3
 800488e:	f000 fac7 	bl	8004e20 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	69da      	ldr	r2, [r3, #28]
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f042 0208 	orr.w	r2, r2, #8
 80048a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	69da      	ldr	r2, [r3, #28]
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f022 0204 	bic.w	r2, r2, #4
 80048b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	69d9      	ldr	r1, [r3, #28]
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	691a      	ldr	r2, [r3, #16]
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	430a      	orrs	r2, r1
 80048c2:	61da      	str	r2, [r3, #28]
      break;
 80048c4:	e023      	b.n	800490e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	68b9      	ldr	r1, [r7, #8]
 80048cc:	4618      	mov	r0, r3
 80048ce:	f000 fb1b 	bl	8004f08 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	69da      	ldr	r2, [r3, #28]
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80048e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	69da      	ldr	r2, [r3, #28]
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	69d9      	ldr	r1, [r3, #28]
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	691b      	ldr	r3, [r3, #16]
 80048fc:	021a      	lsls	r2, r3, #8
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	430a      	orrs	r2, r1
 8004904:	61da      	str	r2, [r3, #28]
      break;
 8004906:	e002      	b.n	800490e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004908:	2301      	movs	r3, #1
 800490a:	75fb      	strb	r3, [r7, #23]
      break;
 800490c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	2200      	movs	r2, #0
 8004912:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004916:	7dfb      	ldrb	r3, [r7, #23]
}
 8004918:	4618      	mov	r0, r3
 800491a:	3718      	adds	r7, #24
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}

08004920 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b084      	sub	sp, #16
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
 8004928:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800492a:	2300      	movs	r3, #0
 800492c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004934:	2b01      	cmp	r3, #1
 8004936:	d101      	bne.n	800493c <HAL_TIM_ConfigClockSource+0x1c>
 8004938:	2302      	movs	r3, #2
 800493a:	e0b4      	b.n	8004aa6 <HAL_TIM_ConfigClockSource+0x186>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2201      	movs	r2, #1
 8004940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2202      	movs	r2, #2
 8004948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800495a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004962:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	68ba      	ldr	r2, [r7, #8]
 800496a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004974:	d03e      	beq.n	80049f4 <HAL_TIM_ConfigClockSource+0xd4>
 8004976:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800497a:	f200 8087 	bhi.w	8004a8c <HAL_TIM_ConfigClockSource+0x16c>
 800497e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004982:	f000 8086 	beq.w	8004a92 <HAL_TIM_ConfigClockSource+0x172>
 8004986:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800498a:	d87f      	bhi.n	8004a8c <HAL_TIM_ConfigClockSource+0x16c>
 800498c:	2b70      	cmp	r3, #112	; 0x70
 800498e:	d01a      	beq.n	80049c6 <HAL_TIM_ConfigClockSource+0xa6>
 8004990:	2b70      	cmp	r3, #112	; 0x70
 8004992:	d87b      	bhi.n	8004a8c <HAL_TIM_ConfigClockSource+0x16c>
 8004994:	2b60      	cmp	r3, #96	; 0x60
 8004996:	d050      	beq.n	8004a3a <HAL_TIM_ConfigClockSource+0x11a>
 8004998:	2b60      	cmp	r3, #96	; 0x60
 800499a:	d877      	bhi.n	8004a8c <HAL_TIM_ConfigClockSource+0x16c>
 800499c:	2b50      	cmp	r3, #80	; 0x50
 800499e:	d03c      	beq.n	8004a1a <HAL_TIM_ConfigClockSource+0xfa>
 80049a0:	2b50      	cmp	r3, #80	; 0x50
 80049a2:	d873      	bhi.n	8004a8c <HAL_TIM_ConfigClockSource+0x16c>
 80049a4:	2b40      	cmp	r3, #64	; 0x40
 80049a6:	d058      	beq.n	8004a5a <HAL_TIM_ConfigClockSource+0x13a>
 80049a8:	2b40      	cmp	r3, #64	; 0x40
 80049aa:	d86f      	bhi.n	8004a8c <HAL_TIM_ConfigClockSource+0x16c>
 80049ac:	2b30      	cmp	r3, #48	; 0x30
 80049ae:	d064      	beq.n	8004a7a <HAL_TIM_ConfigClockSource+0x15a>
 80049b0:	2b30      	cmp	r3, #48	; 0x30
 80049b2:	d86b      	bhi.n	8004a8c <HAL_TIM_ConfigClockSource+0x16c>
 80049b4:	2b20      	cmp	r3, #32
 80049b6:	d060      	beq.n	8004a7a <HAL_TIM_ConfigClockSource+0x15a>
 80049b8:	2b20      	cmp	r3, #32
 80049ba:	d867      	bhi.n	8004a8c <HAL_TIM_ConfigClockSource+0x16c>
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d05c      	beq.n	8004a7a <HAL_TIM_ConfigClockSource+0x15a>
 80049c0:	2b10      	cmp	r3, #16
 80049c2:	d05a      	beq.n	8004a7a <HAL_TIM_ConfigClockSource+0x15a>
 80049c4:	e062      	b.n	8004a8c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6818      	ldr	r0, [r3, #0]
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	6899      	ldr	r1, [r3, #8]
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	685a      	ldr	r2, [r3, #4]
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	68db      	ldr	r3, [r3, #12]
 80049d6:	f000 fb67 	bl	80050a8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80049e8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	68ba      	ldr	r2, [r7, #8]
 80049f0:	609a      	str	r2, [r3, #8]
      break;
 80049f2:	e04f      	b.n	8004a94 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6818      	ldr	r0, [r3, #0]
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	6899      	ldr	r1, [r3, #8]
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	685a      	ldr	r2, [r3, #4]
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	68db      	ldr	r3, [r3, #12]
 8004a04:	f000 fb50 	bl	80050a8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	689a      	ldr	r2, [r3, #8]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a16:	609a      	str	r2, [r3, #8]
      break;
 8004a18:	e03c      	b.n	8004a94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6818      	ldr	r0, [r3, #0]
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	6859      	ldr	r1, [r3, #4]
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	68db      	ldr	r3, [r3, #12]
 8004a26:	461a      	mov	r2, r3
 8004a28:	f000 fac4 	bl	8004fb4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	2150      	movs	r1, #80	; 0x50
 8004a32:	4618      	mov	r0, r3
 8004a34:	f000 fb1d 	bl	8005072 <TIM_ITRx_SetConfig>
      break;
 8004a38:	e02c      	b.n	8004a94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6818      	ldr	r0, [r3, #0]
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	6859      	ldr	r1, [r3, #4]
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	68db      	ldr	r3, [r3, #12]
 8004a46:	461a      	mov	r2, r3
 8004a48:	f000 fae3 	bl	8005012 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	2160      	movs	r1, #96	; 0x60
 8004a52:	4618      	mov	r0, r3
 8004a54:	f000 fb0d 	bl	8005072 <TIM_ITRx_SetConfig>
      break;
 8004a58:	e01c      	b.n	8004a94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6818      	ldr	r0, [r3, #0]
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	6859      	ldr	r1, [r3, #4]
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	68db      	ldr	r3, [r3, #12]
 8004a66:	461a      	mov	r2, r3
 8004a68:	f000 faa4 	bl	8004fb4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	2140      	movs	r1, #64	; 0x40
 8004a72:	4618      	mov	r0, r3
 8004a74:	f000 fafd 	bl	8005072 <TIM_ITRx_SetConfig>
      break;
 8004a78:	e00c      	b.n	8004a94 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681a      	ldr	r2, [r3, #0]
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4619      	mov	r1, r3
 8004a84:	4610      	mov	r0, r2
 8004a86:	f000 faf4 	bl	8005072 <TIM_ITRx_SetConfig>
      break;
 8004a8a:	e003      	b.n	8004a94 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	73fb      	strb	r3, [r7, #15]
      break;
 8004a90:	e000      	b.n	8004a94 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004a92:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2201      	movs	r2, #1
 8004a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004aa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	3710      	adds	r7, #16
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}

08004aae <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004aae:	b480      	push	{r7}
 8004ab0:	b083      	sub	sp, #12
 8004ab2:	af00      	add	r7, sp, #0
 8004ab4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004ab6:	bf00      	nop
 8004ab8:	370c      	adds	r7, #12
 8004aba:	46bd      	mov	sp, r7
 8004abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac0:	4770      	bx	lr

08004ac2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ac2:	b480      	push	{r7}
 8004ac4:	b083      	sub	sp, #12
 8004ac6:	af00      	add	r7, sp, #0
 8004ac8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004aca:	bf00      	nop
 8004acc:	370c      	adds	r7, #12
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad4:	4770      	bx	lr

08004ad6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004ad6:	b480      	push	{r7}
 8004ad8:	b083      	sub	sp, #12
 8004ada:	af00      	add	r7, sp, #0
 8004adc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004ade:	bf00      	nop
 8004ae0:	370c      	adds	r7, #12
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae8:	4770      	bx	lr

08004aea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004aea:	b480      	push	{r7}
 8004aec:	b083      	sub	sp, #12
 8004aee:	af00      	add	r7, sp, #0
 8004af0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004af2:	bf00      	nop
 8004af4:	370c      	adds	r7, #12
 8004af6:	46bd      	mov	sp, r7
 8004af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afc:	4770      	bx	lr

08004afe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004afe:	b480      	push	{r7}
 8004b00:	b083      	sub	sp, #12
 8004b02:	af00      	add	r7, sp, #0
 8004b04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004b06:	bf00      	nop
 8004b08:	370c      	adds	r7, #12
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b10:	4770      	bx	lr
	...

08004b14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b085      	sub	sp, #20
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
 8004b1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	4a40      	ldr	r2, [pc, #256]	; (8004c28 <TIM_Base_SetConfig+0x114>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d013      	beq.n	8004b54 <TIM_Base_SetConfig+0x40>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b32:	d00f      	beq.n	8004b54 <TIM_Base_SetConfig+0x40>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	4a3d      	ldr	r2, [pc, #244]	; (8004c2c <TIM_Base_SetConfig+0x118>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d00b      	beq.n	8004b54 <TIM_Base_SetConfig+0x40>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	4a3c      	ldr	r2, [pc, #240]	; (8004c30 <TIM_Base_SetConfig+0x11c>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d007      	beq.n	8004b54 <TIM_Base_SetConfig+0x40>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	4a3b      	ldr	r2, [pc, #236]	; (8004c34 <TIM_Base_SetConfig+0x120>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d003      	beq.n	8004b54 <TIM_Base_SetConfig+0x40>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	4a3a      	ldr	r2, [pc, #232]	; (8004c38 <TIM_Base_SetConfig+0x124>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d108      	bne.n	8004b66 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	68fa      	ldr	r2, [r7, #12]
 8004b62:	4313      	orrs	r3, r2
 8004b64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	4a2f      	ldr	r2, [pc, #188]	; (8004c28 <TIM_Base_SetConfig+0x114>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d02b      	beq.n	8004bc6 <TIM_Base_SetConfig+0xb2>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b74:	d027      	beq.n	8004bc6 <TIM_Base_SetConfig+0xb2>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	4a2c      	ldr	r2, [pc, #176]	; (8004c2c <TIM_Base_SetConfig+0x118>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d023      	beq.n	8004bc6 <TIM_Base_SetConfig+0xb2>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	4a2b      	ldr	r2, [pc, #172]	; (8004c30 <TIM_Base_SetConfig+0x11c>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d01f      	beq.n	8004bc6 <TIM_Base_SetConfig+0xb2>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	4a2a      	ldr	r2, [pc, #168]	; (8004c34 <TIM_Base_SetConfig+0x120>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d01b      	beq.n	8004bc6 <TIM_Base_SetConfig+0xb2>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	4a29      	ldr	r2, [pc, #164]	; (8004c38 <TIM_Base_SetConfig+0x124>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d017      	beq.n	8004bc6 <TIM_Base_SetConfig+0xb2>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	4a28      	ldr	r2, [pc, #160]	; (8004c3c <TIM_Base_SetConfig+0x128>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d013      	beq.n	8004bc6 <TIM_Base_SetConfig+0xb2>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	4a27      	ldr	r2, [pc, #156]	; (8004c40 <TIM_Base_SetConfig+0x12c>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d00f      	beq.n	8004bc6 <TIM_Base_SetConfig+0xb2>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	4a26      	ldr	r2, [pc, #152]	; (8004c44 <TIM_Base_SetConfig+0x130>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d00b      	beq.n	8004bc6 <TIM_Base_SetConfig+0xb2>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	4a25      	ldr	r2, [pc, #148]	; (8004c48 <TIM_Base_SetConfig+0x134>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d007      	beq.n	8004bc6 <TIM_Base_SetConfig+0xb2>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	4a24      	ldr	r2, [pc, #144]	; (8004c4c <TIM_Base_SetConfig+0x138>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d003      	beq.n	8004bc6 <TIM_Base_SetConfig+0xb2>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	4a23      	ldr	r2, [pc, #140]	; (8004c50 <TIM_Base_SetConfig+0x13c>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d108      	bne.n	8004bd8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bcc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	68db      	ldr	r3, [r3, #12]
 8004bd2:	68fa      	ldr	r2, [r7, #12]
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	695b      	ldr	r3, [r3, #20]
 8004be2:	4313      	orrs	r3, r2
 8004be4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	68fa      	ldr	r2, [r7, #12]
 8004bea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	689a      	ldr	r2, [r3, #8]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	681a      	ldr	r2, [r3, #0]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	4a0a      	ldr	r2, [pc, #40]	; (8004c28 <TIM_Base_SetConfig+0x114>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d003      	beq.n	8004c0c <TIM_Base_SetConfig+0xf8>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	4a0c      	ldr	r2, [pc, #48]	; (8004c38 <TIM_Base_SetConfig+0x124>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d103      	bne.n	8004c14 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	691a      	ldr	r2, [r3, #16]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2201      	movs	r2, #1
 8004c18:	615a      	str	r2, [r3, #20]
}
 8004c1a:	bf00      	nop
 8004c1c:	3714      	adds	r7, #20
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c24:	4770      	bx	lr
 8004c26:	bf00      	nop
 8004c28:	40010000 	.word	0x40010000
 8004c2c:	40000400 	.word	0x40000400
 8004c30:	40000800 	.word	0x40000800
 8004c34:	40000c00 	.word	0x40000c00
 8004c38:	40010400 	.word	0x40010400
 8004c3c:	40014000 	.word	0x40014000
 8004c40:	40014400 	.word	0x40014400
 8004c44:	40014800 	.word	0x40014800
 8004c48:	40001800 	.word	0x40001800
 8004c4c:	40001c00 	.word	0x40001c00
 8004c50:	40002000 	.word	0x40002000

08004c54 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b087      	sub	sp, #28
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
 8004c5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6a1b      	ldr	r3, [r3, #32]
 8004c62:	f023 0201 	bic.w	r2, r3, #1
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6a1b      	ldr	r3, [r3, #32]
 8004c6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	699b      	ldr	r3, [r3, #24]
 8004c7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	f023 0303 	bic.w	r3, r3, #3
 8004c8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	68fa      	ldr	r2, [r7, #12]
 8004c92:	4313      	orrs	r3, r2
 8004c94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	f023 0302 	bic.w	r3, r3, #2
 8004c9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	689b      	ldr	r3, [r3, #8]
 8004ca2:	697a      	ldr	r2, [r7, #20]
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	4a20      	ldr	r2, [pc, #128]	; (8004d2c <TIM_OC1_SetConfig+0xd8>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d003      	beq.n	8004cb8 <TIM_OC1_SetConfig+0x64>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	4a1f      	ldr	r2, [pc, #124]	; (8004d30 <TIM_OC1_SetConfig+0xdc>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d10c      	bne.n	8004cd2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	f023 0308 	bic.w	r3, r3, #8
 8004cbe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	68db      	ldr	r3, [r3, #12]
 8004cc4:	697a      	ldr	r2, [r7, #20]
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	f023 0304 	bic.w	r3, r3, #4
 8004cd0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	4a15      	ldr	r2, [pc, #84]	; (8004d2c <TIM_OC1_SetConfig+0xd8>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d003      	beq.n	8004ce2 <TIM_OC1_SetConfig+0x8e>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	4a14      	ldr	r2, [pc, #80]	; (8004d30 <TIM_OC1_SetConfig+0xdc>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d111      	bne.n	8004d06 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ce8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004cf0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	695b      	ldr	r3, [r3, #20]
 8004cf6:	693a      	ldr	r2, [r7, #16]
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	699b      	ldr	r3, [r3, #24]
 8004d00:	693a      	ldr	r2, [r7, #16]
 8004d02:	4313      	orrs	r3, r2
 8004d04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	693a      	ldr	r2, [r7, #16]
 8004d0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	68fa      	ldr	r2, [r7, #12]
 8004d10:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	685a      	ldr	r2, [r3, #4]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	697a      	ldr	r2, [r7, #20]
 8004d1e:	621a      	str	r2, [r3, #32]
}
 8004d20:	bf00      	nop
 8004d22:	371c      	adds	r7, #28
 8004d24:	46bd      	mov	sp, r7
 8004d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2a:	4770      	bx	lr
 8004d2c:	40010000 	.word	0x40010000
 8004d30:	40010400 	.word	0x40010400

08004d34 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b087      	sub	sp, #28
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
 8004d3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6a1b      	ldr	r3, [r3, #32]
 8004d42:	f023 0210 	bic.w	r2, r3, #16
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6a1b      	ldr	r3, [r3, #32]
 8004d4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	699b      	ldr	r3, [r3, #24]
 8004d5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	021b      	lsls	r3, r3, #8
 8004d72:	68fa      	ldr	r2, [r7, #12]
 8004d74:	4313      	orrs	r3, r2
 8004d76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	f023 0320 	bic.w	r3, r3, #32
 8004d7e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	689b      	ldr	r3, [r3, #8]
 8004d84:	011b      	lsls	r3, r3, #4
 8004d86:	697a      	ldr	r2, [r7, #20]
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	4a22      	ldr	r2, [pc, #136]	; (8004e18 <TIM_OC2_SetConfig+0xe4>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d003      	beq.n	8004d9c <TIM_OC2_SetConfig+0x68>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	4a21      	ldr	r2, [pc, #132]	; (8004e1c <TIM_OC2_SetConfig+0xe8>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d10d      	bne.n	8004db8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004da2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	68db      	ldr	r3, [r3, #12]
 8004da8:	011b      	lsls	r3, r3, #4
 8004daa:	697a      	ldr	r2, [r7, #20]
 8004dac:	4313      	orrs	r3, r2
 8004dae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004db6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	4a17      	ldr	r2, [pc, #92]	; (8004e18 <TIM_OC2_SetConfig+0xe4>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d003      	beq.n	8004dc8 <TIM_OC2_SetConfig+0x94>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	4a16      	ldr	r2, [pc, #88]	; (8004e1c <TIM_OC2_SetConfig+0xe8>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d113      	bne.n	8004df0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004dce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004dd6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	695b      	ldr	r3, [r3, #20]
 8004ddc:	009b      	lsls	r3, r3, #2
 8004dde:	693a      	ldr	r2, [r7, #16]
 8004de0:	4313      	orrs	r3, r2
 8004de2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	699b      	ldr	r3, [r3, #24]
 8004de8:	009b      	lsls	r3, r3, #2
 8004dea:	693a      	ldr	r2, [r7, #16]
 8004dec:	4313      	orrs	r3, r2
 8004dee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	693a      	ldr	r2, [r7, #16]
 8004df4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	68fa      	ldr	r2, [r7, #12]
 8004dfa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	685a      	ldr	r2, [r3, #4]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	697a      	ldr	r2, [r7, #20]
 8004e08:	621a      	str	r2, [r3, #32]
}
 8004e0a:	bf00      	nop
 8004e0c:	371c      	adds	r7, #28
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e14:	4770      	bx	lr
 8004e16:	bf00      	nop
 8004e18:	40010000 	.word	0x40010000
 8004e1c:	40010400 	.word	0x40010400

08004e20 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b087      	sub	sp, #28
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
 8004e28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6a1b      	ldr	r3, [r3, #32]
 8004e2e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6a1b      	ldr	r3, [r3, #32]
 8004e3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	69db      	ldr	r3, [r3, #28]
 8004e46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	f023 0303 	bic.w	r3, r3, #3
 8004e56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	68fa      	ldr	r2, [r7, #12]
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004e68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	021b      	lsls	r3, r3, #8
 8004e70:	697a      	ldr	r2, [r7, #20]
 8004e72:	4313      	orrs	r3, r2
 8004e74:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	4a21      	ldr	r2, [pc, #132]	; (8004f00 <TIM_OC3_SetConfig+0xe0>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d003      	beq.n	8004e86 <TIM_OC3_SetConfig+0x66>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	4a20      	ldr	r2, [pc, #128]	; (8004f04 <TIM_OC3_SetConfig+0xe4>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d10d      	bne.n	8004ea2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004e8c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	68db      	ldr	r3, [r3, #12]
 8004e92:	021b      	lsls	r3, r3, #8
 8004e94:	697a      	ldr	r2, [r7, #20]
 8004e96:	4313      	orrs	r3, r2
 8004e98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004ea0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	4a16      	ldr	r2, [pc, #88]	; (8004f00 <TIM_OC3_SetConfig+0xe0>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d003      	beq.n	8004eb2 <TIM_OC3_SetConfig+0x92>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	4a15      	ldr	r2, [pc, #84]	; (8004f04 <TIM_OC3_SetConfig+0xe4>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d113      	bne.n	8004eda <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004eb8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ec0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	695b      	ldr	r3, [r3, #20]
 8004ec6:	011b      	lsls	r3, r3, #4
 8004ec8:	693a      	ldr	r2, [r7, #16]
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	699b      	ldr	r3, [r3, #24]
 8004ed2:	011b      	lsls	r3, r3, #4
 8004ed4:	693a      	ldr	r2, [r7, #16]
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	693a      	ldr	r2, [r7, #16]
 8004ede:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	68fa      	ldr	r2, [r7, #12]
 8004ee4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	685a      	ldr	r2, [r3, #4]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	697a      	ldr	r2, [r7, #20]
 8004ef2:	621a      	str	r2, [r3, #32]
}
 8004ef4:	bf00      	nop
 8004ef6:	371c      	adds	r7, #28
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efe:	4770      	bx	lr
 8004f00:	40010000 	.word	0x40010000
 8004f04:	40010400 	.word	0x40010400

08004f08 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b087      	sub	sp, #28
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
 8004f10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6a1b      	ldr	r3, [r3, #32]
 8004f16:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6a1b      	ldr	r3, [r3, #32]
 8004f22:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	69db      	ldr	r3, [r3, #28]
 8004f2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	021b      	lsls	r3, r3, #8
 8004f46:	68fa      	ldr	r2, [r7, #12]
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004f52:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	689b      	ldr	r3, [r3, #8]
 8004f58:	031b      	lsls	r3, r3, #12
 8004f5a:	693a      	ldr	r2, [r7, #16]
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	4a12      	ldr	r2, [pc, #72]	; (8004fac <TIM_OC4_SetConfig+0xa4>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d003      	beq.n	8004f70 <TIM_OC4_SetConfig+0x68>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	4a11      	ldr	r2, [pc, #68]	; (8004fb0 <TIM_OC4_SetConfig+0xa8>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d109      	bne.n	8004f84 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f76:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	695b      	ldr	r3, [r3, #20]
 8004f7c:	019b      	lsls	r3, r3, #6
 8004f7e:	697a      	ldr	r2, [r7, #20]
 8004f80:	4313      	orrs	r3, r2
 8004f82:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	697a      	ldr	r2, [r7, #20]
 8004f88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	68fa      	ldr	r2, [r7, #12]
 8004f8e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	685a      	ldr	r2, [r3, #4]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	693a      	ldr	r2, [r7, #16]
 8004f9c:	621a      	str	r2, [r3, #32]
}
 8004f9e:	bf00      	nop
 8004fa0:	371c      	adds	r7, #28
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa8:	4770      	bx	lr
 8004faa:	bf00      	nop
 8004fac:	40010000 	.word	0x40010000
 8004fb0:	40010400 	.word	0x40010400

08004fb4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b087      	sub	sp, #28
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	60f8      	str	r0, [r7, #12]
 8004fbc:	60b9      	str	r1, [r7, #8]
 8004fbe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	6a1b      	ldr	r3, [r3, #32]
 8004fc4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	6a1b      	ldr	r3, [r3, #32]
 8004fca:	f023 0201 	bic.w	r2, r3, #1
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	699b      	ldr	r3, [r3, #24]
 8004fd6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004fde:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	011b      	lsls	r3, r3, #4
 8004fe4:	693a      	ldr	r2, [r7, #16]
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	f023 030a 	bic.w	r3, r3, #10
 8004ff0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004ff2:	697a      	ldr	r2, [r7, #20]
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	693a      	ldr	r2, [r7, #16]
 8004ffe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	697a      	ldr	r2, [r7, #20]
 8005004:	621a      	str	r2, [r3, #32]
}
 8005006:	bf00      	nop
 8005008:	371c      	adds	r7, #28
 800500a:	46bd      	mov	sp, r7
 800500c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005010:	4770      	bx	lr

08005012 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005012:	b480      	push	{r7}
 8005014:	b087      	sub	sp, #28
 8005016:	af00      	add	r7, sp, #0
 8005018:	60f8      	str	r0, [r7, #12]
 800501a:	60b9      	str	r1, [r7, #8]
 800501c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	6a1b      	ldr	r3, [r3, #32]
 8005022:	f023 0210 	bic.w	r2, r3, #16
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	699b      	ldr	r3, [r3, #24]
 800502e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	6a1b      	ldr	r3, [r3, #32]
 8005034:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800503c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	031b      	lsls	r3, r3, #12
 8005042:	697a      	ldr	r2, [r7, #20]
 8005044:	4313      	orrs	r3, r2
 8005046:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800504e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	011b      	lsls	r3, r3, #4
 8005054:	693a      	ldr	r2, [r7, #16]
 8005056:	4313      	orrs	r3, r2
 8005058:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	697a      	ldr	r2, [r7, #20]
 800505e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	693a      	ldr	r2, [r7, #16]
 8005064:	621a      	str	r2, [r3, #32]
}
 8005066:	bf00      	nop
 8005068:	371c      	adds	r7, #28
 800506a:	46bd      	mov	sp, r7
 800506c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005070:	4770      	bx	lr

08005072 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005072:	b480      	push	{r7}
 8005074:	b085      	sub	sp, #20
 8005076:	af00      	add	r7, sp, #0
 8005078:	6078      	str	r0, [r7, #4]
 800507a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005088:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800508a:	683a      	ldr	r2, [r7, #0]
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	4313      	orrs	r3, r2
 8005090:	f043 0307 	orr.w	r3, r3, #7
 8005094:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	68fa      	ldr	r2, [r7, #12]
 800509a:	609a      	str	r2, [r3, #8]
}
 800509c:	bf00      	nop
 800509e:	3714      	adds	r7, #20
 80050a0:	46bd      	mov	sp, r7
 80050a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a6:	4770      	bx	lr

080050a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b087      	sub	sp, #28
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	60f8      	str	r0, [r7, #12]
 80050b0:	60b9      	str	r1, [r7, #8]
 80050b2:	607a      	str	r2, [r7, #4]
 80050b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	689b      	ldr	r3, [r3, #8]
 80050ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80050c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	021a      	lsls	r2, r3, #8
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	431a      	orrs	r2, r3
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	4313      	orrs	r3, r2
 80050d0:	697a      	ldr	r2, [r7, #20]
 80050d2:	4313      	orrs	r3, r2
 80050d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	697a      	ldr	r2, [r7, #20]
 80050da:	609a      	str	r2, [r3, #8]
}
 80050dc:	bf00      	nop
 80050de:	371c      	adds	r7, #28
 80050e0:	46bd      	mov	sp, r7
 80050e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e6:	4770      	bx	lr

080050e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b085      	sub	sp, #20
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
 80050f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050f8:	2b01      	cmp	r3, #1
 80050fa:	d101      	bne.n	8005100 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80050fc:	2302      	movs	r3, #2
 80050fe:	e05a      	b.n	80051b6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2201      	movs	r2, #1
 8005104:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2202      	movs	r2, #2
 800510c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005126:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	68fa      	ldr	r2, [r7, #12]
 800512e:	4313      	orrs	r3, r2
 8005130:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	68fa      	ldr	r2, [r7, #12]
 8005138:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a21      	ldr	r2, [pc, #132]	; (80051c4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d022      	beq.n	800518a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800514c:	d01d      	beq.n	800518a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4a1d      	ldr	r2, [pc, #116]	; (80051c8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d018      	beq.n	800518a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a1b      	ldr	r2, [pc, #108]	; (80051cc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d013      	beq.n	800518a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a1a      	ldr	r2, [pc, #104]	; (80051d0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d00e      	beq.n	800518a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a18      	ldr	r2, [pc, #96]	; (80051d4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d009      	beq.n	800518a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a17      	ldr	r2, [pc, #92]	; (80051d8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d004      	beq.n	800518a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a15      	ldr	r2, [pc, #84]	; (80051dc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d10c      	bne.n	80051a4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005190:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	68ba      	ldr	r2, [r7, #8]
 8005198:	4313      	orrs	r3, r2
 800519a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	68ba      	ldr	r2, [r7, #8]
 80051a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2201      	movs	r2, #1
 80051a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2200      	movs	r2, #0
 80051b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80051b4:	2300      	movs	r3, #0
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	3714      	adds	r7, #20
 80051ba:	46bd      	mov	sp, r7
 80051bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c0:	4770      	bx	lr
 80051c2:	bf00      	nop
 80051c4:	40010000 	.word	0x40010000
 80051c8:	40000400 	.word	0x40000400
 80051cc:	40000800 	.word	0x40000800
 80051d0:	40000c00 	.word	0x40000c00
 80051d4:	40010400 	.word	0x40010400
 80051d8:	40014000 	.word	0x40014000
 80051dc:	40001800 	.word	0x40001800

080051e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b083      	sub	sp, #12
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80051e8:	bf00      	nop
 80051ea:	370c      	adds	r7, #12
 80051ec:	46bd      	mov	sp, r7
 80051ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f2:	4770      	bx	lr

080051f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b083      	sub	sp, #12
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80051fc:	bf00      	nop
 80051fe:	370c      	adds	r7, #12
 8005200:	46bd      	mov	sp, r7
 8005202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005206:	4770      	bx	lr

08005208 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b082      	sub	sp, #8
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d101      	bne.n	800521a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005216:	2301      	movs	r3, #1
 8005218:	e03f      	b.n	800529a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005220:	b2db      	uxtb	r3, r3
 8005222:	2b00      	cmp	r3, #0
 8005224:	d106      	bne.n	8005234 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2200      	movs	r2, #0
 800522a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	f7fc fd08 	bl	8001c44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2224      	movs	r2, #36	; 0x24
 8005238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	68da      	ldr	r2, [r3, #12]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800524a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800524c:	6878      	ldr	r0, [r7, #4]
 800524e:	f000 fc7b 	bl	8005b48 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	691a      	ldr	r2, [r3, #16]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005260:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	695a      	ldr	r2, [r3, #20]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005270:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	68da      	ldr	r2, [r3, #12]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005280:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2200      	movs	r2, #0
 8005286:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2220      	movs	r2, #32
 800528c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2220      	movs	r2, #32
 8005294:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005298:	2300      	movs	r3, #0
}
 800529a:	4618      	mov	r0, r3
 800529c:	3708      	adds	r7, #8
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}
	...

080052a4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b0ba      	sub	sp, #232	; 0xe8
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	68db      	ldr	r3, [r3, #12]
 80052bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	695b      	ldr	r3, [r3, #20]
 80052c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80052ca:	2300      	movs	r3, #0
 80052cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80052d0:	2300      	movs	r3, #0
 80052d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80052d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052da:	f003 030f 	and.w	r3, r3, #15
 80052de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80052e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d10f      	bne.n	800530a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80052ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052ee:	f003 0320 	and.w	r3, r3, #32
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d009      	beq.n	800530a <HAL_UART_IRQHandler+0x66>
 80052f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052fa:	f003 0320 	and.w	r3, r3, #32
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d003      	beq.n	800530a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f000 fb65 	bl	80059d2 <UART_Receive_IT>
      return;
 8005308:	e256      	b.n	80057b8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800530a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800530e:	2b00      	cmp	r3, #0
 8005310:	f000 80de 	beq.w	80054d0 <HAL_UART_IRQHandler+0x22c>
 8005314:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005318:	f003 0301 	and.w	r3, r3, #1
 800531c:	2b00      	cmp	r3, #0
 800531e:	d106      	bne.n	800532e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005320:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005324:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005328:	2b00      	cmp	r3, #0
 800532a:	f000 80d1 	beq.w	80054d0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800532e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005332:	f003 0301 	and.w	r3, r3, #1
 8005336:	2b00      	cmp	r3, #0
 8005338:	d00b      	beq.n	8005352 <HAL_UART_IRQHandler+0xae>
 800533a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800533e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005342:	2b00      	cmp	r3, #0
 8005344:	d005      	beq.n	8005352 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800534a:	f043 0201 	orr.w	r2, r3, #1
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005352:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005356:	f003 0304 	and.w	r3, r3, #4
 800535a:	2b00      	cmp	r3, #0
 800535c:	d00b      	beq.n	8005376 <HAL_UART_IRQHandler+0xd2>
 800535e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005362:	f003 0301 	and.w	r3, r3, #1
 8005366:	2b00      	cmp	r3, #0
 8005368:	d005      	beq.n	8005376 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800536e:	f043 0202 	orr.w	r2, r3, #2
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005376:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800537a:	f003 0302 	and.w	r3, r3, #2
 800537e:	2b00      	cmp	r3, #0
 8005380:	d00b      	beq.n	800539a <HAL_UART_IRQHandler+0xf6>
 8005382:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005386:	f003 0301 	and.w	r3, r3, #1
 800538a:	2b00      	cmp	r3, #0
 800538c:	d005      	beq.n	800539a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005392:	f043 0204 	orr.w	r2, r3, #4
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800539a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800539e:	f003 0308 	and.w	r3, r3, #8
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d011      	beq.n	80053ca <HAL_UART_IRQHandler+0x126>
 80053a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053aa:	f003 0320 	and.w	r3, r3, #32
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d105      	bne.n	80053be <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80053b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80053b6:	f003 0301 	and.w	r3, r3, #1
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d005      	beq.n	80053ca <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053c2:	f043 0208 	orr.w	r2, r3, #8
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	f000 81ed 	beq.w	80057ae <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80053d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053d8:	f003 0320 	and.w	r3, r3, #32
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d008      	beq.n	80053f2 <HAL_UART_IRQHandler+0x14e>
 80053e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053e4:	f003 0320 	and.w	r3, r3, #32
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d002      	beq.n	80053f2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80053ec:	6878      	ldr	r0, [r7, #4]
 80053ee:	f000 faf0 	bl	80059d2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	695b      	ldr	r3, [r3, #20]
 80053f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053fc:	2b40      	cmp	r3, #64	; 0x40
 80053fe:	bf0c      	ite	eq
 8005400:	2301      	moveq	r3, #1
 8005402:	2300      	movne	r3, #0
 8005404:	b2db      	uxtb	r3, r3
 8005406:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800540e:	f003 0308 	and.w	r3, r3, #8
 8005412:	2b00      	cmp	r3, #0
 8005414:	d103      	bne.n	800541e <HAL_UART_IRQHandler+0x17a>
 8005416:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800541a:	2b00      	cmp	r3, #0
 800541c:	d04f      	beq.n	80054be <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800541e:	6878      	ldr	r0, [r7, #4]
 8005420:	f000 f9f8 	bl	8005814 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	695b      	ldr	r3, [r3, #20]
 800542a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800542e:	2b40      	cmp	r3, #64	; 0x40
 8005430:	d141      	bne.n	80054b6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	3314      	adds	r3, #20
 8005438:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800543c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005440:	e853 3f00 	ldrex	r3, [r3]
 8005444:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005448:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800544c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005450:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	3314      	adds	r3, #20
 800545a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800545e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005462:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005466:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800546a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800546e:	e841 2300 	strex	r3, r2, [r1]
 8005472:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005476:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800547a:	2b00      	cmp	r3, #0
 800547c:	d1d9      	bne.n	8005432 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005482:	2b00      	cmp	r3, #0
 8005484:	d013      	beq.n	80054ae <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800548a:	4a7d      	ldr	r2, [pc, #500]	; (8005680 <HAL_UART_IRQHandler+0x3dc>)
 800548c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005492:	4618      	mov	r0, r3
 8005494:	f7fd f9f8 	bl	8002888 <HAL_DMA_Abort_IT>
 8005498:	4603      	mov	r3, r0
 800549a:	2b00      	cmp	r3, #0
 800549c:	d016      	beq.n	80054cc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054a4:	687a      	ldr	r2, [r7, #4]
 80054a6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80054a8:	4610      	mov	r0, r2
 80054aa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054ac:	e00e      	b.n	80054cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f000 f99a 	bl	80057e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054b4:	e00a      	b.n	80054cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f000 f996 	bl	80057e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054bc:	e006      	b.n	80054cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80054be:	6878      	ldr	r0, [r7, #4]
 80054c0:	f000 f992 	bl	80057e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2200      	movs	r2, #0
 80054c8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80054ca:	e170      	b.n	80057ae <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054cc:	bf00      	nop
    return;
 80054ce:	e16e      	b.n	80057ae <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054d4:	2b01      	cmp	r3, #1
 80054d6:	f040 814a 	bne.w	800576e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80054da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054de:	f003 0310 	and.w	r3, r3, #16
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	f000 8143 	beq.w	800576e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80054e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054ec:	f003 0310 	and.w	r3, r3, #16
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	f000 813c 	beq.w	800576e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80054f6:	2300      	movs	r3, #0
 80054f8:	60bb      	str	r3, [r7, #8]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	60bb      	str	r3, [r7, #8]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	60bb      	str	r3, [r7, #8]
 800550a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	695b      	ldr	r3, [r3, #20]
 8005512:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005516:	2b40      	cmp	r3, #64	; 0x40
 8005518:	f040 80b4 	bne.w	8005684 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005528:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800552c:	2b00      	cmp	r3, #0
 800552e:	f000 8140 	beq.w	80057b2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005536:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800553a:	429a      	cmp	r2, r3
 800553c:	f080 8139 	bcs.w	80057b2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005546:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800554c:	69db      	ldr	r3, [r3, #28]
 800554e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005552:	f000 8088 	beq.w	8005666 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	330c      	adds	r3, #12
 800555c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005560:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005564:	e853 3f00 	ldrex	r3, [r3]
 8005568:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800556c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005570:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005574:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	330c      	adds	r3, #12
 800557e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005582:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005586:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800558a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800558e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005592:	e841 2300 	strex	r3, r2, [r1]
 8005596:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800559a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d1d9      	bne.n	8005556 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	3314      	adds	r3, #20
 80055a8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80055ac:	e853 3f00 	ldrex	r3, [r3]
 80055b0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80055b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80055b4:	f023 0301 	bic.w	r3, r3, #1
 80055b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	3314      	adds	r3, #20
 80055c2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80055c6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80055ca:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055cc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80055ce:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80055d2:	e841 2300 	strex	r3, r2, [r1]
 80055d6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80055d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d1e1      	bne.n	80055a2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	3314      	adds	r3, #20
 80055e4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80055e8:	e853 3f00 	ldrex	r3, [r3]
 80055ec:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80055ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80055f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	3314      	adds	r3, #20
 80055fe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005602:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005604:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005606:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005608:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800560a:	e841 2300 	strex	r3, r2, [r1]
 800560e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005610:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005612:	2b00      	cmp	r3, #0
 8005614:	d1e3      	bne.n	80055de <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2220      	movs	r2, #32
 800561a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2200      	movs	r2, #0
 8005622:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	330c      	adds	r3, #12
 800562a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800562c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800562e:	e853 3f00 	ldrex	r3, [r3]
 8005632:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005634:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005636:	f023 0310 	bic.w	r3, r3, #16
 800563a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	330c      	adds	r3, #12
 8005644:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005648:	65ba      	str	r2, [r7, #88]	; 0x58
 800564a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800564c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800564e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005650:	e841 2300 	strex	r3, r2, [r1]
 8005654:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005656:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005658:	2b00      	cmp	r3, #0
 800565a:	d1e3      	bne.n	8005624 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005660:	4618      	mov	r0, r3
 8005662:	f7fd f8a1 	bl	80027a8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800566e:	b29b      	uxth	r3, r3
 8005670:	1ad3      	subs	r3, r2, r3
 8005672:	b29b      	uxth	r3, r3
 8005674:	4619      	mov	r1, r3
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f000 f8c0 	bl	80057fc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800567c:	e099      	b.n	80057b2 <HAL_UART_IRQHandler+0x50e>
 800567e:	bf00      	nop
 8005680:	080058db 	.word	0x080058db
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800568c:	b29b      	uxth	r3, r3
 800568e:	1ad3      	subs	r3, r2, r3
 8005690:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005698:	b29b      	uxth	r3, r3
 800569a:	2b00      	cmp	r3, #0
 800569c:	f000 808b 	beq.w	80057b6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80056a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	f000 8086 	beq.w	80057b6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	330c      	adds	r3, #12
 80056b0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056b4:	e853 3f00 	ldrex	r3, [r3]
 80056b8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80056ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056bc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80056c0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	330c      	adds	r3, #12
 80056ca:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80056ce:	647a      	str	r2, [r7, #68]	; 0x44
 80056d0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056d2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80056d4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80056d6:	e841 2300 	strex	r3, r2, [r1]
 80056da:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80056dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d1e3      	bne.n	80056aa <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	3314      	adds	r3, #20
 80056e8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ec:	e853 3f00 	ldrex	r3, [r3]
 80056f0:	623b      	str	r3, [r7, #32]
   return(result);
 80056f2:	6a3b      	ldr	r3, [r7, #32]
 80056f4:	f023 0301 	bic.w	r3, r3, #1
 80056f8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	3314      	adds	r3, #20
 8005702:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005706:	633a      	str	r2, [r7, #48]	; 0x30
 8005708:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800570a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800570c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800570e:	e841 2300 	strex	r3, r2, [r1]
 8005712:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005716:	2b00      	cmp	r3, #0
 8005718:	d1e3      	bne.n	80056e2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2220      	movs	r2, #32
 800571e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2200      	movs	r2, #0
 8005726:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	330c      	adds	r3, #12
 800572e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005730:	693b      	ldr	r3, [r7, #16]
 8005732:	e853 3f00 	ldrex	r3, [r3]
 8005736:	60fb      	str	r3, [r7, #12]
   return(result);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	f023 0310 	bic.w	r3, r3, #16
 800573e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	330c      	adds	r3, #12
 8005748:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800574c:	61fa      	str	r2, [r7, #28]
 800574e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005750:	69b9      	ldr	r1, [r7, #24]
 8005752:	69fa      	ldr	r2, [r7, #28]
 8005754:	e841 2300 	strex	r3, r2, [r1]
 8005758:	617b      	str	r3, [r7, #20]
   return(result);
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d1e3      	bne.n	8005728 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005760:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005764:	4619      	mov	r1, r3
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	f000 f848 	bl	80057fc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800576c:	e023      	b.n	80057b6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800576e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005772:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005776:	2b00      	cmp	r3, #0
 8005778:	d009      	beq.n	800578e <HAL_UART_IRQHandler+0x4ea>
 800577a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800577e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005782:	2b00      	cmp	r3, #0
 8005784:	d003      	beq.n	800578e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	f000 f8bb 	bl	8005902 <UART_Transmit_IT>
    return;
 800578c:	e014      	b.n	80057b8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800578e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005792:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005796:	2b00      	cmp	r3, #0
 8005798:	d00e      	beq.n	80057b8 <HAL_UART_IRQHandler+0x514>
 800579a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800579e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d008      	beq.n	80057b8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	f000 f8fb 	bl	80059a2 <UART_EndTransmit_IT>
    return;
 80057ac:	e004      	b.n	80057b8 <HAL_UART_IRQHandler+0x514>
    return;
 80057ae:	bf00      	nop
 80057b0:	e002      	b.n	80057b8 <HAL_UART_IRQHandler+0x514>
      return;
 80057b2:	bf00      	nop
 80057b4:	e000      	b.n	80057b8 <HAL_UART_IRQHandler+0x514>
      return;
 80057b6:	bf00      	nop
  }
}
 80057b8:	37e8      	adds	r7, #232	; 0xe8
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd80      	pop	{r7, pc}
 80057be:	bf00      	nop

080057c0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b083      	sub	sp, #12
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80057c8:	bf00      	nop
 80057ca:	370c      	adds	r7, #12
 80057cc:	46bd      	mov	sp, r7
 80057ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d2:	4770      	bx	lr

080057d4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80057d4:	b480      	push	{r7}
 80057d6:	b083      	sub	sp, #12
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80057dc:	bf00      	nop
 80057de:	370c      	adds	r7, #12
 80057e0:	46bd      	mov	sp, r7
 80057e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e6:	4770      	bx	lr

080057e8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80057e8:	b480      	push	{r7}
 80057ea:	b083      	sub	sp, #12
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80057f0:	bf00      	nop
 80057f2:	370c      	adds	r7, #12
 80057f4:	46bd      	mov	sp, r7
 80057f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fa:	4770      	bx	lr

080057fc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80057fc:	b480      	push	{r7}
 80057fe:	b083      	sub	sp, #12
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
 8005804:	460b      	mov	r3, r1
 8005806:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005808:	bf00      	nop
 800580a:	370c      	adds	r7, #12
 800580c:	46bd      	mov	sp, r7
 800580e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005812:	4770      	bx	lr

08005814 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005814:	b480      	push	{r7}
 8005816:	b095      	sub	sp, #84	; 0x54
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	330c      	adds	r3, #12
 8005822:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005824:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005826:	e853 3f00 	ldrex	r3, [r3]
 800582a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800582c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800582e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005832:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	330c      	adds	r3, #12
 800583a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800583c:	643a      	str	r2, [r7, #64]	; 0x40
 800583e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005840:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005842:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005844:	e841 2300 	strex	r3, r2, [r1]
 8005848:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800584a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800584c:	2b00      	cmp	r3, #0
 800584e:	d1e5      	bne.n	800581c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	3314      	adds	r3, #20
 8005856:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005858:	6a3b      	ldr	r3, [r7, #32]
 800585a:	e853 3f00 	ldrex	r3, [r3]
 800585e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005860:	69fb      	ldr	r3, [r7, #28]
 8005862:	f023 0301 	bic.w	r3, r3, #1
 8005866:	64bb      	str	r3, [r7, #72]	; 0x48
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	3314      	adds	r3, #20
 800586e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005870:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005872:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005874:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005876:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005878:	e841 2300 	strex	r3, r2, [r1]
 800587c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800587e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005880:	2b00      	cmp	r3, #0
 8005882:	d1e5      	bne.n	8005850 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005888:	2b01      	cmp	r3, #1
 800588a:	d119      	bne.n	80058c0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	330c      	adds	r3, #12
 8005892:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	e853 3f00 	ldrex	r3, [r3]
 800589a:	60bb      	str	r3, [r7, #8]
   return(result);
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	f023 0310 	bic.w	r3, r3, #16
 80058a2:	647b      	str	r3, [r7, #68]	; 0x44
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	330c      	adds	r3, #12
 80058aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80058ac:	61ba      	str	r2, [r7, #24]
 80058ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058b0:	6979      	ldr	r1, [r7, #20]
 80058b2:	69ba      	ldr	r2, [r7, #24]
 80058b4:	e841 2300 	strex	r3, r2, [r1]
 80058b8:	613b      	str	r3, [r7, #16]
   return(result);
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d1e5      	bne.n	800588c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2220      	movs	r2, #32
 80058c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2200      	movs	r2, #0
 80058cc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80058ce:	bf00      	nop
 80058d0:	3754      	adds	r7, #84	; 0x54
 80058d2:	46bd      	mov	sp, r7
 80058d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d8:	4770      	bx	lr

080058da <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80058da:	b580      	push	{r7, lr}
 80058dc:	b084      	sub	sp, #16
 80058de:	af00      	add	r7, sp, #0
 80058e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058e6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	2200      	movs	r2, #0
 80058ec:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	2200      	movs	r2, #0
 80058f2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80058f4:	68f8      	ldr	r0, [r7, #12]
 80058f6:	f7ff ff77 	bl	80057e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80058fa:	bf00      	nop
 80058fc:	3710      	adds	r7, #16
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}

08005902 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005902:	b480      	push	{r7}
 8005904:	b085      	sub	sp, #20
 8005906:	af00      	add	r7, sp, #0
 8005908:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005910:	b2db      	uxtb	r3, r3
 8005912:	2b21      	cmp	r3, #33	; 0x21
 8005914:	d13e      	bne.n	8005994 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	689b      	ldr	r3, [r3, #8]
 800591a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800591e:	d114      	bne.n	800594a <UART_Transmit_IT+0x48>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	691b      	ldr	r3, [r3, #16]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d110      	bne.n	800594a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6a1b      	ldr	r3, [r3, #32]
 800592c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	881b      	ldrh	r3, [r3, #0]
 8005932:	461a      	mov	r2, r3
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800593c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6a1b      	ldr	r3, [r3, #32]
 8005942:	1c9a      	adds	r2, r3, #2
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	621a      	str	r2, [r3, #32]
 8005948:	e008      	b.n	800595c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6a1b      	ldr	r3, [r3, #32]
 800594e:	1c59      	adds	r1, r3, #1
 8005950:	687a      	ldr	r2, [r7, #4]
 8005952:	6211      	str	r1, [r2, #32]
 8005954:	781a      	ldrb	r2, [r3, #0]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005960:	b29b      	uxth	r3, r3
 8005962:	3b01      	subs	r3, #1
 8005964:	b29b      	uxth	r3, r3
 8005966:	687a      	ldr	r2, [r7, #4]
 8005968:	4619      	mov	r1, r3
 800596a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800596c:	2b00      	cmp	r3, #0
 800596e:	d10f      	bne.n	8005990 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	68da      	ldr	r2, [r3, #12]
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800597e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	68da      	ldr	r2, [r3, #12]
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800598e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005990:	2300      	movs	r3, #0
 8005992:	e000      	b.n	8005996 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005994:	2302      	movs	r3, #2
  }
}
 8005996:	4618      	mov	r0, r3
 8005998:	3714      	adds	r7, #20
 800599a:	46bd      	mov	sp, r7
 800599c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a0:	4770      	bx	lr

080059a2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80059a2:	b580      	push	{r7, lr}
 80059a4:	b082      	sub	sp, #8
 80059a6:	af00      	add	r7, sp, #0
 80059a8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	68da      	ldr	r2, [r3, #12]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059b8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2220      	movs	r2, #32
 80059be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f7ff fefc 	bl	80057c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80059c8:	2300      	movs	r3, #0
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	3708      	adds	r7, #8
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}

080059d2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80059d2:	b580      	push	{r7, lr}
 80059d4:	b08c      	sub	sp, #48	; 0x30
 80059d6:	af00      	add	r7, sp, #0
 80059d8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80059e0:	b2db      	uxtb	r3, r3
 80059e2:	2b22      	cmp	r3, #34	; 0x22
 80059e4:	f040 80ab 	bne.w	8005b3e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	689b      	ldr	r3, [r3, #8]
 80059ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059f0:	d117      	bne.n	8005a22 <UART_Receive_IT+0x50>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	691b      	ldr	r3, [r3, #16]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d113      	bne.n	8005a22 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80059fa:	2300      	movs	r3, #0
 80059fc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a02:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	b29b      	uxth	r3, r3
 8005a0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a10:	b29a      	uxth	r2, r3
 8005a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a14:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a1a:	1c9a      	adds	r2, r3, #2
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	629a      	str	r2, [r3, #40]	; 0x28
 8005a20:	e026      	b.n	8005a70 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a26:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005a28:	2300      	movs	r3, #0
 8005a2a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	689b      	ldr	r3, [r3, #8]
 8005a30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a34:	d007      	beq.n	8005a46 <UART_Receive_IT+0x74>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	689b      	ldr	r3, [r3, #8]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d10a      	bne.n	8005a54 <UART_Receive_IT+0x82>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	691b      	ldr	r3, [r3, #16]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d106      	bne.n	8005a54 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	b2da      	uxtb	r2, r3
 8005a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a50:	701a      	strb	r2, [r3, #0]
 8005a52:	e008      	b.n	8005a66 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	b2db      	uxtb	r3, r3
 8005a5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a60:	b2da      	uxtb	r2, r3
 8005a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a64:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a6a:	1c5a      	adds	r2, r3, #1
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005a74:	b29b      	uxth	r3, r3
 8005a76:	3b01      	subs	r3, #1
 8005a78:	b29b      	uxth	r3, r3
 8005a7a:	687a      	ldr	r2, [r7, #4]
 8005a7c:	4619      	mov	r1, r3
 8005a7e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d15a      	bne.n	8005b3a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	68da      	ldr	r2, [r3, #12]
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f022 0220 	bic.w	r2, r2, #32
 8005a92:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	68da      	ldr	r2, [r3, #12]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005aa2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	695a      	ldr	r2, [r3, #20]
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f022 0201 	bic.w	r2, r2, #1
 8005ab2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2220      	movs	r2, #32
 8005ab8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ac0:	2b01      	cmp	r3, #1
 8005ac2:	d135      	bne.n	8005b30 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	330c      	adds	r3, #12
 8005ad0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	e853 3f00 	ldrex	r3, [r3]
 8005ad8:	613b      	str	r3, [r7, #16]
   return(result);
 8005ada:	693b      	ldr	r3, [r7, #16]
 8005adc:	f023 0310 	bic.w	r3, r3, #16
 8005ae0:	627b      	str	r3, [r7, #36]	; 0x24
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	330c      	adds	r3, #12
 8005ae8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005aea:	623a      	str	r2, [r7, #32]
 8005aec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aee:	69f9      	ldr	r1, [r7, #28]
 8005af0:	6a3a      	ldr	r2, [r7, #32]
 8005af2:	e841 2300 	strex	r3, r2, [r1]
 8005af6:	61bb      	str	r3, [r7, #24]
   return(result);
 8005af8:	69bb      	ldr	r3, [r7, #24]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d1e5      	bne.n	8005aca <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f003 0310 	and.w	r3, r3, #16
 8005b08:	2b10      	cmp	r3, #16
 8005b0a:	d10a      	bne.n	8005b22 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	60fb      	str	r3, [r7, #12]
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	60fb      	str	r3, [r7, #12]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	685b      	ldr	r3, [r3, #4]
 8005b1e:	60fb      	str	r3, [r7, #12]
 8005b20:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005b26:	4619      	mov	r1, r3
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	f7ff fe67 	bl	80057fc <HAL_UARTEx_RxEventCallback>
 8005b2e:	e002      	b.n	8005b36 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005b30:	6878      	ldr	r0, [r7, #4]
 8005b32:	f7ff fe4f 	bl	80057d4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005b36:	2300      	movs	r3, #0
 8005b38:	e002      	b.n	8005b40 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	e000      	b.n	8005b40 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005b3e:	2302      	movs	r3, #2
  }
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	3730      	adds	r7, #48	; 0x30
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bd80      	pop	{r7, pc}

08005b48 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b4c:	b09f      	sub	sp, #124	; 0x7c
 8005b4e:	af00      	add	r7, sp, #0
 8005b50:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	691b      	ldr	r3, [r3, #16]
 8005b58:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005b5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b5e:	68d9      	ldr	r1, [r3, #12]
 8005b60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b62:	681a      	ldr	r2, [r3, #0]
 8005b64:	ea40 0301 	orr.w	r3, r0, r1
 8005b68:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005b6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b6c:	689a      	ldr	r2, [r3, #8]
 8005b6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b70:	691b      	ldr	r3, [r3, #16]
 8005b72:	431a      	orrs	r2, r3
 8005b74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b76:	695b      	ldr	r3, [r3, #20]
 8005b78:	431a      	orrs	r2, r3
 8005b7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b7c:	69db      	ldr	r3, [r3, #28]
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005b82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	68db      	ldr	r3, [r3, #12]
 8005b88:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005b8c:	f021 010c 	bic.w	r1, r1, #12
 8005b90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b92:	681a      	ldr	r2, [r3, #0]
 8005b94:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005b96:	430b      	orrs	r3, r1
 8005b98:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005b9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	695b      	ldr	r3, [r3, #20]
 8005ba0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005ba4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ba6:	6999      	ldr	r1, [r3, #24]
 8005ba8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005baa:	681a      	ldr	r2, [r3, #0]
 8005bac:	ea40 0301 	orr.w	r3, r0, r1
 8005bb0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005bb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bb4:	681a      	ldr	r2, [r3, #0]
 8005bb6:	4bc5      	ldr	r3, [pc, #788]	; (8005ecc <UART_SetConfig+0x384>)
 8005bb8:	429a      	cmp	r2, r3
 8005bba:	d004      	beq.n	8005bc6 <UART_SetConfig+0x7e>
 8005bbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bbe:	681a      	ldr	r2, [r3, #0]
 8005bc0:	4bc3      	ldr	r3, [pc, #780]	; (8005ed0 <UART_SetConfig+0x388>)
 8005bc2:	429a      	cmp	r2, r3
 8005bc4:	d103      	bne.n	8005bce <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005bc6:	f7fe f92f 	bl	8003e28 <HAL_RCC_GetPCLK2Freq>
 8005bca:	6778      	str	r0, [r7, #116]	; 0x74
 8005bcc:	e002      	b.n	8005bd4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005bce:	f7fe f917 	bl	8003e00 <HAL_RCC_GetPCLK1Freq>
 8005bd2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005bd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bd6:	69db      	ldr	r3, [r3, #28]
 8005bd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005bdc:	f040 80b6 	bne.w	8005d4c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005be0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005be2:	461c      	mov	r4, r3
 8005be4:	f04f 0500 	mov.w	r5, #0
 8005be8:	4622      	mov	r2, r4
 8005bea:	462b      	mov	r3, r5
 8005bec:	1891      	adds	r1, r2, r2
 8005bee:	6439      	str	r1, [r7, #64]	; 0x40
 8005bf0:	415b      	adcs	r3, r3
 8005bf2:	647b      	str	r3, [r7, #68]	; 0x44
 8005bf4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005bf8:	1912      	adds	r2, r2, r4
 8005bfa:	eb45 0303 	adc.w	r3, r5, r3
 8005bfe:	f04f 0000 	mov.w	r0, #0
 8005c02:	f04f 0100 	mov.w	r1, #0
 8005c06:	00d9      	lsls	r1, r3, #3
 8005c08:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005c0c:	00d0      	lsls	r0, r2, #3
 8005c0e:	4602      	mov	r2, r0
 8005c10:	460b      	mov	r3, r1
 8005c12:	1911      	adds	r1, r2, r4
 8005c14:	6639      	str	r1, [r7, #96]	; 0x60
 8005c16:	416b      	adcs	r3, r5
 8005c18:	667b      	str	r3, [r7, #100]	; 0x64
 8005c1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	461a      	mov	r2, r3
 8005c20:	f04f 0300 	mov.w	r3, #0
 8005c24:	1891      	adds	r1, r2, r2
 8005c26:	63b9      	str	r1, [r7, #56]	; 0x38
 8005c28:	415b      	adcs	r3, r3
 8005c2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c2c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005c30:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005c34:	f7fa fada 	bl	80001ec <__aeabi_uldivmod>
 8005c38:	4602      	mov	r2, r0
 8005c3a:	460b      	mov	r3, r1
 8005c3c:	4ba5      	ldr	r3, [pc, #660]	; (8005ed4 <UART_SetConfig+0x38c>)
 8005c3e:	fba3 2302 	umull	r2, r3, r3, r2
 8005c42:	095b      	lsrs	r3, r3, #5
 8005c44:	011e      	lsls	r6, r3, #4
 8005c46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c48:	461c      	mov	r4, r3
 8005c4a:	f04f 0500 	mov.w	r5, #0
 8005c4e:	4622      	mov	r2, r4
 8005c50:	462b      	mov	r3, r5
 8005c52:	1891      	adds	r1, r2, r2
 8005c54:	6339      	str	r1, [r7, #48]	; 0x30
 8005c56:	415b      	adcs	r3, r3
 8005c58:	637b      	str	r3, [r7, #52]	; 0x34
 8005c5a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005c5e:	1912      	adds	r2, r2, r4
 8005c60:	eb45 0303 	adc.w	r3, r5, r3
 8005c64:	f04f 0000 	mov.w	r0, #0
 8005c68:	f04f 0100 	mov.w	r1, #0
 8005c6c:	00d9      	lsls	r1, r3, #3
 8005c6e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005c72:	00d0      	lsls	r0, r2, #3
 8005c74:	4602      	mov	r2, r0
 8005c76:	460b      	mov	r3, r1
 8005c78:	1911      	adds	r1, r2, r4
 8005c7a:	65b9      	str	r1, [r7, #88]	; 0x58
 8005c7c:	416b      	adcs	r3, r5
 8005c7e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005c80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c82:	685b      	ldr	r3, [r3, #4]
 8005c84:	461a      	mov	r2, r3
 8005c86:	f04f 0300 	mov.w	r3, #0
 8005c8a:	1891      	adds	r1, r2, r2
 8005c8c:	62b9      	str	r1, [r7, #40]	; 0x28
 8005c8e:	415b      	adcs	r3, r3
 8005c90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c92:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005c96:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005c9a:	f7fa faa7 	bl	80001ec <__aeabi_uldivmod>
 8005c9e:	4602      	mov	r2, r0
 8005ca0:	460b      	mov	r3, r1
 8005ca2:	4b8c      	ldr	r3, [pc, #560]	; (8005ed4 <UART_SetConfig+0x38c>)
 8005ca4:	fba3 1302 	umull	r1, r3, r3, r2
 8005ca8:	095b      	lsrs	r3, r3, #5
 8005caa:	2164      	movs	r1, #100	; 0x64
 8005cac:	fb01 f303 	mul.w	r3, r1, r3
 8005cb0:	1ad3      	subs	r3, r2, r3
 8005cb2:	00db      	lsls	r3, r3, #3
 8005cb4:	3332      	adds	r3, #50	; 0x32
 8005cb6:	4a87      	ldr	r2, [pc, #540]	; (8005ed4 <UART_SetConfig+0x38c>)
 8005cb8:	fba2 2303 	umull	r2, r3, r2, r3
 8005cbc:	095b      	lsrs	r3, r3, #5
 8005cbe:	005b      	lsls	r3, r3, #1
 8005cc0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005cc4:	441e      	add	r6, r3
 8005cc6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005cc8:	4618      	mov	r0, r3
 8005cca:	f04f 0100 	mov.w	r1, #0
 8005cce:	4602      	mov	r2, r0
 8005cd0:	460b      	mov	r3, r1
 8005cd2:	1894      	adds	r4, r2, r2
 8005cd4:	623c      	str	r4, [r7, #32]
 8005cd6:	415b      	adcs	r3, r3
 8005cd8:	627b      	str	r3, [r7, #36]	; 0x24
 8005cda:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005cde:	1812      	adds	r2, r2, r0
 8005ce0:	eb41 0303 	adc.w	r3, r1, r3
 8005ce4:	f04f 0400 	mov.w	r4, #0
 8005ce8:	f04f 0500 	mov.w	r5, #0
 8005cec:	00dd      	lsls	r5, r3, #3
 8005cee:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005cf2:	00d4      	lsls	r4, r2, #3
 8005cf4:	4622      	mov	r2, r4
 8005cf6:	462b      	mov	r3, r5
 8005cf8:	1814      	adds	r4, r2, r0
 8005cfa:	653c      	str	r4, [r7, #80]	; 0x50
 8005cfc:	414b      	adcs	r3, r1
 8005cfe:	657b      	str	r3, [r7, #84]	; 0x54
 8005d00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	461a      	mov	r2, r3
 8005d06:	f04f 0300 	mov.w	r3, #0
 8005d0a:	1891      	adds	r1, r2, r2
 8005d0c:	61b9      	str	r1, [r7, #24]
 8005d0e:	415b      	adcs	r3, r3
 8005d10:	61fb      	str	r3, [r7, #28]
 8005d12:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005d16:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005d1a:	f7fa fa67 	bl	80001ec <__aeabi_uldivmod>
 8005d1e:	4602      	mov	r2, r0
 8005d20:	460b      	mov	r3, r1
 8005d22:	4b6c      	ldr	r3, [pc, #432]	; (8005ed4 <UART_SetConfig+0x38c>)
 8005d24:	fba3 1302 	umull	r1, r3, r3, r2
 8005d28:	095b      	lsrs	r3, r3, #5
 8005d2a:	2164      	movs	r1, #100	; 0x64
 8005d2c:	fb01 f303 	mul.w	r3, r1, r3
 8005d30:	1ad3      	subs	r3, r2, r3
 8005d32:	00db      	lsls	r3, r3, #3
 8005d34:	3332      	adds	r3, #50	; 0x32
 8005d36:	4a67      	ldr	r2, [pc, #412]	; (8005ed4 <UART_SetConfig+0x38c>)
 8005d38:	fba2 2303 	umull	r2, r3, r2, r3
 8005d3c:	095b      	lsrs	r3, r3, #5
 8005d3e:	f003 0207 	and.w	r2, r3, #7
 8005d42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4432      	add	r2, r6
 8005d48:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005d4a:	e0b9      	b.n	8005ec0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005d4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d4e:	461c      	mov	r4, r3
 8005d50:	f04f 0500 	mov.w	r5, #0
 8005d54:	4622      	mov	r2, r4
 8005d56:	462b      	mov	r3, r5
 8005d58:	1891      	adds	r1, r2, r2
 8005d5a:	6139      	str	r1, [r7, #16]
 8005d5c:	415b      	adcs	r3, r3
 8005d5e:	617b      	str	r3, [r7, #20]
 8005d60:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005d64:	1912      	adds	r2, r2, r4
 8005d66:	eb45 0303 	adc.w	r3, r5, r3
 8005d6a:	f04f 0000 	mov.w	r0, #0
 8005d6e:	f04f 0100 	mov.w	r1, #0
 8005d72:	00d9      	lsls	r1, r3, #3
 8005d74:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005d78:	00d0      	lsls	r0, r2, #3
 8005d7a:	4602      	mov	r2, r0
 8005d7c:	460b      	mov	r3, r1
 8005d7e:	eb12 0804 	adds.w	r8, r2, r4
 8005d82:	eb43 0905 	adc.w	r9, r3, r5
 8005d86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	f04f 0100 	mov.w	r1, #0
 8005d90:	f04f 0200 	mov.w	r2, #0
 8005d94:	f04f 0300 	mov.w	r3, #0
 8005d98:	008b      	lsls	r3, r1, #2
 8005d9a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005d9e:	0082      	lsls	r2, r0, #2
 8005da0:	4640      	mov	r0, r8
 8005da2:	4649      	mov	r1, r9
 8005da4:	f7fa fa22 	bl	80001ec <__aeabi_uldivmod>
 8005da8:	4602      	mov	r2, r0
 8005daa:	460b      	mov	r3, r1
 8005dac:	4b49      	ldr	r3, [pc, #292]	; (8005ed4 <UART_SetConfig+0x38c>)
 8005dae:	fba3 2302 	umull	r2, r3, r3, r2
 8005db2:	095b      	lsrs	r3, r3, #5
 8005db4:	011e      	lsls	r6, r3, #4
 8005db6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005db8:	4618      	mov	r0, r3
 8005dba:	f04f 0100 	mov.w	r1, #0
 8005dbe:	4602      	mov	r2, r0
 8005dc0:	460b      	mov	r3, r1
 8005dc2:	1894      	adds	r4, r2, r2
 8005dc4:	60bc      	str	r4, [r7, #8]
 8005dc6:	415b      	adcs	r3, r3
 8005dc8:	60fb      	str	r3, [r7, #12]
 8005dca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005dce:	1812      	adds	r2, r2, r0
 8005dd0:	eb41 0303 	adc.w	r3, r1, r3
 8005dd4:	f04f 0400 	mov.w	r4, #0
 8005dd8:	f04f 0500 	mov.w	r5, #0
 8005ddc:	00dd      	lsls	r5, r3, #3
 8005dde:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005de2:	00d4      	lsls	r4, r2, #3
 8005de4:	4622      	mov	r2, r4
 8005de6:	462b      	mov	r3, r5
 8005de8:	1814      	adds	r4, r2, r0
 8005dea:	64bc      	str	r4, [r7, #72]	; 0x48
 8005dec:	414b      	adcs	r3, r1
 8005dee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005df0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	4618      	mov	r0, r3
 8005df6:	f04f 0100 	mov.w	r1, #0
 8005dfa:	f04f 0200 	mov.w	r2, #0
 8005dfe:	f04f 0300 	mov.w	r3, #0
 8005e02:	008b      	lsls	r3, r1, #2
 8005e04:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005e08:	0082      	lsls	r2, r0, #2
 8005e0a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005e0e:	f7fa f9ed 	bl	80001ec <__aeabi_uldivmod>
 8005e12:	4602      	mov	r2, r0
 8005e14:	460b      	mov	r3, r1
 8005e16:	4b2f      	ldr	r3, [pc, #188]	; (8005ed4 <UART_SetConfig+0x38c>)
 8005e18:	fba3 1302 	umull	r1, r3, r3, r2
 8005e1c:	095b      	lsrs	r3, r3, #5
 8005e1e:	2164      	movs	r1, #100	; 0x64
 8005e20:	fb01 f303 	mul.w	r3, r1, r3
 8005e24:	1ad3      	subs	r3, r2, r3
 8005e26:	011b      	lsls	r3, r3, #4
 8005e28:	3332      	adds	r3, #50	; 0x32
 8005e2a:	4a2a      	ldr	r2, [pc, #168]	; (8005ed4 <UART_SetConfig+0x38c>)
 8005e2c:	fba2 2303 	umull	r2, r3, r2, r3
 8005e30:	095b      	lsrs	r3, r3, #5
 8005e32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005e36:	441e      	add	r6, r3
 8005e38:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	f04f 0100 	mov.w	r1, #0
 8005e40:	4602      	mov	r2, r0
 8005e42:	460b      	mov	r3, r1
 8005e44:	1894      	adds	r4, r2, r2
 8005e46:	603c      	str	r4, [r7, #0]
 8005e48:	415b      	adcs	r3, r3
 8005e4a:	607b      	str	r3, [r7, #4]
 8005e4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e50:	1812      	adds	r2, r2, r0
 8005e52:	eb41 0303 	adc.w	r3, r1, r3
 8005e56:	f04f 0400 	mov.w	r4, #0
 8005e5a:	f04f 0500 	mov.w	r5, #0
 8005e5e:	00dd      	lsls	r5, r3, #3
 8005e60:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005e64:	00d4      	lsls	r4, r2, #3
 8005e66:	4622      	mov	r2, r4
 8005e68:	462b      	mov	r3, r5
 8005e6a:	eb12 0a00 	adds.w	sl, r2, r0
 8005e6e:	eb43 0b01 	adc.w	fp, r3, r1
 8005e72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e74:	685b      	ldr	r3, [r3, #4]
 8005e76:	4618      	mov	r0, r3
 8005e78:	f04f 0100 	mov.w	r1, #0
 8005e7c:	f04f 0200 	mov.w	r2, #0
 8005e80:	f04f 0300 	mov.w	r3, #0
 8005e84:	008b      	lsls	r3, r1, #2
 8005e86:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005e8a:	0082      	lsls	r2, r0, #2
 8005e8c:	4650      	mov	r0, sl
 8005e8e:	4659      	mov	r1, fp
 8005e90:	f7fa f9ac 	bl	80001ec <__aeabi_uldivmod>
 8005e94:	4602      	mov	r2, r0
 8005e96:	460b      	mov	r3, r1
 8005e98:	4b0e      	ldr	r3, [pc, #56]	; (8005ed4 <UART_SetConfig+0x38c>)
 8005e9a:	fba3 1302 	umull	r1, r3, r3, r2
 8005e9e:	095b      	lsrs	r3, r3, #5
 8005ea0:	2164      	movs	r1, #100	; 0x64
 8005ea2:	fb01 f303 	mul.w	r3, r1, r3
 8005ea6:	1ad3      	subs	r3, r2, r3
 8005ea8:	011b      	lsls	r3, r3, #4
 8005eaa:	3332      	adds	r3, #50	; 0x32
 8005eac:	4a09      	ldr	r2, [pc, #36]	; (8005ed4 <UART_SetConfig+0x38c>)
 8005eae:	fba2 2303 	umull	r2, r3, r2, r3
 8005eb2:	095b      	lsrs	r3, r3, #5
 8005eb4:	f003 020f 	and.w	r2, r3, #15
 8005eb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4432      	add	r2, r6
 8005ebe:	609a      	str	r2, [r3, #8]
}
 8005ec0:	bf00      	nop
 8005ec2:	377c      	adds	r7, #124	; 0x7c
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005eca:	bf00      	nop
 8005ecc:	40011000 	.word	0x40011000
 8005ed0:	40011400 	.word	0x40011400
 8005ed4:	51eb851f 	.word	0x51eb851f

08005ed8 <__libc_init_array>:
 8005ed8:	b570      	push	{r4, r5, r6, lr}
 8005eda:	4d0d      	ldr	r5, [pc, #52]	; (8005f10 <__libc_init_array+0x38>)
 8005edc:	4c0d      	ldr	r4, [pc, #52]	; (8005f14 <__libc_init_array+0x3c>)
 8005ede:	1b64      	subs	r4, r4, r5
 8005ee0:	10a4      	asrs	r4, r4, #2
 8005ee2:	2600      	movs	r6, #0
 8005ee4:	42a6      	cmp	r6, r4
 8005ee6:	d109      	bne.n	8005efc <__libc_init_array+0x24>
 8005ee8:	4d0b      	ldr	r5, [pc, #44]	; (8005f18 <__libc_init_array+0x40>)
 8005eea:	4c0c      	ldr	r4, [pc, #48]	; (8005f1c <__libc_init_array+0x44>)
 8005eec:	f000 f820 	bl	8005f30 <_init>
 8005ef0:	1b64      	subs	r4, r4, r5
 8005ef2:	10a4      	asrs	r4, r4, #2
 8005ef4:	2600      	movs	r6, #0
 8005ef6:	42a6      	cmp	r6, r4
 8005ef8:	d105      	bne.n	8005f06 <__libc_init_array+0x2e>
 8005efa:	bd70      	pop	{r4, r5, r6, pc}
 8005efc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f00:	4798      	blx	r3
 8005f02:	3601      	adds	r6, #1
 8005f04:	e7ee      	b.n	8005ee4 <__libc_init_array+0xc>
 8005f06:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f0a:	4798      	blx	r3
 8005f0c:	3601      	adds	r6, #1
 8005f0e:	e7f2      	b.n	8005ef6 <__libc_init_array+0x1e>
 8005f10:	08005f88 	.word	0x08005f88
 8005f14:	08005f88 	.word	0x08005f88
 8005f18:	08005f88 	.word	0x08005f88
 8005f1c:	08005f8c 	.word	0x08005f8c

08005f20 <memset>:
 8005f20:	4402      	add	r2, r0
 8005f22:	4603      	mov	r3, r0
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d100      	bne.n	8005f2a <memset+0xa>
 8005f28:	4770      	bx	lr
 8005f2a:	f803 1b01 	strb.w	r1, [r3], #1
 8005f2e:	e7f9      	b.n	8005f24 <memset+0x4>

08005f30 <_init>:
 8005f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f32:	bf00      	nop
 8005f34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f36:	bc08      	pop	{r3}
 8005f38:	469e      	mov	lr, r3
 8005f3a:	4770      	bx	lr

08005f3c <_fini>:
 8005f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f3e:	bf00      	nop
 8005f40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f42:	bc08      	pop	{r3}
 8005f44:	469e      	mov	lr, r3
 8005f46:	4770      	bx	lr
